{"filename": "src/notion-blocks-parser.ts", "chunked_list": ["import type {\n  AudioBlock,\n  Block,\n  Blocks,\n  BulletedListItemBlock,\n  CalloutBlock,\n  CodeBlock,\n  EmbedBlock,\n  FileBlock,\n  HeadingBlock,", "  FileBlock,\n  HeadingBlock,\n  ImageBlock,\n  LinkPreviewBlock,\n  LinkToPageBlock,\n  NumberedListItemBlock,\n  PDFBlock,\n  ParagraphBlock,\n  QuoteBlock,\n  RichText,", "  QuoteBlock,\n  RichText,\n  ToDoBlock,\n  VideoBlock,\n} from '@notion-stuff/v4-types'\nimport { z } from 'zod'\nimport NotionBlocksMarkdownParser from './notion-blocks-md-parser'\nimport NotionBlocksHtmlParser from './notion-blocks-html-parser'\nimport NotionBlocksPlaintextParser from './notion-blocks-plaintext-parser'\n", "import NotionBlocksPlaintextParser from './notion-blocks-plaintext-parser'\n\nconst blockRenderers = z.object({\n  AudioBlock: z.function().returns(z.string()),\n  BulletedListItemBlock: z.function().returns(z.string()),\n  CalloutBlock: z.function().returns(z.string()),\n  CodeBlock: z.function().returns(z.string()),\n  EmbedBlock: z.function().returns(z.string()),\n  FileBlock: z.function().returns(z.string()),\n  HeadingBlock: z.function().returns(z.string()),", "  FileBlock: z.function().returns(z.string()),\n  HeadingBlock: z.function().returns(z.string()),\n  ImageBlock: z.function().returns(z.string()),\n  LinkToPageBlock: z.function().returns(z.string()),\n  NumberedListItemBlock: z.function().returns(z.string()),\n  ParagraphBlock: z.function().returns(z.string()),\n  PDFBlock: z.function().returns(z.string()),\n  QuoteBlock: z.function().returns(z.string()),\n  RichText: z.function().returns(z.string()),\n  RichTextEquation: z.function().returns(z.string()),", "  RichText: z.function().returns(z.string()),\n  RichTextEquation: z.function().returns(z.string()),\n  RichTextMention: z.function().returns(z.string()),\n  RichTextText: z.function().returns(z.string()),\n  ToDoBlock: z.function().returns(z.string()),\n  ToggleBlock: z.function().returns(z.string()),\n  VideoBlock: z.function().returns(z.string()),\n  LinkPreviewBlock: z.function().returns(z.string()),\n}).partial()\n\nexport type BlockRenderers = z.infer<typeof blockRenderers>\n", "}).partial()\n\nexport type BlockRenderers = z.infer<typeof blockRenderers>\n\ntype Renderer = (block: Block | RichText[], ...args: unknown[]) => string\ntype CustomRenderer = (block: Block | RichText[], ...args: unknown[]) => string | null\n\nfunction modularize(\n  custom: CustomRenderer | undefined,\n  def: Renderer): Renderer {\n  return function render(block: Block | RichText[], ...args: unknown[]) {", "  return function render(block: Block | RichText[], ...args: unknown[]) {\n    if (custom) {\n      const customRender = custom(block, ...args)\n      if (customRender !== null)\n        return customRender\n    }\n    return def(block, ...args)\n  }\n}\n\nexport default class NotionBlocksParser {\n  mdParser: NotionBlocksMarkdownParser\n  htmlParser: NotionBlocksHtmlParser\n  plainTextParser: NotionBlocksPlaintextParser\n  debug: boolean\n\n  constructor({ blockRenderers, debug }: { blockRenderers?: BlockRenderers; debug?: boolean }) {\n    this.mdParser = new NotionBlocksMarkdownParser()\n    this.plainTextParser = new NotionBlocksPlaintextParser()\n    this.debug = debug || false\n\n    this.mdParser.parseParagraph = modularize(\n      blockRenderers?.ParagraphBlock,\n      this.mdParser.parseParagraph.bind(this.mdParser) as Renderer,\n    ) as (block: ParagraphBlock) => string\n\n    this.mdParser.parseCodeBlock = modularize(\n      blockRenderers?.CodeBlock,\n      this.mdParser.parseCodeBlock.bind(this.mdParser) as Renderer,\n    ) as (block: CodeBlock) => string\n\n    this.mdParser.parseQuoteBlock = modularize(\n      blockRenderers?.QuoteBlock,\n      this.mdParser.parseQuoteBlock.bind(this.mdParser) as Renderer,\n    ) as (block: QuoteBlock) => string\n\n    this.mdParser.parseCalloutBlock = modularize(\n      blockRenderers?.CalloutBlock,\n      this.mdParser.parseCalloutBlock.bind(this.mdParser) as Renderer,\n    ) as (block: CalloutBlock) => string\n\n    this.mdParser.parseHeading = modularize(\n      blockRenderers?.HeadingBlock,\n      this.mdParser.parseHeading.bind(this.mdParser) as Renderer,\n    ) as (block: HeadingBlock) => string\n\n    this.mdParser.parseBulletedListItems = modularize(\n      blockRenderers?.BulletedListItemBlock,\n      this.mdParser.parseBulletedListItems.bind(this.mdParser) as Renderer,\n    ) as (block: BulletedListItemBlock) => string\n\n    this.mdParser.parseLinkToPageBlock = modularize(\n      blockRenderers?.LinkToPageBlock,\n      this.mdParser.parseLinkToPageBlock.bind(this.mdParser) as Renderer,\n    ) as (block: LinkToPageBlock) => string\n\n    this.mdParser.parseNumberedListItems = modularize(\n      blockRenderers?.NumberedListItemBlock,\n      this.mdParser.parseNumberedListItems.bind(this.mdParser) as Renderer,\n    ) as (block: NumberedListItemBlock) => string\n\n    this.mdParser.parseTodoBlock = modularize(\n      blockRenderers?.ToDoBlock,\n      this.mdParser.parseTodoBlock.bind(this.mdParser) as Renderer,\n    ) as (block: ToDoBlock) => string\n\n    this.mdParser.parseImageBlock = modularize(\n      blockRenderers?.ImageBlock,\n      this.mdParser.parseImageBlock.bind(this.mdParser) as Renderer,\n    ) as (block: ImageBlock) => string\n\n    this.mdParser.parseEmbedBlock = modularize(\n      blockRenderers?.EmbedBlock,\n      this.mdParser.parseEmbedBlock.bind(this.mdParser) as Renderer,\n    ) as (block: EmbedBlock) => string\n\n    this.mdParser.parseAudioBlock = modularize(\n      blockRenderers?.AudioBlock,\n      this.mdParser.parseAudioBlock.bind(this.mdParser) as Renderer,\n    ) as (block: AudioBlock) => string\n\n    this.mdParser.parseVideoBlock = modularize(\n      blockRenderers?.VideoBlock,\n      this.mdParser.parseVideoBlock.bind(this.mdParser) as Renderer,\n    ) as (block: VideoBlock) => string\n\n    this.mdParser.parseFileBlock = modularize(\n      blockRenderers?.FileBlock,\n      this.mdParser.parseFileBlock.bind(this.mdParser) as Renderer,\n    ) as (block: FileBlock) => string\n\n    this.mdParser.parsePdfBlock = modularize(\n      blockRenderers?.PDFBlock,\n      this.mdParser.parsePdfBlock.bind(this.mdParser) as Renderer,\n    ) as (block: PDFBlock) => string\n\n    this.mdParser.parseLinkPreview = modularize(\n      blockRenderers?.LinkPreviewBlock,\n      this.mdParser.parseLinkPreview.bind(this.mdParser) as Renderer,\n    ) as (block: LinkPreviewBlock) => string\n\n    // Warning: this parser is used in many of the other parsers internally.\n    // Modding it could affect the others unexpectedly.\n    this.mdParser.parseRichTexts = modularize(\n      blockRenderers?.RichText,\n      this.mdParser.parseRichTexts.bind(this.mdParser) as Renderer,\n    ) as (block: RichText[]) => string\n\n    this.htmlParser = new NotionBlocksHtmlParser(this.mdParser, this.debug)\n  }\n\n  markdownToPlainText(markdown: string): string {\n    return this.plainTextParser.parse(markdown)\n  }\n\n  blocksToPlainText(blocks: Blocks, depth?: number): string {\n    return this.plainTextParser.parse(\n      this.blocksToMarkdown(blocks, depth))\n  }\n\n  blocksToMarkdown(blocks: Blocks, depth?: number): string {\n    return this.mdParser.parse(blocks, depth)\n  }\n\n  blocksToHtml(blocks: Blocks): string {\n    return this.htmlParser.parse(blocks)\n  }\n\n  static parseRichText(richTexts: RichText[]) {\n    const tempParser = new NotionBlocksMarkdownParser()\n    return tempParser.parseRichTexts(richTexts)\n  }\n}\n", "export default class NotionBlocksParser {\n  mdParser: NotionBlocksMarkdownParser\n  htmlParser: NotionBlocksHtmlParser\n  plainTextParser: NotionBlocksPlaintextParser\n  debug: boolean\n\n  constructor({ blockRenderers, debug }: { blockRenderers?: BlockRenderers; debug?: boolean }) {\n    this.mdParser = new NotionBlocksMarkdownParser()\n    this.plainTextParser = new NotionBlocksPlaintextParser()\n    this.debug = debug || false\n\n    this.mdParser.parseParagraph = modularize(\n      blockRenderers?.ParagraphBlock,\n      this.mdParser.parseParagraph.bind(this.mdParser) as Renderer,\n    ) as (block: ParagraphBlock) => string\n\n    this.mdParser.parseCodeBlock = modularize(\n      blockRenderers?.CodeBlock,\n      this.mdParser.parseCodeBlock.bind(this.mdParser) as Renderer,\n    ) as (block: CodeBlock) => string\n\n    this.mdParser.parseQuoteBlock = modularize(\n      blockRenderers?.QuoteBlock,\n      this.mdParser.parseQuoteBlock.bind(this.mdParser) as Renderer,\n    ) as (block: QuoteBlock) => string\n\n    this.mdParser.parseCalloutBlock = modularize(\n      blockRenderers?.CalloutBlock,\n      this.mdParser.parseCalloutBlock.bind(this.mdParser) as Renderer,\n    ) as (block: CalloutBlock) => string\n\n    this.mdParser.parseHeading = modularize(\n      blockRenderers?.HeadingBlock,\n      this.mdParser.parseHeading.bind(this.mdParser) as Renderer,\n    ) as (block: HeadingBlock) => string\n\n    this.mdParser.parseBulletedListItems = modularize(\n      blockRenderers?.BulletedListItemBlock,\n      this.mdParser.parseBulletedListItems.bind(this.mdParser) as Renderer,\n    ) as (block: BulletedListItemBlock) => string\n\n    this.mdParser.parseLinkToPageBlock = modularize(\n      blockRenderers?.LinkToPageBlock,\n      this.mdParser.parseLinkToPageBlock.bind(this.mdParser) as Renderer,\n    ) as (block: LinkToPageBlock) => string\n\n    this.mdParser.parseNumberedListItems = modularize(\n      blockRenderers?.NumberedListItemBlock,\n      this.mdParser.parseNumberedListItems.bind(this.mdParser) as Renderer,\n    ) as (block: NumberedListItemBlock) => string\n\n    this.mdParser.parseTodoBlock = modularize(\n      blockRenderers?.ToDoBlock,\n      this.mdParser.parseTodoBlock.bind(this.mdParser) as Renderer,\n    ) as (block: ToDoBlock) => string\n\n    this.mdParser.parseImageBlock = modularize(\n      blockRenderers?.ImageBlock,\n      this.mdParser.parseImageBlock.bind(this.mdParser) as Renderer,\n    ) as (block: ImageBlock) => string\n\n    this.mdParser.parseEmbedBlock = modularize(\n      blockRenderers?.EmbedBlock,\n      this.mdParser.parseEmbedBlock.bind(this.mdParser) as Renderer,\n    ) as (block: EmbedBlock) => string\n\n    this.mdParser.parseAudioBlock = modularize(\n      blockRenderers?.AudioBlock,\n      this.mdParser.parseAudioBlock.bind(this.mdParser) as Renderer,\n    ) as (block: AudioBlock) => string\n\n    this.mdParser.parseVideoBlock = modularize(\n      blockRenderers?.VideoBlock,\n      this.mdParser.parseVideoBlock.bind(this.mdParser) as Renderer,\n    ) as (block: VideoBlock) => string\n\n    this.mdParser.parseFileBlock = modularize(\n      blockRenderers?.FileBlock,\n      this.mdParser.parseFileBlock.bind(this.mdParser) as Renderer,\n    ) as (block: FileBlock) => string\n\n    this.mdParser.parsePdfBlock = modularize(\n      blockRenderers?.PDFBlock,\n      this.mdParser.parsePdfBlock.bind(this.mdParser) as Renderer,\n    ) as (block: PDFBlock) => string\n\n    this.mdParser.parseLinkPreview = modularize(\n      blockRenderers?.LinkPreviewBlock,\n      this.mdParser.parseLinkPreview.bind(this.mdParser) as Renderer,\n    ) as (block: LinkPreviewBlock) => string\n\n    // Warning: this parser is used in many of the other parsers internally.\n    // Modding it could affect the others unexpectedly.\n    this.mdParser.parseRichTexts = modularize(\n      blockRenderers?.RichText,\n      this.mdParser.parseRichTexts.bind(this.mdParser) as Renderer,\n    ) as (block: RichText[]) => string\n\n    this.htmlParser = new NotionBlocksHtmlParser(this.mdParser, this.debug)\n  }\n\n  markdownToPlainText(markdown: string): string {\n    return this.plainTextParser.parse(markdown)\n  }\n\n  blocksToPlainText(blocks: Blocks, depth?: number): string {\n    return this.plainTextParser.parse(\n      this.blocksToMarkdown(blocks, depth))\n  }\n\n  blocksToMarkdown(blocks: Blocks, depth?: number): string {\n    return this.mdParser.parse(blocks, depth)\n  }\n\n  blocksToHtml(blocks: Blocks): string {\n    return this.htmlParser.parse(blocks)\n  }\n\n  static parseRichText(richTexts: RichText[]) {\n    const tempParser = new NotionBlocksMarkdownParser()\n    return tempParser.parseRichTexts(richTexts)\n  }\n}\n"]}
{"filename": "src/notion-blocks-plaintext-parser.ts", "chunked_list": ["import type { Renderer as MarkedRenderer } from 'marked'\nimport { marked } from 'marked'\nimport _ from 'lodash'\n\nconst block = (text: string) => `${text}\\n\\n`\nconst escapeBlock = (text: string) => `${_.escape(text)}\\n\\n`\nconst line = (text: string) => `${text}\\n`\nconst inline = (text: string) => text\nconst newline = () => '\\n'\nconst empty = () => ''", "const newline = () => '\\n'\nconst empty = () => ''\n\nexport default class NotionBlocksPlaintextParser {\n  renderer: MarkedRenderer\n  markedOptions\n\n  constructor() {\n    this.renderer = {\n      // Block elements\n      code: escapeBlock,\n      blockquote: block,\n      html: empty,\n      heading: block,\n      hr: newline,\n      list: text => block(text.trim()),\n      listitem: line,\n      checkbox: empty,\n      paragraph: block,\n      table: (header, body) => line(header + body),\n      tablerow: text => line(text.trim()),\n      tablecell: text => `${text} `,\n      // Inline elements\n      strong: inline,\n      em: inline,\n      codespan: inline,\n      br: newline,\n      del: inline,\n      link: (_0, _1, text) => text,\n      image: (_0, _1, text) => text,\n      text: inline,\n      // etc.\n      options: {},\n    }\n    this.markedOptions = {\n      renderer: this.renderer,\n      pedantic: false,\n      mangle: false,\n      gfm: false,\n      extensions: undefined,\n      breaks: false,\n      headerIds: false,\n      sanitize: false,\n      smartypants: false,\n      xhtml: false,\n    }\n  }\n\n  parse(markdown: string) {\n    const unmarked = marked(markdown, this.markedOptions)\n    const unescaped = _.unescape(unmarked)\n    const trimmed = _.trim(unescaped)\n    return trimmed\n  }\n}\n\n/* Much thanks to Eric Buss for making: https://github.com/ejrbuss/markdown-to-txt\nFrom which the Marked Renderer and utilities were copied.\n*/\n"]}
{"filename": "src/notion-logger.ts", "chunked_list": ["/* eslint-disable no-console */\nimport type { Stats } from './types'\n\nconst START = 'request start'\nconst SUCCESS = 'request success'\nconst FAILURE = 'request fail'\n\ntype ExtraInfo = Record<string, unknown>\n\nexport default class NotionLogger {\n  debug: boolean\n  stats: Pick<Stats,\n    'totalAPICalls' |\n    'failedCalls' |\n    'succeededCalls'>\n\n  constructor({ debug = false }: { debug: boolean }) {\n    this.debug = debug\n    this.stats = {\n      totalAPICalls: 0,\n      succeededCalls: 0,\n      failedCalls: 0,\n    }\n  }\n\n  log(logLevel: string, message: string, extraInfo: ExtraInfo): void {", "export default class NotionLogger {\n  debug: boolean\n  stats: Pick<Stats,\n    'totalAPICalls' |\n    'failedCalls' |\n    'succeededCalls'>\n\n  constructor({ debug = false }: { debug: boolean }) {\n    this.debug = debug\n    this.stats = {\n      totalAPICalls: 0,\n      succeededCalls: 0,\n      failedCalls: 0,\n    }\n  }\n\n  log(logLevel: string, message: string, extraInfo: ExtraInfo): void {", "    if (this.debug) {\n      console.log('logLevel:', logLevel)\n      console.log('message:', message)\n      console.log('extraInfo:', extraInfo)\n    }\n    this.handleMessage(message)\n  }\n\n  handleMessage(message: string): void {\n    switch (message) {\n      case START:\n        this.stats.totalAPICalls++\n        break\n      case SUCCESS:\n        this.stats.succeededCalls++\n        break\n      case FAILURE:\n        this.stats.failedCalls++\n        break\n    }\n  }\n\n  handleLogLevel(logLevel: string): void {}\n\n  handleExtraInfo(extraInfo: ExtraInfo): void {}\n\n  resetStats(): void {\n    this.stats = {\n      totalAPICalls: 0,\n      failedCalls: 0,\n      succeededCalls: 0,\n    }\n  }\n}\n"]}
{"filename": "src/types.ts", "chunked_list": ["import type {\n  PageObjectResponse,\n  PersonUserObjectResponse,\n  RichTextItemResponse,\n} from '@notionhq/client/build/src/api-endpoints'\n\nimport type { Blocks } from '@notion-stuff/v4-types'\nimport type { Client } from '@notionhq/client'\nimport type NotionBlocksParser from './notion-blocks-parser'\n\ndeclare global {", "import type NotionBlocksParser from './notion-blocks-parser'\n\ndeclare global {\n  interface String {\n    route: string\n    slug: string\n  }\n}\n\nexport type Properties = Partial<PageObjectResponse['properties']>\n", "export type Properties = Partial<PageObjectResponse['properties']>\n\nexport interface Options {\n  databaseId: string\n  notionAPIKey: string\n  debug?: boolean\n  draftMode?: boolean\n  autoUpdate?: boolean\n  refreshTimeout?: number | string // in ms or converted from human readable string\n  localCacheDirectory?: string\n  rootAlias?: string\n  quiet?: boolean\n  rootUrl?: string | URL | undefined // Used to generate full path links,\n  limiter?: { schedule: Function }\n  plugins?: Array<Plugin | UnsafePlugin>\n}\n", "export interface Stats {\n  durationSeconds: number\n  totalAPICalls: number\n  succeededCalls: number\n  failedCalls: number\n  totalPages: number\n}\n\nexport interface Content {\n  plaintext: string\n  markdown: string\n  html: string\n}\n", "export interface Content {\n  plaintext: string\n  markdown: string\n  html: string\n}\n\nexport interface CMS {\n  stages: Array<string>\n  lastUpdateTimestamp?: number\n  metadata: {\n    options?: string\n    rootUrl?: string | URL | undefined\n    databaseId: string\n    stats: Partial<Stats>\n  }\n  routes: Array<string | Array<string>>\n  tags: Array<string>\n  tagGroups: Record<string, Array<string>>\n  siteData: Record<string, Page>\n}\n", "export interface PageContent {\n  _ancestors?: PageContent[]\n  _updateNeeded?: boolean\n  name?: string\n  path?: string\n  url?: string\n  otherProps?: PageObjectResponse['properties']\n  _notion?: {\n    parent?: PageContent\n    id: string\n    last_edited_time: string\n  }\n  authors?: Array<string>\n  slug?: string\n  tags?: Array<string>\n  coverImage?: string\n  content?: Content\n}\n", "export interface Route {\n  [key: string]: PageContent\n}\n\nexport type ExtendedPageContent = PageContent & {\n  [key: string]: unknown\n}\n\nexport type Page = PageContent | (PageContent & Route) | ExtendedPageContent\n\n// Directly stolen from PageObjectResponse Record Type in notionClient/API-endpoints.ts", "export type Page = PageContent | (PageContent & Route) | ExtendedPageContent\n\n// Directly stolen from PageObjectResponse Record Type in notionClient/API-endpoints.ts\nexport interface PageObjectTitle { type: 'title'; title: Array<RichTextItemResponse>; id: string }\n\nexport interface PageObjectRelation { type: 'relation'; relation: Array<{ id: string }>; id: string }\n\nexport interface PageObjectUser {\n  type: 'people'\n  people: Array<PersonUserObjectResponse>\n  id: string\n}\n", "export interface PageMultiSelect {\n  type: 'multi_select'\n  multi_select: Array<{\n    id: string\n    name: string\n    color: string\n  }>\n  id: string\n}\n\nexport interface PageSelect {\n  type: 'select'\n  select: {\n    id: string\n    name: string\n    color: string\n  } | null\n  id: string\n}\n", "export interface PageSelect {\n  type: 'select'\n  select: {\n    id: string\n    name: string\n    color: string\n  } | null\n  id: string\n}\n\nexport interface PageRichText {\n  type: 'rich_text'\n  rich_text: Array<RichTextItemResponse>\n  id: string\n}\n", "export interface PageRichText {\n  type: 'rich_text'\n  rich_text: Array<RichTextItemResponse>\n  id: string\n}\n\nexport type Cover = { type: 'external'; external: { url: string } } | { type: 'file'; file: { url: string; expiry_time: string } } | null\n\nexport type RouteObject = [string, object]\n\nexport type PluginPassthrough = Blocks | CMS | Page | string\n", "export type RouteObject = [string, object]\n\nexport type PluginPassthrough = Blocks | CMS | Page | string\n\nexport interface PluginExecOptions {\n  debug?: boolean\n  localCacheDirectory?: string\n  notion?: Client\n}\n\nexport interface Plugin {\n  name: string\n  hook: 'import' | 'pre-tree' | 'pre-parse' | 'post-parse' | 'during-tree' | 'post-tree' | '*'\n  exec: (context: PluginPassthrough, instanceOptions?: PluginExecOptions) => PluginPassthrough\n}\n", "export interface Plugin {\n  name: string\n  hook: 'import' | 'pre-tree' | 'pre-parse' | 'post-parse' | 'during-tree' | 'post-tree' | '*'\n  exec: (context: PluginPassthrough, instanceOptions?: PluginExecOptions) => PluginPassthrough\n}\n\nexport interface UnsafePlugin {\n  parser: NotionBlocksParser\n  name: string\n  core: boolean\n  hook: 'parse' | 'import' | 'pre-tree' | 'pre-parse' | 'post-parse' | 'during-tree' | 'post-tree' | '*'\n  exec: (context: PluginPassthrough, instanceOptions?: PluginExecOptions) => PluginPassthrough\n}\n", "export interface FlatListItem {\n  _key: string\n  [pid: string]: string | Partial<FlatListItem> | unknown\n}\n\nexport type FlatList = FlatListItem[]\n"]}
{"filename": "src/notion-cms.ts", "chunked_list": ["import fs from 'node:fs'\nimport path from 'node:path'\nimport { fileURLToPath } from 'node:url'\nimport { createHash } from 'node:crypto'\nimport { Client, LogLevel, collectPaginatedAPI, isFullBlock, isFullPage } from '@notionhq/client'\nimport type {\n  BlockObjectResponse,\n  PageObjectResponse,\n  SelectPropertyItemObjectResponse,\n} from '@notionhq/client/build/src/api-endpoints'", "  SelectPropertyItemObjectResponse,\n} from '@notionhq/client/build/src/api-endpoints'\nimport type { Blocks } from '@notion-stuff/v4-types'\nimport _ from 'lodash'\nimport type { AsyncCallbackFn, WalkNode } from 'walkjs'\nimport { AsyncWalkBuilder, WalkBuilder } from 'walkjs'\nimport humanInterval from 'human-interval'\nimport { log, spinner } from '@clack/prompts'\nimport kleur from 'kleur'\nimport type {", "import kleur from 'kleur'\nimport type {\n  CMS,\n  Content,\n  Cover,\n  ExtendedPageContent,\n  FlatListItem,\n  Options,\n  Page,\n  PageContent,", "  Page,\n  PageContent,\n  PageMultiSelect,\n  PageObjectRelation,\n  PageObjectTitle,\n  PageObjectUser,\n  Plugin,\n  PluginPassthrough,\n  UnsafePlugin,\n} from './types'", "  UnsafePlugin,\n} from './types'\nimport {\n  JSONParseWithFunctions,\n  JSONStringifyWithFunctions,\n  filterAncestors,\n  routify,\n  slugify,\n  writeFile,\n} from './utilities'", "  writeFile,\n} from './utilities'\nimport NotionLogger from './notion-logger'\nimport renderer from './plugins/render'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\nconst COVER_IMAGE_REGEX = /<figure notion-figure>[\\s\\S]+<img[^>]*src=['|\"](https?:\\/\\/[^'|\"]+)(?:['|\"])/\n", "const COVER_IMAGE_REGEX = /<figure notion-figure>[\\s\\S]+<img[^>]*src=['|\"](https?:\\/\\/[^'|\"]+)(?:['|\"])/\n\nconst STEADY_PROPS = [\n  'name',\n  'Author',\n  'Published',\n  'Tags',\n  'publishDate',\n  'parent-page',\n  'sub-page',", "  'parent-page',\n  'sub-page',\n]\n\nconst clackSpinner = spinner()\n\nexport default class NotionCMS {\n  cms: CMS\n  cmsId: string\n  notionClient: Client\n  autoUpdate: boolean\n  refreshTimeout: number | string\n  draftMode: boolean\n  defaultCacheFilename: string\n  localCacheDirectory: string\n  localCacheUrl: string\n  debug: boolean | undefined\n  limiter: { schedule: Function }\n  plugins: Array<Plugin | UnsafePlugin> | undefined\n  options: Options\n  private timer: number\n  private coreRenderer: UnsafePlugin\n  private logger: NotionLogger\n  pull: () => Promise<CMS>\n  rootAlias: string\n  withinRefreshTimeout: boolean\n  quietMode: boolean\n\n  constructor({\n    databaseId,\n    notionAPIKey,\n    debug = false,\n    draftMode = false,\n    refreshTimeout = 0,\n    autoUpdate = true,\n    localCacheDirectory = './.notion-cms/',\n    rootAlias = '',\n    rootUrl = '',\n    quiet = false,\n    limiter = {\n      schedule: (func: Function) => {\n        const result = func() as unknown\n        return Promise.resolve(result)\n      },\n    },\n    plugins = [],\n  }: Options = { databaseId: '', notionAPIKey: '' }) {\n    this.timer = Date.now()\n    this.options = {\n      databaseId,\n      notionAPIKey,\n      debug,\n      draftMode,\n      refreshTimeout,\n      autoUpdate,\n      localCacheDirectory,\n      rootUrl,\n      rootAlias,\n      limiter,\n      plugins,\n      quiet,\n    }\n    this.cms = {\n      metadata: {\n        options: this._documentOptions(this.options),\n        databaseId,\n        rootUrl: rootUrl || '',\n        stats: {\n          durationSeconds: 0,\n          totalPages: 0,\n        },\n      },\n      stages: [],\n      routes: [],\n      tags: [],\n      tagGroups: {},\n      siteData: {},\n    }\n    this.cmsId = this._produceCMSIdentifier(databaseId) // Can't have multiple instances that reference the same db.\n    this.debug = debug\n    this.logger = new NotionLogger({ debug: this.debug })\n\n    this.notionClient = new Client({\n      auth: notionAPIKey,\n      logLevel: LogLevel.DEBUG,\n      logger: this.logger.log.bind(this.logger),\n    })\n    this.autoUpdate = autoUpdate\n    this.refreshTimeout\n      = (refreshTimeout && _.isString(refreshTimeout))\n        ? (humanInterval(refreshTimeout) || refreshTimeout)\n        : (refreshTimeout || 0)\n    this.draftMode = draftMode || false\n    this.localCacheDirectory = localCacheDirectory\n    this.defaultCacheFilename = `ncms-cache-${this.cmsId}.json`\n    this.localCacheUrl = path.resolve(__dirname, this.localCacheDirectory + this.defaultCacheFilename)\n    this.limiter = limiter\n    this.limiter.schedule.bind(limiter)\n\n    this.coreRenderer = renderer({ blockRenderers: {}, debug })\n    this.coreRenderer.name = 'core-renderer'\n    this.plugins = this._dedupePlugins([...plugins, this.coreRenderer])\n    this.pull = this.fetch.bind(this)\n    this.rootAlias = rootAlias\n    this.withinRefreshTimeout = false\n    this.quietMode = quiet\n  }\n\n  get data() {", "    if (_.isEmpty(this.cms.siteData))\n      return\n    return this.cms.siteData\n  }\n\n  get routes(): Array<string> {\n    const routes = [] as Array<string>\n    this.walk((node: PageContent) => {\n      if (node.path)\n        routes.push(node.path)\n    })\n    return routes\n  }\n\n  _documentOptions(options: Options): string {\n    let hex", "      if (node.path)\n        routes.push(node.path)\n    })\n    return routes\n  }\n\n  _documentOptions(options: Options): string {\n    let hex\n    try {\n      const tempOptions = _.cloneDeep(options)\n      delete tempOptions.limiter\n      const hasher = createHash('md5')\n      // Detecting Function string differences needs\n      // to be implemented using the JSONStringifyWithFunctions util.\n      const json = JSON.stringify(tempOptions)\n      hasher.update(json)\n      hex = hasher.digest('hex')\n    }", "    try {\n      const tempOptions = _.cloneDeep(options)\n      delete tempOptions.limiter\n      const hasher = createHash('md5')\n      // Detecting Function string differences needs\n      // to be implemented using the JSONStringifyWithFunctions util.\n      const json = JSON.stringify(tempOptions)\n      hasher.update(json)\n      hex = hasher.digest('hex')\n    }\n    catch (e) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`Failed to document options object: ${e}`)\n    }\n    return hex\n  }\n\n  _produceCMSIdentifier(id: string): string {\n    return id.slice(-4)\n  }\n\n  _dedupePlugins(plugins: Array<Plugin | UnsafePlugin>): Array<Plugin | UnsafePlugin> {\n    const numParsePlugins = _.filter(plugins, { hook: 'parse' })", "    catch (e) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(`Failed to document options object: ${e}`)\n    }\n    return hex\n  }\n\n  _produceCMSIdentifier(id: string): string {\n    return id.slice(-4)\n  }\n\n  _dedupePlugins(plugins: Array<Plugin | UnsafePlugin>): Array<Plugin | UnsafePlugin> {\n    const numParsePlugins = _.filter(plugins, { hook: 'parse' })", "    if (numParsePlugins.length > 1)\n      return _.initial(plugins)\n\n    return plugins\n  }\n\n  _checkDuplicateParsePlugins(pluginsList: Array<Plugin | UnsafePlugin>): boolean {\n    return _(pluginsList).filter(plugin => plugin.hook === 'parse').uniq().value().length > 1\n  }\n\n  async _runPlugins(\n    context: PluginPassthrough,\n    hook: Plugin['hook'] | 'parse'): Promise<PluginPassthrough> {", "    if (!this.plugins?.length)\n      return context\n    if (this._checkDuplicateParsePlugins(this.plugins))\n      throw new Error('Only one parse-capable plugin must be used. Use the default NotionCMS render plugin.')\n\n    let val = context\n    for (const plugin of this.plugins.flat()) {\n      if (plugin.hook === hook || plugin.hook === '*') {\n        // eslint-disable-next-line @typescript-eslint/await-thenable\n        val = await plugin.exec(val, {\n          debug: !!this.debug,\n          localCacheDirectory: this.localCacheDirectory,\n          notion: this.notionClient,\n        })\n      }\n    }\n    return val\n  }\n\n  _flatListToTree = (\n    flatList: Partial<FlatListItem>[],\n    idPath: keyof FlatListItem,\n    parentIdPath: keyof FlatListItem,\n    isRoot: (t: Partial<FlatListItem>) => boolean,\n  ): Record<string, Page> => {\n    const rootParents: Partial<FlatListItem>[] = []\n    const map = {} as { [x: string]: Partial<FlatListItem> }\n    const tree = {}", "    for (const item of flatList)\n      map[item[idPath] as string] = item\n\n    for (const item of flatList) {\n      const parentId = item[parentIdPath]\n      if (isRoot(item)) {\n        if (item._key === this.rootAlias)\n          item._key = '/'\n        rootParents.push(item)\n      }\n      else {\n        const parentItem = map[parentId as string]\n        parentItem[item._key as string] = item\n      }\n    }\n    _.forEach(rootParents, (page) => {\n      _.assign(tree, { [page._key as string]: page })\n    })\n    return tree\n  }\n\n  _notionListToTree(list: Partial<FlatListItem>[]): Record<string, Page> {\n    return this._flatListToTree(list, 'id', 'pid', (node: Partial<FlatListItem>) => !node.pid)\n  }\n\n  static _isPageContentObject(node: WalkNode): boolean {\n    return typeof node.key === 'string' && node?.key?.startsWith('/')\n      && ((typeof node?.parent?.key === 'string' && node?.parent?.key?.startsWith('/'))\n        || !node?.parent?.key || node?.parent?.key === 'siteData')\n  }\n\n  static _createCMSWalker(cb: (node: ExtendedPageContent) => void): WalkBuilder {\n    return new WalkBuilder()\n      .withCallback({\n        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n        nodeTypeFilters: ['object'],\n        positionFilter: 'postWalk',\n        callback: (node: WalkNode) => cb(node.val as ExtendedPageContent),\n      })\n  }\n\n  _getParentPageId(response: PageObjectResponse): string {\n    const parentPage = response?.properties['parent-page'] as PageObjectRelation\n    return parentPage?.relation[0]?.id\n  }\n\n  _getBlockName(response: PageObjectResponse): string {\n    const nameProp = response?.properties.name as PageObjectTitle\n    return nameProp.title[0]?.plain_text\n  }\n\n  _extractTags(response: PageObjectResponse): Array<string> {\n    const tagProp = response?.properties?.Tags as PageMultiSelect\n    return tagProp.multi_select ? tagProp.multi_select.map(multiselect => multiselect.name) : []\n  }\n\n  _assignTagGroup(tag: string, path: string, cms: CMS): void {", "    if (!cms.tagGroups[tag])\n      cms.tagGroups[tag] = []\n    cms.tagGroups[tag].push(path)\n  }\n\n  _buildTagGroups(tags: Array<string>, path: string, cms: CMS): void {\n    _.forEach(tags, (tag) => {\n      if (!_.includes(cms.tags, tag))\n        cms.tags.push(tag)\n      this._assignTagGroup(tag, path, cms)\n    })\n  }\n\n  _getCoverImage(page: PageObjectResponse): string | undefined {\n    const pageCoverProp = (page)?.cover as Cover\n    let coverImage", "    if (pageCoverProp && 'external' in pageCoverProp)\n      coverImage = pageCoverProp?.external?.url\n\n    else if (pageCoverProp?.file)\n      coverImage = pageCoverProp?.file.url\n\n    return coverImage\n  }\n\n  async _pullPageContent(id: string): Promise<BlockObjectResponse[] | undefined> {\n    let pageContent", "    try {\n      pageContent = await this.limiter.schedule(\n        async () => await collectPaginatedAPI(this.notionClient.blocks.children.list, {\n          block_id: id,\n        }),\n      ) as BlockObjectResponse[]\n    }\n    catch (e) {\n      if (this.debug)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        console.error(`NotionCMS Error: ${e}`)\n    }", "      if (this.debug)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        console.error(`NotionCMS Error: ${e}`)\n    }\n    if (!pageContent)\n      return\n    for (const block of pageContent) {\n      if (isFullBlock(block) && block.has_children)\n        // @ts-expect-error children\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        block[block.type].children = (await this._pullPageContent(block.id))\n    }\n    return pageContent\n  }\n\n  async _parsePageContent(pageContent: BlockObjectResponse[]): Promise<Content> {\n    const results = await this._runPlugins(pageContent as Blocks, 'pre-parse')\n    const markdown: string = this.coreRenderer.parser.blocksToMarkdown(pageContent as Blocks)\n    const plaintext: string = this.coreRenderer.parser.markdownToPlainText(markdown)\n    const parsedBlocks = await this._runPlugins(results as Blocks, 'parse')\n    const html = await this._runPlugins(parsedBlocks, 'post-parse') as string\n    return {\n      plaintext,\n      markdown,\n      html,\n    }\n  }\n\n  async _getPageContent(state: CMS, cachedState?: CMS): Promise<CMS> {\n    let stateWithContent = _.cloneDeep(state)\n\n    await new AsyncWalkBuilder()\n      .withCallback({\n        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n        nodeTypeFilters: ['object'],\n        positionFilter: 'postWalk',\n        callback: async (node: WalkNode) => {\n          const pageContent = node.val as PageContent", "          if (!pageContent || !pageContent?._notion?.id)\n            return\n          // Definitely grab content if there is no cache.\n          if (pageContent._updateNeeded || !cachedState) {\n            if (!this.quietMode && pageContent.path)\n              clackSpinner.start(kleur.blue(`[ncms][updating]: ${pageContent.path}`))\n            const blocks = await this._pullPageContent(pageContent._notion.id)\n            if (!blocks)\n              return\n            const content = await this._parsePageContent(blocks)\n            _.assign(pageContent, {\n              content,\n              ...(!pageContent.coverImage && { coverImage: content.html.match(COVER_IMAGE_REGEX)?.[1] }),\n              _ancestors: this._gatherNodeAncestors(node),\n            })\n          }", "          else if (cachedState && pageContent.path) {\n            const cachedPage = this._queryByPath(pageContent.path, cachedState?.siteData)\n            if (cachedPage) {\n              _.assign(pageContent, {\n                content: cachedPage.content,\n                ...(!cachedPage.coverImage && { coverImage: cachedPage.content?.html.match(COVER_IMAGE_REGEX)?.[1] }),\n                _ancestors: this._gatherNodeAncestors(node),\n              })\n              if (!this.quietMode && pageContent.path)\n                clackSpinner.start(kleur.yellow(`[ncms][using cache]: ${pageContent.path}`))\n            }\n          }\n          else {\n            clackSpinner.stop(kleur.red('[ncms]: aborted due to fetch error.'))\n            throw new Error(`ncms: error when updating page content. No page found for ${node.key || 'undetermined node key'}`)\n          }\n\n          _.assign(\n            pageContent,\n            await this._runPlugins(pageContent, 'during-tree') as Page)\n          delete pageContent.otherProps\n          // We only want access to ancestors for plugins, otherwise it creates circular ref headaches.\n          delete pageContent._ancestors\n          delete pageContent._updateNeeded\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          clackSpinner.stop(kleur.blue(`[ncms]: updated@ ${pageContent.path}`))\n        },\n      })\n      .withRootObjectCallbacks(false)\n      .withParallelizeAsyncCallbacks(true)\n      .walk(stateWithContent.siteData)\n\n    stateWithContent.stages.push('content')\n    stateWithContent = await this._runPlugins(stateWithContent, 'post-tree') as CMS\n    return stateWithContent\n  }\n\n  _extractUnsteadyProps(properties: PageObjectResponse['properties']): PageObjectResponse['properties'] {\n    return _(properties)\n      .entries()\n      .reject(([key]) => _.includes(STEADY_PROPS, key))\n      .fromPairs().value()\n  }\n\n  _getPageUpdate(entry: PageObjectResponse): Page {\n    const tags = [] as Array<string>", "              if (!this.quietMode && pageContent.path)\n                clackSpinner.start(kleur.yellow(`[ncms][using cache]: ${pageContent.path}`))\n            }\n          }\n          else {\n            clackSpinner.stop(kleur.red('[ncms]: aborted due to fetch error.'))\n            throw new Error(`ncms: error when updating page content. No page found for ${node.key || 'undetermined node key'}`)\n          }\n\n          _.assign(\n            pageContent,\n            await this._runPlugins(pageContent, 'during-tree') as Page)\n          delete pageContent.otherProps\n          // We only want access to ancestors for plugins, otherwise it creates circular ref headaches.\n          delete pageContent._ancestors\n          delete pageContent._updateNeeded\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          clackSpinner.stop(kleur.blue(`[ncms]: updated@ ${pageContent.path}`))\n        },\n      })\n      .withRootObjectCallbacks(false)\n      .withParallelizeAsyncCallbacks(true)\n      .walk(stateWithContent.siteData)\n\n    stateWithContent.stages.push('content')\n    stateWithContent = await this._runPlugins(stateWithContent, 'post-tree') as CMS\n    return stateWithContent\n  }\n\n  _extractUnsteadyProps(properties: PageObjectResponse['properties']): PageObjectResponse['properties'] {\n    return _(properties)\n      .entries()\n      .reject(([key]) => _.includes(STEADY_PROPS, key))\n      .fromPairs().value()\n  }\n\n  _getPageUpdate(entry: PageObjectResponse): Page {\n    const tags = [] as Array<string>", "    if (isFullPage(entry)) {\n      const name = this._getBlockName(entry)\n      const authorProp = entry.properties?.Author as PageObjectUser\n      const authors = authorProp.people.map(authorId => authorId.name as string)\n\n      const coverImage = this._getCoverImage(entry)\n      const extractedTags = this._extractTags(entry)\n      extractedTags.forEach(tag => tags.push(tag))\n      const otherProps = this._extractUnsteadyProps(entry.properties)\n\n      return {\n        name,\n        otherProps,\n        slug: slugify(name),\n        authors,\n        tags,\n        coverImage,\n        _notion: {\n          id: entry.id,\n          last_edited_time: entry.last_edited_time,\n        },\n      }\n    }\n    return {}\n  }\n\n  _publishedFilter = (e: PageObjectResponse) => {\n    const publishProp = e.properties.Published as SelectPropertyItemObjectResponse\n    return this.draftMode ? true : (publishProp.select && publishProp.select.name === 'Published')\n  }\n\n  _gatherNodeAncestors(node: WalkNode): Array<PageContent> {\n    return _(node.ancestors).map((ancestor) => {", "      if ((ancestor.val as PageContent)._notion)\n        return ancestor.val as PageContent\n      return false\n    }).compact().value()\n  }\n\n  async _getDb(state: CMS, cachedState?: CMS): Promise<CMS | undefined> {\n    let stateWithDb = _.cloneDeep(state)\n    let db\n    try {\n      db = await this.limiter.schedule(\n        async () => (await collectPaginatedAPI(\n          this.notionClient.databases.query, { database_id: state.metadata.databaseId },\n        )),\n      ) as PageObjectResponse[]\n    }", "    try {\n      db = await this.limiter.schedule(\n        async () => (await collectPaginatedAPI(\n          this.notionClient.databases.query, { database_id: state.metadata.databaseId },\n        )),\n      ) as PageObjectResponse[]\n    }\n    catch (e) {\n      if (this.debug)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        console.error(`NotionCMS Error: ${e}`)\n    }", "      if (this.debug)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        console.error(`NotionCMS Error: ${e}`)\n    }\n    if (!db)\n      return\n\n    stateWithDb.metadata.stats.totalPages = db.length\n    stateWithDb.siteData = this._notionListToTree(\n      _(db)\n        // @ts-expect-error filter\n        .filter(this._publishedFilter)\n        .map(page => _.assign({}, {\n          _key: routify(this._getBlockName(page)),\n          id: page.id,\n          pid: this._getParentPageId(page),\n          _notion: page, // this property is recycled to eventually house metadata.\n        }))\n        .value(),\n    )\n", "    if (_.isEmpty(stateWithDb.siteData))\n      throw new Error('NotionCMS is empty. Did you mean to set `draftMode: true`?')\n\n    new WalkBuilder()\n      .withCallback({\n        nodeTypeFilters: ['object'],\n        callback: (node: WalkNode) => {\n          const pageContent = node.val as PageContent\n          if (!pageContent?._notion)\n            return\n          pageContent._updateNeeded = !this.withinRefreshTimeout\n          const update = this._getPageUpdate(pageContent._notion as PageObjectResponse)\n          _.assign(pageContent, update)\n          _.assign(pageContent, {\n            // Replace double // so that root aliasing works properly\n            path: node.getPath(node => `${node.key as string}`)\n              .replace('siteData', '')\n              .replace('//', '/'),\n            url: (stateWithDb.metadata.rootUrl && pageContent.path)\n              ? (`${stateWithDb.metadata.rootUrl as string}${pageContent.path}`)\n              : '',\n          })", "          if (!pageContent?._notion)\n            return\n          pageContent._updateNeeded = !this.withinRefreshTimeout\n          const update = this._getPageUpdate(pageContent._notion as PageObjectResponse)\n          _.assign(pageContent, update)\n          _.assign(pageContent, {\n            // Replace double // so that root aliasing works properly\n            path: node.getPath(node => `${node.key as string}`)\n              .replace('siteData', '')\n              .replace('//', '/'),\n            url: (stateWithDb.metadata.rootUrl && pageContent.path)\n              ? (`${stateWithDb.metadata.rootUrl as string}${pageContent.path}`)\n              : '',\n          })", "          if (cachedState && pageContent.path && !this.withinRefreshTimeout) {\n            const cachedPage = this._queryByPath(pageContent.path, cachedState?.siteData)\n            pageContent._updateNeeded = this.autoUpdate\n              && (update._notion?.last_edited_time !== cachedPage?._notion?.last_edited_time)\n          }\n          if (node.key && typeof node.key === 'string' && pageContent.tags && pageContent.path)\n            this._buildTagGroups(pageContent.tags, pageContent.path, stateWithDb)\n        },\n      })\n      .withRootObjectCallbacks(false)\n      .walk(stateWithDb)\n\n    stateWithDb.stages.push('db')\n    stateWithDb = await this._runPlugins(stateWithDb, 'pre-tree') as CMS\n    return stateWithDb\n  }\n\n  async fetch(): Promise<CMS> {\n    let cachedCMS, optionsHaveChanged", "    if (fs.existsSync(this.localCacheUrl)) {\n      try {\n        cachedCMS = JSONParseWithFunctions(fs.readFileSync(this.localCacheUrl, 'utf-8')) as CMS\n        optionsHaveChanged = cachedCMS.metadata.options !== this.cms.metadata.options\n      }\n      catch (e) {\n        if (this.debug)\n          console.error('Parsing cached CMS failed. Using API instead.')\n      }\n    }\n    this.withinRefreshTimeout = Boolean(cachedCMS && ((cachedCMS.lastUpdateTimestamp\n      && (Date.now() < cachedCMS.lastUpdateTimestamp + _.toNumber(this.refreshTimeout)))\n        && !optionsHaveChanged))\n", "    if (!this.quietMode)\n      log.step(kleur.red('[ncms]: pulling your content from Notion...\ud83d\udef8'))\n    try {\n      const cmsOutput = await this._getDb(this.cms, cachedCMS)\n      if (!cmsOutput)\n        throw new Error('NotionCMS Error: DB fetch unsuccessful.')\n      this.cms = cmsOutput\n\n      this.cms = await this._getPageContent(this.cms, cachedCMS)\n      this.cms.stages.push('complete')\n      this.export()", "      if (!this.quietMode)\n        log.step(kleur.green('[ncms]: mission complete! \ud83d\udc7d'))\n    }\n    catch (e) {\n      if (!this.quietMode)\n        clackSpinner.stop(kleur.red('[ncms]: Something went wrong. Mission aborted.'))\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      console.error(`ncms error: ${e}`)\n    }\n\n    this.cms.routes = this.routes\n    this.cms.metadata.stats = {\n      ...this.logger.stats,\n      totalPages: this.cms.metadata.stats.totalPages,\n      durationSeconds: (Date.now() - this.timer) / 1000,\n    }", "    if (this.debug)\n      writeFile('debug/site-data.json', JSONStringifyWithFunctions(this.cms))\n    return this.cms\n  }\n\n  async asyncWalk(cb: Function, path?: string) {\n    const startPoint = path ? this.queryByPath(path) : this.cms.siteData\n    await new AsyncWalkBuilder()\n      .withCallback({\n        nodeTypeFilters: ['object'],\n        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n        callback: (node: WalkNode) => cb(node.val) as AsyncCallbackFn,\n      })\n      .withRootObjectCallbacks(false)\n      .withParallelizeAsyncCallbacks(true)\n      .walk(startPoint)\n  }\n\n  walk(cb: Function, path?: string) {\n    const startPoint = path ? this.queryByPath(path) : this.cms.siteData\n    new WalkBuilder()\n      .withCallback({\n        nodeTypeFilters: ['object'],\n        filters: [(node: WalkNode) => NotionCMS._isPageContentObject(node)],\n        callback: (node: WalkNode) => cb(node.val) as unknown,\n      })\n      .withRootObjectCallbacks(false)\n      .walk(startPoint)\n  }\n\n  getTaggedCollection(tags: string | Array<string>): Array<Page | undefined> {", "    if (!_.isArray(tags))\n      tags = [tags]\n    const taggedPages = [] as Array<string>\n    for (const tag of tags)\n      taggedPages.push(...this.cms.tagGroups[tag])\n\n    if (typeof this.cms.siteData !== 'string')\n      return _(taggedPages).map(path => this.queryByPath(path)).uniq().value()\n\n    return []\n  }\n\n  filterSubPages(pathOrPage: string | Page): Array<Page> {", "    if (typeof pathOrPage === 'string')\n      pathOrPage = this.queryByPath(pathOrPage)\n\n    return _(pathOrPage)\n      .entries()\n      .filter(([key]) => key.startsWith('/'))\n      .map(e => e[1]).value() as Page[]\n  }\n\n  rejectSubPages(pathOrPage: string | Page): Page {\n    if (typeof pathOrPage === 'string')\n      pathOrPage = this.queryByPath(pathOrPage)\n\n    return _(pathOrPage)\n      .entries()\n      .reject(([key]) => key.startsWith('/'))\n      .fromPairs().value() as Page\n  }\n\n  _queryByPath(path: string, siteData: Record<string, Page>): Page {\n    const segments = path.split('/').slice(1)", "    if (typeof pathOrPage === 'string')\n      pathOrPage = this.queryByPath(pathOrPage)\n\n    return _(pathOrPage)\n      .entries()\n      .reject(([key]) => key.startsWith('/'))\n      .fromPairs().value() as Page\n  }\n\n  _queryByPath(path: string, siteData: Record<string, Page>): Page {\n    const segments = path.split('/').slice(1)", "    if (this.rootAlias && path !== '/')\n      segments.unshift('') // This lets us access the root aliased page.\n    let access: Page = siteData\n    for (const segment of segments) {\n      // @ts-expect-error-next-line\n      access = access[`/${segment}`] as Page\n    }\n    return access\n  }\n\n  queryByPath(path: string): Page {\n    return this._queryByPath(path, this.cms.siteData)\n  }\n\n  export({ pretty = false, path = this.localCacheUrl }:\n  { pretty?: boolean; path?: string } = {}) {\n    this.cms.lastUpdateTimestamp = Date.now()", "    if (pretty) {\n      // This drops Functions too, so only use for inspection\n      writeFile(path, JSON.stringify(this.cms, filterAncestors))\n    }\n    else {\n      writeFile(path, JSONStringifyWithFunctions(this.cms))\n    }\n  }\n\n  async import(previousState: string, flatted?: boolean): Promise<CMS> {\n    let parsedPreviousState", "    try {\n      if (flatted)\n        parsedPreviousState = JSONParseWithFunctions(previousState) as CMS\n\n      else\n        parsedPreviousState = JSON.parse(previousState) as CMS\n    }\n    catch (e) {\n      throw new Error(`Parsing input CMS failed.\n                      Make sure your input follows the NotionCMS spec, uses a validator plugin or a transformation plugin.`)\n    }\n    const transformedPreviousState = await this._runPlugins(parsedPreviousState, 'import') as CMS\n    return this.cms = transformedPreviousState\n  }\n\n  purgeCache(): boolean {", "    try {\n      fs.rmSync(this.localCacheUrl)\n    }\n    catch (e) {\n      if (this.debug)\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        console.log(`ncms: error when attempting to clear cache: ${e}`)\n      return false\n    }\n    if (this.debug)\n      console.log('ncms: cache has been successfully cleared.')\n    return true\n  }\n}\n", "    if (this.debug)\n      console.log('ncms: cache has been successfully cleared.')\n    return true\n  }\n}\n"]}
{"filename": "src/notion-blocks-html-parser.ts", "chunked_list": ["import type { Renderer as MarkedRenderer } from 'marked'\nimport { marked } from 'marked'\nimport hljs from 'highlight.js'\nimport type { Blocks } from '@notion-stuff/v4-types'\nimport _ from 'lodash'\n\n// @ts-expect-error module\nimport { gfmHeadingId } from 'marked-gfm-heading-id'\nimport type NotionBlocksMarkdownParser from './notion-blocks-md-parser'\n\nexport default class NotionBlocksHtmlParser {\n  markdownParser: NotionBlocksMarkdownParser\n  renderer: MarkedRenderer\n  markedOptions\n  debug: boolean\n\n  constructor(parser: NotionBlocksMarkdownParser, debug?: boolean) {\n    this.markdownParser = parser\n    this.debug = debug || false\n\n    this.renderer = new marked.Renderer()\n    this.renderer.code = this._highlight.bind(this)\n    this.markedOptions = {\n      renderer: this.renderer,\n      pedantic: false,\n      mangle: false,\n      gfm: true,\n      headerIds: true,\n      breaks: false,\n      sanitize: false,\n      smartypants: false,\n      xhtml: false,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      extensions: [gfmHeadingId({ prefix: '' })],\n    }\n    marked.use({ silent: true })\n    // This is a workaround so that hljs doesn't complain about mermaid not being a registered lang.\n    hljs.registerAliases('mermaid', { languageName: 'plaintext' })\n  }\n\n  marked(md: string): string {\n    return marked(md, this.markedOptions)\n  }\n\n  parse(blocks: Blocks) {\n    let markdown = this.markdownParser.parse(blocks)", "import type NotionBlocksMarkdownParser from './notion-blocks-md-parser'\n\nexport default class NotionBlocksHtmlParser {\n  markdownParser: NotionBlocksMarkdownParser\n  renderer: MarkedRenderer\n  markedOptions\n  debug: boolean\n\n  constructor(parser: NotionBlocksMarkdownParser, debug?: boolean) {\n    this.markdownParser = parser\n    this.debug = debug || false\n\n    this.renderer = new marked.Renderer()\n    this.renderer.code = this._highlight.bind(this)\n    this.markedOptions = {\n      renderer: this.renderer,\n      pedantic: false,\n      mangle: false,\n      gfm: true,\n      headerIds: true,\n      breaks: false,\n      sanitize: false,\n      smartypants: false,\n      xhtml: false,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      extensions: [gfmHeadingId({ prefix: '' })],\n    }\n    marked.use({ silent: true })\n    // This is a workaround so that hljs doesn't complain about mermaid not being a registered lang.\n    hljs.registerAliases('mermaid', { languageName: 'plaintext' })\n  }\n\n  marked(md: string): string {\n    return marked(md, this.markedOptions)\n  }\n\n  parse(blocks: Blocks) {\n    let markdown = this.markdownParser.parse(blocks)", "    // if (this.debug)\n    //   fs.writeFileSync('./debug/parsed.md', markdown)\n    // Take another pass to wrap any deeply nested mixed HTML content's inner text in p tags\n    markdown = this._mixedHTML(markdown)\n    // if (this.debug)\n    //   fs.appendFileSync('./debug/parsed.md', `--------ALTERED----------**\\n\\n\\n${markdown}`)\n    return marked(markdown, this.markedOptions)\n  }\n\n  _highlight(code: string, lang: string | undefined): string {\n    let language", "    if (lang === 'mermaid')\n      language = 'mermaid'\n    else\n      language = (lang && hljs.getLanguage(lang)) ? lang : 'plaintext'\n    const higlighted = hljs.highlight(code, { language })\n    const langClass = `language-${\n      (!language || language.includes('plain')) ? 'none' : language}`\n    return `<pre><code class='hljs ${langClass}'>${higlighted.value}</code></pre>`\n  }\n\n  _mixedHTML(mixedHtml: string) {\n    return mixedHtml.replaceAll(/[^<>]+?(?=<\\/)/g, (match) => {\n      // Must trim or Marked classifies text preceded by tabs as indented code.\n      const tokens = marked.lexer(_.trim(match), this.markedOptions)\n      return marked.parser(tokens, this.markedOptions)\n    })\n  }\n}\n"]}
{"filename": "src/notion-blocks-md-parser.ts", "chunked_list": ["import type {\n  Annotations,\n  AudioBlock,\n  Blocks,\n  BulletedListItemBlock,\n  CalloutBlock,\n  CalloutIconEmoji,\n  CalloutIconExternal,\n  CalloutIconFile,\n  CodeBlock,", "  CalloutIconFile,\n  CodeBlock,\n  EmbedBlock,\n  ExternalFileWithCaption,\n  FileBlock,\n  FileWithCaption,\n  HeadingBlock,\n  ImageBlock,\n  LinkPreviewBlock,\n  LinkToPageBlock,", "  LinkPreviewBlock,\n  LinkToPageBlock,\n  NumberedListItemBlock,\n  PDFBlock,\n  ParagraphBlock,\n  QuoteBlock,\n  RichText,\n  RichTextEquation,\n  RichTextMention,\n  RichTextText,", "  RichTextMention,\n  RichTextText,\n  ToDoBlock,\n  ToggleBlock,\n  VideoBlock,\n} from '@notion-stuff/v4-types'\nimport { uuidToId } from 'notion-utils'\n\nconst EOL_MD = '\\n'\n\nexport default class NotionBlocksMarkdownParser {\n  parse(blocks: Blocks, depth = 0): string {\n    return blocks\n      .reduce((markdown, childBlock) => {\n        let childBlockString = ''\n        // @ts-expect-error children\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access", "const EOL_MD = '\\n'\n\nexport default class NotionBlocksMarkdownParser {\n  parse(blocks: Blocks, depth = 0): string {\n    return blocks\n      .reduce((markdown, childBlock) => {\n        let childBlockString = ''\n        // @ts-expect-error children\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (childBlock.has_children && childBlock[childBlock.type].children) {\n          childBlockString = ' '\n            .repeat(depth)\n            .concat(\n              childBlockString,\n              // @ts-expect-error children\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n              this.parse(childBlock[childBlock.type].children, depth + 2),\n            )\n        }\n", "        if (childBlock.has_children && childBlock[childBlock.type].children) {\n          childBlockString = ' '\n            .repeat(depth)\n            .concat(\n              childBlockString,\n              // @ts-expect-error children\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n              this.parse(childBlock[childBlock.type].children, depth + 2),\n            )\n        }\n", "        if (childBlock.type === 'unsupported') {\n          markdown += 'NotionAPI Unsupported'.concat(\n            EOL_MD.repeat(2),\n            childBlockString,\n          )\n        }\n\n        if (childBlock.type === 'paragraph')\n          markdown += this.parseParagraph(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'code')\n          markdown += this.parseCodeBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'code')\n          markdown += this.parseCodeBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'quote')\n          markdown += this.parseQuoteBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'callout') {\n          markdown\n            += this.parseCalloutBlock(childBlock).concat(childBlockString)\n        }\n", "        if (childBlock.type.startsWith('heading_')) {\n          const headingLevel = Number(childBlock.type.split('_')[1])\n          markdown += this.parseHeading(\n            childBlock as HeadingBlock,\n            headingLevel,\n          ).concat(childBlockString)\n        }\n\n        if (childBlock.type === 'bulleted_list_item') {\n          markdown\n            += this.parseBulletedListItems(childBlock).concat(childBlockString)\n        }\n", "        if (childBlock.type === 'bulleted_list_item') {\n          markdown\n            += this.parseBulletedListItems(childBlock).concat(childBlockString)\n        }\n\n        if (childBlock.type === 'numbered_list_item') {\n          markdown\n            += this.parseNumberedListItems(childBlock).concat(childBlockString)\n        }\n\n        if (childBlock.type === 'to_do')\n          markdown += this.parseTodoBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'to_do')\n          markdown += this.parseTodoBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'toggle') {\n          markdown += this.parseToggleBlock(childBlock).replace(\n            '{{childBlock}}',\n            childBlockString,\n          )\n        }\n\n        if (childBlock.type === 'image')\n          markdown += this.parseImageBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'image')\n          markdown += this.parseImageBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'embed')\n          markdown += this.parseEmbedBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'audio')\n          markdown += this.parseAudioBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'video')\n          markdown += this.parseVideoBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'video')\n          markdown += this.parseVideoBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'file')\n          markdown += this.parseFileBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'pdf')\n          markdown += this.parsePdfBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'link_to_page')\n          markdown += this.parseLinkToPageBlock(childBlock).concat(childBlockString)\n", "        if (childBlock.type === 'link_to_page')\n          markdown += this.parseLinkToPageBlock(childBlock).concat(childBlockString)\n\n        if (childBlock.type === 'divider')\n          markdown += EOL_MD.concat('---', EOL_MD, childBlockString)\n\n        if (childBlock.type === 'link_preview')\n          markdown += this.parseLinkPreview(childBlock).concat(childBlockString)\n\n        return markdown\n      }, '')\n      .concat(EOL_MD)\n  }\n\n  parseLinkPreview(linkPreviewBlock: LinkPreviewBlock): string {\n    return `<div notion-link-preview>\n      <a href=\"${linkPreviewBlock.link_preview.url}\">${linkPreviewBlock.link_preview.url}</a>\n    </div>\\n\\n`\n  }\n\n  parseParagraph(paragraphBlock: ParagraphBlock): string {\n    const text: string = this.parseRichTexts(paragraphBlock.paragraph.rich_text)\n    return EOL_MD.concat(text, EOL_MD)\n  }\n\n  parseCodeBlock(codeBlock: CodeBlock): string {\n    return `\\n\\n\\`\\`\\`${codeBlock.code.language.toLowerCase() || ''}\n${(codeBlock.code.rich_text[0] as RichTextText).text.content}\n\\`\\`\\`\\n\\n`.concat(EOL_MD)\n  }\n\n  parseQuoteBlock(quoteBlock: QuoteBlock): string {\n    return EOL_MD.concat(\n      `> ${this.parseRichTexts(quoteBlock.quote.rich_text)}`,\n      EOL_MD,\n    )\n  }\n\n  parseCalloutBlock(calloutBlock: CalloutBlock) {\n    const callout = `<div notion-callout>\n  {{icon}}\n  <span notion-callout-text>\n    ${this.parseRichTexts(calloutBlock.callout.rich_text)}\n  </span>\n</div>`\n", "    function getCalloutIcon(\n      icon: CalloutIconEmoji | CalloutIconExternal | CalloutIconFile,\n    ) {\n      switch (icon.type) {\n        case 'emoji':\n          return `<span notion-callout-emoji>${icon.emoji}</span>`\n        case 'external':\n          return `<img notion-callout-external src='${icon.external.url}' alt='notion-callout-external-link'/>`\n        case 'file':\n          // TODO: add support for Callout File\n          return 'notion-callout-file'\n      }\n    }\n\n    return EOL_MD.concat(\n      // @ts-expect-error callout\n      callout.replace('{{icon}}', getCalloutIcon(calloutBlock.callout.icon)),\n      EOL_MD,\n    )\n  }\n\n  parseHeading(headingBlock: HeadingBlock, headingLevel: number): string {\n    return EOL_MD.concat(\n      '#'.repeat(headingLevel),\n      ' ',\n      // @ts-expect-error heading\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access\n      this.parseRichTexts(headingBlock[headingBlock.type].rich_text),\n      EOL_MD,\n    )\n  }\n\n  parseBulletedListItems(bulletedListItemBlock: BulletedListItemBlock): string {\n    return '* '.concat(\n      this.parseRichTexts(bulletedListItemBlock.bulleted_list_item.rich_text),\n      EOL_MD,\n    )\n  }\n\n  parseNumberedListItems(numberedListItemBlock: NumberedListItemBlock): string {\n    return '1. '.concat(\n      this.parseRichTexts(numberedListItemBlock.numbered_list_item.rich_text),\n      EOL_MD,\n    )\n  }\n\n  parseTodoBlock(todoBlock: ToDoBlock): string {\n    return `- [${todoBlock.to_do.checked ? 'x' : ' '}] `.concat(\n      this.parseRichTexts(todoBlock.to_do.rich_text),\n      EOL_MD,\n    )\n  }\n\n  parseToggleBlock(toggleBlock: ToggleBlock): string {\n    return `<details><summary>${this.parseRichTexts(\n      toggleBlock.toggle.rich_text,\n    )}</summary>{{childBlock}}</details>`\n  }\n\n  parseImageBlock(imageBlock: ImageBlock): string {\n    const { url, caption } = this.parseFile(imageBlock.image)\n    return `\n<figure notion-figure>\n  <img src='${url}' alt='${caption}'>\n  <figcaption notion-figcaption>${caption}</figcaption>\n</figure>\n`.concat(EOL_MD)\n  }\n\n  parseAudioBlock(audioBlock: AudioBlock): string {\n    const { url, caption } = this.parseFile(audioBlock.audio)\n    return `![${caption}](${url})`\n  }\n\n  parseVideoBlock(videoBlock: VideoBlock): string {\n    const { url, caption } = this.parseFile(videoBlock.video)\n\n    const [processed, iframeOrUrl] = processExternalVideoUrl(url)\n", "    if (processed)\n      return EOL_MD.concat(iframeOrUrl, EOL_MD)\n\n    return `To be supported: ${url} with ${caption}`.concat(EOL_MD)\n  }\n\n  parseFileBlock(fileBlock: FileBlock): string {\n    const { url, caption } = this.parseFile(fileBlock.file)\n    return `To be supported: ${url} with ${caption}`.concat(EOL_MD)\n  }\n\n  parsePdfBlock(pdfBlock: PDFBlock): string {\n    const { url, caption } = this.parseFile(pdfBlock.pdf)\n    return `\n<figure>\n  <object data='${url}' type='application/pdf'></object>\n  <figcaption>${caption}</figcaption>\n</figure>\n`.concat(EOL_MD)\n  }\n\n  parseEmbedBlock(embedBlock: EmbedBlock): string {\n    const embedded = `<iframe src='${embedBlock.embed.url}'></iframe>`\n", "    if (embedBlock.embed.caption) {\n      return `\n<figure>\n  ${embedded}\n  <figcaption>${this.parseRichTexts(embedBlock.embed.caption)}</figcaption>\n</figure>`.concat(EOL_MD)\n    }\n\n    return embedded.concat(EOL_MD)\n  }\n\n  parseRichTexts(richTexts: RichText[]): string {\n    return richTexts.reduce((parsedContent, richText) => {\n      switch (richText.type) {\n        case 'text':\n          parsedContent += this.parseText(richText)\n          break\n        case 'mention':\n          parsedContent += this.parseMention(richText)\n          break\n        case 'equation':\n          parsedContent += this.parseEquation(richText)\n          break\n      }\n\n      return parsedContent\n    }, '')\n  }\n\n  parseText(richText: RichTextText): string {\n    const content = this.annotate(richText.annotations, richText.text.content)\n\n    return richText.text.link\n      ? this.annotateLink(richText.text, content)\n      : content\n  }\n\n  // TODO: support mention when we know what it actually means\n\n  parseMention(mention: RichTextMention): string {\n    switch (mention.mention.type) {\n      case 'user':\n        break\n      case 'page':\n        break\n      case 'database':\n        break\n      case 'date':\n        break\n    }\n    return this.annotate(mention.annotations, mention.plain_text)\n  }\n\n  parseEquation(equation: RichTextEquation): string {\n    return this.annotate(\n      equation.annotations,\n      `$${equation.equation.expression}$`,\n    )\n  }\n\n  parseLinkToPageBlock(linkToPage: LinkToPageBlock) {\n    const link = linkToPage.link_to_page as {\n      type: 'page_id'\n      page_id: string\n    }\n    const id = uuidToId(link.page_id)\n    // These will get replaced if ncms-plugin-linker is used.\n    return `<a href=\"/${id}\">/${id}</a>`\n  }\n\n  parseFile(file: ExternalFileWithCaption | FileWithCaption): {\n    caption: string\n    url: string\n  } {\n    const fileContent = {\n      caption: '',\n      url: '',\n    }\n\n    switch (file.type) {\n      case 'external':\n        fileContent.url = file.external.url\n        break\n      case 'file':\n        fileContent.url = file.file.url\n        break\n    }\n\n    fileContent.caption = file.caption\n      ? this.parseRichTexts(file.caption)\n      : fileContent.url\n\n    return fileContent\n  }\n\n  private annotate(annotations: Annotations, originalContent: string): string {\n    // @ts-expect-error reduce\n    return Object.entries(annotations).reduce(\n      // @ts-expect-error reduce\n      (\n        annotatedContent,\n        [modifier, isOnOrColor]: [\n          keyof Annotations,\n          boolean | Annotations['color'],\n        ],\n      ) =>\n        isOnOrColor\n          ? this.annotateModifier(\n            modifier,\n            annotatedContent,\n            isOnOrColor as Annotations['color'],\n          )\n          : annotatedContent,\n      originalContent,\n    )\n  }\n\n  private annotateLink(\n    text: RichTextText['text'],\n    annotatedContent: string,\n  ): string {\n    return `[${annotatedContent}](${\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      text?.link?.url ? text?.link.url : text.link\n    })`\n  }\n\n  private annotateModifier(\n    modifier: keyof Annotations,\n    originalContent: string,\n    color?: Annotations['color'],\n  ): string {\n    switch (modifier) {\n      case 'bold':\n        return `**${originalContent}**`\n      case 'italic':\n        return `_${originalContent}_`\n      case 'strikethrough':\n        return `~~${originalContent}~~`\n      case 'underline':\n        return `<u>${originalContent}</u>`\n      case 'code':\n        return `\\`${originalContent}\\``\n      case 'color':", "        if (color !== 'default')\n          // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n          return `<span notion-color='${color}'>${originalContent}</span>`\n        return originalContent\n    }\n  }\n}\n\nfunction processExternalVideoUrl(url: string): [boolean, string] {\n  if (url.includes('youtu'))\n    return processYoutubeUrl(url)\n\n  return [false, url]\n}\n", "function processExternalVideoUrl(url: string): [boolean, string] {\n  if (url.includes('youtu'))\n    return processYoutubeUrl(url)\n\n  return [false, url]\n}\n\nfunction processYoutubeUrl(youtubeUrl: string): [boolean, string] {\n  const lastPart = youtubeUrl.split('/').pop()\n\n  const youtubeIframe = '<iframe width=\\'560\\' height=\\'315\\' src=\\'https://www.youtube-nocookie.com/embed/{{videoId}}\\' title=\\'YouTube video player\\' frameborder=\\'0\\' allow=\\'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\' allowfullscreen></iframe>'", "  if (!lastPart)\n    return [true, youtubeIframe]\n  if (lastPart.includes('watch')) {\n    const [, queryString] = lastPart.split('watch')\n    const queryParams = new URLSearchParams(queryString)\n    if (queryParams.has('v'))\n      return [true, youtubeIframe.replace('{{videoId}}', queryParams.get('v') || '')]\n\n    return [false, youtubeUrl]\n  }\n\n  return [true, youtubeIframe.replace('{{videoId}}', lastPart)]\n}\n"]}
{"filename": "src/index.ts", "chunked_list": ["export type {\n  Properties,\n  Options,\n  CMS,\n  Route,\n  Page,\n  PageObjectTitle,\n  PageObjectRelation,\n  PageObjectUser,\n  PageMultiSelect,", "  PageObjectUser,\n  PageMultiSelect,\n  PageRichText,\n  PageSelect,\n  Cover,\n  RouteObject,\n  Plugin,\n  PluginPassthrough,\n} from './types'\n", "} from './types'\n\nexport type { BlockRenderers } from './notion-blocks-parser'\nexport { default as NotionBlocksParser } from './notion-blocks-parser'\nexport { default } from './notion-cms'\nexport { default as blocksRenderPlugin } from './plugins/render'\nexport { default as Linker } from './plugins/linker'\nexport { default as Images } from './plugins/images'\nexport { default as Head } from './plugins/head'\n", "export { default as Head } from './plugins/head'\n"]}
{"filename": "src/utilities.ts", "chunked_list": ["import { dirname } from 'node:path'\nimport fs from 'node:fs'\nimport serializeJS from 'serialize-javascript'\nimport { parse, stringify } from 'flatted'\nimport _ from 'lodash'\n\nexport function deserialize(serializedJavascript: string): Function {\n  // eslint-disable-next-line no-eval\n  return eval?.(`(${serializedJavascript})`) as Function\n}\n", "export function replaceFuncs(key: string, value: unknown) {\n  return typeof value === 'function'\n    ? `__func__${serializeJS(value)}`\n    : value\n}\n\nexport function reviveFuncs(key: string, value: unknown) {\n  return (typeof value === 'string' && value.startsWith('__func__'))\n    ? deserialize(value.replace('__func__', ''))\n    : value\n}\n", "export function filterAncestors(key: string, value: unknown) {\n  if (key === '_ancestors')\n    return '[ancestors ref]'\n  return value\n}\n\nexport function JSONStringifyWithFunctions(obj: Object): string {\n  return stringify(obj, replaceFuncs)\n}\n\nexport function JSONParseWithFunctions(string: string): Object {\n  return parse(string, reviveFuncs) as Object\n}\n", "export function JSONParseWithFunctions(string: string): Object {\n  return parse(string, reviveFuncs) as Object\n}\n\nexport function writeFile(path: string, contents: string): void {\n  fs.mkdirSync(dirname(path), { recursive: true })\n  fs.writeFileSync(path, contents)\n}\n\nexport function slugify(name: string): string {\n  return _.kebabCase(name)\n}\n", "export function slugify(name: string): string {\n  return _.kebabCase(name)\n}\n\nexport function routify(name: string): string {\n  const slug = slugify(name)\n  return slug.padStart(slug.length + 1, '/')\n}\n"]}
{"filename": "src/plugins/images.ts", "chunked_list": ["import fs from 'node:fs'\nimport { Buffer } from 'node:buffer'\nimport { fileTypeFromBuffer } from 'file-type'\nimport { nanoid } from 'nanoid'\nimport sharp from 'sharp'\nimport type { Content, PageContent, PluginExecOptions } from '../types'\n\ninterface ImageCacheEntry {\n  filename?: string\n  location?: string\n  url?: string\n}\n", "interface ImageCache { [key: string]: Array<ImageCacheEntry> }\n\nconst IMAGE_FILE_MATCH_REGEX = /(.*)X-Amz-Algorithm/g\nconst IMAGE_CACHE_FILENAME = 'ncms-image-cache.json'\nconst GENERIC_MATCH = /\\b(https?:\\/\\/[\\w_#&?.\\/-]*?\\.(?:png|jpe?g|svg|ico))(?=[`'\")\\]])/ig\nconst IMAGE_SOURCE_MATCH = /<img[^>]*src=['|\"](https?:\\/\\/[^'|\"]+)(?:['|\"])/ig\n\nfunction multiStringMatch(stringA: unknown, stringB: unknown): Boolean {\n  if (typeof stringA !== 'string' || typeof stringB !== 'string' || !stringA || !stringB)\n    return false\n  const matchA = stringA.match(IMAGE_FILE_MATCH_REGEX)\n  const matchB = stringB.match(IMAGE_FILE_MATCH_REGEX)\n  return Boolean(matchA && matchB && (matchA[0] === matchB[0]))\n}\n\nexport default function ({\n  globalExtension = 'webp',\n  compression = 80,\n  imageCacheDirectory = './public',\n  customMatchers = [],\n}: {\n  globalExtension?: 'webp' | 'png' | 'jpeg'\n  compression?: number\n  imageCacheDirectory?: string\n  customMatchers?: RegExp[]\n} = {}) {\n  let imageCache: ImageCache\n", "  if (typeof stringA !== 'string' || typeof stringB !== 'string' || !stringA || !stringB)\n    return false\n  const matchA = stringA.match(IMAGE_FILE_MATCH_REGEX)\n  const matchB = stringB.match(IMAGE_FILE_MATCH_REGEX)\n  return Boolean(matchA && matchB && (matchA[0] === matchB[0]))\n}\n\nexport default function ({\n  globalExtension = 'webp',\n  compression = 80,\n  imageCacheDirectory = './public',\n  customMatchers = [],\n}: {\n  globalExtension?: 'webp' | 'png' | 'jpeg'\n  compression?: number\n  imageCacheDirectory?: string\n  customMatchers?: RegExp[]\n} = {}) {\n  let imageCache: ImageCache\n", "  try {\n  // Pull existing imageCache\n    if (fs.existsSync(`${imageCacheDirectory}/remote/${IMAGE_CACHE_FILENAME}`)) {\n      imageCache = JSON.parse(\n        fs.readFileSync(`${imageCacheDirectory}/remote/${IMAGE_CACHE_FILENAME}`, 'utf-8')) as ImageCache\n    }\n    else {\n      imageCache = {}\n    }\n  }\n  catch (e) {\n    console.warn(e, 'ncms-plugin-images: error attempting to read image cache.')\n    imageCache = {}\n  }\n", "  catch (e) {\n    console.warn(e, 'ncms-plugin-images: error attempting to read image cache.')\n    imageCache = {}\n  }\n\n  async function writeOutImage(imageUrl: string, existingImageFile: ImageCacheEntry): Promise<string> {\n    let filename = ''\n    if (existingImageFile)\n      return existingImageFile.filename as string\n    const response = await fetch(imageUrl)\n    const arrayBuffer = await response.arrayBuffer()\n    const buffer = Buffer.from(arrayBuffer)\n    const fileType = await fileTypeFromBuffer(buffer)", "    if (fileType?.ext) {\n      const id = nanoid(6)\n      filename = `${id}.remote.${globalExtension}`\n      const outputFilePath = `${imageCacheDirectory}/remote/${filename}`\n      const imageBuffer = sharp(buffer)\n      const webPBuffer = await imageBuffer[globalExtension]({\n        quality: compression,\n        nearLossless: true,\n        effort: 6,\n      }).toBuffer()\n      const writeStream = fs.createWriteStream(outputFilePath)\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      writeStream.on('error', err => console.warn(`ncms-plugin-images: failed to write image file: ${err}`))\n      writeStream.write(webPBuffer)\n    }\n    return filename\n  }\n", "  function detectExisting(path: string, imageUrl: string): ImageCacheEntry {\n    const entries = imageCache[path]\n    return entries.filter((entry) => {\n      return multiStringMatch(entry.url, imageUrl) || multiStringMatch(entry.location, imageUrl)\n    })[0]\n  }\n\n  async function processImage(\n    path: string,\n    imageUrl: string,\n    updator: { update: Content | string },\n    debug?: boolean): Promise<void> {", "    if (imageUrl && path) {\n      let filename = ''\n      try {\n        filename = await writeOutImage(imageUrl, detectExisting(path, imageUrl))\n      }\n      catch (e) {\n        if (debug)\n          console.warn('ncms-plugin-images: File type could not be reliably determined! The binary data may be malformed! No file saved!')\n        return\n      }\n      if (filename) {\n        imageCache[path].push({\n          filename,\n          location: `/remote/${filename}`,\n          url: imageUrl,\n        })\n        // if we don't do this, the replaceall cant find the proper url below", "      if (filename) {\n        imageCache[path].push({\n          filename,\n          location: `/remote/${filename}`,\n          url: imageUrl,\n        })\n        // if we don't do this, the replaceall cant find the proper url below\n        if (typeof updator.update !== 'string') {\n          if (updator.update?.html.includes('amazonaws'))\n            updator.update.html = updator.update.html.replaceAll('&amp;', '&')\n          updator.update.html = updator.update.html.replace(imageUrl, `/remote/${filename}`)\n        }\n        else {\n          // This replaces the coverImage\n          updator.update = updator.update.replace(imageUrl, `/remote/${filename}`)\n        }", "          if (updator.update?.html.includes('amazonaws'))\n            updator.update.html = updator.update.html.replaceAll('&amp;', '&')\n          updator.update.html = updator.update.html.replace(imageUrl, `/remote/${filename}`)\n        }\n        else {\n          // This replaces the coverImage\n          updator.update = updator.update.replace(imageUrl, `/remote/${filename}`)\n        }\n        if (debug)\n          console.log('ncms-plugin-images: rewriting', path, 'at', filename)\n      }\n    }\n  }\n\n  return {\n    name: 'ncms-plugin-images',\n    hook: 'during-tree',\n    core: true,\n    exec: async (context: PageContent, options: PluginExecOptions) => {\n      const copyOfContext = structuredClone(context)", "        if (debug)\n          console.log('ncms-plugin-images: rewriting', path, 'at', filename)\n      }\n    }\n  }\n\n  return {\n    name: 'ncms-plugin-images',\n    hook: 'during-tree',\n    core: true,\n    exec: async (context: PageContent, options: PluginExecOptions) => {\n      const copyOfContext = structuredClone(context)", "      if (!copyOfContext.path)\n        return\n\n      const matchables = [\n        GENERIC_MATCH,\n        IMAGE_SOURCE_MATCH,\n        ...customMatchers,\n      ]\n      if (!imageCache[copyOfContext.path])\n        imageCache[copyOfContext.path] = [] as ImageCacheEntry[]\n      const contents = {\n        update: copyOfContext.content as Content,\n      }\n      const coverImage = {\n        update: copyOfContext.coverImage as string,\n      }\n      // Must run all async in series so that we don't end up with duplicates", "      if (!imageCache[copyOfContext.path])\n        imageCache[copyOfContext.path] = [] as ImageCacheEntry[]\n      const contents = {\n        update: copyOfContext.content as Content,\n      }\n      const coverImage = {\n        update: copyOfContext.coverImage as string,\n      }\n      // Must run all async in series so that we don't end up with duplicates\n      for (const match of matchables) {\n        if (!copyOfContext.path)\n          return\n        const path = copyOfContext.path\n        const matched = (contents.update && Array.from(contents.update.html.matchAll(match), m => m[1])) || []\n        const matchedCoverImages = (coverImage.update && [coverImage.update]) || []", "      for (const match of matchables) {\n        if (!copyOfContext.path)\n          return\n        const path = copyOfContext.path\n        const matched = (contents.update && Array.from(contents.update.html.matchAll(match), m => m[1])) || []\n        const matchedCoverImages = (coverImage.update && [coverImage.update]) || []\n        for (const imageUrl of matched)\n          await processImage(path, imageUrl, contents, options.debug)\n\n        for (const imageUrl of matchedCoverImages)\n          await processImage(path, imageUrl, coverImage, options.debug)\n      }\n      copyOfContext.content = contents.update\n      copyOfContext.coverImage = coverImage.update", "        for (const imageUrl of matchedCoverImages)\n          await processImage(path, imageUrl, coverImage, options.debug)\n      }\n      copyOfContext.content = contents.update\n      copyOfContext.coverImage = coverImage.update\n      try {\n        if (!fs.existsSync(`${imageCacheDirectory}/remote`))\n          fs.mkdirSync(`${imageCacheDirectory}/remote`)\n        fs.writeFileSync(`${imageCacheDirectory}/remote/${IMAGE_CACHE_FILENAME}`, JSON.stringify(imageCache))\n        if (options.debug)\n          fs.writeFileSync('debug/images.json', JSON.stringify(imageCache))\n      }", "        if (options.debug)\n          fs.writeFileSync('debug/images.json', JSON.stringify(imageCache))\n      }\n      catch (e) {\n        if (options.debug)\n          console.warn(e, 'ncms-plugin-images: error writing to image cache.')\n      }\n      return copyOfContext\n    },\n  }\n}\n"]}
{"filename": "src/plugins/render.ts", "chunked_list": ["import type { Blocks } from '@notion-stuff/v4-types'\nimport _ from 'lodash'\nimport type { BlockRenderers } from '../notion-blocks-parser'\nimport NotionBlocksParser from '../notion-blocks-parser'\nimport type { PluginPassthrough, UnsafePlugin } from '../types'\n\nexport default function ({\n  blockRenderers,\n  debug,\n}: { blockRenderers: BlockRenderers; debug?: boolean }) {", "  debug,\n}: { blockRenderers: BlockRenderers; debug?: boolean }) {\n  const parser = new NotionBlocksParser({ blockRenderers, debug })\n  return {\n    parser,\n    name: 'ncms-plugin-blocks-render',\n    core: true,\n    hook: 'parse',\n    exec: (context: PluginPassthrough): string => {\n      const copyOfContext = _.cloneDeep(context) as Blocks", "    exec: (context: PluginPassthrough): string => {\n      const copyOfContext = _.cloneDeep(context) as Blocks\n      return parser.blocksToHtml(copyOfContext)\n    },\n  } satisfies UnsafePlugin\n}\n"]}
{"filename": "src/plugins/linker.ts", "chunked_list": ["import { idToUuid } from 'notion-utils'\nimport type { CMS, PageContent } from '../types'\nimport NotionCMS from '../notion-cms'\n\nconst links: Map<string, string> = new Map()\n\nconst ESCAPED_HREF_REGEX = /<a\\s+(?:[^>]*?\\s+)?href=([\"'])\\/([0-9a-f]{8}[0-9a-f]{4}[0-9a-f]{4}[0-9a-f]{4}[0-9a-f]{12})\\1/g\n\nexport default function () {\n  return [{", "export default function () {\n  return [{\n    name: 'ncms-plugin-linker',\n    hook: 'during-tree',\n    core: true,\n    exec: (context: PageContent) => {\n      const copyOfContext = structuredClone(context)\n      if (copyOfContext._notion?.id && copyOfContext.path)\n        links.set(copyOfContext._notion?.id, copyOfContext.path)\n      return copyOfContext\n    },\n  },\n  {\n    name: 'ncms-plugin-linker',\n    hook: 'post-tree',\n    core: true,\n    exec: (context: CMS) => {\n      const copyOfContext = structuredClone(context)\n\n      const cmsWalker = NotionCMS._createCMSWalker((node: PageContent) => {\n        let html: string | undefined = node.content?.html\n        let md: string | undefined = node.content?.markdown\n        let plaintext: string | undefined = node.content?.plaintext\n", "        if (html) {\n          const pathsToReplace = [...html.matchAll(ESCAPED_HREF_REGEX)]\n          pathsToReplace.forEach((path) => {\n            const id = path[2]\n            const uuid = idToUuid(id)\n\n            const replacerPath = links.get(uuid)\n            if (uuid && !replacerPath) {\n              console.warn(\n                `ncms-plugin-linker: found a uuid without a corresponding path. This page: ${uuid} is not included in NotionCMS.`)\n            }", "            if (replacerPath && uuid && html) {\n              html = html.replaceAll(`/${id}`, replacerPath)\n              md = md?.replaceAll(`/${id}`, replacerPath)\n              plaintext = plaintext?.replaceAll(`/${id}`, replacerPath)\n            }\n          })\n          if (node.content) {\n            node.content.html = html\n            if (md)\n              node.content.markdown = md\n            if (plaintext)\n              node.content.plaintext = plaintext\n          }\n        }\n      })\n\n      cmsWalker.walk(copyOfContext)\n\n      return copyOfContext\n    },\n  }]\n}\n", "            if (md)\n              node.content.markdown = md\n            if (plaintext)\n              node.content.plaintext = plaintext\n          }\n        }\n      })\n\n      cmsWalker.walk(copyOfContext)\n\n      return copyOfContext\n    },\n  }]\n}\n"]}
{"filename": "src/plugins/head.ts", "chunked_list": ["import type { PageContent } from '../types'\n\nexport default function () {\n  return {\n    name: 'ncms-plugin-head',\n    hook: 'during-tree',\n    core: true,\n    exec: (context: PageContent) => {\n      const copyOfContext = structuredClone(context) as PageContentWithMeta\n      copyOfContext.meta = {", "      const copyOfContext = structuredClone(context) as PageContentWithMeta\n      copyOfContext.meta = {\n        title: '',\n        description: '',\n      }\n      if (copyOfContext.otherProps?.metaTitle\n         && copyOfContext.otherProps?.metaTitle.type === 'rich_text')\n        copyOfContext.meta.title = copyOfContext.otherProps?.metaTitle?.rich_text[0]?.plain_text\n\n      if (copyOfContext.otherProps?.metaDescription\n         && copyOfContext.otherProps?.metaDescription.type === 'rich_text')\n        copyOfContext.meta.description = copyOfContext.otherProps?.metaDescription?.rich_text[0]?.plain_text\n\n      return copyOfContext\n    },\n  }\n}\n", "      if (copyOfContext.otherProps?.metaDescription\n         && copyOfContext.otherProps?.metaDescription.type === 'rich_text')\n        copyOfContext.meta.description = copyOfContext.otherProps?.metaDescription?.rich_text[0]?.plain_text\n\n      return copyOfContext\n    },\n  }\n}\n\nexport interface PageContentWithMeta extends PageContent {\n  meta: Meta\n}\n", "export interface PageContentWithMeta extends PageContent {\n  meta: Meta\n}\n\ninterface Meta {\n  title: string\n  description: string\n}\n"]}
{"filename": "src/tests/limiter.spec.ts", "chunked_list": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { setTimeout } from 'node:timers/promises'\nimport Bottleneck from 'bottleneck'\nimport dotenv from 'dotenv'\nimport { suite } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport NotionCMS from '../index'\n\nimport type { Content, PageContent } from '../types'", "\nimport type { Content, PageContent } from '../types'\nimport {\n  expectedRejectedPageData,\n  expectedRoutes,\n  expectedSiteData,\n  expectedTagGroups,\n  expectedTaggedCollection,\n  expectedTags,\n} from './notion-api-mock.spec'", "  expectedTags,\n} from './notion-api-mock.spec'\n\ndotenv.config()\n\nexport const TestLimiter = suite('TestLimiter')\n\nconst databaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n\nconst limiter = new Bottleneck({", "\nconst limiter = new Bottleneck({\n  maxConcurrent: 1,\n  minTime: 333,\n})\n\nconst testCMS = new NotionCMS({\n  databaseId,\n  notionAPIKey: process.env.NOTION,\n  draftMode: true,", "  notionAPIKey: process.env.NOTION,\n  draftMode: true,\n  limiter,\n})\n\nconsole.log('limiter test: purging cache')\ntestCMS.purgeCache()\n\nawait testCMS.fetch()\n", "await testCMS.fetch()\n\n// temporarily ignore md and plaintext versions of content\nfunction filterContent(content: Content) {\n  delete content.plaintext\n  delete content.markdown\n  return content\n}\n\ntestCMS.walk((node: PageContent) => filterContent(node.content))\n\n// routes\n// walk is used by routes so this is tested here implicitly\nTestLimiter('routes', () => {\n  assert.equal(testCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nTestLimiter('tags', () => {\n  assert.equal(testCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nTestLimiter('siteData', () => {\n  assert.equal(testCMS.cms.siteData, expectedSiteData)\n})\n\n// data getter\nTestLimiter('data (getter)', () => {\n  assert.equal(testCMS.cms.siteData, testCMS.data)\n})\n\n// taggedCollection\nTestLimiter('taggedCollection', () => {\n  const results = testCMS.getTaggedCollection(['notion', 'programming'])\n  assert.equal(results, expectedTaggedCollection)\n})\n\n// query by path\nTestLimiter('query by path', () => {\n  const productB = testCMS.queryByPath('/products/category/product-b')\n  assert.equal(productB.name, 'Product B')\n  const category = testCMS.queryByPath('/products/category')\n  assert.equal(category.name, 'Category')\n})\n\n// filter sub pages\nTestLimiter('filter sub pages', () => {\n  const category = testCMS.queryByPath('/products/category')\n  const productsInCategory = testCMS.filterSubPages(category)\n  const names = productsInCategory.map((product: PageContent) => product.name)\n  assert.equal(names, ['Product B', 'Product A'])\n\n  // Uncomment when fuzzy search is built\n  // const categoryB = testCMS.queryByPath('/category')\n  // const productsInCategoryB = testCMS.filterSubPages(categoryB)\n  // const namesB = productsInCategoryB.map(product => product.name)\n  // assert.equal(namesB, ['Product B', 'Product A'])\n})\n\n// reject sub pages\nTestLimiter('reject sub pages', () => {\n  const category = testCMS.queryByPath('/products/category')\n  const categoryProps = testCMS.rejectSubPages(category)\n  assert.equal(categoryProps, expectedRejectedPageData)\n\n  // Uncomment when fuzzy search is built\n  // const categoryB = testCMS.queryByPath('/category')\n  // const categoryPropsB = testCMS.rejectSubPages(categoryB)\n  // assert.equal(categoryPropsB, expectedRejectedPageData)\n})\n\nTestLimiter('walk from partial path', () => {\n  const test = []\n  testCMS.walk((node: PageContent) => test.push(node.name), '/products/category')\n  assert.equal(test, ['Product B', 'Product A'])\n})\n\nTestLimiter('async walk from partial path', async () => {\n  const test = []\n  await testCMS.asyncWalk(async (node: PageContent) => await setTimeout(test.push(node.name), 300), '/products/category')\n  assert.equal(test, ['Product B', 'Product A'])\n})\n\nTestLimiter('import', async () => {\n  assert.equal(\n    await testCMS.import(JSON.stringify({\n      metadata: {\n        databaseId,\n        rootUrl: '',\n      },\n      stages: [\n        'db',\n        'content',\n        'complete',\n      ],\n      routes: [],\n      tags: expectedTags,\n      tagGroups: expectedTagGroups,\n      siteData: expectedSiteData,\n    })),\n    testCMS.cms,\n  )\n})\n\nTestLimiter('import fails', async () => {", "  try {\n    await testCMS.import()\n    assert.unreachable('should have thrown')\n  }\n  catch (err) {\n    assert.instance(err, Error)\n  }\n})\n"]}
{"filename": "src/tests/test.ts", "chunked_list": ["import { TestNotionCMS } from './notion-cms.spec'\nimport {\n  PluginsCustom,\n  PluginsCustomFallback,\n  PluginsDefault,\n  PluginsDefaultOther,\n} from './custom-render.spec'\nimport { TestLimiter } from './limiter.spec'\nimport { TestNotionCMSCache } from './notion-cms-caching.spec'\n", "import { TestNotionCMSCache } from './notion-cms-caching.spec'\n\nTestNotionCMS.run()\n\nTestLimiter.run()\n\nPluginsDefault.run()\nPluginsDefaultOther.run()\nPluginsCustom.run()\nPluginsCustomFallback.run()", "PluginsCustom.run()\nPluginsCustomFallback.run()\n\nTestNotionCMSCache.run()\n"]}
{"filename": "src/tests/custom-render.spec.ts", "chunked_list": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { suite } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport dotenv from 'dotenv'\nimport type { Block } from '@notion-stuff/v4-types'\nimport NotionCMS, { NotionBlocksParser, blocksRenderPlugin } from '../index'\nimport type { Content, PageContent } from '../types'\n\nimport {", "\nimport {\n  expectedKitchenSinkSiteData,\n  expectedRoutes,\n  expectedSiteData,\n  expectedTags,\n} from './notion-api-mock.spec'\n\ndotenv.config()\n", "dotenv.config()\n\n// Kitchen sink database\nconst databaseId = '21608fc7-c1c5-40a1-908f-9ade89585111'\nconst notionAPIKey = process.env.NOTION\n\nlet PluginsDefaultCMS: NotionCMS,\n  PluginsDefaultOtherCMS: NotionCMS,\n  PluginsCustomCMS: NotionCMS,\n  PluginsCustomFallbackCMS: NotionCMS", "  PluginsCustomCMS: NotionCMS,\n  PluginsCustomFallbackCMS: NotionCMS\n\n// Helper Function for parsing internal block rich text\n// eslint-disable-next-line jest/unbound-method\nconst parseRichText = NotionBlocksParser.parseRichText\n\n// temporarily ignore md and plaintext versions of content\nfunction filterContent(content: Content) {\n  delete content.plaintext\n  delete content.markdown\n  return content\n}\n\nexport const PluginsDefault = suite('PluginsDefault')\n\nPluginsDefault.before(async () => {\n  PluginsDefaultCMS = new NotionCMS({\n    databaseId: '610627a9-28b1-4477-b660-c00c5364435b',\n    notionAPIKey,\n    draftMode: true,\n    // No Plugins - use default renderer plugin behind the scenes\n  })\n  console.log('custom render test: purging cache')\n  PluginsDefaultCMS.purgeCache()\n  await PluginsDefaultCMS.fetch()\n  PluginsDefaultCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\n// routes\n// walk is used by routes so this is tested here implicitly\nPluginsDefault('routes', () => {\n  assert.equal(PluginsDefaultCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nPluginsDefault('tags', () => {\n  assert.equal(PluginsDefaultCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nPluginsDefault('siteData', () => {\n  assert.equal(PluginsDefaultCMS.cms.siteData, expectedSiteData)\n})\n\nexport const PluginsDefaultOther = suite('PluginsDefaultOther')\n\nPluginsDefaultOther.before(async () => {\n  PluginsDefaultOtherCMS = new NotionCMS({\n    databaseId: '610627a9-28b1-4477-b660-c00c5364435b',\n    notionAPIKey,\n    draftMode: true,\n    // Standin Plugin - use default renderer plugin behind the scenes\n    plugins: [() => ({\n      name: 'ncms-placeholder-plugin',\n      hook: 'post-parse',\n      exec: (block: Block) => block,\n    })],\n  })\n  console.log('custom render test: purging cache')\n  PluginsDefaultOtherCMS.purgeCache()\n  await PluginsDefaultOtherCMS.fetch()\n  PluginsDefaultOtherCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\n// routes\n// walk is used by routes so this is tested here implicitly\nPluginsDefaultOther('routes', () => {\n  assert.equal(PluginsDefaultOtherCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nPluginsDefaultOther('tags', () => {\n  assert.equal(PluginsDefaultOtherCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nPluginsDefaultOther('siteData', () => {\n  assert.equal(PluginsDefaultOtherCMS.cms.siteData, expectedSiteData)\n})\n\nexport const PluginsCustom = suite('PluginsCustom')\n\nPluginsCustom.before(async () => {\n  PluginsCustomCMS = new NotionCMS({\n    // Kitchen sink DB in community/tests\n    databaseId,\n    notionAPIKey,\n    // Should work with other plugin too\n    plugins: [() => ({\n      name: 'ncms-placeholder-plugin',\n      hook: 'post-parse',\n      exec: (block: Block) => block,\n    }),\n    // use custom renderer plugin behind the scenes\n    blocksRenderPlugin({\n      blockRenderers: {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        CalloutBlock: block => `<div ncms-test callout>${parseRichText(block.callout.rich_text as string)}</div ncms-test callout>\\n\\n`,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        QuoteBlock: block => `<div ncms-test quote>${parseRichText(block.quote.rich_text as string)}</div ncms-test quote>\\n\\n`,\n      },\n    })],\n  })\n  console.log('custom render test: purging cache')\n  PluginsCustomCMS.purgeCache()\n  await PluginsCustomCMS.fetch()\n  PluginsCustomCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\nPluginsCustom('Custom render correctly alters blocks', () => {\n  assert.ok((PluginsCustomCMS.data['/kitchen-sink'] as PageContent)\n    .content.html.match(/<div ncms-test callout>([.|\\s\\S]*)<\\/div ncms-test callout>/g))\n  assert.ok((PluginsCustomCMS.data['/kitchen-sink'] as PageContent)\n    .content.html.match(/<div ncms-test quote>([.|\\s\\S]*)<\\/div ncms-test quote>/g))\n})\n\nexport const PluginsCustomFallback = suite('PluginsCustomFallback')\n\nPluginsCustomFallback.before(async () => {\n  PluginsCustomFallbackCMS = new NotionCMS({\n    databaseId,\n    notionAPIKey,\n    draftMode: true,\n    // Should work with other plugin too\n    plugins: [\n      // use custom renderer plugin behind the scenes\n      blocksRenderPlugin({\n        blockRenderers: {\n          CalloutBlock: (block: Block) => null, // Nulls should invoke default renderer\n          QuoteBlock: (block: Block) => null, // Nulls should invoke default renderer\n        },\n      })],\n  })\n  console.log('custom render test: purging cache')\n  PluginsCustomFallbackCMS.purgeCache()\n  await PluginsCustomFallbackCMS.fetch()\n  PluginsCustomFallbackCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\nPluginsCustomFallback('Custom render correctly uses fallback block renderer ', () => {\n  assert.equal((PluginsCustomFallbackCMS.cms.siteData['/kitchen-sink'] as PageContent)\n    .content.html, (expectedKitchenSinkSiteData['/kitchen-sink'] as PageContent).content.html)\n})\n", "function filterContent(content: Content) {\n  delete content.plaintext\n  delete content.markdown\n  return content\n}\n\nexport const PluginsDefault = suite('PluginsDefault')\n\nPluginsDefault.before(async () => {\n  PluginsDefaultCMS = new NotionCMS({\n    databaseId: '610627a9-28b1-4477-b660-c00c5364435b',\n    notionAPIKey,\n    draftMode: true,\n    // No Plugins - use default renderer plugin behind the scenes\n  })\n  console.log('custom render test: purging cache')\n  PluginsDefaultCMS.purgeCache()\n  await PluginsDefaultCMS.fetch()\n  PluginsDefaultCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\n// routes\n// walk is used by routes so this is tested here implicitly\nPluginsDefault('routes', () => {\n  assert.equal(PluginsDefaultCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nPluginsDefault('tags', () => {\n  assert.equal(PluginsDefaultCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nPluginsDefault('siteData', () => {\n  assert.equal(PluginsDefaultCMS.cms.siteData, expectedSiteData)\n})\n\nexport const PluginsDefaultOther = suite('PluginsDefaultOther')\n\nPluginsDefaultOther.before(async () => {\n  PluginsDefaultOtherCMS = new NotionCMS({\n    databaseId: '610627a9-28b1-4477-b660-c00c5364435b',\n    notionAPIKey,\n    draftMode: true,\n    // Standin Plugin - use default renderer plugin behind the scenes\n    plugins: [() => ({\n      name: 'ncms-placeholder-plugin',\n      hook: 'post-parse',\n      exec: (block: Block) => block,\n    })],\n  })\n  console.log('custom render test: purging cache')\n  PluginsDefaultOtherCMS.purgeCache()\n  await PluginsDefaultOtherCMS.fetch()\n  PluginsDefaultOtherCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\n// routes\n// walk is used by routes so this is tested here implicitly\nPluginsDefaultOther('routes', () => {\n  assert.equal(PluginsDefaultOtherCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nPluginsDefaultOther('tags', () => {\n  assert.equal(PluginsDefaultOtherCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nPluginsDefaultOther('siteData', () => {\n  assert.equal(PluginsDefaultOtherCMS.cms.siteData, expectedSiteData)\n})\n\nexport const PluginsCustom = suite('PluginsCustom')\n\nPluginsCustom.before(async () => {\n  PluginsCustomCMS = new NotionCMS({\n    // Kitchen sink DB in community/tests\n    databaseId,\n    notionAPIKey,\n    // Should work with other plugin too\n    plugins: [() => ({\n      name: 'ncms-placeholder-plugin',\n      hook: 'post-parse',\n      exec: (block: Block) => block,\n    }),\n    // use custom renderer plugin behind the scenes\n    blocksRenderPlugin({\n      blockRenderers: {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        CalloutBlock: block => `<div ncms-test callout>${parseRichText(block.callout.rich_text as string)}</div ncms-test callout>\\n\\n`,\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        QuoteBlock: block => `<div ncms-test quote>${parseRichText(block.quote.rich_text as string)}</div ncms-test quote>\\n\\n`,\n      },\n    })],\n  })\n  console.log('custom render test: purging cache')\n  PluginsCustomCMS.purgeCache()\n  await PluginsCustomCMS.fetch()\n  PluginsCustomCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\nPluginsCustom('Custom render correctly alters blocks', () => {\n  assert.ok((PluginsCustomCMS.data['/kitchen-sink'] as PageContent)\n    .content.html.match(/<div ncms-test callout>([.|\\s\\S]*)<\\/div ncms-test callout>/g))\n  assert.ok((PluginsCustomCMS.data['/kitchen-sink'] as PageContent)\n    .content.html.match(/<div ncms-test quote>([.|\\s\\S]*)<\\/div ncms-test quote>/g))\n})\n\nexport const PluginsCustomFallback = suite('PluginsCustomFallback')\n\nPluginsCustomFallback.before(async () => {\n  PluginsCustomFallbackCMS = new NotionCMS({\n    databaseId,\n    notionAPIKey,\n    draftMode: true,\n    // Should work with other plugin too\n    plugins: [\n      // use custom renderer plugin behind the scenes\n      blocksRenderPlugin({\n        blockRenderers: {\n          CalloutBlock: (block: Block) => null, // Nulls should invoke default renderer\n          QuoteBlock: (block: Block) => null, // Nulls should invoke default renderer\n        },\n      })],\n  })\n  console.log('custom render test: purging cache')\n  PluginsCustomFallbackCMS.purgeCache()\n  await PluginsCustomFallbackCMS.fetch()\n  PluginsCustomFallbackCMS.walk((node: PageContent) => filterContent(node.content))\n})\n\nPluginsCustomFallback('Custom render correctly uses fallback block renderer ', () => {\n  assert.equal((PluginsCustomFallbackCMS.cms.siteData['/kitchen-sink'] as PageContent)\n    .content.html, (expectedKitchenSinkSiteData['/kitchen-sink'] as PageContent).content.html)\n})\n"]}
{"filename": "src/tests/notion-cms.spec.ts", "chunked_list": ["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\nimport { setTimeout } from 'node:timers/promises'\nimport dotenv from 'dotenv'\nimport { suite } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport NotionCMS from '../index'\n\nimport type { Content, PageContent } from '../types'\n", "import type { Content, PageContent } from '../types'\n\nimport {\n  expectedRejectedPageData,\n  expectedRoutes,\n  expectedSiteData,\n  expectedTagGroups,\n  expectedTaggedCollection,\n  expectedTags,\n} from './notion-api-mock.spec'", "  expectedTags,\n} from './notion-api-mock.spec'\n\ndotenv.config()\n\nexport const TestNotionCMS = suite('TestNotionCMS')\n\nconst databaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n\nconst testCMS: NotionCMS = new NotionCMS({", "\nconst testCMS: NotionCMS = new NotionCMS({\n  databaseId,\n  notionAPIKey: process.env.NOTION,\n  draftMode: true,\n})\n\nawait testCMS.pull()\n\n// temporarily ignore md and plaintext versions of content\nfunction filterContent(content: Content) {\n  delete content.plaintext\n  delete content.markdown\n  return content\n}\n\ntestCMS.walk((node: PageContent) => filterContent(node.content))\n\n// routes\n// walk is used by routes so this is tested here implicitly\nTestNotionCMS('routes', () => {\n  assert.equal(testCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nTestNotionCMS('tags', () => {\n  assert.equal(testCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nTestNotionCMS('siteData', () => {\n  assert.equal(testCMS.cms.siteData, expectedSiteData)\n})\n\n// data getter\nTestNotionCMS('data (getter)', () => {\n  assert.equal(testCMS.cms.siteData, testCMS.data)\n})\n\n// taggedCollection\nTestNotionCMS('taggedCollection', () => {\n  const results = testCMS.getTaggedCollection(['notion', 'programming'])\n  assert.equal(results, expectedTaggedCollection)\n})\n\n// query by path\nTestNotionCMS('query by path', () => {\n  const productB: PageContent = testCMS.queryByPath('/products/category/product-b')\n  assert.equal(productB.name, 'Product B')\n  const category: PageContent = testCMS.queryByPath('/products/category')\n  assert.equal(category.name, 'Category')\n})\n\n// filter sub pages\nTestNotionCMS('filter sub pages', () => {\n  const category = testCMS.queryByPath('/products/category')\n  const productsInCategory = testCMS.filterSubPages(category)\n  const names = productsInCategory.map((product: PageContent) => product.name)\n  assert.equal(names, ['Product B', 'Product A'])\n\n  // Uncomment when fuzzy search is built\n  // const categoryB = testCMS.queryByPath('/category')\n  // const productsInCategoryB = testCMS.filterSubPages(categoryB)\n  // const namesB = productsInCategoryB.map(product => product.name)\n  // assert.equal(namesB, ['Product B', 'Product A'])\n})\n\n// reject sub pages\nTestNotionCMS('reject sub pages', () => {\n  const category = testCMS.queryByPath('/products/category')\n  const categoryProps = testCMS.rejectSubPages(category)\n  assert.equal(categoryProps, expectedRejectedPageData)\n\n  // Uncomment when fuzzy search is built\n  // const categoryB = testCMS.queryByPath('/category')\n  // const categoryPropsB = testCMS.rejectSubPages(categoryB)\n  // assert.equal(categoryPropsB, expectedRejectedPageData)\n})\n\nTestNotionCMS('walk from partial path', () => {\n  const test = []\n  testCMS.walk((node: PageContent) => test.push(node.name), '/products/category')\n  assert.equal(test, ['Product B', 'Product A'])\n})\n\nTestNotionCMS('async walk from partial path', async () => {\n  const test = []\n  await testCMS.asyncWalk(async (node: PageContent) => await setTimeout(test.push(node.name), 300), '/products/category')\n  assert.equal(test, ['Product B', 'Product A'])\n})\n\nTestNotionCMS('import', async () => {\n  assert.equal(\n    await testCMS.import(JSON.stringify({\n      metadata: {\n        databaseId,\n        rootUrl: '',\n      },\n      stages: [\n        'db',\n        'content',\n        'complete',\n      ],\n      routes: [],\n      tags: expectedTags,\n      tagGroups: expectedTagGroups,\n      siteData: expectedSiteData,\n    })),\n    testCMS.cms,\n  )\n})\n\nTestNotionCMS('import fails', async () => {", "\n// temporarily ignore md and plaintext versions of content\nfunction filterContent(content: Content) {\n  delete content.plaintext\n  delete content.markdown\n  return content\n}\n\ntestCMS.walk((node: PageContent) => filterContent(node.content))\n\n// routes\n// walk is used by routes so this is tested here implicitly\nTestNotionCMS('routes', () => {\n  assert.equal(testCMS.routes.sort(), expectedRoutes.sort())\n})\n\n// tags\nTestNotionCMS('tags', () => {\n  assert.equal(testCMS.cms.tags.sort(), expectedTags.sort())\n})\n\n// Tree structures\nTestNotionCMS('siteData', () => {\n  assert.equal(testCMS.cms.siteData, expectedSiteData)\n})\n\n// data getter\nTestNotionCMS('data (getter)', () => {\n  assert.equal(testCMS.cms.siteData, testCMS.data)\n})\n\n// taggedCollection\nTestNotionCMS('taggedCollection', () => {\n  const results = testCMS.getTaggedCollection(['notion', 'programming'])\n  assert.equal(results, expectedTaggedCollection)\n})\n\n// query by path\nTestNotionCMS('query by path', () => {\n  const productB: PageContent = testCMS.queryByPath('/products/category/product-b')\n  assert.equal(productB.name, 'Product B')\n  const category: PageContent = testCMS.queryByPath('/products/category')\n  assert.equal(category.name, 'Category')\n})\n\n// filter sub pages\nTestNotionCMS('filter sub pages', () => {\n  const category = testCMS.queryByPath('/products/category')\n  const productsInCategory = testCMS.filterSubPages(category)\n  const names = productsInCategory.map((product: PageContent) => product.name)\n  assert.equal(names, ['Product B', 'Product A'])\n\n  // Uncomment when fuzzy search is built\n  // const categoryB = testCMS.queryByPath('/category')\n  // const productsInCategoryB = testCMS.filterSubPages(categoryB)\n  // const namesB = productsInCategoryB.map(product => product.name)\n  // assert.equal(namesB, ['Product B', 'Product A'])\n})\n\n// reject sub pages\nTestNotionCMS('reject sub pages', () => {\n  const category = testCMS.queryByPath('/products/category')\n  const categoryProps = testCMS.rejectSubPages(category)\n  assert.equal(categoryProps, expectedRejectedPageData)\n\n  // Uncomment when fuzzy search is built\n  // const categoryB = testCMS.queryByPath('/category')\n  // const categoryPropsB = testCMS.rejectSubPages(categoryB)\n  // assert.equal(categoryPropsB, expectedRejectedPageData)\n})\n\nTestNotionCMS('walk from partial path', () => {\n  const test = []\n  testCMS.walk((node: PageContent) => test.push(node.name), '/products/category')\n  assert.equal(test, ['Product B', 'Product A'])\n})\n\nTestNotionCMS('async walk from partial path', async () => {\n  const test = []\n  await testCMS.asyncWalk(async (node: PageContent) => await setTimeout(test.push(node.name), 300), '/products/category')\n  assert.equal(test, ['Product B', 'Product A'])\n})\n\nTestNotionCMS('import', async () => {\n  assert.equal(\n    await testCMS.import(JSON.stringify({\n      metadata: {\n        databaseId,\n        rootUrl: '',\n      },\n      stages: [\n        'db',\n        'content',\n        'complete',\n      ],\n      routes: [],\n      tags: expectedTags,\n      tagGroups: expectedTagGroups,\n      siteData: expectedSiteData,\n    })),\n    testCMS.cms,\n  )\n})\n\nTestNotionCMS('import fails', async () => {", "  try {\n    await testCMS.import()\n    assert.unreachable('should have thrown')\n  }\n  catch (err) {\n    assert.instance(err, Error)\n  }\n})\n\nTestNotionCMS('Options have changed', () => {\n  const options = {\n    databaseId,\n    notionAPIKey: process.env.NOTION,\n    draftMode: true,\n    plugins: [() => 'test plugin'],\n  }\n\n  const otherOptions = {\n    databaseId,\n    notionAPIKey: process.env.NOTION,\n    draftMode: true,\n    plugins: [() => 'test plugin'],\n  }\n\n  const newOptions = {\n    databaseId,\n    notionAPIKey: process.env.NOTION,\n    draftMode: false,\n  }\n\n  const testOptionsCMS: NotionCMS = new NotionCMS(options)\n\n  assert.ok(\n    testOptionsCMS._documentOptions(options) === testOptionsCMS._documentOptions(otherOptions))\n\n  assert.not(\n    testOptionsCMS._documentOptions(options) === testOptionsCMS._documentOptions(newOptions))\n})\n\nTestNotionCMS('Human readable refresh timeout', () => {\n  const testOptionsCMS: NotionCMS = new NotionCMS({\n    databaseId,\n    notionAPIKey: process.env.NOTION,\n    draftMode: true,\n    refreshTimeout: 'one hour',\n  })\n  assert.ok(\n    testOptionsCMS.refreshTimeout === 3_600_000)\n})\n"]}
{"filename": "src/tests/notion-cms-caching.spec.ts", "chunked_list": ["import dotenv from 'dotenv'\nimport { suite } from 'uvu'\nimport * as assert from 'uvu/assert'\nimport nock from 'nock'\nimport NotionCMS from '../index'\nimport type { CMS, PluginPassthrough } from '../types'\n\ndotenv.config()\n\nexport const TestNotionCMSCache = suite('TestNotionCMSCache')", "\nexport const TestNotionCMSCache = suite('TestNotionCMSCache')\n\nconst cachingDatabaseId = '1234' // this does not exist in notion\n\nconst baseUrl = 'https://api.notion.com/v1'\n\nconst cachingTestCMS: NotionCMS = new NotionCMS({\n  databaseId: cachingDatabaseId,\n  notionAPIKey: process.env.NOTION as string,", "  databaseId: cachingDatabaseId,\n  notionAPIKey: process.env.NOTION as string,\n  draftMode: true,\n})\n\ncachingTestCMS.purgeCache()\n\nconst topLevelPageId = '456'\nconst topLevelPageId2 = '789'\n", "const topLevelPageId2 = '789'\n\nTestNotionCMSCache('Unchanged since last edit time uses cache', async () => {\n  nock(baseUrl)\n    .post(`/databases/${cachingDatabaseId}/query`)\n    .query(true)\n    .reply(200, {\n      object: 'list',\n      results: [\n        {", "      results: [\n        {\n          object: 'page',\n          id: topLevelPageId,\n          created_time: '2023-04-09T06:03:00.000Z',\n          last_edited_time: '2023-04-09T06:03:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },", "            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          properties: {\n            name: {\n              id: 'title',\n              type: 'title',", "              id: 'title',\n              type: 'title',\n              title: [\n                {\n                  type: 'text',\n                  text: {\n                    content: 'Page 1',\n                    link: null,\n                  },\n                  annotations: {},", "                  },\n                  annotations: {},\n                  plain_text: 'Page 1',\n                  href: null,\n                },\n              ],\n            },\n            Author: {\n              id: 'SQeZ',\n              type: 'people',", "              id: 'SQeZ',\n              type: 'people',\n              people: [\n                {\n                  object: 'user',\n                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                  name: 'Jacob',\n                  avatar_url: null,\n                  type: 'person',\n                  person: {", "                  type: 'person',\n                  person: {\n                    email: 'jacob@agencykit.so',\n                  },\n                },\n              ],\n            },\n            Tags: {\n              id: 'NNmP',\n              type: 'multi_select',", "              id: 'NNmP',\n              type: 'multi_select',\n              multi_select: [\n                {\n                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                  name: 'programming',\n                  color: 'default',\n                },\n              ],\n            },", "              ],\n            },\n          },\n          cover: null,\n          icon: null,\n          archived: false,\n          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n        },\n        {\n          object: 'page',", "        {\n          object: 'page',\n          id: topLevelPageId2,\n          created_time: '2023-04-09T06:03:00.000Z',\n          last_edited_time: '2023-04-09T06:03:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {", "          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          properties: {\n            name: {\n              id: 'title',\n              type: 'title',\n              title: [", "              type: 'title',\n              title: [\n                {\n                  type: 'text',\n                  text: {\n                    content: 'Page 2',\n                    link: null,\n                  },\n                  annotations: {},\n                  plain_text: 'Page 2',", "                  annotations: {},\n                  plain_text: 'Page 2',\n                  href: null,\n                },\n              ],\n            },\n            Author: {\n              id: 'SQeZ',\n              type: 'people',\n              people: [", "              type: 'people',\n              people: [\n                {\n                  object: 'user',\n                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                  name: 'Jacob',\n                  avatar_url: null,\n                  type: 'person',\n                  person: {\n                    email: 'jacob@agencykit.so',", "                  person: {\n                    email: 'jacob@agencykit.so',\n                  },\n                },\n              ],\n            },\n            Tags: {\n              id: 'NNmP',\n              type: 'multi_select',\n              multi_select: [", "              type: 'multi_select',\n              multi_select: [\n                {\n                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                  name: 'programming',\n                  color: 'default',\n                },\n              ],\n            },\n          },", "            },\n          },\n          cover: null,\n          icon: null,\n          archived: false,\n          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n        },\n      ],\n      next_cursor: null,\n      has_more: false,", "      next_cursor: null,\n      has_more: false,\n      type: 'page',\n      page: {},\n    })\n\n  nock(baseUrl)\n    .get(`/blocks/${topLevelPageId}/children`)\n    .query(true)\n    .reply(200, {", "    .query(true)\n    .reply(200, {\n      object: 'list',\n      results: [\n        {\n          object: 'block',\n          id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n          parent: {\n            type: 'page_id',\n            page_id: topLevelPageId,", "            type: 'page_id',\n            page_id: topLevelPageId,\n          },\n          created_time: '2023-04-22T04:34:00.000Z',\n          last_edited_time: '2023-04-22T04:34:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {", "          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          has_children: false,\n          archived: false,\n          type: 'heading_1',\n          heading_1: {\n            rich_text: [", "          heading_1: {\n            rich_text: [\n              {\n                type: 'text',\n                text: {\n                  content: 'Block 1: Has not changed.',\n                  link: null,\n                },\n                annotations: {},\n                plain_text: 'Block 1: Has not changed.',", "                annotations: {},\n                plain_text: 'Block 1: Has not changed.',\n                href: null,\n              },\n            ],\n            is_toggleable: false,\n            color: 'default',\n          },\n        },\n      ],", "        },\n      ],\n    })\n\n  nock(baseUrl)\n    .get(`/blocks/${topLevelPageId2}/children`)\n    .query(true)\n    .reply(200, {\n      object: 'list',\n      results: [", "      object: 'list',\n      results: [\n        {\n          object: 'block',\n          id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n          parent: {\n            type: 'page_id',\n            page_id: topLevelPageId2,\n          },\n          created_time: '2023-04-22T04:34:00.000Z',", "          },\n          created_time: '2023-04-22T04:34:00.000Z',\n          last_edited_time: '2023-04-22T04:34:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          has_children: false,\n          archived: false,\n          type: 'heading_1',\n          heading_1: {\n            rich_text: [\n              {\n                type: 'text',", "              {\n                type: 'text',\n                text: {\n                  content: 'Block 2: Has not changed.',\n                  link: null,\n                },\n                annotations: {},\n                plain_text: 'Block 2: Has not changed.',\n                href: null,\n              },", "                href: null,\n              },\n            ],\n            is_toggleable: false,\n            color: 'default',\n          },\n        },\n      ],\n    })\n  // Build the cache", "    })\n  // Build the cache\n  const cms: CMS = await cachingTestCMS.pull()\n\n  assert.ok(cms.siteData['/page-1'].content?.plaintext === 'Block 1: Has not changed.')\n  assert.ok(cms.siteData['/page-2'].content?.plaintext === 'Block 2: Has not changed.')\n\n  // Change some data in only page 2\n  nock(baseUrl)\n    .post(`/databases/${cachingDatabaseId}/query`)", "  nock(baseUrl)\n    .post(`/databases/${cachingDatabaseId}/query`)\n    .query(true)\n    .reply(200, {\n      object: 'list',\n      results: [\n        {\n          object: 'page',\n          id: topLevelPageId,\n          created_time: '2023-04-09T06:03:00.000Z',", "          id: topLevelPageId,\n          created_time: '2023-04-09T06:03:00.000Z',\n          last_edited_time: '2023-04-09T06:03:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          properties: {\n            name: {\n              id: 'title',\n              type: 'title',\n              title: [\n                {\n                  type: 'text',", "                {\n                  type: 'text',\n                  text: {\n                    content: 'Page 1',\n                    link: null,\n                  },\n                  annotations: {},\n                  plain_text: 'Page 1',\n                  href: null,\n                },", "                  href: null,\n                },\n              ],\n            },\n            Author: {\n              id: 'SQeZ',\n              type: 'people',\n              people: [\n                {\n                  object: 'user',", "                {\n                  object: 'user',\n                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                  name: 'Jacob',\n                  avatar_url: null,\n                  type: 'person',\n                  person: {\n                    email: 'jacob@agencykit.so',\n                  },\n                },", "                  },\n                },\n              ],\n            },\n            Tags: {\n              id: 'NNmP',\n              type: 'multi_select',\n              multi_select: [\n                {\n                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',", "                {\n                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                  name: 'programming',\n                  color: 'default',\n                },\n              ],\n            },\n          },\n          cover: null,\n          icon: null,", "          cover: null,\n          icon: null,\n          archived: false,\n          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n        },\n        {\n          object: 'page',\n          id: topLevelPageId2,\n          created_time: '2023-04-09T06:03:00.000Z',\n          last_edited_time: '2023-04-09T06:16:00.000Z',", "          created_time: '2023-04-09T06:03:00.000Z',\n          last_edited_time: '2023-04-09T06:16:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },", "            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          properties: {\n            name: {\n              id: 'title',\n              type: 'title',\n              title: [\n                {\n                  type: 'text',\n                  text: {", "                  type: 'text',\n                  text: {\n                    content: 'Page 2',\n                    link: null,\n                  },\n                  annotations: {},\n                  plain_text: 'Page 2',\n                  href: null,\n                },\n              ],", "                },\n              ],\n            },\n            Author: {\n              id: 'SQeZ',\n              type: 'people',\n              people: [\n                {\n                  object: 'user',\n                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "                  object: 'user',\n                  id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                  name: 'Jacob',\n                  avatar_url: null,\n                  type: 'person',\n                  person: {\n                    email: 'jacob@agencykit.so',\n                  },\n                },\n              ],", "                },\n              ],\n            },\n            Tags: {\n              id: 'NNmP',\n              type: 'multi_select',\n              multi_select: [\n                {\n                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                  name: 'programming',", "                  id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                  name: 'programming',\n                  color: 'default',\n                },\n              ],\n            },\n          },\n          cover: null,\n          icon: null,\n          archived: false,", "          icon: null,\n          archived: false,\n          url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n        },\n      ],\n      next_cursor: null,\n      has_more: false,\n      type: 'page',\n      page: {},\n    })", "      page: {},\n    })\n  nock(baseUrl)\n    .get(`/blocks/${topLevelPageId2}/children`)\n    .query(true)\n    .reply(200, {\n      object: 'list',\n      results: [\n        {\n          object: 'block',", "        {\n          object: 'block',\n          id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n          parent: {\n            type: 'page_id',\n            page_id: topLevelPageId2,\n          },\n          created_time: '2023-04-22T04:34:00.000Z',\n          last_edited_time: '2023-04-22T04:34:00.000Z',\n          created_by: {", "          last_edited_time: '2023-04-22T04:34:00.000Z',\n          created_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          last_edited_by: {\n            object: 'user',\n            id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n          },\n          has_children: false,", "          },\n          has_children: false,\n          archived: false,\n          type: 'heading_1',\n          heading_1: {\n            rich_text: [\n              {\n                type: 'text',\n                text: {\n                  content: 'Block 2: Has changed.',", "                text: {\n                  content: 'Block 2: Has changed.',\n                  link: null,\n                },\n                annotations: {},\n                plain_text: 'Block 2: Has changed.',\n                href: null,\n              },\n            ],\n            is_toggleable: false,", "            ],\n            is_toggleable: false,\n            color: 'default',\n          },\n        },\n      ],\n    })\n\n  const cms2: CMS = await cachingTestCMS.pull()\n", "  const cms2: CMS = await cachingTestCMS.pull()\n\n  assert.ok(cms2.siteData['/page-1'].content?.plaintext === 'Block 1: Has not changed.')\n  assert.ok(cms2.siteData['/page-2'].content?.plaintext === 'Block 2: Has changed.')\n})\n\nTestNotionCMSCache('Plugins run even when using cached state.', async () => {\n  const databaseId = '610627a9-28b1-4477-b660-c00c5364435b'\n\n  let counter = 0", "\n  let counter = 0\n\n  const testCMS: NotionCMS = new NotionCMS({\n    databaseId,\n    notionAPIKey: process.env.NOTION as string,\n    draftMode: true,\n    refreshTimeout: '1 minute',\n    plugins: [\n      {", "    plugins: [\n      {\n        name: 'counter-plugin',\n        hook: '*', // this will run every hook\n        exec: (ctx: PluginPassthrough) => {\n          counter++\n          return ctx\n        },\n      },\n    ],", "      },\n    ],\n  })\n  console.log('caching test: purging cache')\n  testCMS.purgeCache()\n  await testCMS.pull()\n  assert.equal(counter, 22)\n})\n", ""]}
{"filename": "src/tests/notion-api-mock.spec.ts", "chunked_list": ["import nock from 'nock'\n\nconst notionDatabaseId = '610627a9-28b1-4477-b660-c00c5364435b'\nconst notionKitchenSinkDatabaseId = '21608fc7-c1c5-40a1-908f-9ade89585111'\n\nconst baseUrl = 'https://api.notion.com/v1'\n\nconst pageIds = [\n  '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n  '1cec47af-3e5f-4382-bbfd-cd5f98effa30',", "  '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n  '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n  'b194a437-262e-482c-92b2-c5581eb5b477',\n  '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n  'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n]\n\nconst kitchenSinkPageId = '35a20998-a733-4ba0-b02e-0d629ded73f1'\n\nexport const expectedRoutes = [", "\nexport const expectedRoutes = [\n  '/team',\n  '/products',\n  '/products/category',\n  '/products/category/product-a',\n  '/products/category/product-b',\n]\n\nexport const expectedSiteData = {", "\nexport const expectedSiteData = {\n  '/team': {\n    name: 'Team',\n    _key: '/team',\n    id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n    pid: undefined,\n    authors: ['Jacob Milhorn'],\n    tags: [],\n    _notion: {", "    tags: [],\n    _notion: {\n      id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n      last_edited_time: '2023-04-09T06:07:00.000Z',\n    },\n    content: { html: '<h1 id=\\\"team\\\">Team</h1>\\n<p>about the team</p>\\n' },\n    coverImage: undefined,\n    slug: 'team',\n    path: '/team',\n    url: '',", "    path: '/team',\n    url: '',\n  },\n  '/products': {\n    'name': 'Products',\n    '_key': '/products',\n    'id': 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n    'pid': undefined,\n    'authors': [],\n    'tags': [],", "    'authors': [],\n    'tags': [],\n    '_notion': {\n      id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n      last_edited_time: '2023-04-09T05:56:00.000Z',\n    },\n    'content': { html: '<h1 id=\\\"products\\\">Products</h1>\\n<p>about products</p>\\n' },\n    'coverImage': undefined,\n    'slug': 'products',\n    'path': '/products',", "    'slug': 'products',\n    'path': '/products',\n    'url': '',\n    '/category': {\n      'name': 'Category',\n      '_key': '/category',\n      'id': 'b194a437-262e-482c-92b2-c5581eb5b477',\n      'pid': 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n      'authors': [],\n      'tags': [", "      'authors': [],\n      'tags': [\n        'blog',\n        'notion',\n        'apis',\n      ],\n      '_notion': {\n        id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n      },", "        last_edited_time: '2023-04-09T06:03:00.000Z',\n      },\n      'content': { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n      'coverImage': undefined,\n      'slug': 'category',\n      'path': '/products/category',\n      'url': '',\n      '/product-a': {\n        name: 'Product A',\n        _key: '/product-a',", "        name: 'Product A',\n        _key: '/product-a',\n        id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n        pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n        authors: ['Jacob Milhorn'],\n        tags: ['programming'],\n        content: { html: '<h2 id=\\\"product-a\\\">Product A</h2>\\n<p>about product A</p>\\n' },\n        _notion: {\n          id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n          last_edited_time: '2023-04-09T06:03:00.000Z',", "          id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n          last_edited_time: '2023-04-09T06:03:00.000Z',\n        },\n        coverImage: undefined,\n        slug: 'product-a',\n        path: '/products/category/product-a',\n        url: '',\n      },\n      '/product-b': {\n        name: 'Product B',", "      '/product-b': {\n        name: 'Product B',\n        _key: '/product-b',\n        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n        authors: [],\n        tags: [\n          'blog',\n          'notion',\n          'apis',", "          'notion',\n          'apis',\n          'programming',\n          'javascript',\n        ],\n        content: { html: '<h2 id=\\\"product-b\\\">Product B</h2>\\n<p>about product B</p>\\n' },\n        _notion: {\n          id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n          last_edited_time: '2023-04-09T06:03:00.000Z',\n        },", "          last_edited_time: '2023-04-09T06:03:00.000Z',\n        },\n        coverImage: undefined,\n        slug: 'product-b',\n        path: '/products/category/product-b',\n        url: '',\n      },\n    },\n  },\n}", "  },\n}\n\nexport const expectedTags = [\n  'blog',\n  'notion',\n  'apis',\n  'javascript',\n  'programming',\n]", "  'programming',\n]\n\nexport const expectedTagGroups = {\n  blog: [\n    '/products/category',\n    '/products/category/product-b',\n  ],\n  notion: [\n    '/products/category',", "  notion: [\n    '/products/category',\n    '/products/category/product-b',\n  ],\n  apis: [\n    '/products/category',\n    '/products/category/product-b',\n  ],\n  programming: [\n    '/products/category/product-b',", "  programming: [\n    '/products/category/product-b',\n    '/products/category/product-a',\n  ],\n  javascript: [\n    '/products/category/product-b',\n  ],\n}\n\nexport const expectedTaggedCollection = [", "\nexport const expectedTaggedCollection = [\n  {\n    'name': 'Category',\n    '_key': '/category',\n    'id': 'b194a437-262e-482c-92b2-c5581eb5b477',\n    'pid': 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n    'authors': [],\n    'tags': [\n      'blog',", "    'tags': [\n      'blog',\n      'notion',\n      'apis',\n    ],\n    '_notion': {\n      id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n      last_edited_time: '2023-04-09T06:03:00.000Z',\n    },\n    'content': { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },", "    },\n    'content': { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n    'coverImage': undefined,\n    'slug': 'category',\n    'path': '/products/category',\n    'url': '',\n    '/product-a': {\n      name: 'Product A',\n      _key: '/product-a',\n      id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',", "      _key: '/product-a',\n      id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n      pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n      authors: ['Jacob Milhorn'],\n      tags: ['programming'],\n      content: { html: '<h2 id=\\\"product-a\\\">Product A</h2>\\n<p>about product A</p>\\n' },\n      _notion: {\n        id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n      },", "        last_edited_time: '2023-04-09T06:03:00.000Z',\n      },\n      coverImage: undefined,\n      slug: 'product-a',\n      path: '/products/category/product-a',\n      url: '',\n    },\n    '/product-b': {\n      name: 'Product B',\n      _key: '/product-b',", "      name: 'Product B',\n      _key: '/product-b',\n      id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n      pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n      authors: [],\n      tags: [\n        'blog',\n        'notion',\n        'apis',\n        'programming',", "        'apis',\n        'programming',\n        'javascript',\n      ],\n      content: { html: '<h2 id=\\\"product-b\\\">Product B</h2>\\n<p>about product B</p>\\n' },\n      _notion: {\n        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n      },\n      coverImage: undefined,", "      },\n      coverImage: undefined,\n      slug: 'product-b',\n      path: '/products/category/product-b',\n      url: '',\n    },\n  },\n  {\n    name: 'Product B',\n    _key: '/product-b',", "    name: 'Product B',\n    _key: '/product-b',\n    id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n    pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n    authors: [],\n    tags: [\n      'blog',\n      'notion',\n      'apis',\n      'programming',", "      'apis',\n      'programming',\n      'javascript',\n    ],\n    content: { html: '<h2 id=\\\"product-b\\\">Product B</h2>\\n<p>about product B</p>\\n' },\n    _notion: {\n      id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n      last_edited_time: '2023-04-09T06:03:00.000Z',\n    },\n    coverImage: undefined,", "    },\n    coverImage: undefined,\n    slug: 'product-b',\n    path: '/products/category/product-b',\n    url: '',\n  },\n  {\n    name: 'Product A',\n    _key: '/product-a',\n    id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',", "    _key: '/product-a',\n    id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n    pid: 'b194a437-262e-482c-92b2-c5581eb5b477',\n    authors: ['Jacob Milhorn'],\n    tags: ['programming'],\n    content: { html: '<h2 id=\\\"product-a\\\">Product A</h2>\\n<p>about product A</p>\\n' },\n    _notion: {\n      id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n      last_edited_time: '2023-04-09T06:03:00.000Z',\n    },", "      last_edited_time: '2023-04-09T06:03:00.000Z',\n    },\n    coverImage: undefined,\n    slug: 'product-a',\n    path: '/products/category/product-a',\n    url: '',\n  },\n]\n\nexport const expectedRejectedPageData = {", "\nexport const expectedRejectedPageData = {\n  name: 'Category',\n  _key: '/category',\n  id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n  pid: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n  authors: [],\n  tags: [\n    'blog',\n    'notion',", "    'blog',\n    'notion',\n    'apis',\n  ],\n  _notion: {\n    id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n    last_edited_time: '2023-04-09T06:03:00.000Z',\n  },\n  content: { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n  coverImage: undefined,", "  content: { html: '<h2 id=\\\"product-categories\\\">Product Categories</h2>\\n<p>about product categories</p>\\n' },\n  coverImage: undefined,\n  slug: 'category',\n  path: '/products/category',\n  url: '',\n}\n\nexport const expectedKitchenSinkSiteData = {\n  '/kitchen-sink': {\n    _key: '/kitchen-sink',", "  '/kitchen-sink': {\n    _key: '/kitchen-sink',\n    id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n    pid: undefined,\n    _notion: {\n      id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n      last_edited_time: '2023-04-22T05:04:00.000Z',\n    },\n    name: 'Kitchen Sink',\n    slug: 'kitchen-sink',", "    name: 'Kitchen Sink',\n    slug: 'kitchen-sink',\n    authors: [\n      'Jacob Milhorn',\n    ],\n    tags: [],\n    coverImage: 'https://images.unsplash.com/photo-1477233534935-f5e6fe7c1159?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb',\n    path: '/kitchen-sink',\n    url: '',\n    content: {", "    url: '',\n    content: {\n      html: '<h1 id=\"kitchen-sink\">Kitchen Sink</h1>\\n<h2 id=\"introduction\">Introduction</h2>\\n<p>Welcome to the Kitchen Sink document, where we showcase one of each Notion block available.</p>\\n<h2 id=\"audio-block\">Audio Block</h2>\\n<p><img src=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2372979e-60dc-40f0-b9ce-978d9c7c3707/barradeen-bedtime-after-a-coffee.mp3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=714a8f2a8463f9f36d217825797dc2b8580a278ff991ac3135ec1dcceee62e92&X-Amz-SignedHeaders=host&x-id=GetObject\" alt=\"\"></p>\\n<h3 id=\"bulleted-list\">Bulleted List</h3>\\n<ul>\\n<li>Item 1</li>\\n<li>Item 2</li>\\n<li>Item 3</li>\\n</ul>\\n<h2 id=\"callout\">Callout</h2>\\n<div notion-callout>\\n  <span notion-callout-emoji><p>\ud83e\uddd1\ud83c\udffe\u200d\ud83d\ude80</p>\\n</span>\\n  <span notion-callout-text><p>Callout here</p>\\n</span></div>\\n\\n<h2 id=\"embeds\">Embeds</h2>\\n<h2 id=\"file\">File</h2>\\n<p>To be supported: <a href=\"https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&X-Amz-SignedHeaders=host&x-id=GetObject\">https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20230422T050834Z&amp;X-Amz-Expires=3600&amp;X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&amp;X-Amz-SignedHeaders=host&amp;x-id=GetObject</a> with </p>\\n<h1 id=\"heading-1\">Heading 1</h1>\\n<p>This is a main heading.</p>\\n<h2 id=\"heading-2\">Heading 2</h2>\\n<p>This is a subheading.</p>\\n<h3 id=\"heading-3\">Heading 3</h3>\\n<p>This is a smaller subheading.</p>\\n<h2 id=\"images\">Images</h2>\\n<figure notion-figure>\\n  <img src=\\'https://images.unsplash.com/photo-1477233534935-f5e6fe7c1159?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb\\' alt=\\'\\'>\\n  <figcaption notion-figcaption></figcaption></figure>\\n\\n\\n<h3 id=\"numbered-list\">Numbered List</h3>\\n<ol>\\n<li>First item</li>\\n<li>Second item</li>\\n<li>Third item</li>\\n</ol>\\n<h2 id=\"paragraph\">Paragraph</h2>\\n<p>This is a sample paragraph. It has nothing to do with the rest of this document, but it is here to showcase the paragraph block.</p>\\n<h2 id=\"pdf\">Pdf</h2>\\n<figure>\\n  <object data=\\'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4abc717f-3f8a-4bdf-b482-090ca8371eab/Deep_Work.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=7d5012d5fe544ffea48bbbeecb56d768f949dee7138a4c9f8a63850b42ea2e86&X-Amz-SignedHeaders=host&x-id=GetObject\\' type=\\'application/pdf\\'></object>\\n  <figcaption></figcaption></figure>\\n\\n\\n<h2 id=\"quotes\">Quotes</h2>\\n<blockquote>\\n<p>This is a block quote.</p>\\n</blockquote>\\n<h2 id=\"to-do-list\">To-do list</h2>\\n<ul>\\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Completed task</li>\\n<li><input disabled=\"\" type=\"checkbox\"> Incomplete task</li>\\n</ul>\\n<h2 id=\"toggle\">Toggle</h2>\\n<details><summary><p>Toggle heading</p>\\n</summary><p>Toggle content</p>\\n</details>\\n## Video\\n\\n<iframe width=\\'560\\' height=\\'315\\' src=\\'https://www.youtube-nocookie.com/embed/-XmImaT5TxM\\' title=\\'YouTube video player\\' frameborder=\\'0\\' allow=\\'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\\' allowfullscreen></iframe>\\n\\n<h1 id=\"extras\">Extras</h1>\\n<h2 id=\"tables\">Tables</h2>\\n<h2 id=\"code\">Code</h2>\\n<pre><code class=\\'hljs language-none\\'>This is a code block.\\n</code></pre><h2 id=\"divider\">Divider</h2>\\n<hr>\\n<h2 id=\"links\">Links</h2>\\n<p><a href=\"https://www.notion.so/\">This is a link to Notion&#39;s website.</a></p>\\n<h2 id=\"equation\">Equation</h2>\\n',\n    },\n  },\n}\n\nnock(baseUrl)\n  .persist()\n  .post(`/databases/${notionDatabaseId}/query`)", "  .persist()\n  .post(`/databases/${notionDatabaseId}/query`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'page',\n        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        created_time: '2023-04-09T06:03:00.000Z',", "        id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        created_time: '2023-04-09T06:03:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        cover: null,\n        icon: null,\n        parent: {\n          type: 'database_id',\n          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n        },\n        archived: false,", "        },\n        archived: false,\n        properties: {\n          'parent-page': {\n            id: '%3FuXy',\n            type: 'relation',\n            relation: [\n              {\n                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n              },", "                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n              },\n            ],\n            has_more: false,\n          },\n          'sub-page': {\n            id: '%40KPB',\n            type: 'relation',\n            relation: [],\n            has_more: false,", "            relation: [],\n            has_more: false,\n          },\n          'Tags': {\n            id: 'NNmP',\n            type: 'multi_select',\n            multi_select: [\n              {\n                id: '39c42409-611d-45d5-accb-3b1d05917b3a',\n                name: 'blog',", "                id: '39c42409-611d-45d5-accb-3b1d05917b3a',\n                name: 'blog',\n                color: 'gray',\n              },\n              {\n                id: '9d1eaabc-234f-4e1a-8812-06c286f863cd',\n                name: 'notion',\n                color: 'red',\n              },\n              {", "              },\n              {\n                id: 'a37db9a6-cb20-4914-86ec-e5d0beac072d',\n                name: 'apis',\n                color: 'orange',\n              },\n              {\n                id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                name: 'programming',\n                color: 'default',", "                name: 'programming',\n                color: 'default',\n              },\n              {\n                id: '165eef40-7a03-468a-882e-5516b4f63af8',\n                name: 'javascript',\n                color: 'green',\n              },\n            ],\n          },", "            ],\n          },\n          'Author': {\n            id: 'SQeZ',\n            type: 'people',\n            people: [],\n          },\n          'Published': {\n            id: 'frgL',\n            type: 'select',", "            id: 'frgL',\n            type: 'select',\n            select: {\n              id: 'dFFu',\n              name: 'Draft',\n              color: 'green',\n            },\n          },\n          'name': {\n            id: 'title',", "          'name': {\n            id: 'title',\n            type: 'title',\n            title: [\n              {\n                type: 'text',\n                text: {\n                  content: 'Product B',\n                  link: null,\n                },", "                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },", "                  color: 'default',\n                },\n                plain_text: 'Product B',\n                href: null,\n              },\n            ],\n          },\n        },\n        url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n      },", "        url: 'https://www.notion.so/Product-B-7fc90a1dca4d49ad91b5136c3d5a304d',\n      },\n      {\n        object: 'page',\n        id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n        created_time: '2023-04-09T05:50:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        cover: null,\n        icon: null,\n        parent: {", "        icon: null,\n        parent: {\n          type: 'database_id',\n          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n        },\n        archived: false,\n        properties: {\n          'parent-page': {\n            id: '%3FuXy',\n            type: 'relation',", "            id: '%3FuXy',\n            type: 'relation',\n            relation: [\n              {\n                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n              },\n            ],\n            has_more: false,\n          },\n          'sub-page': {", "          },\n          'sub-page': {\n            id: '%40KPB',\n            type: 'relation',\n            relation: [],\n            has_more: false,\n          },\n          'Tags': {\n            id: 'NNmP',\n            type: 'multi_select',", "            id: 'NNmP',\n            type: 'multi_select',\n            multi_select: [\n              {\n                id: '098acfda-2fb1-4ecf-8737-c03b80b5cb18',\n                name: 'programming',\n                color: 'default',\n              },\n            ],\n          },", "            ],\n          },\n          'Author': {\n            id: 'SQeZ',\n            type: 'people',\n            people: [\n              {\n                object: 'user',\n                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                name: 'Jacob Milhorn',", "                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                name: 'Jacob Milhorn',\n                avatar_url: null,\n                type: 'person',\n                person: {\n                  email: 'jacob.milhorn@gmail.com',\n                },\n              },\n            ],\n          },", "            ],\n          },\n          'Published': {\n            id: 'frgL',\n            type: 'select',\n            select: {\n              id: 'dFFu',\n              name: 'Draft',\n              color: 'green',\n            },", "              color: 'green',\n            },\n          },\n          'name': {\n            id: 'title',\n            type: 'title',\n            title: [\n              {\n                type: 'text',\n                text: {", "                type: 'text',\n                text: {\n                  content: 'Product A',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,", "                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Product A',\n                href: null,\n              },\n            ],\n          },", "            ],\n          },\n        },\n        url: 'https://www.notion.so/Product-A-1cec47af3e5f4382bbfdcd5f98effa30',\n      },\n      {\n        object: 'page',\n        id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n        created_time: '2023-04-09T05:50:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',", "        created_time: '2023-04-09T05:50:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        cover: null,\n        icon: null,\n        parent: {\n          type: 'database_id',\n          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n        },\n        archived: false,\n        properties: {", "        archived: false,\n        properties: {\n          'parent-page': {\n            id: '%3FuXy',\n            type: 'relation',\n            relation: [\n              {\n                id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n              },\n            ],", "              },\n            ],\n            has_more: false,\n          },\n          'sub-page': {\n            id: '%40KPB',\n            type: 'relation',\n            relation: [\n              {\n                id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',", "              {\n                id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n              },\n              {\n                id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n              },\n            ],\n            has_more: false,\n          },\n          'Tags': {", "          },\n          'Tags': {\n            id: 'NNmP',\n            type: 'multi_select',\n            multi_select: [\n              {\n                id: '39c42409-611d-45d5-accb-3b1d05917b3a',\n                name: 'blog',\n                color: 'gray',\n              },", "                color: 'gray',\n              },\n              {\n                id: '9d1eaabc-234f-4e1a-8812-06c286f863cd',\n                name: 'notion',\n                color: 'red',\n              },\n              {\n                id: 'a37db9a6-cb20-4914-86ec-e5d0beac072d',\n                name: 'apis',", "                id: 'a37db9a6-cb20-4914-86ec-e5d0beac072d',\n                name: 'apis',\n                color: 'orange',\n              },\n            ],\n          },\n          'Author': {\n            id: 'SQeZ',\n            type: 'people',\n            people: [],", "            type: 'people',\n            people: [],\n          },\n          'Published': {\n            id: 'frgL',\n            type: 'select',\n            select: {\n              id: 'dFFu',\n              name: 'Draft',\n              color: 'green',", "              name: 'Draft',\n              color: 'green',\n            },\n          },\n          'name': {\n            id: 'title',\n            type: 'title',\n            title: [\n              {\n                type: 'text',", "              {\n                type: 'text',\n                text: {\n                  content: 'Category',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,", "                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Category',\n                href: null,\n              },\n            ],", "              },\n            ],\n          },\n        },\n        url: 'https://www.notion.so/Category-b194a437262e482c92b2c5581eb5b477',\n      },\n      {\n        object: 'page',\n        id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n        created_time: '2023-04-09T05:45:00.000Z',", "        id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n        created_time: '2023-04-09T05:45:00.000Z',\n        last_edited_time: '2023-04-09T06:07:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        cover: null,\n        icon: null,\n        parent: {\n          type: 'database_id',\n          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n        },\n        archived: false,", "        },\n        archived: false,\n        properties: {\n          'parent-page': {\n            id: '%3FuXy',\n            type: 'relation',\n            relation: [],\n            has_more: false,\n          },\n          'sub-page': {", "          },\n          'sub-page': {\n            id: '%40KPB',\n            type: 'relation',\n            relation: [],\n            has_more: false,\n          },\n          'Tags': {\n            id: 'NNmP',\n            type: 'multi_select',", "            id: 'NNmP',\n            type: 'multi_select',\n            multi_select: [],\n          },\n          'Author': {\n            id: 'SQeZ',\n            type: 'people',\n            people: [\n              {\n                object: 'user',", "              {\n                object: 'user',\n                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                name: 'Jacob Milhorn',\n                avatar_url: null,\n                type: 'person',\n                person: {\n                  email: 'jacob.milhorn@gmail.com',\n                },\n              },", "                },\n              },\n            ],\n          },\n          'Published': {\n            id: 'frgL',\n            type: 'select',\n            select: {\n              id: 'dFFu',\n              name: 'Draft',", "              id: 'dFFu',\n              name: 'Draft',\n              color: 'green',\n            },\n          },\n          'name': {\n            id: 'title',\n            type: 'title',\n            title: [\n              {", "            title: [\n              {\n                type: 'text',\n                text: {\n                  content: 'Team',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,", "                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Team',\n                href: null,\n              },", "                href: null,\n              },\n            ],\n          },\n        },\n        url: 'https://www.notion.so/Team-163bc39bffa64d8884f5cb73fa4a705a',\n      },\n      {\n        object: 'page',\n        id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',", "        object: 'page',\n        id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n        created_time: '2023-04-09T05:45:00.000Z',\n        last_edited_time: '2023-04-09T05:56:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        cover: null,\n        icon: null,\n        parent: {\n          type: 'database_id',\n          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n        },", "          database_id: '610627a9-28b1-4477-b660-c00c5364435b',\n        },\n        archived: false,\n        properties: {\n          'parent-page': {\n            id: '%3FuXy',\n            type: 'relation',\n            relation: [],\n            has_more: false,\n          },", "            has_more: false,\n          },\n          'sub-page': {\n            id: '%40KPB',\n            type: 'relation',\n            relation: [\n              {\n                id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n              },\n            ],", "              },\n            ],\n            has_more: false,\n          },\n          'Tags': {\n            id: 'NNmP',\n            type: 'multi_select',\n            multi_select: [],\n          },\n          'Author': {", "          },\n          'Author': {\n            id: 'SQeZ',\n            type: 'people',\n            people: [],\n          },\n          'Published': {\n            id: 'frgL',\n            type: 'select',\n            select: {", "            type: 'select',\n            select: {\n              id: 'dFFu',\n              name: 'Draft',\n              color: 'green',\n            },\n          },\n          'name': {\n            id: 'title',\n            type: 'title',", "            id: 'title',\n            type: 'title',\n            title: [\n              {\n                type: 'text',\n                text: {\n                  content: 'Products',\n                  link: null,\n                },\n                annotations: {", "                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Products',", "                },\n                plain_text: 'Products',\n                href: null,\n              },\n            ],\n          },\n        },\n        url: 'https://www.notion.so/Products-dd5157a6cf4c4a518da50da83ef641ae',\n      },\n    ],", "      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'page',\n    page: {},\n  })\n\n// Kitchen Sink Response\nnock(baseUrl)", "// Kitchen Sink Response\nnock(baseUrl)\n  .persist()\n  .post(`/databases/${notionKitchenSinkDatabaseId}/query`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'page',", "      {\n        object: 'page',\n        id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        created_time: '2023-04-22T04:33:00.000Z',\n        last_edited_time: '2023-04-22T05:04:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {", "        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        cover: null,\n        icon: null,\n        parent: {\n          type: 'database_id',\n          database_id: '21608fc7-c1c5-40a1-908f-9ade89585111',", "          type: 'database_id',\n          database_id: '21608fc7-c1c5-40a1-908f-9ade89585111',\n        },\n        archived: false,\n        properties: {\n          'parent-page': {\n            id: '%3FuXy',\n            type: 'relation',\n            relation: [],\n            has_more: false,", "            relation: [],\n            has_more: false,\n          },\n          'sub-page': {\n            id: '%40KPB',\n            type: 'relation',\n            relation: [],\n            has_more: false,\n          },\n          'Tags': {", "          },\n          'Tags': {\n            id: 'NNmP',\n            type: 'multi_select',\n            multi_select: [],\n          },\n          'Author': {\n            id: 'SQeZ',\n            type: 'people',\n            people: [", "            type: 'people',\n            people: [\n              {\n                object: 'user',\n                id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n                name: 'Jacob Milhorn',\n                avatar_url: null,\n                type: 'person',\n                person: {\n                  email: 'jacob.milhorn@gmail.com',", "                person: {\n                  email: 'jacob.milhorn@gmail.com',\n                },\n              },\n            ],\n          },\n          'Published': {\n            id: 'frgL',\n            type: 'select',\n            select: {", "            type: 'select',\n            select: {\n              id: '|]Pp',\n              name: 'Published',\n              color: 'default',\n            },\n          },\n          'name': {\n            id: 'title',\n            type: 'title',", "            id: 'title',\n            type: 'title',\n            title: [\n              {\n                type: 'text',\n                text: {\n                  content: 'Kitchen Sink',\n                  link: null,\n                },\n                annotations: {", "                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Kitchen Sink',", "                },\n                plain_text: 'Kitchen Sink',\n                href: null,\n              },\n            ],\n          },\n        },\n        url: 'https://www.notion.so/Kitchen-Sink-35a20998a7334ba0b02e0d629ded73f1',\n      },\n    ],", "      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'page',\n    page: {},\n    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n  })\n\n// Block Children Queries", "\n// Block Children Queries\n\n// Kitchen Sink Blocks\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${kitchenSinkPageId}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',", "  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: '1c92a5ea-dfeb-4c8f-b662-cde078bb02ad',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_1',\n        heading_1: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Kitchen Sink',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Kitchen Sink',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '644a181a-ec65-4f4b-954b-9196e5f0ca93',", "        object: 'block',\n        id: '644a181a-ec65-4f4b-954b-9196e5f0ca93',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Introduction',\n                link: null,", "                content: 'Introduction',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'Introduction',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '1173cbc2-a28a-40e2-8409-4a778f77cf91',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Welcome to the Kitchen Sink document, where we showcase one of each Notion block available.',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Welcome to the Kitchen Sink document, where we showcase one of each Notion block available.',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '203dc733-0a55-4b32-9541-95330a2959a5',\n        parent: {", "        id: '203dc733-0a55-4b32-9541-95330a2959a5',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:53:00.000Z',\n        last_edited_time: '2023-04-22T04:53:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',", "        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Audio Block',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'Audio Block',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: 'e5bffb21-be1b-4e92-b1c8-a16520e08747',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:51:00.000Z',", "        },\n        created_time: '2023-04-22T04:51:00.000Z',\n        last_edited_time: '2023-04-22T04:52:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'audio',\n        audio: {\n          caption: [],\n          type: 'file',\n          file: {", "          type: 'file',\n          file: {\n            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/2372979e-60dc-40f0-b9ce-978d9c7c3707/barradeen-bedtime-after-a-coffee.mp3?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=714a8f2a8463f9f36d217825797dc2b8580a278ff991ac3135ec1dcceee62e92&X-Amz-SignedHeaders=host&x-id=GetObject',\n            expiry_time: '2023-04-22T06:08:34.426Z',\n          },\n        },\n      },\n      {\n        object: 'block',\n        id: '33c0202c-e2a4-4700-8b70-3c4d65a28f6e',", "        object: 'block',\n        id: '33c0202c-e2a4-4700-8b70-3c4d65a28f6e',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'heading_3',\n        heading_3: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Bulleted List',\n                link: null,", "                content: 'Bulleted List',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'Bulleted List',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '70ced692-4660-45e1-b353-293e98c3312e',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'bulleted_list_item',\n        bulleted_list_item: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Item 1',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Item 1',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '98fce499-d6aa-4951-bfbb-cfeabe04de94',\n        parent: {", "        id: '98fce499-d6aa-4951-bfbb-cfeabe04de94',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:54:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'bulleted_list_item',", "        archived: false,\n        type: 'bulleted_list_item',\n        bulleted_list_item: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Item 2',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'Item 2',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: 'dcf46a2a-d27b-4a9f-8cc4-9e0ffeb51443',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',", "        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'bulleted_list_item',\n        bulleted_list_item: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'Item 3',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,", "                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Item 3',\n              href: null,\n            },\n          ],\n          color: 'default',", "          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '73668a29-3a89-447f-bf2b-e06d739b1f9a',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',", "          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {", "        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [", "        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Callout',\n                link: null,\n              },\n              annotations: {\n                bold: false,", "              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Callout',\n              href: null,", "              plain_text: 'Callout',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',", "      {\n        object: 'block',\n        id: '8e7cad16-c9c3-4f43-8ff2-ba562f8ac450',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:49:00.000Z',\n        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {", "        last_edited_time: '2023-04-22T04:54:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,", "        },\n        has_children: false,\n        archived: false,\n        type: 'callout',\n        callout: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Callout here',", "              text: {\n                content: 'Callout here',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,", "                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Callout here',\n              href: null,\n            },\n          ],\n          icon: {\n            type: 'emoji',", "          icon: {\n            type: 'emoji',\n            emoji: '\ud83e\uddd1\ud83c\udffe\u200d\ud83d\ude80',\n          },\n          color: 'gray_background',\n        },\n      },\n      {\n        object: 'block',\n        id: 'ccf2cc60-e572-4e56-a761-9017f75c1b77',", "        object: 'block',\n        id: 'ccf2cc60-e572-4e56-a761-9017f75c1b77',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:55:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Embeds',\n                link: null,", "                content: 'Embeds',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'Embeds',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '2c53e751-975a-4f08-9135-c4713608d6e8',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:48:00.000Z',\n        last_edited_time: '2023-04-22T04:55:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'bookmark',\n        bookmark: {\n          caption: [],\n          url: 'http://notion.so',", "          caption: [],\n          url: 'http://notion.so',\n        },\n      },\n      {\n        object: 'block',\n        id: '70e77e9f-9281-4c39-8740-7f4ceaad4894',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',", "          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:56:00.000Z',\n        last_edited_time: '2023-04-22T04:56:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {", "        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [", "        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'File',\n                link: null,\n              },\n              annotations: {\n                bold: false,", "              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'File',\n              href: null,", "              plain_text: 'File',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',", "      {\n        object: 'block',\n        id: '6ce7cfe3-5dc8-4ff0-98c7-76f70542ce02',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:55:00.000Z',\n        last_edited_time: '2023-04-22T04:57:00.000Z',\n        created_by: {", "        last_edited_time: '2023-04-22T04:57:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,", "        },\n        has_children: false,\n        archived: false,\n        type: 'file',\n        file: {\n          caption: [],\n          type: 'file',\n          file: {\n            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&X-Amz-SignedHeaders=host&x-id=GetObject',\n            expiry_time: '2023-04-22T06:08:34.426Z',", "            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/c42c0a17-06fa-4562-9824-64613d26ad37/elixir-demo.exs?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=9a595fdf829ab2af7dd146b9bceaf6e86c970170e6c01a8ef2e19f3e1da9ddf1&X-Amz-SignedHeaders=host&x-id=GetObject',\n            expiry_time: '2023-04-22T06:08:34.426Z',\n          },\n        },\n      },\n      {\n        object: 'block',\n        id: '7d905dc6-ee5b-4610-8636-96c8771cedf0',\n        parent: {\n          type: 'page_id',", "        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:57:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_1',\n        heading_1: {", "        type: 'heading_1',\n        heading_1: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Heading 1',\n                link: null,\n              },\n              annotations: {", "              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Heading 1',", "              },\n              plain_text: 'Heading 1',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: '3ea9ac0a-7fad-47ca-bcb9-152ffc5ad340',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:58:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',", "        created_time: '2023-04-22T04:58:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'This is a main heading.',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,", "                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a main heading.',\n              href: null,\n            },\n          ],\n          color: 'default',", "          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'ae7beb1c-36f3-4103-bbd4-a870fa914525',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',", "          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {", "        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [", "        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Heading 2',\n                link: null,\n              },\n              annotations: {\n                bold: false,", "              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Heading 2',\n              href: null,", "              plain_text: 'Heading 2',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',", "      {\n        object: 'block',\n        id: 'c081da61-c469-473b-8ad7-090c3a5c1bd5',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {", "        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,", "        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'This is a subheading.',", "              text: {\n                content: 'This is a subheading.',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,", "                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a subheading.',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'e6c6dd20-a24b-41f9-a0a6-bd6d8cbec502',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_3',\n        heading_3: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Heading 3',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Heading 3',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '8ea74483-d7ba-4acc-abfd-0472161751c0',", "        object: 'block',\n        id: '8ea74483-d7ba-4acc-abfd-0472161751c0',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'This is a smaller subheading.',\n                link: null,", "                content: 'This is a smaller subheading.',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a smaller subheading.',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: '8448cc20-a7df-44b2-9ab5-1a08202cad35',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',", "        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',", "            {\n              type: 'text',\n              text: {\n                content: 'Images',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,", "                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Images',\n              href: null,\n            },\n          ],", "            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '0fdb2edf-3bfc-494e-81b3-be141d547e5f',\n        parent: {", "        id: '0fdb2edf-3bfc-494e-81b3-be141d547e5f',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:58:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'image',", "        archived: false,\n        type: 'image',\n        image: {\n          caption: [],\n          type: 'external',\n          external: {\n            url: 'https://images.unsplash.com/photo-1477233534935-f5e6fe7c1159?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb',\n          },\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: '25bb32ec-fffd-4cde-8a64-1beb0a712dd4',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',", "        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_3',\n        heading_3: {\n          rich_text: [\n            {\n              type: 'text',", "            {\n              type: 'text',\n              text: {\n                content: 'Numbered List',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,", "                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Numbered List',\n              href: null,\n            },\n          ],", "            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '66997c55-0d83-4d81-af51-50011bc3719c',\n        parent: {", "        id: '66997c55-0d83-4d81-af51-50011bc3719c',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'numbered_list_item',", "        archived: false,\n        type: 'numbered_list_item',\n        numbered_list_item: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'First item',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'First item',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: '4b89040f-d963-43bb-b6f2-83a18613221e',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',", "        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'numbered_list_item',\n        numbered_list_item: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'Second item',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,", "                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Second item',\n              href: null,\n            },\n          ],\n          color: 'default',", "          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '4fe55d9e-b639-4926-b464-2183493d898b',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',", "          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:59:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {", "        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'numbered_list_item',\n        numbered_list_item: {\n          rich_text: [", "        numbered_list_item: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Third item',\n                link: null,\n              },\n              annotations: {\n                bold: false,", "              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Third item',\n              href: null,", "              plain_text: 'Third item',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'b9f320ea-c670-4ce4-81f7-d1924b1b69af',", "        object: 'block',\n        id: 'b9f320ea-c670-4ce4-81f7-d1924b1b69af',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:58:00.000Z',\n        last_edited_time: '2023-04-22T04:59:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Paragraph',\n                link: null,", "                content: 'Paragraph',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'Paragraph',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '70faf1fd-c58e-4306-b2e8-a56082a437d1',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:59:00.000Z',\n        last_edited_time: '2023-04-22T05:00:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'This is a sample paragraph. It has nothing to do with the rest of this document, but it is here to showcase the paragraph block.',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a sample paragraph. It has nothing to do with the rest of this document, but it is here to showcase the paragraph block.',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'fd5cad06-8e2e-425d-9b4e-138afde8cf0e',\n        parent: {", "        id: 'fd5cad06-8e2e-425d-9b4e-138afde8cf0e',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:59:00.000Z',\n        last_edited_time: '2023-04-22T05:00:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',", "        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Pdf',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'Pdf',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: '9fd4698a-4e76-4a1c-8e7b-a013c85dd475',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:59:00.000Z',", "        },\n        created_time: '2023-04-22T04:59:00.000Z',\n        last_edited_time: '2023-04-22T05:00:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'pdf',\n        pdf: {\n          caption: [],\n          type: 'file',\n          file: {", "          type: 'file',\n          file: {\n            url: 'https://s3.us-west-2.amazonaws.com/secure.notion-static.com/4abc717f-3f8a-4bdf-b482-090ca8371eab/Deep_Work.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAT73L2G45EIPT3X45%2F20230422%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20230422T050834Z&X-Amz-Expires=3600&X-Amz-Signature=7d5012d5fe544ffea48bbbeecb56d768f949dee7138a4c9f8a63850b42ea2e86&X-Amz-SignedHeaders=host&x-id=GetObject',\n            expiry_time: '2023-04-22T06:08:34.417Z',\n          },\n        },\n      },\n      {\n        object: 'block',\n        id: '1bdd5623-30dd-410a-8865-2a822907f180',", "        object: 'block',\n        id: '1bdd5623-30dd-410a-8865-2a822907f180',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:00:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Quotes',\n                link: null,", "                content: 'Quotes',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'Quotes',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '24bc67cb-e1a8-408d-ac2b-28a8de7e5a48',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'quote',\n        quote: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'This is a block quote.',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a block quote.',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'dfe9d55b-eb15-463a-8893-02615c83c069',\n        parent: {", "        id: 'dfe9d55b-eb15-463a-8893-02615c83c069',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',", "        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'To-do list',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'To-do list',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: '83579363-4afb-4b52-9e1c-427dac9ba8fd',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',", "        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'to_do',\n        to_do: {\n          rich_text: [\n            {\n              type: 'text',", "            {\n              type: 'text',\n              text: {\n                content: 'Completed task',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,", "                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Completed task',\n              href: null,\n            },\n          ],", "            },\n          ],\n          checked: true,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '22930a4e-8c76-4a34-b4e5-e716851c57ec',\n        parent: {", "        id: '22930a4e-8c76-4a34-b4e5-e716851c57ec',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'to_do',", "        archived: false,\n        type: 'to_do',\n        to_do: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Incomplete task',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'Incomplete task',\n              href: null,\n            },\n          ],\n          checked: false,\n          color: 'default',\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: 'a76b18aa-d7f7-4453-af04-7922bd936107',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',", "        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',", "            {\n              type: 'text',\n              text: {\n                content: 'Toggle',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,", "                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Toggle',\n              href: null,\n            },\n          ],", "            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '150eabf8-b9e6-47a7-96e8-9db3f17b5af2',\n        parent: {", "        id: '150eabf8-b9e6-47a7-96e8-9db3f17b5af2',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: true,\n        archived: false,\n        type: 'toggle',", "        archived: false,\n        type: 'toggle',\n        toggle: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Toggle heading',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'Toggle heading',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: '15009060-620d-479b-abb8-30d58bbd2f1a',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T05:03:00.000Z',\n        last_edited_time: '2023-04-22T05:03:00.000Z',", "        created_time: '2023-04-22T05:03:00.000Z',\n        last_edited_time: '2023-04-22T05:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'Video',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,", "                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Video',\n              href: null,\n            },\n          ],\n          is_toggleable: false,", "          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '4c4c1ffd-28a2-4d47-bb4f-bda743167ddd',\n        parent: {\n          type: 'page_id',", "        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T05:02:00.000Z',\n        last_edited_time: '2023-04-22T05:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'video',\n        video: {", "        type: 'video',\n        video: {\n          caption: [],\n          type: 'external',\n          external: {\n            url: 'https://www.youtube.com/watch?v=-XmImaT5TxM',\n          },\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: '6f04395b-70e0-4e9a-824f-c90925888cb8',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:33:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',", "        created_time: '2023-04-22T04:33:00.000Z',\n        last_edited_time: '2023-04-22T05:02:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_1',\n        heading_1: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'Extras',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,", "                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Extras',\n              href: null,\n            },\n          ],\n          is_toggleable: false,", "          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'fc27637b-5408-4e7c-8cce-8d4f86aabfe8',\n        parent: {\n          type: 'page_id',", "        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T05:01:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {", "        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Tables',\n                link: null,\n              },\n              annotations: {", "              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Tables',", "              },\n              plain_text: 'Tables',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',", "        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: true,\n        archived: false,\n        type: 'table',\n        table: {\n          table_width: 3,\n          has_column_header: false,\n          has_row_header: false,\n        },", "          has_row_header: false,\n        },\n      },\n      {\n        object: 'block',\n        id: '8b15ccd9-8200-46eb-bfa9-31cc86502138',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Code',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Code',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: 'f8894210-9696-4f6f-8b03-9d6228d7ca2e',", "        object: 'block',\n        id: 'f8894210-9696-4f6f-8b03-9d6228d7ca2e',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'code',\n        code: {\n          caption: [],\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'This is a code block.\\n',", "              text: {\n                content: 'This is a code block.\\n',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,", "                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a code block.\\n',\n              href: null,\n            },\n          ],\n          language: 'plain text',\n        },", "          language: 'plain text',\n        },\n      },\n      {\n        object: 'block',\n        id: 'f9196d85-ed6a-4e66-9e4a-e06649c82eb1',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },", "          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Divider',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Divider',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '0ec6df58-042f-4d5a-b9e7-12f29bbcadaa',", "        object: 'block',\n        id: '0ec6df58-042f-4d5a-b9e7-12f29bbcadaa',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'divider',\n        divider: {},\n      },\n      {\n        object: 'block',\n        id: 'd7aa833d-9696-4fe0-b8de-d8140c9ec45e',\n        parent: {\n          type: 'page_id',", "        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {", "        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Links',\n                link: null,\n              },\n              annotations: {", "              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Links',", "              },\n              plain_text: 'Links',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: 'f735c8ef-16aa-46c1-993a-660401ec68cb',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',", "        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'This is a link to Notion\\'s website.',\n                link: {\n                  url: 'https://www.notion.so/',\n                },\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'This is a link to Notion\\'s website.',\n              href: 'https://www.notion.so/',\n            },", "              href: 'https://www.notion.so/',\n            },\n          ],\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '3ab413cf-eb50-40cf-a7de-8124be31c12f',\n        parent: {", "        id: '3ab413cf-eb50-40cf-a7de-8124be31c12f',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',", "        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Equation',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'Equation',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },", "        },\n      },\n      {\n        object: 'block',\n        id: 'f16d5090-f1ea-40c4-ad08-f6b795367113',\n        parent: {\n          type: 'page_id',\n          page_id: '35a20998-a733-4ba0-b02e-0d629ded73f1',\n        },\n        created_time: '2023-04-22T04:49:00.000Z',", "        },\n        created_time: '2023-04-22T04:49:00.000Z',\n        last_edited_time: '2023-04-22T04:50:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'equation',\n        equation: {\n          expression: '(a+b)^n=a^n+{n \\\\choose 1}a^{n-1}b+{n \\\\choose 2}a^{n-2}b^2 + \\\\cdots + {n \\\\choose r}a^{n-r}b^r + \\\\cdots + b^n',\n        },\n      },", "        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},\n    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n  })\n", "  })\n\n// Kitchen Sink children blocks\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${'150eabf8-b9e6-47a7-96e8-9db3f17b5af2'}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [", "    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: '5d6e8f49-bea3-4ba7-974f-924c98768d6a',\n        parent: {\n          type: 'block_id',\n          block_id: '150eabf8-b9e6-47a7-96e8-9db3f17b5af2',\n        },\n        created_time: '2023-04-22T04:51:00.000Z',", "        },\n        created_time: '2023-04-22T04:51:00.000Z',\n        last_edited_time: '2023-04-22T04:51:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',", "            {\n              type: 'text',\n              text: {\n                content: 'Toggle content',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,", "                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Toggle content',\n              href: null,\n            },\n          ],", "            },\n          ],\n          color: 'default',\n        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},", "    type: 'block',\n    block: {},\n    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n  })\n\n// Kitchen Sink children blocks\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${'4d6d646c-b236-4b52-a40e-399f87a5c89f'}/children`)\n  .query(true)", "  .get(`/blocks/${'4d6d646c-b236-4b52-a40e-399f87a5c89f'}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: 'a3c6065c-401a-43bc-b374-f8f292618ef6',\n        parent: {\n          type: 'block_id',", "        parent: {\n          type: 'block_id',\n          block_id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'table_row',\n        table_row: {", "        type: 'table_row',\n        table_row: {\n          cells: [\n            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Column 1',\n                  link: null,\n                },", "                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },", "                  color: 'default',\n                },\n                plain_text: 'Column 1',\n                href: null,\n              },\n            ],\n            [\n              {\n                type: 'text',\n                text: {", "                type: 'text',\n                text: {\n                  content: 'Column 2',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,", "                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Column 2',\n                href: null,\n              },\n            ],\n            [", "            ],\n            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Column 3',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,", "                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Column 3',\n                href: null,", "                plain_text: 'Column 3',\n                href: null,\n              },\n            ],\n          ],\n        },\n      },\n      {\n        object: 'block',\n        id: 'b54a3c90-19de-47ee-9eff-a9d7cb8cbe82',", "        object: 'block',\n        id: 'b54a3c90-19de-47ee-9eff-a9d7cb8cbe82',\n        parent: {\n          type: 'block_id',\n          block_id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'table_row',\n        table_row: {\n          cells: [\n            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Row 1, Column 1',", "                text: {\n                  content: 'Row 1, Column 1',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,", "                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Row 1, Column 1',\n                href: null,\n              },\n            ],\n            [\n              {", "            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Row 1, Column 2',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,", "                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Row 1, Column 2',\n                href: null,\n              },", "                href: null,\n              },\n            ],\n            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Row 1, Column 3',\n                  link: null,\n                },", "                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },", "                  color: 'default',\n                },\n                plain_text: 'Row 1, Column 3',\n                href: null,\n              },\n            ],\n          ],\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: 'b311d987-e18e-479d-8783-dc66ec88ffe6',\n        parent: {\n          type: 'block_id',\n          block_id: '4d6d646c-b236-4b52-a40e-399f87a5c89f',\n        },\n        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',", "        created_time: '2023-04-22T04:34:00.000Z',\n        last_edited_time: '2023-04-22T04:34:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'table_row',\n        table_row: {\n          cells: [\n            [\n              {\n                type: 'text',", "              {\n                type: 'text',\n                text: {\n                  content: 'Row 2, Column 1',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,", "                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Row 2, Column 1',\n                href: null,\n              },\n            ],", "              },\n            ],\n            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Row 2, Column 2',\n                  link: null,\n                },\n                annotations: {", "                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Row 2, Column 2',", "                },\n                plain_text: 'Row 2, Column 2',\n                href: null,\n              },\n            ],\n            [\n              {\n                type: 'text',\n                text: {\n                  content: 'Row 2, Column 3',", "                text: {\n                  content: 'Row 2, Column 3',\n                  link: null,\n                },\n                annotations: {\n                  bold: false,\n                  italic: false,\n                  strikethrough: false,\n                  underline: false,\n                  code: false,", "                  underline: false,\n                  code: false,\n                  color: 'default',\n                },\n                plain_text: 'Row 2, Column 3',\n                href: null,\n              },\n            ],\n          ],\n        },", "          ],\n        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},\n    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n  })", "    developer_survey: 'https://notionup.typeform.com/to/bllBsoI4?utm_source=insomnia',\n  })\n\n// All others\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${pageIds[0]}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',", "  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: 'c2b84e62-6f89-45f6-ae1e-15d4f1cce6c2',\n        parent: {\n          type: 'page_id',\n          page_id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        },", "          page_id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        },\n        created_time: '2023-04-09T06:03:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Product B',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Product B',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '6d5f0b3f-fd01-4c77-bd29-4594315b0299',", "        object: 'block',\n        id: '6d5f0b3f-fd01-4c77-bd29-4594315b0299',\n        parent: {\n          type: 'page_id',\n          page_id: '7fc90a1d-ca4d-49ad-91b5-136c3d5a304d',\n        },\n        created_time: '2023-04-09T06:03:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'about product B',\n                link: null,", "                content: 'about product B',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'about product B',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },", "        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},\n  })\n\nnock(baseUrl)", "\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${pageIds[1]}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'block',", "      {\n        object: 'block',\n        id: 'b51a74cd-7627-4485-b046-75c1ddd490da',\n        parent: {\n          type: 'page_id',\n          page_id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n        },\n        created_time: '2023-04-09T05:50:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {", "        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,", "        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Product A',", "              text: {\n                content: 'Product A',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,", "                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Product A',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',", "          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '5fcc45ad-283b-4e1c-aa3d-56286b5b75a3',\n        parent: {\n          type: 'page_id',\n          page_id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',", "          type: 'page_id',\n          page_id: '1cec47af-3e5f-4382-bbfd-cd5f98effa30',\n        },\n        created_time: '2023-04-09T05:56:00.000Z',\n        last_edited_time: '2023-04-09T06:03:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {", "        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [", "        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'about product A',\n                link: null,\n              },\n              annotations: {\n                bold: false,", "              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'about product A',\n              href: null,", "              plain_text: 'about product A',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,", "    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},\n  })\n\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${pageIds[2]}/children`)\n  .query(true)", "  .get(`/blocks/${pageIds[2]}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: 'ebf8bcb5-f819-41d5-b97b-0075672f7ddc',\n        parent: {\n          type: 'page_id',", "        parent: {\n          type: 'page_id',\n          page_id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n        },\n        created_time: '2023-04-09T05:50:00.000Z',\n        last_edited_time: '2023-04-09T05:56:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_2',\n        heading_2: {", "        type: 'heading_2',\n        heading_2: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Product Categories',\n                link: null,\n              },\n              annotations: {", "              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Product Categories',", "              },\n              plain_text: 'Product Categories',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {", "      },\n      {\n        object: 'block',\n        id: 'dd77693a-1580-4f27-95e1-67a6cd1d9e3a',\n        parent: {\n          type: 'page_id',\n          page_id: 'b194a437-262e-482c-92b2-c5581eb5b477',\n        },\n        created_time: '2023-04-09T05:56:00.000Z',\n        last_edited_time: '2023-04-09T05:56:00.000Z',", "        created_time: '2023-04-09T05:56:00.000Z',\n        last_edited_time: '2023-04-09T05:56:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },", "          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {", "              type: 'text',\n              text: {\n                content: 'about product categories',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,", "                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'about product categories',\n              href: null,\n            },\n          ],\n          color: 'default',", "          ],\n          color: 'default',\n        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},\n  })", "    block: {},\n  })\n\nnock(baseUrl)\n  .persist()\n  .get(`/blocks/${pageIds[3]}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [", "    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: '0907be1b-593b-47c8-93ac-f27f263119e8',\n        parent: {\n          type: 'page_id',\n          page_id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n        },\n        created_time: '2023-04-09T05:45:00.000Z',", "        },\n        created_time: '2023-04-09T05:45:00.000Z',\n        last_edited_time: '2023-04-09T05:45:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'heading_1',\n        heading_1: {\n          rich_text: [\n            {\n              type: 'text',", "            {\n              type: 'text',\n              text: {\n                content: 'Team',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,", "                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'Team',\n              href: null,\n            },\n          ],", "            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '125f2adb-2154-4c1b-a6a4-eba8f92bda8b',\n        parent: {", "        id: '125f2adb-2154-4c1b-a6a4-eba8f92bda8b',\n        parent: {\n          type: 'page_id',\n          page_id: '163bc39b-ffa6-4d88-84f5-cb73fa4a705a',\n        },\n        created_time: '2023-04-09T05:55:00.000Z',\n        last_edited_time: '2023-04-09T05:55:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',", "          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',", "        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'about the team',\n                link: null,\n              },", "                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },", "                color: 'default',\n              },\n              plain_text: 'about the team',\n              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n    ],", "      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',\n    block: {},\n  })\n\nnock(baseUrl)\n  .persist()", "nock(baseUrl)\n  .persist()\n  .get(`/blocks/${pageIds[4]}/children`)\n  .query(true)\n  .reply(200, {\n    object: 'list',\n    results: [\n      {\n        object: 'block',\n        id: 'f835a203-0dab-4a3d-8f89-02c5e9404d43',", "        object: 'block',\n        id: 'f835a203-0dab-4a3d-8f89-02c5e9404d43',\n        parent: {\n          type: 'page_id',\n          page_id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n        },\n        created_time: '2023-04-09T05:45:00.000Z',\n        last_edited_time: '2023-04-09T05:56:00.000Z',\n        created_by: {\n          object: 'user',", "        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,", "        has_children: false,\n        archived: false,\n        type: 'heading_1',\n        heading_1: {\n          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'Products',\n                link: null,", "                content: 'Products',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',", "                code: false,\n                color: 'default',\n              },\n              plain_text: 'Products',\n              href: null,\n            },\n          ],\n          is_toggleable: false,\n          color: 'default',\n        },", "          color: 'default',\n        },\n      },\n      {\n        object: 'block',\n        id: '16a97a8d-5b38-484f-8d98-1ce03ee03b1b',\n        parent: {\n          type: 'page_id',\n          page_id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n        },", "          page_id: 'dd5157a6-cf4c-4a51-8da5-0da83ef641ae',\n        },\n        created_time: '2023-04-09T05:56:00.000Z',\n        last_edited_time: '2023-04-09T05:56:00.000Z',\n        created_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        last_edited_by: {\n          object: 'user',", "        last_edited_by: {\n          object: 'user',\n          id: '4e38fa57-609c-4beb-8e28-271b11cc81a3',\n        },\n        has_children: false,\n        archived: false,\n        type: 'paragraph',\n        paragraph: {\n          rich_text: [\n            {", "          rich_text: [\n            {\n              type: 'text',\n              text: {\n                content: 'about products',\n                link: null,\n              },\n              annotations: {\n                bold: false,\n                italic: false,", "                bold: false,\n                italic: false,\n                strikethrough: false,\n                underline: false,\n                code: false,\n                color: 'default',\n              },\n              plain_text: 'about products',\n              href: null,\n            },", "              href: null,\n            },\n          ],\n          color: 'default',\n        },\n      },\n    ],\n    next_cursor: null,\n    has_more: false,\n    type: 'block',", "    has_more: false,\n    type: 'block',\n    block: {},\n  })\n"]}
