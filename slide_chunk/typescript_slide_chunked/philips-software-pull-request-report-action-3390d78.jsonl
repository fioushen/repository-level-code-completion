{"filename": "tests/report.config.test.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { table, tsMarkdown } from 'ts-markdown'\nimport { GetActiveMeasures, ReportConfigurationTable, UpdateConfigValues } from '../src/Report.Measures'\nimport * as fs from 'fs'\nimport { ConfigurationCategory, ReportConfigurationEntry } from '../src/Report.Definitions'\nimport yaml from 'js-yaml'\nimport { ConfigurationInputs } from '../src/action.config.type'\n\nlet rows: { Name: string; Description: string; DefaultValue: string | number; Category: string }[] = []", "\nlet rows: { Name: string; Description: string; DefaultValue: string | number; Category: string }[] = []\n\nbeforeAll(() => {\n  const configItems = ReportConfigurationTable.map((item) => {\n    return {\n      description: item.Info.Description,\n      name: item.Info.ConfigurationName,\n      category: ConfigurationCategory[item.Info.ConfigurationCategory],\n      defaultValue: item.Info.ConfigValue,", "      category: ConfigurationCategory[item.Info.ConfigurationCategory],\n      defaultValue: item.Info.ConfigValue,\n    }\n  })\n\n  rows = configItems\n    .map((entry) => ({\n      Name: entry.name,\n      Description: entry.description,\n      DefaultValue: entry.defaultValue,", "      Description: entry.description,\n      DefaultValue: entry.defaultValue,\n      Category: entry.category,\n    }))\n    .sort((a, b) => {\n      if (a.Category < b.Category) {\n        return -1\n      }\n      if (a.Category > b.Category) {\n        return 1\n      }\n      return 0\n    })\n})\n\ntest('Generate documentation for configuration items', () => {\n  const configValues = table({\n    columns: [{ name: 'Name' }, { name: 'Description' }, { name: 'Category' }, { name: 'DefaultValue' }],\n    rows: rows,\n  })\n\n  const defaultConfigMeasures = tsMarkdown([configValues])\n\n  expect(defaultConfigMeasures.length).toBeGreaterThan(0)\n  // read content from file\n  const fileContent = fs.readFileSync('config.values.default.md', 'utf8')\n  const mergedContent = fileContent.concat('\\n').concat(defaultConfigMeasures)\n  // write to file\n  fs.writeFileSync('config.md', mergedContent)\n})\n\ntest('Generate valid input keys and patch the action.yml file', () => {\n  const inputValues: { [index: string]: { description: string; default: string | number; required: boolean } } = {}\n  rows.map((row) => {\n    inputValues[row.Name] = { description: row.Description, default: row.DefaultValue, required: false }\n  })\n  // load action yaml file\n  const actions = yaml.load(fs.readFileSync('action.yml', 'utf8')) as {\n    inputs: { [index: string]: { description: string; default: string | number; required: boolean } }\n  }\n  actions.inputs = inputValues\n  const serializedString = yaml.dump(actions)\n  expect(serializedString.length).toBeGreaterThan(0)\n  fs.writeFileSync('action.yml', serializedString)\n})\n\nconst CreateMetricTableCopy = (table: ReportConfigurationEntry[]): ReportConfigurationEntry[] => {\n  const tableAsJson = JSON.stringify(table)\n  return JSON.parse(tableAsJson) as ReportConfigurationEntry[]\n}\n\ntest('Update the MetricTable with config values from workflow', () => {\n  const inputValuesFromWorkflow = {} as ConfigurationInputs\n  inputValuesFromWorkflow.ShowAdditions = 'yes'\n  inputValuesFromWorkflow.ShowDeleted = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfChangedFiles = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfCommits = 'no'\n  inputValuesFromWorkflow.ShowNumberOfReviews = 'no'\n  inputValuesFromWorkflow.ShowNumberOfComments = 'no'\n  inputValuesFromWorkflow.ShowPRLeadTime = 'yes'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrCreated = 'no'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrMerged = 'no'\n  inputValuesFromWorkflow.ShowTimeToMergeAfterLastReview = 'no'\n  // create copy of MetricTable\n  const myMetricTable: ReportConfigurationEntry[] = CreateMetricTableCopy(ReportConfigurationTable)\n  expect(\n    ReportConfigurationTable.filter((item) => item.Info.ConfigurationName === 'ShowTimeToMergeAfterLastReview')[0].Info\n      .ConfigValue,\n  ).toBe('yes')\n  UpdateConfigValues(inputValuesFromWorkflow, myMetricTable)\n  expect(\n    myMetricTable.filter((item) => item.Info.ConfigurationName === 'ShowTimeToMergeAfterLastReview')[0].Info\n      .ConfigValue,\n  ).toBe('no')\n})\n\ntest('Filter the MetricTable with config values from workflow', () => {\n  const inputValuesFromWorkflow = {} as ConfigurationInputs\n  inputValuesFromWorkflow.ShowAdditions = 'yes'\n  inputValuesFromWorkflow.ShowDeleted = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfChangedFiles = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfCommits = 'no'\n  inputValuesFromWorkflow.ShowNumberOfReviews = 'no'\n  inputValuesFromWorkflow.ShowNumberOfComments = 'no'\n  inputValuesFromWorkflow.ShowPRLeadTime = 'yes'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrCreated = 'no'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrMerged = 'no'\n  inputValuesFromWorkflow.ShowTimeToMergeAfterLastReview = 'yes'\n  // create copy of MetricTable\n  const myMetricTable: ReportConfigurationEntry[] = CreateMetricTableCopy(ReportConfigurationTable)\n  UpdateConfigValues(inputValuesFromWorkflow, myMetricTable)\n  const activeMeasures = GetActiveMeasures(myMetricTable)\n  expect(\n    activeMeasures.filter((item) => item.Info.ConfigurationName === 'ShowTimeToMergeAfterLastReview')[0].Info\n      .ConfigValue,\n  ).toBe('yes')\n  expect(\n    activeMeasures.filter((item) => item.Info.ConfigurationName === 'ShowTimeSpendOnBranchBeforePrMerged').length,\n  ).toBe(0)\n})\n\ntest('Generate configuration arguments for action code', () => {\n  const inputValues: { [index: string]: { description: string; default: string | number; required: boolean } } = {}\n  rows.map((row) => {\n    inputValues[row.Name] = { description: row.Description, default: row.DefaultValue, required: false }\n  })\n  const generatedArgumentFile = 'src/action.config.args.ts'\n  const generatedTypeFile = 'src/action.config.type.ts'\n\n  // first call is write to generate a new new file (with overwrite)\n  fs.writeFileSync(generatedArgumentFile, '//GENERATED FILE FROM report.config.tests.ts - DO NOT EDIT!!!\\n\\n')\n  fs.writeFileSync(generatedTypeFile, '//GENERATED FILE FROM report.config.tests.ts - DO NOT EDIT!!!\\n\\n')\n  // from now on we append to the files\n  fs.appendFileSync(generatedArgumentFile, \"import * as core from '@actions/core'\\n\\n\")\n  fs.appendFileSync(generatedArgumentFile, 'export const config = {\\n')", "      if (a.Category > b.Category) {\n        return 1\n      }\n      return 0\n    })\n})\n\ntest('Generate documentation for configuration items', () => {\n  const configValues = table({\n    columns: [{ name: 'Name' }, { name: 'Description' }, { name: 'Category' }, { name: 'DefaultValue' }],\n    rows: rows,\n  })\n\n  const defaultConfigMeasures = tsMarkdown([configValues])\n\n  expect(defaultConfigMeasures.length).toBeGreaterThan(0)\n  // read content from file\n  const fileContent = fs.readFileSync('config.values.default.md', 'utf8')\n  const mergedContent = fileContent.concat('\\n').concat(defaultConfigMeasures)\n  // write to file\n  fs.writeFileSync('config.md', mergedContent)\n})\n\ntest('Generate valid input keys and patch the action.yml file', () => {\n  const inputValues: { [index: string]: { description: string; default: string | number; required: boolean } } = {}\n  rows.map((row) => {\n    inputValues[row.Name] = { description: row.Description, default: row.DefaultValue, required: false }\n  })\n  // load action yaml file\n  const actions = yaml.load(fs.readFileSync('action.yml', 'utf8')) as {\n    inputs: { [index: string]: { description: string; default: string | number; required: boolean } }\n  }\n  actions.inputs = inputValues\n  const serializedString = yaml.dump(actions)\n  expect(serializedString.length).toBeGreaterThan(0)\n  fs.writeFileSync('action.yml', serializedString)\n})\n\nconst CreateMetricTableCopy = (table: ReportConfigurationEntry[]): ReportConfigurationEntry[] => {\n  const tableAsJson = JSON.stringify(table)\n  return JSON.parse(tableAsJson) as ReportConfigurationEntry[]\n}\n\ntest('Update the MetricTable with config values from workflow', () => {\n  const inputValuesFromWorkflow = {} as ConfigurationInputs\n  inputValuesFromWorkflow.ShowAdditions = 'yes'\n  inputValuesFromWorkflow.ShowDeleted = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfChangedFiles = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfCommits = 'no'\n  inputValuesFromWorkflow.ShowNumberOfReviews = 'no'\n  inputValuesFromWorkflow.ShowNumberOfComments = 'no'\n  inputValuesFromWorkflow.ShowPRLeadTime = 'yes'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrCreated = 'no'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrMerged = 'no'\n  inputValuesFromWorkflow.ShowTimeToMergeAfterLastReview = 'no'\n  // create copy of MetricTable\n  const myMetricTable: ReportConfigurationEntry[] = CreateMetricTableCopy(ReportConfigurationTable)\n  expect(\n    ReportConfigurationTable.filter((item) => item.Info.ConfigurationName === 'ShowTimeToMergeAfterLastReview')[0].Info\n      .ConfigValue,\n  ).toBe('yes')\n  UpdateConfigValues(inputValuesFromWorkflow, myMetricTable)\n  expect(\n    myMetricTable.filter((item) => item.Info.ConfigurationName === 'ShowTimeToMergeAfterLastReview')[0].Info\n      .ConfigValue,\n  ).toBe('no')\n})\n\ntest('Filter the MetricTable with config values from workflow', () => {\n  const inputValuesFromWorkflow = {} as ConfigurationInputs\n  inputValuesFromWorkflow.ShowAdditions = 'yes'\n  inputValuesFromWorkflow.ShowDeleted = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfChangedFiles = 'yes'\n  inputValuesFromWorkflow.ShowNumberOfCommits = 'no'\n  inputValuesFromWorkflow.ShowNumberOfReviews = 'no'\n  inputValuesFromWorkflow.ShowNumberOfComments = 'no'\n  inputValuesFromWorkflow.ShowPRLeadTime = 'yes'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrCreated = 'no'\n  inputValuesFromWorkflow.ShowTimeSpendOnBranchBeforePrMerged = 'no'\n  inputValuesFromWorkflow.ShowTimeToMergeAfterLastReview = 'yes'\n  // create copy of MetricTable\n  const myMetricTable: ReportConfigurationEntry[] = CreateMetricTableCopy(ReportConfigurationTable)\n  UpdateConfigValues(inputValuesFromWorkflow, myMetricTable)\n  const activeMeasures = GetActiveMeasures(myMetricTable)\n  expect(\n    activeMeasures.filter((item) => item.Info.ConfigurationName === 'ShowTimeToMergeAfterLastReview')[0].Info\n      .ConfigValue,\n  ).toBe('yes')\n  expect(\n    activeMeasures.filter((item) => item.Info.ConfigurationName === 'ShowTimeSpendOnBranchBeforePrMerged').length,\n  ).toBe(0)\n})\n\ntest('Generate configuration arguments for action code', () => {\n  const inputValues: { [index: string]: { description: string; default: string | number; required: boolean } } = {}\n  rows.map((row) => {\n    inputValues[row.Name] = { description: row.Description, default: row.DefaultValue, required: false }\n  })\n  const generatedArgumentFile = 'src/action.config.args.ts'\n  const generatedTypeFile = 'src/action.config.type.ts'\n\n  // first call is write to generate a new new file (with overwrite)\n  fs.writeFileSync(generatedArgumentFile, '//GENERATED FILE FROM report.config.tests.ts - DO NOT EDIT!!!\\n\\n')\n  fs.writeFileSync(generatedTypeFile, '//GENERATED FILE FROM report.config.tests.ts - DO NOT EDIT!!!\\n\\n')\n  // from now on we append to the files\n  fs.appendFileSync(generatedArgumentFile, \"import * as core from '@actions/core'\\n\\n\")\n  fs.appendFileSync(generatedArgumentFile, 'export const config = {\\n')", "  fs.appendFileSync(generatedTypeFile, 'export type ConfigurationInputs = {\\n')\n  for (const key in inputValues) {\n    fs.appendFileSync(\n      generatedArgumentFile,\n      `  ${key}: core.getInput('${key}', { required: ${inputValues[key].required.toString()} }),\\n`,\n    )\n    fs.appendFileSync(generatedTypeFile, `  ${key}: string | number\\n`)\n  }\n  fs.appendFileSync(generatedArgumentFile, '}\\n')\n  fs.appendFileSync(generatedTypeFile, '}\\n')\n  expect(fs.statSync(generatedArgumentFile).size).toBeGreaterThan(10)\n})\n"]}
{"filename": "tests/report.test.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { IPullRequest } from '../src/Interfaces/PullRequestTypes'\nimport { PullRequest } from '../src/PullRequest.Definitions'\nimport {\n  GetAddedLines,\n  GetChangedFilesCount,\n  GetCommentCount,\n  GetCommitsCount,\n  GetDeletedLines,", "  GetCommitsCount,\n  GetDeletedLines,\n} from '../src/Report.Functions'\nimport { DataFromBigPullRequest } from './pr_sample_data'\n\nlet PullRequestJsonModel: unknown\nlet PullRequestStatModel: IPullRequest\n\nbeforeAll(() => {\n  PullRequestJsonModel = DataFromBigPullRequest", "beforeAll(() => {\n  PullRequestJsonModel = DataFromBigPullRequest\n  PullRequestStatModel = PullRequest.CreateFromJson(PullRequestJsonModel)\n})\n\ntest('Check number of added lines', () => {\n  const additions = DataFromBigPullRequest as { additions: number }\n  expect(GetAddedLines(PullRequestStatModel)).toBe(additions['additions'])\n})\n", "})\n\ntest('Check number of deleted lines', () => {\n  const deletions = DataFromBigPullRequest as { deletions: number }\n  expect(GetDeletedLines(PullRequestStatModel)).toBe(deletions['deletions'])\n})\n\ntest('Check number changed files', () => {\n  const changedFiles = DataFromBigPullRequest as { changedFiles: number }\n  expect(GetChangedFilesCount(PullRequestStatModel)).toBe(changedFiles['changedFiles'])", "  const changedFiles = DataFromBigPullRequest as { changedFiles: number }\n  expect(GetChangedFilesCount(PullRequestStatModel)).toBe(changedFiles['changedFiles'])\n})\n\ntest('Check number commits', () => {\n  const commits = DataFromBigPullRequest as { commits: unknown[] }\n  expect(GetCommitsCount(PullRequestStatModel)).toBe(commits['commits'].length)\n})\n\ntest('Check number comments', () => {", "\ntest('Check number comments', () => {\n  const comments = DataFromBigPullRequest as { comments: unknown[] }\n  expect(GetCommentCount(PullRequestStatModel)).toBe(comments['comments'].length)\n})\n"]}
{"filename": "tests/github.cli.helper.test.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { GetPullRequestData } from '../src/GitHubCliHelper'\nimport { PullRequest } from '../src/PullRequest.Definitions'\ndescribe('CliIntegrationTest', () => {\n  test('Check that we can request from CLI tool', async () => {\n    const pullRequestData = await GetPullRequestData(381, 'aertslab/SCope')\n    expect(pullRequestData).toBeDefined()\n  })\n", "  })\n\n  test('Check that we can request, and read the data in our data model', async () => {\n    const pullRequestJson = await GetPullRequestData(381, 'aertslab/SCope')\n    const pullRequest = PullRequest.CreateFromJson(pullRequestJson)\n    expect(pullRequest.id).toBe(381)\n    expect(pullRequest.reviews.length).toBeGreaterThan(0)\n    expect(pullRequest.comments.length).toBeGreaterThan(0)\n    expect(pullRequest.commits.length).toBeGreaterThan(0)\n  })", "    expect(pullRequest.commits.length).toBeGreaterThan(0)\n  })\n})\n"]}
{"filename": "tests/report.generation.test.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { IPullRequest } from '../src/Interfaces/PullRequestTypes'\nimport { PullRequest } from '../src/PullRequest.Definitions'\nimport { Report } from '../src/Report.Definitions'\nimport { ReportGenerator } from '../src/Report.Generation'\nimport { ReportConfigurationTable } from '../src/Report.Measures'\nimport { DataFromBigPullRequest } from './pr_sample_data'\nimport { tsMarkdown } from 'ts-markdown'\n", "import { tsMarkdown } from 'ts-markdown'\n\nlet PullRequestJsonModel: unknown\nlet PullRequestStatModel: IPullRequest\n\nbeforeAll(() => {\n  PullRequestJsonModel = DataFromBigPullRequest\n  PullRequestStatModel = PullRequest.CreateFromJson(PullRequestJsonModel)\n})\n", "})\n\ntest('Check if header is generated as expected', () => {\n  const generator = new ReportGenerator()\n  const report = new Report()\n  report.Description = 'Pull Request Report for PR'\n  expect(tsMarkdown([generator.GenerateHeader(PullRequestStatModel, report)])).toBe(\n    '# Pull Request Report for PR (#381)',\n  )\n})", "  )\n})\n\ntest('Check if table is generated as expected', () => {\n  const generator = new ReportGenerator()\n  const report = new Report()\n  report.Entries = ReportConfigurationTable\n  report.Description = 'Test report'\n  report.Id = PullRequestStatModel.id.toString()\n  const table = generator.GenerateMeasureTable(PullRequestStatModel, report)", "  report.Id = PullRequestStatModel.id.toString()\n  const table = generator.GenerateMeasureTable(PullRequestStatModel, report)\n  const result = tsMarkdown(table)\n  expect(result.length).toBeGreaterThan(0)\n})\n\ntest('Check if whole report is generated as expected', () => {\n  const generator = new ReportGenerator()\n  const report = new Report()\n  report.Entries = ReportConfigurationTable", "  const report = new Report()\n  report.Entries = ReportConfigurationTable\n  report.Description = 'Test report'\n  report.Id = PullRequestStatModel.id.toString()\n  const result = generator.Generate(PullRequestStatModel, report)\n  expect(result.length).toBeGreaterThan(0)\n})\n"]}
{"filename": "tests/report.parser.test.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { GetPullRequestData } from '../src/GitHubCliHelper'\nimport * as fs from 'fs'\nimport { DataFromBigPullRequest } from './pr_sample_data'\nimport { PullRequest } from '../src/PullRequest.Definitions'\nimport {\n  IPullRequestComment,\n  IPullRequestCommit,\n  IPullRequestReview,", "  IPullRequestCommit,\n  IPullRequestReview,\n  IStatusCheck,\n} from '../src/Interfaces/PullRequestTypes'\n\n// This method can be used to update the sample data\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst UpdateSampleData = async () => {\n  const prData = await GetPullRequestData(381, 'aertslab/SCope')\n  // write json to file", "  const prData = await GetPullRequestData(381, 'aertslab/SCope')\n  // write json to file\n  fs.writeFileSync('prDatams.json', JSON.stringify(prData, null, 2))\n}\n\ntest('Gather PR-Data for unknown Repo', async () => {\n  let exceptionRaised = false\n  try {\n    const jsonData = await GetPullRequestData(381, 'aertslab437598493-qn/SCope-154d7884f5')\n    const data = PullRequest.CreateFromJson(jsonData)\n    console.log(data)", "  } catch (e) {\n    exceptionRaised = true\n  }\n  expect(exceptionRaised).toBeTruthy()\n})\n\ntest('Transfer to internal object model', () => {\n  const data = PullRequest.CreateFromJson(DataFromBigPullRequest)\n  expect(data).toBeDefined()\n})\n\ntest('Check if DataFromBigPullRequest is parsed correctly and reflected by the object model consistently', () => {\n  const SampleData = DataFromBigPullRequest as {\n    number: number\n    title: string\n    createdAt: string\n    updatedAt: string\n    closedAt: string\n    mergedAt: string\n    body: string\n    author: string\n    state: string\n    mergeable: string\n    mergeStateStatus: string\n    isDraft: boolean\n    baseRefName: string\n    headRefName: string\n    headRefOid: string\n    headRepository: string\n    headRepositoryOwner: string\n    commits: unknown[]\n    reviews: unknown[]\n    comments: unknown[]\n    statusCheckRollup: unknown[]\n  }\n  // parse data from DataFromBigPullRequest\n  const data = PullRequest.CreateFromJson(DataFromBigPullRequest)\n  // check if the data is parsed correctly\n  expect(data.id).toBe(SampleData['number'])\n  expect(data.title).toBe(SampleData['title'])\n  expect(data.createdAt).toBe(SampleData['createdAt'])\n  expect(data.updatedAt).toBe(SampleData['updatedAt'])\n  expect(data.closedAt).toBe(SampleData['closedAt'])\n  expect(data.mergedAt).toBe(SampleData['mergedAt'])\n  expect(data.body).toBe(SampleData['body'])\n  expect(data.author).toBe(SampleData['author'])\n  expect(data.state).toBe(SampleData['state'])\n  expect(data.mergeable).toBe(SampleData['mergeable'])\n  expect(data.mergeStateStatus).toBe(SampleData['mergeStateStatus'])\n  expect(data.isDraft).toBe(SampleData['isDraft'])\n  expect(data.baseRefName).toBe(SampleData['baseRefName'])\n  expect(data.headRefName).toBe(SampleData['headRefName'])\n  expect(data.headRefOid).toBe(SampleData['headRefOid'])\n  expect(data.headRepository).toBe(SampleData['headRepository'])\n  expect(data.headRepositoryOwner).toBe(SampleData['headRepositoryOwner'])\n\n  expect(data.commits.length).toBe(SampleData['commits'].length)\n  expect(data.reviews.length).toBe(SampleData['reviews'].length)\n  expect(data.comments.length).toBe(SampleData['comments'].length)\n  expect(data.statusChecks.length).toBe(SampleData['statusCheckRollup'].length)\n  CheckCommits(data.commits, 1)\n  CheckReviews(data.reviews, 0)\n  CheckComments(data.comments, 1)\n  CheckStatusChecks(data.statusChecks, 1)\n})\n\nconst CheckStatusChecks = (checks: IStatusCheck[], index: number) => {\n  const SampleData = DataFromBigPullRequest as { statusCheckRollup: unknown[] }\n  expect(checks.length).toBe(SampleData['statusCheckRollup'].length)\n  const statusCheck = checks[index]\n  const statusCheckFromSampleData = SampleData['statusCheckRollup'][index] as {\n    completedAt: string\n    conclusion: string\n    name: string\n    startedAt: string\n    status: string\n    workflowName: string\n  }\n  expect(statusCheck.completedAt).toBe(statusCheckFromSampleData['completedAt'])\n  expect(statusCheck.conclusion).toBe(statusCheckFromSampleData['conclusion'])\n  expect(statusCheck.name).toBe(statusCheckFromSampleData['name'])\n  expect(statusCheck.startedAt).toBe(statusCheckFromSampleData['startedAt'])\n  expect(statusCheck.status).toBe(statusCheckFromSampleData['status'])\n  expect(statusCheck.workflowName).toBe(statusCheckFromSampleData['workflowName'])\n}\n\nconst CheckComments = (comments: IPullRequestComment[], index: number) => {\n  const SampleData = DataFromBigPullRequest as { comments: unknown[] }\n  expect(comments.length).toBe(SampleData['comments'].length)\n\n  const comment = comments[index]\n  const commentFromSampleData = SampleData['comments'][index] as {\n    author: { login: string }\n    authorAssociation: string\n    body: string\n    createdAt: string\n    id: string\n    url: string\n    viewerDidAuthor: string\n  }\n  expect(comment.authorAssociation).toBe(commentFromSampleData['authorAssociation'])\n  expect(comment.authorLogin).toBe(commentFromSampleData['author']['login'])\n  expect(comment.body).toBe(commentFromSampleData['body'])\n  expect(comment.createdAt).toBe(commentFromSampleData['createdAt'])\n  expect(comment.id).toBe(commentFromSampleData['id'])\n  expect(comment.url).toBe(commentFromSampleData['url'])\n  expect(comment.viewerDidAuthor).toBe(commentFromSampleData['viewerDidAuthor'] == 'true')\n}\n\nconst CheckCommits = (commits: IPullRequestCommit[], index: number) => {\n  const SampleData = DataFromBigPullRequest as { commits: unknown[] }\n  expect(commits.length).toBe(SampleData['commits'].length)\n\n  const commit = commits[index]\n  const commitFromSampleData = SampleData['commits'][index] as {\n    oid: string\n    messageHeadline: string\n    messageBody: string\n    authors: { email: string; name: string; login: string; id: string }[]\n  }\n  const authorIndex = 0\n  expect(commit.commitId).toBe(commitFromSampleData['oid'])\n  expect(commit.commitHeader).toBe(commitFromSampleData['messageHeadline'])\n  expect(commit.commitBody).toBe(commitFromSampleData['messageBody'])\n  expect(commit.authors[authorIndex].email).toBe(commitFromSampleData['authors'][authorIndex]['email'])\n  expect(commit.authors[authorIndex].name).toBe(commitFromSampleData['authors'][authorIndex]['name'])\n  expect(commit.authors[authorIndex].login).toBe(commitFromSampleData['authors'][authorIndex]['login'])\n  expect(commit.authors[authorIndex].id).toBe(commitFromSampleData['authors'][authorIndex]['id'])\n}\n\nconst CheckReviews = (reviews: IPullRequestReview[], index: number) => {\n  const SampleData = DataFromBigPullRequest as { reviews: unknown[] }\n  expect(reviews.length).toBe(SampleData['reviews'].length)\n\n  const review = reviews[index]\n  const reviewFromSampleData = SampleData['reviews'][0] as {\n    author: { login: string }\n    body: string\n    state: string\n    submittedAt: string\n  }\n  expect(review.authorLogin).toBe(reviewFromSampleData['author']['login'])\n  expect(review.body).toBe(reviewFromSampleData['body'])\n  expect(review.state).toBe(reviewFromSampleData['state'])\n  expect(review.submittedAt).toBe(reviewFromSampleData['submittedAt'])\n}\n"]}
{"filename": "tests/run.test.ts", "chunked_list": ["import { SanitizeMarkdownComment } from '../src/run'\n\ndescribe('SanitizeMarkdownComment', () => {\n  it('should replace opening HTML comment tags with HTML entities', () => {\n    const input = '<!-- This is a comment'\n    const expectedOutput = '&lt;!-- This is a comment'\n    const output = SanitizeMarkdownComment(input)\n    expect(output).toEqual(expectedOutput)\n  })\n", "  })\n\n  it('should replace closing HTML comment tags with HTML entities', () => {\n    const input = 'This is a comment -->'\n    const expectedOutput = 'This is a comment --&gt;'\n    const output = SanitizeMarkdownComment(input)\n    expect(output).toEqual(expectedOutput)\n  })\n\n  it('should replace both opening and closing HTML comment tags with HTML entities', () => {", "\n  it('should replace both opening and closing HTML comment tags with HTML entities', () => {\n    const input = '<!-- This is a comment -->'\n    const expectedOutput = '&lt;!-- This is a comment --&gt;'\n    const output = SanitizeMarkdownComment(input)\n    expect(output).toEqual(expectedOutput)\n  })\n\n  it('should not modify input that does not contain HTML comment tags', () => {\n    const input = 'This is not a comment'", "  it('should not modify input that does not contain HTML comment tags', () => {\n    const input = 'This is not a comment'\n    const expectedOutput = 'This is not a comment'\n    const output = SanitizeMarkdownComment(input)\n    expect(output).toEqual(expectedOutput)\n  })\n})\n"]}
{"filename": "tests/pr_sample_data.ts", "chunked_list": ["// for license and copyright look at the repository\n\nexport const DataFromBigPullRequest: unknown = JSON.parse(\n  '{\\n  \"additions\": 36540,\\n  \"assignees\": [],\\n  \"author\": {\\n    \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n    \"is_bot\": false,\\n    \"login\": \"MaybeJustJames\",\\n    \"name\": \"James Collier\"\\n  },\\n  \"baseRefName\": \"develop\",\\n  \"body\": \"This branch begins a large-scale move of the app to redux and redux sagas for state management. It also restructures the app in a way I think is easier to navigate and think about.\\\\r\\\\n\\\\r\\\\n### Cleanup\\\\r\\\\n* Webpack config based on [this](https://github.com/taniarascia/webpack-boilerplate).\\\\r\\\\n* Remove unnecessary/unused build machinery and unused files.\\\\r\\\\n* Remove Google Analytics integration\\\\r\\\\n* Dynamically generate artifact and use default WebPack output directory\\\\r\\\\n* Update most dependencies, removed unused or unnecessary dependincies\\\\r\\\\n* Add a script to visualise the size of the compiled build artifact (bundle-size-analyse)\\\\r\\\\n* Use ts-loader rather than babel to compile ts/tsx (type-checking)\\\\r\\\\n* Upgrade to webpack 5\\\\r\\\\n* Remove reliance on polyfilled Node APIs (path and zip)\\\\r\\\\n* Add linting for use of abstract equality and block delimiters with braces\\\\r\\\\n* Add tests for the front-end using Jest and react-testing-library. Including tests for `fetch()` And GProfiler previously introduced.\\\\r\\\\n* Use `jest-css-modules-transform` to handle imports for CSS. Version is intentionally pinned as \\\\\"4.0.2\\\\\" breaks tests.\\\\r\\\\n* Wrap the old API in a scary `LegacyAPI` name\\\\r\\\\n* Extract some of the complexity in the `App` component in new `Main` and `FullPageNotify` components.\\\\r\\\\n* Turn on strict TypeScript type checking and fix all type errors.\\\\r\\\\n* Remove as much CSS as possible and simplify DOM structure\\\\r\\\\n* Introduce a TEST_ONLY flag to avoid hard-to-test side-effects from the legacy API while testing.\\\\r\\\\n* Add local CSS imported only by the component that uses it.\\\\r\\\\n* Remove as many uses of Lodash as possible\\\\r\\\\n* Add a utility function `zipLists` to `zip()` a list of lists.\\\\r\\\\n* Refactor the UploadModal to be responsive.\\\\r\\\\n* Reduce use of `default exports`\\\\r\\\\n\\\\r\\\\n### Code structure and redesign\\\\r\\\\n* Document code style and design decisions in CONTRIBUTING.md\\\\r\\\\n* Change the structure of `getFeature()` requests and responses\\\\r\\\\n* Add a \\\\\"filter by type/category\\\\\" argument to `getFeature()` requests\\\\r\\\\n* Redisign of FeatureSearchBox components following the guidelines outlines in CONTRIBUTING.md\\\\r\\\\n* LegacyAPI no longer tracks UUID, sessionMode, sidebar visibility, and cookie consent. These have been moved to Redux.\\\\r\\\\n* Wire in Redux to existing components where useful.\\\\r\\\\n* Use `immer` to update Redux state.\\\\r\\\\n* Add a `Result` type similar to the backend `Result` type.\\\\r\\\\n\\\\r\\\\n### UI\\\\r\\\\n* Viewer component is now responsive and does less work to render data\\\\r\\\\n* Redisign of UI, the whole UI is a little more responsive and more traditionally \\\\\"single-page\\\\\".\\\\r\\\\n* Centre the Welcome page and make it scrollable.\\\\r\\\\n\\\\r\\\\n### Breaking changes and known issues\\\\r\\\\n* Does not keep (removes) the functionality for \\\\\"locking\\\\\" related search entries on searches like \\\\\"batch\\\\\" and \\\\\"All clusters\\\\\" (#447)\\\\r\\\\n* ~~This PR breaks ViewerSidebar \\\\\"Clustering Controls\\\\\". Fixing this is out of scope for the PR, this should instead be fixed after @dweemx cleanup of the ViewerSidebar is merged.~~\\\\r\\\\n* Lasso selections are not \\\\\"remembered\\\\\" when switching between tabs.\\\\r\\\\n* The Babel config file is necessary for Jest. It duplicates the webpack config. If you have a solution to remove the duplication please let me know.\\\\r\\\\n* [VISUAL/STYLING] Annotation voting popup does not persist on mouseover (#427)\\\\r\\\\n* ~~Compare tab break when performing a DnD of one of the annotation onto a viewer.~~\\\\r\\\\n* [VISUAL/STYLING] Styling changes cause text to overlap in many locations (i.e. Loom selection in sidebar) (#428)\\\\r\\\\n* [BREAKING] Getting metadata from a cell section fails (#429)\\\\r\\\\n* [MINOR] Settings in sidebar do not display when selecting a loom, only after selecting a gene or changing loom (#430) \\\\r\\\\n* [BREAKING] Selecting a cluster in the results, always selects the first result by name (#431)\\\\r\\\\n* [BREAKING] Adding annotations fails with python error (#432)\\\\r\\\\n* [MINOR] Annotation labels remain after clearing feature (#433)\\\\r\\\\n* [VISUAL/STYLING] Regulon tab plots done fill screen (#434)\\\\r\\\\n* [MAJOR] Selecting a regulon causes an infinite loop in the backend (#435)\\\\r\\\\n* [BREAKING] Regulon histogram never displays data (#436)\\\\r\\\\n* [MAJOR] Unable to search for clusters by annotation name (#437)\\\\r\\\\n* [MINOR] Permalink button does nothing (#438)\\\\r\\\\n* [MAJOR] Compare tab does not work with more that one annotation per viewer (#439)\",\\n  \"changedFiles\": 109,\\n  \"closed\": true,\\n  \"closedAt\": \"2021-05-28T08:23:55Z\",\\n  \"comments\": [\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDcxNTA5MDAyNg==\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"Add PR summary points to documentation (conribution manual??)\",\\n      \"createdAt\": \"2020-10-23T07:42:19Z\",\\n      \"includesCreatedEdit\": false,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-715090026\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDcxNjU2ODQxMw==\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"/!\\\\\\\\ I noticed that `<- Pevious` and  `Next ->` buttons of the cluster controls (right side bar) don\\'t work anymore. They work in the `master` branch\",\\n      \"createdAt\": \"2020-10-26T14:05:36Z\",\\n      \"includesCreatedEdit\": false,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-716568413\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDc0MDUyMzMxNQ==\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"> /!\\\\\\\\ I noticed that `<- Pevious` and `Next ->` buttons of the cluster controls (right side bar) don\\'t work anymore. They work in the `master` branch\\\\r\\\\n\\\\r\\\\nReproductions steps:\\\\r\\\\n1. Query \\\\\"Unannotated Cluster 0\\\\\"\\\\r\\\\n1. Click on \\\\\"Next ->\\\\\" button in the right side bar should take you to the next cluster i.e.: \\\\\"Unannotated Cluster 1\\\\\"\\\\r\\\\n1. Click on \\\\\"<- Previous\\\\\" button in the right side bar should take you to the previous cluster i.e.: \\\\\"Unannotated Cluster 0\\\\\"\",\\n      \"createdAt\": \"2020-12-08T10:09:53Z\",\\n      \"includesCreatedEdit\": false,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-740523315\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDgxMjQ3MzY4OA==\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"@dweemx wrt an `.nvmrc` Node 10 is EOL end of this month. I\\'m fine leaving this out. What about you?\",\\n      \"createdAt\": \"2021-04-02T10:31:14Z\",\\n      \"includesCreatedEdit\": false,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-812473688\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDgxMjQ3NDcyNw==\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"@dweemx Can you elaborate on what \\\\\"switch from loom\\\\\" means?\",\\n      \"createdAt\": \"2021-04-02T10:34:27Z\",\\n      \"includesCreatedEdit\": false,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-812474727\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDgxMjQ4NTAzOQ==\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"> @dweemx wrt an `.nvmrc` Node 10 is EOL end of this month. I\\'m fine leaving this out. What about you?\\\\r\\\\n\\\\r\\\\nYou mean not having a `.nvmrc` file or just upgrade to use higher Node version ?\",\\n      \"createdAt\": \"2021-04-02T11:09:36Z\",\\n      \"includesCreatedEdit\": false,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-812485039\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDgxMjUxMTAyMA==\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"> > @dweemx wrt an `.nvmrc` Node 10 is EOL end of this month. I\\'m fine leaving this out. What about you?\\\\r\\\\n> \\\\r\\\\n> You mean not having a `.nvmrc` file or just upgrade to use higher Node version ?\\\\r\\\\n\\\\r\\\\nNo I mean it\\'s a users fault if they use an EOL node version. So why have an `.nvmrc`?\",\\n      \"createdAt\": \"2021-04-02T12:34:39Z\",\\n      \"includesCreatedEdit\": true,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-812511020\",\\n      \"viewerDidAuthor\": false\\n    },\\n    {\\n      \"id\": \"MDEyOklzc3VlQ29tbWVudDgxNTA1MzQzOA==\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"> > > @dweemx wrt an `.nvmrc` Node 10 is EOL end of this month. I\\'m fine leaving this out. What about you?\\\\r\\\\n> > \\\\r\\\\n> > \\\\r\\\\n> > You mean not having a `.nvmrc` file or just upgrade to use higher Node version ?\\\\r\\\\n> \\\\r\\\\n> No I mean it\\'s a users fault if they use an EOL node version. So why have an `.nvmrc`?\\\\r\\\\n\\\\r\\\\nBecause the user will be sure that the software will work with that version of Node. \",\\n      \"createdAt\": \"2021-04-07T16:30:26Z\",\\n      \"includesCreatedEdit\": true,\\n      \"isMinimized\": false,\\n      \"minimizedReason\": \"\",\\n      \"reactionGroups\": [],\\n      \"url\": \"https://github.com/aertslab/SCope/pull/381#issuecomment-815053438\",\\n      \"viewerDidAuthor\": false\\n    }\\n  ],\\n  \"commits\": [\\n    {\\n      \"authoredDate\": \"2020-08-13T14:49:05Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:20Z\",\\n      \"messageBody\": \"* Move to typescript\\\\n* Remove unnecessary and unused code\\\\n* Upgrade semantic-ui-react to a more recent version\\\\n* Re-organise some dependant code\\\\n* Update packages and install immer\",\\n      \"messageHeadline\": \"Simplify and organise the FeatureSearchBox component\",\\n      \"oid\": \"1b9216d8b9d228c727c3e5736c5daaab2fe0c78f\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-08-14T12:10:02Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:29Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Us ESLint to replace use of `let` with `const` where possible\",\\n      \"oid\": \"53d6870ec4fd54c89c83dd478fe11825f22a6c37\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-08-25T07:00:03Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:29Z\",\\n      \"messageBody\": \"This can be used to only search for genes or regulons, etc. that match\\\\nthe search query rather than everything that matches the search query.\\\\n\\\\n* Add \\\\\"MENU\\\\\" text to the header menu button\\\\n* Default session mode should be \\\\\"read\\\\\"\\\\n* Remove dropdown on the FeatureSearchBox. Filter is imposed by the\\\\n  page and is not user selectable.\\\\n* Adjust getFeatures gRPC/protocol buffers interface\\\\n* Modify the gRPC definition of getFeatures to be more convenient\\\\n* Fix a react warning\\\\n     The warning triggered when trying to update the old state management\\\\n     system using onResultSelect() while rendering. This is a no-no\\\\n     so now it just calls the old state management update API.\\\\n     This also moves remaining logic out of the component\\\\n* Do some error handling\\\\n* Some documentation\",\\n      \"messageHeadline\": \"Implement filtering in the FeatureSearchBox\",\\n      \"oid\": \"8c6c87ba4bbf3d46d52dcb7bbada7e6bcf19e3a0\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-09-14T09:03:34Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:30Z\",\\n      \"messageBody\": \"* Add basic Saga side-effect generation testing\\\\n* Add Reducer type annotation (thanks @dweemx)\\\\n* Use a clearer variable name for search results\\\\n* Prefer `type` over `interface`\\\\n* Use constants in App\\\\n* The name \\\\\"handleUpdateScatterPlot\\\\\" is a more accurate than \\\\\"handleUpdateTSNE\\\\\"\\\\n* Do not open the bundle analyzer by default\\\\n* Bump semantic-ui-react version\\\\n* use Sagas debounce() rather than throttle()\\\\n* Remove unused import of lodash\\\\n* Fix bug: Cannot model category as strict type, revert to string\\\\n* Fix bug: Correct ordering in displayed search results\",\\n      \"messageHeadline\": \"Add some testing for the Search related components\",\\n      \"oid\": \"74f7dad14a74ca6b866d857406bf23584ebbbd2d\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-11-02T16:13:44Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:50Z\",\\n      \"messageBody\": \"* Add some tests\\\\n* Wire up redux hooks and fix tests\\\\n* Fix \\\\\"cancel\\\\\" button in search box\\\\n* Track cookie consent in redux\",\\n      \"messageHeadline\": \"Turn on strict type checking and start fixing errors\",\\n      \"oid\": \"f4df49b536783683828696f4e4500165f87ab307\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-11-04T10:03:53Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:50Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Wrap filenames in the AppSidebar\",\\n      \"oid\": \"b4842a01f6c29fc143dc75a89fc01c07beb04d4b\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-11-04T10:33:38Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:51Z\",\\n      \"messageBody\": \"So that users immediately see where to load their data.\\\\nAlso centres content in the Welcome screen so still\\\\nvisible with the sidebar open.\",\\n      \"messageHeadline\": \"Display the sidebar by default\",\\n      \"oid\": \"9e5515266e081a95125f6a6129e69820921c59c4\"\\n    },\\n    {\\n      \"authoredDate\": \"2020-11-12T15:23:52Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:11:52Z\",\\n      \"messageBody\": \"* Remove all uses of abstract (in)equality\\\\n     Abstract (in)equality is not type-safe and leads to\\\\n     weird type coercion.\\\\n* eslint eqeqeq check\\\\n* Enforce all blocks should have brace delimiters\\\\n* Move definition of FEATURE_COLOURS constant\\\\n* Remove GeneSet page\\\\n* Use ts-loader instead of babel for typescript (ts-loader does type checking)\\\\n* Use pako for zlib compression\\\\n* Replace some uses of Lodash with Ramda\\\\n* Upgrade from Webpack 4 to Webpack 5\\\\n* Add another zipLists test\\\\n* Looping requests when selecting search result\\\\n  \\\\\"Unnannotated clustrer 0\\\\\"\\\\n* UI disappears when ViewerSidebar is too tall\\\\n* Fix non-display of data in gene tab\\\\n* Add a contributing file\\\\n* Add a new contributing style rule\",\\n      \"messageHeadline\": \"Remove a lot of unused/unnecessary scaffolding\",\\n      \"oid\": \"73756b02ae0e0874935846d9d2a8d0944e1702bb\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-03-31T09:11:33Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:06Z\",\\n      \"messageBody\": \"Concern for discoverability with the sidebar defaulted to hidden means\\\\nthat it should default to visible. The animation can make styling the\\\\nrest of the app difficult. So this commit reduces/removes these\\\\ncomplexities by making the sidebar permanently visible.\\\\n\\\\n* Finally remove the bin/ directory\",\\n      \"messageHeadline\": \"Make the sidebar permanently visible.\",\\n      \"oid\": \"7f3152b27fe4191f3ef345c11e4ce94f8dbf1d1f\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-03-31T10:08:28Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:06Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"npm audit found a high severity vuln\",\\n      \"oid\": \"ad30c518d93116c6ee70e2b2bb6d56f9e886eeb4\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-03-31T15:44:54Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:06Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Properly seperate webpack dev and prod configurations\",\\n      \"oid\": \"0f83545daea668a00f9fdfef6349cb0138dc9298\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-04-02T10:23:59Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:07Z\",\\n      \"messageBody\": \"GServer.py::getNextCluster had not been updated to match the\\\\nchange in results returned by get_search_results(). This issue is\\\\nfixed along with having ViewerSidebar dispatch the Search \\'SELECT\\'\\\\naction. This action updates the search box ui.\",\\n      \"messageHeadline\": \"Fix bug moving between clusters using \\'next\\' and \\'previous\\' buttons\",\\n      \"oid\": \"55bc0628f1c9a7417ccb5f7afa40fadb71a7a1a5\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-04-12T11:26:09Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:07Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Make sure display is updated when switching loom or coordinates\",\\n      \"oid\": \"41d48a86c417de33a5d1ce46c5520bc539e44476\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-04-12T11:58:06Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:07Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Don\\'t show Cluster Marker table when active feature is: All Clusters\",\\n      \"oid\": \"57bf4eb9bfece2add9d06b124470d77a3fd6e60f\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-04-12T12:54:40Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:12:08Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Make sure the annotations page can be displayed\",\\n      \"oid\": \"dd2a97794b5ee6f68038ee04e17139387f80de55\"\\n    },\\n    {\\n      \"authoredDate\": \"2021-05-28T08:19:36Z\",\\n      \"authors\": [\\n        {\\n          \"email\": \"james.collier@vib.be\",\\n          \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n          \"login\": \"MaybeJustJames\",\\n          \"name\": \"James Collier\"\\n        }\\n      ],\\n      \"committedDate\": \"2021-05-28T08:19:36Z\",\\n      \"messageBody\": \"\",\\n      \"messageHeadline\": \"Update `dns-packet` dependency to fix an audit vuln\",\\n      \"oid\": \"3f7f5fddc4ee634c3aec57f5ce1410a733990517\"\\n    }\\n  ],\\n  \"createdAt\": \"2020-09-14T10:29:04Z\",\\n  \"deletions\": 13178,\\n  \"files\": [\\n    {\\n      \"path\": \".github/workflows/continuous-integration-client.yml\",\\n      \"additions\": 1,\\n      \"deletions\": 1\\n    },\\n    {\\n      \"path\": \"CONTRIBUTING.md\",\\n      \"additions\": 21,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"README.md\",\\n      \"additions\": 5,\\n      \"deletions\": 13\\n    },\\n    {\\n      \"path\": \"babel.config.js\",\\n      \"additions\": 15,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"bin/configure.js\",\\n      \"additions\": 0,\\n      \"deletions\": 6\\n    },\\n    {\\n      \"path\": \"bin/install.js\",\\n      \"additions\": 0,\\n      \"deletions\": 18\\n    },\\n    {\\n      \"path\": \"bin/launch.js\",\\n      \"additions\": 0,\\n      \"deletions\": 320\\n    },\\n    {\\n      \"path\": \"bin/utils.js\",\\n      \"additions\": 0,\\n      \"deletions\": 80\\n    },\\n    {\\n      \"path\": \"config/paths.js\",\\n      \"additions\": 9,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"config/webpack.common.js\",\\n      \"additions\": 120,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"config/webpack.dev.js\",\\n      \"additions\": 31,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"config/webpack.prod.js\",\\n      \"additions\": 24,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"index.js\",\\n      \"additions\": 0,\\n      \"deletions\": 540\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/bindserver/package-lock.json\",\\n      \"additions\": 831,\\n      \"deletions\": 9\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/modules/gserver/GServer.py\",\\n      \"additions\": 30,\\n      \"deletions\": 19\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/modules/gserver/s_pb2.py\",\\n      \"additions\": 305,\\n      \"deletions\": 178\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/modules/gserver/s_pb2.pyi\",\\n      \"additions\": 46,\\n      \"deletions\": 13\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/modules/pserver/PServer.py\",\\n      \"additions\": 1,\\n      \"deletions\": 3\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/utils/data.py\",\\n      \"additions\": 1,\\n      \"deletions\": 1\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/utils/labels.py\",\\n      \"additions\": 2,\\n      \"deletions\": 2\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/utils/loom.py\",\\n      \"additions\": 2,\\n      \"deletions\": 8\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/dataserver/utils/search.py\",\\n      \"additions\": 47,\\n      \"deletions\": 26\\n    },\\n    {\\n      \"path\": \"opt/scopeserver/result.py\",\\n      \"additions\": 0,\\n      \"deletions\": 2\\n    },\\n    {\\n      \"path\": \"package-lock.json\",\\n      \"additions\": 31303,\\n      \"deletions\": 8281\\n    },\\n    {\\n      \"path\": \"package.json\",\\n      \"additions\": 113,\\n      \"deletions\": 88\\n    },\\n    {\\n      \"path\": \"src/api/error.ts\",\\n      \"additions\": 7,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/api/features.ts\",\\n      \"additions\": 48,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/api/fetch.test.ts\",\\n      \"additions\": 76,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/api/fetch.ts\",\\n      \"additions\": 10,\\n      \"deletions\": 6\\n    },\\n    {\\n      \"path\": \"src/api/index.ts\",\\n      \"additions\": 2,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/App.jsx\",\\n      \"additions\": 153,\\n      \"deletions\": 354\\n    },\\n    {\\n      \"path\": \"src/components/AppContent.jsx\",\\n      \"additions\": 0,\\n      \"deletions\": 25\\n    },\\n    {\\n      \"path\": \"src/components/AppHeader.jsx\",\\n      \"additions\": 35,\\n      \"deletions\": 71\\n    },\\n    {\\n      \"path\": \"src/components/AppSidebar.jsx\",\\n      \"additions\": 44,\\n      \"deletions\": 93\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/GProfilerModal.tsx\",\\n      \"additions\": 27,\\n      \"deletions\": 11\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/TopGeneListsSelectionTable.tsx\",\\n      \"additions\": 4,\\n      \"deletions\": 6\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/link.test.ts\",\\n      \"additions\": 22,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/link.ts\",\\n      \"additions\": 24,\\n      \"deletions\": 13\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/model.ts\",\\n      \"additions\": 27,\\n      \"deletions\": 31\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/reducer.ts\",\\n      \"additions\": 3,\\n      \"deletions\": 1\\n    },\\n    {\\n      \"path\": \"src/components/GProfiler/sagas.ts\",\\n      \"additions\": 6,\\n      \"deletions\": 12\\n    },\\n    {\\n      \"path\": \"src/components/Main.tsx\",\\n      \"additions\": 104,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/FeatureSearch.tsx\",\\n      \"additions\": 46,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/FeatureSearchBox.css\",\\n      \"additions\": 12,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/FeatureSearchBox.test.tsx\",\\n      \"additions\": 66,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/FeatureSearchBox.tsx\",\\n      \"additions\": 192,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/Search.test.ts\",\\n      \"additions\": 224,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/actionTypes.ts\",\\n      \"additions\": 7,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/actions.ts\",\\n      \"additions\": 91,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/constants.ts\",\\n      \"additions\": 5,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/effects.test.ts\",\\n      \"additions\": 98,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/effects.ts\",\\n      \"additions\": 25,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/index.ts\",\\n      \"additions\": 15,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/model.ts\",\\n      \"additions\": 102,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/reducer.ts\",\\n      \"additions\": 69,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/Search/selectors.ts\",\\n      \"additions\": 46,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/common/API.jsx\",\\n      \"additions\": 186,\\n      \"deletions\": 168\\n    },\\n    {\\n      \"path\": \"src/components/common/Annotation.jsx\",\\n      \"additions\": 10,\\n      \"deletions\": 6\\n    },\\n    {\\n      \"path\": \"src/components/common/AnnotationDropContainer.jsx\",\\n      \"additions\": 3,\\n      \"deletions\": 3\\n    },\\n    {\\n      \"path\": \"src/components/common/ClusterOverlapsTable.tsx\",\\n      \"additions\": 2,\\n      \"deletions\": 2\\n    },\\n    {\\n      \"path\": \"src/components/common/ClusteringAddPopup.tsx\",\\n      \"additions\": 4,\\n      \"deletions\": 4\\n    },\\n    {\\n      \"path\": \"src/components/common/CollabAnnoGeneSearch.jsx\",\\n      \"additions\": 23,\\n      \"deletions\": 17\\n    },\\n    {\\n      \"path\": \"src/components/common/CollaborativeAnnotation.jsx\",\\n      \"additions\": 34,\\n      \"deletions\": 34\\n    },\\n    {\\n      \"path\": \"src/components/common/FeatureSearchBox.jsx\",\\n      \"additions\": 0,\\n      \"deletions\": 303\\n    },\\n    {\\n      \"path\": \"src/components/common/FeatureSearchInput.jsx\",\\n      \"additions\": 0,\\n      \"deletions\": 69\\n    },\\n    {\\n      \"path\": \"src/components/common/Histogram.jsx\",\\n      \"additions\": 26,\\n      \"deletions\": 30\\n    },\\n    {\\n      \"path\": \"src/components/common/Metadata.jsx\",\\n      \"additions\": 29,\\n      \"deletions\": 45\\n    },\\n    {\\n      \"path\": \"src/components/common/OLSAutocomplete.jsx\",\\n      \"additions\": 6,\\n      \"deletions\": 2\\n    },\\n    {\\n      \"path\": \"src/components/common/OptionsPopup.tsx\",\\n      \"additions\": 20,\\n      \"deletions\": 19\\n    },\\n    {\\n      \"path\": \"src/components/common/UploadModal.jsx\",\\n      \"additions\": 49,\\n      \"deletions\": 60\\n    },\\n    {\\n      \"path\": \"src/components/common/Uploader.jsx\",\\n      \"additions\": 7,\\n      \"deletions\": 4\\n    },\\n    {\\n      \"path\": \"src/components/common/Viewer.jsx\",\\n      \"additions\": 251,\\n      \"deletions\": 368\\n    },\\n    {\\n      \"path\": \"src/components/common/ViewerDropContainer.jsx\",\\n      \"additions\": 11,\\n      \"deletions\": 5\\n    },\\n    {\\n      \"path\": \"src/components/common/ViewerSidebar.css\",\\n      \"additions\": 9,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/common/ViewerSidebar.jsx\",\\n      \"additions\": 230,\\n      \"deletions\": 176\\n    },\\n    {\\n      \"path\": \"src/components/common/ViewerToolbar.jsx\",\\n      \"additions\": 38,\\n      \"deletions\": 36\\n    },\\n    {\\n      \"path\": \"src/components/constants.ts\",\\n      \"additions\": 10,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/pages/Annotations.jsx\",\\n      \"additions\": 6,\\n      \"deletions\": 6\\n    },\\n    {\\n      \"path\": \"src/components/pages/Compare.jsx\",\\n      \"additions\": 192,\\n      \"deletions\": 221\\n    },\\n    {\\n      \"path\": \"src/components/pages/Expression.jsx\",\\n      \"additions\": 0,\\n      \"deletions\": 102\\n    },\\n    {\\n      \"path\": \"src/components/pages/FullPageNotify.tsx\",\\n      \"additions\": 74,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/pages/Gene.jsx\",\\n      \"additions\": 23,\\n      \"deletions\": 60\\n    },\\n    {\\n      \"path\": \"src/components/pages/Geneset.jsx\",\\n      \"additions\": 0,\\n      \"deletions\": 420\\n    },\\n    {\\n      \"path\": \"src/components/pages/Regulon.jsx\",\\n      \"additions\": 76,\\n      \"deletions\": 85\\n    },\\n    {\\n      \"path\": \"src/components/pages/Welcome.jsx\",\\n      \"additions\": 352,\\n      \"deletions\": 336\\n    },\\n    {\\n      \"path\": \"src/components/pages/index.ts\",\\n      \"additions\": 21,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/pages/pages.css\",\\n      \"additions\": 19,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/components/utils.ts\",\\n      \"additions\": 6,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/css/header.css\",\\n      \"additions\": 1,\\n      \"deletions\": 5\\n    },\\n    {\\n      \"path\": \"src/css/sidebar.css\",\\n      \"additions\": 2,\\n      \"deletions\": 34\\n    },\\n    {\\n      \"path\": \"src/css/styles.css\",\\n      \"additions\": 17,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/css/viewer.css\",\\n      \"additions\": 15,\\n      \"deletions\": 144\\n    },\\n    {\\n      \"path\": \"src/js/http.js\",\\n      \"additions\": 1,\\n      \"deletions\": 2\\n    },\\n    {\\n      \"path\": \"src/main.tsx\",\\n      \"additions\": 5,\\n      \"deletions\": 4\\n    },\\n    {\\n      \"path\": \"src/proto/s.proto\",\\n      \"additions\": 10,\\n      \"deletions\": 3\\n    },\\n    {\\n      \"path\": \"src/redux/actionTypes.ts\",\\n      \"additions\": 6,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/redux/actions.ts\",\\n      \"additions\": 19,\\n      \"deletions\": 6\\n    },\\n    {\\n      \"path\": \"src/redux/reducers/index.ts\",\\n      \"additions\": 4,\\n      \"deletions\": 0\\n    },\\n    {\\n      \"path\": \"src/redux/reducers/main.ts\",\\n      \"additions\": 21,\\n      \"deletions\": 16\\n    },\\n    {\\n      \"path\": \"src/redux/sagas/index.ts\",\\n      \"additions\": 2,\\n      \"deletions\": 1\\n    }\\n  ],\\n  \"headRefName\": \"cleanup/373-frontend-stage3\",\\n  \"headRefOid\": \"3f7f5fddc4ee634c3aec57f5ce1410a733990517\",\\n  \"headRepository\": {\\n    \"id\": \"MDEwOlJlcG9zaXRvcnkxMjEzNjYxMDI=\",\\n    \"name\": \"SCope\"\\n  },\\n  \"headRepositoryOwner\": {\\n    \"id\": \"MDEyOk9yZ2FuaXphdGlvbjM5NDA4MTc=\",\\n    \"login\": \"aertslab\"\\n  },\\n  \"id\": \"MDExOlB1bGxSZXF1ZXN0NDg2NTA4NTM3\",\\n  \"isCrossRepository\": false,\\n  \"isDraft\": false,\\n  \"labels\": [],\\n  \"latestReviews\": [\\n    {\\n      \"id\": \"\",\\n      \"author\": {\\n        \"login\": \"KrisDavie\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-05-28T07:37:17Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"APPROVED\",\\n      \"commit\": {\\n        \"oid\": \"\"\\n      }\\n    },\\n    {\\n      \"id\": \"\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-05-28T07:24:50Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"APPROVED\",\\n      \"commit\": {\\n        \"oid\": \"\"\\n      }\\n    }\\n  ],\\n  \"maintainerCanModify\": false,\\n  \"mergeCommit\": {\\n    \"oid\": \"8413fa7107ab109be119784b4bfd393da2788e91\"\\n  },\\n  \"mergeStateStatus\": \"UNKNOWN\",\\n  \"mergeable\": \"UNKNOWN\",\\n  \"mergedAt\": \"2021-05-28T08:23:55Z\",\\n  \"mergedBy\": {\\n    \"id\": \"MDQ6VXNlcjI2NDQ0MzEy\",\\n    \"is_bot\": false,\\n    \"login\": \"MaybeJustJames\",\\n    \"name\": \"James Collier\"\\n  },\\n  \"milestone\": null,\\n  \"number\": 381,\\n  \"potentialMergeCommit\": null,\\n  \"projectCards\": [],\\n  \"projectItems\": [],\\n  \"reactionGroups\": [],\\n  \"reviewDecision\": \"APPROVED\",\\n  \"reviewRequests\": [],\\n  \"reviews\": [\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjQ3MzEz\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"Minor things that I picked up.\\\\r\\\\nOtherwise nice stuff in there: cleanup & testing :+1: \\\\r\\\\n\\\\r\\\\nExperienced a problem when trying to run SCope:\\\\r\\\\n```\\\\r\\\\n> SCope@1.8.2 dev ~/SCope/master\\\\r\\\\n> cross-env NODE_ENV=development NODE_TYPE=local webpack-dev-server --hot\\\\r\\\\n\\\\r\\\\n~/SCope/master/node_modules/terser-webpack-plugin/node_modules/p-limit/index.js:30\\\\r\\\\n\\\\t\\\\t} catch {}\\\\r\\\\n\\\\t\\\\t        ^\\\\r\\\\n\\\\r\\\\nSyntaxError: Unexpected token {\\\\r\\\\n    at new Script (vm.js:51:7)\\\\r\\\\n    at createScript (vm.js:136:10)\\\\r\\\\n    at Object.runInThisContext (vm.js:197:10)\\\\r\\\\n    at Module._compile (internal/modules/cjs/loader.js:618:28)\\\\r\\\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:665:10)\\\\r\\\\n    at Module.load (internal/modules/cjs/loader.js:566:32)\\\\r\\\\n    at tryModuleLoad (internal/modules/cjs/loader.js:506:12)\\\\r\\\\n    at Function.Module._load (internal/modules/cjs/loader.js:498:3)\\\\r\\\\n    at Module.require (internal/modules/cjs/loader.js:598:17)\\\\r\\\\n    at require (internal/modules/cjs/helpers.js:11:18)\\\\r\\\\nnpm ERR! code ELIFECYCLE\\\\r\\\\nnpm ERR! errno 1\\\\r\\\\nnpm ERR! SCope@1.8.2 dev: `cross-env NODE_ENV=development NODE_TYPE=local webpack-dev-server --hot`\\\\r\\\\nnpm ERR! Exit status 1\\\\r\\\\nnpm ERR! \\\\r\\\\nnpm ERR! Failed at the SCope@1.8.2 dev script.\\\\r\\\\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\\\\r\\\\n\\\\r\\\\nnpm ERR! A complete log of this run can be found in:\\\\r\\\\nnpm ERR!    ~/.npm/_logs/2020-09-18T12_47_32_043Z-debug.lo\\\\r\\\\n```\\\\r\\\\neven after removing `node_modules` and `package-lock.json`\",\\n      \"submittedAt\": \"2020-09-18T12:50:10Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"CHANGES_REQUESTED\",\\n      \"commit\": {\\n        \"oid\": \"c226293afce8c9e0ed2aa18da382a83f55c0a69a\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTY2NTQ2\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-18T15:25:32Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc0f1dfed570f9dbf38d813c611567da2cdcf2e6\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTY2Njg5\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-18T15:25:43Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc0f1dfed570f9dbf38d813c611567da2cdcf2e6\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTgyNzQw\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-18T15:46:03Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTg1NDEz\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-18T15:49:29Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDczMDU0\",\\n      \"author\": {\\n        \"login\": \"KrisDavie\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"Really nice changes, but still some work to get it functional and user friendly.\\\\r\\\\n\\\\r\\\\nI couldn\\'t exhaustively test the regulon/compare pages or the clusters etc. with the broken bits, will test them once they\\'re functional.\",\\n      \"submittedAt\": \"2020-09-24T13:34:26Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"CHANGES_REQUESTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjU3Nzg4\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-24T14:51:39Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjYwNDI0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-24T14:54:12Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Njc2NTAx\",\\n      \"author\": {\\n        \"login\": \"KrisDavie\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-24T15:09:53Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Njg3NTI1\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-09-24T15:21:17Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fc668cae15fca4e75b24ff4fcf12c23d2cf85224\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzc2NDU3\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T13:58:57Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"1445bd3ceda18db3b2630b989a37adfffbdd5078\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzc2NjEz\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T13:59:06Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"1445bd3ceda18db3b2630b989a37adfffbdd5078\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDMyNzk5\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T14:52:59Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"63b0d3697d50ac676fce659e6ff73626bd04735d\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDMzODgx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T14:54:00Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"63b0d3697d50ac676fce659e6ff73626bd04735d\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDM0MDYy\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T14:54:11Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"63b0d3697d50ac676fce659e6ff73626bd04735d\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDM0MTk5\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T14:54:19Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"63b0d3697d50ac676fce659e6ff73626bd04735d\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDQyNzE4\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T15:02:39Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"9bb527e2ef9ae2601d09d77d6cffc617f462d80b\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNDQ2NTA1\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-01T15:06:22Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"9bb527e2ef9ae2601d09d77d6cffc617f462d80b\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTk0ODQ5\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T09:39:13Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"3ffa92a17a45aa1ea6d2f0af1bb274962745cb29\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTk1NjAx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T09:40:30Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"3ffa92a17a45aa1ea6d2f0af1bb274962745cb29\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMDMwOTA1\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T10:40:20Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"7f298d5cccb27d00aea4ed87d9a4b35077a0b16a\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMDYzNDAx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T11:41:29Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"93d5ef79cc3e068b98cb9d7b7dbf3ce24306c4dc\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMDY5MzMx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T11:52:09Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"9084c70cec3b6e50557ff20e2e905eaa5c9289e3\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMDcxNDI0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T11:55:54Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"9084c70cec3b6e50557ff20e2e905eaa5c9289e3\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTYzMTIz\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-02T14:02:30Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"9084c70cec3b6e50557ff20e2e905eaa5c9289e3\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NTM0MzU1\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-23T10:20:00Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"463e6788a8ab6565ccad3259a384395ef498f744\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NTM1MjEx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-10-23T10:21:18Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"463e6788a8ab6565ccad3259a384395ef498f744\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTg3MDcz\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T09:37:08Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"5d06844a35af958a0a87d87b48b0239498ea075f\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTk0NDE0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T09:46:14Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"93b7472d4a1934153360c415eb9738d4316b6ef6\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjA5OTUw\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T10:04:20Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fb249598d3c99a9b8122f4a2e4cccf13a4db5a9d\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjEwMjI1\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T10:04:43Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"fb249598d3c99a9b8122f4a2e4cccf13a4db5a9d\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjM1MzEx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T10:36:09Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"c5513f98eb43f4695c591ecfd7a0d3363c95f015\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjU3NzIz\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T11:04:53Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"c5513f98eb43f4695c591ecfd7a0d3363c95f015\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjYzMzUx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2020-11-04T11:12:51Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"c5513f98eb43f4695c591ecfd7a0d3363c95f015\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjA1MDE0\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"In general, nice cleanup and refactoring! I noticed a few bugs across the app tough:\\\\r\\\\n\\\\r\\\\n- [x] Running the app using Node `v10.22.1` fails with a huge stack trace. I was able to run it using `v11.15.1`. So I suggest we use `.nvmrc` file to properly state which Node version this app requires.\\\\r\\\\n- [x] The markers table should not be displayed (actually not exist) when querying for `All Clusters` in the `Gene` page.\\\\r\\\\n![image](https://user-images.githubusercontent.com/16015936/103792400-e205e480-5043-11eb-9586-714691ff627f.png)\\\\r\\\\n- [x] When switching from loom, the viewer is not reloaded with the embedding\\\\r\\\\n- [x] After having switched from loom, colors are not properly assigned to dots anymore:\\\\r\\\\n  - To reproduce:\\\\r\\\\n    1. Load one loom, search for `All Clusters`\\\\r\\\\n    2. Load other loom, clear search box and search for `All Clusters`\\\\r\\\\n- [x] When switching from embeddings/coordinates, the scatterplot is not updated.\\\\r\\\\n- [x] All annotations page is empty/blank while loom contains community annotations\\\\r\\\\n- [x] Some viewers are missing in the compare tab. When switching to the `Compare` tab only 2 are shown.\\\\r\\\\n- [ ] Compare tab break when performing a DnD of one of the annotation onto a viewer.\\\\r\\\\n\\\\r\\\\n\",\\n      \"submittedAt\": \"2021-01-06T16:33:16Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"CHANGES_REQUESTED\",\\n      \"commit\": {\\n        \"oid\": \"e9e249ca22eda56866b01b030c3376c570bc844b\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MTY1MTMy\",\\n      \"author\": {\\n        \"login\": \"KrisDavie\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"Overall nice changes and restructuring. As discussed, the remaining issues can be dealt with in `develop` in order to get this merged after the main bits above are resolved.\",\\n      \"submittedAt\": \"2021-01-14T16:21:01Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"CHANGES_REQUESTED\",\\n      \"commit\": {\\n        \"oid\": \"2c33076639c1afa900181a2cbfa92990f9f3c267\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg0MTU1MDE0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-02-05T09:21:20Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"2c33076639c1afa900181a2cbfa92990f9f3c267\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MDcyMDc1\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:18:36Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"1f93c7b2253956cbe49a8884b19653a290d715d4\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MDg4NDc5\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:36:26Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"e8c5c53abf82dfbc81001c6e2cf15b794aa8b8b0\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MDkxNDEz\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:39:39Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"e8c5c53abf82dfbc81001c6e2cf15b794aa8b8b0\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MDkxNzA1\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:39:57Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"e8c5c53abf82dfbc81001c6e2cf15b794aa8b8b0\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MDk3OTI0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:46:34Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"e8c5c53abf82dfbc81001c6e2cf15b794aa8b8b0\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MTAyODQ0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:51:50Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"e8c5c53abf82dfbc81001c6e2cf15b794aa8b8b0\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MTA1Njkx\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:55:01Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"e8c5c53abf82dfbc81001c6e2cf15b794aa8b8b0\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MTA3NzE0\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T09:57:18Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"b44b3e86f8fb6fa95ae2db7dd55271075e4a1dfc\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MTEzMjA2\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T10:03:30Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"b44b3e86f8fb6fa95ae2db7dd55271075e4a1dfc\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI1MTE1MDA2\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-03-31T10:05:36Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"b44b3e86f8fb6fa95ae2db7dd55271075e4a1dfc\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2OTE0MjAy\",\\n      \"author\": {\\n        \"login\": \"MaybeJustJames\"\\n      },\\n      \"authorAssociation\": \"COLLABORATOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-04-02T10:33:11Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"7afe7e41c93bedaa8b81949ff75341e14fa641da\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjI2OTcxNDkw\",\\n      \"author\": {\\n        \"login\": \"KrisDavie\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-04-02T13:05:21Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"COMMENTED\",\\n      \"commit\": {\\n        \"oid\": \"7afe7e41c93bedaa8b81949ff75341e14fa641da\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjY4NzEyOTI3\",\\n      \"author\": {\\n        \"login\": \"dweemx\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-05-28T07:24:50Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"APPROVED\",\\n      \"commit\": {\\n        \"oid\": \"aad17cb2ce846e49895c1655d36d9af1d5c9c254\"\\n      }\\n    },\\n    {\\n      \"id\": \"MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjcxMDE1NjUw\",\\n      \"author\": {\\n        \"login\": \"KrisDavie\"\\n      },\\n      \"authorAssociation\": \"CONTRIBUTOR\",\\n      \"body\": \"\",\\n      \"submittedAt\": \"2021-05-28T07:37:17Z\",\\n      \"includesCreatedEdit\": false,\\n      \"reactionGroups\": [],\\n      \"state\": \"APPROVED\",\\n      \"commit\": {\\n        \"oid\": \"aad17cb2ce846e49895c1655d36d9af1d5c9c254\"\\n      }\\n    }\\n  ],\\n  \"state\": \"MERGED\",\\n  \"statusCheckRollup\": [\\n    {\\n      \"__typename\": \"CheckRun\",\\n      \"completedAt\": \"2021-05-28T08:22:21Z\",\\n      \"conclusion\": \"SUCCESS\",\\n      \"detailsUrl\": \"https://github.com/aertslab/SCope/actions/runs/884919804/jobs/887085154\",\\n      \"name\": \"client-quality-checks\",\\n      \"startedAt\": \"2021-05-28T08:21:26Z\",\\n      \"status\": \"COMPLETED\",\\n      \"workflowName\": \"Client CI\"\\n    },\\n    {\\n      \"__typename\": \"CheckRun\",\\n      \"completedAt\": \"2021-05-28T08:23:06Z\",\\n      \"conclusion\": \"SUCCESS\",\\n      \"detailsUrl\": \"https://github.com/aertslab/SCope/actions/runs/884919803/jobs/887085234\",\\n      \"name\": \"quality-checks (3.7)\",\\n      \"startedAt\": \"2021-05-28T08:20:22Z\",\\n      \"status\": \"COMPLETED\",\\n      \"workflowName\": \"Server CI\"\\n    },\\n    {\\n      \"__typename\": \"CheckRun\",\\n      \"completedAt\": \"2021-05-28T08:22:52Z\",\\n      \"conclusion\": \"SUCCESS\",\\n      \"detailsUrl\": \"https://github.com/aertslab/SCope/actions/runs/884919803/jobs/887085272\",\\n      \"name\": \"quality-checks (3.8)\",\\n      \"startedAt\": \"2021-05-28T08:20:22Z\",\\n      \"status\": \"COMPLETED\",\\n      \"workflowName\": \"Server CI\"\\n    }\\n  ],\\n  \"title\": \"Initial front-end restructure and code re-design\",\\n  \"updatedAt\": \"2021-06-24T14:41:45Z\",\\n  \"url\": \"https://github.com/aertslab/SCope/pull/381\"\\n}',\n)\n"]}
{"filename": "tests/report.calculation.test.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { IPullRequest } from '../src/Interfaces/PullRequestTypes'\nimport { PullRequest } from '../src/PullRequest.Definitions'\nimport {\n  GenerateEventTimeline,\n  GetLeadTimeForPullRequest,\n  GetNumberOfApprovedReviews,\n  GetNumberOfCommentOnlyReviews,\n  GetTotalNumberOfParticipants,", "  GetNumberOfCommentOnlyReviews,\n  GetTotalNumberOfParticipants,\n  GetNumberOfRequestedChangeReviews,\n  GetTimeSpendInPrForLastStatusCheckRun,\n  GetTimeSpendOnBranchBeforePRCreated,\n  GetTimeSpendOnBranchBeforePRMerged,\n  GetTimeToMergeAfterLastReview,\n  GetTotalRuntimeForLastStatusCheckRun,\n} from '../src/Report.Calculation'\nimport { DataFromBigPullRequest } from './pr_sample_data'", "} from '../src/Report.Calculation'\nimport { DataFromBigPullRequest } from './pr_sample_data'\n\nlet PullRequestJsonModel: unknown\nlet PullRequestStatModel: IPullRequest\n\nconst CreatePrCopy = (pr: IPullRequest): IPullRequest => {\n  const prAsJson = JSON.stringify(pr)\n  return JSON.parse(prAsJson) as IPullRequest\n}", "  return JSON.parse(prAsJson) as IPullRequest\n}\n\nconst CreatePrCopyWithoutStatusChecks = (pr: IPullRequest): IPullRequest => {\n  const prCopy = CreatePrCopy(pr)\n  prCopy.statusChecks = []\n  return prCopy\n}\n\nbeforeAll(() => {", "\nbeforeAll(() => {\n  PullRequestJsonModel = DataFromBigPullRequest\n  PullRequestStatModel = PullRequest.CreateFromJson(PullRequestJsonModel)\n})\n\ntest('Check calculation of Pull Request lead time', () => {\n  const leadTime = GetLeadTimeForPullRequest(PullRequestStatModel)\n  expect(leadTime).toBe(22110891000)\n})", "  expect(leadTime).toBe(22110891000)\n})\n\ntest(\"Check error hanlding of 'Check calculation of Pull Request lead time'\", () => {\n  const prCopy = CreatePrCopy(PullRequestStatModel)\n  prCopy.createdAt = ''\n  const leadTime = GetLeadTimeForPullRequest(prCopy)\n  expect(leadTime).toBe(0)\n})\n", "})\n\ntest('Check event timeline generation', () => {\n  const eventTimeline = GenerateEventTimeline(PullRequestStatModel)\n  expect(eventTimeline.length).toBeGreaterThan(0)\n})\n\ntest('Check calculation of \"Time spend on branch before PR is created\"', () => {\n  const timeSpend = GetTimeSpendOnBranchBeforePRCreated(PullRequestStatModel)\n  expect(timeSpend).toBeGreaterThan(0)", "  const timeSpend = GetTimeSpendOnBranchBeforePRCreated(PullRequestStatModel)\n  expect(timeSpend).toBeGreaterThan(0)\n})\n\ntest('Check error handling for \"Time spend on branch before PR is created\"', () => {\n  const prCopy = CreatePrCopy(PullRequestStatModel)\n  prCopy.createdAt = ''\n  const timeSpend = GetTimeSpendOnBranchBeforePRCreated(prCopy)\n  expect(timeSpend).toBe(0)\n})", "  expect(timeSpend).toBe(0)\n})\n\ntest('Check calculation error handling of \"Time spend on branch before PR is merged\"', () => {\n  const pr = CreatePrCopy(PullRequestStatModel)\n  pr.mergedAt = ''\n  pr.closedAt = ''\n  const timeSpend = GetTimeSpendOnBranchBeforePRMerged(pr)\n  expect(timeSpend).toBe(-1)\n})", "  expect(timeSpend).toBe(-1)\n})\n\ntest('Check calculation of \"Time to merge after the last review\"', () => {\n  const timeSpend = GetTimeToMergeAfterLastReview(PullRequestStatModel)\n  expect(timeSpend).toBeGreaterThan(0)\n})\n\ntest('Check error handling of \"Time to merge after the last review\"', () => {\n  let pr = CreatePrCopy(PullRequestStatModel)", "test('Check error handling of \"Time to merge after the last review\"', () => {\n  let pr = CreatePrCopy(PullRequestStatModel)\n  pr.mergedAt = ''\n  pr.closedAt = ''\n  expect(GetTimeToMergeAfterLastReview(pr)).toBe(-1)\n  pr = CreatePrCopy(PullRequestStatModel)\n  pr.reviews = []\n  expect(GetTimeToMergeAfterLastReview(pr)).toBe(-1)\n})\n", "})\n\ntest('Check calculation of \"Total runtime for last status check run\"', () => {\n  const timeSpend = GetTotalRuntimeForLastStatusCheckRun(PullRequestStatModel)\n  expect(timeSpend).toBeGreaterThan(0)\n})\n\ntest('Check empty list handling of \"Total runtime for last status check run\"', () => {\n  const pr = CreatePrCopyWithoutStatusChecks(PullRequestStatModel)\n  expect(GetTotalRuntimeForLastStatusCheckRun(pr)).toBe(0)", "  const pr = CreatePrCopyWithoutStatusChecks(PullRequestStatModel)\n  expect(GetTotalRuntimeForLastStatusCheckRun(pr)).toBe(0)\n})\n\ntest('Check calculation of \"Total time spend in last status check run\"', () => {\n  const timeSpend = GetTimeSpendInPrForLastStatusCheckRun(PullRequestStatModel)\n  expect(timeSpend).toBeGreaterThan(0)\n})\n\ntest('Check empty list handling of  \"Total time spend in last status check run\"', () => {", "\ntest('Check empty list handling of  \"Total time spend in last status check run\"', () => {\n  const pr = CreatePrCopyWithoutStatusChecks(PullRequestStatModel)\n  expect(GetTimeSpendInPrForLastStatusCheckRun(pr)).toBe(0)\n})\n\ntest('Check calculation of \"Number of reviews that contains a comment to resolve\"', () => {\n  const numberOfReviews = GetNumberOfCommentOnlyReviews(PullRequestStatModel)\n  expect(numberOfReviews).toBeGreaterThan(0)\n})", "  expect(numberOfReviews).toBeGreaterThan(0)\n})\n\ntest('Check calculation of \"Number of reviews that contains a comment to resolve (with no comments)\"', () => {\n  const pr = CreatePrCopy(PullRequestStatModel)\n  // check the pr.reviews for all 'COMMENTED' reviews and remove them\n  pr.reviews = pr.reviews.filter((review) => review.state !== 'COMMENTED')\n  const numberOfReviews = GetNumberOfCommentOnlyReviews(pr)\n  expect(numberOfReviews).toBe(0)\n})", "  expect(numberOfReviews).toBe(0)\n})\n\ntest('of reviews that contains a comment to resolve (with no comments)\"', () => {\n  const pr = CreatePrCopy(PullRequestStatModel)\n  // check the pr.reviews for all 'COMMENTED' reviews and remove them\n  pr.reviews = []\n  const numberOfReviews = GetNumberOfCommentOnlyReviews(pr)\n  expect(numberOfReviews).toBe(0)\n})", "  expect(numberOfReviews).toBe(0)\n})\n\ntest('Check calculation of \"Number of reviews that requested a change from the author\"', () => {\n  const numberOfReviews = GetNumberOfRequestedChangeReviews(PullRequestStatModel)\n  expect(numberOfReviews).toBeGreaterThan(0)\n})\n\ntest('Check calculation of \"Number of reviews that requested a change from the author (with no reviews that requires a change)\"', () => {\n  const pr = CreatePrCopy(PullRequestStatModel)", "test('Check calculation of \"Number of reviews that requested a change from the author (with no reviews that requires a change)\"', () => {\n  const pr = CreatePrCopy(PullRequestStatModel)\n  // check the pr.reviews for all 'CHANGES_REQUESTED' reviews and remove them\n  pr.reviews = pr.reviews.filter((review) => review.state !== 'CHANGES_REQUESTED')\n  const numberOfReviews = GetNumberOfRequestedChangeReviews(pr)\n  expect(numberOfReviews).toBe(0)\n})\n\ntest('Check calculation of \"Number of reviews that approved the Pull Request\"', () => {\n  const numberOfReviews = GetNumberOfApprovedReviews(PullRequestStatModel)", "test('Check calculation of \"Number of reviews that approved the Pull Request\"', () => {\n  const numberOfReviews = GetNumberOfApprovedReviews(PullRequestStatModel)\n  expect(numberOfReviews).toBeGreaterThan(0)\n})\n\ntest('Check calculation of \"Number of reviews that requested a change from the author (with no reviews that approves)\"', () => {\n  const pr = CreatePrCopy(PullRequestStatModel)\n  // check the pr.reviews for all 'APPROVED' reviews and remove them\n  pr.reviews = pr.reviews.filter((review) => review.state !== 'APPROVED')\n  const numberOfReviews = GetNumberOfApprovedReviews(pr)", "  pr.reviews = pr.reviews.filter((review) => review.state !== 'APPROVED')\n  const numberOfReviews = GetNumberOfApprovedReviews(pr)\n  expect(numberOfReviews).toBe(0)\n})\n\ntest('Get the total number of participants of a Pull Request', () => {\n  const numberOfParticipants = GetTotalNumberOfParticipants(PullRequestStatModel)\n  expect(numberOfParticipants).toBeGreaterThan(0)\n})\n", "})\n"]}
{"filename": "src/Report.Generation.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { IPullRequest } from './Interfaces/PullRequestTypes'\nimport { IReport, IReportConfigurationEntry } from './Interfaces/ReportTypes'\nimport { tsMarkdown, table, TableEntry, H1Entry, H3Entry, MarkdownEntry } from 'ts-markdown'\nimport { ConfigurationCategory, ConfigurationCategoryTitleMap } from './Report.Definitions'\n\nexport class ReportGenerator {\n  DescriptionHeaderLabel = 'Description'\n  ValueHeaderLabel = 'Value'\n\n  public Generate(pr: IPullRequest, report: IReport): string {\n    const header = this.GenerateHeader(pr, report)\n    const table = this.GenerateMeasureTable(pr, report)\n    const reportElements = [header, ...table]\n    return tsMarkdown(reportElements)\n  }\n\n  public GenerateHeader(pr: IPullRequest, report: IReport): H1Entry {\n    const title = { h1: `${report.Description} (#${pr.id})` }\n    return title\n  }\n\n  public GetMeasurementEntries(entries: IReportConfigurationEntry[]): IReportConfigurationEntry[] {", "    if (entries !== undefined && entries !== null && entries.length > 0) {\n      return entries.filter((entry) => ConfigurationCategory[entry.Info.ConfigurationCategory].endsWith('Measures'))\n    }\n\n    return []\n  }\n\n  public GenerateMeasureTable(pr: IPullRequest, report: IReport): MarkdownEntry[] {\n    const tables: MarkdownEntry[] = []\n    const entries = this.GetMeasurementEntries(report.Entries)\n    const categories = new Set(entries.map((entry) => entry.Info.ConfigurationCategory))\n    categories.forEach((category) => {\n      tables.push(this.GenerateCategoryTitle(category))\n      tables.push(this.GenerateCategoryTable(pr, report, category))\n    })\n\n    return tables\n  }\n\n  private GenerateCategoryTitle(measureCategory: ConfigurationCategory): H3Entry {\n    const title = { h3: `${ConfigurationCategoryTitleMap.get(measureCategory) || 'No category'}` }\n    return title\n  }\n\n  private GenerateCategoryTable(pr: IPullRequest, report: IReport, measureCategory: ConfigurationCategory): TableEntry {\n    const entries = this.GetMeasurementEntries(report.Entries)\n    const categoryEntries = entries.filter((entry) => entry.Info.ConfigurationCategory === measureCategory)\n    categoryEntries.forEach((entry) => {\n      entry.Info.Value = entry.PullRequestCallback(pr)\n    })\n\n    const rows = categoryEntries.map((entry) => ({\n      Description: entry.Info.Description,\n      Value: entry.Info.Value,\n    }))\n\n    return table({\n      columns: [{ name: this.DescriptionHeaderLabel }, { name: this.ValueHeaderLabel }],\n      rows: rows,\n    })\n  }\n}\n"]}
{"filename": "src/run.ts", "chunked_list": ["import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport { AddCommentToPR, GetPullRequestData } from './GitHubCliHelper'\nimport { ReportGenerator } from './Report.Generation'\nimport { Report, ReportConfigurationEntry } from './Report.Definitions'\nimport { GetActiveMeasures, ReportConfigurationTable, UpdateConfigValues as UpdateConfig } from './Report.Measures'\nimport { PullRequest } from './PullRequest.Definitions'\nimport * as fs from 'fs'\nimport { ConfigurationInputs } from './action.config.type'\nimport { IPullRequest } from './Interfaces/PullRequestTypes'", "import { ConfigurationInputs } from './action.config.type'\nimport { IPullRequest } from './Interfaces/PullRequestTypes'\nimport { IReport } from './Interfaces/ReportTypes'\n\nexport const SanitizeMarkdownComment = (comment: string): string => {\n  return comment.replaceAll(/<!--/g, '&lt;!--').replaceAll(/-->/g, '--&gt;')\n}\n\nconst CreatePRCommentFile = (raw_json_data: string, commentText: string, include_raw_data: boolean): string => {\n  // generate random file name", "const CreatePRCommentFile = (raw_json_data: string, commentText: string, include_raw_data: boolean): string => {\n  // generate random file name\n  const fileName = Math.random().toString(36).substring(7) + '.md'\n  let jsonString = ''\n\n  if (include_raw_data) {\n    jsonString = raw_json_data\n  }\n\n  // write report string to file\n  fs.writeFileSync(fileName, `<!-- ${jsonString} -->\\n${commentText}`)\n\n  return `${process.env.GITHUB_WORKSPACE || './'}/${fileName}`\n}\n\nconst GenerateReport = (\n  activeConfigValues: ReportConfigurationEntry[],\n  pullRequestDataModel: IPullRequest,\n): IReport => {\n  const report = new Report()\n  report.Entries = activeConfigValues\n  report.Description = 'Test report'\n  report.Id = pullRequestDataModel.id.toString()\n  return report\n}\n\nconst IsConfigValueYes = (configValue: string): boolean => {\n  return configValue.trim().toLowerCase() === 'yes'\n}\n\nexport const run = async (inputsFromWorkflow: ConfigurationInputs): Promise<number> => {\n  // take care that action is running only in PR context", "  if (process.env.GITHUB_EVENT_NAME !== 'pull_request') {\n    core.setFailed('Action is running outside of PR context')\n    return 0\n  }\n\n  UpdateConfig(inputsFromWorkflow, ReportConfigurationTable)\n  const activeConfigValues = GetActiveMeasures(ReportConfigurationTable)\n\n  // get PR data from github cli\n  const cliPullRequestData = await GetPullRequestData(github.context.issue.number)\n  const cliPullRequestDataAsString = SanitizeMarkdownComment(JSON.stringify(cliPullRequestData))\n\n  // transform PR data to a typed model\n  const pullRequestDataModel = PullRequest.CreateFromJson(cliPullRequestData)\n  // generate the report of the typed model\n  const generator = new ReportGenerator()\n  const report = GenerateReport(activeConfigValues, pullRequestDataModel)\n  // create report\n  report.Description = inputsFromWorkflow.ReportTitle as string\n  const reportAsString = generator.Generate(pullRequestDataModel, report)\n\n  const commentPath = CreatePRCommentFile(\n    cliPullRequestDataAsString,\n    reportAsString,\n    IsConfigValueYes(inputsFromWorkflow.IncludeRawDataAsMarkdownComment as string),\n  )", "  if (IsConfigValueYes(inputsFromWorkflow.AddPrReportAsComment as string)) {\n    await AddCommentToPR(commentPath, pullRequestDataModel.id)\n  }\n\n  const jsonPath = commentPath.replace(/\\.md$/, '.json')\n  fs.writeFileSync(jsonPath, cliPullRequestDataAsString)\n  core.setOutput('json_report_path', jsonPath)\n\n  return 0\n}\n"]}
{"filename": "src/main.ts", "chunked_list": ["import * as core from '@actions/core'\nimport { run } from './run'\nimport { config } from './action.config.args'\n\nconst main = async (): Promise<void> => {\n  await run(config)\n}\n\nmain().catch((e) => core.setFailed(e instanceof Error ? e : String(e)))\n", "main().catch((e) => core.setFailed(e instanceof Error ? e : String(e)))\n"]}
{"filename": "src/Report.Definitions.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { IReport, IReportConfigurationEntry, IReportConfigInfo, PullRequestCallback } from './Interfaces/ReportTypes'\n\nexport enum ConfigurationCategory {\n  None,\n  StaticMeasures,\n  TimeRelatedMeasures,\n  StatusCheckRelatedMeasures,\n  ReportGeneratorValue,\n}\n\nexport const ConfigurationCategoryTitleMap = new Map<ConfigurationCategory, string>([\n  [ConfigurationCategory.None, 'None'],\n  [ConfigurationCategory.StaticMeasures, 'Static measures'],\n  [ConfigurationCategory.TimeRelatedMeasures, 'Time related measures'],\n  [ConfigurationCategory.StatusCheckRelatedMeasures, 'Status check related measures'],\n  [ConfigurationCategory.ReportGeneratorValue, 'Report generator related predefined strings'],\n])\n", "export class ConfigurationInfo implements IReportConfigInfo {\n  public Description\n  public PresentationValue\n  public Value\n  public ConfigurationName\n  public ConfigValue\n  public ConfigurationCategory\n\n  constructor(\n    label: string,\n    presentationValue: string | number,\n    value: string | number,\n    configName: string,\n    defaultConfigValue: string | number,\n    configurationCategory: ConfigurationCategory,\n  ) {\n    this.Description = label\n    this.PresentationValue = presentationValue\n    this.Value = value\n    this.ConfigurationName = configName\n    this.ConfigValue = defaultConfigValue\n    this.ConfigurationCategory = configurationCategory\n  }\n}\n", "export class ReportConfigurationEntry implements IReportConfigurationEntry {\n  public Id\n  public Info\n  public PullRequestCallback: PullRequestCallback\n  constructor(id = '', info: IReportConfigInfo, measureCallback: PullRequestCallback = () => '') {\n    this.Id = id\n    this.Info = info\n    this.PullRequestCallback = measureCallback\n  }\n}\n", "export class Report implements IReport {\n  public Id = ''\n  public Description = ''\n  public Entries: ReportConfigurationEntry[] = []\n}\n"]}
{"filename": "src/action.config.args.ts", "chunked_list": ["//GENERATED FILE FROM report.config.tests.ts - DO NOT EDIT!!!\n\nimport * as core from '@actions/core'\n\nexport const config = {\n  IncludeRawDataAsMarkdownComment: core.getInput('IncludeRawDataAsMarkdownComment', { required: false }),\n  AddPrReportAsComment: core.getInput('AddPrReportAsComment', { required: false }),\n  ReportTitle: core.getInput('ReportTitle', { required: false }),\n  ShowAdditions: core.getInput('ShowAdditions', { required: false }),\n  ShowDeleted: core.getInput('ShowDeleted', { required: false }),", "  ShowAdditions: core.getInput('ShowAdditions', { required: false }),\n  ShowDeleted: core.getInput('ShowDeleted', { required: false }),\n  ShowNumberOfChangedFiles: core.getInput('ShowNumberOfChangedFiles', { required: false }),\n  ShowNumberOfCommits: core.getInput('ShowNumberOfCommits', { required: false }),\n  ShowNumberOfReviews: core.getInput('ShowNumberOfReviews', { required: false }),\n  ShowNumberOfComments: core.getInput('ShowNumberOfComments', { required: false }),\n  ShowNumberOfCommentOnlyReviews: core.getInput('ShowNumberOfCommentOnlyReviews', { required: false }),\n  ShowNumberOfRequestedChangeReviews: core.getInput('ShowNumberOfRequestedChangeReviews', { required: false }),\n  ShowNumberOfApprovedReviews: core.getInput('ShowNumberOfApprovedReviews', { required: false }),\n  ShowTotalNumberOfParticipants: core.getInput('ShowTotalNumberOfParticipants', { required: false }),", "  ShowNumberOfApprovedReviews: core.getInput('ShowNumberOfApprovedReviews', { required: false }),\n  ShowTotalNumberOfParticipants: core.getInput('ShowTotalNumberOfParticipants', { required: false }),\n  ShowTimeTotalRuntimeForLastStatusCheckRun: core.getInput('ShowTimeTotalRuntimeForLastStatusCheckRun', { required: false }),\n  ShowTimeSpendOnPrForLastStatusCheckRun: core.getInput('ShowTimeSpendOnPrForLastStatusCheckRun', { required: false }),\n  ShowPRLeadTime: core.getInput('ShowPRLeadTime', { required: false }),\n  ShowTimeSpendOnBranchBeforePrCreated: core.getInput('ShowTimeSpendOnBranchBeforePrCreated', { required: false }),\n  ShowTimeSpendOnBranchBeforePrMerged: core.getInput('ShowTimeSpendOnBranchBeforePrMerged', { required: false }),\n  ShowTimeToMergeAfterLastReview: core.getInput('ShowTimeToMergeAfterLastReview', { required: false }),\n}\n", "}\n"]}
{"filename": "src/PullRequest.Definitions.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport {\n  type IPullRequest,\n  type IFileChangeSummary,\n  type IPullRequestComment,\n  type IPullRequestCommit,\n  type IPullRequestReview,\n  type IStatusCheck,\n  ICommitAuthor,\n} from './Interfaces/PullRequestTypes'\n", "  type IStatusCheck,\n  ICommitAuthor,\n} from './Interfaces/PullRequestTypes'\n\nexport class FileChangeSummary implements IFileChangeSummary {\n  public additions = 0\n  public deletions = 0\n  public commits = 0\n  public changedFilesList = 0\n  public static CreateFromJson(json: unknown): IFileChangeSummary {\n    const jsonObject = json as { additions: number; deletions: number; commits: object[]; changedFiles: number }\n    const summary = new FileChangeSummary()\n    summary.additions = jsonObject['additions']\n    summary.deletions = jsonObject['deletions']\n    summary.commits = jsonObject['commits'].length\n    summary.changedFilesList = jsonObject['changedFiles']\n    return summary\n  }\n}\n", "export class PullRequestReview implements IPullRequestReview {\n  public authorLogin = ''\n  public state = ''\n  public submittedAt = ''\n  public body = ''\n  public static CreateFromJson(json: unknown): IPullRequestReview {\n    const jsonObject = json as { author: { login: string }; state: string; submittedAt: string; body: string }\n    const review = new PullRequestReview()\n    review.authorLogin = jsonObject['author']['login']\n    review.state = jsonObject['state']\n    review.submittedAt = jsonObject['submittedAt']\n    review.body = jsonObject['body']\n    return review\n  }\n}\n", "export class PullRequestComment implements IPullRequestComment {\n  public authorLogin = ''\n  public createdAt = ''\n  public body = ''\n  public authorAssociation = ''\n  public id = ''\n  public url = ''\n  public viewerDidAuthor = false\n\n  public static CreateFromJson(json: unknown): IPullRequestComment {\n    const jsonObject = json as {\n      author: { login: string }\n      createdAt: string\n      body: string\n      authorAssociation: string\n      id: string\n      url: string\n      viewerDidAuthor: boolean\n    }\n    const comment = new PullRequestComment()\n    comment.authorLogin = jsonObject['author']['login']\n    comment.createdAt = jsonObject['createdAt']\n    comment.body = jsonObject['body']\n    comment.authorAssociation = jsonObject['authorAssociation']\n    comment.id = jsonObject['id']\n    comment.url = jsonObject['url']\n    comment.viewerDidAuthor = jsonObject['viewerDidAuthor']\n    return comment\n  }\n}\n", "function ParseArrayOfType<T>(array: unknown[], cb: (wa: unknown) => T): T[] {\n  const parsedArray: T[] = []\n  for (const item of array) {\n    parsedArray.push(cb(item))\n  }\n  return parsedArray\n}\n\nexport class CommitAuthor implements ICommitAuthor {\n  public email = ''\n  public name = ''\n  public login = ''\n  public id = ''\n  public static CreateFromJson(json: unknown): ICommitAuthor {\n    const jsonObject = json as { email: string; name: string; login: string; id: string }\n    const author = new CommitAuthor()\n    author.email = jsonObject['email']\n    author.name = jsonObject['name']\n    author.login = jsonObject['login']\n    author.id = jsonObject['id']\n    return author\n  }\n}\n", "export class CommitAuthor implements ICommitAuthor {\n  public email = ''\n  public name = ''\n  public login = ''\n  public id = ''\n  public static CreateFromJson(json: unknown): ICommitAuthor {\n    const jsonObject = json as { email: string; name: string; login: string; id: string }\n    const author = new CommitAuthor()\n    author.email = jsonObject['email']\n    author.name = jsonObject['name']\n    author.login = jsonObject['login']\n    author.id = jsonObject['id']\n    return author\n  }\n}\n", "export class PullRequestCommit implements IPullRequestCommit {\n  public authors: ICommitAuthor[] = []\n  public committer = ''\n  public authorDate = ''\n  public commitDate = ''\n  public commitHeader = ''\n  public commitBody = ''\n  public commitId = ''\n  public static CreateFromJson(json: unknown): IPullRequestCommit {\n    const jsonObject = json as {\n      authoredDate: string\n      authors: unknown[]\n      committedDate: string\n      messageHeadline: string\n      messageBody: string\n      oid: string\n    }\n    const commit = new PullRequestCommit()\n    commit.authorDate = jsonObject['authoredDate']\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    commit.authors = ParseArrayOfType<ICommitAuthor>(jsonObject['authors'], CommitAuthor.CreateFromJson)\n    commit.commitDate = jsonObject['committedDate']\n    commit.commitHeader = jsonObject['messageHeadline']\n    commit.commitBody = jsonObject['messageBody']\n    commit.commitId = jsonObject['oid']\n\n    return commit\n  }\n}\n", "export class StatusCheck implements IStatusCheck {\n  public workflowName = ''\n  public startedAt = ''\n  public completedAt = ''\n  public conclusion = ''\n  public status = ''\n  public name = ''\n  public detailsUrl = ''\n  public static CreateFromJson(json: unknown): IStatusCheck {\n    const jsonObject = json as {\n      workflowName: string\n      startedAt: string\n      completedAt: string\n      conclusion: string\n      status: string\n      name: string\n      detailsUrl: string\n    }\n    const statusCheck = new StatusCheck()\n    statusCheck.workflowName = jsonObject['workflowName']\n    statusCheck.startedAt = jsonObject['startedAt']\n    statusCheck.completedAt = jsonObject['completedAt']\n    statusCheck.conclusion = jsonObject['conclusion']\n    statusCheck.status = jsonObject['status']\n    statusCheck.name = jsonObject['name']\n    return statusCheck\n  }\n}\n", "export class PullRequest implements IPullRequest {\n  public id = 0\n  public title = ''\n  public createdAt = ''\n  public updatedAt = ''\n  public closedAt = ''\n  public mergedAt = ''\n  public body = ''\n  public author = ''\n  public state = ''\n  public mergeable = ''\n  public mergeStateStatus = ''\n  public isDraft = false\n  public baseRefName = ''\n  public headRefName = ''\n  public headRefOid = ''\n  public headRepository = ''\n  public headRepositoryOwner = ''\n  public commits: IPullRequestCommit[] = []\n  public reviews: IPullRequestReview[] = []\n  public comments: IPullRequestComment[] = []\n  public statusChecks: IStatusCheck[] = []\n  public fileChangeSummary: IFileChangeSummary = new FileChangeSummary()\n\n  public static CreateFromJson(cliPullRequest: unknown): IPullRequest {\n    const cliPullRequestObject = cliPullRequest as {\n      number: number\n      title: string\n      createdAt: string\n      updatedAt: string\n      closedAt: string\n      mergedAt: string\n      body: string\n      author: string\n      state: string\n      mergeable: string\n      mergeStateStatus: string\n      isDraft: boolean\n      baseRefName: string\n      headRefName: string\n      headRefOid: string\n      headRepository: string\n      headRepositoryOwner: string\n      commits: unknown[]\n      reviews: unknown[]\n      comments: unknown[]\n      statusCheckRollup: unknown[]\n      fileChangeSummary: unknown\n    }\n    const pr = new PullRequest()\n    pr.id = cliPullRequestObject['number']\n    pr.title = cliPullRequestObject['title']\n    pr.createdAt = cliPullRequestObject['createdAt']\n    pr.updatedAt = cliPullRequestObject['updatedAt']\n    pr.closedAt = cliPullRequestObject['closedAt']\n    pr.mergedAt = cliPullRequestObject['mergedAt']\n    pr.body = cliPullRequestObject['body']\n    pr.author = cliPullRequestObject['author']\n    pr.state = cliPullRequestObject['state']\n    pr.mergeable = cliPullRequestObject['mergeable']\n    pr.mergeStateStatus = cliPullRequestObject['mergeStateStatus']\n    pr.isDraft = cliPullRequestObject['isDraft']\n    pr.baseRefName = cliPullRequestObject['baseRefName']\n    pr.headRefName = cliPullRequestObject['headRefName']\n    pr.headRefOid = cliPullRequestObject['headRefOid']\n    pr.headRepository = cliPullRequestObject['headRepository']\n    pr.headRepositoryOwner = cliPullRequestObject['headRepositoryOwner']\n\n    pr.commits = ParseArrayOfType<IPullRequestCommit>(cliPullRequestObject['commits'], (commit) =>\n      PullRequestCommit.CreateFromJson(commit),\n    )\n    pr.reviews = ParseArrayOfType<IPullRequestReview>(cliPullRequestObject['reviews'], (review) =>\n      PullRequestReview.CreateFromJson(review),\n    )\n    pr.comments = ParseArrayOfType<IPullRequestComment>(cliPullRequestObject['comments'], (comment) =>\n      PullRequestComment.CreateFromJson(comment),\n    )\n    pr.statusChecks = ParseArrayOfType<IStatusCheck>(cliPullRequestObject['statusCheckRollup'], (statusCheck) =>\n      StatusCheck.CreateFromJson(statusCheck),\n    )\n    pr.fileChangeSummary = FileChangeSummary.CreateFromJson(cliPullRequestObject)\n    return pr\n  }\n}\n"]}
{"filename": "src/Report.Functions.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { IPullRequest } from './Interfaces/PullRequestTypes'\n\nexport const GetAddedLines = (pr: IPullRequest): number => {\n  return pr.fileChangeSummary.additions\n}\n\nexport const GetDeletedLines = (pr: IPullRequest): number => {\n  return pr.fileChangeSummary.deletions", "export const GetDeletedLines = (pr: IPullRequest): number => {\n  return pr.fileChangeSummary.deletions\n}\n\nexport const GetChangedFilesCount = (pr: IPullRequest): number => {\n  return pr.fileChangeSummary.changedFilesList\n}\n\nexport const GetCommitsCount = (pr: IPullRequest): number => {\n  return pr.fileChangeSummary.commits", "export const GetCommitsCount = (pr: IPullRequest): number => {\n  return pr.fileChangeSummary.commits\n}\n\nexport const GetReviewCount = (pr: IPullRequest): number => {\n  return pr.reviews.length\n}\n\nexport const GetCommentCount = (pr: IPullRequest): number => {\n  return pr.comments.length", "export const GetCommentCount = (pr: IPullRequest): number => {\n  return pr.comments.length\n}\n"]}
{"filename": "src/GitHubCliHelper.ts", "chunked_list": ["// for license and copyright look at the repository\n\n// use util to make exec a promise\nimport * as util from 'util'\nimport { exec } from 'child_process'\n\nconst execAsync = util.promisify(exec)\nconst gh_cli_arguments = `--json \"additions,assignees,author,baseRefName,body,changedFiles,closed,closedAt,comments,commits,createdAt,deletions,files,headRefName,headRefOid,headRepository,headRepositoryOwner,id,isCrossRepository,isDraft,labels,latestReviews,maintainerCanModify,mergeCommit,mergeStateStatus,mergeable,mergedAt,mergedBy,milestone,number,potentialMergeCommit,projectCards,projectItems,reactionGroups,reviewDecision,reviewRequests,reviews,state,statusCheckRollup,title,updatedAt,url\"`\n\nexport const GetPullRequestData = async (pullRequestNumber: number, repo = ''): Promise<unknown> => {", "\nexport const GetPullRequestData = async (pullRequestNumber: number, repo = ''): Promise<unknown> => {\n  let pullRequestData = undefined\n  let repoName = ''\n  if (repo !== '') {\n    repoName = `--repo ${repo}`\n  }\n\n  const ghCliCommand = `gh pr view ${pullRequestNumber} ${gh_cli_arguments} ${repoName}`\n  const { stdout, stderr } = await execAsync(ghCliCommand)\n  if (stdout === ``) {\n    throw new Error(`No data returned from GitHub CLI. Command: ${ghCliCommand} \\n Stderr: ${stderr}`)\n  }\n  pullRequestData = stdout\n  return JSON.parse(pullRequestData) as unknown\n}\n\nexport const AddCommentToPR = async (commentFile: string, prNumber: number): Promise<void> => {\n  const ghCliCommand = `gh pr comment ${prNumber} --body-file ${commentFile}`\n  const { stdout, stderr } = await execAsync(ghCliCommand)", "  if (stdout === ``) {\n    throw new Error(`No data returned from GitHub CLI. Command: ${ghCliCommand} \\n Stderr: ${stderr}`)\n  }\n  pullRequestData = stdout\n  return JSON.parse(pullRequestData) as unknown\n}\n\nexport const AddCommentToPR = async (commentFile: string, prNumber: number): Promise<void> => {\n  const ghCliCommand = `gh pr comment ${prNumber} --body-file ${commentFile}`\n  const { stdout, stderr } = await execAsync(ghCliCommand)\n  if (stdout === ``) {\n    throw new Error(`No data returned from GitHub CLI. Command: ${ghCliCommand} \\n Stderr: ${stderr}`)\n  }\n}\n", "  if (stdout === ``) {\n    throw new Error(`No data returned from GitHub CLI. Command: ${ghCliCommand} \\n Stderr: ${stderr}`)\n  }\n}\n"]}
{"filename": "src/Report.Measures.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport {\n  MillisecondsToReadableDuration,\n  GetLeadTimeForPullRequest,\n  GetTimeSpendOnBranchBeforePRCreated,\n  GetTimeSpendOnBranchBeforePRMerged,\n  GetTimeToMergeAfterLastReview,\n  GetTotalRuntimeForLastStatusCheckRun,\n  GetTimeSpendInPrForLastStatusCheckRun,", "  GetTotalRuntimeForLastStatusCheckRun,\n  GetTimeSpendInPrForLastStatusCheckRun,\n  GetNumberOfCommentOnlyReviews,\n  GetNumberOfRequestedChangeReviews,\n  GetNumberOfApprovedReviews,\n  GetTotalNumberOfParticipants,\n} from './Report.Calculation'\nimport { ConfigurationCategory, ConfigurationInfo, ReportConfigurationEntry } from './Report.Definitions'\nimport {\n  GetAddedLines,", "import {\n  GetAddedLines,\n  GetDeletedLines,\n  GetChangedFilesCount,\n  GetCommitsCount,\n  GetReviewCount,\n  GetCommentCount,\n} from './Report.Functions'\nimport { ConfigurationInputs } from './action.config.type'\n", "import { ConfigurationInputs } from './action.config.type'\n\nexport const UpdateConfigValues = (\n  configValues: ConfigurationInputs,\n  measurementEntries: Array<ReportConfigurationEntry>,\n): Array<ReportConfigurationEntry> => {\n  // Update measurementEntries with config values from inputs\n  measurementEntries.forEach((entry) => {\n    // get the property value of inputs\n    entry.Info.ConfigValue = (configValues as { [key: string]: string | number })[entry.Info.ConfigurationName]", "    // get the property value of inputs\n    entry.Info.ConfigValue = (configValues as { [key: string]: string | number })[entry.Info.ConfigurationName]\n  })\n  return measurementEntries\n}\n\nexport const GetActiveMeasures = (entries: Array<ReportConfigurationEntry>): Array<ReportConfigurationEntry> => {\n  return entries.filter((entry) => entry.Info.ConfigValue === 'yes')\n}\n", "}\n\nexport const ReportConfigurationTable = new Array<ReportConfigurationEntry>()\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'include_raw_data_as_md_comment',\n    new ConfigurationInfo(\n      'Add raw PR data as markdown comment in the PR Report (of the PR)',\n      0,", "      'Add raw PR data as markdown comment in the PR Report (of the PR)',\n      0,\n      0,\n      'IncludeRawDataAsMarkdownComment',\n      'yes',\n      ConfigurationCategory.ReportGeneratorValue,\n    ),\n    () => 0,\n  ),\n)", "  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'create_report_comment',\n    new ConfigurationInfo(\n      'Add PR report to the PR as comment',\n      0,\n      0,", "      0,\n      0,\n      'AddPrReportAsComment',\n      'yes',\n      ConfigurationCategory.ReportGeneratorValue,\n    ),\n    () => 0,\n  ),\n)\n", ")\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'title_string',\n    new ConfigurationInfo(\n      'Pull Request Report',\n      0,\n      0,\n      'ReportTitle',", "      0,\n      'ReportTitle',\n      'Pull Request Report',\n      ConfigurationCategory.ReportGeneratorValue,\n    ),\n    () => 0,\n  ),\n)\n\nReportConfigurationTable.push(", "\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'additions',\n    new ConfigurationInfo('Number of added lines', 0, 0, 'ShowAdditions', 'yes', ConfigurationCategory.StaticMeasures),\n    GetAddedLines,\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(", "ReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'deleted',\n    new ConfigurationInfo('Number of deleted lines', 0, 0, 'ShowDeleted', 'yes', ConfigurationCategory.StaticMeasures),\n    GetDeletedLines,\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'changedFiles',", "  new ReportConfigurationEntry(\n    'changedFiles',\n    new ConfigurationInfo(\n      'Number of changed files',\n      0,\n      0,\n      'ShowNumberOfChangedFiles',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),", "      ConfigurationCategory.StaticMeasures,\n    ),\n    GetChangedFilesCount,\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'commits',\n    new ConfigurationInfo(\n      'Number of commits',", "    new ConfigurationInfo(\n      'Number of commits',\n      0,\n      0,\n      'ShowNumberOfCommits',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),\n    GetCommitsCount,\n  ),", "    GetCommitsCount,\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'reviews',\n    new ConfigurationInfo(\n      'Number of reviews',\n      0,\n      0,", "      0,\n      0,\n      'ShowNumberOfReviews',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),\n    GetReviewCount,\n  ),\n)\nReportConfigurationTable.push(", ")\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'comments',\n    new ConfigurationInfo(\n      'Number of comments (w/o review comments)',\n      0,\n      0,\n      'ShowNumberOfComments',\n      'yes',", "      'ShowNumberOfComments',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),\n    GetCommentCount,\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_lead_time',", "  new ReportConfigurationEntry(\n    'pr_lead_time',\n    new ConfigurationInfo(\n      'PR lead time (from creation to close of PR)',\n      0,\n      0,\n      'ShowPRLeadTime',\n      'yes',\n      ConfigurationCategory.TimeRelatedMeasures,\n    ),", "      ConfigurationCategory.TimeRelatedMeasures,\n    ),\n    (pr) => MillisecondsToReadableDuration(GetLeadTimeForPullRequest(pr)),\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_time_branch_before_pr',\n    new ConfigurationInfo(\n      'Time that was spend on the branch before the PR was created',", "    new ConfigurationInfo(\n      'Time that was spend on the branch before the PR was created',\n      0,\n      0,\n      'ShowTimeSpendOnBranchBeforePrCreated',\n      'yes',\n      ConfigurationCategory.TimeRelatedMeasures,\n    ),\n    (pr) => MillisecondsToReadableDuration(GetTimeSpendOnBranchBeforePRCreated(pr)),\n  ),", "    (pr) => MillisecondsToReadableDuration(GetTimeSpendOnBranchBeforePRCreated(pr)),\n  ),\n)\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_time_branch_before_merge',\n    new ConfigurationInfo(\n      'Time that was spend on the branch before the PR was merged',\n      0,\n      0,", "      0,\n      0,\n      'ShowTimeSpendOnBranchBeforePrMerged',\n      'yes',\n      ConfigurationCategory.TimeRelatedMeasures,\n    ),\n    (pr) => MillisecondsToReadableDuration(GetTimeSpendOnBranchBeforePRMerged(pr)),\n  ),\n)\nReportConfigurationTable.push(", ")\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_time_to_merge_after_last_review',\n    new ConfigurationInfo(\n      'Time to merge after last review',\n      0,\n      0,\n      'ShowTimeToMergeAfterLastReview',\n      'yes',", "      'ShowTimeToMergeAfterLastReview',\n      'yes',\n      ConfigurationCategory.TimeRelatedMeasures,\n    ),\n    (pr) => MillisecondsToReadableDuration(GetTimeToMergeAfterLastReview(pr)),\n  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(", "ReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'no_of_comment_only_reviews',\n    new ConfigurationInfo(\n      'Number of reviews that contains a comment to resolve',\n      0,\n      0,\n      'ShowNumberOfCommentOnlyReviews',\n      'yes',\n      ConfigurationCategory.StaticMeasures,", "      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),\n    (pr) => GetNumberOfCommentOnlyReviews(pr),\n  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'no_of_change_requested_reviews',", "  new ReportConfigurationEntry(\n    'no_of_change_requested_reviews',\n    new ConfigurationInfo(\n      'Number of reviews that requested a change from the author',\n      0,\n      0,\n      'ShowNumberOfRequestedChangeReviews',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),", "      ConfigurationCategory.StaticMeasures,\n    ),\n    (pr) => GetNumberOfRequestedChangeReviews(pr),\n  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'no_of_approved_reviews',\n    new ConfigurationInfo(", "    'no_of_approved_reviews',\n    new ConfigurationInfo(\n      'Number of reviews that approved the Pull Request',\n      0,\n      0,\n      'ShowNumberOfApprovedReviews',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),\n    (pr) => GetNumberOfApprovedReviews(pr),", "    ),\n    (pr) => GetNumberOfApprovedReviews(pr),\n  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_time_total_runtime_for_last_status_check_run',\n    new ConfigurationInfo(\n      'Total runtime for last status check run (Workflow for PR)',", "    new ConfigurationInfo(\n      'Total runtime for last status check run (Workflow for PR)',\n      0,\n      0,\n      'ShowTimeTotalRuntimeForLastStatusCheckRun',\n      'yes',\n      ConfigurationCategory.StatusCheckRelatedMeasures,\n    ),\n    (pr) => MillisecondsToReadableDuration(GetTotalRuntimeForLastStatusCheckRun(pr)),\n  ),", "    (pr) => MillisecondsToReadableDuration(GetTotalRuntimeForLastStatusCheckRun(pr)),\n  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_time_spend_in_pr_for_last_status_check_run',\n    new ConfigurationInfo(\n      'Total time spend in last status check run on PR',\n      0,", "      'Total time spend in last status check run on PR',\n      0,\n      0,\n      'ShowTimeSpendOnPrForLastStatusCheckRun',\n      'yes',\n      ConfigurationCategory.StatusCheckRelatedMeasures,\n    ),\n    (pr) => MillisecondsToReadableDuration(GetTimeSpendInPrForLastStatusCheckRun(pr)),\n  ),\n)", "  ),\n)\n\nReportConfigurationTable.push(\n  new ReportConfigurationEntry(\n    'pr_total_number_of_participants',\n    new ConfigurationInfo(\n      'Get the total number of participants of a Pull Request',\n      0,\n      0,", "      0,\n      0,\n      'ShowTotalNumberOfParticipants',\n      'yes',\n      ConfigurationCategory.StaticMeasures,\n    ),\n    (pr) => GetTotalNumberOfParticipants(pr),\n  ),\n)\n", ")\n"]}
{"filename": "src/Report.Calculation.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport {\n  IPullRequest,\n  IPullRequestComment,\n  IPullRequestCommit,\n  IPullRequestReview,\n} from './Interfaces/PullRequestTypes'\nimport { EventWithTime } from './Interfaces/ReportTypes'\nimport { StatusCheck } from './PullRequest.Definitions'", "import { EventWithTime } from './Interfaces/ReportTypes'\nimport { StatusCheck } from './PullRequest.Definitions'\n\nexport const GenerateEventTimeline = (pullRequest: IPullRequest): EventWithTime[] => {\n  const events: EventWithTime[][] = []\n\n  // merge all interesting events into a single list\n  events.push([\n    { type: 'createAt', date: new Date(pullRequest.createdAt), event_instance: pullRequest.createdAt, time: 0 },\n  ])", "    { type: 'createAt', date: new Date(pullRequest.createdAt), event_instance: pullRequest.createdAt, time: 0 },\n  ])\n  events.push(\n    pullRequest.commits.map((commit) => ({\n      type: 'commit',\n      date: new Date(commit.authorDate),\n      event_instance: commit,\n      time: 0,\n    })),\n  )", "    })),\n  )\n  events.push(\n    pullRequest.reviews.map((review) => ({\n      type: 'review',\n      date: new Date(review.submittedAt),\n      event_instance: review,\n      time: 0,\n    })),\n  )", "    })),\n  )\n  events.push(\n    pullRequest.statusChecks.map((statusCheck) => ({\n      type: 'statusCheck',\n      date: new Date(statusCheck.completedAt),\n      event_instance: statusCheck,\n      time: 0,\n    })),\n  )", "    })),\n  )\n  events.push(\n    pullRequest.comments.map((comment) => ({\n      type: 'comment',\n      date: new Date(comment.createdAt),\n      event_instance: comment,\n      time: 0,\n    })),\n  )", "    })),\n  )\n  events.push([\n    { type: 'mergedAt', date: new Date(pullRequest.mergedAt), event_instance: pullRequest.mergedAt, time: 0 },\n  ])\n  events.push([\n    { type: 'closedAt', date: new Date(pullRequest.closedAt), event_instance: pullRequest.closedAt, time: 0 },\n  ])\n\n  // flatten the list", "\n  // flatten the list\n  const flattenedEvents = events.flat()\n\n  // filter out events that don't have a valid date\n  const filteredEvents = flattenedEvents.filter((event) => event.date !== null)\n\n  // sort the events by date\n  filteredEvents.sort((a, b) => a.date.getTime() - b.date.getTime())\n", "  filteredEvents.sort((a, b) => a.date.getTime() - b.date.getTime())\n\n  // now, create a list of events with the time between events\n  const eventsWithTime: EventWithTime[] = []\n\n  // calculate the time between events\n  for (let i = 0; i < filteredEvents.length; i++) {\n    if (i === 0) {\n      eventsWithTime.push({\n        type: filteredEvents[i].type,\n        date: filteredEvents[i].date,\n        time: 0,\n        event_instance: filteredEvents[i].event_instance,\n      })\n    } else {\n      eventsWithTime.push({\n        type: filteredEvents[i].type,\n        date: filteredEvents[i].date,\n        time: (filteredEvents[i].date.getTime() - filteredEvents[i - 1].date.getTime()) / 1000,\n        event_instance: filteredEvents[i].event_instance,\n      })\n    }\n  }\n\n  return eventsWithTime\n}\n\nexport const MillisecondsToReadableDuration = (leadTimeInMSec: number) => {\n  const seconds = +(leadTimeInMSec / 1000).toFixed(1)\n  const minutes = +(leadTimeInMSec / (1000 * 60)).toFixed(1)\n  const hours = +(leadTimeInMSec / (1000 * 60 * 60)).toFixed(1)\n  const days = +(leadTimeInMSec / (1000 * 60 * 60 * 24)).toFixed(1)", "  if (seconds < 60) return `${seconds} Sec`\n  else if (minutes < 60) return `${minutes} Min`\n  else if (hours < 24) return `${hours} Hours`\n  else return `${days} Days`\n}\n\nexport const GetMergedOrClosedDate = (pullRequest: IPullRequest): string => {\n  let mergedOrClosedAt = pullRequest.mergedAt\n\n  if (mergedOrClosedAt == null) mergedOrClosedAt = pullRequest.closedAt\n\n  return mergedOrClosedAt\n}\n\nexport const GetLeadTimeForPullRequest = (pullRequest: IPullRequest) => {\n  // parse createAt as date from string\n  const createAt = new Date(pullRequest.createdAt)\n  const mergedOrClosedAt = new Date(GetMergedOrClosedDate(pullRequest))\n\n  const duration = mergedOrClosedAt.getTime() - createAt.getTime()", "  if (mergedOrClosedAt == null) mergedOrClosedAt = pullRequest.closedAt\n\n  return mergedOrClosedAt\n}\n\nexport const GetLeadTimeForPullRequest = (pullRequest: IPullRequest) => {\n  // parse createAt as date from string\n  const createAt = new Date(pullRequest.createdAt)\n  const mergedOrClosedAt = new Date(GetMergedOrClosedDate(pullRequest))\n\n  const duration = mergedOrClosedAt.getTime() - createAt.getTime()", "  if (duration <= 0 || isNaN(duration)) return 0\n\n  return duration\n}\n\nexport const GetTimeSpendOnBranchBeforePRCreated = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const createAtEvent = eventTimeline.find((event) => event.type === 'createAt')\n  const firstCommitEvent = eventTimeline.find((event) => event.type === 'commit')\n\n  if (!createAtEvent || !firstCommitEvent) return 0\n\n  const duration = createAtEvent.date.getTime() - firstCommitEvent.date.getTime()", "  if (!createAtEvent || !firstCommitEvent) return 0\n\n  const duration = createAtEvent.date.getTime() - firstCommitEvent.date.getTime()\n  if (duration <= 0 || isNaN(duration)) return 0\n\n  return duration\n}\n\nexport const GetTimeSpendOnBranchBeforePRMerged = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const mergedAtEvent = eventTimeline.find((event) => event.type === 'mergedAt')\n  const firstCommitEvent = eventTimeline.find((event) => event.type === 'commit')\n", "  if (mergedAtEvent && firstCommitEvent && mergedAtEvent.date.getTime() > firstCommitEvent.date.getTime()) {\n    return mergedAtEvent.date.getTime() - firstCommitEvent.date.getTime()\n  }\n\n  return -1\n}\n\nexport const GetTimeToMergeAfterLastReview = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const mergedAtEvent = eventTimeline.find((event) => event.type === 'mergedAt')\n  const reviewEvents = eventTimeline.filter((event) => event.type === 'review')\n", "  if (reviewEvents.length <= 0) {\n    return -1\n  }\n\n  const lastReviewEvent = reviewEvents.reverse()[0]\n  if (mergedAtEvent && lastReviewEvent && mergedAtEvent.date.getTime() > lastReviewEvent.date.getTime()) {\n    return mergedAtEvent.date.getTime() - lastReviewEvent.date.getTime()\n  }\n\n  return -1\n}\n\nexport const GetTotalRuntimeForLastStatusCheckRun = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const statusCheckEvents = eventTimeline\n    .filter((event) => event.type === 'statusCheck')\n    .map((event) => event.event_instance as StatusCheck)\n    .filter((statusCheck) => statusCheck.status == 'COMPLETED')\n", "  if (statusCheckEvents.length <= 0) {\n    return 0\n  }\n\n  let totalTime = 0\n  statusCheckEvents.forEach((statusCheck) => {\n    totalTime += new Date(statusCheck.completedAt).getTime() - new Date(statusCheck.startedAt).getTime()\n  })\n\n  return totalTime\n}\n\nexport const GetTimeSpendInPrForLastStatusCheckRun = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const statusCheckEvents = eventTimeline\n    .filter((event) => event.type === 'statusCheck')\n    .map((event) => event.event_instance as StatusCheck)\n    .filter((statusCheck) => statusCheck.status == 'COMPLETED')\n", "  if (statusCheckEvents.length <= 0) {\n    return 0\n  }\n\n  let earliestStart = new Date()\n  let latestCompletion = new Date(0, 0, 0)\n  statusCheckEvents.forEach((statusCheckEvent) => {\n    const completedDate = new Date(statusCheckEvent.completedAt)\n    const startedDate = new Date(statusCheckEvent.startedAt)\n    if (startedDate < earliestStart) {\n      earliestStart = startedDate\n    }", "    if (startedDate < earliestStart) {\n      earliestStart = startedDate\n    }\n    if (completedDate > latestCompletion) {\n      latestCompletion = completedDate\n    }\n  })\n\n  return latestCompletion.getTime() - earliestStart.getTime()\n}\n\nconst FilterReviewsByState = (pullRequest: IPullRequest, state: string) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const reviewEvents = eventTimeline.filter((event) => event.type === 'review')\n", "  if (reviewEvents.length <= 0) {\n    return []\n  }\n\n  const filteredReviews = reviewEvents.filter((reviewEvent) => {\n    const review = reviewEvent.event_instance as IPullRequestReview\n    return review.state === state\n  })\n\n  return filteredReviews\n}\n\nexport const GetNumberOfCommentOnlyReviews = (pullRequest: IPullRequest) => {\n  return FilterReviewsByState(pullRequest, 'COMMENTED').length\n}\n\nexport const GetNumberOfRequestedChangeReviews = (pullRequest: IPullRequest) => {\n  return FilterReviewsByState(pullRequest, 'CHANGES_REQUESTED').length\n}\n\nexport const GetNumberOfApprovedReviews = (pullRequest: IPullRequest) => {\n  return FilterReviewsByState(pullRequest, 'APPROVED').length\n}\n\nexport const GetUniqueReviewParticipants = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const reviewEvents = eventTimeline.filter((event) => event.type === 'review')\n  // extract unique reviewers from review events\n  return reviewEvents\n    .map((reviewEvent) => reviewEvent.event_instance as IPullRequestReview)\n    .map((review) => review.authorLogin)\n    .filter((value, index, self) => self.indexOf(value) === index)\n}\n\nexport const GetUniqueCommentParticipants = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const commentEvents = eventTimeline.filter((event) => event.type === 'comment')\n\n  // extract unique commenter from review events\n  return commentEvents\n    .map((commentEvent) => commentEvent.event_instance as IPullRequestComment)\n    .map((comment) => comment.authorLogin)\n    .filter((value, index, self) => self.indexOf(value) === index)\n}\n\nexport const GetUniqueCommitterParticipants = (pullRequest: IPullRequest) => {\n  const eventTimeline = GenerateEventTimeline(pullRequest)\n  const commitEvents = eventTimeline.filter((event) => event.type === 'commit')\n\n  // extract unique reviewers from review events\n  return commitEvents\n    .map((commitEvent) => commitEvent.event_instance as IPullRequestCommit)\n    .map((commit) => commit.authors.filter((author) => author.login !== null).map((author) => author.login))\n    .flat()\n    .filter((value, index, self) => self.indexOf(value) === index)\n}\n\nexport const GetNumberOfActivePullRequestReviewParticipants = (pullRequest: IPullRequest) => {\n  const uniqueReviewers = GetUniqueReviewParticipants(pullRequest)\n  const uniqueCommenter = GetUniqueCommentParticipants(pullRequest)\n  return uniqueReviewers.concat(uniqueCommenter).filter((value, index, self) => self.indexOf(value) === index).length\n}\n\nexport const GetNumberOfPullRequestCommitter = (pullRequest: IPullRequest) => {\n  return GetUniqueCommitterParticipants(pullRequest).length\n}\n\nexport const GetTotalNumberOfParticipants = (pullRequest: IPullRequest) => {\n  return GetNumberOfActivePullRequestReviewParticipants(pullRequest) + GetNumberOfPullRequestCommitter(pullRequest)\n}\n"]}
{"filename": "src/action.config.type.ts", "chunked_list": ["//GENERATED FILE FROM report.config.tests.ts - DO NOT EDIT!!!\n\nexport type ConfigurationInputs = {\n  IncludeRawDataAsMarkdownComment: string | number\n  AddPrReportAsComment: string | number\n  ReportTitle: string | number\n  ShowAdditions: string | number\n  ShowDeleted: string | number\n  ShowNumberOfChangedFiles: string | number\n  ShowNumberOfCommits: string | number\n  ShowNumberOfReviews: string | number\n  ShowNumberOfComments: string | number\n  ShowNumberOfCommentOnlyReviews: string | number\n  ShowNumberOfRequestedChangeReviews: string | number\n  ShowNumberOfApprovedReviews: string | number\n  ShowTotalNumberOfParticipants: string | number\n  ShowTimeTotalRuntimeForLastStatusCheckRun: string | number\n  ShowTimeSpendOnPrForLastStatusCheckRun: string | number\n  ShowPRLeadTime: string | number\n  ShowTimeSpendOnBranchBeforePrCreated: string | number\n  ShowTimeSpendOnBranchBeforePrMerged: string | number\n  ShowTimeToMergeAfterLastReview: string | number\n}\n"]}
{"filename": "src/Interfaces/PullRequestTypes.ts", "chunked_list": ["// for license and copyright look at the repository\n\nexport interface IFileChangeSummary {\n  additions: number\n  deletions: number\n  commits: number\n  changedFilesList: number\n}\n\nexport interface IPullRequestReview {\n  authorLogin: string\n  state: string\n  submittedAt: string\n  body: string\n}\n", "export interface IPullRequestReview {\n  authorLogin: string\n  state: string\n  submittedAt: string\n  body: string\n}\n\nexport interface IPullRequestComment {\n  authorAssociation: string\n  authorLogin: string\n  createdAt: string\n  body: string\n  id: string\n  url: string\n  viewerDidAuthor: boolean\n}\n", "export interface ICommitAuthor {\n  email: string\n  name: string\n  login: string\n  id: string\n}\n\nexport interface IPullRequestCommit {\n  authors: ICommitAuthor[]\n  committer: string\n  authorDate: string\n  commitDate: string\n  commitHeader: string\n  commitBody: string\n  commitId: string\n}\n", "export interface IStatusCheck {\n  workflowName: string\n  startedAt: string\n  completedAt: string\n  conclusion: string\n  status: string\n  name: string\n}\n\nexport interface IPullRequest {\n  id: number\n  title: string\n  createdAt: string\n  updatedAt: string\n  closedAt: string\n  mergedAt: string\n  body: string\n  author: string\n  state: string\n  mergeable: string\n  mergeStateStatus: string\n  isDraft: boolean\n  baseRefName: string\n  headRefName: string\n  headRefOid: string\n  headRepository: string\n  headRepositoryOwner: string\n  commits: IPullRequestCommit[]\n  reviews: IPullRequestReview[]\n  comments: IPullRequestComment[]\n  statusChecks: IStatusCheck[]\n  fileChangeSummary: IFileChangeSummary\n}\n", "export interface IPullRequest {\n  id: number\n  title: string\n  createdAt: string\n  updatedAt: string\n  closedAt: string\n  mergedAt: string\n  body: string\n  author: string\n  state: string\n  mergeable: string\n  mergeStateStatus: string\n  isDraft: boolean\n  baseRefName: string\n  headRefName: string\n  headRefOid: string\n  headRepository: string\n  headRepositoryOwner: string\n  commits: IPullRequestCommit[]\n  reviews: IPullRequestReview[]\n  comments: IPullRequestComment[]\n  statusChecks: IStatusCheck[]\n  fileChangeSummary: IFileChangeSummary\n}\n"]}
{"filename": "src/Interfaces/ReportTypes.ts", "chunked_list": ["// for license and copyright look at the repository\n\nimport { ConfigurationCategory } from '../Report.Definitions'\nimport { IPullRequest } from './PullRequestTypes'\n\nexport type PullRequestCallback = (pr: IPullRequest) => string | number\n\nexport interface IReportConfigInfo {\n  Description: string\n  PresentationValue: string | number\n  Value: string | number\n  ConfigurationName: string\n  ConfigurationCategory: ConfigurationCategory\n  ConfigValue: string | number\n}\n", "export interface IReportConfigurationEntry {\n  Id: string\n  Info: IReportConfigInfo\n  PullRequestCallback: PullRequestCallback\n}\n\nexport interface IReport {\n  Id: string\n  Description: string\n  Entries: IReportConfigurationEntry[]\n}\n", "export interface EventWithTime {\n  type: string\n  date: Date\n  time: number\n  event_instance: unknown\n}\n"]}
