{"filename": "src/index.ts", "chunked_list": ["import './assets/css/index.scss'\nimport './assets/css/github.scss'\nimport { DomListener } from './utils/DomListener'\nimport { SearchJSConfig } from './types'\nimport { SearchComponent } from './utils/SearchComponent'\nimport { SearchHistory } from './utils/SearchHistory'\nimport { Theme } from './themes'\n\nexport class SearchJSApp {\n  /**\n   * UI component\n   *\n   * @var {SearchComponent} component\n   */\n  private component: SearchComponent\n\n  /**\n   * instance variable for singleton structure\n   *\n   * @var {SearchJSApp} _instance\n   */\n  private static _instance: SearchJSApp\n\n  /**", "export class SearchJSApp {\n  /**\n   * UI component\n   *\n   * @var {SearchComponent} component\n   */\n  private component: SearchComponent\n\n  /**\n   * instance variable for singleton structure\n   *\n   * @var {SearchJSApp} _instance\n   */\n  private static _instance: SearchJSApp\n\n  /**", "   * class constructor\n   *\n   * @param {SearchJSConfig} config\n   */\n  constructor(public config: SearchJSConfig) {\n    this.component = new SearchComponent(this, new DomListener(), new SearchHistory(), new Theme())\n    this.listenKeyboardKeyPress()\n  }\n\n  /**\n   * get singleton instance\n   *\n   * @param {SearchJSConfig} config\n   * @returns {SearchJSApp}\n   */\n  public static getInstance(config: SearchJSConfig): SearchJSApp {\n    return this._instance || (this._instance = new this(config))\n  }\n\n  /**", "   * function to open search modal\n   *\n   * @returns {void}\n   */\n  public open(): void {\n    this.component.element.style.display = 'flex'\n    this.focusOnSearch()\n  }\n\n  /**\n   * function to close search modal\n   *\n   * @returns {void}\n   */\n  public close(): void {\n    this.component.element.style.display = 'none'\n  }\n\n  /**", "   * function to close search modal\n   *\n   * @returns {void}\n   */\n  public close(): void {\n    this.component.element.style.display = 'none'\n  }\n\n  /**\n   * private function to focus on search input when modal open\n   *\n   * @returns {void}\n   */\n  private focusOnSearch(): void {\n    const element = document.querySelector<HTMLInputElement>('#search-js .search-input')\n    element.focus()\n  }\n\n  /**\n   * listen keyboard key press to open or close modal\n   * (ctrl + k) | (cmd + k) to open modal\n   * Esc to close modal\n   *\n   * @returns {void}\n   */\n  private listenKeyboardKeyPress(): void {\n    const open = () => this.open()\n    const close = () => this.close()\n    window.onkeydown = function (event) {\n      const openKeys = (event.ctrlKey && event.key === 'k') || (event.metaKey && event.key === 'k')", "   * private function to focus on search input when modal open\n   *\n   * @returns {void}\n   */\n  private focusOnSearch(): void {\n    const element = document.querySelector<HTMLInputElement>('#search-js .search-input')\n    element.focus()\n  }\n\n  /**\n   * listen keyboard key press to open or close modal\n   * (ctrl + k) | (cmd + k) to open modal\n   * Esc to close modal\n   *\n   * @returns {void}\n   */\n  private listenKeyboardKeyPress(): void {\n    const open = () => this.open()\n    const close = () => this.close()\n    window.onkeydown = function (event) {\n      const openKeys = (event.ctrlKey && event.key === 'k') || (event.metaKey && event.key === 'k')", "      if (openKeys) {\n        open()\n      }\n      if (event.key === 'Escape' || event.key === 'Esc') {\n        close()\n      }\n    }\n  }\n}\n\n/**\n * init search js\n *\n * @param {SearchJSConfig} config\n * @returns {SearchJSApp}\n */\nconst SearchJS = (config: SearchJSConfig): SearchJSApp => {\n  return SearchJSApp.getInstance(config)\n}\n\ndeclare global {", "  interface Window {\n    SearchJS: (config: SearchJSConfig) => SearchJSApp\n  }\n}\nwindow.SearchJS = SearchJS\n\nexport default SearchJS\nexport * from './types'\n"]}
{"filename": "src/components/Item.ts", "chunked_list": ["import { Encoder } from './../utils/Encoder'\nimport { closeIcon } from '../assets/Icon'\nimport { ATTR_DATA_PAYLOAD, CLASS_ITEMS, CLASS_ITEM_CLOSE } from '../constant'\nimport { SearchJSItem } from '../types'\n\ninterface ItemComponentPayload {\n  item: SearchJSItem\n  icon: string\n  hideRemoveButton: boolean\n}\n", "export interface ListRenderPayload {\n  id: string\n  items?: Array<SearchJSItem>\n  icon: string\n  hideRemoveButton: boolean\n  notFoundLabel: string\n}\n\nexport class Item {\n  /**\n   * render item list\n   *\n   * @param {Array<SearchJSItem>} items\n   * @returns {void}\n   */\n  public renderList({ id, items, hideRemoveButton, notFoundLabel, icon }: ListRenderPayload): void {\n    const element = document.getElementById(id)\n    element.innerHTML = ``\n\n    let html = `<div class=\"${CLASS_ITEMS}\">`\n", "export class Item {\n  /**\n   * render item list\n   *\n   * @param {Array<SearchJSItem>} items\n   * @returns {void}\n   */\n  public renderList({ id, items, hideRemoveButton, notFoundLabel, icon }: ListRenderPayload): void {\n    const element = document.getElementById(id)\n    element.innerHTML = ``\n\n    let html = `<div class=\"${CLASS_ITEMS}\">`\n", "    if (items.length == 0) {\n      html += `<div class=\"not-found-label\">${notFoundLabel}</div>`\n    }\n\n    items.forEach((item) => {\n      html += this.render({\n        item,\n        icon,\n        hideRemoveButton,\n      })\n    })\n\n    html += '</div>'\n    element.innerHTML = html\n    element.style.display = 'block'\n  }\n\n  /**\n   * render items component\n   * @param {ItemComponentPayload} props\n   * @returns {string}\n   */\n  render({ item, icon, hideRemoveButton = false }: ItemComponentPayload): string {\n    const dataPayload = Encoder.encode(item)\n    return `<div class=\"item\" ${ATTR_DATA_PAYLOAD}='${dataPayload}'>\n<div class=\"item-icon\">${icon}</div>\n<div style=\"flex: 1\">\n<div class=\"item-title\">${item.title}</div>\n${item.description ? `<div class=\"item-description\">${item.description}</div>` : ``}\n</div>${this.getCloseIcon(hideRemoveButton, dataPayload)}</div>`\n  }\n\n  /**\n   * get html string to show or hide remove button\n   *\n   * @param {boolean} hideRemoveButton\n   * @param {string} data\n   * @returns\n   */\n  private getCloseIcon(hideRemoveButton: boolean, data: string) {\n    return hideRemoveButton\n      ? ``\n      : `<div class='${CLASS_ITEM_CLOSE}' ${ATTR_DATA_PAYLOAD}='${data}'>${closeIcon()}</div>`\n  }\n}\n"]}
{"filename": "src/components/Header.ts", "chunked_list": ["import { SearchJSConfig } from '../types'\nimport { clearIcon, searchIcon } from '../assets/Icon'\nimport { CLASS_CLEAR_ICON, CLASS_INPUT, DEFAULT_THEME_COLOR } from '../constant'\n\nexport class Header {\n  /**\n   * render header html string\n   *\n   * @param {SearchJSConfig} config\n   * @returns {string}\n   */\n  render(config: SearchJSConfig): string {\n    let icon = searchIcon(config.theme ?? DEFAULT_THEME_COLOR)\n    let placeholder = 'Search'\n", "    if (config.search?.icon) {\n      icon = config.search.icon\n    }\n\n    if (config.search?.placeholder) {\n      placeholder = config.search.placeholder\n    }\n\n    return `<div class=\"search-container\">\n<div class=\"search-icon\">${icon}</div>\n<input placeholder=\"${placeholder}\" class=\"${CLASS_INPUT}\" type=\"text\"/>\n<div class=\"${CLASS_CLEAR_ICON}\">${clearIcon()}</div>\n</div>`\n  }\n}\n"]}
{"filename": "src/components/Footer.ts", "chunked_list": ["export class Footer {\n  /**\n   * render footer html string\n   *\n   * @returns {string}\n   */\n  render(): string {\n    return `<div class=\"keyboard-button\">Esc</div> <span>to close</span>`\n  }\n}\n"]}
{"filename": "src/utils/SearchHistory.ts", "chunked_list": ["import { SearchJSItem } from '../types'\n\nexport class SearchHistory {\n  /**\n   * local storage\n   *\n   * @var {Storage} db\n   */\n  private db: Storage\n\n  /**\n   * max items to store in history\n   *\n   * @var {number} maxItems\n   */\n  private maxItems = 4\n\n  /**\n   * local storage key\n   *\n   * @var {string} storageKey\n   */\n  private storageKey = 'search-js-histories'\n\n  constructor() {\n    this.db = window.localStorage\n  }\n\n  /**\n   * get list of items store in history\n   *\n   * @returns {Array<SearchJSItem> | undefined | null}\n   */\n  public getList(): Array<SearchJSItem> | undefined | null {\n    let data = this.db.getItem(this.storageKey)", "    if (!data) {\n      data = '[]'\n    }\n    return JSON.parse(data).reverse()\n  }\n\n  /**\n   * clear items stored\n   *\n   * @returns {void}\n   */\n  public clear(): void {\n    this.db.setItem(this.storageKey, '[]')\n  }\n\n  /**\n   * remove item stored\n   *\n   * @param {SearchJSItem} item\n   * @returns {void}\n   */\n  public remove(item: SearchJSItem): void {\n    let data = this.db.getItem(this.storageKey)", "    if (!data) {\n      data = '[]'\n    }\n    const arrayItems = JSON.parse(data)\n    const index = arrayItems.findIndex((d: SearchJSItem) => {\n      return JSON.stringify(d) == JSON.stringify(item)\n    })\n\n    if (index != -1) {\n      arrayItems.splice(index, 1)\n    }\n\n    this.db.setItem(this.storageKey, JSON.stringify(arrayItems))\n  }\n\n  /**\n   * add item to history\n   *\n   * @param {SearchJSItem} item\n   * @returns {void}\n   */\n  public add(item: SearchJSItem): void {\n    let data = this.db.getItem(this.storageKey)", "    if (index != -1) {\n      arrayItems.splice(index, 1)\n    }\n\n    this.db.setItem(this.storageKey, JSON.stringify(arrayItems))\n  }\n\n  /**\n   * add item to history\n   *\n   * @param {SearchJSItem} item\n   * @returns {void}\n   */\n  public add(item: SearchJSItem): void {\n    let data = this.db.getItem(this.storageKey)", "    if (!data) {\n      data = '[]'\n    }\n    const arrayItems = JSON.parse(data)\n    if (arrayItems.length == this.maxItems) {\n      arrayItems.pop()\n    }\n\n    const findItem = arrayItems.find((d: SearchJSItem) => {\n      return JSON.stringify(d) == JSON.stringify(item)\n    })\n", "    if (!findItem) {\n      arrayItems.push(item)\n    }\n\n    this.db.setItem(this.storageKey, JSON.stringify(arrayItems))\n  }\n}\n"]}
{"filename": "src/utils/SearchComponent.ts", "chunked_list": ["import { hashIcon, historyIcon, loadingIcon } from '../assets/Icon'\nimport { Footer } from '../components/Footer'\nimport { Header } from '../components/Header'\nimport { Item } from '../components/Item'\nimport { DomListener } from './DomListener'\nimport { SearchHistory } from './SearchHistory'\nimport { SearchJSApp } from '..'\nimport { SearchJSItem, SearchJSTheme } from '../types'\nimport { Theme } from '../themes'\nimport {", "import { Theme } from '../themes'\nimport {\n  CLASS_CONTAINER,\n  ID,\n  CLASS_MODAL,\n  ID_HISTORIES,\n  ID_LOADING,\n  ID_RESULTS,\n  CLASS_MODAL_HEADER,\n  CLASS_MODAL_FOOTER,", "  CLASS_MODAL_HEADER,\n  CLASS_MODAL_FOOTER,\n  CLASS_MODAL_CONTENT,\n} from '../constant'\n\nexport class SearchComponent {\n  /**\n   * the entire search js element\n   *\n   * @var {HTMLElement} element\n   */\n  public element: HTMLElement\n\n  /**\n   * timer placeholder to handle search\n   *\n   * @var {number} searchTimer\n   */\n  private searchTimer?: number\n\n  /**", "   * class constructor\n   *\n   * @param {SearchJSApp} app\n   * @param {DomListener} domListener\n   * @param {SearchHistory} searchHistory\n   * @param {Theme} theme\n   */\n  constructor(\n    private app: SearchJSApp,\n    private domListener: DomListener,\n    private searchHistory: SearchHistory,\n    private theme: Theme,\n  ) {\n    // add global css variable\n    this.theme.createGlobalCssVariable(this.app.config)\n\n    // append search element on parent element\n    this.getParentElement().appendChild(this.createElement())\n\n    // render initial data list\n    this.showHistory(this.searchHistory.getList())\n\n    this.domListener.onBackDropClick(() => {\n      this.app.close()\n    })\n\n    this.handleOnSearch()\n  }\n\n  /**\n   * handle search and show list on result\n   *\n   * @returns {void}\n   */\n  private handleOnSearch(): void {\n    this.domListener.onSearch(async (keyword: string) => {", "      if (!keyword) {\n        clearTimeout(this.searchTimer)\n        this.hideLoading()\n        this.showHistory(this.searchHistory.getList())\n        this.hideSearchResult()\n        return\n      }\n      this.hideHistories()\n      this.hideSearchResult()\n      if (this.app.config.onSearch) {\n        this.showLoading()\n        clearTimeout(this.searchTimer)\n        this.searchTimer = setTimeout(async () => {\n          const items = await this.app.config.onSearch(keyword)\n          this.hideLoading()\n          this.showSearchResult(items)\n        }, this.app.config.onSearchDelay ?? 500)\n      } else {\n        this.showSearchResult(this.getItems(keyword))\n      }\n    })\n  }\n\n  /**\n   * get list of items from config and filter with keyword from search input\n   *\n   * @param {string} keyword\n   * @returns {Array<SearchJSItem> | null | undefined}\n   */\n  private getItems(keyword: string): Array<SearchJSItem> | null | undefined {\n    const items = this.app.config.data\n    return items.filter((item) => {\n      return (\n        (item.title && item.title.toLowerCase().includes(keyword)) ||\n        (item.description && item.description.toLowerCase().includes(keyword))\n      )\n    })\n  }\n\n  /**\n   * get parent element to append search-js element\n   *\n   * @returns {HTMLElement}\n   */\n  private getParentElement(): HTMLElement {\n    return this.app.config.element ?? document.body\n  }\n\n  private createElement() {\n    const element = document.createElement('div')\n    element.id = ID", "      if (this.app.config.onSearch) {\n        this.showLoading()\n        clearTimeout(this.searchTimer)\n        this.searchTimer = setTimeout(async () => {\n          const items = await this.app.config.onSearch(keyword)\n          this.hideLoading()\n          this.showSearchResult(items)\n        }, this.app.config.onSearchDelay ?? 500)\n      } else {\n        this.showSearchResult(this.getItems(keyword))\n      }\n    })\n  }\n\n  /**\n   * get list of items from config and filter with keyword from search input\n   *\n   * @param {string} keyword\n   * @returns {Array<SearchJSItem> | null | undefined}\n   */\n  private getItems(keyword: string): Array<SearchJSItem> | null | undefined {\n    const items = this.app.config.data\n    return items.filter((item) => {\n      return (\n        (item.title && item.title.toLowerCase().includes(keyword)) ||\n        (item.description && item.description.toLowerCase().includes(keyword))\n      )\n    })\n  }\n\n  /**\n   * get parent element to append search-js element\n   *\n   * @returns {HTMLElement}\n   */\n  private getParentElement(): HTMLElement {\n    return this.app.config.element ?? document.body\n  }\n\n  private createElement() {\n    const element = document.createElement('div')\n    element.id = ID", "    if (this.theme.getReadyMadeThemes().includes(this.app.config.theme as SearchJSTheme)) {\n      element.classList.add(this.app.config.theme)\n    }\n    element.classList.add(CLASS_CONTAINER)\n\n    const footer = new Footer()\n    const header = new Header()\n\n    element.innerHTML = `<div class=\"${CLASS_MODAL}\"> \n<div class=\"${CLASS_MODAL_HEADER}\">${header.render(this.app.config)}</div>\n<div id=\"${ID_LOADING}\" class=\"${CLASS_MODAL_CONTENT}\">${loadingIcon()}</div>\n<div id=\"${ID_HISTORIES}\" class=\"${CLASS_MODAL_CONTENT}\"></div>\n<div id=\"${ID_RESULTS}\" class=\"${CLASS_MODAL_CONTENT}\"></div>\n<div class=\"${CLASS_MODAL_FOOTER}\">${footer.render()}</div>\n</div>\n`\n    this.element = element\n    return this.element\n  }\n\n  /**\n   * show item lists\n   *\n   * @param {Array<SearchJSItem>} items\n   * @returns {void}\n   */\n  private showSearchResult(items: Array<SearchJSItem>): void {\n    const itemInstance = new Item()\n    itemInstance.renderList({\n      id: ID_RESULTS,\n      items: items,\n      hideRemoveButton: true,\n      notFoundLabel: 'No match found',\n      icon: hashIcon(),\n    })\n    this.handleItemClickListener()\n  }\n\n  /**\n   * hide search result\n   *\n   * @returns {void}\n   */\n  private hideSearchResult(): void {\n    document.getElementById(ID_RESULTS).style.display = 'none'\n  }\n\n  /**\n   * show history list\n   *\n   * @param {Array<SearchJSItem>} items\n   * @returns {void}\n   */\n  private showHistory(items: Array<SearchJSItem>): void {\n    const itemInstance = new Item()\n    itemInstance.renderList({\n      id: ID_HISTORIES,\n      items: items,\n      hideRemoveButton: false,\n      notFoundLabel: 'No recent data',\n      icon: historyIcon(),\n    })\n    this.handleItemClickListener()\n  }\n\n  /**\n   * hide history\n   *\n   * @returns {void}\n   */\n  private hideHistories(): void {\n    document.getElementById(ID_HISTORIES).style.display = 'none'\n  }\n\n  /**\n   * listen on select and on remove event on item\n   *\n   * @return {void}\n   */\n  private handleItemClickListener(): void {\n    this.domListener.onItemClick(\n      (data: any) => {\n        this.searchHistory.add(data)\n        this.app.config.onSelected(data)\n      },\n      (data: any) => {\n        this.searchHistory.remove(data)\n        this.showHistory(this.searchHistory.getList())\n      },\n    )\n  }\n\n  /**\n   * show loading\n   *\n   * @returns {void}\n   */\n  private showLoading(): void {\n    document.getElementById(ID_LOADING).style.display = 'flex'\n  }\n\n  /**\n   * hide loading\n   *\n   * @returns {void}\n   */\n  private hideLoading(): void {\n    document.getElementById(ID_LOADING).style.display = 'none'\n  }\n}\n"]}
{"filename": "src/utils/DomListener.ts", "chunked_list": ["import {\n  CLASS_CLEAR_ICON,\n  CLASS_CONTAINER,\n  ATTR_DATA_PAYLOAD,\n  ID,\n  CLASS_INPUT,\n  CLASS_ITEM,\n  CLASS_ITEM_CLOSE,\n} from '../constant'\nimport { SearchJSItem } from '../types'", "} from '../constant'\nimport { SearchJSItem } from '../types'\nimport { Encoder } from './Encoder'\n\nexport class DomListener {\n  /**\n   * @var {string} EVENT_CLICK\n   */\n  private EVENT_CLICK = 'click'\n\n  /**\n   * @var {string} EVENT_KEYUP\n   */\n  private EVENT_KEYUP = 'keyup'\n\n  /**\n   * listen for on back drop click to hide modal\n   *\n   * @param {Function} callback\n   * @returns {void}\n   */\n  public onBackDropClick(callback: () => void): void {\n    const element = document.querySelector(`#${ID}.${CLASS_CONTAINER}`)\n    element.addEventListener(this.EVENT_CLICK, (event) => {", "      if (event.target === element) {\n        callback()\n      }\n    })\n  }\n\n  /**\n   * listen for on search\n   *\n   * @param {Function} callback\n   * @returns {void}\n   */\n  public onSearch(callback: (keyword: string) => void): void {\n    const element: HTMLInputElement = document.querySelector(`#${ID} .${CLASS_INPUT}`)\n    // search input keyup\n    element.addEventListener(this.EVENT_KEYUP, (event: any) => {\n      const keyword = event.target.value.toLowerCase()\n      callback(keyword)\n    })\n\n    // clear icon\n    document.querySelector(`.${CLASS_CLEAR_ICON}`).addEventListener(this.EVENT_CLICK, () => {\n      element.value = ''\n      callback(null)\n    })\n  }\n\n  /**\n   * listen for on item click\n   *\n   * @param {Function} onSelected\n   * @param {Function} onRemove\n   * @returns {void}\n   */\n  public onItemClick(\n    onSelected: (item: SearchJSItem) => void,\n    onRemove: (item: SearchJSItem) => void,\n  ): void {\n    const items = document.querySelectorAll(`#${ID} .${CLASS_ITEM}`)\n    items.forEach((el) =>\n      // item click to select\n      el.addEventListener(this.EVENT_CLICK, (event: any) => {\n        const closeElements = event.target.closest(`.${CLASS_ITEM_CLOSE} *`)", "        if (event.target == closeElements) {\n          return\n        }\n        const parentElement = event.target.closest(`.${CLASS_ITEM}`)\n        const data = parentElement.getAttribute(ATTR_DATA_PAYLOAD)\n        onSelected(Encoder.decode(data))\n      }),\n    )\n\n    const closeItems = document.querySelectorAll(`#${ID} .${CLASS_ITEM_CLOSE}`)\n    closeItems.forEach((el) =>\n      // item click to remove from history\n      el.addEventListener(this.EVENT_CLICK, (event: any) => {\n        const parentElement = event.target.closest(`.${CLASS_ITEM_CLOSE}`)\n        const data = parentElement.getAttribute(ATTR_DATA_PAYLOAD)\n        onRemove(Encoder.decode(data))\n      }),\n    )\n  }\n}\n"]}
{"filename": "src/utils/Encoder.ts", "chunked_list": ["import { SearchJSItem } from '../types'\n\nexport class Encoder {\n  /**\n   * encode item to string\n   *\n   * @param {SearchJSItem} item\n   * @returns {string}\n   */\n  public static encode(item: SearchJSItem): string {\n    return window.btoa(escape(JSON.stringify(item)))\n  }\n\n  /**\n   * decode string to item\n   * @param {string} data\n   * @returns {SearchJSItem}\n   */\n  public static decode(data: string): SearchJSItem {\n    return JSON.parse(unescape(window.atob(data)))\n  }\n}\n"]}
{"filename": "src/themes/AvailableThemes.ts", "chunked_list": ["import { SearchJSTheme } from '../types'\n\nexport const CssBackdropBackground = '--search-js-backdrop-bg'\nexport const CssModalBackground = '--search-js-modal-bg'\nexport const CssModalBoxShadow = '--search-js-modal-box-shadow'\nexport const CssModalFooterBoxShadow = '--search-js-modal-footer-box-shadow'\nexport const CssKeyboardButtonBoxShadow = '--search-js-keyboard-button-box-shadow'\nexport const CssKeyboardButtonBackground = '--search-js-keyboard-button-bg'\nexport const CssInputBackground = '--search-js-search-input-bg'\nexport const CssInputPlaceholderColor = '--search-js-input-placeholder-color'", "export const CssInputBackground = '--search-js-search-input-bg'\nexport const CssInputPlaceholderColor = '--search-js-input-placeholder-color'\nexport const CssItemBackground = '--search-js-item-bg'\nexport const CssItemBoxShadow = '--search-js-item-box-shadow'\nexport const CssTextColor = '--search-js-text-color'\nexport const CssTheme = '--search-js-theme'\nexport const CssWidth = '--search-js-width'\nexport const CssHeight = '--search-js-height'\nexport const CssFontFamily = '--search-js-font-family'\nexport const CssPositionTop = '--search-js-top'", "export const CssFontFamily = '--search-js-font-family'\nexport const CssPositionTop = '--search-js-top'\n\nexport const AvailableThemes: any = {\n  [SearchJSTheme.ThemeDark]: {\n    [CssBackdropBackground]: 'rgba(47, 55, 69, 0.7)',\n    [CssModalBackground]: '#1b1b1d',\n    [CssModalBoxShadow]: 'inset 1px 1px 0 0 #2c2e40, 0 3px 8px 0 #000309',\n    [CssModalFooterBoxShadow]:\n      'inset 0 1px 0 0 rgba(73, 76, 106, 0.5), 0 -4px 8px 0 rgba(0, 0, 0, 0.2)',", "    [CssModalFooterBoxShadow]:\n      'inset 0 1px 0 0 rgba(73, 76, 106, 0.5), 0 -4px 8px 0 rgba(0, 0, 0, 0.2)',\n    [CssKeyboardButtonBoxShadow]:\n      'inset 0 -2px 0 0 #282d55, inset 0 0 1px 1px #51577d, 0 2px 2px 0 rgba(3, 4, 9, 0.3)',\n    [CssKeyboardButtonBackground]: 'linear-gradient(-26.5deg, transparent 0%, transparent 100%)',\n    [CssInputBackground]: 'black',\n    [CssInputPlaceholderColor]: '#aeaeae',\n    [CssItemBackground]: '#1c1e21',\n    [CssItemBoxShadow]: 'none',\n    [CssTextColor]: '#b3b3b3',", "    [CssItemBoxShadow]: 'none',\n    [CssTextColor]: '#b3b3b3',\n  },\n  [SearchJSTheme.ThemeLight]: {\n    [CssBackdropBackground]: 'rgba(101, 108, 133, 0.8)',\n    [CssModalBackground]: '#f5f6f7',\n    [CssModalBoxShadow]: 'inset 1px 1px 0 0 hsla(0, 0%, 100%, 0.5), 0 3px 8px 0 #555a64',\n    [CssModalFooterBoxShadow]: '0 -1px 0 0 #e0e3e8, 0 -3px 6px 0 rgba(69, 98, 155, 0.12)',\n    [CssKeyboardButtonBoxShadow]:\n      'inset 0 -2px 0 0 #cdcde6, inset 0 0 1px 1px #fff, 0 1px 2px 1px rgba(30, 35, 90, 0.4)',", "    [CssKeyboardButtonBoxShadow]:\n      'inset 0 -2px 0 0 #cdcde6, inset 0 0 1px 1px #fff, 0 1px 2px 1px rgba(30, 35, 90, 0.4)',\n    [CssKeyboardButtonBackground]: 'linear-gradient(-225deg, #d5dbe4, #f8f8f8)',\n    [CssInputBackground]: 'white',\n    [CssInputPlaceholderColor]: '#969faf',\n    [CssItemBackground]: 'white',\n    [CssItemBoxShadow]: '0 1px 3px 0 #d4d9e1',\n    [CssTextColor]: '#969faf',\n  },\n  [SearchJSTheme.ThemeGithubDark]: {", "  },\n  [SearchJSTheme.ThemeGithubDark]: {\n    [CssBackdropBackground]: 'rgba(1,4,9,0.8)',\n    [CssModalBackground]: '#0D1116',\n    [CssModalBoxShadow]: 'none',\n    [CssModalFooterBoxShadow]: 'none',\n    [CssKeyboardButtonBoxShadow]: 'none',\n    [CssKeyboardButtonBackground]: 'none',\n    [CssInputBackground]: 'transparent',\n    [CssInputPlaceholderColor]: '#6D7681',", "    [CssInputBackground]: 'transparent',\n    [CssInputPlaceholderColor]: '#6D7681',\n    [CssItemBackground]: 'transparent',\n    [CssItemBoxShadow]: 'none',\n    [CssTextColor]: '#C5CED6',\n    [CssTheme]: 'transparent',\n  },\n  [SearchJSTheme.ThemeGithubLight]: {\n    [CssBackdropBackground]: 'rgba(27,31,36,0.5)',\n    [CssModalBackground]: '#FFFFFF',", "    [CssBackdropBackground]: 'rgba(27,31,36,0.5)',\n    [CssModalBackground]: '#FFFFFF',\n    [CssModalBoxShadow]: 'none',\n    [CssModalFooterBoxShadow]: 'none',\n    [CssKeyboardButtonBoxShadow]: 'none',\n    [CssKeyboardButtonBackground]: 'none',\n    [CssInputBackground]: 'transparent',\n    [CssInputPlaceholderColor]: '#6E7781',\n    [CssItemBackground]: 'transparent',\n    [CssItemBoxShadow]: 'none',", "    [CssItemBackground]: 'transparent',\n    [CssItemBoxShadow]: 'none',\n    [CssTextColor]: '#1F2329',\n    [CssTheme]: 'transparent',\n  },\n}\n"]}
{"filename": "src/themes/index.ts", "chunked_list": ["import {\n  DEFAULT_HEIGHT,\n  DEFAULT_POSITION_TOP,\n  DEFAULT_THEME_COLOR,\n  DEFAULT_WIDTH,\n} from '../constant'\nimport { SearchJSConfig, SearchJSTheme } from '../types'\nimport {\n  AvailableThemes,\n  CssFontFamily,", "  AvailableThemes,\n  CssFontFamily,\n  CssHeight,\n  CssPositionTop,\n  CssTheme,\n  CssWidth,\n} from './AvailableThemes'\n\nexport class Theme {\n  /**\n   * create global css variables base on provided theme\n   *\n   * @param {SearchJSConfig} config\n   */\n  public createGlobalCssVariable(config: SearchJSConfig) {\n    const bodyStyle = window.getComputedStyle(document.body)\n    const styleElement = document.createElement('style')\n    const cssObject = {\n      [CssWidth]: config.width ?? DEFAULT_WIDTH,\n      [CssHeight]: config.height ?? DEFAULT_HEIGHT,\n      [CssTheme]: config.theme ?? DEFAULT_THEME_COLOR,\n      [CssFontFamily]: bodyStyle.getPropertyValue('font-family'),\n      [CssPositionTop]: config.positionTop ?? DEFAULT_POSITION_TOP,\n    }\n    styleElement.innerHTML = `:root{${this.getCssVariables(cssObject)} ${this.getTheme(config)}}`\n    document.head.appendChild(styleElement)\n  }\n\n  /**\n   * get list of read made themes\n   *\n   * @returns {Array<SearchJSTheme>}\n   */\n  public getReadyMadeThemes(): Array<SearchJSTheme> {\n    return [SearchJSTheme.ThemeGithubLight, SearchJSTheme.ThemeGithubDark]\n  }\n\n  /**\n   * get theme css string from config\n   *\n   * @param {SearchJSConfig} config\n   * @returns {string}\n   */\n  private getTheme(config: SearchJSConfig): string {\n    const defaultTheme = config.darkMode ? SearchJSTheme.ThemeDark : SearchJSTheme.ThemeLight\n    const themeName = this.getReadyMadeThemes().includes(config.theme as SearchJSTheme)\n      ? config.theme\n      : defaultTheme\n    return this.getCssVariables(this.getThemeValues(themeName))\n  }\n\n  /**\n   * get theme css variable values\n   *\n   * @param {string} theme\n   * @returns {object}\n   */\n  private getThemeValues(theme: string): object {\n    return AvailableThemes[theme]\n  }\n\n  /**\n   * get theme css string\n   *\n   * @param {object} obj\n   * @returns {string}\n   */\n  private getCssVariables(obj: object): string {\n    let css = ''\n    Object.entries(obj).forEach(([key, value]) => {\n      css += `${key} : ${value};`\n    })\n    return css\n  }\n}\n", "export class Theme {\n  /**\n   * create global css variables base on provided theme\n   *\n   * @param {SearchJSConfig} config\n   */\n  public createGlobalCssVariable(config: SearchJSConfig) {\n    const bodyStyle = window.getComputedStyle(document.body)\n    const styleElement = document.createElement('style')\n    const cssObject = {\n      [CssWidth]: config.width ?? DEFAULT_WIDTH,\n      [CssHeight]: config.height ?? DEFAULT_HEIGHT,\n      [CssTheme]: config.theme ?? DEFAULT_THEME_COLOR,\n      [CssFontFamily]: bodyStyle.getPropertyValue('font-family'),\n      [CssPositionTop]: config.positionTop ?? DEFAULT_POSITION_TOP,\n    }\n    styleElement.innerHTML = `:root{${this.getCssVariables(cssObject)} ${this.getTheme(config)}}`\n    document.head.appendChild(styleElement)\n  }\n\n  /**\n   * get list of read made themes\n   *\n   * @returns {Array<SearchJSTheme>}\n   */\n  public getReadyMadeThemes(): Array<SearchJSTheme> {\n    return [SearchJSTheme.ThemeGithubLight, SearchJSTheme.ThemeGithubDark]\n  }\n\n  /**\n   * get theme css string from config\n   *\n   * @param {SearchJSConfig} config\n   * @returns {string}\n   */\n  private getTheme(config: SearchJSConfig): string {\n    const defaultTheme = config.darkMode ? SearchJSTheme.ThemeDark : SearchJSTheme.ThemeLight\n    const themeName = this.getReadyMadeThemes().includes(config.theme as SearchJSTheme)\n      ? config.theme\n      : defaultTheme\n    return this.getCssVariables(this.getThemeValues(themeName))\n  }\n\n  /**\n   * get theme css variable values\n   *\n   * @param {string} theme\n   * @returns {object}\n   */\n  private getThemeValues(theme: string): object {\n    return AvailableThemes[theme]\n  }\n\n  /**\n   * get theme css string\n   *\n   * @param {object} obj\n   * @returns {string}\n   */\n  private getCssVariables(obj: object): string {\n    let css = ''\n    Object.entries(obj).forEach(([key, value]) => {\n      css += `${key} : ${value};`\n    })\n    return css\n  }\n}\n"]}
{"filename": "src/constant/index.ts", "chunked_list": ["export const DEFAULT_THEME_COLOR = '#FF2E1F'\nexport const DEFAULT_WIDTH = '400px'\nexport const DEFAULT_HEIGHT = '450px'\nexport const DEFAULT_POSITION_TOP = '85px'\n\nexport const ID = 'search-js'\nexport const ID_HISTORIES = 'search-js-histories'\nexport const ID_RESULTS = 'search-js-result'\nexport const ID_LOADING = 'search-js-loading'\n", "export const ID_LOADING = 'search-js-loading'\n\nexport const CLASS_CONTAINER = 'container'\nexport const CLASS_CLEAR_ICON = 'clear-icon'\nexport const CLASS_INPUT = 'search-input'\nexport const CLASS_ITEM = 'item'\nexport const CLASS_ITEMS = 'items'\nexport const CLASS_ITEM_CLOSE = 'item-close'\nexport const CLASS_MODAL = 'modal'\nexport const CLASS_MODAL_HEADER = 'modal-header'", "export const CLASS_MODAL = 'modal'\nexport const CLASS_MODAL_HEADER = 'modal-header'\nexport const CLASS_MODAL_FOOTER = 'modal-footer'\nexport const CLASS_MODAL_CONTENT = 'modal-content'\n\nexport const ATTR_DATA_PAYLOAD = 'data-payload'\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export enum SearchJSTheme {\n  ThemeGithubLight = 'github-light',\n  ThemeGithubDark = 'github-dark',\n  ThemeLight = 'light-theme',\n  ThemeDark = 'dark-theme',\n}\n\nexport interface SearchJSItem {\n  title: string\n  description?: string\n  [propName: string]: any\n}\n", "export interface SearchJSConfig {\n  element?: HTMLElement\n  theme?: string\n  width?: string\n  height?: string\n  darkMode?: boolean\n  positionTop?: string\n  data?: Array<SearchJSItem>\n  search?: {\n    icon?: string\n    placeholder?: string\n  }\n  onSearchDelay?: number\n  onSearch?: (keyword: string) => Array<SearchJSItem> | Promise<Array<SearchJSItem>>\n  onSelected: (data: SearchJSItem) => void\n}\n"]}
{"filename": "src/assets/Icon/index.ts", "chunked_list": ["const hashIcon = (color = '#969faf') => {\n  return `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10 3L8 21\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M16 3L14 21\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M3.5 9H21.5\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M2.5 15H20.5\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>`\n}\n\nconst historyIcon = (color = '#969faf') => {", "\nconst historyIcon = (color = '#969faf') => {\n  return `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M22 12C22 17.52 17.52 22 12 22C6.48 22 2 17.52 2 12C2 6.48 6.48 2 12 2C17.52 2 22 6.48 22 12Z\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M15.71 15.18L12.61 13.33C12.07 13.01 11.63 12.24 11.63 11.61V7.51001\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>`\n}\n\nconst searchIcon = (color = '#000000') => {\n  return `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 50 50\" width=\"25px\"><path d=\"M 21 3 C 11.601563 3 4 10.601563 4 20 C 4 29.398438 11.601563 37 21 37 C 24.355469 37 27.460938 36.015625 30.09375 34.34375 L 42.375 46.625 L 46.625 42.375 L 34.5 30.28125 C 36.679688 27.421875 38 23.878906 38 20 C 38 10.601563 30.398438 3 21 3 Z M 21 7 C 28.199219 7 34 12.800781 34 20 C 34 27.199219 28.199219 33 21 33 C 13.800781 33 8 27.199219 8 20 C 8 12.800781 13.800781 7 21 7 Z\"/></svg>`", "const searchIcon = (color = '#000000') => {\n  return `<svg fill=\"${color}\" xmlns=\"http://www.w3.org/2000/svg\"  viewBox=\"0 0 50 50\" width=\"25px\"><path d=\"M 21 3 C 11.601563 3 4 10.601563 4 20 C 4 29.398438 11.601563 37 21 37 C 24.355469 37 27.460938 36.015625 30.09375 34.34375 L 42.375 46.625 L 46.625 42.375 L 34.5 30.28125 C 36.679688 27.421875 38 23.878906 38 20 C 38 10.601563 30.398438 3 21 3 Z M 21 7 C 28.199219 7 34 12.800781 34 20 C 34 27.199219 28.199219 33 21 33 C 13.800781 33 8 27.199219 8 20 C 8 12.800781 13.800781 7 21 7 Z\"/></svg>`\n}\n\nconst closeIcon = (color = '#969faf') => {\n  return `<svg width=\"35\" height=\"35\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M9.16998 14.83L14.83 9.17004\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M14.83 14.83L9.16998 9.17004\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n</svg>`\n}", "</svg>`\n}\n\nconst loadingIcon = (color = '#969faf') => {\n  return `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M14.55 21.67C18.84 20.54 22 16.64 22 12C22 6.48 17.56 2 12 2C5.33 2 2 7.56 2 7.56M2 7.56V3M2 7.56H4.01H6.44\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n<path d=\"M2 12C2 17.52 6.48 22 12 22\" stroke=\"${color}\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-dasharray=\"3 3\"/>\n</svg>\n  `\n}", "  `\n}\n\nconst clearIcon = () => {\n  return `<svg class=\"clear-svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM15.36 14.3C15.65 14.59 15.65 15.07 15.36 15.36C15.21 15.51 15.02 15.58 14.83 15.58C14.64 15.58 14.45 15.51 14.3 15.36L12 13.06L9.7 15.36C9.55 15.51 9.36 15.58 9.17 15.58C8.98 15.58 8.79 15.51 8.64 15.36C8.35 15.07 8.35 14.59 8.64 14.3L10.94 12L8.64 9.7C8.35 9.41 8.35 8.93 8.64 8.64C8.93 8.35 9.41 8.35 9.7 8.64L12 10.94L14.3 8.64C14.59 8.35 15.07 8.35 15.36 8.64C15.65 8.93 15.65 9.41 15.36 9.7L13.06 12L15.36 14.3Z\" fill=\"#969faf\"/>\n</svg>`\n}\n\nexport { hashIcon, searchIcon, historyIcon, closeIcon, loadingIcon, clearIcon }", "\nexport { hashIcon, searchIcon, historyIcon, closeIcon, loadingIcon, clearIcon }\n"]}
