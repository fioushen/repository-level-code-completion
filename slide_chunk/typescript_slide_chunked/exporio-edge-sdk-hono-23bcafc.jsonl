{"filename": "vitest.config.ts", "chunked_list": ["import { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n    test: {\n        environment: 'miniflare',\n    },\n})\n"]}
{"filename": "test/index.test.ts", "chunked_list": ["import { Hono } from 'hono'\nimport { describe, expect, it, vi, afterEach } from 'vitest'\n\nimport { exporioMiddleware } from '../src/index'\nimport { Instructions } from '../src/types'\n\nglobal.fetch = vi.fn()\n\nconst exampleHtml: string = `\n<!DOCTYPE html>", "const exampleHtml: string = `\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Page Title</title>\n    </head>\n    <body>\n        <h1 id=\"myTeaser\">Teaser</h1>\n        <h2 id=\"myDescription\">Page Description</h2>\n        ", "        <h2 id=\"myDescription\">Page Description</h2>\n        \n        <button id=\"myButton\" style=\"color:red;background:white;\">Click Me</button>\n    </body>\n</html>\n`\n\nfunction createFetchResponse(data) {\n    return { json: () => new Promise((resolve) => resolve(data)) }\n}\n\ndescribe('Exporio middleware', () => {", "    type Variables = { contentUrl: string }\n\n    const app = new Hono<{ Variables: Variables }>()\n\n    app.use(\n        '*',\n        exporioMiddleware({\n            url: 'http://edge-api.exporio.cloud',\n            apiKey: 'testAPIKey',\n        })\n    )\n\n    app.get('*', async (c) => {\n        const contentUrl = c.get('contentUrl')\n\n        const headers = new Headers()\n        headers.set('X-contentUrl', contentUrl)\n        headers.set('Set-Cookie', 'myCookie=123; Path=/')\n\n        return new Response(exampleHtml, { headers: headers })\n    })\n\n    afterEach(() => {\n        vi.restoreAllMocks()\n    })\n\n    it('Should successfully execute Exporio Instructions', async () => {\n        const exampleInstructions: Instructions = {\n            customUrlInstruction: {\n                loadCustomUrl: true,\n                customUrl: 'http://localhost/new/',\n            },\n            rewriterInstruction: {\n                useRewriter: true,\n                transformations: [\n                    { selector: '#myTeaser', method: 'SetInnerContent', argument1: 'New Teaser', argument2: null },\n                    { selector: '#myDescription', method: 'Remove', argument1: null, argument2: null },\n                    { selector: '#myButton', method: 'SetStyleProperty', argument1: 'color', argument2: 'green' },\n                ],\n            },\n            cookieInstruction: {\n                setCookie: true,\n                cookies: [\n                    { name: 'exporioCookie1', value: '456', path: '/' },\n                    { name: 'exporioCookie2', value: '789', path: '/', expires: 'Sun, 01 Jan 2023 01:01:01 GMT' },\n                ],\n            },\n        }\n\n        // @ts-ignore\n        fetch.mockResolvedValue(createFetchResponse(exampleInstructions))\n\n        const res = await app.request('http://localhost/')\n        const resText = await res.text()\n\n        expect(res.status).toBe(200)\n        expect(res.headers.get('X-contentUrl')).toEqual('http://localhost/new/')\n        expect(res.headers.get('Set-Cookie')).toEqual(\n            'myCookie=123; Path=/, exporioCookie1=456; Path=/, exporioCookie2=789; Path=/; Expires=Sun, 01 Jan 2023 01:01:01 GMT'\n        )\n        expect(resText).toContain('<h1 id=\"myTeaser\">New Teaser</h1>')\n        expect(resText).not.toContain('<h2 id=\"myDescription\">Page Description</h2>')\n        expect(resText).toContain('<button id=\"myButton\" style=\"color:green;background:white;\">Click Me</button>')\n    })\n\n    it('Should successfully return request when Exporio Instructions do not exist', async () => {\n        // @ts-ignore\n        fetch.mockResolvedValue(createFetchResponse({}))\n\n        const res = await app.request('http://localhost/')\n        const resText = await res.text()\n\n        expect(res.status).toBe(200)\n        expect(res.headers.get('X-contentUrl')).toEqual('http://localhost/')\n        expect(res.headers.get('Set-Cookie')).toContain('myCookie=123; Path=/')\n        expect(resText).toBe(exampleHtml)\n    })\n\n    it('Should successfully return request when Exporio Edge API fails', async () => {\n        // @ts-ignore\n        fetch.mockResolvedValue(createFetchResponse(undefined))\n\n        const res = await app.request('http://localhost/abc')\n        const resText = await res.text()\n\n        expect(res.status).toBe(200)\n        expect(res.headers.get('X-contentUrl')).toEqual('http://localhost/abc')\n        expect(res.headers.get('Set-Cookie')).toContain('myCookie=123; Path=/')\n        expect(resText).toBe(exampleHtml)\n    })\n})\n"]}
{"filename": "example/src/index.ts", "chunked_list": ["import { Hono } from 'hono'\nimport { exporioMiddleware } from '@exporio/edge-sdk-hono'\n\ntype Variables = { contentUrl: string }\n\nconst app = new Hono<{ Variables: Variables }>()\n\napp.use(\n    '*',\n    exporioMiddleware({\n        url: 'https://edge-api.exporio.cloud',\n        apiKey: 'EXPORIO_API_KEY',\n    })\n)\n\napp.all('*', async (c) => {\n    // https://developers.cloudflare.com/workers/runtime-apis/fetch-event/#passthroughonexception\n    c.executionCtx.passThroughOnException()\n\n    const contentUrl = c.get('contentUrl')\n    const request = new Request(contentUrl, c.req)\n\n    const response = await fetch(request)\n\n    return new Response(response.body, response)\n})\n\nexport default app\n"]}
{"filename": "src/index.ts", "chunked_list": ["import { Context, MiddlewareHandler } from 'hono'\n\nimport { Instructions, ExporioMiddlewareOptions, RequestJson } from './types'\nimport {\n    After,\n    Append,\n    AppendGlobalCode,\n    Before,\n    Prepend,\n    Remove,", "    Prepend,\n    Remove,\n    RemoveAndKeepContent,\n    RemoveAttribute,\n    Replace,\n    SetAttribute,\n    SetInnerContent,\n    SetStyleProperty,\n} from './htmlRewriterClasses'\n", "} from './htmlRewriterClasses'\n\nexport const exporioMiddleware = (options: ExporioMiddlewareOptions): MiddlewareHandler => {\n    if (!options.url) {\n        options.url = 'https://edge-api.exporio.cloud'\n    }\n    if (!options.apiKey) {\n        throw new Error('Exporio middleware requires options for \"apiKey\"')\n    }\n\n    return async (c, next) => {\n        const exporioInstructions = await fetchExporioInstructions(c, options)\n", "        if (!exporioInstructions) {\n            c.set('contentUrl', c.req.url)\n\n            await next()\n        } else {\n            c.set('contentUrl', getContentUrl(exporioInstructions, c.req.url))\n\n            await next()\n\n            applyRewriterInstruction(c, exporioInstructions)\n            applyCookieInstruction(c.res.headers, exporioInstructions)\n        }\n    }\n}\n\nconst buildRequestJson = (c: Context, apiKey: string): RequestJson => {\n    const headersInit: HeadersInit = []\n    c.req.headers.forEach((value: string, key: string) => headersInit.push([key, value]))\n\n    return {\n        originalRequest: {\n            url: c.req.url,\n            method: c.req.method,\n            headersInit: headersInit,\n        },\n        params: {\n            API_KEY: apiKey,\n        },\n    }\n}\n\nconst fetchExporioInstructions = async (\n    c: Context,\n    options: ExporioMiddlewareOptions\n): Promise<Instructions | null> => {", "    try {\n        const requestJson = buildRequestJson(c, options.apiKey)\n        const exporioRequest = new Request(options.url, {\n            method: 'POST',\n            body: JSON.stringify(requestJson),\n            headers: { 'Content-Type': 'application/json' },\n        })\n\n        const exporioResponse = await fetch(exporioRequest)\n        return await exporioResponse.json()\n    } catch (err) {\n        console.error('Failed to fetch exporio instructions', err)\n        return null\n    }\n}\n\nconst getContentUrl = (instructions: Instructions, defaultUrl: string): string => {\n    const customUrlInstruction = instructions?.customUrlInstruction\n    return customUrlInstruction?.loadCustomUrl && customUrlInstruction?.customUrl\n        ? customUrlInstruction.customUrl\n        : defaultUrl\n}\n\nconst applyRewriterInstruction = (c: Context, instructions: Instructions) => {\n    let response = new Response(c.res.body, c.res)\n\n    instructions?.rewriterInstruction?.transformations?.forEach(({ selector, argument1, argument2, method }) => {\n        switch (method) {\n            // Default Methods\n            case 'After': {\n                const rewriter = new HTMLRewriter().on(selector, new After(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Append': {\n                const rewriter = new HTMLRewriter().on(selector, new Append(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Before': {\n                const rewriter = new HTMLRewriter().on(selector, new Before(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Prepend': {\n                const rewriter = new HTMLRewriter().on(selector, new Prepend(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Remove': {\n                const rewriter = new HTMLRewriter().on(selector, new Remove())\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'RemoveAndKeepContent': {\n                const rewriter = new HTMLRewriter().on(selector, new RemoveAndKeepContent())\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'RemoveAttribute': {\n                const rewriter = new HTMLRewriter().on(selector, new RemoveAttribute(argument1))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Replace': {\n                const rewriter = new HTMLRewriter().on(selector, new Replace(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'SetAttribute': {\n                const rewriter = new HTMLRewriter().on(selector, new SetAttribute(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'SetInnerContent': {\n                const rewriter = new HTMLRewriter().on(selector, new SetInnerContent(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            // Custom Methods\n            case 'AppendGlobalCode': {\n                const rewriter = new HTMLRewriter().on(selector, new AppendGlobalCode(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'SetStyleProperty': {\n                const rewriter = new HTMLRewriter().on(selector, new SetStyleProperty(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n        }\n    })\n\n    c.res = new Response(response.body, response)\n}\n\nconst applyCookieInstruction = (headers: Headers, instructions: Instructions) => {\n    instructions?.cookieInstruction?.cookies.forEach((cookie) => {\n        let cookieAttributes = [`${cookie.name}=${cookie.value}`]\n", "    } catch (err) {\n        console.error('Failed to fetch exporio instructions', err)\n        return null\n    }\n}\n\nconst getContentUrl = (instructions: Instructions, defaultUrl: string): string => {\n    const customUrlInstruction = instructions?.customUrlInstruction\n    return customUrlInstruction?.loadCustomUrl && customUrlInstruction?.customUrl\n        ? customUrlInstruction.customUrl\n        : defaultUrl\n}\n\nconst applyRewriterInstruction = (c: Context, instructions: Instructions) => {\n    let response = new Response(c.res.body, c.res)\n\n    instructions?.rewriterInstruction?.transformations?.forEach(({ selector, argument1, argument2, method }) => {\n        switch (method) {\n            // Default Methods\n            case 'After': {\n                const rewriter = new HTMLRewriter().on(selector, new After(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Append': {\n                const rewriter = new HTMLRewriter().on(selector, new Append(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Before': {\n                const rewriter = new HTMLRewriter().on(selector, new Before(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Prepend': {\n                const rewriter = new HTMLRewriter().on(selector, new Prepend(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Remove': {\n                const rewriter = new HTMLRewriter().on(selector, new Remove())\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'RemoveAndKeepContent': {\n                const rewriter = new HTMLRewriter().on(selector, new RemoveAndKeepContent())\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'RemoveAttribute': {\n                const rewriter = new HTMLRewriter().on(selector, new RemoveAttribute(argument1))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'Replace': {\n                const rewriter = new HTMLRewriter().on(selector, new Replace(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'SetAttribute': {\n                const rewriter = new HTMLRewriter().on(selector, new SetAttribute(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'SetInnerContent': {\n                const rewriter = new HTMLRewriter().on(selector, new SetInnerContent(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            // Custom Methods\n            case 'AppendGlobalCode': {\n                const rewriter = new HTMLRewriter().on(selector, new AppendGlobalCode(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n\n            case 'SetStyleProperty': {\n                const rewriter = new HTMLRewriter().on(selector, new SetStyleProperty(argument1, argument2))\n                response = rewriter.transform(response)\n                break\n            }\n        }\n    })\n\n    c.res = new Response(response.body, response)\n}\n\nconst applyCookieInstruction = (headers: Headers, instructions: Instructions) => {\n    instructions?.cookieInstruction?.cookies.forEach((cookie) => {\n        let cookieAttributes = [`${cookie.name}=${cookie.value}`]\n", "        if (cookie.domain) {\n            cookieAttributes.push(`Domain=${cookie.domain}`)\n        }\n        if (cookie.path) {\n            cookieAttributes.push(`Path=${cookie.path}`)\n        }\n        if (cookie.expires) {\n            cookieAttributes.push(`Expires=${cookie.expires}`)\n        }\n        if (cookie.maxAge) {\n            cookieAttributes.push(`Max-Age=${cookie.maxAge}`)\n        }", "        if (cookie.maxAge) {\n            cookieAttributes.push(`Max-Age=${cookie.maxAge}`)\n        }\n        if (cookie.httpOnly) {\n            cookieAttributes.push('HttpOnly')\n        }\n        if (cookie.secure) {\n            cookieAttributes.push('Secure')\n        }\n        if (cookie.sameSite) {\n            cookieAttributes.push(`SameSite=${cookie.sameSite}`)\n        }", "        if (cookie.sameSite) {\n            cookieAttributes.push(`SameSite=${cookie.sameSite}`)\n        }\n        if (cookie.partitioned) {\n            cookieAttributes.push('Partitioned')\n        }\n\n        headers.append('Set-Cookie', cookieAttributes.join('; '))\n    })\n}\n"]}
{"filename": "src/htmlRewriterClasses/After.ts", "chunked_list": ["class After {\n    content: string\n    contentOptions?: ContentOptions\n\n    constructor(content: string, contentOptions?: ContentOptions) {\n        this.content = content\n        this.contentOptions = contentOptions\n    }\n\n    element(element: Element) {\n        element.after(this.content, this.contentOptions)\n    }\n}\n\nexport { After }\n"]}
{"filename": "src/htmlRewriterClasses/SetStyleProperty.ts", "chunked_list": ["class SetStyleProperty {\n    propertyName: string\n    propertyValue: string\n\n    constructor(propertyName: string, propertyValue: string) {\n        this.propertyName = propertyName\n        this.propertyValue = propertyValue\n    }\n\n    element(element: Element) {\n        let currentStyleAttribute = element.getAttribute('style') || ''\n", "        if (currentStyleAttribute.includes(`${this.propertyName}:`)) {\n            const styleProperties = currentStyleAttribute.split(';')\n\n            styleProperties.forEach((property) => {\n                if (property.includes(`${this.propertyName}:`)) {\n                    currentStyleAttribute = currentStyleAttribute.replace(\n                        property,\n                        `${this.propertyName}:${this.propertyValue}`\n                    )\n                }\n            })\n        } else {\n            currentStyleAttribute += `${this.propertyName}:${this.propertyValue};`\n        }\n\n        element.setAttribute('style', currentStyleAttribute)\n    }\n}\n\nexport { SetStyleProperty }\n"]}
{"filename": "src/htmlRewriterClasses/Replace.ts", "chunked_list": ["class Replace {\n    content: string\n    contentOptions?: ContentOptions\n\n    constructor(content: string, contentOptions?: ContentOptions) {\n        this.content = content\n        this.contentOptions = contentOptions\n    }\n\n    element(element: Element) {\n        element.replace(this.content, this.contentOptions)\n    }\n}\n\nexport { Replace }\n"]}
{"filename": "src/htmlRewriterClasses/RemoveAttribute.ts", "chunked_list": ["class RemoveAttribute {\n    name: string\n\n    constructor(name: string) {\n        this.name = name\n    }\n\n    element(element: Element) {\n        element.removeAttribute(this.name)\n    }\n}\n\nexport { RemoveAttribute }\n"]}
{"filename": "src/htmlRewriterClasses/Prepend.ts", "chunked_list": ["class Prepend {\n    content: string\n    contentOptions: ContentOptions\n\n    constructor(content: string, contentOptions: ContentOptions) {\n        this.content = content\n        this.contentOptions = contentOptions\n    }\n\n    element(element: Element) {\n        element.prepend(this.content, this.contentOptions)\n    }\n}\n\nexport { Prepend }\n"]}
{"filename": "src/htmlRewriterClasses/SetAttribute.ts", "chunked_list": ["class SetAttribute {\n    name: string\n    value: string\n\n    constructor(name: string, value: string) {\n        this.name = name\n        this.value = value\n    }\n\n    element(element: Element) {\n        element.setAttribute(this.name, this.value)\n    }\n}\n\nexport { SetAttribute }\n"]}
{"filename": "src/htmlRewriterClasses/Remove.ts", "chunked_list": ["class Remove {\n    element(element: Element) {\n        element.remove()\n    }\n}\n\nexport { Remove }\n"]}
{"filename": "src/htmlRewriterClasses/Before.ts", "chunked_list": ["class Before {\n    content: string\n    contentOptions?: ContentOptions\n\n    constructor(content: string, contentOptions?: ContentOptions) {\n        this.content = content\n        this.contentOptions = contentOptions\n    }\n\n    element(element: Element) {\n        element.before(this.content, this.contentOptions)\n    }\n}\n\nexport { Before }\n"]}
{"filename": "src/htmlRewriterClasses/AppendGlobalCode.ts", "chunked_list": ["class AppendGlobalCode {\n    htmlTag?: string\n    content: string\n\n    constructor(htmlTag: string, content: string) {\n        this.htmlTag = htmlTag\n        this.content = content\n    }\n\n    element(element: Element) {\n        const contentWithTags = `<${this.htmlTag}>${this.content}</${this.htmlTag}>`\n        element.append(contentWithTags, { html: true })\n    }\n}\n\nexport { AppendGlobalCode }\n"]}
{"filename": "src/htmlRewriterClasses/Append.ts", "chunked_list": ["class Append {\n    content: string\n    contentOptions: ContentOptions\n\n    constructor(content: string, contentOptions: ContentOptions) {\n        this.content = content\n        this.contentOptions = contentOptions\n    }\n\n    element(element: Element) {\n        element.append(this.content, this.contentOptions)\n    }\n}\n\nexport { Append }\n"]}
{"filename": "src/htmlRewriterClasses/index.ts", "chunked_list": ["export { After } from './After'\nexport { Append } from './Append'\nexport { AppendGlobalCode } from './AppendGlobalCode'\nexport { Before } from './Before'\nexport { Prepend } from './Prepend'\nexport { Remove } from './Remove'\nexport { RemoveAndKeepContent } from './RemoveAndKeepContent'\nexport { RemoveAttribute } from './RemoveAttribute'\nexport { Replace } from './Replace'\nexport { SetAttribute } from './SetAttribute'", "export { Replace } from './Replace'\nexport { SetAttribute } from './SetAttribute'\nexport { SetInnerContent } from './SetInnerContent'\nexport { SetStyleProperty } from './SetStyleProperty'\n"]}
{"filename": "src/htmlRewriterClasses/SetInnerContent.ts", "chunked_list": ["class SetInnerContent {\n    content: string\n    contentOptions?: ContentOptions\n\n    constructor(content: string, contentOptions?: ContentOptions) {\n        this.content = content\n        this.contentOptions = contentOptions\n    }\n\n    element(element: Element) {\n        element.setInnerContent(this.content, this.contentOptions)\n    }\n}\n\nexport { SetInnerContent }\n"]}
{"filename": "src/htmlRewriterClasses/RemoveAndKeepContent.ts", "chunked_list": ["class RemoveAndKeepContent {\n    element(element: Element) {\n        element.removeAndKeepContent()\n    }\n}\n\nexport { RemoveAndKeepContent }\n"]}
{"filename": "src/types/general.ts", "chunked_list": ["type ExporioMiddlewareOptions = {\n    url: string\n    apiKey: string\n}\n\ntype RequestJson = {\n    originalRequest: {\n        url: string\n        method: string\n        headersInit: HeadersInit\n    }\n    params: {\n        API_KEY: string\n        [key: string]: any\n    }\n}\n\nexport { ExporioMiddlewareOptions, RequestJson }\n"]}
{"filename": "src/types/instructions.ts", "chunked_list": ["type Cookie = {\n    name: string\n    value: string\n    domain?: string\n    path?: string\n    expires?: string\n    maxAge?: string\n    httpOnly?: boolean\n    secure?: boolean\n    sameSite?: string\n    partitioned?: boolean\n}\n", "type CookieInstruction = {\n    setCookie: boolean\n    cookies: Cookie[]\n}\n\ntype Transformation = {\n    method: string\n    selector: string\n    argument1: any\n    argument2: any\n}\n", "type RewriterInstruction = {\n    useRewriter: boolean\n    transformations: Transformation[]\n}\n\ntype CustomUrlInstruction = {\n    loadCustomUrl: boolean\n    customUrl: string | null\n}\n\ntype Instructions = {\n    customUrlInstruction: CustomUrlInstruction\n    rewriterInstruction: RewriterInstruction\n    cookieInstruction: CookieInstruction\n}\n\nexport { Instructions, CustomUrlInstruction, RewriterInstruction, Transformation, CookieInstruction, Cookie }\n", "type Instructions = {\n    customUrlInstruction: CustomUrlInstruction\n    rewriterInstruction: RewriterInstruction\n    cookieInstruction: CookieInstruction\n}\n\nexport { Instructions, CustomUrlInstruction, RewriterInstruction, Transformation, CookieInstruction, Cookie }\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export { ExporioMiddlewareOptions, RequestJson } from './general'\n\nexport {\n    Instructions,\n    CustomUrlInstruction,\n    RewriterInstruction,\n    Transformation,\n    CookieInstruction,\n    Cookie,\n} from './instructions'", "    Cookie,\n} from './instructions'\n"]}
