{"filename": "tests/musixmatch.test.ts", "chunked_list": ["import { expect, test } from \"bun:test\";\nimport { Musixmatch } from \"../src\";\n\ntest(\"search\", async () => {\n    const result = await Musixmatch.search(\"starboy weeknd\");\n    expect(result[0].track_name).toBe(\"Starboy\");\n});\n\ntest(\"searchLyrics\", async () => {\n    const result = await Musixmatch.searchLyrics(\"starboy weeknd\");", "test(\"searchLyrics\", async () => {\n    const result = await Musixmatch.searchLyrics(\"starboy weeknd\");\n    expect(result[0]).toBe(\"I\u2032m tryna put you in the worst mood, ah\");\n});\n\ntest(\"getLyricsFromUrl\", async () => {\n    const result = await Musixmatch.getLyricsFromUrl(\"https://www.musixmatch.com/lyrics/The-Weeknd-feat-Daft-Punk/starboy-1\");\n    expect(result[0]).toBe(\"I\u2032m tryna put you in the worst mood, ah\");\n});", "});"]}
{"filename": "tests/spotifly.test.ts", "chunked_list": ["import { expect, test } from \"bun:test\";\nimport { Spotifly } from \"../src\";\n\nconst sp = new Spotifly(process.env.SPOTIFY_COOKIE);\n\ntest(\"getHomepage\", async () => {\n    const home = await sp.getHomepage();\n    expect(home.data.home.greeting.text).toStartWith(\"Good\");\n});\n", "});\n\ntest(\"getTrack\", async () => {\n    const track = await sp.getTrack(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(track.data.trackUnion.name).toBe(\"Starboy\");\n});\n\ntest(\"getTrackCredits\", async () => {\n    const track = await sp.getTrackCredits(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(track.trackTitle).toBe(\"Starboy\");", "    const track = await sp.getTrackCredits(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(track.trackTitle).toBe(\"Starboy\");\n});\n\ntest(\"getRelatedTrackArtists\", async () => {\n    const related = await sp.getRelatedTrackArtists(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(related.data.trackUnion.otherArtists.items[0].artist.profile.name).toBe(\"Daft Punk\");\n});\n\ntest(\"getArtist\", async () => {", "\ntest(\"getArtist\", async () => {\n    const artist = await sp.getArtist(\"1Xyo4u8uXC1ZmMpatF05PJ\");\n    expect(artist.data.artistUnion.profile.name).toBe(\"The Weeknd\");\n});\n\ntest(\"getAlbum\", async () => {\n    const album = await sp.getAlbum(\"2ODvWsOgouMbaA5xf0RkJe\", 0);\n    expect(album.data.albumUnion.name).toBe(\"Starboy\");\n});", "    expect(album.data.albumUnion.name).toBe(\"Starboy\");\n});\n\ntest(\"getPlaylist\", async () => {\n    const playlist = await sp.getPlaylist(\"37i9dQZF1DWWY64wDtewQt\", 0);\n    expect(playlist.data.playlistV2.name).toBe(\"phonk\");\n});\n\ntest(\"getPlaylistMetadata\", async () => {\n    const playlist = await sp.getPlaylistMetadata(\"37i9dQZF1DWWY64wDtewQt\", 0);", "test(\"getPlaylistMetadata\", async () => {\n    const playlist = await sp.getPlaylistMetadata(\"37i9dQZF1DWWY64wDtewQt\", 0);\n    expect(playlist.data.playlistV2.name).toBe(\"phonk\");\n});\n\ntest(\"getPlaylistContents\", async () => {\n    const playlist = await sp.getPlaylistContents(\"37i9dQZF1DWWY64wDtewQt\", 0);\n    expect(playlist.data.playlistV2.content.items).toBeArray();\n});\n", "});\n\ntest(\"getUser\", async () => {\n    const user = await sp.getUser(\"p2ztvcigo8b6m046a4gbczu3w\");\n    expect(user.name).toBe(\"meow\");\n});\n\ntest(\"getSection\", async () => {\n    const section = await sp.getSection(\"0JQ5DAuChZYPe9iDhh2mJz\");\n    expect(section.data.homeSections.__typename).toBe(\"HomeSectionCollection\");", "    const section = await sp.getSection(\"0JQ5DAuChZYPe9iDhh2mJz\");\n    expect(section.data.homeSections.__typename).toBe(\"HomeSectionCollection\");\n});\n\ntest(\"getPodcast\", async () => {\n    const podcast = await sp.getPodcast(\"1VXcH8QHkjRcTCEd88U3ti\");\n    expect(podcast.data.podcastUnionV2.name).toBe(\"TED Talks Daily\");\n});\n\ntest(\"getPodcastEpisodes\", async () => {", "\ntest(\"getPodcastEpisodes\", async () => {\n    const episodes = await sp.getPodcastEpisodes(\"1VXcH8QHkjRcTCEd88U3ti\", 0);\n    expect(episodes.data.podcastUnionV2.name).toBe(\"TED Talks Daily\");\n});\n\ntest(\"getEpisode\", async () => {\n    const episode = await sp.getEpisode(\"2NrrQkqYJCFusdaV3yESp8\");\n    expect(episode.data.episodeUnionV2.name).toBe(\"Stories of the year | After Hours\");\n});", "    expect(episode.data.episodeUnionV2.name).toBe(\"Stories of the year | After Hours\");\n});\n\ntest(\"searchAll\", async () => {\n    const search = await sp.searchAll(\"closer chainsmokers\", 1);\n    expect(search.data.searchV2.tracksV2.items[0].item.data.name).toBe(\"Closer\");\n});\n\ntest(\"searchTracks\", async () => {\n    const search = await sp.searchTracks(\"closer chainsmokers\", 1);", "test(\"searchTracks\", async () => {\n    const search = await sp.searchTracks(\"closer chainsmokers\", 1);\n    expect(search.data.searchV2.tracksV2.items[0].item.data.name).toBe(\"Closer\");\n});\n\ntest(\"searchAlbums\", async () => {\n    const search = await sp.searchAlbums(\"starboy weeknd\", 1);\n    expect(search.data.searchV2.albums.items[0].data.name).toBe(\"Starboy\");\n});\n", "});\n\ntest(\"searchPlaylists\", async () => {\n    const search = await sp.searchPlaylists(\"phonk\", 1);\n    expect(search.data.searchV2.playlists.items[0].data.name).toBe(\"phonk\");\n});\n\ntest(\"searchArtists\", async () => {\n    const search = await sp.searchArtists(\"weeknd\", 1);\n    expect(search.data.searchV2.artists.items[0].data.profile.name).toBe(\"The Weeknd\");", "    const search = await sp.searchArtists(\"weeknd\", 1);\n    expect(search.data.searchV2.artists.items[0].data.profile.name).toBe(\"The Weeknd\");\n});\n\ntest(\"searchUsers\", async () => {\n    const search = await sp.searchUsers(\"meow\", 1);\n    expect(search.data.searchV2.users.items[0].data.displayName).toBe(\"MEOW!\");\n});\n\ntest(\"searchPodcasts\", async () => {", "\ntest(\"searchPodcasts\", async () => {\n    const search = await sp.searchPodcasts(\"ted talks daily\", 1);\n    expect(search.data.searchV2.episodes.items[0].data.podcastV2.data.name).toBe(\"TED Talks Daily\");\n});\n\ntest(\"getTrackLyrics\", async () => {\n    const lyrics = await sp.getTrackLyrics(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(lyrics[0]).toBe(\"I\u2032m tryna put you in the worst mood, ah\");\n});", "    expect(lyrics[0]).toBe(\"I\u2032m tryna put you in the worst mood, ah\");\n});\n\ntest(\"extractImageColors\", async () => {\n    const colors = await sp.extractImageColors(\"https://i.scdn.co/image/ab67616d00001e024718e2b124f79258be7bc452\");\n    expect(colors.data.extractedColors[0].colorRaw.hex).toBe(\"#A00030\");\n});\n\ntest(\"getMyProfile\", async () => {\n    const profile = await sp.getMyProfile();", "test(\"getMyProfile\", async () => {\n    const profile = await sp.getMyProfile();\n    expect(profile.id).toBeString();\n});\n\ntest(\"getMyLibrary\", async () => {\n    const library = await sp.getMyLibrary();\n    expect(library.data.me.libraryV2.page.items.length).toBeGreaterThan(1);\n});\n", "});\n\ntest(\"getMyProductState\", async () => {\n    const state = await sp.getMyProductState();\n    expect(state.product).toBeString();\n});\n\ntest(\"getTrackColorLyrics\", async () => {\n    const lyrics = await sp.getTrackColorLyrics(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(lyrics.lyrics.lines[0].words).toBe(\"I'm tryna put you in the worst mood, ah\");", "    const lyrics = await sp.getTrackColorLyrics(\"7MXVkk9YMctZqd1Srtv4MB\");\n    expect(lyrics.lyrics.lines[0].words).toBe(\"I'm tryna put you in the worst mood, ah\");\n});\n\ntest(\"getMyLikedSongs\", async () => {\n    const songs = await sp.getMyLikedSongs();\n    expect(songs.data.me.library.tracks.items).toBeArray();\n});"]}
{"filename": "tests/parse.test.ts", "chunked_list": ["import { expect, test } from \"bun:test\";\nimport { Parse } from \"../src\";\n\ntest(\"urlToId\", () => {\n    expect(Parse.urlToId(\"https://open.spotify.com/track/7MXVkk9YMctZqd1Srtv4MB\"))\n        .toBe(\"7MXVkk9YMctZqd1Srtv4MB\");\n});\n\ntest(\"uriToId\", () => {\n    expect(Parse.uriToId(\"spotify:track:7MXVkk9YMctZqd1Srtv4MB\"))", "test(\"uriToId\", () => {\n    expect(Parse.uriToId(\"spotify:track:7MXVkk9YMctZqd1Srtv4MB\"))\n        .toBe(\"7MXVkk9YMctZqd1Srtv4MB\");\n});\n\ntest(\"urlToUri\", () => {\n    expect(Parse.urlToUri(\"https://open.spotify.com/track/7MXVkk9YMctZqd1Srtv4MB\"))\n        .toBe(\"spotify:track:7MXVkk9YMctZqd1Srtv4MB\");\n});\n", "});\n\ntest(\"uriToUrl\", () => {\n    expect(Parse.uriToUrl(\"spotify:track:7MXVkk9YMctZqd1Srtv4MB\"))\n        .toBe(\"https://open.spotify.com/track/7MXVkk9YMctZqd1Srtv4MB\");\n});"]}
{"filename": "src/base.ts", "chunked_list": ["import { SpotifyGetToken, SpotifyMyProfile, SpotifyPlaylistContents, SpotifyPlaylistMetadata } from \"./types\";\n\nexport class SpotiflyBase {\n\n    protected token = \"\";\n    protected tokenExpirationTimestampMs = -1;\n    protected cookie: string;\n    private myProfileId = \"\";\n\n    constructor(cookie?: string) {\n        this.cookie = cookie ?? \"\";\n    }\n\n    protected async refreshToken() {", "        if (this.tokenExpirationTimestampMs > Date.now()) return;\n        const response = await (await fetch(\"https://open.spotify.com/get_access_token\", {\n            headers: { cookie: this.cookie }\n        })).json<SpotifyGetToken>();\n        this.token = \"Bearer \" + response.accessToken;\n        this.tokenExpirationTimestampMs = response.accessTokenExpirationTimestampMs;\n    }\n\n    protected async fetch<T>(url: string, optionalHeaders?: { [index: string]: string; }) {\n        await this.refreshToken();\n        return (await fetch(url, {\n            headers: { authorization: this.token, ...optionalHeaders }\n        })).json<T>();\n    }\n\n    protected async post<T>(url: string, body: string) {\n        await this.refreshToken();\n        return (await fetch(url, {\n            headers: {\n                authorization: this.token,\n                accept: \"application/json\",\n                \"content-type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: body\n        })).json<T>();\n    }\n\n    protected async getPlaylistMetadata(id: string, limit = 50) {\n        return this.fetch<SpotifyPlaylistMetadata>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylistMetadata&variables=%7B%22uri%22%3A%22spotify%3Aplaylist%3A${id}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%226f7fef1ef9760ba77aeb68d8153d458eeec2dce3430cef02b5f094a8ef9a465d%22%7D%7D`);\n    }\n\n    protected async getPlaylistContents(id: string, limit = 50) {\n        return this.fetch<SpotifyPlaylistContents>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylistContents&variables=%7B%22uri%22%3A%22spotify%3Aplaylist%3A${id}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22c56c706a062f82052d87fdaeeb300a258d2d54153222ef360682a0ee625284d9%22%7D%7D`);\n    }\n\n    protected async getMyProfile() {", "        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyMyProfile>(\"https://api.spotify.com/v1/me\");\n    }\n\n    protected async getMyProfileId() {\n        return this.myProfileId === \"\" ? this.myProfileId = (await this.getMyProfile()).id : this.myProfileId;\n    }\n\n}"]}
{"filename": "src/playlist.ts", "chunked_list": ["import { SpotiflyBase } from \"./base.js\";\nimport { Parse } from \"./parse.js\";\n\nexport class SpotiflyPlaylist extends SpotiflyBase {\n\n    public id = \"\";\n\n    constructor(cookie: string) {\n        super(cookie);\n    }\n\n    public async create(name: string) {\n        const [myProfileId, newPlaylist] = await Promise.all([\n            this.getMyProfileId(),\n            this.post<{ uri: string, revision: string; }>(\n                \"https://spclient.wg.spotify.com/playlist/v2/playlist\",\n                `{\"ops\":[{\"kind\":6,\"updateListAttributes\":{\"newAttributes\":{\"values\":{\"name\":\"${name}\",\"formatAttributes\":[],\"pictureSize\":[]},\"noValue\":[]}}}]}`\n            )\n        ]);\n        await this.post(\n            `https://spclient.wg.spotify.com/playlist/v2/user/${myProfileId}/rootlist/changes`,\n            `{\"deltas\":[{\"ops\":[{\"kind\":2,\"add\":{\"items\":[{\"uri\":\"${newPlaylist.uri}\",\"attributes\":{\"timestamp\":\"${Date.now()}\",\"formatAttributes\":[],\"availableSignals\":[]}}],\"addFirst\":true}}],\"info\":{\"source\":{\"client\":5}}}],\"wantResultingRevisions\":false,\"wantSyncResult\":false,\"nonces\":[]}`\n        );\n        this.id = Parse.uriToId(newPlaylist.uri);\n        return newPlaylist;\n    }\n\n    public async rename(newName: string) {\n        return this.post(\n            `https://spclient.wg.spotify.com/playlist/v2/playlist/${this.id}/changes`,\n            `{\"deltas\":[{\"ops\":[{\"kind\":6,\"updateListAttributes\":{\"newAttributes\":{\"values\":{\"name\":\"${newName}\",\"formatAttributes\":[],\"pictureSize\":[]},\"noValue\":[]}}}],\"info\":{\"source\":{\"client\":5}}}],\"wantResultingRevisions\":false,\"wantSyncResult\":false,\"nonces\":[]}`\n        );\n    }\n\n    public async changeDescription(newDescription: string) {\n        return this.post(\n            `https://spclient.wg.spotify.com/playlist/v2/playlist/${this.id}/changes`,\n            `{\"deltas\":[{\"ops\":[{\"kind\":6,\"updateListAttributes\":{\"newAttributes\":{\"values\":{\"description\":\"${newDescription}\",\"formatAttributes\":[],\"pictureSize\":[]},\"noValue\":[]}}}],\"info\":{\"source\":{\"client\":5}}}],\"wantResultingRevisions\":false,\"wantSyncResult\":false,\"nonces\":[]}`\n        );\n    }\n\n    public async fetchMetadata(limit = 50) {\n        return (await this.getPlaylistMetadata(this.id, limit)).data.playlistV2;\n    }\n\n    public async fetchContents(limit = 50) {\n        return (await this.getPlaylistContents(this.id, limit)).data.playlistV2.content.items;\n    }\n\n    public async add(...trackUris: string[]) {\n        return this.post(\n            \"https://api-partner.spotify.com/pathfinder/v1/query\",\n            `{\"variables\":{\"uris\":${JSON.stringify(trackUris)},\"playlistUri\":\"spotify:playlist:${this.id}\",\"newPosition\":{\"moveType\":\"BOTTOM_OF_PLAYLIST\",\"fromUid\":null}},\"operationName\":\"addToPlaylist\",\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"200b7618afd05364c4aafb95e2070249ed87ee3f08fc4d2f1d5d04fdf1a516d9\"}}}`\n        );\n    }\n\n    public async remove(...trackUris: string[]) {\n        const contents = await this.fetchContents();\n        const uids = [] as string[];", "        contents.forEach(x => { if (trackUris.includes(x.itemV2.data.uri)) uids.push(x.uid); });\n        return this.post(\n            \"https://api-partner.spotify.com/pathfinder/v1/query\",\n            `{\"variables\":{\"playlistUri\":\"spotify:playlist:${this.id}\",\"uids\":${JSON.stringify(uids)}},\"operationName\":\"removeFromPlaylist\",\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"c0202852f3743f013eb453bfa15637c9da2d52a437c528960f4d10a15f6dfb49\"}}}`\n        );\n    }\n\n    public async cloneFrom(id: string, config?: { name?: string, description?: string, limit?: number; }) {\n        const metadata = await this.getPlaylistMetadata(id, config?.limit ?? 50);\n        await this.create(config?.name ?? metadata.data.playlistV2.name);\n        this.changeDescription(config?.description ?? metadata.data.playlistV2.description);\n        this.add(...metadata.data.playlistV2.content.items.map(x => x.itemV2.data.uri));\n    }\n\n    public async delete() {\n        const myProfileId = await this.getMyProfileId();\n        const response = await this.post(\n            `https://spclient.wg.spotify.com/playlist/v2/user/${myProfileId}/rootlist/changes`,\n            `{\"deltas\":[{\"ops\":[{\"kind\":3,\"rem\":{\"items\":[{\"uri\":\"spotify:playlist:${this.id}\"}],\"itemsAsKey\":true}}],\"info\":{\"source\":{\"client\":5}}}],\"wantResultingRevisions\":false,\"wantSyncResult\":false,\"nonces\":[]}`\n        );\n        this.id = \"\";\n        return response;\n    }\n\n}"]}
{"filename": "src/musixmatch.ts", "chunked_list": ["import { MusixmatchSearch } from \"./types/musixmatchSearch\";\n\nexport namespace Musixmatch {\n\n    export async function search(terms: string) {\n        const searchResponse = await (await fetch(`https://www.musixmatch.com/search/${encodeURIComponent(terms)}`)).text();\n        return [...searchResponse.matchAll(/attributes\":(.*),\"id\":/g)].map(x => JSON.parse(x[1])) as MusixmatchSearch[];\n    }\n\n    export async function getLyricsFromUrl(url: string) {\n        const trackResponse = await (await fetch(url)).text();\n        return trackResponse.match(/\"body\":\"(.*)\",\"language\":/)![1].split(\"\\\\n\");\n    }\n", "    export async function getLyricsFromUrl(url: string) {\n        const trackResponse = await (await fetch(url)).text();\n        return trackResponse.match(/\"body\":\"(.*)\",\"language\":/)![1].split(\"\\\\n\");\n    }\n\n    export async function searchLyrics(terms: string) {\n        const searchResponse = await (await fetch(`https://www.musixmatch.com/search/${encodeURIComponent(terms)}`)).text();\n        const topResultUrl = JSON.parse(`\"${searchResponse.match(/track_share_url\":\"(.*)\",\"track_edit/)![1]}\"`);\n        const trackResponse = await (await fetch(topResultUrl)).text();\n        return trackResponse.match(/\"body\":\"(.*)\",\"language\":/)![1].split(\"\\\\n\");\n    }\n\n}"]}
{"filename": "src/index.ts", "chunked_list": ["import { SpotiflyBase } from \"./base.js\";\nimport { Musixmatch } from \"./musixmatch.js\";\nimport { SpotifyAlbum, SpotifyArtist, SpotifyColorLyrics, SpotifyEpisode, SpotifyExtractedColors, SpotifyHome, SpotifyLikedSongs, SpotifyLikedSongsAdd, SpotifyLikedSongsRemove, SpotifyMyLibrary, SpotifyPlaylist, SpotifyPodcast, SpotifyPodcastEpisodes, SpotifyProductState, SpotifyRelatedTrackArtists, SpotifySearchAlbums, SpotifySearchAll, SpotifySearchArtists, SpotifySearchPlaylists, SpotifySearchPodcasts, SpotifySearchTracks, SpotifySearchUsers, SpotifySection, SpotifyTrack, SpotifyTrackCredits, SpotifyUser } from \"./types\";\n\nclass SpotiflyMain extends SpotiflyBase {\n\n    constructor(cookie?: string) {\n        super(cookie);\n    }\n\n    public async getHomepage() {\n        return this.fetch<SpotifyHome>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=home&variables=%7B%22timeZone%22%3A%22${encodeURIComponent(Intl.DateTimeFormat().resolvedOptions().timeZone)}%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22bbc1b1a421216c1299382b076c1aa8d52b91a0dfc91a4ae431a05b0a43a721e0%22%7D%7D`);\n    }\n\n    public async getTrack(id: string) {\n        return this.fetch<SpotifyTrack>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=getTrack&variables=%7B%22uri%22%3A%22spotify%3Atrack%3A${id}%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22d208301e63ccb8504831114cb8db1201636a016187d7c832c8c00933e2cd64c6%22%7D%7D`);\n    }\n\n    public async getTrackCredits(id: string) {\n        return this.fetch<SpotifyTrackCredits>(`https://spclient.wg.spotify.com/track-credits-view/v0/experimental/${id}/credits`);\n    }\n\n    public async getRelatedTrackArtists(id: string) {\n        return this.fetch<SpotifyRelatedTrackArtists>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=getRichTrackArtists&variables=%7B%22uri%22%3A%22spotify%3Atrack%3A${id}%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22b73a738f01c30e4dd90bc7e4c0e59f4d690a74f2b0c48a2eabbfd798a4a7e76a%22%7D%7D`);\n    }\n\n    public async getArtist(id: string) {\n        return this.fetch<SpotifyArtist>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=queryArtistOverview&variables=%7B%22uri%22%3A%22spotify%3Aartist%3A${id}%22%2C%22locale%22%3A%22%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22b82fd661d09d47afff0d0239b165e01c7b21926923064ecc7e63f0cde2b12f4e%22%7D%7D`);\n    }\n\n    public async getAlbum(id: string, limit = 50) {\n        return this.fetch<SpotifyAlbum>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=getAlbum&variables=%7B%22uri%22%3A%22spotify%3Aalbum%3A${id}%22%2C%22locale%22%3A%22%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%2246ae954ef2d2fe7732b4b2b4022157b2e18b7ea84f70591ceb164e4de1b5d5d3%22%7D%7D`);\n    }\n\n    public async getPlaylist(id: string, limit = 50) {\n        return this.fetch<SpotifyPlaylist>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchPlaylist&variables=%7B%22uri%22%3A%22spotify%3Aplaylist%3A${id}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22e578eda4f77aae54294a48eac85e2a42ddb203faf6ea12b3fddaec5aa32918a3%22%7D%7D`);\n    }\n\n    public async getPlaylistMetadata(id: string, limit = 50) {\n        return super.getPlaylistMetadata(id, limit);\n    }\n\n    public async getPlaylistContents(id: string, limit = 50) {\n        return super.getPlaylistContents(id, limit);\n    }\n\n    public async getUser(id: string, config = { playlistLimit: 10, artistLimit: 10, episodeLimit: 10 }) {\n        return this.fetch<SpotifyUser>(`https://spclient.wg.spotify.com/user-profile-view/v3/profile/${id}?playlist_limit=${config.playlistLimit}&artist_limit=${config.artistLimit}&episode_limit=${config.episodeLimit}&market=from_token`);\n    }\n\n    public async getSection(id: string) {\n        return this.fetch<SpotifySection>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=homeSection&variables=%7B%22uri%22%3A%22spotify%3Asection%3A${id}%22%2C%22timeZone%22%3A%22${encodeURIComponent(Intl.DateTimeFormat().resolvedOptions().timeZone)}%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%226585470c10e5d55914901477e4669bc0b87296c6bcd2b10c96a736d14b194dce%22%7D%7D`);\n    }\n\n    public async getPodcast(id: string) {\n        return this.fetch<SpotifyPodcast>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=queryShowMetadataV2&variables=%7B%22uri%22%3A%22spotify%3Ashow%3A${id}%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22ac51248fe153075d9bc237ea1054f16c1b4653b641758864afef8b40b4c25194%22%7D%7D`);\n    }\n\n    public async getPodcastEpisodes(id: string, limit = 50) {\n        return this.fetch<SpotifyPodcastEpisodes>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=queryPodcastEpisodes&variables=%7B%22uri%22%3A%22spotify%3Ashow%3A${id}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22c2f23625b8a2dd5791b06521700d9500461e0489bd065800b208daf0886bdb60%22%7D%7D`);\n    }\n\n    public async getEpisode(id: string) {\n        return this.fetch<SpotifyEpisode>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=getEpisodeOrChapter&variables=%7B%22uri%22%3A%22spotify%3Aepisode%3A${id}%22%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%2293d19545cfb4cde00b33a2e32e925943980fba398dbcd15e9af603f11d0464a7%22%7D%7D`);\n    }\n\n    public async searchAll(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchAll>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchDesktop&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%2C%22numberOfTopResults%22%3A5%2C%22includeAudiobooks%22%3Atrue%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%2260efc08b8017f382e73ba2e02ac03d3c3b209610de99da618f36252e457665dd%22%7D%7D`);\n    }\n\n    public async searchTracks(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchTracks>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchTracks&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%2C%22numberOfTopResults%22%3A20%2C%22includeAudiobooks%22%3Afalse%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%221d021289df50166c61630e02f002ec91182b518e56bcd681ac6b0640390c0245%22%7D%7D`);\n    }\n\n    public async searchAlbums(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchAlbums>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchAlbums&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%2C%22numberOfTopResults%22%3A20%2C%22includeAudiobooks%22%3Atrue%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%2237197f541586fe988541bb1784390832f0bb27e541cfe57a1fc63db3598f4ffd%22%7D%7D`);\n    }\n\n    public async searchPlaylists(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchPlaylists>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchPlaylists&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%2C%22numberOfTopResults%22%3A20%2C%22includeAudiobooks%22%3Atrue%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%2287b755d95fd29046c72b8c236dd2d7e5768cca596812551032240f36a29be704%22%7D%7D`);\n    }\n\n    public async searchArtists(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchArtists>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchArtists&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%2C%22numberOfTopResults%22%3A20%2C%22includeAudiobooks%22%3Atrue%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%224e7cdd33163874d9db5e08e6fabc51ac3a1c7f3588f4190fc04c5b863f6b82bd%22%7D%7D`);\n    }\n\n    public async searchUsers(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchUsers>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchUsers&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%2C%22numberOfTopResults%22%3A20%2C%22includeAudiobooks%22%3Atrue%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22f82af76fbfa6f57a45e0f013efc0d4ae53f722932a85aca18d32557c637b06c8%22%7D%7D`);\n    }\n\n    public async searchPodcasts(terms: string, limit = 10) {\n        return this.fetch<SpotifySearchPodcasts>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=searchFullEpisodes&variables=%7B%22searchTerm%22%3A%22${encodeURIComponent(terms)}%22%2C%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22d973540aa4cb9983213c17082ec814b9fb85155c58b817325be9243691077e43%22%7D%7D`);\n    }\n\n    public async getTrackLyrics(id: string) {\n        const track = await this.getTrack(id);\n        return Musixmatch.searchLyrics(`${track.data.trackUnion.name} ${track.data.trackUnion.artistsWithRoles.items[0].artist.profile.name}`);\n    }\n\n    public async extractImageColors(...urls: string[]) {\n        return this.fetch<SpotifyExtractedColors>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchExtractedColors&variables=%7B%22uris%22%3A${encodeURIComponent(JSON.stringify(urls))}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22d7696dd106f3c84a1f3ca37225a1de292e66a2d5aced37a66632585eeb3bbbfa%22%7D%7D`);\n    }\n\n    /* Cookie Exclusive Functions */\n\n    public async getMyProfile() {\n        return super.getMyProfile();\n    }\n\n    public async getMyLibrary(config: Partial<{\n        filter: [] | [\"Playlists\"] | [\"Playlists\", \"By you\"] | [\"Artists\"],\n        order: \"Recents\" | \"Recently Added\" | \"Alphabetical\" | \"Creator\" | \"Custom Order\",\n        textFilter: string,\n        limit: number;\n    }> = { filter: [], order: \"Recents\", textFilter: \"\", limit: 50 }) {", "        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyMyLibrary>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=libraryV2&variables=%7B%22filters%22%3A${encodeURIComponent(JSON.stringify(config.filter))}%2C%22order%22%3A%22${config.order}%22%2C%22textFilter%22%3A%22${config.textFilter}%22%2C%22features%22%3A%5B%22LIKED_SONGS%22%2C%22YOUR_EPISODES%22%5D%2C%22limit%22%3A${config.limit}%2C%22offset%22%3A0%2C%22flatten%22%3Atrue%2C%22folderUri%22%3Anull%2C%22includeFoldersWhenFlattening%22%3Atrue%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%22e1f99520ac4e82cba64e9ebdee4ed5532024ee5af6956e8465e99709a8f8348f%22%7D%7D`);\n    }\n\n    public async getMyProductState() {\n        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyProductState>(\"https://spclient.wg.spotify.com/melody/v1/product_state?market=from_token\");\n    }\n\n    public async getMyLikedSongs(limit = 25) {\n        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyLikedSongs>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchLibraryTracks&variables=%7B%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%228474ec383b530ce3e54611fca2d8e3da57ef5612877838b8dbf00bd9fc692dfb%22%7D%7D`);\n    }\n\n    public async addToLikedSongs(...trackUris: string[]) {", "        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyLikedSongs>(`https://api-partner.spotify.com/pathfinder/v1/query?operationName=fetchLibraryTracks&variables=%7B%22offset%22%3A0%2C%22limit%22%3A${limit}%7D&extensions=%7B%22persistedQuery%22%3A%7B%22version%22%3A1%2C%22sha256Hash%22%3A%228474ec383b530ce3e54611fca2d8e3da57ef5612877838b8dbf00bd9fc692dfb%22%7D%7D`);\n    }\n\n    public async addToLikedSongs(...trackUris: string[]) {\n        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.post<SpotifyLikedSongsAdd>(\n            \"https://api-partner.spotify.com/pathfinder/v1/query\",\n            `{\"variables\":{\"uris\":${JSON.stringify(trackUris)}},\"operationName\":\"addToLibrary\",\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"656c491c3f65d9d08d259be6632f4ef1931540ebcf766488ed17f76bb9156d15\"}}}`\n        );\n    }\n\n    public async removeFromLikedSongs(...trackUris: string[]) {", "        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.post<SpotifyLikedSongsRemove>(\n            \"https://api-partner.spotify.com/pathfinder/v1/query\",\n            `{\"variables\":{\"uris\":${JSON.stringify(trackUris)}},\"operationName\":\"removeFromLibrary\",\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"1103bfd4b9d80275950bff95ef6d41a02cec3357e8f7ecd8974528043739677c\"}}}`\n        );\n    }\n\n    public async getTrackColorLyrics(id: string, imgUrl?: string) {\n        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyColorLyrics>(\n            `https://spclient.wg.spotify.com/color-lyrics/v2/track/${id}${imgUrl ? `/image/${encodeURIComponent(imgUrl)}` : \"\"}?format=json&vocalRemoval=false&market=from_token`,\n            { \"app-platform\": \"WebPlayer\" }\n        );\n    }\n\n}\n\nexport { Parse } from \"./parse.js\";\nexport { SpotiflyPlaylist } from \"./playlist.js\";\nexport { Musixmatch, SpotiflyMain as Spotifly };", "        if (!this.cookie) throw Error(\"no cookie provided\");\n        return this.fetch<SpotifyColorLyrics>(\n            `https://spclient.wg.spotify.com/color-lyrics/v2/track/${id}${imgUrl ? `/image/${encodeURIComponent(imgUrl)}` : \"\"}?format=json&vocalRemoval=false&market=from_token`,\n            { \"app-platform\": \"WebPlayer\" }\n        );\n    }\n\n}\n\nexport { Parse } from \"./parse.js\";\nexport { SpotiflyPlaylist } from \"./playlist.js\";\nexport { Musixmatch, SpotiflyMain as Spotifly };"]}
{"filename": "src/parse.ts", "chunked_list": ["export namespace Parse {\n\n    export function urlToId(url: string) {\n        return new URL(url).pathname.split(\"/\")[2];\n    }\n\n    export function uriToId(uri: string) {\n        return uri.split(\":\")[2];\n    }\n\n    export function urlToUri(url: string) {\n        const parts = new URL(url).pathname.split(\"/\");\n        return `spotify:${parts[1]}:${parts[2]}`;\n    }\n", "    export function urlToUri(url: string) {\n        const parts = new URL(url).pathname.split(\"/\");\n        return `spotify:${parts[1]}:${parts[2]}`;\n    }\n\n    export function uriToUrl(uri: string) {\n        const parts = uri.split(\":\");\n        return `https://open.spotify.com/${parts[1]}/${parts[2]}`;\n    }\n\n}"]}
{"filename": "src/types/playlistContents.ts", "chunked_list": ["export type SpotifyPlaylistContents = {\n    data: {\n        playlistV2: {\n            __typename: string\n            content: {\n                __typename: string\n                totalCount: number\n                pagingInfo: {\n                    offset: number\n                    limit: number\n                }\n                items: Array<{\n                    uid: string\n                    addedAt: {\n                        isoString: string\n                    }\n                    addedBy: {\n                        data: {\n                            __typename: string\n                            uri: string\n                            username: string\n                            name: string\n                            avatar: {\n                                sources: Array<{\n                                    url: string\n                                    width: number\n                                    height: number\n                                }>\n                            }\n                        }\n                    }\n                    attributes: Array<any>\n                    itemV2: {\n                        __typename: string\n                        data: {\n                            __typename: string\n                            uri: string\n                            name: string\n                            trackDuration: {\n                                totalMilliseconds: number\n                            }\n                            playcount: string\n                            albumOfTrack: {\n                                uri: string\n                                name: string\n                                artists: {\n                                    items: Array<{\n                                        uri: string\n                                        profile: {\n                                            name: string\n                                        }\n                                    }>\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                            }\n                            artists: {\n                                items: Array<{\n                                    uri: string\n                                    profile: {\n                                        name: string\n                                    }\n                                }>\n                            }\n                            discNumber: number\n                            trackNumber: number\n                            playability: {\n                                playable: boolean\n                                reason: string\n                            }\n                            contentRating: {\n                                label: string\n                            }\n                        }\n                    }\n                }>\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<{\n                path: [string, number, string]\n                maxAge: number\n                scope: string\n            }>\n        }\n    }\n}\n"]}
{"filename": "src/types/searchUsers.ts", "chunked_list": ["export type SpotifySearchUsers = {\n    data: {\n        searchV2: {\n            query: string\n            users: {\n                totalCount: number\n                items: Array<{\n                    data: {\n                        __typename: string\n                        uri: string\n                        id: string\n                        displayName: string\n                        username: string\n                        avatar: {\n                            sources: Array<{\n                                url: string\n                                width: number\n                                height: number\n                            }>\n                            extractedColors: {\n                                colorDark: {\n                                    hex: string\n                                    isFallback: boolean\n                                }\n                            }\n                        }\n                    }\n                }>\n                pagingInfo: {\n                    nextOffset: any\n                    limit: number\n                }\n            }\n        }\n    }\n    extensions: {\n        requestIds: {\n            \"/searchV2\": {\n                \"search-api\": string\n            }\n        }\n        cacheControl: {\n            version: number\n            hints: Array<{\n                path: [string, number, string]\n                maxAge: number\n                scope: string\n            }>\n        }\n    }\n}\n"]}
{"filename": "src/types/productState.ts", "chunked_list": ["export type SpotifyProductState = {\n    ads: string\n    catalogue: string\n    country: string\n    \"preferred-locale\": string\n    \"selected-language\": string\n    product: string\n    \"on-demand\": string\n    \"multiuserplan-current-size\": string\n    \"multiuserplan-member-type\": string\n}\n"]}
{"filename": "src/types/track.ts", "chunked_list": ["export type SpotifyTrack = {\n    data: {\n        trackUnion: {\n            __typename: string\n            id: string\n            uri: string\n            name: string\n            contentRating: {\n                label: string\n            }\n            duration: {\n                totalMilliseconds: number\n            }\n            playability: {\n                playable: boolean\n                reason: string\n            }\n            trackNumber: number\n            playcount: string\n            saved: boolean\n            sharingInfo: {\n                shareUrl: string\n                shareId: string\n            }\n            artistsWithRoles: {\n                totalCount: number\n                items: Array<{\n                    role: string\n                    artist: {\n                        id: string\n                        uri: string\n                        visuals: {\n                            avatarImage: {\n                                sources: Array<{\n                                    width: number\n                                    height: number\n                                    url: string\n                                }>\n                            }\n                        }\n                        profile: {\n                            name: string\n                        }\n                        discography: {\n                            singles: {\n                                totalCount: number\n                                items: Array<{\n                                    releases: {\n                                        items: Array<{\n                                            name: string\n                                            type: string\n                                            uri: string\n                                            playability: {\n                                                playable: boolean\n                                            }\n                                            date: {\n                                                isoString: string\n                                                precision: string\n                                                year: number\n                                            }\n                                            tracks: {\n                                                totalCount: number\n                                                items: Array<{\n                                                    track: {\n                                                        uri: string\n                                                        trackNumber: number\n                                                    }\n                                                }>\n                                            }\n                                            coverArt: {\n                                                extractedColors: {\n                                                    colorRaw: {\n                                                        hex: string\n                                                    }\n                                                }\n                                                sources: Array<{\n                                                    url: string\n                                                    width: number\n                                                    height: number\n                                                }>\n                                            }\n                                        }>\n                                    }\n                                }>\n                            }\n                            albums: {\n                                totalCount: number\n                                items: Array<{\n                                    releases: {\n                                        items: Array<{\n                                            name: string\n                                            type: string\n                                            uri: string\n                                            playability: {\n                                                playable: boolean\n                                            }\n                                            date: {\n                                                isoString: string\n                                                precision: string\n                                                year: number\n                                            }\n                                            tracks: {\n                                                totalCount: number\n                                                items: Array<{\n                                                    track: {\n                                                        uri: string\n                                                        trackNumber: number\n                                                    }\n                                                }>\n                                            }\n                                            coverArt: {\n                                                extractedColors: {\n                                                    colorRaw: {\n                                                        hex: string\n                                                    }\n                                                }\n                                                sources: Array<{\n                                                    url: string\n                                                    width: number\n                                                    height: number\n                                                }>\n                                            }\n                                        }>\n                                    }\n                                }>\n                            }\n                            popularReleasesAlbums: {\n                                items: Array<{\n                                    name: string\n                                    type: string\n                                    uri: string\n                                    playability: {\n                                        playable: boolean\n                                    }\n                                    date: {\n                                        isoString: string\n                                        precision: string\n                                        year: number\n                                    }\n                                    tracks: {\n                                        totalCount: number\n                                        items: Array<{\n                                            track: {\n                                                uri: string\n                                                trackNumber: number\n                                            }\n                                        }>\n                                    }\n                                    coverArt: {\n                                        extractedColors: {\n                                            colorRaw: {\n                                                hex: string\n                                            }\n                                        }\n                                        sources: Array<{\n                                            url: string\n                                            width: number\n                                            height: number\n                                        }>\n                                    }\n                                }>\n                            }\n                            topTracks: {\n                                items: Array<{\n                                    track: {\n                                        artists: {\n                                            items: Array<{\n                                                uri: string\n                                                profile: {\n                                                    name: string\n                                                }\n                                            }>\n                                        }\n                                        albumOfTrack: {\n                                            name: string\n                                            uri: string\n                                            coverArt: {\n                                                extractedColors: {\n                                                    colorRaw: {\n                                                        hex: string\n                                                    }\n                                                }\n                                                sources: Array<{\n                                                    url: string\n                                                    width: number\n                                                    height: number\n                                                }>\n                                            }\n                                        }\n                                        playability: {\n                                            playable: boolean\n                                        }\n                                        playcount: string\n                                        previews: {\n                                            audioPreviews: {\n                                                items: Array<{\n                                                    url: string\n                                                }>\n                                            }\n                                        }\n                                        duration: {\n                                            totalMilliseconds: number\n                                        }\n                                        name: string\n                                        uri: string\n                                        id: string\n                                    }\n                                }>\n                            }\n                        }\n                    }\n                }>\n            }\n            albumOfTrack: {\n                id: string\n                copyright: {\n                    totalCount: number\n                    items: Array<{\n                        text: string\n                        type: string\n                    }>\n                }\n                courtesyLine: string\n                name: string\n                type: string\n                uri: string\n                playability: {\n                    playable: boolean\n                }\n                date: {\n                    isoString: string\n                    precision: string\n                    year: number\n                }\n                tracks: {\n                    totalCount: number\n                    items: Array<{\n                        track: {\n                            uri: string\n                            trackNumber: number\n                        }\n                    }>\n                }\n                coverArt: {\n                    extractedColors: {\n                        colorRaw: {\n                            hex: string\n                        }\n                    }\n                    sources: Array<{\n                        url: string\n                        width: number\n                        height: number\n                    }>\n                }\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<{\n                path: Array<string>\n                maxAge: number\n                scope: string\n            }>\n        }\n    }\n}\n"]}
{"filename": "src/types/likedSongs.ts", "chunked_list": ["export type SpotifyLikedSongs = {\n    data: {\n        me: {\n            library: {\n                tracks: {\n                    __typename: string;\n                    pagingInfo: {\n                        offset: number;\n                        limit: number;\n                    };\n                    items: Array<{\n                        __typename: string;\n                        addedAt: {\n                            isoString: string;\n                        };\n                        track: {\n                            _uri: string;\n                            data: {\n                                __typename: string;\n                                name: string;\n                                duration: {\n                                    totalMilliseconds: number;\n                                };\n                                albumOfTrack: {\n                                    uri: string;\n                                    name: string;\n                                    artists: {\n                                        items: Array<{\n                                            uri: string;\n                                            profile: {\n                                                name: string;\n                                            };\n                                        }>;\n                                    };\n                                    coverArt: {\n                                        sources: Array<{\n                                            url: string;\n                                            width: number;\n                                            height: number;\n                                        }>;\n                                    };\n                                };\n                                artists: {\n                                    items: Array<{\n                                        uri: string;\n                                        profile: {\n                                            name: string;\n                                        };\n                                    }>;\n                                };\n                                discNumber: number;\n                                trackNumber: number;\n                                contentRating: {\n                                    label: string;\n                                };\n                                playability: {\n                                    playable: boolean;\n                                };\n                            };\n                        };\n                    }>;\n                    totalCount: number;\n                };\n            };\n        };\n    };\n    extensions: {};\n};\n", "export type SpotifyLikedSongsAdd = {\n    data: {\n        addLibraryItems: {\n            __typename: string;\n        };\n    };\n    extensions: {};\n};\n\nexport type SpotifyLikedSongsRemove = {\n    data: {\n        removeLibraryItems: {\n            __typename: string;\n        };\n    };\n    extensions: {};\n}\n", "export type SpotifyLikedSongsRemove = {\n    data: {\n        removeLibraryItems: {\n            __typename: string;\n        };\n    };\n    extensions: {};\n}\n"]}
{"filename": "src/types/playlistMetadata.ts", "chunked_list": ["export type SpotifyPlaylistMetadata = {\n    data: {\n        playlistV2: {\n            __typename: string\n            uri: string\n            name: string\n            description: string\n            ownerV2: {\n                data: {\n                    __typename: string\n                    uri: string\n                    username: string\n                    name: string\n                    avatar: {\n                        sources: Array<{\n                            url: string\n                            width: number\n                            height: number\n                        }>\n                    }\n                }\n            }\n            images: {\n                items: Array<{\n                    extractedColors: {\n                        colorRaw: {\n                            hex: string\n                            isFallback: boolean\n                        }\n                    }\n                    sources: Array<{\n                        url: string\n                        width: any\n                        height: any\n                    }>\n                }>\n            }\n            collaborative: boolean\n            followers: number\n            format: string\n            attributes: Array<any>\n            sharingInfo: {\n                shareUrl: string\n            }\n            content: {\n                __typename: string\n                totalCount: number\n                pagingInfo: {\n                    limit: number\n                }\n                items: Array<{\n                    itemV2: {\n                        __typename: string\n                        data: {\n                            __typename: string\n                            uri: string\n                            trackDuration: {\n                                totalMilliseconds: number\n                            }\n                        }\n                    }\n                }>\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/myProfile.ts", "chunked_list": ["export type SpotifyMyProfile = {\n    birthdate: string\n    country: string\n    display_name: string\n    email: string\n    explicit_content: {\n        filter_enabled: boolean\n        filter_locked: boolean\n    }\n    external_urls: {\n        spotify: string\n    }\n    followers: {\n        href: string\n        total: number\n    }\n    href: string\n    id: string\n    images: Array<{\n        height: number\n        url: string\n        width: number\n    }>\n    policies: {\n        opt_in_trial_premium_only_market: boolean\n    }\n    product: string\n    type: string\n    uri: string\n}\n"]}
{"filename": "src/types/podcastEpisodes.ts", "chunked_list": ["export type SpotifyPodcastEpisodes = {\n    errors: Array<{\n        message: string\n        locations: Array<{\n            line: number\n            column: number\n        }>\n        path: Array<string>\n        extensions: {\n            classification: string\n        }\n    }>\n    data: {\n        podcastUnionV2: {\n            __typename: string\n            id: string\n            uri: string\n            name: string\n            episodesV2: {\n                __typename: string\n                totalCount: number\n                pagingInfo: {\n                    nextOffset: number\n                }\n                items: Array<{\n                    uid: string\n                    entity: {\n                        _uri: string\n                        data: {\n                            __typename: string\n                            id: string\n                            uri: string\n                            name: string\n                            contents: Array<any>\n                            htmlDescription: string\n                            description: string\n                            coverArt: {\n                                sources: Array<{\n                                    url: string\n                                    width: number\n                                    height: number\n                                }>\n                            }\n                            creator: any\n                            audio: {\n                                items: Array<{\n                                    url: string\n                                    format: string\n                                    fileId: string\n                                }>\n                            }\n                            audioPreview: {\n                                url: string\n                                format: string\n                            }\n                            duration: {\n                                totalMilliseconds: number\n                            }\n                            contentRating: {\n                                label: string\n                            }\n                            releaseDate: {\n                                isoString: string\n                            }\n                            playedState: {\n                                playPositionMilliseconds: number\n                                state: string\n                            }\n                            mediaTypes: Array<string>\n                            restrictions: {\n                                paywallContent: boolean\n                            }\n                            playability: {\n                                playable: boolean\n                                reason: string\n                                unplayabilityReasons: Array<any>\n                            }\n                            sharingInfo: {\n                                shareUrl: string\n                                shareId: string\n                            }\n                            podcastV2: {\n                                data: {\n                                    __typename: string\n                                    uri: string\n                                    name: string\n                                    coverArt: {\n                                        sources: Array<{\n                                            url: string\n                                            width: number\n                                            height: number\n                                        }>\n                                    }\n                                    trailerV2: any\n                                    showTypes: Array<string>\n                                }\n                            }\n                            type: string\n                            segments: any\n                            contentInformation?: {\n                                buttonTarget: string\n                                buttonText: string\n                                cardBodyText: string\n                                cardHeaderText: string\n                            }\n                            transcripts: {\n                                items: Array<any>\n                            }\n                        }\n                    }\n                }>\n            }\n        }\n    }\n    extensions: {}\n}\n"]}
{"filename": "src/types/playlist.ts", "chunked_list": ["export type SpotifyPlaylist = {\n    data: {\n        playlistV2: {\n            __typename: string\n            uri: string\n            name: string\n            description: string\n            ownerV2: {\n                data: {\n                    __typename: string\n                    uri: string\n                    username: string\n                    name: string\n                    avatar: {\n                        sources: Array<{\n                            url: string\n                            width: number\n                            height: number\n                        }>\n                    }\n                }\n            }\n            images: {\n                items: Array<any>\n            }\n            collaborative: boolean\n            followers: number\n            format: string\n            attributes: Array<any>\n            sharingInfo: {\n                shareUrl: string\n            }\n            content: {\n                __typename: string\n                totalCount: number\n                pagingInfo: {\n                    offset: number\n                    limit: number\n                }\n                items: Array<{\n                    uid: string\n                    addedAt: {\n                        isoString: string\n                    }\n                    addedBy: {\n                        data: {\n                            __typename: string\n                            uri: string\n                            username: string\n                            name: string\n                            avatar: {\n                                sources: Array<{\n                                    url: string\n                                    width: number\n                                    height: number\n                                }>\n                            }\n                        }\n                    }\n                    attributes: Array<any>\n                    item: {\n                        __typename: string\n                        data: {\n                            __typename: string\n                            uri: string\n                            name: string\n                            trackDuration: {\n                                totalMilliseconds: number\n                            }\n                            playcount: string\n                            albumOfTrack: {\n                                uri: string\n                                name: string\n                                artists: {\n                                    items: Array<{\n                                        uri: string\n                                        profile: {\n                                            name: string\n                                        }\n                                    }>\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                            }\n                            artists: {\n                                items: Array<{\n                                    uri: string\n                                    profile: {\n                                        name: string\n                                    }\n                                }>\n                            }\n                            discNumber: number\n                            trackNumber: number\n                            playability: {\n                                playable: boolean\n                                reason: string\n                            }\n                            contentRating: {\n                                label: string\n                            }\n                        }\n                    }\n                }>\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<{\n                path: [string, number, string]\n                maxAge: number\n                scope: string\n            }>\n        }\n    }\n}\n"]}
{"filename": "src/types/searchPlaylists.ts", "chunked_list": ["export type SpotifySearchPlaylists = {\n    data: {\n        searchV2: {\n            query: string\n            playlists: {\n                totalCount: number\n                items: Array<{\n                    data: {\n                        __typename: string\n                        uri: string\n                        name: string\n                        description: string\n                        images: {\n                            items: Array<{\n                                sources: Array<{\n                                    url: string\n                                    width?: number\n                                    height?: number\n                                }>\n                                extractedColors: {\n                                    colorDark: {\n                                        hex: string\n                                        isFallback: boolean\n                                    }\n                                }\n                            }>\n                        }\n                        ownerV2: {\n                            data: {\n                                __typename: string\n                            }\n                        }\n                    }\n                }>\n                pagingInfo: {\n                    nextOffset: number\n                    limit: number\n                }\n            }\n        }\n    }\n    extensions: {\n        requestIds: {\n            \"/searchV2\": {\n                \"search-api\": string\n            }\n        }\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/searchAlbums.ts", "chunked_list": ["export type SpotifySearchAlbums = {\n    data: {\n        searchV2: {\n            query: string\n            albums: {\n                totalCount: number\n                items: Array<{\n                    data: {\n                        __typename: string\n                        uri: string\n                        name: string\n                        artists: {\n                            items: Array<{\n                                uri: string\n                                profile: {\n                                    name: string\n                                }\n                            }>\n                        }\n                        coverArt: {\n                            sources: Array<{\n                                url: string\n                                width: number\n                                height: number\n                            }>\n                            extractedColors: {\n                                colorDark: {\n                                    hex: string\n                                    isFallback: boolean\n                                }\n                            }\n                        }\n                        date: {\n                            year: number\n                        }\n                    }\n                }>\n                pagingInfo: {\n                    nextOffset: number\n                    limit: number\n                }\n            }\n        }\n    }\n    extensions: {\n        requestIds: {\n            \"/searchV2\": {\n                \"search-api\": string\n            }\n        }\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/podcast.ts", "chunked_list": ["export type SpotifyPodcast = {\n    data: {\n        podcastUnionV2: {\n            __typename: string\n            id: string\n            uri: string\n            name: string\n            saved: boolean\n            description: string\n            htmlDescription: string\n            contentType: string\n            coverArt: {\n                sources: Array<{\n                    url: string\n                    width: number\n                    height: number\n                }>\n            }\n            contentRating: {\n                label: string\n            }\n            publisher: {\n                name: string\n            }\n            playability: {\n                playable: boolean\n                reason: string\n                unplayabilityReasons: Array<any>\n            }\n            mediaType: string\n            sharingInfo: {\n                shareUrl: string\n                shareId: string\n            }\n            trailerV2: any\n            episodesV2: {\n                __typename: string\n                items: Array<{\n                    entity: {\n                        __typename: string\n                        data: {\n                            creator: any\n                        }\n                    }\n                }>\n            }\n            showTypes: Array<string>\n            musicAndTalk: boolean\n            topics: {\n                items: Array<{\n                    __typename: string\n                    title: string\n                    uri: string\n                }>\n            }\n            nextBestEpisodes: {\n                items: Array<any>\n            }\n            accessInfo: any\n        }\n    }\n    extensions: {}\n}\n"]}
{"filename": "src/types/getToken.ts", "chunked_list": ["export type SpotifyGetToken = {\n    clientId: string\n    accessToken: string\n    accessTokenExpirationTimestampMs: number\n    isAnonymous: boolean\n}\n"]}
{"filename": "src/types/extractedColors.ts", "chunked_list": ["export type SpotifyExtractedColors = {\n    data: {\n        extractedColors: Array<{\n            __typename: string\n            colorRaw: {\n                hex: string\n                isFallback: boolean\n            }\n            colorDark: {\n                hex: string\n                isFallback: boolean\n            }\n            colorLight: {\n                hex: string\n                isFallback: boolean\n            }\n        }>\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/episode.ts", "chunked_list": ["export type SpotifyEpisode = {\n    errors: Array<{\n        message: string\n        locations: Array<{\n            line: number\n            column: number\n        }>\n        path: Array<string>\n        extensions: {\n            classification: string\n        }\n    }>\n    data: {\n        episodeUnionV2: {\n            __typename: string\n            id: string\n            uri: string\n            name: string\n            contents: Array<any>\n            htmlDescription: string\n            description: string\n            coverArt: {\n                sources: Array<{\n                    url: string\n                    width: number\n                    height: number\n                }>\n            }\n            creator: any\n            audio: {\n                items: Array<{\n                    url: string\n                    format: string\n                    fileId: string\n                }>\n            }\n            audioPreview: {\n                url: string\n                format: string\n            }\n            duration: {\n                totalMilliseconds: number\n            }\n            contentRating: {\n                label: string\n            }\n            releaseDate: {\n                isoString: string\n            }\n            playedState: {\n                playPositionMilliseconds: number\n                state: string\n            }\n            mediaTypes: Array<string>\n            restrictions: {\n                paywallContent: boolean\n            }\n            playability: {\n                playable: boolean\n                reason: string\n                unplayabilityReasons: Array<any>\n            }\n            sharingInfo: {\n                shareUrl: string\n                shareId: string\n            }\n            podcastV2: {\n                data: {\n                    __typename: string\n                    uri: string\n                    name: string\n                    coverArt: {\n                        sources: Array<{\n                            url: string\n                            width: number\n                            height: number\n                        }>\n                    }\n                    trailerV2: any\n                    showTypes: Array<string>\n                }\n            }\n            type: string\n            segments: any\n            contentInformation: any\n            transcripts: {\n                items: Array<any>\n            }\n        }\n    }\n    extensions: {}\n}\n"]}
{"filename": "src/types/searchTracks.ts", "chunked_list": ["export type SpotifySearchTracks = {\n    data: {\n        searchV2: {\n            query: string\n            tracksV2: {\n                totalCount: number\n                items: Array<{\n                    matchedFields: Array<string>\n                    item: {\n                        data: {\n                            __typename: string\n                            uri: string\n                            id: string\n                            name: string\n                            albumOfTrack: {\n                                uri: string\n                                name: string\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                    extractedColors: {\n                                        colorDark: {\n                                            hex: string\n                                            isFallback: boolean\n                                        }\n                                    }\n                                }\n                                id: string\n                            }\n                            artists: {\n                                items: Array<{\n                                    uri: string\n                                    profile: {\n                                        name: string\n                                    }\n                                }>\n                            }\n                            contentRating: {\n                                label: string\n                            }\n                            duration: {\n                                totalMilliseconds: number\n                            }\n                            playability: {\n                                playable: boolean\n                            }\n                        }\n                    }\n                }>\n                pagingInfo: {\n                    nextOffset: number\n                    limit: number\n                }\n            }\n        }\n    }\n    extensions: {\n        requestIds: {\n            \"/searchV2\": {\n                \"search-api\": string\n            }\n        }\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/searchAll.ts", "chunked_list": ["export type SpotifySearchAll = {\n\tdata: {\n\t\tsearchV2: {\n\t\t\talbums: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tname: string\n\t\t\t\t\t\tartists: {\n\t\t\t\t\t\t\titems: Array<{\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\tprofile: {\n\t\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcoverArt: {\n\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdate: {\n\t\t\t\t\t\t\tyear: number\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\tartists: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tprofile: {\n\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\tverified: boolean\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvisuals: {\n\t\t\t\t\t\t\tavatarImage: {\n\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\tepisodes: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tname: string\n\t\t\t\t\t\tcoverArt: {\n\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tduration: {\n\t\t\t\t\t\t\ttotalMilliseconds: number\n\t\t\t\t\t\t}\n\t\t\t\t\t\treleaseDate: {\n\t\t\t\t\t\t\tisoString: string\n\t\t\t\t\t\t\tprecision: string\n\t\t\t\t\t\t}\n\t\t\t\t\t\tplayedState: {\n\t\t\t\t\t\t\tplayPositionMilliseconds: number\n\t\t\t\t\t\t\tstate: string\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpodcastV2: {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\tcoverArt: {\n\t\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tmediaType: string\n\t\t\t\t\t\t\t\tpublisher: {\n\t\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdescription: string\n\t\t\t\t\t\tcontentRating: {\n\t\t\t\t\t\t\tlabel: string\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\tgenres: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<any>\n\t\t\t}\n\t\t\tplaylists: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tname: string\n\t\t\t\t\t\tdescription: string\n\t\t\t\t\t\timages: {\n\t\t\t\t\t\t\titems: Array<{\n\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\twidth?: number\n\t\t\t\t\t\t\t\t\theight?: number\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t}\n\t\t\t\t\t\townerV2: {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\tusername: string\n\t\t\t\t\t\t\t\tavatar?: {\n\t\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\tpodcasts: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tname: string\n\t\t\t\t\t\tcoverArt: {\n\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpublisher: {\n\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmediaType: string\n\t\t\t\t\t\ttopics: {\n\t\t\t\t\t\t\titems: Array<{\n\t\t\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\t\t\ttitle: string\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\taudiobooks: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<any>\n\t\t\t}\n\t\t\ttracksV2: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tmatchedFields: Array<string>\n\t\t\t\t\titem: {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\tid: string\n\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\talbumOfTrack: {\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\tcoverArt: {\n\t\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tid: string\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tartists: {\n\t\t\t\t\t\t\t\titems: Array<{\n\t\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\t\tprofile: {\n\t\t\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating: {\n\t\t\t\t\t\t\t\tlabel: string\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tduration: {\n\t\t\t\t\t\t\t\ttotalMilliseconds: number\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayability: {\n\t\t\t\t\t\t\t\tplayable: boolean\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\tusers: {\n\t\t\t\ttotalCount: number\n\t\t\t\titems: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tid: string\n\t\t\t\t\t\tdisplayName: string\n\t\t\t\t\t\tusername: string\n\t\t\t\t\t\tavatar?: {\n\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\ttopResults: {\n\t\t\t\titemsV2: Array<{\n\t\t\t\t\tmatchedFields: Array<string>\n\t\t\t\t\titem: {\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\tid?: string\n\t\t\t\t\t\t\tname?: string\n\t\t\t\t\t\t\talbumOfTrack?: {\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\tcoverArt: {\n\t\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tid: string\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tartists?: {\n\t\t\t\t\t\t\t\titems: Array<{\n\t\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\t\tprofile: {\n\t\t\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontentRating?: {\n\t\t\t\t\t\t\t\tlabel: string\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tduration?: {\n\t\t\t\t\t\t\t\ttotalMilliseconds: number\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayability?: {\n\t\t\t\t\t\t\t\tplayable: boolean\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tprofile?: {\n\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\tverified: boolean\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvisuals?: {\n\t\t\t\t\t\t\t\tavatarImage: {\n\t\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcoverArt?: {\n\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdate?: {\n\t\t\t\t\t\t\t\tyear: number\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t\tfeatured: Array<{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\turi: string\n\t\t\t\t\t\tname: string\n\t\t\t\t\t\tdescription: string\n\t\t\t\t\t\timages: {\n\t\t\t\t\t\t\titems: Array<{\n\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\twidth: any\n\t\t\t\t\t\t\t\t\theight: any\n\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\textractedColors: {\n\t\t\t\t\t\t\t\t\tcolorDark: {\n\t\t\t\t\t\t\t\t\t\thex: string\n\t\t\t\t\t\t\t\t\t\tisFallback: boolean\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t}\n\t\t\t\t\t\townerV2: {\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\t__typename: string\n\t\t\t\t\t\t\t\tname: string\n\t\t\t\t\t\t\t\turi: string\n\t\t\t\t\t\t\t\tusername: string\n\t\t\t\t\t\t\t\tavatar: {\n\t\t\t\t\t\t\t\t\tsources: Array<{\n\t\t\t\t\t\t\t\t\t\turl: string\n\t\t\t\t\t\t\t\t\t\twidth: number\n\t\t\t\t\t\t\t\t\t\theight: number\n\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}>\n\t\t\t}\n\t\t\tchipOrder: {\n\t\t\t\titems: Array<{\n\t\t\t\t\ttypeName: string\n\t\t\t\t}>\n\t\t\t}\n\t\t}\n\t}\n\textensions: {\n\t\trequestIds: {\n\t\t\t\"/searchV2\": {\n\t\t\t\t\"search-api\": string\n\t\t\t}\n\t\t\t\"/searchV2/topResults\": {\n\t\t\t\t\"search-api\": string\n\t\t\t}\n\t\t}\n\t\tcacheControl: {\n\t\t\tversion: number\n\t\t\thints: Array<any>\n\t\t}\n\t}\n}\n"]}
{"filename": "src/types/colorLyrics.ts", "chunked_list": ["export type SpotifyColorLyrics = {\n    lyrics: {\n        syncType: string\n        lines: Array<{\n            startTimeMs: string\n            words: string\n            syllables: Array<any>\n            endTimeMs: string\n        }>\n        provider: string\n        providerLyricsId: string\n        providerDisplayName: string\n        syncLyricsUri: string\n        isDenseTypeface: boolean\n        alternatives: Array<any>\n        language: string\n        isRtlLanguage: boolean\n        fullscreenAction: string\n    }\n    colors: {\n        background: number\n        text: number\n        highlightText: number\n    }\n    hasVocalRemoval: boolean\n}\n"]}
{"filename": "src/types/searchPodcasts.ts", "chunked_list": ["export type SpotifySearchPodcasts = {\n    data: {\n      searchV2: {\n        query: string\n        episodes: {\n          totalCount: number\n          items: Array<{\n            data: {\n              __typename: string\n              id: string\n              uri: string\n              name: string\n              contents: Array<any>\n              htmlDescription: string\n              description: string\n              coverArt: {\n                sources: Array<{\n                  url: string\n                  width: number\n                  height: number\n                }>\n              }\n              creator: any\n              audio: {\n                items: Array<{\n                  url: string\n                  format: string\n                  fileId: string\n                }>\n              }\n              audioPreview: {\n                url: string\n                format: string\n              }\n              duration: {\n                totalMilliseconds: number\n              }\n              contentRating: {\n                label: string\n              }\n              releaseDate: {\n                isoString: string\n              }\n              playedState: {\n                playPositionMilliseconds: number\n                state: string\n              }\n              mediaTypes: Array<string>\n              restrictions: {\n                paywallContent: boolean\n              }\n              playability: {\n                playable: boolean\n                reason: string\n                unplayabilityReasons: Array<any>\n              }\n              sharingInfo: {\n                shareUrl: string\n                shareId: string\n              }\n              podcastV2: {\n                data: {\n                  __typename: string\n                  uri: string\n                  name: string\n                  coverArt: {\n                    sources: Array<{\n                      url: string\n                      width: number\n                      height: number\n                    }>\n                  }\n                  trailerV2?: {\n                    data: {\n                      __typename: string\n                      uri: string\n                      id: string\n                      name: string\n                      contents: Array<any>\n                      htmlDescription: string\n                      description: string\n                      coverArt: {\n                        sources: Array<{\n                          url: string\n                          width: number\n                          height: number\n                        }>\n                      }\n                      creator: any\n                      audio: {\n                        items: Array<{\n                          url: string\n                          format: string\n                          fileId: string\n                        }>\n                      }\n                      audioPreview: {\n                        url: string\n                        format: string\n                      }\n                      duration: {\n                        totalMilliseconds: number\n                      }\n                      contentRating: {\n                        label: string\n                      }\n                      releaseDate: {\n                        isoString: string\n                      }\n                      playedState: {\n                        playPositionMilliseconds: number\n                        state: string\n                      }\n                      mediaTypes: Array<string>\n                      restrictions: {\n                        paywallContent: boolean\n                      }\n                      playability: {\n                        playable: boolean\n                        reason: string\n                        unplayabilityReasons: Array<any>\n                      }\n                      sharingInfo: {\n                        shareUrl: string\n                        shareId: string\n                      }\n                      podcastV2: {\n                        data: {\n                          __typename: string\n                          uri: string\n                          name: string\n                          coverArt: {\n                            sources: Array<{\n                              url: string\n                              width: number\n                              height: number\n                            }>\n                          }\n                          trailerV2: {\n                            data: {\n                              __typename: string\n                              uri: string\n                            }\n                          }\n                          showTypes: Array<any>\n                        }\n                      }\n                      type: string\n                      segments: {\n                        segments: {\n                          totalCount: number\n                        }\n                      }\n                      contentInformation: any\n                      transcripts: {\n                        items: Array<any>\n                      }\n                    }\n                    _uri: string\n                  }\n                  showTypes: Array<any>\n                  id: string\n                  saved: boolean\n                  description: string\n                  htmlDescription: string\n                  contentType: string\n                  contentRating: {\n                    label: string\n                  }\n                  publisher: {\n                    name: string\n                  }\n                  playability: {\n                    playable: boolean\n                    reason: string\n                    unplayabilityReasons: Array<any>\n                  }\n                  mediaType: string\n                  sharingInfo: {\n                    shareUrl: string\n                    shareId: string\n                  }\n                  episodesV2: {\n                    __typename: string\n                    items: Array<{\n                      entity: {\n                        __typename: string\n                        data: {\n                          creator: any\n                        }\n                      }\n                    }>\n                  }\n                  musicAndTalk: boolean\n                  topics: {\n                    items: Array<{\n                      __typename: string\n                      title: string\n                      uri: string\n                    }>\n                  }\n                  nextBestEpisodes: {\n                    items: Array<{\n                      item: {\n                        data: {\n                          __typename: string\n                          id: string\n                          uri: string\n                          name: string\n                          contents: Array<any>\n                          htmlDescription: string\n                          description: string\n                          coverArt: {\n                            sources: Array<{\n                              url: string\n                              width: number\n                              height: number\n                            }>\n                          }\n                          creator: any\n                          audio: {\n                            items: Array<{\n                              url: string\n                              format: string\n                              fileId: string\n                            }>\n                          }\n                          audioPreview: {\n                            url: string\n                            format: string\n                          }\n                          duration: {\n                            totalMilliseconds: number\n                          }\n                          contentRating: {\n                            label: string\n                          }\n                          releaseDate: {\n                            isoString: string\n                          }\n                          playedState: {\n                            playPositionMilliseconds: number\n                            state: string\n                          }\n                          mediaTypes: Array<string>\n                          restrictions: {\n                            paywallContent: boolean\n                          }\n                          playability: {\n                            playable: boolean\n                            reason: string\n                            unplayabilityReasons: Array<any>\n                          }\n                          sharingInfo: {\n                            shareUrl: string\n                            shareId: string\n                          }\n                          podcastV2: {\n                            data: {\n                              __typename: string\n                              uri: string\n                              name: string\n                              coverArt: {\n                                sources: Array<{\n                                  url: string\n                                  width: number\n                                  height: number\n                                }>\n                              }\n                              trailerV2?: {\n                                data: {\n                                  __typename: string\n                                  uri: string\n                                }\n                              }\n                              showTypes: Array<any>\n                            }\n                          }\n                          type: string\n                          segments: {\n                            segments: {\n                              totalCount: number\n                            }\n                          }\n                          contentInformation: any\n                          transcripts: {\n                            items: Array<any>\n                          }\n                        }\n                      }\n                      score: number\n                    }>\n                  }\n                  accessInfo: any\n                }\n              }\n              type: string\n              segments: {\n                segments: {\n                  totalCount: number\n                }\n              }\n              contentInformation: any\n              transcripts: {\n                items: Array<any>\n              }\n            }\n          }>\n          pagingInfo: {\n            nextOffset: number\n            limit: number\n          }\n        }\n      }\n    }\n    extensions: {\n      requestIds: {\n        \"/searchV2\": {\n          \"search-api\": string\n        }\n      }\n    }\n  }\n  "]}
{"filename": "src/types/artist.ts", "chunked_list": ["export type SpotifyArtist = {\n    data: {\n        artistUnion: {\n            __typename: string\n            id: string\n            uri: string\n            saved: boolean\n            sharingInfo: {\n                shareUrl: string\n                shareId: string\n            }\n            profile: {\n                name: string\n                verified: boolean\n                pinnedItem: any\n                biography: {\n                    type: string\n                    text: string\n                }\n                externalLinks: {\n                    items: Array<{\n                        name: string\n                        url: string\n                    }>\n                }\n                playlistsV2: {\n                    totalCount: number\n                    items: Array<{\n                        data: {\n                            __typename: string\n                            uri: string\n                            name: string\n                            description: string\n                            ownerV2: {\n                                data: {\n                                    __typename: string\n                                    name: string\n                                }\n                            }\n                            images: {\n                                items: Array<{\n                                    sources: Array<{\n                                        url: string\n                                        width: any\n                                        height: any\n                                    }>\n                                }>\n                            }\n                        }\n                    }>\n                }\n            }\n            visuals: {\n                gallery: {\n                    items: Array<{\n                        sources: Array<{\n                            url: string\n                            width: number\n                            height: number\n                        }>\n                    }>\n                }\n                avatarImage: {\n                    sources: Array<{\n                        url: string\n                        width: number\n                        height: number\n                    }>\n                    extractedColors: {\n                        colorRaw: {\n                            hex: string\n                        }\n                    }\n                }\n                headerImage: {\n                    sources: Array<{\n                        url: string\n                        width: number\n                        height: number\n                    }>\n                    extractedColors: {\n                        colorRaw: {\n                            hex: string\n                        }\n                    }\n                }\n            }\n            discography: {\n                latest: {\n                    id: string\n                    uri: string\n                    name: string\n                    type: string\n                    copyright: {\n                        items: Array<{\n                            type: string\n                            text: string\n                        }>\n                    }\n                    date: {\n                        year: number\n                        month: number\n                        day: number\n                        precision: string\n                    }\n                    coverArt: {\n                        sources: Array<{\n                            url: string\n                            width: number\n                            height: number\n                        }>\n                    }\n                    tracks: {\n                        totalCount: number\n                    }\n                    label: string\n                    playability: {\n                        playable: boolean\n                        reason: string\n                    }\n                    sharingInfo: {\n                        shareId: string\n                        shareUrl: string\n                    }\n                }\n                popularReleasesAlbums: {\n                    totalCount: number\n                    items: Array<{\n                        id: string\n                        uri: string\n                        name: string\n                        type: string\n                        copyright: {\n                            items: Array<{\n                                type: string\n                                text: string\n                            }>\n                        }\n                        date: {\n                            year: number\n                            month: number\n                            day: number\n                            precision: string\n                        }\n                        coverArt: {\n                            sources: Array<{\n                                url: string\n                                width: number\n                                height: number\n                            }>\n                        }\n                        tracks: {\n                            totalCount: number\n                        }\n                        label: string\n                        playability: {\n                            playable: boolean\n                            reason: string\n                        }\n                        sharingInfo: {\n                            shareId: string\n                            shareUrl: string\n                        }\n                    }>\n                }\n                singles: {\n                    totalCount: number\n                    items: Array<{\n                        releases: {\n                            items: Array<{\n                                id: string\n                                uri: string\n                                name: string\n                                type: string\n                                copyright: {\n                                    items: Array<{\n                                        type: string\n                                        text: string\n                                    }>\n                                }\n                                date: {\n                                    year: number\n                                    month: number\n                                    day: number\n                                    precision: string\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                                tracks: {\n                                    totalCount: number\n                                }\n                                label: string\n                                playability: {\n                                    playable: boolean\n                                    reason: string\n                                }\n                                sharingInfo: {\n                                    shareId: string\n                                    shareUrl: string\n                                }\n                            }>\n                        }\n                    }>\n                }\n                albums: {\n                    totalCount: number\n                    items: Array<{\n                        releases: {\n                            items: Array<{\n                                id: string\n                                uri: string\n                                name: string\n                                type: string\n                                copyright: {\n                                    items: Array<{\n                                        type: string\n                                        text: string\n                                    }>\n                                }\n                                date: {\n                                    year: number\n                                    month: number\n                                    day: number\n                                    precision: string\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                                tracks: {\n                                    totalCount: number\n                                }\n                                label: string\n                                playability: {\n                                    playable: boolean\n                                    reason: string\n                                }\n                                sharingInfo: {\n                                    shareId: string\n                                    shareUrl: string\n                                }\n                            }>\n                        }\n                    }>\n                }\n                compilations: {\n                    totalCount: number\n                    items: Array<{\n                        releases: {\n                            items: Array<{\n                                id: string\n                                uri: string\n                                name: string\n                                type: string\n                                copyright: {\n                                    items: Array<{\n                                        type: string\n                                        text: string\n                                    }>\n                                }\n                                date: {\n                                    year: number\n                                    month: number\n                                    day: number\n                                    precision: string\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                                tracks: {\n                                    totalCount: number\n                                }\n                                label: string\n                                playability: {\n                                    playable: boolean\n                                    reason: string\n                                }\n                                sharingInfo: {\n                                    shareId: string\n                                    shareUrl: string\n                                }\n                            }>\n                        }\n                    }>\n                }\n                topTracks: {\n                    items: Array<{\n                        uid: string\n                        track: {\n                            id: string\n                            uri: string\n                            name: string\n                            playcount: string\n                            discNumber: number\n                            duration: {\n                                totalMilliseconds: number\n                            }\n                            playability: {\n                                playable: boolean\n                                reason: string\n                            }\n                            contentRating: {\n                                label: string\n                            }\n                            artists: {\n                                items: Array<{\n                                    uri: string\n                                    profile: {\n                                        name: string\n                                    }\n                                }>\n                            }\n                            albumOfTrack: {\n                                uri: string\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                    }>\n                                }\n                            }\n                        }\n                    }>\n                }\n            }\n            stats: {\n                followers: number\n                monthlyListeners: number\n                worldRank: number\n                topCities: {\n                    items: Array<{\n                        numberOfListeners: number\n                        city: string\n                        country: string\n                        region: string\n                    }>\n                }\n            }\n            relatedContent: {\n                appearsOn: {\n                    totalCount: number\n                    items: Array<{\n                        releases: {\n                            totalCount: number\n                            items: Array<{\n                                uri: string\n                                id: string\n                                name: string\n                                type: string\n                                artists: {\n                                    items: Array<{\n                                        uri: string\n                                        profile: {\n                                            name: string\n                                        }\n                                    }>\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                                date: {\n                                    year: number\n                                }\n                                sharingInfo: {\n                                    shareId: string\n                                    shareUrl: string\n                                }\n                            }>\n                        }\n                    }>\n                }\n                featuringV2: {\n                    totalCount: number\n                    items: Array<{\n                        data: {\n                            __typename: string\n                            uri: string\n                            id: string\n                            ownerV2: {\n                                data: {\n                                    __typename: string\n                                    name: string\n                                }\n                            }\n                            name: string\n                            description: string\n                            images: {\n                                totalCount: number\n                                items: Array<{\n                                    sources: Array<{\n                                        url: string\n                                        width: any\n                                        height: any\n                                    }>\n                                }>\n                            }\n                        }\n                    }>\n                }\n                discoveredOnV2: {\n                    totalCount: number\n                    items: Array<{\n                        data: {\n                            __typename: string\n                            uri: string\n                            id: string\n                            ownerV2: {\n                                data: {\n                                    __typename: string\n                                    name: string\n                                }\n                            }\n                            name: string\n                            description: string\n                            images: {\n                                totalCount: number\n                                items: Array<{\n                                    sources: Array<{\n                                        url: string\n                                        width?: number\n                                        height?: number\n                                    }>\n                                }>\n                            }\n                        }\n                    }>\n                }\n                relatedArtists: {\n                    totalCount: number\n                    items: Array<{\n                        id: string\n                        uri: string\n                        profile: {\n                            name: string\n                        }\n                        visuals: {\n                            avatarImage: {\n                                sources: Array<{\n                                    url: string\n                                    width: number\n                                    height: number\n                                }>\n                            }\n                        }\n                    }>\n                }\n            }\n            goods: {\n                events: {\n                    userLocation: {\n                        name: string\n                    }\n                    concerts: {\n                        totalCount: number\n                        items: Array<{\n                            uri: string\n                            id: string\n                            title: string\n                            category: string\n                            festival: boolean\n                            nearUser: boolean\n                            venue: {\n                                name: string\n                                location: {\n                                    name: string\n                                }\n                                coordinates: {\n                                    latitude: number\n                                    longitude: number\n                                }\n                            }\n                            artists: {\n                                items: Array<{\n                                    uri: string\n                                    id: string\n                                    profile: {\n                                        name: string\n                                    }\n                                }>\n                            }\n                            partnerLinks: {\n                                items: Array<{\n                                    partnerName: string\n                                    url: string\n                                }>\n                            }\n                            date: {\n                                year: number\n                                month: number\n                                day: number\n                                hour: number\n                                minute: number\n                                second: number\n                                isoString: string\n                                precision: string\n                            }\n                        }>\n                        pagingInfo: {\n                            limit: number\n                        }\n                    }\n                }\n                merch: {\n                    items: Array<any>\n                }\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export { SpotifyAlbum } from \"./album\";\nexport { SpotifyArtist } from \"./artist\";\nexport { SpotifyEpisode } from \"./episode\";\nexport { SpotifyExtractedColors } from \"./extractedColors\";\nexport { SpotifyGetToken } from \"./getToken\";\nexport { SpotifyHome } from \"./home\";\nexport { MusixmatchSearch } from \"./musixmatchSearch\";\nexport { SpotifyPlaylist } from \"./playlist\";\nexport { SpotifyPlaylistMetadata } from \"./playlistMetadata\";\nexport { SpotifyPlaylistContents } from \"./playlistContents\";", "export { SpotifyPlaylistMetadata } from \"./playlistMetadata\";\nexport { SpotifyPlaylistContents } from \"./playlistContents\";\nexport { SpotifyPodcast } from \"./podcast\";\nexport { SpotifyPodcastEpisodes } from \"./podcastEpisodes\";\nexport { SpotifyRelatedTrackArtists } from \"./relatedTrackArtists\";\nexport { SpotifySearchAlbums } from \"./searchAlbums\";\nexport { SpotifySearchAll } from \"./searchAll\";\nexport { SpotifySearchArtists } from \"./searchArtists\";\nexport { SpotifySearchPlaylists } from \"./searchPlaylists\";\nexport { SpotifySearchPodcasts } from \"./searchPodcasts\";", "export { SpotifySearchPlaylists } from \"./searchPlaylists\";\nexport { SpotifySearchPodcasts } from \"./searchPodcasts\";\nexport { SpotifySearchTracks } from \"./searchTracks\";\nexport { SpotifySearchUsers } from \"./searchUsers\";\nexport { SpotifySection } from \"./section\";\nexport { SpotifyTrack } from \"./track\";\nexport { SpotifyUser } from \"./user\";\nexport { SpotifyMyProfile } from \"./myProfile\";\nexport { SpotifyMyLibrary } from \"./myLibrary\";\nexport { SpotifyProductState } from \"./productState\";", "export { SpotifyMyLibrary } from \"./myLibrary\";\nexport { SpotifyProductState } from \"./productState\";\nexport { SpotifyColorLyrics } from \"./colorLyrics\";\nexport { SpotifyTrackCredits } from \"./trackCredits\";\nexport { SpotifyLikedSongs, SpotifyLikedSongsAdd, SpotifyLikedSongsRemove } from \"./likedSongs\";"]}
{"filename": "src/types/trackCredits.ts", "chunked_list": ["export type SpotifyTrackCredits = {\n    trackUri: string\n    trackTitle: string\n    roleCredits: Array<{\n        roleTitle: string\n        artists: Array<{\n            uri: string\n            name: string\n            imageUri: string\n            subroles: Array<string>\n            weight: number\n        }>\n    }>\n    extendedCredits: Array<any>\n    sourceNames: Array<string>\n}\n"]}
{"filename": "src/types/album.ts", "chunked_list": ["export type SpotifyAlbum = {\n    data: {\n        albumUnion: {\n            __typename: string\n            uri: string\n            name: string\n            artists: {\n                totalCount: number\n                items: Array<{\n                    id: string\n                    uri: string\n                    profile: {\n                        name: string\n                    }\n                    visuals: {\n                        avatarImage: {\n                            sources: Array<{\n                                url: string\n                                width: number\n                                height: number\n                            }>\n                        }\n                    }\n                    sharingInfo: {\n                        shareUrl: string\n                    }\n                }>\n            }\n            coverArt: {\n                extractedColors: {\n                    colorRaw: {\n                        hex: string\n                    }\n                    colorLight: {\n                        hex: string\n                    }\n                    colorDark: {\n                        hex: string\n                    }\n                }\n                sources: Array<{\n                    url: string\n                    width: number\n                    height: number\n                }>\n            }\n            discs: {\n                totalCount: number\n                items: Array<{\n                    number: number\n                    tracks: {\n                        totalCount: number\n                    }\n                }>\n            }\n            releases: {\n                totalCount: number\n                items: Array<{\n                    uri: string\n                    name: string\n                }>\n            }\n            type: string\n            date: {\n                isoString: string\n                precision: string\n            }\n            playability: {\n                playable: boolean\n                reason: string\n            }\n            label: string\n            copyright: {\n                totalCount: number\n                items: Array<{\n                    type: string\n                    text: string\n                }>\n            }\n            courtesyLine: string\n            saved: boolean\n            sharingInfo: {\n                shareUrl: string\n                shareId: string\n            }\n            tracks: {\n                totalCount: number\n                items: Array<{\n                    uid: string\n                    track: {\n                        saved: boolean\n                        uri: string\n                        name: string\n                        playcount: string\n                        discNumber: number\n                        trackNumber: number\n                        contentRating: {\n                            label: string\n                        }\n                        relinkingInformation: any\n                        duration: {\n                            totalMilliseconds: number\n                        }\n                        playability: {\n                            playable: boolean\n                        }\n                        artists: {\n                            items: Array<{\n                                uri: string\n                                profile: {\n                                    name: string\n                                }\n                            }>\n                        }\n                    }\n                }>\n            }\n            moreAlbumsByArtist: {\n                items: Array<{\n                    discography: {\n                        popularReleasesAlbums: {\n                            items: Array<{\n                                id: string\n                                uri: string\n                                name: string\n                                date: {\n                                    year: number\n                                }\n                                coverArt: {\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                                playability: {\n                                    playable: boolean\n                                    reason: string\n                                }\n                                sharingInfo: {\n                                    shareId: string\n                                    shareUrl: string\n                                }\n                                type: string\n                            }>\n                        }\n                    }\n                }>\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/home.ts", "chunked_list": ["export type SpotifyHome = {\n    data: {\n        home: {\n            __typename: string\n            greeting: {\n                text: string\n            }\n            sectionContainer: {\n                uri: string\n                sections: {\n                    items: Array<{\n                        uri: string\n                        data: {\n                            __typename: string\n                            title?: {\n                                text: string\n                            }\n                        }\n                        sectionItems: {\n                            items: Array<{\n                                uri: string\n                                content: {\n                                    __typename: string\n                                    data?: {\n                                        __typename: string\n                                        uri: string\n                                        name?: string\n                                        images?: {\n                                            items: Array<{\n                                                sources: Array<{\n                                                    url: string\n                                                    width: any\n                                                    height: any\n                                                }>\n                                                extractedColors: {\n                                                    colorDark: {\n                                                        hex: string\n                                                        isFallback: boolean\n                                                    }\n                                                }\n                                            }>\n                                        }\n                                        description?: string\n                                        ownerV2?: {\n                                            data: {\n                                                __typename: string\n                                                name: string\n                                            }\n                                        }\n                                        coverArt?: {\n                                            sources: Array<{\n                                                url: string\n                                                width: number\n                                                height: number\n                                            }>\n                                            extractedColors: {\n                                                colorDark: {\n                                                    hex: string\n                                                    isFallback: boolean\n                                                }\n                                            }\n                                        }\n                                        artists?: {\n                                            items: Array<{\n                                                uri: string\n                                                profile: {\n                                                    name: string\n                                                }\n                                            }>\n                                        }\n                                        profile?: {\n                                            name: string\n                                        }\n                                        visuals?: {\n                                            avatarImage: {\n                                                sources: Array<{\n                                                    url: string\n                                                    width: number\n                                                    height: number\n                                                }>\n                                                extractedColors: {\n                                                    colorDark: {\n                                                        hex: string\n                                                        isFallback: boolean\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        duration?: {\n                                            totalMilliseconds: number\n                                        }\n                                        releaseDate?: {\n                                            isoString: string\n                                        }\n                                        playedState?: {\n                                            playPositionMilliseconds: number\n                                            state: string\n                                        }\n                                        podcastV2?: {\n                                            data: {\n                                                __typename: string\n                                                uri: string\n                                                name: string\n                                                coverArt: {\n                                                    sources: Array<{\n                                                        url: string\n                                                        width: number\n                                                        height: number\n                                                    }>\n                                                    extractedColors: {\n                                                        colorDark: {\n                                                            hex: string\n                                                            isFallback: boolean\n                                                        }\n                                                    }\n                                                }\n                                                publisher: {\n                                                    name: string\n                                                }\n                                                mediaType: string\n                                            }\n                                        }\n                                        contentRating?: {\n                                            label: string\n                                        }\n                                    }\n                                    uri?: string\n                                }\n                                data?: {\n                                    __typename: string\n                                }\n                            }>\n                            totalCount: number\n                        }\n                    }>\n                    totalCount: number\n                }\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/section.ts", "chunked_list": ["export type SpotifySection = {\n    data: {\n      homeSections: {\n        __typename: string\n        sections: Array<{\n          __typename: string\n          uri: string\n          data: {\n            __typename: string\n            title: {\n              text: string\n            }\n          }\n          sectionItems: {\n            items: Array<{\n              uri: string\n              content: {\n                __typename: string\n                data: {\n                  __typename: string\n                  uri: string\n                  name: string\n                  images: {\n                    items: Array<{\n                      sources: Array<{\n                        url: string\n                        width: any\n                        height: any\n                      }>\n                      extractedColors: {\n                        colorDark: {\n                          hex: string\n                          isFallback: boolean\n                        }\n                      }\n                    }>\n                  }\n                  description: string\n                  ownerV2: {\n                    data: {\n                      __typename: string\n                      name: string\n                    }\n                  }\n                }\n              }\n              data: any\n            }>\n            totalCount: number\n          }\n        }>\n      }\n    }\n    extensions: {\n      cacheControl: {\n        version: number\n        hints: Array<any>\n      }\n    }\n  }\n  "]}
{"filename": "src/types/myLibrary.ts", "chunked_list": ["export type SpotifyMyLibrary = {\n    data: {\n        me: {\n            libraryV2: {\n                page: {\n                    __typename: string\n                    availableFilters: Array<{\n                        id: string\n                        name: string\n                    }>\n                    selectedFilters: Array<any>\n                    availableSortOrders: Array<{\n                        id: string\n                        name: string\n                    }>\n                    selectedSortOrder: {\n                        id: string\n                        name: string\n                    }\n                    breadcrumbs: Array<any>\n                    items: Array<{\n                        addedAt: {\n                            isoString: string\n                        }\n                        pinnable: boolean\n                        pinned: boolean\n                        depth: number\n                        playedAt?: {\n                            isoString: string\n                        }\n                        item: {\n                            __typename: string\n                            _uri: string\n                            data: {\n                                __typename: string\n                                uri: string\n                                name?: string\n                                count?: number\n                                image?: {\n                                    extractedColors: {\n                                        colorDark: {\n                                            hex: string\n                                            isFallback: boolean\n                                        }\n                                    }\n                                    sources: Array<{\n                                        url: string\n                                        width: number\n                                        height: number\n                                    }>\n                                }\n                                collaborative?: boolean\n                                ownerV2?: {\n                                    data: {\n                                        __typename: string\n                                        id: string\n                                        name: string\n                                        uri: string\n                                        avatar: {\n                                            sources: Array<{\n                                                url: string\n                                                height: number\n                                                width: number\n                                            }>\n                                        }\n                                        username: string\n                                    }\n                                }\n                                images?: {\n                                    items: Array<{\n                                        extractedColors: {\n                                            colorDark: {\n                                                hex: string\n                                                isFallback: boolean\n                                            }\n                                        }\n                                        sources: Array<{\n                                            url: string\n                                            width: any\n                                            height: any\n                                        }>\n                                    }>\n                                }\n                                profile?: {\n                                    name: string\n                                }\n                                visuals?: {\n                                    avatarImage: {\n                                        extractedColors: {\n                                            colorDark: {\n                                                hex: string\n                                                isFallback: boolean\n                                            }\n                                        }\n                                        sources: Array<{\n                                            url: string\n                                            width: number\n                                            height: number\n                                        }>\n                                    }\n                                }\n                            }\n                        }\n                    }>\n                    pagingInfo: {\n                        offset: number\n                        limit: number\n                    }\n                    totalCount: number\n                }\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<{\n                path: Array<string>\n                maxAge: number\n                scope: string\n            }>\n        }\n    }\n}\n"]}
{"filename": "src/types/user.ts", "chunked_list": ["export type SpotifyUser = {\n    uri: string\n    name: string\n    image_url: string\n    followers_count: number\n    following_count: number\n    is_following: boolean\n    public_playlists: Array<{\n        uri: string\n        name: string\n        image_url: string\n        followers_count?: number\n        owner_name?: string\n        owner_uri?: string\n        is_following?: boolean\n    }>\n    total_public_playlists_count: number\n    has_spotify_name: boolean\n    has_spotify_image: boolean\n    color: number\n    allow_follows: boolean\n    show_follows: boolean\n}\n"]}
{"filename": "src/types/searchArtists.ts", "chunked_list": ["export type SpotifySearchArtists = {\n    data: {\n        searchV2: {\n            query: string\n            artists: {\n                totalCount: number\n                items: Array<{\n                    data: {\n                        __typename: string\n                        uri: string\n                        profile: {\n                            name: string\n                            verified: boolean\n                        }\n                        visuals: {\n                            avatarImage?: {\n                                sources: Array<{\n                                    url: string\n                                    width: number\n                                    height: number\n                                }>\n                                extractedColors: {\n                                    colorDark: {\n                                        hex: string\n                                        isFallback: boolean\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }>\n                pagingInfo: {\n                    nextOffset: number\n                    limit: number\n                }\n            }\n        }\n    }\n    extensions: {\n        requestIds: {\n            \"/searchV2\": {\n                \"search-api\": string\n            }\n        }\n        cacheControl: {\n            version: number\n            hints: Array<any>\n        }\n    }\n}\n"]}
{"filename": "src/types/musixmatchSearch.ts", "chunked_list": ["export type MusixmatchSearch = {\n    track_id: number\n    track_mbid: string\n    track_isrc: string\n    commontrack_isrcs: Array<Array<string>>\n    track_spotify_id: string\n    commontrack_spotify_ids: Array<string>\n    track_soundcloud_id: number\n    track_xboxmusic_id: string\n    track_name: string\n    track_name_translation_list: Array<any>\n    track_rating: number\n    track_length: number\n    commontrack_id: number\n    instrumental: number\n    explicit: number\n    has_lyrics: number\n    has_lyrics_crowd: number\n    has_subtitles: number\n    has_richsync: number\n    has_track_structure: number\n    num_favourite: number\n    lyrics_id: number\n    subtitle_id: number\n    album_id: number\n    album_name: string\n    artist_id: number\n    artist_mbid: string\n    artist_name: string\n    album_coverart_100x100: string\n    album_coverart_350x350: string\n    album_coverart_500x500: string\n    album_coverart_800x800: string\n    track_share_url: string\n    track_edit_url: string\n    commontrack_vanity_id: string\n    restricted: number\n    first_release_date: string\n    updated_time: string\n    primary_genres: {\n        music_genre_list: Array<{\n            music_genre: {\n                music_genre_id: number\n                music_genre_parent_id: number\n                music_genre_name: string\n                music_genre_name_extended: string\n                music_genre_vanity: string\n            }\n        }>\n    }\n    secondary_genres: {\n        music_genre_list: Array<{\n            music_genre: {\n                music_genre_id: number\n                music_genre_parent_id: number\n                music_genre_name: string\n                music_genre_name_extended: string\n                music_genre_vanity: string\n            }\n        }>\n    }\n}\n"]}
{"filename": "src/types/relatedTrackArtists.ts", "chunked_list": ["export type SpotifyRelatedTrackArtists = {\n    data: {\n        trackUnion: {\n            __typename: string\n            firstArtist: {\n                items: Array<{\n                    artist: {\n                        relatedContent: {\n                            relatedArtists: {\n                                totalCount: number\n                                items: Array<{\n                                    id: string\n                                    uri: string\n                                    profile: {\n                                        name: string\n                                    }\n                                    visuals: {\n                                        avatarImage: {\n                                            sources: Array<{\n                                                width: number\n                                                height: number\n                                                url: string\n                                            }>\n                                        }\n                                    }\n                                }>\n                            }\n                        }\n                    }\n                }>\n            }\n            otherArtists: {\n                items: Array<{\n                    artist: {\n                        id: string\n                        uri: string\n                        visuals: {\n                            avatarImage: {\n                                sources: Array<{\n                                    width: number\n                                    height: number\n                                    url: string\n                                }>\n                            }\n                        }\n                        profile: {\n                            name: string\n                        }\n                        discography: {\n                            popularReleasesAlbums: {\n                                totalCount: number\n                                items: Array<{\n                                    name: string\n                                    type: string\n                                    uri: string\n                                    playability: {\n                                        playable: boolean\n                                    }\n                                    date: {\n                                        isoString: string\n                                        precision: string\n                                        year: number\n                                    }\n                                    tracks: {\n                                        totalCount: number\n                                        items: Array<{\n                                            track: {\n                                                uri: string\n                                                trackNumber: number\n                                            }\n                                        }>\n                                    }\n                                    coverArt: {\n                                        extractedColors: {\n                                            colorRaw: {\n                                                hex: string\n                                            }\n                                        }\n                                        sources: Array<{\n                                            url: string\n                                            width: number\n                                            height: number\n                                        }>\n                                    }\n                                }>\n                            }\n                        }\n                    }\n                }>\n            }\n        }\n    }\n    extensions: {\n        cacheControl: {\n            version: number\n            hints: Array<{\n                path: Array<string>\n                maxAge: number\n                scope: string\n            }>\n        }\n    }\n}\n"]}
