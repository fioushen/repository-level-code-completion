{"filename": "environment.d.ts", "chunked_list": ["declare global {\n    namespace NodeJS {\n        interface ProcessEnv {\n            token: string;\n            guildId: string;\n            clientId: string;\n            environment: \"dev\" | \"prod\" | \"debug\";\n        }\n    }\n}\n\nexport { };"]}
{"filename": "src/tasks.ts", "chunked_list": ["import { User } from 'discord.js';\nimport fs from 'fs';\n\nconst tasksFile = \"tasks.json\";\n\nexport type Task = {\n    id: number;\n    description: string;\n    assignee: string;\n    threadId?: string;\n}\n\n// TODO: throw this shit into a database\n", "export function AddTask(description: string, assignee: string, threadId?: string): Task {\n    let id = FindLastId();\n\n    let task: Task = {\n        id, description, assignee, threadId\n    }\n    _AddTask(task);\n\n    return task;\n}\n", "export function RemoveTask(id: number): Task {\n    let tasks = GetTasks();\n\n    FlushTasks();\n\n    // TODO: THROW SOMETHING IF TASK DOESNT EXIST ITS NOT HANDLED YET\n\n    let removedTask: Task = null;\n\n    for (let task of tasks) {\n        if (task.id == id) {\n            removedTask = task;\n            continue;\n        }\n\n        _AddTask(task);\n    }\n\n    return removedTask;\n}\n", "    for (let task of tasks) {\n        if (task.id == id) {\n            removedTask = task;\n            continue;\n        }\n\n        _AddTask(task);\n    }\n\n    return removedTask;\n}\n", "export function SetThreadId(id: number, threadId: string): Task {\n    let tasks = GetTasks();\n    FlushTasks();\n\n    let editedTask: Task = null;\n\n    for (let task of tasks) {\n        if (task.id == id) {\n            if (threadId != undefined) task.threadId = threadId;\n            editedTask = task;\n        }\n\n        _AddTask(task);\n    }\n\n    return editedTask;\n\n}\n\n", "            if (threadId != undefined) task.threadId = threadId;\n            editedTask = task;\n        }\n\n        _AddTask(task);\n    }\n\n    return editedTask;\n\n}\n\n", "export function SetAssignee(id: number, assignee: User): Task {\n    let tasks = GetTasks();\n    FlushTasks();\n\n    let editedTask: Task = null;\n\n    for (let task of tasks) {\n        if (task.id == id) {\n            if (assignee != undefined) task.assignee = assignee.id;\n            editedTask = task;\n        }\n\n        _AddTask(task);\n    }\n\n    return editedTask;\n}\n", "            if (assignee != undefined) task.assignee = assignee.id;\n            editedTask = task;\n        }\n\n        _AddTask(task);\n    }\n\n    return editedTask;\n}\n\nexport function SetDescription(id: number, description: string): Task {\n    let tasks = GetTasks();\n    FlushTasks();\n\n    let editedTask: Task = null;\n", "export function SetDescription(id: number, description: string): Task {\n    let tasks = GetTasks();\n    FlushTasks();\n\n    let editedTask: Task = null;\n\n    for (let task of tasks) {\n        if (task.id == id) {\n            task.description = description;\n            editedTask = task;\n        }\n\n        _AddTask(task);\n    }\n\n    return editedTask;\n}\n", "export function GetTaskById(id: number): Task {\n    let tasks = GetTasks();\n\n    for (let task of tasks) {\n        if (task.id == id) {\n            return task;\n        }\n    }\n\n    return null;\n}\n", "function FindLastId() {\n    let tasks = GetTasks();\n\n    let id: number = 0;\n\n    if (tasks == undefined || tasks == null || tasks.length == 0) {\n        return id;\n    }\n\n\n    // TODO: throw this shit into a database so you dont have to poll tasks every time", "    for (let t of tasks) {\n        if (t.id >= id) {\n            id = t.id + 1;\n        }\n    }\n\n    return id;\n}\n\nfunction _AddTask(task: Task) {\n    let tasks = GetTasks();\n    tasks.push(task);\n\n    let json = { tasks: tasks }\n\n    fs.writeFileSync(tasksFile, JSON.stringify(json), { flag: \"w+\" });\n}\n", "function _AddTask(task: Task) {\n    let tasks = GetTasks();\n    tasks.push(task);\n\n    let json = { tasks: tasks }\n\n    fs.writeFileSync(tasksFile, JSON.stringify(json), { flag: \"w+\" });\n}\n\nexport function GetTasks(): Task[] {\n    let tasks: Task[] = (JSON.parse(fs.readFileSync(tasksFile).toString())).tasks;\n", "export function GetTasks(): Task[] {\n    let tasks: Task[] = (JSON.parse(fs.readFileSync(tasksFile).toString())).tasks;\n\n    if (tasks == undefined || tasks == null || tasks.length == 0) {\n        return [];\n    }\n\n    return tasks;\n}\n\nexport function FlushTasks() {\n    let tasks = { tasks: [] };\n\n    fs.writeFileSync(tasksFile, JSON.stringify(tasks), { flag: \"w+\" })\n}\n", "export function FlushTasks() {\n    let tasks = { tasks: [] };\n\n    fs.writeFileSync(tasksFile, JSON.stringify(tasks), { flag: \"w+\" })\n}\n\nexport function TasksToString() {\n    let tasks = GetTasks();\n    if (tasks == undefined || tasks == null || tasks.length == 0) {\n        return \"No tasks!\";\n    }\n\n    let tasksString = \"\";\n", "    if (tasks == undefined || tasks == null || tasks.length == 0) {\n        return \"No tasks!\";\n    }\n\n    let tasksString = \"\";\n\n    for (let task of tasks) {\n        tasksString += `${task.description}, for <@${task.assignee}> | ${task.id}\\n`;\n    }\n\n    tasksString += \"\\n\";\n\n    return tasksString;\n}"]}
{"filename": "src/Commands.ts", "chunked_list": ["import { Assign } from \"./commands/assign\";\nimport { Display } from \"./commands/display\";\nimport { Edit } from \"./commands/edit\";\nimport { Remove } from \"./commands/remove\";\nimport { Taskboard } from \"./commands/taskboard\";\nimport { Todo } from \"./commands/todo\";\nimport { Command } from \"./types/Command\";\n\nexport const Commands: Command[] = [Todo, Remove, Display, Assign, Edit, Taskboard];", "export const Commands: Command[] = [Todo, Remove, Display, Assign, Edit, Taskboard];"]}
{"filename": "src/flushCommands.ts", "chunked_list": ["/// shit works use if necessary\n\n\nconst { REST } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v9');\n\nconst token = process.env.token;\nconst clientId = process.env.clientId;\nconst guildId = process.env.guildId;\n", "const guildId = process.env.guildId;\n\nconst rest = new REST({ version: '9' }).setToken(token);\nrest.get(Routes.applicationGuildCommands(clientId, guildId))\n    .then(data => {\n        const promises = [];\n        for (const command of data) {\n            const deleteUrl = `${Routes.applicationGuildCommands(clientId, guildId)}/${command.id}`;\n            promises.push(rest.delete(deleteUrl));\n        }\n        return Promise.all(promises);\n    });\n"]}
{"filename": "src/index.ts", "chunked_list": ["require('dotenv').config();\n\nimport { Interaction } from 'discord.js';\nimport { InteractionCreate } from './commandHandler';\nimport { Ready } from './ready';\nimport { ToDoClient } from './types/ToDoClient';\n\nconst token = process.env.token;\n\nconst client = new ToDoClient();", "\nconst client = new ToDoClient();\n\nclient.on(\"ready\", async () => {\n    Ready(client);\n});\n\nclient.on(\"interactionCreate\", async (interaction: Interaction) => {\n    InteractionCreate(client, interaction);\n});", "    InteractionCreate(client, interaction);\n});\n\nclient.login(token);\n\n\n"]}
{"filename": "src/ready.ts", "chunked_list": ["require('dotenv').config();\n\nimport { CategoryChannel, ChannelType, Guild, TextChannel } from 'discord.js';\nimport { Commands } from './Commands';\nimport { ToDoClient } from './types/ToDoClient';\n\n\n\nexport async function Ready(client: ToDoClient): Promise<void> {\n    if (!client.user || !client.application) {\n        return;\n    }\n\n    await client.application.commands.set(Commands);\n\n    console.log(`ready ${client.user.tag}`);\n\n    /*\n\n    TODO:\n    Creates a ToDoBot channel category and a Taskboard text channel in it. Discuss. \n\n    let server: Guild = await client.guilds.fetch(process.env.guildId);\n\n    let category: CategoryChannel = await server.channels.create({\n        name: \"ToDoBot\",\n        type: ChannelType.GuildCategory\n    });\n\n    await server.channels.create({\n        name: \"Taskboard\",\n        type: ChannelType.GuildText,\n        parent: category.id\n    });\n    \n    */\n}", "export async function Ready(client: ToDoClient): Promise<void> {\n    if (!client.user || !client.application) {\n        return;\n    }\n\n    await client.application.commands.set(Commands);\n\n    console.log(`ready ${client.user.tag}`);\n\n    /*\n\n    TODO:\n    Creates a ToDoBot channel category and a Taskboard text channel in it. Discuss. \n\n    let server: Guild = await client.guilds.fetch(process.env.guildId);\n\n    let category: CategoryChannel = await server.channels.create({\n        name: \"ToDoBot\",\n        type: ChannelType.GuildCategory\n    });\n\n    await server.channels.create({\n        name: \"Taskboard\",\n        type: ChannelType.GuildText,\n        parent: category.id\n    });\n    \n    */\n}"]}
{"filename": "src/commandHandler.ts", "chunked_list": ["import { CommandInteraction, Interaction } from \"discord.js\";\nimport { Commands } from \"./Commands\";\nimport { ToDoClient } from \"./types/ToDoClient\";\n\nexport async function InteractionCreate(client: ToDoClient, interaction: Interaction) {\n    if (interaction.isCommand() || interaction.isContextMenuCommand()) {\n        await handleSlashCommand(client, interaction);\n    }\n}\n\nexport async function handleSlashCommand(client: ToDoClient, interaction: CommandInteraction): Promise<void> {\n    const slashCommand = Commands.find(c => c.name === interaction.commandName);", "export async function handleSlashCommand(client: ToDoClient, interaction: CommandInteraction): Promise<void> {\n    const slashCommand = Commands.find(c => c.name === interaction.commandName);\n    if (!slashCommand) {\n        interaction.followUp({ content: \"An error has occurred\" });\n        return;\n    }\n\n    await interaction.deferReply();\n\n    slashCommand.run(interaction, client);\n};"]}
{"filename": "src/commands/edit.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction } from 'discord.js';\nimport { GetTaskById, SetDescription } from '../tasks';\nimport { Command } from '../types/Command';\n\nexport const Edit: Command = {\n    name: \"edit\",\n    description: \"Edit task description\",\n    type: ApplicationCommandType.ChatInput,\n    options: [\n        {", "    options: [\n        {\n            name: \"task\",\n            description: \"Id of the task you are editing\",\n            required: true,\n            type: ApplicationCommandOptionType.Integer\n        },\n        {\n            name: \"description\",\n            description: \"New task description\",", "            name: \"description\",\n            description: \"New task description\",\n            required: true,\n            type: ApplicationCommandOptionType.String\n        }\n    ],\n    run: async (interaction: CommandInteraction) => {\n        let taskId = interaction.options.get('task').value.toString();\n        let taskDescription = interaction.options.get('description').value.toString();\n", "        let taskDescription = interaction.options.get('description').value.toString();\n\n        let content = \"Task doesn't exist\";\n\n        let oldTaskDescription = GetTaskById(parseInt(taskId))?.description;\n\n        if (oldTaskDescription != null) {\n\n            let task = SetDescription(parseInt(taskId), taskDescription);\n\n            content = `Updated task \"${oldTaskDescription}\" (ID ${taskId})\\n\\n\"${task.description}\" for <@${task.assignee}>`;\n        }\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}"]}
{"filename": "src/commands/display.ts", "chunked_list": ["import { ApplicationCommandType, CommandInteraction } from 'discord.js';\nimport { TasksToString } from '../tasks';\nimport { Command } from '../types/Command';\n\nexport const Display: Command = {\n    name: \"display\",\n    description: \"Display all tasks\",\n    type: ApplicationCommandType.ChatInput,\n    run: async (interaction: CommandInteraction) => {\n        let content = TasksToString();", "    run: async (interaction: CommandInteraction) => {\n        let content = TasksToString();\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}", "}"]}
{"filename": "src/commands/todo.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction, TextChannel } from 'discord.js';\nimport { AddTask, SetThreadId } from '../tasks';\nimport { Command } from '../types/Command';\nimport { ToDoClient } from '../types/ToDoClient';\nimport { CreateThreadForTask } from './taskboard';\n\nexport const Todo: Command = {\n    name: \"todo\",\n    description: \"Create a new task\",\n    type: ApplicationCommandType.ChatInput,", "    description: \"Create a new task\",\n    type: ApplicationCommandType.ChatInput,\n    options: [\n        {\n            name: \"task\",\n            description: \"Task description\",\n            required: true,\n            type: ApplicationCommandOptionType.String\n        },\n        {", "        },\n        {\n            name: \"assignee\",\n            description: \"User to assign task to, leave empty if assigning to yourself\",\n            required: false,\n            type: ApplicationCommandOptionType.User\n        }\n    ],\n    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n        let taskDesc = interaction.options.get('task').value.toString();", "    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n        let taskDesc = interaction.options.get('task').value.toString();\n\n        let user = interaction.options.get('assignee')?.user;\n\n        if (user === undefined) {\n            user = interaction.user;\n        }\n\n        let task = AddTask(taskDesc, user.id);\n", "        if (client.taskboardID != null) {\n            let threadId = await CreateThreadForTask(task, client);\n            SetThreadId(task.id, threadId);\n        }\n\n\n        let content = `Set task \"${taskDesc}\" (ID ${task.id}) for ${user}`;\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}"]}
{"filename": "src/commands/remove.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction } from 'discord.js';\nimport { RemoveTask, TasksToString } from '../tasks';\nimport { Command } from '../types/Command';\nimport { ToDoClient } from '../types/ToDoClient';\nimport { CloseThreadForTask } from './taskboard';\n\nexport const Remove: Command = {\n    name: \"remove\",\n    description: \"Remove a task by id\",\n    type: ApplicationCommandType.ChatInput,", "    description: \"Remove a task by id\",\n    type: ApplicationCommandType.ChatInput,\n    options: [\n        {\n            name: \"task\",\n            description: \"Id of the task you want to remove\",\n            required: true,\n            type: ApplicationCommandOptionType.Integer\n        }\n    ],", "        }\n    ],\n    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n        let taskId = interaction.options.get('task').value.toString();\n        let task = RemoveTask(parseInt(taskId));\n\n        let newTaskList = TasksToString();\n\n        let content = \"Task doesn't exist\";\n        if (task != null) {\n            content = `Task \"${task.description}\" removed, ${interaction.user}\\n\\n${newTaskList}`;\n", "        let content = \"Task doesn't exist\";\n        if (task != null) {\n            content = `Task \"${task.description}\" removed, ${interaction.user}\\n\\n${newTaskList}`;\n\n            if (client.taskboardID != null) {\n                await CloseThreadForTask(task, client);\n            }\n        }\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}"]}
{"filename": "src/commands/assign.ts", "chunked_list": ["import { ApplicationCommandOptionType, ApplicationCommandType, CommandInteraction } from 'discord.js';\nimport { SetAssignee } from '../tasks';\nimport { Command } from '../types/Command';\n\nexport const Assign: Command = {\n    name: \"assign\",\n    description: \"Assign a task to a member\",\n    type: ApplicationCommandType.ChatInput,\n    options: [\n        {", "    options: [\n        {\n            name: \"task\",\n            description: \"Id of the task you are assigning\",\n            required: true,\n            type: ApplicationCommandOptionType.Integer\n        },\n        {\n            name: \"assignee\",\n            description: \"User to assign task to, leave empty if assigning to yourself\",", "            name: \"assignee\",\n            description: \"User to assign task to, leave empty if assigning to yourself\",\n            required: false,\n            type: ApplicationCommandOptionType.User\n        }\n    ],\n    run: async (interaction: CommandInteraction) => {\n        let taskId = interaction.options.get('task').value.toString();\n\n        let content = \"Task doesn't exist\";", "\n        let content = \"Task doesn't exist\";\n\n        let user = interaction.options.get('assignee')?.user;\n\n        if (user === undefined) {\n            user = interaction.user;\n        }\n\n        let task = SetAssignee(parseInt(taskId), user);\n", "        if (task != null) {\n            content = `Task \"${task.description}\" assigned to ${user}`;\n        }\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}"]}
{"filename": "src/commands/taskboard.ts", "chunked_list": ["require('dotenv').config();\n\nimport { AnyThreadChannel, ApplicationCommandOptionType, ApplicationCommandType, Channel, ChannelType, CommandInteraction, Guild, TextChannel } from 'discord.js';\nimport { GetTasks, SetThreadId, Task, TasksToString } from '../tasks';\nimport { Command } from '../types/Command';\nimport { ToDoClient } from '../types/ToDoClient';\n\nexport const Taskboard: Command = {\n    name: \"taskboard\",\n    description: \"Set taskboard channel\",", "    name: \"taskboard\",\n    description: \"Set taskboard channel\",\n    type: ApplicationCommandType.ChatInput,\n    options: [\n        {\n            name: \"channel\",\n            description: \"The channel you want to set as the taskboard channel\",\n            required: true,\n            type: ApplicationCommandOptionType.Channel\n        }", "            type: ApplicationCommandOptionType.Channel\n        }\n    ],\n    run: async (interaction: CommandInteraction, client: ToDoClient) => {\n        let channelID = interaction.options.get('channel').value.toString();\n\n        let channel: Channel = await client.channels.fetch(channelID);\n\n        let content = \"\";\n\n        if (channel.type == ChannelType.GuildText) {\n            client.taskboardID = channelID;\n            content = \"okey taskboard is now channel with id: `\" + channelID + \"` aka \" + channel.toString();\n\n            channel.send(`## This is the taskboard\\n\\n${TasksToString()}`);\n", "        let content = \"\";\n\n        if (channel.type == ChannelType.GuildText) {\n            client.taskboardID = channelID;\n            content = \"okey taskboard is now channel with id: `\" + channelID + \"` aka \" + channel.toString();\n\n            channel.send(`## This is the taskboard\\n\\n${TasksToString()}`);\n\n            for (let task of GetTasks()) {\n                let threadId = await CreateThreadForTask(task, client);\n                SetThreadId(task.id, threadId);\n            }\n        } else {\n            content = \"bro this is not text channel, id `\" + channelID + \"` type: `\" + channel.type + \"` (https://discord.com/developers/docs/resources/channel) aka \" + channel.toString();\n        }\n\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}\n", "            for (let task of GetTasks()) {\n                let threadId = await CreateThreadForTask(task, client);\n                SetThreadId(task.id, threadId);\n            }\n        } else {\n            content = \"bro this is not text channel, id `\" + channelID + \"` type: `\" + channel.type + \"` (https://discord.com/developers/docs/resources/channel) aka \" + channel.toString();\n        }\n\n\n        await interaction.followUp({\n            ephemeral: false,\n            content\n        })\n    }\n}\n", "export async function CreateThreadForTask(task: Task, client: ToDoClient): Promise<string> {\n    let channel: TextChannel = await GetTaskboardTextChannel(client);\n\n    let taskThread = await channel.threads.create({\n        name: `${task.id} | ${task.description} | <@${task.assignee}>`,\n        type: ChannelType.PublicThread,\n    })\n\n    taskThread.send(`${task.description}, for <@${task.assignee}> | ${task.id}`);\n\n    return taskThread.id;\n}\n", "export async function CloseThreadForTask(task: Task, client: ToDoClient): Promise<AnyThreadChannel<boolean>> {\n    let channel: TextChannel = await GetTaskboardTextChannel(client);\n\n    let thread = await channel.threads.fetch(task.threadId);\n    await thread.send(\"Task remove. Closing thread.\");\n\n    return await thread.setArchived();\n}\n\nasync function GetTaskboardTextChannel(client: ToDoClient): Promise<TextChannel> {\n    return await client.channels.fetch(client.taskboardID) as TextChannel;\n}\n", "async function GetTaskboardTextChannel(client: ToDoClient): Promise<TextChannel> {\n    return await client.channels.fetch(client.taskboardID) as TextChannel;\n}\n\nexport async function SendMessageToThread(task: Task, client: ToDoClient): Promise<string> {\n    // TODO\n\n    return \"\"\n}"]}
{"filename": "src/types/ToDoClient.ts", "chunked_list": ["import { Client, GatewayIntentBits } from \"discord.js\";\n\nexport class ToDoClient extends Client {\n    taskboardID: string = null;\n\n    constructor() {\n        super({\n            intents: [\n                GatewayIntentBits.Guilds,\n                GatewayIntentBits.GuildMessages,\n                GatewayIntentBits.MessageContent,\n                GatewayIntentBits.GuildMessageReactions,\n                GatewayIntentBits.DirectMessages\n            ]\n        })\n    }\n}"]}
{"filename": "src/types/Command.ts", "chunked_list": ["import { ChatInputApplicationCommandData, CommandInteraction } from \"discord.js\";\nimport { ToDoClient } from \"./ToDoClient\";\n\nexport interface Command extends ChatInputApplicationCommandData {\n    run: (interaction: CommandInteraction, client?: ToDoClient) => void;\n}"]}
