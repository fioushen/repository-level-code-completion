{"filename": "src/server.ts", "chunked_list": ["import * as dotenv from \"dotenv\"\ndotenv.config()\nimport express from \"express\"\nimport cors from \"cors\"\nimport connectToDatabase from \"./db\"\nimport orderRoutes from \"./routes/order\"\nimport productRoutes from \"./routes/product\"\nimport { webhookHandler } from \"./webhook\"\n\nconst app = express()", "\nconst app = express()\napp.use(cors())\n\nconnectToDatabase()\n\napp.get(\"/ping\", (request, response) => {\n  response.send(\"pong\")\n})\n", "})\n\napp.post(\"/webhook\", express.raw({ type: \"application/json\" }), webhookHandler)\n\napp.use(express.json())\napp.use(\"/products\", productRoutes)\napp.use(\"/orders\", orderRoutes)\n\nconst PORT = process.env.PORT || 3000\n", "const PORT = process.env.PORT || 3000\n\napp.listen(PORT, () => {\n  console.log(\"Server up and running at port\", PORT)\n})\n"]}
{"filename": "src/db.ts", "chunked_list": ["import mongoose from \"mongoose\"\n\nconst connectToDatabase = async () => {\n  try {\n    const connection = await mongoose.connect(process.env.MONGO_URI)\n    console.log(\"Connection established\")\n  } catch (error) {\n    console.log(\"error in connectToDatabase\", error)\n    throw error\n  }\n}\n\nexport default connectToDatabase\n"]}
{"filename": "src/webhook/index.ts", "chunked_list": ["import { Request, Response } from \"express\"\nimport stripe from \"stripe\"\nimport Order from \"../models/order\"\n\nconst stripeClient = new stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2022-11-15\",\n})\n\nexport const webhookHandler = async (request: Request, response: Response) => {\n  try {\n    const sig = request.headers[\"stripe-signature\"] as string\n    const event = stripeClient.webhooks.constructEvent(\n      request.body,\n      sig,\n      process.env.STRIPE_WEBHOOK_SECRET\n    )", "export const webhookHandler = async (request: Request, response: Response) => {\n  try {\n    const sig = request.headers[\"stripe-signature\"] as string\n    const event = stripeClient.webhooks.constructEvent(\n      request.body,\n      sig,\n      process.env.STRIPE_WEBHOOK_SECRET\n    )\n    if (event.type === \"charge.succeeded\") {\n      const charge = event.data.object as stripe.Charge\n      const order = await Order.findOne({\n        paymentIntentId: charge.payment_intent,\n      })", "    if (event.type === \"charge.succeeded\") {\n      const charge = event.data.object as stripe.Charge\n      const order = await Order.findOne({\n        paymentIntentId: charge.payment_intent,\n      })\n      if (order) {\n        order.paymentStatus = \"paid\"\n        order.paymentDetails = charge\n        await order.save()\n      }\n    } else if (event.type === \"charge.failed\") {\n      const charge = event.data.object as stripe.Charge\n      const order = await Order.findOne({\n        paymentIntentId: charge.payment_intent,\n      })", "    } else if (event.type === \"charge.failed\") {\n      const charge = event.data.object as stripe.Charge\n      const order = await Order.findOne({\n        paymentIntentId: charge.payment_intent,\n      })\n      if (order) {\n        order.paymentStatus = \"failed\"\n        order.paymentDetails = charge\n        await order.save()\n      }\n    }\n    response.send({ received: true })", "  } catch (error) {\n    console.log(\"error in webhookHandler\", error)\n    throw error\n  }\n}\n"]}
{"filename": "src/models/product.ts", "chunked_list": ["import mongoose, { Schema } from \"mongoose\"\nimport { IProduct } from \"../types\"\n\nconst productSchema = new Schema<IProduct>(\n  {\n    name: {\n      type: String,\n      required: true,\n    },\n    image: {", "    },\n    image: {\n      type: String,\n      required: true,\n    },\n    description: {\n      type: String,\n      required: true,\n    },\n    price: {", "    },\n    price: {\n      type: Number,\n      required: true,\n    },\n  },\n  {\n    timestamps: true,\n  }\n)", "  }\n)\n\nconst Product = mongoose.model(\"Product\", productSchema)\n\nexport default Product\n"]}
{"filename": "src/models/order.ts", "chunked_list": ["import mongoose, { Schema } from \"mongoose\"\nimport { IOrder } from \"../types\"\n\nconst orderSchema = new Schema<IOrder>(\n  {\n    user: {\n      name: {\n        type: String,\n        required: true,\n      },", "        required: true,\n      },\n      email: {\n        type: String,\n        required: true,\n      },\n    },\n    orderItems: [\n      {\n        product: {", "      {\n        product: {\n          type: Schema.Types.ObjectId,\n          required: true,\n          ref: \"Product\",\n        },\n        name: {\n          type: String,\n          required: true,\n        },", "          required: true,\n        },\n        image: {\n          type: String,\n          required: true,\n        },\n        quantity: {\n          type: Number,\n          required: true,\n        },", "          required: true,\n        },\n        price: {\n          type: Number,\n          required: true,\n        },\n      },\n    ],\n    deliveryAddress: {\n      address: {", "    deliveryAddress: {\n      address: {\n        type: String,\n        required: true,\n      },\n      city: {\n        type: String,\n        required: true,\n      },\n    },", "      },\n    },\n    paymentDetails: {\n      type: Object,\n      required: false,\n    },\n    paymentIntentId: {\n      type: String,\n      required: true,\n    },", "      required: true,\n    },\n    paymentStatus: {\n      type: String,\n      required: true,\n    },\n  },\n  {\n    timestamps: true,\n  }", "    timestamps: true,\n  }\n)\n\nconst Order = mongoose.model(\"Order\", orderSchema)\n\nexport default Order\n"]}
{"filename": "src/controller/product.ts", "chunked_list": ["import { Request, response, Response } from \"express\"\nimport Product from \"../models/product\"\nimport { IProduct } from \"../types\"\n\ntype CreateProductRequestType = Pick<\n  IProduct,\n  \"image\" | \"name\" | \"description\" | \"price\"\n>\n\nexport const createProduct = async (request: Request, response: Response) => {\n  try {\n    const { image, name, price, description }: CreateProductRequestType =\n      request.body\n\n    const product = await Product.create({\n      image,\n      name,\n      price,\n      description,\n    })\n    response.send(product)", "  try {\n    const { image, name, price, description }: CreateProductRequestType =\n      request.body\n\n    const product = await Product.create({\n      image,\n      name,\n      price,\n      description,\n    })\n    response.send(product)", "  } catch (error) {\n    console.log(\"error in createProduct\", error)\n    response.send({\n      message: \"Something went wrong while creating product\",\n    })\n    throw error\n  }\n}\n\nexport const getProducts = async (request: Request, response: Response) => {\n  try {\n    const products = await Product.find({})\n    response.send(products)", "  try {\n    const products = await Product.find({})\n    response.send(products)\n  } catch (error) {\n    console.log(\"error in getProducts\", error)\n    response.send({ message: \"Something went wrong in get products\" })\n    throw error\n  }\n}\n\nexport const getProductById = async (request: Request, response: Response) => {", "  try {\n    const { id } = request.params\n    const product = await Product.findById(id)\n    response.send(product)\n  } catch (error) {\n    console.log(\"error in getProductById\", error)\n    response.send({\n      message: \"Something went wrong while fetching the product\",\n    })\n    throw error\n  }\n}\n"]}
{"filename": "src/controller/order.ts", "chunked_list": ["import { Request, Response } from \"express\"\nimport Order from \"../models/order\"\nimport { IOrder, IOrderItem } from \"../types\"\nimport stripe from \"stripe\"\n\nconst stripeClient = new stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2022-11-15\",\n})\n\ntype CreateOrderType = Pick<\n  IOrder,\n  \"deliveryAddress\" | \"totalPrice\" | \"user\" | \"orderItems\"\n>\n\nconst BASE_UNIT = 100\n\nconst getTotalAmount = (orderItems: IOrderItem[]) => {\n  return (\n    orderItems.reduce((acc, item) => acc + item.price * item.quantity, 0) *\n    BASE_UNIT\n  )\n}\n\n/**\n *\n * @param request\n * @param response\n *\n * 1. To make a request to stripe, it's gonna return paymentIntent,we've to pass currency and order amount\n * 2. Save paymentIntentId in order model\n * 3. Return paymentIntentId.client_secret\n *\n */\n\nexport const createOrder = async (request: Request, response: Response) => {", "\ntype CreateOrderType = Pick<\n  IOrder,\n  \"deliveryAddress\" | \"totalPrice\" | \"user\" | \"orderItems\"\n>\n\nconst BASE_UNIT = 100\n\nconst getTotalAmount = (orderItems: IOrderItem[]) => {\n  return (\n    orderItems.reduce((acc, item) => acc + item.price * item.quantity, 0) *\n    BASE_UNIT\n  )\n}\n\n/**\n *\n * @param request\n * @param response\n *\n * 1. To make a request to stripe, it's gonna return paymentIntent,we've to pass currency and order amount\n * 2. Save paymentIntentId in order model\n * 3. Return paymentIntentId.client_secret\n *\n */\n\nexport const createOrder = async (request: Request, response: Response) => {", "  try {\n    const { deliveryAddress, orderItems, totalPrice, user }: CreateOrderType =\n      request.body\n\n    const totalAmount = getTotalAmount(orderItems)\n\n    const paymentIntent = await stripeClient.paymentIntents.create({\n      amount: totalAmount,\n      currency: \"inr\",\n    })\n\n    const order = await Order.create({\n      user,\n      deliveryAddress,\n      orderItems,\n      totalPrice,\n      paymentIntentId: paymentIntent.id,\n      paymentStatus: \"pending\",\n      paymentDetails: {},\n    })\n    response.send({\n      clientSecret: paymentIntent.client_secret,\n    })", "  } catch (error) {\n    console.log(\"error in createOrder\", error)\n    response.send({\n      message: \"Something went wrong in create order\",\n    })\n    throw error\n  }\n}\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export interface IProduct {\n  _id: string\n  name: string\n  description: string\n  price: number\n  image: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface IUser {\n  name: string\n  email: string\n}\n", "export interface IUser {\n  name: string\n  email: string\n}\n\nexport interface IOrderItem {\n  name: string\n  quantity: number\n  image: string\n  price: number\n  product: string\n}\n", "export interface IDeliveryAddress {\n  address: string\n  city: string\n}\n\nexport interface IOrder {\n  _id: string\n  user: IUser\n  orderItems: IOrderItem[]\n  deliveryAddress: IDeliveryAddress\n  paymentDetails: {}\n  paymentIntentId: string\n  totalPrice: number\n  createdAt: string\n  updatedAt: string\n  paymentStatus: string\n}\n"]}
{"filename": "src/routes/product.ts", "chunked_list": ["import express from \"express\"\nimport {\n  createProduct,\n  getProductById,\n  getProducts,\n} from \"../controller/product\"\n\nconst productRoutes = express.Router()\n\nproductRoutes.get(\"/\", getProducts)", "\nproductRoutes.get(\"/\", getProducts)\nproductRoutes.get(\"/:id\", getProductById)\nproductRoutes.post(\"/\", createProduct)\n\nexport default productRoutes\n"]}
{"filename": "src/routes/order.ts", "chunked_list": ["import express from \"express\"\nimport { createOrder } from \"../controller/order\"\n\nconst orderRoutes = express.Router()\n\norderRoutes.post(\"/\", createOrder)\n\nexport default orderRoutes\n", ""]}
