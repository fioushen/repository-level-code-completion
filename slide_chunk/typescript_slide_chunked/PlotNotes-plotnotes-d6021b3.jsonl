{"filename": "playwright.config.ts", "chunked_list": ["import { defineConfig, devices } from '@playwright/test';\n\n/**\n * Read environment variables from file.\n * https://github.com/motdotla/dotenv\n */\n// require('dotenv').config();\n\n/**\n * See https://playwright.dev/docs/test-configuration.", "/**\n * See https://playwright.dev/docs/test-configuration.\n */\nexport default defineConfig({\n  timeout: 100000,\n  testDir: './tests',\n  /* Run tests in files in parallel */\n  fullyParallel: true,\n  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,", "  /* Fail the build on CI if you accidentally left test.only in the source code. */\n  forbidOnly: !!process.env.CI,\n  /* Retry on CI only */\n  retries: process.env.CI ? 2 : 0,\n  /* Opt out of parallel tests on CI. */\n  workers: process.env.CI ? 1 : undefined,\n  /* Reporter to use. See https://playwright.dev/docs/test-reporters */\n  reporter: 'html',\n  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {", "  /* Shared settings for all the projects below. See https://playwright.dev/docs/api/class-testoptions. */\n  use: {\n    /* Base URL to use in actions like `await page.goto('/')`. */\n    // baseURL: 'http://127.0.0.1:3000',\n\n    /* Collect trace when retrying the failed test. See https://playwright.dev/docs/trace-viewer */\n    trace: 'on-first-retry',\n  },\n\n  /* Configure projects for major browsers */", "\n  /* Configure projects for major browsers */\n  projects: [\n    {\n      name: 'chromium',\n      use: { \n        ...devices['Desktop Chrome'],\n        permissions: ['clipboard-read', 'clipboard-write'],\n       },\n    },", "       },\n    },\n\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n\n    {\n      name: 'webkit',", "    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n\n    /* Test against mobile viewports. */\n    // {\n    //   name: 'Mobile Chrome',\n    //   use: { ...devices['Pixel 5'] },\n    // },", "    //   use: { ...devices['Pixel 5'] },\n    // },\n    // {\n    //   name: 'Mobile Safari',\n    //   use: { ...devices['iPhone 12'] },\n    // },\n\n    /* Test against branded browsers. */\n    // {\n    //   name: 'Microsoft Edge',", "    // {\n    //   name: 'Microsoft Edge',\n    //   use: { ...devices['Desktop Edge'], channel: 'msedge' },\n    // },\n    // {\n    //   name: 'Google Chrome',\n    //   use: { ..devices['Desktop Chrome'], channel: 'chrome' },\n    // },\n  ],\n", "  ],\n\n  /* Run your local dev server before starting the tests */\n  // webServer: {\n  //   command: 'npm run start',\n  //   url: 'http://127.0.0.1:3000',\n  //   reuseExistingServer: !process.env.CI,\n  // },\n});\n", "});\n"]}
{"filename": "tests-examples/demo-todo-app.spec.ts", "chunked_list": ["import { test, expect, type Page } from '@playwright/test';\n\ntest.beforeEach(async ({ page }) => {\n  await page.goto('https://demo.playwright.dev/todomvc');\n});\n\nconst TODO_ITEMS = [\n  'buy some cheese',\n  'feed the cat',\n  'book a doctors appointment'\n];\n\ntest.describe('New Todo', () => {\n  test('should allow me to add todo items', async ({ page }) => {\n    // create a new todo locator\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n\n    // Create 1st todo.\n    await newTodo.fill(TODO_ITEMS[0]);\n    await newTodo.press('Enter');\n\n    // Make sure the list only has one todo item.\n    await expect(page.getByTestId('todo-title')).toHaveText([\n      TODO_ITEMS[0]\n    ]);\n\n    // Create 2nd todo.\n    await newTodo.fill(TODO_ITEMS[1]);\n    await newTodo.press('Enter');\n\n    // Make sure the list now has two todo items.\n    await expect(page.getByTestId('todo-title')).toHaveText([\n      TODO_ITEMS[0],\n      TODO_ITEMS[1]\n    ]);\n\n    await checkNumberOfTodosInLocalStorage(page, 2);\n  });\n\n  test('should clear text input field when an item is added', async ({ page }) => {\n    // create a new todo locator\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n\n    // Create one todo item.\n    await newTodo.fill(TODO_ITEMS[0]);\n    await newTodo.press('Enter');\n\n    // Check that input is empty.\n    await expect(newTodo).toBeEmpty();\n    await checkNumberOfTodosInLocalStorage(page, 1);\n  });\n\n  test('should append new items to the bottom of the list', async ({ page }) => {\n    // Create 3 items.\n    await createDefaultTodos(page);\n\n    // create a todo count locator\n    const todoCount = page.getByTestId('todo-count')\n  \n    // Check test using different methods.\n    await expect(page.getByText('3 items left')).toBeVisible();\n    await expect(todoCount).toHaveText('3 items left');\n    await expect(todoCount).toContainText('3');\n    await expect(todoCount).toHaveText(/3/);\n\n    // Check all items in one call.\n    await expect(page.getByTestId('todo-title')).toHaveText(TODO_ITEMS);\n    await checkNumberOfTodosInLocalStorage(page, 3);\n  });\n});\n\ntest.describe('Mark all as completed', () => {\n  test.beforeEach(async ({ page }) => {\n    await createDefaultTodos(page);\n    await checkNumberOfTodosInLocalStorage(page, 3);\n  });\n\n  test.afterEach(async ({ page }) => {\n    await checkNumberOfTodosInLocalStorage(page, 3);\n  });\n\n  test('should allow me to mark all items as completed', async ({ page }) => {\n    // Complete all todos.\n    await page.getByLabel('Mark all as complete').check();\n\n    // Ensure all todos have 'completed' class.\n    await expect(page.getByTestId('todo-item')).toHaveClass(['completed', 'completed', 'completed']);\n    await checkNumberOfCompletedTodosInLocalStorage(page, 3);\n  });\n\n  test('should allow me to clear the complete state of all items', async ({ page }) => {\n    const toggleAll = page.getByLabel('Mark all as complete');\n    // Check and then immediately uncheck.\n    await toggleAll.check();\n    await toggleAll.uncheck();\n\n    // Should be no completed classes.\n    await expect(page.getByTestId('todo-item')).toHaveClass(['', '', '']);\n  });\n\n  test('complete all checkbox should update state when items are completed / cleared', async ({ page }) => {\n    const toggleAll = page.getByLabel('Mark all as complete');\n    await toggleAll.check();\n    await expect(toggleAll).toBeChecked();\n    await checkNumberOfCompletedTodosInLocalStorage(page, 3);\n\n    // Uncheck first todo.\n    const firstTodo = page.getByTestId('todo-item').nth(0);\n    await firstTodo.getByRole('checkbox').uncheck();\n\n    // Reuse toggleAll locator and make sure its not checked.\n    await expect(toggleAll).not.toBeChecked();\n\n    await firstTodo.getByRole('checkbox').check();\n    await checkNumberOfCompletedTodosInLocalStorage(page, 3);\n\n    // Assert the toggle all is checked again.\n    await expect(toggleAll).toBeChecked();\n  });\n});\n\ntest.describe('Item', () => {\n\n  test('should allow me to mark items as complete', async ({ page }) => {\n    // create a new todo locator\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n\n    // Create two items.", "    for (const item of TODO_ITEMS.slice(0, 2)) {\n      await newTodo.fill(item);\n      await newTodo.press('Enter');\n    }\n\n    // Check first item.\n    const firstTodo = page.getByTestId('todo-item').nth(0);\n    await firstTodo.getByRole('checkbox').check();\n    await expect(firstTodo).toHaveClass('completed');\n\n    // Check second item.\n    const secondTodo = page.getByTestId('todo-item').nth(1);\n    await expect(secondTodo).not.toHaveClass('completed');\n    await secondTodo.getByRole('checkbox').check();\n\n    // Assert completed class.\n    await expect(firstTodo).toHaveClass('completed');\n    await expect(secondTodo).toHaveClass('completed');\n  });\n\n  test('should allow me to un-mark items as complete', async ({ page }) => {\n    // create a new todo locator\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n\n    // Create two items.", "    for (const item of TODO_ITEMS.slice(0, 2)) {\n      await newTodo.fill(item);\n      await newTodo.press('Enter');\n    }\n\n    const firstTodo = page.getByTestId('todo-item').nth(0);\n    const secondTodo = page.getByTestId('todo-item').nth(1);\n    const firstTodoCheckbox = firstTodo.getByRole('checkbox');\n\n    await firstTodoCheckbox.check();\n    await expect(firstTodo).toHaveClass('completed');\n    await expect(secondTodo).not.toHaveClass('completed');\n    await checkNumberOfCompletedTodosInLocalStorage(page, 1);\n\n    await firstTodoCheckbox.uncheck();\n    await expect(firstTodo).not.toHaveClass('completed');\n    await expect(secondTodo).not.toHaveClass('completed');\n    await checkNumberOfCompletedTodosInLocalStorage(page, 0);\n  });\n\n  test('should allow me to edit an item', async ({ page }) => {\n    await createDefaultTodos(page);\n\n    const todoItems = page.getByTestId('todo-item');\n    const secondTodo = todoItems.nth(1);\n    await secondTodo.dblclick();\n    await expect(secondTodo.getByRole('textbox', { name: 'Edit' })).toHaveValue(TODO_ITEMS[1]);\n    await secondTodo.getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');\n    await secondTodo.getByRole('textbox', { name: 'Edit' }).press('Enter');\n\n    // Explicitly assert the new text value.\n    await expect(todoItems).toHaveText([\n      TODO_ITEMS[0],\n      'buy some sausages',\n      TODO_ITEMS[2]\n    ]);\n    await checkTodosInLocalStorage(page, 'buy some sausages');\n  });\n});\n\ntest.describe('Editing', () => {\n  test.beforeEach(async ({ page }) => {\n    await createDefaultTodos(page);\n    await checkNumberOfTodosInLocalStorage(page, 3);\n  });\n\n  test('should hide other controls when editing', async ({ page }) => {\n    const todoItem = page.getByTestId('todo-item').nth(1);\n    await todoItem.dblclick();\n    await expect(todoItem.getByRole('checkbox')).not.toBeVisible();\n    await expect(todoItem.locator('label', {\n      hasText: TODO_ITEMS[1],\n    })).not.toBeVisible();\n    await checkNumberOfTodosInLocalStorage(page, 3);\n  });\n\n  test('should save edits on blur', async ({ page }) => {\n    const todoItems = page.getByTestId('todo-item');\n    await todoItems.nth(1).dblclick();\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).dispatchEvent('blur');\n\n    await expect(todoItems).toHaveText([\n      TODO_ITEMS[0],\n      'buy some sausages',\n      TODO_ITEMS[2],\n    ]);\n    await checkTodosInLocalStorage(page, 'buy some sausages');\n  });\n\n  test('should trim entered text', async ({ page }) => {\n    const todoItems = page.getByTestId('todo-item');\n    await todoItems.nth(1).dblclick();\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('    buy some sausages    ');\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');\n\n    await expect(todoItems).toHaveText([\n      TODO_ITEMS[0],\n      'buy some sausages',\n      TODO_ITEMS[2],\n    ]);\n    await checkTodosInLocalStorage(page, 'buy some sausages');\n  });\n\n  test('should remove the item if an empty text string was entered', async ({ page }) => {\n    const todoItems = page.getByTestId('todo-item');\n    await todoItems.nth(1).dblclick();\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('');\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Enter');\n\n    await expect(todoItems).toHaveText([\n      TODO_ITEMS[0],\n      TODO_ITEMS[2],\n    ]);\n  });\n\n  test('should cancel edits on escape', async ({ page }) => {\n    const todoItems = page.getByTestId('todo-item');\n    await todoItems.nth(1).dblclick();\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).fill('buy some sausages');\n    await todoItems.nth(1).getByRole('textbox', { name: 'Edit' }).press('Escape');\n    await expect(todoItems).toHaveText(TODO_ITEMS);\n  });\n});\n\ntest.describe('Counter', () => {\n  test('should display the current number of todo items', async ({ page }) => {\n    // create a new todo locator\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n    \n    // create a todo count locator\n    const todoCount = page.getByTestId('todo-count')\n\n    await newTodo.fill(TODO_ITEMS[0]);\n    await newTodo.press('Enter');\n\n    await expect(todoCount).toContainText('1');\n\n    await newTodo.fill(TODO_ITEMS[1]);\n    await newTodo.press('Enter');\n    await expect(todoCount).toContainText('2');\n\n    await checkNumberOfTodosInLocalStorage(page, 2);\n  });\n});\n\ntest.describe('Clear completed button', () => {\n  test.beforeEach(async ({ page }) => {\n    await createDefaultTodos(page);\n  });\n\n  test('should display the correct text', async ({ page }) => {\n    await page.locator('.todo-list li .toggle').first().check();\n    await expect(page.getByRole('button', { name: 'Clear completed' })).toBeVisible();\n  });\n\n  test('should remove completed items when clicked', async ({ page }) => {\n    const todoItems = page.getByTestId('todo-item');\n    await todoItems.nth(1).getByRole('checkbox').check();\n    await page.getByRole('button', { name: 'Clear completed' }).click();\n    await expect(todoItems).toHaveCount(2);\n    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);\n  });\n\n  test('should be hidden when there are no items that are completed', async ({ page }) => {\n    await page.locator('.todo-list li .toggle').first().check();\n    await page.getByRole('button', { name: 'Clear completed' }).click();\n    await expect(page.getByRole('button', { name: 'Clear completed' })).toBeHidden();\n  });\n});\n\ntest.describe('Persistence', () => {\n  test('should persist its data', async ({ page }) => {\n    // create a new todo locator\n    const newTodo = page.getByPlaceholder('What needs to be done?');\n", "    for (const item of TODO_ITEMS.slice(0, 2)) {\n      await newTodo.fill(item);\n      await newTodo.press('Enter');\n    }\n\n    const todoItems = page.getByTestId('todo-item');\n    const firstTodoCheck = todoItems.nth(0).getByRole('checkbox');\n    await firstTodoCheck.check();\n    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);\n    await expect(firstTodoCheck).toBeChecked();\n    await expect(todoItems).toHaveClass(['completed', '']);\n\n    // Ensure there is 1 completed item.\n    await checkNumberOfCompletedTodosInLocalStorage(page, 1);\n\n    // Now reload.\n    await page.reload();\n    await expect(todoItems).toHaveText([TODO_ITEMS[0], TODO_ITEMS[1]]);\n    await expect(firstTodoCheck).toBeChecked();\n    await expect(todoItems).toHaveClass(['completed', '']);\n  });\n});\n\ntest.describe('Routing', () => {\n  test.beforeEach(async ({ page }) => {\n    await createDefaultTodos(page);\n    // make sure the app had a chance to save updated todos in storage\n    // before navigating to a new view, otherwise the items can get lost :(\n    // in some frameworks like Durandal\n    await checkTodosInLocalStorage(page, TODO_ITEMS[0]);\n  });\n\n  test('should allow me to display active items', async ({ page }) => {\n    const todoItem = page.getByTestId('todo-item');\n    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();\n\n    await checkNumberOfCompletedTodosInLocalStorage(page, 1);\n    await page.getByRole('link', { name: 'Active' }).click();\n    await expect(todoItem).toHaveCount(2);\n    await expect(todoItem).toHaveText([TODO_ITEMS[0], TODO_ITEMS[2]]);\n  });\n\n  test('should respect the back button', async ({ page }) => {\n    const todoItem = page.getByTestId('todo-item'); \n    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();\n\n    await checkNumberOfCompletedTodosInLocalStorage(page, 1);\n\n    await test.step('Showing all items', async () => {\n      await page.getByRole('link', { name: 'All' }).click();\n      await expect(todoItem).toHaveCount(3);\n    });\n\n    await test.step('Showing active items', async () => {\n      await page.getByRole('link', { name: 'Active' }).click();\n    });\n\n    await test.step('Showing completed items', async () => {\n      await page.getByRole('link', { name: 'Completed' }).click();\n    });\n\n    await expect(todoItem).toHaveCount(1);\n    await page.goBack();\n    await expect(todoItem).toHaveCount(2);\n    await page.goBack();\n    await expect(todoItem).toHaveCount(3);\n  });\n\n  test('should allow me to display completed items', async ({ page }) => {\n    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();\n    await checkNumberOfCompletedTodosInLocalStorage(page, 1);\n    await page.getByRole('link', { name: 'Completed' }).click();\n    await expect(page.getByTestId('todo-item')).toHaveCount(1);\n  });\n\n  test('should allow me to display all items', async ({ page }) => {\n    await page.getByTestId('todo-item').nth(1).getByRole('checkbox').check();\n    await checkNumberOfCompletedTodosInLocalStorage(page, 1);\n    await page.getByRole('link', { name: 'Active' }).click();\n    await page.getByRole('link', { name: 'Completed' }).click();\n    await page.getByRole('link', { name: 'All' }).click();\n    await expect(page.getByTestId('todo-item')).toHaveCount(3);\n  });\n\n  test('should highlight the currently applied filter', async ({ page }) => {\n    await expect(page.getByRole('link', { name: 'All' })).toHaveClass('selected');\n    \n    //create locators for active and completed links\n    const activeLink = page.getByRole('link', { name: 'Active' });\n    const completedLink = page.getByRole('link', { name: 'Completed' });\n    await activeLink.click();\n\n    // Page change - active items.\n    await expect(activeLink).toHaveClass('selected');\n    await completedLink.click();\n\n    // Page change - completed items.\n    await expect(completedLink).toHaveClass('selected');\n  });\n});\n", "async function createDefaultTodos(page: Page) {\n  // create a new todo locator\n  const newTodo = page.getByPlaceholder('What needs to be done?');\n\n  for (const item of TODO_ITEMS) {\n    await newTodo.fill(item);\n    await newTodo.press('Enter');\n  }\n}\n\nasync function checkNumberOfTodosInLocalStorage(page: Page, expected: number) {\n  return await page.waitForFunction(e => {\n    return JSON.parse(localStorage['react-todos']).length === e;\n  }, expected);\n}\n", "async function checkNumberOfTodosInLocalStorage(page: Page, expected: number) {\n  return await page.waitForFunction(e => {\n    return JSON.parse(localStorage['react-todos']).length === e;\n  }, expected);\n}\n\nasync function checkNumberOfCompletedTodosInLocalStorage(page: Page, expected: number) {\n  return await page.waitForFunction(e => {\n    return JSON.parse(localStorage['react-todos']).filter((todo: any) => todo.completed).length === e;\n  }, expected);\n}\n", "async function checkTodosInLocalStorage(page: Page, title: string) {\n  return await page.waitForFunction(t => {\n    return JSON.parse(localStorage['react-todos']).map((todo: any) => todo.title).includes(t);\n  }, title);\n}\n"]}
{"filename": "tests/example.spec.ts", "chunked_list": ["import { test, expect } from '@playwright/test';\n\ntest('has title', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/Playwright/);\n});\n\ntest('get started link', async ({ page }) => {", "\ntest('get started link', async ({ page }) => {\n  await page.goto('https://playwright.dev/');\n\n  // Click the get started link.\n  await page.getByRole('link', { name: 'Get started' }).click();\n\n  // Expects the URL to contain intro.\n  await expect(page).toHaveURL(/.*intro/);\n});", "  await expect(page).toHaveURL(/.*intro/);\n});\n\n// Tests for the login page\ntest('login page', async ({ page }) => {\n  await page.goto('http://localhost:3000/signin');\n\n  // Expect a title \"to contain\" a substring.\n  await expect(page).toHaveTitle(/PlotNotes/);\n});", "  await expect(page).toHaveTitle(/PlotNotes/);\n});\n\ntest('Login scenario', async ({ page }) => {\n  await page.goto('http://localhost:3000/signin');\n\n  await page.fill('input[name=\"loginUsername\"]', 'testuser');\n  await page.fill('input[name=\"loginPassword\"]', 'testpassword');\n\n  const navigationPromise = page.waitForNavigation();", "\n  const navigationPromise = page.waitForNavigation();\n  await page.click('button:has-text(\"Login\")');\n  await navigationPromise;\n\n  // Add additional assertions based on the expected behavior after login.\n  expect(page.url()).toBe('http://localhost:3000/');\n});\n\n// Helper function to generate random string\nfunction generateRandomString(length: number) {\n  let result = '';\n  let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;", "\n// Helper function to generate random string\nfunction generateRandomString(length: number) {\n  let result = '';\n  let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let charactersLength = characters.length;\n  for (let i = 0; i < length; i++ ) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}"]}
{"filename": "src/pages/api/prompt.ts", "chunked_list": ["import { getOpenAIClient, constructPrompt, createEmbedding, tokenize, getCustomTermName } from \"./openai\";\nimport { userLoggedIn } from \"./authchecks\";\nimport { query } from \"./db\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\n\nconst generateChapterPrompt = (prompt: string, context: string, additionalText: string) => {\n  return `Write ${additionalText} about '${prompt}', ${\n    context ? `here is some relevant context '${context}', ` : \"\"\n  }do not end the story just yet and make this response at least 20,000 words. ", "    context ? `here is some relevant context '${context}', ` : \"\"\n  }do not end the story just yet and make this response at least 20,000 words. \n  Include only the story and do not use the prompt in the response. Do not name the story.\n  Chapter 1: The Start`;\n};\n\nconst generateShortStoryPrompt = (prompt: string, context: string, additionalText: string) => {\n  return `Write ${additionalText} about '${prompt}', ${\n    context ? `here is some relevant context '${context}', ` : \"\"\n  }do not end the story just yet and make this response at least 20,000 words. ", "    context ? `here is some relevant context '${context}', ` : \"\"\n  }do not end the story just yet and make this response at least 20,000 words. \n  Include only the story and do not use the prompt in the response. Do not name the story.`;\n}\n\nconst generateContinuePrompt = (prompt: string, context: string, summary: string) => {\n  return `Continue the story: '${summary}' using the following prompt ${prompt}, ${\n    context ? `here is some relevant context '${context}', ` : \"\"\n  }. Include only the story and do not use the prompt in the response.`;\n}", "  }. Include only the story and do not use the prompt in the response.`;\n}\n\nconst getOpenAICompletion = async (content: string) => {\n  const openai = getOpenAIClient();\n  const prompt = constructPrompt(content);\n  const completion = await openai.createChatCompletion(prompt);\n  return completion.data.choices[0].message!.content.trim();\n};\n", "};\n\nconst getStory = async (req: NextApiRequest, userid: string) => {\n  const prompt = req.body.prompt;\n  const context = await getContext(prompt, userid);\n  const content = generateShortStoryPrompt(prompt, context, 'a short story');\n  let completion = await getOpenAICompletion(content);\n\n  // If the story is too short, continue the completion where it left off\n  let tokens = tokenize(completion);\n  while (tokens < 1000) {\n    const summary = await summarize(completion);\n    const newContent = generateContinuePrompt(prompt, context, summary);\n    const newCompletion = await getOpenAICompletion(newContent);\n    completion += ` ${newCompletion}`;\n    tokens = tokenize(completion);\n  }\n  return completion;\n};\n", "  // If the story is too short, continue the completion where it left off\n  let tokens = tokenize(completion);\n  while (tokens < 1000) {\n    const summary = await summarize(completion);\n    const newContent = generateContinuePrompt(prompt, context, summary);\n    const newCompletion = await getOpenAICompletion(newContent);\n    completion += ` ${newCompletion}`;\n    tokens = tokenize(completion);\n  }\n  return completion;\n};\n", "export default async function handler(req: NextApiRequest, res: NextApiResponse) {\n  const userid = await userLoggedIn(req, res);\n\n  if (!userid) {\n    res.status(401).send({ response: \"Not logged in\" });\n    return;\n  }\n\n  const createShortStory = req.body.shortStory;\n  const prompt = req.body.prompt;\n  const context = await getContext(prompt, userid);\n", "  if (createShortStory) {\n    const story = await getStory(req, userid);\n    const storyName = await createStoryName(story);\n    res.status(200).send({story, storyName});\n  } else {\n    const chapter = await writeChapter(prompt, context);\n    const storyName = await createStoryName(prompt);\n    res.status(200).send({chapter, storyName});\n  }\n}\n\nconst getContext = async (prompt: string, userid: string) => {\n  const termsQuery = await query(`SELECT term FROM userterms WHERE userid = $1`, [userid]);\n  const terms = termsQuery.rows.map(row => (row as any).term);\n  const termsInPrompt = terms.filter(term => prompt.toLowerCase().includes(term.toLowerCase()));\n", "  if (!termsInPrompt.length) return \"\";\n\n  const promptEmbedding = await createEmbedding(prompt);\n  const context = [];\n\n  for (const term of termsInPrompt) {\n    const termIDQuery = await query(`SELECT termid FROM userterms WHERE userid = $1 AND term = $2`, [userid, term]);\n    const termId = (termIDQuery.rows[0] as any).termid;\n\n    const contextQuery = await query(`SELECT context FROM usercontext WHERE termid = $1 AND embedding <-> $2 < 0.7`, [termId, promptEmbedding]);\n", "    if (contextQuery.rows.length) {\n      context.push(...contextQuery.rows.map(row => (row as any).context));\n    }\n  }\n\n  return context.join(\"\\n\\n\");\n};\n\nconst writeChapter = async (prompt: string, context: string) => {\n  const content = generateChapterPrompt(prompt, context, 'the first chapter of a story');\n  let completion = await getOpenAICompletion(content);\n\n  // If the story is too short, continue the completion where it left off\n  let tokens = tokenize(completion);", "  while (tokens < 1000) {\n    const summary = await summarize(completion);\n    const newContent = generateContinuePrompt(prompt, context, summary);\n    const newCompletion = await getOpenAICompletion(newContent);\n    completion += ` ${newCompletion}`;\n    tokens = tokenize(completion);\n  }\n  return completion;\n};\n\nconst createStoryName = async (story: string) => {\n  const content = `Create a name for the story, include nothing except the name of the story: '${story}'. Do not use quotes.`;\n  return await getOpenAICompletion(content);\n};\n", "export async function continueStory(prompt: string, oldStories: string[], userid: string) {\n\n  const summary = await summarizeMultiple(oldStories);\n  let context = await getContext(prompt, userid);\n\n  let content = generateContinuationPrompt(prompt, summary, context);\n\n  let completion = await getOpenAICompletion(content);\n\n  // If the story is too short, continue the completion where it left off\n  let tokens = tokenize(completion);", "  while (tokens < 1000) {\n    const summary = await summarize(completion);\n    const newContent = generateContinuePrompt(prompt, context, summary);\n    const newCompletion = await getOpenAICompletion(newContent);\n    completion += ` ${newCompletion}`;\n    tokens = tokenize(completion);\n  }\n  return completion;\n}\n\nexport async function continueChapters(prompt: string, previousChapters: string[], userid: string) {\n\n  let summaries = await summarizeMultiple(previousChapters);\n  \n  let context = await getContext(prompt, userid);\n\n  let content = generateContinuationPrompt(prompt, summaries, context);\n\n  let completion = await getOpenAICompletion(content);\n  \n  // If the story is too short, continue the completion where it left off\n  let tokens = tokenize(completion);", "export async function continueChapters(prompt: string, previousChapters: string[], userid: string) {\n\n  let summaries = await summarizeMultiple(previousChapters);\n  \n  let context = await getContext(prompt, userid);\n\n  let content = generateContinuationPrompt(prompt, summaries, context);\n\n  let completion = await getOpenAICompletion(content);\n  \n  // If the story is too short, continue the completion where it left off\n  let tokens = tokenize(completion);", "  while (tokens < 1000) {\n    const summary = await summarize(completion);\n    const newContent = generateContinuePrompt(prompt, context, summary);\n    const newCompletion = await getOpenAICompletion(newContent);\n    completion += ` ${newCompletion}`;\n    tokens = tokenize(completion);\n  }\n  return completion;\n}\n\nasync function summarizeMultiple(texts: string[]) {\n  let summaries = \"\";", "async function summarizeMultiple(texts: string[]) {\n  let summaries = \"\";\n  for (let i = 0; i < texts.length; i++) {\n    let text = texts[i]\n    summaries += await summarize(text) + \" \";\n  }\n  return summaries;\n}\n\nasync function summarize(story: string): Promise<string> {\n  const openai = getOpenAIClient();\n\n  let content = `Summarize the following as much as possible: '${story}'. If there is nothing to summarize, say nothing.`;\n  \n  const summaryPrompt = constructPrompt(content);\n\n  const completion = await openai.createChatCompletion(summaryPrompt);\n\n  return completion.data.choices[0].message!.content.trim();\n}\n", "async function summarize(story: string): Promise<string> {\n  const openai = getOpenAIClient();\n\n  let content = `Summarize the following as much as possible: '${story}'. If there is nothing to summarize, say nothing.`;\n  \n  const summaryPrompt = constructPrompt(content);\n\n  const completion = await openai.createChatCompletion(summaryPrompt);\n\n  return completion.data.choices[0].message!.content.trim();\n}\n", "function generateContinuationPrompt(prompt: string, summaries: string, context: string) {\n  let content = ``;\n  if (context != \"\") {\n    content = `Continue the following story: \"${summaries}\" using the prompt: '${prompt}', here is some relevant context '${context}', make it as long as possible and include only the story. Do not include the prompt in the story.`\n  } else {\n    content = `Continue the following story: \"${summaries}\" using the prompt: '${prompt}', make it as long as possible and include only the story. Do not include the prompt in the story.`\n  }\n  return content;\n}\n\nexport async function editExcerpt(chapter: string, prompt: string) {\n  \n  const tokens = tokenize(chapter + \" \" + prompt);", "export async function editExcerpt(chapter: string, prompt: string) {\n  \n  const tokens = tokenize(chapter + \" \" + prompt);\n  if (tokens > 1000) {\n    chapter = await summarize(chapter);\n  }\n\n  const content = `Edit the following: '${chapter}' using the prompt: '${prompt}', make it as long as possible.`;\n  let editedChapter = await getOpenAICompletion(content);\n\n  if (editedChapter.startsWith(`\"`) && editedChapter.endsWith(`\"`)) {\n    editedChapter = editedChapter.slice(1, -1);\n  }\n\n  return editedChapter;\n}\n", "  if (editedChapter.startsWith(`\"`) && editedChapter.endsWith(`\"`)) {\n    editedChapter = editedChapter.slice(1, -1);\n  }\n\n  return editedChapter;\n}\n\nexport async function createCustomTerm(termNames: any[], termName: string): Promise<{ termName: string, termDescription: string }> {\n\n  if (!termName) {\n    const termNameContent = `Create a brand new random term that doesn't exist yet for a fictional story event or character that isnt one of the following terms: \n    '${termNames.toString()}', include nothing except the name of the term. Do not use quotes or periods at the end.`;\n    \n    termName = await getCustomTermName(termNameContent);\n  }\n  \n  const termContent = `Create a description for the following fictional story term '${termName}', include nothing except the description of the term. \n  Do not use quotes or attach it to an existing franchise. Make it several paragraphs.`;\n  const termDescription = await getOpenAICompletion(termContent);\n  ", "  if (!termName) {\n    const termNameContent = `Create a brand new random term that doesn't exist yet for a fictional story event or character that isnt one of the following terms: \n    '${termNames.toString()}', include nothing except the name of the term. Do not use quotes or periods at the end.`;\n    \n    termName = await getCustomTermName(termNameContent);\n  }\n  \n  const termContent = `Create a description for the following fictional story term '${termName}', include nothing except the description of the term. \n  Do not use quotes or attach it to an existing franchise. Make it several paragraphs.`;\n  const termDescription = await getOpenAICompletion(termContent);\n  ", "  if (termName.endsWith(`.`)) {\n    termName = termName.slice(0, -1);\n  }\n\n  return { termName, termDescription };\n}"]}
{"filename": "src/pages/api/sessionCmds.ts", "chunked_list": ["import { NextApiRequest, NextApiResponse } from 'next';\nimport { query } from './db';\nimport Cookies from 'cookies';\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\n    if (req.method == \"POST\") {\n        await addUser(req, res);\n    }\n    else if (req.method == \"PUT\") {\n        await logInUser(req, res);", "    else if (req.method == \"PUT\") {\n        await logInUser(req, res);\n    } else if (req.method == \"DELETE\") {\n        await logOutUser(req, res);\n    }\n}\n\nasync function logOutUser(req: NextApiRequest, res: NextApiResponse) {\n    // Assumes the user has a cookie\n    const cookie = new Cookies(req, res);\n    const sessionId = cookie.get('token');\n    ", "    try {\n        await query(\n            `DELETE FROM sessions WHERE id = $1`,\n            [sessionId]\n        );\n        res.status(200).send({ response: \"success\" });\n    } catch (err) {\n        console.error(err);\n        res.status(500).send({ error: \"error\" });\n    }\n}\n", "async function logInUser(req: NextApiRequest, res: NextApiResponse) {\n    const { username, password } = req.body;\n    try {\n        \n        if (!await userExists(username, password, false)) {\n            res.status(200).send({ error: 'user does not exist' });\n            return;\n        }\n        const userId = await getUserId(username);\n        if (!await passwordMatches(userId, password)) {\n            res.status(200).send({ error: 'password does not match' });\n            return;\n        }\n        const sessionId = await createSession(`${userId}`);\n        const cookie = new Cookies(req, res);\n        \n        // Sets the user's cookie to expire the same day\n        cookie.set('token', sessionId, {\n            httpOnly: true,\n            maxAge: 1000 * 60 * 60 * 24,\n        });\n\n        res.status(200).send({ sessionId: sessionId});\n        return;", "        if (!await passwordMatches(userId, password)) {\n            res.status(200).send({ error: 'password does not match' });\n            return;\n        }\n        const sessionId = await createSession(`${userId}`);\n        const cookie = new Cookies(req, res);\n        \n        // Sets the user's cookie to expire the same day\n        cookie.set('token', sessionId, {\n            httpOnly: true,\n            maxAge: 1000 * 60 * 60 * 24,\n        });\n\n        res.status(200).send({ sessionId: sessionId});\n        return;", "    } catch (err) {\n        console.log(err);\n        res.status(500).send({ error: \"error\" });\n    }\n}\n\nasync function getUserId(username: string): Promise<number> {\n    const userQuery = await query(\n        `SELECT (id) FROM users WHERE name = $1`,\n        [username]\n    );\n    return (userQuery.rows[0] as any).id;\n}\n", "async function addUser(req: NextApiRequest, res: NextApiResponse) {\n    const { username, password, usedGoogle } = req.body;\n    try {\n        if (usedGoogle) {\n            const sessionId = await signInWithGoogle(username);\n\n            const cookie = new Cookies(req, res);\n\n            // Sets the user's cookie to expire the same day\n            cookie.set('token', sessionId, {\n                httpOnly: true,\n                maxAge: 1000 * 60 * 60 * 24,\n            });\n            res.status(200).send({ sessionId: sessionId});\n        }\n        else {", "            if (await userExists(username, password, usedGoogle)) {\n                res.status(200).send({ error: 'A user with the same username already exists' });\n                return;\n            }\n            \n            const sessionId = await signUp(username, password);\n            const cookie = new Cookies(req, res);\n            cookie.set('token', sessionId, {\n                httpOnly: true,\n                maxAge: 1000 * 60 * 60 * 24,\n            });\n\n            res.status(200).send(sessionId);\n        }", "    } catch (err) {\n        console.error(err);\n        res.status(500).send({ error: err + ' error in queries' });\n    }\n}\n\nasync function userExists(username: string, password: string, usedGoogle: boolean): Promise<boolean> {\n    const userQuery = await query(\n        `SELECT (name) FROM users WHERE name = $1`,\n        [username]\n    );", "    if (userQuery.rows.length == 0) {\n        return false;\n    }\n\n    return true;\n}\n\nasync function passwordMatches(userId: number, password: string): Promise<boolean> {\n    const passwordQuery = await query(\n        `SELECT (password) FROM userpasswords WHERE id = $1`,\n        [userId]\n    );\n", "    if ((passwordQuery.rows[0] as any).password == password) {\n        return true;\n    }\n\n    return false;\n}\n\nasync function signUp(username: string, password: string): Promise<string> {\n\n    await query(\n        `INSERT INTO users (name, usedGoogle) VALUES ($1, $2);`,\n        [username, false]\n    );\n\n    const idQuery = await query(\n        `SELECT (id) FROM users WHERE name = $1`,\n        [username]\n    );\n    const id = (idQuery.rows[0] as any).id;\n    await query(\n        `INSERT INTO userpasswords (id, password) VALUES ($1, $2);`,\n        [id, password]\n    );\n    \n    await fetch(`${process.env.ZAPIER_WEBHOOK_URL}`, {\n        method: 'POST',\n        body: JSON.stringify({\n            username,\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n    \n    return createSession(id);\n}\n", "async function signInWithGoogle(username: string): Promise<string> {\n\n    // Checks to see if the user already exists, if so, just log them in\n    const userQuery = await query(\n        `SELECT (name) FROM users WHERE name = $1`,\n        [username]\n    );\n\n    if (userQuery.rows.length != 0) {\n        const userIDQuery = await query(\n            `SELECT (id) FROM users WHERE name = $1`,\n            [username]\n        );\n\n        const userID = (userIDQuery.rows[0] as any).id;\n\n        const sessionId = await createSession(userID);\n        return sessionId;\n    }\n\n    await query(\n        `INSERT INTO users (name, usedGoogle) VALUES ($1, $2);`,\n        [username, true]\n    );\n\n    const userIDQuery = await query(\n        `SELECT (id) FROM users WHERE name = $1`,\n        [username]\n    );\n\n    const userID = (userIDQuery.rows[0] as any).id;\n    \n    await fetch(`${process.env.ZAPIER_WEBHOOK_URL}`, {\n        method: 'POST',\n        body: JSON.stringify({\n            username,\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const sessionId = await createSession(userID);\n    return sessionId;\n}\n", "    if (userQuery.rows.length != 0) {\n        const userIDQuery = await query(\n            `SELECT (id) FROM users WHERE name = $1`,\n            [username]\n        );\n\n        const userID = (userIDQuery.rows[0] as any).id;\n\n        const sessionId = await createSession(userID);\n        return sessionId;\n    }\n\n    await query(\n        `INSERT INTO users (name, usedGoogle) VALUES ($1, $2);`,\n        [username, true]\n    );\n\n    const userIDQuery = await query(\n        `SELECT (id) FROM users WHERE name = $1`,\n        [username]\n    );\n\n    const userID = (userIDQuery.rows[0] as any).id;\n    \n    await fetch(`${process.env.ZAPIER_WEBHOOK_URL}`, {\n        method: 'POST',\n        body: JSON.stringify({\n            username,\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const sessionId = await createSession(userID);\n    return sessionId;\n}\n", "export async function createSession(id: string): Promise<string> {\n    try {\n        const sessionId = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        const expireDate = new Date();\n        // sets the expiration date to be an hour from now\n        expireDate.setHours(expireDate.getHours() + 1);\n\n        await query(\n            `INSERT INTO sessions (id, userid, expiredate) VALUES ($1, $2, $3);`,\n            [sessionId, id, expireDate]);\n        return sessionId;", "    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n}\n\nexport async function getSession(sessionId: string) {\n    try {\n        const result = await query(\n            `SELECT * FROM sessions WHERE id = $1`,\n            [sessionId]\n        );\n        return result;", "    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n}\n\nexport async function deleteExpiredSessions() {\n    const currentDate = new Date();\n    try {\n        await query(\n            `DELETE FROM sessions WHERE expireDate < $1`,\n            [currentDate]\n        );", "    try {\n        await query(\n            `DELETE FROM sessions WHERE expireDate < $1`,\n            [currentDate]\n        );\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n}"]}
{"filename": "src/pages/api/shortStoryCmds.ts", "chunked_list": ["import { NextApiRequest, NextApiResponse } from 'next';\nimport { query } from './db';\nimport { userLoggedIn } from './authchecks';\n\nexport default async function insertStory(req: NextApiRequest, res: NextApiResponse) {\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (req.method == \"POST\") {\n        await postRequest(req, res, userid);\n    } else if (req.method == \"GET\") {\n        await getRequest(req, res, userid);\n    } else if (req.method == \"PUT\") {\n        await putRequest(req, res, userid);\n    } else if (req.method == \"DELETE\") {\n        await deleteRequest(req, res, userid);\n    }\n}\n", "async function deleteRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.headers.messageid as string;\n\n    // Deletes all stories related to the given messageid, starting by getting the parentid\n    const parentIDQuery = await query(\n        `SELECT (parentid) FROM shortstories WHERE messageid = $1`,\n        [messageid]\n    );\n\n    let parentID = (parentIDQuery.rows[0] as any).parentid;\n", "    if (parentID == 0) {\n        parentID = messageid;\n    }\n\n    await query(\n        `DELETE FROM shortstories WHERE parentid = $1`,\n        [parentID]\n    );\n\n    await query(\n        `DELETE FROM shortstories WHERE messageid = $1`,\n        [parentID]\n    );\n\n\n    res.status(200).send({ response: \"success\" });\n}\n", "async function putRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    const story = req.body.story as string;\n    const messageid = req.body.messageid as string;\n    \n    await query(\n        `UPDATE shortstories SET message = $1 WHERE messageid = $2 AND userid = $3`,\n        [story, messageid, userid]\n    );\n\n    res.status(200).send({ response: \"story updated\" });\n}\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userId: string) {\n\n    // Returns the stories, checking the iterationID and parentID to keep only the most recent version of each story\n    const stories = await updateStories(userId);\n    const prompts = await updatePrompts(stories);\n    const titles = await updateTitles(stories);\n    const messageIDs = await updateMessageIDs(stories);\n    \n\n    res.status(200).send({ stories: stories, prompts: prompts, titles: titles, messageIDs: messageIDs });\n}\n\n", "async function updateStories(userID: string): Promise<string[]> {\n    const storyQuery = await query(`SELECT (messageid) FROM shortstories WHERE parentid = 0 AND userid = $1`, [userID]);\n\n    // Loops through the stories and makes a query for a message whose parentID is the story's messageID, and replaces the story with the most recent version\n    let stories: string[] = [];\n    for (let i = 0; i < storyQuery.rows.length; i++) {\n        const storyID = (storyQuery.rows[i] as any).messageid;\n\n        const childrenStoryQuery = await query(\n            `SELECT (message) FROM shortstories WHERE parentid = $1 ORDER BY iterationid DESC LIMIT 1`,\n            [storyID]\n        );\n", "        if (childrenStoryQuery.rows.length != 0) {\n            stories.push((childrenStoryQuery.rows[0] as any).message);\n            continue;\n        }\n\n        const parentStoryQuery = await query(\n            `SELECT (message) FROM shortstories WHERE messageid = $1`,\n            [storyID]\n        );\n\n        stories.push((parentStoryQuery.rows[0] as any).message);\n    }\n\n    return stories;\n}\n", "async function updatePrompts(stories: string[]): Promise<string[]> {\n\n    // For each story in stories, get the prompt from the database and add it to the prompts array\n    let prompts: string[] = [];\n\n    for (let i = 0; i < stories.length; i++) {\n        const story = stories[i];\n\n        const promptQuery = await query(\n            `SELECT (prompt) FROM shortstories WHERE message = $1`,\n            [story]\n        );\n\n        prompts.push((promptQuery.rows[0] as any).prompt);\n    }\n\n    return prompts;\n}\n", "async function updateTitles(stories: string[]): Promise<string[]> {\n\n    // For each story in stories, get the title from the database and add it to the titles array\n    let titles: string[] = [];\n\n    for (let i = 0; i < stories.length; i++) {\n        const story = stories[i];\n\n        const titleQuery = await query(\n            `SELECT (title) FROM shortstories WHERE message = $1`,\n            [story]\n        );\n\n        titles.push((titleQuery.rows[0] as any).title);\n    }\n\n    return titles;\n}\n", "async function updateMessageIDs(stories: string[]): Promise<string[]> {\n\n    // For each story in stories, get the messageID from the database and add it to the messageIDs array\n    let messageIDs: string[] = [];\n\n    for (let i = 0; i < stories.length; i++) {\n        const story = stories[i];\n\n        const messageIDQuery = await query(\n            `SELECT (messageid) FROM shortstories WHERE message = $1`,\n            [story]\n        );\n\n        messageIDs.push((messageIDQuery.rows[0] as any).messageid);\n    }\n\n    return messageIDs;\n}\n", "async function postRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const { story, storyName, prompt, iterationId } = req.body;\n    try {\n\n        const storyIdQuery = await query(\n            `INSERT INTO shortstories (iterationid, userid, message, prompt, title, parentid) VALUES ($1, $2, $3, $4, $5, $6)`,\n            [iterationId, userid, story, prompt, storyName, 0]\n        );\n\n        res.status(200).send({ response: \"success\" });\n    } catch (err) {\n        console.error(err);\n        throw err;\n    }        \n}\n", "    } catch (err) {\n        console.error(err);\n        throw err;\n    }        \n}\n\nexport async function getStory(storyID: string): Promise<string> {\n    try {\n        const storyQuery = await query(\n            `SELECT (story) FROM stories WHERE id = $1`,\n            [storyID]\n        );\n        const story = (storyQuery.rows[0] as any).story;\n        return story;", "    } catch (err) {\n        console.error(err);\n        throw err;\n    }\n}"]}
{"filename": "src/pages/api/authchecks.ts", "chunked_list": ["import { query } from \"./db\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\n\n// If the user is logged in, return an object that contains the userid and sessionid, otherwise have them null\nexport async function userLoggedIn(req: NextApiRequest, res: NextApiResponse): Promise<string> {\n    \n    let sessionid = \"\";\n    let userid = \"\";\n    try {\n        sessionid = req.cookies.token as string;\n", "    try {\n        sessionid = req.cookies.token as string;\n\n        if (!sessionid) {            \n            return \"\";\n        }\n\n        userid = await getUserID(sessionid);\n        \n    } catch (e) {\n        // If the userid cannot be found from the sessionid, route the user back to the login page", "    } catch (e) {\n        // If the userid cannot be found from the sessionid, route the user back to the login page\n        if (e instanceof TypeError && e.message == \"Cannot read properties of undefined (reading 'userid')\") {\n            return \"\";\n        }\n    }\n\n    return userid;\n}\n\nexport async function getUserID(sessionId: string): Promise<string>\n{\n    const userIdQuery = await query(\n        `SELECT (userid) FROM sessions WHERE id = $1`,\n        [sessionId]\n    );\n\n    const userId = (userIdQuery.rows[0] as any).userid;\n    return userId;\n}", "export async function getUserID(sessionId: string): Promise<string>\n{\n    const userIdQuery = await query(\n        `SELECT (userid) FROM sessions WHERE id = $1`,\n        [sessionId]\n    );\n\n    const userId = (userIdQuery.rows[0] as any).userid;\n    return userId;\n}"]}
{"filename": "src/pages/api/chapterCmds.ts", "chunked_list": ["import { NextApiRequest, NextApiResponse } from \"next\";\nimport { query } from \"./db\";\nimport { userLoggedIn } from \"./authchecks\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n\n    if (req.method == \"POST\") {\n        await addChapter(req, res, userid);\n    } else if (req.method == \"GET\") {\n        await getChapter(req, res, userid);\n    } else if (req.method == \"PUT\") {\n        await putChapter(req, res, userid);", "    } else if (req.method == \"PUT\") {\n        await putChapter(req, res, userid);\n    } else if (req.method == \"DELETE\") {\n        await deleteChapter(req, res, userid);\n    }\n}\n\nasync function deleteChapter(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Deletes all chapters related to the given messageid\n    const messageid = req.headers.messageid as string;\n\n    const seriesIDQuery = await query(\n        `SELECT (seriesid) FROM chapters WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n\n    const seriesID = (seriesIDQuery.rows[0] as any).seriesid;\n\n    await query(\n        `DELETE FROM chapters WHERE seriesid = $1`,\n        [seriesID]\n    );\n\n    res.status(200).send({ response: \"success\" });\n}\n", "async function putChapter(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    \n    // Gets the new story from the request body and inserts it where the messageid is the given messageid\n    const story = req.body.story as string;\n    const messageid = req.body.messageid as string;\n\n    await query(\n        `UPDATE chapters SET message = $1 WHERE messageid = $2 AND userid = $3`,\n        [story, messageid, userid]\n    );\n\n    res.status(200).send({ response: \"chapter updated\" });\n}\n", "async function getChapter(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Gets all chapters associated with the userID and is the first chapter in the series\n    const chapterQuery = await query(\n        `SELECT seriesid FROM chapters WHERE userid = $1 AND chapterid = $2`,\n        [userid, 1]\n    );\n\n    if (chapterQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    // Now it gets the most recent chapter for each story that was received from the previous query\n    // This is done by getting the seriesid of each story and getting the most recent chapter with that seriesid\n    const seriesIDs: string[] = [];\n", "    if (chapterQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    // Now it gets the most recent chapter for each story that was received from the previous query\n    // This is done by getting the seriesid of each story and getting the most recent chapter with that seriesid\n    const seriesIDs: string[] = [];\n\n    for (let i = 0; i < chapterQuery.rows.length; i++) {\n        seriesIDs.push((chapterQuery.rows[i] as any).seriesid);\n    }\n\n    const chapters: string[] = [];\n    const storyNames: string[] = [];\n    const messageIDs: string[] = [];\n", "    for (let i = 0; i < chapterQuery.rows.length; i++) {\n        seriesIDs.push((chapterQuery.rows[i] as any).seriesid);\n    }\n\n    const chapters: string[] = [];\n    const storyNames: string[] = [];\n    const messageIDs: string[] = [];\n\n    for (let i = 0; i < seriesIDs.length; i++) {\n        const chapterQuery = await query(\n            `SELECT message, name, messageid FROM chapters WHERE seriesid = $1 ORDER BY chapterid DESC LIMIT 1`,\n            [seriesIDs[i]]\n        );\n\n        chapters.push((chapterQuery.rows[0] as any).message);\n        storyNames.push((chapterQuery.rows[0] as any).name);\n        messageIDs.push((chapterQuery.rows[0] as any).messageid);\n    }    \n\n    res.status(200).send({ chapters: chapters, storyNames: storyNames, messageIDs: messageIDs });\n\n}\n", "    for (let i = 0; i < seriesIDs.length; i++) {\n        const chapterQuery = await query(\n            `SELECT message, name, messageid FROM chapters WHERE seriesid = $1 ORDER BY chapterid DESC LIMIT 1`,\n            [seriesIDs[i]]\n        );\n\n        chapters.push((chapterQuery.rows[0] as any).message);\n        storyNames.push((chapterQuery.rows[0] as any).name);\n        messageIDs.push((chapterQuery.rows[0] as any).messageid);\n    }    \n\n    res.status(200).send({ chapters: chapters, storyNames: storyNames, messageIDs: messageIDs });\n\n}\n", "async function addChapter(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    try {\n        const { prompt, story, storyName } = req.body;\n\n        // Since this is called only for the first chapters of a series, find the largest seriesid in the db and add 1 to it\n        const seriesIDQuery = await query(\n            `SELECT (seriesid) FROM chapters ORDER BY seriesid DESC LIMIT 1`\n        );\n        \n        let seriesID = 1;\n", "        if (seriesIDQuery.rows.length != 0) {\n            seriesID = (seriesIDQuery.rows[0] as any).seriesid;\n            seriesID = Number(seriesID) + 1;\n        }\n\n        const insertChapterQuery = await query(\n            `INSERT INTO chapters (seriesid, chapterid, prompt, message, userid, name) VALUES ($1, $2, $3, $4, $5, $6)`,\n            [seriesID, 1, prompt, story, userid, storyName]\n        );\n\n        res.status(200).send({ response: \"chapter added\" });", "    } catch (err) {\n        console.log(err);\n        res.status(500).send({ error: err });\n    }\n}\n"]}
{"filename": "src/pages/api/openai.ts", "chunked_list": ["import { OpenAIApi, Configuration, ChatCompletionRequestMessageRoleEnum } from \"openai\";\nimport { Tiktoken } from \"@dqbd/tiktoken\";\nimport p50k_base from \"@dqbd/tiktoken/encoders/p50k_base.json\";\n\nexport function getOpenAIConfiguration() {\n  return new Configuration({\n    apiKey: process.env.OPENAI_KEY,\n  }); \n}\n\nexport async function createEmbedding(content: string) {\n  const openai = getOpenAIClient();", "export async function createEmbedding(content: string) {\n  const openai = getOpenAIClient();\n  try {\n\n    // Normalizes the content\n    content = normalizeText(content);\n\n    const embedding = await openai.createEmbedding({\n      model: \"text-embedding-ada-002\",\n      input: [content],\n    });\n    \n    const embeddingArray = embedding.data.data[0].embedding;\n    const embeddingString = \"[\" + embeddingArray.join(\", \") + \"]\";\n\n    return embeddingString;", "  } catch (err) {\n    console.log(err);\n  }\n\n}\n\nexport function getOpenAIClient() {\n  return new OpenAIApi(getOpenAIConfiguration());\n}\n\nexport function constructPrompt(content: string, temperature?: number) {\n  let messages = [];\n\n  messages.push({\n      \"role\": ChatCompletionRequestMessageRoleEnum.User,\n      \"content\": content\n  })\n\n  const max_tokens = getMaxTokens(content);\n", "export function constructPrompt(content: string, temperature?: number) {\n  let messages = [];\n\n  messages.push({\n      \"role\": ChatCompletionRequestMessageRoleEnum.User,\n      \"content\": content\n  })\n\n  const max_tokens = getMaxTokens(content);\n\n  if (temperature) {\n    return {\n      model: \"gpt-3.5-turbo\",\n      messages, \n      max_tokens: max_tokens,\n      temperature: temperature,\n      top_p: 0,\n    };\n  }\n\n  return {\n    model: \"gpt-3.5-turbo\",\n    messages, \n    max_tokens: max_tokens,\n    temperature: 1.5,\n    top_p: 0,\n  }; \n}\n", "  if (temperature) {\n    return {\n      model: \"gpt-3.5-turbo\",\n      messages, \n      max_tokens: max_tokens,\n      temperature: temperature,\n      top_p: 0,\n    };\n  }\n\n  return {\n    model: \"gpt-3.5-turbo\",\n    messages, \n    max_tokens: max_tokens,\n    temperature: 1.5,\n    top_p: 0,\n  }; \n}\n", "export function tokenize(content: string) {\n  const encoding = new Tiktoken(\n    p50k_base.bpe_ranks,\n    p50k_base.special_tokens,\n    p50k_base.pat_str\n  );\n\n  const tokens = encoding.encode(content);\n\n  encoding.free();\n\n  return tokens.length;\n}\n", "function getMaxTokens(content: string) {\n    const encoding = new Tiktoken(\n      p50k_base.bpe_ranks,\n      p50k_base.special_tokens,\n      p50k_base.pat_str\n    );\n    \n    const tokens = encoding.encode(content);\n  \n    encoding.free();\n  \n    const max_tokens = (4096 - tokens.length) - 10;\n    \n    return max_tokens;\n  }\n", "  export async function getCustomTermName(content: string): Promise<string> {\n\n    const openai = getOpenAIClient();\n\n    const prompt = constructPrompt(content, 2);\n\n    const completion = await openai.createChatCompletion(prompt);\n\n    const termName = completion.data.choices[0].message!.content.trim();\n\n    return termName;\n  }\n\n  // Helper method that normalizes given text by making it all lowercase and removing punctuation", "function normalizeText(text: string): string {\n  return text.toLowerCase().replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\");\n}"]}
{"filename": "src/pages/api/auth/{...nextauth}.ts", "chunked_list": ["import NextAuth from 'next-auth';\nimport GoogleProvider from 'next-auth/providers/google';\n\nexport default NextAuth({\n    providers: [\n        GoogleProvider({\n            clientId: process.env.GOOGLE_CLIENT_ID!,\n            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n        }) \n    ]", "        }) \n    ]\n})"]}
{"filename": "src/pages/api/[messageid]/edit.ts", "chunked_list": ["import { query } from \"../db\";\nimport { userLoggedIn } from \"../authchecks\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n        const userid  = await userLoggedIn(req, res);\n\n        if (userid == \"\") {\n            res.status(401).send({ response: \"Not logged in\" });\n            return;\n        }\n", "        if (req.method == \"GET\") {\n            await getRequest(req, res, userid);\n        } else if (req.method == \"POST\") {\n            await postRequest(req, res, userid);\n        }\n}\n\nasync function postRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    \n    // Determines if the user accepted or rejected the edit along with the table they are editing\n    const { accept, table } = req.body;\n    const messageid = req.query.messageid as string;\n    \n    // If the user accepted the edit, retrieve the new message from the edits table and then add it to the table", "    if (accept) {\n        \n        const newMessageQuery = await query(\n            `SELECT newmessage FROM edits WHERE userid = $1 AND messageid = $2 AND storytype = $3`,\n            [userid, messageid, table]\n        );\n        \n        const newMessage = (newMessageQuery.rows[0] as any).newmessage;\n\n        if (table == \"shortstory\") {\n            await query(\n                `UPDATE shortstories SET message = $1 WHERE messageid = $2`,\n                [newMessage, messageid]\n            );", "        if (table == \"shortstory\") {\n            await query(\n                `UPDATE shortstories SET message = $1 WHERE messageid = $2`,\n                [newMessage, messageid]\n            );\n        } else if (table == \"chapter\") {\n            await query(\n                `UPDATE chapters SET message = $1 WHERE messageid = $2`,\n                [newMessage, messageid]\n            );\n        }\n    } \n    \n    // Deletes the edit from the edits table\n    await query(\n        `DELETE FROM edits WHERE userid = $1 AND messageid = $2`,\n        [userid, messageid]\n    );\n\n    res.status(200).send({ response: \"success\" });\n}\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Gets the two stories associated with the user from the edits table\n    const editsQuery = await query(\n        `SELECT oldmessage, newmessage FROM edits WHERE userid = $1 AND messageid = $2`,\n        [userid, req.query.messageid]\n    );\n\n    if (editsQuery.rows.length == 0) {\n        res.status(404).send({ response: \"no edits\" });\n        return;\n    }\n\n    const oldMessage = (editsQuery.rows[0] as any).oldmessage;\n    const newMessage = (editsQuery.rows[0] as any).newmessage;\n\n    res.status(200).send({ oldMessage: oldMessage, newMessage: newMessage });\n}", "    if (editsQuery.rows.length == 0) {\n        res.status(404).send({ response: \"no edits\" });\n        return;\n    }\n\n    const oldMessage = (editsQuery.rows[0] as any).oldmessage;\n    const newMessage = (editsQuery.rows[0] as any).newmessage;\n\n    res.status(200).send({ oldMessage: oldMessage, newMessage: newMessage });\n}"]}
{"filename": "src/pages/api/[messageid]/shortStory.ts", "chunked_list": ["import { NextApiRequest, NextApiResponse } from 'next';\nimport { query } from '../db';\nimport { userLoggedIn } from '../authchecks';\nimport { continueStory, editExcerpt } from '../prompt';\n\nexport default async function storyHistory(req: NextApiRequest, res: NextApiResponse) {\n\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n\n    if (req.method == \"GET\") {\n        await getRequest(req, res, userid);\n    } else if (req.method == \"POST\") {\n        await postRequest(req, res, userid);\n    } else if (req.method == \"PUT\") {\n        await putRequest(req, res, userid);", "    } else if (req.method == \"PUT\") {\n        await putRequest(req, res, userid);\n    } else if (req.method == \"DELETE\") {\n        await deleteRequest(req, res, userid);\n    }\n}\n\nasync function deleteRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n\n    // Deletes the story from the database\n    await query(\n        `DELETE FROM shortstories WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n\n    // Gets the most recent story in the series\n    const storyQuery = await query(\n        `SELECT messageid FROM shortstories WHERE parentid = $1 ORDER BY iterationid DESC LIMIT 1`,\n        [messageid]\n    );\n", "    if (storyQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no stories\" });\n        return;\n    }\n\n    const newMessageID = (storyQuery.rows[0] as any).messageid;\n\n    res.status(200).send({ messageid: newMessageID });\n}\n\nasync function putRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n    const prompt = req.body.prompt as string;\n\n    // Given the prompt, get the message associated with the messageid and edit the story according to the prompt\n    const messageQuery = await query(\n        `SELECT message FROM shortstories WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n    ", "async function putRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n    const prompt = req.body.prompt as string;\n\n    // Given the prompt, get the message associated with the messageid and edit the story according to the prompt\n    const messageQuery = await query(\n        `SELECT message FROM shortstories WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n    \n    if (messageQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    const message = (messageQuery.rows[0] as any).message;\n    \n    const newMessage = await editExcerpt(message, prompt);\n    \n    // Inserts the old and new stories into the edits table\n    await query(\n        `INSERT INTO edits (userid, oldmessage, newmessage, messageid, storytype) VALUES ($1, $2, $3, $4, 'shortstory')`,\n        [userid, message, newMessage, messageid]\n    );\n\n    // Sends the new message information back to the user so they can view it before they submit it\n    res.status(200).send({ response: \"success\" });\n}", "    if (messageQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    const message = (messageQuery.rows[0] as any).message;\n    \n    const newMessage = await editExcerpt(message, prompt);\n    \n    // Inserts the old and new stories into the edits table\n    await query(\n        `INSERT INTO edits (userid, oldmessage, newmessage, messageid, storytype) VALUES ($1, $2, $3, $4, 'shortstory')`,\n        [userid, message, newMessage, messageid]\n    );\n\n    // Sends the new message information back to the user so they can view it before they submit it\n    res.status(200).send({ response: \"success\" });\n}", "async function postRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n    const prompt = req.body.prompt as string;\n\n    // Gets the iterationID of the story associated with the given messageID\n    const iterationIDQuery = await query(\n        `SELECT (iterationid) FROM shortstories WHERE messageid = $1`,\n        [messageid]\n    );\n    const iterationID = (iterationIDQuery.rows[0] as any).iterationid;\n    let parentID = \"0\";", "    if (iterationID == 0) {\n        parentID = messageid;\n    } else {\n        // Gets the parentID of the story associated with the given messageID\n        const parentIDQuery = await query(\n            `SELECT (parentid) FROM shortstories WHERE messageid = $1`,\n            [messageid]\n        );\n\n        parentID = (parentIDQuery.rows[0] as any).parentid;\n    }\n    \n    // Gets the title of the parent story\n    const parentTitle = await getTitle(messageid);\n    \n    // Gets every previous story in this iteration and puts it in a string array\n    const storiesQuery = await query(\n        `SELECT (message) FROM shortstories WHERE messageid = $1 OR parentid = $1`,\n        [parentID]\n    );\n\n    let stories: string[] = [];\n", "    for (let i = 0; i < storiesQuery.rows.length; i++) {\n        stories.push((storiesQuery.rows[i] as any).message);        \n    }\n\n    const story = await continueStory(prompt, stories, userid);\n\n    // Inserts the new story into the database, adding 1 to the iterationID\n    await query(\n        `INSERT INTO shortstories (iterationid, userid, message, prompt, title, parentid) VALUES ($1, $2, $3, $4, $5, $6)`,\n        [iterationID + 1, userid, story, prompt, parentTitle, parentID]\n    );\n\n    const messageIDQuery = await query(\n        `SELECT (messageid) FROM shortstories WHERE message = $1`,\n        [story]\n    );\n\n    const messageID = (messageIDQuery.rows[0] as any).messageid;\n\n    res.status(200).send({ messageID: messageID });\n}\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userId: string) {\n    const messageid = req.query.messageid as string;\n\n\n    // Checks to see if the messageID belongs to the user requesting it\n    const messageIDQuery = await query(\n        `SELECT (message) FROM shortstories WHERE userid = $1 AND messageid = $2`,\n        [userId, messageid]\n    );\n\n    if (messageIDQuery.rows.length == 0) {\n        res.status(401).send({ error: \"messageID does not belong to user\" });\n        return;\n    }\n\n    // Gets the parent story from the database\n    const parentIdQuery = await query(\n        `SELECT (parentid) FROM shortstories WHERE messageid = $1`,\n        [messageid]\n    );\n    const parentStoryID = (parentIdQuery.rows[0] as any ).parentid;\n\n    // If there is no parentID, meaning it is 0, then it is the first story and should be returned along with the title", "    if (messageIDQuery.rows.length == 0) {\n        res.status(401).send({ error: \"messageID does not belong to user\" });\n        return;\n    }\n\n    // Gets the parent story from the database\n    const parentIdQuery = await query(\n        `SELECT (parentid) FROM shortstories WHERE messageid = $1`,\n        [messageid]\n    );\n    const parentStoryID = (parentIdQuery.rows[0] as any ).parentid;\n\n    // If there is no parentID, meaning it is 0, then it is the first story and should be returned along with the title", "    if (parentStoryID == 0) {\n        const parentTitle = await getTitle(messageid);\n        res.status(200).send({ stories: [(messageIDQuery.rows[0] as any).message], parentTitle: parentTitle, messageIDs: [messageid] });\n        return;\n    }\n\n    const parentStoryQuery = await query(\n        `SELECT (message) FROM shortstories WHERE messageid = $1`,\n        [parentStoryID]\n    );\n    \n    // Returns the parent and every story that has the parentID as the parent as an array of strings, so long as the messageID is\n    // less than the given one\n    const parentStory = (parentStoryQuery.rows[0] as any).message;\n    const childStoriesQuery = await query(\n        `SELECT message, messageid FROM shortstories WHERE parentid = $1 AND messageid <= $2`,\n        [parentStoryID, messageid]\n    );\n    const childStories = childStoriesQuery.rows;\n    \n    let childStoriesArray: string[] = [];\n    let messageIDArray: string[] = [];\n    messageIDArray.push(parentStoryID);", "    for (let i = 0; i < childStories.length; i++) {\n        childStoriesArray.push((childStories[i] as any).message);\n        messageIDArray.push((childStories[i] as any).messageid);\n    }\n\n    const parentTitle = await getTitle(parentStoryID);\n    let stories = [];\n    stories.push(parentStory);\n\n    for (let i = 0; i < childStoriesArray.length; i++) {\n        stories.push(childStoriesArray[i]);\n    }\n\n    res.status(200).send({ stories: stories, parentTitle: parentTitle, messageIDs: messageIDArray });\n}\n", "    for (let i = 0; i < childStoriesArray.length; i++) {\n        stories.push(childStoriesArray[i]);\n    }\n\n    res.status(200).send({ stories: stories, parentTitle: parentTitle, messageIDs: messageIDArray });\n}\n\nasync function getTitle(messageid: string): Promise<string> {\n    // Gets the title of the parent story\n    const parentTitleQuery = await query(\n        `SELECT (title) FROM shortstories WHERE messageid = $1`,\n        [messageid]\n    );\n    \n    const parentTitle = parentTitleQuery.rows[0];\n    return (parentTitle as any).title;\n}"]}
{"filename": "src/pages/api/[messageid]/chapters.ts", "chunked_list": ["import { NextApiRequest, NextApiResponse } from 'next';\nimport { query } from '../db';\nimport { userLoggedIn } from '../authchecks';\nimport { continueChapters, editExcerpt } from '../prompt';\n\n\nexport default async function chapterHistory(req: NextApiRequest, res: NextApiResponse) {\n\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n\n    if (req.method == \"GET\") {\n        await getRequest(req, res, userid);\n    } else if (req.method == \"POST\") {\n        await postRequest(req, res, userid);\n    } else if (req.method == \"PUT\") {\n        await putRequest(req, res, userid);", "    } else if (req.method == \"PUT\") {\n        await putRequest(req, res, userid);\n    } else if (req.method == \"DELETE\") {\n        await deleteRequest(req, res, userid);\n    }\n}\n\nasync function deleteRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n\n    // Gets the seriesid of the story with the given messageid\n    const seriesIDQuery = await query(\n        `SELECT seriesid FROM chapters WHERE messageid = $1`,\n        [messageid]\n    );\n\n    const seriesID = (seriesIDQuery.rows[0] as any).seriesid;\n\n    // Deletes the story from the database\n    await query(\n        `DELETE FROM chapters WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n\n    // Gets the most recent chapter in the series\n    const chapterQuery = await query(\n        `SELECT messageid FROM chapters WHERE seriesid = $1 ORDER BY chapterid DESC LIMIT 1`,\n        [seriesID]\n    );\n", "    if (chapterQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    const newMessageID = (chapterQuery.rows[0] as any).messageid;\n\n    res.status(200).send({ messageid: newMessageID });\n}\n\nasync function putRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n    const prompt = req.body.prompt as string;\n\n    // Given the prompt, get the message associated with the messageid and edit the story according to the prompt\n    const messageQuery = await query(\n        `SELECT message FROM chapters WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n    ", "async function putRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const messageid = req.query.messageid as string;\n    const prompt = req.body.prompt as string;\n\n    // Given the prompt, get the message associated with the messageid and edit the story according to the prompt\n    const messageQuery = await query(\n        `SELECT message FROM chapters WHERE messageid = $1 AND userid = $2`,\n        [messageid, userid]\n    );\n    \n    if (messageQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    const message = (messageQuery.rows[0] as any).message;\n    \n    const newMessage = await editExcerpt(message, prompt);\n    \n    // Inserts the old and new stories into the edits table\n    await query(\n        `INSERT INTO edits (userid, oldmessage, newmessage, messageid, storytype) VALUES ($1, $2, $3, $4, 'chapter')`,\n        [userid, message, newMessage, messageid]\n    );\n\n    // Sends the new message information back to the user so they can view it before they submit it\n    res.status(200).send({ response: \"success\" });\n}\n\n", "    if (messageQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    const message = (messageQuery.rows[0] as any).message;\n    \n    const newMessage = await editExcerpt(message, prompt);\n    \n    // Inserts the old and new stories into the edits table\n    await query(\n        `INSERT INTO edits (userid, oldmessage, newmessage, messageid, storytype) VALUES ($1, $2, $3, $4, 'chapter')`,\n        [userid, message, newMessage, messageid]\n    );\n\n    // Sends the new message information back to the user so they can view it before they submit it\n    res.status(200).send({ response: \"success\" });\n}\n\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userId: string) {\n    const messageid = req.query.messageid as string;\n\n    // Gets every chapter where the userid is the same as the userid of the chapter with the given messageid, and the messageid is less than or equal to the given messageid\n    const seriesIDQuery = await query(\n        `SELECT message, name, messageid FROM chapters WHERE seriesid = (SELECT seriesid FROM chapters WHERE messageid = $1) AND chapterid <= (SELECT chapterid FROM chapters WHERE messageid = $1) AND userid = $2 ORDER BY chapterid ASC`,\n        [messageid, userId]\n    );\n    \n    if (seriesIDQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    // Returns the chapters, story names, and messageIDs as arrays\n    const chapters: string[] = [];\n    const storyNames: string[] = [];\n    const messageIDs: string[] = [];\n", "    if (seriesIDQuery.rows.length == 0) {\n        res.status(200).send({ response: \"no chapters\" });\n        return;\n    }\n\n    // Returns the chapters, story names, and messageIDs as arrays\n    const chapters: string[] = [];\n    const storyNames: string[] = [];\n    const messageIDs: string[] = [];\n\n    for (let i = 0; i < seriesIDQuery.rows.length; i++) {\n        chapters.push((seriesIDQuery.rows[i] as any).message);\n        storyNames.push((seriesIDQuery.rows[i] as any).name);\n        messageIDs.push((seriesIDQuery.rows[i] as any).messageid);\n    }\n\n    res.status(200).send({ chapters: chapters, storyNames: storyNames, messageIDs: messageIDs });\n}\n\n\n", "    for (let i = 0; i < seriesIDQuery.rows.length; i++) {\n        chapters.push((seriesIDQuery.rows[i] as any).message);\n        storyNames.push((seriesIDQuery.rows[i] as any).name);\n        messageIDs.push((seriesIDQuery.rows[i] as any).messageid);\n    }\n\n    res.status(200).send({ chapters: chapters, storyNames: storyNames, messageIDs: messageIDs });\n}\n\n\n", "async function postRequest(req: NextApiRequest, res: NextApiResponse, userId: string) {\n    \n    const { prompt, messageid } = req.body;\n\n    // Since the messageid given is the id of the previous message, the messageid will have the needed seriesid and chapterid\n    const seriesIDQuery = await query(\n        `SELECT seriesid, chapterid FROM chapters WHERE messageid = $1`,\n        [messageid]\n    );\n\n    const seriesID = (seriesIDQuery.rows[0] as any).seriesid;\n    let chapterid = (seriesIDQuery.rows[0] as any).chapterid;\n    chapterid = Number(chapterid) + 1;\n\n    // Gets all previous chapters of the story, ordering with the lowest chapterid first\n    const chaptersQuery = await query(\n        `SELECT message FROM chapters WHERE seriesid = $1 ORDER BY chapterid ASC`,\n        [seriesID]\n    );\n\n    let chapters: string[] = [];\n", "    for (let i = 0; i < chaptersQuery.rows.length; i++) {\n        chapters.push((chaptersQuery.rows[i] as any).message);\n    }\n    // Generates the next chapter\n    const story = await continueChapters(prompt, chapters, userId);\n\n    const storyNameQuery = await query(\n        `SELECT name FROM chapters WHERE seriesid = $1 ORDER BY chapterid DESC LIMIT 1`,\n        [seriesID]\n    );\n\n    let storyName = (storyNameQuery.rows[0] as any).name;\n    \n    await query(\n        `INSERT INTO chapters (seriesid, chapterid, prompt, message, userid, name) VALUES ($1, $2, $3, $4, $5, $6)`,\n        [seriesID, chapterid, prompt, story, userId, storyName]\n    );\n\n    const newMessageIDQuery = await query(\n        `SELECT messageid FROM chapters WHERE seriesid = $1 AND chapterid = $2`,\n        [seriesID, chapterid]\n    );\n\n    const newMessageID = (newMessageIDQuery.rows[0] as any).messageid;\n\n    res.status(200).send({ messageid: newMessageID });\n}"]}
{"filename": "src/pages/api/customTerms/index.ts", "chunked_list": ["import { query } from \"../db\";\nimport { userLoggedIn } from \"../authchecks\";\nimport { NextApiResponse, NextApiRequest } from \"next\";\nimport { createEmbedding } from \"../openai\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n\n    if (req.method == \"POST\") {\n        await postRequest(req, res, userid);\n    } else if (req.method == \"GET\") {\n        await getRequest(req, res, userid);\n    }\n}\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Gets all custom terms associated with the userID\n    const customTermsQuery = await query(\n        `SELECT term, context, termid FROM userterms WHERE userid = $1`,\n        [userid]\n    );\n    const contexts = customTermsQuery.rows.map((row) => (row as any).context);\n    const termids = customTermsQuery.rows.map(row => (row as any).termid);\n    const terms = customTermsQuery.rows.map(row => (row as any).term);\n\n    res.status(200).send({ terms: terms, contexts: contexts, termids: termids });\n}\n", "async function postRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    const term = req.body.term as string;\n    const context = req.body.context as string;\n\n    // Inserts the term and context into the userterms table\n    await query(\n        `INSERT INTO userterms (userid, term, context) VALUES ($1, $2, $3)`,\n        [userid, term, context]\n    );\n\n    // Gets the termid of the term just inserted\n    const termidQuery = await query(\n        `SELECT termid FROM userterms WHERE userid = $1 AND term = $2`,\n        [userid, term]\n    );\n\n    const termid = (termidQuery.rows[0] as any).termid;\n\n    // Breaks the context into paragraphs and inserts them into the usercontext table\n    const paragraphs = context.split(\"\\n\\n\");\n", "    for (let i = 1; i <= paragraphs.length; i++) {\n        const embedding = await createEmbedding(paragraphs[i-1]);\n        await query(\n            `INSERT INTO usercontext (termid, context, sentenceid, embedding) VALUES ($1, $2, $3, $4)`,\n            [termid, paragraphs[i-1], i, embedding]\n        );\n    }\n}"]}
{"filename": "src/pages/api/customTerms/generate.ts", "chunked_list": ["import { query } from \"../db\";\nimport { userLoggedIn } from \"../authchecks\";\nimport { NextApiResponse, NextApiRequest } from \"next\";\nimport { createEmbedding } from \"../openai\";\nimport { createCustomTerm } from \"../prompt\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n\n    if (req.method == \"GET\") {\n        await getRequest(req, res, userid);\n    }\n}\n\nasync function getRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Gets the term names of all terms the user already has\n    const termNamesQuery = await query(\n        `SELECT term FROM userterms WHERE userid = $1`,\n        [userid]\n    );\n    const providedTermName = req.headers.term as string;\n    const termNames = termNamesQuery.rows.map(row => (row as any).term);\n\n    // Generates a new custom term and context and then adds it to the user's custom terms list\n    const { termName, termDescription } = await createCustomTerm(termNames, providedTermName);\n\n    // Inserts the term into the userterms table\n    await query(\n        `INSERT INTO userterms (userid, term, context) VALUES ($1, $2, $3)`,\n        [userid, termName, termDescription]\n    );\n\n    // Breaks the context into paragraphs and inserts them into the usercontext table\n    const paragraphs = termDescription.split(\"\\n\");\n    const termIDQuery = await query(\n        `SELECT termid FROM userterms WHERE userid = $1 AND term = $2 AND context = $3`,\n        [userid, termName, termDescription]\n    );\n\n    const termID = (termIDQuery.rows[0] as any).termid;\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Gets the term names of all terms the user already has\n    const termNamesQuery = await query(\n        `SELECT term FROM userterms WHERE userid = $1`,\n        [userid]\n    );\n    const providedTermName = req.headers.term as string;\n    const termNames = termNamesQuery.rows.map(row => (row as any).term);\n\n    // Generates a new custom term and context and then adds it to the user's custom terms list\n    const { termName, termDescription } = await createCustomTerm(termNames, providedTermName);\n\n    // Inserts the term into the userterms table\n    await query(\n        `INSERT INTO userterms (userid, term, context) VALUES ($1, $2, $3)`,\n        [userid, termName, termDescription]\n    );\n\n    // Breaks the context into paragraphs and inserts them into the usercontext table\n    const paragraphs = termDescription.split(\"\\n\");\n    const termIDQuery = await query(\n        `SELECT termid FROM userterms WHERE userid = $1 AND term = $2 AND context = $3`,\n        [userid, termName, termDescription]\n    );\n\n    const termID = (termIDQuery.rows[0] as any).termid;\n", "    for (let i = 1; i <= paragraphs.length; i++) {\n        await query(\n            `INSERT INTO usercontext (termid, context, sentenceid) VALUES ($1, $2, $3)`,\n            [termID, paragraphs[i - 1], i]\n        );\n    }\n\n    res.status(200).send({ termid: termID })\n}"]}
{"filename": "src/pages/api/customTerms/[termid]/index.ts", "chunked_list": ["import { query } from \"../../db\";\nimport { userLoggedIn } from \"../../authchecks\";\nimport { NextApiResponse, NextApiRequest } from \"next\";\nimport { createEmbedding } from \"../../openai\";\n\nexport default async function handler(req: NextApiRequest, res: NextApiResponse) {\n\n    const userid = await userLoggedIn(req, res);\n\n    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n", "    if (userid == \"\") {\n        res.status(401).send({ response: \"Not logged in\" });\n        return;\n    }\n\n    if (req.method == \"PUT\") {\n        await putRequest(req, res, userid);\n    } else if (req.method == \"GET\") {\n        await getRequest(req, res, userid);\n    } else if (req.method == \"DELETE\") {\n        await deleteRequest(req, res, userid);\n    }\n}\n", "    } else if (req.method == \"DELETE\") {\n        await deleteRequest(req, res, userid);\n    }\n}\n\nasync function deleteRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n    // Deletes the term from the userterms table\n    const termid = req.query.termid as string;\n\n    await query(\n        `DELETE FROM userterms WHERE userid = $1 AND termid = $2`,\n        [userid, termid]\n    );\n\n    // Deletes all paragraphs associated with the termid\n    await query(\n        `DELETE FROM usercontext WHERE termid = $1`,\n        [termid]\n    );\n\n    res.status(200).send({ response: \"success\" });\n}\n", "async function getRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n\n   // Gets the context for the specified term\n   const termid = req.query.termid as string;\n\n    const contextQuery = await query(\n        `SELECT context, term FROM userterms WHERE userid = $1 AND termid = $2`,\n        [userid, termid]\n    );\n\n    const term = (contextQuery.rows[0] as any).term;\n    const context = (contextQuery.rows[0] as any).context;\n\n    res.status(200).send({ context: context, term: term });\n}\n", "async function putRequest(req: NextApiRequest, res: NextApiResponse, userid: string) {\n    const termid = req.query.termid as string;\n    const context = req.body.context as string;\n\n    await query(\n        `UPDATE userterms SET context = $1 WHERE userid = $2 AND termid = $3`,\n        [context, userid, termid]\n    );\n\n    // Deletes all sentences associated with the termid\n    await query(\n        `DELETE FROM usercontext WHERE termid = $1`,\n        [termid]\n    );\n\n    // Breaks the context into individual paragraphs, and for each sentence, add it to the usercontext table in the database\n    const paragraphs = context.split(\"\\n\\n\");\n    ", "    try {\n        for (let i = 1; i <= paragraphs.length; i++) {\n\n            const sentence = paragraphs[i - 1];\n            const embedding = await createEmbedding(sentence);\n\n            await query(\n                `INSERT INTO usercontext (context, termid, sentenceid, embedding) VALUES ($1, $2, $3, $4)`,\n                [sentence, termid, i, embedding]\n            );\n        }", "    } catch (e) {\n        console.log(e);\n        res.status(500).send({ error: e });\n    }\n\n    res.status(200).send({ response: \"success\" });\n}"]}
