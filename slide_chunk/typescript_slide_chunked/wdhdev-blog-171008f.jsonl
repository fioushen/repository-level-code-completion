{"filename": "src/index.ts", "chunked_list": ["import express from \"express\";\nconst app = express();\n\nrequire(\"dotenv\").config();\n\nimport { Request } from \"express\";\nimport * as Sentry from \"@sentry/node\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport session from \"express-session\";", "import cors from \"cors\";\nimport session from \"express-session\";\n\nSentry.init({\n    dsn: process.env.sentry_dsn,\n    integrations: [\n        new Sentry.Integrations.Http({ tracing: true }),\n        new Sentry.Integrations.Express({ app }),\n        ...Sentry.autoDiscoverNodePerformanceMonitoringIntegrations()\n    ],", "        ...Sentry.autoDiscoverNodePerformanceMonitoringIntegrations()\n    ],\n    tracesSampleRate: 1.0\n})\n\nimport router from \"./util/router\";\nconst port = process.env.port;\n\napp.use(Sentry.Handlers.requestHandler());\napp.use(Sentry.Handlers.tracingHandler());", "app.use(Sentry.Handlers.requestHandler());\napp.use(Sentry.Handlers.tracingHandler());\n\napp.use(cors<Request>({ origin: \"*\" }));\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.engine(\"html\", require(\"ejs\").renderFile);\napp.set(\"view engine\", \"ejs\");\n", "app.set(\"view engine\", \"ejs\");\n\napp.use(session({\n\tsecret: \"secret\",\n\tresave: true,\n\tsaveUninitialized: true\n}))\n\n// Connect to Database\nimport database from \"./util/database\";", "// Connect to Database\nimport database from \"./util/database\";\ndatabase();\n\napp.use(express.static(\"public\"));\napp.use(\"/\", router);\n\napp.use(Sentry.Handlers.errorHandler());\n\napp.listen(port, () => {", "\napp.listen(port, () => {\n    console.log(`Listening on Port: ${port}`);\n})\n"]}
{"filename": "src/endpoints/author.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\nimport gravatar from \"gravatar-url\";\nimport moment from \"moment\";\n\nimport Post from \"../models/Post\";\nimport User from \"../models/User\";\n\nexport default async (req: Request, res: Response) => {\n    if(!await User.findOne({ username: req.params.username })) return res.status(404).render(\"errors/404\");\n\n    const user = await User.findOne({ username: req.params.username });\n\n    res.status(200).render(\"author\", {\n        author: {\n            name: `${user.firstName} ${user.lastName}`,\n            firstName: user.firstName,\n            username: req.params.username,\n            avatar: gravatar(user.email)\n        },\n        posts: (await Post.find({ author: req.params.username })).reverse(),\n        moment: moment\n    })\n}\n", "export default async (req: Request, res: Response) => {\n    if(!await User.findOne({ username: req.params.username })) return res.status(404).render(\"errors/404\");\n\n    const user = await User.findOne({ username: req.params.username });\n\n    res.status(200).render(\"author\", {\n        author: {\n            name: `${user.firstName} ${user.lastName}`,\n            firstName: user.firstName,\n            username: req.params.username,\n            avatar: gravatar(user.email)\n        },\n        posts: (await Post.find({ author: req.params.username })).reverse(),\n        moment: moment\n    })\n}\n"]}
{"filename": "src/endpoints/dashboard.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\nimport gravatar from \"gravatar-url\";\n\nimport Post from \"../models/Post\";\n\nexport default async (req: Request & any, res: Response) => {\n    if(!req.session.loggedIn) return res.status(401).redirect(\"/auth/login\");\n\n    res.status(200).render(\"dashboard\", {\n        avatar: gravatar(req.session.email),\n        firstName: req.session.firstName,\n        username: req.session.username,\n        posts: (await Post.find({ author: req.session.username })).reverse()\n    })\n}\n"]}
{"filename": "src/endpoints/404.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\nexport default async (req: Request, res: Response) => {\n    res.status(404).render(\"errors/404\");\n}\n"]}
{"filename": "src/endpoints/index.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\nimport moment from \"moment\";\n\nimport Post from \"../models/Post\";\n\nexport default async (req: Request & any, res: Response) => {\n    res.status(200).render(\"index\", {\n        posts: (await Post.find()).reverse(),\n        session: {", "        posts: (await Post.find()).reverse(),\n        session: {\n            loggedIn: req.session.loggedIn\n        },\n        moment: moment\n    })\n}\n"]}
{"filename": "src/endpoints/authors.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\nimport User from \"../models/User\";\n\nexport default async (req: Request, res: Response) => {\n    const authors = await User.find();\n\n    const authorData = [];\n\n    for(const author of authors) {\n        authorData.push({\n            \"username\": author.username,\n            \"firstName\": author.firstName,\n            \"lastName\": author.lastName,\n        })\n    }\n\n    res.status(200).render(\"authors\", { authors: authorData });\n}\n", "\n    for(const author of authors) {\n        authorData.push({\n            \"username\": author.username,\n            \"firstName\": author.firstName,\n            \"lastName\": author.lastName,\n        })\n    }\n\n    res.status(200).render(\"authors\", { authors: authorData });\n}\n"]}
{"filename": "src/endpoints/api/users.ts", "chunked_list": ["import { Request, Response } from \"express\";\n\nimport User from \"../../models/User\";\n\nexport default async (req: Request & any, res: Response) => {\n    const users = await User.find();\n\n    const userData = [];\n\n    for(const user of users) {\n        userData.push({\n            \"username\": user.username,\n            \"first_name\": user.firstName,\n            \"last_name\": user.lastName\n        })\n    }\n\n    res.status(200).json(userData);\n}", "\n    for(const user of users) {\n        userData.push({\n            \"username\": user.username,\n            \"first_name\": user.firstName,\n            \"last_name\": user.lastName\n        })\n    }\n\n    res.status(200).json(userData);\n}"]}
{"filename": "src/util/routes.ts", "chunked_list": ["import apiUsers from \"../endpoints/api/users\";\nimport author from \"../endpoints/author\";\nimport authors from \"../endpoints/authors\";\nimport dashboard from \"../endpoints/dashboard\";\nimport Error404 from \"../endpoints/404\";\nimport index from \"../endpoints/index\";\n\nexport default {\n    404: Error404,\n    account: {", "    404: Error404,\n    account: {\n        \"change-password\": require(\"../endpoints/account/change-password\"),\n        index: require(\"../endpoints/account\"),\n        \"reset-password\": require(\"../endpoints/account/reset-password\")\n    },\n    api: {\n        auth: {\n            \"forgot-password\": require(\"../endpoints/api/auth/forgot-password\"),\n            login: require(\"../endpoints/api/auth/login\")", "            \"forgot-password\": require(\"../endpoints/api/auth/forgot-password\"),\n            login: require(\"../endpoints/api/auth/login\")\n        },\n        posts: require(\"../endpoints/api/posts\"),\n        user: {\n            password: require(\"../endpoints/api/user/password\")\n        },\n        users: apiUsers\n    },\n    auth: {", "    },\n    auth: {\n        \"forgot-password\": require(\"../endpoints/auth/forgot-password\"),\n        login: require(\"../endpoints/auth/login\"),\n        logout: require(\"../endpoints/auth/logout\")\n    },\n    author: author,\n    authors: authors,\n    dashboard: dashboard,\n    index: index,", "    dashboard: dashboard,\n    index: index,\n    post: {\n        create: require(\"../endpoints/post/create\"),\n        delete: require(\"../endpoints/post/delete\"),\n        edit: require(\"../endpoints/post/edit\"),\n        index: require(\"../endpoints/post\")\n    }\n}\n", "}\n"]}
{"filename": "src/util/database.ts", "chunked_list": ["import mongoose from \"mongoose\";\nimport * as Sentry from \"@sentry/node\";\n\nrequire(\"dotenv\").config();\n\nexport default async () => {\n    // Supress Deprecation Warning\n    mongoose.set(\"strictQuery\", true);\n\n    return mongoose.connect(process.env.database, {", "\n    return mongoose.connect(process.env.database, {\n        keepAlive: true\n    }).then(() => {\n        console.log(\"Connected to Database!\");\n    }).catch((err: Error) => {\n        Sentry.captureException(err);\n        console.error(err);\n\n        process.exit(1);\n    })\n}\n"]}
{"filename": "src/util/router.ts", "chunked_list": ["import { Request, Response, Router } from \"express\";\n\nconst router = Router();\nimport routes from \"./routes\";\n\nimport { rateLimit } from \"express-rate-limit\";\n\nconst resetPasswordLimiter = rateLimit({\n\twindowMs: 60 * 60, // 1 hour\n\tmax: 5, // 5 requests", "\twindowMs: 60 * 60, // 1 hour\n\tmax: 5, // 5 requests\n\tstandardHeaders: true,\n\tlegacyHeaders: false,\n    message: {\n        \"message\": \"Too many requests, try again later.\",\n        \"code\": \"RATE_LIMITED\"\n    }\n})\n", "})\n\nrouter.get(\"/\", async (req: Request, res: Response) => {\n    routes.index(req, res);\n})\n\nrouter.get(\"/account\", async (req: Request, res: Response) => {\n    routes.account.index(req, res);\n})\n", "})\n\nrouter.get(\"/account/change-password\", async (req: Request, res: Response) => {\n    routes.account[\"change-password\"](req, res);\n})\n\nrouter.get(\"/account/reset-password\", async (req: Request, res: Response) => {\n    routes.account[\"reset-password\"](req, res);\n})\n", "})\n\nrouter.post(\"/api/auth/forgot-password\", async (req: Request, res: Response) => {\n    routes.api.auth[\"forgot-password\"](req, res);\n})\n\nrouter.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    routes.api.auth.login(req, res);\n})\n", "})\n\nrouter.delete(\"/api/posts\", async (req: Request, res: Response) => {\n    routes.api.posts(req, res);\n})\n\nrouter.get(\"/api/posts\", async (req: Request, res: Response) => {\n    routes.api.posts(req, res);\n})\n", "})\n\nrouter.patch(\"/api/posts\", async (req: Request, res: Response) => {\n    routes.api.posts(req, res);\n})\n\nrouter.put(\"/api/posts\", async (req: Request, res: Response) => {\n    routes.api.posts(req, res);\n})\n", "})\n\nrouter.patch(\"/api/user/password\", async (req: Request, res: Response) => {\n    routes.api.user.password(req, res);\n})\n\nrouter.put(\"/api/user/password\", resetPasswordLimiter, async (req: Request, res: Response) => {\n    routes.api.user.password(req, res);\n})\n", "})\n\nrouter.get(\"/api/users\", async (req: Request, res: Response) => {\n    routes.api.users(req, res);\n})\n\nrouter.get(\"/auth/forgot-password\", async (req: Request, res: Response) => {\n    routes.auth[\"forgot-password\"](req, res);\n})\n", "})\n\nrouter.get(\"/auth/login\", async (req: Request, res: Response) => {\n    routes.auth.login(req, res);\n})\n\nrouter.get(\"/auth/logout\", async (req: Request, res: Response) => {\n    routes.auth.logout(req, res);\n})\n", "})\n\nrouter.get(\"/author/:username\", async (req: Request, res: Response) => {\n    routes.author(req, res);\n})\n\nrouter.get(\"/authors\", async (req: Request, res: Response) => {\n    routes.authors(req, res);\n})\n", "})\n\nrouter.get(\"/dashboard\", async (req: Request, res: Response) => {\n    routes.dashboard(req, res);\n})\n\nrouter.get(\"/post/create\", async (req: Request, res: Response) => {\n    routes.post.create(req, res);\n})\n", "})\n\nrouter.get(\"/post/delete/:id\", async (req: Request, res: Response) => {\n    routes.post.delete(req, res);\n})\n\nrouter.get(\"/post/edit/:id\", async (req: Request, res: Response) => {\n    routes.post.edit(req, res);\n})\n", "})\n\nrouter.get(\"/post/:id\", async (req: Request, res: Response) => {\n    routes.post.index(req, res);\n})\n\nrouter.get(\"*\", async (req: Request, res: Response) => {\n    routes[404](req, res);\n})\n", "})\n\nexport default router;\n"]}
