{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { setupSwagger } from './common/modules';\n\nimport helmet from 'helmet';\nimport { ValidationPipe } from '@nestjs/common';\nimport { NotFoundFilter, UnauthorizedFilter } from './common/filters';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  app.enableCors();\n  app.use(helmet({ contentSecurityPolicy: false }));\n\n  app.useGlobalPipes(new ValidationPipe());\n\n  app.useGlobalFilters(new NotFoundFilter());\n  app.useGlobalFilters(new UnauthorizedFilter());\n\n  await setupSwagger(app);\n\n  const port = parseInt(process.env.WEB_PORT) || 5000;\n  await app.listen(port);\n}\nbootstrap();\n", "async function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n\n  app.enableCors();\n  app.use(helmet({ contentSecurityPolicy: false }));\n\n  app.useGlobalPipes(new ValidationPipe());\n\n  app.useGlobalFilters(new NotFoundFilter());\n  app.useGlobalFilters(new UnauthorizedFilter());\n\n  await setupSwagger(app);\n\n  const port = parseInt(process.env.WEB_PORT) || 5000;\n  await app.listen(port);\n}\nbootstrap();\n"]}
{"filename": "src/app.service.ts", "chunked_list": ["import { Injectable, Logger } from '@nestjs/common';\nimport { ClusterDto, Deployment } from './common/dto';\n\nimport _ from 'lodash';\nimport os from 'os';\n\n@Injectable()\nexport class AppService {\n  private cluster: ClusterDto;\n  private readonly logger = new Logger(AppService.name);\n\n  private DisplayMode = {\n    dev: 'Development Mode',\n    prod: 'Production Mode',\n  };\n\n  async onModuleInit() {\n    await this.getBackendInfo();\n    this.logger.log(`Package name: ${this.cluster.name}`);\n    this.logger.log(`Package version: ${this.cluster.version}`);\n    this.logger.log(`Package description: ${this.cluster.description}`);\n    this.logger.log(`Package author: ${this.cluster.author}`);\n    this.logger.log(`Cluster name: ${this.cluster.hostname}`);\n    this.logger.log(`Cluster mode: ${this.DisplayMode[this.cluster.mode]}`);\n  }\n\n  async getBackendInfo(): Promise<ClusterDto> {", "    if (this.cluster) return this.cluster;\n\n    const packageFile = await import(`${process.cwd()}/package.json`);\n    const packageInfo = _.pick(packageFile, [\n      'name',\n      'version',\n      'description',\n      'author',\n    ]);\n\n    const hostname = os.hostname();\n    const mode = (process.env.NODE_ENV as Deployment) || 'prod';\n\n    this.cluster = { ...packageInfo, hostname, mode };\n    return this.cluster;\n  }\n}\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { JwtExpireMiddleware, LoggerMiddleware } from './common/middlewares';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthModule } from './api/auth/auth.module';\nimport { UserModule } from './api/user/user.module';\nimport { PostModule } from './api/post/post.module';\n", "import { PostModule } from './api/post/post.module';\n\nConfigModule.forRoot();\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(process.env.MONGO_URI),\n    JwtModule.register({\n      global: true,\n      secret: process.env.JWT_SECRET_KEY,", "      global: true,\n      secret: process.env.JWT_SECRET_KEY,\n      signOptions: { expiresIn: '1h' },\n    }),\n    AuthModule,\n    UserModule,\n    PostModule,\n  ],\n  controllers: [],\n  providers: [AppService],", "  controllers: [],\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoggerMiddleware).forRoutes('*');\n    consumer.apply(JwtExpireMiddleware).exclude('/auth/(.*)').forRoutes('*');\n  }\n}\n"]}
{"filename": "src/common/opcode.ts", "chunked_list": ["import { HttpException, HttpStatus } from '@nestjs/common';\n\nexport type OpcodeNames =\n  | 'Success'\n  | 'InvalidError'\n  | 'NoPermission'\n  | 'ValidateFailed'\n  | 'NotFound';\n\nexport type OpcodeItem = (details?: { [key: string]: any }) => HttpException;\nexport const globalOpcode: { [key in OpcodeNames]: OpcodeItem } = {\n  Success: $(0, HttpStatus.OK, '\uc694\uccad\uc5d0 \uc131\uacf5\ud558\uc600\uc2b5\ub2c8\ub2e4.'),\n  InvalidError: $(\n    -999,\n    HttpStatus.INTERNAL_SERVER_ERROR,\n    '\uc54c \uc218 \uc5c6\ub294 \ub0b4\ubd80 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4.',\n  ),\n  NoPermission: $(\n    -401,\n    HttpStatus.UNAUTHORIZED,\n    '\uc778\uc99d\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. JWT \ud1a0\ud070\uc744 \ub123\uc5b4\uc8fc\uc138\uc694.',\n  ),\n  ValidateFailed: $(\n    -1,\n    HttpStatus.BAD_REQUEST,\n    '\uc798\ubabb\ub41c \ud615\uc2dd\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \uc815\ubcf4\ub97c \uc62c\ubc14\ub974\uac8c \uc785\ub825\ud574\uc8fc\uc138\uc694.',\n  ),\n  NotFound: $(\n    -404,\n    HttpStatus.NOT_FOUND,\n    '\uc798\ubabb\ub41c \uc694\uccad\uc785\ub2c8\ub2e4. \ud574\ub2f9 Route\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ub2e4\uc2dc \ud55c\ubc88 \ud655\uc778\ud574\uc8fc\uc138\uc694.',\n  ),\n};\n\nexport function $(\n  opcode: number,\n  statusCode: number,\n  message?: string,\n): OpcodeItem {\n  return (details: { [key: string]: any } = {}) =>\n    new HttpException({ opcode, message, ...details }, statusCode);\n}\n", "export type OpcodeItem = (details?: { [key: string]: any }) => HttpException;\nexport const globalOpcode: { [key in OpcodeNames]: OpcodeItem } = {\n  Success: $(0, HttpStatus.OK, '\uc694\uccad\uc5d0 \uc131\uacf5\ud558\uc600\uc2b5\ub2c8\ub2e4.'),\n  InvalidError: $(\n    -999,\n    HttpStatus.INTERNAL_SERVER_ERROR,\n    '\uc54c \uc218 \uc5c6\ub294 \ub0b4\ubd80 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc600\uc2b5\ub2c8\ub2e4.',\n  ),\n  NoPermission: $(\n    -401,\n    HttpStatus.UNAUTHORIZED,\n    '\uc778\uc99d\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. JWT \ud1a0\ud070\uc744 \ub123\uc5b4\uc8fc\uc138\uc694.',\n  ),\n  ValidateFailed: $(\n    -1,\n    HttpStatus.BAD_REQUEST,\n    '\uc798\ubabb\ub41c \ud615\uc2dd\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \uc815\ubcf4\ub97c \uc62c\ubc14\ub974\uac8c \uc785\ub825\ud574\uc8fc\uc138\uc694.',\n  ),\n  NotFound: $(\n    -404,\n    HttpStatus.NOT_FOUND,\n    '\uc798\ubabb\ub41c \uc694\uccad\uc785\ub2c8\ub2e4. \ud574\ub2f9 Route\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ub2e4\uc2dc \ud55c\ubc88 \ud655\uc778\ud574\uc8fc\uc138\uc694.',\n  ),\n};\n\nexport function $(\n  opcode: number,\n  statusCode: number,\n  message?: string,\n): OpcodeItem {\n  return (details: { [key: string]: any } = {}) =>\n    new HttpException({ opcode, message, ...details }, statusCode);\n}\n"]}
{"filename": "src/common/types.ts", "chunked_list": ["// export const Values = [1, 2, 3] as const;\n\ninterface AccessTokenResponse {\n  accessToken: string;\n}\n"]}
{"filename": "src/common/filters/Unauthorized.filter.ts", "chunked_list": ["import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  UnauthorizedException,\n} from '@nestjs/common';\n\nimport { globalOpcode } from '../opcode';\n\n@Catch(UnauthorizedException)\nexport class UnauthorizedFilter implements ExceptionFilter {", "\n@Catch(UnauthorizedException)\nexport class UnauthorizedFilter implements ExceptionFilter {\n  catch(exception: UnauthorizedException, host: ArgumentsHost) {\n    const body = globalOpcode.NotFound().getResponse();\n    host.switchToHttp().getResponse().status(401).json(body);\n  }\n}\n"]}
{"filename": "src/common/filters/NotFound.filter.ts", "chunked_list": ["import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  NotFoundException,\n} from '@nestjs/common';\n\nimport { globalOpcode } from '../opcode';\n\n@Catch(NotFoundException)\nexport class NotFoundFilter implements ExceptionFilter {", "\n@Catch(NotFoundException)\nexport class NotFoundFilter implements ExceptionFilter {\n  catch(exception: NotFoundException, host: ArgumentsHost) {\n    const body = globalOpcode.NotFound().getResponse();\n    host.switchToHttp().getResponse().status(404).json(body);\n  }\n}\n"]}
{"filename": "src/common/filters/index.ts", "chunked_list": ["export * from './NotFound.filter';\nexport * from './Unauthorized.filter';\n"]}
{"filename": "src/common/schemas/post.schema.ts", "chunked_list": ["import { Prop, Schema, SchemaFactory, SchemaOptions } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Types } from 'mongoose';\n\nexport type PostDocument = Post & Document;\n\nconst options: SchemaOptions = {\n  timestamps: false,\n  versionKey: false,\n};\n", "enum PostCategory {\n  WEB = 'web',\n  PWN = 'pwn',\n  REV = 'rev',\n}\n\n@Schema(options)\nexport class Post {\n  @Prop({\n    required: true,\n    type: Types.ObjectId,\n    ref: 'Users',\n  })\n  user: Types.ObjectId;\n\n  @Prop({\n    required: true,\n    enum: PostCategory,\n  })\n  category: string;\n\n  @Prop({\n    required: true,\n  })\n  title: string;\n\n  @Prop({\n    required: true,\n  })\n  content: string;\n\n  // todo: file upload\n}\n\nexport const PostSchema = SchemaFactory.createForClass(Post);\n"]}
{"filename": "src/common/schemas/user.schema.ts", "chunked_list": ["import { Prop, Schema, SchemaFactory, SchemaOptions } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Types } from 'mongoose';\n\nexport type UserDocument = User & Document;\n\nconst options: SchemaOptions = {\n  timestamps: false,\n  versionKey: false,\n};\n\n@Schema(options)", "export class User {\n  @Prop({\n    required: true,\n    unique: true,\n  })\n  username: string;\n\n  @Prop({\n    required: true,\n  })\n  password: string;\n\n  @Prop({\n    required: true,\n    enum: ['USER', 'ADMIN'],\n  })\n  role: string;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n"]}
{"filename": "src/common/schemas/index.ts", "chunked_list": ["export * from './user.schema';\nexport * from './post.schema';\nexport * from './assignment.schema';\n"]}
{"filename": "src/common/schemas/assignment.schema.ts", "chunked_list": ["import { Prop, Schema, SchemaFactory, SchemaOptions } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { Types } from 'mongoose';\n\nexport type AssignmentDocument = Assignment & Document;\n\nconst options: SchemaOptions = {\n  timestamps: false,\n  versionKey: false,\n};\n\n@Schema(options)", "export class Assignment {\n  @Prop({\n    required: true,\n    type: Types.ObjectId,\n    ref: 'Users',\n  })\n  user: Types.ObjectId;\n\n  @Prop({\n    required: true,\n  })\n  title: string;\n\n  @Prop({\n    required: true,\n  })\n  content: string;\n\n  @Prop({\n    required: true,\n  })\n  completed: boolean;\n}\n\nexport const AssignmentSchema = SchemaFactory.createForClass(Assignment);\n"]}
{"filename": "src/common/middlewares/logger.middleware.ts", "chunked_list": ["import { Injectable, NestMiddleware, Logger } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  private logger = new Logger(LoggerMiddleware.name);\n\n  use(req: Request, res: Response, next: NextFunction) {\n    const startTimestamp = Date.now();\n    const requestMethod = req.method;\n    const originURL = req.url || req.originalUrl;\n    const httpVersion = `HTTP/${req.httpVersion}`;\n    const userAgent = req.headers['user-agent'];\n    const ipAddress =\n      req.headers['x-forwarded-for'] || req.socket.remoteAddress;\n", "    if (!ipAddress) return next();\n\n    res.on('finish', () => {\n      const statusCode = res.statusCode;\n      const endTimestamp = Date.now() - startTimestamp;\n\n      this.logger.log(\n        `${ipAddress} (${userAgent}) - \"${requestMethod} ${originURL} ${httpVersion}\" ${statusCode} +${endTimestamp}ms`,\n      );\n\n      if (Object.keys(req.body).length > 0)\n        this.logger.log(`Request Body: ${JSON.stringify(req.body)}`);\n    });\n    next();\n  }\n}\n", "      if (Object.keys(req.body).length > 0)\n        this.logger.log(`Request Body: ${JSON.stringify(req.body)}`);\n    });\n    next();\n  }\n}\n"]}
{"filename": "src/common/middlewares/jwt-expiration.middleware.ts", "chunked_list": ["import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class JwtExpireMiddleware implements NestMiddleware {\n  constructor(private readonly jwtService: JwtService) {}\n\n  async use(req: Request, res: Response, next: NextFunction) {\n    const token = req.headers.authorization?.split(' ')[1];\n", "    if (token) {\n      try {\n        const decoded = await this.jwtService.verifyAsync(token);\n        req.user = decoded;\n\n        next();\n      } catch (err) {\n        res\n          .status(401)\n          .json({ message: 'JWT \ud1a0\ud070\uc774 \uc62c\ubc14\ub974\uc9c0 \uc54a\uac70\ub098 \ub9cc\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.' });\n      }\n    } else {\n      res\n        .status(401)\n        .json({ message: 'JWT \ud1a0\ud070\uc744 Baerer\uc5d0 \ub123\uc5b4\uc11c \uc804\ub2ec\ud574\uc8fc\uc138\uc694.' });\n    }\n  }\n}\n"]}
{"filename": "src/common/middlewares/index.ts", "chunked_list": ["export * from './logger.middleware';\nexport * from './jwt-expiration.middleware';\n"]}
{"filename": "src/common/modules/swagger.module.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { AppService } from 'src/app.service';\n\nexport const setupSwagger = async (app: INestApplication) => {\n  const cluster = await new AppService().getBackendInfo();\n  const config = new DocumentBuilder()\n    .setTitle(cluster.name)\n    .setDescription(cluster.description)\n    .setVersion(cluster.version)", "    .setDescription(cluster.description)\n    .setVersion(cluster.version)\n    .addBearerAuth(\n      { type: 'http', scheme: 'bearer', bearerFormat: 'JWT', in: 'header' },\n      'access-token',\n    )\n    .build();\n\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api-docs', app, document);", "  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api-docs', app, document);\n};\n"]}
{"filename": "src/common/modules/index.ts", "chunked_list": ["export * from './swagger.module';\n"]}
{"filename": "src/common/guard/test.guard.ts", "chunked_list": ["import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TestGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const req = context.switchToHttp().getRequest();\n\n    // console.log(req);\n\n    return true;\n  }\n}\n"]}
{"filename": "src/common/guard/index.ts", "chunked_list": [""]}
{"filename": "src/common/dto/assignment.dto.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsString } from 'class-validator';\n\nexport class AssignmentDto {\n  @ApiProperty()\n  @IsString()\n  username: string;\n\n  @ApiProperty()\n  @IsString()\n  readonly title: string;\n\n  @ApiProperty()\n  @IsString()\n  readonly content: string;\n}\n", "export class AssignmentStatus {\n  @ApiProperty()\n  @IsString()\n  readonly assignId: string;\n\n  @ApiProperty()\n  @IsBoolean()\n  readonly status: boolean;\n}\n"]}
{"filename": "src/common/dto/cluster.dto.ts", "chunked_list": ["import { IsString, IsEnum } from 'nestjs-swagger-dto';\n\nexport const deployment = ['prod', 'dev'] as const;\nexport type Deployment = (typeof deployment)[number];\n\nexport class ClusterDto {\n  @IsString({\n    description: '\ud504\ub85c\uc81d\ud2b8 \uc774\ub984',\n    example: 'Backend',\n  })\n  name: string;\n\n  @IsString({\n    description: '\ud504\ub85c\uc81d\ud2b8 \ubc84\uc804',\n    example: '1.0.0',\n  })\n  version: string;\n\n  @IsString({\n    description: '\ud504\ub85c\uc81d\ud2b8 \uc124\uba85',\n    example: '~~~ \ud504\ub85c\uc81d\ud2b8\uc758 \ubc31\uc5d4\ub4dc\uc785\ub2c8\ub2e4.',\n  })\n  description: string;\n\n  @IsEnum({\n    enum: { deployment } as any,\n    description: '\ubc30\ud3ec \ubaa8\ub4dc',\n    example: deployment[0],\n  })\n  mode: Deployment;\n\n  @IsString({\n    description: '\ud074\ub7ec\uc2a4\ud130 \uc774\ub984',\n    example: '',\n  })\n  hostname: string;\n\n  @IsString({\n    description: '\uc791\uc131\uc790',\n    example: '\uc870\ud604\uc7ac (whguswo0818@gmail.com)',\n  })\n  author: string;\n}\n"]}
{"filename": "src/common/dto/user.dto.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport { IsBoolean, IsString } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty()\n  @IsString()\n  readonly username: string;\n\n  @ApiProperty()\n  @IsString()\n  password: string;\n}\n", "export class LoginDto {\n  @ApiProperty()\n  @IsString()\n  readonly username: string;\n\n  @ApiProperty()\n  @IsString()\n  readonly password: string;\n}\n"]}
{"filename": "src/common/dto/index.ts", "chunked_list": ["export * from './cluster.dto';\nexport * from './user.dto';\nexport * from './assignment.dto';\nexport * from './response.dto';\nexport * from './post.dto';\n"]}
{"filename": "src/common/dto/post.dto.ts", "chunked_list": ["import { IsIn, IsString } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsString()\n  @IsIn(['web', 'pwn', 'rev'])\n  readonly category: string;\n\n  @ApiProperty()\n  @IsString()\n  readonly title: string;\n\n  @ApiProperty()\n  @IsString()\n  readonly content: string;\n}\n"]}
{"filename": "src/common/dto/response.dto.ts", "chunked_list": ["import { IsString } from 'class-validator';\nimport { IsNumber } from 'nestjs-swagger-dto';\n\nexport class ResponseDto {\n  @IsNumber({ description: '\uc751\ub2f5 \ucf54\ub4dc', example: 0 })\n  status: number;\n\n  @IsString()\n  message: string;\n}\n"]}
{"filename": "src/api/auth/auth.module.ts", "chunked_list": ["import { forwardRef, Global, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/common/schemas';\nimport { UserModule } from '../user/user.module';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([", "  imports: [\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n    ]),\n    UserModule,\n  ],\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n", "  exports: [AuthService],\n})\nexport class AuthModule {}\n"]}
{"filename": "src/api/auth/auth.controller.ts", "chunked_list": ["import {\n  Body,\n  Controller,\n  Get,\n  Post,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { User, UserDocument } from 'src/common/schemas';\nimport { LoginDto } from 'src/common/dto';\nimport { AuthService } from './auth.service';", "import { LoginDto } from 'src/common/dto';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('/login')\n  async login(@Body() data: LoginDto): Promise<AccessTokenResponse> {\n    const user = await this.authService.login(data);\n    return await this.authService.getAccessToken(user);\n  }\n}\n"]}
{"filename": "src/api/auth/auth.service.ts", "chunked_list": ["import { forwardRef, HttpException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { LoginDto } from 'src/common/dto';\nimport {\n  User,\n  UserDocument,\n} from 'src/common/schemas';\n\nimport * as bcrypt from 'bcrypt';", "\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name)\n    private userModel: Model<UserDocument>,\n\n    private readonly jwtService: JwtService,\n  ) {}\n\n  private async verifyPassword(\n    password: string,\n    hashedPassword: string\n  ): Promise<boolean> {\n    return bcrypt.compare(password + process.env.HASH_SALT, hashedPassword);\n  }\n\n  async login(data: LoginDto): Promise<UserDocument> {\n    const user = await this.userModel.findOne({ username: data.username }).lean();", "    if (!user) throw new HttpException('\uacc4\uc815 \ub610\ub294 \ube44\ubc00\ubc88\ud638\uac00 \uc798\ubabb\ub418\uc5c8\uc2b5\ub2c8\ub2e4.', 404);\n\n    return user;\n  }\n\n  async getAccessToken(user: UserDocument): Promise<AccessTokenResponse> {\n    delete user['password'];\n\n    const payload = { ...user };\n\n    const accessToken = this.jwtService.sign(payload);\n\n    return { accessToken };\n  }\n\n}\n"]}
{"filename": "src/api/user/user.module.ts", "chunked_list": ["import { forwardRef, Global, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/common/schemas';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\n\n@Global()\n@Module({\n  imports: [\n    MongooseModule.forFeature([", "  imports: [\n    MongooseModule.forFeature([\n      { name: User.name, schema: UserSchema },\n    ]),\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n", "})\nexport class UserModule {}\n"]}
{"filename": "src/api/user/user.controller.ts", "chunked_list": ["import {\n  Body,\n  Controller,\n  Get,\n  Post,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { Request } from 'express';\nimport { User, UserDocument } from 'src/common/schemas';\nimport { CreateUserDto, ResponseDto } from 'src/common/dto';", "import { User, UserDocument } from 'src/common/schemas';\nimport { CreateUserDto, ResponseDto } from 'src/common/dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Get()\n  async getAllUser(): Promise<UserDocument[]> {\n    return await this.userService.getAllUser();\n  }\n\n  @Post()\n  async createUser(@Body() data: CreateUserDto): Promise<ResponseDto> {\n    return await this.userService.createUser(data);\n  }\n}\n"]}
{"filename": "src/api/user/user.service.ts", "chunked_list": ["import { forwardRef, HttpException, Inject, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { CreateUserDto, ResponseDto } from 'src/common/dto';\nimport {\n  User,\n  UserDocument,\n} from 'src/common/schemas';\n\nimport * as bcrypt from 'bcrypt';", "\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(User.name)\n    private userModel: Model<UserDocument>,\n  ) {}\n\n  async getAllUser(): Promise<UserDocument[]> {\n    const users = await this.userModel.find().lean();\n\n    users.map(user => {\n      delete user['password'];\n    });\n\n    return users;\n  }\n\n  async createUser(data: CreateUserDto): Promise<ResponseDto> {\n    const existingUser = await this.userModel.findOne({ username: data.username });", "    if (existingUser) throw new HttpException('\ud574\ub2f9 \uc0ac\uc6a9\uc790\uac00 \uc774\ubbf8 \uc874\uc7ac\ud569\ub2c8\ub2e4.', 404);\n\n    const hashedPassword = await bcrypt.hash(data.password, 10);\n\n    const user = new this.userModel({\n      username: data.username,\n      password: hashedPassword,\n      role: 'USER',\n      assignments: [],\n    })\n\n    await user.save();\n\n    return { status: 200, message: '\uc0ac\uc6a9\uc790\uac00 \ub4f1\ub85d\ub418\uc5c8\uc2b5\ub2c8\ub2e4.' };\n  }\n\n}\n"]}
{"filename": "src/api/post/post.controller.ts", "chunked_list": ["import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Req,\n} from '@nestjs/common';", "  Req,\n} from '@nestjs/common';\nimport { Request } from 'express';\nimport { PostDocument } from 'src/common/schemas';\nimport { CreatePostDto } from 'src/common/dto';\nimport { PostService } from './post.service';\n\n@Controller('post')\nexport class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Get('/id/:id')\n  getPost(@Param('id') id: string): Promise<PostDocument> {\n    return this.postService.getPostById(id);\n  }\n\n  @Get('/my')\n  getMyPost(@Req() request: Request): Promise<PostDocument[]> {\n    return this.postService.getMyPost(request.user);\n  }\n\n  @Post()\n  createPost(\n    @Req() request: Request,\n    @Body() data: CreatePostDto,\n  ): Promise<PostDocument> {\n    return this.postService.createPost(data, request.user);\n  }\n\n  @Delete('/:id')\n  removePost(\n    @Req() request: Request,\n    @Param('id') id: string,\n  ): Promise<boolean> {\n    return this.postService.removePost(id, request.user);\n  }\n\n  @Patch('/:id')\n  modifyPost(\n    @Req() request: Request,\n    @Param('id') id: string,\n    @Body() data: CreatePostDto,\n  ): Promise<PostDocument> {\n    return this.postService.modifyPost(data, id, request.user);\n  }\n}\n", "export class PostController {\n  constructor(private readonly postService: PostService) {}\n\n  @Get('/id/:id')\n  getPost(@Param('id') id: string): Promise<PostDocument> {\n    return this.postService.getPostById(id);\n  }\n\n  @Get('/my')\n  getMyPost(@Req() request: Request): Promise<PostDocument[]> {\n    return this.postService.getMyPost(request.user);\n  }\n\n  @Post()\n  createPost(\n    @Req() request: Request,\n    @Body() data: CreatePostDto,\n  ): Promise<PostDocument> {\n    return this.postService.createPost(data, request.user);\n  }\n\n  @Delete('/:id')\n  removePost(\n    @Req() request: Request,\n    @Param('id') id: string,\n  ): Promise<boolean> {\n    return this.postService.removePost(id, request.user);\n  }\n\n  @Patch('/:id')\n  modifyPost(\n    @Req() request: Request,\n    @Param('id') id: string,\n    @Body() data: CreatePostDto,\n  ): Promise<PostDocument> {\n    return this.postService.modifyPost(data, id, request.user);\n  }\n}\n"]}
{"filename": "src/api/post/post.service.ts", "chunked_list": ["import { forwardRef, HttpException, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { CreatePostDto } from 'src/common/dto';\nimport {\n  Post,\n  PostDocument,\n  User,\n  UserDocument,\n} from 'src/common/schemas';", "  UserDocument,\n} from 'src/common/schemas';\n\n@Injectable()\nexport class PostService {\n  constructor(\n    @InjectModel(Post.name)\n    private postModel: Model<PostDocument>,\n  ) {}\n\n  async getPostById(_id: string): Promise<PostDocument> {\n    const post = await this.postModel.findById(new Types.ObjectId(_id));", "    if (!post) throw new HttpException('No Post', 404);\n\n    return post;\n  }\n\n  async getMyPost(user: UserDocument): Promise<PostDocument[]> {\n    const posts = await this.postModel.find({ user: user._id });\n\n    return posts;\n  }\n\n  async getPostByUserId(_id: string): Promise<PostDocument[]> {\n    const posts = await this.postModel.find({ user: new Types.ObjectId(_id) });\n\n    return posts;\n  }\n\n  async createPost(data: CreatePostDto, user: UserDocument): Promise<PostDocument> {\n    const post = new this.postModel({\n      ...data,\n      user: new Types.ObjectId(user._id),\n    });\n\n    await post.save();\n    return post;\n  }\n\n  async removePost(_id: string, user: UserDocument): Promise<boolean> {\n    const post = await this.postModel.findById(new Types.ObjectId(_id));", "    if (!post) throw new HttpException('\ud574\ub2f9 Post\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.', 404);\n    if (post.user.equals(user._id) && user.role !== 'ADMIN')\n      throw new HttpException('Permission denied', 403);\n\n    const result = await this.postModel.deleteOne({ _id });\n\n    return result.deletedCount > 0;\n  }\n\n  async modifyPost(\n    data: CreatePostDto,\n    _id: string,\n    user: UserDocument,\n  ): Promise<PostDocument> {\n    const post = await this.postModel.findById(new Types.ObjectId(_id));", "    if (!post) throw new HttpException('\ud574\ub2f9 Post\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.', 404);\n    if (post.user.equals(user._id) && user.role !== 'ADMIN')\n      throw new HttpException('Permission denied', 403);\n\n    post.title = data.title;\n    post.content = data.content;\n    post.category = data.category;\n    post.save();\n\n    return post;\n  }\n\n}\n"]}
{"filename": "src/api/post/post.module.ts", "chunked_list": ["import { forwardRef, Global, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Post, PostSchema } from 'src/common/schemas';\nimport { UserModule } from '../user/user.module';\nimport { PostController } from './post.controller';\nimport { PostService } from './post.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([", "  imports: [\n    MongooseModule.forFeature([\n      { name: Post.name, schema: PostSchema },\n    ]),\n    UserModule,\n  ],\n  controllers: [PostController],\n  providers: [PostService],\n  exports: [PostService],\n})\nexport class PostModule {}\n", "  exports: [PostService],\n})\nexport class PostModule {}\n"]}
{"filename": "src/typings/express.d.ts", "chunked_list": ["import { UserDocument } from \"src/common/schemas\";\n\ndeclare module 'express' {\n  interface Request {\n    user?: UserDocument;\n  }\n}\n"]}
