{"filename": "src/types.ts", "chunked_list": ["export enum Endpoints {\n\tToken = '/connect/token',\n\tNonce = '/nonce',\n\n\tPublikusIntezmenyek = '/intezmenyek/kreta/publikus',\n\n\tFeljegyzesek = '/Sajat/Feljegyzesek',\n\tFaliujsagElemek = '/Sajat/FaliujsagElemek',\n\tTanulo = '/Sajat/TanuloAdatlap',\n\tErtekelesek = '/Sajat/Ertekelesek',\n\tTantargyiAtlagok = '/Sajat/Ertekelesek/Atlagok/TantargyiAtlagok',\n\tMulasztasok = '/Sajat/Mulasztasok',\n\tOsztalyCsoportok = '/Sajat/OsztalyCsoportok',\n\tOsztalyCsoportAtlag = '/Sajat/Ertekelesek/Atlagok/OsztalyAtlagok',\n\tOrarendElemek = '/Sajat/OrarendElemek',\n\tOrarendElem = '/Sajat/OrarendElem',\n\tSzamonkeresek = '/Sajat/BejelentettSzamonkeresek',\n\tHaziFeladatok = '/Sajat/HaziFeladatok',\n\tIntezmenyek = '/Sajat/Intezmenyek',\n\tOsztalyfonokok = '/Felhasznalok/Alkalmazottak/Tanarok/Osztalyfonokok',\n\tOrarendHetek = '/Sajat/Intezmenyek/Hetirendek/Orarendi',\n\tTanevNaptar = '/Sajat/Intezmenyek/TanevRendjeElemek',\n\tEloadasok = '/Lep/Eloadasok',\n\tEszkozAllapot = '/TargyiEszkoz/IsEszkozKiosztva'\n}\n", "export enum AdministrationEndpoints {\n\tCimzettTipusok = '/adatszotarak/cimzetttipusok',\n\tKerelemTipusok = '/adatszotarak/kerelemtipusok',\n\tTmgiIgazolasTipusok = '/adatszotarak/tmgiigazolastipusok',\n\tEsemenyek = '/belepteto/kartyaesemenyek/sajat',\n\tJelenlegiIntezmenyModulok = '/intezmenyek/sajat/modulok',\n\tCimezhetoTipusok = '/kommunikacio/cimezhetotipusok',\n\tCimezhetoOsztalyok = '/kommunikacio/osztalyok/cimezheto',\n\tOlvasatlanokSzama = '/kommunikacio/postaladaelemek/olvasatlanokszama',\n\tUzenetek = '/kommunikacio/postaladaelemek/sajat',\n\tUzenet = '/kommunikacio/postaladaelemek',\n\tCimezhetoSzmkKepviselok = '/kommunikacio/szmkkepviselok/cimezheto',\n\tUzenetLimitacio = '/kommunikacio/uzenetek/kuldhetok/korlat',\n\tAdminisztratorok = '/kreta/alkalmazottak/adminisztrator',\n\tIgazgatok = '/kreta/alkalmazottak/igazgatosag',\n\tOsztalyfonokok = '/kreta/alkalmazottak/oszalyfonok',\n\tOktatok = '/kreta/alkalmazottak/tanar',\n\tCimezhetoTanuloSzulok = '/kreta/gondviselok/osztaly',\n\tJelenlegiIntezmeny = '/ugy/aktualisIntezmenyAdatok'\n}\n", "export enum API {\n\tINSTITUTE = 'https://{{institute_code}}.e-kreta.hu',\n\tIDP = 'https://idp.e-kreta.hu',\n\tADMINISTRATION = 'https://eugyintezes.e-kreta.hu',\n\tGLOBAL = 'https://kretaglobalapi.e-kreta.hu'\n}\n\nexport interface RequestDateRangeOptions {\n\tdateFrom?: string;\n\tdateTo?: string;\n}\n", "export interface RequestDateRangeRequiredOptions {\n\tdateFrom: string;\n\tdateTo: string;\n}\n\nexport interface RequestClassAveragesOptions {\n\toktatasiNevelesiFeladatUid?: string;\n\tsubjectUid?: string;\n}\n\nexport interface RequestHomeWorkOptions extends RequestDateRangeOptions {\n\tdateFrom: string;\n}\n", "export interface RequestHomeWorkOptions extends RequestDateRangeOptions {\n\tdateFrom: string;\n}\n\nexport interface RequestAnnouncedTestsOptions extends RequestDateRangeOptions {\n\tuids?: string[] | number[];\n}\n\nexport interface ConfigurationDescriptor {\n\tGlobalMobileApiUrlDEV: string;\n\tGlobalMobileApiUrlPROD: string;\n\tGlobalMobileApiUrlTEST: string;\n\tGlobalMobileApiUrlUAT: string;\n}\n", "export interface ConfigurationDescriptor {\n\tGlobalMobileApiUrlDEV: string;\n\tGlobalMobileApiUrlPROD: string;\n\tGlobalMobileApiUrlTEST: string;\n\tGlobalMobileApiUrlUAT: string;\n}\n\nexport interface NonceHashOptions {\n\tinstitute_code: string;\n\tnonce: string;\n\tusername: string;\n}\n", "export interface AuthenticationFields {\n\tinstitute_code: string;\n\tpassword: string;\n\tusername: string;\n}\n\nexport interface RequestRefreshTokenOptions {\n\trefreshUserData: boolean;\n\trefreshToken: string;\n}\n", "export interface AccessToken {\n\taccess_token: string | null;\n\trefresh_token: string | null;\n\ttoken_type: string | null;\n}\n\nexport interface KretaOptions extends AuthenticationFields {\n}\n\nexport interface AuthenticationResponse {\n\taccess_token: string;\n\texpires_in: number;\n\tid_token: string | null;\n\trefresh_token: string;\n\tscope: string;\n\ttoken_type: string;\n}\n", "export interface AuthenticationResponse {\n\taccess_token: string;\n\texpires_in: number;\n\tid_token: string | null;\n\trefresh_token: string;\n\tscope: string;\n\ttoken_type: string;\n}\n\nexport interface PreBuiltAuthenticationToken {\n\ttoken: string;\n\taccess_token: string;\n\trefresh_token: string;\n}\n", "export interface PreBuiltAuthenticationToken {\n\ttoken: string;\n\taccess_token: string;\n\trefresh_token: string;\n}\n\ninterface ResponseErrorItem {\n\tPropertyName: string;\n\tMessage: string;\n\tExceptionType: string;\n}\n", "export interface ResponseError {\n\tExceptionId: string;\n\tExceptionType: string;\n\tMessage: string;\n\tErrorList: ResponseErrorItem[] | null;\n\terror?: string;\n}\n\nexport type RequestResponseError = ResponseError | string | undefined;\n\ninterface SystemModule {\n\tIsAktiv: boolean;\n\tTipus: string;\n\tUrl: string | null;\n}\n", "export type RequestResponseError = ResponseError | string | undefined;\n\ninterface SystemModule {\n\tIsAktiv: boolean;\n\tTipus: string;\n\tUrl: string | null;\n}\n\ninterface CustomizationSettings {\n\tErtekelesekMegjelenitesenekKesleltetesenekMerteke: number;\n\tIsDiakRogzithetHaziFeladatot: boolean;\n\tIsOsztalyAtlagMegjeleniteseEllenorzoben: boolean;\n\tIsTanorakTemajaMegtekinthetoEllenorzoben: boolean;\n\tKovetkezoTelepitesDatuma: string;\n}\n", "interface CustomizationSettings {\n\tErtekelesekMegjelenitesenekKesleltetesenekMerteke: number;\n\tIsDiakRogzithetHaziFeladatot: boolean;\n\tIsOsztalyAtlagMegjeleniteseEllenorzoben: boolean;\n\tIsTanorakTemajaMegtekinthetoEllenorzoben: boolean;\n\tKovetkezoTelepitesDatuma: string;\n}\n\nexport interface Institution {\n\tRendszermodulok: SystemModule[];\n\tRovidNev: string | null;\n\tTestreszabasBeallitasok: CustomizationSettings;\n\tUid: string;\n}\n", "export interface Institution {\n\tRendszermodulok: SystemModule[];\n\tRovidNev: string | null;\n\tTestreszabasBeallitasok: CustomizationSettings;\n\tUid: string;\n}\n\ninterface ValueDescriptor {\n\tLeiras: string;\n\tNev: string;\n\tUid: string;\n}\n", "interface UidStructure {\n\tUid: string;\n}\n\ninterface BankAccount {\n\tBankszamlaSzam: string | null;\n\tBankszamlaTulajdonosNeve: string | null;\n\tBankszamlaTulajdonosTipusId: number | null;\n\tIsReadOnly: boolean | null;\n}\n", "interface Guardian {\n\tEmailCim: string | null;\n\tIdpUniqueId: string;\n\tIsTorvenyesKepviselo: boolean | null;\n\tNev: string;\n\tTelefonszam: string | null;\n\tUid: string;\n}\n\nexport interface Student {\n\tAnyjaNeve: string;\n\tBankszamla: BankAccount;\n\tCimek: string[];\n\tEmailCim: string | null;\n\tGondviselok: Guardian[];\n\tIdpUniqueId: string;\n\tIntezmeny: Institution;\n\tIntezmenyAzonosito: string;\n\tIntezmenyNev: string;\n\tIsEszkozKiosztva: boolean;\n\tNev: string;\n\tSzuletesiDatum: string;\n\tSzuletesiEv: number;\n\tSzuletesiHely: string;\n\tSzuletesiHonap: number;\n\tSzuletesiNap: number;\n\tSzuletesiNev: string;\n\tTanevUid: number;\n\tTelefonszam: string | null;\n\tUid: string;\n}\n", "export interface Student {\n\tAnyjaNeve: string;\n\tBankszamla: BankAccount;\n\tCimek: string[];\n\tEmailCim: string | null;\n\tGondviselok: Guardian[];\n\tIdpUniqueId: string;\n\tIntezmeny: Institution;\n\tIntezmenyAzonosito: string;\n\tIntezmenyNev: string;\n\tIsEszkozKiosztva: boolean;\n\tNev: string;\n\tSzuletesiDatum: string;\n\tSzuletesiEv: number;\n\tSzuletesiHely: string;\n\tSzuletesiHonap: number;\n\tSzuletesiNap: number;\n\tSzuletesiNev: string;\n\tTanevUid: number;\n\tTelefonszam: string | null;\n\tUid: string;\n}\n", "interface SubjectDescriptor {\n\tKategoria: ValueDescriptor;\n\tNev: string;\n\tUid: string;\n\tSortIndex: number;\n}\n\nexport interface Institute {\n\tadvertisingUrl: string;\n\tcity: string;\n\tfeatureToggleSet: {};\n\tinformationImageUrl: string;\n\tinformationUrl: string;\n\tinstituteCode: string;\n\tinstituteId: number;\n\tname: string;\n\turl: string;\n}\n", "export interface InstituteGlobal {\n\taktivTanevGuid: string;\n\taktivTanevId: number;\n\taktivTanevNev: string;\n\tazonosito: string;\n\tfenntartoAzonosito: string;\n\tfenntartoNev: string;\n\tid: string;\n\tkornyezetId: number;\n\tkornyezetNev: string;\n\tkornyezetTeljesNev: string;\n\tkretaLink: string;\n\tnev: string;\n\tomKod: string;\n\trovidNev: string;\n\ttelepules: string;\n}\n", "export interface Evaluation {\n\tErtekFajta: ValueDescriptor;\n\tErtekeloTanarNeve: string;\n\tJelleg: string | null;\n\tKeszitesDatuma: string;\n\tLattamozasDatuma: string | null;\n\tMod: ValueDescriptor | null;\n\tOsztalyCsoport: UidStructure;\n\tRogzitesDatuma: string;\n\tSortIndex: number;\n\tSulySzazalekErteke: number | null;\n\tSzamErtek: number | null;\n\tSzovegesErtek: string;\n\tSzovegesErtekelesRovidNev: string | null;\n\tTantargy: SubjectDescriptor | null;\n\tTema: string | null;\n\tTipus: ValueDescriptor;\n\tUid: string;\n}\n", "export interface Note {\n\tCim: string;\n\tDatum: string;\n\tKeszitesDatuma: string;\n\tKeszitoTanarNeve: string;\n\tLattamozasDatuma: string | null;\n\tOsztalyCsoport: UidStructure | null;\n\tTartalom: string;\n\tTipus: ValueDescriptor;\n\tUid: string;\n}\n", "export interface AnnouncedTest {\n\tBejelentesDatuma: string;\n\tDatum: string;\n\tModja: ValueDescriptor;\n\tOrarendiOraOraszama: number;\n\tOsztalyCsoport: UidStructure;\n\tRogzitoTanarNeve: string;\n\tTantargy: SubjectDescriptor | null;\n\tTantargyNeve: string | null;\n\tTemaja: string | null;\n\tUid: string;\n}\n", "interface Attachment {\n\tNev: string;\n\tTipus: string;\n\tUid: string;\n}\n\nexport interface Homework {\n\tCsatolmanyok: Attachment[] | null;\n\tFeladasDatuma: string;\n\tHataridoDatuma: string;\n\tIsBeadhato: boolean;\n\tIsCsatolasEngedelyezes: boolean;\n\tIsMegoldva: boolean;\n\tIsTanarRogzitette: boolean;\n\tIsTanuloHaziFeladatEnabled: boolean;\n\tOsztalyCsoport: UidStructure | null;\n\tRogzitesIdopontja: string;\n\tRogzitoTanarNeve: string;\n\tSzoveg: string | null;\n\tTantargy: SubjectDescriptor | null;\n\tTantargyNeve: string | null;\n\tUid: string;\n}\n", "interface OmissionLesson {\n\tKezdoDatum: string;\n\tOraszam: number;\n\tVegDatum: string;\n}\n\ntype JustificationState = 'None' | 'Igazolatlan' | 'Igazolt' | 'Igazolando'\n\nexport interface Omission {\n\tDatum: string;\n\tIgazolasAllapota: JustificationState;\n\tIgazolasTipusa: ValueDescriptor | null;\n\tKesesPercben: number | null;\n\tKeszitesDatuma: string;\n\tMod: ValueDescriptor;\n\tOra: OmissionLesson;\n\tOsztalyCsoport: UidStructure;\n\tRogzitoTanarNeve: string;\n\tTantargy: SubjectDescriptor;\n\tTipus: ValueDescriptor;\n\tUid: string;\n}\n", "export interface Omission {\n\tDatum: string;\n\tIgazolasAllapota: JustificationState;\n\tIgazolasTipusa: ValueDescriptor | null;\n\tKesesPercben: number | null;\n\tKeszitesDatuma: string;\n\tMod: ValueDescriptor;\n\tOra: OmissionLesson;\n\tOsztalyCsoport: UidStructure;\n\tRogzitoTanarNeve: string;\n\tTantargy: SubjectDescriptor;\n\tTipus: ValueDescriptor;\n\tUid: string;\n}\n", "interface GroupMembership {\n\tBesorolasDatuma: string | null;\n\tKisorolasDatuma: string | null;\n}\n\nexport interface Group {\n\tIsAktiv: boolean;\n\tNev: string;\n\tOktatasNevelesiFeladat: ValueDescriptor;\n\tOktatasNevelesiFeladatSortIndex: number;\n\tOktatasNevelesiKategoria: ValueDescriptor;\n\tOsztalyFonok: UidStructure | null;\n\tOsztalyFonokHelyettes: UidStructure | null;\n\tTagsagok: GroupMembership[];\n\tTipus: string;\n\tUid: string;\n}\n", "interface AverageWithTime {\n\tAtlag: number;\n\tDatum: string;\n}\n\nexport interface SubjectAverage {\n\tAtlag: number | null;\n\tAtlagAlakulasaIdoFuggvenyeben: AverageWithTime[];\n\tSortIndex: number;\n\tSulyozottOsztalyzatOsszege: number | null;\n\tSulyozottOsztalyzatSzama: number | null;\n\tTantargy: SubjectDescriptor;\n\tUid: string;\n}\n", "interface LessonAttachment {\n\tNev: string;\n\tUid: string;\n}\n\ninterface UidNameStructure {\n\tNev: string;\n\tUid: string;\n}\n\nexport interface Lesson {\n\tAllapot: ValueDescriptor;\n\tBejelentettSzamonkeresUid: string | null;\n\tCsatolmanyok: LessonAttachment[] | null;\n\tDatum: string;\n\tDigitalisEszkozTipus: string | null;\n\tDigitalisPlatformTipus: string | null;\n\tDigitalisTamogatoEszkozTipusList: string[] | null;\n\tFeladatGroupUid: string | null;\n\tHaziFeladatUid: string | null;\n\tHelyettesTanarNeve: string | null;\n\tIsDigitalisOra: boolean;\n\tIsHaziFeladatMegoldva: boolean;\n\tIsTanuloHaziFeladatEnabled: boolean;\n\tKezdetIdopont: string;\n\tLetrehozas: string;\n\tNev: string | null;\n\tNyelviFeladatGroupUid: string | null;\n\tOraEvesSorszama: number | null;\n\tOraszam: number;\n\tOsztalyCsoport: UidNameStructure;\n\tTanarNeve: string | null;\n\tTantargy: SubjectDescriptor;\n\tTanuloJelenlet: ValueDescriptor | null;\n\tTema: string | null;\n\tTeremNeve: string | null;\n\tTipus: ValueDescriptor;\n\tUid: string;\n\tUtolsoModositas: string | null;\n\tVegIdopont: string;\n}\n", "export interface Lesson {\n\tAllapot: ValueDescriptor;\n\tBejelentettSzamonkeresUid: string | null;\n\tCsatolmanyok: LessonAttachment[] | null;\n\tDatum: string;\n\tDigitalisEszkozTipus: string | null;\n\tDigitalisPlatformTipus: string | null;\n\tDigitalisTamogatoEszkozTipusList: string[] | null;\n\tFeladatGroupUid: string | null;\n\tHaziFeladatUid: string | null;\n\tHelyettesTanarNeve: string | null;\n\tIsDigitalisOra: boolean;\n\tIsHaziFeladatMegoldva: boolean;\n\tIsTanuloHaziFeladatEnabled: boolean;\n\tKezdetIdopont: string;\n\tLetrehozas: string;\n\tNev: string | null;\n\tNyelviFeladatGroupUid: string | null;\n\tOraEvesSorszama: number | null;\n\tOraszam: number;\n\tOsztalyCsoport: UidNameStructure;\n\tTanarNeve: string | null;\n\tTantargy: SubjectDescriptor;\n\tTanuloJelenlet: ValueDescriptor | null;\n\tTema: string | null;\n\tTeremNeve: string | null;\n\tTipus: ValueDescriptor;\n\tUid: string;\n\tUtolsoModositas: string | null;\n\tVegIdopont: string;\n}\n", "export interface NoticeBoardItem {\n\tCim: string;\n\tErvenyessegKezdete: string;\n\tErvenyessegVege: string;\n\tRogzitoNeve: string;\n\tTartalom: string;\n\tUid: string;\n}\n\nexport interface ClassAverage {\n\tOsztalyCsoportAtlag: number | null;\n\tOsztalyCsoportAtlagtolValoElteres: number | null;\n\tTantargy: SubjectDescriptor;\n\tTanuloAtlag: number | null;\n\tUid: string;\n}\n", "export interface ClassAverage {\n\tOsztalyCsoportAtlag: number | null;\n\tOsztalyCsoportAtlagtolValoElteres: number | null;\n\tTantargy: SubjectDescriptor;\n\tTanuloAtlag: number | null;\n\tUid: string;\n}\n\ninterface Employee {\n\tEmailek: string[] | null;\n\tNev: string;\n\tTelefonok: string[] | null;\n\tUid: string;\n}\n", "interface Employee {\n\tEmailek: string[] | null;\n\tNev: string;\n\tTelefonok: string[] | null;\n\tUid: string;\n}\n\ninterface Teacher {\n\tAlkalmazott: Employee;\n\tUid: string;\n}\n", "interface Class {\n\tNev: string;\n\tOktatasiNevelesiKategoria: ValueDescriptor;\n\tUid: string;\n}\n\nexport interface ClassMaster {\n\tOsztalyai: Class[];\n\tTanar: Teacher;\n\tUid: string;\n}\n", "export interface TimeTableWeek {\n\tHetSorszama: number;\n\tKezdoNapDatuma: string;\n\tTipus: ValueDescriptor | null;\n\tUid: string;\n\tVegNapDatuma: string;\n}\n\nexport interface LepEvent {\n\tDatum: string;\n\tEloadasKezdete: string;\n\tEloadasNev: string;\n\tEloadasVege: string;\n\tGondviseloElfogadas: boolean | null;\n\tHelyszin: string;\n\tMegjelent: boolean;\n\tSzervezetNev: string;\n\tUid: string;\n}\n", "export interface LepEvent {\n\tDatum: string;\n\tEloadasKezdete: string;\n\tEloadasNev: string;\n\tEloadasVege: string;\n\tGondviseloElfogadas: boolean | null;\n\tHelyszin: string;\n\tMegjelent: boolean;\n\tSzervezetNev: string;\n\tUid: string;\n}\n", "export interface SchoolYearCalendarEntry {\n\tDatum: string;\n\tElteroOrarendSzerintiTanitasiNap: ValueDescriptor | null;\n\tNaptipus: ValueDescriptor;\n\tOrarendiNapHetirendje: ValueDescriptor;\n\tOsztalyCsoport: UidStructure | null;\n\tUid: string;\n}\n\nexport interface AddresseType {\n\tazonosito: number | null;\n\tkod: string | null;\n\tleiras: string | null;\n\tnev: string | null;\n\trovidNev: string | null;\n}\n", "export interface AddresseType {\n\tazonosito: number | null;\n\tkod: string | null;\n\tleiras: string | null;\n\tnev: string | null;\n\trovidNev: string | null;\n}\n\nexport interface DefaultType {\n\tazonosito: number;\n\tkod: string;\n\tleiras: string;\n\tnev: string;\n\trovidNev: string;\n}\n", "export interface DefaultType {\n\tazonosito: number;\n\tkod: string;\n\tleiras: string;\n\tnev: string;\n\trovidNev: string;\n}\n\nexport interface CardEvent {\n\tazonosito: number;\n\tidopont: string;\n\tirany: string | null;\n\tmegjegyzes: string | null;\n}\n", "export interface CardEvent {\n\tazonosito: number;\n\tidopont: string;\n\tirany: string | null;\n\tmegjegyzes: string | null;\n}\n\nexport interface KretaClass {\n\tkretaAzonosito: number;\n\tnev: string | null;\n}\n", "interface Addresse {\n\tazonosito: number;\n\tkretaAzonosito: number;\n\tnev: string;\n\ttipus: DefaultType;\n}\n\ninterface TemporaryId {\n\tazonosito: number | null;\n\tfileHandler: string | null;\n\tideiglenesFajlAzonosito: string | null;\n\tutvonal: string | null;\n}\n", "interface AdministrationAttachment {\n\tazonosito: number;\n\tfajl: TemporaryId | null;\n\tfajlNeve: string;\n}\n\ninterface Message {\n\tazonosito: number | null;\n\tcimzettLista: Addresse[] | null;\n\tcsatolmanyok: AdministrationAttachment[] | null;\n\telozoUzenetAzonosito: number | null;\n\tfeladoNev: string | null;\n\tfeladoTitulus: string | null;\n\tkuldesDatum: string | null;\n\tszoveg: string | null;\n\ttargy: string | null;\n}\n", "export interface MailboxItem {\n\tazonosito: number;\n\tisElolvasva: boolean;\n\tisToroltElem: boolean;\n\ttipus: DefaultType;\n\tuzenet: Message;\n}\n\nexport interface GuardianEAdmin {\n\tSZMKOsztaly: string | null;\n\temailCim: string | null;\n\tgondviseloNev: string | null;\n\tisSZMK: boolean | null;\n\tisSZMKHelyettes: boolean | null;\n\tisTorvenyesKepviselo: boolean | null;\n\tkretaAzonosito: number | null;\n\trokonsagiFok: string | null;\n\tsZMKOsztalyHelyettes: string | null;\n\tsZMKOsztalyHelyettesKretaAzonosito: number | null;\n\tsZMKOsztalyKretaAlkalmazott: number | null;\n\tsZMKOsztalyKretaAzonosito: number | null;\n\ttanuloNev: string | null;\n\ttanuloOktatasiAzonosito: string | null;\n\ttanuloOsztaly: string | null;\n\ttanuloOsztalyKretaAzonosito: number | null;\n}\n", "export interface GuardianEAdmin {\n\tSZMKOsztaly: string | null;\n\temailCim: string | null;\n\tgondviseloNev: string | null;\n\tisSZMK: boolean | null;\n\tisSZMKHelyettes: boolean | null;\n\tisTorvenyesKepviselo: boolean | null;\n\tkretaAzonosito: number | null;\n\trokonsagiFok: string | null;\n\tsZMKOsztalyHelyettes: string | null;\n\tsZMKOsztalyHelyettesKretaAzonosito: number | null;\n\tsZMKOsztalyKretaAlkalmazott: number | null;\n\tsZMKOsztalyKretaAzonosito: number | null;\n\ttanuloNev: string | null;\n\ttanuloOktatasiAzonosito: string | null;\n\ttanuloOsztaly: string | null;\n\ttanuloOsztalyKretaAzonosito: number | null;\n}\n", "export interface MessageLimitations {\n\tisCsakEgyCimzettLehet: boolean;\n\tisKuldhetoUzenetekSzamaKorlatozvaVan: boolean;\n\tkuldhetoUzenetekSzamaMegMa: number;\n}\n\nexport interface EmployeeDetails {\n\tisAdmin: boolean | null;\n\tisAlairo: boolean | null;\n\tisIgazgato: boolean | null;\n\tisIgazgatoHelyettes: boolean | null;\n\tisOsztalyfonok: boolean | null;\n\tisOsztalyfonokHelyettes: boolean | null;\n\tisTanar: boolean | null;\n\tisTorolt: boolean | null;\n\tkretaAzonosito: number | null;\n\tnev: string | null;\n\toktatasiAzonosito: string | null;\n\tosztaly: string | null;\n\tosztalyHelyettes: string | null;\n\tosztalyHelyettesKretaAzonosito: number | null;\n\tosztalyKretaAzonosito: number | null;\n\ttitulus: string | null;\n}\n", "export interface CurrentInstitutionDetails {\n\tazonosito: number | null;\n\tkretaIntezmenyAzonosito: string | null;\n\tomAzonosito: string | null;\n\tnev: string | null;\n\ttankeruletNeve: string | null;\n\tintezmenyCim: string | null;\n\tpenztarjelentesAzonositoElotag: string | null;\n\tisAltalanos: false;\n\tisKozepfoku: true;\n\tisSzeusz: false;\n\tertesitesiEmailCim: string | null;\n\tIsUzenetKezelesElerheto: true;\n\tIsRFIDIntezmeny: false;\n\ttagozatLista: string[];\n\tetkezesMegrendelesTipus: DefaultType | null;\n}\n"]}
{"filename": "src/index.ts", "chunked_list": ["import Kreta from './lib/Kreta';\nimport { Authentication as KretaAuthentication } from './lib/Authentication';\n\nexport * from './types';\nexport { Kreta, KretaAuthentication };\n"]}
{"filename": "src/utils/dynamicValue.ts", "chunked_list": ["export default function dynamicValue(str: string, values: { [key: string]: any }): string {\n\treturn str.replace(/{{(.*?)}}/g, (match: string, key) => values[key] || match);\n}\n"]}
{"filename": "src/utils/validateDate.ts", "chunked_list": ["import moment from 'moment';\nimport KretaError from '../lib/errors/KretaError';\n\nexport default function validateDate(date: string): string {\n\tif (!moment(date, 'YYYY-MM-DD', true).isValid())\n\t\tthrow new KretaError('Invalid date provided');\n\telse\n\t\treturn date;\n}\n"]}
{"filename": "src/utils/tryRequest.ts", "chunked_list": ["import { AxiosError } from 'axios';\nimport KretaError from '../lib/errors/KretaError';\nimport { RequestResponseError } from '../types';\n\nexport default async function tryRequest(axios: Promise<void>): Promise<void> {\n\ttry {\n\t\treturn await axios;\n\t} catch (error) {\n\t\tconst e: AxiosError<RequestResponseError> = error as AxiosError<RequestResponseError>;\n\t\tif (e.response?.status) {\n\t\t\tlet errorMsg: string = '';\n\t\t\tconst rd: RequestResponseError = e.response?.data!;", "\t\tif (e.response?.status) {\n\t\t\tlet errorMsg: string = '';\n\t\t\tconst rd: RequestResponseError = e.response?.data!;\n\t\t\tif (typeof rd === 'string')\n\t\t\t\terrorMsg = rd;\n\t\t\telse if (rd.ErrorList && rd.ErrorList.length > 0) {\n\t\t\t\tif (rd.ErrorList[1]?.Message)\n\t\t\t\t\terrorMsg = rd.ErrorList[1].Message;\n\t\t\t\telse if (rd.ErrorList[0]?.Message)\n\t\t\t\t\terrorMsg = rd.ErrorList[0].Message;\n\t\t\t} else if (rd.Message)\n\t\t\t\terrorMsg = rd.Message;", "\t\t\t\telse if (rd.ErrorList[0]?.Message)\n\t\t\t\t\terrorMsg = rd.ErrorList[0].Message;\n\t\t\t} else if (rd.Message)\n\t\t\t\terrorMsg = rd.Message;\n\t\t\telse if (rd.error)\n\t\t\t\terrorMsg = rd.error;\n\t\t\telse\n\t\t\t\terrorMsg = 'Unknown error';\n\t\t\tthrow new KretaError(`Request failed with status code ${e.response?.status}: ${errorMsg}`);\n\t\t} else\n\t\t\tthrow new KretaError(`Request failed with unknown status`);\n\t}\n}\n"]}
{"filename": "src/lib/Kreta.ts", "chunked_list": ["import axios, { AxiosProxyConfig, AxiosResponse } from 'axios';\nimport moment from 'moment';\nimport {\n\tAnnouncedTest,\n\tClassAverage, ClassMaster,\n\tConfigurationDescriptor,\n\tEvaluation,\n\tGroup,\n\tHomework,\n\tInstitute, Institution, KretaOptions, LepEvent,", "\tHomework,\n\tInstitute, Institution, KretaOptions, LepEvent,\n\tLesson,\n\tNote,\n\tNoticeBoardItem,\n\tOmission, PreBuiltAuthenticationToken, RequestAnnouncedTestsOptions, RequestClassAveragesOptions,\n\tRequestDateRangeOptions,\n\tRequestDateRangeRequiredOptions,\n\tRequestHomeWorkOptions,\n\tSchoolYearCalendarEntry,", "\tRequestHomeWorkOptions,\n\tSchoolYearCalendarEntry,\n\tStudent,\n\tSubjectAverage, TimeTableWeek, API, Endpoints\n} from '../types';\nimport { Authentication } from './Authentication';\nimport dynamicValue from '../utils/dynamicValue';\nimport Administration from './Administration';\nimport Global from './Global';\nimport requireCredentials from '../decorators/requireCredentials';", "import Global from './Global';\nimport requireCredentials from '../decorators/requireCredentials';\nimport tryRequest from '../utils/tryRequest';\nimport validateDate from '../utils/validateDate';\nimport requireParam from '../decorators/requireParam';\n\nexport default class Kreta {\n\tprivate readonly username?: string;\n\tprivate readonly password?: string;\n\tprivate readonly institute_code?: string;\n\tprivate authenticate?: Authentication;\n\tpublic Administration?: Administration;\n\tpublic Global: Global;\n\tprivate token?: Promise<string>;\n\n\tconstructor(options?: KretaOptions) {\n\t\tthis.username = options?.username || '';\n\t\tthis.password = options?.password || '';\n\t\tthis.institute_code = options?.institute_code || '';\n\n\t\taxios.defaults.headers.common['User-Agent'] = 'hu.ekreta.student/1.0.5/Android/0/0';\n\n\t\tthis.Global = new Global();\n\t\tthis.authenticate = new Authentication({ username: this.username!, password: this.password!, institute_code: this.institute_code! });", "\t\tif (this.username && this.password && this.institute_code)\n\t\t\tthis.token = this.authenticate.getAccessToken().then((r: PreBuiltAuthenticationToken) => r.token);\n\t\tthis.Administration = new Administration({ username: this.username!, password: this.password!, institute_code: this.institute_code! });\n\t}\n\n\tpublic get _username() {\n\t\treturn this.username;\n\t}\n\n\tpublic get _password() {\n\t\treturn this.password;\n\t}\n\n\tpublic get _institute_code() {\n\t\treturn this.institute_code;\n\t}\n\n\t@requireParam('proxy.host')\n\t@requireParam('proxy.port')\n\tpublic setProxy(proxy: AxiosProxyConfig): this {\n\t\taxios.defaults.proxy = proxy;\n\t\treturn this;\n\t}\n\n\t@requireParam('ua')\n\tpublic setUserAgent(ua: string): this {\n\t\taxios.defaults.headers.common['User-Agent'] = ua;\n\t\treturn this;\n\t}\n\n\tprivate buildEllenorzoApiURL(endpointWithSlash: Endpoints, params?: { [key: string]: any }): string {\n\t\tconst urlParams: string = params ? '?' + new URLSearchParams(params).toString() : '';\n\t\treturn dynamicValue(API.INSTITUTE, { institute_code: this.institute_code }).toString() + '/ellenorzo/V3' + endpointWithSlash + urlParams;\n\t}\n\n\t@requireParam('api_key')\n\tpublic getInstituteList(api_key: string): Promise<Institute[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst config_descriptor: AxiosResponse<ConfigurationDescriptor> = await axios.get('https://kretamobile.blob.core.windows.net/configuration/ConfigurationDescriptor.json');\n\n\t\t\tawait tryRequest(axios.get(config_descriptor.data.GlobalMobileApiUrlPROD + '/api/v3/Institute', {\n\t\t\t\theaders: {\n\t\t\t\t\tapiKey: api_key\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Institute[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getStudent(): Promise<Student> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Tanulo), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Student>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getEvaluations(options?: RequestDateRangeOptions): Promise<Evaluation[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst ops: { datumTol?: string; datumIg?: string } = {};\n", "\t\t\tif (options?.dateFrom)\n\t\t\t\tops.datumTol = validateDate(moment(options.dateFrom).format('YYYY-MM-DD'));\n\t\t\tif (options?.dateTo)\n\t\t\t\tops.datumIg = validateDate(moment(options.dateTo).format('YYYY-MM-DD'));\n\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Ertekelesek, ops), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Evaluation[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getNotes(options?: RequestDateRangeOptions): Promise<Note[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst ops: { datumTol?: string; datumIg?: string } = {};\n", "\t\t\tif (options?.dateFrom)\n\t\t\t\tops.datumTol = validateDate(moment(options.dateFrom).format('YYYY-MM-DD'));\n\t\t\tif (options?.dateTo)\n\t\t\t\tops.datumIg = validateDate(moment(options.dateTo).format('YYYY-MM-DD'));\n\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Feljegyzesek, ops), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Note[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getAnnouncedTests(options?: RequestAnnouncedTestsOptions): Promise<AnnouncedTest[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst ops: { datumTol?: string; datumIg?: string, Uids?: string } = {};\n", "\t\t\tif (options?.dateFrom)\n\t\t\t\tops.datumTol = validateDate(moment(options.dateFrom).format('YYYY-MM-DD'));\n\t\t\tif (options?.dateTo)\n\t\t\t\tops.datumIg = validateDate(moment(options.dateTo).format('YYYY-MM-DD'));\n\t\t\tif (options?.uids)\n\t\t\t\tops.Uids = options.uids.map((uid: string | number) => uid.toString()).join(';');\n\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Szamonkeresek, ops), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<AnnouncedTest[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('options.dateFrom')\n\tpublic getHomeworks(options: RequestHomeWorkOptions): Promise<Homework[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst ops: { datumTol: string; datumIg?: string } = { datumTol: validateDate(moment(options.dateFrom).format('YYYY-MM-DD')) };\n", "\t\t\tif (options?.dateTo)\n\t\t\t\tops.datumIg = validateDate(moment(options.dateTo).format('YYYY-MM-DD'));\n\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.HaziFeladatok, ops), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Homework[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('uid')\n\tpublic getHomework(uid: string | number): Promise<Homework> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.HaziFeladatok) + '/' + uid.toString(), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Homework>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getOmissions(options?: RequestDateRangeOptions): Promise<Omission[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst ops: { datumTol?: string; datumIg?: string } = {};\n", "\t\t\tif (options?.dateFrom)\n\t\t\t\tops.datumTol = validateDate(moment(options.dateFrom).format('YYYY-MM-DD'));\n\t\t\tif (options?.dateTo)\n\t\t\t\tops.datumIg = validateDate(moment(options.dateTo).format('YYYY-MM-DD'));\n\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Mulasztasok, ops), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Omission[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getGroups(): Promise<Group[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.OsztalyCsoportok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Group[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getSubjectAverages(onfUid?: string): Promise<SubjectAverage[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.TantargyiAtlagok, { oktatasiNevelesiFeladatUid: onfUid || await this.getGroups().then((groups: Group[]) => groups[0].OktatasNevelesiFeladat.Uid) }), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<SubjectAverage[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('options.dateFrom')\n\t@requireParam('options.dateTo')\n\tpublic getLessons(options: RequestDateRangeRequiredOptions): Promise<Lesson[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.OrarendElemek, {\n\t\t\t\tdatumTol: validateDate(moment(options.dateFrom).format('YYYY-MM-DD')),\n\t\t\t\tdatumIg: validateDate(moment(options.dateTo).format('YYYY-MM-DD'))\n\t\t\t}), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Lesson[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('uid')\n\tpublic getLesson(uid: string | number): Promise<Lesson> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.OrarendElem, { orarendElemUid: uid.toString() }), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Lesson>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getNoticeBoardItems(): Promise<NoticeBoardItem[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.FaliujsagElemek), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<NoticeBoardItem[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getClassAverage(options?: RequestClassAveragesOptions): Promise<ClassAverage[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst ops: {\n\t\t\t\toktatasiNevelesiFeladatUid: string;\n\t\t\t\ttantargyUid?: string;\n\t\t\t} = { oktatasiNevelesiFeladatUid: options?.oktatasiNevelesiFeladatUid || await this.getGroups().then((groups: Group[]) => groups[0].OktatasNevelesiFeladat.Uid) };\n", "\t\t\tif (options?.subjectUid)\n\t\t\t\tops.tantargyUid = options.subjectUid;\n\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.OsztalyCsoportAtlag, ops), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<ClassAverage[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getInstitute(): Promise<Institution> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Intezmenyek), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<Institution>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('uids')\n\tpublic getClassMasters(uids: string[] | number[]): Promise<ClassMaster[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Osztalyfonokok, { Uids: uids.map((u: string | number) => u.toString()).join(';') }), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<ClassMaster[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('options.dateFrom')\n\t@requireParam('options.dateTo')\n\tpublic getTimeTableWeeks(options: RequestDateRangeRequiredOptions): Promise<TimeTableWeek[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.OrarendHetek, {\n\t\t\t\torarendElemKezdoNapDatuma: validateDate(moment(options.dateFrom).format('YYYY-MM-DD')),\n\t\t\t\torarendElemVegNapDatuma: validateDate(moment(options.dateTo).format('YYYY-MM-DD'))\n\t\t\t}), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<TimeTableWeek[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getLepEvents(): Promise<LepEvent[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.Eloadasok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<LepEvent[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getSchoolYearCalendar(): Promise<SchoolYearCalendarEntry[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.TanevNaptar), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<SchoolYearCalendarEntry[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getDeviceGivenState(): Promise<boolean> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildEllenorzoApiURL(Endpoints.EszkozAllapot), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<boolean>) => resolve(r.data)));\n\t\t});\n\t}\n}\n"]}
{"filename": "src/lib/Global.ts", "chunked_list": ["import axios, { AxiosResponse } from 'axios';\nimport { API, Endpoints, InstituteGlobal } from '../types';\nimport tryRequest from '../utils/tryRequest';\n\nexport default class Global {\n\tconstructor() {\n\t}\n\n\tpublic getInstituteList(): Promise<InstituteGlobal[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(API.GLOBAL + Endpoints.PublikusIntezmenyek, {\n\t\t\t\theaders: {\n\t\t\t\t\t'api-version': 'v1'\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<InstituteGlobal[]>) => resolve(r.data)));\n\t\t});\n\t}\n}\n"]}
{"filename": "src/lib/Authentication.ts", "chunked_list": ["import {\n\tAuthenticationFields,\n\tAuthenticationResponse,\n\tRequestRefreshTokenOptions,\n\tNonceHashOptions,\n\tAPI,\n\tEndpoints, AccessToken, PreBuiltAuthenticationToken\n} from '../types';\nimport axios, { AxiosProxyConfig, AxiosResponse } from 'axios';\nimport { createHmac } from 'node:crypto';", "import axios, { AxiosProxyConfig, AxiosResponse } from 'axios';\nimport { createHmac } from 'node:crypto';\nimport KretaError from './errors/KretaError';\nimport requireParam from '../decorators/requireParam';\nimport tryRequest from '../utils/tryRequest';\nimport requireCredentials from '../decorators/requireCredentials';\n\nexport class Authentication {\n\tprivate readonly username: string;\n\tprivate readonly password: string;\n\tprivate readonly institute_code: string;\n\tprivate readonly client_id: string = 'kreta-ellenorzo-mobile-android';\n\tprivate readonly grant_type: string = 'password';\n\tprivate readonly auth_policy_version: string = 'v2';\n\n\tconstructor(options: AuthenticationFields) {\n\t\tthis.username = options.username;\n\t\tthis.password = options.password;\n\t\tthis.institute_code = options.institute_code;\n\t}\n\n\tpublic get _username() {\n\t\treturn this.username;\n\t}\n\n\tpublic get _password() {\n\t\treturn this.password;\n\t}\n\n\tpublic get _institute_code() {\n\t\treturn this.institute_code;\n\t}\n\n\t@requireParam('proxy.host')\n\t@requireParam('proxy.port')\n\tpublic setProxy(proxy: AxiosProxyConfig): this {\n\t\taxios.defaults.proxy = proxy;\n\t\treturn this;\n\t}\n\n\t@requireParam('ua')\n\tpublic setUserAgent(ua: string): this {\n\t\taxios.defaults.headers.common['User-Agent'] = ua;\n\t\treturn this;\n\t};\n\n\t@requireCredentials\n\tprivate authenticate(options: AuthenticationFields): Promise<AuthenticationResponse> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst nonce_key: string = await this.getNonce();\n\t\t\tconst hash: string = await this.getNonceHash({\n\t\t\t\tnonce: nonce_key,\n\t\t\t\tinstitute_code: options.institute_code,\n\t\t\t\tusername: options.username\n\t\t\t});\n\n\t\t\tawait tryRequest(axios.post(API.IDP + Endpoints.Token, {\n\t\t\t\tinstitute_code: options.institute_code,\n\t\t\t\tusername: options.username,\n\t\t\t\tpassword: options.password,\n\t\t\t\tgrant_type: this.grant_type,\n\t\t\t\tclient_id: this.client_id\n\t\t\t}, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t'X-Authorizationpolicy-Nonce': nonce_key,\n\t\t\t\t\t'X-Authorizationpolicy-Key': hash,\n\t\t\t\t\t'X-Authorizationpolicy-Version': this.auth_policy_version,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<AuthenticationResponse>) => resolve(r.data)));\n\t\t});\n\t}\n\n\tprivate getNonce(): Promise<string> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(API.IDP + Endpoints.Nonce).then((r: AxiosResponse<string>) => resolve(r.data.toString())));\n\t\t});\n\t}\n\n\tprivate getNonceHash(options: NonceHashOptions): Promise<string> {\n\t\treturn new Promise((resolve): void => {\n\t\t\tconst buffer_bytes: Buffer = Buffer.from(options.institute_code.toUpperCase() + options.nonce + options.username.toUpperCase(), 'utf8');\n\t\t\tconst hash: Buffer = createHmac('sha512', Buffer.from([98, 97, 83, 115, 120, 79, 119, 108, 85, 49, 106, 77])).update(buffer_bytes).digest();\n\t\t\treturn resolve(hash.toString('base64'));\n\t\t});\n\t}\n\n\tprivate async returnTokens(): Promise<AccessToken> {\n\t\treturn await this.authenticate({\n\t\t\tusername: this.username,\n\t\t\tpassword: this.password,\n\t\t\tinstitute_code: this.institute_code\n\t\t}).then((r: AuthenticationResponse): AccessToken => {\n\t\t\treturn { access_token: r.access_token, refresh_token: r.refresh_token, token_type: r.token_type };", "\t\t}).catch((): { access_token: null; refresh_token: null; token_type: null } => {\n\t\t\treturn { access_token: null, refresh_token: null, token_type: null };\n\t\t});\n\t}\n\n\tpublic getAccessToken(): Promise<PreBuiltAuthenticationToken> {\n\t\treturn new Promise(async (resolve, reject): Promise<void> => {\n\t\t\tconst { access_token, refresh_token }: AccessToken = await this.returnTokens();\n\t\t\tif (access_token === null || refresh_token === null)\n\t\t\t\treturn reject(new KretaError('Failed to get access token: Invalid credentials'));\n\t\t\telse\n\t\t\t\treturn resolve({ token: 'Bearer' + ' ' + access_token, access_token, refresh_token });\n\t\t});\n\t}\n\n\t@requireParam('options.refreshToken')\n\t@requireParam('options.refreshUserData')\n\tpublic getRefreshToken(options: RequestRefreshTokenOptions): Promise<AuthenticationResponse> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst nonce_key: string = await this.getNonce();\n\t\t\tconst hash: string = await this.getNonceHash({\n\t\t\t\tnonce: nonce_key,\n\t\t\t\tinstitute_code: this.institute_code,\n\t\t\t\tusername: this.username\n\t\t\t});\n\n\t\t\tawait tryRequest(axios.post(API.IDP + Endpoints.Token, {\n\t\t\t\trefresh_token: options.refreshToken,\n\t\t\t\tinstitute_code: this.institute_code,\n\t\t\t\tgrant_type: 'refresh_token',\n\t\t\t\tclient_id: this.client_id,\n\t\t\t\trefresh_user_data: options.refreshUserData\n\t\t\t}, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t'X-Authorizationpolicy-Key': hash,\n\t\t\t\t\t'X-Authorizationpolicy-Version': this.auth_policy_version,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<AuthenticationResponse>) =>\n\t\t\t\tresolve(r.data)\n\t\t\t));\n\t\t});\n\t}\n}\n", "\t\t\tif (access_token === null || refresh_token === null)\n\t\t\t\treturn reject(new KretaError('Failed to get access token: Invalid credentials'));\n\t\t\telse\n\t\t\t\treturn resolve({ token: 'Bearer' + ' ' + access_token, access_token, refresh_token });\n\t\t});\n\t}\n\n\t@requireParam('options.refreshToken')\n\t@requireParam('options.refreshUserData')\n\tpublic getRefreshToken(options: RequestRefreshTokenOptions): Promise<AuthenticationResponse> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tconst nonce_key: string = await this.getNonce();\n\t\t\tconst hash: string = await this.getNonceHash({\n\t\t\t\tnonce: nonce_key,\n\t\t\t\tinstitute_code: this.institute_code,\n\t\t\t\tusername: this.username\n\t\t\t});\n\n\t\t\tawait tryRequest(axios.post(API.IDP + Endpoints.Token, {\n\t\t\t\trefresh_token: options.refreshToken,\n\t\t\t\tinstitute_code: this.institute_code,\n\t\t\t\tgrant_type: 'refresh_token',\n\t\t\t\tclient_id: this.client_id,\n\t\t\t\trefresh_user_data: options.refreshUserData\n\t\t\t}, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\n\t\t\t\t\t'X-Authorizationpolicy-Key': hash,\n\t\t\t\t\t'X-Authorizationpolicy-Version': this.auth_policy_version,\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<AuthenticationResponse>) =>\n\t\t\t\tresolve(r.data)\n\t\t\t));\n\t\t});\n\t}\n}\n"]}
{"filename": "src/lib/Administration.ts", "chunked_list": ["import axios, { AxiosResponse } from 'axios';\nimport {\n\tAddresseType,\n\tAuthenticationFields,\n\tCardEvent, CurrentInstitutionDetails,\n\tDefaultType, EmployeeDetails,\n\tGuardianEAdmin,\n\tKretaClass,\n\tMailboxItem, MessageLimitations,\n\tPreBuiltAuthenticationToken, API, AdministrationEndpoints", "\tMailboxItem, MessageLimitations,\n\tPreBuiltAuthenticationToken, API, AdministrationEndpoints\n} from '../types';\nimport { Authentication } from './Authentication';\nimport requireCredentials from '../decorators/requireCredentials';\nimport tryRequest from '../utils/tryRequest';\nimport requireParam from '../decorators/requireParam';\n\nexport default class Administration {\n\tprivate readonly username: string;\n\tprivate readonly password: string;\n\tprivate readonly institute_code: string;\n\tprivate authenticate: Authentication;\n\tprivate token?: Promise<string>;\n\n\tconstructor(options: AuthenticationFields) {\n\t\tthis.username = options.username;\n\t\tthis.password = options.password;\n\t\tthis.institute_code = options.institute_code;\n\t\tthis.authenticate = new Authentication({ username: this.username, password: this.password, institute_code: this.institute_code });", "export default class Administration {\n\tprivate readonly username: string;\n\tprivate readonly password: string;\n\tprivate readonly institute_code: string;\n\tprivate authenticate: Authentication;\n\tprivate token?: Promise<string>;\n\n\tconstructor(options: AuthenticationFields) {\n\t\tthis.username = options.username;\n\t\tthis.password = options.password;\n\t\tthis.institute_code = options.institute_code;\n\t\tthis.authenticate = new Authentication({ username: this.username, password: this.password, institute_code: this.institute_code });", "\t\tif (this.username && this.password && this.institute_code)\n\t\t\tthis.token = this.authenticate.getAccessToken().then((r: PreBuiltAuthenticationToken) => r.token);\n\t\taxios.defaults.headers['X-Uzenet-Lokalizacio'] = 'hu-HU';\n\t}\n\n\tpublic get _username() {\n\t\treturn this.username;\n\t}\n\n\tpublic get _password() {\n\t\treturn this.password;\n\t}\n\n\tpublic get _institute_code() {\n\t\treturn this.institute_code;\n\t}\n\n\tprivate buildUgyintezesApiURL(endpointWithSlash: AdministrationEndpoints, params?: { [key: string]: any }): string {\n\t\tconst urlParams: string = params ? '?' + new URLSearchParams(params).toString() : '';\n\t\treturn API.ADMINISTRATION + '/api/v1' + endpointWithSlash + urlParams;\n\t}\n\n\t@requireCredentials\n\tpublic getAddresseeType(): Promise<AddresseType[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.CimzettTipusok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<AddresseType[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getCaseTypes(): Promise<DefaultType[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.KerelemTipusok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<DefaultType[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getTmgiCaseTypes(): Promise<DefaultType[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.TmgiIgazolasTipusok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<DefaultType[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getAccessControlSystemEvents(): Promise<CardEvent[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Esemenyek), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<CardEvent[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getCurrentInstitutionModules(): Promise<string[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.JelenlegiIntezmenyModulok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<string[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getAddressableType(): Promise<AddresseType[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.CimezhetoTipusok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<AddresseType[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('addressId')\n\tpublic getAddressableClasses(addressId: string | number): Promise<KretaClass[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.CimezhetoOsztalyok, { cimzettKod: addressId.toString() }), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<KretaClass[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getUnreadMessagesCount(): Promise<number> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.OlvasatlanokSzama), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<number>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getMessages(): Promise<MailboxItem[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Uzenetek), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<MailboxItem[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('id')\n\tpublic getMessage(id: string | number): Promise<MailboxItem> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Uzenet) + '/' + id.toString(), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<MailboxItem>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getAddressableSzmkRepesentative(): Promise<GuardianEAdmin[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.CimezhetoSzmkKepviselok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<GuardianEAdmin[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getMessageLimitations(): Promise<MessageLimitations> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.UzenetLimitacio), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<MessageLimitations>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getAdministrators(): Promise<EmployeeDetails[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Adminisztratorok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<EmployeeDetails[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getDirectors(): Promise<EmployeeDetails[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Igazgatok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<EmployeeDetails[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getClassMasters(): Promise<EmployeeDetails[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Osztalyfonokok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<EmployeeDetails[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getTeachers(): Promise<EmployeeDetails[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.Oktatok), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<EmployeeDetails[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\t@requireParam('classId')\n\tpublic getAddressableGuardiansForClass(classId: string | number): Promise<GuardianEAdmin[]> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.CimezhetoTanuloSzulok) + '/' + classId.toString(), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<GuardianEAdmin[]>) => resolve(r.data)));\n\t\t});\n\t}\n\n\t@requireCredentials\n\tpublic getCurrentInstitutionDetails(): Promise<CurrentInstitutionDetails> {\n\t\treturn new Promise(async (resolve): Promise<void> => {\n\t\t\tawait tryRequest(axios.get(this.buildUgyintezesApiURL(AdministrationEndpoints.JelenlegiIntezmeny), {\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': await this.token\n\t\t\t\t}\n\t\t\t}).then((r: AxiosResponse<CurrentInstitutionDetails>) => resolve(r.data)));\n\t\t});\n\t}\n}\n"]}
{"filename": "src/lib/errors/KretaError.ts", "chunked_list": ["export default class KretaError extends Error {\n\tconstructor(message: string) {\n\t\tsuper(message);\n\t\tthis.name = 'KretaError';\n\t}\n}\n"]}
{"filename": "src/decorators/requireCredentials.ts", "chunked_list": ["import Kreta from '../lib/Kreta';\nimport Administration from '../lib/Administration';\nimport KretaError from '../lib/errors/KretaError';\n\nexport default function requireCredentials(target: any, propertyName: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n\tconst originalMethod = descriptor.value;\n\tdescriptor.value = function (...args: any[]) {\n\t\tconst instance: Kreta | Administration = this as Kreta || Administration;\n\t\tif (!instance._username || !instance._password || !instance._institute_code)\n\t\t\tthrow new KretaError('Missing required credentials');\n\t\treturn originalMethod.call(this, ...args);\n\t};\n\treturn descriptor;\n}\n", "\t\tif (!instance._username || !instance._password || !instance._institute_code)\n\t\t\tthrow new KretaError('Missing required credentials');\n\t\treturn originalMethod.call(this, ...args);\n\t};\n\treturn descriptor;\n}\n"]}
{"filename": "src/decorators/requireParam.ts", "chunked_list": ["import KretaError from '../lib/errors/KretaError';\n\nexport default function requireParam(param: string) {\n\treturn function (target: any, propertyKey: string, descriptor: PropertyDescriptor): void {\n\t\tconst originalMethod = descriptor.value;\n\t\tdescriptor.value = function (...args: any[]) {\n\t\t\tconst value = args[0];\n\t\t\tif (value === null || value === '' || value === undefined)\n\t\t\t\tthrow new KretaError(`'${param}' is a required parameter`);\n\t\t\tif (typeof value === 'object') {\n\t\t\t\tif (Array.isArray(value)) {", "\t\t\tif (typeof value === 'object') {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tif (value.length === 0)\n\t\t\t\t\t\tthrow new KretaError(`'${param}' must not be an empty array`);\n\t\t\t\t} else {\n\t\t\t\t\tconst [objName, propName]: string[] = param.split('.');\n\t\t\t\t\tif (propName != null && value[propName] == null)\n\t\t\t\t\t\tthrow new KretaError(`'${propName}' is a required property in '${objName}'`);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn originalMethod.apply(this, args);\n\t\t};\n\t};\n}\n"]}
