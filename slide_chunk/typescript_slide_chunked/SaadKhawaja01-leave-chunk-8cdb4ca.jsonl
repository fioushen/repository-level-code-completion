{"filename": "test/app.e2e-spec.ts", "chunked_list": ["import { Test, TestingModule } from '@nestjs/testing';\nimport { INestApplication } from '@nestjs/common';\nimport * as request from 'supertest';\nimport { AppModule } from './../src/app.module';\n\ndescribe('AppController (e2e)', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({", "  beforeEach(async () => {\n    const moduleFixture: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  it('/ (GET)', () => {", "\n  it('/ (GET)', () => {\n    return request(app.getHttpServer())\n      .get('/')\n      .expect(200)\n      .expect('Hello World!');\n  });\n});\n", ""]}
{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core';\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.enableCors();\n  const config = new DocumentBuilder().addBearerAuth()\n    //for swagger config\n    .setTitle('Leave-Attendence-Record-System-Be-Test')\n    .setDescription('CS619 Final Year Project')\n    .setVersion('1.0')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('api', app, document);\n  await app.listen(3000);\n}\nbootstrap();\n"]}
{"filename": "src/app.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'api online';\n  }\n}\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LeaveModule } from './leave/leave.module';\nimport { Leave } from './leave/leave.entity';\nimport { Allowed } from './leave/allowed.entity';\n\n//for Sql Db\nconst DB = TypeOrmModule.forRoot({", "//for Sql Db\nconst DB = TypeOrmModule.forRoot({\n  type: 'mysql',\n  host: 'localhost',\n  port: 3306,\n  username: 'root',\n  password: '',\n  database: 'leaveChunk',\n  entities: [Leave, Allowed],\n  synchronize: true,", "  entities: [Leave, Allowed],\n  synchronize: true,\n});\n\n// all modules imports here\n@Module({\n  imports: [DB, LeaveModule, ],\n  controllers: [AppController],\n\n  providers: [AppService],", "\n  providers: [AppService],\n})\nexport class AppModule {}\n"]}
{"filename": "src/app.controller.ts", "chunked_list": ["import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n"]}
{"filename": "src/leave/leave.controller.ts", "chunked_list": ["import { Body, Controller, Post} from '@nestjs/common';\nimport { Get } from '@nestjs/common/decorators';\nimport { ApiTags } from '@nestjs/swagger';\nimport { AllowedLeaves, LeaveApplication } from './leave.model';\n\nimport { LeaveService } from './leave.service';\n\n@ApiTags('Leave')\n@Controller('leave')\nexport class LeaveController {\n  constructor(private readonly leaveService: LeaveService) {}\n\n  @Post('/allowedLeaves')\n  async allowedLeaves(@Body() data: AllowedLeaves) {\n    return await this.leaveService.allowedLeaves(data);\n  }\n\n  @Get()\n  async Leaves() {\n    return await this.leaveService.Leaves();\n  }\n\n  @Post('/application')\n  async application(@Body() data: LeaveApplication) {\n    return await this.leaveService.application(data);\n  }\n}\n", "@Controller('leave')\nexport class LeaveController {\n  constructor(private readonly leaveService: LeaveService) {}\n\n  @Post('/allowedLeaves')\n  async allowedLeaves(@Body() data: AllowedLeaves) {\n    return await this.leaveService.allowedLeaves(data);\n  }\n\n  @Get()\n  async Leaves() {\n    return await this.leaveService.Leaves();\n  }\n\n  @Post('/application')\n  async application(@Body() data: LeaveApplication) {\n    return await this.leaveService.application(data);\n  }\n}\n"]}
{"filename": "src/leave/leave.dto.ts", "chunked_list": ["export interface ILeaveApplication {\n  toDate: Date;\n  fromDate: Date;\n  leaveType: string;\n  descriptionLeave: string;\n  reason: string;\n}\n\nexport interface IAllowedLeaves {\n  leaveType: string;\n  allowedLeaves: number;\n\n}\n", "export interface IAllowedLeaves {\n  leaveType: string;\n  allowedLeaves: number;\n\n}\n\nexport interface ILeaveApplicationResponse {\n  id: string;\n  employeeId: string;\n  applcationDate: Date;\n  allowedLeaves: number;\n  consumedLeaves: number;\n  availableLeaves: number;\n  description: string;\n  leaveDates: string;\n  status: string;\n}\n"]}
{"filename": "src/leave/allowed.entity.ts", "chunked_list": ["import { Entity, Column, PrimaryGeneratedColumn, BaseEntity } from 'typeorm';\n\n@Entity()\nexport class Allowed extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: string;\n  @Column()\n  leaveType: string;\n  @Column()\n  allowedLeaves: number;\n  @Column()\n  consumedLeaves: number;\n  @Column()\n  remainingLeaves: number;\n\n}\n"]}
{"filename": "src/leave/leave.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { LeaveController } from './leave.controller';\nimport { LeaveService } from './leave.service';\n\n@Module({\n  controllers: [LeaveController],\n  providers: [LeaveService]\n})\nexport class LeaveModule {}\n", "export class LeaveModule {}\n"]}
{"filename": "src/leave/leave.model.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsDate,\n  IsNotEmpty,\n  IsNumber,\n  IsString\n} from 'class-validator';\nimport { IAllowedLeaves, ILeaveApplication } from './leave.dto';\n\nexport class LeaveApplication implements ILeaveApplication {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDate()\n  toDate: Date;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDate()\n  fromDate: Date;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  leaveType: string;\n\n  @IsString()\n  @ApiProperty({ default: 'Casual' })\n  @IsNotEmpty()\n  descriptionLeave: string;\n\n  @IsString()\n  @ApiProperty()\n  @IsNotEmpty()\n  reason: string;\n}\n", "\nexport class LeaveApplication implements ILeaveApplication {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDate()\n  toDate: Date;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsDate()\n  fromDate: Date;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  leaveType: string;\n\n  @IsString()\n  @ApiProperty({ default: 'Casual' })\n  @IsNotEmpty()\n  descriptionLeave: string;\n\n  @IsString()\n  @ApiProperty()\n  @IsNotEmpty()\n  reason: string;\n}\n", "export class AllowedLeaves implements IAllowedLeaves {\n  @ApiProperty()\n  @IsNotEmpty()\n  @IsString()\n  leaveType: string;\n  \n  @ApiProperty()\n  @IsNotEmpty()\n  @IsNumber()\n  allowedLeaves: number;\n\n}\n"]}
{"filename": "src/leave/leave.service.ts", "chunked_list": ["import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { Allowed } from './allowed.entity';\nimport { IAllowedLeaves, ILeaveApplication } from './leave.dto';\nimport { Leave } from './leave.entity';\n\n@Injectable()\nexport class LeaveService {\n  async allowedLeaves(data: IAllowedLeaves) {\n    //to get the value between these three\n    if (\n      data.leaveType !== 'earnedLeaves' &&\n      data.leaveType !== 'casualLeaves' &&\n      data.leaveType !== 'compensatoryLeaves'\n    ) {\n      throw new HttpException(", "    if (\n      data.leaveType !== 'earnedLeaves' &&\n      data.leaveType !== 'casualLeaves' &&\n      data.leaveType !== 'compensatoryLeaves'\n    ) {\n      throw new HttpException(\n        'you must enter the type of leave between casualLeaves , compensatoryLeaves &  earnedLeaves',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const application = new Allowed();\n    application.leaveType = data.leaveType;\n    application.allowedLeaves = data.allowedLeaves;\n    application.remainingLeaves = data.allowedLeaves;\n    await application.save();\n    return application;\n  }\n\n  async Leaves() {\n    const allowedLeavesData = await Allowed.find();\n\n    return allowedLeavesData;\n  }\n\n  async application(data: ILeaveApplication) {\n    // to get number of days\n    let test = data.toDate.toString().split('T'); //T replace\n    let test2 = test[0].toString().split('-');\n    let date1 = test2[2];\n    let test3 = data.fromDate.toString().split('T'); //T replace\n    let test4 = test3[0].toString().split('-');\n    let date2 = test4[2];\n    let diff = parseInt(date2) - parseInt(date1) + 1;\n\n    //updating consumed leaves", "    if (data.descriptionLeave == 'Casual') {\n      const Leavesdata = await Allowed.findOneBy({ leaveType: 'casualLeaves' });\n\n      //to check remaining leaves is not zero\n      if (Leavesdata.remainingLeaves - diff < 0) {\n        throw new HttpException(\n          'Maximum leaves consumed!', HttpStatus.BAD_REQUEST\n        );\n      }\n      //updating data\n      Leavesdata.consumedLeaves += diff;\n      Leavesdata.remainingLeaves =\n        Leavesdata.allowedLeaves - Leavesdata.consumedLeaves;\n      await Leavesdata.save();", "    } else if (data.descriptionLeave == 'Compensatory') {\n      const Leavesdata = await Allowed.findOneBy({\n        leaveType: 'compensatoryLeaves',\n      });\n\n      //to check remaining leaves is not zero\n      if (Leavesdata.remainingLeaves - diff < 0) {\n        throw new HttpException(\n          'Maximum leaves consumed!', HttpStatus.BAD_REQUEST,\n        );\n      }\n      //updating data\n      Leavesdata.consumedLeaves += diff;\n      Leavesdata.remainingLeaves =\n        Leavesdata.allowedLeaves - Leavesdata.consumedLeaves;\n      await Leavesdata.save();\n    } else {\n      const Leavesdata = await Allowed.findOneBy({ leaveType: 'earnedLeaves' });\n\n      //to check remaining leaves is not zero", "      if (Leavesdata.remainingLeaves - diff < 0) {\n        throw new HttpException(\n          'Maximum leaves consumed!', HttpStatus.BAD_REQUEST,\n        );\n      }\n      //updating data\n      Leavesdata.consumedLeaves += diff;\n      Leavesdata.remainingLeaves =\n        Leavesdata.allowedLeaves - Leavesdata.consumedLeaves;\n      await Leavesdata.save();\n    }\n\n    //creation of new application\n    const leave = new Leave();\n    leave.toDate = data.toDate;\n    leave.fromDate = data.fromDate;\n    leave.leaveType = data.leaveType;\n    leave.descriptionLeave = data.descriptionLeave;\n    leave.reason = data.reason;\n    await leave.save();\n\n    const allowedLeavesData = await Allowed.find();\n\n    return {\n      ...leave,\n      leaveinfo: allowedLeavesData,\n    };\n  }\n}\n"]}
{"filename": "src/leave/leave.entity.ts", "chunked_list": ["import { Entity, Column, PrimaryGeneratedColumn, BaseEntity } from 'typeorm';\n\n@Entity()\nexport class Leave extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column()\n  toDate: Date;\n\n  @Column()\n  fromDate: Date;\n\n  @Column()\n  leaveType: string;\n\n  @Column()\n  descriptionLeave: string;\n\n  @Column()\n  reason: string;\n}\n"]}
