{"filename": "src/types.ts", "chunked_list": ["import { narrow } from \"abitype\";\nimport IZeroEx from \"./abi/IZeroEx.json\";\nimport type {\n  Contract,\n  BaseContractMethod,\n  TransactionReceipt,\n  TransactionDescription,\n} from \"ethers\";\n\nexport type PermitAndCallChainIds = 1 | 137 | 8453;\n", "\nexport type PermitAndCallChainIds = 1 | 137 | 8453;\n\nexport type SupportedChainId = 1 | 5 | 10 | 56 | 137 | 250 | 8453 | 42220 | 43114 | 42161;\n\nexport interface CallResult {\n  success: boolean;\n  returnData: string;\n}\n\ninterface Call {\n  target: string;\n  callData: string;\n}\n", "interface Call {\n  target: string;\n  callData: string;\n}\n\ntype BlockHash = string;\n\nexport type AggregateResponse = [bigint, BlockHash, CallResult[]];\n\nexport const exchangeProxyAbi = narrow(IZeroEx.compilerOutput.abi);\n", "export type Mtx = [\n  signer: string,\n  sender: string,\n  expirationTimeSeconds: bigint,\n  salt: bigint,\n  calldata: string,\n  feeToken: string,\n  fees: [[recipient: string]]\n];\n\nexport interface ProcessedLog {\n  to: string;\n  from: string;\n  symbol: string;\n  amount: string;\n  address: string;\n  decimals: number;\n}\n", "export interface ProcessedLog {\n  to: string;\n  from: string;\n  symbol: string;\n  amount: string;\n  address: string;\n  decimals: number;\n}\n\nexport interface EnrichedTxReceipt {\n  logs: ProcessedLog[];\n  from: string;\n}\n", "export interface EnrichedTxReceipt {\n  logs: ProcessedLog[];\n  from: string;\n}\n\nexport type TryBlockAndAggregate = BaseContractMethod<\n  [boolean, Call[]],\n  AggregateResponse\n>;\n\nexport interface EnrichedTxReceiptArgs {\n  transactionReceipt: TransactionReceipt;\n  tryBlockAndAggregate: TryBlockAndAggregate;\n}\n", "export interface EnrichedTxReceiptArgs {\n  transactionReceipt: TransactionReceipt;\n  tryBlockAndAggregate: TryBlockAndAggregate;\n}\n\nexport interface ProcessReceiptArgs {\n  signer: string;\n  recipient: string;\n  parser: ParserFunction;\n  transactionReceipt: TransactionReceipt;\n  tryBlockAndAggregate: TryBlockAndAggregate;\n  transactionDescription: TransactionDescription;\n}\n", "export enum TransactionStatus {\n  REVERTED = 0,\n  SUCCESSFUL = 1,\n}\n\nexport interface Log {\n  transactionIndex: number;\n  blockNumber: number;\n  transactionHash: string;\n  address: string;\n  data: string;\n  logIndex?: number;\n  blockHash: string;\n  topics: readonly string[];\n}\n", "export interface EnrichedLogWithoutAmount extends Log {\n  symbol: string;\n  decimals: number;\n  from?: string;\n}\n\nexport interface ParseSwapArgs {\n  transactionHash: string;\n  exchangeProxyAbi?: typeof exchangeProxyAbi;\n  rpcUrl: string;\n}\n", "export type Token = {\n  symbol: string;\n  amount: string;\n  address: string;\n};\n\nexport type TokenTransaction =\n  | {\n      tokenIn: Token;\n      tokenOut: Token;\n    }\n  | undefined;\n", "type TxParams = {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n};\n\nexport type ParserFunction = (params: TxParams) => TokenTransaction;\n\nexport interface LogParsers {\n  [key: string]: ParserFunction;\n}\n", "export type TransformERC20EventData = [string, string, string, bigint, bigint];\n\nexport interface ParseGaslessTxArgs {\n  logParsers: LogParsers;\n  chainId: SupportedChainId;\n  exchangeProxyContract: Contract;\n  tryBlockAndAggregate: TryBlockAndAggregate;\n  transactionReceipt: TransactionReceipt;\n  transactionDescription: TransactionDescription;\n}\n", "export type ParseSwap = (\n  args: ParseSwapArgs\n) => Promise<TokenTransaction | null>;\n"]}
{"filename": "src/constants.ts", "chunked_list": ["import { SupportedChainId } from \"./types\";\n\nexport const EVENT_SIGNATURES = {\n  LimitOrderFilled:\n    \"0xab614d2b738543c0ea21f56347cf696a3a0c42a7cbec3212a5ca22a4dcff2124\",\n  LiquidityProviderSwap:\n    \"0x40a6ba9513d09e3488135e0e0d10e2d4382b792720155b144cbea89ac9db6d34\",\n  OtcOrderFilled:\n    \"0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f\",\n  MetaTransactionExecuted:", "    \"0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f\",\n  MetaTransactionExecuted:\n    \"0x7f4fe3ff8ae440e1570c558da08440b26f89fb1c1f2910cd91ca6452955f121a\",\n  Transfer:\n    \"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\",\n  TransformedERC20:\n    \"0x0f6672f78a59ba8e5e5b5d38df3ebc67f3c792e2c9259b8d97d7f00dd78ba1b3\",\n} as const;\n\nexport const ERC20_FUNCTION_HASHES = {", "\nexport const ERC20_FUNCTION_HASHES = {\n  symbol: \"0x95d89b41\",\n  decimals: \"0x313ce567\",\n} as const;\n\nexport const EXCHANGE_PROXY_ABI_URL =\n  \"https://raw.githubusercontent.com/0xProject/protocol/development/packages/contract-artifacts/artifacts/IZeroEx.json\";\n\nconst CONONICAL_EXCHANGE_PROXY = \"0xdef1c0ded9bec7f1a1670819833240f027b25eff\";", "\nconst CONONICAL_EXCHANGE_PROXY = \"0xdef1c0ded9bec7f1a1670819833240f027b25eff\";\n\nexport const MULTICALL3 = \"0xcA11bde05977b3631167028862bE2a173976CA11\";\n\nexport const PERMIT_AND_CALL_BY_CHAIN_ID = {\n  1: \"0x1291C02D288de3De7dC25353459489073D11E1Ae\",\n  137: \"0x2ddd30fe5c12fc4cd497526f14bf3d1fcd3d5db4\",\n  8453: \"0x3CA53031Ad0B86a304845e83644983Be3340895f\"\n} as const", "  8453: \"0x3CA53031Ad0B86a304845e83644983Be3340895f\"\n} as const\n\nexport const EXCHANGE_PROXY_BY_CHAIN_ID = {\n  1: CONONICAL_EXCHANGE_PROXY,\n  5: \"0xf91bb752490473b8342a3e964e855b9f9a2a668e\",\n  10: \"0xdef1abe32c034e558cdd535791643c58a13acc10\",\n  56: CONONICAL_EXCHANGE_PROXY,\n  137: CONONICAL_EXCHANGE_PROXY,\n  250: \"0xdef189deaef76e379df891899eb5a00a94cbc250\",", "  137: CONONICAL_EXCHANGE_PROXY,\n  250: \"0xdef189deaef76e379df891899eb5a00a94cbc250\",\n  8453: CONONICAL_EXCHANGE_PROXY,\n  42161: CONONICAL_EXCHANGE_PROXY,\n  42220: CONONICAL_EXCHANGE_PROXY,\n  43114: CONONICAL_EXCHANGE_PROXY,\n} as const\n\nexport const CONTRACTS = {\n  weth: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",", "export const CONTRACTS = {\n  weth: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n} as const;\n\nexport const NATIVE_ASSET = \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\";\n\nexport const NATIVE_SYMBOL_BY_CHAIN_ID: Record<SupportedChainId, string> = {\n  1: \"ETH\", // Ethereum\n  5: \"ETH\", // Goerli\n  10: \"ETH\", // Optimism", "  5: \"ETH\", // Goerli\n  10: \"ETH\", // Optimism\n  56: \"BNB\", // BNB Chain\n  137: \"MATIC\", // Polygon\n  250: \"FTM\", // Fantom\n  8453: \"ETH\", // Base\n  42161: \"ETH\", // Arbitrum One\n  42220: \"CELO\", // Celo\n  43114: \"AVAX\", // Avalanche\n} as const;", "  43114: \"AVAX\", // Avalanche\n} as const;\n"]}
{"filename": "src/index.ts", "chunked_list": ["import { Contract, JsonRpcProvider } from \"ethers\";\nimport { abi as permitAndCallAbi } from \"./abi/PermitAndCall.json\";\nimport multicall3Abi from \"./abi/Multicall3.json\";\nimport {\n  MULTICALL3,\n  EXCHANGE_PROXY_ABI_URL,\n  EXCHANGE_PROXY_BY_CHAIN_ID,\n  PERMIT_AND_CALL_BY_CHAIN_ID,\n} from \"./constants\";\nimport {", "} from \"./constants\";\nimport {\n  fillLimitOrder,\n  fillOtcOrder,\n  fillOtcOrderForEth,\n  fillOtcOrderWithEth,\n  fillTakerSignedOtcOrder,\n  fillTakerSignedOtcOrderForEth,\n  executeMetaTransaction,\n  multiplexBatchSellTokenForToken,", "  executeMetaTransaction,\n  multiplexBatchSellTokenForToken,\n  multiplexBatchSellTokenForEth,\n  multiplexBatchSellEthForToken,\n  multiplexMultiHopSellTokenForToken,\n  multiplexMultiHopSellEthForToken,\n  multiplexMultiHopSellTokenForEth,\n  sellToUniswap,\n  sellTokenForEthToUniswapV3,\n  sellEthForTokenToUniswapV3,", "  sellTokenForEthToUniswapV3,\n  sellEthForTokenToUniswapV3,\n  sellTokenForTokenToUniswapV3,\n  sellToLiquidityProvider,\n  sellToPancakeSwap,\n  transformERC20,\n} from \"./parsers\";\nimport {\n  enrichTxReceipt,\n  isChainIdSupported,", "  enrichTxReceipt,\n  isChainIdSupported,\n  isPermitAndCallChainId,\n} from \"./utils\";\nimport { TransactionStatus } from \"./types\";\nimport type {\n  Mtx,\n  LogParsers,\n  ParseSwapArgs,\n  ParseGaslessTxArgs,", "  ParseSwapArgs,\n  ParseGaslessTxArgs,\n  ProcessReceiptArgs,\n} from \"./types\";\n\nexport * from \"./types\";\n\nexport async function parseSwap({\n  transactionHash,\n  exchangeProxyAbi,\n  rpcUrl,\n}: ParseSwapArgs) {", "  if (!rpcUrl) throw new Error(\"Missing rpcUrl\");\n  if (!transactionHash) throw new Error(\"Missing transaction hash\");\n  if (!exchangeProxyAbi)\n    throw new Error(`Missing 0x Exchange Proxy ABI: ${EXCHANGE_PROXY_ABI_URL}`);\n\n  const provider = new JsonRpcProvider(rpcUrl);\n\n  const [tx, transactionReceipt] = await Promise.all([\n    provider.getTransaction(transactionHash),\n    provider.getTransactionReceipt(transactionHash),\n  ]);\n", "  if (tx && transactionReceipt) {\n    if (transactionReceipt.status === TransactionStatus.REVERTED) return null;\n\n    const chainId = Number(tx.chainId);\n\n    if (!isChainIdSupported(chainId)) {\n      throw new Error(`chainId ${chainId} is unsupported.`);\n    }\n\n    const exchangeProxyContract = new Contract(\n      EXCHANGE_PROXY_BY_CHAIN_ID[chainId],\n      exchangeProxyAbi\n    );\n\n    const permitAndCallAddress = isPermitAndCallChainId(chainId)\n      ? PERMIT_AND_CALL_BY_CHAIN_ID[chainId]\n      : undefined;\n\n    const permitAndCallContract = permitAndCallAddress\n      ? new Contract(permitAndCallAddress, permitAndCallAbi)\n      : undefined;\n\n    const transactionDescription =\n      transactionReceipt.to === permitAndCallAddress\n        ? permitAndCallContract?.interface.parseTransaction(tx)\n        : exchangeProxyContract.interface.parseTransaction(tx);\n", "    if (!transactionDescription) return null;\n\n    const multicall = new Contract(MULTICALL3, multicall3Abi, provider);\n\n    const tryBlockAndAggregate =\n      multicall[\n        \"tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls)\"\n      ];\n\n    const logParsers: LogParsers = {\n      fillLimitOrder,\n      fillOtcOrder,\n      fillOtcOrderForEth,\n      fillOtcOrderWithEth,\n      fillTakerSignedOtcOrder,\n      fillTakerSignedOtcOrderForEth,\n      executeMetaTransaction,\n      multiplexBatchSellTokenForToken,\n      multiplexBatchSellTokenForEth,\n      multiplexBatchSellEthForToken,\n      multiplexMultiHopSellTokenForToken,\n      multiplexMultiHopSellEthForToken,\n      multiplexMultiHopSellTokenForEth,\n      sellToUniswap,\n      sellTokenForEthToUniswapV3,\n      sellEthForTokenToUniswapV3,\n      sellTokenForTokenToUniswapV3,\n      sellToLiquidityProvider,\n      sellToPancakeSwap,\n    };\n\n    const parser = logParsers[transactionDescription.name];\n", "    if (transactionDescription.name === \"permitAndCall\") {\n      const calldataFromPermitAndCall = transactionDescription.args[7];\n      const permitAndCallDescription =\n        exchangeProxyContract.interface.parseTransaction({\n          data: calldataFromPermitAndCall,\n        });\n\n      if (permitAndCallDescription) {\n        return parseGaslessTx({\n          chainId,\n          logParsers,\n          tryBlockAndAggregate,\n          exchangeProxyContract,\n          transactionReceipt,\n          transactionDescription: permitAndCallDescription,\n        });\n      }\n    }\n", "    if (transactionDescription.name === \"executeMetaTransactionV2\") {\n      return parseGaslessTx({\n        chainId,\n        logParsers,\n        exchangeProxyContract,\n        tryBlockAndAggregate,\n        transactionReceipt,\n        transactionDescription,\n      });\n    }\n", "    if (transactionDescription.name === \"transformERC20\") {\n      return transformERC20({\n        chainId,\n        transactionReceipt,\n        tryBlockAndAggregate,\n        contract: exchangeProxyContract,\n      });\n    }\n\n    const txReceiptEnriched = await enrichTxReceipt({\n      transactionReceipt,\n      tryBlockAndAggregate,\n    });\n\n    return parser({\n      txDescription: transactionDescription,\n      txReceipt: txReceiptEnriched,\n    });\n  }\n}\n", "async function parseGaslessTx({\n  chainId,\n  logParsers,\n  exchangeProxyContract,\n  tryBlockAndAggregate,\n  transactionReceipt,\n  transactionDescription,\n}: ParseGaslessTxArgs) {\n  const [mtx] = transactionDescription.args;\n  const { 0: signer, 4: data, 6: fees } = mtx as Mtx;\n  const [recipient] = fees[0];\n  const mtxV2Description = exchangeProxyContract.interface.parseTransaction({\n    data,\n  });\n", "  if (mtxV2Description) {\n    if (mtxV2Description.name === \"transformERC20\") {\n      return transformERC20({\n        chainId,\n        transactionReceipt,\n        tryBlockAndAggregate,\n        contract: exchangeProxyContract,\n      });\n    } else {\n      const parser = logParsers[mtxV2Description.name];\n\n      return processReceipt({\n        signer,\n        parser,\n        recipient,\n        tryBlockAndAggregate,\n        transactionReceipt,\n        transactionDescription: mtxV2Description,\n      });\n    }\n  }\n\n  const parser = logParsers[transactionDescription.name];\n\n  return processReceipt({\n    signer,\n    parser,\n    recipient,\n    tryBlockAndAggregate,\n    transactionReceipt,\n    transactionDescription,\n  });\n}\n", "async function processReceipt({\n  signer,\n  parser,\n  recipient,\n  tryBlockAndAggregate,\n  transactionReceipt,\n  transactionDescription,\n}: ProcessReceiptArgs) {\n  const enrichedTxReceipt = await enrichTxReceipt({\n    transactionReceipt,\n    tryBlockAndAggregate,\n  });\n\n  const { logs } = enrichedTxReceipt;\n  const filteredLogs = logs.filter((log) => log.to !== recipient.toLowerCase());\n\n  return parser({\n    txDescription: transactionDescription,\n    txReceipt: { from: signer, logs: filteredLogs },\n  });\n}\n"]}
{"filename": "src/utils/index.test.ts", "chunked_list": ["import { describe, expect, it } from \"vitest\";\nimport { parseHexDataToString } from \"./index\";\n\ndescribe(\"parseHexDataToString\", () => {\n  it(\"should return empty string when input data does not contain any hexadecimal number\", () => {\n    const hexData =\n      \"0x00000000000000000000000000000000000000000000000000000000000000002\"; // This does not have any hexadecimal number after the length field\n    const result = parseHexDataToString(hexData);\n    expect(result).toEqual(\"\");\n  });", "    expect(result).toEqual(\"\");\n  });\n});\n"]}
{"filename": "src/utils/index.ts", "chunked_list": ["import { EVENT_SIGNATURES, ERC20_FUNCTION_HASHES } from \"../constants\";\n\nimport type {\n  ProcessedLog,\n  SupportedChainId,\n  PermitAndCallChainIds,\n  EnrichedTxReceipt,\n  EnrichedTxReceiptArgs,\n  EnrichedLogWithoutAmount,\n  TryBlockAndAggregate,", "  EnrichedLogWithoutAmount,\n  TryBlockAndAggregate,\n} from \"../types\";\n\nexport function convertHexToAddress(hexString: string): string {\n  return `0x${hexString.slice(-40)}`;\n}\n\nexport function isChainIdSupported(\n  chainId: number\n): chainId is SupportedChainId {\n  return [1, 5, 10, 56, 137, 250, 8453, 42220, 43114, 42161].includes(chainId);\n}\n", "export function isChainIdSupported(\n  chainId: number\n): chainId is SupportedChainId {\n  return [1, 5, 10, 56, 137, 250, 8453, 42220, 43114, 42161].includes(chainId);\n}\n\nexport function isPermitAndCallChainId(\n  chainId: number\n): chainId is PermitAndCallChainIds {\n  return [1, 137, 8453].includes(chainId);\n}\n", "export function parseHexDataToString(hexData: string) {\n  const dataLength = parseInt(hexData.slice(66, 130), 16);\n  const data = hexData.slice(130, 130 + dataLength * 2);\n  const bytes = new Uint8Array(\n    data.match(/.{1,2}/g)?.map((byte: string) => parseInt(byte, 16)) ?? []\n  );\n  const textDecoder = new TextDecoder();\n  const utf8String = textDecoder.decode(bytes);\n\n  return utf8String;\n}\n", "export function formatUnits(data: string, decimals: number) {\n  const bigIntData = BigInt(data);\n  const bigIntDecimals = BigInt(10 ** decimals);\n  const wholePart = bigIntData / bigIntDecimals;\n  const fractionalPart = bigIntData % bigIntDecimals;\n  const paddedFractionalPart = String(fractionalPart).padStart(decimals, \"0\");\n  const formattedFractionalPart = paddedFractionalPart.replace(/0+$/, \"\");\n\n  return formattedFractionalPart.length > 0\n    ? `${wholePart}.${formattedFractionalPart}`\n    : wholePart.toString();\n}\n", "export async function fetchSymbolAndDecimal(\n  address: string,\n  tryBlockAndAggregate: TryBlockAndAggregate\n): Promise<[string, number]> {\n  const calls = [\n    { target: address, callData: ERC20_FUNCTION_HASHES.symbol },\n    { target: address, callData: ERC20_FUNCTION_HASHES.decimals },\n  ];\n  const { 2: results } = await tryBlockAndAggregate.staticCall(false, calls);\n  const [symbolResult, decimalsResult] = results;\n  const symbol = parseHexDataToString(symbolResult.returnData);\n  const decimals = Number(BigInt(decimalsResult.returnData));\n\n  return [symbol, decimals];\n}\n", "function processLog(log: EnrichedLogWithoutAmount): ProcessedLog {\n  const { topics, data, decimals, symbol, address } = log;\n  const { 1: fromHex, 2: toHex } = topics;\n  const from = convertHexToAddress(fromHex);\n  const to = convertHexToAddress(toHex);\n  const amount = formatUnits(data, decimals);\n\n  return { to, from, symbol, amount, address, decimals };\n}\n\nexport async function enrichTxReceipt({\n  transactionReceipt,\n  tryBlockAndAggregate,\n}: EnrichedTxReceiptArgs): Promise<EnrichedTxReceipt> {\n  const { from, logs } = transactionReceipt;\n  const filteredLogs = logs.filter(\n    (log) => log.topics[0] === EVENT_SIGNATURES.Transfer\n  );\n\n  const calls = filteredLogs.flatMap((log) => [\n    { target: log.address, callData: ERC20_FUNCTION_HASHES.symbol },\n    { target: log.address, callData: ERC20_FUNCTION_HASHES.decimals },\n  ]);\n\n  const { 2: results } = await tryBlockAndAggregate.staticCall(false, calls);\n\n  const enrichedLogs = filteredLogs.map((log, i) => {\n    const symbolResult = results[i * 2];\n    const decimalsResult = results[i * 2 + 1];\n    const enrichedLog = {\n      ...log,\n      symbol: parseHexDataToString(symbolResult.returnData),\n      decimals: Number(BigInt(decimalsResult.returnData)),\n    };\n\n    return processLog(enrichedLog);\n  });\n\n  return { from, logs: enrichedLogs };\n}\n", "export async function enrichTxReceipt({\n  transactionReceipt,\n  tryBlockAndAggregate,\n}: EnrichedTxReceiptArgs): Promise<EnrichedTxReceipt> {\n  const { from, logs } = transactionReceipt;\n  const filteredLogs = logs.filter(\n    (log) => log.topics[0] === EVENT_SIGNATURES.Transfer\n  );\n\n  const calls = filteredLogs.flatMap((log) => [\n    { target: log.address, callData: ERC20_FUNCTION_HASHES.symbol },\n    { target: log.address, callData: ERC20_FUNCTION_HASHES.decimals },\n  ]);\n\n  const { 2: results } = await tryBlockAndAggregate.staticCall(false, calls);\n\n  const enrichedLogs = filteredLogs.map((log, i) => {\n    const symbolResult = results[i * 2];\n    const decimalsResult = results[i * 2 + 1];\n    const enrichedLog = {\n      ...log,\n      symbol: parseHexDataToString(symbolResult.returnData),\n      decimals: Number(BigInt(decimalsResult.returnData)),\n    };\n\n    return processLog(enrichedLog);\n  });\n\n  return { from, logs: enrichedLogs };\n}\n", "export function extractTokenInfo(\n  inputLog: ProcessedLog,\n  outputLog: ProcessedLog\n) {\n  return {\n    tokenIn: {\n      symbol: inputLog.symbol,\n      amount: inputLog.amount,\n      address: inputLog.address,\n    },\n    tokenOut: {\n      symbol: outputLog.symbol,\n      amount: outputLog.amount,\n      address: outputLog.address,\n    },\n  };\n}\n"]}
{"filename": "src/tests/fillLimitOrder.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xbe734b761ccd45cc60a5b4828eb83da96405d663567a46041b049627dddf347d\nit(\"parses swap from fillLimitOrder\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xbe734b761ccd45cc60a5b4828eb83da96405d663567a46041b049627dddf347d\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDT\",\n      amount: \"1.6\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"0.001\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xbe734b761ccd45cc60a5b4828eb83da96405d663567a46041b049627dddf347d\nit(\"parses swap from fillLimitOrder\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xbe734b761ccd45cc60a5b4828eb83da96405d663567a46041b049627dddf347d\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDT\",\n      amount: \"1.6\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"0.001\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/multiplexMultiHopSellTokenForToken.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xf705df9127065ae8a8da3c1939d7096011ea13c81e4a2ed8c59ea1b039f7565d\nit(\"parses swap from multiplexMultiHopSellTokenForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash: \"0xf705df9127065ae8a8da3c1939d7096011ea13c81e4a2ed8c59ea1b039f7565d\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"LINK\",\n      amount: \"503.8124966\",\n      address: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    },\n    tokenOut: {\n      symbol: \"DAO\",\n      amount: \"2014.179756573835415392\",\n      address: \"0x0f51bb10119727a7e5eA3538074fb341F56B09Ad\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xf705df9127065ae8a8da3c1939d7096011ea13c81e4a2ed8c59ea1b039f7565d\nit(\"parses swap from multiplexMultiHopSellTokenForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash: \"0xf705df9127065ae8a8da3c1939d7096011ea13c81e4a2ed8c59ea1b039f7565d\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"LINK\",\n      amount: \"503.8124966\",\n      address: \"0x514910771AF9Ca656af840dff83E8264EcF986CA\",\n    },\n    tokenOut: {\n      symbol: \"DAO\",\n      amount: \"2014.179756573835415392\",\n      address: \"0x0f51bb10119727a7e5eA3538074fb341F56B09Ad\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/multiplexBatchSellEthForToken.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xe59ff84284d7e2ad87f1a6de55d5d6600b0b721242110687847e57b52a045b7d\nit(\"parses swap from multiplexBatchSellEthForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xe59ff84284d7e2ad87f1a6de55d5d6600b0b721242110687847e57b52a045b7d\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"10\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"X2Y2\",\n      amount: \"90095.36724488341\",\n      address: \"0x1E4EDE388cbc9F4b5c79681B7f94d36a11ABEBC9\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xe59ff84284d7e2ad87f1a6de55d5d6600b0b721242110687847e57b52a045b7d\nit(\"parses swap from multiplexBatchSellEthForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xe59ff84284d7e2ad87f1a6de55d5d6600b0b721242110687847e57b52a045b7d\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"10\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"X2Y2\",\n      amount: \"90095.36724488341\",\n      address: \"0x1E4EDE388cbc9F4b5c79681B7f94d36a11ABEBC9\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/sellTokenForEthToUniswapV3.test.ts", "chunked_list": ["import { describe, expect, it } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x822d38c0746b19544cedddd9a1ebaacadd3e5da55dc293738ae135fc595e269b\ndescribe(\"parseSwap\", () => {\n  it(\"parses swap from sellTokenForEthToUniswapV3\", async () => {\n    const data = await parseSwap({\n      transactionHash: '0x822d38c0746b19544cedddd9a1ebaacadd3e5da55dc293738ae135fc595e269b',\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"\u273aRUG\",\n        amount: \"56322.215316673764925169\",\n        address: '0xD2d8D78087D0E43BC4804B6F946674b2Ee406b80',\n      },\n      tokenOut: {\n        symbol: \"WETH\",\n        amount: \"0.218304893918707078\",\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n    });\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x822d38c0746b19544cedddd9a1ebaacadd3e5da55dc293738ae135fc595e269b\ndescribe(\"parseSwap\", () => {\n  it(\"parses swap from sellTokenForEthToUniswapV3\", async () => {\n    const data = await parseSwap({\n      transactionHash: '0x822d38c0746b19544cedddd9a1ebaacadd3e5da55dc293738ae135fc595e269b',\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"\u273aRUG\",\n        amount: \"56322.215316673764925169\",\n        address: '0xD2d8D78087D0E43BC4804B6F946674b2Ee406b80',\n      },\n      tokenOut: {\n        symbol: \"WETH\",\n        amount: \"0.218304893918707078\",\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n      },\n    });\n  });\n});\n"]}
{"filename": "src/tests/sellToUniswap.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xd6a7aeda4a2978c80b03700e3136c6895b48d08cd9c8d4c88dfd19dee0a12795\nit(\"parses swap from sellToUniswap\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xd6a7aeda4a2978c80b03700e3136c6895b48d08cd9c8d4c88dfd19dee0a12795\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"0.016858343555927415\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"USDT\",\n      amount: \"30.149999\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xd6a7aeda4a2978c80b03700e3136c6895b48d08cd9c8d4c88dfd19dee0a12795\nit(\"parses swap from sellToUniswap\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xd6a7aeda4a2978c80b03700e3136c6895b48d08cd9c8d4c88dfd19dee0a12795\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"0.016858343555927415\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"USDT\",\n      amount: \"30.149999\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/fillTakerSignedOtcOrderForEth.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x5f0ed4396f68e0321e48d50611cc6663af68bf7cbee6bc8e74ff5c63d90f3b68\nit(\"parses swap from fillTakerSignedOtcOrderForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x5f0ed4396f68e0321e48d50611cc6663af68bf7cbee6bc8e74ff5c63d90f3b68\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDC\",\n      amount: \"25000\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"13.848320444784979968\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x5f0ed4396f68e0321e48d50611cc6663af68bf7cbee6bc8e74ff5c63d90f3b68\nit(\"parses swap from fillTakerSignedOtcOrderForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x5f0ed4396f68e0321e48d50611cc6663af68bf7cbee6bc8e74ff5c63d90f3b68\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDC\",\n      amount: \"25000\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"13.848320444784979968\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/multiplexMultiHopSellTokenForEth.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xba3a89b2164e5f169bc81e90a13f8946d110dffe2b53393953ea2a4fede8e81e\nit(\"parses swap from multiplexMultiHopSellTokenForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash: \"0xba3a89b2164e5f169bc81e90a13f8946d110dffe2b53393953ea2a4fede8e81e\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"LSS\",\n      amount: \"20065.979484072366300492\",\n      address: \"0x3B9BE07d622aCcAEd78f479BC0EDabFd6397E320\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"3.305750792360646949\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xba3a89b2164e5f169bc81e90a13f8946d110dffe2b53393953ea2a4fede8e81e\nit(\"parses swap from multiplexMultiHopSellTokenForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash: \"0xba3a89b2164e5f169bc81e90a13f8946d110dffe2b53393953ea2a4fede8e81e\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"LSS\",\n      amount: \"20065.979484072366300492\",\n      address: \"0x3B9BE07d622aCcAEd78f479BC0EDabFd6397E320\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"3.305750792360646949\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/permitAndCall.test.ts", "chunked_list": ["import { describe, expect, it } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\ndescribe(\"permitAndCall\", () => {\n  // https://etherscan.io/tx/0x5eac379185f24ddeba7fcd4414779df77ecfd1102da6ebf6dacf25b01a14b241\n  it(\"parses swap\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x5eac379185f24ddeba7fcd4414779df77ecfd1102da6ebf6dacf25b01a14b241\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDC\",\n        amount: \"20\",\n        address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      },\n      tokenOut: {\n        symbol: \"USDT\",\n        amount: \"8.735176\",\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x96f00ee10fb5bc7a71865d0efef87e1105946b5a7a87d44ccc8a60fa852ba467\n  it(\"parses swap with a meta transaction that wraps multiplexBatchSellTokenForEth\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x96f00ee10fb5bc7a71865d0efef87e1105946b5a7a87d44ccc8a60fa852ba467\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"cbETH\",\n        amount: \"0.1485446807974644\",\n        address: \"0xBe9895146f7AF43049ca1c1AE358B0541Ea49704\",\n      },\n      tokenOut: {\n        symbol: \"ETH\",\n        amount: \"0.1540473741459534\",\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x142909f33e8b9882c73da6dc85193a81cd2bfa3bd39d485dd901d3b70e985ee4\n  it(\"parses swap with a meta transaction that wraps transformERC20\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x142909f33e8b9882c73da6dc85193a81cd2bfa3bd39d485dd901d3b70e985ee4\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"BAL\",\n        amount: \"50.883400023914484682\",\n        address: \"0xba100000625a3754423978a60c9317c58a424e3D\",\n      },\n      tokenOut: {\n        symbol: \"ETH\",\n        amount: \"0.144785082557763087\",\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x911354147775d4460259809bf7606b6a0f06c70a788856bd7f9371411abf3a5e\n  it(\"parses swap with a meta transaction that wraps multiplexBatchSellTokenForToken\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x911354147775d4460259809bf7606b6a0f06c70a788856bd7f9371411abf3a5e\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDC\",\n        amount: \"7938.859514\",\n        address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      },\n      tokenOut: {\n        symbol: \"HEX\",\n        amount: \"545031.76796769\",\n        address: \"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\n      },\n    });\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\ndescribe(\"permitAndCall\", () => {\n  // https://etherscan.io/tx/0x5eac379185f24ddeba7fcd4414779df77ecfd1102da6ebf6dacf25b01a14b241\n  it(\"parses swap\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x5eac379185f24ddeba7fcd4414779df77ecfd1102da6ebf6dacf25b01a14b241\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDC\",\n        amount: \"20\",\n        address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      },\n      tokenOut: {\n        symbol: \"USDT\",\n        amount: \"8.735176\",\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x96f00ee10fb5bc7a71865d0efef87e1105946b5a7a87d44ccc8a60fa852ba467\n  it(\"parses swap with a meta transaction that wraps multiplexBatchSellTokenForEth\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x96f00ee10fb5bc7a71865d0efef87e1105946b5a7a87d44ccc8a60fa852ba467\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"cbETH\",\n        amount: \"0.1485446807974644\",\n        address: \"0xBe9895146f7AF43049ca1c1AE358B0541Ea49704\",\n      },\n      tokenOut: {\n        symbol: \"ETH\",\n        amount: \"0.1540473741459534\",\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x142909f33e8b9882c73da6dc85193a81cd2bfa3bd39d485dd901d3b70e985ee4\n  it(\"parses swap with a meta transaction that wraps transformERC20\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x142909f33e8b9882c73da6dc85193a81cd2bfa3bd39d485dd901d3b70e985ee4\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"BAL\",\n        amount: \"50.883400023914484682\",\n        address: \"0xba100000625a3754423978a60c9317c58a424e3D\",\n      },\n      tokenOut: {\n        symbol: \"ETH\",\n        amount: \"0.144785082557763087\",\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x911354147775d4460259809bf7606b6a0f06c70a788856bd7f9371411abf3a5e\n  it(\"parses swap with a meta transaction that wraps multiplexBatchSellTokenForToken\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x911354147775d4460259809bf7606b6a0f06c70a788856bd7f9371411abf3a5e\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDC\",\n        amount: \"7938.859514\",\n        address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n      },\n      tokenOut: {\n        symbol: \"HEX\",\n        amount: \"545031.76796769\",\n        address: \"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\n      },\n    });\n  });\n});\n"]}
{"filename": "src/tests/transformERC20.test.ts", "chunked_list": ["import { Contract } from \"ethers\";\nimport { it, expect, describe } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport { EXCHANGE_PROXY_BY_CHAIN_ID } from \"../constants\";\nimport { transformERC20 } from \"../parsers\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;", "\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\ndescribe(\"transformERC20\", () => {\n  it(\"returns undefined when TransformedERC20 topic is not found in logs\", async () => {\n    const contract = new Contract(\n      EXCHANGE_PROXY_BY_CHAIN_ID[1],\n      EXCHANGE_PROXY_ABI.compilerOutput.abi\n    );\n\n    const transactionReceipt = {\n      from: \"0x8C410057a8933d579926dEcCD043921A974A24ee\",\n      hash: \"0xee3ffb65f6c8e07b46471cc610cf721affeefed87098c7db30a8147d50eb2a65\",\n      logs: [],\n      to: \"0xDef1C0ded9bec7F1a1670819833240f027b25EfF\",\n    };\n\n    const result = await transformERC20({\n      transactionReceipt,\n      contract,\n      rpcUrl: ETH_MAINNET_RPC,\n    } as any);\n\n    expect(result).toBe(undefined);\n  });\n});\n\ndescribe(\"transformERC20 on various networks\", () => {\n  // https://etherscan.io/tx/0x30d015e87dd5481609eec1c54433b8d4679fe641034971baf648d4528a9b0a35\n  it(\"Ethereum mainnet: parse a swap with native input asset\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x30d015e87dd5481609eec1c54433b8d4679fe641034971baf648d4528a9b0a35\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n        symbol: \"ETH\",\n        amount: \"332.666067836453233036\",\n      },\n      tokenOut: {\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n        symbol: \"USDT\",\n        amount: \"500000.317382\",\n      },\n    });\n  });\n\n  // https://etherscan.io/tx/0x4db5b7168686cdfb1469b47a67f03fb6199aa81f3d2a26c4a05835b8752d152d\n  it(\"Ethereum mainnet: parse a swap with ERC-20 input asset\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x4db5b7168686cdfb1469b47a67f03fb6199aa81f3d2a26c4a05835b8752d152d\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDT\",\n        amount: \"275.0\",\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n      },\n      tokenOut: {\n        symbol: \"MUTE\",\n        amount: \"183.067612917791449241\",\n        address: \"0xA49d7499271aE71cd8aB9Ac515e6694C755d400c\",\n      },\n    });\n  });\n\n  // https://arbiscan.io/tx/0x3e48c1d1d3596ecfc1f9feb9e9613f5f5fc002b76743251c31eca8bc0aa30e21\n  it(\"parse a swap on Arbitrum\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x3e48c1d1d3596ecfc1f9feb9e9613f5f5fc002b76743251c31eca8bc0aa30e21\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        address: \"0xfc5A1A6EB076a2C7aD06eD22C90d7E710E35ad0a\",\n        amount: \"36834.421293958495524657\",\n        symbol: \"GMX\",\n      },\n      tokenOut: {\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n        amount: \"1189.251717722346544033\",\n        symbol: \"ETH\",\n      },\n    });\n  });\n\n  // https://optimistic.etherscan.io/tx/0x0d8125a0d77af877c5efd475e0b2a8aa7451c2b5b95e2918387f8a038aacd718\n  it(\"parse a swap on Optimism\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x0d8125a0d77af877c5efd475e0b2a8aa7451c2b5b95e2918387f8a038aacd718\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://endpoints.omniatech.io/v1/op/mainnet/public\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n        amount: \"51.0\",\n        symbol: \"ETH\",\n      },\n      tokenOut: {\n        address: \"0x9A601C5bb360811d96A23689066af316a30c3027\",\n        amount: \"217794.381575767372449449\",\n        symbol: \"PIKA\",\n      },\n    });\n  });\n\n  // https://snowtrace.io/tx/0x989436aff2791d355a08b87c9a97288699ed5a44a75897a963925b1922e12dbb\n  it(\"parse a swap on Avalanche\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x989436aff2791d355a08b87c9a97288699ed5a44a75897a963925b1922e12dbb\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://api.avax.network/ext/bc/C/rpc\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        address: \"0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E\",\n        amount: \"25650.0\",\n        symbol: \"USDC\",\n      },\n      tokenOut: {\n        address: \"0x152b9d0FdC40C096757F570A51E494bd4b943E50\",\n        amount: \"0.99966847\",\n        symbol: \"BTC.b\",\n      },\n    });\n  });\n\n  // https://ftmscan.com/tx/0xc48de1d0482475d76a13107b4d438605abe0d2223e75167fc46d6d6a54d954c2\n  it(\"parse a swap on Fantom\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0xc48de1d0482475d76a13107b4d438605abe0d2223e75167fc46d6d6a54d954c2\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://rpc.ftm.tools\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n        amount: \"375000.0\",\n        symbol: \"FTM\",\n      },\n      tokenOut: {\n        address: \"0x04068DA6C83AFCFA0e13ba15A6696662335D5B75\",\n        amount: \"126441.837374\",\n        symbol: \"USDC\",\n      },\n    });\n  });\n\n  // https://bscscan.com/tx/0x789d6d51ceb6d32407c97757e4be90c12f789927453413318178bed0ebc53bc0\n  it(\"parse a swap on BNB Chain\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x789d6d51ceb6d32407c97757e4be90c12f789927453413318178bed0ebc53bc0\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://bscrpc.com\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        address: \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\",\n        amount: \"400142.7162326532\",\n        symbol: \"BUSD\",\n      },\n      tokenOut: {\n        address: \"0x55d398326f99059fF775485246999027B3197955\",\n        amount: \"399966.973708709289660215\",\n        symbol: \"USDT\",\n      },\n    });\n  });\n});\n\n// https://explorer.celo.org/tx/0x615c5089f772a8f2074750e8c6070013d288af7681435aba1771f6bfc63d1286\nit(\"parse a swap on Celo\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x615c5089f772a8f2074750e8c6070013d288af7681435aba1771f6bfc63d1286\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: \"https://rpc.ankr.com/celo\",\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      address: \"0x765DE816845861e75A25fCA122bb6898B8B1282a\",\n      amount: \"500.0\",\n      symbol: \"cUSD\",\n    },\n    tokenOut: {\n      address: \"0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe\",\n      amount: \"23390.112524333224016754\",\n      symbol: \"SOURCE\",\n    },\n  });\n});\n\n// https://basescan.org/tx/0x26ca796e654a3667957c25e7714c5d6d5de1fc845ebf98d8ee217f9f5e2c5f34\nit(\"parse a swap on Base\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x26ca796e654a3667957c25e7714c5d6d5de1fc845ebf98d8ee217f9f5e2c5f34\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: \"https://mainnet.base.org\",\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n      amount: \"0.005446885313391051\",\n      symbol: \"ETH\",\n    },\n    tokenOut: {\n      address: \"0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA\",\n      amount: \"10.049999\",\n      symbol: \"USDbC\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/multiplexBatchSellTokenForEth.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x0caebae93af96f83c4d2434816d079d1b43e9061dcaca8627bd9e2c0917a3b63\nit(\"parses swap from multiplexBatchSellTokenForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x0caebae93af96f83c4d2434816d079d1b43e9061dcaca8627bd9e2c0917a3b63\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"BORING\",\n      amount: \"181533.55587344\",\n      address: \"0xBC19712FEB3a26080eBf6f2F7849b417FdD792CA\",\n    },\n    tokenOut: {\n      symbol: \"ETH\",\n      amount: \"0.48027902546177326\",\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x0caebae93af96f83c4d2434816d079d1b43e9061dcaca8627bd9e2c0917a3b63\nit(\"parses swap from multiplexBatchSellTokenForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x0caebae93af96f83c4d2434816d079d1b43e9061dcaca8627bd9e2c0917a3b63\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"BORING\",\n      amount: \"181533.55587344\",\n      address: \"0xBC19712FEB3a26080eBf6f2F7849b417FdD792CA\",\n    },\n    tokenOut: {\n      symbol: \"ETH\",\n      amount: \"0.48027902546177326\",\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/index.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\nimport { EXCHANGE_PROXY_ABI_URL } from \"../constants\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xe393e03e31ba2b938326ef0527aba08b4e7f2d144ac2a2172c57615990698ee6", "\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xe393e03e31ba2b938326ef0527aba08b4e7f2d144ac2a2172c57615990698ee6\nit(\"returns null when the smart contract function name is not supported\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xe393e03e31ba2b938326ef0527aba08b4e7f2d144ac2a2172c57615990698ee6\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toBe(null);\n});\n\n// https://etherscan.io/tx/0x335b2a3faf4a15cd6f67f1ec7ed26ee04ea7cc248f5cd052967e6ae672af8d35\nit(\"returns null when the transaction reverted\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x335b2a3faf4a15cd6f67f1ec7ed26ee04ea7cc248f5cd052967e6ae672af8d35\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toBe(null);\n});\n\nit(\"throws an error when required arguments are not passed\", () => {\n  expect(async () => {\n    await parseSwap({\n      transactionHash: \"0x\u2026\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    } as any);\n  }).rejects.toThrowError(\"Missing rpcUrl\");\n\n  expect(async () => {\n    await parseSwap({\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    } as any);\n  }).rejects.toThrowError(\"Missing transaction hash\");\n\n  expect(async () => {\n    await parseSwap({\n      transactionHash: \"0x\u2026\",\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n  }).rejects.toThrowError(\n    `Missing 0x Exchange Proxy ABI: ${EXCHANGE_PROXY_ABI_URL}`\n  );\n});\n\nit(\"throws an error if the chainId is not supported\", () => {\n  expect(async () => {\n    await parseSwap({\n      transactionHash:\n        \"0x689eaa9ad3db373b241330be646e450d5b8bb3faad7f0c3260c63b9ef6765fcb\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://rpc.gnosis.gateway.fm\",\n    });\n  }).rejects.toThrowError(\"chainId 100 is unsupported.\");\n});\n"]}
{"filename": "src/tests/sellTokenForTokenToUniswapV3.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x90dbdd630287a0412f88cbc98b0d751bc81c613bb285898dac461b523cd07a5a\nit(\"parses swap from sellTokenForTokenToUniswapV3\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x90dbdd630287a0412f88cbc98b0d751bc81c613bb285898dac461b523cd07a5a\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDC\",\n      amount: \"3500\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      symbol: \"CRV\",\n      amount: \"3490.286498060619473095\",\n      address: \"0xD533a949740bb3306d119CC777fa900bA034cd52\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x90dbdd630287a0412f88cbc98b0d751bc81c613bb285898dac461b523cd07a5a\nit(\"parses swap from sellTokenForTokenToUniswapV3\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x90dbdd630287a0412f88cbc98b0d751bc81c613bb285898dac461b523cd07a5a\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDC\",\n      amount: \"3500\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      symbol: \"CRV\",\n      amount: \"3490.286498060619473095\",\n      address: \"0xD533a949740bb3306d119CC777fa900bA034cd52\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/executeMetaTransaction.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nconst POLYGON_MAINNET_RPC = \"https://rpc.ankr.com/polygon\";\n\n// https://polygonscan.com/tx/0xaa61b2058fafae1532565b6acadf47a8fe604518185f535e2780dd28d626e0ef\nit(\"parses swap from executeMetaTransaction\", async () => {\n  const data = await parseSwap({\n    transactionHash:", "  const data = await parseSwap({\n    transactionHash:\n      \"0xaa61b2058fafae1532565b6acadf47a8fe604518185f535e2780dd28d626e0ef\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: POLYGON_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WMATIC\",", "    tokenIn: {\n      symbol: \"WMATIC\",\n      amount: \"8.54621988\",\n      address: \"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\n    },\n    tokenOut: {\n      symbol: \"PAXG\",\n      amount: \"0.00488474242697242\",\n      address: \"0x553d3D295e0f695B9228246232eDF400ed3560B5\",\n    },", "      address: \"0x553d3D295e0f695B9228246232eDF400ed3560B5\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/multiplexMultiHopSellEthForToken.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x00b191d47269265cfbbc94c77a114281ee939463b7a922e8bfbf7de8bc150c5c\nit(\"parses swap from multiplexMultiHopSellEthForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash: \"0x00b191d47269265cfbbc94c77a114281ee939463b7a922e8bfbf7de8bc150c5c\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"3\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"XCAD\",\n      amount: \"2705.968001258040126473\",\n      address: \"0x7659CE147D0e714454073a5dd7003544234b6Aa0\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x00b191d47269265cfbbc94c77a114281ee939463b7a922e8bfbf7de8bc150c5c\nit(\"parses swap from multiplexMultiHopSellEthForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash: \"0x00b191d47269265cfbbc94c77a114281ee939463b7a922e8bfbf7de8bc150c5c\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"3\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"XCAD\",\n      amount: \"2705.968001258040126473\",\n      address: \"0x7659CE147D0e714454073a5dd7003544234b6Aa0\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/executeMetaTransactionV2.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x3e22063b0a1be3e8a7a902b6a2ecd86d7753279ef368e21b99d23e431d759f71\nit(\"parses swap from executeMetaTransactionV2 which wraps transformERC20\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x3e22063b0a1be3e8a7a902b6a2ecd86d7753279ef368e21b99d23e431d759f71\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDC\",\n      amount: \"9960.981086\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      symbol: \"WBTC\",\n      amount: \"0.35487978\",\n      address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    },\n  });\n});\n\n// https://etherscan.io/tx/0xc772258418e5d73bcf891ef341a42c0d74d8f84beda7f9e8580eacc0d62ba3c7\nit(\"parses swap from executeMetaTransactionV2 which wraps multiplexBatchSellTokenForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xc772258418e5d73bcf891ef341a42c0d74d8f84beda7f9e8580eacc0d62ba3c7\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"4972.542335\",\n      symbol: \"USDT\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n    tokenOut: {\n      amount: \"2.6043201133029994\",\n      symbol: \"ETH\",\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    },\n  });\n});\n\n// https://etherscan.io/tx/0xa4fa7313361c1be65bcec51217ad795028c8fd0ce9eacaff7aab546c29017921\nit(\"parses swap from executeMetaTransactionV2 which wraps multiplexBatchSellTokenForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xa4fa7313361c1be65bcec51217ad795028c8fd0ce9eacaff7aab546c29017921\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"2.886827\",\n      symbol: \"WETH\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      amount: \"384833.18203482\",\n      symbol: \"HEX\",\n      address: \"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\n    },\n  });\n});\n\n// https://etherscan.io/tx/0xee3ffb65f6c8e07b46471cc610cf721affeefed87098c7db30a8147d50eb2a65\nit(\"parses swap from executeMetaTransactionV2 which wraps transformERC20\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xee3ffb65f6c8e07b46471cc610cf721affeefed87098c7db30a8147d50eb2a65\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"399.98912868386398826\",\n      symbol: \"cbETH\",\n      address: \"0xBe9895146f7AF43049ca1c1AE358B0541Ea49704\",\n    },\n    tokenOut: {\n      amount: \"410.723904828710787856\",\n      symbol: \"ETH\",\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x3e22063b0a1be3e8a7a902b6a2ecd86d7753279ef368e21b99d23e431d759f71\nit(\"parses swap from executeMetaTransactionV2 which wraps transformERC20\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x3e22063b0a1be3e8a7a902b6a2ecd86d7753279ef368e21b99d23e431d759f71\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDC\",\n      amount: \"9960.981086\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      symbol: \"WBTC\",\n      amount: \"0.35487978\",\n      address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    },\n  });\n});\n\n// https://etherscan.io/tx/0xc772258418e5d73bcf891ef341a42c0d74d8f84beda7f9e8580eacc0d62ba3c7\nit(\"parses swap from executeMetaTransactionV2 which wraps multiplexBatchSellTokenForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xc772258418e5d73bcf891ef341a42c0d74d8f84beda7f9e8580eacc0d62ba3c7\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"4972.542335\",\n      symbol: \"USDT\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n    tokenOut: {\n      amount: \"2.6043201133029994\",\n      symbol: \"ETH\",\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    },\n  });\n});\n\n// https://etherscan.io/tx/0xa4fa7313361c1be65bcec51217ad795028c8fd0ce9eacaff7aab546c29017921\nit(\"parses swap from executeMetaTransactionV2 which wraps multiplexBatchSellTokenForToken\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xa4fa7313361c1be65bcec51217ad795028c8fd0ce9eacaff7aab546c29017921\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"2.886827\",\n      symbol: \"WETH\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      amount: \"384833.18203482\",\n      symbol: \"HEX\",\n      address: \"0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39\",\n    },\n  });\n});\n\n// https://etherscan.io/tx/0xee3ffb65f6c8e07b46471cc610cf721affeefed87098c7db30a8147d50eb2a65\nit(\"parses swap from executeMetaTransactionV2 which wraps transformERC20\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0xee3ffb65f6c8e07b46471cc610cf721affeefed87098c7db30a8147d50eb2a65\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"399.98912868386398826\",\n      symbol: \"cbETH\",\n      address: \"0xBe9895146f7AF43049ca1c1AE358B0541Ea49704\",\n    },\n    tokenOut: {\n      amount: \"410.723904828710787856\",\n      symbol: \"ETH\",\n      address: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/sellToLiquidityProvider.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x2a4379d531695dd4f142730edb7720bb9d06dfb405322e0e16acbfd8ba4fcb98\nit(\"parses swap from sellToLiquidityProvider\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x2a4379d531695dd4f142730edb7720bb9d06dfb405322e0e16acbfd8ba4fcb98\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"STG\",\n      amount: \"918.996239437320809884\",\n      address: \"0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6\",\n    },\n    tokenOut: {\n      symbol: \"USDC\",\n      amount: \"692.783026\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x2a4379d531695dd4f142730edb7720bb9d06dfb405322e0e16acbfd8ba4fcb98\nit(\"parses swap from sellToLiquidityProvider\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x2a4379d531695dd4f142730edb7720bb9d06dfb405322e0e16acbfd8ba4fcb98\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"STG\",\n      amount: \"918.996239437320809884\",\n      address: \"0xAf5191B0De278C7286d6C7CC6ab6BB8A73bA2Cd6\",\n    },\n    tokenOut: {\n      symbol: \"USDC\",\n      amount: \"692.783026\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/fillOtcOrderWithEth.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x68608bec5c30750a6a358b14eb937a07f10f72c84428bdf6eae80f52c27faf53\nit(\"parses swap from fillOtcOrderWithEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x68608bec5c30750a6a358b14eb937a07f10f72c84428bdf6eae80f52c27faf53\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"0.9\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"USDC\",\n      amount: \"1384.074396\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x68608bec5c30750a6a358b14eb937a07f10f72c84428bdf6eae80f52c27faf53\nit(\"parses swap from fillOtcOrderWithEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x68608bec5c30750a6a358b14eb937a07f10f72c84428bdf6eae80f52c27faf53\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"0.9\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"USDC\",\n      amount: \"1384.074396\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/fillTakerSignedOtcOrder.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x7f31ba7cacfda809ea24d4b9f87c44fb4114608666c7dd1c6553986ce88dc92b\nit(\"parses swap from fillTakerSignedOtcOrder\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x7f31ba7cacfda809ea24d4b9f87c44fb4114608666c7dd1c6553986ce88dc92b\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"3.919122810830431232\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"WBTC\",\n      amount: \"0.25\",\n      address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x7f31ba7cacfda809ea24d4b9f87c44fb4114608666c7dd1c6553986ce88dc92b\nit(\"parses swap from fillTakerSignedOtcOrder\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x7f31ba7cacfda809ea24d4b9f87c44fb4114608666c7dd1c6553986ce88dc92b\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"3.919122810830431232\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n    tokenOut: {\n      symbol: \"WBTC\",\n      amount: \"0.25\",\n      address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/multiplexBatchSellTokenForToken.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xb2c5a697a3126af96d2aa20ba6dcd0daaf9ec6baa49de2a76682dfe4258d2e56\n\nit(\"parses swap from multiplexBatchSellTokenForToken\", async () => {\n  const data = await parseSwap({\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    transactionHash:\n      \"0xb2c5a697a3126af96d2aa20ba6dcd0daaf9ec6baa49de2a76682dfe4258d2e56\",\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"329656.871822\",\n      symbol: \"USDC\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      amount: \"11.5568887\",\n      symbol: \"WBTC\",\n      address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xb2c5a697a3126af96d2aa20ba6dcd0daaf9ec6baa49de2a76682dfe4258d2e56\n\nit(\"parses swap from multiplexBatchSellTokenForToken\", async () => {\n  const data = await parseSwap({\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    transactionHash:\n      \"0xb2c5a697a3126af96d2aa20ba6dcd0daaf9ec6baa49de2a76682dfe4258d2e56\",\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      amount: \"329656.871822\",\n      symbol: \"USDC\",\n      address: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    },\n    tokenOut: {\n      amount: \"11.5568887\",\n      symbol: \"WBTC\",\n      address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/sellEthForTokenToUniswapV3.test.ts", "chunked_list": ["import { expect, it } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xc552e83ef96c5d523f69494ae61b7235a6304ab439e127eb0121d33bbcdaa1ff\nit(\"parses swap from sellEthForTokenToUniswapV3\", async () => {\n  const data = await parseSwap({\n    transactionHash: '0xc552e83ef96c5d523f69494ae61b7235a6304ab439e127eb0121d33bbcdaa1ff',\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"2.749441612813630418\",\n      address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    },\n    tokenOut: {\n      symbol: \"HEX\",\n      amount: \"50249.93952297\",\n      address: '0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39',\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0xc552e83ef96c5d523f69494ae61b7235a6304ab439e127eb0121d33bbcdaa1ff\nit(\"parses swap from sellEthForTokenToUniswapV3\", async () => {\n  const data = await parseSwap({\n    transactionHash: '0xc552e83ef96c5d523f69494ae61b7235a6304ab439e127eb0121d33bbcdaa1ff',\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"WETH\",\n      amount: \"2.749441612813630418\",\n      address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    },\n    tokenOut: {\n      symbol: \"HEX\",\n      amount: \"50249.93952297\",\n      address: '0x2b591e99afE9f32eAA6214f7B7629768c40Eeb39',\n    },\n  });\n});\n"]}
{"filename": "src/tests/sellToPancakeSwap.test.ts", "chunked_list": ["import { describe, expect, it } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nconst BSC_RPC = \"https://bsc-dataseed.binance.org\";\n\n// https://bscscan.com/tx/0x2076af859a54f5f0c7d4e1cd13b3906169a5e3697d8762b59062052d53466e94\ndescribe(\"sellToPancakeSwap tx: 0x2076af859a54f5f0c7d4e1cd13b3906169a5e3697d8762b59062052d53466e94\", () => {\n  it(\"parses swap from sellToPancakeSwap\", async () => {\n    const data = await parseSwap({", "  it(\"parses swap from sellToPancakeSwap\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x2076af859a54f5f0c7d4e1cd13b3906169a5e3697d8762b59062052d53466e94\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: BSC_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {", "    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"BUSD\",\n        amount: \"1155.41\",\n        address: \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\",\n      },\n      tokenOut: {\n        symbol: \"WBNB\",\n        amount: \"1.82210243305633351\",\n        address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",", "        amount: \"1.82210243305633351\",\n        address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n      },\n    });\n  });\n});\n\n// https://bscscan.com/tx/0x595b1684b8accec5fdd536dbdd9acb4ddcae9cfc21afcd65245d0a51a0e3582b\ndescribe(\"sellToPancakeSwap tx: 0x595b1684b8accec5fdd536dbdd9acb4ddcae9cfc21afcd65245d0a51a0e3582b\", () => {\n  it(\"parses swap from sellToPancakeSwap\", async () => {", "describe(\"sellToPancakeSwap tx: 0x595b1684b8accec5fdd536dbdd9acb4ddcae9cfc21afcd65245d0a51a0e3582b\", () => {\n  it(\"parses swap from sellToPancakeSwap\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0x595b1684b8accec5fdd536dbdd9acb4ddcae9cfc21afcd65245d0a51a0e3582b\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: BSC_RPC,\n    });\n\n    expect(data).toEqual({", "\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"WBNB\",\n        amount: \"1.2\",\n        address: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\n      },\n      tokenOut: {\n        symbol: \"BUSD\",\n        amount: \"319.903586514927545022\",", "        symbol: \"BUSD\",\n        amount: \"319.903586514927545022\",\n        address: \"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56\",\n      },\n    });\n  });\n});\n"]}
{"filename": "src/tests/fillOtcOrderForEth.test.ts", "chunked_list": ["import { it, expect } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x2c4cee137659650ef486fb46b657ec37c1b4fe18489956a5e058cf5585328fa7\nit(\"parses swap from fillOtcOrderForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x2c4cee137659650ef486fb46b657ec37c1b4fe18489956a5e058cf5585328fa7\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDT\",\n      amount: \"218.441376\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"0.1254399221596278\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\n// https://etherscan.io/tx/0x2c4cee137659650ef486fb46b657ec37c1b4fe18489956a5e058cf5585328fa7\nit(\"parses swap from fillOtcOrderForEth\", async () => {\n  const data = await parseSwap({\n    transactionHash:\n      \"0x2c4cee137659650ef486fb46b657ec37c1b4fe18489956a5e058cf5585328fa7\",\n    exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n    rpcUrl: ETH_MAINNET_RPC,\n  });\n\n  expect(data).toEqual({\n    tokenIn: {\n      symbol: \"USDT\",\n      amount: \"218.441376\",\n      address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    },\n    tokenOut: {\n      symbol: \"WETH\",\n      amount: \"0.1254399221596278\",\n      address: \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n    },\n  });\n});\n"]}
{"filename": "src/tests/fillOtcOrder.test.ts", "chunked_list": ["import { it, expect, describe } from \"vitest\";\nimport { parseSwap } from \"../index\";\nimport EXCHANGE_PROXY_ABI from \"../abi/IZeroEx.json\";\n\nrequire(\"dotenv\").config();\n\nconst ETH_MAINNET_RPC = process.env.ETH_MAINNET_RPC;\n\nif (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\ndescribe(\"fillOtcOrder\", () => {\n  // https://etherscan.io/tx/0xc9579b9e3cddebd3d48ccb0a719456d7c46869b2c3a536509ea88685c7a5efbb\n  it(\"parse a swap on Ethereum\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0xc9579b9e3cddebd3d48ccb0a719456d7c46869b2c3a536509ea88685c7a5efbb\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDT\",\n        amount: \"50000\",\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n      },\n      tokenOut: {\n        symbol: \"LDO\",\n        amount: \"21120.508370504671821824\",\n        address: \"0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\",\n      },\n    });\n  });\n\n  // https://arbiscan.io/tx/0x3e48c1d1d3596ecfc1f9feb9e9613f5f5fc002b76743251c31eca8bc0aa30e21\n  it(\"parse a swap on Arbitrum\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0xae78f94319844585bd9e8d4ecfefa2eb70e0cd0d49f76695ee7e4783bad4c1fc\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"ARB\",\n        amount: \"2050\",\n        address: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n      },\n      tokenOut: {\n        symbol: \"USDC\",\n        amount: \"1918.218706\",\n        address: \"0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8\",\n      },\n    });\n  });\n});\n", "if (!ETH_MAINNET_RPC) {\n  throw new Error(\"Missing environment variable `ETH_MAINNET_RPC`\");\n}\n\ndescribe(\"fillOtcOrder\", () => {\n  // https://etherscan.io/tx/0xc9579b9e3cddebd3d48ccb0a719456d7c46869b2c3a536509ea88685c7a5efbb\n  it(\"parse a swap on Ethereum\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0xc9579b9e3cddebd3d48ccb0a719456d7c46869b2c3a536509ea88685c7a5efbb\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: ETH_MAINNET_RPC,\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"USDT\",\n        amount: \"50000\",\n        address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n      },\n      tokenOut: {\n        symbol: \"LDO\",\n        amount: \"21120.508370504671821824\",\n        address: \"0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32\",\n      },\n    });\n  });\n\n  // https://arbiscan.io/tx/0x3e48c1d1d3596ecfc1f9feb9e9613f5f5fc002b76743251c31eca8bc0aa30e21\n  it(\"parse a swap on Arbitrum\", async () => {\n    const data = await parseSwap({\n      transactionHash:\n        \"0xae78f94319844585bd9e8d4ecfefa2eb70e0cd0d49f76695ee7e4783bad4c1fc\",\n      exchangeProxyAbi: EXCHANGE_PROXY_ABI.compilerOutput.abi,\n      rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n    });\n\n    expect(data).toEqual({\n      tokenIn: {\n        symbol: \"ARB\",\n        amount: \"2050\",\n        address: \"0x912CE59144191C1204E64559FE8253a0e49E6548\",\n      },\n      tokenOut: {\n        symbol: \"USDC\",\n        amount: \"1918.218706\",\n        address: \"0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8\",\n      },\n    });\n  });\n});\n"]}
{"filename": "src/parsers/index.ts", "chunked_list": ["import { formatUnits } from \"ethers\";\nimport { extractTokenInfo, fetchSymbolAndDecimal } from \"../utils\";\nimport {\n  CONTRACTS,\n  NATIVE_ASSET,\n  EVENT_SIGNATURES,\n  NATIVE_SYMBOL_BY_CHAIN_ID,\n  EXCHANGE_PROXY_BY_CHAIN_ID,\n} from \"../constants\";\nimport type {", "} from \"../constants\";\nimport type {\n  Contract,\n  TransactionReceipt,\n  TransactionDescription,\n} from \"ethers\";\nimport type {\n  SupportedChainId,\n  EnrichedTxReceipt,\n  TryBlockAndAggregate,", "  EnrichedTxReceipt,\n  TryBlockAndAggregate,\n  TransformERC20EventData,\n} from \"../types\";\n\nexport function sellToLiquidityProvider({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => from.toLowerCase() === log.from);\n  const outputLog = logs.find((log) => from.toLowerCase() === log.to);", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function multiplexMultiHopSellTokenForEth({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => from.toLowerCase() === log.from);\n  const outputLog = logs.find((log) => log.address === CONTRACTS.weth);\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function multiplexMultiHopSellEthForToken({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => log.address === CONTRACTS.weth);\n  const outputLog = logs.find((log) => log.to === from.toLowerCase());\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function fillTakerSignedOtcOrder({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const [order] = txDescription.args;\n  const { logs } = txReceipt;\n  const { 4: maker, 5: taker } = order as string[];", "  if (typeof maker === \"string\" && typeof taker === \"string\") {\n    const inputLog = logs.find((log) => log.from === taker.toLowerCase());\n    const outputLog = logs.find((log) => log.from === maker.toLowerCase());\n\n    if (inputLog && outputLog) {\n      return extractTokenInfo(inputLog, outputLog);\n    }\n  }\n}\n\nexport function fillOtcOrder({ txReceipt }: { txReceipt: EnrichedTxReceipt }) {\n  const { logs, from } = txReceipt;\n  const fromAddress = from.toLowerCase();\n  const inputLog = logs.find((log) => log.from === fromAddress);\n  const outputLog = logs.find((log) => log.to === fromAddress);\n", "export function fillOtcOrder({ txReceipt }: { txReceipt: EnrichedTxReceipt }) {\n  const { logs, from } = txReceipt;\n  const fromAddress = from.toLowerCase();\n  const inputLog = logs.find((log) => log.from === fromAddress);\n  const outputLog = logs.find((log) => log.to === fromAddress);\n\n  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n", "export function fillTakerSignedOtcOrderForEth({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs } = txReceipt;\n  const inputLog = logs.find((log) => log.address !== CONTRACTS.weth);\n  const outputLog = logs.find((log) => log.address === CONTRACTS.weth);\n\n  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function sellTokenForEthToUniswapV3({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => log.from === from.toLowerCase());\n  const outputLog = logs.find((log) => log.from !== from.toLowerCase());\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function sellTokenForTokenToUniswapV3({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => from.toLowerCase() === log.from);\n  const outputLog = logs.find((log) => from.toLowerCase() === log.to);\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function sellEthForTokenToUniswapV3({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => from.toLowerCase() !== log.to);\n  const outputLog = logs.find((log) => from.toLowerCase() === log.to);\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function sellToUniswap({ txReceipt }: { txReceipt: EnrichedTxReceipt }) {\n  const [inputLog, outputLog] = txReceipt.logs;\n\n  return extractTokenInfo(inputLog, outputLog);\n}\n", "export async function transformERC20({\n  chainId,\n  contract,\n  transactionReceipt,\n  tryBlockAndAggregate,\n}: {\n  contract: Contract;\n  chainId: SupportedChainId;\n  transactionReceipt: TransactionReceipt;\n  tryBlockAndAggregate: TryBlockAndAggregate;\n}) {\n  const nativeSymbol = NATIVE_SYMBOL_BY_CHAIN_ID[chainId];\n", "  for (const log of transactionReceipt.logs) {\n    const { topics, data } = log;\n    const [eventHash] = topics;\n    if (eventHash === EVENT_SIGNATURES.TransformedERC20) {\n      const logDescription = contract.interface.parseLog({\n        data,\n        topics: [...topics],\n      });\n      const {\n        1: inputToken,\n        2: outputToken,\n        3: inputTokenAmount,\n        4: outputTokenAmount,\n      } = logDescription!.args as unknown as TransformERC20EventData;\n\n      let inputSymbol: string;\n      let inputDecimal: number;\n      let outputSymbol: string;\n      let outputDecimal: number;\n", "      if (inputToken === NATIVE_ASSET) {\n        inputSymbol = nativeSymbol;\n        inputDecimal = 18;\n      } else {\n        [inputSymbol, inputDecimal] = await fetchSymbolAndDecimal(\n          inputToken,\n          tryBlockAndAggregate\n        );\n      }\n\n      if (outputToken === NATIVE_ASSET) {\n        outputSymbol = nativeSymbol;\n        outputDecimal = 18;\n      } else {\n        [outputSymbol, outputDecimal] = await fetchSymbolAndDecimal(\n          outputToken,\n          tryBlockAndAggregate\n        );\n      }\n\n      const inputAmount = formatUnits(inputTokenAmount, inputDecimal);\n      const outputAmount = formatUnits(outputTokenAmount, outputDecimal);\n\n      return {\n        tokenIn: {\n          address: inputToken,\n          amount: inputAmount,\n          symbol: inputSymbol,\n        },\n        tokenOut: {\n          address: outputToken,\n          amount: outputAmount,\n          symbol: outputSymbol,\n        },\n      };\n    }\n  }\n}\n", "      if (outputToken === NATIVE_ASSET) {\n        outputSymbol = nativeSymbol;\n        outputDecimal = 18;\n      } else {\n        [outputSymbol, outputDecimal] = await fetchSymbolAndDecimal(\n          outputToken,\n          tryBlockAndAggregate\n        );\n      }\n\n      const inputAmount = formatUnits(inputTokenAmount, inputDecimal);\n      const outputAmount = formatUnits(outputTokenAmount, outputDecimal);\n\n      return {\n        tokenIn: {\n          address: inputToken,\n          amount: inputAmount,\n          symbol: inputSymbol,\n        },\n        tokenOut: {\n          address: outputToken,\n          amount: outputAmount,\n          symbol: outputSymbol,\n        },\n      };\n    }\n  }\n}\n", "export function multiplexMultiHopSellTokenForToken({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { logs, from } = txReceipt;\n  const inputLog = logs.find((log) => from.toLowerCase() === log.from);\n  const outputLog = logs.find((log) => from.toLowerCase() === log.to);\n\n  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function multiplexBatchSellTokenForEth({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const { from, logs } = txReceipt;\n  const tokenData = {\n    [from.toLowerCase()]: { amount: \"0\", symbol: \"\", address: \"\" },\n    [CONTRACTS.weth.toLowerCase()]: {\n      amount: \"0\",\n      symbol: \"ETH\",\n      address: NATIVE_ASSET,\n    },\n  };\n\n  logs.forEach(({ address, symbol, amount, from }) => {\n    const erc20Address = address.toLowerCase();", "    if (tokenData[erc20Address]) {\n      tokenData[erc20Address].amount = String(\n        Number(tokenData[erc20Address].amount) + Number(amount)\n      );\n    }\n    if (tokenData[from]) {\n      tokenData[from].amount = String(\n        Number(tokenData[from].amount) + Number(amount)\n      );\n      tokenData[from].symbol = symbol;\n      tokenData[from].address = address;\n    }\n  });\n\n  return {\n    tokenIn: tokenData[from.toLowerCase()],\n    tokenOut: tokenData[CONTRACTS.weth.toLowerCase()],\n  };\n}\n", "export function multiplexBatchSellEthForToken({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const { logs } = txReceipt;\n  const { args, value } = txDescription;\n  const { 0: outputToken } = args;\n  const divisor = 1000000000000000000n; // 1e18, for conversion from wei to ether\n  const etherBigInt = value / divisor;\n  const remainderBigInt = value % divisor;\n  const ether = Number(etherBigInt) + Number(remainderBigInt) / Number(divisor);\n  const tokenOutAmount = logs.reduce((total, log) => {\n    return log.address === outputToken ? total + Number(log.amount) : total;\n  }, 0);\n  const inputLog = logs.find((log) => log.address === CONTRACTS.weth);\n  const outputLog = logs.find((log) => log.address === outputToken);\n", "  if (inputLog && outputLog) {\n    return {\n      tokenIn: {\n        symbol: inputLog.symbol,\n        amount: ether.toString(),\n        address: inputLog.address,\n      },\n      tokenOut: {\n        symbol: outputLog.symbol,\n        amount: tokenOutAmount.toString(),\n        address: outputLog.address,\n      },\n    };\n  }\n}\n", "export function multiplexBatchSellTokenForToken({\n  txDescription,\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const [inputContractAddress, outputContractAddress] = txDescription.args;\n\n  if (\n    typeof inputContractAddress === \"string\" &&\n    typeof outputContractAddress === \"string\"\n  ) {\n    const tokenData = {\n      [inputContractAddress]: { amount: \"0\", symbol: \"\", address: \"\" },\n      [outputContractAddress]: { amount: \"0\", symbol: \"\", address: \"\" },\n    };\n\n    txReceipt.logs.forEach(({ address, symbol, amount }) => {", "  if (\n    typeof inputContractAddress === \"string\" &&\n    typeof outputContractAddress === \"string\"\n  ) {\n    const tokenData = {\n      [inputContractAddress]: { amount: \"0\", symbol: \"\", address: \"\" },\n      [outputContractAddress]: { amount: \"0\", symbol: \"\", address: \"\" },\n    };\n\n    txReceipt.logs.forEach(({ address, symbol, amount }) => {\n      if (address in tokenData) {\n        tokenData[address].address = address;\n        tokenData[address].symbol = symbol;\n        tokenData[address].amount = (\n          Number(tokenData[address].amount) + Number(amount)\n        ).toString();\n      }\n    });\n\n    return {\n      tokenIn: tokenData[inputContractAddress],\n      tokenOut: tokenData[outputContractAddress],\n    };\n  }\n}\n", "      if (address in tokenData) {\n        tokenData[address].address = address;\n        tokenData[address].symbol = symbol;\n        tokenData[address].amount = (\n          Number(tokenData[address].amount) + Number(amount)\n        ).toString();\n      }\n    });\n\n    return {\n      tokenIn: tokenData[inputContractAddress],\n      tokenOut: tokenData[outputContractAddress],\n    };\n  }\n}\n", "export function sellToPancakeSwap({\n  txReceipt,\n}: {\n  txReceipt: EnrichedTxReceipt;\n}) {\n  const from = txReceipt.from.toLowerCase();\n  const { logs } = txReceipt;\n  const exchangeProxy = EXCHANGE_PROXY_BY_CHAIN_ID[56].toLowerCase();\n  let inputLog = logs.find((log) => log.from === from);\n  let outputLog = logs.find((log) => log.from !== from);\n", "  if (inputLog === undefined) {\n    inputLog = logs.find((log) => log.from === exchangeProxy);\n    outputLog = logs.find((log) => log.from !== exchangeProxy);\n  }\n\n  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function executeMetaTransaction({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const [metaTransaction] = txDescription.args;\n  const [from] = metaTransaction as string[];\n  const { logs } = txReceipt;", "export function executeMetaTransaction({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const [metaTransaction] = txDescription.args;\n  const [from] = metaTransaction as string[];\n  const { logs } = txReceipt;\n  if (typeof from === \"string\") {\n    const inputLog = logs.find((log) => log.from === from.toLowerCase());\n    const outputLog = logs.find((log) => log.to === from.toLowerCase());", "  if (typeof from === \"string\") {\n    const inputLog = logs.find((log) => log.from === from.toLowerCase());\n    const outputLog = logs.find((log) => log.to === from.toLowerCase());\n    if (inputLog && outputLog) {\n      return extractTokenInfo(inputLog, outputLog);\n    }\n  }\n}\n\nexport function fillOtcOrderForEth({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const { logs } = txReceipt;\n  const [order] = txDescription.args;\n  const [makerToken, takerToken] = order as string[];\n  const inputLog = logs.find((log) => log.address === takerToken);\n  const outputLog = logs.find((log) => log.address === makerToken);\n", "export function fillOtcOrderForEth({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const { logs } = txReceipt;\n  const [order] = txDescription.args;\n  const [makerToken, takerToken] = order as string[];\n  const inputLog = logs.find((log) => log.address === takerToken);\n  const outputLog = logs.find((log) => log.address === makerToken);\n", "  if (inputLog && outputLog) {\n    return extractTokenInfo(inputLog, outputLog);\n  }\n}\n\nexport function fillOtcOrderWithEth({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  return fillOtcOrderForEth({ txReceipt, txDescription });\n}\n", "export function fillLimitOrder({\n  txReceipt,\n  txDescription,\n}: {\n  txReceipt: EnrichedTxReceipt;\n  txDescription: TransactionDescription;\n}) {\n  const [order] = txDescription.args;\n  const { 5: maker, 6: taker } = order as string[];\n  const { logs } = txReceipt;\n  if (typeof maker === \"string\" && typeof taker === \"string\") {\n    const inputLog = logs.find((log) => log.from === taker.toLowerCase());\n    const outputLog = logs.find((log) => log.from === maker.toLowerCase());", "  if (typeof maker === \"string\" && typeof taker === \"string\") {\n    const inputLog = logs.find((log) => log.from === taker.toLowerCase());\n    const outputLog = logs.find((log) => log.from === maker.toLowerCase());\n    if (inputLog && outputLog) {\n      return extractTokenInfo(inputLog, outputLog);\n    }\n  }\n}\n"]}
