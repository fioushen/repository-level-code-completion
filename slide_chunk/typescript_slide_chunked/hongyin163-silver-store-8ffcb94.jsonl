{"filename": "src/useSelector.ts", "chunked_list": ["import { useContext, useLayoutEffect, useReducer, useRef } from 'react';\nimport Context from './context';\nimport { IContext } from './context/types';\nimport defaultStore from './store/Store';\n\n//TODO\nexport const createSelectorHook = <T>(context = Context) => {\n  return function useSelector<S extends T>(selector: (state: S) => unknown) {\n    const { store = defaultStore } = useContext<IContext>(context); //as { store: IStore<S> }\n    const [, forceRender] = useReducer((s) => s + 1, 0);\n    const latestState = useRef<unknown>();\n\n    useLayoutEffect(() => {\n      const subscribe = store.subscribe(() => {\n        const newState = selector(store.getState() as unknown as S);", "        if (latestState.current === newState) {\n          return;\n        }\n        latestState.current = newState;\n        forceRender();\n      });\n      return () => {\n        subscribe();\n      };\n    });\n\n    return selector(store.getState() as unknown as S);\n  };\n};\n\nexport default createSelectorHook();\n"]}
{"filename": "src/useStore.ts", "chunked_list": ["import { useContext } from 'react';\nimport Context from './context';\n\nexport function createStoreHook(context = Context) {\n  return function useStore() {\n    const { store } = useContext(context);\n    return store;\n  };\n}\n\nexport default createStoreHook();\n"]}
{"filename": "src/index.ts", "chunked_list": ["import Context from './context';\nimport Provider from './Provider';\nimport useStore from './useStore';\nimport defineStore, { createDefineStore } from './store/defineStore';\nimport createStore from './store/createStore';\nimport useSelector, { createSelectorHook } from './useSelector';\nimport { StoreBase } from './store/StoreBase';\n\nexport {\n  Context,", "export {\n  Context,\n  Provider,\n  useStore,\n  createStore,\n  defineStore,\n  createDefineStore,\n  useSelector,\n  createSelectorHook,\n  StoreBase,", "  createSelectorHook,\n  StoreBase,\n};\n"]}
{"filename": "src/context/types.ts", "chunked_list": ["import { IStore } from '../store/types';\n\nexport interface IContext {\n  store?: IStore;\n}\n"]}
{"filename": "src/context/index.ts", "chunked_list": ["import React from 'react';\nimport { IContext } from './types';\n\nexport const Context = React.createContext<IContext>({});\n\nexport default Context;\n"]}
{"filename": "src/store/Store.ts", "chunked_list": ["import createStore from './createStore';\n\nexport default createStore({});\n"]}
{"filename": "src/store/createStore.ts", "chunked_list": ["import { IStore } from './types';\nimport merge from '../utils/merge';\nexport default function createStore(initState = {}): IStore {\n  let currentState = initState;\n  const listeners: (() => void)[] = [];\n\n  function setState(nextState) {\n    currentState = merge(currentState, nextState);\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener();\n    }\n  }\n", "    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener();\n    }\n  }\n\n  function getState() {\n    return currentState || {};\n  }\n\n  function subscribe(listener: () => void) {\n    let isSubscribed = true;\n    listeners.push(listener);\n", "  function subscribe(listener: () => void) {\n    let isSubscribed = true;\n    listeners.push(listener);\n\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n      isSubscribed = false;\n      const index = listeners.indexOf(listener);\n      listeners.splice(index, 1);\n    };\n  }\n\n  return {\n    setState,\n    getState,\n    subscribe,\n  };\n}\n"]}
{"filename": "src/store/StoreBase.ts", "chunked_list": ["import produce from \"immer\";\nimport merge from \"../utils/merge\";\nimport defaultStore from \"./Store\";\nimport { logByFunc } from \"../log\";\nimport { IStore } from \"./types\";\n\nexport function createStoreBase(store = defaultStore) {\n  return class StoreBase<S> {\n    name: string = \"\";\n    state?: S;\n    store: IStore = store;\n    constructor() {\n      this.init(this.state);\n      this.regist();\n    }\n    regist = () => {\n      this.store[this.name] = this;\n    };\n    getState(): S {\n      return this.store.getState()[this.name];\n    }\n    init = (initState) => {\n      const currentState = this.getState();", "      if (!currentState) {\n        if (typeof initState === \"function\") {\n          this.setState(initState());\n        } else {\n          this.setState(initState);\n        }\n      }\n    };\n    setState = (state: S | ((pre: S) => void)) => {\n      const lastState = this.getState();\n      let nextState;", "      if (typeof state === \"function\") {\n        nextState = produce(lastState, state as (pre: S) => void);\n      } else {\n        nextState = merge(lastState, state);\n      }\n\n      if (process.env.NODE_ENV === \"development\") {\n        logByFunc(this.setState, this.name, lastState, nextState);\n      }\n\n      this.store.setState({\n        [this.name]: nextState,\n      } as any);\n    };\n  };\n}\n\nexport default createStoreBase();\n", "export class StoreBase<S> {\n  name: string = \"\";\n  state?: S | (() => S);\n  store: IStore;\n  constructor(store = defaultStore) {\n    this.store = store;\n    this.init(this.state);\n  }\n  getState(): S {\n    return this.store.getState()[this.name];\n  }\n  init = (initState) => {\n    const currentState = this.getState();", "    if (!currentState) {\n      if (typeof initState === \"function\") {\n        this.setState(initState());\n      } else {\n        this.setState(initState);\n      }\n    }\n  };\n  setState = (state: S | ((pre: S) => void)) => {\n    const lastState = this.getState();\n    let nextState;", "    if (typeof state === \"function\") {\n      nextState = produce(lastState, state as (pre: S) => void);\n    } else {\n      nextState = merge(lastState, state);\n    }\n\n    if (process.env.NODE_ENV === \"development\") {\n      logByFunc(this.setState, this.name, lastState, nextState);\n    }\n\n    this.store.setState({\n      [this.name]: nextState,\n    } as any);\n  };\n}\n"]}
{"filename": "src/store/types.ts", "chunked_list": ["export interface IStore {\n  setState: (state) => void;\n  getState: () => any;\n  subscribe: (listener: () => void) => () => void;\n}\n\n// export type TSetStateFunc = (state:) => void\n"]}
{"filename": "src/store/defineStore.ts", "chunked_list": ["import defaultStore from './Store';\nimport produce from 'immer';\nimport merge from '../utils/merge';\nimport { logByFunc } from '../log';\nimport { IStore } from './types';\n\n// TODO add enhancer\nexport function createDefineStore(\n  _store: IStore = defaultStore,\n  enhancer?: (createDefineStore: any) => <S>(\n    name: any,\n    initState: S\n  ) => {\n    getState: () => S;\n    setState: (state: Partial<S> | ((pre: S) => void), currName?: any) => void;\n    regist: (funcs?: {}) => void;\n    store: IStore;\n    setAsyncState: (state: (pre: S) => void) => Promise<S>;\n    name: any;\n    subscribe: any;\n  }\n) {\n  console.log('test enhancer.............');\n  console.log(enhancer);", "  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(`Expected the enhancer to be a function`);\n    }\n    return enhancer(createDefineStore);\n  }\n  const store: IStore = _store || defaultStore;\n  return function defineStore<S>(name, initState: S) {\n    function getState(): S {\n      const state = store.getState();\n      if (typeof state === 'object' && state) {\n        return state[name] as S;\n      }\n      return void 0 as unknown as S;\n    }\n", "    function getState(): S {\n      const state = store.getState();\n      if (typeof state === 'object' && state) {\n        return state[name] as S;\n      }\n      return void 0 as unknown as S;\n    }\n\n    function setState(state: Partial<S> | ((pre: S) => void)) {\n      const lastState = getState();\n\n      //TODO\n\n      let nextState;", "    function setState(state: Partial<S> | ((pre: S) => void)) {\n      const lastState = getState();\n\n      //TODO\n\n      let nextState;\n      if (typeof state === 'function') {\n        nextState = produce(lastState, state as (pre: S) => void);\n      } else {\n        nextState = merge(lastState, state);\n      }\n", "      if (process.env.NODE_ENV === 'development') {\n        logByFunc(setState, name, lastState, nextState);\n      }\n\n      store.setState({\n        [name]: nextState,\n      });\n\n      //TODO\n    }\n", "    async function setAsyncState(state: (pre: S) => void) {\n      const startStack = new Error().stack;\n      const lastState = getState();\n      let nextState;\n      nextState = await produce(lastState, state as (pre: S) => void);\n\n      if (process.env.NODE_ENV === 'development') {\n        logByFunc(startStack, name, lastState, nextState, true);\n      }\n\n      store.setState({\n        [name]: nextState,\n      });\n    }\n", "    function regist(funcs = {}) {\n      store[name] = merge(store[name], funcs);\n    }\n\n    function init() {\n      const currentState = getState();\n      if (!currentState) {\n        setState(initState);\n      }\n    }\n\n    init();\n\n    return {\n      getState,\n      setState,\n      regist,\n      store,\n      setAsyncState,\n      subscribe: store.subscribe,\n    };\n  };\n}\n\nexport default createDefineStore();\n"]}
{"filename": "src/utils/merge.ts", "chunked_list": ["export default function merge(to, from) {\n  let target;\n  if (typeof from === 'object' && typeof to === 'object') {\n    target = Object.assign({}, to, from);\n  } else {\n    target = from;\n  }\n  return target;\n}\n"]}
{"filename": "src/log/defaults.ts", "chunked_list": ["export default {\n  level: 'log',\n  logger: console,\n  logErrors: true,\n  collapsed: undefined,\n  predicate: undefined,\n  duration: false,\n  timestamp: true,\n  stateTransformer: state => state,\n  actionTransformer: action => action,", "  stateTransformer: state => state,\n  actionTransformer: action => action,\n  errorTransformer: error => error,\n  colors: {\n    title: () => 'inherit',\n    prevState: () => '#9E9E9E',\n    action: () => '#03A9F4',\n    nextState: () => '#4CAF50',\n    error: () => '#F20404'\n  },", "    error: () => '#F20404'\n  },\n  diff: false,\n  diffPredicate: undefined,\n\n  // Deprecated options\n  transformer: undefined\n};\n", ""]}
{"filename": "src/log/index.ts", "chunked_list": ["export function extract(log: string = '', isAsync = false) {\n  const regx = /at\\s(.*)\\s\\(/g;\n  const matches = log.match(regx);\n  if (matches) {\n    const target =\n      matches.length > 0 ? (isAsync ? matches[1] : matches[0]) : '';\n    return target.split(' ')[1];\n  }\n  return '';\n}\n", "export function logByFunc(stack, name, lastState, nextState, isAsync = false) {\n  let obj: any = {};\n  // console.trace()\n  if (!isAsync) {\n    Error.captureStackTrace(obj, stack);\n  } else {\n    obj.stack = stack;\n  }\n  const action = extract(obj.stack, isAsync);\n  console.group(`%c @${name}/${action}`, 'color:#03A9F4');\n  console.log('%c preState', 'color:#9E9E9E', lastState);\n  // console.log('%c action', 'color:#03A9F4', action);\n  console.log('%c nextState', 'color:#4CAF50', nextState);\n  console.groupEnd();\n}\n"]}
