{"filename": "src/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { Language } from './language'\nimport { NlpUtil, NlpManager, NlpExcelReader } from './nlp'\nimport { XTableUtils, XTable, XDoc } from './xtables'", "import { NlpUtil, NlpManager, NlpExcelReader } from './nlp'\nimport { XTableUtils, XTable, XDoc } from './xtables'\nimport { removeEmojis, Evaluator, SpellCheck, Handlebars } from './util'\nimport { ActionManager, NlgManager } from './nlg'\nimport { NeuralNetwork } from './classifiers'\nimport { SentimentAnalyzer, SentimentManager } from './sentiment'\nimport {\n    Recognizer,\n    ConversationContext,\n    MemoryConversationContext,", "    ConversationContext,\n    MemoryConversationContext,\n} from './recognizer'\nimport { BrainNLU } from './nlu'\n\nexport {\n    Language,\n    NlpUtil,\n    NlpManager,\n    NlpExcelReader,", "    NlpManager,\n    NlpExcelReader,\n    XTableUtils,\n    XTable,\n    XDoc,\n    removeEmojis,\n    Evaluator,\n    SpellCheck,\n    Handlebars,\n    ActionManager,", "    Handlebars,\n    ActionManager,\n    NlgManager,\n    NeuralNetwork,\n    SentimentAnalyzer,\n    SentimentManager,\n    Recognizer,\n    ConversationContext,\n    MemoryConversationContext,\n    BrainNLU,", "    MemoryConversationContext,\n    BrainNLU,\n};\n"]}
{"filename": "src/recognizer/memory-conversation-context.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport ConversationContext from './conversation-context';\nimport { Session } from \"../types/session\";\n", "import { Session } from \"../types/session\";\n\n/**\n * In memory conversation context manager.\n */\nclass MemoryConversationContext extends ConversationContext {\n  private readonly conversationContexts: { [conversationId: string]: any };\n\n  /**\n   * Constructor of the class.\n   * @param {Object} settings Settings for the instance.\n   */\n  constructor(settings: object) {\n    super(settings);\n    this.conversationContexts = {};\n  }\n\n  /**\n   * Gets the conversation context from the session.\n   * @param {Object} session Chatbot session of the conversation.\n   * @returns {Promise<Object>} Promise to resolve the conversation context.\n   */\n  public getConversationContext(session: Session): Promise<Object> {\n    return new Promise((resolve, reject) => {\n      const conversationId = this.getConversationId(session);", "      if (!conversationId) {\n        return reject(new Error('No conversation id found'));\n      }\n      if (!this.conversationContexts[conversationId]) {\n        this.conversationContexts[conversationId] = {};\n      }\n      return resolve(this.conversationContexts[conversationId]);\n    });\n  }\n\n  public setConversationContext(session: Session, context: any): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const conversationId = this.getConversationId(session);", "      if (!conversationId) {\n        return reject(new Error('No conversation id found'));\n      }\n      this.conversationContexts[conversationId] = context;\n      return resolve();\n    });\n  }\n}\n\nexport default MemoryConversationContext;\n\n"]}
{"filename": "src/recognizer/recognizer.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\nimport { NlpManager } from '../nlp';\nimport MemoryConversationContext from './memory-conversation-context';", "import { NlpManager } from '../nlp';\nimport MemoryConversationContext from './memory-conversation-context';\n\n/**\n * Microsoft Bot Framework compatible recognizer for nlp.js.\n */\nclass Recognizer {\n  private readonly nlpManager: NlpManager;\n  private readonly threshold: number;\n  private readonly conversationContext: MemoryConversationContext;\n\n  /**\n   * Constructor of the class.\n   * @param {Object} settings Settings for the instance.\n   */\n  constructor(private readonly settings: {\n    nlpManager?: NlpManager;\n    container?: any;\n    nerThreshold?: number;\n    threshold?: number;\n    conversationContext?: MemoryConversationContext;\n  }) {\n    this.nlpManager =\n        this.settings.nlpManager ||\n        new NlpManager({\n          container: this.settings.container,\n          ner: { threshold: this.settings.nerThreshold || 1 },\n        });\n    this.threshold = this.settings.threshold || 0.7;\n    this.conversationContext =\n        this.settings.conversationContext || new MemoryConversationContext({});\n  }\n\n  /**\n   * Train the NLP manager.\n   */\n  public async train(): Promise<void> {\n    await this.nlpManager.train();\n  }\n\n  /**\n   * Loads the model from a file.\n   * @param {String} filename Name of the file.\n   */\n  public load(filename: string): void {\n    this.nlpManager.load(filename);\n  }\n\n  /**\n   * Saves the model into a file.\n   * @param {String} filename Name of the file.\n   */\n  public save(filename: string): void {\n    this.nlpManager.save(filename);\n  }\n\n  /**\n   * Loads the NLP manager from an excel.\n   * @param {String} filename Name of the file.\n   */\n  public async loadExcel(filename: string): Promise<void> {\n    this.nlpManager.loadExcel(filename);\n    await this.train();\n    this.save(filename);\n  }\n\n  /**\n   * Process an utterance using the NLP manager. This is done using a given context\n   * as the context object.\n   * @param {Object} srcContext Source context\n   * @param {String} locale Locale of the utterance.\n   * @param {String} utterance Locale of the utterance.\n   */\n  public async process(\n      srcContext: Record<string, unknown>,\n      locale?: string,\n      utterance?: string\n  ): Promise<string> {\n    const context = srcContext || {};\n    const response = await (locale\n        ? this.nlpManager.process(locale, utterance, context)\n        : this.nlpManager.process(utterance, undefined, context));", "    if (response.score < this.threshold || response.intent === 'None') {\n      response.answer = undefined;\n      return response;\n    }\n    for (let i = 0; i < response.entities.length; i += 1) {\n      const entity = response.entities[i];\n      context[entity.entity] = entity.option;\n    }\n    if (response.slotFill) {\n      context.slotFill = response.slotFill;\n    } else {\n      delete context.slotFill;\n    }\n    return response;\n  }\n\n  /**\n   * Given an utterance and the locale, returns the recognition of the utterance.\n   * @param {String} utterance Utterance to be recognized.\n   * @param {String} model Model of the utterance.\n   * @param {Function} cb Callback Function.\n   */\n  public async recognizeUtterance(utterance: string, model: {locale: string}, cb: Function): Promise<any> {\n    const response = await this.process(\n        model,\n        model ? model.locale : undefined,\n        utterance\n    );\n    return cb(null, response);\n  }\n}\n\nexport default Recognizer;\n", "    if (response.slotFill) {\n      context.slotFill = response.slotFill;\n    } else {\n      delete context.slotFill;\n    }\n    return response;\n  }\n\n  /**\n   * Given an utterance and the locale, returns the recognition of the utterance.\n   * @param {String} utterance Utterance to be recognized.\n   * @param {String} model Model of the utterance.\n   * @param {Function} cb Callback Function.\n   */\n  public async recognizeUtterance(utterance: string, model: {locale: string}, cb: Function): Promise<any> {\n    const response = await this.process(\n        model,\n        model ? model.locale : undefined,\n        utterance\n    );\n    return cb(null, response);\n  }\n}\n\nexport default Recognizer;\n"]}
{"filename": "src/recognizer/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Recognizer from './recognizer';\nimport ConversationContext from './conversation-context'\nimport MemoryConversationContext from './memory-conversation-context'", "import ConversationContext from './conversation-context'\nimport MemoryConversationContext from './memory-conversation-context'\n\nexport {\n  Recognizer,\n  ConversationContext,\n  MemoryConversationContext,\n};\n", ""]}
{"filename": "src/recognizer/conversation-context.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\n\nimport { Session } from \"../types/session\";", "\nimport { Session } from \"../types/session\";\n\n/**\n * Abstract class for a conversation context of a chatbot.\n * The conversation context is the responsible for storing and retrieving\n * the context scope variables based on the current conversation.\n * The getConversationContext receive the session of the chatbot, and must return\n * a promise with the context in the resolve.\n */\n", "class ConversationContext {\n  private settings: object;\n\n  /**\n   * Constructor of the class.\n   * @param {Object} settings Settings for the instance.\n   */\n  constructor(settings: object) {\n    this.settings = settings || {};\n  }\n\n  /**\n   * Given a session instance of a chatbot, return the conversation identifier.\n   * @param {Object} session Session instance of a message of chatbot.\n   * @returns {String} Identifier of the conversation.\n   */\n  public getConversationId(session: Session): string | undefined {", "    if (session?.message?.address?.conversation) {\n      return session.message.address.conversation.id;\n    }\n    if (session?._activity?.conversation) {\n      return session._activity.conversation.id;\n    }\n    return undefined;\n  }\n}\n\nexport default ConversationContext;\n\n"]}
{"filename": "src/language/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport Language from '@nlpjs/language';\n\nexport {", "\nexport {\n  Language,\n};\n"]}
{"filename": "src/nlu/brain-nlu.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { containerBootstrap } from '@nlpjs/core-loader';\nimport { LangAll } from '@nlpjs/lang-all';\nimport { NluNeural } from '@nlpjs/nlu';", "import { LangAll } from '@nlpjs/lang-all';\nimport { NluNeural } from '@nlpjs/nlu';\n\nclass BrainNLU {\n  private container: any;\n  private nlu: NluNeural | undefined;\n  private readonly corpus: any[];\n  private readonly settings: any;\n\n  constructor(settings: any = {}) {\n    this.settings = settings;", "    if (!this.settings.container) {\n      this.settings.container = containerBootstrap();\n    }\n    this.container = this.settings.container;\n    this.container.use(LangAll);\n    if (!this.settings.l) {\n      this.nlu = new NluNeural({\n        locale: this.settings.locale || this.settings.language || 'en',\n      });\n    }\n    this.corpus = [];\n  }\n\n  add(utterance: string, intent: string) {\n    this.corpus.push({ utterance, intent });\n  }\n\n  train() {\n    return this.nlu?.train(this.corpus, this.settings);\n  }\n\n  async getClassifications(utterance: string) {\n    const result = await this.nlu?.process(utterance);\n    return result?.classifications.sort((a, b) => b.score - a.score);\n  }\n\n  async getBestClassification(utterance: string) {\n    const result = await this.getClassifications(utterance);\n    return result?.[0];\n  }\n}\n\nexport default BrainNLU;\n"]}
{"filename": "src/nlu/index.ts", "chunked_list": ["import BrainNLU from './brain-nlu'\n\nexport {\n  BrainNLU,\n};\n"]}
{"filename": "src/util/handlebars.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { compile } from '@nlpjs/evaluator'\n\nclass Handlebars {\n  static compile(str: string) {\n    return compile(str);\n  }\n}\n\nexport {\n  Handlebars,\n};\n", "\nclass Handlebars {\n  static compile(str: string) {\n    return compile(str);\n  }\n}\n\nexport {\n  Handlebars,\n};\n"]}
{"filename": "src/util/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { removeEmojis } from '@nlpjs/emoji'\nimport { Evaluator } from '@nlpjs/evaluator'\nimport { SpellCheck } from './spell-check'", "import { Evaluator } from '@nlpjs/evaluator'\nimport { SpellCheck } from './spell-check'\nimport { Handlebars } from './handlebars'\n\nexport {\n  removeEmojis,\n  Evaluator,\n  SpellCheck,\n  Handlebars,\n};", "  Handlebars,\n};\n"]}
{"filename": "src/util/spell-check.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { SpellCheck as SpellCheckBase, SpellCheckSettings } from '@nlpjs/similarity';\n\nclass SpellCheck extends SpellCheckBase {\n  constructor(settings: SpellCheckSettings = {}) {\n    const features = Array.isArray(settings) ? settings : settings.features;\n    super({ features });\n  }\n}\n\nexport { SpellCheck };\n\n", "\nclass SpellCheck extends SpellCheckBase {\n  constructor(settings: SpellCheckSettings = {}) {\n    const features = Array.isArray(settings) ? settings : settings.features;\n    super({ features });\n  }\n}\n\nexport { SpellCheck };\n\n"]}
{"filename": "src/nlg/nlg-manager.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport NlgManagerBase from '@nlpjs/nlg';\nimport { Evaluator } from '@nlpjs/evaluator';\n\nclass NlgManager extends NlgManagerBase {\n  constructor(settings: any = {}, container?: any) {\n    super(settings, container);\n    this.container.register('Evaluator', Evaluator, true);\n  }\n\n  addAnswer(locale: string, intent: string, answer: any, opts?: any): void {\n    return this.add(locale, intent, answer, opts);\n  }\n\n  async findAnswer(locale: string, intent: string, context: any, settings?: any): Promise<{ response: any } | undefined> {\n    const answer = await this.find(locale, intent, context, settings);", "import { Evaluator } from '@nlpjs/evaluator';\n\nclass NlgManager extends NlgManagerBase {\n  constructor(settings: any = {}, container?: any) {\n    super(settings, container);\n    this.container.register('Evaluator', Evaluator, true);\n  }\n\n  addAnswer(locale: string, intent: string, answer: any, opts?: any): void {\n    return this.add(locale, intent, answer, opts);\n  }\n\n  async findAnswer(locale: string, intent: string, context: any, settings?: any): Promise<{ response: any } | undefined> {\n    const answer = await this.find(locale, intent, context, settings);", "    if (!answer.answer) {\n      return undefined;\n    }\n    return {\n      response: answer.answer,\n    };\n  }\n\n  removeAnswer(locale: string, intent: string, answer: any, opts?: any): void {\n    return this.remove(locale, intent, answer, opts);\n  }\n\n  isValid(condition: string | undefined, context: any): boolean {\n    const evaluator = this.container.get('Evaluator');", "    if (evaluator) {\n      return (\n          !condition ||\n          condition === '' ||\n          evaluator.evaluate(condition, context) === true\n      );\n    }\n    return true;\n  }\n\n  findAllAnswers(locale?: string, intent?: string, context?: any): {answer: string, opts: string}[] | any {", "    if (typeof locale === 'string') {\n      const found = super.findAllAnswers(locale, intent, context);\n      const filtered = super.filterAnswers(found);\n      return filtered.answers.map((x: {answer: string, opts: string}) => ({\n        response: x.answer,\n        opts: x.opts,\n      }));\n    }\n    return super.findAllAnswers(locale);\n  }\n}\n\nexport default NlgManager;\n\n"]}
{"filename": "src/nlg/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { ActionManager } from '@nlpjs/nlg'\nimport NlgManager from './nlg-manager'\n", "import NlgManager from './nlg-manager'\n\nexport {\n  NlgManager,\n  ActionManager,\n};\n"]}
{"filename": "src/types/session.d.ts", "chunked_list": ["export type Session = {\n    message?: {\n        address?: {\n            conversation?: {\n                id: string;\n            };\n        };\n    };\n    _activity?: {\n        conversation?: {\n            id: string;\n        };\n    };\n}\n"]}
{"filename": "src/types/@nlpjs/nlg.d.ts", "chunked_list": ["declare module '@nlpjs/nlg' {\n    import { Clonable, Container } from '@nlpjs/core';\n\n    interface Answer {\n        response: string;\n        opts?: Record<string, any>;\n    }\n\n    interface FindAnswerOptions {\n        skipIfSameInput?: boolean;\n        ignoreCase?: boolean;\n        ignoreStopWords?: boolean;\n    }\n", "    interface FindAnswerOptions {\n        skipIfSameInput?: boolean;\n        ignoreCase?: boolean;\n        ignoreStopWords?: boolean;\n    }\n\n    interface NlgManagerSettings {\n        settingsPerLocale?: Record<string, NlgManagerSettings>;\n        useNearestLocale?: boolean;\n    }\n", "    interface NlgManagerAnswer {\n        answer: string;\n        score: number;\n        opts?: Record<string, any>;\n        context?: Record<string, any>;\n    }\n\n    class NlgManager {\n        constructor(settings?: NlgManagerSettings, container?: Container);\n\n        add(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n        addAnswer(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n        filterAnswers(srcInput: {answer: string, opts: string}[]): {answers: {answer: string, opts: string}[]};\n        find(locale: string, intent: string, context?: Record<string, any>, options?: FindAnswerOptions): Promise<NlgManagerAnswer>;\n\n        findAnswer(locale: string, intent: string, context?: Record<string, any>, options?: FindAnswerOptions): Promise<Answer | undefined>;\n\n        findAllAnswers(locale?: string, intent?: string, context?: Record<string, any>): Array<{answer: string, opts: string}>;\n\n        remove(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n        removeAnswer(locale: string, intent: string, answer: string, opts?: Record<string, any>): void;\n\n        isValid(condition: string, context?: Record<string, any>): boolean;\n\n        container: Container;\n    }\n", "    interface ActionManagerSettings {\n        container?: Container;\n        tag?: string;\n    }\n\n    interface ActionBundle {\n        action: string;\n        parameters: any[];\n    }\n\n    interface ProcessedAnswer {\n        answer?: string | object;\n        actions?: ActionBundle[];\n    }\n", "    interface ProcessedAnswer {\n        answer?: string | object;\n        actions?: ActionBundle[];\n    }\n\n    type ActionFunction = (input: ProcessedAnswer, ...parameters: any[]) => Promise<ProcessedAnswer>;\n\n    class ActionManager extends Clonable {\n        constructor(settings?: ActionManagerSettings, container?: Container);\n\n        actions: Record<string, ActionBundle[]>;\n        actionsMap: Record<string, ActionFunction>;\n\n        registerDefault(): void;\n\n        posAction(intent: string, action: string, parameters: any[]): number;\n\n        findActions(intent: string): { action: string; parameters: any[]; fn: ActionFunction }[];\n\n        processActions(intent: string, input: string | object): Promise<ProcessedAnswer>;\n\n        addAction(intent: string, action: string, parameters: any[], fn?: ActionFunction): void;\n\n        removeAction(intent: string, action: string, parameters: any[]): void;\n\n        removeActions(intent: string): void;\n\n        registerActionInMap(action: string, fn: ActionFunction): void;\n\n        removeActionFromMap(action: string): void;\n\n        run(srcInput: { intent: string; }, settings?: any): Promise<ProcessedAnswer>;\n\n        toJSON(): { settings: ActionManagerSettings; actions: Record<string, ActionBundle[]> };\n\n        fromJSON(json: { settings: ActionManagerSettings; actions: Record<string, ActionBundle[]> }): void;\n    }\n\n    export { ActionManagerSettings, ActionManager };\n\n    export default NlgManager;\n}\n"]}
{"filename": "src/types/@nlpjs/language.d.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\ndeclare module \"@nlpjs/language\" {\n    interface Scripts {\n        [key: string]: RegExp;\n        cmn: RegExp;\n        Latin: RegExp;\n        Cyrillic: RegExp;\n        Arabic: RegExp;\n        ben: RegExp;\n        Devanagari: RegExp;\n        jpn: RegExp;\n        kor: RegExp;\n        tel: RegExp;\n        tam: RegExp;\n        guj: RegExp;\n        kan: RegExp;\n        mal: RegExp;\n        Myanmar: RegExp;\n        ori: RegExp;\n        pan: RegExp;\n        Ethiopic: RegExp;\n        tha: RegExp;\n        sin: RegExp;\n        ell: RegExp;\n        khm: RegExp;\n        hye: RegExp;\n        sat: RegExp;\n        bod: RegExp;\n    }\n", "    interface Scripts {\n        [key: string]: RegExp;\n        cmn: RegExp;\n        Latin: RegExp;\n        Cyrillic: RegExp;\n        Arabic: RegExp;\n        ben: RegExp;\n        Devanagari: RegExp;\n        jpn: RegExp;\n        kor: RegExp;\n        tel: RegExp;\n        tam: RegExp;\n        guj: RegExp;\n        kan: RegExp;\n        mal: RegExp;\n        Myanmar: RegExp;\n        ori: RegExp;\n        pan: RegExp;\n        Ethiopic: RegExp;\n        tha: RegExp;\n        sin: RegExp;\n        ell: RegExp;\n        khm: RegExp;\n        hye: RegExp;\n        sat: RegExp;\n        bod: RegExp;\n    }\n", "    interface Language {\n        readonly scripts: Scripts;\n        readonly languageData: Array<Array<string>>;\n        readonly data: { [key: string]: { [key: string]: string } };\n    }\n\n\n    const language: Language;\n    export = language;\n}\n"]}
{"filename": "src/types/@nlpjs/nlp.d.ts", "chunked_list": ["declare module '@nlpjs/nlp' {\n    export class Nlp {\n        constructor(settings: any)\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/xtables.d.ts", "chunked_list": ["declare module '@nlpjs/xtables' {\n    interface XDocTable {\n        name: string;\n        headers: string[];\n        data: Record<string, string>[];\n    }\n\n    export class XTableUtils {\n        static escapeCsv(value: string): string;\n        static escapeTsv(value: string): string;\n    }\n", "    export class XTable {\n        static CSV: string;\n        static TSV: string;\n\n        constructor();\n        load(data: string, type?: string): void;\n        save(type?: string): string;\n        getTable(name: string): XTable;\n        getRows(): Record<string, string>[];\n        addRow(row: Record<string, string>): void;\n        addRows(rows: Record<string, string>[]): void;\n        clearRows(): void;\n    }\n", "    export class XDoc {\n        tables: XDocTable[];\n\n        read(fileName: string): void;\n        getTable(name: string): XDocTable;\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/emoji.d.ts", "chunked_list": ["declare module '@nlpjs/emoji' {\n    function removeEmojis(str: string | null | undefined): string | null | undefined;\n\n    export { removeEmojis };\n}\n"]}
{"filename": "src/types/@nlpjs/similarity.d.ts", "chunked_list": ["declare module '@nlpjs/similarity' {\n    interface SimilarityResult {\n        distance: number;\n        text1: string;\n        text2: string;\n    }\n\n    interface Similarity {\n        getDistance(text1: string, text2: string): Promise<SimilarityResult>;\n    }\n", "    interface SpellCheckSettings {\n        features?: Similarity[];\n    }\n\n    class SpellCheck {\n        constructor(settings?: SpellCheckSettings);\n    }\n\n    export { SpellCheck, Similarity, SimilarityResult, SpellCheckSettings };\n}\n"]}
{"filename": "src/types/@nlpjs/neural.d.ts", "chunked_list": ["declare module '@nlpjs/neural' {\n    export interface NeuralNetworkOptions {\n        activation?: string;\n        iterations?: number;\n        errorThresh?: number;\n        log?: boolean;\n        logPeriod?: number;\n        learningRate?: number;\n        momentum?: number;\n        callbackPeriod?: number;\n        timeout?: number;\n        praxisOpts?: PraxisOptions;\n    }\n", "    export interface NeuralNetworkTrainData {\n        input: number[];\n        output: number[];\n    }\n\n    export interface NeuralNetwork {\n        initialize(): void;\n        train(\n            data: NeuralNetworkTrainData[],\n            options?: NeuralNetworkOptions,\n            cb?: () => void\n        ): Promise<TrainingResult>;\n        run(input: number[]): number[];\n        toFunction(): (input: number[]) => number[];\n    }\n", "    export interface TrainingResult {\n        error: number;\n        iterations: number;\n        time: number;\n    }\n\n    export interface PraxisOptions {\n        minError?: number;\n        maxIterations?: number;\n        resetOnStuck?: boolean;\n        praxis?: string;\n    }\n", "    export class MLP {\n        constructor(inputSize: number, outputSize: number, hiddenLayers: number[]);\n        initialize(): void;\n        train(\n            data: NeuralNetworkTrainData[],\n            options?: NeuralNetworkOptions,\n            cb?: () => void\n        ): Promise<TrainingResult>;\n        run(input: number[]): number[];\n        toFunction(): (input: number[]) => number[];\n    }\n", "    export class RNNTimeStep {\n        constructor(options: {\n            inputSize: number;\n            hiddenLayers: number[];\n            outputSize: number;\n        });\n        initialize(): void;\n        train(\n            data: NeuralNetworkTrainData[][],\n            options?: NeuralNetworkOptions,\n            cb?: () => void\n        ): Promise<TrainingResult>;\n        run(input: number[][]): number[][];\n        toFunction(): (input: number[][]) => number[][];\n    }\n", "    export class LSTMTimeStep {\n        constructor(options: {\n            inputSize: number;\n            outputSize: number;\n            memoryCells: number;\n        });\n        initialize(): void;\n        train(\n            data: NeuralNetworkTrainData[][],\n            options?: NeuralNetworkOptions,\n            cb?: () => void\n        ): Promise<TrainingResult>;\n        run(input: number[][]): number[][];\n        toFunction(): (input: number[][]) => number[][];\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/request.d.ts", "chunked_list": ["declare module '@nlpjs/request' {\n    export class fs {}\n}\n"]}
{"filename": "src/types/@nlpjs/core-loader.d.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\ndeclare module '@nlpjs/core-loader' {\n    import {", "declare module '@nlpjs/core-loader' {\n    import {\n        Among,\n        ArrToObj,\n        BaseStemmer,\n        Clonable,\n        Container,\n        defaultContainer,\n        Normalizer,\n        ObjToArr,", "        Normalizer,\n        ObjToArr,\n        Stemmer,\n        Stopwords,\n        Tokenizer,\n        Timer,\n        logger,\n        MemoryStorage,\n        uuid,\n        Context,", "        uuid,\n        Context,\n    } from '@nlpjs/core';\n\n    export const containerBootstrap: (\n        inputSettings?: string | Record<string, unknown>,\n        srcMustLoadEnv?: boolean,\n        container?: Container,\n        preffix?: string,\n        pipelines?: any[],", "        preffix?: string,\n        pipelines?: any[],\n        parent?: Container\n    ) => Container;\n\n    export function hasUnicode(str: string): boolean;\n\n    export function unicodeToArray(str: string): string[];\n\n    export function asciiToArray(str: string): string[];\n", "    export function asciiToArray(str: string): string[];\n\n    export function stringToArray(str: string): string[];\n\n    export function compareWildcars(str: string, pattern: string): boolean;\n\n    export function listFiles(dir: string): Promise<string[]>;\n\n    export function loadEnv(env: string): void;\n\n    export function listFilesAbsolute(dir: string): Promise<string[]>;\n", "    export function loadEnv(env: string): void;\n\n    export function listFilesAbsolute(dir: string): Promise<string[]>;\n\n    export function getAbsolutePath(path: string): string;\n\n    export const dock: {\n        containers: { [name: string]: Container };\n        getContainer: (name?: string) => Container | undefined;\n        get(name: string): any;\n        createContainer(\n            name: string | object | undefined,\n            settings?: string | object | undefined,\n            srcMustLoadEnv?: boolean | undefined,\n            preffix?: string | undefined,\n            parent?: Container | undefined,\n            pipelines?: any\n        ): Promise<Container>;\n        buildChilds(container: Container): Promise<void>;\n        terraform(settings: string | object, mustLoadEnv?: boolean): Promise<Container>;\n        start(settings: string | object, mustLoadEnv?: boolean): Promise<Container>;\n    };\n\n    export {\n        Among,\n        ArrToObj,\n        BaseStemmer,\n        Clonable,\n        Container,\n        defaultContainer,\n        Normalizer,\n        ObjToArr,\n        Stemmer,\n        Stopwords,\n        Tokenizer,\n        Timer,\n        logger,\n        MemoryStorage,\n        uuid,\n        Context,\n    };\n}\n"]}
{"filename": "src/types/@nlpjs/core.d.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\ndeclare module '@nlpjs/core' {\n    export type Language = 'af' | 'ar' | 'hy' | 'bn' | 'bg' | 'ca' | 'zh' | 'hr' | 'cs' | 'da' | 'nl' | 'en' | 'eo' | 'et' | 'fi' | 'fr' | 'gl' | 'de' | 'el' | 'gu' | 'he' | 'hi' | 'hu' | 'is' | 'id' | 'ga' | 'it' | 'ja' | 'jv' | 'kn' | 'kk' | 'km' | 'ko' | 'ku' | 'ky' | 'lo' | 'la' | 'lv' | 'lt' | 'lb' | 'mk' | 'ms' | 'ml' | 'mr' | 'mn' | 'ne' | 'nb' | 'nn' | 'no' | 'oc' | 'or' | 'fa' | 'pl' | 'pt' | 'pa' | 'ro' | 'ru' | 'gd' | 'sr' | 'si' | 'sk' | 'sl' | 'es' | 'su' | 'sw' | 'sv' | 'tl' | 'ta' | 'tt' | 'te' | 'th' | 'tr' | 'tk' | 'uk' | 'ur' | 'ug' | 'uz' | 'vi' | 'cy' | 'xh' | 'yi' | 'yo' | 'zu';\n    export type Name = string;\n    export type Id = string;", "    export type Language = 'af' | 'ar' | 'hy' | 'bn' | 'bg' | 'ca' | 'zh' | 'hr' | 'cs' | 'da' | 'nl' | 'en' | 'eo' | 'et' | 'fi' | 'fr' | 'gl' | 'de' | 'el' | 'gu' | 'he' | 'hi' | 'hu' | 'is' | 'id' | 'ga' | 'it' | 'ja' | 'jv' | 'kn' | 'kk' | 'km' | 'ko' | 'ku' | 'ky' | 'lo' | 'la' | 'lv' | 'lt' | 'lb' | 'mk' | 'ms' | 'ml' | 'mr' | 'mn' | 'ne' | 'nb' | 'nn' | 'no' | 'oc' | 'or' | 'fa' | 'pl' | 'pt' | 'pa' | 'ro' | 'ru' | 'gd' | 'sr' | 'si' | 'sk' | 'sl' | 'es' | 'su' | 'sw' | 'sv' | 'tl' | 'ta' | 'tt' | 'te' | 'th' | 'tr' | 'tk' | 'uk' | 'ur' | 'ug' | 'uz' | 'vi' | 'cy' | 'xh' | 'yi' | 'yo' | 'zu';\n    export type Name = string;\n    export type Id = string;\n    export type Words = string[];\n    export type StemmerFunction = (word: string, lang?: Language) => string;\n    export interface TokenizerFunction {\n        (text: string, settings?: any): Promise<string[]>;\n    }\n\n    export interface ContainerOptions {\n        defaultLocale?: Language;\n        locales?: Language[];\n        nluByDomain?: boolean;\n        stemmerOverride?: { [lang: string]: StemmerFunction };\n        tokenizerOverride?: { [lang: string]: TokenizerFunction };\n    }\n", "    export interface ContainerOptions {\n        defaultLocale?: Language;\n        locales?: Language[];\n        nluByDomain?: boolean;\n        stemmerOverride?: { [lang: string]: StemmerFunction };\n        tokenizerOverride?: { [lang: string]: TokenizerFunction };\n    }\n\n    export interface Obj {\n        [key: string]: any;\n    }\n", "    export interface Obj {\n        [key: string]: any;\n    }\n\n    export interface Stemmer {\n        stem: StemmerFunction;\n    }\n\n    export class BaseStemmer implements Stemmer {\n        stem(word: string, lang?: Language): string;\n    }\n", "    export class BaseStemmer implements Stemmer {\n        stem(word: string, lang?: Language): string;\n    }\n\n    export class Among {\n        constructor(s: string, substring_i: number, result: string, method: number);\n    }\n\n    export function ArrToObj<T extends Obj>(arr: T[], keyField: keyof T): { [key: string]: T };\n\n    export class Clonable<T = any> {\n        constructor(settings?: any, container?: any);\n        readonly container: any;\n        readonly settings: T;\n        applySettings(target: any, source: any): void;\n        getPipeline(name: string): any[];\n        clone(): Clonable<T>;\n    }\n", "    export function ArrToObj<T extends Obj>(arr: T[], keyField: keyof T): { [key: string]: T };\n\n    export class Clonable<T = any> {\n        constructor(settings?: any, container?: any);\n        readonly container: any;\n        readonly settings: T;\n        applySettings(target: any, source: any): void;\n        getPipeline(name: string): any[];\n        clone(): Clonable<T>;\n    }\n", "    export class Container {\n        constructor(options?: ContainerOptions);\n\n        register<T>(\n            id: string,\n            obj: T,\n            singleton?: boolean,\n            force?: boolean\n        ): void;\n\n        addStemmer(lang: Language, stemmer: StemmerFunction): void;\n\n        addTokenizer(lang: Language, tokenizer: TokenizerFunction): void;\n\n        addStopword(lang: Language, stopword: string): void;\n\n        getStemmer(lang?: Language): StemmerFunction | undefined;\n\n        getTokenizer(lang?: Language): TokenizerFunction | undefined;\n\n        getStopwords(lang?: Language): string[];\n\n        getDomain(locale: Language, utterance: string): string | undefined;\n\n        addNluDomain(domain: string, languages: Language[]): void;\n\n        addNluThreshold(domain: string, lang: Language, threshold: number): void;\n\n        addNluModel(domain: string, lang: Language, model: Obj): void;\n\n        processNlu(utterance: string, locale: Language): Promise<Obj>;\n\n        get(id: Id): any;\n\n        use<T>(item: T | { new(container: Container): T }, name?: string, isSingleton?: boolean, onlyIfNotExists?: boolean): string;\n\n        set(id: Id, value: any): void;\n\n        delete(id: Id): void;\n\n        has(id: Id): boolean;\n\n        stem(word: string, lang?: Language): string;\n\n        tokenize(str: string, lang?: Language): string[];\n\n        normalize(str: string, lang?: Language): string;\n\n        add(language: Language, name: Name, obj: any): void;\n\n        get(language: Language, name: Name, def?: any): any;\n\n        delete(language: Language, name: Name): void;\n\n        has(language: Language, name: Name): boolean;\n\n        getLanguages(): Language[];\n\n        getNames(lang: Language): Name[];\n\n        toJSON(): Obj;\n\n        fromJSON(obj: Obj): void;\n    }\n\n    export const defaultContainer: Container;\n", "    export function hasUnicode(str: string): boolean;\n\n    export function unicodeToArray(str: string): string[];\n\n    export function asciiToArray(str: string): string[];\n\n    export function stringToArray(str: string): string[];\n\n    export function compareWildcards(str: string, pattern: string): boolean;\n\n    export function loadEnv(env: string): void;\n", "    export function compareWildcards(str: string, pattern: string): boolean;\n\n    export function loadEnv(env: string): void;\n\n    export function listFiles(dir: string): Promise<string[]>;\n\n    export function listFilesAbsolute(dir: string): Promise<string[]>;\n\n    export function getAbsolutePath(path: string): string;\n\n    export class Normalizer {\n        constructor(options?: any);\n\n        add(lang: Language, name: Name, obj: any): void;\n\n        get(lang: Language, name: Name, def?: any): any;\n\n        delete(lang: Language, name: Name): void;\n\n        has(lang: Language, name: Name): boolean;\n\n        normalize(str: string, lang?: Language): string;\n\n        toJSON(): Obj;\n\n        fromJSON(obj: Obj): void;\n    }\n", "    export function getAbsolutePath(path: string): string;\n\n    export class Normalizer {\n        constructor(options?: any);\n\n        add(lang: Language, name: Name, obj: any): void;\n\n        get(lang: Language, name: Name, def?: any): any;\n\n        delete(lang: Language, name: Name): void;\n\n        has(lang: Language, name: Name): boolean;\n\n        normalize(str: string, lang?: Language): string;\n\n        toJSON(): Obj;\n\n        fromJSON(obj: Obj): void;\n    }\n", "    export function ObjToArr<T extends Obj>(obj: T): T[];\n\n    export class Stemmer extends BaseStemmer {\n        constructor(lang: Language, fn?: StemmerFunction);\n    }\n\n    export class Stopwords {\n        add(word: string, lang?: Language): void;\n\n        remove(word: string, lang?: Language): void;\n\n        exists(word: string, lang?: Language): boolean;\n\n        get(lang?: Language): string[];\n\n        toJSON(): Obj;\n\n        fromJSON(obj: Obj): void;\n    }\n", "    export class Tokenizer {\n        constructor(container?: Container, shouldNormalize?: boolean);\n        tokenize(str: string): string[];\n        addRule(rule: any): void;\n        addException(exception: string): void;\n        addChar(char: string): void;\n        addToken(token: string): void;\n        removeRule(rule: any): void;\n        removeException(exception: string): void;\n        removeChar(char: string): void;\n        removeToken(token: string): void;\n        normalize(str: string): string;\n        toJSON(): Obj;\n        fromJSON(obj: Obj): void;\n    }\n", "    export class Timer {\n        start(): void;\n\n        stop(): void;\n\n        getTime(): number;\n\n        static measure(fn: Function, label?: string): number;\n    }\n\n    export const logger: any;\n", "    export class MemoryStorage {\n        data: Obj;\n\n        constructor();\n\n        set(id: Id, value: any): void;\n\n        get(id: Id): any;\n\n        delete(id: Id): void;\n\n        has(id: Id): boolean;\n\n        keys(): string[];\n    }\n", "    export function uuid(): string;\n\n    export class Context {\n        constructor(obj?: Obj);\n\n        set(name: string, value: any): void;\n\n        get(name: string, def?: any): any;\n\n        has(name: string): boolean;\n\n        delete(name: string): void;\n\n        toJSON(): Obj;\n\n        fromJSON(obj: Obj): void;\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/builtin-duckling.d.ts", "chunked_list": ["declare module '@nlpjs/builtin-duckling' {\n    export class BuiltinDuckling {\n        constructor(settings: any)\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/evaluator.d.ts", "chunked_list": ["declare module '@nlpjs/evaluator' {\n    export class Evaluator {}\n    export class Template {}\n\n    export function compile(str: string): string\n}\n"]}
{"filename": "src/types/@nlpjs/builtin-microsoft.d.ts", "chunked_list": ["declare module '@nlpjs/builtin-microsoft' {\n    export class BuiltinMicrosoft {\n        constructor(settings: any)\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/sentiment.d.ts", "chunked_list": ["declare module '@nlpjs/sentiment' {\n    import { Container } from '@nlpjs/core'\n\n    export class SentimentAnalyzer {\n        protected container: Container\n        constructor(settings?: any, container?: Container)\n\n        protected process(input: any): Promise<{sentiment: any}>\n    }\n}\n"]}
{"filename": "src/types/@nlpjs/lang-all.d.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\ndeclare module \"@nlpjs/lang-all\" {\n    interface LangAll {\n        [key: string]: any;\n    }\n\n\n    const LangAll: LangAll;\n    export { LangAll };\n}\n", "    interface LangAll {\n        [key: string]: any;\n    }\n\n\n    const LangAll: LangAll;\n    export { LangAll };\n}\n"]}
{"filename": "src/types/@nlpjs/nlu.d.ts", "chunked_list": ["declare module '@nlpjs/nlu' {\n    import { EventEmitter } from 'events';\n    import { Container } from '@nlpjs/core';\n\n    export interface INluOptions {\n        container?: Container;\n        containerName?: string;\n        autoSave?: boolean;\n        autoLoad?: boolean;\n        persist?: boolean;\n        persistFilename?: string;\n        persistDir?: string;\n        persistInterval?: number;\n        persistStateFilename?: string;\n        persistStateDir?: string;\n        persistStateInterval?: number;\n        log?: boolean;\n        minSamplesPerIntent?: number;\n        trainByDomain?: boolean;\n        languages?: string[];\n        locale?: string;\n    }\n", "    export interface INluClassifyPayload {\n        utterance: string;\n        locale?: string;\n        language?: string;\n        domain?: string;\n        timezone?: string;\n        userId?: string;\n        sessionId?: string;\n        additional?: any;\n    }\n", "    export interface INluModel {\n        lang?: string;\n        lastUpdate?: string;\n        minSamplesPerIntent?: number;\n        trainByDomain?: boolean;\n        intentThresholds?: { [name: string]: number };\n        entitiesThresholds?: { [name: string]: number };\n        utterances?: { [locale: string]: { [intent: string]: string[] } };\n        domains?: { [name: string]: { [locale: string]: { [intent: string]: string[] } } };\n        entities?: {\n            [locale: string]: {\n                [name: string]: {\n                    type: string;\n                    values: { [value: string]: any };\n                };\n            };\n        };\n        regex?: { [name: string]: { [locale: string]: string } };\n        stems?: { [locale: string]: { [value: string]: string } };\n    }\n", "    export class Nlu extends EventEmitter {\n        constructor();\n\n        container: Container;\n        model?: INluModel;\n        containerName?: string;\n        locale: string;\n        languages: string[];\n        settings: INluOptions;\n        stopWords: Set<string>;\n        stemmers: {\n            [locale: string]: (str: string) => string;\n        };\n        classifiers: {\n            [locale: string]: {\n                [name: string]: any;\n            };\n        };\n\n        load(): Promise<void>;\n\n        process(payload: INluClassifyPayload): Promise<INluModel>;\n\n        train(): Promise<void>;\n\n        save(): Promise<void>;\n\n        export(): INluModel;\n    }\n", "    export interface NluNeuralSettings {\n        locale?: string;\n        log?: boolean;\n        useNoneFeature?: boolean;\n        noneValue?: number;\n        useNeural?: boolean;\n        stemming?: boolean;\n        useRegExpTokenize?: boolean;\n        useLemma?: boolean;\n        minScore?: number;\n        ner?: any;\n        skipStopWords?: boolean;\n        pipeline?: any;\n    }\n", "    export class NluNeural {\n        constructor(settings?: NluNeuralSettings);\n        settings: NluNeuralSettings;\n        train(corpus: any[], settings?: NluNeuralSettings): Promise<void>;\n        process(utterance: string, context?: any): Promise<{\n            classifications: Array<{\n                intent: string;\n                score: number;\n            }>;\n        }>;\n    }\n", "    export class NluNeuralManager {\n        constructor(settings?: NluNeuralSettings);\n        nlu: NluNeural;\n        container: any;\n    }\n    export function register(container: any, options?: NluNeuralSettings): void;\n}\n"]}
{"filename": "src/nlp/nlp-excel-reader.ts", "chunked_list": ["import { XDoc } from '@nlpjs/xtables';\nimport NlpManager from './nlp-manager';\n\nclass NlpExcelReader {\n  private manager: NlpManager;\n  private xdoc: XDoc;\n\n  constructor(manager: NlpManager) {\n    this.manager = manager;\n    this.xdoc = new XDoc();\n  }\n\n  load(filename: string): void {\n    this.xdoc.read(filename);\n    this.loadSettings();\n    this.loadLanguages();\n    this.loadNamedEntities();\n    this.loadRegexEntities();\n    this.loadIntents();\n    this.loadResponses();\n  }\n\n  loadSettings(): void {}\n\n  loadLanguages(): void {\n    const rows: Record<string, string>[] = this.xdoc.getTable('Languages').data;\n    rows.forEach((row: Record<string, string>) => {\n      this.manager.addLanguage(row.iso2);\n    });\n  }\n\n  loadNamedEntities(): void {\n    const rows: Record<string, string>[] = this.xdoc.getTable('Named Entities').data;\n    rows.forEach((row: Record<string, string>) => {\n      const languages = row.language.split(',').map((x) => x.trim());\n      this.manager.addNamedEntityText(row.entity, row.option, languages, [row.text]);\n    });\n  }\n\n  loadRegexEntities(): void {\n    const table = this.xdoc.getTable('Regex Entities');", "    if (table) {\n      const rows: Record<string, string>[] = table.data;\n      rows.forEach((row: Record<string, string>) => {\n        const languages = row.language.split(',').map((x) => x.trim());\n        this.manager.addRegexEntity(row.entity, languages, row.regex);\n      });\n    }\n  }\n\n  loadIntents(): void {\n    const rows: Record<string, string>[] = this.xdoc.getTable('Intents').data;\n    rows.forEach((row: Record<string, string>) => {\n      this.manager.addDocument(row.language, row.utterance, row.intent);\n    });\n  }\n\n  loadResponses(): void {\n    const rows: Record<string, string>[] = this.xdoc.getTable('Responses').data;\n    rows.forEach((row: Record<string, string>) => {\n      this.manager.addAnswer(row.language, row.intent, row.response, row.condition);\n      // this.manager.addAnswer(row.language, row.intent, row.response, row.condition, row.url);\n    });\n  }\n}\n\nexport default NlpExcelReader;\n"]}
{"filename": "src/nlp/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport NlpUtil from './nlp-util';\nimport NlpManager from './nlp-manager';\nimport NlpExcelReader from './nlp-excel-reader';", "import NlpManager from './nlp-manager';\nimport NlpExcelReader from './nlp-excel-reader';\n\nexport {\n    NlpUtil,\n    NlpManager,\n    NlpExcelReader\n}\n", ""]}
{"filename": "src/nlp/nlp-manager.ts", "chunked_list": ["import fs from 'fs';\nimport { BuiltinMicrosoft } from '@nlpjs/builtin-microsoft';\nimport { BuiltinDuckling } from '@nlpjs/builtin-duckling';\nimport { containerBootstrap } from '@nlpjs/core-loader';\nimport Language from '@nlpjs/language';\nimport { LangAll } from '@nlpjs/lang-all';\nimport { Nlp } from '@nlpjs/nlp';\nimport { Evaluator, Template } from '@nlpjs/evaluator';\nimport { fs as requestfs } from '@nlpjs/request';\nimport { SentimentManager } from '../sentiment';", "import { fs as requestfs } from '@nlpjs/request';\nimport { SentimentManager } from '../sentiment';\nimport NlpExcelReader from './nlp-excel-reader';\n\nexport interface NlpManagerSettings {\n  container?: any\n  languages?: string[]\n\n  nlu?: {\n    log?: boolean\n  }\n  ner?: {\n    useDuckling?: boolean\n    ducklingUrl?: string\n    locale?: string\n    threshold?: number\n  }\n  action?: {\n    [key: string]: (params: any, context: any, result: any) => Promise<void> | void\n  }\n  settings?: any\n  forceNER?: boolean\n  processTransformer?: (result: any) => any\n}\n", "class NlpManager {\n  private readonly settings: NlpManagerSettings;\n  private container: any;\n  private nlp: any;\n  private sentimentManager: SentimentManager;\n\n  constructor(settings: NlpManagerSettings) {\n    this.settings = settings;\n    if (!this.settings.container) {\n      this.settings.container = containerBootstrap();\n    }\n    this.container = this.settings.container;\n    this.container.registerConfiguration('ner', {\n      entityPreffix: '%',\n      entitySuffix: '%',\n    });\n    this.container.register('fs', requestfs);\n    this.container.register('Language', Language, false);\n    this.container.use(LangAll);\n    this.container.use(Evaluator);\n    this.container.use(Template);\n    this.nlp = new Nlp(this.settings);\n    this.sentimentManager = new SentimentManager();", "    if (!this.settings.container) {\n      this.settings.container = containerBootstrap();\n    }\n    this.container = this.settings.container;\n    this.container.registerConfiguration('ner', {\n      entityPreffix: '%',\n      entitySuffix: '%',\n    });\n    this.container.register('fs', requestfs);\n    this.container.register('Language', Language, false);\n    this.container.use(LangAll);\n    this.container.use(Evaluator);\n    this.container.use(Template);\n    this.nlp = new Nlp(this.settings);\n    this.sentimentManager = new SentimentManager();", "    if (this.settings.ner) {\n      if (this.settings.ner.ducklingUrl || this.settings.ner.useDuckling) {\n        const builtin = new BuiltinDuckling(this.settings.ner);\n        this.container.register('extract-builtin-??', builtin, true);\n      } else {\n        const builtin = new BuiltinMicrosoft(this.settings.ner);\n        this.container.register('extract-builtin-??', builtin, true);\n      }\n    } else {\n      const builtin = new BuiltinMicrosoft(this.settings.ner);\n      this.container.register('extract-builtin-??', builtin, true);\n    }\n  }\n\n  public addDocument(locale: string, utterance: string, intent: string) {\n    return this.nlp.addDocument(locale, utterance, intent);\n  }\n\n  public removeDocument(locale: string, utterance: string, intent: string) {\n    return this.nlp.removeDocument(locale, utterance, intent);\n  }\n\n  public addLanguage(locale: string) {\n    return this.nlp.addLanguage(locale);\n  }\n\n  public removeLanguage(locale: string) {\n    return this.nlp.removeLanguage(locale);\n  }\n\n  public assignDomain(locale: string, intent: string, domain: string) {\n    return this.nlp.assignDomain(locale, intent, domain);\n  }\n\n  public getIntentDomain(locale: string, intent: string): string {\n    return this.nlp.getIntentDomain(locale, intent);\n  }\n\n  public getDomains(): string[] {\n    return this.nlp.getDomains();\n  }\n\n  public guessLanguage(text: string): string {\n    return this.nlp.guessLanguage(text);\n  }\n\n  public addAction(\n      intent: string,\n      action: string,\n      parameters: string[],\n      fn?: (params: any, context: any, result: any) => Promise<void> | void\n  ) {", "    if (!fn) {\n      fn = this.settings.action ? this.settings.action[action] : undefined;\n    }\n    return this.nlp.addAction(intent, action, parameters, fn);\n  }\n\n  getActions(intent: string): string[] {\n    return this.nlp.getActions(intent);\n  }\n\n  removeAction(intent: string, action: string, parameters?: string[]): boolean {\n    return this.nlp.removeAction(intent, action, parameters);\n  }\n\n  removeActions(intent: string): boolean {\n    return this.nlp.removeActions(intent);\n  }\n\n  addAnswer(locale: string, intent: string, answer: string, opts?: any): string {\n    return this.nlp.addAnswer(locale, intent, answer, opts);\n  }\n\n  removeAnswer(locale: string, intent: string, answer: string, opts?: any): boolean {\n    return this.nlp.removeAnswer(locale, intent, answer, opts);\n  }\n\n  findAllAnswers(locale: string, intent: string): string[] {\n    return this.nlp.findAllAnswers(locale, intent);\n  }\n\n  async getSentiment(locale: string, utterance: string): Promise<{ numHits: number; score: number; comparative: number; language: string; numWords: number; type: string; vote: any }> {\n    const sentiment = await this.nlp.getSentiment(locale, utterance);\n    return this.sentimentManager.translate(sentiment.sentiment);\n  }\n\n  addNamedEntityText(entityName: string, optionName: string, languages: string[], texts: string[]): void {\n    return this.nlp.addNerRuleOptionTexts(languages, entityName, optionName, texts);\n  }\n\n  removeNamedEntityText(entityName: string, optionName: string, languages: string[], texts: string[]): void {\n    return this.nlp.removeNerRuleOptionTexts(languages, entityName, optionName, texts);\n  }\n\n  addRegexEntity(entityName: string, languages: string[], regex: string): void {\n    return this.nlp.addNerRegexRule(languages, entityName, regex);\n  }\n\n  addBetweenCondition(locale: string, name: string, left: string, right: string, opts?: any): void {\n    return this.nlp.addNerBetweenCondition(locale, name, left, right, opts);\n  }\n\n  addPositionCondition(locale: string, name: string, position: string, words: string[], opts?: any): void {\n    return this.nlp.addNerPositionCondition(locale, name, position, words, opts);\n  }\n\n  addAfterCondition(locale: string, name: string, words: string[], opts?: any): void {\n    return this.nlp.addNerAfterCondition(locale, name, words, opts);\n  }\n\n  addAfterFirstCondition(locale: string, name: string, words: string[], opts?: any): void {\n    return this.nlp.addNerAfterFirstCondition(locale, name, words, opts);\n  }\n\n  addAfterLastCondition(locale: string, name: string, words: string[], opts?: any): void {\n    return this.nlp.addNerAfterLastCondition(locale, name, words, opts);\n  }\n\n  addBeforeCondition(locale: string, name: string, words: string[], opts?: any): void {\n    return this.nlp.addNerBeforeCondition(locale, name, words, opts);\n  }\n\n  addBeforeFirstCondition(locale: string, name: string, words: string[], opts?: any): void {\n    return this.nlp.addNerBeforeFirstCondition(locale, name, words, opts);\n  }\n\n  addBeforeLastCondition(locale: string, name: string, words: string[], opts?: any): void {\n    return this.nlp.addNerBeforeLastCondition(locale, name, words, opts);\n  }\n\n  describeLanguage(locale: string, name: string): void {\n    return this.nlp.describeLanguage(locale, name);\n  }\n\n  beginEdit(): void {\n  }\n\n  async train(): Promise<void> {\n    return this.nlp.train();\n  }\n\n  classify(locale: string, utterance: string, settings?: Record<string, unknown>): Promise<any> {\n    return this.nlp.classify(locale, utterance, settings);\n  }\n\n  async process(locale?: string, utterance?: string, context?: Record<string, unknown>, settings?: Record<string, unknown>): Promise<any> {\n    const result = await this.nlp.process(locale, utterance, context, settings);", "    if (this.settings.processTransformer) {\n      return this.settings.processTransformer(result);\n    }\n    return result;\n  }\n\n  extractEntities(locale: string, utterance: string, context?: Record<string, unknown>, settings?: Record<string, unknown>): Promise<any> {\n    return this.nlp.extractEntities(locale, utterance, context, settings);\n  }\n\n  toObj(): any {\n    return this.nlp.toJSON();\n  }\n\n  fromObj(obj: any): any {\n    return this.nlp.fromJSON(obj);\n  }\n\n  /**\n   * Export NLP manager information as a string.\n   * @param {Boolean} minified If true, the returned JSON will have no spacing or indentation.\n   * @returns {String} NLP manager information as a JSON string.\n   */\n  export(minified = false): string {\n    const clone = this.toObj();\n    return minified ? JSON.stringify(clone) : JSON.stringify(clone, null, 2);\n  }\n\n  /**\n   * Load NLP manager information from a string.\n   * @param {String|Object} data JSON string or object to load NLP manager information from.\n   */\n  import(data: string | Record<string, unknown>): void {\n    const clone = typeof data === 'string' ? JSON.parse(data) : data;\n    this.fromObj(clone);\n  }\n\n  /**\n   * Save the NLP manager information into a file.\n   * @param {String} srcFileName Filename for saving the NLP manager.\n   * @param minified\n   */\n  save(srcFileName?: string, minified = false): void {\n    const fileName = srcFileName || 'model.nlp';\n    fs.writeFileSync(fileName, this.export(minified), 'utf8');\n  }\n\n  /**\n   * Load the NLP manager information from a file.\n   * @param srcFileName\n   */\n  load(srcFileName?: string): void {\n    const fileName = srcFileName || 'model.nlp';\n    const data = fs.readFileSync(fileName, 'utf8');\n    this.import(data);\n  }\n\n  /**\n   * Load the NLP manager information from an Excel file.\n   * @param fileName\n   */\n  loadExcel(fileName = 'model.xls'): void {\n    const reader = new NlpExcelReader(this);\n    reader.load(fileName);\n  }\n\n  async testCorpus(corpus: any): Promise<any> {\n    const { data } = corpus;\n    const result = {\n      total: 0,\n      good: 0,\n      bad: 0,\n    };\n    const promises = [];\n    const intents = [];", "    for (let i = 0; i < data.length; i += 1) {\n      const intentData = data[i];\n      const { tests } = intentData;\n      for (let j = 0; j < tests.length; j += 1) {\n        promises.push(this.process(corpus.locale.slice(0, 2), tests[j]));\n        intents.push(intentData.intent);\n      }\n    }\n    result.total += promises.length;\n    const results = await Promise.all(promises);\n", "    for (let i = 0; i < results.length; i += 1) {\n      const current = results[i];\n      if (current.intent === intents[i]) {\n        result.good += 1;\n      } else {\n        result.bad += 1;\n      }\n    }\n    return result\n  }\n\n  addCorpora(corpora: any): void {\n    this.nlp.addCorpora(corpora);\n  }\n\n  addCorpus(corpus: any): void {\n    this.nlp.addCorpus(corpus);\n  }\n\n  async trainAndEvaluate(fileName: string | object): Promise<any> {\n    let corpus = fileName;", "    if (typeof fileName === 'string') {\n      const nlpfs = this.container.get('fs');\n      const fileData = await nlpfs.readFile(fileName);\n      if (!fileData) {\n        throw new Error(`Corpus not found \"${fileName}\"`);\n      }\n      corpus = typeof fileData === 'string' ? JSON.parse(fileData) : fileData;\n    }\n    this.nlp.addCorpus(corpus);\n    await this.train();\n    return this.testCorpus(corpus);\n  }\n}\n\nexport default NlpManager;\n"]}
{"filename": "src/nlp/nlp-util.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport {\n  BaseStemmer,\n  Tokenizer,", "  BaseStemmer,\n  Tokenizer,\n  defaultContainer,\n  containerBootstrap,\n} from '@nlpjs/core-loader';\nimport { LangAll } from '@nlpjs/lang-all';\n\ninterface Cultures {\n  [key: string]: string;\n}\n\nconst cultures: Cultures = {\n  ar: 'ar-ae', // Arabic\n  bn: 'bn-bd', // Bengali\n  ca: 'ca-es', // Catalan\n  cs: 'cs-cz', // Czech\n  da: 'da-dk', // Danish\n  el: 'el-gr', // Greek\n  en: 'en-us', // English\n  eu: 'eu-es', // Basque\n  fa: 'fa-ir', // Farsi\n  ga: 'ga-ie', // Irish\n  gl: 'gl-es', // Galician\n  hi: 'hi-in', // Hindi\n  hy: 'hy-am', // Armenian\n  ja: 'ja-jp', // Japanese\n  ko: 'ko-kr', // Korean\n  pl: 'pl-pl', // Polish\n  lt: 'lt-lt', // Lithuanian\n  ne: 'ne-ne', // Nepali\n  pt: 'pt-br', // Portuguese\n  sr: 'sr-rs', // Serbian\n  sv: 'sv-se', // Swedish\n  ta: 'ta-in', // Tamil\n  tl: 'tl-ph', // Tagalog\n  uk: 'uk-ua', // Ukraine\n  zh: 'zh-cn', // Chinese\n  id: 'id-id', // Indonesian,\n  ms: 'id-id', // Malay\n};\n", "class NlpUtil {\n  static tokenizers = {};\n\n  static useAutoStemmer = true;\n  static autoStemmers = {};\n\n  static useAlternative = {};\n\n  static useNoneFeature = {\n    bn: false,\n    el: true,\n    en: true,\n    hi: false,\n    fa: false,\n    fr: true,\n    ru: true,\n    es: true,\n    gl: true,\n    it: true,\n    nl: true,\n    no: true,\n    pt: true,\n    pl: true,\n    sv: true,\n    tl: true,\n    id: true,\n    ja: false,\n    ar: false,\n    hy: false,\n    eu: true,\n    ca: true,\n    cs: true,\n    da: true,\n    fi: true,\n    de: true,\n    hu: true,\n    ga: true,\n    ro: true,\n    sl: true,\n    ta: false,\n    th: false,\n    tr: true,\n    zh: false,\n  };\n\n  /**\n   * Given a locale, get the 2 character one.\n   * @param {String} locale Locale of the language.\n   * @returns {String} Locale in 2 character length.\n   */\n  static getTruncatedLocale(locale: string): string | undefined {\n    return locale ? locale.substring(0, 2).toLowerCase() : undefined;\n  }\n\n  static getStemmer(locale: string): BaseStemmer {", "    if (!locale) {\n      return new BaseStemmer();\n    }\n    const name = `Stemmer${locale.slice(0, 1).toUpperCase()}${locale.slice(1)}`;\n    const Stemmer = LangAll[name];\n    return Stemmer ? new Stemmer() : new BaseStemmer();\n  }\n\n  static getTokenizer(locale: string): Tokenizer {\n    if (!locale) {\n      return new Tokenizer();\n    }\n    const name = `Tokenizer${locale.slice(0, 1).toUpperCase()}${locale.slice(\n        1\n    )}`;\n    const TokenizerClass = LangAll[name];\n    return TokenizerClass\n        ? new TokenizerClass(undefined, true)\n        : new Tokenizer(undefined, true);\n  }\n\n  static getCulture(locale: string): string {", "    if (!locale) {\n      return new Tokenizer();\n    }\n    const name = `Tokenizer${locale.slice(0, 1).toUpperCase()}${locale.slice(\n        1\n    )}`;\n    const TokenizerClass = LangAll[name];\n    return TokenizerClass\n        ? new TokenizerClass(undefined, true)\n        : new Tokenizer(undefined, true);\n  }\n\n  static getCulture(locale: string): string {", "    if (!locale) {\n      return 'en-us';\n    }\n    return cultures[locale] || `${locale}-${locale}`;\n  }\n}\n\ncontainerBootstrap({}, true, defaultContainer);\ndefaultContainer.use(LangAll.LangAll);\n\nexport default NlpUtil;\n"]}
{"filename": "src/xtables/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { XTableUtils, XTable, XDoc } from '@nlpjs/xtables';\n\nexport {", "\nexport {\n  XTableUtils,\n  XTable,\n  XDoc,\n};\n"]}
{"filename": "src/sentiment/sentiment-analyzer.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { SentimentAnalyzer as SentimentAnalyzerBase } from '@nlpjs/sentiment';\nimport { LangAll } from '@nlpjs/lang-all';\nimport { Nlu } from '@nlpjs/nlu';", "import { LangAll } from '@nlpjs/lang-all';\nimport { Nlu } from '@nlpjs/nlu';\nimport { Container } from '@nlpjs/core'\n\nclass SentimentAnalyzer extends SentimentAnalyzerBase {\n  constructor(settings = {}, container?: Container) {\n    super(settings, container);\n    this.container.use(LangAll);\n    this.container.use(Nlu);\n  }\n\n  async getSentiment(utterance: string, locale = 'en', settings: [key: string]) {\n    const input = {\n      utterance,\n      locale,\n      ...settings,\n    };\n    const result = await this.process(input);\n    return result.sentiment;\n  }\n}\n\nexport default SentimentAnalyzer;\n"]}
{"filename": "src/sentiment/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport SentimentAnalyzer from './sentiment-analyzer'\nimport SentimentManager from './sentiment-manager'\n", "import SentimentManager from './sentiment-manager'\n\nexport {\n  SentimentAnalyzer,\n  SentimentManager\n}\n"]}
{"filename": "src/sentiment/sentiment-manager.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport SentimentAnalyzer from './sentiment-analyzer';\n\n/**", "\n/**\n * Class for the sentiment analysis manager, able to manage\n * several languages at the same time.\n */\nclass SentimentManager {\n  private readonly settings: any\n  private languages: {}\n  private analyzer: SentimentAnalyzer\n  /**\n   * Constructor of the class.\n   */\n  constructor(settings?: any) {\n    this.settings = settings || {};\n    this.languages = {};\n    this.analyzer = new SentimentAnalyzer();\n  }\n\n  addLanguage() {\n    // do nothing\n  }\n\n  translate(sentiment: {score: number, average: number, type: string, numHits: number, numWords: number, locale: string}) {\n    let vote;", "    if (sentiment.score > 0) {\n      vote = 'positive';\n    } else if (sentiment.score < 0) {\n      vote = 'negative';\n    } else {\n      vote = 'neutral';\n    }\n    return {\n      score: sentiment.score,\n      comparative: sentiment.average,\n      vote,\n      numWords: sentiment.numWords,\n      numHits: sentiment.numHits,\n      type: sentiment.type,\n      language: sentiment.locale,\n    };\n  }\n\n  /**\n   * Process a phrase of a given locale, calculating the sentiment analysis.\n   * @param {String} locale Locale of the phrase.\n   * @param {String} phrase Phrase to calculate the sentiment.\n   * @returns {Promise Object} Promise sentiment analysis of the phrase.\n   */\n  async process(locale: string, phrase: string) {\n    const sentiment = await this.analyzer.getSentiment(\n      phrase,\n      locale,\n      this.settings\n    );\n    return this.translate(sentiment);\n  }\n}\n\nexport default SentimentManager\n"]}
{"filename": "src/classifiers/index.ts", "chunked_list": ["/*\n * Copyright (c) AXA Group Operations Spain S.A.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:", " * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE", " * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { NeuralNetwork } from '@nlpjs/neural'\n\nexport {", "\nexport {\n  NeuralNetwork,\n};\n"]}
