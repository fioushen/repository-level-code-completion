{"filename": "test/integration/setup.ts", "chunked_list": ["import * as nock from 'nock'\n\n// Disable outgoing HTTP requests from the tests. This will ensure we never hit\n// a downstream service during the tests by mistake.\nnock.disableNetConnect()\n"]}
{"filename": "test/integration/fixture/exchange-host.ts", "chunked_list": ["export const LATEST_RATES_RESPONSE = {\n  success: true,\n  base: 'EUR',\n  date: '2023-05-31',\n  rates: {\n    USD: 1.070252,\n    CLP: 860.693891,\n    BRL: 5.386883\n  }\n}", "  }\n}\n"]}
{"filename": "test/integration/client/exchange-host.client.test.ts", "chunked_list": ["import { HttpStatus } from '@nestjs/common'\nimport * as nock from 'nock'\nimport { ExchangeHostClient } from '../../../src/client/exchange-host.client'\nimport { LATEST_RATES_RESPONSE } from '../fixture/exchange-host'\nimport { Test, TestingModule } from '@nestjs/testing'\nimport { HttpModule } from '@nestjs/axios'\nimport { ZodError } from 'zod'\n\ndescribe('ExchangeHostClient', () => {\n  let client: ExchangeHostClient", "describe('ExchangeHostClient', () => {\n  let client: ExchangeHostClient\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [HttpModule],\n      providers: [ExchangeHostClient]\n    }).compile()\n\n    client = module.get<ExchangeHostClient>(ExchangeHostClient)", "\n    client = module.get<ExchangeHostClient>(ExchangeHostClient)\n  })\n\n  describe('getLatestRates', () => {\n    test('resolves with the latest rates', async () => {\n      nock(ExchangeHostClient.BASE_URL)\n        .get('/latest')\n        .query({\n          base: 'EUR'", "        .query({\n          base: 'EUR'\n        })\n        .reply(HttpStatus.OK, LATEST_RATES_RESPONSE)\n\n      const rates = await client.getLatestRates('EUR')\n\n      expect(rates).toEqual(LATEST_RATES_RESPONSE.rates)\n    })\n", "    })\n\n    test('coerces currency code from lower to upper case', async () => {\n      nock(ExchangeHostClient.BASE_URL)\n        .get('/latest')\n        .query({\n          base: 'EUR'\n        })\n        .reply(HttpStatus.OK, {\n          ...LATEST_RATES_RESPONSE,", "        .reply(HttpStatus.OK, {\n          ...LATEST_RATES_RESPONSE,\n          base: 'EUR',\n          rates: {\n            ...LATEST_RATES_RESPONSE.rates,\n            foo: 1.2\n          }\n        })\n\n      const rates = await client.getLatestRates('EUR')", "\n      const rates = await client.getLatestRates('EUR')\n\n      expect(rates.FOO).toEqual(1.2)\n    })\n\n    test('throws an exception when rates is invalid', () => {\n      nock(ExchangeHostClient.BASE_URL)\n        .get('/latest')\n        .query({", "        .get('/latest')\n        .query({\n          base: 'EUR'\n        })\n        .reply(HttpStatus.OK, {\n          ...LATEST_RATES_RESPONSE,\n          rates: undefined\n        })\n\n      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)", "\n      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n    })\n\n    test('throws an exception when currency code is bigger than 3 characters', () => {\n      nock(ExchangeHostClient.BASE_URL)\n        .get('/latest')\n        .query({\n          base: 'EUR'\n        })", "          base: 'EUR'\n        })\n        .reply(HttpStatus.OK, {\n          ...LATEST_RATES_RESPONSE,\n          base: 'FOOBAR',\n          rates: {\n            ...LATEST_RATES_RESPONSE.rates,\n            FOOBAR: 1.2\n          }\n        })", "          }\n        })\n\n      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n    })\n\n    test('throws an exception when currency code is smaller than 3 characters', () => {\n      nock(ExchangeHostClient.BASE_URL)\n        .get('/latest')\n        .query({", "        .get('/latest')\n        .query({\n          base: 'EUR'\n        })\n        .reply(HttpStatus.OK, {\n          ...LATEST_RATES_RESPONSE,\n          base: 'EUR',\n          rates: {\n            ...LATEST_RATES_RESPONSE.rates,\n            FO: 1.2", "            ...LATEST_RATES_RESPONSE.rates,\n            FO: 1.2\n          }\n        })\n\n      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n    })\n\n    test('throws an exception when rate amount is less than zero', () => {\n      nock(ExchangeHostClient.BASE_URL)", "    test('throws an exception when rate amount is less than zero', () => {\n      nock(ExchangeHostClient.BASE_URL)\n        .get('/latest')\n        .query({\n          base: 'EUR'\n        })\n        .reply(HttpStatus.OK, {\n          ...LATEST_RATES_RESPONSE,\n          base: 'EUR',\n          rates: {", "          base: 'EUR',\n          rates: {\n            ...LATEST_RATES_RESPONSE.rates,\n            FOO: -99\n          }\n        })\n\n      return expect(() => client.getLatestRates('EUR')).rejects.toThrow(ZodError)\n    })\n  })", "    })\n  })\n})\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core'\nimport { AppModule } from './app.module'\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  await app.listen(3000)\n}\n\nbootstrap()\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common'\nimport { ExchangeRateController } from './controller/exchange-rate.controller'\nimport { ExchangeRateService } from './service/exchange-rate.service'\nimport { ExchangeHostClient } from './client/exchange-host.client'\nimport { HttpModule } from '@nestjs/axios'\nimport { HostExchangeRateRepository } from './repository/host-exchange-rate.repository'\nimport { ExchangeRateRepositoryToken } from './repository/exchange-rate.repository'\nimport { FreeCurrencyConversionExchangeRateRepository } from './repository/free-currency-conversion-exchange-rate.repository'\nimport { FreeCurrencyConversionClient } from './client/free-currency-conversion.client'\nimport { ConfigModule } from '@nestjs/config'", "import { FreeCurrencyConversionClient } from './client/free-currency-conversion.client'\nimport { ConfigModule } from '@nestjs/config'\nimport { RedundantExchangeRateRepository } from './repository/redundant-exchange-rate.repository'\n\n@Module({\n  imports: [ConfigModule.forRoot(), HttpModule],\n  controllers: [ExchangeRateController],\n  providers: [\n    ExchangeRateService,\n    ExchangeHostClient,", "    ExchangeRateService,\n    ExchangeHostClient,\n    FreeCurrencyConversionClient,\n    HostExchangeRateRepository,\n    FreeCurrencyConversionExchangeRateRepository,\n    RedundantExchangeRateRepository,\n    {\n      provide: ExchangeRateRepositoryToken,\n      useExisting: RedundantExchangeRateRepository\n    }", "      useExisting: RedundantExchangeRateRepository\n    }\n  ]\n})\nexport class AppModule {}\n"]}
{"filename": "src/repository/free-currency-conversion-exchange-rate.repository.ts", "chunked_list": ["import { ExchangeRateRepository } from './exchange-rate.repository'\nimport { Inject } from '@nestjs/common'\nimport { FreeCurrencyConversionClient } from 'src/client/free-currency-conversion.client'\n\nexport class FreeCurrencyConversionExchangeRateRepository\n  implements ExchangeRateRepository\n{\n  constructor(\n    @Inject(FreeCurrencyConversionClient) private client: FreeCurrencyConversionClient\n  ) {}\n\n  async getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n    const rates = await this.client.getLatestRates(fromCurrency.toUpperCase())\n\n    return rates[toCurrency.toUpperCase()]\n  }\n}\n"]}
{"filename": "src/repository/redundant-exchange-rate.repository.ts", "chunked_list": ["import { Inject, Injectable, Logger } from '@nestjs/common'\nimport { ExchangeRateRepository } from './exchange-rate.repository'\nimport { FreeCurrencyConversionExchangeRateRepository } from './free-currency-conversion-exchange-rate.repository'\nimport { HostExchangeRateRepository } from './host-exchange-rate.repository'\n\n@Injectable()\nexport class RedundantExchangeRateRepository implements ExchangeRateRepository {\n  private logger = new Logger(RedundantExchangeRateRepository.name)\n\n  constructor(\n    @Inject(FreeCurrencyConversionExchangeRateRepository)\n    private freeCurrencyConversionExchangeRateRepository: FreeCurrencyConversionExchangeRateRepository,\n    @Inject(HostExchangeRateRepository)\n    private hostExchangeRateRepository: HostExchangeRateRepository\n  ) {}\n\n  async getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n    this.logger.log({\n      message: 'Get spot price',\n      fromCurrency,\n      toCurrency\n    })\n", "    try {\n      const spotPrice =\n        await this.freeCurrencyConversionExchangeRateRepository.getSpotPrice(\n          fromCurrency,\n          toCurrency\n        )\n\n      this.logger.log({\n        message: 'Successfully got spot price',\n        fromCurrency,\n        toCurrency,\n        spotPrice\n      })\n\n      return spotPrice", "    } catch (error) {\n      this.logger.log({\n        message: 'Failed to get spot price. Falling back to another exchange rate',\n        fromCurrency,\n        toCurrency,\n        error\n      })\n\n      return this.hostExchangeRateRepository.getSpotPrice(fromCurrency, toCurrency)\n    }\n  }\n}\n"]}
{"filename": "src/repository/exchange-rate.repository.ts", "chunked_list": ["export interface ExchangeRateRepository {\n  getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number>\n}\n\nexport const ExchangeRateRepositoryToken = Symbol('ExchangeRateRepository')\n"]}
{"filename": "src/repository/host-exchange-rate.repository.ts", "chunked_list": ["import { Inject, Injectable } from '@nestjs/common'\nimport { ExchangeHostClient } from 'src/client/exchange-host.client'\nimport { ExchangeRateRepository } from './exchange-rate.repository'\n\n@Injectable()\nexport class HostExchangeRateRepository implements ExchangeRateRepository {\n  constructor(@Inject(ExchangeHostClient) private client: ExchangeHostClient) {}\n\n  async getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n    const rates = await this.client.getLatestRates(fromCurrency.toUpperCase())\n\n    return rates[toCurrency.toUpperCase()]\n  }\n}\n"]}
{"filename": "src/controller/exchange-rate.controller.ts", "chunked_list": ["import { Controller, Get, Inject, Query } from '@nestjs/common'\nimport { ExchangeRateService } from 'src/service/exchange-rate.service'\n\n@Controller('exchange-rate')\nexport class ExchangeRateController {\n  constructor(@Inject(ExchangeRateService) private service: ExchangeRateService) {}\n\n  @Get('/spot-price')\n  async getSpotPrice(\n    @Query('fromCurrency') fromCurrency: string,\n    @Query('toCurrency') toCurrency: string\n  ): Promise<{ spotPrice: number }> {\n    const spotPrice = await this.service.getSpotPrice(fromCurrency, toCurrency)\n\n    return { spotPrice }\n  }\n}\n"]}
{"filename": "src/client/exchange-host.client.ts", "chunked_list": ["import { HttpService } from '@nestjs/axios'\nimport { Inject, Injectable, Logger } from '@nestjs/common'\nimport { lastValueFrom, map, tap } from 'rxjs'\nimport { z } from 'zod'\n\nconst CurrencyCode = z.string().min(3).max(3).toUpperCase()\n\nconst RateAmount = z.number().min(0)\n\nconst Rates = z.record(CurrencyCode, RateAmount)", "\nconst Rates = z.record(CurrencyCode, RateAmount)\n\nconst LatestResponse = z.object({\n  success: z.boolean(),\n  base: CurrencyCode,\n  date: z.string(),\n  rates: Rates\n})\n\ntype Rates = z.infer<typeof Rates>\n", "})\n\ntype Rates = z.infer<typeof Rates>\n\nexport type LatestResponse = z.infer<typeof LatestResponse>\n\n@Injectable()\nexport class ExchangeHostClient {\n  private logger = new Logger(ExchangeHostClient.name)\n\n  static BASE_URL = 'https://api.exchangerate.host'\n\n  constructor(@Inject(HttpService) private http: HttpService) {}\n\n  getLatestRates(baseCurrency: string): Promise<Rates> {\n    this.logger.log({\n      message: 'Fetching latest rates',\n      baseCurrency\n    })\n\n    return lastValueFrom(\n      this.http\n        .request<unknown>({\n          method: 'GET',\n          url: `${ExchangeHostClient.BASE_URL}/latest`,\n          params: {\n            base: baseCurrency.toUpperCase()\n          }\n        })\n        .pipe(\n          map((response) => LatestResponse.parse(response.data)),\n          map((data) => data.rates),\n          tap((rates) =>\n            this.logger.log({\n              message: 'Received latest rates',\n              baseCurrency,\n              rates\n            })\n          )\n        )\n    )\n  }\n}\n"]}
{"filename": "src/client/free-currency-conversion.client.ts", "chunked_list": ["import { HttpService } from '@nestjs/axios'\nimport { Inject, Injectable, Logger } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport { lastValueFrom, map, tap } from 'rxjs'\n\ntype CurrencyCode = string\n\ntype Rates = Record<CurrencyCode, number>\n\ntype LatestRatesResponse = {\n  data: Rates\n}\n\n@Injectable()", "type LatestRatesResponse = {\n  data: Rates\n}\n\n@Injectable()\nexport class FreeCurrencyConversionClient {\n  private logger = new Logger(FreeCurrencyConversionClient.name)\n\n  static BASE_URL = 'https://api.freecurrencyapi.com/v1'\n\n  constructor(\n    @Inject(HttpService) private http: HttpService,\n    @Inject(ConfigService) private config: ConfigService\n  ) {}\n\n  getLatestRates(baseCurrency: string): Promise<Rates> {\n    this.logger.log({\n      message: 'Fetching latest rates',\n      baseCurrency\n    })\n\n    return lastValueFrom(\n      this.http\n        .request<LatestRatesResponse>({\n          method: 'GET',\n          url: `${FreeCurrencyConversionClient.BASE_URL}/latest`,\n          params: {\n            base_currency: baseCurrency.toUpperCase(),\n            apikey: this.config.get<string>('FREE_CURRENCY_CONVERSION_API_KEY')\n          }\n        })\n        .pipe(\n          map((response) => response.data.data),\n          tap((rates) =>\n            this.logger.log({\n              message: 'Received latest rates',\n              baseCurrency,\n              rates\n            })\n          )\n        )\n    )\n  }\n}\n"]}
{"filename": "src/service/exchange-rate.service.ts", "chunked_list": ["import { Inject, Injectable } from '@nestjs/common'\nimport {\n  ExchangeRateRepository,\n  ExchangeRateRepositoryToken\n} from 'src/repository/exchange-rate.repository'\n\n@Injectable()\nexport class ExchangeRateService {\n  constructor(\n    @Inject(ExchangeRateRepositoryToken) private repository: ExchangeRateRepository\n  ) {}\n\n  getSpotPrice(fromCurrency: string, toCurrency: string): Promise<number> {\n    return this.repository.getSpotPrice(fromCurrency, toCurrency)\n  }\n}\n"]}
