{"filename": "src/types.ts", "chunked_list": ["import { ReactElement, RefObject } from 'react';\nimport {\n  ScrollView,\n  ViewProps,\n  LayoutRectangle,\n  NativeSyntheticEvent,\n  TargetedEvent,\n} from 'react-native';\nimport WebView, {\n  WebViewMessageEvent,", "import WebView, {\n  WebViewMessageEvent,\n  WebViewProps,\n} from 'react-native-webview';\n\nexport enum FormatType {\n  image = 'image',\n  bold = 'bold',\n  italic = 'italic',\n  underline = 'underline',\n  strike = 'strike',\n  subscript = 'subscript',\n  superscript = 'superscript',\n  orderedList = 'orderedList',\n  bulletList = 'bulletList',\n  highlight = 'highlight',\n  color = 'color',\n  textStyle = 'textStyle',\n  heading = 'heading',\n  cloze = 'cloze',\n}\n", "export type FormatOptions = Record<string, any>;\n\nexport type EditorState = { [key in FormatType]?: boolean | FormatOptions };\n\nexport type ChangeContentArgs = {\n  html: string;\n  json: JSON;\n  plainText: string;\n};\n\nexport type LayoutTargetedChangeEvent = NativeSyntheticEvent<\n  { layout: LayoutRectangle } & TargetedEvent\n>;\n", "export type LayoutTargetedChangeEvent = NativeSyntheticEvent<\n  { layout: LayoutRectangle } & TargetedEvent\n>;\n\nexport type RichTextToolbarChildrenArgs = {\n  state?: EditorState;\n  handleFormatPress: (type: FormatType, options?: FormatOptions) => () => void;\n};\n\nexport enum BridgeMessageType {\n  CONSOLE = 'CONSOLE',\n  MESSAGE = 'MESSAGE',\n  EVENT = 'EVENT',\n}\n", "export enum BridgeMessageType {\n  CONSOLE = 'CONSOLE',\n  MESSAGE = 'MESSAGE',\n  EVENT = 'EVENT',\n}\n\nexport enum ActionType {\n  FORMAT = 'FORMAT',\n  UNFORMAT = 'UNFORMAT',\n  MESSAGE = 'MESSAGE',\n  EVENT = 'EVENT',\n}\n", "export type RichTextEditorProps = Omit<WebViewProps, 'onLayout'> & {\n  toolbarRef?: RefObject<RefRichTextToolbar>;\n  scrollViewRef?: RefObject<ScrollView>;\n  focusOffsetY?: number;\n  actions?: generateHTMLTemplateArgs['actions'];\n  removedActions?: generateHTMLTemplateArgs['removedActions'];\n  placeholder?: generateHTMLTemplateArgs['placeholder'];\n  autoCapitalize?: generateHTMLTemplateArgs['autoCapitalize'];\n  autoCorrect?: generateHTMLTemplateArgs['autoCorrect'];\n  enterKeyHint?: generateHTMLTemplateArgs['enterKeyHint'];\n  initialHTMLContent?: generateHTMLTemplateArgs['initialHTMLContent'];\n  htmlStyles?: {\n    placeholderColor?: generateHTMLTemplateArgs['placeholderColor'];\n    backgroundColor?: generateHTMLTemplateArgs['backgroundColor'];\n    caretColor?: generateHTMLTemplateArgs['caretColor'];\n    CSS?: generateHTMLTemplateArgs['CSS'];\n  };\n  autoFocus?: generateHTMLTemplateArgs['autoFocus'];\n  onLayoutContainer?: ViewProps['onLayout'];\n  onLayout?: (event: LayoutTargetedChangeEvent) => void;\n  onChangeHeight?: (height: number) => void;\n  onChangeContent?: ({ html, json, plainText }: ChangeContentArgs) => void;\n  onChangeCursorPosition?: (y: number) => void;\n  onFocus?: () => void;\n  onBlur?: () => void;\n  onReady?: WebViewProps['onLoadEnd'];\n  onPaste?: () => void;\n};\n", "export type RefRichTextEditor = {\n  focus: () => void;\n  blur: () => void;\n  format: (type: FormatType, options?: FormatOptions) => void;\n  unformat: (type: FormatType, options?: FormatOptions) => void;\n  setContent: (content: string) => void;\n  postMessage?: WebView['postMessage'];\n};\n\nexport type RefRichTextToolbar = {\n  format: RefRichTextEditor['format'];\n  handleMessage: (event: WebViewMessageEvent) => void;\n};\n", "export type RefRichTextToolbar = {\n  format: RefRichTextEditor['format'];\n  handleMessage: (event: WebViewMessageEvent) => void;\n};\n\nexport type RichTextToolbarProps = {\n  editorRef?: RefObject<RefRichTextEditor>;\n  children: (data: RichTextToolbarChildrenArgs) => ReactElement;\n};\n\nexport type generateHTMLTemplateArgs = {\n  containerCSSClass?: string;\n  backgroundColor?: string;\n  caretColor?: string;\n  initialHTMLContent?: string;\n  placeholder?: string;\n  placeholderColor?: string;\n  CSS?: string;\n  autoFocus?: boolean;\n  enterKeyHint?: string;\n  autoCapitalize?: string;\n  autoCorrect?: boolean;\n  actions?: FormatType[];\n  height?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  removedActions?: FormatType[];\n};\n", "export type generateHTMLTemplateArgs = {\n  containerCSSClass?: string;\n  backgroundColor?: string;\n  caretColor?: string;\n  initialHTMLContent?: string;\n  placeholder?: string;\n  placeholderColor?: string;\n  CSS?: string;\n  autoFocus?: boolean;\n  enterKeyHint?: string;\n  autoCapitalize?: string;\n  autoCorrect?: boolean;\n  actions?: FormatType[];\n  height?: number | string;\n  minHeight?: number | string;\n  maxHeight?: number | string;\n  removedActions?: FormatType[];\n};\n"]}
{"filename": "src/index.ts", "chunked_list": ["export { RichTextEditor } from './components/RichTextEditor';\nexport { RichTextToolbar } from './components/RichTextToolbar';\nexport * from './types';\n"]}
{"filename": "src/index.d.ts", "chunked_list": ["import {\n  ForwardRefExoticComponent,\n  PropsWithoutRef,\n  RefAttributes,\n} from 'react';\n\nimport {\n  RefRichTextEditor,\n  RefRichTextToolbar,\n  RichTextEditorProps,", "  RefRichTextToolbar,\n  RichTextEditorProps,\n  RichTextToolbarProps,\n} from './types';\n\ndeclare const RichTextEditor: ForwardRefExoticComponent<\n  PropsWithoutRef<RichTextEditorProps> & RefAttributes<RefRichTextEditor>\n>;\ndeclare const RichTextToolbar: ForwardRefExoticComponent<\n  PropsWithoutRef<RichTextToolbarProps> & RefAttributes<RefRichTextToolbar>", "declare const RichTextToolbar: ForwardRefExoticComponent<\n  PropsWithoutRef<RichTextToolbarProps> & RefAttributes<RefRichTextToolbar>\n>;\n\nexport { RichTextEditor, RichTextToolbar };\nexport * from './types';\n"]}
{"filename": "src/components/RichTextEditor.styles.ts", "chunked_list": ["import { Platform, StyleSheet } from 'react-native';\n\nexport const styles = StyleSheet.create({\n  webView: {\n    flex: 0,\n    height: '100%',\n    backgroundColor: 'transparent',\n    // resolving old issue with react-native-webview on Android\n    opacity: Platform.OS === 'android' ? 0.99 : 1,\n  },", "    opacity: Platform.OS === 'android' ? 0.99 : 1,\n  },\n  hiddenInput: {\n    position: 'absolute',\n    zIndex: -999,\n    left: -999,\n    bottom: -999,\n    width: 1,\n    height: 1,\n  },", "    height: 1,\n  },\n});\n"]}
{"filename": "src/html/generateHTMLTemplate.ts", "chunked_list": ["import { Platform } from 'react-native';\n\nimport { FormatType, generateHTMLTemplateArgs } from '../types';\nimport { RNBridge } from './scripts/RNBridge';\nimport { RNEditor } from './scripts/RNEditor';\nimport { utils } from './scripts/utils';\nimport { extensions } from './scripts/extensions';\n\nconst { core } = require('../html/scripts/editorBundleString') || '';\nif (!core) {\n  console.log(\n    '@ankipro/react-native-rich-text ERROR: the bundle was not generated.'\n  );\n}\n\nexport const generateHTMLTemplate = ({\n  containerCSSClass = 'rn_editor',\n  backgroundColor = 'rgba(0,0,0,0)',\n  caretColor = '#000000',\n  initialHTMLContent = '',\n  placeholder = '',\n  placeholderColor = '#a9a9a9',\n  CSS = '',\n  autoFocus = false,\n  enterKeyHint = '',\n  autoCapitalize = 'off',\n  autoCorrect = false,\n  height,\n  minHeight,\n  maxHeight,\n  removedActions = [],\n}: generateHTMLTemplateArgs) => `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>RN Rich Text Editor</title>\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=no,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\n    <style>\n      * {\n        outline: 0px solid transparent;\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        -webkit-touch-callout: none;\n        box-sizing: border-box;\n      }\n      html, body {\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, Roboto, system-ui, \"Segoe UI\", sans-serif;\n        font-size: 1em;\n        height: 100%;\n        width: 100%;\n      }\n      body {\n        overflow-y: hidden;\n        -webkit-overflow-scrolling: touch;\n        background-color: ${backgroundColor};\n        caret-color: ${caretColor};\n      }\n      p {\n        line-height: 1.5em;\n      }\n      .${containerCSSClass} .content sup,\n      .${containerCSSClass} .content sub {\n        line-height: 0;\n        font-size: small;\n      }\n      /* Placeholder */\n      .${containerCSSClass} .content p.is-editor-empty:first-child::before {\n        color: ${placeholderColor};\n        content: attr(data-placeholder);\n        float: left;\n        height: 0;\n        pointer-events: none;\n      }\n      ${CSS}\n    </style>\n  </head>\n  <body>\n    <div class=\"${containerCSSClass}\"></div>\n    <script>\n      ${core}\n      ${extensions}\n      (function() {\n        ${utils}\n        ${RNBridge}\n        ${RNEditor}\n\n        const TOOLBAR_ACTIONS = [${Object.values(FormatType)\n          .map((a) => `\"${a}\"`)\n          .toString()}];\n\n        RNEditor.init({\n          platform: \"${Platform.OS}\",\n          editorContainerElement: document.querySelector('.${containerCSSClass}'),\n          autoFocus: ${autoFocus},\n          placeholder: \"${placeholder}\",\n          cursorColor: \"${caretColor}\",\n          content: \\`${initialHTMLContent}\\`,\n          enterKeyHint: \"${enterKeyHint}\",\n          autoCapitalize: \"${autoCapitalize}\",\n          autoCorrect: ${autoCorrect},\n          contentHeight: ${height},\n          minContentHeight: ${minHeight},\n          maxContentHeight: ${maxHeight},\n          removedExtensions: [${Object.values(removedActions)\n            .map((a) => `\"${a}\"`)\n            .toString()}],\n        });\n      })();\n    </script>\n  </body>\n  </html>\n`;\n", "const { core } = require('../html/scripts/editorBundleString') || '';\nif (!core) {\n  console.log(\n    '@ankipro/react-native-rich-text ERROR: the bundle was not generated.'\n  );\n}\n\nexport const generateHTMLTemplate = ({\n  containerCSSClass = 'rn_editor',\n  backgroundColor = 'rgba(0,0,0,0)',\n  caretColor = '#000000',\n  initialHTMLContent = '',\n  placeholder = '',\n  placeholderColor = '#a9a9a9',\n  CSS = '',\n  autoFocus = false,\n  enterKeyHint = '',\n  autoCapitalize = 'off',\n  autoCorrect = false,\n  height,\n  minHeight,\n  maxHeight,\n  removedActions = [],\n}: generateHTMLTemplateArgs) => `\n  <!DOCTYPE html>\n  <html>\n  <head>\n    <title>RN Rich Text Editor</title>\n    <meta name=\"viewport\" content=\"width=device-width,user-scalable=no,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\n    <style>\n      * {\n        outline: 0px solid transparent;\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        -webkit-touch-callout: none;\n        box-sizing: border-box;\n      }\n      html, body {\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, Roboto, system-ui, \"Segoe UI\", sans-serif;\n        font-size: 1em;\n        height: 100%;\n        width: 100%;\n      }\n      body {\n        overflow-y: hidden;\n        -webkit-overflow-scrolling: touch;\n        background-color: ${backgroundColor};\n        caret-color: ${caretColor};\n      }\n      p {\n        line-height: 1.5em;\n      }\n      .${containerCSSClass} .content sup,\n      .${containerCSSClass} .content sub {\n        line-height: 0;\n        font-size: small;\n      }\n      /* Placeholder */\n      .${containerCSSClass} .content p.is-editor-empty:first-child::before {\n        color: ${placeholderColor};\n        content: attr(data-placeholder);\n        float: left;\n        height: 0;\n        pointer-events: none;\n      }\n      ${CSS}\n    </style>\n  </head>\n  <body>\n    <div class=\"${containerCSSClass}\"></div>\n    <script>\n      ${core}\n      ${extensions}\n      (function() {\n        ${utils}\n        ${RNBridge}\n        ${RNEditor}\n\n        const TOOLBAR_ACTIONS = [${Object.values(FormatType)\n          .map((a) => `\"${a}\"`)\n          .toString()}];\n\n        RNEditor.init({\n          platform: \"${Platform.OS}\",\n          editorContainerElement: document.querySelector('.${containerCSSClass}'),\n          autoFocus: ${autoFocus},\n          placeholder: \"${placeholder}\",\n          cursorColor: \"${caretColor}\",\n          content: \\`${initialHTMLContent}\\`,\n          enterKeyHint: \"${enterKeyHint}\",\n          autoCapitalize: \"${autoCapitalize}\",\n          autoCorrect: ${autoCorrect},\n          contentHeight: ${height},\n          minContentHeight: ${minHeight},\n          maxContentHeight: ${maxHeight},\n          removedExtensions: [${Object.values(removedActions)\n            .map((a) => `\"${a}\"`)\n            .toString()}],\n        });\n      })();\n    </script>\n  </body>\n  </html>\n`;\n"]}
{"filename": "src/html/index.ts", "chunked_list": ["export { generateHTMLTemplate } from './generateHTMLTemplate';\n"]}
{"filename": "src/html/scripts/RNBridge.ts", "chunked_list": ["export const RNBridge = `\nclass RNBridge {\n  static IS_RN = !!window.ReactNativeWebView;\n  static messageType = {\n    MESSAGE: 'MESSAGE',\n    CONSOLE: 'CONSOLE',\n    EVENT: 'EVENT'\n  }\n\n  static send(data) {\n    if (this.IS_RN) {\n      window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n  }\n\n  static console(data) {\n    this.send({ type: RNBridge.messageType.CONSOLE, data});\n  }\n\n  static message(data) {\n    this.send({ type: RNBridge.messageType.MESSAGE, data});\n  }\n\n  static event(event, data) {\n    this.send({ type: RNBridge.messageType.EVENT, event, data});\n  }\n\n  static initListener() {", "    if (this.IS_RN) {\n      window.ReactNativeWebView.postMessage(JSON.stringify(data));\n    }\n  }\n\n  static console(data) {\n    this.send({ type: RNBridge.messageType.CONSOLE, data});\n  }\n\n  static message(data) {\n    this.send({ type: RNBridge.messageType.MESSAGE, data});\n  }\n\n  static event(event, data) {\n    this.send({ type: RNBridge.messageType.EVENT, event, data});\n  }\n\n  static initListener() {", "    function handleMessage(event) {\n      const { actionType, formatType, eventType, data, options } = JSON.parse(event.data);\n      if (actionType === 'FORMAT') {\n        RNEditor.applyAction(formatType, options);\n      }\n      if (actionType === 'UNFORMAT') {\n        RNEditor.cancelAction(formatType, options);\n      }\n      if (actionType === 'EVENT') {\n        if (eventType === 'focus') {\n          RNEditor.instance.commands.focus('end');\n        }", "      if (actionType === 'EVENT') {\n        if (eventType === 'focus') {\n          RNEditor.instance.commands.focus('end');\n        }\n        if (eventType === 'blur') {\n          RNEditor.instance.commands.blur();\n        }\n        if (eventType === 'setContent') {\n          RNEditor.instance.commands.setContent(data);\n        }\n      }", "      if (actionType === 'MESSAGE') {\n        RNBridge.message({state: RNEditor.prevState});\n      }\n    }\n\n    // for iOS\n    window.addEventListener('message', handleMessage, false);\n    // for Android\n    document.addEventListener('message', handleMessage, false);\n  }\n}\n`;\n"]}
{"filename": "src/html/scripts/editorBundleString.d.ts", "chunked_list": ["declare const core: string;\n\nexport { core };\n"]}
{"filename": "src/html/scripts/RNEditor.ts", "chunked_list": ["export const RNEditor = `\nclass RNEditor {\n  static instance;\n  static isReady = false;\n  static editorContainerElement;\n  static contentClass = 'content';\n  static contentHeight;\n  static minContentHeight;\n  static maxContentHeight;\n  static prevContentHeight;\n  static prevState;\n  static debouncedUpdateState = debounce(RNEditor.updateToolbar, 100);\n  static prevCursorYPosition = 0;\n  static platform;\n  static changeScrollHeightInterval;\n  static changeScrollHeightTimer;\n\n  static init({\n    platform,\n    content = '',\n    autoFocus = false,\n    cursorColor = '#000000',\n    placeholder = 'Enter text here',\n    enterKeyHint = '',\n    autoCapitalize = 'off',\n    autoCorrect = false,\n    editorContainerElement,\n    contentHeight,\n    minContentHeight,\n    maxContentHeight,\n    removedExtensions = [],\n  }) {\n    this.platform = platform;\n    this.editorContainerElement = editorContainerElement;\n    this.contentHeight = contentHeight;\n    this.minContentHeight = minContentHeight;\n    this.maxContentHeight = maxContentHeight;\n    this.isHandlingPaste = false;\n\n    this.handlePaste = () => {\n      // workaround for double triggering", "      if (this.isHandlingPaste) {\n        return;\n      }\n\n      this.isHandlingPaste = true;\n\n      RNBridge.event(\"onPaste\")\n\n      setTimeout(() => {\n        this.isHandlingPaste = false;\n      }, 300);\n    }\n\n    const extensions = [\n      Document,\n      Paragraph,\n      Text,\n      Placeholder.configure({ placeholder }),\n      Image,\n      Dropcursor.configure({ color: cursorColor }),\n      Bold.extend({ priority: 10 }),\n      Italic.extend({ priority: 10 }),\n      Strike.extend({ priority: 10 }),\n      Underline.extend({ priority: 10 }),\n      Superscript.extend({ excludes: 'subscript', priority: 11 }),\n      Subscript.extend({ excludes: 'superscript', priority: 11 }),\n      ListItem,\n      BulletList.extend({ keepMarks: true }),\n      OrderedList.extend({ keepMarks: true }),\n      TextStyle,\n      HardBreak,\n    ];\n", "    if (!removedExtensions.includes('heading')) {\n      extensions.push(Heading);\n    }\n    if (!removedExtensions.includes('highlight')) {\n      extensions.push(Highlight.configure({ multicolor: true }));\n    }\n    if (!removedExtensions.includes('color')) {\n      extensions.push(Color);\n    }\n    if (!removedExtensions.includes('cloze')) {\n      extensions.push(Cloze);\n    }\n\n    this.instance = new Editor({\n      element: editorContainerElement,\n      editorProps: {\n        handlePaste: this.handlePaste,\n        attributes: {\n          class: RNEditor.contentClass,\n        },\n        transformPastedHTML(html) {\n          return html\n            .replace(/<style((.|\\\\n|\\\\r)*?)<\\\\/style>/gm, '') // remove all 'styles' tags with self content\n            .replace(/<(?!\\\\/?(p|br)\\\\b)[^>]+>/g, '') // remove any html tag except <p> and <br>\n            .replace(/\\\\n/g, '<br>'); // replace new line character with <br>\n        },\n      },\n      extensions,\n      content,\n      autofocus: autoFocus ? 'end' : false,\n      onTransaction: RNEditor.handleTransaction,\n      onSelectionUpdate: RNEditor.handleSelectionUpdate,\n      onUpdate: RNEditor.handleUpdate,\n      onFocus: RNEditor.handleFocus,\n      onBlur: RNEditor.handleBlur,\n      onCreate: RNEditor.handleCreate,\n      onDestroy: RNEditor.handleDestroy,\n    });\n\n    this.contentElement = document.querySelector('.' + RNEditor.contentClass);\n    this.contentElement.enterKeyHint = enterKeyHint;\n    this.contentElement.autocapitalize = autoCapitalize;\n    this.contentElement.autocorrect = autoCorrect;\n    this.contentElement.autocomplete = 'off';\n\n    RNBridge.initListener();\n    RNEditor.subscribeOnChangeScrollHeight();\n  }\n\n  static handleDestroy() {", "    if (!removedExtensions.includes('cloze')) {\n      extensions.push(Cloze);\n    }\n\n    this.instance = new Editor({\n      element: editorContainerElement,\n      editorProps: {\n        handlePaste: this.handlePaste,\n        attributes: {\n          class: RNEditor.contentClass,\n        },\n        transformPastedHTML(html) {\n          return html\n            .replace(/<style((.|\\\\n|\\\\r)*?)<\\\\/style>/gm, '') // remove all 'styles' tags with self content\n            .replace(/<(?!\\\\/?(p|br)\\\\b)[^>]+>/g, '') // remove any html tag except <p> and <br>\n            .replace(/\\\\n/g, '<br>'); // replace new line character with <br>\n        },\n      },\n      extensions,\n      content,\n      autofocus: autoFocus ? 'end' : false,\n      onTransaction: RNEditor.handleTransaction,\n      onSelectionUpdate: RNEditor.handleSelectionUpdate,\n      onUpdate: RNEditor.handleUpdate,\n      onFocus: RNEditor.handleFocus,\n      onBlur: RNEditor.handleBlur,\n      onCreate: RNEditor.handleCreate,\n      onDestroy: RNEditor.handleDestroy,\n    });\n\n    this.contentElement = document.querySelector('.' + RNEditor.contentClass);\n    this.contentElement.enterKeyHint = enterKeyHint;\n    this.contentElement.autocapitalize = autoCapitalize;\n    this.contentElement.autocorrect = autoCorrect;\n    this.contentElement.autocomplete = 'off';\n\n    RNBridge.initListener();\n    RNEditor.subscribeOnChangeScrollHeight();\n  }\n\n  static handleDestroy() {", "    if (RNEditor.changeScrollHeightInterval) {\n      clearInterval(RNEditor.changeScrollHeightInterval);\n    }\n    if (RNEditor.changeScrollHeightTimer) {\n      clearTimeout(RNEditor.changeScrollHeightTimer);\n    }\n  }\n\n  static handleCreate({ editor }) {\n    RNEditor.isReady = true;\n    RNBridge.event(\"onEditorReady\");\n    RNEditor.updateContentHeight();\n  }\n\n  static handleUpdate({ editor }) {\n    RNEditor.updateContentHeight();\n    RNBridge.event(\"onChangeContent\", {html: editor.getHTML(), json: editor.getJSON(), plainText: editor.getText()});\n  }\n\n  static handleTransaction({ editor }) {\n    RNEditor.updateContentHeight();\n    RNEditor.debouncedUpdateState(editor);\n  }\n\n  static handleSelectionUpdate({ editor }) {\n    RNEditor.updateCursorPosition();\n    RNEditor.debouncedUpdateState(editor);\n  }\n\n  static handleFocus() {\n    RNBridge.event(\"onFocus\");\n  }\n\n  static handleBlur() {\n    RNBridge.event(\"onBlur\");\n  }\n\n  static applyAction(action, options) {\n    switch (action) {\n      case 'bold':\n      case 'italic':\n      case 'underline':\n      case 'strike':\n      case 'subscript':\n      case 'superscript':\n        RNEditor.instance.chain().focus().toggleMark(action, options).run();\n        break;\n      case 'cloze':\n        RNEditor.instance.chain().focus().setCloze(options?.number).run();\n        break;\n      case 'color':\n        RNEditor.instance.chain().focus().setColor(options?.color).run();\n        break;\n      case 'highlight':\n        RNEditor.instance.chain().focus().toggleHighlight({ color: options?.color }).run();\n        break;\n      case 'heading':\n        RNEditor.instance.chain().focus().toggleHeading({ level: options?.level }).run();\n        break;\n      case 'bulletList':\n      case 'orderedList':", "        if (RNEditor.instance.isActive(action)) {\n          RNEditor.instance.chain().focus().setParagraph().run();\n        } else {\n          RNEditor.instance.chain().focus().toggleList(action).run();\n        }\n        break;\n    }\n  }\n\n  static cancelAction(action, options) {\n    switch (action) {\n      case 'bold':\n      case 'italic':\n      case 'underline':\n      case 'strike':\n      case 'subscript':\n      case 'superscript':\n      case 'cloze':\n        RNEditor.instance.chain().focus().unsetMark(action).run();\n        break;\n      case 'highlight':\n        RNEditor.instance.chain().focus().unsetHighlight().run();\n        break;\n      case 'color': {\n        RNEditor.instance.chain().focus().unsetColor().run();\n        // it is temporary solution to resolve this issue: https://github.com/ueberdosis/tiptap/issues/3702#issuecomment-1528689731\n        // TODO: need to wait 2.1.0 version and remove this as soon as possible =)\n        RNEditor.instance.chain().focus().unsetMark('textStyle').run();\n        break;\n      }\n      case 'heading':\n        RNEditor.instance.chain().focus().toggleHeading({ level: options?.level }).run();\n        break;\n      case 'bulletList':\n      case 'orderedList':\n        RNEditor.instance.chain().focus().liftListItem(action).run();\n        break;\n      default:\n        break;\n    }\n  }\n\n  static updateToolbar(instance) {\n    const state = {};\n\n    const getAllClozeNumbers = (html) => {\n      const matches = [...html.matchAll(/<cloze data-number=[\"|'](\\\\d+)[\"|']/g)];\n      const clozeNumbers = matches.map(match => Number(match[1]));\n      clozeNumbers.sort((a, b) => a - b);\n      return [...new Set(clozeNumbers)];\n    };\n\n    TOOLBAR_ACTIONS.forEach((action) => {", "      if (action !== 'image') {\n        if (action.startsWith('heading')) {\n          const level = RNEditor.instance.getAttributes(action).level;\n          if (level && RNEditor.instance.isActive(action)) {\n            state[action] = { level };\n          } else {\n            state[action] = false;\n          }\n        } else if (action === 'cloze') {\n          const number = RNEditor.instance.getAttributes(action)?.number;\n          const all = getAllClozeNumbers(RNEditor.instance.getHTML());\n          state[action] = { isActive: RNEditor.instance.isActive(action), number, all };", "        } else if (action === 'cloze') {\n          const number = RNEditor.instance.getAttributes(action)?.number;\n          const all = getAllClozeNumbers(RNEditor.instance.getHTML());\n          state[action] = { isActive: RNEditor.instance.isActive(action), number, all };\n        } else if (['textStyle', 'highlight'].includes(action)) {\n          const color = RNEditor.instance.getAttributes(action).color;\n          if (color && RNEditor.instance.isActive(action)) {\n            state[action] = { color };\n          } else {\n            state[action] = false;\n          }\n        } else {\n          state[action] = RNEditor.instance.isActive(action);\n        }\n      }\n    });\n", "    if (!shallowEqual(state, RNEditor.prevState)) {\n      RNBridge.message({state});\n      RNEditor.prevState = state;\n    }\n  }\n\n  static updateCursorPosition() {\n    const currentCursorYPosition = RNEditor.getCursorYPosition();\n    if (currentCursorYPosition !== RNEditor.prevCursorYPosition) {\n      RNBridge.event(\"onChangeCursorPosition\", currentCursorYPosition);\n      RNEditor.prevCursorYPosition = currentCursorYPosition;\n    }\n  }\n\n  static getCursorYPosition() {\n    const { anchorNode } = window.getSelection();\n    const element = anchorNode.nodeType === Node.TEXT_NODE ? anchorNode.parentElement : anchorNode;\n    const { y } = element.getBoundingClientRect();\n    return y;\n  }\n\n  // needs only for Android\n  static subscribeOnChangeScrollHeight() {", "    if (currentCursorYPosition !== RNEditor.prevCursorYPosition) {\n      RNBridge.event(\"onChangeCursorPosition\", currentCursorYPosition);\n      RNEditor.prevCursorYPosition = currentCursorYPosition;\n    }\n  }\n\n  static getCursorYPosition() {\n    const { anchorNode } = window.getSelection();\n    const element = anchorNode.nodeType === Node.TEXT_NODE ? anchorNode.parentElement : anchorNode;\n    const { y } = element.getBoundingClientRect();\n    return y;\n  }\n\n  // needs only for Android\n  static subscribeOnChangeScrollHeight() {", "    if (RNEditor.platform === \"android\") {\n      RNEditor.changeScrollHeightInterval = setInterval(() => {\n        RNBridge.console('update height');\n        RNEditor.updateContentHeight();\n      }, 50);\n\n      RNEditor.changeScrollHeightTimer = setTimeout(() => {\n        RNBridge.console('clear');\n        clearInterval(RNEditor.changeScrollHeightInterval);\n      }, 3000)\n    }\n  }\n\n  // for RN only\n  static updateContentHeight() {", "    if (!RNEditor.contentHeight && RNBridge.IS_RN && RNEditor.isReady) {\n      const contentElement = document.querySelector('.' + RNEditor.contentClass);\n      const height = document.body.offsetHeight === 0 ? 0 : contentElement.getBoundingClientRect().height;\n      if (RNEditor.prevContentHeight !== height) {\n        if (!RNEditor.minContentHeight && !RNEditor.maxContentHeight) {\n          RNEditor.prevContentHeight = height;\n          RNBridge.event(\"onChangeHeight\", { height });\n        } else {\n          if (RNEditor.minContentHeight) {\n            if (height > RNEditor.minContentHeight) {\n              RNEditor.prevContentHeight = height;\n            } else {\n              RNEditor.prevContentHeight = RNEditor.minContentHeight;\n            }\n          }", "          if (RNEditor.minContentHeight) {\n            if (height > RNEditor.minContentHeight) {\n              RNEditor.prevContentHeight = height;\n            } else {\n              RNEditor.prevContentHeight = RNEditor.minContentHeight;\n            }\n          }\n          if (RNEditor.maxContentHeight) {\n            if (height < RNEditor.maxContentHeight) {\n              RNEditor.prevContentHeight = height;\n            } else {\n              RNEditor.prevContentHeight = RNEditor.maxContentHeight;\n            }\n          }\n          RNBridge.event(\"onChangeHeight\", { height: RNEditor.prevContentHeight });\n        }\n      }\n    }\n  }\n}\n`;\n", "            if (height < RNEditor.maxContentHeight) {\n              RNEditor.prevContentHeight = height;\n            } else {\n              RNEditor.prevContentHeight = RNEditor.maxContentHeight;\n            }\n          }\n          RNBridge.event(\"onChangeHeight\", { height: RNEditor.prevContentHeight });\n        }\n      }\n    }\n  }\n}\n`;\n"]}
{"filename": "src/html/scripts/utils.ts", "chunked_list": ["export const utils = `\nfunction throttle(callback, delay = 1000) {\n  let shouldWait = false;\n  return (...args) => {\n    if (shouldWait) return;\n    callback(...args);\n    shouldWait = true;\n    setTimeout(() => {\n      shouldWait = false;\n    }, delay);\n  };\n}\n", "function debounce(callback, delay = 1000) {\n  let time;\n  return (...args) => {\n    clearTimeout(time);\n    time = setTimeout(() => {\n      callback(...args);\n    }, delay);\n  };\n}\n\nfunction shallowEqual(object1, object2) {", "function shallowEqual(object1, object2) {\n  if (!object1 || !object2) {\n    return false;\n  }\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (let key of keys1) {\n    if (object1[key] !== object2[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n`;\n", "  for (let key of keys1) {\n    if (object1[key] !== object2[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n`;\n"]}
{"filename": "src/html/scripts/extensions/Cloze.ts", "chunked_list": ["export const Cloze = `\nconst CLOZE_DEFAULT_NUMBER = 1;\nconst CLOZE_INPUT_REGEX = /{{$/;\nconst CLOZE_INPUT_REGEX_2 = /(?:^|\\\\s)((?:{{[Cc](\\\\d+)::)((?:.*?))(?:}}))$/;\nconst CLOZE_PASTE_REGEX = /(?:^|\\\\s)((?:{{[Cc](\\\\d+)::)((?:.*?))(?:}}))/g;\n\nconst getAllClozeNumbers = (html) => {\n  const matches = [...html.matchAll(/<cloze data-number=[\"|'](\\\\d+)[\"|']/g)];\n  if (matches.length === 0) {\n    return CLOZE_DEFAULT_NUMBER;\n  }\n  const clozeNumbers = matches.map(match => Number(match[1]));\n  clozeNumbers.sort((a, b) => a - b);\n  const sortedNumbers = [...new Set(clozeNumbers)];\n  return sortedNumbers[sortedNumbers.length - 1] + 1;\n};\n\nconst clozeInputRule = (find, { editor, name, type }) =>\n  new InputRule({\n    find,\n    handler: ({ state, range }) => {", "  if (matches.length === 0) {\n    return CLOZE_DEFAULT_NUMBER;\n  }\n  const clozeNumbers = matches.map(match => Number(match[1]));\n  clozeNumbers.sort((a, b) => a - b);\n  const sortedNumbers = [...new Set(clozeNumbers)];\n  return sortedNumbers[sortedNumbers.length - 1] + 1;\n};\n\nconst clozeInputRule = (find, { editor, name, type }) =>\n  new InputRule({\n    find,\n    handler: ({ state, range }) => {", "      if (editor.isActive(name)) return;\n\n      const { tr } = state;\n      const currentNumber = getAllClozeNumbers(editor.getHTML());\n      tr.delete(range.from, range.to);\n\n      const clozeMark = type.create({ number: currentNumber });\n      tr.addMark(range.from, range.from + 1, clozeMark);\n      tr.addStoredMark(clozeMark);\n    },\n  });\n\nconst Cloze = Mark.create({\n  name: 'cloze',\n  excludes: '_',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    };\n  },\n\n  addAttributes() {\n    return {\n      number: {\n        default: CLOZE_DEFAULT_NUMBER,\n        parseHTML: element => element.getAttribute('data-number'),\n        renderHTML: attributes => ({\n          'data-number': attributes.number,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'cloze',\n        getAttrs: element => {\n          const hasNumber = element.hasAttribute('data-number');\n", "          if (!hasNumber) {\n            return false;\n          }\n\n          return {};\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['cloze', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n\n  addCommands() {\n    return {\n      setCloze:\n        number =>\n        ({ commands }) =>\n          commands.setMark(this.name, { number: number || getAllClozeNumbers(this.editor.getHTML()) }),\n      toggleCloze:\n        () =>\n        ({ commands }) =>\n          commands.toggleMark(this.name),\n      unsetCloze:\n        () =>\n        ({ commands }) =>\n          commands.unsetMark(this.name),\n    };\n  },\n\n  addKeyboardShortcuts() {\n    const action = () => {", "      if (this.editor.view.state.selection.empty) {\n        return false;\n      }\n      return this.editor.isActive(this.name) ? this.editor.commands.unsetCloze() : this.editor.commands.setCloze();\n    }\n\n    return {\n      'Shift-[': action,\n    };\n  },\n\n  addInputRules() {\n    return [\n      clozeInputRule(CLOZE_INPUT_REGEX, this),\n      markInputRule({\n        find: CLOZE_INPUT_REGEX_2,\n        type: this.type,\n      })\n    ];\n  },\n\n  addPasteRules() {\n    return [\n      markPasteRule({\n        find: CLOZE_PASTE_REGEX,\n        type: this.type,\n      }),\n    ];\n  },\n});\n`;\n"]}
{"filename": "src/html/scripts/extensions/index.ts", "chunked_list": ["import { Cloze } from './Cloze';\n\nexport const extensions = `\n  ${Cloze}\n`;\n"]}
