{"filename": "test/app.e2e-spec.ts", "chunked_list": ["import * as request from 'supertest';\nimport { Test } from '@nestjs/testing';\nimport { AppModule } from './../src/app.module';\nimport { INestApplication } from '@nestjs/common';\n\ndescribe('AppController (e2e)', () => {\n  let app: INestApplication;\n\n  beforeAll(async () => {\n    const moduleFixture = await Test.createTestingModule({", "  beforeAll(async () => {\n    const moduleFixture = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    app = moduleFixture.createNestApplication();\n    await app.init();\n  });\n\n  afterAll(async () => {", "\n  afterAll(async () => {\n    await app.close();\n  });\n\n  it('/ (GET)', () => {\n    return request(app.getHttpServer())\n      .get('/')\n      .expect(200)\n      .expect('Hello World!');", "      .expect(200)\n      .expect('Hello World!');\n  });\n});\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { middleWareAll } from './auth/auth';\nimport { HttpFilter } from './common/errFilter';\nimport * as cors from 'cors';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.setGlobalPrefix('api/v1'); // \u8bbe\u7f6e\u5168\u5c40\u8def\u7531\u524d\u7f00\n  app.use(cors()); //\u5904\u7406\u8de8\u57df\n  app.use(middleWareAll); //\u5168\u5c40\u4e2d\u95f4\u4ef6\n  app.useGlobalFilters(new HttpFilter()); //\u5168\u5c40\u5f02\u5e38\u62e6\u622a\n  await app.listen(3200);\n}\nbootstrap();\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { UserModule } from './api/user/user.module';\nimport { BannerModule } from './api/banner/banner.module';\nimport { HeaderModule } from './api/header/header.module';\nimport { ProductModule } from './api/product/product.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n@Module({\n  imports: [\n    UserModule,\n    BannerModule,", "    UserModule,\n    BannerModule,\n    HeaderModule,\n    ProductModule,\n    TypeOrmModule.forRoot({\n      type: 'mysql', // \u6570\u636e\u5e93\u7c7b\u578b\n      host: 'localhost', // \u6570\u636e\u5e93\u7684\u8fde\u63a5\u5730\u5740host\n      port: 3306, // \u6570\u636e\u5e93\u7684\u7aef\u53e3 3306\n      username: 'root', // \u8fde\u63a5\u8d26\u53f7\n      password: '12345678', // \u8fde\u63a5\u5bc6\u7801", "      username: 'root', // \u8fde\u63a5\u8d26\u53f7\n      password: '12345678', // \u8fde\u63a5\u5bc6\u7801\n      database: 'test', // \u8fde\u63a5\u7684\u5e93\u540d\n      retryDelay: 500, // \u91cd\u8bd5\u8fde\u63a5\u6570\u636e\u5e93\u95f4\u9694\n      retryAttempts: 10, // \u5141\u8bb8\u91cd\u8fde\u6b21\u6570\n      synchronize: true, // \u662f\u5426\u5c06\u5b9e\u4f53\u540c\u6b65\u5230\u6570\u636e\u5e93\n      autoLoadEntities: true, // \u81ea\u52a8\u52a0\u8f7d\u5b9e\u4f53\u914d\u7f6e\uff0cforFeature()\u6ce8\u518c\u7684\u6bcf\u4e2a\u5b9e\u4f53\u90fd\u81ea\u5df1\u52a8\u52a0\u8f7d\n    }),\n  ],\n  controllers: [],", "  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n"]}
{"filename": "src/entity/header.entity.ts", "chunked_list": ["import {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    CreateDateColumn,\n  } from 'typeorm';\n  \n  @Entity()\n  export class Header {\n    @PrimaryGeneratedColumn()\n    id: number;\n  \n    @Column()\n    title: string;\n\n    @Column()\n    linkUrl?: string;\n  \n    @CreateDateColumn()\n    createTime?: Date;\n    \n    @CreateDateColumn()\n    updataTime?: Date;\n  }\n  ", "  export class Header {\n    @PrimaryGeneratedColumn()\n    id: number;\n  \n    @Column()\n    title: string;\n\n    @Column()\n    linkUrl?: string;\n  \n    @CreateDateColumn()\n    createTime?: Date;\n    \n    @CreateDateColumn()\n    updataTime?: Date;\n  }\n  "]}
{"filename": "src/entity/product.entity.ts", "chunked_list": ["import {\n    Entity,\n    Column,\n    PrimaryGeneratedColumn,\n    CreateDateColumn,\n  } from 'typeorm';\n  \n  @Entity()\n  export class Product {\n    @PrimaryGeneratedColumn()\n    id: number;\n  \n    @Column()\n    img: string;\n\n    @Column()\n    title: string;\n    \n    @Column()\n    name: string;\n\n    @Column()\n    type?: string;\n  \n    @CreateDateColumn()\n    createTime?: Date;\n    \n    @CreateDateColumn()\n    updataTime?: Date;\n\n    constructor(partial: Partial<Product>) {\n        Object.assign(this, partial);\n        this.type = this.type || 'xiaomi'; // \u9ed8\u8ba4\u8bbe\u7f6e\u4e3axiaomi\n      }\n  }\n  ", "  export class Product {\n    @PrimaryGeneratedColumn()\n    id: number;\n  \n    @Column()\n    img: string;\n\n    @Column()\n    title: string;\n    \n    @Column()\n    name: string;\n\n    @Column()\n    type?: string;\n  \n    @CreateDateColumn()\n    createTime?: Date;\n    \n    @CreateDateColumn()\n    updataTime?: Date;\n\n    constructor(partial: Partial<Product>) {\n        Object.assign(this, partial);\n        this.type = this.type || 'xiaomi'; // \u9ed8\u8ba4\u8bbe\u7f6e\u4e3axiaomi\n      }\n  }\n  "]}
{"filename": "src/entity/user.entity.ts", "chunked_list": ["import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  sign: string;\n\n  @Column()\n  account: string;\n\n  @Column()\n  password: string;\n\n  @CreateDateColumn()\n  createTime?: Date;\n  \n  @CreateDateColumn()\n  loginTime?: Date;\n}\n", "export class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  sign: string;\n\n  @Column()\n  account: string;\n\n  @Column()\n  password: string;\n\n  @CreateDateColumn()\n  createTime?: Date;\n  \n  @CreateDateColumn()\n  loginTime?: Date;\n}\n"]}
{"filename": "src/entity/banner.entity.ts", "chunked_list": ["import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Banner {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title?: string;\n\n  @Column()\n  url: string;\n\n  @Column()\n  linkUrl?: string;\n\n  @CreateDateColumn()\n  createTime?: Date;\n\n  @CreateDateColumn()\n  updataTime?: Date;\n}\n", "export class Banner {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title?: string;\n\n  @Column()\n  url: string;\n\n  @Column()\n  linkUrl?: string;\n\n  @CreateDateColumn()\n  createTime?: Date;\n\n  @CreateDateColumn()\n  updataTime?: Date;\n}\n"]}
{"filename": "src/auth/auth.ts", "chunked_list": ["import { Request, Response, NextFunction } from 'express';\nimport { HttpStatus } from '@nestjs/common';\nimport * as jwt from 'jsonwebtoken';\n\n/************ token \u9274\u6743 \u4e2d\u95f4\u4ef6 start ***************/\nconst whiteList: string[] = ['/api/v1/login'];\nexport const middleWareAll = async (\n  req: Request,\n  res: Response,\n  next: NextFunction,", "  res: Response,\n  next: NextFunction,\n) => {\n  console.log('\u5168\u5c40\u4e2d\u95f4\u4ef6\uff01');\n  if (whiteList.includes(req.originalUrl)) {\n    next();\n    return;\n  }\n  //get \u8bf7\u6c42\u4e0d\u9274\u6743\n  if (req.method === 'GET') {\n    next();\n    return;\n  }\n  const token = req.headers.authorization;", "  if (req.method === 'GET') {\n    next();\n    return;\n  }\n  const token = req.headers.authorization;\n  if (!token) {\n    return res.status(HttpStatus.UNAUTHORIZED).json({\n      data: null,\n      msg: '\u8eab\u4efd\u4fe1\u606f\u672a\u9a8c\u8bc1\u901a\u8fc7\uff5e',\n      code: HttpStatus.UNAUTHORIZED,\n    });\n  }", "  try {\n    const res = jwt.verify(token, 'mysecretkey');\n    next();\n  } catch (e) {\n    return res.status(HttpStatus.UNAUTHORIZED).json({\n      data: null,\n      msg: '\u8eab\u4efd\u4fe1\u606f\u5df2\u8fc7\u671f',\n      code: HttpStatus.UNAUTHORIZED,\n    });\n  }\n};\n/************ token \u9274\u6743 \u4e2d\u95f4\u4ef6 end ***************/\n"]}
{"filename": "src/common/errFilter.ts", "chunked_list": [" \nimport { ExceptionFilter, Catch, ArgumentsHost,HttpException } from '@nestjs/common'\nimport {Request,Response} from 'express'\n //\u5168\u5c40\u9519\u8bef\u62e6\u622a\n@Catch(HttpException)\nexport class HttpFilter implements ExceptionFilter {\n    catch(exception:HttpException, host: ArgumentsHost) {\n        const ctx = host.switchToHttp()\n        const request = ctx.getRequest<Request>()\n        const response = ctx.getResponse<Response>()\n        const status = exception.getStatus()\n        response.status(status).json({\n           data:null,\n           msg:exception.message,\n           code:status,\n        })\n    }\n}"]}
{"filename": "src/type/type.ts", "chunked_list": ["export interface interfaceReturnType {\n  msg: string;\n  data: any;\n  code: number;\n}\n"]}
{"filename": "src/api/user/user.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../../entity/user.entity';\n\n@Module({\n  controllers: [UserController],\n  providers: [UserService],\n  imports:[TypeOrmModule.forFeature([User]),]", "  providers: [UserService],\n  imports:[TypeOrmModule.forFeature([User]),]\n})\nexport class UserModule {}\n"]}
{"filename": "src/api/user/user.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { interfaceReturnType } from '../../type/type';\nimport { Response } from 'express';\n@Controller('login')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n    const res = await this.userService.loginAndRegister(user);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Get('user')\n  async userListFunc(@Res() Res: Response):Promise<interfaceReturnType>  {\n    const res = await this.userService.findUserAll();\n    Res.status(res.code).json(res);\n    return;\n  }\n}"]}
{"filename": "src/api/user/user.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport * as jwt from 'jsonwebtoken';\nimport { User } from '../../entity/user.entity';\nimport { interfaceReturnType } from '../../type/type';\n@Injectable()\nexport class UserService {\n  private readonly JWT_SECRET = 'mysecretkey';\n  constructor(\n    @InjectRepository(User)\n    private readonly userList: Repository<User>,\n  ) {}\n\n  //\u67e5\u8be2user\u8868\u6307\u5b9a\u7528\u6237\u51fd\u6570\n  async findUser(user: { account: string }): Promise<User[]> {\n    const userList = await this.userList.find({\n      where: user,\n    });\n    return userList;\n  }\n\n  //\u67e5\u8be2\u6240\u6709\u7528\u6237\n  async findUserAll(): Promise<interfaceReturnType> {\n    const userList = await this.userList.find();\n    return {\n      code: HttpStatus.OK,\n      data: userList,\n      msg: 'ok',\n    };\n  }\n\n  //\u767b\u5f55\u51fd\u6570\n  async login(\n    user: {\n      account: string;\n      password: string;\n    },\n    userList: User[],\n  ): Promise<interfaceReturnType> {", "    if (userList[0].password === user.password) {\n      const token: string = await this.createToken(userList[0].id);\n      await this.userList.update(userList[0].id, {\n        loginTime: new Date(),\n        sign: token,\n      });\n      return {\n        msg: ' OK',\n        data: {\n          name: userList[0].name,\n          sign: token,\n        },\n        code: HttpStatus.OK,\n      };\n    }\n    throw new BadRequestException('\u8d26\u53f7\u6216\u5bc6\u7801\u8f93\u5165\u9519\u8bef\uff5e');\n  }\n\n  //\u6ce8\u518c\u51fd\u6570\n  async register(user: {\n    account: string;\n    password: string;\n  }): Promise<interfaceReturnType> {\n    await this.userList.save({\n      ...user,\n      name: user.account,\n      sign: '',\n    });\n    const userList: User[] = await this.findUser({ account: user.account });\n    const token: string = await this.createToken(userList[0].id);\n    await this.userList.update(userList[0].id, {\n      ...userList[0],\n      sign: token,\n    });\n    return {\n      msg: 'ok',\n      data: {\n        name: userList[0].name,\n        sign: token,\n      },\n      code: HttpStatus.OK,\n    };\n  }\n\n  //\u767b\u5f55\u7ed3\u5408\u6ce8\u518c\u63a5\u53e3\u8fd4\u56de\u51fd\u6570\n  async loginAndRegister(user: {\n    account: string;\n    password: string;\n  }): Promise<interfaceReturnType> {\n    const userList: User[] = await this.findUser({ account: user.account });\n    //user\u8868\u67e5\u8be2\u4e0d\u5230\u6267\u884c\u6ce8\u518c", "    if (userList.length < 1) return await this.register(user);\n    //\u6267\u884c\u767b\u5f55\n    return await this.login(user, userList);\n  }\n\n  //token \u751f\u6210\u51fd\u6570\n  async createToken(userId: number): Promise<string> {\n    const payload = { sub: userId };\n    const token = jwt.sign(payload, this.JWT_SECRET, { expiresIn: '3d' });\n    return token;\n  }\n}\n"]}
{"filename": "src/api/product/product.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { ProductController } from './product.controller';\nimport { ProductService } from './product.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Product } from '../../entity/product.entity';\n@Module({\n  controllers: [ProductController],\n  providers: [ProductService],\n  imports: [TypeOrmModule.forFeature([Product])],\n})\nexport class ProductModule {}\n", "  imports: [TypeOrmModule.forFeature([Product])],\n})\nexport class ProductModule {}\n"]}
{"filename": "src/api/product/product.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res,Query } from '@nestjs/common';\nimport { ProductService } from './product.service';\nimport { interfaceReturnType } from '../../type/type';\nimport { Response } from 'express';\n@Controller('Product')\nexport class ProductController {\n  constructor(private readonly ProductService: ProductService) {}\n\n  @Get()\n  async getProductList(@Query() itme:{type:string}, @Res() Res: Response): Promise<interfaceReturnType> {\n    console.log(itme);\n    const res = await this.ProductService.listFunc(itme);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post()\n  async postProductList(\n    @Body() body: any,\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.ProductService.addProductFunc(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post('update')\n  async updateProductList(\n    @Body() body: any,\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.ProductService.updateProduct(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post('delete')\n  async deleteProductList(\n    @Body() body: { id: number },\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.ProductService.deleteProduct(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  //   @Post()\n  //   async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n  //     const res = await this.ProductService.listFunc(user);\n  //     Res.status(res.code).json(res);\n  //     return;\n  //   }\n}\n"]}
{"filename": "src/api/product/product.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Product } from '../../entity/product.entity';\nimport { interfaceReturnType } from '../../type/type';\n@Injectable()\nexport class ProductService {\n  constructor(\n    @InjectRepository(Product)\n    private readonly ProductList: Repository<Product>,\n  ) {}\n\n  async listFunc(item: { type: string } = {type:'xiaomi'}): Promise<interfaceReturnType> {\n    const res = await this.ProductList.find({\n      where: item,\n    });\n    return {\n      msg: 'ok',\n      data: res,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async addProductFunc(item: Product): Promise<interfaceReturnType> {", "    if (!item.title) throw new BadRequestException('title\u4e3a\u5fc5\u586b\u9879\uff5e');\n    if (!item.name) throw new BadRequestException('name\u4e3a\u5fc5\u586b\u9879\uff5e');\n    if (!item.img) throw new BadRequestException('img\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.ProductList.save({\n      ...item,\n      title: item.title || '',\n    });\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async updateProduct(item: Product): Promise<interfaceReturnType> {", "    if (!item.id) throw new BadRequestException('id\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.ProductList.update(item.id, {\n      ...item,\n      updataTime: new Date(),\n    });\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async deleteProduct(item: { id: number }): Promise<interfaceReturnType> {", "    if (!item.id) throw new BadRequestException('id\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.ProductList.delete(item.id);\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n}\n"]}
{"filename": "src/api/banner/banner.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { BannerController } from './banner.controller';\nimport { BannerService } from './banner.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Banner } from '../../entity/banner.entity';\n@Module({\n  controllers: [BannerController],\n  providers: [BannerService],\n  imports: [TypeOrmModule.forFeature([Banner])],\n})\nexport class BannerModule {}\n", "  imports: [TypeOrmModule.forFeature([Banner])],\n})\nexport class BannerModule {}\n"]}
{"filename": "src/api/banner/banner.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res } from '@nestjs/common';\nimport { BannerService } from './banner.service';\nimport { interfaceReturnType } from '../../type/type';\nimport { Response } from 'express';\n@Controller('banner')\nexport class BannerController {\n  constructor(private readonly BannerService: BannerService) {}\n\n  @Get()\n  async getBannerList(@Res() Res: Response): Promise<interfaceReturnType> {\n    const res = await this.BannerService.listFunc();\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post()\n  async postBannerList(\n    @Body() body: any,\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.BannerService.addBannerFunc(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post('update')\n  async updateBannerList(\n    @Body() body: any,\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.BannerService.updateBanner(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post('delete')\n  async deleteBannerList(\n    @Body() body: { id: number },\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.BannerService.deleteBanner(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  //   @Post()\n  //   async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n  //     const res = await this.BannerService.listFunc(user);\n  //     Res.status(res.code).json(res);\n  //     return;\n  //   }\n}\n"]}
{"filename": "src/api/banner/banner.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Banner } from '../../entity/banner.entity';\nimport { interfaceReturnType } from '../../type/type';\n@Injectable()\nexport class BannerService {\n  constructor(\n    @InjectRepository(Banner)\n    private readonly bannerList: Repository<Banner>,\n  ) {}\n\n  async listFunc(): Promise<interfaceReturnType> {\n    const res = await this.bannerList.find();\n    return {\n      msg: 'ok',\n      data: res,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async addBannerFunc(banner: Banner): Promise<interfaceReturnType> {", "    if (!banner.url) throw new BadRequestException('url\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.bannerList.save({\n      ...banner,\n      title: banner.title || '',\n      linkUrl: banner.linkUrl || '',\n    });\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async updateBanner(banner: Banner): Promise<interfaceReturnType> {", "    if (!banner.id) throw new BadRequestException('id\u4e3a\u5fc5\u586b\u9879\uff5e');\n    if (!banner.url) throw new BadRequestException('url\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.bannerList.update(banner.id, {\n      ...banner,\n      updataTime:new Date(),\n    });\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async deleteBanner(banner: { id: number }): Promise<interfaceReturnType> {", "    if (!banner.id) throw new BadRequestException('id\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.bannerList.delete(banner.id);\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n}\n"]}
{"filename": "src/api/header/header.controller.ts", "chunked_list": ["import { Controller, Get, Post, Body, Res } from '@nestjs/common';\nimport { HeaderService } from './header.service';\nimport { interfaceReturnType } from '../../type/type';\nimport { Response } from 'express';\n@Controller('header')\nexport class HeaderController {\n  constructor(private readonly HeaderService: HeaderService) {}\n\n  @Get()\n  async getHeaderList(@Res() Res: Response): Promise<interfaceReturnType> {\n    const res = await this.HeaderService.listFunc();\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post()\n  async postHeaderList(\n    @Body() body: any,\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.HeaderService.addHeaderFunc(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post('update')\n  async updateHeaderList(\n    @Body() body: any,\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.HeaderService.updateHeader(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  @Post('delete')\n  async deleteHeaderList(\n    @Body() body: { id: number },\n    @Res() Res: Response,\n  ): Promise<interfaceReturnType> {\n    const res = await this.HeaderService.deleteHeader(body);\n    Res.status(res.code).json(res);\n    return;\n  }\n\n  //   @Post()\n  //   async loginFunc(@Body() user: any, @Res() Res: Response): Promise<interfaceReturnType> {\n  //     const res = await this.HeaderService.listFunc(user);\n  //     Res.status(res.code).json(res);\n  //     return;\n  //   }\n}\n"]}
{"filename": "src/api/header/header.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { HeaderController } from './header.controller';\nimport { HeaderService } from './header.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Header } from '../../entity/header.entity';\n@Module({\n  controllers: [HeaderController],\n  providers: [HeaderService],\n  imports: [TypeOrmModule.forFeature([Header])],\n})\nexport class HeaderModule {}\n", "  imports: [TypeOrmModule.forFeature([Header])],\n})\nexport class HeaderModule {}\n"]}
{"filename": "src/api/header/header.service.ts", "chunked_list": ["import { Injectable, HttpStatus, BadRequestException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Header } from '../../entity/header.entity';\nimport { interfaceReturnType } from '../../type/type';\n@Injectable()\nexport class HeaderService {\n  constructor(\n    @InjectRepository(Header)\n    private readonly headerList: Repository<Header>,\n  ) {}\n\n  async listFunc(): Promise<interfaceReturnType> {\n    const res = await this.headerList.find();\n    return {\n      msg: 'ok',\n      data: res,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async addHeaderFunc(item: Header): Promise<interfaceReturnType> {", "    if (!item.title) throw new BadRequestException('title\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.headerList.save({\n      ...item,\n      title: item.title || '',\n      linkUrl: item.linkUrl || '',\n    });\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async updateHeader(item: Header): Promise<interfaceReturnType> {", "    if (!item.id) throw new BadRequestException('id\u4e3a\u5fc5\u586b\u9879\uff5e');\n    if (!item.title) throw new BadRequestException('title\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.headerList.update(item.id, {\n      ...item,\n      updataTime:new Date(),\n    });\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n\n  async deleteHeader(item: { id: number }): Promise<interfaceReturnType> {", "    if (!item.id) throw new BadRequestException('id\u4e3a\u5fc5\u586b\u9879\uff5e');\n    await this.headerList.delete(item.id);\n    return {\n      msg: 'ok',\n      data: null,\n      code: HttpStatus.OK,\n    };\n  }\n}\n"]}
