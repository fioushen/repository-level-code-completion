{"filename": "tsup.config.ts", "chunked_list": ["import { defineConfig } from \"tsup\";\n\n// __filename and __dirname shims\n// - https://github.com/egoist/tsup/search?q=__filename\n\nexport default defineConfig(async (options) => {\n  return {\n    ...options,\n    clean: true,\n    dts: false,", "    clean: true,\n    dts: false,\n    entry: [\"src/integration/index.ts\", \"src/edge-runtime/index.ts\"],\n    format: [\"esm\", \"cjs\"],\n    // FUTURE: incremental builds when implemented https://github.com/egoist/tsup/issues/615\n    // incremental: !options.watch,\n    keepNames: true,\n    minifyIdentifiers: false,\n    minifySyntax: !options.watch,\n    minifyWhitespace: !options.watch,", "    minifySyntax: !options.watch,\n    minifyWhitespace: !options.watch,\n    onSuccess:\n      \"tsc --emitDeclarationOnly --declaration --declarationMap --declarationDir ./dist\",\n    outDir: \"dist\",\n    shims: true,\n    silent: !options.watch,\n    sourcemap: true,\n    splitting: false,\n  };", "    splitting: false,\n  };\n});\n"]}
{"filename": "src/integration/integration.ts", "chunked_list": ["import path from \"node:path\";\nimport type { AstroConfig, AstroIntegration } from \"astro\";\nimport dedent from \"dedent\";\nimport fg from \"fast-glob\";\nimport fs from \"fs-extra\";\nimport slash from \"slash\";\nimport { logger } from \"../astro/logger/node\";\nimport { removeLeadingForwardSlashWindows } from \"../astro/internal-helpers/path\";\nimport { defaultI18nConfig } from \"../shared/configs\";\nimport type { UserI18nConfig, I18nConfig } from \"../shared/configs\";", "import { defaultI18nConfig } from \"../shared/configs\";\nimport type { UserI18nConfig, I18nConfig } from \"../shared/configs\";\n\n// injectRoute doesn't generate build pages https://github.com/withastro/astro/issues/5096\n// workaround: copy pages folder when command === \"build\"\n\n/**\n * The i18n integration for Astro\n *\n * See the full [astro-i18n-aut](https://github.com/jlarmstrongiv/astro-i18n-aut#readme) documentation", " *\n * See the full [astro-i18n-aut](https://github.com/jlarmstrongiv/astro-i18n-aut#readme) documentation\n */\nexport function i18n(userI18nConfig: UserI18nConfig): AstroIntegration {\n  const i18nConfig: I18nConfig = Object.assign(\n    defaultI18nConfig,\n    userI18nConfig\n  );\n\n  const { defaultLocale, locales, exclude, include, redirectDefaultLocale } =\n    i18nConfig;\n\n  ensureValidLocales(locales, defaultLocale);\n\n  let pagesPathTmp: Record<string, string> = {};", "  async function removePagesPathTmp(): Promise<void> {\n    await Promise.all(\n      Object.values(pagesPathTmp).map((pagePathTmp) => fs.remove(pagePathTmp))\n    );\n  }\n\n  return {\n    name: \"astro-i18n-integration\",\n    hooks: {\n      \"astro:config:setup\": async ({ config, command, injectRoute }) => {\n        await ensureValidConfigs(config, i18nConfig);\n        const configSrcDirPathname = path.normalize(\n          removeLeadingForwardSlashWindows(config.srcDir.pathname)\n        );\n\n        let included: string[] = ensureGlobsHaveConfigSrcDirPathname(\n          typeof include === \"string\" ? [include] : include,\n          configSrcDirPathname\n        );\n        let excluded: string[] = ensureGlobsHaveConfigSrcDirPathname(\n          typeof exclude === \"string\" ? [exclude] : exclude,\n          configSrcDirPathname\n        );\n\n        const pagesPath = path.join(configSrcDirPathname, \"pages\");\n\n        const pagesPathTmpRoot = path.join(\n          configSrcDirPathname,\n          // tmp filename from https://github.com/withastro/astro/blob/e6bff651ff80466b3e862e637d2a6a3334d8cfda/packages/astro/src/core/routing/manifest/create.ts#L279\n          \"astro_tmp_pages\"\n        );", "        for (const locale of Object.keys(locales)) {\n          pagesPathTmp[locale] = `${pagesPathTmpRoot}_${locale}`;\n        }\n\n        await removePagesPathTmp();\n        if (command === \"build\") {\n          await Promise.all(\n            Object.keys(locales)\n              .filter((locale) => {\n                if (redirectDefaultLocale === false) {\n                  return locale !== defaultLocale;\n                } else {\n                  return true;\n                }\n              })\n              .map((locale) => fs.copy(pagesPath, pagesPathTmp[locale]))\n          );\n        }\n\n        const entries = fg.stream(included, {\n          ignore: excluded,\n          onlyFiles: true,\n        });\n        // typing https://stackoverflow.com/a/68358341\n        let entry: string;\n        // @ts-expect-error\n        for await (entry of entries) {\n          const parsedPath = path.parse(entry);\n          const relativePath = path.relative(pagesPath, parsedPath.dir);\n          const extname = parsedPath.ext.slice(1).toLowerCase();\n\n          // warn on files that cannot be translated with specific and actionable warnings\n          // astro pages file types https://docs.astro.build/en/core-concepts/astro-pages/#supported-page-files\n          // any file that is not included as an astro page file types, will be automatically warned about by astro", "                if (redirectDefaultLocale === false) {\n                  return locale !== defaultLocale;\n                } else {\n                  return true;\n                }\n              })\n              .map((locale) => fs.copy(pagesPath, pagesPathTmp[locale]))\n          );\n        }\n\n        const entries = fg.stream(included, {\n          ignore: excluded,\n          onlyFiles: true,\n        });\n        // typing https://stackoverflow.com/a/68358341\n        let entry: string;\n        // @ts-expect-error\n        for await (entry of entries) {\n          const parsedPath = path.parse(entry);\n          const relativePath = path.relative(pagesPath, parsedPath.dir);\n          const extname = parsedPath.ext.slice(1).toLowerCase();\n\n          // warn on files that cannot be translated with specific and actionable warnings\n          // astro pages file types https://docs.astro.build/en/core-concepts/astro-pages/#supported-page-files\n          // any file that is not included as an astro page file types, will be automatically warned about by astro", "          if (extname !== \"astro\") {\n            warnIsInvalidPage(\n              extname,\n              path.join(relativePath, parsedPath.base),\n              configSrcDirPathname\n            );\n            continue;\n          }\n\n          for (const locale of Object.keys(locales)) {\n            // ignore defaultLocale if redirectDefaultLocale is false", "          for (const locale of Object.keys(locales)) {\n            // ignore defaultLocale if redirectDefaultLocale is false\n            if (redirectDefaultLocale === false && locale === defaultLocale) {\n              continue;\n            }\n\n            const entryPoint =\n              command === \"build\"\n                ? path.join(pagesPathTmp[locale], relativePath, parsedPath.base)\n                : path.join(pagesPath, relativePath, parsedPath.base);\n\n            const pattern = slash(\n              path.join(\n                config.base,\n                locale,\n                relativePath,\n                parsedPath.name.endsWith(\"index\") ? \"\" : parsedPath.name,\n                config.build.format === \"directory\" ? \"/\" : \"\"\n              )\n            );\n\n            injectRoute({\n              entryPoint,\n              pattern,\n            });\n          }\n        }\n      },\n      \"astro:build:done\": async () => {\n        await removePagesPathTmp();\n      },\n      \"astro:server:done\": async () => {\n        await removePagesPathTmp();\n      },\n    },\n  };\n}\n", "function ensureValidLocales(\n  locales: Record<string, string>,\n  defaultLocale: string\n) {\n  if (!Object.keys(locales).includes(defaultLocale)) {\n    const errorMessage = `locales ${JSON.stringify(\n      locales\n    )} does not include \"${defaultLocale}\"`;\n    logger.error(\"astro-i18n-aut\", errorMessage);\n    throw new Error(errorMessage);\n  }\n}\n", "async function ensureValidConfigs(config: AstroConfig, i18nConfig: I18nConfig) {\n  if (config.trailingSlash === \"ignore\" && config.output === \"static\") {\n    logger.warn(\n      \"astro-i18n-aut\",\n      `avoid setting config.trailingSlash = \"ignore\" when config.output = \"static\"`\n    );\n    logger.warn(\n      \"astro-i18n-aut\",\n      `config.trailingSlash = \"always\" && config.build.format = \"directory\"`\n    );\n    logger.warn(\n      \"astro-i18n-aut\",\n      `config.trailingSlash = \"never\" && config.build.format = \"file\"`\n    );\n    logger.warn(\n      \"astro-i18n-aut\",\n      `setting config.trailingSlash = \"${config.trailingSlash}\"`\n    );\n    config.trailingSlash =\n      config.build.format === \"directory\" ? \"always\" : \"never\";\n  }\n", "  if (i18nConfig.redirectDefaultLocale) {\n    const configSrcDirPathname = path.normalize(\n      removeLeadingForwardSlashWindows(config.srcDir.pathname)\n    );\n\n    // all possible locations of middleware\n    const defaultMiddlewarePath = path.join(\n      configSrcDirPathname,\n      \"middleware/index.ts\"\n    );\n    const middlewarePaths = [\n      path.join(configSrcDirPathname, \"middleware.js\"),\n      path.join(configSrcDirPathname, \"middleware.ts\"),\n      path.join(configSrcDirPathname, \"middleware/index.js\"),\n      defaultMiddlewarePath,\n    ];\n\n    // check if middleware exists\n    const pathsExist = await Promise.all(\n      middlewarePaths.map((middlewarePath) => fs.exists(middlewarePath))\n    );\n    const pathExists = pathsExist.includes(true);\n\n    // warn and create middleware if it does not exist", "    if (pathExists === false) {\n      logger.warn(\"astro-i18n-aut\", `cannot find any Astro middleware files:`);\n      middlewarePaths.forEach((middlewarePath) => {\n        logger.warn(\"astro-i18n-aut\", `- ${middlewarePath}`);\n      });\n      logger.warn(\n        \"astro-i18n-aut\",\n        `creating ${defaultMiddlewarePath} with defaultLocale = \"en\"`\n      );\n      await fs.outputFile(\n        defaultMiddlewarePath,\n        dedent(`\n          import { sequence } from \"astro/middleware\";\n          import { i18nMiddleware } from \"astro-i18n-aut\";\n\n          const i18n = i18nMiddleware({ defaultLocale: \"en\" });\n\n          export const onRequest = sequence(i18n);\n        `)\n      );\n    }\n  }\n}\n", "function ensureGlobsHaveConfigSrcDirPathname(\n  filePaths: string[],\n  configSrcDirPathname: string\n) {\n  return filePaths.map((filePath) => {\n    filePath = path.normalize(removeLeadingForwardSlashWindows(filePath));\n\n    if (filePath.includes(configSrcDirPathname)) {\n      filePath = path.relative(configSrcDirPathname, filePath);\n    }\n\n    // fast-glob prefers unix paths https://www.npmjs.com/package/fast-glob#how-to-write-patterns-on-windows\n    filePath = path.posix.join(\n      fg.convertPathToPattern(configSrcDirPathname),\n      slash(filePath)\n    );\n\n    return filePath;\n  });\n}\n\nlet hasWarnedIsInvalidPage = false;", "function warnIsInvalidPage(\n  extname: string,\n  filePath: string,\n  configSrcDirPathname: string\n): boolean {\n  // astro pages file types https://docs.astro.build/en/core-concepts/astro-pages/#supported-page-files\n  if ([\"js\", \"ts\", \"md\", \"mdx\", \"html\"].includes(extname)) {\n    if (hasWarnedIsInvalidPage === false) {\n      logger.warn(\n        \"astro-i18n-aut\",\n        `exclude or remove non-astro files from \"${configSrcDirPathname}pages\", as they cannot be translated`\n      );\n      hasWarnedIsInvalidPage = true;\n    }\n    logger.warn(\n      \"astro-i18n-aut\",\n      path.join(configSrcDirPathname, \"pages\", filePath)\n    );\n    return true;\n  }\n  return false;\n}\n"]}
{"filename": "src/integration/index.ts", "chunked_list": ["export { i18n, i18n as default } from \"./integration\";\nexport { defaultLocaleSitemapFilter } from \"../shared/defaultLocaleSitemapFilter\";\nexport {\n  defaultI18nConfig,\n  defaultI18nMiddlewareConfig,\n} from \"../shared/configs\";\nexport type {\n  UserI18nConfig,\n  UserI18nMiddlewareConfig,\n  UserDefaultLocaleSitemapFilterConfig,", "  UserI18nMiddlewareConfig,\n  UserDefaultLocaleSitemapFilterConfig,\n} from \"../shared/configs\";\n"]}
{"filename": "src/edge-runtime/index.ts", "chunked_list": ["export { i18nMiddleware } from \"./middleware\";\nexport { getLocale } from \"./getLocale\";\nexport { getLocaleUrlPrefix } from \"./getLocaleUrlPrefix\";\nexport { getUrlWithoutLocale } from \"./getUrlWithoutLocale\";\nexport { defaultI18nConfig, defaultI18nMiddlewareConfig } from \"../shared\";\nexport type {\n  UserI18nConfig,\n  UserI18nMiddlewareConfig,\n  UserDefaultLocaleSitemapFilterConfig,\n} from \"../shared\";", "  UserDefaultLocaleSitemapFilterConfig,\n} from \"../shared\";\n"]}
{"filename": "src/edge-runtime/getLocaleUrlPrefix.ts", "chunked_list": ["/**\n * @returns locale prefix \"/es\" or \"\" if defaultLocale\n */\nexport function getLocaleUrlPrefix(url: URL): string {\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (url.pathname.length === 3) {\n    return url.pathname;\n  }\n  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n    // catch all \"/fr/**/*\" urls\n    return url.pathname.slice(0, 3);\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return \"\";\n}\n", "  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n    // catch all \"/fr/**/*\" urls\n    return url.pathname.slice(0, 3);\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return \"\";\n}\n"]}
{"filename": "src/edge-runtime/middleware.ts", "chunked_list": ["import type { ValidRedirectStatus } from \"astro\";\nimport { defineMiddleware } from \"astro/middleware\";\nimport { defaultI18nMiddlewareConfig } from \"../shared/configs\";\nimport type {\n  UserI18nMiddlewareConfig,\n  I18nMiddlewareConfig,\n} from \"../shared/configs\";\n\nconst redirectDefaultLocaleDisabledMiddleware = defineMiddleware((_, next) =>\n  next()", "const redirectDefaultLocaleDisabledMiddleware = defineMiddleware((_, next) =>\n  next()\n);\n\nexport function i18nMiddleware(\n  userI18nMiddlewareConfig: UserI18nMiddlewareConfig\n) {\n  const i18nMiddlewareConfig: I18nMiddlewareConfig = Object.assign(\n    defaultI18nMiddlewareConfig,\n    userI18nMiddlewareConfig\n  );\n  const { defaultLocale, redirectDefaultLocale } = i18nMiddlewareConfig;\n", "  if (redirectDefaultLocale === false) {\n    return redirectDefaultLocaleDisabledMiddleware;\n  }\n\n  let status: ValidRedirectStatus | undefined;\n  if (typeof redirectDefaultLocale === \"number\") {\n    status = redirectDefaultLocale;\n  }\n\n  return defineMiddleware((context, next) => {\n    const requestUrlPathname = new URL(context.request.url).pathname;\n    // avoid catching urls that start with \"/en\" like \"/enigma\"", "    if (requestUrlPathname === `/${defaultLocale}`) {\n      return context.redirect(\n        requestUrlPathname.replace(`/${defaultLocale}`, \"/\"),\n        status\n      );\n    }\n    // catch all \"/en/**/*\" urls\n    if (requestUrlPathname.startsWith(`/${defaultLocale}/`)) {\n      return context.redirect(\n        requestUrlPathname.replace(`/${defaultLocale}/`, \"/\"),\n        status\n      );\n    }\n    // otherwise, it must be a defaultLocale or other url\n    return next();\n  });\n}\n"]}
{"filename": "src/edge-runtime/getUrlWithoutLocale.ts", "chunked_list": ["/**\n * @returns url without locale prefix, \"/es/about\" => \"/about\"\n */\nexport function getUrlWithoutLocale(url: URL): string {\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (url.pathname.length === 3) {\n    return \"/\";\n  }\n  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n    // catch all \"/fr/**/*\" urls\n    return url.pathname.slice(3);\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return url.pathname;\n}\n", "  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n    // catch all \"/fr/**/*\" urls\n    return url.pathname.slice(3);\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return url.pathname;\n}\n"]}
{"filename": "src/edge-runtime/getLocale.ts", "chunked_list": ["/**\n * @returns locale key or undefined if defaultLocale\n */\nexport function getLocale(url: URL): string | undefined {\n  // avoid catching urls that start with \"/en\" like \"/enigma\"\n  if (url.pathname.length === 3) {\n    return url.pathname.slice(1);\n  }\n  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n    // catch all \"/fr/**/*\" urls\n    return url.pathname.slice(1, 3);\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return undefined;\n}\n", "  if (url.pathname[0] === \"/\" && url.pathname[3] === \"/\") {\n    // catch all \"/fr/**/*\" urls\n    return url.pathname.slice(1, 3);\n  }\n  // otherwise, it must be a defaultLocale or other url\n  return undefined;\n}\n"]}
{"filename": "src/shared/configs.ts", "chunked_list": ["import type { ValidRedirectStatus } from \"astro\";\n\nexport interface UserI18nConfig {\n  /**\n   * glob pattern(s) to include\n   * @defaultValue [\"pages\\/\\*\\*\\/\\*\"]\n   */\n  include?: string | string[];\n  /**\n   * glob pattern(s) to exclude\n   * @defaultValue [\"pages\\/api\\/\\*\\*\\/\\*\"]\n   */\n  exclude?: string | string[];\n  /**\n   * all language locales\n   *\n   * @example\n   * ```ts\n   * const locales = {\n   *   en: \"en-US\", // the `defaultLocale` value must present in `locales` keys\n   *   es: \"es-ES\",\n   *   fr: \"fr-CA\",\n   * };\n   * ```\n   */\n  locales: Record<string, string>;\n  /**\n   * the default language locale\n   *\n   * the `defaultLocale` value must present in `locales` keys\n   *\n   * @example \"en\"\n   */\n  defaultLocale: string;\n  /**\n   * given the defaultLocale \"en\", whether\n   * \"/en/about\" redirects to \"/about\"\n   *\n   * whether the url with the default locale\n   * should redirect to the url without the locale\n   *\n   * if a status is given, such as 302,\n   * redirectDefaultLocale will be truthy,\n   * and all redirects will use that status\n   *\n   * @defaultValue true\n   */\n  redirectDefaultLocale?: boolean | ValidRedirectStatus;\n}\n", "export type UserI18nMiddlewareConfig = Pick<\n  UserI18nConfig,\n  \"defaultLocale\" | \"redirectDefaultLocale\"\n>;\n\nexport type UserDefaultLocaleSitemapFilterConfig = Pick<\n  UserI18nConfig,\n  \"defaultLocale\"\n>;\n\nexport type I18nConfig = Required<UserI18nConfig>;\n", "export type I18nConfig = Required<UserI18nConfig>;\n\nexport type I18nMiddlewareConfig = Required<UserI18nMiddlewareConfig>;\n\n// opposite of RequiredFieldsOnly https://stackoverflow.com/a/68261391\ntype PartialFieldsOnly<T> = {\n  [K in keyof T as T[K] extends Required<T>[K] ? never : K]: T[K];\n};\n\n/**\n * The default values for I18nConfig\n */\nexport const defaultI18nConfig: Required<PartialFieldsOnly<UserI18nConfig>> = {\n  include: [\"pages/**/*\"],\n  exclude: [\"pages/api/**/*\"],\n  redirectDefaultLocale: true,\n};\n\n/**\n * The default values for I18nMiddlewareConfig\n */\nexport const defaultI18nMiddlewareConfig: Required<\n  PartialFieldsOnly<UserI18nMiddlewareConfig>\n> = {\n  redirectDefaultLocale: defaultI18nConfig.redirectDefaultLocale,\n};\n"]}
{"filename": "src/shared/defaultLocaleSitemapFilter.ts", "chunked_list": ["import type { UserDefaultLocaleSitemapFilterConfig } from \"./configs\";\n\n// sitemap filter https://docs.astro.build/en/guides/integrations-guide/sitemap/#filter\nexport function defaultLocaleSitemapFilter({\n  defaultLocale,\n}: UserDefaultLocaleSitemapFilterConfig) {\n  return function filter(page: string) {\n    const pagePathname = new URL(page).pathname;\n    return (\n      // avoid catching urls that start with \"/en\" like \"/enigma\"\n      pagePathname !== `/${defaultLocale}` &&\n      // catch all \"/en/**/*\" urls\n      !pagePathname.startsWith(`/${defaultLocale}/`)\n    );\n  };\n}\n"]}
{"filename": "src/shared/index.ts", "chunked_list": ["export { defaultLocaleSitemapFilter } from \"./defaultLocaleSitemapFilter\";\nexport { defaultI18nConfig, defaultI18nMiddlewareConfig } from \"./configs\";\nexport type {\n  UserI18nConfig,\n  UserI18nMiddlewareConfig,\n  UserDefaultLocaleSitemapFilterConfig,\n} from \"./configs\";\n"]}
{"filename": "src/astro/internal-helpers/path.ts", "chunked_list": ["export function removeLeadingForwardSlashWindows(path: string) {\n  return path.startsWith(\"/\") && path[2] === \":\" ? path.substring(1) : path;\n}\n"]}
{"filename": "src/astro/logger/core.ts", "chunked_list": ["import { dim } from \"kleur/colors\";\nimport stringWidth from \"string-width\";\n\ninterface LogWritable<T> {\n  write: (chunk: T) => boolean;\n}\n\nexport type LoggerLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"silent\"; // same as Pino\nexport type LoggerEvent = \"info\" | \"warn\" | \"error\";\n\nexport interface LogOptions {\n  dest: LogWritable<LogMessage>;\n  level: LoggerLevel;\n}\n\n// Hey, locales are pretty complicated! Be careful modifying this logic...\n// If we throw at the top-level, international users can't use Astro.\n//\n// Using `[]` sets the default locale properly from the system!\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#parameters\n//\n// Here be the dragons we've slain:\n// https://github.com/withastro/astro/issues/2625\n// https://github.com/withastro/astro/issues/3309\nexport const dateTimeFormat = new Intl.DateTimeFormat([], {\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\",\n});\n", "export type LoggerEvent = \"info\" | \"warn\" | \"error\";\n\nexport interface LogOptions {\n  dest: LogWritable<LogMessage>;\n  level: LoggerLevel;\n}\n\n// Hey, locales are pretty complicated! Be careful modifying this logic...\n// If we throw at the top-level, international users can't use Astro.\n//\n// Using `[]` sets the default locale properly from the system!\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#parameters\n//\n// Here be the dragons we've slain:\n// https://github.com/withastro/astro/issues/2625\n// https://github.com/withastro/astro/issues/3309\nexport const dateTimeFormat = new Intl.DateTimeFormat([], {\n  hour: \"2-digit\",\n  minute: \"2-digit\",\n  second: \"2-digit\",\n});\n", "export interface LogMessage {\n  type: string | null;\n  level: LoggerLevel;\n  message: string;\n}\n\nexport const levels: Record<LoggerLevel, number> = {\n  debug: 20,\n  info: 30,\n  warn: 40,\n  error: 50,\n  silent: 90,\n};\n\n/** Full logging API */", "export function log(\n  opts: LogOptions,\n  level: LoggerLevel,\n  type: string | null,\n  message: string\n) {\n  const logLevel = opts.level;\n  const dest = opts.dest;\n  const event: LogMessage = {\n    type,\n    level,\n    message,\n  };\n\n  // test if this level is enabled or not", "  if (levels[logLevel] > levels[level]) {\n    return; // do nothing\n  }\n\n  dest.write(event);\n}\n\n/** Emit a user-facing message. Useful for UI and other console messages. */\nexport function info(opts: LogOptions, type: string | null, message: string) {\n  return log(opts, \"info\", type, message);\n}\n\n/** Emit a warning message. Useful for high-priority messages that aren't necessarily errors. */", "export function info(opts: LogOptions, type: string | null, message: string) {\n  return log(opts, \"info\", type, message);\n}\n\n/** Emit a warning message. Useful for high-priority messages that aren't necessarily errors. */\nexport function warn(opts: LogOptions, type: string | null, message: string) {\n  return log(opts, \"warn\", type, message);\n}\n\n/** Emit a error message, Useful when Astro can't recover from some error. */\nexport function error(opts: LogOptions, type: string | null, message: string) {\n  return log(opts, \"error\", type, message);\n}\n", "export function error(opts: LogOptions, type: string | null, message: string) {\n  return log(opts, \"error\", type, message);\n}\n\ntype LogFn = typeof info | typeof warn | typeof error;\n\nexport function table(opts: LogOptions, columns: number[]) {\n  return function logTable(logFn: LogFn, ...input: Array<any>) {\n    const message = columns\n      .map((len, i) => padStr(input[i].toString(), len))\n      .join(\" \");\n    logFn(opts, null, message);\n  };\n}\n", "export function debug(...args: any[]) {\n  if (\"_astroGlobalDebug\" in globalThis) {\n    (globalThis as any)._astroGlobalDebug(...args);\n  }\n}\n\nfunction padStr(str: string, len: number) {\n  const strLen = stringWidth(str);\n  if (strLen > len) {\n    return str.substring(0, len - 3) + \"...\";\n  }\n  const spaces = Array.from({ length: len - strLen }, () => \" \").join(\"\");\n  return str + spaces;\n}\n\nexport let defaultLogLevel: LoggerLevel;", "  if (strLen > len) {\n    return str.substring(0, len - 3) + \"...\";\n  }\n  const spaces = Array.from({ length: len - strLen }, () => \" \").join(\"\");\n  return str + spaces;\n}\n\nexport let defaultLogLevel: LoggerLevel;\nif (typeof process !== \"undefined\") {\n  // This could be a shimmed environment so we don't know that `process` is the full\n  // NodeJS.process. This code treats it as a plain object so TS doesn't let us\n  // get away with incorrect assumptions.\n  let proc: object = process;", "if (typeof process !== \"undefined\") {\n  // This could be a shimmed environment so we don't know that `process` is the full\n  // NodeJS.process. This code treats it as a plain object so TS doesn't let us\n  // get away with incorrect assumptions.\n  let proc: object = process;\n  if (\"argv\" in proc && Array.isArray(proc.argv)) {\n    if (proc.argv.includes(\"--verbose\")) {\n      defaultLogLevel = \"debug\";\n    } else if (proc.argv.includes(\"--silent\")) {\n      defaultLogLevel = \"silent\";\n    } else {\n      defaultLogLevel = \"info\";\n    }\n  } else {\n    defaultLogLevel = \"info\";\n  }\n} else {\n  defaultLogLevel = \"info\";\n}\n\n/** Print out a timer message for debug() */", "    } else if (proc.argv.includes(\"--silent\")) {\n      defaultLogLevel = \"silent\";\n    } else {\n      defaultLogLevel = \"info\";\n    }\n  } else {\n    defaultLogLevel = \"info\";\n  }\n} else {\n  defaultLogLevel = \"info\";\n}\n\n/** Print out a timer message for debug() */", "export function timerMessage(message: string, startTime: number = Date.now()) {\n  let timeDiff = Date.now() - startTime;\n  let timeDisplay =\n    timeDiff < 750\n      ? `${Math.round(timeDiff)}ms`\n      : `${(timeDiff / 1000).toFixed(1)}s`;\n  return `${message}   ${dim(timeDisplay)}`;\n}\n"]}
{"filename": "src/astro/logger/console.ts", "chunked_list": ["import { bold, cyan, dim, red, reset, yellow } from \"kleur/colors\";\nimport type { LogMessage } from \"./core.js\";\nimport { dateTimeFormat, levels } from \"./core.js\";\n\nlet lastMessage: string;\nlet lastMessageCount = 1;\nexport const consoleLogDestination = {\n  write(event: LogMessage) {\n    // eslint-disable-next-line no-console\n    let dest = console.error;\n    if (levels[event.level] < levels[\"error\"]) {\n      // eslint-disable-next-line no-console\n      dest = console.log;\n    }\n", "    // eslint-disable-next-line no-console\n    let dest = console.error;\n    if (levels[event.level] < levels[\"error\"]) {\n      // eslint-disable-next-line no-console\n      dest = console.log;\n    }\n\n    function getPrefix() {\n      let prefix = \"\";\n      let type = event.type;\n      if (type) {", "      if (type) {\n        // hide timestamp when type is undefined\n        prefix += dim(dateTimeFormat.format(new Date()) + \" \");\n        if (event.level === \"info\") {\n          type = bold(cyan(`[${type}]`));\n        } else if (event.level === \"warn\") {\n          type = bold(yellow(`[${type}]`));\n        } else if (event.level === \"error\") {\n          type = bold(red(`[${type}]`));\n        }\n\n        prefix += `${type} `;\n      }\n      return reset(prefix);\n    }\n\n    let message = event.message;\n    // For repeat messages, only update the message counter", "    if (message === lastMessage) {\n      lastMessageCount++;\n      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;\n    } else {\n      lastMessage = message;\n      lastMessageCount = 1;\n    }\n    const outMessage = getPrefix() + message;\n    dest(outMessage);\n    return true;\n  },\n};\n"]}
{"filename": "src/astro/logger/node.ts", "chunked_list": ["import debugPackage from \"debug\";\nimport { bold, cyan, dim, red, reset, yellow } from \"kleur/colors\";\nimport * as readline from \"readline\";\nimport { Writable } from \"stream\";\nimport stringWidth from \"string-width\";\nimport { dateTimeFormat, error, info, warn } from \"./core.js\";\n\ntype ConsoleStream = Writable & {\n  fd: 1 | 2;\n};\n\nlet lastMessage: string;\nlet lastMessageCount = 1;\nexport const nodeLogDestination = new Writable({\n  objectMode: true,\n  write(event: LogMessage, _, callback) {\n    let dest: ConsoleStream = process.stderr;", "    if (levels[event.level] < levels[\"error\"]) {\n      dest = process.stdout;\n    }\n\n    function getPrefix() {\n      let prefix = \"\";\n      let type = event.type;\n      if (type) {\n        // hide timestamp when type is undefined\n        prefix += dim(dateTimeFormat.format(new Date()) + \" \");\n        if (event.level === \"info\") {\n          type = bold(cyan(`[${type}]`));", "        // hide timestamp when type is undefined\n        prefix += dim(dateTimeFormat.format(new Date()) + \" \");\n        if (event.level === \"info\") {\n          type = bold(cyan(`[${type}]`));\n        } else if (event.level === \"warn\") {\n          type = bold(yellow(`[${type}]`));\n        } else if (event.level === \"error\") {\n          type = bold(red(`[${type}]`));\n        }\n\n        prefix += `${type} `;\n      }\n      return reset(prefix);\n    }\n\n    // console.log({msg: event.message, args: event.args});\n    let message = event.message;\n    // For repeat messages, only update the message counter", "    if (message === lastMessage) {\n      lastMessageCount++;\n      if (levels[event.level] < levels[\"error\"]) {\n        let lines = 1;\n        let len = stringWidth(`${getPrefix()}${message}`);\n        let cols = (dest as unknown as typeof process.stdout).columns;\n        if (len > cols) {\n          lines = Math.ceil(len / cols);\n        }\n        for (let i = 0; i < lines; i++) {\n          readline.clearLine(dest, 0);\n          readline.cursorTo(dest, 0);\n          readline.moveCursor(dest, 0, -1);\n        }\n      }\n      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;\n    } else {\n      lastMessage = message;\n      lastMessageCount = 1;\n    }\n\n    dest.write(getPrefix());\n    dest.write(message);\n    dest.write(\"\\n\");\n    callback();\n  },\n});\n", "        for (let i = 0; i < lines; i++) {\n          readline.clearLine(dest, 0);\n          readline.cursorTo(dest, 0);\n          readline.moveCursor(dest, 0, -1);\n        }\n      }\n      message = `${message} ${yellow(`(x${lastMessageCount})`)}`;\n    } else {\n      lastMessage = message;\n      lastMessageCount = 1;\n    }\n\n    dest.write(getPrefix());\n    dest.write(message);\n    dest.write(\"\\n\");\n    callback();\n  },\n});\n", "interface LogWritable<T> {\n  write: (chunk: T) => boolean;\n}\n\nexport type LoggerLevel = \"debug\" | \"info\" | \"warn\" | \"error\" | \"silent\"; // same as Pino\nexport type LoggerEvent = \"info\" | \"warn\" | \"error\";\n\nexport interface LogOptions {\n  dest?: LogWritable<LogMessage>;\n  level?: LoggerLevel;\n}\n\nexport const nodeLogOptions: Required<LogOptions> = {\n  dest: nodeLogDestination,\n  level: \"info\",\n};\n", "export interface LogMessage {\n  type: string | null;\n  level: LoggerLevel;\n  message: string;\n}\n\nexport const levels: Record<LoggerLevel, number> = {\n  debug: 20,\n  info: 30,\n  warn: 40,\n  error: 50,\n  silent: 90,\n};\n\nconst debuggers: Record<string, debugPackage.Debugger[\"log\"]> = {};\n/**\n * Emit a message only shown in debug mode.\n * Astro (along with many of its dependencies) uses the `debug` package for debug logging.\n * You can enable these logs with the `DEBUG=astro:*` environment variable.\n * More info https://github.com/debug-js/debug#environment-variables\n */", "export function debug(type: string, ...messages: Array<any>) {\n  const namespace = `astro:${type}`;\n  debuggers[namespace] = debuggers[namespace] || debugPackage(namespace);\n  return debuggers[namespace](...messages);\n}\n\n// This is gross, but necessary since we are depending on globals.\n(globalThis as any)._astroGlobalDebug = debug;\n\n// A default logger for when too lazy to pass LogOptions around.\nexport const logger = {\n  info: info.bind(null, nodeLogOptions),\n  warn: warn.bind(null, nodeLogOptions),\n  error: error.bind(null, nodeLogOptions),\n};\n", "export function enableVerboseLogging() {\n  debug(\"cli\", '--verbose flag enabled! Enabling: DEBUG=\"*,-babel\"');\n  debug(\n    \"cli\",\n    'Tip: Set the DEBUG env variable directly for more control. Example: \"DEBUG=astro:*,vite:* astro build\".'\n  );\n}\n"]}
