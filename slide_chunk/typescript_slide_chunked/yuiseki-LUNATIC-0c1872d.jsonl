{"filename": "src/utils/sleep.ts", "chunked_list": ["export const sleep = (msec: number) =>\n  new Promise((resolve) => setTimeout(resolve, msec));\n"]}
{"filename": "src/utils/scrollToBottom.ts", "chunked_list": ["import { sleep } from \"./sleep\";\n\nexport const scrollToBottom = async () => {\n  await sleep(100);\n  window.scroll({\n    top: document.body.scrollHeight,\n    behavior: \"smooth\",\n  });\n};\n", "};\n"]}
{"filename": "src/utils/nextPostJson.ts", "chunked_list": ["import { Md5 } from \"ts-md5\";\n\nexport const nextPostJson = async (apiPath: string, object: any) => {\n  return fetch(apiPath, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n    body: JSON.stringify(object),\n  });", "    body: JSON.stringify(object),\n  });\n};\n\nexport const nextPostJsonWithCache = async (\n  url: string,\n  bodyJson: any,\n  cacheSeconds: number = 21600 // 6 hours\n) => {\n  const bodyJsonString = JSON.stringify(bodyJson);", ") => {\n  const bodyJsonString = JSON.stringify(bodyJson);\n  const md5 = new Md5();\n  md5.appendStr(`${url}\\n${bodyJsonString}`);\n  const hash = md5.end();\n  const key = `lunatic-next-post-json-cache-${hash}`;\n  const unixtime = Math.floor(new Date().getTime() / 1000);\n\n  const fetchAndCache = async () => {\n    const res = await fetch(url, {", "  const fetchAndCache = async () => {\n    const res = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: bodyJsonString,\n    });\n    const json = await res.json();\n    const valueToStore = {", "    const json = await res.json();\n    const valueToStore = {\n      url: url,\n      reqJson: bodyJson,\n      resJson: json,\n      unixtime: unixtime,\n    };\n    window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    return json;\n  };", "    return json;\n  };\n\n  const cache = window.localStorage.getItem(key);\n  if (cache) {\n    const valueFromStore = JSON.parse(cache);\n    if (unixtime - cacheSeconds < valueFromStore.unixtime) {\n      return valueFromStore.resJson;\n    } else {\n      return await fetchAndCache();\n    }\n  } else {\n    return await fetchAndCache();\n  }\n};\n"]}
{"filename": "src/utils/langchain/chains/lunatic/prompts.ts", "chunked_list": ["import { PromptTemplate } from \"langchain/prompts\";\n\nexport const LUNATIC_SURFACE_PROMPT = new PromptTemplate({\n  template: `Your name is LUNATIC, You are an interactive web site reconstructing assistant.\n\nYou will always reply according to the following rules:\n- You identify the language in which the human is writing as precisely as possible.\n- You will carefully reply \"I copy! I'm reconstructing web site that shows {{summary of the all concerns of the Human}}. Please wait a while...\" in the language which human is writing.\n- If human want to change, expand, limit, delete, reset or clear maps, you will carefully reply \"I copy! I'm reconstructing web site that shows {{summary of the all concerns of the Human}}. Please wait a while...\" in the language which human is writing.\n- When human want to add or expand web site, Do not forget previous concerns.", "- If human want to change, expand, limit, delete, reset or clear maps, you will carefully reply \"I copy! I'm reconstructing web site that shows {{summary of the all concerns of the Human}}. Please wait a while...\" in the language which human is writing.\n- When human want to add or expand web site, Do not forget previous concerns.\n- Without when human want to remove, delete or limit web site, Do not forget previous concerns.\n- You MUST ALWAYS reply in the language which human is writing.\n- You MUST NOT reply in any language other than the language written by the human.\n- You reply with the most accurate grammar possible.\n\nCurrent conversation:\n{history}\nHuman: {input}", "{history}\nHuman: {input}\nAI:`,\n  inputVariables: [\"history\", \"input\"],\n});\n\nconst exampleHello = `\nText input:\nHuman: \u6587\u5b57\u3092\u5927\u304d\u304f\u3057\u3066\nOutput:", "Human: \u6587\u5b57\u3092\u5927\u304d\u304f\u3057\u3066\nOutput:\n\\`\\`\\`\n.dialogueElementItem {{\n  font-size: 4em;\n}}\n\\`\\`\\`\n\nInput text:\nHuman: \u7d75\u6587\u5b57\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u70b9\u6ec5\u3055\u305b\u3066\u304f\u3060\u3055\u3044", "Input text:\nHuman: \u7d75\u6587\u5b57\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u70b9\u6ec5\u3055\u305b\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`\n@keyframes keyframe-opacity-blinking {{\n  0% {{ opacity: 0; }}\n  50% {{ opacity: 1; }}\n  100% {{ opacity: 0; }}\n}}\n.emojiCount {{", "}}\n.emojiCount {{\n  animation: keyframe-opacity-blinking 2s linear infinite !important;\n}}\n\\`\\`\\`\n\nInput text:\nHuman: \u30a2\u30d0\u30bf\u30fc\u30a2\u30a4\u30b3\u30f3\u3092\u56de\u8ee2\u3055\u305b\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`", "Output:\n\\`\\`\\`\n@keyframes keyframe-transform-rotate-clockwise {{\n  0% {{ transform: rotate(0); }}\n  100% {{ transform: rotate(360deg); }}\n}}\n.avatarIcon {{\n  border-radius: 50%;\n  animation: keyframe-transform-rotate-clockwise 1s linear infinite !important;\n}}", "  animation: keyframe-transform-rotate-clockwise 1s linear infinite !important;\n}}\n\\`\\`\\`\n\nInput text:\nHuman: \u30c1\u30e3\u30c3\u30c8\u6b04\u3092\u5de6\u53f3\u306b\u6c34\u5e73\u306b\u30e6\u30e9\u30e6\u30e9\u3068\u63fa\u3089\u3057\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`\n@keyframes keyframe-transform-horizontally-swaying {{\n  0% {{ transform: translate(-15px, 0); }}", "@keyframes keyframe-transform-horizontally-swaying {{\n  0% {{ transform: translate(-15px, 0); }}\n  50% {{ transform: translate(15px, 0); }}\n  100% {{ transform: translate(-15px, 0); }}\n}}\n.dialogueElementItem {{\n  animation: keyframe-transform-horizontally-swaying 5s linear infinite !important;\n}}\n\\`\\`\\`\n", "\\`\\`\\`\n\nInput text:\nHuman: \u5165\u529b\u6b04\u3092\u7e26\u65b9\u5411\u306b\u4e0a\u4e0b\u306b\u30e6\u30e9\u30e6\u30e9\u3068\u63fa\u3089\u3057\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`\n@keyframes keyframe-transform-vertically-swinging {{\n  0% {{ transform: translate(0, 0px); }}\n  50% {{ transform: translate(0, -30px); }}\n  100% {{ transform: translate(0, 0px); }}", "  50% {{ transform: translate(0, -30px); }}\n  100% {{ transform: translate(0, 0px); }}\n}}\n.textInputWrap {{\n  animation: keyframe-transform-vertically-swinging 1s linear infinite !important;\n}}\n\\`\\`\\`\n\nInput text:\nHuman: \u5165\u529b\u30dc\u30bf\u30f3\u3092\u30d0\u30a6\u30f3\u30b9\u3055\u305b\u3066\u304f\u3060\u3055\u3044", "Input text:\nHuman: \u5165\u529b\u30dc\u30bf\u30f3\u3092\u30d0\u30a6\u30f3\u30b9\u3055\u305b\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`\n@keyframes keyframe-transform-bigger-smaller-bounce {{\n  0% {{ transform: scale(0.5); }}\n  50% {{ transform: scale(1.2); }}\n  100% {{ transform: scale(0.5); }}\n}}\n.textInputWrap {{", "}}\n.textInputWrap {{\n  animation: keyframe-transform-bigger-smaller-bounce 1s linear infinite !important;\n}}\n\\`\\`\\`\n\nInput text:\nHuman: \u30a2\u30d0\u30bf\u30fc\u30a2\u30a4\u30b3\u30f3\u3092\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u30d0\u30a6\u30f3\u30b9\u3055\u305b\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`", "Output:\n\\`\\`\\`\n@keyframes keyframe-transform-bigger-smaller-bounce-and-rotate-clockwise {{\n  0% {{ transform: scale(0.5) rotate(0); }}\n  50% {{ transform: scale(1.2) rotate(180deg); }}\n  100% {{ transform: scale(0.5) rotate(360deg); }}\n}}\n.avatarIcon img {{\n  animation:  keyframe-transform-bigger-smaller-bounce-and-rotate-clockwise 1s linear infinite !important;\n}}", "  animation:  keyframe-transform-bigger-smaller-bounce-and-rotate-clockwise 1s linear infinite !important;\n}}\n\\`\\`\\`\n\nText input:\nHuman: \u7d75\u6587\u5b57\u3092\u56de\u8ee2\u3055\u305b\u3066\u304f\u3060\u3055\u3044\nOutput:\n\\`\\`\\`\n.emoji {{\n  animation: keyframe-transform-rotate-clockwise 5s linear infinite !important;", ".emoji {{\n  animation: keyframe-transform-rotate-clockwise 5s linear infinite !important;\n}}\n\\`\\`\\`\n`;\nconst exampleGamings = `\nInput text:\nHuman: \u80cc\u666f\u3092\u30b2\u30fc\u30df\u30f3\u30b0PC\u3063\u307d\u304f\u8679\u8272\u306b\u5149\u3089\u305b\u3066\nOutput:\n\\`\\`\\`", "Output:\n\\`\\`\\`\n@keyframes gaming-rainbow-background {{\n  0% {{ background-position: 0% 50%; }}\n  50% {{ background-position: 100% 50%; }}\n  100% {{ background-position: 0% 50%; }}\n}}\n.body {{\n  background: linear-gradient(to right, red, orange, yellow, green, aqua, blue, purple);\n  background-size: 600% 600% !important;", "  background: linear-gradient(to right, red, orange, yellow, green, aqua, blue, purple);\n  background-size: 600% 600% !important;\n  animation: gaming-rainbow-background 2s ease infinite !important;\n}}\n\\`\\`\\`\n`;\nconst exampleGamingsDialogue = `\nInput text:\nHuman: \u30c1\u30e3\u30c3\u30c8\u6b04\u3092\u30b2\u30fc\u30df\u30f3\u30b0PC\u3063\u307d\u304f\u8679\u8272\u306b\u5149\u3089\u305b\u3066\nOutput:", "Human: \u30c1\u30e3\u30c3\u30c8\u6b04\u3092\u30b2\u30fc\u30df\u30f3\u30b0PC\u3063\u307d\u304f\u8679\u8272\u306b\u5149\u3089\u305b\u3066\nOutput:\n\\`\\`\\`\n@keyframes gaming-rainbow-background {{\n  0% {{ background-position: 0% 50%; }}\n  50% {{ background-position: 100% 50%; }}\n  100% {{ background-position: 0% 50%; }}\n}}\n.dialogueElementItem {{\n  --gamingBorderWidth: 1px;", ".dialogueElementItem {{\n  --gamingBorderWidth: 1px;\n  position: relative !important;\n  border: none !important;\n  border-radius: var(--gamingBorderWidth) !important;\n}}\n.dialogueElementItem:after {{\n  content: '';\n  position: absolute;\n  top: calc(-1 * var(--gamingBorderWidth) * 2);", "  position: absolute;\n  top: calc(-1 * var(--gamingBorderWidth) * 2);\n  left: calc(-1 * var(--gamingBorderWidth) * 2);\n  height: calc(100% + var(--gamingBorderWidth) * 4);\n  width: calc(100% + var(--gamingBorderWidth) * 4);\n  background: linear-gradient(to right, red, orange, yellow, green, aqua, blue, purple);\n  border-radius: calc(2 * var(--gamingBorderWidth));\n  z-index: -1;\n  background-size: 600% 600%;\n  animation: gaming-rainbow-background 2s ease infinite;", "  background-size: 600% 600%;\n  animation: gaming-rainbow-background 2s ease infinite;\n}}\n\\`\\`\\`\n`;\nconst exampleTwitter = `\nInput text:\nHuman: \u5168\u4f53\u7684\u306bTwitter\u3063\u307d\u304f\u3057\u3066\nOutput:\n\\`\\`\\`", "Output:\n\\`\\`\\`\n.avatarIcon {{\n  border-radius: 50%;\n}}\n.avatarIcon img {{\n  border-radius: 50%;\n}}\n.dialogueElementItem {{\n  background-color: #1c2732;", ".dialogueElementItem {{\n  background-color: #1c2732;\n  border-color: #1d9bf0;\n}}\n.dialogueTextRow {{\n  font-size: 1em;\n}}\n.textInputButton {{\n  background-color: #1d9bf0;\n}}", "  background-color: #1d9bf0;\n}}\n.emojiWrap {{\n  background-color: #38444d;\n}}\nmain {{\n  opacity: 0.9;\n  background-color: #15202b;\n  border-color: #38444d;\n}}", "  border-color: #38444d;\n}}\nbody {{\n  background-color: #15202b;\n}}\n\\`\\`\\`\n`;\nconst exampleChatGpt = `\nInput text:\nHuman: \u5168\u4f53\u7684\u306bChatGPT\u3063\u307d\u304f\u3057\u3066", "Input text:\nHuman: \u5168\u4f53\u7684\u306bChatGPT\u3063\u307d\u304f\u3057\u3066\nOutput:\n\\`\\`\\`\n.dialogueElementItem {{\n  border-color: #555659;\n}}\n.textInputButton {{\n  background-color: #ececf1;\n}}", "  background-color: #ececf1;\n}}\n.emojiWrap {{\n  background-color: #38444d;\n}}\nmain {{\n  opacity: 0.9;\n  background-color: #343541;\n  border-color: #555659;\n}}", "  border-color: #555659;\n}}\nbody {{\n  background-color: #2a2b32;\n}}\n\\`\\`\\`\n`;\nconst domStructures = `\nNote that, HTML has following DOM structures:\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.avatarIconWrap > div.avatarIcon > img", "Note that, HTML has following DOM structures:\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.avatarIconWrap > div.avatarIcon > img\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.avatarIconWrap > div.avatarIcon > img\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.dialogueElementWrap > div.dialogueTextWrap > div.dialogueTextRow\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueTextWrap > div.dialogueTextRow\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emoji > img\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emoji > img\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemAssistant > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emojiCount\nhtml > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emojiCount\nhtml > body > main > div.textInputWrap > div.textInput > textarea.textInputTextarea", "html > body > main > div.dialogueListWrap > div.dialogueElementItem.dialogueElementItemHuman > div.dialogueElementWrap > div.dialogueEmojiListWrap > div.emojiWrap > span.emojiCount\nhtml > body > main > div.textInputWrap > div.textInput > textarea.textInputTextarea\nhtml > body > main > div.textInputWrap > div.textInput > button.textInputButton\n`;\nconst cssClassNames = [\n  \"body\",\n  \"main\",\n  \"dialogueListWrap\",\n  \"dialogueElementItem\",\n  \"dialogueElementItemAssistant\",", "  \"dialogueElementItem\",\n  \"dialogueElementItemAssistant\",\n  \"dialogueElementItemHuman\",\n  \"avatarIconWrap\",\n  \"avatarIcon\",\n  \"dialogueElementWrap\",\n  \"dialogueTextWrap\",\n  \"dialogueTextRow\",\n  \"dialogueEmojiListWrap\",\n  \"emojiWrap\",", "  \"dialogueEmojiListWrap\",\n  \"emojiWrap\",\n  \"emoji\",\n  \"emojiCount\",\n  \"textInputWrap\",\n  \"textInput\",\n  \"textInputTextarea\",\n  \"textInputButton\",\n];\nconst examples = `", "];\nconst examples = `\nExamples:\n====\n${exampleHello}${exampleGamings}\n====\n`;\nexport const LUNATIC_CSS_PROMPT = new PromptTemplate({\n  template: `You are an AI and expert of CSS. You generate the valid CSS according to the following conversation history with Human. Note that, assistant is same as AI, Human is same as User, Chat is same as Dialogue or Conversation.\n", "  template: `You are an AI and expert of CSS. You generate the valid CSS according to the following conversation history with Human. Note that, assistant is same as AI, Human is same as User, Chat is same as Dialogue or Conversation.\n\nAlways use the following format for your output:\nFont: font size, font family and font colors best suited to expressing concern of the following conversation history\nColors: list of colors best suited to expressing concern of the following conversation history\nAnimations: list of animations best suited to expressing concern of the following conversation history\nCSSWithKeyframes:\n\\`\\`\\`\nThe CSSWithKeyframes\n\\`\\`\\`", "The CSSWithKeyframes\n\\`\\`\\`\n... (You MUST ALWAYS output only one Font, Colors, Animations, CSSWithKeyframes)\n\nAlways output according to the following rules:\n- You MUST ALWAYS output the valid CSS.\n- You ALWAYS output the CSS as creatively as possible.\n- You MUST ALWAYS output the CSS that reflects all concerns of the following conversation history.\n- You MUST ALWAYS take into account color vision diversity in the CSS.\n- The CSSWithKeyframes MUST ALWAYS be enclosed by three backticks on new lines, denoting that it is a code block.", "- You MUST ALWAYS take into account color vision diversity in the CSS.\n- The CSSWithKeyframes MUST ALWAYS be enclosed by three backticks on new lines, denoting that it is a code block.\n\nPre defined CSS class name is: [${cssClassNames.join(\", \")}]\n\n${examples}\n\nConversation history:\n{chat_history}\n\nOutput:`,\n  inputVariables: [\"chat_history\"],\n});\n"]}
{"filename": "src/utils/langchain/chains/lunatic/index.ts", "chunked_list": ["import { ConversationChain } from \"langchain/chains\";\nimport { LUNATIC_CSS_PROMPT, LUNATIC_SURFACE_PROMPT } from \"./prompts\";\nimport { LLMChain } from \"langchain/chains\";\nimport { BaseLanguageModel } from \"langchain/dist/base_language\";\nimport { BaseMemory, BufferMemory } from \"langchain/memory\";\n\nexport const loadLunaticSurfaceChain = ({\n  llm,\n  memory,\n}: {", "  memory,\n}: {\n  llm: BaseLanguageModel;\n  memory?: BaseMemory;\n}): LLMChain => {\n  if (memory === undefined) {\n    memory = new BufferMemory();\n  }\n  const chain = new ConversationChain({\n    llm: llm,\n    prompt: LUNATIC_SURFACE_PROMPT,\n    memory: memory,\n  });\n  return chain;\n};\n\nexport const loadLunaticCssChain = ({\n  llm,\n}: {\n  llm: BaseLanguageModel;\n}): LLMChain => {\n  const chain = new LLMChain({\n    llm: llm,\n    prompt: LUNATIC_CSS_PROMPT,\n  });\n  return chain;\n};\n"]}
{"filename": "src/const/emojiDict.ts", "chunked_list": ["export const emojiDict: {\n  [key: string]: {\n    src: string;\n    name: string;\n    height: number;\n    width: number;\n  };\n} = {\n  \":igyo:\": {\n    src: \"./emoji/igyo.png\",", "  \":igyo:\": {\n    src: \"./emoji/igyo.png\",\n    name: \"\u5049\u696d\",\n    height: 23,\n    width: 23,\n  },\n  \":tiken:\": {\n    src: \"./emoji/tiken.png\",\n    name: \"\u77e5\u898b\",\n    height: 23,", "    name: \"\u77e5\u898b\",\n    height: 23,\n    width: 23,\n  },\n  \":dekai:\": {\n    src: \"./emoji/dekai.png\",\n    name: \"\u30c7\u30ab\u3044\",\n    height: 23,\n    width: 23,\n  },", "    width: 23,\n  },\n  \":chian_saikou:\": {\n    src: \"./emoji/chian_saikou.gif\",\n    name: \"\u6cbb\u5b89\u6700\u9ad8\",\n    height: 23,\n    width: 23,\n  },\n  \":desyo:\": {\n    src: \"./emoji/desyo.png\",", "  \":desyo:\": {\n    src: \"./emoji/desyo.png\",\n    name: \"\u5bff\u53f8\",\n    height: 23,\n    width: 23,\n  },\n  \":mog:\": {\n    src: \"./emoji/mog.png\",\n    name: \"\u3082\u3050\u2026\",\n    height: 23,", "    name: \"\u3082\u3050\u2026\",\n    height: 23,\n    width: 23,\n  },\n  \":saikou:\": {\n    src: \"./emoji/saikou.png\",\n    name: \"\u6700\u9ad8\",\n    height: 23,\n    width: 23,\n  },", "    width: 23,\n  },\n  \":muzu:\": {\n    src: \"./emoji/muzu.png\",\n    name: \"\u96e3\",\n    height: 23,\n    width: 23,\n  },\n  \":wakaran:\": {\n    src: \"./emoji/wakaran.png\",", "  \":wakaran:\": {\n    src: \"./emoji/wakaran.png\",\n    name: \"\u308f\u304b\u3089\u3093\",\n    height: 23,\n    width: 23,\n  },\n  \":send_money:\": {\n    src: \"./emoji/send_money.png\",\n    name: \"\u30ec\u30bf\u30fc\u30d1\u30c3\u30af\u3067\u73fe\u91d1\u9001\u308c\",\n    height: 23,", "    name: \"\u30ec\u30bf\u30fc\u30d1\u30c3\u30af\u3067\u73fe\u91d1\u9001\u308c\",\n    height: 23,\n    width: 210,\n  },\n  \":is_all_scam:\": {\n    src: \"./emoji/is_all_scam.png\",\n    name: \"\u306f\u3059\u3079\u3066\u8a50\u6b3a\u3067\u3059\",\n    height: 23,\n    width: 160,\n  },", "    width: 160,\n  },\n};\n"]}
{"filename": "src/hooks/localStorage.ts", "chunked_list": ["import { useState } from \"react\";\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    if (typeof window === \"undefined\") {\n      return initialValue;\n    }\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {", "    } catch (error) {\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);", "      if (typeof window !== \"undefined\") {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue] as const;\n}\n"]}
{"filename": "src/types/DialogueElement.ts", "chunked_list": ["import { Document } from \"@/types/Document\";\n\nexport type DialogueElement = {\n  who: string;\n  text: string;\n  emojiList: Array<{ name: string; count: number }>;\n  textEnd?: string;\n  docs?: Document[];\n};\n"]}
{"filename": "src/types/Document.ts", "chunked_list": ["export type Document = {\n  pageContent: string;\n  metadata: {\n    id: string;\n    source: string;\n    title?: string;\n    name: string;\n    created_at?: number;\n    updated_at: number;\n    date_created: number;\n    \"pdf.metadata._metadata.xmp:modifydate\": string;\n  };\n};\n"]}
{"filename": "src/app/api/lunatic/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const query = searchParams.get(\"query\");\n\n  return NextResponse.json({ query: query });\n}\n"]}
{"filename": "src/app/api/lunatic/deep/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url);\n  const query = searchParams.get(\"query\");\n\n  return NextResponse.json({ query: query });\n}\n"]}
{"filename": "src/app/api/lunatic/css/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\nimport { OpenAI } from \"langchain/llms/openai\";\nimport { loadLunaticCssChain } from \"@/utils/langchain/chains/lunatic\";\n\nexport async function POST(request: Request) {\n  const res = await request.json();\n  const currentCss = res.currentCss;\n  const pastMessagesJsonString = res.pastMessagesJsonString;\n\n  let chatHistory: string[] = [];\n  if (pastMessagesJsonString && pastMessagesJsonString !== \"undefined\") {\n    const pastMessages: {\n      messages: Array<{ type: string; data: { content: string } }>;\n    } = JSON.parse(pastMessagesJsonString);\n    chatHistory = pastMessages.messages.map((message, idx) => {", "  if (pastMessagesJsonString && pastMessagesJsonString !== \"undefined\") {\n    const pastMessages: {\n      messages: Array<{ type: string; data: { content: string } }>;\n    } = JSON.parse(pastMessagesJsonString);\n    chatHistory = pastMessages.messages.map((message, idx) => {\n      if (message.data.content) {\n        if (idx === 0 || idx % 2 === 0) {\n          return `Human: ${message.data.content}`;\n        } else {\n          return `AI: ${message.data.content}`;\n        }\n      } else {\n        return \"\";\n      }\n    });\n  }\n\n  console.log(\"----- ----- -----\");\n  console.log(\"----- css -----\");\n  console.log(\"----- ----- -----\");\n  console.log(chatHistory.join(\"\\n\"));\n  console.log(\"\");\n", "  try {\n    const model = new OpenAI({ temperature: 0, maxTokens: 2000 });\n    const chain = loadLunaticCssChain({ llm: model });\n    const result = await chain.call({\n      chat_history: chatHistory.join(\"\\n\"),\n      //current_css: currentCss,\n    });\n    console.log(result.text);\n    return NextResponse.json({\n      css: result.text,\n    });", "  } catch (error) {\n    console.error(error);\n    return NextResponse.json({\n      css: undefined,\n    });\n  }\n}\n"]}
{"filename": "src/app/api/lunatic/surface/route.ts", "chunked_list": ["import { NextResponse } from \"next/server\";\nimport { OpenAI } from \"langchain/llms/openai\";\nimport { BufferMemory, ChatMessageHistory } from \"langchain/memory\";\nimport { AIChatMessage, HumanChatMessage } from \"langchain/schema\";\nimport { loadLunaticSurfaceChain } from \"@/utils/langchain/chains/lunatic\";\n\nexport async function POST(request: Request) {\n  //const { searchParams } = new URL(request.url);\n  //const query = searchParams.get(\"query\");\n  //const pastMessagesJsonString = searchParams.get(\"pastMessages\");\n\n  const res = await request.json();\n  const query = res.query;\n  const pastMessagesJsonString = res.pastMessagesJsonString;\n\n  let chatHistory = undefined;", "  if (pastMessagesJsonString && pastMessagesJsonString !== \"undefined\") {\n    const pastMessages: {\n      messages: Array<{ type: string; data: { content: string } }>;\n    } = JSON.parse(pastMessagesJsonString);\n\n    const chatHistoryMessages = pastMessages.messages.map(\n      (message, idx: number) => {\n        if (message.data.content) {\n          if (idx === 0 || idx % 2 === 0) {\n            return new HumanChatMessage(message.data.content);\n          } else {\n            return new AIChatMessage(message.data.content);\n          }\n        } else {\n          return new HumanChatMessage(\"\");\n        }\n      }\n    );\n    chatHistory = new ChatMessageHistory(chatHistoryMessages);\n  }\n  const memory = new BufferMemory({\n    chatHistory,\n  });\n\n  const model = new OpenAI({ temperature: 0, maxTokens: 2000 });\n  const surfaceChain = loadLunaticSurfaceChain({ llm: model, memory });\n  const surfaceResult = await surfaceChain.call({ input: query });\n\n  console.log(\"----- ----- -----\");\n  console.log(\"----- surface -----\");\n  console.log(\"----- ----- -----\");\n  console.log(\"Human:\", query);\n  console.log(\"AI:\", surfaceResult.response);\n  console.log(\"\");\n\n  return NextResponse.json({\n    query: query,\n    surface: surfaceResult.response,\n    history: memory.chatHistory,\n  });\n}\n", "          if (idx === 0 || idx % 2 === 0) {\n            return new HumanChatMessage(message.data.content);\n          } else {\n            return new AIChatMessage(message.data.content);\n          }\n        } else {\n          return new HumanChatMessage(\"\");\n        }\n      }\n    );\n    chatHistory = new ChatMessageHistory(chatHistoryMessages);\n  }\n  const memory = new BufferMemory({\n    chatHistory,\n  });\n\n  const model = new OpenAI({ temperature: 0, maxTokens: 2000 });\n  const surfaceChain = loadLunaticSurfaceChain({ llm: model, memory });\n  const surfaceResult = await surfaceChain.call({ input: query });\n\n  console.log(\"----- ----- -----\");\n  console.log(\"----- surface -----\");\n  console.log(\"----- ----- -----\");\n  console.log(\"Human:\", query);\n  console.log(\"AI:\", surfaceResult.response);\n  console.log(\"\");\n\n  return NextResponse.json({\n    query: query,\n    surface: surfaceResult.response,\n    history: memory.chatHistory,\n  });\n}\n"]}
