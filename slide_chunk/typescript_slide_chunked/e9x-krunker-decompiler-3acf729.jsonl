{"filename": "src/consts.ts", "chunked_list": ["import { fileURLToPath } from \"node:url\";\n\nexport const deobfuscated = fileURLToPath(\n  new URL(\"../deobfuscated.js\", import.meta.url)\n);\nexport const unpackedDir = fileURLToPath(\n  new URL(\"../unpacked/\", import.meta.url)\n);\nexport const processedDir = fileURLToPath(\n  new URL(\"../processed/\", import.meta.url)", "export const processedDir = fileURLToPath(\n  new URL(\"../processed/\", import.meta.url)\n);\nexport const renamedDir = fileURLToPath(\n  new URL(\"../renamed/\", import.meta.url)\n);\n"]}
{"filename": "src/libDecompile.ts", "chunked_list": ["import { isIdentifierName } from \"@babel/helper-validator-identifier\";\nimport escodegen from \"@javascript-obfuscator/escodegen\";\nimport {\n  namedTypes as n,\n  builders as b,\n  visit,\n  astNodesAreEquivalent,\n} from \"ast-types\";\n\n// Expressions when the binary expression is doing the opposite", "\n// Expressions when the binary expression is doing the opposite\nconst oppositeExpressions = {\n  \"==\": \"!=\",\n  \"!=\": \"==\",\n  \"===\": \"!==\",\n  \"!==\": \"===\",\n  \"<\": \">=\",\n  \">\": \"<=\",\n  \"<=\": \">\",", "  \">\": \"<=\",\n  \"<=\": \">\",\n  \">=\": \"<\",\n};\n\n// Expressions when the binary expression is reversed\nconst flippedExpressions = {\n  \"==\": \"!=\",\n  \"!=\": \"==\",\n  \"===\": \"!==\",", "  \"!=\": \"==\",\n  \"===\": \"!==\",\n  \"!==\": \"===\",\n  \"<\": \">\",\n  \">\": \"<\",\n  \"<=\": \">=\",\n  \">=\": \"<=\",\n};\n\nexport default function decompile(program: n.Program) {\n  // return unminify.unminifySource(code, { safety: unminify.safetyLevels.SAFE });\n\n  /*\n    RULE:\n\n    replace(...body) will require doing\n\n    this.visit(path.parentPath);\n    this.traverse(path.parentPath);\n\n    to catch everything\n\n    otherwise replace(e)\n\n    this.visit(path);\n    this.traverse(path);\n\n  */\n\n  visit(program, {\n    // String.fromCharCode(1, 2, 3, 4).toLowerCase()\n    visitCallExpression(path) {", "\nexport default function decompile(program: n.Program) {\n  // return unminify.unminifySource(code, { safety: unminify.safetyLevels.SAFE });\n\n  /*\n    RULE:\n\n    replace(...body) will require doing\n\n    this.visit(path.parentPath);\n    this.traverse(path.parentPath);\n\n    to catch everything\n\n    otherwise replace(e)\n\n    this.visit(path);\n    this.traverse(path);\n\n  */\n\n  visit(program, {\n    // String.fromCharCode(1, 2, 3, 4).toLowerCase()\n    visitCallExpression(path) {", "      if (\n        n.MemberExpression.check(path.node.callee) &&\n        n.CallExpression.check(path.node.callee.object) &&\n        astNodesAreEquivalent(\n          path.node.callee.object.callee,\n          b.memberExpression(\n            b.identifier(\"String\"),\n            b.identifier(\"fromCharCode\")\n          )\n        ) &&\n        path.node.callee.object.arguments.every(\n          (arg) => n.Literal.check(arg) && typeof arg.value === \"number\"\n        ) &&\n        astNodesAreEquivalent(\n          b.identifier(\"toLowerCase\"),\n          path.node.callee.property\n        )\n      ) {\n        path.replace(\n          b.literal(\n            String.fromCharCode(\n              ...path.node.callee.object.arguments.map(\n                (arg) => (arg as n.Literal).value as number\n              )\n            ).toLowerCase()\n          )\n        );\n\n        return false;\n      } else this.traverse(path);\n    },\n    visitVariableDeclaration(path) {", "      if (\n        path.node.declarations.length !== 1 &&\n        !n.ForStatement.check(path.parent?.value)\n      ) {\n        path.replace(\n          ...path.node.declarations.map((declaration) =>\n            b.variableDeclaration(path.node.kind, [declaration])\n          )\n        );\n\n        this.visit(path.parentPath);\n        this.traverse(path.parentPath);\n        return;\n      }\n\n      this.traverse(path);\n    },\n    visitReturnStatement(path) {", "      if (n.SequenceExpression.check(path.node.argument)) {\n        const [realReturn] = path.node.argument.expressions.slice(-1);\n        const exps = path.node.argument.expressions.slice(0, -1);\n\n        const body = [\n          ...exps.map((e) => b.expressionStatement(e)),\n          b.returnStatement(realReturn),\n        ];\n\n        if (path.parent.node?.type === \"IfStatement\")\n          path.replace(b.blockStatement(body));", "        if (path.parent.node?.type === \"IfStatement\")\n          path.replace(b.blockStatement(body));\n        else if (\n          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n            path.parent.node?.type\n          )\n        ) {\n          path.replace(...body);\n          this.visit(path.parentPath);\n          this.traverse(path.parentPath);\n          return;\n        } else throw new Error(`Unsupported parent ${path.parent.node?.type}`);\n      }\n\n      this.traverse(path);\n    },\n    visitEmptyStatement(path) {", "      if (\n        (!n.ForStatement.check(path.parent?.value) || path.name !== \"body\") &&\n        !n.IfStatement.check(path.parent?.value) &&\n        !n.SwitchStatement.check(path.parent?.value) &&\n        !n.WhileStatement.check(path.parent?.value)\n      ) {\n        path.replace();\n      }\n      return false;\n    },\n    visitExpressionStatement(path) {", "      // condition (?) expression as an expression is usually a substitude for if(){}else{}\n      if (n.ConditionalExpression.check(path.node.expression)) {\n        path.replace(\n          b.ifStatement(\n            path.node.expression.test,\n            b.expressionStatement(path.node.expression.consequent),\n            b.expressionStatement(path.node.expression.alternate)\n          )\n        );\n\n        this.visit(path);\n        this.traverse(path);\n\n        return false;\n      }\n", "      if (n.SequenceExpression.check(path.node.expression)) {\n        const body = path.node.expression.expressions.map((e) =>\n          b.expressionStatement(e)\n        );\n\n        // global or in block\n        if (\n          !path.parent?.node.type ||\n          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n            path.parent.node.type\n          )\n        ) {\n          path.replace(...body);\n          this.visit(path.parentPath);\n          this.traverse(path.parentPath);\n          return;\n        } else path.replace(b.blockStatement(body));\n\n        return this.traverse(path);\n      }\n", "      if (n.LogicalExpression.check(path.node.expression)) {\n        if (path.node.expression.operator === \"&&\") {\n          // it's safe to assume the right operator is probably a sequence/one thing\n          path.replace(\n            b.ifStatement(\n              path.node.expression.left,\n              b.expressionStatement(path.node.expression.right)\n            )\n          );\n\n          this.visit(path);\n          this.traverse(path);\n\n          return false;\n        }\n", "        if (\n          path.node.expression.operator === \"||\" &&\n          n.BinaryExpression.check(path.node.expression.left) &&\n          path.node.expression.left.operator in oppositeExpressions\n        ) {\n          // so far: || has been used exclusively with binary expressions to check the opposite, if it's null then do nothing\n          // other||wise, execute expression.right\n          path.replace(\n            b.ifStatement(\n              b.binaryExpression(\n                oppositeExpressions[\n                  path.node.expression.left\n                    .operator as keyof typeof oppositeExpressions\n                ] as Parameters<typeof b.binaryExpression>[0],\n                path.node.expression.left.left,\n                path.node.expression.left.right\n              ),\n              b.expressionStatement(path.node.expression.right)\n            )\n          );\n\n          this.visit(path);\n          this.traverse(path);\n\n          return false;\n        }\n      }\n", "      if (\n        n.LogicalExpression.check(path.node.expression) &&\n        path.node.expression.operator === \"||\"\n      ) {\n        // it's safe to assume the right operator is probably a sequence/one thing\n        path.replace(\n          b.ifStatement(\n            b.unaryExpression(\"!\", path.node.expression.left),\n            b.expressionStatement(path.node.expression.right)\n          )\n        );\n\n        this.visit(path);\n        this.traverse(path);\n\n        return false;\n      }\n\n      this.traverse(path);\n    },\n    visitUnaryExpression(path) {", "      if (path.node.operator === \"!\")\n        if (\n          n.Literal.check(path.node.argument) &&\n          typeof path.node.argument.value === \"number\"\n        )\n          return path.replace(b.literal(!path.node.argument.value)), false;\n        else if (n.ArrayExpression.check(path.node.argument))\n          return path.replace(b.literal(false)), false;\n        else if (\n          n.UnaryExpression.check(path.node.argument) &&\n          n.ArrayExpression.check(path.node.argument.argument)\n        )\n          return path.replace(b.literal(true)), false;\n\n      this.traverse(path);\n    },\n    visitBinaryExpression(path) {\n      // traverse and simplify the operators before doing anything\n      // this.traverse(path);\n\n      // right side should always be simple\n      // simple: typeof a === \"string\"\n      // not simple: 12 === a\n      // not simple: -1 !== test\n\n      const isSimple = (node: n.Node) =>\n        n.Literal.check(node) ||\n        (n.UnaryExpression.check(node) && n.Literal.check(node.argument));\n", "        else if (\n          n.UnaryExpression.check(path.node.argument) &&\n          n.ArrayExpression.check(path.node.argument.argument)\n        )\n          return path.replace(b.literal(true)), false;\n\n      this.traverse(path);\n    },\n    visitBinaryExpression(path) {\n      // traverse and simplify the operators before doing anything\n      // this.traverse(path);\n\n      // right side should always be simple\n      // simple: typeof a === \"string\"\n      // not simple: 12 === a\n      // not simple: -1 !== test\n\n      const isSimple = (node: n.Node) =>\n        n.Literal.check(node) ||\n        (n.UnaryExpression.check(node) && n.Literal.check(node.argument));\n", "      if (\n        path.node.operator in flippedExpressions &&\n        isSimple(path.node.left) &&\n        !isSimple(path.node.right)\n      ) {\n        // flip\n        path.replace(\n          b.binaryExpression(\n            flippedExpressions[\n              path.node.operator as keyof typeof flippedExpressions\n            ] as Parameters<typeof b.binaryExpression>[0],\n            path.node.right,\n            path.node.left\n          )\n        );\n      }\n\n      this.traverse(path);\n    },\n    visitForStatement(path) {\n      // console.log(\"got a for statement\", escodegen.generate(path.node));\n", "      if (\n        n.VariableDeclaration.check(path.node.init) &&\n        path.node.init.declarations.length !== 1 &&\n        path.node.init.kind === \"var\" && // this is a var-only optimization\n        path.parent?.node.type !== \"LabeledStatement\" // too much work/imopssible\n      ) {\n        // move all the ones before the final declaration outside of the statement\n        const [realDeclaration] = path.node.init.declarations.slice(-1);\n        const declarations = path.node.init.declarations.slice(0, -1);\n\n        const { kind } = path.node.init;\n\n        const body = [\n          ...declarations.map((declaration) =>\n            b.variableDeclaration(kind, [declaration])\n          ),\n          b.forStatement(\n            b.variableDeclaration(kind, [realDeclaration]),\n            path.node.test,\n            path.node.update,\n            path.node.body\n          ),\n        ];\n", "        if (\n          !path.parent?.node.type ||\n          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n            path.parent.node.type\n          )\n        ) {\n          // global or in block\n          path.replace(...body);\n          this.visit(path.parentPath);\n          this.traverse(path.parentPath);\n          return;\n        } else path.replace(b.blockStatement(body));\n      }\n\n      this.traverse(path);\n    },\n    visitIfStatement(path) {", "      // if((optimized, false))...\n      if (n.SequenceExpression.check(path.node.test)) {\n        const [realTest] = path.node.test.expressions.slice(-1);\n\n        const body = [\n          ...path.node.test.expressions\n            .slice(0, -1)\n            .map((e) => b.expressionStatement(e)),\n          b.ifStatement(realTest, path.node.consequent, path.node.alternate),\n        ];\n", "        if (\n          !path.parent?.node.type ||\n          [\"Program\", \"BlockStatement\", \"SwitchCase\"].includes(\n            path.parent.node.type\n          )\n        ) {\n          // global or in block\n          path.replace(...body);\n          this.visit(path.parentPath);\n          this.traverse(path.parentPath);\n          return;\n        } else path.replace(b.blockStatement(body));\n      }\n", "      if (n.VariableDeclaration.check(path.node.consequent))\n        path.replace(\n          b.ifStatement(\n            path.node.test,\n            n.VariableDeclaration.check(path.node.consequent)\n              ? b.blockStatement([path.node.consequent])\n              : path.node.consequent,\n            path.node.alternate\n          )\n        );\n", "      if (n.VariableDeclaration.check(path.node.alternate))\n        path.replace(\n          b.ifStatement(\n            path.node.test,\n            path.node.consequent,\n            n.VariableDeclaration.check(path.node.alternate)\n              ? b.blockStatement([path.node.alternate])\n              : path.node.alternate\n          )\n        );\n\n      this.traverse(path);\n    },\n    visitMemberExpression(path) {", "      if (\n        path.node.computed &&\n        n.Literal.check(path.node.property) &&\n        typeof path.node.property.value === \"string\" &&\n        isIdentifierName(path.node.property.value)\n      )\n        path.replace(\n          b.memberExpression(\n            path.node.object,\n            b.identifier(path.node.property.value),\n            false\n          )\n        );\n\n      this.traverse(path);\n    },\n    visitProperty(path) {", "      if (\n        n.Literal.check(path.node.key) &&\n        typeof path.node.key.value === \"string\" &&\n        isIdentifierName(path.node.key.value)\n      )\n        path.replace(\n          b.property(\n            path.node.kind,\n            b.identifier(path.node.key.value),\n            path.node.value\n          )\n        );\n\n      this.traverse(path);\n    },\n    visitMethodDefinition(path) {", "      if (\n        n.Literal.check(path.node.key) &&\n        typeof path.node.key.value === \"string\" &&\n        isIdentifierName(path.node.key.value)\n      )\n        path.replace(\n          b.methodDefinition(\n            path.node.kind,\n            b.identifier(path.node.key.value),\n            path.node.value,\n            path.node.static\n          )\n        );\n\n      this.traverse(path);\n    },\n  });\n\n  return escodegen.generate(program);\n}\n"]}
{"filename": "src/libRenameVars.ts", "chunked_list": ["import { generateRandomWords } from \"./generateRandomWords.js\";\nimport escodegen from \"@javascript-obfuscator/escodegen\";\nimport { namedTypes as n, builders as b, visit } from \"ast-types\";\nimport { astNodesAreEquivalent } from \"ast-types\";\nimport { camelCase } from \"camel-case\";\nimport type { Scope as ESLintScope } from \"eslint\";\nimport type { Scope, Variable } from \"eslint-scope\";\nimport { analyze } from \"eslint-scope\";\nimport MersenneTwister from \"mersenne-twister\";\nimport { pascalCase } from \"pascal-case\";", "import MersenneTwister from \"mersenne-twister\";\nimport { pascalCase } from \"pascal-case\";\n\nconst iiiiiii = /(?:i|[^\\sa-z0-9]){4,}$|_0x[a-zA-Z0-9]{6}/i;\n\nfunction getVarPrefix(type: ESLintScope.DefinitionType[\"type\"]) {\n  switch (type) {\n    case \"FunctionName\":\n      return \"func\";\n    case \"Parameter\":\n      return \"arg\";\n    case \"ClassName\":\n      return \"Class\";\n    case \"ImportBinding\":\n      return \"imported\";\n    default:\n      return \"var\";\n  }\n}\n\nconst reservedWords = [\n  \"arguments\",\n  \"await\",\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"class\",\n  \"const\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"delete\",\n  \"do\",\n  \"else\",\n  \"enum\",\n  \"export\",\n  \"extends\",\n  \"false\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"get\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"instanceof\",\n  \"new\",\n  \"null\",\n  \"return\",\n  \"set\",\n  \"super\",\n  \"switch\",\n  \"this\",\n  \"throw\",\n  \"true\",\n  \"try\",\n  \"typeof\",\n  \"var\",\n  \"void\",\n  \"while\",\n  \"with\",\n  \"yield\",\n];\n\nconst getName = (name: string, testName: (name: string) => boolean) => {", "  if (reservedWords.includes(name)) name = `_${name}`;\n\n  for (let i = 0; i < 1e6; i++) {\n    const newName = name + (i === 0 ? \"\" : i);\n\n    i++;\n\n    if (!testName(newName)) continue;\n\n    return newName;\n  }\n\n  throw new Error(\"FAIL\");\n};\n", "interface StaticScopeData {\n  assignmentExpressions: n.AssignmentExpression[];\n  defineProperties: {\n    /**\n     * Object.defineProperty(exports, **\"name\"**, { get: function() { return getIdentifier; } })\n     */\n    name: string;\n    /**\n     * Object.defineProperty(exports, \"name\", { get: function() { return **getIdentifier;** } })\n     */\n    getIdentifier: n.Identifier;\n  }[];\n}\n", "function fetchStaticScopeData(scope: Scope) {\n  const data: StaticScopeData = {\n    assignmentExpressions: [],\n    defineProperties: [],\n  };\n\n  visit(scope.block, {\n    visitIfStatement(path) {\n      if (\n        n.UnaryExpression.check(path.node.test) &&\n        n.CallExpression.check(path.node.test.argument) &&\n        astNodesAreEquivalent(\n          path.node.test.argument.callee,\n          b.memberExpression(\n            b.memberExpression(\n              b.memberExpression(\n                b.identifier(\"Object\"),\n                b.identifier(\"prototype\")\n              ),\n              b.identifier(\"hasOwnProperty\")\n            ),\n            b.identifier(\"call\")\n          )\n        ) &&\n        astNodesAreEquivalent(\n          path.node.test.argument.arguments[0],\n          b.identifier(\"exports\")\n        ) &&\n        n.Literal.check(path.node.test.argument.arguments[1]) &&\n        n.ExpressionStatement.check(path.node.consequent) &&\n        n.CallExpression.check(path.node.consequent.expression) &&\n        astNodesAreEquivalent(\n          path.node.consequent.expression.callee,\n          b.memberExpression(\n            b.identifier(\"Object\"),\n            b.identifier(\"defineProperty\")\n          )\n        ) &&\n        astNodesAreEquivalent(\n          path.node.consequent.expression.arguments[0],\n          b.identifier(\"exports\")\n        ) &&\n        n.Literal.check(path.node.consequent.expression.arguments[1]) &&\n        n.ObjectExpression.check(\n          path.node.consequent.expression.arguments[2]\n        ) &&\n        n.Property.check(\n          path.node.consequent.expression.arguments[2].properties[0]\n        ) &&\n        n.FunctionExpression.check(\n          path.node.consequent.expression.arguments[2].properties[0].value\n        ) &&\n        n.ReturnStatement.check(\n          path.node.consequent.expression.arguments[2].properties[0].value.body\n            .body[0]\n        ) &&\n        n.Identifier.check(\n          path.node.consequent.expression.arguments[2].properties[0].value.body\n            .body[0].argument\n        )\n      )\n        data.defineProperties.push({\n          name:\n            path.node.consequent.expression.arguments[1].value?.toString() ||\n            \"\",\n          getIdentifier:\n            path.node.consequent.expression.arguments[2].properties[0].value\n              .body.body[0].argument,\n        });\n\n      this.traverse(path);\n    },\n    visitAssignmentExpression(path) {\n      data.assignmentExpressions.push(path.node);\n\n      this.traverse(path);\n    },\n  });\n\n  return data;\n}\n", "      if (\n        n.UnaryExpression.check(path.node.test) &&\n        n.CallExpression.check(path.node.test.argument) &&\n        astNodesAreEquivalent(\n          path.node.test.argument.callee,\n          b.memberExpression(\n            b.memberExpression(\n              b.memberExpression(\n                b.identifier(\"Object\"),\n                b.identifier(\"prototype\")\n              ),\n              b.identifier(\"hasOwnProperty\")\n            ),\n            b.identifier(\"call\")\n          )\n        ) &&\n        astNodesAreEquivalent(\n          path.node.test.argument.arguments[0],\n          b.identifier(\"exports\")\n        ) &&\n        n.Literal.check(path.node.test.argument.arguments[1]) &&\n        n.ExpressionStatement.check(path.node.consequent) &&\n        n.CallExpression.check(path.node.consequent.expression) &&\n        astNodesAreEquivalent(\n          path.node.consequent.expression.callee,\n          b.memberExpression(\n            b.identifier(\"Object\"),\n            b.identifier(\"defineProperty\")\n          )\n        ) &&\n        astNodesAreEquivalent(\n          path.node.consequent.expression.arguments[0],\n          b.identifier(\"exports\")\n        ) &&\n        n.Literal.check(path.node.consequent.expression.arguments[1]) &&\n        n.ObjectExpression.check(\n          path.node.consequent.expression.arguments[2]\n        ) &&\n        n.Property.check(\n          path.node.consequent.expression.arguments[2].properties[0]\n        ) &&\n        n.FunctionExpression.check(\n          path.node.consequent.expression.arguments[2].properties[0].value\n        ) &&\n        n.ReturnStatement.check(\n          path.node.consequent.expression.arguments[2].properties[0].value.body\n            .body[0]\n        ) &&\n        n.Identifier.check(\n          path.node.consequent.expression.arguments[2].properties[0].value.body\n            .body[0].argument\n        )\n      )\n        data.defineProperties.push({\n          name:\n            path.node.consequent.expression.arguments[1].value?.toString() ||\n            \"\",\n          getIdentifier:\n            path.node.consequent.expression.arguments[2].properties[0].value\n              .body.body[0].argument,\n        });\n\n      this.traverse(path);\n    },\n    visitAssignmentExpression(path) {\n      data.assignmentExpressions.push(path.node);\n\n      this.traverse(path);\n    },\n  });\n\n  return data;\n}\n", "function generateName(\n  mt: MersenneTwister,\n  scope: Scope,\n  v: ESLintScope.Variable,\n  sd: StaticScopeData\n) {\n  const def0 = v.defs[0];\n  const vars: Variable[] = [];\n\n  let s: Scope | null = scope;\n  while (s) {\n    vars.push(...s.variables);\n    s = s.upper;\n  }\n\n  let isClass = false;\n", "  while (s) {\n    vars.push(...s.variables);\n    s = s.upper;\n  }\n\n  let isClass = false;\n\n  if (def0.type === \"FunctionName\" && def0.node.body.body.length === 0)\n    return getName(\"noOp\", (n) => !vars.some((s) => s.name === n));\n\n  let isFuncVar = false;\n", "  if (def0.type === \"Variable\" && n.FunctionExpression.check(def0.node.init)) {\n    isFuncVar = true;\n\n    visit(def0.node.init.body, {\n      visitThisExpression() {\n        isClass = true;\n        this.abort();\n      },\n    });\n  }\n", "  if (def0.type === \"FunctionName\")\n    visit(def0.node.body, {\n      visitThisExpression() {\n        isClass = true;\n        this.abort();\n      },\n    });\n\n  for (const node of sd.defineProperties) {\n    if (astNodesAreEquivalent(node.getIdentifier, b.identifier(v.name))) {\n      // TODO: check if v.identifiers contains this identifier, otherwise the node may be a completely different variable\n\n      return getName(\n        (isClass ? pascalCase : camelCase)(\"e_\" + node.name),\n        (n) => !vars.some((s) => s.name === n)\n      );\n    }\n  }\n", "  for (const node of sd.defineProperties) {\n    if (astNodesAreEquivalent(node.getIdentifier, b.identifier(v.name))) {\n      // TODO: check if v.identifiers contains this identifier, otherwise the node may be a completely different variable\n\n      return getName(\n        (isClass ? pascalCase : camelCase)(\"e_\" + node.name),\n        (n) => !vars.some((s) => s.name === n)\n      );\n    }\n  }\n", "  for (const node of sd.assignmentExpressions) {\n    if (\n      n.MemberExpression.check(node.left) &&\n      n.Identifier.check(node.left.property) &&\n      !node.left.computed &&\n      astNodesAreEquivalent(node.right, b.identifier(v.name))\n      /*&&\n      v.references.some(\n        (i) =>\n          ((node.left as n.MemberExpression).property as n.Identifier) ===\n          i.identifier\n      )\n      */\n    ) {\n      // TODO: check if v.identifiers contains this identifier, otherwise the node may be a completely different variable\n      return getName(\n        (isClass ? pascalCase : camelCase)(\"m_\" + node.left.property.name),\n        (n) => !vars.some((s) => s.name === n)\n      );", "    } else if (\n      astNodesAreEquivalent(node.left, b.identifier(v.name)) &&\n      n.ThisExpression.check(node.right)\n    )\n      return getName(\"this\", (n) => !vars.some((s) => s.name === n));\n  }\n\n  const varPrefix = isClass\n    ? \"Class\"\n    : isFuncVar\n    ? \"func\"\n    : getVarPrefix(def0.type);\n", "  if (\n    def0.type === \"Variable\" &&\n    n.CallExpression.check(def0.node.init) &&\n    astNodesAreEquivalent(def0.node.init.callee, b.identifier(\"require\")) &&\n    n.Literal.check(def0.node.init.arguments[0]) &&\n    typeof def0.node.init.arguments[0].value === \"string\"\n  )\n    return getName(\n      camelCase(\"require\" + def0.node.init.arguments[0].value),\n      (n) => !vars.some((s) => s.name === n)\n    );", "  else if (\n    def0.type === \"Variable\" &&\n    n.MemberExpression.check(def0.node.init) &&\n    n.Identifier.check(def0.node.init.property)\n  )\n    return getName(\n      \"p_\" + def0.node.init.property.name,\n      (n) => !vars.some((s) => s.name === n)\n    );\n  else if (def0.type === \"Variable\" && n.Identifier.check(def0.node.init))\n    return getName(\n      \"v_\" + def0.node.init.name,\n      (n) => !vars.some((s) => s.name === n)\n    );", "  else if (def0.type === \"Variable\" && n.Identifier.check(def0.node.init))\n    return getName(\n      \"v_\" + def0.node.init.name,\n      (n) => !vars.some((s) => s.name === n)\n    );\n  else if (def0.type === \"Variable\" && n.NewExpression.check(def0.node.init))\n    return getName(\n      camelCase(escodegen.generate(def0.node.init.callee)),\n      (n) => !vars.some((s) => s.name === n)\n    );\n  else if (def0.type === \"Variable\" && n.ThisExpression.check(def0.node.init))", "  else if (def0.type === \"Variable\" && n.ThisExpression.check(def0.node.init))\n    for (let i = 0; ; i++) {\n      const newName = \"_this\" + (i === 0 ? \"\" : i);\n\n      i++;\n\n      if (vars.some((s) => s.name === newName)) continue;\n\n      return newName;\n    }\n", "  while (true) {\n    const newName = varPrefix + generateRandomWords(mt, 2).join(\"\");\n    if (vars.some((s) => s.name === newName)) continue;\n    return newName;\n  }\n}\n\nexport default function renameVars(program: n.Program, hash: number) {\n  const mt = new MersenneTwister(hash);\n\n  const scopeManger = analyze(program, {\n    ecmaVersion: 6,\n    sourceType: \"module\",\n  });\n\n  // first def, new name\n  const renamedNodes = new WeakMap<object, string>();\n  const renamedNames = new Map<string, string>();\n", "  for (const scope of scopeManger.scopes) {\n    // takes an awful long time before JIT\n    // but < 10 ms after\n    const sd = fetchStaticScopeData(scope);\n\n    for (const v of scope.variables) {\n      if (!iiiiiii.test(v.name)) continue;\n\n      const firstDef = v.defs[0];\n\n      const newName =\n        renamedNodes.get(firstDef.node) || generateName(mt, scope, v, sd);\n\n      renamedNames.set(v.name, newName);\n", "      if (firstDef.type === \"ClassName\")\n        renamedNodes.set(firstDef.node, newName);\n\n      // used by generateName\n      v.name = newName;\n\n      for (const def of v.defs) def.name.name = newName;\n\n      for (const ref of v.references) ref.identifier.name = newName;\n    }\n\n    // took the hack from the deobfuscator", "      for (const ref of v.references) ref.identifier.name = newName;\n    }\n\n    // took the hack from the deobfuscator\n    for (const ref of scope.references) {\n      const got = renamedNames.get(ref.identifier.name);\n      if (got) ref.identifier.name = got;\n    }\n  }\n\n  const labels: string[] = [];\n\n  // fix labels\n  // eslint-scope doesn't have labels\n  visit(program, {\n    visitLabeledStatement(path) {", "      while (true) {\n        const newName = generateRandomWords(mt, 2).join(\"\");\n        if (labels.includes(newName)) continue;\n        labels.push(newName);\n\n        visit(path.node, {\n          visitContinueStatement(subPath) {\n            if (subPath.node.label?.name === path.node.label.name)\n              subPath.replace(b.continueStatement(b.identifier(newName)));\n            return false;\n          },\n          visitBreakStatement(subPath) {", "            if (subPath.node.label?.name === path.node.label.name)\n              subPath.replace(b.breakStatement(b.identifier(newName)));\n            return false;\n          },\n        });\n\n        path.replace(b.labeledStatement(b.identifier(newName), path.node.body));\n        this.traverse(path);\n        return;\n      }\n    },\n  });\n}\n"]}
{"filename": "src/generateRandomWords.ts", "chunked_list": ["import type MersenneTwister from \"mersenne-twister\";\n\nconst wordList = [\n  \"ability\",\n  \"able\",\n  \"aboard\",\n  \"about\",\n  \"above\",\n  \"accept\",\n  \"accident\",\n  \"according\",\n  \"account\",\n  \"accurate\",\n  \"acres\",\n  \"across\",\n  \"act\",\n  \"action\",\n  \"active\",\n  \"activity\",\n  \"actual\",\n  \"actually\",\n  \"add\",\n  \"addition\",\n  \"additional\",\n  \"adjective\",\n  \"adult\",\n  \"adventure\",\n  \"advice\",\n  \"affect\",\n  \"afraid\",\n  \"after\",\n  \"afternoon\",\n  \"again\",\n  \"against\",\n  \"age\",\n  \"ago\",\n  \"agree\",\n  \"ahead\",\n  \"aid\",\n  \"air\",\n  \"airplane\",\n  \"alike\",\n  \"alive\",\n  \"all\",\n  \"allow\",\n  \"almost\",\n  \"alone\",\n  \"along\",\n  \"aloud\",\n  \"alphabet\",\n  \"already\",\n  \"also\",\n  \"although\",\n  \"am\",\n  \"among\",\n  \"amount\",\n  \"ancient\",\n  \"angle\",\n  \"angry\",\n  \"animal\",\n  \"announced\",\n  \"another\",\n  \"answer\",\n  \"ants\",\n  \"any\",\n  \"anybody\",\n  \"anyone\",\n  \"anything\",\n  \"anyway\",\n  \"anywhere\",\n  \"apart\",\n  \"apartment\",\n  \"appearance\",\n  \"apple\",\n  \"applied\",\n  \"appropriate\",\n  \"are\",\n  \"area\",\n  \"arm\",\n  \"army\",\n  \"around\",\n  \"arrange\",\n  \"arrangement\",\n  \"arrive\",\n  \"arrow\",\n  \"art\",\n  \"article\",\n  \"as\",\n  \"aside\",\n  \"ask\",\n  \"asleep\",\n  \"at\",\n  \"ate\",\n  \"atmosphere\",\n  \"atom\",\n  \"atomic\",\n  \"attached\",\n  \"attack\",\n  \"attempt\",\n  \"attention\",\n  \"audience\",\n  \"author\",\n  \"automobile\",\n  \"available\",\n  \"average\",\n  \"avoid\",\n  \"aware\",\n  \"away\",\n  \"baby\",\n  \"back\",\n  \"bad\",\n  \"badly\",\n  \"bag\",\n  \"balance\",\n  \"ball\",\n  \"balloon\",\n  \"band\",\n  \"bank\",\n  \"bar\",\n  \"bare\",\n  \"bark\",\n  \"barn\",\n  \"base\",\n  \"baseball\",\n  \"basic\",\n  \"basis\",\n  \"basket\",\n  \"bat\",\n  \"battle\",\n  \"be\",\n  \"bean\",\n  \"bear\",\n  \"beat\",\n  \"beautiful\",\n  \"beauty\",\n  \"became\",\n  \"because\",\n  \"become\",\n  \"becoming\",\n  \"bee\",\n  \"been\",\n  \"before\",\n  \"began\",\n  \"beginning\",\n  \"begun\",\n  \"behavior\",\n  \"behind\",\n  \"being\",\n  \"believed\",\n  \"bell\",\n  \"belong\",\n  \"below\",\n  \"belt\",\n  \"bend\",\n  \"beneath\",\n  \"bent\",\n  \"beside\",\n  \"best\",\n  \"bet\",\n  \"better\",\n  \"between\",\n  \"beyond\",\n  \"bicycle\",\n  \"bigger\",\n  \"biggest\",\n  \"bill\",\n  \"birds\",\n  \"birth\",\n  \"birthday\",\n  \"bit\",\n  \"bite\",\n  \"black\",\n  \"blank\",\n  \"blanket\",\n  \"blew\",\n  \"blind\",\n  \"block\",\n  \"blood\",\n  \"blow\",\n  \"blue\",\n  \"board\",\n  \"boat\",\n  \"body\",\n  \"bone\",\n  \"book\",\n  \"border\",\n  \"born\",\n  \"both\",\n  \"bottle\",\n  \"bottom\",\n  \"bound\",\n  \"bow\",\n  \"bowl\",\n  \"box\",\n  \"boy\",\n  \"brain\",\n  \"branch\",\n  \"brass\",\n  \"brave\",\n  \"bread\",\n  \"break\",\n  \"breakfast\",\n  \"breath\",\n  \"breathe\",\n  \"breathing\",\n  \"breeze\",\n  \"brick\",\n  \"bridge\",\n  \"brief\",\n  \"bright\",\n  \"bring\",\n  \"broad\",\n  \"broke\",\n  \"broken\",\n  \"brother\",\n  \"brought\",\n  \"brown\",\n  \"brush\",\n  \"buffalo\",\n  \"build\",\n  \"building\",\n  \"built\",\n  \"buried\",\n  \"burn\",\n  \"burst\",\n  \"bus\",\n  \"bush\",\n  \"business\",\n  \"busy\",\n  \"but\",\n  \"butter\",\n  \"buy\",\n  \"by\",\n  \"cabin\",\n  \"cage\",\n  \"cake\",\n  \"call\",\n  \"calm\",\n  \"came\",\n  \"camera\",\n  \"camp\",\n  \"can\",\n  \"canal\",\n  \"cannot\",\n  \"cap\",\n  \"capital\",\n  \"captain\",\n  \"captured\",\n  \"car\",\n  \"carbon\",\n  \"card\",\n  \"care\",\n  \"careful\",\n  \"carefully\",\n  \"carried\",\n  \"carry\",\n  \"case\",\n  \"cast\",\n  \"castle\",\n  \"cat\",\n  \"catch\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"cave\",\n  \"cell\",\n  \"cent\",\n  \"center\",\n  \"central\",\n  \"century\",\n  \"certain\",\n  \"certainly\",\n  \"chain\",\n  \"chair\",\n  \"chamber\",\n  \"chance\",\n  \"change\",\n  \"changing\",\n  \"chapter\",\n  \"character\",\n  \"characteristic\",\n  \"charge\",\n  \"chart\",\n  \"check\",\n  \"cheese\",\n  \"chemical\",\n  \"chest\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"children\",\n  \"choice\",\n  \"choose\",\n  \"chose\",\n  \"chosen\",\n  \"church\",\n  \"circle\",\n  \"circus\",\n  \"citizen\",\n  \"city\",\n  \"class\",\n  \"classroom\",\n  \"claws\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"clearly\",\n  \"climate\",\n  \"climb\",\n  \"clock\",\n  \"close\",\n  \"closely\",\n  \"closer\",\n  \"cloth\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"club\",\n  \"coach\",\n  \"coal\",\n  \"coast\",\n  \"coat\",\n  \"coffee\",\n  \"cold\",\n  \"collect\",\n  \"college\",\n  \"colony\",\n  \"color\",\n  \"column\",\n  \"combination\",\n  \"combine\",\n  \"come\",\n  \"comfortable\",\n  \"coming\",\n  \"command\",\n  \"common\",\n  \"community\",\n  \"company\",\n  \"compare\",\n  \"compass\",\n  \"complete\",\n  \"completely\",\n  \"complex\",\n  \"composed\",\n  \"composition\",\n  \"compound\",\n  \"concerned\",\n  \"condition\",\n  \"congress\",\n  \"connected\",\n  \"consider\",\n  \"consist\",\n  \"consonant\",\n  \"constantly\",\n  \"construction\",\n  \"contain\",\n  \"continent\",\n  \"continued\",\n  \"contrast\",\n  \"control\",\n  \"conversation\",\n  \"cook\",\n  \"cookies\",\n  \"cool\",\n  \"copper\",\n  \"copy\",\n  \"corn\",\n  \"corner\",\n  \"correct\",\n  \"correctly\",\n  \"cost\",\n  \"cotton\",\n  \"could\",\n  \"count\",\n  \"country\",\n  \"couple\",\n  \"courage\",\n  \"course\",\n  \"court\",\n  \"cover\",\n  \"cow\",\n  \"cowboy\",\n  \"crack\",\n  \"cream\",\n  \"create\",\n  \"creature\",\n  \"crew\",\n  \"crop\",\n  \"cross\",\n  \"crowd\",\n  \"cry\",\n  \"cup\",\n  \"curious\",\n  \"current\",\n  \"curve\",\n  \"customs\",\n  \"cut\",\n  \"cutting\",\n  \"daily\",\n  \"damage\",\n  \"dance\",\n  \"danger\",\n  \"dangerous\",\n  \"dark\",\n  \"darkness\",\n  \"date\",\n  \"daughter\",\n  \"dawn\",\n  \"day\",\n  \"dead\",\n  \"deal\",\n  \"dear\",\n  \"death\",\n  \"decide\",\n  \"declared\",\n  \"deep\",\n  \"deeply\",\n  \"deer\",\n  \"definition\",\n  \"degree\",\n  \"depend\",\n  \"depth\",\n  \"describe\",\n  \"desert\",\n  \"design\",\n  \"desk\",\n  \"detail\",\n  \"determine\",\n  \"develop\",\n  \"development\",\n  \"diagram\",\n  \"diameter\",\n  \"did\",\n  \"die\",\n  \"differ\",\n  \"difference\",\n  \"different\",\n  \"difficult\",\n  \"difficulty\",\n  \"dig\",\n  \"dinner\",\n  \"direct\",\n  \"direction\",\n  \"directly\",\n  \"dirt\",\n  \"dirty\",\n  \"disappear\",\n  \"discover\",\n  \"discovery\",\n  \"discuss\",\n  \"discussion\",\n  \"disease\",\n  \"dish\",\n  \"distance\",\n  \"distant\",\n  \"divide\",\n  \"division\",\n  \"do\",\n  \"doctor\",\n  \"does\",\n  \"dog\",\n  \"doing\",\n  \"doll\",\n  \"dollar\",\n  \"done\",\n  \"donkey\",\n  \"door\",\n  \"dot\",\n  \"double\",\n  \"doubt\",\n  \"down\",\n  \"dozen\",\n  \"draw\",\n  \"drawn\",\n  \"dream\",\n  \"dress\",\n  \"drew\",\n  \"dried\",\n  \"drink\",\n  \"drive\",\n  \"driven\",\n  \"driver\",\n  \"driving\",\n  \"drop\",\n  \"dropped\",\n  \"drove\",\n  \"dry\",\n  \"duck\",\n  \"due\",\n  \"dug\",\n  \"dull\",\n  \"during\",\n  \"dust\",\n  \"duty\",\n  \"each\",\n  \"eager\",\n  \"ear\",\n  \"earlier\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"easier\",\n  \"easily\",\n  \"east\",\n  \"easy\",\n  \"eat\",\n  \"eaten\",\n  \"edge\",\n  \"education\",\n  \"effect\",\n  \"effort\",\n  \"egg\",\n  \"eight\",\n  \"either\",\n  \"electric\",\n  \"electricity\",\n  \"element\",\n  \"elephant\",\n  \"eleven\",\n  \"else\",\n  \"empty\",\n  \"end\",\n  \"enemy\",\n  \"energy\",\n  \"engine\",\n  \"engineer\",\n  \"enjoy\",\n  \"enough\",\n  \"enter\",\n  \"entire\",\n  \"entirely\",\n  \"environment\",\n  \"equal\",\n  \"equally\",\n  \"equator\",\n  \"equipment\",\n  \"escape\",\n  \"especially\",\n  \"essential\",\n  \"establish\",\n  \"even\",\n  \"evening\",\n  \"event\",\n  \"eventually\",\n  \"ever\",\n  \"every\",\n  \"everybody\",\n  \"everyone\",\n  \"everything\",\n  \"everywhere\",\n  \"evidence\",\n  \"exact\",\n  \"exactly\",\n  \"examine\",\n  \"example\",\n  \"excellent\",\n  \"except\",\n  \"exchange\",\n  \"excited\",\n  \"excitement\",\n  \"exciting\",\n  \"exclaimed\",\n  \"exercise\",\n  \"exist\",\n  \"expect\",\n  \"experience\",\n  \"experiment\",\n  \"explain\",\n  \"explanation\",\n  \"explore\",\n  \"express\",\n  \"expression\",\n  \"extra\",\n  \"eye\",\n  \"face\",\n  \"facing\",\n  \"fact\",\n  \"factor\",\n  \"factory\",\n  \"failed\",\n  \"fair\",\n  \"fairly\",\n  \"fall\",\n  \"fallen\",\n  \"familiar\",\n  \"family\",\n  \"famous\",\n  \"far\",\n  \"farm\",\n  \"farmer\",\n  \"farther\",\n  \"fast\",\n  \"fastened\",\n  \"faster\",\n  \"fat\",\n  \"father\",\n  \"favorite\",\n  \"fear\",\n  \"feathers\",\n  \"feature\",\n  \"fed\",\n  \"feed\",\n  \"feel\",\n  \"feet\",\n  \"fell\",\n  \"fellow\",\n  \"felt\",\n  \"fence\",\n  \"few\",\n  \"fewer\",\n  \"field\",\n  \"fierce\",\n  \"fifteen\",\n  \"fifth\",\n  \"fifty\",\n  \"fight\",\n  \"fighting\",\n  \"figure\",\n  \"fill\",\n  \"film\",\n  \"final\",\n  \"finally\",\n  \"find\",\n  \"fine\",\n  \"finest\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"fireplace\",\n  \"firm\",\n  \"first\",\n  \"fish\",\n  \"five\",\n  \"fix\",\n  \"flag\",\n  \"flame\",\n  \"flat\",\n  \"flew\",\n  \"flies\",\n  \"flight\",\n  \"floating\",\n  \"floor\",\n  \"flow\",\n  \"flower\",\n  \"fly\",\n  \"fog\",\n  \"folks\",\n  \"follow\",\n  \"food\",\n  \"foot\",\n  \"football\",\n  \"for\",\n  \"force\",\n  \"foreign\",\n  \"forest\",\n  \"forget\",\n  \"forgot\",\n  \"forgotten\",\n  \"form\",\n  \"former\",\n  \"fort\",\n  \"forth\",\n  \"forty\",\n  \"forward\",\n  \"fought\",\n  \"found\",\n  \"four\",\n  \"fourth\",\n  \"fox\",\n  \"frame\",\n  \"free\",\n  \"freedom\",\n  \"frequently\",\n  \"fresh\",\n  \"friend\",\n  \"friendly\",\n  \"frighten\",\n  \"frog\",\n  \"from\",\n  \"front\",\n  \"frozen\",\n  \"fruit\",\n  \"fuel\",\n  \"full\",\n  \"fully\",\n  \"fun\",\n  \"function\",\n  \"funny\",\n  \"fur\",\n  \"furniture\",\n  \"further\",\n  \"future\",\n  \"gain\",\n  \"game\",\n  \"garage\",\n  \"garden\",\n  \"gas\",\n  \"gasoline\",\n  \"gate\",\n  \"gather\",\n  \"gave\",\n  \"general\",\n  \"generally\",\n  \"gentle\",\n  \"gently\",\n  \"get\",\n  \"getting\",\n  \"giant\",\n  \"gift\",\n  \"girl\",\n  \"give\",\n  \"given\",\n  \"giving\",\n  \"glad\",\n  \"glass\",\n  \"globe\",\n  \"go\",\n  \"goes\",\n  \"gold\",\n  \"golden\",\n  \"gone\",\n  \"good\",\n  \"goose\",\n  \"got\",\n  \"government\",\n  \"grabbed\",\n  \"grade\",\n  \"gradually\",\n  \"grain\",\n  \"grandfather\",\n  \"grandmother\",\n  \"graph\",\n  \"grass\",\n  \"gravity\",\n  \"gray\",\n  \"great\",\n  \"greater\",\n  \"greatest\",\n  \"greatly\",\n  \"green\",\n  \"grew\",\n  \"ground\",\n  \"group\",\n  \"grow\",\n  \"grown\",\n  \"growth\",\n  \"guard\",\n  \"guess\",\n  \"guide\",\n  \"gulf\",\n  \"gun\",\n  \"habit\",\n  \"had\",\n  \"hair\",\n  \"half\",\n  \"halfway\",\n  \"hall\",\n  \"hand\",\n  \"handle\",\n  \"handsome\",\n  \"hang\",\n  \"happen\",\n  \"happened\",\n  \"happily\",\n  \"happy\",\n  \"harbor\",\n  \"hard\",\n  \"harder\",\n  \"hardly\",\n  \"has\",\n  \"hat\",\n  \"have\",\n  \"having\",\n  \"hay\",\n  \"he\",\n  \"headed\",\n  \"heading\",\n  \"health\",\n  \"heard\",\n  \"hearing\",\n  \"heart\",\n  \"heat\",\n  \"heavy\",\n  \"height\",\n  \"held\",\n  \"hello\",\n  \"help\",\n  \"helpful\",\n  \"her\",\n  \"herd\",\n  \"here\",\n  \"herself\",\n  \"hidden\",\n  \"hide\",\n  \"high\",\n  \"higher\",\n  \"highest\",\n  \"highway\",\n  \"hill\",\n  \"him\",\n  \"himself\",\n  \"his\",\n  \"history\",\n  \"hit\",\n  \"hold\",\n  \"hole\",\n  \"hollow\",\n  \"home\",\n  \"honor\",\n  \"hope\",\n  \"horn\",\n  \"horse\",\n  \"hospital\",\n  \"hot\",\n  \"hour\",\n  \"house\",\n  \"how\",\n  \"however\",\n  \"huge\",\n  \"human\",\n  \"hundred\",\n  \"hung\",\n  \"hungry\",\n  \"hunt\",\n  \"hunter\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"ice\",\n  \"idea\",\n  \"identity\",\n  \"if\",\n  \"ill\",\n  \"image\",\n  \"imagine\",\n  \"immediately\",\n  \"importance\",\n  \"important\",\n  \"impossible\",\n  \"improve\",\n  \"in\",\n  \"inch\",\n  \"include\",\n  \"including\",\n  \"income\",\n  \"increase\",\n  \"indeed\",\n  \"independent\",\n  \"indicate\",\n  \"individual\",\n  \"industrial\",\n  \"industry\",\n  \"influence\",\n  \"information\",\n  \"inside\",\n  \"instance\",\n  \"instant\",\n  \"instead\",\n  \"instrument\",\n  \"interest\",\n  \"interior\",\n  \"into\",\n  \"introduced\",\n  \"invented\",\n  \"involved\",\n  \"iron\",\n  \"is\",\n  \"island\",\n  \"it\",\n  \"its\",\n  \"itself\",\n  \"jack\",\n  \"jar\",\n  \"jet\",\n  \"job\",\n  \"join\",\n  \"joined\",\n  \"journey\",\n  \"joy\",\n  \"judge\",\n  \"jump\",\n  \"jungle\",\n  \"just\",\n  \"keep\",\n  \"kept\",\n  \"key\",\n  \"kids\",\n  \"kill\",\n  \"kind\",\n  \"kitchen\",\n  \"knew\",\n  \"knife\",\n  \"know\",\n  \"knowledge\",\n  \"known\",\n  \"label\",\n  \"labor\",\n  \"lack\",\n  \"lady\",\n  \"laid\",\n  \"lake\",\n  \"lamp\",\n  \"land\",\n  \"language\",\n  \"large\",\n  \"larger\",\n  \"largest\",\n  \"last\",\n  \"late\",\n  \"later\",\n  \"laugh\",\n  \"law\",\n  \"lay\",\n  \"layers\",\n  \"lead\",\n  \"leader\",\n  \"leaf\",\n  \"learn\",\n  \"least\",\n  \"leather\",\n  \"leave\",\n  \"leaving\",\n  \"led\",\n  \"left\",\n  \"leg\",\n  \"length\",\n  \"lesson\",\n  \"let\",\n  \"letter\",\n  \"level\",\n  \"library\",\n  \"lie\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"like\",\n  \"likely\",\n  \"limited\",\n  \"line\",\n  \"lion\",\n  \"lips\",\n  \"liquid\",\n  \"list\",\n  \"listen\",\n  \"little\",\n  \"live\",\n  \"living\",\n  \"load\",\n  \"local\",\n  \"locate\",\n  \"location\",\n  \"log\",\n  \"lonely\",\n  \"long\",\n  \"longer\",\n  \"look\",\n  \"loose\",\n  \"lose\",\n  \"loss\",\n  \"lost\",\n  \"lot\",\n  \"loud\",\n  \"love\",\n  \"lovely\",\n  \"low\",\n  \"lower\",\n  \"luck\",\n  \"lucky\",\n  \"lunch\",\n  \"lungs\",\n  \"lying\",\n  \"machine\",\n  \"machinery\",\n  \"mad\",\n  \"made\",\n  \"magic\",\n  \"magnet\",\n  \"mail\",\n  \"main\",\n  \"mainly\",\n  \"major\",\n  \"make\",\n  \"making\",\n  \"man\",\n  \"managed\",\n  \"manner\",\n  \"manufacturing\",\n  \"many\",\n  \"map\",\n  \"mark\",\n  \"market\",\n  \"married\",\n  \"mass\",\n  \"massage\",\n  \"master\",\n  \"material\",\n  \"mathematics\",\n  \"matter\",\n  \"may\",\n  \"maybe\",\n  \"me\",\n  \"meal\",\n  \"mean\",\n  \"means\",\n  \"meant\",\n  \"measure\",\n  \"meat\",\n  \"medicine\",\n  \"meet\",\n  \"melted\",\n  \"member\",\n  \"memory\",\n  \"men\",\n  \"mental\",\n  \"merely\",\n  \"met\",\n  \"metal\",\n  \"method\",\n  \"mice\",\n  \"middle\",\n  \"might\",\n  \"mighty\",\n  \"mile\",\n  \"military\",\n  \"milk\",\n  \"mill\",\n  \"mind\",\n  \"mine\",\n  \"minerals\",\n  \"minute\",\n  \"mirror\",\n  \"missing\",\n  \"mission\",\n  \"mistake\",\n  \"mix\",\n  \"mixture\",\n  \"model\",\n  \"modern\",\n  \"molecular\",\n  \"moment\",\n  \"money\",\n  \"monkey\",\n  \"month\",\n  \"mood\",\n  \"moon\",\n  \"more\",\n  \"morning\",\n  \"most\",\n  \"mostly\",\n  \"mother\",\n  \"motion\",\n  \"motor\",\n  \"mountain\",\n  \"mouse\",\n  \"mouth\",\n  \"move\",\n  \"movement\",\n  \"movie\",\n  \"moving\",\n  \"mud\",\n  \"muscle\",\n  \"music\",\n  \"musical\",\n  \"must\",\n  \"my\",\n  \"myself\",\n  \"mysterious\",\n  \"nails\",\n  \"name\",\n  \"nation\",\n  \"national\",\n  \"native\",\n  \"natural\",\n  \"naturally\",\n  \"nature\",\n  \"near\",\n  \"nearby\",\n  \"nearer\",\n  \"nearest\",\n  \"nearly\",\n  \"necessary\",\n  \"neck\",\n  \"needed\",\n  \"needle\",\n  \"needs\",\n  \"negative\",\n  \"neighbor\",\n  \"neighborhood\",\n  \"nervous\",\n  \"nest\",\n  \"never\",\n  \"new\",\n  \"news\",\n  \"newspaper\",\n  \"next\",\n  \"nice\",\n  \"night\",\n  \"nine\",\n  \"no\",\n  \"nobody\",\n  \"nodded\",\n  \"noise\",\n  \"none\",\n  \"noon\",\n  \"nor\",\n  \"north\",\n  \"nose\",\n  \"not\",\n  \"note\",\n  \"noted\",\n  \"nothing\",\n  \"notice\",\n  \"noun\",\n  \"now\",\n  \"number\",\n  \"numeral\",\n  \"nuts\",\n  \"object\",\n  \"observe\",\n  \"obtain\",\n  \"occasionally\",\n  \"occur\",\n  \"ocean\",\n  \"of\",\n  \"off\",\n  \"offer\",\n  \"office\",\n  \"officer\",\n  \"official\",\n  \"oil\",\n  \"old\",\n  \"older\",\n  \"oldest\",\n  \"on\",\n  \"once\",\n  \"one\",\n  \"only\",\n  \"onto\",\n  \"open\",\n  \"operation\",\n  \"opinion\",\n  \"opportunity\",\n  \"opposite\",\n  \"or\",\n  \"orange\",\n  \"orbit\",\n  \"order\",\n  \"ordinary\",\n  \"organization\",\n  \"organized\",\n  \"origin\",\n  \"original\",\n  \"other\",\n  \"ought\",\n  \"our\",\n  \"ourselves\",\n  \"out\",\n  \"outer\",\n  \"outline\",\n  \"outside\",\n  \"over\",\n  \"own\",\n  \"owner\",\n  \"oxygen\",\n  \"pack\",\n  \"package\",\n  \"page\",\n  \"paid\",\n  \"pain\",\n  \"paint\",\n  \"pair\",\n  \"palace\",\n  \"pale\",\n  \"pan\",\n  \"paper\",\n  \"paragraph\",\n  \"parallel\",\n  \"parent\",\n  \"park\",\n  \"part\",\n  \"particles\",\n  \"particular\",\n  \"particularly\",\n  \"partly\",\n  \"parts\",\n  \"party\",\n  \"pass\",\n  \"passage\",\n  \"past\",\n  \"path\",\n  \"pattern\",\n  \"pay\",\n  \"peace\",\n  \"pen\",\n  \"pencil\",\n  \"people\",\n  \"per\",\n  \"percent\",\n  \"perfect\",\n  \"perfectly\",\n  \"perhaps\",\n  \"period\",\n  \"person\",\n  \"personal\",\n  \"pet\",\n  \"phrase\",\n  \"physical\",\n  \"piano\",\n  \"pick\",\n  \"picture\",\n  \"pictured\",\n  \"pie\",\n  \"piece\",\n  \"pig\",\n  \"pile\",\n  \"pilot\",\n  \"pine\",\n  \"pink\",\n  \"pipe\",\n  \"pitch\",\n  \"place\",\n  \"plain\",\n  \"plan\",\n  \"plane\",\n  \"planet\",\n  \"planned\",\n  \"planning\",\n  \"plant\",\n  \"plastic\",\n  \"plate\",\n  \"plates\",\n  \"play\",\n  \"pleasant\",\n  \"please\",\n  \"pleasure\",\n  \"plenty\",\n  \"plural\",\n  \"plus\",\n  \"pocket\",\n  \"poem\",\n  \"poet\",\n  \"poetry\",\n  \"point\",\n  \"pole\",\n  \"police\",\n  \"policeman\",\n  \"political\",\n  \"pond\",\n  \"pony\",\n  \"pool\",\n  \"poor\",\n  \"popular\",\n  \"population\",\n  \"porch\",\n  \"port\",\n  \"position\",\n  \"positive\",\n  \"possible\",\n  \"possibly\",\n  \"post\",\n  \"pot\",\n  \"potatoes\",\n  \"pound\",\n  \"pour\",\n  \"powder\",\n  \"power\",\n  \"powerful\",\n  \"practical\",\n  \"practice\",\n  \"prepare\",\n  \"present\",\n  \"president\",\n  \"press\",\n  \"pressure\",\n  \"pretty\",\n  \"prevent\",\n  \"previous\",\n  \"price\",\n  \"pride\",\n  \"primitive\",\n  \"principal\",\n  \"principle\",\n  \"printed\",\n  \"private\",\n  \"prize\",\n  \"probably\",\n  \"problem\",\n  \"process\",\n  \"produce\",\n  \"product\",\n  \"production\",\n  \"program\",\n  \"progress\",\n  \"promised\",\n  \"proper\",\n  \"properly\",\n  \"property\",\n  \"protection\",\n  \"proud\",\n  \"prove\",\n  \"provide\",\n  \"public\",\n  \"pull\",\n  \"pupil\",\n  \"pure\",\n  \"purple\",\n  \"purpose\",\n  \"push\",\n  \"put\",\n  \"putting\",\n  \"quarter\",\n  \"queen\",\n  \"question\",\n  \"quick\",\n  \"quickly\",\n  \"quiet\",\n  \"quietly\",\n  \"quite\",\n  \"rabbit\",\n  \"race\",\n  \"radio\",\n  \"railroad\",\n  \"rain\",\n  \"raise\",\n  \"ran\",\n  \"ranch\",\n  \"range\",\n  \"rapidly\",\n  \"rate\",\n  \"rather\",\n  \"raw\",\n  \"rays\",\n  \"reach\",\n  \"read\",\n  \"reader\",\n  \"ready\",\n  \"real\",\n  \"realize\",\n  \"rear\",\n  \"reason\",\n  \"recall\",\n  \"receive\",\n  \"recent\",\n  \"recently\",\n  \"recognize\",\n  \"record\",\n  \"red\",\n  \"refer\",\n  \"refused\",\n  \"region\",\n  \"regular\",\n  \"related\",\n  \"relationship\",\n  \"religious\",\n  \"remain\",\n  \"remarkable\",\n  \"remember\",\n  \"remove\",\n  \"repeat\",\n  \"replace\",\n  \"replied\",\n  \"report\",\n  \"represent\",\n  \"require\",\n  \"research\",\n  \"respect\",\n  \"rest\",\n  \"result\",\n  \"return\",\n  \"review\",\n  \"rhyme\",\n  \"rhythm\",\n  \"rice\",\n  \"rich\",\n  \"ride\",\n  \"riding\",\n  \"right\",\n  \"ring\",\n  \"rise\",\n  \"rising\",\n  \"river\",\n  \"road\",\n  \"roar\",\n  \"rock\",\n  \"rocket\",\n  \"rocky\",\n  \"rod\",\n  \"roll\",\n  \"roof\",\n  \"room\",\n  \"root\",\n  \"rope\",\n  \"rose\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"row\",\n  \"rubbed\",\n  \"rubber\",\n  \"rule\",\n  \"ruler\",\n  \"run\",\n  \"running\",\n  \"rush\",\n  \"sad\",\n  \"saddle\",\n  \"safe\",\n  \"safety\",\n  \"said\",\n  \"sail\",\n  \"sale\",\n  \"salmon\",\n  \"salt\",\n  \"same\",\n  \"sand\",\n  \"sang\",\n  \"sat\",\n  \"satellites\",\n  \"satisfied\",\n  \"save\",\n  \"saved\",\n  \"saw\",\n  \"say\",\n  \"scale\",\n  \"scared\",\n  \"scene\",\n  \"school\",\n  \"science\",\n  \"scientific\",\n  \"scientist\",\n  \"score\",\n  \"screen\",\n  \"sea\",\n  \"search\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"section\",\n  \"see\",\n  \"seed\",\n  \"seeing\",\n  \"seems\",\n  \"seen\",\n  \"seldom\",\n  \"select\",\n  \"selection\",\n  \"sell\",\n  \"send\",\n  \"sense\",\n  \"sent\",\n  \"sentence\",\n  \"separate\",\n  \"series\",\n  \"serious\",\n  \"serve\",\n  \"service\",\n  \"sets\",\n  \"setting\",\n  \"settle\",\n  \"settlers\",\n  \"seven\",\n  \"several\",\n  \"shade\",\n  \"shadow\",\n  \"shake\",\n  \"shaking\",\n  \"shall\",\n  \"shallow\",\n  \"shape\",\n  \"share\",\n  \"sharp\",\n  \"she\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shells\",\n  \"shelter\",\n  \"shine\",\n  \"shinning\",\n  \"ship\",\n  \"shirt\",\n  \"shoe\",\n  \"shoot\",\n  \"shop\",\n  \"shore\",\n  \"short\",\n  \"shorter\",\n  \"shot\",\n  \"should\",\n  \"shoulder\",\n  \"shout\",\n  \"show\",\n  \"shown\",\n  \"shut\",\n  \"sick\",\n  \"sides\",\n  \"sight\",\n  \"sign\",\n  \"signal\",\n  \"silence\",\n  \"silent\",\n  \"silk\",\n  \"silly\",\n  \"silver\",\n  \"similar\",\n  \"simple\",\n  \"simplest\",\n  \"simply\",\n  \"since\",\n  \"sing\",\n  \"single\",\n  \"sink\",\n  \"sister\",\n  \"sit\",\n  \"sitting\",\n  \"situation\",\n  \"six\",\n  \"size\",\n  \"skill\",\n  \"skin\",\n  \"sky\",\n  \"slabs\",\n  \"slave\",\n  \"sleep\",\n  \"slept\",\n  \"slide\",\n  \"slight\",\n  \"slightly\",\n  \"slip\",\n  \"slipped\",\n  \"slope\",\n  \"slow\",\n  \"slowly\",\n  \"small\",\n  \"smaller\",\n  \"smallest\",\n  \"smell\",\n  \"smile\",\n  \"smoke\",\n  \"smooth\",\n  \"snake\",\n  \"snow\",\n  \"so\",\n  \"soap\",\n  \"social\",\n  \"society\",\n  \"soft\",\n  \"softly\",\n  \"soil\",\n  \"solar\",\n  \"sold\",\n  \"soldier\",\n  \"solid\",\n  \"solution\",\n  \"solve\",\n  \"some\",\n  \"somebody\",\n  \"somehow\",\n  \"someone\",\n  \"something\",\n  \"sometime\",\n  \"somewhere\",\n  \"son\",\n  \"song\",\n  \"soon\",\n  \"sort\",\n  \"sound\",\n  \"source\",\n  \"south\",\n  \"southern\",\n  \"space\",\n  \"speak\",\n  \"special\",\n  \"species\",\n  \"specific\",\n  \"speech\",\n  \"speed\",\n  \"spell\",\n  \"spend\",\n  \"spent\",\n  \"spider\",\n  \"spin\",\n  \"spirit\",\n  \"spite\",\n  \"split\",\n  \"spoken\",\n  \"sport\",\n  \"spread\",\n  \"spring\",\n  \"square\",\n  \"stage\",\n  \"stairs\",\n  \"stand\",\n  \"standard\",\n  \"star\",\n  \"stared\",\n  \"start\",\n  \"state\",\n  \"statement\",\n  \"station\",\n  \"stay\",\n  \"steady\",\n  \"steam\",\n  \"steel\",\n  \"steep\",\n  \"stems\",\n  \"step\",\n  \"stepped\",\n  \"stick\",\n  \"stiff\",\n  \"still\",\n  \"stock\",\n  \"stomach\",\n  \"stone\",\n  \"stood\",\n  \"stop\",\n  \"stopped\",\n  \"store\",\n  \"storm\",\n  \"story\",\n  \"stove\",\n  \"straight\",\n  \"strange\",\n  \"stranger\",\n  \"straw\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"stretch\",\n  \"strike\",\n  \"string\",\n  \"strip\",\n  \"strong\",\n  \"stronger\",\n  \"struck\",\n  \"structure\",\n  \"struggle\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studying\",\n  \"subject\",\n  \"substance\",\n  \"success\",\n  \"successful\",\n  \"such\",\n  \"sudden\",\n  \"suddenly\",\n  \"sugar\",\n  \"suggest\",\n  \"suit\",\n  \"sum\",\n  \"summer\",\n  \"sun\",\n  \"sunlight\",\n  \"supper\",\n  \"supply\",\n  \"support\",\n  \"suppose\",\n  \"sure\",\n  \"surface\",\n  \"surprise\",\n  \"surrounded\",\n  \"swam\",\n  \"sweet\",\n  \"swept\",\n  \"swim\",\n  \"swimming\",\n  \"swing\",\n  \"swung\",\n  \"syllable\",\n  \"symbol\",\n  \"system\",\n  \"table\",\n  \"tail\",\n  \"take\",\n  \"taken\",\n  \"tales\",\n  \"talk\",\n  \"tall\",\n  \"tank\",\n  \"tape\",\n  \"task\",\n  \"taste\",\n  \"taught\",\n  \"tax\",\n  \"tea\",\n  \"teach\",\n  \"teacher\",\n  \"team\",\n  \"tears\",\n  \"teeth\",\n  \"telephone\",\n  \"television\",\n  \"tell\",\n  \"temperature\",\n  \"ten\",\n  \"tent\",\n  \"term\",\n  \"terrible\",\n  \"test\",\n  \"than\",\n  \"thank\",\n  \"that\",\n  \"thee\",\n  \"them\",\n  \"themselves\",\n  \"then\",\n  \"theory\",\n  \"there\",\n  \"therefore\",\n  \"these\",\n  \"they\",\n  \"thick\",\n  \"thin\",\n  \"thing\",\n  \"think\",\n  \"third\",\n  \"thirty\",\n  \"this\",\n  \"those\",\n  \"thou\",\n  \"though\",\n  \"thought\",\n  \"thousand\",\n  \"thread\",\n  \"three\",\n  \"threw\",\n  \"throat\",\n  \"through\",\n  \"throughout\",\n  \"throw\",\n  \"thrown\",\n  \"thumb\",\n  \"thus\",\n  \"thy\",\n  \"tide\",\n  \"tie\",\n  \"tight\",\n  \"tightly\",\n  \"till\",\n  \"time\",\n  \"tin\",\n  \"tiny\",\n  \"tip\",\n  \"tired\",\n  \"title\",\n  \"to\",\n  \"tobacco\",\n  \"today\",\n  \"together\",\n  \"told\",\n  \"tomorrow\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"too\",\n  \"took\",\n  \"tool\",\n  \"top\",\n  \"topic\",\n  \"torn\",\n  \"total\",\n  \"touch\",\n  \"toward\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"trace\",\n  \"track\",\n  \"trade\",\n  \"traffic\",\n  \"trail\",\n  \"train\",\n  \"transportation\",\n  \"trap\",\n  \"travel\",\n  \"treated\",\n  \"tree\",\n  \"triangle\",\n  \"tribe\",\n  \"trick\",\n  \"tried\",\n  \"trip\",\n  \"troops\",\n  \"tropical\",\n  \"trouble\",\n  \"truck\",\n  \"trunk\",\n  \"truth\",\n  \"try\",\n  \"tube\",\n  \"tune\",\n  \"turn\",\n  \"twelve\",\n  \"twenty\",\n  \"twice\",\n  \"two\",\n  \"type\",\n  \"typical\",\n  \"uncle\",\n  \"under\",\n  \"underline\",\n  \"understanding\",\n  \"unhappy\",\n  \"union\",\n  \"unit\",\n  \"universe\",\n  \"unknown\",\n  \"unless\",\n  \"until\",\n  \"unusual\",\n  \"up\",\n  \"upon\",\n  \"upper\",\n  \"upward\",\n  \"us\",\n  \"use\",\n  \"useful\",\n  \"using\",\n  \"usual\",\n  \"usually\",\n  \"valley\",\n  \"valuable\",\n  \"value\",\n  \"vapor\",\n  \"variety\",\n  \"various\",\n  \"vast\",\n  \"vegetable\",\n  \"verb\",\n  \"vertical\",\n  \"very\",\n  \"vessels\",\n  \"victory\",\n  \"view\",\n  \"village\",\n  \"visit\",\n  \"visitor\",\n  \"voice\",\n  \"volume\",\n  \"vote\",\n  \"vowel\",\n  \"voyage\",\n  \"wagon\",\n  \"wait\",\n  \"walk\",\n  \"wall\",\n  \"want\",\n  \"war\",\n  \"warm\",\n  \"warn\",\n  \"was\",\n  \"wash\",\n  \"waste\",\n  \"watch\",\n  \"water\",\n  \"wave\",\n  \"way\",\n  \"we\",\n  \"weak\",\n  \"wealth\",\n  \"wear\",\n  \"weather\",\n  \"week\",\n  \"weigh\",\n  \"weight\",\n  \"welcome\",\n  \"well\",\n  \"went\",\n  \"were\",\n  \"west\",\n  \"western\",\n  \"wet\",\n  \"whale\",\n  \"what\",\n  \"whatever\",\n  \"wheat\",\n  \"wheel\",\n  \"when\",\n  \"whenever\",\n  \"where\",\n  \"wherever\",\n  \"whether\",\n  \"which\",\n  \"while\",\n  \"whispered\",\n  \"whistle\",\n  \"white\",\n  \"who\",\n  \"whole\",\n  \"whom\",\n  \"whose\",\n  \"why\",\n  \"wide\",\n  \"widely\",\n  \"wife\",\n  \"wild\",\n  \"will\",\n  \"willing\",\n  \"win\",\n  \"wind\",\n  \"window\",\n  \"wing\",\n  \"winter\",\n  \"wire\",\n  \"wise\",\n  \"wish\",\n  \"with\",\n  \"within\",\n  \"without\",\n  \"wolf\",\n  \"women\",\n  \"won\",\n  \"wonder\",\n  \"wonderful\",\n  \"wood\",\n  \"wooden\",\n  \"wool\",\n  \"word\",\n  \"wore\",\n  \"work\",\n  \"worker\",\n  \"world\",\n  \"worried\",\n  \"worry\",\n  \"worse\",\n  \"worth\",\n  \"would\",\n  \"wrapped\",\n  \"write\",\n  \"writer\",\n  \"writing\",\n  \"written\",\n  \"wrong\",\n  \"wrote\",\n  \"yard\",\n  \"year\",\n  \"yellow\",\n  \"yes\",\n  \"yesterday\",\n  \"yet\",\n  \"you\",\n  \"young\",\n  \"younger\",\n  \"your\",\n  \"yourself\",\n  \"youth\",\n  \"zero\",\n  \"zebra\",\n  \"zipper\",\n  \"zoo\",\n  \"zulu\",\n];\n", "export function generateRandomWords(mt: MersenneTwister, length = 4): string[] {\n  const words: string[] = [];\n  for (let i = 0; i < length + 0; ++i) {\n    const min = i * (wordList.length / length),\n      max = (i + 1) * (wordList.length / length);\n    const rand = (mt.random() * (max - min) + min) | 0,\n      word = [...wordList[rand]];\n    word.unshift(word.shift()!.toUpperCase());\n    words.push(word.join(\"\"));\n  }\n  return words;\n}\n"]}
{"filename": "src/process.ts", "chunked_list": ["import \"source-map-support/register.js\";\nimport { processedDir, unpackedDir } from \"./consts.js\";\nimport { mkdir, readFile } from \"node:fs/promises\";\nimport { join, parse } from \"node:path\";\nimport P from \"piscina\";\nimport prettyMilliseconds from \"pretty-ms\";\nimport { rimraf } from \"rimraf\";\n\nconst bundle = JSON.parse(\n  await readFile(join(unpackedDir, \"bundle.json\"), \"utf-8\")", "const bundle = JSON.parse(\n  await readFile(join(unpackedDir, \"bundle.json\"), \"utf-8\")\n) as {\n  type: \"webpack\" | \"browserify\";\n  entryId: string;\n  modules: {\n    id: string;\n    path: string;\n  }[];\n};", "  }[];\n};\n\nconst pool = new P.Piscina({\n  filename: new URL(\"./processWorker.js\", import.meta.url).toString(),\n  maxQueue: 100000,\n  concurrentTasksPerWorker: 3,\n});\n\nawait rimraf(processedDir);", "\nawait rimraf(processedDir);\nawait mkdir(processedDir);\n\ntype Data = [path: string, promise: Promise<void>, resolved: boolean];\n\nconst promises: Data[] = [];\n\nfor await (const ent of bundle.modules) {\n  const path = join(unpackedDir, ent.path);\n  const data: Data = [path, pool.run(path), false];\n  promises.push(data);\n  data[1].finally(() => (data[2] = true));\n}\n\nconst start = Date.now();\n\nconst interval = setInterval(() => {\n  console.log(\n    `[${prettyMilliseconds(Date.now() - start).padEnd(\n      7,\n      \" \"\n    )}] Waiting for: ${promises\n      .filter((d) => !d[2])\n      .map((d) => parse(d[0]).name)\n      .join(\", \")}`\n  );\n}, 10e3);\n\nawait Promise.all(promises.map(([, promise]) => promise));\n\nclearInterval(interval);\n\nconsole.log(\"Completed\");\n"]}
{"filename": "src/processWorker.ts", "chunked_list": ["import \"source-map-support/register.js\";\nimport { processedDir } from \"./consts.js\";\nimport decompile from \"./libDecompile.js\";\nimport renameVars from \"./libRenameVars.js\";\nimport escodegen from \"@javascript-obfuscator/escodegen\";\nimport { parse as parseScript } from \"acorn\";\nimport type { namedTypes as n } from \"ast-types\";\nimport crc32 from \"crc-32\";\nimport { readFile, writeFile } from \"node:fs/promises\";\nimport { join, parse } from \"node:path\";", "import { readFile, writeFile } from \"node:fs/promises\";\nimport { join, parse } from \"node:path\";\n\nexport function processCode(code: string) {\n  let program = parseScript(code, {\n    ecmaVersion: \"latest\",\n    allowReturnOutsideFunction: true,\n    allowImportExportEverywhere: true,\n  }) as n.Node as n.Program;\n\n  decompile(program);\n\n  code = escodegen.generate(program);\n\n  program = parseScript(code, {\n    ecmaVersion: \"latest\",\n    ranges: true,\n    allowReturnOutsideFunction: true,\n    allowImportExportEverywhere: true,\n  }) as n.Node as n.Program;\n\n  const hash = crc32.str(code);\n\n  renameVars(program, hash);\n\n  return escodegen.generate(program);\n}\n", "export default async function processWorker(file: string) {\n  const name = parse(file).name;\n  const code = await readFile(file, \"utf-8\");\n\n  try {\n    await writeFile(join(processedDir, `${name}.js`), processCode(code));\n  } catch (err) {\n    console.error(\"Failure processing:\", name);\n    throw err;\n  }\n\n  console.log(\"Wrote\", name);\n}\n"]}
{"filename": "src/deobfuscate.ts", "chunked_list": ["import \"source-map-support/register.js\";\nimport { unpackedDir } from \"./consts.js\";\nimport { readFile } from \"node:fs/promises\";\nimport { argv } from \"node:process\";\nimport { rimraf } from \"rimraf\";\nimport { webcrack } from \"webcrack\";\n\nconst [, , script] = argv;\nlet code = await readFile(script, \"utf-8\");\n", "let code = await readFile(script, \"utf-8\");\n\nconst res = await webcrack(code, { unpack: true });\nconsole.log(\"Deobfuscated. Saving unpacked modules.\");\nawait rimraf(unpackedDir);\nawait res.save(unpackedDir);\n// await writeFile(deobfuscated, code);\n"]}
{"filename": "src/processCode.ts", "chunked_list": ["import \"source-map-support/register.js\";\nimport { processCode } from \"./processWorker.js\";\nimport { writeFile, readFile } from \"node:fs/promises\";\nimport { webcrack } from \"webcrack\";\n\nconst programArgv = [...process.argv.slice(2)]; // clone the array to modify it\n\nconst [file, output] = programArgv;\n\nif (!file) {\n  console.log(`${process.argv.slice(0, 2).join(\" \")} [<file>|<code>] [<output>]\n\nArguments:\n    <file>           Path to a file containing the code\n    <code>           The actual code (if not using a file)\n    <output>         Location to output the code (default: stdout)`);\n  process.exit(0);\n}\n\nlet code: string;\n", "\nif (!file) {\n  console.log(`${process.argv.slice(0, 2).join(\" \")} [<file>|<code>] [<output>]\n\nArguments:\n    <file>           Path to a file containing the code\n    <code>           The actual code (if not using a file)\n    <output>         Location to output the code (default: stdout)`);\n  process.exit(0);\n}\n\nlet code: string;\n", "try {\n  // try reading it as a file\n  code = await readFile(file, \"utf-8\");\n} catch {\n  // use it as code\n  code = file;\n}\n\nconst { log } = console;\nconsole.log = () => {\n  // noop\n};\n({ code } = await webcrack(code));\nconsole.log = log;\n\nconst parsed = processCode(code);\n", "if (output) {\n  await writeFile(output, parsed);\n} else {\n  console.log(parsed);\n}\n"]}
{"filename": "src/fetchSocial.ts", "chunked_list": ["import { writeFile } from \"node:fs/promises\";\nimport { argv } from \"node:process\";\n\n// you need im_ after the numbers so they don't mess with the JS or anything\n// example custom URL: https://web.archive.org/web/20210322135140im_/https://krunker.io/social.html\nconst [, , destination, url = \"https://krunker.io/social.html\"] = argv;\n\nif (!destination) throw new TypeError(\"Need output destination\");\n\nconst res = await fetch(url);\n\nconst [, script] =\n  (await res.text()).match(\n    /<script(?: type=\"text\\/javascript\")?>(\\/\\*!\\n \\*[\\s\\S]*?)<\\/script>/\n  ) || [];\n", "if (!script) throw new TypeError(\"No script\");\n\nawait writeFile(destination, script);\n"]}
{"filename": "src/declarations/escodegen.d.ts", "chunked_list": ["declare module \"@javascript-obfuscator/escodegen\" {\n  export * from \"escodegen\";\n}\n"]}
