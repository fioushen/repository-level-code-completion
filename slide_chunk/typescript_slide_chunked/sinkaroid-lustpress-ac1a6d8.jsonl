{"filename": "test/test.ts", "chunked_list": ["import c from \"../src/utils/options\";\nimport p from \"phin\";\n\nfor (const url of \n  [c.PORNHUB, c.XNXX, c.REDTUBE, c.XVIDEOS, c.XHAMSTER, c.YOUPORN]) {\n  p({ url }).then(res => {\n    if (res.statusCode !== 200) {\n      console.log(`${url} is not available, status code: ${res.statusCode}, check the sites or your own user-agent`);\n    }\n    else {\n      console.log(`${url} is available, can be scraped`);\n    }\n  });\n}"]}
{"filename": "test/mock.ts", "chunked_list": ["import p from \"phin\";\nimport { load } from \"cheerio\";\n\nconst url = \"https://www.pornhub.com/view_video.php?viewkey=ph63c4e1dc48fe7\";\n\nasync function test() {\n  const res = await p({\n    url: url,\n    \"headers\": {\n      \"User-Agent\": process.env.USER_AGENT || \"lustpress/1.6.0 Node.js/16.9.1\",\n    },\n  });\n    \n  const $ = load(res.body);\n  const title = $(\"meta[property='og:title']\").attr(\"content\");\n  console.log(title);\n  console.log(res.statusCode);\n}\n", "test().catch(console.error);\n"]}
{"filename": "src/LustPress.ts", "chunked_list": ["import p, { IResponse } from \"phin\";\nimport Keyv from \"keyv\";\nimport pkg from \"../package.json\";\n\n\nconst keyv = new Keyv(process.env.REDIS_URL);\n\nkeyv.on(\"error\", err => console.log(\"Connection Error\", err));\nconst ttl = 1000 * 60 * 60 * Number(process.env.EXPIRE_CACHE);\n", "const ttl = 1000 * 60 * 60 * Number(process.env.EXPIRE_CACHE);\n\n\nclass LustPress {\n  url: string;\n  useragent: string;\n  constructor() {\n    this.url = \"\";\n    this.useragent = `${pkg.name}/${pkg.version} Node.js/16.9.1`;\n  }\n\n  /**\n     * Fetch body from url and check if it's cached\n     * @param url url to fetch\n     * @returns Buffer \n     */\n  async fetchBody(url: string): Promise<Buffer> {\n    const cached = await keyv.get(url);\n", "    if (cached) {\n      console.log(\"Fetching from cache\");\n      return cached;\n    } else if (url.includes(\"/random\")) {\n      console.log(\"Random should not be cached\");\n      const res = await p({ \n        url: url,\n        \"headers\": {\n          \"User-Agent\": process.env.USER_AGENT || `${pkg.name}/${pkg.version} Node.js/16.9.1`,\n        }, \n        followRedirects: true\n      });\n      return res.body;\n    } else {\n      console.log(\"Fetching from source\");\n      url = url.replace(/\\/\\//g, \"/\");\n      const res = await p({ \n        url: url,\n        \"headers\": {\n          \"User-Agent\": process.env.USER_AGENT || `${pkg.name}/${pkg.version} Node.js/16.9.1`,\n        },\n        followRedirects: true\n      });\n      await keyv.set(url, res.body, ttl);\n      return res.body;\n    }\n  }\n\n  /**\n   * remove html tag and bunch of space\n   * @param str string to remove html tag\n   * @returns string\n   */\n  removeHtmlTag(str: string): string {\n    str = str.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n    str = str.replace(/\\s+/g, \"\");\n    return str;\n  }\n\n  /**\n   * remove html tag without space\n   * @param str string to remove html tag\n   * @returns string\n   */\n  removeHtmlTagWithoutSpace(str: string): string {\n    str = str.replace(/(\\r\\n|\\n|\\r|\\t)/gm, \"\");\n    str = str.replace(/\\\\/g, \"\");\n    str = str.replace(/\\s+/g, \" \");\n    return str.trim();\n  }\n\n  /**\n   * remove all single quote on array\n   * @param arr array to remove single quote\n   * @returns string[]\n   */\n  removeAllSingleQuoteOnArray(arr: string[]): string[] {\n    return arr.map((item) => item.replace(/'/g, \"\"));\n  }\n\n  /**\n   * time ago converter\n   * @param input date to convert\n   * @returns string\n   */\n  timeAgo(input: Date) {\n    const date = new Date(input);\n    const formatter: any = new Intl.RelativeTimeFormat(\"en\");\n    const ranges: { [key: string]: number } = {\n      years: 3600 * 24 * 365,\n      months: 3600 * 24 * 30,\n      weeks: 3600 * 24 * 7,\n      days: 3600 * 24,\n      hours: 3600,\n      minutes: 60,\n      seconds: 1\n    };\n    const secondsElapsed = (date.getTime() - Date.now()) / 1000;", "    for (const key in ranges) {\n      if (ranges[key] < Math.abs(secondsElapsed)) {\n        const delta = secondsElapsed / ranges[key];\n        return formatter.format(Math.round(delta), key);\n      }\n    }\n  }\n  \n  /**\n   * convert seconds to minute\n   * @param seconds seconds to convert\n   * @returns string\n   */\n  secondToMinute(seconds: number): string {\n    const minutes = Math.floor(seconds / 60);\n    const second = seconds % 60;\n    return `${minutes}min, ${second}sec`;\n  }\n\n  /**\n   * get current process memory usage\n   * @returns object\n   */\n  currentProccess() {\n    const arr = [1, 2, 3, 4, 5, 6, 9, 7, 8, 9, 10];\n    arr.reverse();\n    const rss = process.memoryUsage().rss / 1024 / 1024;\n    const heap = process.memoryUsage().heapUsed / 1024 / 1024;\n    const heaptotal = process.memoryUsage().heapTotal / 1024 / 1024;\n    return {\n      rss: `${Math.round(rss * 100) / 100} MB`,\n      heap: `${Math.round(heap * 100) / 100}/${Math.round(heaptotal * 100) / 100} MB`\n    };\n  }\n\n  /**\n   * fetch this server location\n   * @returns <Promise<string>>\n   */\n  async getServer(): Promise<string> {\n    const raw = await p({ \n      \"url\": \"http://ip-api.com/json\", \n      \"parse\": \"json\" \n    }) as IResponse;\n    const data = raw.body as unknown as { country: string, regionName: string };\n    return `${data.country}, ${data.regionName}`;\n  }\n}\n\nexport default LustPress;\n"]}
{"filename": "src/index.ts", "chunked_list": ["import \"dotenv/config\";\nimport LustPress from \"./LustPress\";\nimport express from \"express\";\nimport { Request, Response, NextFunction } from \"express\";\nimport scrapeRoutes from \"./router/endpoint\";\nimport { slow, limiter } from \"./utils/limit-options\";\nimport { logger } from \"./utils/logger\";\nimport * as pkg from \"../package.json\";\n\nconst lust = new LustPress();", "\nconst lust = new LustPress();\nconst app = express();\n\n\napp.get(\"/\", slow, limiter, async (req, res) => {\n  res.send({\n    success: true,\n    playground: \"https://sinkaroid.github.io/lustpress\",\n    endpoint: \"https://github.com/sinkaroid/lustpress/blob/master/README.md#routing\",", "    playground: \"https://sinkaroid.github.io/lustpress\",\n    endpoint: \"https://github.com/sinkaroid/lustpress/blob/master/README.md#routing\",\n    date: new Date().toLocaleString(),\n    rss: lust.currentProccess().rss,\n    heap: lust.currentProccess().heap,\n    server: await lust.getServer(),\n    version: `${pkg.version}`,\n  });\n  logger.info({\n    path: req.path,", "  logger.info({\n    path: req.path,\n    method: req.method,\n    ip: req.ip,\n    useragent: req.get(\"User-Agent\")\n  });\n});\n\napp.use(scrapeRoutes());\napp.use((req: Request, res: Response, next: NextFunction) => {", "app.use(scrapeRoutes());\napp.use((req: Request, res: Response, next: NextFunction) => {\n  res.status(404);\n  next(Error(`The page not found in path ${req.url} and method ${req.method}`));\n  logger.error({\n    path: req.url,\n    method: req.method,\n    ip: req.ip,\n    useragent: req.get(\"User-Agent\")\n  });", "    useragent: req.get(\"User-Agent\")\n  });\n});\n\napp.use((error: any, res: Response) => {\n  res.status(500).json({\n    message: error.message,\n    stack: error.stack\n  });\n});", "  });\n});\n\napp.listen(process.env.PORT || 3000, () => console.log(`${pkg.name} is running on port ${process.env.PORT || 3000}`));"]}
{"filename": "src/interfaces.ts", "chunked_list": ["export interface IVideoData {\n    success: boolean;\n    data: {\n        title: string;\n        id: string;\n        image: string;\n        duration: string;\n        views: string;\n        rating: string;\n        uploaded: string;\n        upvoted: string | null;\n        downvoted: string | null;\n        models: string[];\n        tags: string[];\n    };\n    source: string; \n    assets: string[];\n}\n", "export interface ISearchVideoData {\n    success: boolean;\n    data: string[];\n    source: string;\n}\n\nexport interface MaybeError {\n    message: string;\n}\n\n"]}
{"filename": "src/scraper/xvideos/xvideosSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class XvideosSearch {\n      search: object[];\n      constructor() {\n        const data = $(\"div.thumb-under\")\n          .map((i, el) => {\n            return {\n              title: $(el).find(\"a\").attr(\"title\"),\n              duration: $(el).find(\"span.duration\")\n                .map((i, el) => {\n                  return $(el).text();\n                }).get()[0],\n            };\n          }).get();\n        this.search = $(\"div.mozaique.cust-nb-cols\")\n          .find(\"div.thumb\")\n          .map((i, el) => {\n            return {\n              link: `${c.XVIDEOS}${$(el).find(\"a\").attr(\"href\")}` || \"None\",\n              id: $(el).find(\"a\").attr(\"href\") || \"None\",\n              image: $(el).find(\"img\").attr(\"data-src\") || \"None\",\n              title: data[i].title || \"None\",\n              duration: data[i].duration === data[i + 1]?.duration\n                ? \"\"\n                : data[i].duration || \"None\",\n              rating: null,\n              video: `${c.XVIDEOS}/embedframe/${$(el).find(\"img\").attr(\"data-videoid\")}`\n            };\n          }).get();\n\n        this.search = this.search.filter((el: any) => {\n          return !el.id.includes(\"THUMBNUM\");\n        });\n        this.search = this.search.filter((el: any) => {\n          return el.id.includes(\"/video\");\n        });\n      }\n    }\n    \n    const xv = new XvideosSearch();", "    if (xv.search.length === 0) throw Error(\"No result found\");\n    const data = xv.search as unknown as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n\n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xvideos/xvideosGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport { IVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const resolve = await lust.fetchBody(url);\n    const $ = load(resolve);\n", "    class Xvideos { \n      link: string;\n      id: string;\n      title: string;\n      image: string;\n      duration: string;\n      views: string;\n      rating: string;\n      publish: string;\n      upVote: string;\n      downVote: string;\n      video: string;\n      tags: string[];\n      models: string[];\n      thumbnail: string;\n      bigimg: string;\n      embed: string;\n      constructor() {\n        this.link = $(\"meta[property='og:url']\").attr(\"content\") || \"None\";\n        this.id = this.link.split(\"/\")[3] + \"/\" + this.link.split(\"/\")[4] || \"None\";\n        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n        this.duration = $(\"meta[property='og:duration']\").attr(\"content\") || \"0\";\n        this.views = $(\"div#v-views\").find(\"strong.mobile-hide\").text() || \"None\";\n        this.rating = $(\"span.rating-total-txt\").text() || \"None\";\n        this.publish = $(\"script[type='application/ld+json']\").text() || \"None\";\n        this.publish = this.publish\n          .split(\"uploadDate\")[1]\n          .split(\"}\")[0]\n          .split(\":\")[1]\n          .replace(/\"/g, \"\")\n          .replace(/,/g, \"\") || \"None\";\n        this.upVote = $(\"span.rating-good-nbr\").text() || \"None\";\n        this.downVote = $(\"span.rating-bad-nbr\").text() || \"None\";\n        const thumb = $(\"script\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get()\n          .filter((el) => el.includes(\"html5player.setThumbSlideBig\"))[0] || \"None\";\n        this.thumbnail = thumb.match(/html5player.setThumbSlideBig\\((.*?)\\)/)?.[1] || \"None\";\n        this.bigimg = thumb.match(/html5player.setThumbUrl169\\((.*?)\\)/)?.[1] || \"None\";\n        this.video = thumb.match(/html5player.setVideoUrlHigh\\((.*?)\\)/)?.[1] || \"None\";\n        this.tags = $(\"a.is-keyword.btn.btn-default\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.models = $(\"li.model\")\n          .map((i, el) => {\n            return $(el).find(\"a\").attr(\"href\") || \"None\";\n          }\n          ).get();\n        this.models = this.models.map((el) => el.split(\"/\")[2]);\n        this.embed = $(\"input#copy-video-embed\").attr(\"value\") || \"None\";\n        this.embed = this.embed.split(\"iframe\")[1].split(\" \")[1].replace(/src=/g, \"\").replace(/\"/g, \"\") || \"None\";\n      }\n    }\n    \n    const xv = new Xvideos();\n    const data: IVideoData = {\n      success: true,\n      data: {\n        title: lust.removeHtmlTagWithoutSpace(xv.title),\n        id: xv.id,\n        image: xv.image,\n        duration: lust.secondToMinute(Number(xv.duration)),\n        views: lust.removeHtmlTag(xv.views),\n        rating: xv.rating,\n        uploaded: xv.publish,\n        upvoted: xv.upVote,\n        downvoted: xv.downVote,\n        models: xv.models,\n        tags: xv.tags,\n      },\n      source: xv.link,\n      assets: lust.removeAllSingleQuoteOnArray([xv.embed, xv.thumbnail, xv.bigimg, xv.video])\n    };\n    return data;\n    ", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xvideos/xvideosGetRelatedController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class XvideosSearch {\n      search: object[];\n      data: object;\n      constructor() {\n        this.search = $(\"div#video-player-bg\")\n          .map((i, el) => {\n            const script = $(el).find(\"script\").html();\n            const video_related = script?.split(\"var video_related=\")[1];\n            const badJson = video_related?.split(\"];\")[0] + \"]\";\n            const actualResult = JSON.parse(String(badJson));\n            const result = actualResult.map((el: any) => {\n              return {\n                link: `${c.XVIDEOS}${el.u}`,\n                id: el.u.slice(1, -1),\n                title: el.t,\n                image: el.i,\n                duration: el.d,\n                views: `${el.n}, ${el.r}`,\n                video: `${c.XVIDEOS}/embedframe/${el.id}`\n              };\n            });\n            return result;\n          }).get();\n      }\n    }\n    \n    const x = new XvideosSearch();", "    if (x.search.length === 0) throw Error(\"No result found\");\n    const data = x.search as unknown as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n\n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/redtube/redtubeSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class RedTubeSearch {\n      views: string[];\n      search: object[];\n      data: object;\n      constructor() {\n        this.views = $(\"span.video_count\")\n          .map((i, el) => {\n            const views = $(el).text();\n            return views;\n          }).get();\n        this.search = $(\"a.video_link\")\n          .map((i, el) => {\n            const link = $(el).attr(\"href\");\n            const id = link?.split(\"/\")[1];\n            const title = $(el).find(\"img\").attr(\"alt\");\n            const image = $(el).find(\"img\").attr(\"data-src\");\n            const duration = $(el).find(\"span.duration\").text().split(\" \").map((el: string) => {\n              return el.replace(/[^0-9:]/g, \"\");\n            }).filter((el: string) => {\n              return el.includes(\":\");\n            }).join(\" \");\n\n            return {\n              link: `${c.REDTUBE}${link}`,\n              id: id,\n              title: title,\n              image: image,\n              duration: duration,\n              views: this.views[i],\n              video: `https://embed.redtube.com/?id=${id}`,\n                \n            };\n          }).get();\n            \n\n          \n\n        this.data = this.search.filter((el: any) => {\n          return el.link.includes(\"javascript:void(0)\") === false && el.image?.startsWith(\"data:image\") === false;\n        });\n      }\n\n    }\n    \n    const red = new RedTubeSearch();\n", "    if (red.search.length === 0) throw Error(\"No result found\");\n    const data = red.data as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n   \n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/redtube/redtubeGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport { IVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const resolve = await lust.fetchBody(url);\n    const $ = load(resolve);\n", "    class RedTube { \n      link: string;\n      id: string;\n      title: string;\n      image: string;\n      duration: string;\n      views: string;\n      rating: string;\n      publish: string;\n      upVote: string;\n      downVote: null;\n      video: string;\n      tags: string[];\n      models: string[];\n      constructor() {\n        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n        this.id = this.link.split(\"/\")[3] || \"None\";\n        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n        this.duration = $(\"meta[property='og:video:duration']\").attr(\"content\") || \"0\";\n        this.views = $(\"span.video_view_count\").text() || \"None\";\n        this.rating = $(\"div.rating_percent.js_rating_percent\").attr(\"data-percent\") + \"%\" || \"None\";\n        this.publish = $(\"span.video-infobox-date-added\").text().replace(\"Published on \", \"\") || \"None\";\n        this.upVote = this.rating;\n        this.downVote = null;\n        this.video = $(\"meta[name='twitter:player']\").attr(\"content\") || \"None\";\n        this.tags = $(\"a.item.video_carousel_item.video_carousel_category, a.item.video_carousel_item.video_carousel_tag\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.tags = this.tags.map((el) => lust.removeHtmlTagWithoutSpace(el));\n        this.models = $(\"div.pornstar-name.pornstarPopupWrapper\")\n          .find(\"a\")\n          .map((i, el) => {\n            return $(el).text();\n          }\n          ).get();\n        this.models = this.models.map((el) => lust.removeHtmlTagWithoutSpace(el));\n        this.models = this.models.filter((el) => !el.includes(\"Subscribe\") && !el.includes(\"Rank\"))\n          .filter((el, i, arr) => arr.indexOf(el) === i);\n      }\n    }\n    \n    const red = new RedTube();\n    const data: IVideoData = {\n      success: true,\n      data: {\n        title: lust.removeHtmlTagWithoutSpace(red.title),\n        id: red.id,\n        image: red.image,\n        duration: lust.secondToMinute(Number(red.duration)),\n        views: red.views,\n        rating: red.rating,\n        uploaded: red.publish,\n        upvoted: red.upVote,\n        downvoted: red.downVote,\n        models: red.models,\n        tags: red.tags\n      },\n      source: red.link,\n      assets: [red.video, red.image]\n    };\n    return data;", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xnxx/xnxxGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport { IVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const resolve = await lust.fetchBody(url);\n    const $ = load(resolve);\n", "    class Xnxx { \n      link: string;\n      id: string;\n      title: string;\n      image: string;\n      duration: string;\n      views: string;\n      uploaded: string;\n      action: string[];\n      upVote: string;\n      downVote: string;\n      favVote: string;\n      tags: string[];\n      models: string[];\n      thumbnail: string;\n      bigimg: string;\n      video: string;\n      embed: string;\n      constructor() {\n        const thumb = $(\"script\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get()\n          .filter((el) => el.includes(\"html5player.setThumbSlideBig\"))[0] || \"None\";\n\n        this.thumbnail = thumb.match(/html5player.setThumbSlideBig\\((.*?)\\)/)?.[1] || \"None\";\n        this.bigimg = thumb.match(/html5player.setThumbUrl169\\((.*?)\\)/)?.[1] || \"None\";\n        this.video = thumb.match(/html5player.setVideoUrlHigh\\((.*?)\\)/)?.[1] || \"None\";\n        this.link = $(\"meta[property='og:url']\").attr(\"content\") || \"None\";\n        this.id = this.link.split(\".com/\")[1] || \"None\";\n        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n        this.duration = $(\"meta[property='og:duration']\").attr(\"content\") || \"None\";\n        this.views = $(\"span.metadata\").text() || \"None\";\n        this.views = this.views.split(\"-\")[2] || \"None\";\n        this.uploaded = $(\"script[type='application/ld+json']\").text() || \"None\";\n        this.uploaded = this.uploaded\n          .split(\"uploadDate\")[1]\n          .split(\"}\")[0]\n          .split(\":\")[1]\n          .replace(/\"/g, \"\")\n          .replace(/,/g, \"\") || \"None\";\n        this.action = $(\"span.vote-actions\")\n          .find(\"span.value\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n\n        this.upVote = this.action[0] || \"None\";\n        this.downVote = this.action[1] || \"None\";\n        this.favVote = $(\"span.rating-box.value\").text() || \"None\";\n        this.models = $(\"a.is-pornstar\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.tags = $(\"div.metadata-row.video-tags\")\n          .find(\"a\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.embed = $(\"input#copy-video-embed\").attr(\"value\") || \"None\";\n        this.embed = this.embed.split(\"iframe\")[1].split(\" \")[1].replace(/src=/g, \"\").replace(/\"/g, \"\") || \"None\";\n\n      }\n    }\n    \n    const x = new Xnxx();\n\n    const data: IVideoData = {\n      success: true,\n      data: {\n        title: lust.removeHtmlTagWithoutSpace(x.title),\n        id: x.id,\n        image: x.image,\n        duration: lust.secondToMinute(Number(x.duration)),\n        views: lust.removeHtmlTag(x.views),\n        rating: x.favVote,\n        uploaded: x.uploaded.trim(),\n        upvoted: x.upVote,\n        downvoted: x.downVote,\n        models: x.models,\n        tags: x.tags.filter((el) => el !== \"Edit tags and models\")\n      },\n      source: x.link,\n      assets: lust.removeAllSingleQuoteOnArray([x.embed, x.thumbnail, x.bigimg, x.video])\n    };\n    return data;\n    ", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xnxx/xnxxGetRelatedController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class PornhubSearch {\n      search: object[];\n      data: object;\n      constructor() {\n        // in <div id=\"video-player-bg\"> get <script>var video_related=\n        this.search = $(\"div#video-player-bg\")\n          .map((i, el) => {\n            const script = $(el).find(\"script\").html();\n            const video_related = script?.split(\"var video_related=\")[1];\n            //stop and replace everything after the last ];\n            const badJson = video_related?.split(\"];\")[0] + \"]\";\n            const actualResult = JSON.parse(String(badJson));\n            //console.log(actualResult);\n            const result = actualResult.map((el: any) => {\n              return {\n                link: `${c.XNXX}${el.u}`,\n                id: el.u.slice(1, -1),\n                title: el.t,\n                image: el.i,\n                duration: el.d,\n                views: `${el.n}, ${el.r}`,\n                video: `${c.XNXX}/embedframe/${el.id}`\n              };\n            });\n            return result;\n          }).get();\n      }\n    }\n    \n    const x = new PornhubSearch();", "    if (x.search.length === 0) throw Error(\"No result found\");\n    const data = x.search as unknown as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n\n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xnxx/xnxxSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class PornhubSearch {\n      search: object[];\n      constructor() {\n        this.search = $(\"div.mozaique > div\")\n          .map((i, el) => {\n            return {\n              link: `${c.XNXX}${$(el).find(\"a\").attr(\"href\")}`,\n              // remove first \"/\" and last \"/\"\n              id: $(el).find(\"a\").attr(\"href\")?.slice(1, -1),\n              title: $(el).find(\"div.thumb-under\").text().split(\"\\n\")\n                .map((el) => el.trim()).filter((el) => el !== \"\")[0],\n              image: $(el).find(\"img\").attr(\"data-src\"),\n              duration: $(el).find(\"div.thumb-under\").text().split(\"\\n\")\n                .map((el) => el.trim()).filter((el) => el !== \"\")[2],\n              rating: $(el).find(\"div.thumb-under\").text().split(\"\\n\")\n                .map((el) => el.trim()).filter((el) => el !== \"\")[1],\n              video: `${c.XNXX}/embedframe/${$(el).find(\"img\").attr(\"data-videoid\")}`\n            };\n          }).get();\n      }\n    }\n    \n    const x = new PornhubSearch();", "    if (x.search.length === 0) throw Error(\"No result found\");\n    const data = x.search as unknown as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n\n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/youporn/youpornGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport { IVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const resolve = await lust.fetchBody(url);\n    const $ = load(resolve);\n", "    class YouPorn { \n      link: string;\n      id: string;\n      title: string;\n      image: string;\n      duration: string;\n      views: string;\n      rating: string;\n      publish: string;\n      upVote: string;\n      downVote: string;\n      video: string;\n      tags: string[];\n      models: string[];\n      constructor() {\n        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n        this.id = this.link.replace(\"https://www.youporn.com/watch/\", \"\") || \"None\";\n        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n        this.duration = $(\"meta[property='video:duration']\").attr(\"content\") || \"0\";\n        this.views = $(\"div.feature.infoValueBlock\").find(\"div[data-value]\").attr(\"data-value\") || \"0\";\n        this.rating = $(\"div.feature\").find(\"span\").text().replace(/[^0-9.,%]/g, \"\") || \"0\";\n        this.publish = $(\"div.video-uploaded\").find(\"span\").text() || \"None\";\n        this.upVote = this.views;\n        this.downVote = \"None\";\n        this.video = `https://www.youporn.com/embed/${this.id}`;\n        this.tags = $(\"a[data-espnode='category_tag'], a[data-espnode='porntag_tag']\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.models = $(\"a[data-espnode='pornstar_tag']\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();       \n      }\n    }\n    \n    const yp = new YouPorn();\n    const data: IVideoData = {\n      success: true,\n      data: {\n        title: lust.removeHtmlTagWithoutSpace(yp.title),\n        id: yp.id,\n        image: yp.image,\n        duration: lust.secondToMinute(Number(yp.duration)),\n        views: yp.views,\n        rating: yp.rating,\n        uploaded: yp.publish,\n        upvoted: yp.upVote,\n        downvoted: yp.downVote,\n        models: yp.models,\n        tags: yp.tags\n      },\n      source: yp.link,\n      assets: [yp.video, yp.image]\n    };\n    return data;", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/youporn/youpornSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class YouPornSearch {\n      dur: string[];\n      search: object[];\n      constructor() {\n        this.dur = $(\"div.video-duration\").map((i, el) => {\n          return $(el).text();\n        }).get();\n        this.search = $(\"a[href^='/watch/']\")\n          .map((i, el) => {\n            const link = $(el).attr(\"href\");\n            const id = `${link}`.split(\"/\")[2] + \"/\" + `${link}`.split(\"/\")[3];\n            const title = $(el).find(\"div.video-box-title\").text();\n            const image = $(el).find(\"img\").attr(\"data-thumbnail\");\n            return {\n              link: `${c.YOUPORN}${link}`,\n              id: id,\n              title: lust.removeHtmlTagWithoutSpace(title),\n              image: image,\n              duration: this.dur[i],\n              views: \"None\",\n              video: `https://www.youporn.com/embed/${id}`,\n            };\n          }).get();\n      }\n    }\n    \n    const yp = new YouPornSearch();", "    if (yp.search.length === 0) throw Error(\"No result found\");\n    const data = yp.search as unknown as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n\n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xhamster/xhamsterGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport { IVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const resolve = await lust.fetchBody(url);\n    const $ = load(resolve);\n", "    class Xhamster { \n      link: string;\n      id: string;\n      title: string;\n      image: string;\n      duration: any;\n      views: string;\n      rating: string;\n      publish: string;\n      upVote: string;\n      downVote: string;\n      video: string;\n      tags: string[];\n      models: string[];\n      constructor() {\n        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n        this.id = this.link.split(\"/\")[3] + \"/\" + this.link.split(\"/\")[4] || \"None\";\n        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\"; \n        this.duration = $(\"script#initials-script\").html() || \"None\";\n        //remove window.initials={ and };\n        this.duration = this.duration.replace(\"window.initials=\", \"\");\n        this.duration = this.duration.replace(/;/g, \"\");\n        this.duration = JSON.parse(this.duration);\n        this.duration = this.duration.videoModel.duration || \"None\";\n        this.views = $(\"div.header-icons\").find(\"span\").first().text() || \"None\";\n        this.rating = $(\"div.header-icons\").find(\"span\").eq(1).text() || \"None\";\n        this.publish = $(\"div.entity-info-container__date\").attr(\"data-tooltip\") || \"None\";\n        this.upVote = $(\"div.rb-new__info\").text().split(\"/\")[0].trim() || \"None\";\n        this.downVote = $(\"div.rb-new__info\").text().split(\"/\")[1].trim() || \"None\";\n        this.video = \"https://xheve2.com/embed/\" + this.link.split(\"-\").pop() || \"None\";\n        this.tags = $(\"a.video-tag\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.tags = this.tags.map((el) => lust.removeHtmlTagWithoutSpace(el));\n        this.models = $(\"a.video-tag\")\n          .map((i, el) => {\n            return $(el).attr(\"href\");\n          }\n          ).get();\n        this.models = this.models.filter((el) => el.startsWith(\"https://xheve2.com/pornstars/\"));\n        this.models = this.models.map((el) => el.replace(\"https://xheve2.com/pornstars/\", \"\"));\n      }\n    }\n    \n    const xh = new Xhamster();\n    const data: IVideoData = {\n      success: true,\n      data: {\n        title: lust.removeHtmlTagWithoutSpace(xh.title),\n        id: xh.id,\n        image: xh.image,\n        duration: lust.secondToMinute(Number(xh.duration)),\n        views: xh.views,\n        rating: xh.rating,\n        uploaded: xh.publish,\n        upvoted: xh.upVote,\n        downvoted: xh.downVote,\n        models: xh.models,\n        tags: xh.tags\n      },\n      source: xh.link,\n      assets: [xh.video, xh.image]\n    };\n    return data;\n    ", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/xhamster/xhamsterSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class XhamsterSearch {\n      search: any;\n      constructor() {\n        const views = $(\"div.video-thumb-views\")\n          .map((i, el) => {\n            const views = $(el).text();\n            return views;\n          }).get();\n        const duration = $(\"span[data-role='video-duration']\")\n          .map((i, el) => {\n            const duration = $(el).text();\n            return duration;\n          }).get();\n        this.search = $(\"a.video-thumb__image-container\")\n          .map((i, el) => {\n            const link = $(el).attr(\"href\");\n\n            return {\n              link: `${link}`,\n              id: link?.split(\"/\")[3] + \"/\" + link?.split(\"/\")[4],\n              title: $(el).find(\"img\").attr(\"alt\"),\n              image: $(el).find(\"img\").attr(\"src\"),\n              duration: duration[i],\n              views: views[i],\n              video: `${c.XHAMSTER}/embed/${link?.split(\"-\").pop()}`\n            };\n          }).get();    \n      }\n    }\n    \n    const xh = new XhamsterSearch();", "    if (xh.search.length === 0) throw Error(\"No result found\");\n    const data = xh.search as unknown as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n\n  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/pornhub/pornhubGetController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport { IVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const resolve = await lust.fetchBody(url);\n    const $ = load(resolve);\n", "    class PornHub { \n      link: string;\n      id: string;\n      title: string;\n      image: string;\n      duration: string;\n      views: string;\n      rating: string;\n      videoInfo: string;\n      upVote: string;\n      downVote: string;\n      video: string;\n      tags: string[];\n      models: string[];\n      constructor() {\n        this.link = $(\"link[rel='canonical']\").attr(\"href\") || \"None\";\n        this.id = this.link.split(\"=\")[1] || \"None\";\n        this.title = $(\"meta[property='og:title']\").attr(\"content\") || \"None\";\n        this.image = $(\"meta[property='og:image']\").attr(\"content\") || \"None\";\n        //get <meta property=\"video:duration\" content=\"\n        this.duration = $(\"meta[property='video:duration']\").attr(\"content\") || \"0\";\n        this.views = $(\"div.views > span.count\").text() || \"None\";\n        this.rating = $(\"div.ratingPercent > span.percent\").text() || \"None\";\n        this.videoInfo = $(\"div.videoInfo\").text() || \"None\";\n        this.upVote = $(\"span.votesUp\").attr(\"data-rating\") || \"None\";\n        this.downVote = $(\"span.votesDown\").attr(\"data-rating\") || \"None\";\n        this.video = $(\"meta[property='og:video:url']\").attr(\"content\") || \"None\";\n        this.tags = $(\"div.video-info-row\")\n          .find(\"a\")\n          .map((i, el) => {\n            return $(el).text();\n          }).get();\n        this.tags.shift();\n        this.tags = this.tags.map((el) => lust.removeHtmlTagWithoutSpace(el));\n        this.models = $(\"div.pornstarsWrapper.js-pornstarsWrapper\")\n          .find(\"a\")\n          .map((i, el) => {\n            return $(el).attr(\"data-mxptext\");\n          }).get();\n      }\n    }\n    \n    const ph = new PornHub();\n    const data: IVideoData = {\n      success: true,\n      data: {\n        title: lust.removeHtmlTagWithoutSpace(ph.title),\n        id: ph.id,\n        image: ph.image,\n        duration: lust.secondToMinute(Number(ph.duration)),\n        views: ph.views,\n        rating: ph.rating,\n        uploaded: ph.videoInfo,\n        upvoted: ph.upVote,\n        downvoted: ph.downVote,\n        models: ph.models,\n        tags: ph.tags.filter((el) => el !== \"Suggest\" && el !== \" Suggest\")\n      },\n      source: ph.link,\n      assets: [ph.video, ph.image]\n    };\n    return data;", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/scraper/pornhub/pornhubSearchController.ts", "chunked_list": ["import { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\nimport c from \"../../utils/options\";\nimport { ISearchVideoData } from \"../../interfaces\";\n\nconst lust = new LustPress();\n\nexport async function scrapeContent(url: string) {\n  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n", "  try {\n    const res = await lust.fetchBody(url);\n    const $ = load(res);\n\n    class PornhubSearch {\n      search: object[];\n      data: object;\n      constructor() {\n        this.search = $(\"div.wrap\")\n          .map((i, el) => {\n            const link = $(el).find(\"a\").attr(\"href\");\n            const id = link?.split(\"=\")[1];\n            const title = $(el).find(\"a\").attr(\"title\");\n            const image = $(el).find(\"img\").attr(\"src\");\n            const duration = $(el).find(\"var.duration\").text();\n            const views = $(el).find(\"div.videoDetailsBlock\").find(\"span.views\").text();\n            return {\n              link: `${c.PORNHUB}${link}`,\n              id: id,\n              title: title,\n              image: image,\n              duration: duration,\n              views: views,\n              video: `${c.PORNHUB}/embed/${id}`,\n            };\n          }).get();\n\n        this.data = this.search.filter((el: any) => {\n          return el.link.includes(\"javascript:void(0)\") === false && el.image?.startsWith(\"data:image\") === false;\n        });\n      }\n\n    }\n    \n    const ph = new PornhubSearch();", "    if (ph.search.length === 0) throw Error(\"No result found\");\n    const data = ph.data as string[];\n    const result: ISearchVideoData = {\n      success: true,\n      data: data,\n      source: url,\n    };\n    return result;\n    \n\n   ", "  } catch (err) {\n    const e = err as Error;\n    throw Error(e.message);\n  }\n}"]}
{"filename": "src/utils/modifier.ts", "chunked_list": ["/**\n * Auto space on url\n * @param str the string to be spaced\n * @returns string\n */\nexport function spacer(str: string) {\n  return str.replace(/\\s/g, \"+\");\n}\n\n/**\n * Error handler\n * @param success when success is false, it will return error\n * @param message error message\n * @returns object\n */", "export function maybeError(success: boolean, message: string) {\n  return { success, message };\n}\n\nexport function timeAgo(input: Date) {\n  const date = new Date(input);\n  const formatter: any = new Intl.RelativeTimeFormat(\"en\");\n  const ranges: { [key: string]: number } = {\n    years: 3600 * 24 * 365,\n    months: 3600 * 24 * 30,\n    weeks: 3600 * 24 * 7,\n    days: 3600 * 24,\n    hours: 3600,\n    minutes: 60,\n    seconds: 1\n  };\n  const secondsElapsed = (date.getTime() - Date.now()) / 1000;", "  for (const key in ranges) {\n    if (ranges[key] < Math.abs(secondsElapsed)) {\n      const delta = secondsElapsed / ranges[key];\n      return formatter.format(Math.round(delta), key);\n    }\n  }\n}"]}
{"filename": "src/utils/options.ts", "chunked_list": ["export default {\n  PORNHUB: \"https://www.pornhub.com\",\n  XNXX: \"https://www.xnxx.com\",\n  REDTUBE: \"https://www.redtube.com\",\n  XVIDEOS: \"https://www.xvideos.com\",\n  XHAMSTER: \"https://xheve2.com\",\n  YOUPORN: \"https://www.youporn.com\",\n  JAVHD: \"https://javhd.today\"\n};", "};"]}
{"filename": "src/utils/logger.ts", "chunked_list": ["import pino from \"pino\";\n\nexport const logger = pino({\n  level: \"info\",\n  transport: {\n    target: \"pino-pretty\"\n  },\n});"]}
{"filename": "src/utils/limit-options.ts", "chunked_list": ["import rateLimit from \"express-rate-limit\";\nimport slowDown from \"express-slow-down\";\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: \"Too nasty, please slow down\"\n});\n\nconst slow = slowDown({", "\nconst slow = slowDown({\n  delayAfter: 50,\n  windowMs: 15 * 60 * 1000,\n  delayMs: 1000,\n  maxDelayMs: 20000,\n});\n\nexport { limiter, slow };", "export { limiter, slow };"]}
{"filename": "src/controller/xvideos/xvideosGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function getXvideos(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xvideos/get?id=:id Get xvideos\n     * @apiName Get xvideos\n     * @apiGroup xvideos\n     * @apiDescription Get a xvideos video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xvideos/get?id=:id Get xvideos\n     * @apiName Get xvideos\n     * @apiGroup xvideos\n     * @apiDescription Get a xvideos video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xvideos/get?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.XVIDEOS}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xvideos/xvideosGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosGetRelatedController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function relatedXvideos(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xvideos/get?id=:id Get related xvideos\n     * @apiName Get related xvideos\n     * @apiGroup xvideos\n     * @apiDescription Get a xvideos video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xvideos/get?id=:id Get related xvideos\n     * @apiName Get related xvideos\n     * @apiGroup xvideos\n     * @apiDescription Get a xvideos video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xvideos/related?id=video73564387/cute_hentai_maid_with_pink_hair_fucking_uncensored_\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.XVIDEOS}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xvideos/xvideosSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError, spacer } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function searchXvideos(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /xvideos/search Search xvideos videos\n     * @apiName Search xvideos\n     * @apiGroup xvideos\n     * @apiDescription Search xvideos videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=0] Page number\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xvideos/search?key=milf\n     * curl -i https://lust.scathach.id/xvideos/search?key=milf&page=2\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xvideos/search?key=milf\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xvideos/search?key=milf\") as resp:\n     *    print(await resp.json())\n     */\n\n    const key = req.query.key as string;\n    const page = req.query.page || 0;", "    if (!key) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n\n    const url = `${c.XVIDEOS}/?k=${spacer(key)}&p=${page}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/xvideos/xvideosRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xvideos/xvideosGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\nimport { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\n\nconst lust = new LustPress();\n\nexport async function randomXvideos(req: Request, res: Response) {", "const lust = new LustPress();\n\nexport async function randomXvideos(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /xvideos/random Get random xvideos\n     * @apiName Get random xvideos\n     * @apiGroup xvideos\n     * @apiDescription Get a random xvideos video\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xvideos/random\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xvideos/random\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xvideos/random\") as resp:\n     *    print(await resp.json())\n     */\n    const resolve = await lust.fetchBody(c.XVIDEOS);\n    const $ = load(resolve);\n    const search = $(\"div.thumb-under\")\n      .find(\"a\")\n      .map((i, el) => $(el).attr(\"href\"))\n      .get();\n    const filtered = search.filter((el) => el.includes(\"/video\"));\n    const filtered_ = filtered.filter((el) => !el.includes(\"THUMBNUM\"));\n    const random = Math.floor(Math.random() * filtered_.length);\n    \n    const url = c.XVIDEOS + filtered[random];\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/redtube/redtubeGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function relatedRedtube(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /redtube/get?id=:id Get redtube related videos\n     * @apiName Get redtube related videos\n     * @apiGroup redtube\n     * @apiDescription Get a related redtube videos based on id\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/redtube/get?id=41698751\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/redtube/get?id=41698751\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/redtube/get?id=41698751\") as resp:\n     *    print(await resp.json())\n     */\n\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter key is required\");", "    if (!id) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(id))) throw Error(\"Parameter id must be a number\");\n\n    const url = `${c.REDTUBE}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/redtube/redtubeSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError, spacer } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function searchRedtube(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /redtube/search Search redtube videos\n     * @apiName Search redtube\n     * @apiGroup redtube\n     * @apiDescription Search redtube videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=1] Page number\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/redtube/search?key=milf\n     * curl -i https://lust.scathach.id/redtube/search?key=milf&page=2\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/redtube/search?key=milf\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/redtube/search?key=milf\") as resp:\n     *    print(await resp.json())\n     */\n\n    const key = req.query.key as string;\n    const page = req.query.page || 1;", "    if (!key) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n\n    const url = `${c.REDTUBE}/?search=${spacer(key)}&page=${page}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/redtube/redtubeGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function getRedtube(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n    if (isNaN(Number(id))) throw Error(\"Parameter id must be a number\");\n\n    /**\n     * @api {get} /redtube/get?id=:id Get Redtube\n     * @apiName Get redtube\n     * @apiGroup redtube\n     * @apiDescription Get a redtube video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/redtube/get?id=42763661\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/redtube/get?id=42763661\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n    if (isNaN(Number(id))) throw Error(\"Parameter id must be a number\");\n\n    /**\n     * @api {get} /redtube/get?id=:id Get Redtube\n     * @apiName Get redtube\n     * @apiGroup redtube\n     * @apiDescription Get a redtube video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/redtube/get?id=42763661\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/redtube/get?id=42763661\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/redtube/get?id=42763661\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.REDTUBE}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/redtube/redtubeRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/redtube/redtubeGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\nimport { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\n\nconst lust = new LustPress();\n\nexport async function randomRedtube(req: Request, res: Response) {", "const lust = new LustPress();\n\nexport async function randomRedtube(req: Request, res: Response) {\n  try {\n   \n\n    /**\n     * @api {get} /redtube/random Get random redtube\n     * @apiName Get random redtube\n     * @apiGroup redtube\n     * @apiDescription Get a random redtube video\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/redtube/random\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/redtube/random\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/redtube/random\") as resp:\n     *    print(await resp.json())\n     */\n    const resolve = await lust.fetchBody(c.REDTUBE);\n    const $ = load(resolve);\n    const search = $(\"a.video_link\")\n      .map((i, el) => {\n        return $(el).attr(\"href\");\n      }).get();\n    const random = Math.floor(Math.random() * search.length);\n    \n    const url = c.REDTUBE + search[random];\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xnxx/xnxxSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError, spacer } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function searchXnxx(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /xnxx/search Search xnxx videos\n     * @apiName Search xnxx\n     * @apiGroup xnxx\n     * @apiDescription Search xnxx videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=0] Page number\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xnxx/search?key=milf\n     * curl -i https://lust.scathach.id/xnxx/search?key=milf&page=2\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xnxx/search?key=milf\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xnxx/search?key=milf\") as resp:\n     *    print(await resp.json())\n     */\n\n    const key = req.query.key as string;\n    const page = req.query.page || 0;", "    if (!key) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n\n    const url = `${c.XNXX}/search/${spacer(key)}/${page}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/xnxx/xnxxRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\nimport { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\n\nconst lust = new LustPress();\n\nexport async function randomXnxx(req: Request, res: Response) {", "const lust = new LustPress();\n\nexport async function randomXnxx(req: Request, res: Response) {\n  try {\n   \n\n    /**\n     * @api {get} /xnxx/random Get random xnxx\n     * @apiName Get random xnxx\n     * @apiGroup xnxx\n     * @apiDescription Get a random xnxx video\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xnxx/random\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xnxx/random\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xnxx/random\") as resp:\n     *    print(await resp.json())\n     */\n    const resolve = await lust.fetchBody(\"https://www.xnxx.com/search/random/random\");\n    const $ = load(resolve);\n    const search = $(\"div.mozaique > div\")\n      .map((i, el) => {\n        return $(el).find(\"a\").attr(\"href\");\n      }).get();\n    const random = Math.floor(Math.random() * search.length);\n    \n    const url = c.XNXX + search[random];\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xnxx/xnxxGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxGetRelatedController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function relatedXnxx(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xnxx/get?id=:id Get related xnxx\n     * @apiName Get related xnxx\n     * @apiGroup xnxx\n     * @apiDescription Get a xnxx video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xnxx/get?id=:id Get related xnxx\n     * @apiName Get related xnxx\n     * @apiGroup xnxx\n     * @apiDescription Get a xnxx video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xnxx/related?id=video-17vah71a/makima_y_denji\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.XNXX}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xnxx/xnxxGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xnxx/xnxxGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function getXnxx(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xnxx/get?id=:id Get xnxx\n     * @apiName Get xnxx\n     * @apiGroup xnxx\n     * @apiDescription Get a xnxx video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xnxx/get?id=:id Get xnxx\n     * @apiName Get xnxx\n     * @apiGroup xnxx\n     * @apiDescription Get a xnxx video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xnxx/get?id=video-17vah71a/makima_y_denji\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.XNXX}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/youporn/youpornSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError, spacer } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function searchYouporn(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /youporn/search Search youporn videos\n     * @apiName Search youporn\n     * @apiGroup youporn\n     * @apiDescription Search youporn videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=1] Page number\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/youporn/search?key=milf\n     * curl -i https://lust.scathach.id/youporn/search?key=milf&page=2\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/youporn/search?key=milf\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/youporn/search?key=milf\") as resp:\n     *    print(await resp.json())\n     */\n\n    const key = req.query.key as string;\n    const page = req.query.page || 1;", "    if (!key) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n\n    const url = `${c.YOUPORN}/search/?query=${spacer(key)}&page=${page}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/youporn/youpornGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function getYouporn(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /youporn/get?id=:id Get youporn\n     * @apiName Get youporn\n     * @apiGroup youporn\n     * @apiDescription Get a youporn video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /youporn/get?id=:id Get youporn\n     * @apiName Get youporn\n     * @apiGroup youporn\n     * @apiDescription Get a youporn video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/youporn/get?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.YOUPORN}/watch/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/youporn/youpornRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\nimport { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\n\nconst lust = new LustPress();\n\nexport async function randomYouporn(req: Request, res: Response) {", "const lust = new LustPress();\n\nexport async function randomYouporn(req: Request, res: Response) {\n  try {\n   \n\n    /**\n     * @api {get} /youporn/random Get random youporn\n     * @apiName Get random youporn\n     * @apiGroup youporn\n     * @apiDescription Get a random youporn video\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/youporn/random\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/youporn/random\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/youporn/random\") as resp:\n     *    print(await resp.json())\n     */\n    const resolve = await lust.fetchBody(`${c.YOUPORN}`);\n    const $ = load(resolve);\n    const search = $(\"a[href^='/watch/']\")\n      .map((i, el) => {\n        return $(el).attr(\"href\");\n      }).get();\n    const random = Math.floor(Math.random() * search.length);\n    const url = c.YOUPORN + search[random];\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/youporn/youpornGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/youporn/youpornSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function relatedYouporn(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /youporn/get?id=:id Get related youporn\n     * @apiName Get related youporn\n     * @apiGroup youporn\n     * @apiDescription Get a youporn video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /youporn/get?id=:id Get related youporn\n     * @apiName Get related youporn\n     * @apiGroup youporn\n     * @apiDescription Get a youporn video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/youporn/related?id=16621192/chainsaw-man-fuck-makima-3d-porn-60-fps\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.YOUPORN}/watch/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xhamster/xhamsterGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function getXhamster(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xhamster/get?id=:id Get xhamster\n     * @apiName Get xhamster\n     * @apiGroup xhamster\n     * @apiDescription Get a xhamster video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xhamster/get?id=:id Get xhamster\n     * @apiName Get xhamster\n     * @apiGroup xhamster\n     * @apiDescription Get a xhamster video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xhamster/get?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.XHAMSTER}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xhamster/xhamsterRandom.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\nimport { load } from \"cheerio\";\nimport LustPress from \"../../LustPress\";\n\nconst lust = new LustPress();\n\nexport async function randomXhamster(req: Request, res: Response) {", "const lust = new LustPress();\n\nexport async function randomXhamster(req: Request, res: Response) {\n  try {\n   \n\n    /**\n     * @api {get} /xhamster/random Get random xhamster\n     * @apiName Get random xhamster\n     * @apiGroup xhamster\n     * @apiDescription Get a random xhamster video\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xhamster/random\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xhamster/random\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xhamster/random\") as resp:\n     *    print(await resp.json())\n     */\n    const resolve = await lust.fetchBody(`${c.XHAMSTER}/newest`);\n    const $ = load(resolve);\n    const search = $(\"a.root-9d8b4.video-thumb-info__name.role-pop.with-dropdown\")\n      .map((i, el) => $(el).attr(\"href\"))\n      .get();\n\n    const search_ = search.map((el) => el.replace(c.XHAMSTER, \"\"));\n    const random = Math.floor(Math.random() * search_.length);\n    const url = c.XHAMSTER + search_[random];\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/xhamster/xhamsterSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError, spacer } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function searchXhamster(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /xhamster/search Search xhamster videos\n     * @apiName Search xhamster\n     * @apiGroup xhamster\n     * @apiDescription Search xhamster videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=1] Page number\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xhamster/search?key=milf\n     * curl -i https://lust.scathach.id/xhamster/search?key=milf&page=2\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xhamster/search?key=milf\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xhamster/search?key=milf\") as resp:\n     *    print(await resp.json())\n     */\n\n    const key = req.query.key as string;\n    const page = req.query.page || 1;", "    if (!key) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n\n    const url = `${c.XHAMSTER}/search/${spacer(key)}?page=${page}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/xhamster/xhamsterGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/xhamster/xhamsterSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function relatedXhamster(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xhamster/get?id=:id Get related xhamster\n     * @apiName Get related xhamster\n     * @apiGroup xhamster\n     * @apiDescription Get a xhamster video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /xhamster/get?id=:id Get related xhamster\n     * @apiName Get related xhamster\n     * @apiGroup xhamster\n     * @apiDescription Get a xhamster video based on related id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/xhamster/related?id=videos/horny-makima-tests-new-toy-and-cums-intensely-xhAa5wx\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.XHAMSTER}/${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/pornhub/pornhubGet.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/pornhub/pornhubGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function getPornhub(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /pornhub/get?id=:id Get Pornhub\n     * @apiName Get pornhub\n     * @apiGroup pornhub\n     * @apiDescription Get a pornhub video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /pornhub/get?id=:id Get Pornhub\n     * @apiName Get pornhub\n     * @apiGroup pornhub\n     * @apiDescription Get a pornhub video based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.PORNHUB}/view_video.php?viewkey=${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/pornhub/pornhubSearch.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/pornhub/pornhubSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError, spacer } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\nconst sorting = [\"mr\", \"mv\", \"tr\", \"lg\"];\n\nexport async function searchPornhub(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /pornhub/search Search pornhub videos\n     * @apiName Search pornhub\n     * @apiGroup pornhub\n     * @apiDescription Search pornhub videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=1] Page number\n     * @apiParam {String} [sort=mr] Sort by \n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/search?key=milf\n     * curl -i https://lust.scathach.id/pornhub/search?key=milf&page=2&sort=mr\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/search?key=milf\")\n     * .then(res => console.log(res.data))", "  try {\n    /**\n     * @api {get} /pornhub/search Search pornhub videos\n     * @apiName Search pornhub\n     * @apiGroup pornhub\n     * @apiDescription Search pornhub videos\n     * @apiParam {String} key Keyword to search\n     * @apiParam {Number} [page=1] Page number\n     * @apiParam {String} [sort=mr] Sort by \n     * \n     * @apiSuccessExample {json} Success-Response:\n     *    HTTP/1.1 200 OK\n     *    HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/search?key=milf\n     * curl -i https://lust.scathach.id/pornhub/search?key=milf&page=2&sort=mr\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/search?key=milf\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/pornhub/search?key=milf\") as resp:\n     *    print(await resp.json())\n     */\n\n    const key = req.query.key as string;\n    const page = req.query.page || 1;\n    const sort = req.query.sort as string;", "    if (!key) throw Error(\"Parameter key is required\");\n    if (isNaN(Number(page))) throw Error(\"Parameter page must be a number\");\n    \n    let url;\n    if (!sort) url = `${c.PORNHUB}/video/search?search=${spacer(key)}`;\n    else if (!sorting.includes(sort)) url = `${c.PORNHUB}/video/search?search=${spacer(key)}&page=${page}`;\n\n    else url = `${c.PORNHUB}/video/search?search=${spacer(key)}&o=${sort}&page=${page}`;\n    console.log(url);\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}"]}
{"filename": "src/controller/pornhub/pornhubRandom.ts", "chunked_list": ["import { Request, Response } from \"express\";\nimport { scrapeContent } from \"../../scraper/pornhub/pornhubGetController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\n\nexport async function randomPornhub(req: Request, res: Response) {\n  try {\n    /**\n     * @api {get} /pornhub/random Random pornhub video\n     * @apiName Random pornhub\n     * @apiGroup pornhub\n     * @apiDescription Gets random pornhub video\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/random\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/random\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/pornhub/random\") as resp:\n     *    print(await resp.json())\n     * \n     */\n    const url = `${c.PORNHUB}/video/random`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/controller/pornhub/pornhubGetRelated.ts", "chunked_list": ["import { scrapeContent } from \"../../scraper/pornhub/pornhubSearchController\";\nimport c from \"../../utils/options\";\nimport { logger } from \"../../utils/logger\";\nimport { maybeError } from \"../../utils/modifier\";\nimport { Request, Response } from \"express\";\n\nexport async function relatedPornhub(req: Request, res: Response) {\n  try {\n    const id = req.query.id as string;\n    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /pornhub/get?id=:id Get Pornhub related videos\n     * @apiName Get pornhub related videos\n     * @apiGroup pornhub\n     * @apiDescription Get a related pornhub videos based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\")\n     * .then(res => console.log(res.data))", "    if (!id) throw Error(\"Parameter id is required\");\n\n    /**\n     * @api {get} /pornhub/get?id=:id Get Pornhub related videos\n     * @apiName Get pornhub related videos\n     * @apiGroup pornhub\n     * @apiDescription Get a related pornhub videos based on id\n     * \n     * @apiParam {String} id Video ID\n     * \n     * @apiSuccessExample {json} Success-Response:\n     *   HTTP/1.1 200 OK\n     *   HTTP/1.1 400 Bad Request\n     * \n     * @apiExample {curl} curl\n     * curl -i https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\n     * \n     * @apiExample {js} JS/TS\n     * import axios from \"axios\"\n     * \n     * axios.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\")\n     * .then(res => console.log(res.data))", "     * .catch(err => console.error(err))\n     * \n     * @apiExample {python} Python\n     * import aiohttp\n     * async with aiohttp.ClientSession() as session:\n     *  async with session.get(\"https://lust.scathach.id/pornhub/get?id=ph63c4e1dc48fe7\") as resp:\n     *    print(await resp.json())\n     */\n\n    const url = `${c.PORNHUB}/view_video.php?viewkey=${id}`;\n    const data = await scrapeContent(url);\n    logger.info({\n      path: req.path,\n      query: req.query,\n      method: req.method,\n      ip: req.ip,\n      useragent: req.get(\"User-Agent\")\n    });\n    return res.json(data);", "  } catch (err) {\n    const e = err as Error;\n    res.status(400).json(maybeError(false, e.message));\n  }\n}\n"]}
{"filename": "src/router/endpoint.ts", "chunked_list": ["import cors from \"cors\";\nimport { Router } from \"express\";\nimport { slow, limiter } from \"../utils/limit-options\";\n\n// PornHub\nimport { getPornhub } from \"../controller/pornhub/pornhubGet\";\nimport { searchPornhub } from \"../controller/pornhub/pornhubSearch\";\nimport { randomPornhub } from \"../controller/pornhub/pornhubRandom\";\nimport { relatedPornhub } from \"../controller/pornhub/pornhubGetRelated\";\n", "import { relatedPornhub } from \"../controller/pornhub/pornhubGetRelated\";\n\n// XNXX\nimport { getXnxx } from \"../controller/xnxx/xnxxGet\";\nimport { searchXnxx } from \"../controller/xnxx/xnxxSearch\";\nimport { relatedXnxx } from \"../controller/xnxx/xnxxGetRelated\";\nimport { randomXnxx } from \"../controller/xnxx/xnxxRandom\";\n\n// RedTube\nimport { getRedtube } from \"../controller/redtube/redtubeGet\";", "// RedTube\nimport { getRedtube } from \"../controller/redtube/redtubeGet\";\nimport { searchRedtube } from \"../controller/redtube/redtubeSearch\";\nimport { relatedRedtube } from \"../controller/redtube/redtubeGetRelated\";\nimport { randomRedtube } from \"../controller/redtube/redtubeRandom\";\n\n// Xvideos\nimport { getXvideos } from \"../controller/xvideos/xvideosGet\";\nimport { searchXvideos } from \"../controller/xvideos/xvideosSearch\";\nimport { randomXvideos } from \"../controller/xvideos/xvideosRandom\";", "import { searchXvideos } from \"../controller/xvideos/xvideosSearch\";\nimport { randomXvideos } from \"../controller/xvideos/xvideosRandom\";\nimport { relatedXvideos } from \"../controller/xvideos/xvideosGetRelated\";\n\n// Xhamster\nimport { getXhamster } from \"../controller/xhamster/xhamsterGet\";\nimport { searchXhamster } from \"../controller/xhamster/xhamsterSearch\";\nimport { randomXhamster } from \"../controller/xhamster/xhamsterRandom\";\nimport { relatedXhamster } from \"../controller/xhamster/xhamsterGetRelated\";\n", "import { relatedXhamster } from \"../controller/xhamster/xhamsterGetRelated\";\n\n// YouPorn\nimport { getYouporn } from \"../controller/youporn/youpornGet\";\nimport { searchYouporn } from \"../controller/youporn/youpornSearch\";\nimport { relatedYouporn } from \"../controller/youporn/youpornGetRelated\";\nimport { randomYouporn } from \"../controller/youporn/youpornRandom\";\n\nfunction scrapeRoutes() {\n  const router = Router();\n\n  router.get(\"/pornhub/get\", cors(), slow, limiter, getPornhub);\n  router.get(\"/pornhub/search\", cors(), slow, limiter, searchPornhub);\n  router.get(\"/pornhub/random\", cors(), slow, limiter, randomPornhub);\n  router.get(\"/pornhub/related\", cors(), slow, limiter, relatedPornhub);\n  router.get(\"/xnxx/get\", cors(), slow, limiter, getXnxx);\n  router.get(\"/xnxx/search\", cors(), slow, limiter, searchXnxx);\n  router.get(\"/xnxx/related\", cors(), slow, limiter, relatedXnxx);\n  router.get(\"/xnxx/random\", cors(), slow, limiter, randomXnxx);\n  router.get(\"/redtube/get\", cors(), slow, limiter, getRedtube);\n  router.get(\"/redtube/search\", cors(), slow, limiter, searchRedtube);\n  router.get(\"/redtube/related\", cors(), slow, limiter, relatedRedtube);\n  router.get(\"/redtube/random\", cors(), slow, limiter, randomRedtube);\n  router.get(\"/xvideos/get\", cors(), slow, limiter, getXvideos);\n  router.get(\"/xvideos/search\", cors(), slow, limiter, searchXvideos);\n  router.get(\"/xvideos/random\", cors(), slow, limiter, randomXvideos);\n  router.get(\"/xvideos/related\", cors(), slow, limiter, relatedXvideos);\n  router.get(\"/xhamster/get\", cors(), slow, limiter, getXhamster);\n  router.get(\"/xhamster/search\", cors(), slow, limiter, searchXhamster);\n  router.get(\"/xhamster/random\", cors(), slow, limiter, randomXhamster);\n  router.get(\"/xhamster/related\", cors(), slow, limiter, relatedXhamster);\n  router.get(\"/youporn/get\", cors(), slow, limiter, getYouporn);\n  router.get(\"/youporn/search\", cors(), slow, limiter, searchYouporn);\n  router.get(\"/youporn/related\", cors(), slow, limiter, relatedYouporn);\n  router.get(\"/youporn/random\", cors(), slow, limiter, randomYouporn);\n  \n  return router;\n}\n\nexport default scrapeRoutes;", "function scrapeRoutes() {\n  const router = Router();\n\n  router.get(\"/pornhub/get\", cors(), slow, limiter, getPornhub);\n  router.get(\"/pornhub/search\", cors(), slow, limiter, searchPornhub);\n  router.get(\"/pornhub/random\", cors(), slow, limiter, randomPornhub);\n  router.get(\"/pornhub/related\", cors(), slow, limiter, relatedPornhub);\n  router.get(\"/xnxx/get\", cors(), slow, limiter, getXnxx);\n  router.get(\"/xnxx/search\", cors(), slow, limiter, searchXnxx);\n  router.get(\"/xnxx/related\", cors(), slow, limiter, relatedXnxx);\n  router.get(\"/xnxx/random\", cors(), slow, limiter, randomXnxx);\n  router.get(\"/redtube/get\", cors(), slow, limiter, getRedtube);\n  router.get(\"/redtube/search\", cors(), slow, limiter, searchRedtube);\n  router.get(\"/redtube/related\", cors(), slow, limiter, relatedRedtube);\n  router.get(\"/redtube/random\", cors(), slow, limiter, randomRedtube);\n  router.get(\"/xvideos/get\", cors(), slow, limiter, getXvideos);\n  router.get(\"/xvideos/search\", cors(), slow, limiter, searchXvideos);\n  router.get(\"/xvideos/random\", cors(), slow, limiter, randomXvideos);\n  router.get(\"/xvideos/related\", cors(), slow, limiter, relatedXvideos);\n  router.get(\"/xhamster/get\", cors(), slow, limiter, getXhamster);\n  router.get(\"/xhamster/search\", cors(), slow, limiter, searchXhamster);\n  router.get(\"/xhamster/random\", cors(), slow, limiter, randomXhamster);\n  router.get(\"/xhamster/related\", cors(), slow, limiter, relatedXhamster);\n  router.get(\"/youporn/get\", cors(), slow, limiter, getYouporn);\n  router.get(\"/youporn/search\", cors(), slow, limiter, searchYouporn);\n  router.get(\"/youporn/related\", cors(), slow, limiter, relatedYouporn);\n  router.get(\"/youporn/random\", cors(), slow, limiter, randomYouporn);\n  \n  return router;\n}\n\nexport default scrapeRoutes;"]}
