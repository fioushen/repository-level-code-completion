{"filename": "src/themeObserver.ts", "chunked_list": ["import { refreshBlocks } from 'src/global/blocks';\n\nexport const themeObserver = new MutationObserver(function (mutations) {\n\tmutations.forEach(function (mutation) {\n\t\tconst target = mutation.target as HTMLElement;\n\t\tif (\n\t\t\t// dark -> dark & light -> light\n\t\t\tmutation.oldValue?.contains('theme-dark') &&\n\t\t\t!mutation.oldValue?.contains('theme-light') && // key line, avoid calling twice\n\t\t\ttarget.classList.value.contains('theme-light')\n\t\t) {\n\t\t\trefreshBlocks();", "\t\t} else if (\n\t\t\t// light -> empty -> dark\n\t\t\tmutation.oldValue?.contains('theme-light') && // key line, avoid calling twice\n\t\t\t!mutation.oldValue?.contains('theme-dark') &&\n\t\t\ttarget.classList.value.contains('theme-dark')\n\t\t) {\n\t\t\trefreshBlocks();\n\t\t}\n\t});\n});\n\nexport const setObserver = () => {\n\tthemeObserver.observe(document.body, {\n\t\tattributes: true,\n\t\tattributeOldValue: true,\n\t\tattributeFilter: ['class'],\n\t});\n};\n\nexport const detachObserver = () => {\n\tthemeObserver.disconnect();\n};\n"]}
{"filename": "src/main.ts", "chunked_list": ["import { Plugin, MarkdownPostProcessorContext } from 'obsidian';\nimport {\n\tDEFAULT_SETTINGS,\n\tChemPluginSettings,\n\tSETTINGS_VERSION,\n} from './settings/base';\nimport { ChemSettingTab } from './settings/SettingTab';\nimport { updateSettingsVersion } from './settings/update';\nimport { SmilesBlock } from './SmilesBlock';\n", "import { SmilesBlock } from './SmilesBlock';\n\nimport { setBlocks, clearBlocks } from './global/blocks';\nimport { setDrawer, clearDrawer } from './global/drawer';\nimport { setObserver, detachObserver } from './themeObserver';\n\nexport default class ChemPlugin extends Plugin {\n\tsettings: ChemPluginSettings;\n\n\tasync onload() {\n\t\tawait this.loadSettings();\n\n\t\t// this.addRibbonIcon('hexagon', 'This is Chem Plugin', () => {});\n\n\t\t// initialize global variables\n\t\tsetDrawer(this.settings.options);\n\t\tsetBlocks();\n\t\tsetObserver();\n\n\t\tthis.addSettingTab(new ChemSettingTab({ app: this.app, plugin: this }));\n\t\tthis.registerMarkdownCodeBlockProcessor('smiles', this.smilesProcessor);\n\t}\n\n\tasync onunload() {\n\t\tdetachObserver();\n\t\tclearBlocks();\n\t\tclearDrawer();\n\t}\n\n\tasync loadSettings() {\n\t\tconst candidate = Object.assign({}, await this.loadData());", "\t\tif ('version' in candidate && candidate.version == SETTINGS_VERSION)\n\t\t\tthis.settings = Object.assign({}, DEFAULT_SETTINGS, candidate);\n\t\telse\n\t\t\tthis.settings = Object.assign(\n\t\t\t\t{},\n\t\t\t\tDEFAULT_SETTINGS,\n\t\t\t\tupdateSettingsVersion(candidate)\n\t\t\t);\n\t}\n\n\tasync saveSettings() {\n\t\tawait this.saveData(this.settings);\n\t}\n\n\tsmilesProcessor = (\n\t\tsource: string,\n\t\tel: HTMLElement,\n\t\tctx: MarkdownPostProcessorContext\n\t) => {\n\t\tctx.addChild(new SmilesBlock(el, source, ctx, this.settings)); // pass plugin settings, maybe useful in react settings provider.\n\t};\n}\n"]}
{"filename": "src/global.d.ts", "chunked_list": ["declare module 'smiles-drawer';\n"]}
{"filename": "src/SmilesBlock.ts", "chunked_list": ["import { MarkdownRenderChild, MarkdownPostProcessorContext } from 'obsidian';\nimport { gDrawer } from './global/drawer';\nimport { ChemPluginSettings } from './settings/base';\nimport { addBlock, removeBlock } from './global/blocks';\n\nimport { i18n } from 'src/lib/i18n';\n\nexport class SmilesBlock extends MarkdownRenderChild {\n\tconstructor(\n\t\tprivate readonly el: HTMLElement,\n\t\tprivate readonly markdownSource: string,\n\t\tprivate readonly context: MarkdownPostProcessorContext,\n\t\tprivate readonly settings: ChemPluginSettings\n\t) {\n\t\tsuper(el); // important\n\t\taddBlock(this);\n\t}\n\n\trender() {\n\t\t// TODO: rendering animation\n\n\t\tthis.el.empty();\n\t\tconst rows = this.markdownSource\n\t\t\t.split('\\n')\n\t\t\t.filter((row) => row.length > 0)\n\t\t\t.map((row) => row.trim());\n", "\t\tif (rows.length == 1) {\n\t\t\tconst div = this.el.createDiv({ cls: 'chem-cell' });\n\t\t\tthis.renderCell(rows[0], div);\n\t\t} else {\n\t\t\tconst table = this.el.createDiv({ cls: 'chem-table' });\n\t\t\tconst maxWidth = this.settings.options?.width ?? 300;\n\n\t\t\trows.forEach((row) => {\n\t\t\t\tconst cell = table.createDiv({ cls: 'chem-cell' });\n\t\t\t\tconst svgcell = this.renderCell(row, cell);\n\t\t\t\tif (parseFloat(svgcell.style.width) > maxWidth)\n\t\t\t\t\tsvgcell.style.width = `${maxWidth.toString()}px`;\n\t\t\t});\n\n\t\t\ttable.style.gridTemplateColumns = `repeat(auto-fill, minmax(${\n\t\t\t\tthis.settings.options.width?.toString() ?? '300'\n\t\t\t}px, 1fr)`;\n\t\t}\n\t}\n\n\tprivate renderCell = (source: string, target: HTMLElement) => {\n\t\tconst svg = target.createSvg('svg');\n\t\tgDrawer.draw(\n\t\t\tsource,\n\t\t\tsvg,\n\t\t\tdocument.body.hasClass('theme-dark') &&\n\t\t\t\t!document.body.hasClass('theme-light')\n\t\t\t\t? this.settings.darkTheme\n\t\t\t\t: this.settings.lightTheme,\n\t\t\tnull,\n\t\t\t(error: object & { name: string; message: string }) => {\n\t\t\t\ttarget.empty();\n\t\t\t\tconst ErrorContainer = target.createEl('div');\n\t\t\t\tErrorContainer.createDiv('error-source').setText(\n\t\t\t\t\ti18n.t('errors.source.title', { source: source })\n\t\t\t\t);\n\t\t\t\tErrorContainer.createEl('br');\n\t\t\t\tconst ErrorInfo = ErrorContainer.createEl('details');\n\t\t\t\tErrorInfo.createEl('summary').setText(error.name);\n\t\t\t\tErrorInfo.createEl('div').setText(error.message);\n\n\t\t\t\tErrorContainer.style.wordBreak = `break-word`;\n\t\t\t\tErrorContainer.style.userSelect = `text`;\n\n\t\t\t\t//TODO: in multiline block, keep the width sync with the grid setting", "\t\t\t\tif (parseFloat(svgcell.style.width) > maxWidth)\n\t\t\t\t\tsvgcell.style.width = `${maxWidth.toString()}px`;\n\t\t\t});\n\n\t\t\ttable.style.gridTemplateColumns = `repeat(auto-fill, minmax(${\n\t\t\t\tthis.settings.options.width?.toString() ?? '300'\n\t\t\t}px, 1fr)`;\n\t\t}\n\t}\n\n\tprivate renderCell = (source: string, target: HTMLElement) => {\n\t\tconst svg = target.createSvg('svg');\n\t\tgDrawer.draw(\n\t\t\tsource,\n\t\t\tsvg,\n\t\t\tdocument.body.hasClass('theme-dark') &&\n\t\t\t\t!document.body.hasClass('theme-light')\n\t\t\t\t? this.settings.darkTheme\n\t\t\t\t: this.settings.lightTheme,\n\t\t\tnull,\n\t\t\t(error: object & { name: string; message: string }) => {\n\t\t\t\ttarget.empty();\n\t\t\t\tconst ErrorContainer = target.createEl('div');\n\t\t\t\tErrorContainer.createDiv('error-source').setText(\n\t\t\t\t\ti18n.t('errors.source.title', { source: source })\n\t\t\t\t);\n\t\t\t\tErrorContainer.createEl('br');\n\t\t\t\tconst ErrorInfo = ErrorContainer.createEl('details');\n\t\t\t\tErrorInfo.createEl('summary').setText(error.name);\n\t\t\t\tErrorInfo.createEl('div').setText(error.message);\n\n\t\t\t\tErrorContainer.style.wordBreak = `break-word`;\n\t\t\t\tErrorContainer.style.userSelect = `text`;\n\n\t\t\t\t//TODO: in multiline block, keep the width sync with the grid setting", "\t\t\t\tif (this.settings.options.scale == 0)\n\t\t\t\t\tErrorContainer.style.width = `${\n\t\t\t\t\t\tthis.settings?.imgWidth.toString() ?? '300'\n\t\t\t\t\t}px`;\n\t\t\t\telse if (\n\t\t\t\t\tErrorContainer.offsetWidth >\n\t\t\t\t\t(this.settings.options?.width ?? 300)\n\t\t\t\t) {\n\t\t\t\t\tErrorContainer.style.width = `${(\n\t\t\t\t\t\tthis.settings.options?.width ?? 300\n\t\t\t\t\t).toString()}px`;\n\t\t\t\t\tErrorContainer.style.height = `${(\n\t\t\t\t\t\tthis.settings.options?.height ?? 300\n\t\t\t\t\t).toString()}px`;\n\t\t\t\t}\n\t\t\t}\n\t\t);", "\t\tif (this.settings.options.scale == 0)\n\t\t\tsvg.style.width = `${this.settings.imgWidth.toString()}px`;\n\t\treturn svg;\n\t};\n\n\tasync onload() {\n\t\tthis.render();\n\t}\n\n\tonunload() {\n\t\tremoveBlock(this); // remove from global block list\n\t}\n}\n"]}
{"filename": "src/settings/base.ts", "chunked_list": ["// Global consts\nexport const SAMPLE_SMILES_1 = 'OC(=O)C(C)=CC1=CC=CC=C1';\nexport const SAMPLE_SMILES_2 =\n\t'OC(C(=O)O[C@H]1C[N+]2(CCCOC3=CC=CC=C3)CCC1CC2)(C1=CC=CS1)C1=CC=CS1';\nexport const SETTINGS_VERSION = 'v2';\n\n// Plugin settings\nexport interface ChemPluginSettings {\n\tversion: string;\n\tdarkTheme: string;\n\tlightTheme: string;\n\tsample1: string;\n\tsample2: string;\n\timgWidth: number;\n\toptions: Partial<SMILES_DRAWER_OPTIONS>;\n}\n\nexport const DEFAULT_SETTINGS: ChemPluginSettings = {\n\tversion: SETTINGS_VERSION,\n\tdarkTheme: 'dark',\n\tlightTheme: 'light',\n\tsample1: SAMPLE_SMILES_1,\n\tsample2: SAMPLE_SMILES_2,\n\timgWidth: 300,\n\toptions: {},\n};\n\n// Smiles-drawer options\n// Reference: https://smilesdrawer.surge.sh/playground.html", "export interface SMILES_DRAWER_OPTIONS {\n\twidth: number;\n\theight: number;\n\tscale: number;\n\tbondThickness: number;\n\tshortBondLength: number;\n\tbondSpacing: number;\n\tatomVisualization: 'default' | 'balls' | 'allballs';\n\tisomeric: boolean;\n\tdebug: boolean;\n\tterminalCarbons: boolean;\n\texplicitHydrogens: boolean;\n\toverlapSensitivity: number;\n\toverlapResolutionIterations: number;\n\tcompactDrawing: boolean;\n\tfontFamily: string;\n\tfontSizeLarge: number;\n\tfontSizeSmall: number;\n\tpadding: number;\n\texperimentalSSSR: boolean;\n\tkkThreshold: number;\n\tkkInnerThreshold: number;\n\tkkMaxIteration: number;\n\tkkMaxInnerIteration: number;\n\tkkMaxEnergy: number;\n\tthemes: object;\n}\n\nexport const DEFAULT_SD_OPTIONS: SMILES_DRAWER_OPTIONS = {\n\twidth: 300,\n\theight: 300,\n\tscale: 1.0,\n\tbondThickness: 1,\n\tshortBondLength: 0.8,\n\tbondSpacing: 5.1,\n\tatomVisualization: 'default',\n\tisomeric: true,\n\tdebug: false,\n\tterminalCarbons: false,\n\texplicitHydrogens: true,\n\toverlapSensitivity: 0.42,\n\toverlapResolutionIterations: 1,\n\tcompactDrawing: false,\n\tfontFamily: 'Arial, Helvetica, sans-serif',\n\tfontSizeLarge: 11,\n\tfontSizeSmall: 3,\n\tpadding: 2,\n\texperimentalSSSR: true,\n\tkkThreshold: 0.1,\n\tkkInnerThreshold: 0.1,\n\tkkMaxIteration: 20000,\n\tkkMaxInnerIteration: 50,\n\tkkMaxEnergy: 1000000000,\n\tthemes: {\n\t\tdark: {\n\t\t\tC: '#fff',\n\t\t\tO: '#e74c3c',\n\t\t\tN: '#3498db',\n\t\t\tF: '#27ae60',\n\t\t\tCL: '#16a085',\n\t\t\tBR: '#d35400',\n\t\t\tI: '#8e44ad',\n\t\t\tP: '#d35400',\n\t\t\tS: '#f1c40f',\n\t\t\tB: '#e67e22',\n\t\t\tSI: '#e67e22',\n\t\t\tH: '#aaa',\n\t\t\tBACKGROUND: '#141414',\n\t\t},\n\t\tlight: {\n\t\t\tC: '#222',\n\t\t\tO: '#e74c3c',\n\t\t\tN: '#3498db',\n\t\t\tF: '#27ae60',\n\t\t\tCL: '#16a085',\n\t\t\tBR: '#d35400',\n\t\t\tI: '#8e44ad',\n\t\t\tP: '#d35400',\n\t\t\tS: '#f1c40f',\n\t\t\tB: '#e67e22',\n\t\t\tSI: '#e67e22',\n\t\t\tH: '#666',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\toldschool: {\n\t\t\tC: '#000',\n\t\t\tO: '#000',\n\t\t\tN: '#000',\n\t\t\tF: '#000',\n\t\t\tCL: '#000',\n\t\t\tBR: '#000',\n\t\t\tI: '#000',\n\t\t\tP: '#000',\n\t\t\tS: '#000',\n\t\t\tB: '#000',\n\t\t\tSI: '#000',\n\t\t\tH: '#000',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\t'oldschool-dark': {\n\t\t\tC: '#fff',\n\t\t\tO: '#fff',\n\t\t\tN: '#fff',\n\t\t\tF: '#fff',\n\t\t\tCL: '#fff',\n\t\t\tBR: '#fff',\n\t\t\tI: '#fff',\n\t\t\tP: '#fff',\n\t\t\tS: '#fff',\n\t\t\tB: '#fff',\n\t\t\tSI: '#fff',\n\t\t\tH: '#fff',\n\t\t\tBACKGROUND: '#000',\n\t\t},\n\t\tsolarized: {\n\t\t\tC: '#586e75',\n\t\t\tO: '#dc322f',\n\t\t\tN: '#268bd2',\n\t\t\tF: '#859900',\n\t\t\tCL: '#16a085',\n\t\t\tBR: '#cb4b16',\n\t\t\tI: '#6c71c4',\n\t\t\tP: '#d33682',\n\t\t\tS: '#b58900',\n\t\t\tB: '#2aa198',\n\t\t\tSI: '#2aa198',\n\t\t\tH: '#657b83',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\t'solarized-dark': {\n\t\t\tC: '#93a1a1',\n\t\t\tO: '#dc322f',\n\t\t\tN: '#268bd2',\n\t\t\tF: '#859900',\n\t\t\tCL: '#16a085',\n\t\t\tBR: '#cb4b16',\n\t\t\tI: '#6c71c4',\n\t\t\tP: '#d33682',\n\t\t\tS: '#b58900',\n\t\t\tB: '#2aa198',\n\t\t\tSI: '#2aa198',\n\t\t\tH: '#839496',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\tmatrix: {\n\t\t\tC: '#678c61',\n\t\t\tO: '#2fc079',\n\t\t\tN: '#4f7e7e',\n\t\t\tF: '#90d762',\n\t\t\tCL: '#82d967',\n\t\t\tBR: '#23755a',\n\t\t\tI: '#409931',\n\t\t\tP: '#c1ff8a',\n\t\t\tS: '#faff00',\n\t\t\tB: '#50b45a',\n\t\t\tSI: '#409931',\n\t\t\tH: '#426644',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\tgithub: {\n\t\t\tC: '#24292f',\n\t\t\tO: '#cf222e',\n\t\t\tN: '#0969da',\n\t\t\tF: '#2da44e',\n\t\t\tCL: '#6fdd8b',\n\t\t\tBR: '#bc4c00',\n\t\t\tI: '#8250df',\n\t\t\tP: '#bf3989',\n\t\t\tS: '#d4a72c',\n\t\t\tB: '#fb8f44',\n\t\t\tSI: '#bc4c00',\n\t\t\tH: '#57606a',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\tcarbon: {\n\t\t\tC: '#161616',\n\t\t\tO: '#da1e28',\n\t\t\tN: '#0f62fe',\n\t\t\tF: '#198038',\n\t\t\tCL: '#007d79',\n\t\t\tBR: '#fa4d56',\n\t\t\tI: '#8a3ffc',\n\t\t\tP: '#ff832b',\n\t\t\tS: '#f1c21b',\n\t\t\tB: '#8a3800',\n\t\t\tSI: '#e67e22',\n\t\t\tH: '#525252',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\tcyberpunk: {\n\t\t\tC: '#ea00d9',\n\t\t\tO: '#ff3131',\n\t\t\tN: '#0abdc6',\n\t\t\tF: '#00ff9f',\n\t\t\tCL: '#00fe00',\n\t\t\tBR: '#fe9f20',\n\t\t\tI: '#ff00ff',\n\t\t\tP: '#fe7f00',\n\t\t\tS: '#fcee0c',\n\t\t\tB: '#ff00ff',\n\t\t\tSI: '#ffffff',\n\t\t\tH: '#913cb1',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t\tgruvbox: {\n\t\t\tC: '#665c54',\n\t\t\tO: '#cc241d',\n\t\t\tN: '#458588',\n\t\t\tF: '#98971a',\n\t\t\tCL: '#79740e',\n\t\t\tBR: '#d65d0e',\n\t\t\tI: '#b16286',\n\t\t\tP: '#af3a03',\n\t\t\tS: '#d79921',\n\t\t\tB: '#689d6a',\n\t\t\tSI: '#427b58',\n\t\t\tH: '#7c6f64',\n\t\t\tBACKGROUND: '#fbf1c7',\n\t\t},\n\t\t'gruvbox-dark': {\n\t\t\tC: '#ebdbb2',\n\t\t\tO: '#cc241d',\n\t\t\tN: '#458588',\n\t\t\tF: '#98971a',\n\t\t\tCL: '#b8bb26',\n\t\t\tBR: '#d65d0e',\n\t\t\tI: '#b16286',\n\t\t\tP: '#fe8019',\n\t\t\tS: '#d79921',\n\t\t\tB: '#8ec07c',\n\t\t\tSI: '#83a598',\n\t\t\tH: '#bdae93',\n\t\t\tBACKGROUND: '#282828',\n\t\t},\n\t\tcustom: {\n\t\t\tC: '#222',\n\t\t\tO: '#e74c3c',\n\t\t\tN: '#3498db',\n\t\t\tF: '#27ae60',\n\t\t\tCL: '#16a085',\n\t\t\tBR: '#d35400',\n\t\t\tI: '#8e44ad',\n\t\t\tP: '#d35400',\n\t\t\tS: '#f1c40f',\n\t\t\tB: '#e67e22',\n\t\t\tSI: '#e67e22',\n\t\t\tH: '#666',\n\t\t\tBACKGROUND: '#fff',\n\t\t},\n\t},\n};\n\nexport const themeList = {\n\tlight: 'Light',\n\tdark: 'Dark',\n\toldschool: 'Oldschool',\n\t'oldschool-dark': 'Oldschool Dark',\n\tsolarized: 'Solarized',\n\t'solarized-dark': 'Solarized Dark',\n\tmatrix: 'Matrix',\n\tgithub: 'GitHub',\n\tcarbon: 'Carbon',\n\tcyberpunk: 'Cyberpunk',\n\tgruvbox: 'Gruvbox',\n\t'gruvbox-dark': 'Gruvbox Dark',\n};\n"]}
{"filename": "src/settings/LivePreview.ts", "chunked_list": ["import { ChemPluginSettings } from '../settings/base';\nimport { gDrawer } from 'src/global/drawer';\nimport { i18n } from 'src/lib/i18n';\n\nexport class LivePreview {\n\tcontainer: HTMLDivElement;\n\tlightCard: HTMLDivElement;\n\tdarkCard: HTMLDivElement;\n\tsettings: ChemPluginSettings;\n\n\tconstructor(\n\t\tprivate readonly el: HTMLElement,\n\t\tprivate readonly argSettings: ChemPluginSettings\n\t) {\n\t\tthis.container = this.el.createEl('div');\n\t\tthis.container.style.display = `flex`;\n\t\tthis.container.style.flexWrap = `wrap`;\n\t\tthis.container.style.justifyContent = `center`;\n\n\t\tthis.lightCard = this.container.createEl('div', {\n\t\t\tcls: 'chemcard theme-light',\n\t\t});\n\t\tthis.darkCard = this.container.createEl('div', {\n\t\t\tcls: 'chemcard theme-dark',\n\t\t});\n\n\t\tthis.settings = this.argSettings;\n\t}\n\n\trender = () => {\n\t\tthis.lightCard.empty();\n\t\tconst lightWidth = this.renderCell(\n\t\t\tthis.settings.sample1,\n\t\t\tthis.lightCard,\n\t\t\tthis.settings.lightTheme\n\t\t);\n\n\t\tthis.darkCard.empty();\n\t\tconst darkWidth = this.renderCell(\n\t\t\tthis.settings.sample2,\n\t\t\tthis.darkCard,\n\t\t\tthis.settings.darkTheme\n\t\t);\n", "\t\tif (this.settings.options.scale == 0)\n\t\t\tthis.container.style.gridTemplateColumns = `repeat(auto-fill, minmax(${\n\t\t\t\tthis.settings?.imgWidth.toString() ?? '300'\n\t\t\t}px, 1fr)`;\n\t\telse\n\t\t\tthis.container.style.gridTemplateColumns = `repeat(auto-fill, minmax(${(lightWidth >\n\t\t\tdarkWidth\n\t\t\t\t? lightWidth\n\t\t\t\t: darkWidth\n\t\t\t).toString()}px, 1fr)`;\n\t};\n\n\tupdateSettings = (argSettings: ChemPluginSettings) => {\n\t\tthis.settings = argSettings;\n\t};\n\n\tprivate renderCell = (\n\t\tsource: string,\n\t\ttarget: HTMLElement,\n\t\tstyle: string\n\t) => {\n\t\tconst svg = target.createSvg('svg');\n\t\tgDrawer.draw(\n\t\t\tsource,\n\t\t\tsvg,\n\t\t\tstyle,\n\t\t\tnull,\n\t\t\t(error: object & { name: string; message: string }) => {\n\t\t\t\ttarget.empty();\n\t\t\t\tconst ErrorContainer = target.createEl('div');\n\t\t\t\tErrorContainer.createDiv('error-source').setText(\n\t\t\t\t\ti18n.t('errors.source.title', { source: source })\n\t\t\t\t);\n\t\t\t\tErrorContainer.createEl('br');\n\t\t\t\tconst ErrorInfo = ErrorContainer.createEl('details');\n\t\t\t\tErrorInfo.createEl('summary').setText(error.name);\n\t\t\t\tErrorInfo.createEl('div').setText(error.message);\n\n\t\t\t\tErrorContainer.style.wordBreak = `break-word`;\n\t\t\t\tErrorContainer.style.userSelect = `text`;\n\t\t\t\tErrorContainer.style.display = `grid`;\n\t\t\t\tErrorContainer.style.alignContent = `center`;", "\t\t\t\tif (this.settings.options.scale == 0)\n\t\t\t\t\tErrorContainer.style.width = `${\n\t\t\t\t\t\tthis.settings?.imgWidth.toString() ?? '300'\n\t\t\t\t\t}px`;\n\t\t\t\telse if (\n\t\t\t\t\tErrorContainer.offsetWidth >\n\t\t\t\t\t(this.settings.options?.width ?? 300)\n\t\t\t\t) {\n\t\t\t\t\tErrorContainer.style.width = `${(\n\t\t\t\t\t\tthis.settings.options?.width ?? 300\n\t\t\t\t\t).toString()}px`;\n\t\t\t\t\tErrorContainer.style.height = `${(\n\t\t\t\t\t\tthis.settings.options?.height ?? 300\n\t\t\t\t\t).toString()}px`;\n\t\t\t\t}\n\t\t\t}\n\t\t);", "\t\tif (this.settings.options.scale == 0)\n\t\t\tsvg.style.width = `${\n\t\t\t\tthis.settings?.imgWidth.toString() ?? '300'\n\t\t\t}px`;\n\t\telse if (\n\t\t\tparseFloat(svg.style.width) > (this.settings.options?.width ?? 300)\n\t\t) {\n\t\t\tsvg.style.width = `${(\n\t\t\t\tthis.settings.options?.width ?? 300\n\t\t\t).toString()}px`;\n\t\t\tsvg.style.height = `${(\n\t\t\t\tthis.settings.options?.height ?? 300\n\t\t\t).toString()}px`;\n\t\t}\n\t\treturn parseFloat(svg.style.width);\n\t};\n}\n"]}
{"filename": "src/settings/update.ts", "chunked_list": ["interface ChemPluginSettingsV1 {\n\tdarkTheme: string;\n\tlightTheme: string;\n\tsample: string;\n\twidth: string;\n}\n\n// const DEFAULT_SETTINGS_V1: ChemPluginSettingsV1 = {\n// \tdarkTheme: 'dark',\n// \tlightTheme: 'light',\n// \tsample: 'CC(=O)NC1=C-C=C-C=C1-C(=O)O',\n// \twidth: '300',\n// };\n", "interface ChemPluginSettingsV2 {\n\tversion: string;\n\tdarkTheme: string;\n\tlightTheme: string;\n\tsample1: string;\n\tsample2: string;\n\timgWidth: number;\n\toptions: object;\n}\n\nconst DEFAULT_SETTINGS_V2: ChemPluginSettingsV2 = {\n\tversion: 'v2',\n\tdarkTheme: 'dark',\n\tlightTheme: 'light',\n\tsample1: 'OC(=O)C(C)=CC1=CC=CC=C1',\n\tsample2:\n\t\t'OC(C(=O)O[C@H]1C[N+]2(CCCOC3=CC=CC=C3)CCC1CC2)(C1=CC=CS1)C1=CC=CS1',\n\timgWidth: 300,\n\toptions: {},\n};\n\nexport const updateSettingsVersion = (stale: ChemPluginSettingsV1) => {\n\tconst result = { ...DEFAULT_SETTINGS_V2 };\n\tresult.darkTheme = stale.darkTheme;\n\tresult.lightTheme = stale.lightTheme;\n\tresult.sample1 = stale.sample;\n\tresult.imgWidth = parseInt(stale.width);\n\treturn result;\n};\n"]}
{"filename": "src/settings/SettingTab.ts", "chunked_list": ["import { App, PluginSettingTab, Setting, SliderComponent } from 'obsidian';\n\nimport ChemPlugin from '../main';\nimport {\n\tDEFAULT_SD_OPTIONS,\n\tSAMPLE_SMILES_1,\n\tSAMPLE_SMILES_2,\n\tthemeList,\n} from './base';\n", "} from './base';\n\nimport { setDrawer } from 'src/global/drawer';\nimport { refreshBlocks } from 'src/global/blocks';\nimport { LivePreview } from './LivePreview';\n\nimport { i18n } from 'src/lib/i18n';\n\n// Reference: https://smilesdrawer.surge.sh/playground.html\n\nexport class ChemSettingTab extends PluginSettingTab {\n\tplugin: ChemPlugin;\n\n\tconstructor({ app, plugin }: { app: App; plugin: ChemPlugin }) {\n\t\tsuper(app, plugin);\n\t\tthis.plugin = plugin;\n\t}\n\n\tdisplay(): void {\n\t\tconst { containerEl } = this;\n\n\t\tcontainerEl.empty();\n\n\t\tconst scaleSetting = new Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.scale.name'))\n\t\t\t.setDesc(i18n.t('settings.scale.description'))\n\t\t\t.addExtraButton((button) => {\n\t\t\t\tbutton\n\t\t\t\t\t.setIcon('rotate-ccw')\n\t\t\t\t\t.setTooltip(i18n.t('settings.scale.description'))\n\t\t\t\t\t.onClick(async () => {\n\t\t\t\t\t\tthis.plugin.settings.options.scale = 1;\n\t\t\t\t\t\tscaleSlider.setValue(50);\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tsetDrawer({\n\t\t\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t\tunifyBondLength();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\tconst scaleLabel = scaleSetting.controlEl.createDiv('slider-readout');\n\t\tscaleLabel.setText(\n\t\t\t(this.plugin.settings.options.scale ?? 1.0).toFixed(2).toString()\n\t\t);\n\n\t\tconst scaleSlider = new SliderComponent(scaleSetting.controlEl)\n\t\t\t.setValue(50 * (this.plugin.settings.options.scale ?? 1.0))\n\t\t\t.setLimits(0.0, 100, 0.5)\n\t\t\t.onChange(async (value) => {\n\t\t\t\tthis.plugin.settings.options.scale = value / 50;\n\t\t\t\tscaleLabel.setText((value / 50).toFixed(2).toString());\n\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\tsetDrawer({\n\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t});\n\t\t\t\tonSettingsChange();", "// Reference: https://smilesdrawer.surge.sh/playground.html\n\nexport class ChemSettingTab extends PluginSettingTab {\n\tplugin: ChemPlugin;\n\n\tconstructor({ app, plugin }: { app: App; plugin: ChemPlugin }) {\n\t\tsuper(app, plugin);\n\t\tthis.plugin = plugin;\n\t}\n\n\tdisplay(): void {\n\t\tconst { containerEl } = this;\n\n\t\tcontainerEl.empty();\n\n\t\tconst scaleSetting = new Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.scale.name'))\n\t\t\t.setDesc(i18n.t('settings.scale.description'))\n\t\t\t.addExtraButton((button) => {\n\t\t\t\tbutton\n\t\t\t\t\t.setIcon('rotate-ccw')\n\t\t\t\t\t.setTooltip(i18n.t('settings.scale.description'))\n\t\t\t\t\t.onClick(async () => {\n\t\t\t\t\t\tthis.plugin.settings.options.scale = 1;\n\t\t\t\t\t\tscaleSlider.setValue(50);\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tsetDrawer({\n\t\t\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t\tunifyBondLength();\n\t\t\t\t\t});\n\t\t\t});\n\n\t\tconst scaleLabel = scaleSetting.controlEl.createDiv('slider-readout');\n\t\tscaleLabel.setText(\n\t\t\t(this.plugin.settings.options.scale ?? 1.0).toFixed(2).toString()\n\t\t);\n\n\t\tconst scaleSlider = new SliderComponent(scaleSetting.controlEl)\n\t\t\t.setValue(50 * (this.plugin.settings.options.scale ?? 1.0))\n\t\t\t.setLimits(0.0, 100, 0.5)\n\t\t\t.onChange(async (value) => {\n\t\t\t\tthis.plugin.settings.options.scale = value / 50;\n\t\t\t\tscaleLabel.setText((value / 50).toFixed(2).toString());\n\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\tsetDrawer({\n\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t});\n\t\t\t\tonSettingsChange();", "\t\t\t\tif (value == 0) unifyImageWidth();\n\t\t\t\telse unifyBondLength();\n\t\t\t});\n\n\t\tconst widthSettings = new Setting(containerEl);\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.theme.light.name'))\n\t\t\t.setDesc(i18n.t('settings.theme.light.description'))\n\t\t\t.addDropdown((dropdown) =>\n\t\t\t\tdropdown\n\t\t\t\t\t.addOptions(themeList)\n\t\t\t\t\t.setValue(this.plugin.settings.lightTheme)\n\t\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.lightTheme = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t})\n\t\t\t);\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.theme.dark.name'))\n\t\t\t.setDesc(i18n.t('settings.theme.dark.description'))\n\t\t\t.addDropdown((dropdown) =>\n\t\t\t\tdropdown\n\t\t\t\t\t.addOptions(themeList)\n\t\t\t\t\t.setValue(this.plugin.settings.darkTheme)\n\t\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.darkTheme = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t})\n\t\t\t);\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.preview.title'))\n\t\t\t.setHeading();\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.preview.sample.name'))\n\t\t\t.setDesc(i18n.t('settings.preview.sample.description'))\n\t\t\t.addText((text) =>\n\t\t\t\ttext\n\t\t\t\t\t.setPlaceholder(SAMPLE_SMILES_1)\n\t\t\t\t\t.setValue(this.plugin.settings.sample1)\n\t\t\t\t\t.onChange(async (value) => {", "\t\t\t\t\t\tif (value == '') {\n\t\t\t\t\t\t\tvalue = SAMPLE_SMILES_1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.plugin.settings.sample1 = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t})\n\t\t\t)\n\t\t\t.addText((text) =>\n\t\t\t\ttext\n\t\t\t\t\t.setPlaceholder(SAMPLE_SMILES_2)\n\t\t\t\t\t.setValue(this.plugin.settings.sample2)\n\t\t\t\t\t.onChange(async (value) => {", "\t\t\t\t\t\tif (value == '') {\n\t\t\t\t\t\t\tvalue = SAMPLE_SMILES_2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.plugin.settings.sample2 = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t})\n\t\t\t);\n\n\t\tconst preview = new LivePreview(containerEl, this.plugin.settings);\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.advanced.title'))\n\t\t\t.setHeading();\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.advanced.compact-drawing.name'))\n\t\t\t.setDesc(i18n.t('settings.advanced.compact-drawing.description'))\n\t\t\t.addToggle((toggle) =>\n\t\t\t\ttoggle\n\t\t\t\t\t.setValue(\n\t\t\t\t\t\tthis.plugin.settings.options?.compactDrawing ?? false\n\t\t\t\t\t)\n\t\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.options.compactDrawing = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tsetDrawer({\n\t\t\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t})\n\t\t\t);\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(i18n.t('settings.advanced.terminal-carbons.name'))\n\t\t\t.setDesc(i18n.t('settings.advanced.terminal-carbons.description'))\n\t\t\t.addToggle((toggle) =>\n\t\t\t\ttoggle\n\t\t\t\t\t.setValue(\n\t\t\t\t\t\tthis.plugin.settings.options?.terminalCarbons ?? false\n\t\t\t\t\t)\n\t\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.options.terminalCarbons = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tsetDrawer({\n\t\t\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t})\n\t\t\t);\n\n\t\tconst onSettingsChange = () => {\n\t\t\tpreview.updateSettings(this.plugin.settings);\n\t\t\tpreview.render();\n\t\t};\n\n\t\tconst unifyBondLength = () => {\n\t\t\twidthSettings.controlEl.empty();\n\t\t\twidthSettings\n\t\t\t\t.setName(i18n.t('settings.unify-bond-length.name'))\n\t\t\t\t.setDesc(i18n.t('settings.unify-bond-length.description'))\n\t\t\t\t.addText((text) =>\n\t\t\t\t\ttext\n\t\t\t\t\t\t.setValue(\n\t\t\t\t\t\t\tthis.plugin.settings.options.width?.toString() ??\n\t\t\t\t\t\t\t\t'300'\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.onChange(async (value) => {", "\t\t\t\t\t\t\tif (value == '') {\n\t\t\t\t\t\t\t\tvalue = '300';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.plugin.settings.options.width =\n\t\t\t\t\t\t\t\tparseInt(value);\n\t\t\t\t\t\t\tthis.plugin.settings.options.height =\n\t\t\t\t\t\t\t\tparseInt(value);\n\t\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\t\tsetDrawer({\n\t\t\t\t\t\t\t\t...DEFAULT_SD_OPTIONS,\n\t\t\t\t\t\t\t\t...this.plugin.settings.options,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t\t})\n\t\t\t\t);\n\t\t};\n\n\t\tconst unifyImageWidth = () => {\n\t\t\twidthSettings.controlEl.empty();\n\t\t\twidthSettings\n\t\t\t\t.setName(i18n.t('settings.unify-bond-length.name'))\n\t\t\t\t.setDesc(i18n.t('settings.unify-bond-length.description'))\n\t\t\t\t.addText((text) => {\n\t\t\t\t\ttext.setValue(\n\t\t\t\t\t\tthis.plugin.settings?.imgWidth.toString() ?? '300'\n\t\t\t\t\t)\n\t\t\t\t\t\t.setPlaceholder('300')\n\t\t\t\t\t\t.onChange(async (value) => {", "\t\t\t\t\t\t\tif (value == '') {\n\t\t\t\t\t\t\t\tvalue = '300';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.plugin.settings.imgWidth = parseInt(value);\n\t\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\t\tonSettingsChange();\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t};\n\n\t\t// initialize\n\t\tpreview.render();", "\t\tif ((this.plugin.settings.options?.scale ?? 1) == 0) unifyImageWidth();\n\t\telse unifyBondLength();\n\t}\n\n\thide(): void {\n\t\trefreshBlocks();\n\t}\n}\n"]}
{"filename": "src/global/drawer.ts", "chunked_list": ["import { DEFAULT_SD_OPTIONS, SMILES_DRAWER_OPTIONS } from 'src/settings/base';\nimport SmilesDrawer from 'smiles-drawer';\n\nexport let gDrawer = new SmilesDrawer.SmiDrawer(DEFAULT_SD_OPTIONS);\n\nexport const setDrawer = (options: Partial<SMILES_DRAWER_OPTIONS>) => {\n\tgDrawer = new SmilesDrawer.SmiDrawer({ ...DEFAULT_SD_OPTIONS, ...options });\n};\n\nexport const clearDrawer = () => {", "\nexport const clearDrawer = () => {\n\tgDrawer = {};\n};\n"]}
{"filename": "src/global/blocks.ts", "chunked_list": ["import { SmilesBlock } from '../SmilesBlock';\n\nexport let gBlocks: SmilesBlock[];\n\nexport const setBlocks = () => {\n\tgBlocks = new Array<SmilesBlock>();\n};\n\nexport const addBlock = (block: SmilesBlock) => {\n\tgBlocks.push(block);", "export const addBlock = (block: SmilesBlock) => {\n\tgBlocks.push(block);\n};\n\nexport const removeBlock = (block: SmilesBlock) => {\n\tif (gBlocks.indexOf(block) != -1) gBlocks.splice(gBlocks.indexOf(block), 1);\n};\n\n// TODO: late refresh\n// this manager will get all the living instances\n// however, we only want to see the instances refreshed when the file is activated\n// file info is in the ctx of the block, and activate attribute is in the leaf metadata\nexport const refreshBlocks = () => {\n\tgBlocks.forEach((block) => {\n\t\tblock.render();\n\t});\n};\n\nexport const clearBlocks = () => {\n\tgBlocks.forEach((block) => {\n\t\tremoveBlock(block);\n\t});\n};\n"]}
{"filename": "src/lib/i18n.ts", "chunked_list": ["import i18next from 'i18next';\n\nimport * as en from 'src/lib/translations/en.json';\nimport * as zh_CN from 'src/lib/translations/zh-CN.json';\n\nimport { moment } from 'obsidian';\n\ni18next.init({\n\tlng: moment.locale(),\n\tfallbackLng: {", "\tlng: moment.locale(),\n\tfallbackLng: {\n\t\t'zh-TW': ['zh-CN', 'en'],\n\t\tdefault: ['en'],\n\t},\n\tresources: {\n\t\ten: en,\n\t\t'zh-CN': zh_CN,\n\t},\n});", "\t},\n});\n\nexport const i18n = i18next;\n"]}
