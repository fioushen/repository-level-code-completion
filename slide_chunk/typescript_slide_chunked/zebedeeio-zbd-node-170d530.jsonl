{"filename": "jest.config.ts", "chunked_list": ["module.exports = {\n    preset: 'ts-jest', \n    testEnvironment: 'node', \n    coveragePathIgnorePatterns: ['/node_modules/']\n  };"]}
{"filename": "__tests__/get-btcusd.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\nimport { zbd } from '../src/zbd'; \n\nconst ZBD = new zbd(TEST_API_KEY); \n\ndescribe('getBTCUSD', () => {\n  it('should fetch BTC to USD exchange rate data successfully', async () => {\n    const response = await ZBD.getBtcUsdExchangeRate();\n\n    expect(response).toBeDefined();", "\n    expect(response).toBeDefined();\n    expect(response.success).toBe(true);\n    expect(response.data).toHaveProperty('btcUsdPrice');\n    expect(response.data).toHaveProperty('btcUsdTimestamp');\n    expect(response.message).toBe('Successfully retrieved BTC USD price ticker information.');\n  });\n});\n", ""]}
{"filename": "__tests__/create-charge.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\nimport { zbd } from '../src/zbd'; \n\nconst ZBD = new zbd(TEST_API_KEY); \n\ndescribe('createCharge', () => {\n  it('should create a charge successfully', async () => {\n    const chargeData = {\n      amount: '10000',\n      expiresIn: 300,", "      amount: '10000',\n      expiresIn: 300,\n      description: 'My Charge Description',\n      callbackUrl: 'https://your-website.com/callback',\n      internalId: '11af01d092444a317cb33faa6b8304b8',\n    };\n\n    const response = await ZBD.createCharge(chargeData);\n\n    expect(response).toBeDefined();", "\n    expect(response).toBeDefined();\n    expect(response.success).toBe(true);\n    expect(response.message).toBe('Charge created.');\n\n    const { data } = response;\n    expect(data.unit).toBe('msats');\n    expect(data.amount).toBe(chargeData.amount);\n    expect(data.description).toBe(chargeData.description);\n    expect(data.internalId).toBe(chargeData.internalId);", "    expect(data.description).toBe(chargeData.description);\n    expect(data.internalId).toBe(chargeData.internalId);\n    expect(data.callbackUrl).toBe(chargeData.callbackUrl);\n\n    expect(data).toHaveProperty('status');\n    expect(data).toHaveProperty('createdAt');\n    expect(data).toHaveProperty('expiresAt');\n    expect(data).toHaveProperty('id');\n    expect(data).toHaveProperty('invoice');\n  });", "    expect(data).toHaveProperty('invoice');\n  });\n});\n"]}
{"filename": "__tests__/get-wallet.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\nimport { zbd } from '../src/zbd'; \n\nconst ZBD = new zbd(TEST_API_KEY); \n\ndescribe('getWallet', () => {\n  it('should fetch wallet data successfully', async () => {\n    const response = await ZBD.getWallet();\n\n    expect(response).toBeDefined();", "\n    expect(response).toBeDefined();\n    expect(response.data).toHaveProperty('unit');\n    expect(response.data).toHaveProperty('balance');\n    expect(response.message).toBe('Successfully retrieved Wallet.');\n  });\n\n});\n", ""]}
{"filename": "__tests__/get-payment.test.ts", "chunked_list": ["import { TEST_API_KEY } from '../src/constants';\nimport { zbd } from '../src/zbd'; \n\nconst ZBD = new zbd(TEST_API_KEY); \n\ndescribe('getPayment', () => {\n  // it('should fetch payment transaction details successfully', async () => {\n  //   const paymentId = ''; // provide valid paymentId\n\n  //   const data = await ZBD.getPayment(paymentId);", "\n  //   const data = await ZBD.getPayment(paymentId);\n  //   console.log(data)\n\n  //   expect(data).toBeDefined();\n  //   expect(data.paymentId).toBe(paymentId); \n  // });\n\n  it('should return an error when an invalid payment ID is provided', async () => {\n    const invalidPaymentId = 'invalid-id';", "  it('should return an error when an invalid payment ID is provided', async () => {\n    const invalidPaymentId = 'invalid-id';\n\n    try {\n      await ZBD.getPayment(invalidPaymentId);\n    } catch (error) {\n        if (error instanceof Error) { \n          console.log(error)\n          expect(error.message).toBe('No Payment records found with this ID.')\n        }\n      \n    }\n  });\n});"]}
{"filename": "src/constants.ts", "chunked_list": ["// BaseUrl\nexport const API_URL = 'https://api.zebedee.io';\n\n// Test API Key\nexport const TEST_API_KEY  = \"8qJxln3JVJsQM0IOJhfnJopO0JSiLdlK\"\n\n// Endpoints\nexport const API = {\n  // Wallet\n  WALLET_ENDPOINT: '/v0/wallet',", "  // Wallet\n  WALLET_ENDPOINT: '/v0/wallet',\n\n  // Charges (Pay Ins)\n  CHARGES_ENDPOINT: '/v0/charges',\n  STATIC_CHARGES_ENDPOINT: '/v0/static-charges',\n\n  // Payments (Pay Outs)\n  PAYMENTS_ENDPOINT: '/v0/payments',\n", "  PAYMENTS_ENDPOINT: '/v0/payments',\n\n  // Lightning Address\n  SEND_LN_ADDRESS_PAYMENT_ENDPOINT: '/v0/ln-address/send-payment',\n  VALIDATE_LN_ADDRESS_ENDPOINT: '/v0/ln-address/validate',\n  CREATE_CHARGE_FROM_LN_ADDRESS_ENDPOINT: '/v0/ln-address/fetch-charge',\n\n  // ZBD Gamertags\n  SEND_GAMERTAG_PAYMENT_ENDPOINT: '/v0/gamertag/send-payment',\n  GET_GAMERTAG_PAYMENT_ENDPOINT: '/v0/gamertag/transaction',", "  SEND_GAMERTAG_PAYMENT_ENDPOINT: '/v0/gamertag/send-payment',\n  GET_GAMERTAG_PAYMENT_ENDPOINT: '/v0/gamertag/transaction',\n  GET_USERID_FROM_GAMERTAG_ENDPOINT: '/v0/user-id/gamertag',\n  GET_GAMERTAG_FROM_USERID_ENDPOINT: '/v0/gamertag/user-id',\n  CREATE_CHARGE_FROM_GAMERTAG_ENDPOINT: '/v0/gamertag/charges',\n\n  // Withdrawal Requests\n  WITHDRAWAL_REQUESTS_ENDPOINT: '/v0/withdrawal-requests',\n\n  // Keysend", "\n  // Keysend\n  KEYSEND_PAYMENT_ENDPOINT: '/v0/keysend-payment',\n\n  // Internal Transfers\n  INTERNAL_TRANSFER_ENDPOINT: '/v0/internal-transfer',\n\n  // Utilities\n  IS_SUPPORTED_REGION_ENDPOINT: '/v0/is-supported-region',\n  DECODE_INVOICE_ENDPOINT: '/v0/decode-invoice',", "  IS_SUPPORTED_REGION_ENDPOINT: '/v0/is-supported-region',\n  DECODE_INVOICE_ENDPOINT: '/v0/decode-invoice',\n  FETCH_ZBD_PROD_IPS_ENDPOINT: '/v0/prod-ips',\n  BTCUSD_PRICE_TICKER_ENDPOINT: '/v0/btcusd',\n}    \n"]}
{"filename": "src/utils.ts", "chunked_list": ["export const cleanup = (obj: any) => {\n  const newObj = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (value !== null && value !== undefined) {\n      // @ts-ignore\n      newObj[key] = value;\n    }\n  }\n\n  return newObj;\n}\n", "export async function postData({\n  url,\n  body,\n  headers,\n}: {\n  url: string;\n  body: any;\n  headers?: any;\n}) {\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    body: JSON.stringify(cleanup(body)),\n  });\n", "  if (!response.ok) {\n    const errorBody = await response.json();\n    const error = {\n      status: response.status,\n      message: errorBody.message || 'API request failed',\n    };\n    \n\n    throw error;\n  }\n\n  const result = await response.json();\n  return result;\n}\n", "export async function patchData({\n  url,\n  body,\n  headers,\n}: {\n  url: string;\n  body: any;\n  headers?: any;\n}) {\n  const response = await fetch(url, {\n    method: \"PATCH\",\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    body: JSON.stringify(cleanup(body)),\n  });\n", "  if (!response.ok) {\n\n    const errorBody = await response.json();\n    const error = {\n      status: response.status,\n      message: errorBody.message || 'API request failed',\n    };\n\n    throw error;\n  }\n\n  const result = await response.json();\n  return result;\n}\n", "export async function getData({\n  url,\n  headers,\n}: {\n  url: string;\n  headers?: any;\n}) {\n  const response = await fetch(url, {\n    method: \"GET\",\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n  });\n", "  if (!response.ok) {\n\n    const errorBody = await response.json();\n    const error = {\n      status: response.status,\n      message: errorBody.message || 'API request failed',\n    };\n\n    throw error;\n  }\n\n  const result = await response.json();\n  return result;\n}"]}
{"filename": "src/index.ts", "chunked_list": ["export { zbd } from './zbd';"]}
{"filename": "src/zbd.ts", "chunked_list": ["import { API_URL, API } from './constants';\nimport { postData, getData, patchData } from './utils';\nimport {\n  ChargeOptionsType,\n  KeysendOptionsType,\n  ChargeDataResponseType,\n  WalletDataResponseType,\n  BTCUSDDataResponseType,\n  SendPaymentOptionsType,\n  DecodeChargeOptionsType,", "  SendPaymentOptionsType,\n  DecodeChargeOptionsType,\n  DecodeChargeResponseType,\n  ProdIPSDataResponseType,\n  StaticChargeOptionsType,\n  KeysendDataResponseType,\n  InternalTransferOptionsType,\n  StaticChargeDataResponseType,\n  WithdrawalRequestOptionsType,\n  SendGamertagPaymentOptionsType,", "  WithdrawalRequestOptionsType,\n  SendGamertagPaymentOptionsType,\n  InvoicePaymentDataResponseType,\n  SupportedRegionDataResponseType,\n  InternalTransferDataResponseType,\n  GetWithdrawalRequestDataResponseType,\n  CreateWithdrawalRequestDataResponseType,\n  FetchChargeFromGamertagOptionsType,\n  GamertagTransactionDataResponseType,\n  FetchUserIdByGamertagDataResponseType,", "  GamertagTransactionDataResponseType,\n  FetchUserIdByGamertagDataResponseType,\n  FetchGamertagByUserIdDataResponseType,\n  SendLightningAddressPaymentOptionsType,\n  FetchChargeFromGamertagDataResponseType,\n  ValidateLightningAddressDataResponseType,\n  SendLightningAddressPaymentDataResponseType,\n  CreateChargeFromLightningAddressOptionsType,\n  SendGamertagPaymentDataResponseType,\n  FetchChargeFromLightningAddressDataResponseType,", "  SendGamertagPaymentDataResponseType,\n  FetchChargeFromLightningAddressDataResponseType,\n} from './types/index';\n\nclass zbd {\n  apiBaseUrl: string;\n  apiCoreHeaders: {apikey: string };  \n\n  constructor(apiKey: string) {\n    this.apiBaseUrl = API_URL;\n    this.apiCoreHeaders = { apikey: apiKey };\n  }\n\n  async createCharge(options: ChargeOptionsType) {\n    const {\n      amount,\n      expiresIn,\n      internalId,\n      description,\n      callbackUrl,\n    } = options;\n\n    const response : ChargeDataResponseType = await postData({\n      url: `${API_URL}${API.CHARGES_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        expiresIn,\n        internalId,\n        description,\n        callbackUrl,\n      },\n    });\n\n    return response;\n  }\n\n  async getCharge(chargeId: string) {\n    const response: ChargeDataResponseType = await getData({\n      url: `${API_URL}${API.CHARGES_ENDPOINT}/${chargeId}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n      \n    return response;\n  }\n\n  async decodeCharge(options: DecodeChargeOptionsType) {\n    const { invoice } = options;\n\n    const response: DecodeChargeResponseType = await postData({\n      url: `${API_URL}${API.DECODE_INVOICE_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: { invoice },\n    });\n\n    return response;\n  }\n\n  async createWithdrawalRequest(options: WithdrawalRequestOptionsType) {    \n    const {\n      amount,\n      expiresIn,\n      internalId,\n      callbackUrl,\n      description,\n    } = options;\n\n    const response : CreateWithdrawalRequestDataResponseType = await postData({\n      url: `${API_URL}${API.WITHDRAWAL_REQUESTS_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        expiresIn,\n        internalId,\n        callbackUrl,\n        description,\n      },\n    });\n\n    return response;\n  }\n\n  async getWithdrawalRequest(withdrawalRequestId: string) {\n    const response : GetWithdrawalRequestDataResponseType = await getData({\n      url: `${API_URL}${API.WITHDRAWAL_REQUESTS_ENDPOINT}/${withdrawalRequestId}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n      \n    return response;\n  }\n\n  async validateLightningAddress(lightningAddress: string) {    \n    const response : ValidateLightningAddressDataResponseType = await getData({\n      url: `${API_URL}${API.VALIDATE_LN_ADDRESS_ENDPOINT}/${lightningAddress}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n  async sendLightningAddressPayment(options: SendLightningAddressPaymentOptionsType) {    \n    const {\n      amount,\n      comment,\n      lnAddress,\n      internalId,\n      callbackUrl,\n    } = options;\n\n    const response : SendLightningAddressPaymentDataResponseType = await postData({\n      url: `${API_URL}${API.SEND_LN_ADDRESS_PAYMENT_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        comment,\n        lnAddress,\n        internalId,\n        callbackUrl,\n      },\n    });\n\n    return response;\n  }\n\n  async createChargeFromLightningAddress(options: CreateChargeFromLightningAddressOptionsType) {    \n    const {\n      amount,\n      lnaddress,\n      lnAddress,\n      description,\n    } = options;\n\n\n    // Addressing issue on ZBD API where it accepts `lnaddress` property\n    // instead of `lnAddress` property as is standardized\n    let lightningAddress = lnaddress || lnAddress;\n\n    const response: FetchChargeFromLightningAddressDataResponseType = await postData({\n      url: `${API_URL}${API.CREATE_CHARGE_FROM_LN_ADDRESS_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        description,\n        lnaddress: lightningAddress,\n      },\n    });\n\n    return response;\n  }\n  \n  async getWallet() {\n    const response : WalletDataResponseType = await getData({\n      url: `${API_URL}${API.WALLET_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n      \n    return response;\n  }\n\n  async isSupportedRegion(ipAddress: string) {    \n    const response : SupportedRegionDataResponseType = await getData({\n      url: `${API_URL}${API.IS_SUPPORTED_REGION_ENDPOINT}/${ipAddress}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n      \n    return response;\n  }\n\n  async getZBDProdIps() {    \n    const response: ProdIPSDataResponseType = await getData({\n      url: `${API_URL}${API.FETCH_ZBD_PROD_IPS_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n  async getBtcUsdExchangeRate() {    \n    const response: BTCUSDDataResponseType = await getData({\n      url: `${API_URL}${API.BTCUSD_PRICE_TICKER_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n  async internalTransfer(options: InternalTransferOptionsType) {    \n    const { amount, receiverWalletId } = options;\n\n    const response: InternalTransferDataResponseType = await postData({\n      url: `${API_URL}${API.INTERNAL_TRANSFER_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        receiverWalletId,\n      },\n    });\n\n    return response;\n  }\n\n  async sendKeysendPayment(options: KeysendOptionsType) {    \n    const {\n      amount,\n      pubkey,\n      metadata,\n      tlvRecords,\n      callbackUrl,\n    } = options;\n\n    const response: KeysendDataResponseType = await postData({\n      url: `${API_URL}${API.KEYSEND_PAYMENT_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        pubkey,\n        metadata,\n        tlvRecords,\n        callbackUrl,\n      },\n    });\n\n    return response;\n  }\n\n  async sendPayment(options: SendPaymentOptionsType) {    \n    const {\n      amount,\n      invoice,\n      internalId,\n      description,\n      callbackUrl,\n    } = options;\n\n    const response : InvoicePaymentDataResponseType = await postData({\n      url: `${API_URL}${API.PAYMENTS_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        invoice,\n        internalId,\n        description,\n        callbackUrl,\n      },\n    });\n\n    return response; \n  }\n\n  async getPayment(paymentId: string) {    \n    const response = await getData({\n      url: `${API_URL}${API.PAYMENTS_ENDPOINT}/${paymentId}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n  async sendGamertagPayment(options: SendGamertagPaymentOptionsType) {    \n    const { amount, gamertag, description } = options;\n\n    const response: SendGamertagPaymentDataResponseType = await postData({\n      url: `${API_URL}${API.SEND_GAMERTAG_PAYMENT_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        gamertag,\n        description,\n      },\n    });\n\n    return response;\n  }\n\n  async getGamertagTransaction(transactionId: string) {    \n    const response: GamertagTransactionDataResponseType = await getData({\n      url: `${API_URL}${API.GET_GAMERTAG_PAYMENT_ENDPOINT}/${transactionId}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n  async getUserIdByGamertag(gamertag: string) {    \n    const response: FetchUserIdByGamertagDataResponseType = await getData({\n      url: `${API_URL}${API.GET_USERID_FROM_GAMERTAG_ENDPOINT}/${gamertag}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n  async getGamertagByUserId(userId: string) {    \n    const response: FetchGamertagByUserIdDataResponseType = await getData({\n      url: `${API_URL}${API.GET_GAMERTAG_FROM_USERID_ENDPOINT}/${userId}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n\n   async createGamertagCharge(options: FetchChargeFromGamertagOptionsType) {    \n    const {\n      amount,\n      gamertag,\n      internalId,\n      description,\n      callbackUrl,\n    } = options;\n\n    const response : FetchChargeFromGamertagDataResponseType = await postData({\n      url: `${API_URL}${API.CREATE_CHARGE_FROM_GAMERTAG_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        amount,\n        gamertag,\n        internalId,\n        description,\n        callbackUrl,\n      },\n    });\n\n    return response;\n  }\n\n  async createStaticCharge(options: StaticChargeOptionsType) {    \n    const {\n      minAmount,\n      maxAmount,\n      internalId,\n      description,\n      callbackUrl,\n      allowedSlots,\n      successMessage,\n    } = options;\n\n    const response : StaticChargeDataResponseType = await postData({\n      url: `${API_URL}${API.STATIC_CHARGES_ENDPOINT}`,\n      headers: { ...this.apiCoreHeaders },\n      body: {\n        minAmount,\n        maxAmount,\n        internalId,\n        callbackUrl,\n        description,\n        allowedSlots,\n        successMessage,\n      },\n    });\n\n    return response;\n  }\n\n  async updateStaticCharge(staticChargeId: string, updates: StaticChargeOptionsType) {    \n    const response = await patchData({\n      url: `${API_URL}${API.STATIC_CHARGES_ENDPOINT}/${staticChargeId}`,\n      headers: { ...this.apiCoreHeaders },\n      body: updates,\n    });\n\n    return response;\n  }\n\n  async getStaticCharge(staticChargeId: string) {    \n    const response = await getData({\n      url: `${API_URL}${API.STATIC_CHARGES_ENDPOINT}/${staticChargeId}`,\n      headers: { ...this.apiCoreHeaders },\n    });\n\n    return response;\n  }\n}\n\nexport { zbd };\n"]}
{"filename": "src/types/wallet.ts", "chunked_list": ["export interface WalletDataResponseType {\n  data: {\n    balance: string;\n    unit: string;\n  }\n  message: string;\n}\n"]}
{"filename": "src/types/keysend.ts", "chunked_list": ["export interface KeysendDataResponseType {\n  data: {\n    keysendId: string;\n    paymentId: string;\n    transaction: {\n      id: string;\n      walletId: string;\n      type: string;\n      totalAmount: string;\n      fee: string;\n      amount: string;\n      description: string;\n      status: string;\n      confirmedAt: string;\n    }\n  }\n  message: string;\n  success: boolean;\n}\n  ", "export interface KeysendOptionsType {\n  amount: string;\n  pubkey: string;\n  tlvRecords: string;\n  metadata: string;\n  callbackUrl: string;\n}"]}
{"filename": "src/types/payments.ts", "chunked_list": ["export interface InvoicePaymentDataResponseType {\n  data: {\n    id: string;\n    fee: string;\n    unit: string;\n    amount: string;\n    invoice: string;\n    preimage: string;\n    internalId: string;\n    processedAt: string;\n    confirmedAt: string;\n    description: string;\n    status: string;\n  }\n  success: boolean;\n  message: string;\n}\n", "export interface SendPaymentOptionsType {\n  description: string;\n  internalId: string;\n  invoice: string;\n  callbackUrl: string;\n  amount: string;\n}\n  "]}
{"filename": "src/types/static-charges.ts", "chunked_list": ["\nexport interface StaticChargeOptionsType {\n  allowedSlots: string | null;\n  minAmount: string;\n  maxAmount: string;\n  description: string;\n  internalId: string;\n  callbackUrl: string;\n  successMessage: string;\n}\n  ", "export interface StaticChargeDataResponseType {\n  data: {\n    id: string;\n    unit: string;\n    slots: string;\n    minAmount: string;\n    maxAmount: string;\n    createdAt: string;\n    callbackUrl: string;\n    internalId: string;\n    description: string;\n    expiresAt: string;\n    confirmedAt: string;\n    successMessage: string;\n    allowedSlots: string | null;\n    status: string;\n    fee: string;\n    invoice: {\n      request: string;\n      uri: string;\n    }\n  }\n  message: string;\n}\n  "]}
{"filename": "src/types/withdrawal.ts", "chunked_list": ["export interface WithdrawalRequestOptionsType {\n  amount: string;\n  expiresIn: number;\n  description: string;\n  internalId: string;\n  callbackUrl: string;\n}\n  \nexport interface GetWithdrawalRequestDataResponseType {\n  data: {\n    id: string;\n    unit: string;\n    amount: string;\n    createdAt: string;\n    callbackUrl: string;\n    internalId: string;\n    description: string;\n    expiresAt: string;\n    confirmedAt: string;\n    status: string;\n    invoice: {\n      request: string;\n      uri: string;\n      fastRequest: string;\n      fastUri: string;\n    }\n  }\n  message: string;\n  success: boolean;\n}\n\n", "export interface GetWithdrawalRequestDataResponseType {\n  data: {\n    id: string;\n    unit: string;\n    amount: string;\n    createdAt: string;\n    callbackUrl: string;\n    internalId: string;\n    description: string;\n    expiresAt: string;\n    confirmedAt: string;\n    status: string;\n    invoice: {\n      request: string;\n      uri: string;\n      fastRequest: string;\n      fastUri: string;\n    }\n  }\n  message: string;\n  success: boolean;\n}\n\n", "export interface CreateWithdrawalRequestDataResponseType {\n  data: {\n    id: string;\n    unit: string;\n    amount: string;\n    createdAt: string;\n    callbackUrl: string;\n    internalId: string;\n    description: string;\n    expiresAt: string;\n    confirmedAt: string;\n    status: string;\n    fee: string;\n    invoice: {\n      request: string;\n      uri: string;\n      fastRequest: string;\n      fastUri: string;\n    }\n  }\n  message: string;\n  success: boolean;\n}\n"]}
{"filename": "src/types/misc.ts", "chunked_list": ["export interface BTCUSDDataResponseType {\n  data: {\n    btcUsdPrice: string;\n    btcUsdTimestamp: string;\n  }\n  message: string;\n  success: boolean;\n}\n\nexport interface SupportedRegionDataResponseType {\n  data: {\n    ipAddress: string;\n    isSupported: boolean;\n    ipCountry: string;\n    ipRegion: string;\n  }\n  success: boolean;\n}\n", "export interface SupportedRegionDataResponseType {\n  data: {\n    ipAddress: string;\n    isSupported: boolean;\n    ipCountry: string;\n    ipRegion: string;\n  }\n  success: boolean;\n}\n\nexport interface ProdIPSDataResponseType {\n  data: {\n    ips: [string];\n  }\n  success: boolean;\n}", "export interface ProdIPSDataResponseType {\n  data: {\n    ips: [string];\n  }\n  success: boolean;\n}"]}
{"filename": "src/types/index.ts", "chunked_list": ["export * from './charges';\nexport * from './gamertag';\nexport * from './index';\nexport * from './internal-transfers';\nexport * from './keysend';\nexport * from './lightning';\nexport * from './misc';\nexport * from './payments';\nexport * from './static-charges';\nexport * from './wallet';", "export * from './static-charges';\nexport * from './wallet';\nexport * from './withdrawal';\nexport * from './zbd-type';\n\n"]}
{"filename": "src/types/zbd-type.ts", "chunked_list": ["export interface ZBD {\n    apikey: string;\n    apiBaseUrl: string;\n    axiosInstance: any;\n}"]}
{"filename": "src/types/lightning.ts", "chunked_list": ["export interface ValidateLightningAddressDataResponseType {\n  data: {\n    valid: boolean;\n    metadata: {\n      minSendable: number;\n      maxSendable: number;\n      commentAllowed: number;\n      tag: string;\n      metadata: string;\n      callback: string;\n      payerData: {\n        name: {\n          mandatory: boolean;\n        },\n        identifier: {\n          mandatory: boolean;\n        }\n      },\n      disposable: boolean;\n    }\n  }\n  success: boolean;\n}\n  ", "export interface FetchChargeFromLightningAddressDataResponseType {\n  data: {\n    lnaddress: string;\n    amount: string;\n    invoice: {\n      uri: string;\n      request: string;\n    }\n  }\n  success: boolean;\n}\n", "export interface SendLightningAddressPaymentDataResponseType {\n  data: {\n    id: string;\n    fee: string;\n    unit: string;\n    amount: string;\n    invoice: string;\n    preimage: string | null;\n    walletId: string;\n    transactionId: string;\n    callbackUrl: string;\n    internalId: string;\n    comment: string;\n    processedAt: string;\n    createdAt: string;\n    status: string;\n  }\n  success: boolean;\n  message: string;\n}\n", "export interface SendLightningAddressPaymentOptionsType {\n  lnAddress: string;\n  amount: string;\n  comment: string;\n  callbackUrl: string;\n  internalId: string;\n}\n\nexport interface CreateChargeFromLightningAddressOptionsType {\n  amount: string\n  lnaddress: string\n  lnAddress?: string\n  description: string\n}\n", "export interface CreateChargeFromLightningAddressOptionsType {\n  amount: string\n  lnaddress: string\n  lnAddress?: string\n  description: string\n}\n"]}
{"filename": "src/types/internal-transfers.ts", "chunked_list": ["export interface InternalTransferDataResponseType {\n  data: {\n    id: string;\n    senderWalletId: string;\n    receivedWalletId: string;\n    userId: string;\n    sendTxId: string;\n    receiveTxId: string;\n    status: string;\n    amount: string;\n    createdAt: string;\n    updatedAt: string;\n  }\n  message: string;\n  success: boolean;\n}\n", "export interface InternalTransferOptionsType {\n  amount: string;\n  receiverWalletId: string;\n}"]}
{"filename": "src/types/gamertag.ts", "chunked_list": ["export interface FetchUserIdByGamertagDataResponseType {\n  success: boolean;\n  data: {\n    id: string;\n  }\n}\n  \nexport interface FetchGamertagByUserIdDataResponseType {\n  success: boolean;\n  message: string;\n  data: {\n    gamertag: string;\n  }\n}\n", "export interface GamertagTransactionDataResponseType {\n  data: {\n    id: string;\n    receivedId: string;\n    amount: string;\n    fee: string;\n    unit: string;\n    comment: string;\n    status: string;\n    confirmedAt: string;\n    processedAt: string;\n  }\n  message: string;\n  success: boolean;\n}\n\n", "export interface SendGamertagPaymentDataResponseType {\n  data: {\n    receiverId: string;\n    transactionId: string;\n    amount: string;\n    comment: string;\n  }\n  success: boolean;\n  message: string;\n}\n  ", "export interface SendGamertagPaymentOptionsType {\n  gamertag: string;\n  amount: string;\n  description: string;\n}\n  \nexport interface FetchChargeFromGamertagDataResponseType {\n  data: {\n    unit: string;\n    status: string;\n    amount: string;\n    createdAt: string;\n    internalId: string;\n    callbackUrl: string;\n    description: string;\n    invoiceRequest: string;\n    invoiceExpiresAt: string;\n    invoiceDescriptionHash: string | null;\n  }\n  success: boolean;\n}\n", "export interface FetchChargeFromGamertagOptionsType {\n  amount: string;\n  gamertag: string;\n  description: string;\n  callbackUrl: string;\n  internalId: string;\n}\n\n  "]}
{"filename": "src/types/charges.ts", "chunked_list": ["export interface ChargeOptionsType {\n  expiresIn: number;\n  amount: string;\n  description: string;\n  internalId: string;\n  callbackUrl: string;\n}\n\nexport interface DecodeChargeOptionsType {\n  invoice: string;\n}\n", "export interface DecodeChargeOptionsType {\n  invoice: string;\n}\n\nexport interface ChargeDataResponseType {\n  data: {\n    id: string;\n    unit: string;\n    amount: string;\n    createdAt: string;\n    callbackUrl: string;\n    internalId: string;\n    description: string;\n    expiresAt: string;\n    confirmedAt: string;\n    status: string;\n    invoice: {\n      request: string;\n      uri: string;\n    }\n  }\n  message: string;\n  success: boolean;\n}\n", "export interface DecodeChargeResponseType {\n  data: {\n    unit: string;\n    status: string;\n    amount: string;\n    createdAt: string;\n    internalId: string;\n    callbackUrl: string;\n    description: string;\n    invoiceRequest: string;\n    invoiceExpiresAt: string;\n    invoiceDescriptionHash: string | null;\n  }\n  success: boolean;\n}"]}
