{"filename": "src/index.ts", "chunked_list": ["#!/usr/bin/env node\nimport { Command } from 'commander'\nimport { auth } from './commands/auth'\nimport { hello } from './commands/hello'\nimport { translate } from './commands/translate'\nimport { generateTest } from './commands/generateTest'\n\nconst program = new Command()\n\nprogram.addCommand(auth)", "\nprogram.addCommand(auth)\nprogram.addCommand(hello)\nprogram.addCommand(translate)\nprogram.addCommand(generateTest)\n\nprogram.parse(process.argv)\n"]}
{"filename": "src/commands/generateTest/generateTestAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\nimport { isAuthenticated } from '../../helpers/isAuthenticated'\nimport fs from 'fs'\nimport path from 'path'\nimport {\n  extractCodeFromFile,\n  extractCodeFromString\n} from '../../helpers/extractCode'\nimport { config } from '../../helpers/authSystem'\nimport { openAIChat } from '../../helpers/openAIChat'", "import { config } from '../../helpers/authSystem'\nimport { openAIChat } from '../../helpers/openAIChat'\nimport { red, yellow, green } from 'kleur/colors'\n\nexport const generateTestAction = async (options: GeneralOptions) => {\n  const componentName = options[Object.keys(options)[0]]\n  const componentPath = options[Object.keys(options)[1]]\n  const testLibrary = options[Object.keys(options)[2]]\n  const componentExtension = path.extname(componentPath)\n", "  const componentExtension = path.extname(componentPath)\n\n  // verify authentication\n  const isAuth = await isAuthenticated()\n  if (!isAuth) return\n\n  if (!componentName || !componentPath) {\n    return console.log(\n      red(`\\nYou did not enter the expected component name or path!`),\n      yellow(\n        `\\n* use --component or -c to declare component name\\n* use --path or -p to declare component path\\nuse --library or -l to declare the desired test library`\n      )\n    )\n  }\n\n  // read the contents of the component file\n  const componentCode = extractCodeFromFile(componentPath)\n", "  if (!componentCode) {\n    return console.log(\n      red(`\\nI didn't find your component. Check the path and try again!`),\n      yellow(`\\nexample path: ./src/components/MyComponent/index.tsx`)\n    )\n  }\n\n  // generate test code\n  const params = {\n    text: `Create the code with test (containing all necessary imports) in ${\n      testLibrary ? testLibrary : 'Jest'\n    } in code form based on the following component:\\n${componentCode}`,\n    method: 'POST',\n    key: config.apiKey\n  }\n\n  const openAIChatResponse = await openAIChat(params)\n  const testCode = extractCodeFromString(openAIChatResponse.data)\n", "  if (!testCode) {\n    return console.log(\n      red(\n        `\\nUnable to generate a test. Check the component code and try again!`\n      )\n    )\n  }\n  // get component folder path\n  const componentFolderPath = componentPath.split('/').slice(0, -1).join('/')\n\n  // save the test code to a new file\n  const testFilePath = `${componentFolderPath}/${componentName}.test${componentExtension}`\n  fs.writeFileSync(testFilePath, testCode)\n\n  console.log(\n    green(`\\nTest generated successfully in: ${testFilePath}`),\n    yellow(\n      `\\nif you don't like the generated test, you can run the command again to generate another one over the previous one`\n    )\n  )\n}\n"]}
{"filename": "src/commands/generateTest/index.ts", "chunked_list": ["import { Command } from 'commander'\nimport { generateTestAction } from './generateTestAction'\nimport type { GeneralOptions } from '../../typings/General'\n\nexport const generateTest = new Command()\n  .command('generate-test')\n  .description('enter the path of the component that will receive the test')\n  .option('-c, --component <string>', 'component name')\n  .option('-p, --path <path>', 'component path')\n  .option('-l, --library <string>', 'test library')", "  .option('-p, --path <path>', 'component path')\n  .option('-l, --library <string>', 'test library')\n  .action((options: GeneralOptions) => generateTestAction(options))\n"]}
{"filename": "src/commands/auth/authAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\nimport { writeConfig } from '../../helpers/authSystem'\nimport { openAIChat } from '../../helpers/openAIChat'\nimport { red, yellow, green } from 'kleur/colors'\n\nexport const authAction = async (options: GeneralOptions) => {\n  const key = options[Object.keys(options)[0]]\n\n  if (!key) {\n    return console.log(\n      red(`\\nYou have not entered the expected key!`),\n      yellow(`\\n* use the --key or -k option to declare your API key`)\n    )\n  }\n\n  const params = {\n    text: `Hello!`,\n    method: 'POST',\n    key\n  }\n\n  const openAIChatResponse = await openAIChat(params)\n", "  if (!key) {\n    return console.log(\n      red(`\\nYou have not entered the expected key!`),\n      yellow(`\\n* use the --key or -k option to declare your API key`)\n    )\n  }\n\n  const params = {\n    text: `Hello!`,\n    method: 'POST',\n    key\n  }\n\n  const openAIChatResponse = await openAIChat(params)\n", "  if (openAIChatResponse.error) {\n    return console.log(\n      red(\n        `\\nYour key is not valid!\\nPlease review your API key, or create a new one at: https://platform.openai.com/account/api-keys`\n      )\n    )\n  }\n\n  writeConfig({ apiKey: key })\n  console.log(\n    green(\n      `\\nYou have successfully authenticated!\\nSee more about Zonix Open Source CLI at: https://github.com/zonixlab/zonix`\n    )\n  )\n}\n"]}
{"filename": "src/commands/auth/index.ts", "chunked_list": ["import { Command } from 'commander'\nimport { authAction } from './authAction'\nimport type { GeneralOptions } from '../../typings/General'\n\nexport const auth = new Command()\n  .command('auth')\n  .description('sign in with your OpenAI API key to authenticate')\n  .option('-k, --key <key>', 'your OpenAI API key')\n  .action((options: GeneralOptions) => authAction(options))\n", "  .action((options: GeneralOptions) => authAction(options))\n"]}
{"filename": "src/commands/translate/index.ts", "chunked_list": ["import { Command } from 'commander'\nimport { translateAction } from './translateAction'\nimport type { GeneralOptions } from '../../typings/General'\n\nexport const translate = new Command()\n  .command('translate')\n  .description('enter a text and the language you want to translate it into')\n  .option('-t, --text <string>', 'text to be translated')\n  .option('-l, --language <string>', 'language to translate the text')\n  .action((options: GeneralOptions) => translateAction(options))", "  .option('-l, --language <string>', 'language to translate the text')\n  .action((options: GeneralOptions) => translateAction(options))\n"]}
{"filename": "src/commands/translate/translateAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\nimport { isAuthenticated } from '../../helpers/isAuthenticated'\nimport { config } from '../../helpers/authSystem'\nimport { openAIChat } from '../../helpers/openAIChat'\nimport { red, yellow, green } from 'kleur/colors'\n\nexport const translateAction = async (options: GeneralOptions) => {\n  const text = options[Object.keys(options)[0]]\n  const language = options[Object.keys(options)[1]]\n", "  const language = options[Object.keys(options)[1]]\n\n  // verify authentication\n  const isAuth = await isAuthenticated()\n  if (!isAuth) return\n\n  if (!text || !language) {\n    return console.log(\n      red(`\\nYou have not entered the expected text or language!`),\n      yellow(\n        `\\n* use --text or -t to declare the text to be translated\\n* use --language or -l to declare the language you want to translate`\n      )\n    )\n  }\n\n  const params = {\n    text: `Translate to ${language}: ${text}`,\n    method: 'POST',\n    key: config.apiKey\n  }\n\n  const openAIChatResponse = await openAIChat(params)\n\n  console.log(`\\n${green(openAIChatResponse.data)}`)\n}\n"]}
{"filename": "src/commands/hello/helloAction.ts", "chunked_list": ["import type { GeneralOptions } from '../../typings/General'\nimport { isAuthenticated } from '../../helpers/isAuthenticated'\nimport { config } from '../../helpers/authSystem'\nimport { openAIChat } from '../../helpers/openAIChat'\nimport { yellow, green } from 'kleur/colors'\n\nexport const helloAction = async (options: GeneralOptions) => {\n  const name = options[Object.keys(options)[0]]\n\n  if (!name) {\n    // verify authentication\n    const isAuth = await isAuthenticated()", "\n  if (!name) {\n    // verify authentication\n    const isAuth = await isAuthenticated()\n    if (!isAuth) return\n\n    const params = {\n      text: `Return me a random greeting from movies, cartoons or series`,\n      method: 'POST',\n      key: config.apiKey\n    }\n\n    const openAIChatResponse = await openAIChat(params)\n\n    return console.log(\n      green(`\\n${openAIChatResponse.data}`),\n      yellow(`\\nuse --name or -n to declare your name and get a greeting`)\n    )\n  }\n\n  console.log(green(`\\nHello, ${name}!`))\n}\n"]}
{"filename": "src/commands/hello/index.ts", "chunked_list": ["import { Command } from 'commander'\nimport { helloAction } from './helloAction'\nimport type { GeneralOptions } from '../../typings/General'\n\nexport const hello = new Command()\n  .command('hello')\n  .description('enter your name to receive a greeting')\n  .option('-n, --name <string>', 'your name')\n  .action((options: GeneralOptions) => helloAction(options))\n", "  .action((options: GeneralOptions) => helloAction(options))\n"]}
{"filename": "src/helpers/authSystem.ts", "chunked_list": ["import path from 'path'\nimport fs from 'fs'\nimport globalDirs from 'global-dirs'\nimport { red } from 'kleur/colors'\n\ninterface Config {\n  apiKey: string\n}\n\nconst readConfig = (): Config => {\n  try {\n    const packageDir = path.join(globalDirs.npm.packages, 'zonix')\n    const configPath = path.join(packageDir, 'config.json')\n    const data = fs.readFileSync(configPath, 'utf8')\n    return JSON.parse(data)\n  } catch {\n    return { apiKey: '' }\n  }\n}\n\nconst writeConfig = (config: Config) => {", "  try {\n    const packageDir = path.join(globalDirs.npm.packages, 'zonix')\n    const configPath = path.join(packageDir, 'config.json')\n    const data = fs.readFileSync(configPath, 'utf8')\n    return JSON.parse(data)\n  } catch {\n    return { apiKey: '' }\n  }\n}\n\nconst writeConfig = (config: Config) => {", "  try {\n    const packageDir = path.join(globalDirs.npm.packages, 'zonix')\n    const configPath = path.join(packageDir, 'config.json')\n    const configDir = path.dirname(configPath)\n\n    if (!fs.existsSync(configDir)) {\n      fs.mkdirSync(configDir, { recursive: true })\n    }\n\n    fs.writeFileSync(configPath, JSON.stringify(config))\n  } catch (error) {\n    console.log(red(`\\nFailed to write config file: ${error}`))\n  }\n}\n\nconst config: Config = readConfig()\n\nexport { config, writeConfig }\n", "  } catch (error) {\n    console.log(red(`\\nFailed to write config file: ${error}`))\n  }\n}\n\nconst config: Config = readConfig()\n\nexport { config, writeConfig }\n"]}
{"filename": "src/helpers/extractCode.ts", "chunked_list": ["import fs from 'fs'\n\nexport const extractCodeFromFile = (path: string) => {\n  try {\n    return fs.readFileSync(path, 'utf-8')\n  } catch {\n    return\n  }\n}\n\nexport const extractCodeFromString = (string: string) => {\n  const start = string.indexOf('```')\n", "  if (start !== -1) {\n    const end = string.indexOf('```', start + 3)\n\n    if (end !== -1) {\n      return string.substring(start + 3, end)\n    }\n  } else {\n    const importIndex = string.indexOf('import')\n\n    if (importIndex < 0) {\n      return\n    }\n\n    const lastBracketIndex = string.lastIndexOf('}')\n", "    if (importIndex < 0) {\n      return\n    }\n\n    const lastBracketIndex = string.lastIndexOf('}')\n\n    if (lastBracketIndex < 0) {\n      return\n    }\n\n    return string.substring(importIndex, lastBracketIndex + 1)\n  }\n}\n"]}
{"filename": "src/helpers/openAIChat.ts", "chunked_list": ["import axios, { AxiosError } from 'axios'\nimport type { OpenAIChatProps } from '../typings/OpenAI'\n\nexport const openAIChat = async ({ text, method, key }: OpenAIChatProps) => {\n  try {\n    const chatBody = {\n      model: 'gpt-3.5-turbo',\n      messages: [\n        {\n          role: 'user',\n          content: text\n        }\n      ]\n    }\n\n    const response = await axios(`https://api.openai.com/v1/chat/completions`, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${key}`\n      },\n      data: JSON.stringify(chatBody)\n    })\n\n    return {\n      data: response.data.choices[0].message.content\n    }", "  } catch (error) {\n    const axiosError = error as AxiosError\n    return {\n      error: axiosError.response?.statusText\n    }\n  }\n}\n"]}
{"filename": "src/helpers/isAuthenticated.ts", "chunked_list": ["import { config } from './authSystem'\nimport { openAIChat } from './openAIChat'\nimport { red, yellow } from 'kleur/colors'\n\nexport const isAuthenticated = async () => {\n  const params = {\n    text: `Hello!`,\n    method: 'POST',\n    key: config.apiKey\n  }", "    key: config.apiKey\n  }\n\n  const openAIChatResponse = await openAIChat(params)\n\n  if (openAIChatResponse.error) {\n    console.log(\n      red(\n        `\\n${\n          openAIChatResponse.error === 'Unauthorized'\n            ? `Authentication error in OpenAI!`\n            : `Error: ${openAIChatResponse.error}.`\n        }\\nPlease review your API key, or create a new one at: https://platform.openai.com/account/api-keys`\n      ),\n      yellow(\n        `\\n* use the auth command and the --key or -k option to declare your API key`\n      )\n    )\n\n    return false\n  } else {\n    return true\n  }\n}\n"]}
{"filename": "src/typings/General.ts", "chunked_list": ["export interface GeneralOptions {\n  [key: string]: string | number | any\n}\n"]}
{"filename": "src/typings/OpenAI.ts", "chunked_list": ["export interface OpenAIChatProps {\n  text: string\n  method: string\n  key: string\n}\n"]}
