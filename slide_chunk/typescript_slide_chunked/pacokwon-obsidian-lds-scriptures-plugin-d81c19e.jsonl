{"filename": "src/main.ts", "chunked_list": ["import { Plugin } from \"obsidian\";\nimport { BookOfMormonSettings, DEFAULT_SETTINGS } from \"./settings\";\n\nimport { Suggester } from './suggestion/suggester';\nimport { installTranslation } from \"./translation\";\nimport { BookOfMormonSettingTab } from './ui/BookOfMormonSettingTab';\n\nexport default class BookOfMormonPlugin extends Plugin {\n    settings: BookOfMormonSettings;\n\n    async onload() {\n        await this.loadSettings();\n\n        await installTranslation(this.manifest.id, this.settings.language);\n\n        this.addSettingTab(new BookOfMormonSettingTab(this.app, this));\n        this.registerEditorSuggest(new Suggester(this));\n    }\n\n    onunload() {}\n\n    async loadSettings() {\n        this.settings = Object.assign(\n            {},\n            DEFAULT_SETTINGS,\n            await this.loadData()\n        );\n    }\n\n    async saveSettings() {\n        await this.saveData(this.settings);\n        await installTranslation(this.manifest.id, this.settings.language);\n    }\n}\n"]}
{"filename": "src/types.ts", "chunked_list": ["export interface Verse {\n    volume_title: string;\n    volume_title_short: string;\n    book_title: string;\n    book_title_short: string;\n    chapter_number: number;\n    verse_number: number;\n    verse_title: string;\n    scripture_text: string;\n}\n", "export interface Chapter {\n    volume_title: string;\n    volume_title_short: string;\n    book_title: string;\n    book_title_short: string;\n    chapter_number: number;\n    verses: Verse[];\n}\n\nexport interface Book {\n    volume_title: string;\n    volume_title_short: string;\n    book_title: string;\n    book_title_short: string;\n    chapters: Chapter[];\n}\n", "export interface Book {\n    volume_title: string;\n    volume_title_short: string;\n    book_title: string;\n    book_title_short: string;\n    chapters: Chapter[];\n}\n"]}
{"filename": "src/translation.ts", "chunked_list": ["import * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as zlib from \"zlib\";\nimport * as tar from \"tar\";\nimport { mkdir } from \"fs/promises\";\nimport { Readable } from \"stream\";\n\nimport { requestUrl } from \"obsidian\";\nimport envPaths from \"./env-paths\";\n", "import envPaths from \"./env-paths\";\n\nimport { AvailableLanguage } from \"./lang\";\n\nexport async function installTranslation(pluginName: string, lang: AvailableLanguage) {\n    const paths = envPaths(pluginName);\n    const translationsDir = path.resolve(paths.config, \"translations\");\n    const filename = `${lang}.tar.gz`;\n    const langdir = path.resolve(translationsDir, lang);\n\n    if (!fs.existsSync(translationsDir))\n        await mkdir(translationsDir, { recursive: true });\n", "    if (!fs.existsSync(translationsDir))\n        await mkdir(translationsDir, { recursive: true });\n\n    if (fs.existsSync(langdir)) {\n        console.info(`Translation already exists on ${langdir}.`);\n        return;\n    }\n\n    const url = `https://raw.githubusercontent.com/pacokwon/lds-scripture-translations/build/${filename}`;\n    const response = await requestUrl(url);\n    const buffer = Buffer.from(response.arrayBuffer);\n\n    const readstream = Readable.from(buffer);\n    const gunzip = zlib.createGunzip();\n    const extract = tar.x({\n        C: translationsDir,\n    });\n    readstream.pipe(gunzip).pipe(extract);\n\n    await new Promise<void>((resolve, _reject) => {\n        extract.on(\"end\", resolve);\n    });\n}\n"]}
{"filename": "src/metadata.ts", "chunked_list": ["import { AvailableLanguage } from \"./lang\";\nimport envPaths from \"./env-paths\";\n\nexport function getScripturesPath(pluginName: string, lang: AvailableLanguage): string {\n    const paths = envPaths(pluginName);\n    return `${paths.config}/translations/${lang}`;\n}\n"]}
{"filename": "src/lang.ts", "chunked_list": ["export const LANGUAGE_MAPPING: Record<AvailableLanguage, string> = {\n    // orm: \"Afaan Oromoo\",\n    // afr: \"Afrikaans\",\n    // ase: \"American Sign Language (ASL)\",\n    // apw: \"Apache\",\n    // asf: \"Auslan\",\n    // aym: \"Aymar Aru\",\n    // ind: \"Bahasa Indonesia\",\n    // msa: \"Bahasa Melayu\",\n    // bam: \"Bambara\",", "    // msa: \"Bahasa Melayu\",\n    // bam: \"Bambara\",\n    // tzo: \"Bats'i k'op\",\n    // bik: \"Bikol\",\n    // bis: \"Bislama\",\n    // cak: \"Cakchiquel\",\n    // cat: \"Catal\u00e0\",\n    // ceb: \"Cebuano\",\n    // ces: \"\u010cesky\",\n    // cha: \"Chamoru\",", "    // ces: \"\u010cesky\",\n    // cha: \"Chamoru\",\n    // nya: \"Chichewa\",\n    // cym: \"Cymraeg\",\n    // dan: \"Dansk\",\n    deu: \"Deutsch\",\n    // nav: \"Din\u00e9 bizaad\",\n    // cuk: \"Dulegaya\",\n    // yor: \"\u00c8d\u00e8 Yor\u00f9b\u00e1\",\n    // est: \"Eesti\",", "    // yor: \"\u00c8d\u00e8 Yor\u00f9b\u00e1\",\n    // est: \"Eesti\",\n    // efi: \"Efik\",\n    // guz: \"EkeGusii\",\n    eng: \"English\",\n    spa: \"Espa\u00f1ol\",\n    // eus: \"Euskera\",\n    // ton: \"Faka-tonga\",\n    // fat: \"Fante\",\n    // hif: \"Fiji Hindi\",", "    // fat: \"Fante\",\n    // hif: \"Fiji Hindi\",\n    // chk: \"Fosun Chuuk\",\n    // fon: \"F\u0254ngb\u00e8\",\n    // fra: \"Fran\u00e7ais\",\n    // smo: \"Gagana Samoa\",\n    // tvl: \"gana Tuvalu\",\n    // grn: \"Guaran\u00ed (Ava\u00f1e'\u1ebd)\",\n    // hil: \"Hiligaynon\",\n    // hmo: \"Hiri Motu\",", "    // hil: \"Hiligaynon\",\n    // hmo: \"Hiri Motu\",\n    // hmn: \"Hmoob\",\n    // hrv: \"Hrvatski\",\n    // haw: \"\u02bb\u014clelo Hawai\u02bbi\",\n    // sto: \"I^ethka (Yethka)\",\n    // ibo: \"Igbo\",\n    // ilo: \"Ilokano\",\n    // nbl: \"isiNdebele\",\n    // xho: \"isiXhosa\",", "    // nbl: \"isiNdebele\",\n    // xho: \"isiXhosa\",\n    // zul: \"isiZulu\",\n    // isl: \"\u00cdslenska\",\n    // ita: \"Italiano\",\n    // kos: \"Kahs Kosrae\",\n    // mah: \"Kajin Maj\u014dl\",\n    // qvi: \"Kichwa\",\n    // kam: \"Kikamba\",\n    // kin: \"Kinyarwanda\",", "    // kam: \"Kikamba\",\n    // kin: \"Kinyarwanda\",\n    // gil: \"Kiribati\",\n    // swa: \"Kiswahili\",\n    // niu: \"ko e vagahau Niu\u0113\",\n    // hat: \"Krey\u00f2l Ayisyen\",\n    // lav: \"Latvie\u0161u\",\n    // lit: \"Lietuvi\u0173\",\n    // lin: \"Ling\u00e1la\",\n    // yua: \"maaya\u02bc t\u02bc\u00e0an\",", "    // lin: \"Ling\u00e1la\",\n    // yua: \"maaya\u02bc t\u02bc\u00e0an\",\n    // hun: \"Magyar\",\n    // pon: \"Mahsen en Pohnpei\",\n    // mlg: \"Malagasy\",\n    // mlt: \"Malti\",\n    // mam: \"Mam\",\n    // rar: \"M\u0101ori Kuki Airani\",\n    // nld: \"Nederlands\",\n    // bla: \"Nitsi\u2019powahsin\",", "    // nld: \"Nederlands\",\n    // bla: \"Nitsi\u2019powahsin\",\n    // cag: \"Nivacle\",\n    // nor: \"Norsk\",\n    // pau: \"Palauan\",\n    // pam: \"Pampango\",\n    // pag: \"Pangasinan\",\n    // pap: \"Papiamento\",\n    // pol: \"Polski\",\n    // por: \"Portugu\u00eas (Brasil)\",", "    // pol: \"Polski\",\n    // por: \"Portugu\u00eas (Brasil)\",\n    // ept: \"Portugu\u00eas (Portugal)\",\n    // kek: \"Q'eqchi'\",\n    // quh: \"Quechua-Bolivia\",\n    // quc: \"Quich\u00e9\",\n    // tah: \"Reo Tahiti\",\n    // ron: \"Rom\u00e2n\u0103\",\n    // nso: \"seP\u00eadi\",\n    // tsn: \"Setswana\",", "    // nso: \"seP\u00eadi\",\n    // tsn: \"Setswana\",\n    // sna: \"Shona\",\n    // alb: \"Shqip\",\n    // ssw: \"siSwati\",\n    // slk: \"Sloven\u010dina\",\n    // slv: \"Sloven\u0161\u010dina\",\n    // sot: \"South Sotho\",\n    // fin: \"Suomi\",\n    // swe: \"Svenska\",", "    // fin: \"Suomi\",\n    // swe: \"Svenska\",\n    // tgl: \"Tagalog\",\n    // mri: \"Te Reo M\u0101ori\",\n    // yap: \"Thin Nu Wa'ab\",\n    // vie: \"Ti\u1ebfng Vi\u1ec7t\",\n    // tpi: \"Tok Pisin\",\n    // lua: \"Tshiluba\",\n    // tur: \"T\u00fcrk\u00e7e\",\n    // twi: \"Twi\",", "    // tur: \"T\u00fcrk\u00e7e\",\n    // twi: \"Twi\",\n    // fij: \"Vosa vakaviti\",\n    // war: \"Waray\",\n    // quz: \"Yunkay Quechua\",\n    // ell: \"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac\",\n    // bul: \"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438\",\n    // kaz: \"\u049a\u0430\u0437\u0430\u049b\",\n    // mkd: \"\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\",\n    // mon: \"\u041c\u043e\u043d\u0433\u043e\u043b\",", "    // mkd: \"\u041c\u0430\u043a\u0435\u0434\u043e\u043d\u0441\u043a\u0438\",\n    // mon: \"\u041c\u043e\u043d\u0433\u043e\u043b\",\n    // rus: \"\u0420\u0443\u0441\u0441\u043a\u0438\u0439\",\n    // srp: \"\u0421\u0440\u043f\u0441\u043a\u0438\",\n    // ukr: \"\u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430\",\n    // kat: \"\u10e5\u10d0\u10e0\u10d7\u10e3\u10da\u10d8\",\n    // hyw: \"\u0531\u0580\u0565\u0582\u0574\u057f\u0561\u0570\u0561\u0575\u0565\u0580\u0567\u0576\",\n    // hye: \"\u0540\u0561\u0575\u0565\u0580\u0565\u0576\",\n    // urd: \"\u0627\u0631\u062f\u0648\",\n    // ara: \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",", "    // urd: \"\u0627\u0631\u062f\u0648\",\n    // ara: \"\u0627\u0644\u0639\u0631\u0628\u064a\u0629\",\n    // pes: \"\u0641\u0627\u0631\u0633\u06cc\",\n    // amh: \"\u12a0\u121b\u122d\u129b\",\n    // nep: \"\u0928\u0947\u092a\u093e\u0932\u0940\",\n    // hin: \"\u0939\u093f\u0928\u094d\u0926\u0940, \u0939\u093f\u0902\u0926\u0940\",\n    // ben: \"\u09ac\u09be\u0982\u09b2\u09be\",\n    // tam: \"\u0ba4\u0bae\u0bbf\u0bb4\u0bcd\",\n    // tel: \"\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\",\n    // kan: \"\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\",", "    // tel: \"\u0c24\u0c46\u0c32\u0c41\u0c17\u0c41\",\n    // kan: \"\u0c95\u0ca8\u0ccd\u0ca8\u0ca1\",\n    // sin: \"\u0dc3\u0dd2\u0d82\u0dc4\u0dbd\",\n    // tha: \"\u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22\",\n    // lao: \"\u0e9e\u0eb2\u0eaa\u0eb2\u0ea5\u0eb2\u0ea7\",\n    // ksw: \"\u1000\u100a\u102e\u101c\u1036\u102c\u103a\u1001\u102e\u1063\u103a\u1011\u1036\",\n    // mya: \"\u1017\u1019\u102c\u1005\u102c\",\n    // khm: \"\u1797\u17b6\u179f\u17b6\u1781\u17d2\u1798\u17c2\u179a\",\n    kor: \"\ud55c\uad6d\uc5b4\",\n    jpn: \"\u65e5\u672c\u8a9e\",", "    kor: \"\ud55c\uad6d\uc5b4\",\n    jpn: \"\u65e5\u672c\u8a9e\",\n    // zhs: \"\u7b80\u4f53\u4e2d\u6587 - \u666e\u901a\u8bdd\",\n    // zho: \"\u7e41\u9ad4\u4e2d\u6587 - \u570b\u8a9e\",\n    // yue: \"\u7e41\u9ad4\u4e2d\u6587 - \u5ee3\u6771\u8a71\",\n} as const;\n\nexport const AVAILABLE_LANGUAGES = [\n    // \"orm\",\n    // \"afr\",", "    // \"orm\",\n    // \"afr\",\n    // \"ase\",\n    // \"apw\",\n    // \"asf\",\n    // \"aym\",\n    // \"ind\",\n    // \"msa\",\n    // \"bam\",\n    // \"tzo\",", "    // \"bam\",\n    // \"tzo\",\n    // \"bik\",\n    // \"bis\",\n    // \"cak\",\n    // \"cat\",\n    // \"ceb\",\n    // \"ces\",\n    // \"cha\",\n    // \"nya\",", "    // \"cha\",\n    // \"nya\",\n    // \"cym\",\n    // \"dan\",\n    \"deu\",\n    // \"nav\",\n    // \"cuk\",\n    // \"yor\",\n    // \"est\",\n    // \"efi\",", "    // \"est\",\n    // \"efi\",\n    // \"guz\",\n    \"eng\",\n    \"spa\",\n    // \"eus\",\n    // \"ton\",\n    // \"fat\",\n    // \"hif\",\n    // \"chk\",", "    // \"hif\",\n    // \"chk\",\n    // \"fon\",\n    // \"fra\",\n    // \"smo\",\n    // \"tvl\",\n    // \"grn\",\n    // \"hil\",\n    // \"hmo\",\n    // \"hmn\",", "    // \"hmo\",\n    // \"hmn\",\n    // \"hrv\",\n    // \"haw\",\n    // \"sto\",\n    // \"ibo\",\n    // \"ilo\",\n    // \"nbl\",\n    // \"xho\",\n    // \"zul\",", "    // \"xho\",\n    // \"zul\",\n    // \"isl\",\n    // \"ita\",\n    // \"kos\",\n    // \"mah\",\n    // \"qvi\",\n    // \"kam\",\n    // \"kin\",\n    // \"gil\",", "    // \"kin\",\n    // \"gil\",\n    // \"swa\",\n    // \"niu\",\n    // \"hat\",\n    // \"lav\",\n    // \"lit\",\n    // \"lin\",\n    // \"yua\",\n    // \"hun\",", "    // \"yua\",\n    // \"hun\",\n    // \"pon\",\n    // \"mlg\",\n    // \"mlt\",\n    // \"mam\",\n    // \"rar\",\n    // \"nld\",\n    // \"bla\",\n    // \"cag\",", "    // \"bla\",\n    // \"cag\",\n    // \"nor\",\n    // \"pau\",\n    // \"pam\",\n    // \"pag\",\n    // \"pap\",\n    // \"pol\",\n    // \"por\",\n    // \"ept\",", "    // \"por\",\n    // \"ept\",\n    // \"kek\",\n    // \"quh\",\n    // \"quc\",\n    // \"tah\",\n    // \"ron\",\n    // \"nso\",\n    // \"tsn\",\n    // \"sna\",", "    // \"tsn\",\n    // \"sna\",\n    // \"alb\",\n    // \"ssw\",\n    // \"slk\",\n    // \"slv\",\n    // \"sot\",\n    // \"fin\",\n    // \"swe\",\n    // \"tgl\",", "    // \"swe\",\n    // \"tgl\",\n    // \"mri\",\n    // \"yap\",\n    // \"vie\",\n    // \"tpi\",\n    // \"lua\",\n    // \"tur\",\n    // \"twi\",\n    // \"fij\",", "    // \"twi\",\n    // \"fij\",\n    // \"war\",\n    // \"quz\",\n    // \"ell\",\n    // \"bul\",\n    // \"kaz\",\n    // \"mkd\",\n    // \"mon\",\n    // \"rus\",", "    // \"mon\",\n    // \"rus\",\n    // \"srp\",\n    // \"ukr\",\n    // \"kat\",\n    // \"hyw\",\n    // \"hye\",\n    // \"urd\",\n    // \"ara\",\n    // \"pes\",", "    // \"ara\",\n    // \"pes\",\n    // \"amh\",\n    // \"nep\",\n    // \"hin\",\n    // \"ben\",\n    // \"tam\",\n    // \"tel\",\n    // \"kan\",\n    // \"sin\",", "    // \"kan\",\n    // \"sin\",\n    // \"tha\",\n    // \"lao\",\n    // \"ksw\",\n    // \"mya\",\n    // \"khm\",\n    \"kor\",\n    \"jpn\",\n    // \"zhs\",", "    \"jpn\",\n    // \"zhs\",\n    // \"zho\",\n    // \"yue\",\n] as const;\n\nexport type AvailableLanguage = typeof AVAILABLE_LANGUAGES[number];\n"]}
{"filename": "src/env-paths.ts", "chunked_list": ["// NOTE: this file is from https://github.com/sindresorhus/env-paths/blob/f1729272888f45f6584e74dc4d0af3aecba9e7e8/index.js\n//       it is brought to this file because it originally uses \"node:*\" imports\n\nimport * as path from \"path\";\nimport * as os from \"os\";\nimport * as process from \"process\";\n\nconst homedir = os.homedir();\nconst tmpdir = os.tmpdir();\nconst { env } = process;", "const tmpdir = os.tmpdir();\nconst { env } = process;\n\nconst macos = (name: string) => {\n    const library = path.join(homedir, \"Library\");\n\n    return {\n        data: path.join(library, \"Application Support\", name),\n        config: path.join(library, \"Preferences\", name),\n        cache: path.join(library, \"Caches\", name),", "        config: path.join(library, \"Preferences\", name),\n        cache: path.join(library, \"Caches\", name),\n        log: path.join(library, \"Logs\", name),\n        temp: path.join(tmpdir, name),\n    };\n};\n\nconst windows = (name: string) => {\n    const appData = env.APPDATA || path.join(homedir, \"AppData\", \"Roaming\");\n    const localAppData =", "    const appData = env.APPDATA || path.join(homedir, \"AppData\", \"Roaming\");\n    const localAppData =\n        env.LOCALAPPDATA || path.join(homedir, \"AppData\", \"Local\");\n\n    return {\n        // Data/config/cache/log are invented by me as Windows isn't opinionated about this\n        data: path.join(localAppData, name, \"Data\"),\n        config: path.join(appData, name, \"Config\"),\n        cache: path.join(localAppData, name, \"Cache\"),\n        log: path.join(localAppData, name, \"Log\"),", "        cache: path.join(localAppData, name, \"Cache\"),\n        log: path.join(localAppData, name, \"Log\"),\n        temp: path.join(tmpdir, name),\n    };\n};\n\n// https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\nconst linux = (name: string) => {\n    const username = path.basename(homedir);\n", "    const username = path.basename(homedir);\n\n    return {\n        data: path.join(\n            env.XDG_DATA_HOME || path.join(homedir, \".local\", \"share\"),\n            name\n        ),\n        config: path.join(\n            env.XDG_CONFIG_HOME || path.join(homedir, \".config\"),\n            name", "            env.XDG_CONFIG_HOME || path.join(homedir, \".config\"),\n            name\n        ),\n        cache: path.join(\n            env.XDG_CACHE_HOME || path.join(homedir, \".cache\"),\n            name\n        ),\n        // https://wiki.debian.org/XDGBaseDirectorySpecification#state\n        log: path.join(\n            env.XDG_STATE_HOME || path.join(homedir, \".local\", \"state\"),", "        log: path.join(\n            env.XDG_STATE_HOME || path.join(homedir, \".local\", \"state\"),\n            name\n        ),\n        temp: path.join(tmpdir, username, name),\n    };\n};\n\nexport default function envPaths(name: string) {\n    if (typeof name !== \"string\") {\n        throw new TypeError(`Expected a string, got ${typeof name}`);\n    }\n", "export default function envPaths(name: string) {\n    if (typeof name !== \"string\") {\n        throw new TypeError(`Expected a string, got ${typeof name}`);\n    }\n\n    if (process.platform === \"darwin\") {\n        return macos(name);\n    }\n\n    if (process.platform === \"win32\") {\n        return windows(name);\n    }\n\n    return linux(name);\n}\n", "    if (process.platform === \"win32\") {\n        return windows(name);\n    }\n\n    return linux(name);\n}\n"]}
{"filename": "src/settings.ts", "chunked_list": ["import { AvailableLanguage } from \"./lang\";\n\nexport interface BookOfMormonSettings {\n    language: AvailableLanguage;\n}\n\nexport const DEFAULT_SETTINGS: BookOfMormonSettings = {\n    language: \"eng\",\n};\n\n"]}
{"filename": "src/suggestion/suggester.ts", "chunked_list": ["import {\n    Editor,\n    EditorPosition,\n    EditorSuggest,\n    EditorSuggestContext,\n    EditorSuggestTriggerInfo,\n    TFile,\n} from \"obsidian\";\nimport BookOfMormonPlugin from \"src/main\";\nimport { VerseSuggestion } from \"./VerseSuggestion\";", "import BookOfMormonPlugin from \"src/main\";\nimport { VerseSuggestion } from \"./VerseSuggestion\";\nimport * as fs from \"fs/promises\";\nimport { getScripturesPath } from \"src/metadata\";\n\nconst SHORT_REG = /\\+([123])*[A-z ]{3,}\\d{1,3}:\\d{1,3}(-\\d{1,3})*/;\nconst FULL_REG = /\\+([123]*[A-z ]{3,}) (\\d{1,3}):(\\d{1,3}(?:-\\d{1,3})*)/i;\n\nexport class Suggester extends EditorSuggest<VerseSuggestion> {\n    constructor(public plugin: BookOfMormonPlugin) {\n        super(plugin.app);\n    }\n\n    onTrigger(\n        cursor: EditorPosition,\n        editor: Editor,\n        _file: TFile | null\n    ): EditorSuggestTriggerInfo | null {\n        const currentContent = editor\n            .getLine(cursor.line)\n            .substring(0, cursor.ch);\n        const match = currentContent.match(SHORT_REG)?.first() ?? \"\";\n", "export class Suggester extends EditorSuggest<VerseSuggestion> {\n    constructor(public plugin: BookOfMormonPlugin) {\n        super(plugin.app);\n    }\n\n    onTrigger(\n        cursor: EditorPosition,\n        editor: Editor,\n        _file: TFile | null\n    ): EditorSuggestTriggerInfo | null {\n        const currentContent = editor\n            .getLine(cursor.line)\n            .substring(0, cursor.ch);\n        const match = currentContent.match(SHORT_REG)?.first() ?? \"\";\n", "        if (!match) return null;\n\n        return {\n            start: {\n                line: cursor.line,\n                ch: currentContent.lastIndexOf(match),\n            },\n            end: cursor,\n            query: match,\n        };\n    }\n\n    async getSuggestions(\n        context: EditorSuggestContext\n    ): Promise<VerseSuggestion[]> {\n        const { language } = this.plugin.settings;\n        const scripturePath = getScripturesPath(this.plugin.manifest.id, language);\n        const { query } = context;\n\n        const fullMatch = query.match(FULL_REG);", "        if (fullMatch === null)\n            return [];\n\n        const book = fullMatch[1];\n        const chapter = Number(fullMatch[2]);\n        const { start, end } = this.parseRange(fullMatch[3]);\n\n        if (end !== null && start > end)\n            return [];\n\n        // bail out if there is no matching book\n        const filenames = await fs.readdir(scripturePath);\n        const candidate = filenames.find(name => name.startsWith(book));", "        if (!candidate)\n            return [];\n\n        const suggestion = new VerseSuggestion(this.plugin.manifest.id, book, chapter, start, end, language);\n        await suggestion.loadVerse();\n        return [suggestion];\n    }\n\n    renderSuggestion(suggestion: VerseSuggestion, el: HTMLElement): void {\n        suggestion.render(el);\n    }\n\n    selectSuggestion(\n        suggestion: VerseSuggestion,\n        _evt: MouseEvent | KeyboardEvent\n    ): void {", "        if (!this.context)\n            return;\n\n        this.context.editor.replaceRange(\n            suggestion.getReplacement(),\n            this.context.start,\n            this.context.end\n        )\n    }\n\n    parseRange(range: string): { start: number, end: number | null } {\n        const splitted = range.split(\"-\");\n", "        if (splitted.length === 1)\n            return { start: Number(splitted[0]), end: null };\n\n        return {\n            start: Number(splitted[0]),\n            end: Number(splitted[1]),\n        };\n    }\n}\n"]}
{"filename": "src/suggestion/VerseSuggestion.ts", "chunked_list": ["import * as fs from \"fs/promises\";\nimport { getScripturesPath } from \"../metadata\";\nimport { AvailableLanguage } from \"../lang\";\nimport { Book, Verse } from \"../types\";\n\nexport class VerseSuggestion {\n    public text: string;\n    public previewText: string;\n    public verses: Verse[];\n\n    constructor(\n        public pluginName: string,\n        public book: string,\n        public chapter: number,\n        public verseStart: number,\n        public verseEnd: number | null,\n        public lang: AvailableLanguage\n    ) {}\n\n    public getReplacement(): string {\n        const url = this.getUrl();\n        const headerFront = `${this.book} ${this.chapter}:`;\n        const range =\n            this.verseEnd === null\n                ? `${this.verseStart}`\n                : `${this.verseStart}-${this.verseEnd}`;\n\n        const head = `> [!Mormon] [${headerFront}${range}](${url})`;\n        return head + \"\\n\" + this.text + \"\\n\";\n    }\n\n    private getUrl(): string {\n        const { volume_title_short, book_title_short, chapter_number } =\n            this.verses[0];\n        const { lang } = this;\n\n        const start = `p${this.verseStart}`;\n        const range = this.verseEnd === null ? start : `${start}-p${this.verseEnd}`;\n\n        return `https://www.churchofjesuschrist.org/study/scriptures/${volume_title_short}/${book_title_short}/${chapter_number}?lang=${lang}&id=${range}#${start}`;\n    }\n\n    private async fetchVerses(): Promise<Verse[]> {\n        const fileContent = await fs.readFile(\n            `${getScripturesPath(this.pluginName, this.lang)}/${this.book}.json`\n        );\n        const book: Book = JSON.parse(fileContent.toString());\n        const chapter = book.chapters[this.chapter - 1];", "        if (this.verseEnd === null)\n            return [chapter.verses[this.verseStart - 1]];\n\n        return chapter.verses.slice(this.verseStart - 1, this.verseEnd);\n    }\n\n    private toText(verses: Verse[]): string {\n        return (\n            `> <ol start=\"${verses[0].verse_number}\">` +\n            `${verses\n                .map(({ scripture_text }) => `<li>${scripture_text}</li>`)\n                .join(\" \")}` +\n            \"</ol>\"\n        );\n    }\n\n    private toPreviewText(verses: Verse[]): string {\n        return verses\n            .map(\n                ({ verse_number, scripture_text }) =>\n                    `${verse_number}. ${scripture_text}`\n            )\n            .join(\"\\n\");\n    }\n\n    public async loadVerse(): Promise<void> {\n        const verses = await this.fetchVerses();\n        this.verses = verses;\n        this.text = this.toText(verses);\n        this.previewText = this.toPreviewText(verses);\n    }\n\n    public render(el: HTMLElement): void {\n        const outer = el.createDiv({ cls: \"obr-suggester-container\" });\n        outer.createDiv({ cls: \"obr-shortcode\" }).setText(this.previewText);\n    }\n}\n"]}
{"filename": "src/ui/BookOfMormonSettingTab.ts", "chunked_list": ["import { App, Notice, PluginSettingTab, Setting } from \"obsidian\";\nimport BookOfMormonPlugin from \"../main\";\nimport { AVAILABLE_LANGUAGES, LANGUAGE_MAPPING, AvailableLanguage } from \"../lang\";\n\nexport class BookOfMormonSettingTab extends PluginSettingTab {\n    constructor(app: App, public plugin: BookOfMormonPlugin) {\n        super(app, plugin);\n    }\n\n    setupLanguageOption(containerEl: HTMLElement) {\n        new Setting(containerEl)\n            .setName(\"Scripture Language\")\n            .setDesc(\"Preferred scripture language\")\n            .addDropdown((dropdown) => {\n                AVAILABLE_LANGUAGES.forEach((lang) => {\n                    dropdown.addOption(lang, LANGUAGE_MAPPING[lang]);\n                });\n\n                dropdown\n                    .setValue(this.plugin.settings.language)\n                    .onChange(async (value: AvailableLanguage) => {\n                        this.plugin.settings.language = value;\n                        await this.plugin.saveSettings();\n                        new Notice(\"LDS Scriptures Reference Settings Updated\");\n                    });\n            });\n    }\n\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n\n        containerEl.createEl(\"h2\", { text: \"Settings\" });\n        this.setupLanguageOption(containerEl);\n\n        containerEl.createEl(\"h2\", { text: \"About\" });\n        containerEl.createSpan({}, (span) => {\n            span.innerHTML = `<a href=\"https://github.com/pacokwon/obsidian-lds-scriptures-plugin\">Github</a>`;\n        });\n    }\n}\n"]}
