{"filename": "examples/svelte-browser/vite.config.ts", "chunked_list": ["import { sveltekit } from \"@sveltejs/kit/vite\";\nimport { defineConfig } from \"vite\";\nimport topLevelAwait from \"vite-plugin-top-level-await\";\n\nexport default defineConfig({\n\tplugins: [\n\t\ttopLevelAwait({\n\t\t\t// The export name of top-level await promise for each chunk module\n\t\t\tpromiseExportName: \"__tla\",\n\t\t\t// The function to generate import names of top-level await promise in each chunk module\n\t\t\tpromiseImportName: (i) => `__tla_${i}`,\n\t\t}),\n\t\tsveltekit(),\n\t],\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t},\n\tesbuild: {\n\t\tsupported: {\n\t\t\t\"top-level-await\": true, //browsers can handle top-level-await features\n\t\t},\n\t},\n});\n", "\t\t\tpromiseExportName: \"__tla\",\n\t\t\t// The function to generate import names of top-level await promise in each chunk module\n\t\t\tpromiseImportName: (i) => `__tla_${i}`,\n\t\t}),\n\t\tsveltekit(),\n\t],\n\tbuild: {\n\t\ttarget: \"esnext\",\n\t},\n\tesbuild: {\n\t\tsupported: {\n\t\t\t\"top-level-await\": true, //browsers can handle top-level-await features\n\t\t},\n\t},\n});\n"]}
{"filename": "examples/svelte-browser/src/app.d.ts", "chunked_list": ["// See https://kit.svelte.dev/docs/types#app\n// for information about these interfaces\ndeclare global {\n\tnamespace App {\n\t\t// interface Error {}\n\t\t// interface Locals {}\n\t\t// interface PageData {}\n\t\t// interface Platform {}\n\t}\n}\n\nexport {};\n"]}
{"filename": "examples/svelte-browser/src/routes/+page.ts", "chunked_list": ["// since there's no dynamic data here, we can prerender\n// it so that it gets served as a static asset in production\nexport const prerender = true;\n"]}
{"filename": "examples/node-app/app.ts", "chunked_list": ["import * as zy from \"zydis.js\";\n\nfunction printAndGetInsn(data: number[] | Uint8Array) {\n\tconst dec = new zy.Decoder(zy.MachineMode.LONG_64, zy.StackWidth.WIDTH_64).decode(Buffer.from(data));\n\n\tconsole.log(\"Disassembly:\", {\n\t\tdisasm: Buffer.from(data).toString(\"hex\") + \"  \" + zy.Formatter.intel().insn(dec, 0x0n),\n\t\tmnemonic: zy.Mnemonic[dec.mnemonic],\n\t\tvisibleOperandCount: dec.visibleOperandCount,\n\t\tflags: dec.cpuFlags,\n\t});\n\n\treturn dec;\n}\nconsole.log(`Zydis ${zy.getVersionString()} ready.`);\nconsole.log(\n\t\"Largest register enclosing AX in Long mode:\",\n\tzy.Register[zy.register.getLargestEnclosing(zy.Register.AX, zy.MachineMode.LONG_64)]\n);\nconsole.log(\n\t\"Largest register enclosing AX in Compat mode:\",\n\tzy.Register[zy.register.getLargestEnclosing(zy.Register.AX, zy.MachineMode.LONG_COMPAT_32)]\n);\n\nconst dec = printAndGetInsn([0xb8, 0x15, 0x81, 0x59, 0x0b]);\nconsole.log(\"First operand:\", dec.operand(1).get());\n\nconst enc = new zy.EncoderRequest(dec);\nenc.operand(1).imm = 0x7eadbeefn;\nconsole.log(\"Re-encoded:\");\nprintAndGetInsn(enc.encode());\n\nconsole.log(\"Encoding from scratch:\");\nprintAndGetInsn(zy.encode(zy.MachineMode.LONG_64, zy.Mnemonic.MOVAPD, \"XMM0\", \"XMM1\"));\n"]}
{"filename": "src/register.ts", "chunked_list": ["import { MachineMode, Register, RegisterClass } from \"./enums.js\";\nimport zydis from \"./native.js\";\n\nexport function encode(cl: RegisterClass, id: number): Register {\n\tconst res = zydis.asm.zyjsRegisterEncode(cl, id);\n\tif (res === Register.NONE) throw Error(\"Failed encoding register.\");\n\treturn res;\n}\nexport function getId(reg: Register): number {\n\treturn zydis.asm.zyjsRegisterGetId(reg);\n}", "export function getId(reg: Register): number {\n\treturn zydis.asm.zyjsRegisterGetId(reg);\n}\nexport function getClass(reg: Register): RegisterClass {\n\treturn zydis.asm.zyjsRegisterGetClass(reg);\n}\nexport function getWidth(reg: Register, mode: MachineMode): number {\n\treturn zydis.asm.zyjsRegisterGetWidth(reg, mode);\n}\nexport function getWidthFromClass(cl: RegisterClass, mode: MachineMode): number {\n\treturn zydis.asm.zyjsRegisterClassGetWidth(cl, mode);\n}", "export function getWidthFromClass(cl: RegisterClass, mode: MachineMode): number {\n\treturn zydis.asm.zyjsRegisterClassGetWidth(cl, mode);\n}\nexport function getLargestEnclosing(reg: Register, mode: MachineMode): Register {\n\treturn zydis.asm.zyjsRegisterGetLargestEnclosing(reg, mode);\n}\nexport function from(reg: string) {\n\treg = reg.toUpperCase();\n\tif (reg in Register) {\n\t\treturn Register[reg as keyof typeof Register];\n\t}\n\tthrow Error(\"Invalid register name\");\n}\n", "\tif (reg in Register) {\n\t\treturn Register[reg as keyof typeof Register];\n\t}\n\tthrow Error(\"Invalid register name\");\n}\n"]}
{"filename": "src/zydis.d.ts", "chunked_list": ["type Assembly = {\n\tmemory: WebAssembly.Memory;\n} & {\n\t[k: string]: (...args: any[]) => any;\n};\n\ninterface M {\n\tready: Promise<ThisType>;\n\t_main(): number;\n\t_malloc(size: number): number;\n\t_free(ptr: number): void;\n\tUTF8ToString(ptr: number, maxBytes?: number): string;\n\tstringToUTF8(str: string, ptr: number, maxBytes: number): string;\n\n\tHEAP8: Int8Array;\n\tHEAP16: Int16Array;\n\tHEAP32: Int32Array;\n\tHEAP64: BigInt64Array;\n\tHEAPU8: Uint8Array;\n\tHEAPU16: Uint16Array;\n\tHEAPU32: Uint32Array;\n\tHEAPU64: BigUint64Array;\n\n\tasm: Assembly;\n}\n\nexport default function (): Promise<M>;\n"]}
{"filename": "src/decoder.ts", "chunked_list": ["import { OperandImm, OperandMem, OperandPtr, OperandReg } from \"./common.js\";\nimport {\n\tBranchType,\n\tBroadcastMode,\n\tConversionMode,\n\tDecoderMode,\n\tElementType,\n\tExceptionClass,\n\tISAExt,\n\tISASet,", "\tISAExt,\n\tISASet,\n\tInsnCategory,\n\tInstructionEncoding,\n\tMachineMode,\n\tMaskMode,\n\tMemoryOperandType,\n\tMnemonic,\n\tOpcodeMap,\n\tOperandAction,", "\tOpcodeMap,\n\tOperandAction,\n\tOperandEncoding,\n\tOperandType,\n\tOperandVisibility,\n\tRegister,\n\tRoundingMode,\n\tStackWidth,\n\tSwizzleMode,\n} from \"./enums.js\";", "\tSwizzleMode,\n} from \"./enums.js\";\nimport zydis from \"./native.js\";\nimport { Resource, ZyjsField, withStack } from \"./util.js\";\n\nconst OpField = ZyjsField(\"DecOp\");\nexport class DecodedOperand {\n\tresource: Resource;\n\tconstructor(rsrc: Resource) {\n\t\tthis.resource = rsrc;\n\t}\n\n\t@OpField\n\tid!: number;\n\t@OpField\n\tvisiblity!: OperandVisibility;\n\t@OpField\n\tactions!: OperandAction;\n\t@OpField\n\tencoding!: OperandEncoding;\n\t@OpField\n\tsize!: number;\n\t@OpField\n\telementType!: ElementType;\n\t@OpField\n\telementSize!: number;\n\t@OpField\n\telementCount!: number;\n\t@OpField\n\tattributes!: number;\n\t@OpField\n\ttype!: OperandType;\n\n\t@OpField\n\tprotected immSigned!: number;\n\t@OpField\n\tprotected immRelative!: number;\n\t@OpField\n\tprotected imms!: bigint;\n\t@OpField\n\tprotected immu!: bigint;\n\t@OpField\n\tprotected ptrSeg!: number;\n\t@OpField\n\tprotected ptrOff!: number;\n\t@OpField\n\tprotected regv!: Register;\n\t@OpField\n\tprotected memType!: MemoryOperandType;\n\t@OpField\n\tprotected memSeg!: Register;\n\t@OpField\n\tprotected memBase!: Register;\n\t@OpField\n\tprotected memIndex!: Register;\n\t@OpField\n\tprotected memScale!: Register;\n\t@OpField\n\tprotected memHasDisp!: number;\n\t@OpField\n\tprotected memDisp!: bigint;\n\n\tget imm(): OperandImm {", "\t\tif (this.type !== OperandType.IMMEDIATE) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\n\t\tif (this.immSigned) {\n\t\t\treturn {\n\t\t\t\ts: this.imms,\n\t\t\t\trel: !!this.immRelative,\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tu: this.immu,\n\t\t\t\trel: !!this.immRelative,\n\t\t\t};\n\t\t}\n\t}\n\tget reg(): OperandReg {", "\t\tif (this.type !== OperandType.REGISTER) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\treturn {\n\t\t\tname: this.regv,\n\t\t\tis4: this.encoding === OperandEncoding.IS4,\n\t\t};\n\t}\n\tget ptr(): OperandPtr {\n\t\tif (this.type !== OperandType.POINTER) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\treturn {\n\t\t\tsegv: this.ptrSeg,\n\t\t\toff: this.ptrOff,\n\t\t};\n\t}\n\tget mem(): OperandMem {", "\t\tif (this.type !== OperandType.POINTER) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\treturn {\n\t\t\tsegv: this.ptrSeg,\n\t\t\toff: this.ptrOff,\n\t\t};\n\t}\n\tget mem(): OperandMem {\n\t\tif (this.type !== OperandType.MEMORY) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\tconst res: OperandMem = {\n\t\t\ttype: this.memType,\n\t\t\tseg: this.memSeg,\n\t\t\tindex: this.memIndex,\n\t\t\tbase: this.memBase,\n\t\t\tscale: this.memScale,\n\t\t\tdisp: this.memHasDisp ? this.memDisp : undefined,\n\t\t};", "\t\tif (this.type !== OperandType.MEMORY) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\tconst res: OperandMem = {\n\t\t\ttype: this.memType,\n\t\t\tseg: this.memSeg,\n\t\t\tindex: this.memIndex,\n\t\t\tbase: this.memBase,\n\t\t\tscale: this.memScale,\n\t\t\tdisp: this.memHasDisp ? this.memDisp : undefined,\n\t\t};", "\t\tif (res.seg === Register.NONE) {\n\t\t\tdelete res.seg;\n\t\t}\n\t\tif (res.base === Register.NONE) {\n\t\t\tdelete res.base;\n\t\t}\n\t\tif (res.scale === 0 || res.index === Register.NONE) {\n\t\t\tdelete res.index;\n\t\t\tdelete res.scale;\n\t\t}\n\t\treturn res;\n\t}\n\n\tget() {\n\t\tswitch (this.type) {\n\t\t\tcase OperandType.IMMEDIATE:\n\t\t\t\treturn this.imm;\n\t\t\tcase OperandType.REGISTER:\n\t\t\t\treturn this.reg;\n\t\t\tcase OperandType.POINTER:\n\t\t\t\treturn this.ptr;\n\t\t\tcase OperandType.MEMORY:\n\t\t\t\treturn this.mem;\n\t\t\tdefault:\n\t\t\t\tthrow Error();\n\t\t}\n\t}\n}\n\nconst FlagField = ZyjsField(\"FlagSet\");\n", "interface AccessedFlags {\n\treadonly tested: number;\n\treadonly modified: number;\n\treadonly set: number;\n\treadonly unset: number;\n\treadonly undef: number;\n}\nconst flagsNoop: AccessedFlags = {\n\ttested: 0,\n\tmodified: 0,\n\tset: 0,\n\tunset: 0,\n\tundef: 0,\n};\n", "class AccessedFlagsByPtr implements AccessedFlags {\n\tresource: { ref(): number };\n\tconstructor(ptr: number) {\n\t\tthis.resource = {\n\t\t\tref() {\n\t\t\t\treturn ptr;\n\t\t\t},\n\t\t};\n\t}\n\n\t@FlagField\n\treadonly tested!: number;\n\t@FlagField\n\treadonly modified!: number;\n\t@FlagField\n\treadonly set!: number;\n\t@FlagField\n\treadonly unset!: number;\n\t@FlagField\n\treadonly undef!: number;\n}\n\nconst InsnField = ZyjsField(\"DecInsn\");", "export class DecodedInsn {\n\tresource: Resource;\n\tconstructor(rsrc: Resource) {\n\t\tthis.resource = rsrc;\n\t}\n\n\t// Common information.\n\t//\n\t@InsnField\n\tlength!: number;\n\t@InsnField\n\tmnemonic!: Mnemonic;\n\t@InsnField\n\tencoding!: InstructionEncoding;\n\t@InsnField\n\topcodeMap!: OpcodeMap;\n\t@InsnField\n\topcode!: number;\n\t@InsnField\n\tstackWidth!: number;\n\t@InsnField\n\toperandWidth!: number;\n\t@InsnField\n\taddressWidth!: number;\n\t@InsnField\n\toperandCount!: number;\n\t@InsnField\n\tvisibleOperandCount!: number;\n\t@InsnField\n\tattributes!: bigint;\n\n\t// AVX.\n\t//\n\t@InsnField\n\tvectorLength!: number;\n\t@InsnField\n\tmaskMode!: MaskMode;\n\t@InsnField\n\tmaskReg!: Register;\n\t@InsnField\n\tisBroadcastStatic!: 1 | 0;\n\t@InsnField\n\tbroadcastMode!: BroadcastMode;\n\t@InsnField\n\troundingMode!: RoundingMode;\n\t@InsnField\n\tswizzleMode!: SwizzleMode;\n\t@InsnField\n\tconversionMode!: ConversionMode;\n\t@InsnField\n\thasSAE!: 1 | 0;\n\t@InsnField\n\thasEvictionHint!: 1 | 0;\n\n\t// Meta.\n\t//\n\t@InsnField\n\tcategory!: InsnCategory;\n\t@InsnField\n\tisaSet!: ISASet;\n\t@InsnField\n\tisaExt!: ISAExt;\n\t@InsnField\n\tbranchType!: BranchType;\n\t@InsnField\n\texceptionClass!: ExceptionClass;\n\n\t// Flags.\n\t//\n\t@InsnField\n\tprivate cpuFlagsPtr!: number;\n\t@InsnField\n\tprivate fpuFlagsPtr!: number;\n\n\tget cpuFlags(): AccessedFlags {\n\t\tconst ptr = this.cpuFlagsPtr;\n\t\treturn ptr ? new AccessedFlagsByPtr(ptr) : flagsNoop;\n\t}\n\tget fpuFlags(): AccessedFlags {\n\t\tconst ptr = this.fpuFlagsPtr;\n\t\treturn ptr ? new AccessedFlagsByPtr(ptr) : flagsNoop;\n\t}\n\n\toperand(n: number): DecodedOperand {\n\t\tconst ptr = zydis.asm.zyjsDecInsnRefOperand(this.resource.ref(), n);", "\t\tif (!ptr) {\n\t\t\tthrow RangeError(\"Operand out of boundaries.\");\n\t\t}\n\t\treturn new DecodedOperand(this.resource.subresource(ptr));\n\t}\n}\n\nexport class Decoder {\n\tresource: Resource;\n\n\tconstructor(mode: MachineMode, width: StackWidth) {\n\t\tthis.resource = new Resource(zydis.asm.zyjsNewDecoder(mode, width));\n\t}\n\tset(mode: DecoderMode, value: boolean) {\n\t\tzydis.asm.zyjsDecoderSetMode(this.resource.ref(), mode, value ? 1 : 0);\n\t\treturn this;\n\t}\n\tdecode(buffer: Uint8Array) {\n\t\tconst ptr = withStack((a) => {\n\t\t\treturn zydis.asm.zyjsDecoderDecode(this.resource.ref(), a.buf(buffer), buffer.length);\n\t\t});\n\t\treturn new DecodedInsn(new Resource(ptr));\n\t}\n}\n"]}
{"filename": "src/native.ts", "chunked_list": ["import loadZydis from \"./zydis.js\";\nexport default await loadZydis();\n"]}
{"filename": "src/misc.ts", "chunked_list": ["import { Feature } from \"./enums.js\";\nimport zydis from \"./native.js\";\n\nexport function getVersion() {\n\treturn {\n\t\tmajor: zydis.asm.zyjsGetMajorVersion(),\n\t\tminor: zydis.asm.zyjsGetMinorVersion(),\n\t\tpatch: zydis.asm.zyjsGetPatchVersion(),\n\t\tbuild: zydis.asm.zyjsGetBuildVersion(),\n\t};\n}\n", "export function getVersionString() {\n\tconst { major, minor, patch, build } = getVersion();\n\treturn `v${major}.${minor}.${patch}.${build}`;\n}\n\nexport function hasFeature(feature: Feature): boolean {\n\treturn !!zydis.asm.zyjsHasFeature(feature);\n}\n"]}
{"filename": "src/index.ts", "chunked_list": ["export * from \"./enums.js\";\nexport * from \"./decoder.js\";\nexport * from \"./encoder.js\";\nexport * from \"./formatter.js\";\nexport * from \"./misc.js\";\nexport * as native from \"./native.js\";\nexport * as util from \"./util.js\";\nexport * as register from \"./register.js\";\n", ""]}
{"filename": "src/formatter.ts", "chunked_list": ["import { FormatterProperty, FormatterStyle } from \"./enums.js\";\nimport { HeapAllocator, Resource, withStack } from \"./util.js\";\nimport zydis from \"./native.js\";\nimport { DecodedInsn, DecodedOperand } from \"./decoder.js\";\n\nconst MAX_LENGTH = 512;\nexport class Formatter {\n\tresource: Resource;\n\n\tconstructor(style: FormatterStyle) {\n\t\tthis.resource = new Resource(zydis.asm.zyjsNewFormatter(style));\n\t}\n\tproperty(prop: FormatterProperty, value: boolean | number) {\n\t\tzydis.asm.zyjsFormatterSetProperty(this.resource.ref(), prop, +value);\n\t\treturn this;\n\t}\n\n\tinsn(value: DecodedInsn, address: bigint = 0n) {\n\t\treturn withStack((alloc) => {\n\t\t\tconst buf = alloc.allocate(MAX_LENGTH);\n\t\t\tzydis.asm.zyjsFormatterFormatInsn(this.resource.ref(), buf, MAX_LENGTH, value.resource.ref(), address);\n\t\t\treturn zydis.UTF8ToString(buf, MAX_LENGTH);\n\t\t});\n\t}\n\toperand(insn: DecodedInsn, op: DecodedOperand, address: bigint = 0n) {\n\t\treturn withStack((alloc) => {\n\t\t\tconst buf = alloc.allocate(MAX_LENGTH);\n\t\t\tzydis.asm.zyjsFormatterFormatOperand(\n\t\t\t\tthis.resource.ref(),\n\t\t\t\tbuf,\n\t\t\t\tMAX_LENGTH,\n\t\t\t\tinsn.resource.ref(),\n\t\t\t\top.resource.ref(),\n\t\t\t\taddress\n\t\t\t);\n\t\t\treturn zydis.UTF8ToString(buf, MAX_LENGTH);\n\t\t});\n\t}\n\n\t// Lazy shader instances.\n\t//\n\tstatic #lazyMap = new Map<FormatterStyle, Formatter>();\n\tstatic #getLazy(style: FormatterStyle) {\n\t\tlet instance = this.#lazyMap.get(style);", "\t\tif (!instance) {\n\t\t\tinstance = new Formatter(style);\n\t\t\tthis.#lazyMap.set(style, instance);\n\t\t}\n\t\treturn instance;\n\t}\n\tstatic intel(): Omit<Formatter, \"property\"> {\n\t\treturn this.#getLazy(FormatterStyle.INTEL);\n\t}\n\tstatic att(): Omit<Formatter, \"property\"> {\n\t\treturn this.#getLazy(FormatterStyle.ATT);\n\t}\n}\n"]}
{"filename": "src/enums.ts", "chunked_list": ["export enum MachineMode {\n\t/**\n\t * 64 bit mode.\n\t */\n\tLONG_64,\n\t/**\n\t * 32 bit protected mode.\n\t */\n\tLONG_COMPAT_32,\n\t/**\n\t * 16 bit protected mode.\n\t */\n\tLONG_COMPAT_16,\n\t/**\n\t * 32 bit protected mode.\n\t */\n\tLEGACY_32,\n\t/**\n\t * 16 bit protected mode.\n\t */\n\tLEGACY_16,\n\t/**\n\t * 16 bit real mode.\n\t */\n\tREAL_16,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = REAL_16,\n}", "export enum StackWidth {\n\tWIDTH_16,\n\tWIDTH_32,\n\tWIDTH_64,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\tWIDTH_, // MAX_VALUE = WIDTH_64,\n}\nexport enum DecoderMode {\n\t/**\n\t * Enables minimal instruction decoding without semantic analysis.\n\t *\n\t * This mode provides access to the mnemonic, the instruction-length, the effective\n\t * operand-size, the effective address-width, some attributes (e.g. `ZYDIS_ATTRIB_IS_RELATIVE`)\n\t * and all of the information in the `raw` field of the `ZydisDecodedInstruction` struct.\n\t *\n\t * Operands, most attributes and other specific information (like `AVX` info) are not\n\t * accessible in this mode.\n\t *\n\t * This mode is NOT enabled by default.\n\t */\n\tMINIMAL,\n\t/**\n\t * Enables the `AMD`-branch mode.\n\t *\n\t * Intel ignores the operand-size override-prefix (`0x66`) for all branches with 32-bit\n\t * immediates and forces the operand-size of the instruction to 64-bit in 64-bit mode.\n\t * In `AMD`-branch mode `0x66` is not ignored and changes the operand-size and the size of the\n\t * immediate to 16-bit.\n\t *\n\t * This mode is NOT enabled by default.\n\t */\n\tAMD_BRANCHES,\n\t/**\n\t * Enables `KNC` compatibility-mode.\n\t *\n\t * `KNC` and `KNL+` chips are sharing opcodes and encodings for some mask-related instructions.\n\t * Enable this mode to use the old `KNC` specifications (different mnemonics, operands, ..).\n\t *\n\t * This mode is NOT enabled by default.\n\t */\n\tKNC,\n\t/**\n\t * Enables the `MPX` mode.\n\t *\n\t * The `MPX` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tMPX,\n\t/**\n\t * Enables the `CET` mode.\n\t *\n\t * The `CET` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tCET,\n\t/**\n\t * Enables the `LZCNT` mode.\n\t *\n\t * The `LZCNT` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tLZCNT,\n\t/**\n\t * Enables the `TZCNT` mode.\n\t *\n\t * The `TZCNT` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tTZCNT,\n\t/**\n\t * Enables the `WBNOINVD` mode.\n\t *\n\t * The `WBINVD` instruction is interpreted as `WBNOINVD` on ICL chips, if a `F3` prefix is\n\t * used.\n\t *\n\t * This mode is disabled by default.\n\t */\n\tWBNOINVD,\n\t/**\n\t * Enables the `CLDEMOTE` mode.\n\t *\n\t * The `CLDEMOTE` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tCLDEMOTE,\n\t/**\n\t * Enables the `IPREFETCH` mode.\n\t *\n\t * The `IPREFETCH` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tIPREFETCH,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = IPREFETCH,\n}\n/**\n * Defines the `ZydisMnemonic` enum.\n */", "export enum DecoderMode {\n\t/**\n\t * Enables minimal instruction decoding without semantic analysis.\n\t *\n\t * This mode provides access to the mnemonic, the instruction-length, the effective\n\t * operand-size, the effective address-width, some attributes (e.g. `ZYDIS_ATTRIB_IS_RELATIVE`)\n\t * and all of the information in the `raw` field of the `ZydisDecodedInstruction` struct.\n\t *\n\t * Operands, most attributes and other specific information (like `AVX` info) are not\n\t * accessible in this mode.\n\t *\n\t * This mode is NOT enabled by default.\n\t */\n\tMINIMAL,\n\t/**\n\t * Enables the `AMD`-branch mode.\n\t *\n\t * Intel ignores the operand-size override-prefix (`0x66`) for all branches with 32-bit\n\t * immediates and forces the operand-size of the instruction to 64-bit in 64-bit mode.\n\t * In `AMD`-branch mode `0x66` is not ignored and changes the operand-size and the size of the\n\t * immediate to 16-bit.\n\t *\n\t * This mode is NOT enabled by default.\n\t */\n\tAMD_BRANCHES,\n\t/**\n\t * Enables `KNC` compatibility-mode.\n\t *\n\t * `KNC` and `KNL+` chips are sharing opcodes and encodings for some mask-related instructions.\n\t * Enable this mode to use the old `KNC` specifications (different mnemonics, operands, ..).\n\t *\n\t * This mode is NOT enabled by default.\n\t */\n\tKNC,\n\t/**\n\t * Enables the `MPX` mode.\n\t *\n\t * The `MPX` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tMPX,\n\t/**\n\t * Enables the `CET` mode.\n\t *\n\t * The `CET` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tCET,\n\t/**\n\t * Enables the `LZCNT` mode.\n\t *\n\t * The `LZCNT` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tLZCNT,\n\t/**\n\t * Enables the `TZCNT` mode.\n\t *\n\t * The `TZCNT` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tTZCNT,\n\t/**\n\t * Enables the `WBNOINVD` mode.\n\t *\n\t * The `WBINVD` instruction is interpreted as `WBNOINVD` on ICL chips, if a `F3` prefix is\n\t * used.\n\t *\n\t * This mode is disabled by default.\n\t */\n\tWBNOINVD,\n\t/**\n\t * Enables the `CLDEMOTE` mode.\n\t *\n\t * The `CLDEMOTE` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tCLDEMOTE,\n\t/**\n\t * Enables the `IPREFETCH` mode.\n\t *\n\t * The `IPREFETCH` isa-extension reuses (overrides) some of the widenop instruction opcodes.\n\t *\n\t * This mode is enabled by default.\n\t */\n\tIPREFETCH,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = IPREFETCH,\n}\n/**\n * Defines the `ZydisMnemonic` enum.\n */", "export enum Mnemonic {\n\tINVALID,\n\tAAA,\n\tAAD,\n\tAADD,\n\tAAM,\n\tAAND,\n\tAAS,\n\tADC,\n\tADCX,\n\tADD,\n\tADDPD,\n\tADDPS,\n\tADDSD,\n\tADDSS,\n\tADDSUBPD,\n\tADDSUBPS,\n\tADOX,\n\tAESDEC,\n\tAESDEC128KL,\n\tAESDEC256KL,\n\tAESDECLAST,\n\tAESDECWIDE128KL,\n\tAESDECWIDE256KL,\n\tAESENC,\n\tAESENC128KL,\n\tAESENC256KL,\n\tAESENCLAST,\n\tAESENCWIDE128KL,\n\tAESENCWIDE256KL,\n\tAESIMC,\n\tAESKEYGENASSIST,\n\tAND,\n\tANDN,\n\tANDNPD,\n\tANDNPS,\n\tANDPD,\n\tANDPS,\n\tAOR,\n\tARPL,\n\tAXOR,\n\tBEXTR,\n\tBLCFILL,\n\tBLCI,\n\tBLCIC,\n\tBLCMSK,\n\tBLCS,\n\tBLENDPD,\n\tBLENDPS,\n\tBLENDVPD,\n\tBLENDVPS,\n\tBLSFILL,\n\tBLSI,\n\tBLSIC,\n\tBLSMSK,\n\tBLSR,\n\tBNDCL,\n\tBNDCN,\n\tBNDCU,\n\tBNDLDX,\n\tBNDMK,\n\tBNDMOV,\n\tBNDSTX,\n\tBOUND,\n\tBSF,\n\tBSR,\n\tBSWAP,\n\tBT,\n\tBTC,\n\tBTR,\n\tBTS,\n\tBZHI,\n\tCALL,\n\tCBW,\n\tCDQ,\n\tCDQE,\n\tCLAC,\n\tCLC,\n\tCLD,\n\tCLDEMOTE,\n\tCLEVICT0,\n\tCLEVICT1,\n\tCLFLUSH,\n\tCLFLUSHOPT,\n\tCLGI,\n\tCLI,\n\tCLRSSBSY,\n\tCLTS,\n\tCLUI,\n\tCLWB,\n\tCLZERO,\n\tCMC,\n\tCMOVB,\n\tCMOVBE,\n\tCMOVL,\n\tCMOVLE,\n\tCMOVNB,\n\tCMOVNBE,\n\tCMOVNL,\n\tCMOVNLE,\n\tCMOVNO,\n\tCMOVNP,\n\tCMOVNS,\n\tCMOVNZ,\n\tCMOVO,\n\tCMOVP,\n\tCMOVS,\n\tCMOVZ,\n\tCMP,\n\tCMPPD,\n\tCMPPS,\n\tCMPSB,\n\tCMPSD,\n\tCMPSQ,\n\tCMPSS,\n\tCMPSW,\n\tCMPXCHG,\n\tCMPXCHG16B,\n\tCMPXCHG8B,\n\tCOMISD,\n\tCOMISS,\n\tCPUID,\n\tCQO,\n\tCRC32,\n\tCVTDQ2PD,\n\tCVTDQ2PS,\n\tCVTPD2DQ,\n\tCVTPD2PI,\n\tCVTPD2PS,\n\tCVTPI2PD,\n\tCVTPI2PS,\n\tCVTPS2DQ,\n\tCVTPS2PD,\n\tCVTPS2PI,\n\tCVTSD2SI,\n\tCVTSD2SS,\n\tCVTSI2SD,\n\tCVTSI2SS,\n\tCVTSS2SD,\n\tCVTSS2SI,\n\tCVTTPD2DQ,\n\tCVTTPD2PI,\n\tCVTTPS2DQ,\n\tCVTTPS2PI,\n\tCVTTSD2SI,\n\tCVTTSS2SI,\n\tCWD,\n\tCWDE,\n\tDAA,\n\tDAS,\n\tDEC,\n\tDELAY,\n\tDIV,\n\tDIVPD,\n\tDIVPS,\n\tDIVSD,\n\tDIVSS,\n\tDPPD,\n\tDPPS,\n\tEMMS,\n\tENCLS,\n\tENCLU,\n\tENCLV,\n\tENCODEKEY128,\n\tENCODEKEY256,\n\tENDBR32,\n\tENDBR64,\n\tENQCMD,\n\tENQCMDS,\n\tENTER,\n\tEXTRACTPS,\n\tEXTRQ,\n\tF2XM1,\n\tFABS,\n\tFADD,\n\tFADDP,\n\tFBLD,\n\tFBSTP,\n\tFCHS,\n\tFCMOVB,\n\tFCMOVBE,\n\tFCMOVE,\n\tFCMOVNB,\n\tFCMOVNBE,\n\tFCMOVNE,\n\tFCMOVNU,\n\tFCMOVU,\n\tFCOM,\n\tFCOMI,\n\tFCOMIP,\n\tFCOMP,\n\tFCOMPP,\n\tFCOS,\n\tFDECSTP,\n\tFDISI8087_NOP,\n\tFDIV,\n\tFDIVP,\n\tFDIVR,\n\tFDIVRP,\n\tFEMMS,\n\tFENI8087_NOP,\n\tFFREE,\n\tFFREEP,\n\tFIADD,\n\tFICOM,\n\tFICOMP,\n\tFIDIV,\n\tFIDIVR,\n\tFILD,\n\tFIMUL,\n\tFINCSTP,\n\tFIST,\n\tFISTP,\n\tFISTTP,\n\tFISUB,\n\tFISUBR,\n\tFLD,\n\tFLD1,\n\tFLDCW,\n\tFLDENV,\n\tFLDL2E,\n\tFLDL2T,\n\tFLDLG2,\n\tFLDLN2,\n\tFLDPI,\n\tFLDZ,\n\tFMUL,\n\tFMULP,\n\tFNCLEX,\n\tFNINIT,\n\tFNOP,\n\tFNSAVE,\n\tFNSTCW,\n\tFNSTENV,\n\tFNSTSW,\n\tFPATAN,\n\tFPREM,\n\tFPREM1,\n\tFPTAN,\n\tFRNDINT,\n\tFRSTOR,\n\tFSCALE,\n\tFSETPM287_NOP,\n\tFSIN,\n\tFSINCOS,\n\tFSQRT,\n\tFST,\n\tFSTP,\n\tFSTPNCE,\n\tFSUB,\n\tFSUBP,\n\tFSUBR,\n\tFSUBRP,\n\tFTST,\n\tFUCOM,\n\tFUCOMI,\n\tFUCOMIP,\n\tFUCOMP,\n\tFUCOMPP,\n\tFWAIT,\n\tFXAM,\n\tFXCH,\n\tFXRSTOR,\n\tFXRSTOR64,\n\tFXSAVE,\n\tFXSAVE64,\n\tFXTRACT,\n\tFYL2X,\n\tFYL2XP1,\n\tGETSEC,\n\tGF2P8AFFINEINVQB,\n\tGF2P8AFFINEQB,\n\tGF2P8MULB,\n\tHADDPD,\n\tHADDPS,\n\tHLT,\n\tHRESET,\n\tHSUBPD,\n\tHSUBPS,\n\tIDIV,\n\tIMUL,\n\tIN,\n\tINC,\n\tINCSSPD,\n\tINCSSPQ,\n\tINSB,\n\tINSD,\n\tINSERTPS,\n\tINSERTQ,\n\tINSW,\n\tINT,\n\tINT1,\n\tINT3,\n\tINTO,\n\tINVD,\n\tINVEPT,\n\tINVLPG,\n\tINVLPGA,\n\tINVLPGB,\n\tINVPCID,\n\tINVVPID,\n\tIRET,\n\tIRETD,\n\tIRETQ,\n\tJB,\n\tJBE,\n\tJCXZ,\n\tJECXZ,\n\tJKNZD,\n\tJKZD,\n\tJL,\n\tJLE,\n\tJMP,\n\tJNB,\n\tJNBE,\n\tJNL,\n\tJNLE,\n\tJNO,\n\tJNP,\n\tJNS,\n\tJNZ,\n\tJO,\n\tJP,\n\tJRCXZ,\n\tJS,\n\tJZ,\n\tKADDB,\n\tKADDD,\n\tKADDQ,\n\tKADDW,\n\tKAND,\n\tKANDB,\n\tKANDD,\n\tKANDN,\n\tKANDNB,\n\tKANDND,\n\tKANDNQ,\n\tKANDNR,\n\tKANDNW,\n\tKANDQ,\n\tKANDW,\n\tKCONCATH,\n\tKCONCATL,\n\tKEXTRACT,\n\tKMERGE2L1H,\n\tKMERGE2L1L,\n\tKMOV,\n\tKMOVB,\n\tKMOVD,\n\tKMOVQ,\n\tKMOVW,\n\tKNOT,\n\tKNOTB,\n\tKNOTD,\n\tKNOTQ,\n\tKNOTW,\n\tKOR,\n\tKORB,\n\tKORD,\n\tKORQ,\n\tKORTEST,\n\tKORTESTB,\n\tKORTESTD,\n\tKORTESTQ,\n\tKORTESTW,\n\tKORW,\n\tKSHIFTLB,\n\tKSHIFTLD,\n\tKSHIFTLQ,\n\tKSHIFTLW,\n\tKSHIFTRB,\n\tKSHIFTRD,\n\tKSHIFTRQ,\n\tKSHIFTRW,\n\tKTESTB,\n\tKTESTD,\n\tKTESTQ,\n\tKTESTW,\n\tKUNPCKBW,\n\tKUNPCKDQ,\n\tKUNPCKWD,\n\tKXNOR,\n\tKXNORB,\n\tKXNORD,\n\tKXNORQ,\n\tKXNORW,\n\tKXOR,\n\tKXORB,\n\tKXORD,\n\tKXORQ,\n\tKXORW,\n\tLAHF,\n\tLAR,\n\tLDDQU,\n\tLDMXCSR,\n\tLDS,\n\tLDTILECFG,\n\tLEA,\n\tLEAVE,\n\tLES,\n\tLFENCE,\n\tLFS,\n\tLGDT,\n\tLGS,\n\tLIDT,\n\tLLDT,\n\tLLWPCB,\n\tLMSW,\n\tLOADIWKEY,\n\tLODSB,\n\tLODSD,\n\tLODSQ,\n\tLODSW,\n\tLOOP,\n\tLOOPE,\n\tLOOPNE,\n\tLSL,\n\tLSS,\n\tLTR,\n\tLWPINS,\n\tLWPVAL,\n\tLZCNT,\n\tMASKMOVDQU,\n\tMASKMOVQ,\n\tMAXPD,\n\tMAXPS,\n\tMAXSD,\n\tMAXSS,\n\tMCOMMIT,\n\tMFENCE,\n\tMINPD,\n\tMINPS,\n\tMINSD,\n\tMINSS,\n\tMONITOR,\n\tMONITORX,\n\tMONTMUL,\n\tMOV,\n\tMOVAPD,\n\tMOVAPS,\n\tMOVBE,\n\tMOVD,\n\tMOVDDUP,\n\tMOVDIR64B,\n\tMOVDIRI,\n\tMOVDQ2Q,\n\tMOVDQA,\n\tMOVDQU,\n\tMOVHLPS,\n\tMOVHPD,\n\tMOVHPS,\n\tMOVLHPS,\n\tMOVLPD,\n\tMOVLPS,\n\tMOVMSKPD,\n\tMOVMSKPS,\n\tMOVNTDQ,\n\tMOVNTDQA,\n\tMOVNTI,\n\tMOVNTPD,\n\tMOVNTPS,\n\tMOVNTQ,\n\tMOVNTSD,\n\tMOVNTSS,\n\tMOVQ,\n\tMOVQ2DQ,\n\tMOVSB,\n\tMOVSD,\n\tMOVSHDUP,\n\tMOVSLDUP,\n\tMOVSQ,\n\tMOVSS,\n\tMOVSW,\n\tMOVSX,\n\tMOVSXD,\n\tMOVUPD,\n\tMOVUPS,\n\tMOVZX,\n\tMPSADBW,\n\tMUL,\n\tMULPD,\n\tMULPS,\n\tMULSD,\n\tMULSS,\n\tMULX,\n\tMWAIT,\n\tMWAITX,\n\tNEG,\n\tNOP,\n\tNOT,\n\tOR,\n\tORPD,\n\tORPS,\n\tOUT,\n\tOUTSB,\n\tOUTSD,\n\tOUTSW,\n\tPABSB,\n\tPABSD,\n\tPABSW,\n\tPACKSSDW,\n\tPACKSSWB,\n\tPACKUSDW,\n\tPACKUSWB,\n\tPADDB,\n\tPADDD,\n\tPADDQ,\n\tPADDSB,\n\tPADDSW,\n\tPADDUSB,\n\tPADDUSW,\n\tPADDW,\n\tPALIGNR,\n\tPAND,\n\tPANDN,\n\tPAUSE,\n\tPAVGB,\n\tPAVGUSB,\n\tPAVGW,\n\tPBLENDVB,\n\tPBLENDW,\n\tPCLMULQDQ,\n\tPCMPEQB,\n\tPCMPEQD,\n\tPCMPEQQ,\n\tPCMPEQW,\n\tPCMPESTRI,\n\tPCMPESTRM,\n\tPCMPGTB,\n\tPCMPGTD,\n\tPCMPGTQ,\n\tPCMPGTW,\n\tPCMPISTRI,\n\tPCMPISTRM,\n\tPCOMMIT,\n\tPCONFIG,\n\tPDEP,\n\tPEXT,\n\tPEXTRB,\n\tPEXTRD,\n\tPEXTRQ,\n\tPEXTRW,\n\tPF2ID,\n\tPF2IW,\n\tPFACC,\n\tPFADD,\n\tPFCMPEQ,\n\tPFCMPGE,\n\tPFCMPGT,\n\tPFCPIT1,\n\tPFMAX,\n\tPFMIN,\n\tPFMUL,\n\tPFNACC,\n\tPFPNACC,\n\tPFRCP,\n\tPFRCPIT2,\n\tPFRSQIT1,\n\tPFSQRT,\n\tPFSUB,\n\tPFSUBR,\n\tPHADDD,\n\tPHADDSW,\n\tPHADDW,\n\tPHMINPOSUW,\n\tPHSUBD,\n\tPHSUBSW,\n\tPHSUBW,\n\tPI2FD,\n\tPI2FW,\n\tPINSRB,\n\tPINSRD,\n\tPINSRQ,\n\tPINSRW,\n\tPMADDUBSW,\n\tPMADDWD,\n\tPMAXSB,\n\tPMAXSD,\n\tPMAXSW,\n\tPMAXUB,\n\tPMAXUD,\n\tPMAXUW,\n\tPMINSB,\n\tPMINSD,\n\tPMINSW,\n\tPMINUB,\n\tPMINUD,\n\tPMINUW,\n\tPMOVMSKB,\n\tPMOVSXBD,\n\tPMOVSXBQ,\n\tPMOVSXBW,\n\tPMOVSXDQ,\n\tPMOVSXWD,\n\tPMOVSXWQ,\n\tPMOVZXBD,\n\tPMOVZXBQ,\n\tPMOVZXBW,\n\tPMOVZXDQ,\n\tPMOVZXWD,\n\tPMOVZXWQ,\n\tPMULDQ,\n\tPMULHRSW,\n\tPMULHRW,\n\tPMULHUW,\n\tPMULHW,\n\tPMULLD,\n\tPMULLW,\n\tPMULUDQ,\n\tPOP,\n\tPOPA,\n\tPOPAD,\n\tPOPCNT,\n\tPOPF,\n\tPOPFD,\n\tPOPFQ,\n\tPOR,\n\tPREFETCH,\n\tPREFETCHIT0,\n\tPREFETCHIT1,\n\tPREFETCHNTA,\n\tPREFETCHT0,\n\tPREFETCHT1,\n\tPREFETCHT2,\n\tPREFETCHW,\n\tPREFETCHWT1,\n\tPSADBW,\n\tPSHUFB,\n\tPSHUFD,\n\tPSHUFHW,\n\tPSHUFLW,\n\tPSHUFW,\n\tPSIGNB,\n\tPSIGND,\n\tPSIGNW,\n\tPSLLD,\n\tPSLLDQ,\n\tPSLLQ,\n\tPSLLW,\n\tPSMASH,\n\tPSRAD,\n\tPSRAW,\n\tPSRLD,\n\tPSRLDQ,\n\tPSRLQ,\n\tPSRLW,\n\tPSUBB,\n\tPSUBD,\n\tPSUBQ,\n\tPSUBSB,\n\tPSUBSW,\n\tPSUBUSB,\n\tPSUBUSW,\n\tPSUBW,\n\tPSWAPD,\n\tPTEST,\n\tPTWRITE,\n\tPUNPCKHBW,\n\tPUNPCKHDQ,\n\tPUNPCKHQDQ,\n\tPUNPCKHWD,\n\tPUNPCKLBW,\n\tPUNPCKLDQ,\n\tPUNPCKLQDQ,\n\tPUNPCKLWD,\n\tPUSH,\n\tPUSHA,\n\tPUSHAD,\n\tPUSHF,\n\tPUSHFD,\n\tPUSHFQ,\n\tPVALIDATE,\n\tPXOR,\n\tRCL,\n\tRCPPS,\n\tRCPSS,\n\tRCR,\n\tRDFSBASE,\n\tRDGSBASE,\n\tRDMSR,\n\tRDMSRLIST,\n\tRDPID,\n\tRDPKRU,\n\tRDPMC,\n\tRDPRU,\n\tRDRAND,\n\tRDSEED,\n\tRDSSPD,\n\tRDSSPQ,\n\tRDTSC,\n\tRDTSCP,\n\tRET,\n\tRMPADJUST,\n\tRMPUPDATE,\n\tROL,\n\tROR,\n\tRORX,\n\tROUNDPD,\n\tROUNDPS,\n\tROUNDSD,\n\tROUNDSS,\n\tRSM,\n\tRSQRTPS,\n\tRSQRTSS,\n\tRSTORSSP,\n\tSAHF,\n\tSALC,\n\tSAR,\n\tSARX,\n\tSAVEPREVSSP,\n\tSBB,\n\tSCASB,\n\tSCASD,\n\tSCASQ,\n\tSCASW,\n\tSEAMCALL,\n\tSEAMOPS,\n\tSEAMRET,\n\tSENDUIPI,\n\tSERIALIZE,\n\tSETB,\n\tSETBE,\n\tSETL,\n\tSETLE,\n\tSETNB,\n\tSETNBE,\n\tSETNL,\n\tSETNLE,\n\tSETNO,\n\tSETNP,\n\tSETNS,\n\tSETNZ,\n\tSETO,\n\tSETP,\n\tSETS,\n\tSETSSBSY,\n\tSETZ,\n\tSFENCE,\n\tSGDT,\n\tSHA1MSG1,\n\tSHA1MSG2,\n\tSHA1NEXTE,\n\tSHA1RNDS4,\n\tSHA256MSG1,\n\tSHA256MSG2,\n\tSHA256RNDS2,\n\tSHL,\n\tSHLD,\n\tSHLX,\n\tSHR,\n\tSHRD,\n\tSHRX,\n\tSHUFPD,\n\tSHUFPS,\n\tSIDT,\n\tSKINIT,\n\tSLDT,\n\tSLWPCB,\n\tSMSW,\n\tSPFLT,\n\tSQRTPD,\n\tSQRTPS,\n\tSQRTSD,\n\tSQRTSS,\n\tSTAC,\n\tSTC,\n\tSTD,\n\tSTGI,\n\tSTI,\n\tSTMXCSR,\n\tSTOSB,\n\tSTOSD,\n\tSTOSQ,\n\tSTOSW,\n\tSTR,\n\tSTTILECFG,\n\tSTUI,\n\tSUB,\n\tSUBPD,\n\tSUBPS,\n\tSUBSD,\n\tSUBSS,\n\tSWAPGS,\n\tSYSCALL,\n\tSYSENTER,\n\tSYSEXIT,\n\tSYSRET,\n\tT1MSKC,\n\tTDCALL,\n\tTDPBF16PS,\n\tTDPBSSD,\n\tTDPBSUD,\n\tTDPBUSD,\n\tTDPBUUD,\n\tTDPFP16PS,\n\tTEST,\n\tTESTUI,\n\tTILELOADD,\n\tTILELOADDT1,\n\tTILERELEASE,\n\tTILESTORED,\n\tTILEZERO,\n\tTLBSYNC,\n\tTPAUSE,\n\tTZCNT,\n\tTZCNTI,\n\tTZMSK,\n\tUCOMISD,\n\tUCOMISS,\n\tUD0,\n\tUD1,\n\tUD2,\n\tUIRET,\n\tUMONITOR,\n\tUMWAIT,\n\tUNPCKHPD,\n\tUNPCKHPS,\n\tUNPCKLPD,\n\tUNPCKLPS,\n\tV4FMADDPS,\n\tV4FMADDSS,\n\tV4FNMADDPS,\n\tV4FNMADDSS,\n\tVADDNPD,\n\tVADDNPS,\n\tVADDPD,\n\tVADDPH,\n\tVADDPS,\n\tVADDSD,\n\tVADDSETSPS,\n\tVADDSH,\n\tVADDSS,\n\tVADDSUBPD,\n\tVADDSUBPS,\n\tVAESDEC,\n\tVAESDECLAST,\n\tVAESENC,\n\tVAESENCLAST,\n\tVAESIMC,\n\tVAESKEYGENASSIST,\n\tVALIGND,\n\tVALIGNQ,\n\tVANDNPD,\n\tVANDNPS,\n\tVANDPD,\n\tVANDPS,\n\tVBCSTNEBF162PS,\n\tVBCSTNESH2PS,\n\tVBLENDMPD,\n\tVBLENDMPS,\n\tVBLENDPD,\n\tVBLENDPS,\n\tVBLENDVPD,\n\tVBLENDVPS,\n\tVBROADCASTF128,\n\tVBROADCASTF32X2,\n\tVBROADCASTF32X4,\n\tVBROADCASTF32X8,\n\tVBROADCASTF64X2,\n\tVBROADCASTF64X4,\n\tVBROADCASTI128,\n\tVBROADCASTI32X2,\n\tVBROADCASTI32X4,\n\tVBROADCASTI32X8,\n\tVBROADCASTI64X2,\n\tVBROADCASTI64X4,\n\tVBROADCASTSD,\n\tVBROADCASTSS,\n\tVCMPPD,\n\tVCMPPH,\n\tVCMPPS,\n\tVCMPSD,\n\tVCMPSH,\n\tVCMPSS,\n\tVCOMISD,\n\tVCOMISH,\n\tVCOMISS,\n\tVCOMPRESSPD,\n\tVCOMPRESSPS,\n\tVCVTDQ2PD,\n\tVCVTDQ2PH,\n\tVCVTDQ2PS,\n\tVCVTFXPNTDQ2PS,\n\tVCVTFXPNTPD2DQ,\n\tVCVTFXPNTPD2UDQ,\n\tVCVTFXPNTPS2DQ,\n\tVCVTFXPNTPS2UDQ,\n\tVCVTFXPNTUDQ2PS,\n\tVCVTNE2PS2BF16,\n\tVCVTNEEBF162PS,\n\tVCVTNEEPH2PS,\n\tVCVTNEOBF162PS,\n\tVCVTNEOPH2PS,\n\tVCVTNEPS2BF16,\n\tVCVTPD2DQ,\n\tVCVTPD2PH,\n\tVCVTPD2PS,\n\tVCVTPD2QQ,\n\tVCVTPD2UDQ,\n\tVCVTPD2UQQ,\n\tVCVTPH2DQ,\n\tVCVTPH2PD,\n\tVCVTPH2PS,\n\tVCVTPH2PSX,\n\tVCVTPH2QQ,\n\tVCVTPH2UDQ,\n\tVCVTPH2UQQ,\n\tVCVTPH2UW,\n\tVCVTPH2W,\n\tVCVTPS2DQ,\n\tVCVTPS2PD,\n\tVCVTPS2PH,\n\tVCVTPS2PHX,\n\tVCVTPS2QQ,\n\tVCVTPS2UDQ,\n\tVCVTPS2UQQ,\n\tVCVTQQ2PD,\n\tVCVTQQ2PH,\n\tVCVTQQ2PS,\n\tVCVTSD2SH,\n\tVCVTSD2SI,\n\tVCVTSD2SS,\n\tVCVTSD2USI,\n\tVCVTSH2SD,\n\tVCVTSH2SI,\n\tVCVTSH2SS,\n\tVCVTSH2USI,\n\tVCVTSI2SD,\n\tVCVTSI2SH,\n\tVCVTSI2SS,\n\tVCVTSS2SD,\n\tVCVTSS2SH,\n\tVCVTSS2SI,\n\tVCVTSS2USI,\n\tVCVTTPD2DQ,\n\tVCVTTPD2QQ,\n\tVCVTTPD2UDQ,\n\tVCVTTPD2UQQ,\n\tVCVTTPH2DQ,\n\tVCVTTPH2QQ,\n\tVCVTTPH2UDQ,\n\tVCVTTPH2UQQ,\n\tVCVTTPH2UW,\n\tVCVTTPH2W,\n\tVCVTTPS2DQ,\n\tVCVTTPS2QQ,\n\tVCVTTPS2UDQ,\n\tVCVTTPS2UQQ,\n\tVCVTTSD2SI,\n\tVCVTTSD2USI,\n\tVCVTTSH2SI,\n\tVCVTTSH2USI,\n\tVCVTTSS2SI,\n\tVCVTTSS2USI,\n\tVCVTUDQ2PD,\n\tVCVTUDQ2PH,\n\tVCVTUDQ2PS,\n\tVCVTUQQ2PD,\n\tVCVTUQQ2PH,\n\tVCVTUQQ2PS,\n\tVCVTUSI2SD,\n\tVCVTUSI2SH,\n\tVCVTUSI2SS,\n\tVCVTUW2PH,\n\tVCVTW2PH,\n\tVDBPSADBW,\n\tVDIVPD,\n\tVDIVPH,\n\tVDIVPS,\n\tVDIVSD,\n\tVDIVSH,\n\tVDIVSS,\n\tVDPBF16PS,\n\tVDPPD,\n\tVDPPS,\n\tVERR,\n\tVERW,\n\tVEXP223PS,\n\tVEXP2PD,\n\tVEXP2PS,\n\tVEXPANDPD,\n\tVEXPANDPS,\n\tVEXTRACTF128,\n\tVEXTRACTF32X4,\n\tVEXTRACTF32X8,\n\tVEXTRACTF64X2,\n\tVEXTRACTF64X4,\n\tVEXTRACTI128,\n\tVEXTRACTI32X4,\n\tVEXTRACTI32X8,\n\tVEXTRACTI64X2,\n\tVEXTRACTI64X4,\n\tVEXTRACTPS,\n\tVFCMADDCPH,\n\tVFCMADDCSH,\n\tVFCMULCPH,\n\tVFCMULCSH,\n\tVFIXUPIMMPD,\n\tVFIXUPIMMPS,\n\tVFIXUPIMMSD,\n\tVFIXUPIMMSS,\n\tVFIXUPNANPD,\n\tVFIXUPNANPS,\n\tVFMADD132PD,\n\tVFMADD132PH,\n\tVFMADD132PS,\n\tVFMADD132SD,\n\tVFMADD132SH,\n\tVFMADD132SS,\n\tVFMADD213PD,\n\tVFMADD213PH,\n\tVFMADD213PS,\n\tVFMADD213SD,\n\tVFMADD213SH,\n\tVFMADD213SS,\n\tVFMADD231PD,\n\tVFMADD231PH,\n\tVFMADD231PS,\n\tVFMADD231SD,\n\tVFMADD231SH,\n\tVFMADD231SS,\n\tVFMADD233PS,\n\tVFMADDCPH,\n\tVFMADDCSH,\n\tVFMADDPD,\n\tVFMADDPS,\n\tVFMADDSD,\n\tVFMADDSS,\n\tVFMADDSUB132PD,\n\tVFMADDSUB132PH,\n\tVFMADDSUB132PS,\n\tVFMADDSUB213PD,\n\tVFMADDSUB213PH,\n\tVFMADDSUB213PS,\n\tVFMADDSUB231PD,\n\tVFMADDSUB231PH,\n\tVFMADDSUB231PS,\n\tVFMADDSUBPD,\n\tVFMADDSUBPS,\n\tVFMSUB132PD,\n\tVFMSUB132PH,\n\tVFMSUB132PS,\n\tVFMSUB132SD,\n\tVFMSUB132SH,\n\tVFMSUB132SS,\n\tVFMSUB213PD,\n\tVFMSUB213PH,\n\tVFMSUB213PS,\n\tVFMSUB213SD,\n\tVFMSUB213SH,\n\tVFMSUB213SS,\n\tVFMSUB231PD,\n\tVFMSUB231PH,\n\tVFMSUB231PS,\n\tVFMSUB231SD,\n\tVFMSUB231SH,\n\tVFMSUB231SS,\n\tVFMSUBADD132PD,\n\tVFMSUBADD132PH,\n\tVFMSUBADD132PS,\n\tVFMSUBADD213PD,\n\tVFMSUBADD213PH,\n\tVFMSUBADD213PS,\n\tVFMSUBADD231PD,\n\tVFMSUBADD231PH,\n\tVFMSUBADD231PS,\n\tVFMSUBADDPD,\n\tVFMSUBADDPS,\n\tVFMSUBPD,\n\tVFMSUBPS,\n\tVFMSUBSD,\n\tVFMSUBSS,\n\tVFMULCPH,\n\tVFMULCSH,\n\tVFNMADD132PD,\n\tVFNMADD132PH,\n\tVFNMADD132PS,\n\tVFNMADD132SD,\n\tVFNMADD132SH,\n\tVFNMADD132SS,\n\tVFNMADD213PD,\n\tVFNMADD213PH,\n\tVFNMADD213PS,\n\tVFNMADD213SD,\n\tVFNMADD213SH,\n\tVFNMADD213SS,\n\tVFNMADD231PD,\n\tVFNMADD231PH,\n\tVFNMADD231PS,\n\tVFNMADD231SD,\n\tVFNMADD231SH,\n\tVFNMADD231SS,\n\tVFNMADDPD,\n\tVFNMADDPS,\n\tVFNMADDSD,\n\tVFNMADDSS,\n\tVFNMSUB132PD,\n\tVFNMSUB132PH,\n\tVFNMSUB132PS,\n\tVFNMSUB132SD,\n\tVFNMSUB132SH,\n\tVFNMSUB132SS,\n\tVFNMSUB213PD,\n\tVFNMSUB213PH,\n\tVFNMSUB213PS,\n\tVFNMSUB213SD,\n\tVFNMSUB213SH,\n\tVFNMSUB213SS,\n\tVFNMSUB231PD,\n\tVFNMSUB231PH,\n\tVFNMSUB231PS,\n\tVFNMSUB231SD,\n\tVFNMSUB231SH,\n\tVFNMSUB231SS,\n\tVFNMSUBPD,\n\tVFNMSUBPS,\n\tVFNMSUBSD,\n\tVFNMSUBSS,\n\tVFPCLASSPD,\n\tVFPCLASSPH,\n\tVFPCLASSPS,\n\tVFPCLASSSD,\n\tVFPCLASSSH,\n\tVFPCLASSSS,\n\tVFRCZPD,\n\tVFRCZPS,\n\tVFRCZSD,\n\tVFRCZSS,\n\tVGATHERDPD,\n\tVGATHERDPS,\n\tVGATHERPF0DPD,\n\tVGATHERPF0DPS,\n\tVGATHERPF0HINTDPD,\n\tVGATHERPF0HINTDPS,\n\tVGATHERPF0QPD,\n\tVGATHERPF0QPS,\n\tVGATHERPF1DPD,\n\tVGATHERPF1DPS,\n\tVGATHERPF1QPD,\n\tVGATHERPF1QPS,\n\tVGATHERQPD,\n\tVGATHERQPS,\n\tVGETEXPPD,\n\tVGETEXPPH,\n\tVGETEXPPS,\n\tVGETEXPSD,\n\tVGETEXPSH,\n\tVGETEXPSS,\n\tVGETMANTPD,\n\tVGETMANTPH,\n\tVGETMANTPS,\n\tVGETMANTSD,\n\tVGETMANTSH,\n\tVGETMANTSS,\n\tVGF2P8AFFINEINVQB,\n\tVGF2P8AFFINEQB,\n\tVGF2P8MULB,\n\tVGMAXABSPS,\n\tVGMAXPD,\n\tVGMAXPS,\n\tVGMINPD,\n\tVGMINPS,\n\tVHADDPD,\n\tVHADDPS,\n\tVHSUBPD,\n\tVHSUBPS,\n\tVINSERTF128,\n\tVINSERTF32X4,\n\tVINSERTF32X8,\n\tVINSERTF64X2,\n\tVINSERTF64X4,\n\tVINSERTI128,\n\tVINSERTI32X4,\n\tVINSERTI32X8,\n\tVINSERTI64X2,\n\tVINSERTI64X4,\n\tVINSERTPS,\n\tVLDDQU,\n\tVLDMXCSR,\n\tVLOADUNPACKHD,\n\tVLOADUNPACKHPD,\n\tVLOADUNPACKHPS,\n\tVLOADUNPACKHQ,\n\tVLOADUNPACKLD,\n\tVLOADUNPACKLPD,\n\tVLOADUNPACKLPS,\n\tVLOADUNPACKLQ,\n\tVLOG2PS,\n\tVMASKMOVDQU,\n\tVMASKMOVPD,\n\tVMASKMOVPS,\n\tVMAXPD,\n\tVMAXPH,\n\tVMAXPS,\n\tVMAXSD,\n\tVMAXSH,\n\tVMAXSS,\n\tVMCALL,\n\tVMCLEAR,\n\tVMFUNC,\n\tVMINPD,\n\tVMINPH,\n\tVMINPS,\n\tVMINSD,\n\tVMINSH,\n\tVMINSS,\n\tVMLAUNCH,\n\tVMLOAD,\n\tVMMCALL,\n\tVMOVAPD,\n\tVMOVAPS,\n\tVMOVD,\n\tVMOVDDUP,\n\tVMOVDQA,\n\tVMOVDQA32,\n\tVMOVDQA64,\n\tVMOVDQU,\n\tVMOVDQU16,\n\tVMOVDQU32,\n\tVMOVDQU64,\n\tVMOVDQU8,\n\tVMOVHLPS,\n\tVMOVHPD,\n\tVMOVHPS,\n\tVMOVLHPS,\n\tVMOVLPD,\n\tVMOVLPS,\n\tVMOVMSKPD,\n\tVMOVMSKPS,\n\tVMOVNRAPD,\n\tVMOVNRAPS,\n\tVMOVNRNGOAPD,\n\tVMOVNRNGOAPS,\n\tVMOVNTDQ,\n\tVMOVNTDQA,\n\tVMOVNTPD,\n\tVMOVNTPS,\n\tVMOVQ,\n\tVMOVSD,\n\tVMOVSH,\n\tVMOVSHDUP,\n\tVMOVSLDUP,\n\tVMOVSS,\n\tVMOVUPD,\n\tVMOVUPS,\n\tVMOVW,\n\tVMPSADBW,\n\tVMPTRLD,\n\tVMPTRST,\n\tVMREAD,\n\tVMRESUME,\n\tVMRUN,\n\tVMSAVE,\n\tVMULPD,\n\tVMULPH,\n\tVMULPS,\n\tVMULSD,\n\tVMULSH,\n\tVMULSS,\n\tVMWRITE,\n\tVMXOFF,\n\tVMXON,\n\tVORPD,\n\tVORPS,\n\tVP2INTERSECTD,\n\tVP2INTERSECTQ,\n\tVP4DPWSSD,\n\tVP4DPWSSDS,\n\tVPABSB,\n\tVPABSD,\n\tVPABSQ,\n\tVPABSW,\n\tVPACKSSDW,\n\tVPACKSSWB,\n\tVPACKSTOREHD,\n\tVPACKSTOREHPD,\n\tVPACKSTOREHPS,\n\tVPACKSTOREHQ,\n\tVPACKSTORELD,\n\tVPACKSTORELPD,\n\tVPACKSTORELPS,\n\tVPACKSTORELQ,\n\tVPACKUSDW,\n\tVPACKUSWB,\n\tVPADCD,\n\tVPADDB,\n\tVPADDD,\n\tVPADDQ,\n\tVPADDSB,\n\tVPADDSETCD,\n\tVPADDSETSD,\n\tVPADDSW,\n\tVPADDUSB,\n\tVPADDUSW,\n\tVPADDW,\n\tVPALIGNR,\n\tVPAND,\n\tVPANDD,\n\tVPANDN,\n\tVPANDND,\n\tVPANDNQ,\n\tVPANDQ,\n\tVPAVGB,\n\tVPAVGW,\n\tVPBLENDD,\n\tVPBLENDMB,\n\tVPBLENDMD,\n\tVPBLENDMQ,\n\tVPBLENDMW,\n\tVPBLENDVB,\n\tVPBLENDW,\n\tVPBROADCASTB,\n\tVPBROADCASTD,\n\tVPBROADCASTMB2Q,\n\tVPBROADCASTMW2D,\n\tVPBROADCASTQ,\n\tVPBROADCASTW,\n\tVPCLMULQDQ,\n\tVPCMOV,\n\tVPCMPB,\n\tVPCMPD,\n\tVPCMPEQB,\n\tVPCMPEQD,\n\tVPCMPEQQ,\n\tVPCMPEQW,\n\tVPCMPESTRI,\n\tVPCMPESTRM,\n\tVPCMPGTB,\n\tVPCMPGTD,\n\tVPCMPGTQ,\n\tVPCMPGTW,\n\tVPCMPISTRI,\n\tVPCMPISTRM,\n\tVPCMPLTD,\n\tVPCMPQ,\n\tVPCMPUB,\n\tVPCMPUD,\n\tVPCMPUQ,\n\tVPCMPUW,\n\tVPCMPW,\n\tVPCOMB,\n\tVPCOMD,\n\tVPCOMPRESSB,\n\tVPCOMPRESSD,\n\tVPCOMPRESSQ,\n\tVPCOMPRESSW,\n\tVPCOMQ,\n\tVPCOMUB,\n\tVPCOMUD,\n\tVPCOMUQ,\n\tVPCOMUW,\n\tVPCOMW,\n\tVPCONFLICTD,\n\tVPCONFLICTQ,\n\tVPDPBSSD,\n\tVPDPBSSDS,\n\tVPDPBSUD,\n\tVPDPBSUDS,\n\tVPDPBUSD,\n\tVPDPBUSDS,\n\tVPDPBUUD,\n\tVPDPBUUDS,\n\tVPDPWSSD,\n\tVPDPWSSDS,\n\tVPERM2F128,\n\tVPERM2I128,\n\tVPERMB,\n\tVPERMD,\n\tVPERMF32X4,\n\tVPERMI2B,\n\tVPERMI2D,\n\tVPERMI2PD,\n\tVPERMI2PS,\n\tVPERMI2Q,\n\tVPERMI2W,\n\tVPERMIL2PD,\n\tVPERMIL2PS,\n\tVPERMILPD,\n\tVPERMILPS,\n\tVPERMPD,\n\tVPERMPS,\n\tVPERMQ,\n\tVPERMT2B,\n\tVPERMT2D,\n\tVPERMT2PD,\n\tVPERMT2PS,\n\tVPERMT2Q,\n\tVPERMT2W,\n\tVPERMW,\n\tVPEXPANDB,\n\tVPEXPANDD,\n\tVPEXPANDQ,\n\tVPEXPANDW,\n\tVPEXTRB,\n\tVPEXTRD,\n\tVPEXTRQ,\n\tVPEXTRW,\n\tVPGATHERDD,\n\tVPGATHERDQ,\n\tVPGATHERQD,\n\tVPGATHERQQ,\n\tVPHADDBD,\n\tVPHADDBQ,\n\tVPHADDBW,\n\tVPHADDD,\n\tVPHADDDQ,\n\tVPHADDSW,\n\tVPHADDUBD,\n\tVPHADDUBQ,\n\tVPHADDUBW,\n\tVPHADDUDQ,\n\tVPHADDUWD,\n\tVPHADDUWQ,\n\tVPHADDW,\n\tVPHADDWD,\n\tVPHADDWQ,\n\tVPHMINPOSUW,\n\tVPHSUBBW,\n\tVPHSUBD,\n\tVPHSUBDQ,\n\tVPHSUBSW,\n\tVPHSUBW,\n\tVPHSUBWD,\n\tVPINSRB,\n\tVPINSRD,\n\tVPINSRQ,\n\tVPINSRW,\n\tVPLZCNTD,\n\tVPLZCNTQ,\n\tVPMACSDD,\n\tVPMACSDQH,\n\tVPMACSDQL,\n\tVPMACSSDD,\n\tVPMACSSDQH,\n\tVPMACSSDQL,\n\tVPMACSSWD,\n\tVPMACSSWW,\n\tVPMACSWD,\n\tVPMACSWW,\n\tVPMADCSSWD,\n\tVPMADCSWD,\n\tVPMADD231D,\n\tVPMADD233D,\n\tVPMADD52HUQ,\n\tVPMADD52LUQ,\n\tVPMADDUBSW,\n\tVPMADDWD,\n\tVPMASKMOVD,\n\tVPMASKMOVQ,\n\tVPMAXSB,\n\tVPMAXSD,\n\tVPMAXSQ,\n\tVPMAXSW,\n\tVPMAXUB,\n\tVPMAXUD,\n\tVPMAXUQ,\n\tVPMAXUW,\n\tVPMINSB,\n\tVPMINSD,\n\tVPMINSQ,\n\tVPMINSW,\n\tVPMINUB,\n\tVPMINUD,\n\tVPMINUQ,\n\tVPMINUW,\n\tVPMOVB2M,\n\tVPMOVD2M,\n\tVPMOVDB,\n\tVPMOVDW,\n\tVPMOVM2B,\n\tVPMOVM2D,\n\tVPMOVM2Q,\n\tVPMOVM2W,\n\tVPMOVMSKB,\n\tVPMOVQ2M,\n\tVPMOVQB,\n\tVPMOVQD,\n\tVPMOVQW,\n\tVPMOVSDB,\n\tVPMOVSDW,\n\tVPMOVSQB,\n\tVPMOVSQD,\n\tVPMOVSQW,\n\tVPMOVSWB,\n\tVPMOVSXBD,\n\tVPMOVSXBQ,\n\tVPMOVSXBW,\n\tVPMOVSXDQ,\n\tVPMOVSXWD,\n\tVPMOVSXWQ,\n\tVPMOVUSDB,\n\tVPMOVUSDW,\n\tVPMOVUSQB,\n\tVPMOVUSQD,\n\tVPMOVUSQW,\n\tVPMOVUSWB,\n\tVPMOVW2M,\n\tVPMOVWB,\n\tVPMOVZXBD,\n\tVPMOVZXBQ,\n\tVPMOVZXBW,\n\tVPMOVZXDQ,\n\tVPMOVZXWD,\n\tVPMOVZXWQ,\n\tVPMULDQ,\n\tVPMULHD,\n\tVPMULHRSW,\n\tVPMULHUD,\n\tVPMULHUW,\n\tVPMULHW,\n\tVPMULLD,\n\tVPMULLQ,\n\tVPMULLW,\n\tVPMULTISHIFTQB,\n\tVPMULUDQ,\n\tVPOPCNTB,\n\tVPOPCNTD,\n\tVPOPCNTQ,\n\tVPOPCNTW,\n\tVPOR,\n\tVPORD,\n\tVPORQ,\n\tVPPERM,\n\tVPREFETCH0,\n\tVPREFETCH1,\n\tVPREFETCH2,\n\tVPREFETCHE0,\n\tVPREFETCHE1,\n\tVPREFETCHE2,\n\tVPREFETCHENTA,\n\tVPREFETCHNTA,\n\tVPROLD,\n\tVPROLQ,\n\tVPROLVD,\n\tVPROLVQ,\n\tVPRORD,\n\tVPRORQ,\n\tVPRORVD,\n\tVPRORVQ,\n\tVPROTB,\n\tVPROTD,\n\tVPROTQ,\n\tVPROTW,\n\tVPSADBW,\n\tVPSBBD,\n\tVPSBBRD,\n\tVPSCATTERDD,\n\tVPSCATTERDQ,\n\tVPSCATTERQD,\n\tVPSCATTERQQ,\n\tVPSHAB,\n\tVPSHAD,\n\tVPSHAQ,\n\tVPSHAW,\n\tVPSHLB,\n\tVPSHLD,\n\tVPSHLDD,\n\tVPSHLDQ,\n\tVPSHLDVD,\n\tVPSHLDVQ,\n\tVPSHLDVW,\n\tVPSHLDW,\n\tVPSHLQ,\n\tVPSHLW,\n\tVPSHRDD,\n\tVPSHRDQ,\n\tVPSHRDVD,\n\tVPSHRDVQ,\n\tVPSHRDVW,\n\tVPSHRDW,\n\tVPSHUFB,\n\tVPSHUFBITQMB,\n\tVPSHUFD,\n\tVPSHUFHW,\n\tVPSHUFLW,\n\tVPSIGNB,\n\tVPSIGND,\n\tVPSIGNW,\n\tVPSLLD,\n\tVPSLLDQ,\n\tVPSLLQ,\n\tVPSLLVD,\n\tVPSLLVQ,\n\tVPSLLVW,\n\tVPSLLW,\n\tVPSRAD,\n\tVPSRAQ,\n\tVPSRAVD,\n\tVPSRAVQ,\n\tVPSRAVW,\n\tVPSRAW,\n\tVPSRLD,\n\tVPSRLDQ,\n\tVPSRLQ,\n\tVPSRLVD,\n\tVPSRLVQ,\n\tVPSRLVW,\n\tVPSRLW,\n\tVPSUBB,\n\tVPSUBD,\n\tVPSUBQ,\n\tVPSUBRD,\n\tVPSUBRSETBD,\n\tVPSUBSB,\n\tVPSUBSETBD,\n\tVPSUBSW,\n\tVPSUBUSB,\n\tVPSUBUSW,\n\tVPSUBW,\n\tVPTERNLOGD,\n\tVPTERNLOGQ,\n\tVPTEST,\n\tVPTESTMB,\n\tVPTESTMD,\n\tVPTESTMQ,\n\tVPTESTMW,\n\tVPTESTNMB,\n\tVPTESTNMD,\n\tVPTESTNMQ,\n\tVPTESTNMW,\n\tVPUNPCKHBW,\n\tVPUNPCKHDQ,\n\tVPUNPCKHQDQ,\n\tVPUNPCKHWD,\n\tVPUNPCKLBW,\n\tVPUNPCKLDQ,\n\tVPUNPCKLQDQ,\n\tVPUNPCKLWD,\n\tVPXOR,\n\tVPXORD,\n\tVPXORQ,\n\tVRANGEPD,\n\tVRANGEPS,\n\tVRANGESD,\n\tVRANGESS,\n\tVRCP14PD,\n\tVRCP14PS,\n\tVRCP14SD,\n\tVRCP14SS,\n\tVRCP23PS,\n\tVRCP28PD,\n\tVRCP28PS,\n\tVRCP28SD,\n\tVRCP28SS,\n\tVRCPPH,\n\tVRCPPS,\n\tVRCPSH,\n\tVRCPSS,\n\tVREDUCEPD,\n\tVREDUCEPH,\n\tVREDUCEPS,\n\tVREDUCESD,\n\tVREDUCESH,\n\tVREDUCESS,\n\tVRNDFXPNTPD,\n\tVRNDFXPNTPS,\n\tVRNDSCALEPD,\n\tVRNDSCALEPH,\n\tVRNDSCALEPS,\n\tVRNDSCALESD,\n\tVRNDSCALESH,\n\tVRNDSCALESS,\n\tVROUNDPD,\n\tVROUNDPS,\n\tVROUNDSD,\n\tVROUNDSS,\n\tVRSQRT14PD,\n\tVRSQRT14PS,\n\tVRSQRT14SD,\n\tVRSQRT14SS,\n\tVRSQRT23PS,\n\tVRSQRT28PD,\n\tVRSQRT28PS,\n\tVRSQRT28SD,\n\tVRSQRT28SS,\n\tVRSQRTPH,\n\tVRSQRTPS,\n\tVRSQRTSH,\n\tVRSQRTSS,\n\tVSCALEFPD,\n\tVSCALEFPH,\n\tVSCALEFPS,\n\tVSCALEFSD,\n\tVSCALEFSH,\n\tVSCALEFSS,\n\tVSCALEPS,\n\tVSCATTERDPD,\n\tVSCATTERDPS,\n\tVSCATTERPF0DPD,\n\tVSCATTERPF0DPS,\n\tVSCATTERPF0HINTDPD,\n\tVSCATTERPF0HINTDPS,\n\tVSCATTERPF0QPD,\n\tVSCATTERPF0QPS,\n\tVSCATTERPF1DPD,\n\tVSCATTERPF1DPS,\n\tVSCATTERPF1QPD,\n\tVSCATTERPF1QPS,\n\tVSCATTERQPD,\n\tVSCATTERQPS,\n\tVSHUFF32X4,\n\tVSHUFF64X2,\n\tVSHUFI32X4,\n\tVSHUFI64X2,\n\tVSHUFPD,\n\tVSHUFPS,\n\tVSQRTPD,\n\tVSQRTPH,\n\tVSQRTPS,\n\tVSQRTSD,\n\tVSQRTSH,\n\tVSQRTSS,\n\tVSTMXCSR,\n\tVSUBPD,\n\tVSUBPH,\n\tVSUBPS,\n\tVSUBRPD,\n\tVSUBRPS,\n\tVSUBSD,\n\tVSUBSH,\n\tVSUBSS,\n\tVTESTPD,\n\tVTESTPS,\n\tVUCOMISD,\n\tVUCOMISH,\n\tVUCOMISS,\n\tVUNPCKHPD,\n\tVUNPCKHPS,\n\tVUNPCKLPD,\n\tVUNPCKLPS,\n\tVXORPD,\n\tVXORPS,\n\tVZEROALL,\n\tVZEROUPPER,\n\tWBINVD,\n\tWRFSBASE,\n\tWRGSBASE,\n\tWRMSR,\n\tWRMSRLIST,\n\tWRMSRNS,\n\tWRPKRU,\n\tWRSSD,\n\tWRSSQ,\n\tWRUSSD,\n\tWRUSSQ,\n\tXABORT,\n\tXADD,\n\tXBEGIN,\n\tXCHG,\n\tXCRYPT_CBC,\n\tXCRYPT_CFB,\n\tXCRYPT_CTR,\n\tXCRYPT_ECB,\n\tXCRYPT_OFB,\n\tXEND,\n\tXGETBV,\n\tXLAT,\n\tXOR,\n\tXORPD,\n\tXORPS,\n\tXRESLDTRK,\n\tXRSTOR,\n\tXRSTOR64,\n\tXRSTORS,\n\tXRSTORS64,\n\tXSAVE,\n\tXSAVE64,\n\tXSAVEC,\n\tXSAVEC64,\n\tXSAVEOPT,\n\tXSAVEOPT64,\n\tXSAVES,\n\tXSAVES64,\n\tXSETBV,\n\tXSHA1,\n\tXSHA256,\n\tXSTORE,\n\tXSUSLDTRK,\n\tXTEST,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = XTEST,\n}", "export enum OpcodeMap {\n\tMAP_DEFAULT,\n\tMAP_0F,\n\tMAP_0F38,\n\tMAP_0F3A,\n\tMAP_MAP4, // not used\n\tMAP_MAP5,\n\tMAP_MAP6,\n\tMAP_MAP7, // not used\n\tMAP_0F0F,\n\tMAP_XOP8,\n\tMAP_XOP9,\n\tMAP_XOPA,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\tMAP_, // MAX_VALUE = MAP_XOPA,\n}\n\nexport namespace InsnAttribute {\n\t/**\n\t * The instruction has the `ModRM` byte.\n\t */\n\texport const HAS_MODRM = 1n << 0n;\n\t/**\n\t * The instruction has the `SIB` byte.\n\t */\n\texport const HAS_SIB = 1n << 1n;\n\t/**\n\t * The instruction has the `REX` prefix.\n\t */\n\texport const HAS_REX = 1n << 2n;\n\t/**\n\t * The instruction has the `XOP` prefix.\n\t */\n\texport const HAS_XOP = 1n << 3n;\n\t/**\n\t * The instruction has the `VEX` prefix.\n\t */\n\texport const HAS_VEX = 1n << 4n;\n\t/**\n\t * The instruction has the `EVEX` prefix.\n\t */\n\texport const HAS_EVEX = 1n << 5n;\n\t/**\n\t * The instruction has the `MVEX` prefix.\n\t */\n\texport const HAS_MVEX = 1n << 6n;\n\t/**\n\t * The instruction has one or more operands with position-relative offsets.\n\t */\n\texport const IS_RELATIVE = 1n << 7n;\n\t/**\n\t * The instruction is privileged.\n\t *\n\t * Privileged instructions are any instructions that require a current ring level below 3.\n\t */\n\texport const IS_PRIVILEGED = 1n << 8n;\n\t/**\n\t * The instruction accesses one or more CPU-flags.\n\t */\n\texport const CPUFLAG_ACCESS = 1n << 9n;\n\t/**\n\t * The instruction may conditionally read the general CPU state.\n\t */\n\texport const CPU_STATE_CR = 1n << 10n;\n\t/**\n\t * The instruction may conditionally write the general CPU state.\n\t */\n\texport const CPU_STATE_CW = 1n << 11n;\n\t/**\n\t * The instruction may conditionally read the FPU state (X87, MMX).\n\t */\n\texport const FPU_STATE_CR = 1n << 12n;\n\t/**\n\t * The instruction may conditionally write the FPU state (X87, MMX).\n\t */\n\texport const FPU_STATE_CW = 1n << 13n;\n\t/**\n\t * The instruction may conditionally read the XMM state (AVX, AVX2, AVX-512).\n\t */\n\texport const XMM_STATE_CR = 1n << 14n;\n\t/**\n\t * The instruction may conditionally write the XMM state (AVX, AVX2, AVX-512).\n\t */\n\texport const XMM_STATE_CW = 1n << 15n;\n\t/**\n\t * The instruction accepts the `LOCK` prefix (`0xF0`).\n\t */\n\texport const ACCEPTS_LOCK = 1n << 16n;\n\t/**\n\t * The instruction accepts the `REP` prefix (`0xF3`).\n\t */\n\texport const ACCEPTS_REP = 1n << 17n;\n\t/**\n\t * The instruction accepts the `REPE`/`REPZ` prefix (`0xF3`).\n\t */\n\texport const ACCEPTS_REPE = 1n << 18n;\n\t/**\n\t * The instruction accepts the `REPE`/`REPZ` prefix (`0xF3`).\n\t */\n\texport const ACCEPTS_REPZ = ACCEPTS_REPE;\n\t/**\n\t * The instruction accepts the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t */\n\texport const ACCEPTS_REPNE = 1n << 19n;\n\t/**\n\t * The instruction accepts the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t */\n\texport const ACCEPTS_REPNZ = ACCEPTS_REPNE;\n\t/**\n\t * The instruction accepts the `BND` prefix (`0xF2`).\n\t */\n\texport const ACCEPTS_BND = 1n << 20n;\n\t/**\n\t * The instruction accepts the `XACQUIRE` prefix (`0xF2`).\n\t */\n\texport const ACCEPTS_XACQUIRE = 1n << 21n;\n\t/**\n\t * The instruction accepts the `XRELEASE` prefix (`0xF3`).\n\t */\n\texport const ACCEPTS_XRELEASE = 1n << 22n;\n\t/**\n\t * The instruction accepts the `XACQUIRE`/`XRELEASE` prefixes (`0xF2`, `0xF3`)\n\t * without the `LOCK` prefix (`0x0F`).\n\t */\n\texport const ACCEPTS_HLE_WITHOUT_LOCK = 1n << 23n;\n\t/**\n\t * The instruction accepts branch hints (0x2E, 0x3E).\n\t */\n\texport const ACCEPTS_BRANCH_HINTS = 1n << 24n;\n\t/**\n\t * The instruction accepts the `CET` `no-track` prefix (`0x3E`).\n\t */\n\texport const ACCEPTS_NOTRACK = 1n << 25n;\n\t/**\n\t * The instruction accepts segment prefixes (`0x2E`, `0x36`, `0x3E`, `0x26`,\n\t * `0x64`, `0x65`).\n\t */\n\texport const ACCEPTS_SEGMENT = 1n << 26n;\n\t/**\n\t * The instruction has the `LOCK` prefix (`0xF0`).\n\t */\n\texport const HAS_LOCK = 1n << 27n;\n\t/**\n\t * The instruction has the `REP` prefix (`0xF3`).\n\t */\n\texport const HAS_REP = 1n << 28n;\n\t/**\n\t * The instruction has the `REPE`/`REPZ` prefix (`0xF3`).\n\t */\n\texport const HAS_REPE = 1n << 29n;\n\t/**\n\t * The instruction has the `REPE`/`REPZ` prefix (`0xF3`).\n\t */\n\texport const HAS_REPZ = HAS_REPE;\n\t/**\n\t * The instruction has the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t */\n\texport const HAS_REPNE = 1n << 30n;\n\t/**\n\t * The instruction has the `REPNE`/`REPNZ` prefix (`0xF2`).\n\t */\n\texport const HAS_REPNZ = HAS_REPNE;\n\t/**\n\t * The instruction has the `BND` prefix (`0xF2`).\n\t */\n\texport const HAS_BND = 1n << 31n;\n\t/**\n\t * The instruction has the `XACQUIRE` prefix (`0xF2`).\n\t */\n\texport const HAS_XACQUIRE = 1n << 32n;\n\t/**\n\t * The instruction has the `XRELEASE` prefix (`0xF3`).\n\t */\n\texport const HAS_XRELEASE = 1n << 33n;\n\t/**\n\t * The instruction has the branch-not-taken hint (`0x2E`).\n\t */\n\texport const HAS_BRANCH_NOT_TAKEN = 1n << 34n;\n\t/**\n\t * The instruction has the branch-taken hint (`0x3E`).\n\t */\n\texport const HAS_BRANCH_TAKEN = 1n << 35n;\n\t/**\n\t * The instruction has the `CET` `no-track` prefix (`0x3E`).\n\t */\n\texport const HAS_NOTRACK = 1n << 36n;\n\t/**\n\t * The instruction has the `CS` segment modifier (`0x2E`).\n\t */\n\texport const HAS_SEGMENT_CS = 1n << 37n;\n\t/**\n\t * The instruction has the `SS` segment modifier (`0x36`).\n\t */\n\texport const HAS_SEGMENT_SS = 1n << 38n;\n\t/**\n\t * The instruction has the `DS` segment modifier (`0x3E`).\n\t */\n\texport const HAS_SEGMENT_DS = 1n << 39n;\n\t/**\n\t * The instruction has the `ES` segment modifier (`0x26`).\n\t */\n\texport const HAS_SEGMENT_ES = 1n << 40n;\n\t/**\n\t * The instruction has the `FS` segment modifier (`0x64`).\n\t */\n\texport const HAS_SEGMENT_FS = 1n << 41n;\n\t/**\n\t * The instruction has the `GS` segment modifier (`0x65`).\n\t */\n\texport const HAS_SEGMENT_GS = 1n << 42n;\n\t/**\n\t * The instruction has a segment modifier.\n\t */\n\texport const HAS_SEGMENT =\n\t\tHAS_SEGMENT_CS | HAS_SEGMENT_SS | HAS_SEGMENT_DS | HAS_SEGMENT_ES | HAS_SEGMENT_FS | HAS_SEGMENT_GS;\n\t/**\n\t * The instruction has the operand-size override prefix (`0x66`).\n\t */\n\texport const HAS_OPERANDSIZE = 1n << 43n; // TODO: rename\n\t/**\n\t * The instruction has the address-size override prefix (`0x67`).\n\t */\n\texport const HAS_ADDRESSSIZE = 1n << 44n; // TODO: rename\n\t/**\n\t * The instruction has the `EVEX.b` bit set.\n\t *\n\t * This attribute is mainly used by the encoder.\n\t */\n\texport const HAS_EVEX_B = 1n << 45n; // TODO: rename\n}\n", "export enum ISASet {\n\tINVALID,\n\tADOX_ADCX,\n\tAES,\n\tAMD,\n\tAMD3DNOW,\n\tAMD_INVLPGB,\n\tAMX_BF16,\n\tAMX_FP16,\n\tAMX_INT8,\n\tAMX_TILE,\n\tAVX,\n\tAVX2,\n\tAVX2GATHER,\n\tAVX512BW_128,\n\tAVX512BW_128N,\n\tAVX512BW_256,\n\tAVX512BW_512,\n\tAVX512BW_KOP,\n\tAVX512CD_128,\n\tAVX512CD_256,\n\tAVX512CD_512,\n\tAVX512DQ_128,\n\tAVX512DQ_128N,\n\tAVX512DQ_256,\n\tAVX512DQ_512,\n\tAVX512DQ_KOP,\n\tAVX512DQ_SCALAR,\n\tAVX512ER_512,\n\tAVX512ER_SCALAR,\n\tAVX512F_128,\n\tAVX512F_128N,\n\tAVX512F_256,\n\tAVX512F_512,\n\tAVX512F_KOP,\n\tAVX512F_SCALAR,\n\tAVX512PF_512,\n\tAVX512_4FMAPS_512,\n\tAVX512_4FMAPS_SCALAR,\n\tAVX512_4VNNIW_512,\n\tAVX512_BF16_128,\n\tAVX512_BF16_256,\n\tAVX512_BF16_512,\n\tAVX512_BITALG_128,\n\tAVX512_BITALG_256,\n\tAVX512_BITALG_512,\n\tAVX512_FP16_128,\n\tAVX512_FP16_128N,\n\tAVX512_FP16_256,\n\tAVX512_FP16_512,\n\tAVX512_FP16_SCALAR,\n\tAVX512_GFNI_128,\n\tAVX512_GFNI_256,\n\tAVX512_GFNI_512,\n\tAVX512_IFMA_128,\n\tAVX512_IFMA_256,\n\tAVX512_IFMA_512,\n\tAVX512_VAES_128,\n\tAVX512_VAES_256,\n\tAVX512_VAES_512,\n\tAVX512_VBMI2_128,\n\tAVX512_VBMI2_256,\n\tAVX512_VBMI2_512,\n\tAVX512_VBMI_128,\n\tAVX512_VBMI_256,\n\tAVX512_VBMI_512,\n\tAVX512_VNNI_128,\n\tAVX512_VNNI_256,\n\tAVX512_VNNI_512,\n\tAVX512_VP2INTERSECT_128,\n\tAVX512_VP2INTERSECT_256,\n\tAVX512_VP2INTERSECT_512,\n\tAVX512_VPCLMULQDQ_128,\n\tAVX512_VPCLMULQDQ_256,\n\tAVX512_VPCLMULQDQ_512,\n\tAVX512_VPOPCNTDQ_128,\n\tAVX512_VPOPCNTDQ_256,\n\tAVX512_VPOPCNTDQ_512,\n\tAVXAES,\n\tAVX_GFNI,\n\tAVX_IFMA,\n\tAVX_NE_CONVERT,\n\tAVX_VNNI,\n\tAVX_VNNI_INT8,\n\tBMI1,\n\tBMI2,\n\tCET,\n\tCLDEMOTE,\n\tCLFLUSHOPT,\n\tCLFSH,\n\tCLWB,\n\tCLZERO,\n\tCMOV,\n\tCMPXCHG16B,\n\tENQCMD,\n\tF16C,\n\tFAT_NOP,\n\tFCMOV,\n\tFCOMI,\n\tFMA,\n\tFMA4,\n\tFXSAVE,\n\tFXSAVE64,\n\tGFNI,\n\tHRESET,\n\tI186,\n\tI286PROTECTED,\n\tI286REAL,\n\tI386,\n\tI486,\n\tI486REAL,\n\tI86,\n\tICACHE_PREFETCH,\n\tINVPCID,\n\tKEYLOCKER,\n\tKEYLOCKER_WIDE,\n\tKNCE,\n\tKNCJKBR,\n\tKNCSTREAM,\n\tKNCV,\n\tKNC_MISC,\n\tKNC_PF_HINT,\n\tLAHF,\n\tLONGMODE,\n\tLWP,\n\tLZCNT,\n\tMCOMMIT,\n\tMONITOR,\n\tMONITORX,\n\tMOVBE,\n\tMOVDIR,\n\tMPX,\n\tMSRLIST,\n\tPADLOCK_ACE,\n\tPADLOCK_PHE,\n\tPADLOCK_PMM,\n\tPADLOCK_RNG,\n\tPAUSE,\n\tPCLMULQDQ,\n\tPCOMMIT,\n\tPCONFIG,\n\tPENTIUMMMX,\n\tPENTIUMREAL,\n\tPKU,\n\tPOPCNT,\n\tPPRO,\n\tPREFETCHWT1,\n\tPREFETCH_NOP,\n\tPT,\n\tRAO_INT,\n\tRDPID,\n\tRDPMC,\n\tRDPRU,\n\tRDRAND,\n\tRDSEED,\n\tRDTSCP,\n\tRDWRFSGS,\n\tRTM,\n\tSERIALIZE,\n\tSGX,\n\tSGX_ENCLV,\n\tSHA,\n\tSMAP,\n\tSMX,\n\tSNP,\n\tSSE,\n\tSSE2,\n\tSSE2MMX,\n\tSSE3,\n\tSSE3X87,\n\tSSE4,\n\tSSE42,\n\tSSE4A,\n\tSSEMXCSR,\n\tSSE_PREFETCH,\n\tSSSE3,\n\tSSSE3MMX,\n\tSVM,\n\tTBM,\n\tTDX,\n\tTSX_LDTRK,\n\tUINTR,\n\tVAES,\n\tVMFUNC,\n\tVPCLMULQDQ,\n\tVTX,\n\tWAITPKG,\n\tWRMSRNS,\n\tX87,\n\tXOP,\n\tXSAVE,\n\tXSAVEC,\n\tXSAVEOPT,\n\tXSAVES,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = XSAVES,\n}", "export enum ISAExt {\n\tINVALID,\n\tADOX_ADCX,\n\tAES,\n\tAMD3DNOW,\n\tAMD3DNOW_PREFETCH,\n\tAMD_INVLPGB,\n\tAMX_BF16,\n\tAMX_FP16,\n\tAMX_INT8,\n\tAMX_TILE,\n\tAVX,\n\tAVX2,\n\tAVX2GATHER,\n\tAVX512EVEX,\n\tAVX512VEX,\n\tAVXAES,\n\tAVX_IFMA,\n\tAVX_NE_CONVERT,\n\tAVX_VNNI,\n\tAVX_VNNI_INT8,\n\tBASE,\n\tBMI1,\n\tBMI2,\n\tCET,\n\tCLDEMOTE,\n\tCLFLUSHOPT,\n\tCLFSH,\n\tCLWB,\n\tCLZERO,\n\tENQCMD,\n\tF16C,\n\tFMA,\n\tFMA4,\n\tGFNI,\n\tHRESET,\n\tICACHE_PREFETCH,\n\tINVPCID,\n\tKEYLOCKER,\n\tKEYLOCKER_WIDE,\n\tKNC,\n\tKNCE,\n\tKNCV,\n\tLONGMODE,\n\tLZCNT,\n\tMCOMMIT,\n\tMMX,\n\tMONITOR,\n\tMONITORX,\n\tMOVBE,\n\tMOVDIR,\n\tMPX,\n\tMSRLIST,\n\tPADLOCK,\n\tPAUSE,\n\tPCLMULQDQ,\n\tPCOMMIT,\n\tPCONFIG,\n\tPKU,\n\tPREFETCHWT1,\n\tPT,\n\tRAO_INT,\n\tRDPID,\n\tRDPRU,\n\tRDRAND,\n\tRDSEED,\n\tRDTSCP,\n\tRDWRFSGS,\n\tRTM,\n\tSERIALIZE,\n\tSGX,\n\tSGX_ENCLV,\n\tSHA,\n\tSMAP,\n\tSMX,\n\tSNP,\n\tSSE,\n\tSSE2,\n\tSSE3,\n\tSSE4,\n\tSSE4A,\n\tSSSE3,\n\tSVM,\n\tTBM,\n\tTDX,\n\tTSX_LDTRK,\n\tUINTR,\n\tVAES,\n\tVMFUNC,\n\tVPCLMULQDQ,\n\tVTX,\n\tWAITPKG,\n\tWRMSRNS,\n\tX87,\n\tXOP,\n\tXSAVE,\n\tXSAVEC,\n\tXSAVEOPT,\n\tXSAVES,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = XSAVES,\n}", "export enum InsnCategory {\n\tINVALID,\n\tADOX_ADCX,\n\tAES,\n\tAMD3DNOW,\n\tAMX_TILE,\n\tAVX,\n\tAVX2,\n\tAVX2GATHER,\n\tAVX512,\n\tAVX512_4FMAPS,\n\tAVX512_4VNNIW,\n\tAVX512_BITALG,\n\tAVX512_VBMI,\n\tAVX512_VP2INTERSECT,\n\tAVX_IFMA,\n\tBINARY,\n\tBITBYTE,\n\tBLEND,\n\tBMI1,\n\tBMI2,\n\tBROADCAST,\n\tCALL,\n\tCET,\n\tCLDEMOTE,\n\tCLFLUSHOPT,\n\tCLWB,\n\tCLZERO,\n\tCMOV,\n\tCOMPRESS,\n\tCOND_BR,\n\tCONFLICT,\n\tCONVERT,\n\tDATAXFER,\n\tDECIMAL,\n\tENQCMD,\n\tEXPAND,\n\tFCMOV,\n\tFLAGOP,\n\tFMA4,\n\tFP16,\n\tGATHER,\n\tGFNI,\n\tHRESET,\n\tIFMA,\n\tINTERRUPT,\n\tIO,\n\tIOSTRINGOP,\n\tKEYLOCKER,\n\tKEYLOCKER_WIDE,\n\tKMASK,\n\tKNC,\n\tKNCMASK,\n\tKNCSCALAR,\n\tLEGACY,\n\tLOGICAL,\n\tLOGICAL_FP,\n\tLZCNT,\n\tMISC,\n\tMMX,\n\tMOVDIR,\n\tMPX,\n\tMSRLIST,\n\tNOP,\n\tPADLOCK,\n\tPCLMULQDQ,\n\tPCOMMIT,\n\tPCONFIG,\n\tPKU,\n\tPOP,\n\tPREFETCH,\n\tPREFETCHWT1,\n\tPT,\n\tPUSH,\n\tRDPID,\n\tRDPRU,\n\tRDRAND,\n\tRDSEED,\n\tRDWRFSGS,\n\tRET,\n\tROTATE,\n\tSCATTER,\n\tSEGOP,\n\tSEMAPHORE,\n\tSERIALIZE,\n\tSETCC,\n\tSGX,\n\tSHA,\n\tSHIFT,\n\tSMAP,\n\tSSE,\n\tSTRINGOP,\n\tSTTNI,\n\tSYSCALL,\n\tSYSRET,\n\tSYSTEM,\n\tTBM,\n\tTSX_LDTRK,\n\tUFMA,\n\tUINTR,\n\tUNCOND_BR,\n\tVAES,\n\tVBMI2,\n\tVEX,\n\tVFMA,\n\tVPCLMULQDQ,\n\tVTX,\n\tWAITPKG,\n\tWIDENOP,\n\tWRMSRNS,\n\tX87_ALU,\n\tXOP,\n\tXSAVE,\n\tXSAVEOPT,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = XSAVEOPT,\n}", "export enum FormatterStyle {\n\t/**\n\t * Generates `AT&T`-style disassembly.\n\t */\n\tATT,\n\t/**\n\t * Generates `Intel`-style disassembly.\n\t */\n\tINTEL,\n\t/**\n\t * Generates `MASM`-style disassembly that is directly accepted as input for\n\t * the `MASM` assembler.\n\t *\n\t * The runtime-address is ignored in this mode.\n\t */\n\tINTEL_MASM,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = INTEL_MASM,\n}\n\n/**\n * Enum selecting a property of the formatter.\n */", "export enum FormatterProperty {\n\t/* ---------------------------------------------------------------------------------------- */\n\t/* General                                                                                  */\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the printing of effective operand-size suffixes (`AT&T`) or operand-sizes\n\t * of memory operands (`INTEL`).\n\t *\n\t * Pass `ZYAN_TRUE` as value to force the formatter to always print the size, or `ZYAN_FALSE`\n\t * to only print it if needed.\n\t */\n\tFORCE_SIZE,\n\t/**\n\t * Controls the printing of segment prefixes.\n\t *\n\t * Pass `ZYAN_TRUE` as value to force the formatter to always print the segment register of\n\t * memory-operands or `ZYAN_FALSE` to omit implicit `DS`/`SS` segments.\n\t */\n\tFORCE_SEGMENT,\n\t/**\n\t * Controls the printing of the scale-factor component for memory operands.\n\t *\n\t * Pass `ZYAN_TRUE` as value to force the formatter to always print the scale-factor component\n\t * of memory operands or `ZYAN_FALSE` to omit the scale factor for values of `1`.\n\t */\n\tFORCE_SCALE_ONE,\n\t/**\n\t * Controls the printing of branch addresses.\n\t *\n\t * Pass `ZYAN_TRUE` as value to force the formatter to always print relative branch addresses\n\t * or `ZYAN_FALSE` to use absolute addresses, if a runtime-address different to\n\t * `ZYDIS_RUNTIME_ADDRESS_NONE` was passed.\n\t */\n\tFORCE_RELATIVE_BRANCHES,\n\t/**\n\t * Controls the printing of `EIP`/`RIP`-relative addresses.\n\t *\n\t * Pass `ZYAN_TRUE` as value to force the formatter to always print relative addresses for\n\t * `EIP`/`RIP`-relative operands or `ZYAN_FALSE` to use absolute addresses, if a runtime-\n\t * address different to `ZYDIS_RUNTIME_ADDRESS_NONE` was passed.\n\t */\n\tFORCE_RELATIVE_RIPREL,\n\t/**\n\t * Controls the printing of branch-instructions sizes.\n\t *\n\t * Pass `ZYAN_TRUE` as value to print the size (`short`, `near`) of branch\n\t * instructions or `ZYAN_FALSE` to hide it.\n\t *\n\t * Note that the `far`/`l` modifier is always printed.\n\t */\n\tPRINT_BRANCH_SIZE,\n\n\t/**\n\t * Controls the printing of instruction prefixes.\n\t *\n\t * Pass `ZYAN_TRUE` as value to print all instruction-prefixes (even ignored or duplicate\n\t * ones) or `ZYAN_FALSE` to only print prefixes that are effectively used by the instruction.\n\t */\n\tDETAILED_PREFIXES,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\t/* Numeric values                                                                           */\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the base of address values.\n\t */\n\tADDR_BASE,\n\t/**\n\t * Controls the signedness of relative addresses. Absolute addresses are\n\t * always unsigned.\n\t */\n\tADDR_SIGNEDNESS,\n\t/**\n\t * Controls the padding of absolute address values.\n\t *\n\t * Pass `DISABLED` to disable padding, `AUTO` to padd all\n\t * addresses to the current stack width (hexadecimal only), or any other integer value for\n\t * custom padding.\n\t */\n\tADDR_PADDING_ABSOLUTE,\n\t/**\n\t * Controls the padding of relative address values.\n\t *\n\t * Pass `DISABLED` to disable padding, `AUTO` to padd all\n\t * addresses to the current stack width (hexadecimal only), or any other integer value for\n\t * custom padding.\n\t */\n\tADDR_PADDING_RELATIVE,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the base of displacement values.\n\t */\n\tDISP_BASE,\n\t/**\n\t * Controls the signedness of displacement values.\n\t */\n\tDISP_SIGNEDNESS,\n\t/**\n\t * Controls the padding of displacement values.\n\t *\n\t * Pass `DISABLED` to disable padding, or any other integer value for custom\n\t * padding.\n\t */\n\tDISP_PADDING,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the base of immediate values.\n\t */\n\tIMM_BASE,\n\t/**\n\t * Controls the signedness of immediate values.\n\t *\n\t * Pass `AUTO` to automatically choose the most suitable mode based on the\n\t * operands `ZydisDecodedOperand.imm.is_signed` attribute.\n\t */\n\tIMM_SIGNEDNESS,\n\t/**\n\t * Controls the padding of immediate values.\n\t *\n\t * Pass `DISABLED` to disable padding, `AUTO` to padd all\n\t * immediates to the operand-width (hexadecimal only), or any other integer value for custom\n\t * padding.\n\t */\n\tIMM_PADDING,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\t/* Text formatting                                                                          */\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the letter-case for prefixes.\n\t *\n\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t */\n\tUPPERCASE_PREFIXES,\n\t/**\n\t * Controls the letter-case for the mnemonic.\n\t *\n\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t */\n\tUPPERCASE_MNEMONIC,\n\t/**\n\t * Controls the letter-case for registers.\n\t *\n\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t */\n\tUPPERCASE_REGISTERS,\n\t/**\n\t * Controls the letter-case for typecasts.\n\t *\n\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t */\n\tUPPERCASE_TYPECASTS,\n\t/**\n\t * Controls the letter-case for decorators.\n\t *\n\t * Pass `ZYAN_TRUE` as value to format in uppercase or `ZYAN_FALSE` to format in lowercase.\n\t */\n\tUPPERCASE_DECORATORS,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\t/* Number formatting                                                                        */\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the prefix for decimal values.\n\t *\n\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t * to set a custom prefix, or `ZYAN_NULL` to disable it.\n\t *\n\t * The string is deep-copied into an internal buffer.\n\t */\n\tDEC_PREFIX,\n\t/**\n\t * Controls the suffix for decimal values.\n\t *\n\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t * to set a custom suffix, or `ZYAN_NULL` to disable it.\n\t *\n\t * The string is deep-copied into an internal buffer.\n\t */\n\tDEC_SUFFIX,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Controls the letter-case of hexadecimal values.\n\t *\n\t * Pass `ZYAN_TRUE` as value to format in uppercase and `ZYAN_FALSE` to format in lowercase.\n\t *\n\t * The default value is `ZYAN_TRUE`.\n\t */\n\tHEX_UPPERCASE,\n\t/**\n\t * Controls whether to prepend hexadecimal values with a leading zero if the first character\n\t * is non-numeric.\n\t *\n\t * Pass `ZYAN_TRUE` to prepend a leading zero if the first character is non-numeric or\n\t * `ZYAN_FALSE` to disable this functionality.\n\t *\n\t * The default value is `ZYAN_FALSE`.\n\t */\n\tHEX_FORCE_LEADING_NUMBER,\n\t/**\n\t * Controls the prefix for hexadecimal values.\n\t *\n\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t * to set a custom prefix, or `ZYAN_NULL` to disable it.\n\t *\n\t * The string is deep-copied into an internal buffer.\n\t */\n\tHEX_PREFIX,\n\t/**\n\t * Controls the suffix for hexadecimal values.\n\t *\n\t * Pass a pointer to a null-terminated C-style string with a maximum length of 10 characters\n\t * to set a custom suffix, or `ZYAN_NULL` to disable it.\n\t *\n\t * The string is deep-copied into an internal buffer.\n\t */\n\tHEX_SUFFIX,\n\n\t/* ---------------------------------------------------------------------------------------- */\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = HEX_SUFFIX,\n}\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Enum defining different mantissae to be used during formatting.\n */", "export enum NumericBase {\n\t/**\n\t * Decimal system.\n\t */\n\tDEC,\n\t/**\n\t * Hexadecimal system.\n\t */\n\tHEX,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = HEX,\n}\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Enum defining the signeness of integers to be used during formatting.\n */", "export enum Signedness {\n\t/**\n\t * Automatically choose the most suitable mode based on the operands\n\t * ZydisDecodedOperand.imm.is_signed` attribute.\n\t */\n\tAUTO,\n\t/**\n\t * Force signed values.\n\t */\n\tSIGNED,\n\t/**\n\t * Force unsigned values.\n\t */\n\tUNSIGNED,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = UNSIGNED,\n}\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Enum definining magic values that receive special treatment when used as padding properties\n * of the formatter.\n */", "export enum Padding {\n\t/**\n\t * Disables padding.\n\t */\n\tDISABLED = 0,\n\t/**\n\t * Padds the value to the current stack-width for addresses, or to the\n\t * operand-width for immediate values (hexadecimal only).\n\t */\n\tAUTO = -1,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = AUTO,\n}\n\n/**\n * Enum of all decorator types.\n */", "export enum Decorator {\n\tINVALID,\n\t/**\n\t * The embedded-mask decorator.\n\t */\n\tMASK,\n\t/**\n\t * The broadcast decorator.\n\t */\n\tBC,\n\t/**\n\t * The rounding-control decorator.\n\t */\n\tRC,\n\t/**\n\t * The suppress-all-exceptions decorator.\n\t */\n\tSAE,\n\t/**\n\t * The register-swizzle decorator.\n\t */\n\tSWIZZLE,\n\t/**\n\t * The conversion decorator.\n\t */\n\tCONVERSION,\n\t/**\n\t * The eviction-hint decorator.\n\t */\n\tEH,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = EH,\n}\n", "export enum Register {\n\tNONE,\n\n\t// General purpose registers  8-bit\n\tAL,\n\tCL,\n\tDL,\n\tBL,\n\tAH,\n\tCH,\n\tDH,\n\tBH,\n\tSPL,\n\tBPL,\n\tSIL,\n\tDIL,\n\tR8B,\n\tR9B,\n\tR10B,\n\tR11B,\n\tR12B,\n\tR13B,\n\tR14B,\n\tR15B,\n\n\t// General purpose registers 16-bit\n\tAX,\n\tCX,\n\tDX,\n\tBX,\n\tSP,\n\tBP,\n\tSI,\n\tDI,\n\tR8W,\n\tR9W,\n\tR10W,\n\tR11W,\n\tR12W,\n\tR13W,\n\tR14W,\n\tR15W,\n\n\t// General purpose registers 32-bit\n\tEAX,\n\tECX,\n\tEDX,\n\tEBX,\n\tESP,\n\tEBP,\n\tESI,\n\tEDI,\n\tR8D,\n\tR9D,\n\tR10D,\n\tR11D,\n\tR12D,\n\tR13D,\n\tR14D,\n\tR15D,\n\n\t// General purpose registers 64-bit\n\tRAX,\n\tRCX,\n\tRDX,\n\tRBX,\n\tRSP,\n\tRBP,\n\tRSI,\n\tRDI,\n\tR8,\n\tR9,\n\tR10,\n\tR11,\n\tR12,\n\tR13,\n\tR14,\n\tR15,\n\n\t// Floating point legacy registers\n\tST0,\n\tST1,\n\tST2,\n\tST3,\n\tST4,\n\tST5,\n\tST6,\n\tST7,\n\tX87CONTROL,\n\tX87STATUS,\n\tX87TAG,\n\n\t// Floating point multimedia registers\n\tMM0,\n\tMM1,\n\tMM2,\n\tMM3,\n\tMM4,\n\tMM5,\n\tMM6,\n\tMM7,\n\n\t// Floating point vector registers 128-bit\n\tXMM0,\n\tXMM1,\n\tXMM2,\n\tXMM3,\n\tXMM4,\n\tXMM5,\n\tXMM6,\n\tXMM7,\n\tXMM8,\n\tXMM9,\n\tXMM10,\n\tXMM11,\n\tXMM12,\n\tXMM13,\n\tXMM14,\n\tXMM15,\n\tXMM16,\n\tXMM17,\n\tXMM18,\n\tXMM19,\n\tXMM20,\n\tXMM21,\n\tXMM22,\n\tXMM23,\n\tXMM24,\n\tXMM25,\n\tXMM26,\n\tXMM27,\n\tXMM28,\n\tXMM29,\n\tXMM30,\n\tXMM31,\n\n\t// Floating point vector registers 256-bit\n\tYMM0,\n\tYMM1,\n\tYMM2,\n\tYMM3,\n\tYMM4,\n\tYMM5,\n\tYMM6,\n\tYMM7,\n\tYMM8,\n\tYMM9,\n\tYMM10,\n\tYMM11,\n\tYMM12,\n\tYMM13,\n\tYMM14,\n\tYMM15,\n\tYMM16,\n\tYMM17,\n\tYMM18,\n\tYMM19,\n\tYMM20,\n\tYMM21,\n\tYMM22,\n\tYMM23,\n\tYMM24,\n\tYMM25,\n\tYMM26,\n\tYMM27,\n\tYMM28,\n\tYMM29,\n\tYMM30,\n\tYMM31,\n\n\t// Floating point vector registers 512-bit\n\tZMM0,\n\tZMM1,\n\tZMM2,\n\tZMM3,\n\tZMM4,\n\tZMM5,\n\tZMM6,\n\tZMM7,\n\tZMM8,\n\tZMM9,\n\tZMM10,\n\tZMM11,\n\tZMM12,\n\tZMM13,\n\tZMM14,\n\tZMM15,\n\tZMM16,\n\tZMM17,\n\tZMM18,\n\tZMM19,\n\tZMM20,\n\tZMM21,\n\tZMM22,\n\tZMM23,\n\tZMM24,\n\tZMM25,\n\tZMM26,\n\tZMM27,\n\tZMM28,\n\tZMM29,\n\tZMM30,\n\tZMM31,\n\n\t// Matrix registers\n\tTMM0,\n\tTMM1,\n\tTMM2,\n\tTMM3,\n\tTMM4,\n\tTMM5,\n\tTMM6,\n\tTMM7,\n\n\t// Flags registers\n\tFLAGS,\n\tEFLAGS,\n\tRFLAGS,\n\n\t// Instruction-pointer registers\n\tIP,\n\tEIP,\n\tRIP,\n\n\t// Segment registers\n\tES,\n\tCS,\n\tSS,\n\tDS,\n\tFS,\n\tGS,\n\n\t// Table registers\n\tGDTR,\n\tLDTR,\n\tIDTR,\n\tTR,\n\n\t// Test registers\n\tTR0,\n\tTR1,\n\tTR2,\n\tTR3,\n\tTR4,\n\tTR5,\n\tTR6,\n\tTR7,\n\n\t// Control registers\n\tCR0,\n\tCR1,\n\tCR2,\n\tCR3,\n\tCR4,\n\tCR5,\n\tCR6,\n\tCR7,\n\tCR8,\n\tCR9,\n\tCR10,\n\tCR11,\n\tCR12,\n\tCR13,\n\tCR14,\n\tCR15,\n\n\t// Debug registers\n\tDR0,\n\tDR1,\n\tDR2,\n\tDR3,\n\tDR4,\n\tDR5,\n\tDR6,\n\tDR7,\n\tDR8,\n\tDR9,\n\tDR10,\n\tDR11,\n\tDR12,\n\tDR13,\n\tDR14,\n\tDR15,\n\n\t// Mask registers\n\tK0,\n\tK1,\n\tK2,\n\tK3,\n\tK4,\n\tK5,\n\tK6,\n\tK7,\n\n\t// Bound registers\n\tBND0,\n\tBND1,\n\tBND2,\n\tBND3,\n\tBNDCFG,\n\tBNDSTATUS,\n\n\t// Uncategorized\n\tMXCSR,\n\tPKRU,\n\tXCR0,\n\tUIF,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = UIF,\n}\n", "export enum RegisterKind {\n\tINVALID,\n\tGPR,\n\tX87,\n\tMMX,\n\tVR,\n\tTMM,\n\tSEGMENT,\n\tTEST,\n\tCONTROL,\n\tDEBUG,\n\tMASK,\n\tBOUND,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = BOUND,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Register classes                                                                               */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisRegisterClass` enum.\n *", " * Please note that this enum does not contain a matching entry for all values of the\n * `ZydisRegister` enum, but only for those registers where it makes sense to logically group them\n * for decoding/encoding purposes.\n *\n * These are mainly the registers that can be identified by an id within their corresponding\n * register-class. The `IP` and `FLAGS` values are exceptions to this rule.\n */\nexport enum RegisterClass {\n\tINVALID,\n\t/**\n\t * 8-bit general-purpose registers.\n\t */\n\tGPR8,\n\t/**\n\t * 16-bit general-purpose registers.\n\t */\n\tGPR16,\n\t/**\n\t * 32-bit general-purpose registers.\n\t */\n\tGPR32,\n\t/**\n\t * 64-bit general-purpose registers.\n\t */\n\tGPR64,\n\t/**\n\t * Floating point legacy registers.\n\t */\n\tX87,\n\t/**\n\t * Floating point multimedia registers.\n\t */\n\tMMX,\n\t/**\n\t * 128-bit vector registers.\n\t */\n\tXMM,\n\t/**\n\t * 256-bit vector registers.\n\t */\n\tYMM,\n\t/**\n\t * 512-bit vector registers.\n\t */\n\tZMM,\n\t/**\n\t * Matrix registers.\n\t */\n\tTMM,\n\t/*\n\t * Flags registers.\n\t */\n\tFLAGS,\n\t/**\n\t * Instruction-pointer registers.\n\t */\n\tIP,\n\t/**\n\t * Segment registers.\n\t */\n\tSEGMENT,\n\t/**\n\t * Table registers.\n\t */\n\tTABLE,\n\t/**\n\t * Test registers.\n\t */\n\tTEST,\n\t/**\n\t * Control registers.\n\t */\n\tCONTROL,\n\t/**\n\t * Debug registers.\n\t */\n\tDEBUG,\n\t/**\n\t * Mask registers.\n\t */\n\tMASK,\n\t/**\n\t * Bound registers.\n\t */\n\tBOUND,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = BOUND,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Element type                                                                                   */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisElementType` enum.\n */", "export enum ElementType {\n\tINVALID,\n\t/**\n\t * A struct type.\n\t */\n\tSTRUCT,\n\t/**\n\t * Unsigned integer value.\n\t */\n\tUINT,\n\t/**\n\t * Signed integer value.\n\t */\n\tINT,\n\t/**\n\t * 16-bit floating point value (`half`).\n\t */\n\tFLOAT16,\n\t/**\n\t * 32-bit floating point value (`single`).\n\t */\n\tFLOAT32,\n\t/**\n\t * 64-bit floating point value (`double`).\n\t */\n\tFLOAT64,\n\t/**\n\t * 80-bit floating point value (`extended`).\n\t */\n\tFLOAT80,\n\t/**\n\t * 16-bit brain floating point value.\n\t */\n\tBFLOAT16,\n\t/**\n\t * Binary coded decimal value.\n\t */\n\tLONGBCD,\n\t/**\n\t * A condition code (e.g. used by `CMPPD`, `VCMPPD`, ...).\n\t */\n\tCC,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = CC,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Operand type                                                                                   */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisOperandType` enum.\n */", "export enum OperandType {\n\t/**\n\t * The operand is not used.\n\t */\n\tUNUSED,\n\t/**\n\t * The operand is a register operand.\n\t */\n\tREGISTER,\n\t/**\n\t * The operand is a memory operand.\n\t */\n\tMEMORY,\n\t/**\n\t * The operand is a pointer operand with a segment:offset lvalue.\n\t */\n\tPOINTER,\n\t/**\n\t * The operand is an immediate operand.\n\t */\n\tIMMEDIATE,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = IMMEDIATE,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Operand encoding                                                                               */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisOperandEncoding` enum.\n */", "export enum OperandEncoding {\n\tNONE,\n\tMODRM_REG,\n\tMODRM_RM,\n\tOPCODE,\n\tNDSNDD,\n\tIS4,\n\tMASK,\n\tDISP8,\n\tDISP16,\n\tDISP32,\n\tDISP64,\n\tDISP16_32_64,\n\tDISP32_32_64,\n\tDISP16_32_32,\n\tUIMM8,\n\tUIMM16,\n\tUIMM32,\n\tUIMM64,\n\tUIMM16_32_64,\n\tUIMM32_32_64,\n\tUIMM16_32_32,\n\tSIMM8,\n\tSIMM16,\n\tSIMM32,\n\tSIMM64,\n\tSIMM16_32_64,\n\tSIMM32_32_64,\n\tSIMM16_32_32,\n\tJIMM8,\n\tJIMM16,\n\tJIMM32,\n\tJIMM64,\n\tJIMM16_32_64,\n\tJIMM32_32_64,\n\tJIMM16_32_32,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = JIMM16_32_32,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Operand visibility                                                                             */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisOperandVisibility` enum.\n */", "export enum OperandVisibility {\n\tINVALID,\n\t/**\n\t * The operand is explicitly encoded in the instruction.\n\t */\n\tEXPLICIT,\n\t/**\n\t * The operand is part of the opcode, but listed as an operand.\n\t */\n\tIMPLICIT,\n\t/**\n\t * The operand is part of the opcode, and not typically listed as an operand.\n\t */\n\tHIDDEN,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = HIDDEN,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Operand action                                                                                 */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisOperandAction` enum.\n */", "export enum OperandAction {\n\t/* ------------------------------------------------------------------------------------------ */\n\t/* Elemental actions                                                                          */\n\t/* ------------------------------------------------------------------------------------------ */\n\n\t/**\n\t * The operand is read by the instruction.\n\t */\n\tREAD = 0x01,\n\t/**\n\t * The operand is written by the instruction (must write).\n\t */\n\tWRITE = 0x02,\n\t/**\n\t * The operand is conditionally read by the instruction.\n\t */\n\tCONDREAD = 0x04,\n\t/**\n\t * The operand is conditionally written by the instruction (may write).\n\t */\n\tCONDWRITE = 0x08,\n\n\t/* ------------------------------------------------------------------------------------------ */\n\t/* Combined actions                                                                           */\n\t/* ------------------------------------------------------------------------------------------ */\n\n\t/**\n\t * The operand is read (must read) and written by the instruction (must write).\n\t */\n\tREADWRITE = READ | WRITE,\n\t/**\n\t * The operand is conditionally read (may read) and conditionally written by\n\t * the instruction (may write).\n\t */\n\tCONDREAD_CONDWRITE = CONDREAD | CONDWRITE,\n\t/**\n\t * The operand is read (must read) and conditionally written by the\n\t * instruction (may write).\n\t */\n\tREAD_CONDWRITE = READ | CONDWRITE,\n\t/**\n\t * The operand is written (must write) and conditionally read by the\n\t * instruction (may read).\n\t */\n\tCONDREAD_WRITE = CONDREAD | WRITE,\n\n\t/**\n\t * Mask combining all reading access flags.\n\t */\n\tMASK_READ = READ | CONDREAD,\n\t/**\n\t * Mask combining all writing access flags.\n\t */\n\tMASK_WRITE = WRITE | CONDWRITE,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Instruction encoding                                                                           */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisInstructionEncoding` enum.\n */", "export enum InstructionEncoding {\n\t/**\n\t * The instruction uses the legacy encoding.\n\t */\n\tLEGACY,\n\t/**\n\t * The instruction uses the AMD 3DNow-encoding.\n\t */\n\t\"3DNOW\",\n\t/**\n\t * The instruction uses the AMD XOP-encoding.\n\t */\n\tXOP,\n\t/**\n\t * The instruction uses the VEX-encoding.\n\t */\n\tVEX,\n\t/**\n\t * The instruction uses the EVEX-encoding.\n\t */\n\tEVEX,\n\t/**\n\t * The instruction uses the MVEX-encoding.\n\t */\n\tMVEX,\n\n\t/**\n\t * Maximum value of this enum.\n\t */\n\t// MAX_VALUE = MVEX,\n}\n", "export enum MemoryOperandType {\n\tINVALID,\n\t/**\n\t * Normal memory operand.\n\t */\n\tMEM,\n\t/**\n\t * The memory operand is only used for address-generation. No real memory-access is\n\t * caused.\n\t */\n\tAGEN,\n\t/**\n\t * A memory operand using `SIB` addressing form, where the index register is not used\n\t * in address calculation and scale is ignored. No real memory-access is caused.\n\t */\n\tMIB,\n\t/**\n\t * A vector `SIB` memory addressing operand (`VSIB`).\n\t */\n\tVSIB,\n}\n\n/**\n * Defines possible physical instruction encodings as bit flags, so multiple acceptable encodings\n * can be specified simultaneously.\n */", "export enum EncodableEncoding {\n\tDEFAULT = 0x00000000,\n\tLEGACY = 0x00000001,\n\t\"3DNOW\" = 0x00000002,\n\tXOP = 0x00000004,\n\tVEX = 0x00000008,\n\tEVEX = 0x00000010,\n\tMVEX = 0x00000020,\n}\n\n/**\n * Defines encodable physical/effective sizes of relative immediate operands. See\n * `ZydisEncoderRequest.branch_width` for more details.\n */", "export enum BranchWidth {\n\tWIDTH_NONE,\n\tWIDTH_8,\n\tWIDTH_16,\n\tWIDTH_32,\n\tWIDTH_64,\n}\n\n/**\n * Defines possible values for address size hints. See `ZydisEncoderRequest` for more information\n * about address size hints.\n */", "export enum AddressSizeHint {\n\tHINT_NONE,\n\tHINT_16,\n\tHINT_32,\n\tHINT_64,\n}\n\n/**\n * Defines possible values for operand size hints. See `ZydisEncoderRequest` for more information\n * about operand size hints.\n */", "export enum OperandSizeHint {\n\tHINT_NONE,\n\tHINT_8,\n\tHINT_16,\n\tHINT_32,\n\tHINT_64,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* Branch types                                                                                   */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisBranchType` enum.\n */", "export enum BranchType {\n\t/**\n\t * The instruction is not a branch instruction.\n\t */\n\tNONE,\n\t/**\n\t * The instruction is a short (8-bit) branch instruction.\n\t */\n\tSHORT,\n\t/**\n\t * The instruction is a near (16-bit or 32-bit) branch instruction.\n\t */\n\tNEAR,\n\t/**\n\t * The instruction is a far (inter-segment) branch instruction.\n\t */\n\tFAR,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* SSE/AVX exception-class                                                                        */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisExceptionClass` enum.\n */", "export enum ExceptionClass {\n\tNONE,\n\t// TODO: FP Exceptions\n\tSSE1,\n\tSSE2,\n\tSSE3,\n\tSSE4,\n\tSSE5,\n\tSSE7,\n\tAVX1,\n\tAVX2,\n\tAVX3,\n\tAVX4,\n\tAVX5,\n\tAVX6,\n\tAVX7,\n\tAVX8,\n\tAVX11,\n\tAVX12,\n\tE1,\n\tE1NF,\n\tE2,\n\tE2NF,\n\tE3,\n\tE3NF,\n\tE4,\n\tE4NF,\n\tE5,\n\tE5NF,\n\tE6,\n\tE6NF,\n\tE7NM,\n\tE7NM128,\n\tE9NF,\n\tE10,\n\tE10NF,\n\tE11,\n\tE11NF,\n\tE12,\n\tE12NP,\n\tK20,\n\tK21,\n\tAMXE1,\n\tAMXE2,\n\tAMXE3,\n\tAMXE4,\n\tAMXE5,\n\tAMXE6,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* AVX mask mode                                                                                  */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisMaskMode` enum.\n */", "export enum MaskMode {\n\tINVALID,\n\t/**\n\t * Masking is disabled for the current instruction (`K0` register is used).\n\t */\n\tDISABLED,\n\t/**\n\t * The embedded mask register is used as a merge-mask.\n\t */\n\tMERGING,\n\t/**\n\t * The embedded mask register is used as a zero-mask.\n\t */\n\tZEROING,\n\t/**\n\t * The embedded mask register is used as a control-mask (element selector).\n\t */\n\tCONTROL,\n\t/**\n\t * The embedded mask register is used as a zeroing control-mask (element selector).\n\t */\n\tCONTROL_ZEROING,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* AVX broadcast-mode                                                                             */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisBroadcastMode` enum.\n */", "export enum BroadcastMode {\n\tMODE_INVALID,\n\tMODE_1_TO_2,\n\tMODE_1_TO_4,\n\tMODE_1_TO_8,\n\tMODE_1_TO_16,\n\tMODE_1_TO_32,\n\tMODE_1_TO_64,\n\tMODE_2_TO_4,\n\tMODE_2_TO_8,\n\tMODE_2_TO_16,\n\tMODE_4_TO_8,\n\tMODE_4_TO_16,\n\tMODE_8_TO_16,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* AVX rounding-mode                                                                              */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisRoundingMode` enum.\n */", "export enum RoundingMode {\n\tINVALID,\n\t/**\n\t * Round to nearest.\n\t */\n\tRN,\n\t/**\n\t * Round down.\n\t */\n\tRD,\n\t/**\n\t * Round up.\n\t */\n\tRU,\n\t/**\n\t * Round towards zero.\n\t */\n\tRZ,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* KNC swizzle-mode                                                                               */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisSwizzleMode` enum.\n */", "export enum SwizzleMode {\n\tINVALID,\n\tDCBA,\n\tCDAB,\n\tBADC,\n\tDACB,\n\tAAAA,\n\tBBBB,\n\tCCCC,\n\tDDDD,\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n/* KNC conversion-mode                                                                            */\n/* ---------------------------------------------------------------------------------------------- */\n\n/**\n * Defines the `ZydisConversionMode` enum.\n */", "export enum ConversionMode {\n\tINVALID,\n\tFLOAT16,\n\tSINT8,\n\tUINT8,\n\tSINT16,\n\tUINT16,\n}\n\nexport enum Feature {\n\tDECODER,\n\tENCODER,\n\tFORMATTER,\n\tAVX512,\n\tKNC,\n\tSEGMENT,\n}\n", "export enum Feature {\n\tDECODER,\n\tENCODER,\n\tFORMATTER,\n\tAVX512,\n\tKNC,\n\tSEGMENT,\n}\n\nexport enum CPUFlag {\n\tCF = 1 << 0,\n\t/**\n\t * Parity flag.\n\t */\n\tPF = 1 << 2,\n\t/**\n\t * Adjust flag.\n\t */\n\tAF = 1 << 4,\n\t/**\n\t * Zero flag.\n\t */\n\tZF = 1 << 6,\n\t/**\n\t * Sign flag.\n\t */\n\tSF = 1 << 7,\n\t/**\n\t * Trap flag.\n\t */\n\tTF = 1 << 8,\n\t/**\n\t * Interrupt enable flag.\n\t */\n\tIF = 1 << 9,\n\t/**\n\t * Direction flag.\n\t */\n\tDF = 1 << 10,\n\t/**\n\t * Overflow flag.\n\t */\n\tOF = 1 << 11,\n\t/**\n\t * I/O privilege level flag.\n\t */\n\tIOPL = 1 << 12,\n\t/**\n\t * Nested task flag.\n\t */\n\tNT = 1 << 14,\n\t/**\n\t * Resume flag.\n\t */\n\tRF = 1 << 16,\n\t/**\n\t * Virtual 8086 mode flag.\n\t */\n\tVM = 1 << 17,\n\t/**\n\t * Alignment check.\n\t */\n\tAC = 1 << 18,\n\t/**\n\t * Virtual interrupt flag.\n\t */\n\tVIF = 1 << 19,\n\t/**\n\t * Virtual interrupt pending.\n\t */\n\tVIP = 1 << 20,\n\t/**\n\t * Able to use CPUID instruction.\n\t */\n\tID = 1 << 21,\n}\n", "export enum CPUFlag {\n\tCF = 1 << 0,\n\t/**\n\t * Parity flag.\n\t */\n\tPF = 1 << 2,\n\t/**\n\t * Adjust flag.\n\t */\n\tAF = 1 << 4,\n\t/**\n\t * Zero flag.\n\t */\n\tZF = 1 << 6,\n\t/**\n\t * Sign flag.\n\t */\n\tSF = 1 << 7,\n\t/**\n\t * Trap flag.\n\t */\n\tTF = 1 << 8,\n\t/**\n\t * Interrupt enable flag.\n\t */\n\tIF = 1 << 9,\n\t/**\n\t * Direction flag.\n\t */\n\tDF = 1 << 10,\n\t/**\n\t * Overflow flag.\n\t */\n\tOF = 1 << 11,\n\t/**\n\t * I/O privilege level flag.\n\t */\n\tIOPL = 1 << 12,\n\t/**\n\t * Nested task flag.\n\t */\n\tNT = 1 << 14,\n\t/**\n\t * Resume flag.\n\t */\n\tRF = 1 << 16,\n\t/**\n\t * Virtual 8086 mode flag.\n\t */\n\tVM = 1 << 17,\n\t/**\n\t * Alignment check.\n\t */\n\tAC = 1 << 18,\n\t/**\n\t * Virtual interrupt flag.\n\t */\n\tVIF = 1 << 19,\n\t/**\n\t * Virtual interrupt pending.\n\t */\n\tVIP = 1 << 20,\n\t/**\n\t * Able to use CPUID instruction.\n\t */\n\tID = 1 << 21,\n}\n", "export enum FPUFlag {\n\t/**\n\t * FPU condition-code flag 0.\n\t */\n\tC0 = 1 << 0,\n\t/**\n\t * FPU condition-code flag 1.\n\t */\n\tC1 = 1 << 1,\n\t/**\n\t * FPU condition-code flag 2.\n\t */\n\tC2 = 1 << 2,\n\t/**\n\t * FPU condition-code flag 3.\n\t */\n\tC3 = 1 << 3,\n}\n\nexport const MAX_INSN_LENGTH = 15;\nexport const MAX_OPERANDS = 10;\nexport const MAX_VISIBLE_OPERANDS = 5;\n"]}
{"filename": "src/util.ts", "chunked_list": ["import zydis from \"./native.js\";\n\n//\n// Low level details.\n//\nabstract class IAllocator {\n\tabstract allocate(n: number): number;\n\tabstract free(p: number): void;\n\tstr(s: string): number {\n\t\tconst upperbound = (s.length << 2) + 1;\n\t\tconst ptr = this.allocate(upperbound);\n\t\tzydis.stringToUTF8(s, ptr, Infinity);\n\t\treturn ptr;\n\t}\n\tbuf(input: ArrayLike<number>): number {\n\t\tconst ptr = this.allocate(input.length);\n\t\tzydis.HEAPU8.set(input, ptr);\n\t\treturn ptr;\n\t}\n}", "export const StackAllocator = new (class StackAllocator extends IAllocator {\n\tallocate(n: number): number {\n\t\treturn zydis.asm.stackAlloc(n) as number;\n\t}\n\tfree(p: number): void {}\n})();\nexport const HeapAllocator = new (class HeapAllocator extends IAllocator {\n\tallocate(n: number): number {\n\t\treturn zydis.asm.malloc(n) as number;\n\t}\n\tfree(p: number): void {\n\t\tzydis.asm.free(p);\n\t}\n})();\n", "export class Resource {\n\tstatic readonly finalizer = new FinalizationRegistry((heldValue) => {});\n\n\t#parent?: Resource;\n\t#ptr: number;\n\treadonly #token = {};\n\tconstructor(ptr: number) {\n\t\tthis.#ptr = ptr;\n\t\tif (this.#ptr) {\n\t\t\tResource.finalizer.register(this, this.#ptr, this.#token);\n\t\t}\n\t}\n\n\tsubresource(ptr: number) {\n\t\tconst res = new Resource(0);\n\t\tres.#parent = this;\n\t\tres.#ptr = ptr;\n\t\treturn res;\n\t}\n\n\tref() {\n\t\treturn this.#ptr;\n\t}\n\tunref() {", "\t\tif (this.#ptr) {\n\t\t\tResource.finalizer.register(this, this.#ptr, this.#token);\n\t\t}\n\t}\n\n\tsubresource(ptr: number) {\n\t\tconst res = new Resource(0);\n\t\tres.#parent = this;\n\t\tres.#ptr = ptr;\n\t\treturn res;\n\t}\n\n\tref() {\n\t\treturn this.#ptr;\n\t}\n\tunref() {", "\t\tif (this.#ptr && !this.#parent) {\n\t\t\tHeapAllocator.free(this.#ptr);\n\t\t\tthis.#ptr = 0;\n\t\t\tResource.finalizer.unregister(this.#token);\n\t\t}\n\t}\n}\n\nexport function ZyjsField(ns: string) {\n\treturn function (target: any, propertyKey: any) {\n\t\tconst getter = zydis.asm[`zyjs${ns}Get_${propertyKey}`];\n\t\tconst setter = zydis.asm[`zyjs${ns}Set_${propertyKey}`];\n\t\tObject.defineProperty(target, propertyKey, {\n\t\t\tget(this: { resource: { ref(): number } }) {\n\t\t\t\treturn getter(this.resource.ref());\n\t\t\t},\n\t\t\tset(this: { resource: { ref(): number } }, value: any) {\n\t\t\t\treturn setter(this.resource.ref(), value);\n\t\t\t},\n\t\t});\n\t};\n}\n", "export function ZyjsField(ns: string) {\n\treturn function (target: any, propertyKey: any) {\n\t\tconst getter = zydis.asm[`zyjs${ns}Get_${propertyKey}`];\n\t\tconst setter = zydis.asm[`zyjs${ns}Set_${propertyKey}`];\n\t\tObject.defineProperty(target, propertyKey, {\n\t\t\tget(this: { resource: { ref(): number } }) {\n\t\t\t\treturn getter(this.resource.ref());\n\t\t\t},\n\t\t\tset(this: { resource: { ref(): number } }, value: any) {\n\t\t\t\treturn setter(this.resource.ref(), value);\n\t\t\t},\n\t\t});\n\t};\n}\n", "export function withStack<R extends any>(callback: (allocator: IAllocator) => R): R {\n\tconst { stackSave, stackRestore } = zydis.asm;\n\tconst stack = stackSave();\n\ttry {\n\t\treturn callback(StackAllocator);\n\t} finally {\n\t\tstackRestore(stack);\n\t}\n}\nexport function withHeap<R extends any>(callback: (allocator: IAllocator) => R): R {\n\treturn callback(HeapAllocator);\n}\n", "export function withHeap<R extends any>(callback: (allocator: IAllocator) => R): R {\n\treturn callback(HeapAllocator);\n}\n"]}
{"filename": "src/common.ts", "chunked_list": ["import type { MemoryOperandType, Register } from \"./enums.js\";\n\nexport type OperandImm = { s: bigint; rel?: boolean } | { u: bigint; rel?: boolean };\n\nexport interface OperandPtr {\n\tsegv: number;\n\toff: number;\n}\n\nexport interface OperandReg {\n\tname: Register;\n\tis4?: boolean;\n}\n", "export interface OperandReg {\n\tname: Register;\n\tis4?: boolean;\n}\n\nexport interface OperandMem {\n\ttype?: MemoryOperandType;\n\tseg?: Register;\n\tindex?: Register;\n\tbase?: Register;\n\tscale?: number;\n\tdisp?: bigint;\n}\n"]}
{"filename": "src/encoder.ts", "chunked_list": ["import { DecodedInsn } from \"./decoder.js\";\nimport { Resource, ZyjsField, withHeap, withStack } from \"./util.js\";\nimport zydis from \"./native.js\";\nimport {\n\tAddressSizeHint,\n\tBranchType,\n\tBranchWidth,\n\tBroadcastMode,\n\tConversionMode,\n\tEncodableEncoding,", "\tConversionMode,\n\tEncodableEncoding,\n\tInsnAttribute,\n\tMAX_INSN_LENGTH,\n\tMachineMode,\n\tMnemonic,\n\tOperandSizeHint,\n\tOperandType,\n\tRegister,\n\tRoundingMode,", "\tRegister,\n\tRoundingMode,\n\tSwizzleMode,\n} from \"./enums.js\";\nimport { OperandImm, OperandMem, OperandPtr, OperandReg } from \"./common.js\";\n\nconst OpField = ZyjsField(\"EncOp\");\n\ntype OperandLike = keyof typeof Register | number | bigint | OperandImm | OperandReg | OperandPtr | OperandMem;\nexport class EncoderOperand {\n\tresource: Resource;\n\tconstructor(rsrc: Resource) {\n\t\tthis.resource = rsrc;\n\t}\n\n\t@OpField\n\ttype!: OperandType;\n\n\t@OpField\n\timms!: bigint;\n\t@OpField\n\timmu!: bigint;\n\t@OpField\n\tptrSeg!: number;\n\t@OpField\n\tptrOff!: number;\n\t@OpField\n\tregv!: Register;\n\t@OpField\n\tregIs4!: 1 | 0;\n\t@OpField\n\tmemBase!: Register;\n\t@OpField\n\tmemIndex!: Register;\n\t@OpField\n\tmemScale!: Register;\n\t@OpField\n\tmemDisp!: bigint;\n\n\tget imm(): OperandImm {", "type OperandLike = keyof typeof Register | number | bigint | OperandImm | OperandReg | OperandPtr | OperandMem;\nexport class EncoderOperand {\n\tresource: Resource;\n\tconstructor(rsrc: Resource) {\n\t\tthis.resource = rsrc;\n\t}\n\n\t@OpField\n\ttype!: OperandType;\n\n\t@OpField\n\timms!: bigint;\n\t@OpField\n\timmu!: bigint;\n\t@OpField\n\tptrSeg!: number;\n\t@OpField\n\tptrOff!: number;\n\t@OpField\n\tregv!: Register;\n\t@OpField\n\tregIs4!: 1 | 0;\n\t@OpField\n\tmemBase!: Register;\n\t@OpField\n\tmemIndex!: Register;\n\t@OpField\n\tmemScale!: Register;\n\t@OpField\n\tmemDisp!: bigint;\n\n\tget imm(): OperandImm {", "\t\tif (this.type !== OperandType.IMMEDIATE) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\treturn {\n\t\t\ts: this.imms,\n\t\t\tu: this.immu,\n\t\t};\n\t}\n\tset imm(o: OperandImm | bigint | number) {\n\t\tthis.type = OperandType.IMMEDIATE;\n", "\t\tif (typeof o === \"object\") {\n\t\t\tif (\"s\" in o) {\n\t\t\t\tthis.imms = o.s;\n\t\t\t} else {\n\t\t\t\tthis.immu = o.u;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.imms = BigInt(o);\n\t\t}\n\t}\n\n\tget reg(): OperandReg {", "\t\tif (this.type !== OperandType.REGISTER) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\treturn {\n\t\t\tname: this.regv,\n\t\t\tis4: !!this.regIs4,\n\t\t};\n\t}\n\tset reg(o: OperandReg | Register | keyof typeof Register) {\n\t\tthis.type = OperandType.REGISTER;\n\t\tif (typeof o === \"string\") {\n\t\t\tthis.regv = Register[o];", "\t\tif (typeof o === \"string\") {\n\t\t\tthis.regv = Register[o];\n\t\t} else if (typeof o === \"number\") {\n\t\t\tthis.regv = o;\n\t\t} else {\n\t\t\tthis.regv = o.name;\n\t\t\tthis.regIs4 = o.is4 || false ? 1 : 0;\n\t\t}\n\t}\n\n\tget ptr(): OperandPtr {", "\t\tif (this.type !== OperandType.POINTER) {\n\t\t\tthrow TypeError(\"Operand type mismatch.\");\n\t\t}\n\t\treturn {\n\t\t\tsegv: this.ptrSeg,\n\t\t\toff: this.ptrOff,\n\t\t};\n\t}\n\tset ptr(o: OperandPtr) {\n\t\tthis.type = OperandType.POINTER;\n\t\tthis.ptrOff = o.off;\n\t\tthis.ptrSeg = o.segv;\n\t}\n\n\tget mem(): OperandMem {\n\t\tconst res: OperandMem = {\n\t\t\tindex: this.memIndex,\n\t\t\tbase: this.memBase,\n\t\t\tscale: this.memScale,\n\t\t\tdisp: this.memDisp,\n\t\t};", "\t\tif (res.seg === Register.NONE) {\n\t\t\tdelete res.seg;\n\t\t}\n\t\tif (res.base === Register.NONE) {\n\t\t\tdelete res.base;\n\t\t}\n\t\tif (res.scale === 0 || res.index === Register.NONE) {\n\t\t\tdelete res.index;\n\t\t\tdelete res.scale;\n\t\t}\n\t\treturn res;\n\t}\n\tset mem(o: OperandMem) {\n\t\tthis.type = OperandType.MEMORY;\n\t\tthis.memBase = o.base ?? Register.NONE;\n\t\tthis.memDisp = o.disp ?? 0n;\n\t\tthis.memIndex = o.index ?? Register.NONE;\n\t\tthis.memScale = o.scale ?? 0;\n\t}\n\n\tget() {\n\t\tswitch (this.type) {\n\t\t\tcase OperandType.IMMEDIATE:\n\t\t\t\treturn this.imm;\n\t\t\tcase OperandType.REGISTER:\n\t\t\t\treturn this.reg;\n\t\t\tcase OperandType.POINTER:\n\t\t\t\treturn this.ptr;\n\t\t\tcase OperandType.MEMORY:\n\t\t\t\treturn this.mem;\n\t\t\tdefault:\n\t\t\t\tthrow Error();\n\t\t}\n\t}\n\tset(o: OperandLike) {", "\t\tif (typeof o === \"number\" || typeof o === \"bigint\") {\n\t\t\treturn void (this.imm = o);\n\t\t} else if (typeof o === \"string\") {\n\t\t\treturn void (this.reg = o);\n\t\t}\n\n\t\t// OperandImm\n\t\tif (\"s\" in o || \"u\" in o) {\n\t\t\tthis.imm = o;\n\t\t}\n\t\t// OperandReg.\n\t\t//", "\t\telse if (\"name\" in o) {\n\t\t\tthis.reg = o;\n\t\t}\n\t\t// OperandPtr.\n\t\t//\n\t\telse if (\"off\" in o) {\n\t\t\tthis.ptr = o;\n\t\t}\n\t\t// OperandMem.\n\t\t//\n\t\telse {\n\t\t\tthis.mem = o;\n\t\t}\n\t}\n}\n\nconst ReqField = ZyjsField(\"EncReq\");", "export class EncoderRequest {\n\tresource: Resource;\n\tconstructor(from?: DecodedInsn) {\n\t\tthis.resource = new Resource(zydis.asm.zyjsNewEncReq(from?.resource.ref() ?? 0));\n\t}\n\tencode(at?: bigint) {\n\t\treturn withStack((alloc) => {\n\t\t\tconst tmp = alloc.allocate(MAX_INSN_LENGTH);\n\t\t\tconst length =\n\t\t\t\tat != null\n\t\t\t\t\t? zydis.asm.zyjsEncReqEncodeAbs(this.resource.ref(), tmp, at)\n\t\t\t\t\t: zydis.asm.zyjsEncReqEncode(this.resource.ref(), tmp);\n\t\t\treturn zydis.HEAPU8.slice(tmp, tmp + length);\n\t\t});\n\t}\n\n\t@ReqField\n\tmachineMode!: MachineMode;\n\t@ReqField\n\tallowedEncodings!: EncodableEncoding;\n\t@ReqField\n\tmnemonic!: Mnemonic;\n\t@ReqField\n\tprefixes!: bigint;\n\t@ReqField\n\tbranchType!: BranchType;\n\t@ReqField\n\tbranchWidth!: BranchWidth;\n\t@ReqField\n\taddressSizeHint!: AddressSizeHint;\n\t@ReqField\n\toperandSizeHint!: OperandSizeHint;\n\t@ReqField\n\toperandCount!: number;\n\t@ReqField\n\tevexBroadcast!: BroadcastMode;\n\t@ReqField\n\tevexRounding!: RoundingMode;\n\t@ReqField\n\tevexSAE!: 1 | 0;\n\t@ReqField\n\tevexZeroingMask!: 1 | 0;\n\t@ReqField\n\tmvexBroadcast!: BroadcastMode;\n\t@ReqField\n\tmvexRounding!: RoundingMode;\n\t@ReqField\n\tmvexSAE!: 1 | 0;\n\t@ReqField\n\tmvexConversion!: ConversionMode;\n\t@ReqField\n\tmvexSwizzle!: SwizzleMode;\n\t@ReqField\n\tmvexEvictionHint!: 1 | 0;\n\n\toperand(n: number): EncoderOperand {\n\t\tconst ptr = zydis.asm.zyjsEncReqRefOperand(this.resource.ref(), n);", "\t\tif (!ptr) {\n\t\t\tthrow RangeError(\"Operand out of boundaries.\");\n\t\t}\n\t\treturn new EncoderOperand(this.resource.subresource(ptr));\n\t}\n\n\tstatic from(machine: MachineMode, mnemonic: Mnemonic, ...operands: OperandLike[]) {\n\t\tconst res = new EncoderRequest();\n\t\tres.mnemonic = mnemonic;\n\t\tres.operandCount = operands.length;\n\t\tres.machineMode = machine;", "\t\tfor (let n = 0; n !== operands.length; n++) {\n\t\t\tconst op = operands[n];\n\t\t\tres.operand(n).set(op);\n\t\t\tif (typeof op === \"object\" && \"seg\" in op) {\n\t\t\t\tswitch (op.seg) {\n\t\t\t\t\tcase Register.CS:\n\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_CS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Register.DS:\n\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_DS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Register.ES:\n\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_ES;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Register.GS:\n\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_GS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Register.FS:\n\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_FS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Register.SS:\n\t\t\t\t\t\tres.prefixes = InsnAttribute.HAS_SEGMENT_SS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n", "export function encode(machine: MachineMode, mnemonic: Mnemonic, ...operands: OperandLike[]) {\n\treturn EncoderRequest.from(machine, mnemonic, ...operands).encode();\n}\nexport function encodeAt(at: bigint, machine: MachineMode, mnemonic: Mnemonic, ...operands: OperandLike[]) {\n\treturn EncoderRequest.from(machine, mnemonic, ...operands).encode(at);\n}\n\nexport function encodeNop(len: number) {\n\treturn (len <= 512 ? withStack : withHeap)((alloc) => {\n\t\tconst tmp = alloc.allocate(MAX_INSN_LENGTH);\n\t\tzydis.asm.zyjsEncNop(tmp, len);\n\t\tconst res = zydis.HEAPU8.slice(tmp, tmp + len);\n\t\talloc.free(tmp);\n\t\treturn res;\n\t});\n}\n"]}
