{"filename": "tests/project.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\ndescribe('test project endpoints', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  it('get project table by viewId with page size of 10', async () => {\n    const data = await AchoInstance.ProjectEndpoints.getViewData({ viewId: 7869, pageSize: 10 });", "  it('get project table by viewId with page size of 10', async () => {\n    const data = await AchoInstance.ProjectEndpoints.getViewData({ viewId: 7869, pageSize: 10 });\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    expect(data.data.length).toBeLessThanOrEqual(10);\n  });\n", "  });\n\n  it('get project table by assetId with default page size', async () => {\n    const data = await AchoInstance.ProjectEndpoints.getViewData({ assetId: 9242 });\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    expect(data.data.length).toBeLessThanOrEqual(100);", "\n    expect(data.data.length).toBeLessThanOrEqual(100);\n  });\n\n  it('query project table with default page size', async () => {\n    // ! Using a different token\n    const data = await AchoInstance.ProjectEndpoints.queryTableData({\n      actionQuery: {\n        query: 'SELECT * FROM {{{P.9038}}};',\n        helperInfo: {", "        query: 'SELECT * FROM {{{P.9038}}};',\n        helperInfo: {\n          resources: [],\n          projects: [],\n          views: [\n            {\n              view: {\n                id: 9038,\n                proj_id: 2937\n              }", "                proj_id: 2937\n              }\n            }\n          ]\n        }\n      }\n    });\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');", "    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    expect(data.data.length).toBeLessThanOrEqual(100);\n  });\n});\n"]}
{"filename": "tests/auth.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\ndescribe('test OAuth endpoints', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  it('identify yourself', async () => {\n    const data = await AchoInstance.OAuthEndpoints.identify();", "  it('identify yourself', async () => {\n    const data = await AchoInstance.OAuthEndpoints.identify();\n    expect(data).toBeInstanceOf(Object);\n    console.log(data);\n  });\n\n  it('get oauth list', async () => {\n    const data = await AchoInstance.OAuthEndpoints.getOAuthClientList();\n    expect(data).toBeInstanceOf(Object);\n    console.log(data);", "    expect(data).toBeInstanceOf(Object);\n    console.log(data);\n  });\n\n  it.skip('get oauth token', async () => {\n    const data = await AchoInstance.OAuthEndpoints.getOAuthToken({ id: '4ee0dbf0-92ce-48e1-b5c1-b9248217041a' });\n    expect(typeof data).toBe('string');\n    console.log(data);\n  });\n});", "  });\n});\n"]}
{"filename": "tests/resource.test.ts", "chunked_list": ["import { Acho } from '../src/index';\nimport { ActionQuery, ResourceTableDataResp } from '../src/types';\nimport { pipeline, Readable, Transform } from 'stream';\nimport fs, { write } from 'fs';\nimport { ClientRequest } from 'http';\n\njest.useRealTimers();\n\ndescribe('test resource: create', () => {\n  const AchoInstance = new Acho({", "describe('test resource: create', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  let testResId = -1;\n\n  test('create integration resource', async () => {\n    const data = await AchoInstance.ResourceEndpoints.create({ name: 'test' }); // Test get by assetId", "  test('create integration resource', async () => {\n    const data = await AchoInstance.ResourceEndpoints.create({ name: 'test' }); // Test get by assetId\n    console.log(data);\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('resId');\n    testResId = data.resId;\n  });\n\n  test('create integration resource table', async () => {\n    const data = await AchoInstance.ResourceEndpoints.createTable({", "  test('create integration resource table', async () => {\n    const data = await AchoInstance.ResourceEndpoints.createTable({\n      resId: testResId,\n      tableName: 'test',\n      schema: { col1: 'STRING', col2: 'JSON' }\n    }); // Test get by assetId\n    console.log(data);\n    expect(data).toBeInstanceOf(Object);\n  });\n", "  });\n\n  test('insert rows with resId, tableId and json string', async () => {\n    const writableStream = await AchoInstance.ResourceEndpoints.createWriteStream({\n      resId: testResId,\n      tableId: 'test',\n      dataType: 'json'\n    });\n    const testArray = [\n      { col1: 'JSON_1', col2: { s1: 1 } },", "    const testArray = [\n      { col1: 'JSON_1', col2: { s1: 1 } },\n      { col1: 'JSON_2', col2: [1, 2, 3] },\n      { col1: 'JSON_3', col2: { s1: 3 } },\n      { col1: 'JSON_4', col2: { s1: 4 } }\n    ];\n    await new Promise((resolve) => {\n      testArray.forEach((row) => {\n        writableStream.write(JSON.stringify(row) + '\\n', (err) => {\n          if (err) {\n            console.log(err);\n          }\n        });\n      });\n      writableStream.end();\n      writableStream.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(writableStream).toBeInstanceOf(ClientRequest);\n  });\n\n  test('insert rows with resId, tableId and csv rows', async () => {\n    const writableStream = await AchoInstance.ResourceEndpoints.createWriteStream({\n      resId: testResId,\n      tableId: 'test',\n      dataType: 'csv'\n    });\n    const testCSV = 'CSV_1,1\\nCSV_2,2\\nCSV_3,3\\nCSV_4,4\\n';\n    await new Promise((resolve) => {\n      // testCSV.split('\\n').forEach((row) => {\n      //   writableStream.write(row + '\\n');\n      // });\n      writableStream.write(testCSV);\n      writableStream.end();\n      writableStream.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(writableStream).toBeInstanceOf(ClientRequest);\n  });\n\n  test('delete resource with resId', async () => {\n    const deleteResult = await AchoInstance.ResourceEndpoints.delete({\n      resId: testResId\n    });\n    expect(deleteResult).toBe('success');\n  });\n});\n\ndescribe('test resource:getTableData', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  let assetResp: ResourceTableDataResp;\n  let resResp: ResourceTableDataResp;\n\n  test('get simple resource table by assetId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.getTableData({ assetId: 9244 }); // Test get by assetId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    const { data: _data, schema, paging } = data;\n    expect(_data).toBeInstanceOf(Array);\n    expect(schema).toBeInstanceOf(Object);\n    expect(paging).toBeInstanceOf(Object);\n\n    assetResp = data;\n  });\n\n  test('get simple resource table by resId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.getTableData({ resId: 4649 }); // Test get by resId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    const { data: _data, schema, paging } = data;\n    expect(_data).toBeInstanceOf(Array);\n    expect(schema).toBeInstanceOf(Object);\n    expect(paging).toBeInstanceOf(Object);\n\n    resResp = data;\n  });\n\n  test('resource table result consistency', async () => {\n    expect(assetResp).not.toBeUndefined();\n    expect(resResp).not.toBeUndefined();\n    expect(assetResp).toEqual(resResp);\n  });\n});\n\ndescribe.skip('test resource:download', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  let assetResp: any;\n  let resResp: any;\n\n  test('download simple resource table by assetId', async () => {\n    const data = await AchoInstance.ResourceEndpoints?.downloadTableData({ assetId: 9244 }); // Test get by assetId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('url');\n    expect(data).toHaveProperty('archiveName');\n\n    const { url } = data;\n    expect(url).toEqual(expect.stringContaining('https://storage.googleapis.com'));\n\n    assetResp = data;\n  });\n\n  test('download simple resource table by resId', async () => {\n    const data = await AchoInstance.ResourceEndpoints?.downloadTableData({ resId: 4649 }); // Test get by resId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('url');\n    expect(data).toHaveProperty('archiveName');\n\n    const { url } = data;\n    expect(url).toEqual(expect.stringContaining('https://storage.googleapis.com'));\n\n    resResp = data;\n  });\n\n  test('download table result consistency', async () => {\n    expect(assetResp).not.toBeUndefined();\n    expect(resResp).not.toBeUndefined();\n    const { archiveName: assetArchiveName } = assetResp;\n    const { archiveName: resArchiveName } = resResp;\n    const descriptorA = assetArchiveName.split('_').slice(0, 1);\n    const descriptorB = resArchiveName.split('_').slice(0, 1);\n    expect(descriptorA).toEqual(descriptorB);\n  });\n});\n\ndescribe('test resource:query', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  const actionQuery: ActionQuery = {\n    query: 'SELECT * FROM {{{R.4650}}};',\n    helperInfo: {\n      resources: [\n        {\n          resource: {\n            access_groups: [\n              { id: 1, name: 'view' },\n              { id: 2, name: 'edit' },\n              { id: 3, name: 'import' },\n              { id: 4, name: 'export' },\n              { id: 5, name: 'management_view' },\n              { id: 6, name: 'management_edit' }\n            ],\n            access_role_id: 1,\n            asset_id: 9248,\n            create_time: 1660228479,\n            id: 4650,\n            is_creator: true,\n            is_private: 0,\n            is_ready: 1,\n            is_scheduled: null,\n            owner_id: 5612,\n            res_display_name: 'superstore_order_csv',\n            res_name: '5612_superstore_order_csv_1660228479565',\n            res_type: 'csvBucket',\n            scheduler_id: null,\n            team_id: 607,\n            update_frequency: null,\n            update_query: null,\n            update_status: null,\n            user_id: 5612\n          },\n          resourceTable: ''\n        }\n      ],\n      projects: []\n    }\n  };\n\n  let pageToken: string | undefined;\n  let jobId: string | undefined;\n  let resResp: Array<Object>;\n\n  test('get resource table with query and page size of 10', async () => {\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, page: 2, pageSize: 10 });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBe(10);\n    expect(schema).toHaveProperty('fields');\n    expect(paging).toHaveProperty('pageToken');\n    pageToken = paging.pageToken;\n    jobId = _jobId;\n  });\n\n  test('get resource table with pageToken and jobId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, pageToken, jobId, pageSize: 10 });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBe(10);\n    expect(schema).toHaveProperty('fields');\n    expect(paging).toHaveProperty('pageToken');\n    resResp = _data;\n  });\n\n  test('resource table result consistency', async () => {\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, page: 3, pageSize: 10 });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBe(10);\n    expect(schema).toHaveProperty('fields');\n    expect(paging).toHaveProperty('pageToken');\n    expect(_data).toEqual(resResp);\n  });\n\n  test('get Integration resource table with query and default page size', async () => {\n    actionQuery.query = 'SELECT * FROM {{{R.4651.Sheet1}}};';\n    actionQuery.helperInfo.resources = [\n      {\n        resource: {\n          access_role_id: 1,\n          asset_id: 9249,\n          create_time: 1660239228,\n          id: 4651,\n          is_creator: true,\n          is_private: 0,\n          is_ready: 1,\n          is_scheduled: null,\n          owner_id: 5612,\n          real_type: 'integration',\n          res_display_name: 'Glossary list',\n          res_name: 'integration_5612_Google_Sheets_1660239228',\n          res_type: 'Google_Sheets',\n          scheduler_id: null,\n          team_id: 607,\n          update_frequency: null,\n          update_query: null,\n          update_status: null,\n          user_id: 5612\n        },\n        resourceTable: 'Sheet1'\n      }\n    ];\n\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBeLessThanOrEqual(100); // NOTE: default page size is 100 rows\n    expect(schema).toHaveProperty('fields');\n    // if this is the last page, there won't be a pageToken (a unique string to query the next page)", "        writableStream.write(JSON.stringify(row) + '\\n', (err) => {\n          if (err) {\n            console.log(err);\n          }\n        });\n      });\n      writableStream.end();\n      writableStream.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(writableStream).toBeInstanceOf(ClientRequest);\n  });\n\n  test('insert rows with resId, tableId and csv rows', async () => {\n    const writableStream = await AchoInstance.ResourceEndpoints.createWriteStream({\n      resId: testResId,\n      tableId: 'test',\n      dataType: 'csv'\n    });\n    const testCSV = 'CSV_1,1\\nCSV_2,2\\nCSV_3,3\\nCSV_4,4\\n';\n    await new Promise((resolve) => {\n      // testCSV.split('\\n').forEach((row) => {\n      //   writableStream.write(row + '\\n');\n      // });\n      writableStream.write(testCSV);\n      writableStream.end();\n      writableStream.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(writableStream).toBeInstanceOf(ClientRequest);\n  });\n\n  test('delete resource with resId', async () => {\n    const deleteResult = await AchoInstance.ResourceEndpoints.delete({\n      resId: testResId\n    });\n    expect(deleteResult).toBe('success');\n  });\n});\n\ndescribe('test resource:getTableData', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  let assetResp: ResourceTableDataResp;\n  let resResp: ResourceTableDataResp;\n\n  test('get simple resource table by assetId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.getTableData({ assetId: 9244 }); // Test get by assetId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    const { data: _data, schema, paging } = data;\n    expect(_data).toBeInstanceOf(Array);\n    expect(schema).toBeInstanceOf(Object);\n    expect(paging).toBeInstanceOf(Object);\n\n    assetResp = data;\n  });\n\n  test('get simple resource table by resId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.getTableData({ resId: 4649 }); // Test get by resId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n\n    const { data: _data, schema, paging } = data;\n    expect(_data).toBeInstanceOf(Array);\n    expect(schema).toBeInstanceOf(Object);\n    expect(paging).toBeInstanceOf(Object);\n\n    resResp = data;\n  });\n\n  test('resource table result consistency', async () => {\n    expect(assetResp).not.toBeUndefined();\n    expect(resResp).not.toBeUndefined();\n    expect(assetResp).toEqual(resResp);\n  });\n});\n\ndescribe.skip('test resource:download', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  let assetResp: any;\n  let resResp: any;\n\n  test('download simple resource table by assetId', async () => {\n    const data = await AchoInstance.ResourceEndpoints?.downloadTableData({ assetId: 9244 }); // Test get by assetId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('url');\n    expect(data).toHaveProperty('archiveName');\n\n    const { url } = data;\n    expect(url).toEqual(expect.stringContaining('https://storage.googleapis.com'));\n\n    assetResp = data;\n  });\n\n  test('download simple resource table by resId', async () => {\n    const data = await AchoInstance.ResourceEndpoints?.downloadTableData({ resId: 4649 }); // Test get by resId\n    expect(data).toBeInstanceOf(Object);\n    expect(data).toHaveProperty('url');\n    expect(data).toHaveProperty('archiveName');\n\n    const { url } = data;\n    expect(url).toEqual(expect.stringContaining('https://storage.googleapis.com'));\n\n    resResp = data;\n  });\n\n  test('download table result consistency', async () => {\n    expect(assetResp).not.toBeUndefined();\n    expect(resResp).not.toBeUndefined();\n    const { archiveName: assetArchiveName } = assetResp;\n    const { archiveName: resArchiveName } = resResp;\n    const descriptorA = assetArchiveName.split('_').slice(0, 1);\n    const descriptorB = resArchiveName.split('_').slice(0, 1);\n    expect(descriptorA).toEqual(descriptorB);\n  });\n});\n\ndescribe('test resource:query', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  const actionQuery: ActionQuery = {\n    query: 'SELECT * FROM {{{R.4650}}};',\n    helperInfo: {\n      resources: [\n        {\n          resource: {\n            access_groups: [\n              { id: 1, name: 'view' },\n              { id: 2, name: 'edit' },\n              { id: 3, name: 'import' },\n              { id: 4, name: 'export' },\n              { id: 5, name: 'management_view' },\n              { id: 6, name: 'management_edit' }\n            ],\n            access_role_id: 1,\n            asset_id: 9248,\n            create_time: 1660228479,\n            id: 4650,\n            is_creator: true,\n            is_private: 0,\n            is_ready: 1,\n            is_scheduled: null,\n            owner_id: 5612,\n            res_display_name: 'superstore_order_csv',\n            res_name: '5612_superstore_order_csv_1660228479565',\n            res_type: 'csvBucket',\n            scheduler_id: null,\n            team_id: 607,\n            update_frequency: null,\n            update_query: null,\n            update_status: null,\n            user_id: 5612\n          },\n          resourceTable: ''\n        }\n      ],\n      projects: []\n    }\n  };\n\n  let pageToken: string | undefined;\n  let jobId: string | undefined;\n  let resResp: Array<Object>;\n\n  test('get resource table with query and page size of 10', async () => {\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, page: 2, pageSize: 10 });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBe(10);\n    expect(schema).toHaveProperty('fields');\n    expect(paging).toHaveProperty('pageToken');\n    pageToken = paging.pageToken;\n    jobId = _jobId;\n  });\n\n  test('get resource table with pageToken and jobId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, pageToken, jobId, pageSize: 10 });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBe(10);\n    expect(schema).toHaveProperty('fields');\n    expect(paging).toHaveProperty('pageToken');\n    resResp = _data;\n  });\n\n  test('resource table result consistency', async () => {\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery, page: 3, pageSize: 10 });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBe(10);\n    expect(schema).toHaveProperty('fields');\n    expect(paging).toHaveProperty('pageToken');\n    expect(_data).toEqual(resResp);\n  });\n\n  test('get Integration resource table with query and default page size', async () => {\n    actionQuery.query = 'SELECT * FROM {{{R.4651.Sheet1}}};';\n    actionQuery.helperInfo.resources = [\n      {\n        resource: {\n          access_role_id: 1,\n          asset_id: 9249,\n          create_time: 1660239228,\n          id: 4651,\n          is_creator: true,\n          is_private: 0,\n          is_ready: 1,\n          is_scheduled: null,\n          owner_id: 5612,\n          real_type: 'integration',\n          res_display_name: 'Glossary list',\n          res_name: 'integration_5612_Google_Sheets_1660239228',\n          res_type: 'Google_Sheets',\n          scheduler_id: null,\n          team_id: 607,\n          update_frequency: null,\n          update_query: null,\n          update_status: null,\n          user_id: 5612\n        },\n        resourceTable: 'Sheet1'\n      }\n    ];\n\n    const data = await AchoInstance.ResourceEndpoints.queryTableData({ actionQuery });\n    expect(data).toHaveProperty('data');\n    expect(data).toHaveProperty('schema');\n    expect(data).toHaveProperty('paging');\n    expect(data).toHaveProperty('jobId');\n\n    const { data: _data, schema, paging, jobId: _jobId } = data;\n    expect(_data.length).toBeLessThanOrEqual(100); // NOTE: default page size is 100 rows\n    expect(schema).toHaveProperty('fields');\n    // if this is the last page, there won't be a pageToken (a unique string to query the next page)", "    if (_data.length < 100) expect(paging).not.toHaveProperty('pageToken');\n    else expect(paging).toHaveProperty('pageToken');\n  });\n});\n\n// NOTE: set resource:sync tests timeout to 60000 to override the default 5000ms timeout\ndescribe.skip('test resource:sync', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  test('sync resource table data', async () => {\n    const data = await AchoInstance.ResourceEndpoints.syncTableData({ resId: 4651 });\n    expect(data).toBe('success');\n  }, 60000);\n\n  test('sync resource table data with userId', async () => {\n    const data = await AchoInstance.ResourceEndpoints.syncTableData({ resId: 4651, userId: 5612 });\n    expect(data).toBe('success');\n  }, 60000);\n});\n\ndescribe('test resource:createReadStream', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  test('create read stream with resId', async () => {\n    const highWaterMark = 50;\n    // NOTE: This seems to allow Axios to complete its housekeeping and be ready to track new connections opened afterwards\n    // https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express\n    process.nextTick(() => {});\n    const readable = await AchoInstance.ResourceEndpoints.createReadStream({ resId: 4678, highWaterMark });\n    const t = new Transform({\n      writableObjectMode: true, // set this one to true\n      readableObjectMode: false,\n      writableHighWaterMark: highWaterMark,\n      readableHighWaterMark: highWaterMark * 1024,\n      transform(chunk, _, done) {\n        done(null, `${JSON.stringify(chunk)}\\n`);\n      }\n    });\n    const writable = fs.createWriteStream('./tests/data/readstream-test-output');\n\n    await new Promise((resolve, reject) => {\n      // Using either pipeline() or readable.pipe().pipe() is fine\n      pipeline(readable, t, writable, (err) => {", "        if (err) {\n          throw err;\n        }\n      });\n      // readable.pipe(t).pipe(writable);\n      readable\n        .on('end', () => {\n          console.log('Written readable stream to file');\n          readable.destroy();\n          resolve('finished');\n        })\n        .on('error', (err: any) => {\n          reject(err);\n        });\n    });\n    expect(readable).toBeInstanceOf(Readable);\n  }, 50000);\n\n  test.skip('create read stream with a large file', async () => {\n    const highWaterMark = 50;\n    process.nextTick(() => {});\n    // TEST pipelining large file\n    const readable = await AchoInstance.ResourceEndpoints.createReadStream({ resId: 4676, highWaterMark });\n    let count = 0;\n    readable\n      .on('data', (data) => {\n        count++;", "        if (count % 1000 === 0) console.log(count);\n      })\n      .on('end', () => {\n        console.log('Written readable stream to file');\n        console.log(count);\n        readable.destroy();\n      })\n      .on('error', (err: any) => {});\n\n    expect(readable).toBeInstanceOf(Readable);\n  }, 200000);\n\n  test('create read stream with assetId', async () => {\n    // NOTE: This seems to allow Axios to complete its housekeeping and be ready to track new connections opened afterwards\n    // https://stackoverflow.com/questions/69169492/async-external-function-leaves-open-handles-jest-supertest-express\n    process.nextTick(() => {});\n    const data = await AchoInstance.ResourceEndpoints.createReadStream({ assetId: 9248 });\n    let count = 0;\n    await new Promise((resolve, reject) => {\n      data\n        .on('data', (data) => {\n          count++;\n        })\n        .on('end', () => {\n          expect(count).toBe(9994);\n          data.destroy();\n          resolve('finished');\n        }); // expected value subject to change with the asset\n      expect(data).toBeInstanceOf(Readable);\n    });\n  }, 20000);\n\n  test('create read stream with an integration resource', async () => {\n    // res_type = 'integration'\n    process.nextTick(() => {});\n    const data = await AchoInstance.ResourceEndpoints.createReadStream({\n      assetId: 12523,\n      tableId: 'RunningAPIs_csv'\n    });\n    let count = 0;\n    await new Promise((resolve, reject) => {\n      data\n        .on('data', (data) => {\n          count++;\n        })\n        .on('end', () => {\n          console.log(count);\n          data.destroy();\n          resolve('finished');\n        });\n      expect(data).toBeInstanceOf(Readable);\n    });\n  }, 20000);\n});\n\ndescribe('test resource:createWriteStream', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  test('insert rows with resId and csv string', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n      resId: 4679,\n      dataType: 'csv',\n      hasHeader: false\n    });\n    // TODO: do we have to remove the rows added by test?\n    await new Promise((resolve) => {", "      for (let i = 0; i < 10; i++) {\n        httpRequest.write(`Test_${Date.now()},5000,2020-07-06T13:50:03,2020-07-06T13:50:03\\n`);\n      }\n      httpRequest.end();\n      httpRequest.on('response', (res) => {\n        res.on('data', (data) => console.log(JSON.parse(data.toString())));\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test('insert rows with resId and json string', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({ resId: 4679, dataType: 'json' });\n    await new Promise((resolve) => {", "      for (let i = 0; i < 5; i++) {\n        httpRequest.write(\n          JSON.stringify({\n            Name: `JSON_${Date.now()}`,\n            Duration: 5000,\n            Start_time: '2020-07-06T13:50:03',\n            End_time: '2020-07-06T13:50:03'\n          }) + '\\n'\n        );\n      }\n      httpRequest.end();\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test('insert rows with assetId and json file', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({ assetId: 9297, dataType: 'json' });\n    await new Promise((resolve) => {\n      // NOTE: json should be in newline-delimited format\n      fs.createReadStream('./tests/data/res_4679_data.ndjson').pipe(httpRequest);\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test('error handling - wrong credential', async () => {\n    const opts = {\n      apiToken: 'xxxxxxxx',\n      endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n    };\n    const AchoInstanceNoAuth = new Acho(opts);\n\n    const httpRequest = await AchoInstanceNoAuth.ResourceEndpoints.createWriteStream({ assetId: 9297, dataType: 'json' });\n    httpRequest.on('error', (err) => {});\n    await new Promise((resolve) => {\n      // NOTE: json should be in newline-delimited format\n      fs.createReadStream('./tests/data/res_4679_data.ndjson').pipe(httpRequest);\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(401);\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test('insert rows with assetId and csv file', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n      assetId: 9297,\n      dataType: 'csv',\n      hasHeader: true\n    });\n    await new Promise((resolve) => {\n      // NOTE: json should be in newline-delimited format\n      fs.createReadStream('./tests/data/res_4679_data.csv').pipe(httpRequest);\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test('error handling - insert rows with invalid data type', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n      resId: 4679,\n      dataType: 'csv',\n      hasHeader: false\n    });\n    await new Promise((resolve) => {\n      httpRequest.write(`CSV_${Date.now()},AAA,2020-07-06T13:50:03,2020-07-06T13:50:03\\n`);\n      httpRequest.end();\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(400);\n        resolve('done');\n      });\n      httpRequest.on('error', (error) => {\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test('error handling - insert rows with invalid data format', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n      resId: 4679,\n      dataType: 'csv',\n      hasHeader: false\n    });\n    await new Promise((resolve) => {\n      httpRequest.write(`CSV_${Date.now()},5000,2020-07-06T13:50:03,2020-07-06T13:50:03,aaaa\\n`);\n      httpRequest.end();\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(400);\n        resolve('done');\n      });\n      httpRequest.on('error', (error) => {\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n\n  test.skip('insert rows with with large files', async () => {\n    const httpRequest = await AchoInstance.ResourceEndpoints.createWriteStream({\n      assetId: 9297,\n      dataType: 'json',\n      maxWaitTime: 5000\n    });\n    await new Promise((resolve) => {\n      // NOTE: json should be in newline-delimited format\n      fs.createReadStream('./tests/data/res_4679_data_big').pipe(httpRequest);\n      httpRequest.on('response', (res) => {\n        expect(res.statusCode).toBe(200);\n        resolve('done');\n      });\n    });\n    expect(httpRequest).toBeInstanceOf(ClientRequest);\n  });\n});\n"]}
{"filename": "tests/app.test.ts", "chunked_list": ["import { Acho } from '../src/index';\n\ndescribe('test App endpoints', () => {\n  const AchoInstance = new Acho({\n    apiToken: process.env.ACHO_TOKEN,\n    endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n  });\n\n  it('init app', async () => {\n    const appInstance = AchoInstance.app('328');", "  it('init app', async () => {\n    const appInstance = AchoInstance.app('328');\n    expect(appInstance).toBeInstanceOf(Object);\n    const metadata = await appInstance.init();\n  });\n\n  it('validate app version', async () => {\n    const appInstance = AchoInstance.app('328');\n    expect(appInstance).toBeInstanceOf(Object);\n    const metadata = await appInstance.init();", "    expect(appInstance).toBeInstanceOf(Object);\n    const metadata = await appInstance.init();\n    const appVersionInstance = await appInstance.version('352');\n    appVersionInstance.disconnect();\n  });\n\n  it('test app version room', async () => {\n    const appInstance = AchoInstance.app('328');\n    expect(appInstance).toBeInstanceOf(Object);\n    // console.log(appInstance);", "    expect(appInstance).toBeInstanceOf(Object);\n    // console.log(appInstance);\n    const metadata = await appInstance.init();\n    const appVersionInstance = await appInstance.version('352');\n    // console.log(appVersionInstance);\n    const joined = await appVersionInstance.join();\n    // console.log(joined);\n    expect(joined).toEqual('joined');\n    const left = await appVersionInstance.leave();\n    // console.log(left);", "    const left = await appVersionInstance.leave();\n    // console.log(left);\n    expect(left).toEqual('left');\n    appVersionInstance.disconnect();\n  });\n});\n"]}
{"filename": "src/Acho.ts", "chunked_list": ["import { ClientOptions } from '.';\nimport { ResourceEndpoints } from './resource';\nimport { ProjectEndpoints } from './project';\nimport { OAuthEndpoints } from './auth';\nimport { App } from './app';\n\nconst defaultClientOpt = {\n  apiToken: process.env.ACHO_TOKEN,\n  endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n};", "  endpoint: process.env.ACHO_API_ENDPOINT ? process.env.ACHO_API_ENDPOINT : 'http://localhost:8888'\n};\n\nexport default class Acho {\n  private clientOpt: ClientOptions;\n  public ResourceEndpoints: ResourceEndpoints;\n  public ProjectEndpoints: ProjectEndpoints;\n  public OAuthEndpoints: OAuthEndpoints;\n\n  public constructor(clientOpt: ClientOptions = defaultClientOpt) {\n    this.clientOpt = clientOpt;\n    this.ResourceEndpoints = new ResourceEndpoints(clientOpt);\n    this.ProjectEndpoints = new ProjectEndpoints(clientOpt);\n    this.OAuthEndpoints = new OAuthEndpoints(clientOpt);\n  }\n\n  public app(id: string, clientOpt: ClientOptions = this.clientOpt) {\n    return new App(id, clientOpt);\n  }\n}\n\nexport { ResourceEndpoints, ProjectEndpoints, OAuthEndpoints, App };\n"]}
{"filename": "src/app.ts", "chunked_list": ["import { ClientRequest } from 'http';\nimport { AchoClient } from '.';\nimport { ClientOptions } from './types';\nimport { AppVersion } from './version';\n\nexport class App {\n  public clientOpt: ClientOptions;\n  public appId: string;\n  public metadata: any;\n  constructor(id: string, clientOpt?: ClientOptions) {\n    this.appId = id;\n    this.clientOpt = {\n      ...clientOpt,\n      apiToken: clientOpt?.apiToken || process.env.ACHO_TOKEN\n    };\n  }\n\n  public async init() {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const appObj = await client.request({\n      method: 'get',\n      headers: {},\n      path: `/apps/${this.appId}`\n    });\n    this.metadata = appObj;\n    return this.metadata;\n  }\n\n  public async version(id: string) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const version = new AppVersion(this.appId, id, this.clientOpt);\n    await version.init();\n    return version;\n  }\n}\n"]}
{"filename": "src/resource.ts", "chunked_list": ["import { ClientRequest } from 'http';\nimport { AchoClient, ActionQuery, ResourceTableDataResp, ResourceTableSchemaResp, ResourceDownloadResp } from '.';\nimport { ClientOptions } from './types';\nimport { Readable, Transform, TransformCallback } from 'stream';\nimport createError from 'http-errors';\n\nconst wait = (ms: number) => new Promise((res) => setTimeout(res, ms));\n\nexport interface createParams {\n  name: string;\n}\n", "export interface createParams {\n  name: string;\n}\n\nexport interface deleteParams {\n  resId: number;\n}\n\nexport type colType =\n  | 'INTEGER'\n  | 'FLOAT'\n  | 'NUMERIC'\n  | 'STRING'\n  | 'BOOLEAN'\n  | 'DATE'\n  | 'DATETIME'\n  | 'TIMESTAMP'\n  | 'TIME'\n  | 'BYTES'\n  | 'ARRAY'\n  | 'STRUCT'\n  | 'GEOGRAPHY'\n  | 'JSON'\n  | 'JSONB';\n", "export type colType =\n  | 'INTEGER'\n  | 'FLOAT'\n  | 'NUMERIC'\n  | 'STRING'\n  | 'BOOLEAN'\n  | 'DATE'\n  | 'DATETIME'\n  | 'TIMESTAMP'\n  | 'TIME'\n  | 'BYTES'\n  | 'ARRAY'\n  | 'STRUCT'\n  | 'GEOGRAPHY'\n  | 'JSON'\n  | 'JSONB';\n", "export interface createTableParams {\n  resId: number;\n  tableName: string;\n  schema: Record<string, colType>;\n}\n\nexport interface getTableDataParams {\n  assetId?: number;\n  resId?: number;\n  tableId?: string;\n  page?: number;\n  pageSize?: number;\n}\n", "export interface syncTableDataParams {\n  resId: number;\n  userId?: number;\n}\n\nexport interface queryTableDataParams {\n  actionQuery: ActionQuery;\n  page?: number;\n  pageSize?: number;\n  pageToken?: string;\n  jobId?: string;\n}\n", "export interface downloadTableDataParams {\n  assetId?: number;\n  resId?: number;\n  target?: string;\n  format?: string;\n}\n\nexport interface getTableSchemaParams {\n  resId?: number;\n  assetId?: number;\n  tableId?: string;\n}\n", "export interface createReadStreamParams {\n  resId?: number;\n  assetId?: number;\n  tableId?: string;\n  highWaterMark?: number; // in KiB\n  readOptions?: Object;\n  snapshotSeconds?: number;\n  dataType?: 'json' | 'buffer';\n}\n\nexport interface createWriteStreamParams {\n  dataType: 'json' | 'csv';\n  resId?: number;\n  assetId?: number;\n  tableId?: string;\n  hasHeader?: boolean;\n  maxWaitTime?: number; // in milliseconds\n}\n", "export interface createWriteStreamParams {\n  dataType: 'json' | 'csv';\n  resId?: number;\n  assetId?: number;\n  tableId?: string;\n  hasHeader?: boolean;\n  maxWaitTime?: number; // in milliseconds\n}\n\nexport class ResourceEndpoints {\n  private clientOpt: ClientOptions;\n  constructor(clientOpt: ClientOptions) {\n    this.clientOpt = {\n      ...clientOpt,\n      apiToken: clientOpt.apiToken || process.env.ACHO_TOKEN\n    };\n  }\n\n  /**\n   * Create a generic resource with name\n   * @param {createParams} params\n   * @param {number} params.name - either provide a assetId or a resId\n   */\n  async create(params: createParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/add/sdk',\n      payload: params\n    });\n    return data;\n  }\n\n  async createTable(params: createTableParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/integration/tables/add',\n      payload: params\n    });\n    return data;\n  }\n\n  async delete(params: deleteParams) {\n    const { resId: res_id } = params;\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data = await client.request({\n      method: 'delete',\n      headers: {},\n      path: '/resource/del',\n      payload: { res_id }\n    });\n    return data;\n  }\n\n  /**\n   * Get resource table by page\n   * @param {getTableDataParams} params\n   * @param {number} params.assetId - either provide a assetId or a resId\n   * @param {number} params.resId - either provide a assetId or a resId\n   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n   * @param {number} params.page - the page of paged data\n   * @param {pageSize} params.pageSize - how many rows should be in one data page\n   * @returns {ResourceTableDataResp}\n   */\n  async getTableData(params: getTableDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ResourceTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/get-data',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Sync resource data\n   * @param {syncTableDataParams} params\n   * @returns {}\n   */\n  async syncTableData(params: syncTableDataParams) {\n    const { userId } = params;\n    const { apiToken } = this.clientOpt;", "export class ResourceEndpoints {\n  private clientOpt: ClientOptions;\n  constructor(clientOpt: ClientOptions) {\n    this.clientOpt = {\n      ...clientOpt,\n      apiToken: clientOpt.apiToken || process.env.ACHO_TOKEN\n    };\n  }\n\n  /**\n   * Create a generic resource with name\n   * @param {createParams} params\n   * @param {number} params.name - either provide a assetId or a resId\n   */\n  async create(params: createParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/add/sdk',\n      payload: params\n    });\n    return data;\n  }\n\n  async createTable(params: createTableParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/integration/tables/add',\n      payload: params\n    });\n    return data;\n  }\n\n  async delete(params: deleteParams) {\n    const { resId: res_id } = params;\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data = await client.request({\n      method: 'delete',\n      headers: {},\n      path: '/resource/del',\n      payload: { res_id }\n    });\n    return data;\n  }\n\n  /**\n   * Get resource table by page\n   * @param {getTableDataParams} params\n   * @param {number} params.assetId - either provide a assetId or a resId\n   * @param {number} params.resId - either provide a assetId or a resId\n   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n   * @param {number} params.page - the page of paged data\n   * @param {pageSize} params.pageSize - how many rows should be in one data page\n   * @returns {ResourceTableDataResp}\n   */\n  async getTableData(params: getTableDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ResourceTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/get-data',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Sync resource data\n   * @param {syncTableDataParams} params\n   * @returns {}\n   */\n  async syncTableData(params: syncTableDataParams) {\n    const { userId } = params;\n    const { apiToken } = this.clientOpt;", "    if (!userId && apiToken) {\n      const { id } = JSON.parse(Buffer.from(apiToken.split('.')[1], 'base64').toString());\n      params.userId = id;\n    }\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    // TODO: add response type\n    const data = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/scheduler/run-resource-update',\n      payload: {\n        res_id: params.resId,\n        user_id: params.userId\n      }\n    });\n\n    return data;\n  }\n\n  /**\n   * Download resource table data\n   * @param {downloadTableDataParams} params\n   * @returns {ResourceTableDataResp}\n   */\n  async downloadTableData(params: downloadTableDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ResourceDownloadResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/download',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Query resource table data\n   * @param {queryTableDataParams} params\n   * @param {ActionQuery} params.actionQuery - (required) the query and the helper info to query a resource table\n   * @param {number} params.page - the page of paged data\n   * @param {pageSize} params.pageSize - how many rows should be in one data page\n   * @param {string} params.jobId - required if you want to query other pages with the same actionQuery\n   * @returns {ResourceTableDataResp}\n   */\n  async queryTableData(params: queryTableDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ResourceTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/query',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Get the resource table schema\n   * @param {getTableSchemaParams} params\n   * @param {number} params.assetId - either provide a assetId or a resId\n   * @param {number} params.resId - either provide a assetId or a resId\n   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n   * @returns {ResourceTableSchemaResp}\n   */\n  async getTableSchema(params: getTableSchemaParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ResourceTableSchemaResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/get-table-schema',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Create a readable stream to read data from a resource table\n   * @param {createReadStreamParams} params\n   * @param {number} params.assetId - either provide a assetId or a resId\n   * @param {number} params.resId - either provide a assetId or a resId\n   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n   * @param {number} params.highWaterMark - in KiB, default to 16384 KiB or 16 objects if the stream is in object mode\n   * @param {Object} params.readOptions - https://googleapis.dev/nodejs/bigquerystorage/2.7.0/google.cloud.bigquery.storage.v1.ReadSession.ITableReadOptions.html\n   * @param {number} params.snapshotSeconds - https://googleapis.dev/nodejs/bigquerystorage/2.7.0/google.cloud.bigquery.storage.v1.ReadSession.ITableModifiers.html\n   * @param {dataType} params.dataType - when set to json, the data streamed from the returned readable stream is of JSON type, otherwise, buffer\n   * @returns\n   */\n  async createReadStream(params: createReadStreamParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: Readable = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/resource/create-read-stream',\n      payload: { ...params, highWaterMark: (params.highWaterMark === undefined ? 32 : params.highWaterMark) * 1024 },\n      responseType: 'stream',\n      axiosSettings: {\n        decompress: false,\n        timeout: 300 * 1000\n      }\n    });\n    // data.on('data', (chunk: Buffer) => {\n    //   console.log(chunk.toString());\n    // });\n\n    let fragment = '';\n\n    const transformStream = new Transform({\n      readableObjectMode: true,\n      transform(chunk: Buffer, encoding: string, callback: TransformCallback) {", "        try {\n          // console.log('fragment', fragment);\n          // console.log('chunk', chunk.toString());\n          const data = JSON.parse(fragment + chunk.toString());\n          fragment = '';\n          callback(null, data);\n        } catch (err) {\n          if (err instanceof Error) {\n            // console.log(err);\n            fragment += chunk.toString();\n            callback(null);\n          } else {\n            callback(new Error('Unknown error'));\n          }\n        }\n      }\n    });\n\n    data.pipe(transformStream);\n\n    // readableStream.fragment = '';\n\n    return params.dataType === 'buffer' ? data : transformStream;\n    // return data;\n  }\n\n  /**\n   * Create a writable stream to write data to a resource table\n   * @param params\n   * @param {string} params.dataType - specify the input data type, json or csv\n   * @param {number} params.assetId - either provide a assetId or a resId\n   * @param {number} params.resId - either provide a assetId or a resId\n   * @param {string} params.tableId - when the resource is of type \"integration\", a tableId is required\n   * @param {string} params.hasHeader - indicate whether the input csv data includes the header\n   * @param {number} params.maxWaitTime - the maximum time in milliseconds to wait from the write job to complete, default to 60000 milliseconds\n   * @returns\n   */\n  async createWriteStream(params: createWriteStreamParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const httpRequest: ClientRequest = client.httpRequest({\n      method: 'post',\n      headers: {},\n      path: `/resource/create-write-stream`\n    });\n    httpRequest.write(JSON.stringify({ body: params }));\n    await wait(100);\n    return httpRequest;\n  }\n}\n"]}
{"filename": "src/auth.ts", "chunked_list": ["import { ClientRequest } from 'http';\nimport { AchoClient, IOAuthClient } from '.';\nimport { ClientOptions } from './types';\n\nexport interface IGetOAuthClientParams {\n  id: string;\n}\n\nexport class OAuthEndpoints {\n  private clientOpt: ClientOptions;\n  constructor(clientOpt: ClientOptions) {\n    this.clientOpt = {\n      ...clientOpt,\n      apiToken: clientOpt.apiToken || process.env.ACHO_TOKEN\n    };\n  }\n\n  async identify() {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: Array<IOAuthClient> = await client.request({\n      method: 'get',\n      headers: {},\n      path: '/auth/identify'\n    });\n    return data;\n  }\n\n  async getOAuthClientList() {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: Array<IOAuthClient> = await client.request({\n      method: 'get',\n      headers: {},\n      path: '/auth/oauth/client/list'\n    });\n    return data;\n  }\n\n  async getOAuthToken(params: IGetOAuthClientParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);", "export class OAuthEndpoints {\n  private clientOpt: ClientOptions;\n  constructor(clientOpt: ClientOptions) {\n    this.clientOpt = {\n      ...clientOpt,\n      apiToken: clientOpt.apiToken || process.env.ACHO_TOKEN\n    };\n  }\n\n  async identify() {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: Array<IOAuthClient> = await client.request({\n      method: 'get',\n      headers: {},\n      path: '/auth/identify'\n    });\n    return data;\n  }\n\n  async getOAuthClientList() {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: Array<IOAuthClient> = await client.request({\n      method: 'get',\n      headers: {},\n      path: '/auth/oauth/client/list'\n    });\n    return data;\n  }\n\n  async getOAuthToken(params: IGetOAuthClientParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);", "    try {\n      const data: string = await client.request({\n        method: 'get',\n        headers: {},\n        path: `/auth/oauth/client/${params.id}/token`\n      });\n      return data;\n    } catch (err) {\n      console.log(err);\n      throw err;\n    }\n  }\n}\n"]}
{"filename": "src/version.ts", "chunked_list": ["import { AchoClient } from '.';\nimport { ClientOptions } from './types';\nimport { App } from './app';\nimport { SERVER_ADDRESS, SOCKET_NAMESPACE } from './constants';\nimport { Socket, Manager } from 'socket.io-client';\nimport { joinAppBuilderRoom, leaveAppBuilderRoom } from './utils/sockets/appRoom';\n\nexport class AppVersion {\n  public appId: string;\n  public verId: string;\n  public metadata: any;\n  public clientOpt: ClientOptions;\n  public socket?: Socket;\n  constructor(appId: string, verId: string, clientOpt?: ClientOptions) {\n    this.appId = appId;\n    this.verId = verId;\n    this.clientOpt = {\n      ...clientOpt,\n      apiToken: clientOpt?.apiToken || process.env.ACHO_TOKEN\n    };\n  }\n\n  public async init() {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const verObj = await client.request({\n      method: 'get',\n      headers: {},\n      path: `/apps/${this.appId}/versions/${this.verId}`\n    });\n    this.metadata = verObj;\n    let socManager = new Manager(SERVER_ADDRESS, {\n      reconnectionAttempts: 10,\n      reconnectionDelayMax: 10000,\n      query: {\n        token: `jwt ${this.clientOpt.apiToken}`,\n        test: 'test parameter'\n      }\n    });\n    let socket = socManager.socket(SOCKET_NAMESPACE);\n    await new Promise((resolve, reject) => {\n      socket\n        .on('connect_error', (err) => {\n          console.log('connect_error', err);\n          reject(err);\n        })\n        .on('connect_timeout', (err) => {\n          console.log('connect_timeout', err);\n          reject(err);\n        })\n        .on('reconnect_attempt', (attempt) => {\n          console.log('reconnect_attempt', attempt);\n        })\n        .on('connect', () => {\n          console.log('connected');\n          resolve('connected');\n        })\n        .on('error', (err) => {\n          console.log('error', err);\n          reject(err);\n        });\n    });\n    this.socket = socket;\n    return this.metadata;\n  }\n\n  public async join() {", "    if (!this.socket) {\n      throw new Error('AppVersion not initialized');\n    }\n    await joinAppBuilderRoom(this.socket, { app_version_id: this.verId, is_editing: true });\n    return 'joined';\n  }\n  public async leave() {\n    if (!this.socket) {\n      throw new Error('AppVersion not initialized');\n    }\n    await leaveAppBuilderRoom(this.socket, { app_version_id: this.verId, is_editing: true });\n    return 'left';\n  }\n  public async disconnect() {", "    if (!this.socket) {\n      throw new Error('AppVersion not initialized');\n    }\n    this.socket.disconnect();\n    return 'closed';\n  }\n}\n"]}
{"filename": "src/project.ts", "chunked_list": ["import { AchoClient, ActionQuery, ProjectTableDataResp } from '.';\nimport { ClientOptions } from './types';\n\nexport interface getViewDataParams {\n  assetId?: number;\n  viewId?: number;\n  page?: number;\n  pageSize?: number;\n}\n\nexport interface queryTableDataParams {\n  actionQuery: ActionQuery;\n  page?: number;\n  pageSize?: number;\n  pageToken?: string;\n  jobId?: string;\n}\n", "export interface queryTableDataParams {\n  actionQuery: ActionQuery;\n  page?: number;\n  pageSize?: number;\n  pageToken?: string;\n  jobId?: string;\n}\n\nexport class ProjectEndpoints {\n  private clientOpt: ClientOptions;\n  constructor(clientOpt: ClientOptions) {\n    this.clientOpt = clientOpt;\n  }\n\n  async getViewData(params: getViewDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ProjectTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/project/get-view-data',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Query resource table data\n   * @param {queryTableDataParams} params\n   * @param {ActionQuery} params.actionQuery - (required) the query and the helper info to query a resource table\n   * @param {number} params.page - the page of paged data\n   * @param {pageSize} params.pageSize - how many rows should be in one data page\n   * @param {string} params.jobId - required if you want to query other pages with the same actionQuery\n   * @returns {ProjectTableDataResp}\n   */\n  async queryTableData(params: queryTableDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ProjectTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/project/query',\n      payload: params\n    });\n    return data;\n  }\n}\n", "export class ProjectEndpoints {\n  private clientOpt: ClientOptions;\n  constructor(clientOpt: ClientOptions) {\n    this.clientOpt = clientOpt;\n  }\n\n  async getViewData(params: getViewDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ProjectTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/project/get-view-data',\n      payload: params\n    });\n    return data;\n  }\n\n  /**\n   * Query resource table data\n   * @param {queryTableDataParams} params\n   * @param {ActionQuery} params.actionQuery - (required) the query and the helper info to query a resource table\n   * @param {number} params.page - the page of paged data\n   * @param {pageSize} params.pageSize - how many rows should be in one data page\n   * @param {string} params.jobId - required if you want to query other pages with the same actionQuery\n   * @returns {ProjectTableDataResp}\n   */\n  async queryTableData(params: queryTableDataParams) {\n    const client: AchoClient = new AchoClient(this.clientOpt);\n    const data: ProjectTableDataResp = await client.request({\n      method: 'post',\n      headers: {},\n      path: '/project/query',\n      payload: params\n    });\n    return data;\n  }\n}\n"]}
{"filename": "src/index.ts", "chunked_list": ["import 'dotenv/config';\nimport pleaseUpgradeNode from 'please-upgrade-node';\nconst packageJson = require('../package.json');\npleaseUpgradeNode(packageJson);\n\nexport * from './types';\nexport { default as Acho, ResourceEndpoints, ProjectEndpoints } from './Acho';\n"]}
{"filename": "src/utils/sockets/appRoom.ts", "chunked_list": ["import { SOCKET_EVENT_NAME } from '../../constants/socket';\n/**\n *\n * @param {*} socket - The socket instance\n * @param {Object} params - the params for the socket event\n * @param {String} params.app_version_id - app_version_id\n */\nexport async function joinAppBuilderRoom(socket: any, params: any) {\n  const response = await socket.timeout(10000).emitWithAck(SOCKET_EVENT_NAME.JOIN_APP_BUILDER_ROOM, params);\n  return response;\n}\n\n/**\n *\n * @param {*} socket - The socket instance\n * @param {Object} params - the params for the socket event\n * @param {String} params.app_version_id - app_version_id\n */", "export async function leaveAppBuilderRoom(socket: any, params: any) {\n  const response = await socket.timeout(10000).emitWithAck(SOCKET_EVENT_NAME.LEAVE_APP_BUILDER_ROOM, params);\n  return response;\n}\n"]}
{"filename": "src/constants/socket.ts", "chunked_list": ["// NOTE: sockets event names should be unique across different rooms to avoid conflict\nexport const SOCKET_EVENT_NAME = {\n  // business app socket events\n  JOIN_BUSINESS_APP_ROOM: 'join_business_app_room',\n  LEAVE_BUSINESS_APP_ROOM: 'leave_business_app_room',\n  JOIN_BUSINESS_APP_PROJ_ROOM: 'join_business_app_proj_room',\n  LEAVE_BUSINESS_APP_PROJ_ROOM: 'leave_business_app_proj_room',\n  DELETE_BUSINESS_APP: 'delete_business_app',\n  ADD_BUSINESS_APP: 'add_business_app',\n  UPDATE_BUSINESS_APP: 'update_business_app',", "  ADD_BUSINESS_APP: 'add_business_app',\n  UPDATE_BUSINESS_APP: 'update_business_app',\n  UPDATE_BUSINESS_APP_TAB_ORDER: 'update_business_app_tab_order',\n  CREATE_WIDGET: 'create_widget',\n  DELETE_WIDGET: 'delete_widget',\n  UPDATE_WIDGET: 'update_widget',\n  UPDATE_APP_SUCCESS: 'update_app_success',\n  DELETE_APP_SUCCESS: 'delete_app_success',\n  UPDATE_APP_TAB_ORDER_SUCCESS: 'update_app_tab_order_success',\n  JOIN_APP_BUILDER_ROOM: 'join_app_builder_room',", "  UPDATE_APP_TAB_ORDER_SUCCESS: 'update_app_tab_order_success',\n  JOIN_APP_BUILDER_ROOM: 'join_app_builder_room',\n  LEAVE_APP_BUILDER_ROOM: 'leave_app_builder_room'\n};\n"]}
{"filename": "src/constants/index.ts", "chunked_list": ["export const SERVER_ADDRESS = process.env.ACHO_API_ENDPOINT || '';\nexport const SOCKET_NAMESPACE = '/soc';\n"]}
{"filename": "src/types/index.ts", "chunked_list": ["export * from './assets';\nexport * from './client';\n"]}
{"filename": "src/types/client.ts", "chunked_list": ["import axios, { AxiosStatic, ResponseType } from 'axios';\nimport { request } from 'http';\nimport createHttpError from 'http-errors';\nimport url from 'url';\n\nexport interface ClientOptions {\n  apiToken?: string;\n  endpoint?: string;\n}\n\nexport interface AuthHeader {\n  Authorization: string;\n}\n", "export interface AuthHeader {\n  Authorization: string;\n}\n\nexport interface RequestOptions {\n  method: 'post' | 'get' | 'put' | 'delete';\n  headers: Record<string, any>;\n  path: string;\n  payload?: Record<string, any>;\n  responseType?: ResponseType;\n  axiosSettings?: Record<string, any>;\n}\n", "export class AchoClient {\n  private axios: AxiosStatic;\n  private baseUrl: string;\n  private authHeader: AuthHeader;\n  constructor(clientOpt: ClientOptions) {\n    this.axios = axios;\n    this.baseUrl = clientOpt.endpoint || process.env.ACHO_API_ENDPOINT || 'http://localhost:8888';\n    this.authHeader = { Authorization: `jwt ${clientOpt.apiToken || process.env.ACHO_TOKEN}` };\n  }\n  async request(options: RequestOptions) {\n    const { method, headers, path, payload, responseType, axiosSettings } = options;", "    try {\n      const url = this.baseUrl + path;\n      const config = {\n        method,\n        url,\n        responseType,\n        headers: {\n          ...headers,\n          ...this.authHeader\n        },\n        data: payload\n      };", "      if (axiosSettings) {\n        Object.assign(config, axiosSettings);\n        console.log(config);\n      }\n      const response = await this.axios(config).catch((error) => {\n        if (error.response) {\n          throw createHttpError(error.response.status, error.response.data);\n        } else if (error.request) {\n          throw createHttpError(400, error.request);\n        } else {\n          throw createHttpError(400, error.message);\n        }\n      });", "      if (response) {\n        const { data } = response;\n        return data;\n      }\n    } catch (error) {\n      console.log(error);\n      throw error;\n    }\n  }\n\n  httpRequest(options: RequestOptions) {\n    const { method, headers, path } = options;\n    const urlObj = url.parse(this.baseUrl);\n\n    const reqOptions = {\n      host: urlObj.hostname,\n      port: urlObj.port,\n      path,\n      method,\n      headers: {\n        ...headers,\n        ...this.authHeader\n      }\n    };\n    const req = request(reqOptions);\n    return req;\n  }\n}\n"]}
{"filename": "src/types/assets/resource.ts", "chunked_list": ["import { Readable } from 'stream';\n\nexport interface ResourceHelperInfo {\n  resource: Object;\n  resourceTable: string;\n}\n\n// export class ResourceReadable extends Readable {\n//   fragment?: string;\n//   isRead?: boolean;\n// }\n\n/**\n * Resource response types\n */", "export interface ResourceTableDataResp {\n  data: Array<Object>;\n  schema: ResourceTableSchemaResp;\n  paging: {\n    page: number;\n    pageSize: number;\n    pageTotal: number;\n    pageToken?: string;\n  };\n  jobId?: string;\n}\n", "export interface ResourceTableSchemaResp {\n  fields: Record<string, string>[];\n}\n\n// TODO: add resource:sync response type\n\nexport interface ResourceDownloadResp {\n  url: string;\n  archiveName: string;\n}\n"]}
{"filename": "src/types/assets/auth.ts", "chunked_list": ["export interface AuthHelperInfo {}\n\n/**\n * Auth list response types\n */\nexport interface IOAuthClient {\n  id: string;\n  name: string;\n  auth_url: string;\n  access_token_url: string;\n  client_id: string;\n  client_secret: string;\n  redirect_uri: string;\n  response_type: string;\n  authorization_code: string;\n  creator_id: number;\n  team_id: number;\n  token_type: 'bearer';\n  access_token: string;\n  expires_in: number;\n  created_at: number;\n  grant_type: 'refresh_token' | 'authorization_code' | 'client_credentials';\n  refresh_token: string;\n  content_type: string;\n  scope: string;\n}\n"]}
{"filename": "src/types/assets/project.ts", "chunked_list": ["// TODO: Project type not in use, necessary?\nexport interface Project {\n  type: string;\n  datasetId: string;\n  views: View[];\n}\n\n// TODO: View type not in use, necessary?\nexport interface View {\n  type: string;\n  tableId: string;\n}\n", "export interface View {\n  type: string;\n  tableId: string;\n}\n\nexport interface ProjectHelperInfo {}\n\nexport interface ViewHelperInfo {\n  view: Object;\n}\n", "export interface ProjectTableDataResp {\n  data: Array<Object>;\n  schema: ProjectTableSchemaResp;\n  paging: {\n    page: number;\n    pageSize: number;\n    pageTotal: number;\n    pageToken?: string;\n  };\n  jobId?: string;\n}\n", "export interface ProjectTableSchemaResp {\n  fields: Record<string, string>[];\n}\n"]}
{"filename": "src/types/assets/index.ts", "chunked_list": ["import { ResourceHelperInfo } from './resource';\nimport { ProjectHelperInfo, ViewHelperInfo } from './project';\n\nexport * from './resource';\nexport * from './project';\nexport * from './auth';\n\nexport interface ActionQuery {\n  query: string;\n  helperInfo: HelperInfo;\n}\n", "export interface HelperInfo {\n  resources: Array<ResourceHelperInfo>;\n  projects: Array<ProjectHelperInfo>;\n  views?: Array<ViewHelperInfo>;\n}\n"]}
