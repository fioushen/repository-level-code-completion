{"filename": "dist/config.d.ts", "chunked_list": ["import { Config } from './types';\ndeclare const config: Config;\nexport default config;\n"]}
{"filename": "dist/types.d.ts", "chunked_list": ["export type Import = string;\nexport type ImportData = {\n    raw: string;\n    path: string;\n};\nexport type ImportGroup = 'libraries' | 'aliases' | 'relatives' | 'directRelatives';\nexport type ImportGroups = Record<ImportGroup, ImportData[]>;\nexport type LibraryRuleName = 'exact' | 'starts' | 'includes';\nexport declare enum LibraryRule {\n    'EXACT' = \"exact\",\n    'STARTS' = \"starts\",\n    'INCLUDES' = \"includes\"\n}", "export declare enum LibraryRule {\n    'EXACT' = \"exact\",\n    'STARTS' = \"starts\",\n    'INCLUDES' = \"includes\"\n}\nexport type LibraryConfig = {\n    name: string;\n    rule: LibraryRuleName;\n};\nexport type Config = {\n    libs?: LibraryConfig[];\n    aliases?: string[];\n};\n", "export type Config = {\n    libs?: LibraryConfig[];\n    aliases?: string[];\n};\n"]}
{"filename": "dist/preprocess.d.ts", "chunked_list": ["export declare const preprocess: (code: string) => string;\n"]}
{"filename": "dist/getters.d.ts", "chunked_list": ["import { Config } from './types';\nexport declare const getExtractor: () => Config['extractor'];\n"]}
{"filename": "dist/constants.d.ts", "chunked_list": ["export declare const libraries: {\n    name: string;\n    rule: string;\n}[];\n"]}
{"filename": "dist/index.d.ts", "chunked_list": ["export {};\n"]}
{"filename": "dist/extractors/common-extractor.d.ts", "chunked_list": ["export declare const commonExtractor: (code: string) => RegExpMatchArray | [];\n"]}
{"filename": "dist/extractors/index.d.ts", "chunked_list": ["export * from './common-extractor';\n"]}
{"filename": "dist/utils/sort-input-groups.d.ts", "chunked_list": [""]}
{"filename": "dist/utils/split-imports-to-groups.d.ts", "chunked_list": ["import { Import, ImportGroups } from '../types';\nexport declare const splitImportsIntoGroups: (imports: Import[]) => ImportGroups;\n"]}
{"filename": "dist/utils/get-code-before-imports.d.ts", "chunked_list": ["export declare const getCodeBeforeImports: (code: string) => string;\n"]}
{"filename": "dist/utils/replace-imports.d.ts", "chunked_list": ["export declare const replaceImports: (imports: string, code: string) => string;\n"]}
{"filename": "dist/utils/sort-import-groups.d.ts", "chunked_list": ["import { ImportGroups } from '../types';\nexport declare const sortImportGroups: (inputGroups: ImportGroups) => {\n    libraries: any[];\n    aliases: any[];\n    relatives: any[];\n    directRelatives: any[];\n};\n"]}
{"filename": "dist/utils/prepare-code.d.ts", "chunked_list": ["import { ImportGroups } from '../types';\nexport declare const prepareCode: (importGroups: ImportGroups) => string;\n"]}
{"filename": "dist/utils/index.d.ts", "chunked_list": ["export * from './split-imports-to-groups';\nexport * from './sort-import-groups';\nexport * from './prepare-code';\n"]}
{"filename": "src/config.ts", "chunked_list": ["import { Config } from './types'\n\nconst config: Config = {\n  libs: [\n    {\n      name: 'react',\n      rule: 'exact',\n    },\n    {\n      name: 'next',", "    {\n      name: 'next',\n      rule: 'starts',\n    },\n  ],\n  aliases: [],\n}\n\ntry {\n  const userConfig: Config = require('../../../sort-plugin.config.js')\n", "try {\n  const userConfig: Config = require('../../../sort-plugin.config.js')\n\n  if (userConfig.libs) {\n    config.libs = userConfig.libs\n  }\n\n  if (userConfig.aliases) {\n    config.aliases = userConfig.aliases\n  }\n} catch (e) {}\n\nexport default config\n", "} catch (e) {}\n\nexport default config\n"]}
{"filename": "src/types.ts", "chunked_list": ["export type Import = string\n\nexport type ImportData = {\n  raw: string\n  path: string\n}\n\nexport type ImportGroup = 'libraries' | 'aliases' | 'relatives' | 'directRelatives'\n\nexport type ImportGroups = Record<ImportGroup, ImportData[]>\n", "export type ImportGroups = Record<ImportGroup, ImportData[]>\n\nexport type LibraryRuleName = 'exact' | 'starts' | 'includes'\n\nexport enum LibraryRule {\n  'EXACT' = 'exact',\n  'STARTS' = 'starts',\n  'INCLUDES' = 'includes',\n}\n\nexport type LibraryConfig = {\n  name: string\n  rule: LibraryRuleName\n}\n", "export type LibraryConfig = {\n  name: string\n  rule: LibraryRuleName\n}\n\nexport type Config = {\n  libs?: LibraryConfig[]\n  aliases?: string[]\n}\n"]}
{"filename": "src/index.ts", "chunked_list": ["import { parsers as javascriptParsers } from 'prettier/parser-babel'\nimport { parsers as typescriptParsers } from 'prettier/parser-typescript'\n\nimport { preprocess } from './preprocess'\n\nmodule.exports = {\n  parsers: {\n    typescript: {\n      ...typescriptParsers.typescript,\n      preprocess,", "      ...typescriptParsers.typescript,\n      preprocess,\n    },\n    babel: {\n      ...javascriptParsers.babel,\n      preprocess,\n    },\n  },\n}\n", "}\n"]}
{"filename": "src/preprocess.ts", "chunked_list": ["import { prepareCode, sortImportGroups, splitImportsIntoGroups } from './utils'\nimport { ImportGroups } from './types'\nimport { commonExtractor } from './extractors'\nimport { replaceImports } from './utils/replace-imports'\n\nexport const preprocess = (code: string) => {\n  const imports = commonExtractor(code)\n  const importGroups: ImportGroups = splitImportsIntoGroups(imports)\n  const sortedImportGroups = sortImportGroups(importGroups)\n  const preparedCode = prepareCode(sortedImportGroups)", "  const sortedImportGroups = sortImportGroups(importGroups)\n  const preparedCode = prepareCode(sortedImportGroups)\n\n  return replaceImports(preparedCode, code)\n}\n"]}
{"filename": "src/extractors/index.ts", "chunked_list": ["export * from './common-extractor'\n"]}
{"filename": "src/extractors/common-extractor.ts", "chunked_list": ["export const commonExtractor = (code: string) => {\n  return code.match(/^import[\\s\\S]+?['\"`].+/gm) || []\n}\n"]}
{"filename": "src/utils/get-code-before-imports.ts", "chunked_list": ["export const getCodeBeforeImports = (code: string) => {\n  const result = code.match(/^[\\s\\S]+?import/m)\n\n  if (result && result[0]) {\n    return result[0].replace(/import([\\s\\S]+)?/, '')\n  }\n\n  return ''\n}\n"]}
{"filename": "src/utils/replace-imports.ts", "chunked_list": ["import { getCodeBeforeImports } from './get-code-before-imports'\n\nexport const replaceImports = (imports: string, code: string) => {\n  const codeBeforeImports = getCodeBeforeImports(code)\n  let codeWithoutImports = code.replace(/^import[\\s\\S]+?['\"`].+/gm, '')\n\n  if (codeBeforeImports) {\n    codeWithoutImports = codeWithoutImports.replace(codeBeforeImports, '')\n\n    return `${codeBeforeImports}\\n${imports}\\n${codeWithoutImports}`\n  }\n\n  return `${imports}\\n${codeWithoutImports}`\n}\n"]}
{"filename": "src/utils/split-imports-to-groups.ts", "chunked_list": ["import config from '../config'\nimport { Config, Import, ImportData, ImportGroups } from '../types'\n\nconst extractImportPath = (importString: string): string => {\n  const matches = importString.match(/from.+/)\n\n  if (matches !== null) {\n    return matches[0].replace(/['\"]/gm, '').replace('from', '').trim()\n  }\n\n  return importString.replace(/['\"]/gm, '').replace('import', '').trim()\n}\n\nconst matchToUserAlias = (importSource: string, aliases: Config['aliases']) => {", "  for (const alias of aliases) {\n    if (importSource.startsWith(`@${alias}`)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nconst isDireactAliasImport = (importSource: string, importString: string) => {\n  return importSource.startsWith('@') && !importString.includes('from')\n}\n\nexport const splitImportsIntoGroups = (imports: Import[]): ImportGroups => {\n  const libraries: ImportData[] = []\n  const aliases: ImportData[] = []\n  const relatives: ImportData[] = []\n  const directRelatives: ImportData[] = []\n  const userAliases = config.aliases\n", "  for (const importString of imports) {\n    const importSource = extractImportPath(importString)\n\n    if (\n      ((userAliases.length < 1 && importSource.startsWith('@')) ||\n        matchToUserAlias(importSource, userAliases)) &&\n      !isDireactAliasImport(importSource, importString)\n    ) {\n      aliases.push({ raw: importString, path: importSource })\n    } else if (importSource.startsWith('.') && importString.includes('from')) {\n      relatives.push({ raw: importString, path: importSource })", "    } else if (importSource.startsWith('.') && importString.includes('from')) {\n      relatives.push({ raw: importString, path: importSource })\n    } else if (importSource.startsWith('.') || isDireactAliasImport(importSource, importString)) {\n      directRelatives.push({ raw: importString, path: importSource })\n    } else {\n      libraries.push({ raw: importString, path: importSource })\n    }\n  }\n\n  return {\n    libraries,\n    aliases,\n    relatives,\n    directRelatives,\n  }\n}\n"]}
{"filename": "src/utils/sort-import-groups.ts", "chunked_list": ["import config from '../config'\nimport { ImportData, ImportGroups, LibraryRule } from '../types'\n\nconst getImportDepth = (path: string) => {\n  return path.split('/').length\n}\n\nconst asc = (a, b) => {\n  const depthA = getImportDepth(a.path)\n  const depthB = getImportDepth(b.path)", "  const depthA = getImportDepth(a.path)\n  const depthB = getImportDepth(b.path)\n\n  if (depthA !== depthB) {\n    return depthA - depthB\n  } else {\n    return a.path.localeCompare(b.path)\n  }\n}\n\nconst desc = (a, b) => {\n  const depthA = getImportDepth(a.path)\n  const depthB = getImportDepth(b.path)\n", "  if (depthA !== depthB) {\n    return depthB - depthA\n  } else {\n    return a.path.localeCompare(b.path)\n  }\n}\n\nconst sortLibraries = (imports: ImportData[]) => {\n  let result: ImportData[] = []\n  const groups = {}\n", "  for (const library of config.libs) {\n    groups[library.name] = []\n\n    for (let i = 0; i < imports.length; i++) {\n      const importData = imports[i]\n\n      if (\n        (library.rule === LibraryRule.EXACT && importData.path === library.name) ||\n        (library.rule === LibraryRule.STARTS && importData.path.startsWith(library.name)) ||\n        (library.rule === LibraryRule.INCLUDES && importData.path.includes(library.name))\n      ) {\n        groups[library.name].push(importData)\n        imports.splice(i, 1)\n        i--\n      }\n    }\n  }\n", "  for (const groupKey in groups) {\n    groups[groupKey].sort(asc)\n    result = [...result, ...groups[groupKey]]\n  }\n\n  imports.sort(asc)\n\n  result = [...result, ...imports]\n\n  return destructuringSort(result)\n}\n\nconst sortAliases = (imports: ImportData[]) => {\n  const sortedImports = imports.sort(asc)\n\n  return destructuringSort(sortedImports)\n}\n\nconst sortRelatives = (imports: ImportData[]) => {\n  const outFolderImports = []\n  const currentFolderImports = []\n", "  for (const importData of imports) {\n    if (importData.path.startsWith('./')) {\n      currentFolderImports.push(importData)\n    } else {\n      outFolderImports.push(importData)\n    }\n  }\n\n  outFolderImports.sort(desc)\n  currentFolderImports.sort(desc)\n\n  return destructuringSort(outFolderImports.concat(currentFolderImports))\n}\n\nconst destructuringSort = (imports: ImportData[]) => {\n  const result = []\n", "  for (const importData of imports) {\n    const searchResult = importData.raw.match(/\\{[\\s\\S]+?}/gm)\n\n    if (searchResult) {\n      const importElementsString = searchResult[0].replace(/[{}\\s]/gm, '')\n\n      const importElements = importElementsString\n        .split(',')\n        .filter((importElement) => importElement)\n\n      importElements.sort(function (a, b) {", "        if (a.length === b.length) {\n          return a.localeCompare(b)\n        } else {\n          return a.length - b.length\n        }\n      })\n\n      result.push({\n        raw: importData.raw.replace(/\\{[\\s\\S]+?}/gm, `{ ${importElements.join(',')} }`),\n        path: importData.path,\n      })\n    } else {\n      result.push(importData)\n    }\n  }\n\n  return result\n}\n\nexport const sortImportGroups = (inputGroups: ImportGroups) => {\n  return {\n    libraries: sortLibraries(inputGroups.libraries),\n    aliases: sortAliases(inputGroups.aliases),\n    relatives: sortRelatives(inputGroups.relatives),\n    directRelatives: sortRelatives(inputGroups.directRelatives),\n  }\n}\n"]}
{"filename": "src/utils/index.ts", "chunked_list": ["export * from './split-imports-to-groups'\nexport * from './sort-import-groups'\nexport * from './prepare-code'\n"]}
{"filename": "src/utils/prepare-code.ts", "chunked_list": ["import { ImportGroups } from '../types'\n\nexport const prepareCode = (importGroups: ImportGroups) => {\n  let result = ''\n\n  for (const importData of importGroups.libraries) {\n    result += `${importData.raw}\\n`\n  }\n\n  result += '\\n'\n", "  for (const importData of importGroups.aliases) {\n    result += `${importData.raw}\\n`\n  }\n\n  result += '\\n'\n\n  for (const importData of importGroups.relatives) {\n    result += `${importData.raw}\\n`\n  }\n\n  if (importGroups.directRelatives.length > 0) {\n    result += '\\n'\n", "  if (importGroups.directRelatives.length > 0) {\n    result += '\\n'\n\n    for (const importData of importGroups.directRelatives) {\n      result += `${importData.raw}\\n`\n    }\n  }\n\n  return result\n}\n"]}
