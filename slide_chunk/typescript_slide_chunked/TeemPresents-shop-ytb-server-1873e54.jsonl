{"filename": "test/providers/auth.service.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { AuthModule } from 'src/auth/auth.module';", "import { User } from 'src/users/users.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { AuthService } from 'src/auth/auth.service';\n\nconst mockedUser = {\n  username: 'Jhon',\n  email: 'jhon@gmail.com',\n  password: 'jhon123',\n};\n", "};\n\ndescribe('Auth Service', () => {\n  let app: INestApplication;\n  let authService: AuthService;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({", "      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        AuthModule,\n      ],", "        AuthModule,\n      ],\n    }).compile();\n\n    authService = testModule.get<AuthService>(AuthService);\n    app = testModule.createNestApplication();\n\n    await app.init();\n  });\n", "  });\n\n  beforeEach(async () => {\n    const user = new User();\n\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);\n\n    user.username = mockedUser.username;\n    user.password = hashedPassword;\n    user.email = mockedUser.email;", "    user.password = hashedPassword;\n    user.email = mockedUser.email;\n\n    return user.save();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });\n  });\n", "  });\n\n  it('should login user', async () => {\n    const user = await authService.validateUser(\n      mockedUser.username,\n      mockedUser.password,\n    );\n\n    expect(user.username).toBe(mockedUser.username);\n    expect(user.email).toBe(mockedUser.email);", "    expect(user.username).toBe(mockedUser.username);\n    expect(user.email).toBe(mockedUser.email);\n  });\n});\n"]}
{"filename": "test/providers/users.service.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { UsersModule } from 'src/users/users.module';\nimport { UsersService } from 'src/users/users.service';", "import { UsersModule } from 'src/users/users.module';\nimport { UsersService } from 'src/users/users.service';\n\ndescribe('Users Service', () => {\n  let app: INestApplication;\n  let usersService: UsersService;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [", "    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        UsersModule,", "        }),\n        UsersModule,\n      ],\n    }).compile();\n\n    usersService = testModule.get<UsersService>(UsersService);\n    app = testModule.createNestApplication();\n    await app.init();\n  });\n", "  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: 'Test' } });\n  });\n\n  it('should create user', async () => {\n    const newUser = {\n      username: 'Test',\n      email: 'test@gmail.com',", "      username: 'Test',\n      email: 'test@gmail.com',\n      password: 'test123',\n    };\n\n    const user = (await usersService.create(newUser)) as User;\n\n    const passwordIsValid = await bcrypt.compare(\n      newUser.password,\n      user.password,", "      newUser.password,\n      user.password,\n    );\n\n    expect(user.username).toBe(newUser.username);\n    expect(passwordIsValid).toBe(true);\n    expect(user.email).toBe(newUser.email);\n  });\n});\n", "});\n"]}
{"filename": "test/providers/payment.service.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as request from 'supertest';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { PaymentModule } from '../../src/payment/payment.module';\nimport { PaymentService } from 'src/payment/payment.service';\n", "import { PaymentService } from 'src/payment/payment.service';\n\ndescribe('Payment Service', () => {\n  let app: INestApplication;\n  let paymentService: PaymentService;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({", "      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        PaymentModule,\n      ],", "        PaymentModule,\n      ],\n    }).compile();\n\n    paymentService = testModule.get<PaymentService>(PaymentService);\n\n    app = testModule.createNestApplication();\n\n    await app.init();\n  });", "    await app.init();\n  });\n\n  it('should make payment', async () => {\n    const data = await paymentService.makePayment({ amount: 100 });\n\n    expect(data).toEqual(\n      expect.objectContaining({\n        id: expect.any(String),\n        status: expect.any(String),", "        id: expect.any(String),\n        status: expect.any(String),\n        amount: {\n          value: expect.any(String),\n          currency: expect.any(String),\n        },\n        description: expect.any(String),\n        recipient: {\n          account_id: expect.any(String),\n          gateway_id: expect.any(String),", "          account_id: expect.any(String),\n          gateway_id: expect.any(String),\n        },\n        created_at: expect.any(String),\n        confirmation: {\n          type: expect.any(String),\n          confirmation_url: expect.any(String),\n        },\n        test: expect.any(Boolean),\n        paid: expect.any(Boolean),", "        test: expect.any(Boolean),\n        paid: expect.any(Boolean),\n        refundable: expect.any(Boolean),\n        metadata: expect.any(Object),\n      }),\n    );\n  });\n});\n", ""]}
{"filename": "test/providers/boiler-parts.service.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { BoilerPartsModule } from '../../src/boiler-parts/boiler-parts.module';\nimport { BoilerPartsService } from 'src/boiler-parts/boiler-parts.service';", "import { BoilerPartsModule } from '../../src/boiler-parts/boiler-parts.module';\nimport { BoilerPartsService } from 'src/boiler-parts/boiler-parts.service';\n\ndescribe('Auth Service', () => {\n  let app: INestApplication;\n  let boilerPartsService: BoilerPartsService;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [", "    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        BoilerPartsModule,", "        }),\n        BoilerPartsModule,\n      ],\n    }).compile();\n\n    boilerPartsService = testModule.get<BoilerPartsService>(BoilerPartsService);\n    app = testModule.createNestApplication();\n\n    await app.init();\n  });", "    await app.init();\n  });\n\n  it('should find by id', async () => {\n    const part = await boilerPartsService.findOne(1);\n\n    expect(part.dataValues).toEqual(\n      expect.objectContaining({\n        id: 1,\n        price: expect.any(Number),", "        id: 1,\n        price: expect.any(Number),\n        boiler_manufacturer: expect.any(String),\n        parts_manufacturer: expect.any(String),\n        vendor_code: expect.any(String),\n        name: expect.any(String),\n        description: expect.any(String),\n        images: expect.any(String),\n        in_stock: expect.any(Number),\n        bestseller: expect.any(Boolean),", "        in_stock: expect.any(Number),\n        bestseller: expect.any(Boolean),\n        new: expect.any(Boolean),\n        popularity: expect.any(Number),\n        compatibility: expect.any(String),\n        createdAt: expect.any(Date),\n        updatedAt: expect.any(Date),\n      }),\n    );\n  });", "    );\n  });\n\n  it('should find by name', async () => {\n    const part = await boilerPartsService.findOneByName('Voluptas saepe.');\n\n    expect(part.dataValues).toEqual(\n      expect.objectContaining({\n        id: expect.any(Number),\n        price: expect.any(Number),", "        id: expect.any(Number),\n        price: expect.any(Number),\n        boiler_manufacturer: expect.any(String),\n        parts_manufacturer: expect.any(String),\n        vendor_code: expect.any(String),\n        name: 'Voluptas saepe.',\n        description: expect.any(String),\n        images: expect.any(String),\n        in_stock: expect.any(Number),\n        bestseller: expect.any(Boolean),", "        in_stock: expect.any(Number),\n        bestseller: expect.any(Boolean),\n        new: expect.any(Boolean),\n        popularity: expect.any(Number),\n        compatibility: expect.any(String),\n        createdAt: expect.any(Date),\n        updatedAt: expect.any(Date),\n      }),\n    );\n  });", "    );\n  });\n\n  it('should find by search string', async () => {\n    const parts = await boilerPartsService.searchByString('nos');\n\n    expect(parts.rows.length).toBeLessThanOrEqual(20);\n\n    parts.rows.forEach((item) => {\n      expect(item.name.toLowerCase()).toContain('nos');", "    parts.rows.forEach((item) => {\n      expect(item.name.toLowerCase()).toContain('nos');\n      expect(item.dataValues).toEqual(\n        expect.objectContaining({\n          id: expect.any(Number),\n          price: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),\n          vendor_code: expect.any(String),\n          name: expect.any(String),", "          vendor_code: expect.any(String),\n          name: expect.any(String),\n          description: expect.any(String),\n          images: expect.any(String),\n          in_stock: expect.any(Number),\n          bestseller: expect.any(Boolean),\n          new: expect.any(Boolean),\n          popularity: expect.any(Number),\n          compatibility: expect.any(String),\n          createdAt: expect.any(Date),", "          compatibility: expect.any(String),\n          createdAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        }),\n      );\n    });\n  });\n\n  it('should find bestsellers', async () => {\n    const parts = await boilerPartsService.bestsellers();", "  it('should find bestsellers', async () => {\n    const parts = await boilerPartsService.bestsellers();\n\n    parts.rows.forEach((item) => {\n      expect(item.dataValues).toEqual(\n        expect.objectContaining({\n          id: expect.any(Number),\n          price: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),", "          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),\n          vendor_code: expect.any(String),\n          name: expect.any(String),\n          description: expect.any(String),\n          images: expect.any(String),\n          in_stock: expect.any(Number),\n          bestseller: true,\n          new: expect.any(Boolean),\n          popularity: expect.any(Number),", "          new: expect.any(Boolean),\n          popularity: expect.any(Number),\n          compatibility: expect.any(String),\n          createdAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        }),\n      );\n    });\n  });\n", "  });\n\n  it('should find new parts', async () => {\n    const parts = await boilerPartsService.new();\n\n    parts.rows.forEach((item) => {\n      expect(item.dataValues).toEqual(\n        expect.objectContaining({\n          id: expect.any(Number),\n          price: expect.any(Number),", "          id: expect.any(Number),\n          price: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),\n          vendor_code: expect.any(String),\n          name: expect.any(String),\n          description: expect.any(String),\n          images: expect.any(String),\n          in_stock: expect.any(Number),\n          bestseller: expect.any(Boolean),", "          in_stock: expect.any(Number),\n          bestseller: expect.any(Boolean),\n          new: true,\n          popularity: expect.any(Number),\n          compatibility: expect.any(String),\n          createdAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        }),\n      );\n    });", "      );\n    });\n  });\n});\n"]}
{"filename": "test/providers/shopping-cart.service.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport * as session from 'express-session';\nimport * as passport from 'passport';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';", "import { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { BoilerPartsModule } from 'src/boiler-parts/boiler-parts.module';\nimport { BoilerPartsService } from '../../src/boiler-parts/boiler-parts.service';\nimport { UsersService } from '../../src/users/users.service';\nimport { ShoppingCart } from '../../src/shopping-cart/shopping-cart.model';\nimport { ShoppingCartModule } from '../../src/shopping-cart/shopping-cart.module';\nimport { ShoppingCartService } from '../../src/shopping-cart/shopping-cart.service';", "import { ShoppingCartModule } from '../../src/shopping-cart/shopping-cart.module';\nimport { ShoppingCartService } from '../../src/shopping-cart/shopping-cart.service';\n\nconst mockedUser = {\n  username: 'Jhon',\n  email: 'jhon@gmail.com',\n  password: 'jhon123',\n};\n\ndescribe('Shopping Cart Service', () => {", "\ndescribe('Shopping Cart Service', () => {\n  let app: INestApplication;\n  let boilerPartsService: BoilerPartsService;\n  let usersService: UsersService;\n  let shoppingCartService: ShoppingCartService;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [", "    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        ShoppingCartModule,", "        }),\n        ShoppingCartModule,\n        BoilerPartsModule,\n      ],\n    }).compile();\n\n    boilerPartsService = testModule.get<BoilerPartsService>(BoilerPartsService);\n    usersService = testModule.get<UsersService>(UsersService);\n    shoppingCartService =\n      testModule.get<ShoppingCartService>(ShoppingCartService);", "    shoppingCartService =\n      testModule.get<ShoppingCartService>(ShoppingCartService);\n\n    app = testModule.createNestApplication();\n\n    await app.init();\n  });\n\n  beforeEach(async () => {\n    const user = new User();", "  beforeEach(async () => {\n    const user = new User();\n\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);\n\n    user.username = mockedUser.username;\n    user.password = hashedPassword;\n    user.email = mockedUser.email;\n\n    return user.save();", "\n    return user.save();\n  });\n\n  beforeEach(async () => {\n    const cart = new ShoppingCart();\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });\n    const part = await boilerPartsService.findOne(1);", "    });\n    const part = await boilerPartsService.findOne(1);\n\n    cart.userId = user.id;\n    cart.partId = part.id;\n    cart.boiler_manufacturer = part.boiler_manufacturer;\n    cart.parts_manufacturer = part.parts_manufacturer;\n    cart.price = part.price;\n    cart.in_stock = part.in_stock;\n    cart.image = JSON.parse(part.images)[0];", "    cart.in_stock = part.in_stock;\n    cart.image = JSON.parse(part.images)[0];\n    cart.name = part.name;\n    cart.total_price = part.price;\n\n    return cart.save();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });", "  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });\n    await ShoppingCart.destroy({ where: { partId: 1 } });\n  });\n\n  it('should return all cart items', async () => {\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });\n", "    });\n\n    const cart = await shoppingCartService.findAll(user.id);\n\n    cart.forEach((item) =>\n      expect(item.dataValues).toEqual(\n        expect.objectContaining({\n          id: expect.any(Number),\n          userId: user.id,\n          partId: expect.any(Number),", "          userId: user.id,\n          partId: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          price: expect.any(Number),\n          parts_manufacturer: expect.any(String),\n          name: expect.any(String),\n          image: expect.any(String),\n          count: expect.any(Number),\n          total_price: expect.any(Number),\n          in_stock: expect.any(Number),", "          total_price: expect.any(Number),\n          in_stock: expect.any(Number),\n          createdAt: expect.any(Date),\n          updatedAt: expect.any(Date),\n        }),\n      ),\n    );\n  });\n\n  it('should add cart items', async () => {", "\n  it('should add cart items', async () => {\n    await shoppingCartService.add({\n      username: mockedUser.username,\n      partId: 3,\n    });\n\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });", "      where: { username: mockedUser.username },\n    });\n\n    const cart = await shoppingCartService.findAll(user.id);\n\n    expect(cart.find((item) => item.partId === 3)).toEqual(\n      expect.objectContaining({\n        id: expect.any(Number),\n        userId: user.id,\n        partId: 3,", "        userId: user.id,\n        partId: 3,\n        boiler_manufacturer: expect.any(String),\n        price: expect.any(Number),\n        parts_manufacturer: expect.any(String),\n        name: expect.any(String),\n        image: expect.any(String),\n        count: expect.any(Number),\n        total_price: expect.any(Number),\n        in_stock: expect.any(Number),", "        total_price: expect.any(Number),\n        in_stock: expect.any(Number),\n        createdAt: expect.any(Date),\n        updatedAt: expect.any(Date),\n      }),\n    );\n  });\n\n  it('should return updated count', async () => {\n    const result = await shoppingCartService.updateCount(2, 1);", "  it('should return updated count', async () => {\n    const result = await shoppingCartService.updateCount(2, 1);\n\n    expect(result).toEqual({ count: 2 });\n  });\n\n  it('should return updated total price', async () => {\n    const part = await boilerPartsService.findOne(1);\n    const result = await shoppingCartService.updateTotalPrice(\n      part.price * 3,", "    const result = await shoppingCartService.updateTotalPrice(\n      part.price * 3,\n      1,\n    );\n\n    expect(result).toEqual({ total_price: part.price * 3 });\n  });\n\n  it('should delete cart item', async () => {\n    await shoppingCartService.remove(1);", "  it('should delete cart item', async () => {\n    await shoppingCartService.remove(1);\n\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });\n\n    const cart = await shoppingCartService.findAll(user.id);\n\n    expect(cart.find((item) => item.partId === 1)).toBeUndefined();", "\n    expect(cart.find((item) => item.partId === 1)).toBeUndefined();\n  });\n\n  it('should delete all cart items', async () => {\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });\n\n    await shoppingCartService.removeAll(user.id);", "\n    await shoppingCartService.removeAll(user.id);\n\n    const cart = await shoppingCartService.findAll(user.id);\n\n    expect(cart).toStrictEqual([]);\n  });\n});\n", ""]}
{"filename": "test/controllers/users.controller.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { UsersModule } from 'src/users/users.module';", "import { User } from 'src/users/users.model';\nimport { UsersModule } from 'src/users/users.module';\n\ndescribe('Users Controller', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({", "      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        UsersModule,\n      ],", "        UsersModule,\n      ],\n    }).compile();\n\n    app = testModule.createNestApplication();\n    await app.init();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: 'Test' } });", "  afterEach(async () => {\n    await User.destroy({ where: { username: 'Test' } });\n  });\n\n  it('should create user', async () => {\n    const newUser = {\n      username: 'Test',\n      email: 'test@gmail.com',\n      password: 'test123',\n    };", "      password: 'test123',\n    };\n\n    const response = await request(app.getHttpServer())\n      .post('/users/signup')\n      .send(newUser);\n\n    const passwordIsValid = await bcrypt.compare(\n      newUser.password,\n      response.body.password,", "      newUser.password,\n      response.body.password,\n    );\n\n    expect(response.body.username).toBe(newUser.username);\n    expect(passwordIsValid).toBe(true);\n    expect(response.body.email).toBe(newUser.email);\n  });\n});\n", "});\n"]}
{"filename": "test/controllers/payment.controller.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport * as session from 'express-session';\nimport * as passport from 'passport';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';", "import { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { PaymentModule } from '../../src/payment/payment.module';\n\nconst mockedUser = {\n  username: 'Jhon',\n  email: 'jhon@gmail.com',\n  password: 'jhon123',", "  email: 'jhon@gmail.com',\n  password: 'jhon123',\n};\n\nconst mockedPay = {\n  status: 'pending',\n  amount: {\n    value: '100.00',\n    currency: 'RUB',\n  },", "    currency: 'RUB',\n  },\n};\n\ndescribe('Payment Controller', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [", "    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        PaymentModule,", "        }),\n        PaymentModule,\n        AuthModule,\n      ],\n    }).compile();\n\n    app = testModule.createNestApplication();\n    app.use(\n      session({\n        secret: 'keyword',", "      session({\n        secret: 'keyword',\n        resave: false,\n        saveUninitialized: false,\n      }),\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    await app.init();", "\n    await app.init();\n  });\n\n  beforeEach(async () => {\n    const user = new User();\n\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);\n\n    user.username = mockedUser.username;", "\n    user.username = mockedUser.username;\n    user.password = hashedPassword;\n    user.email = mockedUser.email;\n\n    return user.save();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });", "  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });\n  });\n\n  it('should make payment', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())", "\n    const response = await request(app.getHttpServer())\n      .post('/payment')\n      .send({ amount: 100 })\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body.status).toEqual(mockedPay.status);\n    expect(response.body.amount).toEqual(mockedPay.amount);\n  });\n});", "  });\n});\n"]}
{"filename": "test/controllers/boiler-parts.controller.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport * as session from 'express-session';\nimport * as passport from 'passport';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';", "import { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { BoilerPartsModule } from 'src/boiler-parts/boiler-parts.module';\n\nconst mockedUser = {\n  username: 'Jhon',\n  email: 'jhon@gmail.com',\n  password: 'jhon123',", "  email: 'jhon@gmail.com',\n  password: 'jhon123',\n};\n\ndescribe('Boiler Parts Controller', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [", "    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        BoilerPartsModule,", "        }),\n        BoilerPartsModule,\n        AuthModule,\n      ],\n    }).compile();\n\n    app = testModule.createNestApplication();\n    app.use(\n      session({\n        secret: 'keyword',", "      session({\n        secret: 'keyword',\n        resave: false,\n        saveUninitialized: false,\n      }),\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    await app.init();", "\n    await app.init();\n  });\n\n  beforeEach(async () => {\n    const user = new User();\n\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);\n\n    user.username = mockedUser.username;", "\n    user.username = mockedUser.username;\n    user.password = hashedPassword;\n    user.email = mockedUser.email;\n\n    return user.save();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });", "  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });\n  });\n\n  it('should get one part', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())", "\n    const response = await request(app.getHttpServer())\n      .get('/boiler-parts/find/1')\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body).toEqual(\n      expect.objectContaining({\n        id: 1,\n        price: expect.any(Number),\n        boiler_manufacturer: expect.any(String),", "        price: expect.any(Number),\n        boiler_manufacturer: expect.any(String),\n        parts_manufacturer: expect.any(String),\n        vendor_code: expect.any(String),\n        name: expect.any(String),\n        description: expect.any(String),\n        images: expect.any(String),\n        in_stock: expect.any(Number),\n        bestseller: expect.any(Boolean),\n        new: expect.any(Boolean),", "        bestseller: expect.any(Boolean),\n        new: expect.any(Boolean),\n        popularity: expect.any(Number),\n        compatibility: expect.any(String),\n        createdAt: expect.any(String),\n        updatedAt: expect.any(String),\n      }),\n    );\n  });\n", "  });\n\n  it('should get bestsellers', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())\n      .get('/boiler-parts/bestsellers')\n      .set('Cookie', login.headers['set-cookie']);", "      .get('/boiler-parts/bestsellers')\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body.rows).toEqual(\n      expect.arrayContaining([\n        {\n          id: expect.any(Number),\n          price: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),", "          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),\n          vendor_code: expect.any(String),\n          name: expect.any(String),\n          description: expect.any(String),\n          images: expect.any(String),\n          in_stock: expect.any(Number),\n          bestseller: true,\n          new: expect.any(Boolean),\n          popularity: expect.any(Number),", "          new: expect.any(Boolean),\n          popularity: expect.any(Number),\n          compatibility: expect.any(String),\n          createdAt: expect.any(String),\n          updatedAt: expect.any(String),\n        },\n      ]),\n    );\n  });\n", "  });\n\n  it('should get new parts', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())\n      .get('/boiler-parts/new')\n      .set('Cookie', login.headers['set-cookie']);", "      .get('/boiler-parts/new')\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body.rows).toEqual(\n      expect.arrayContaining([\n        {\n          id: expect.any(Number),\n          price: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),", "          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),\n          vendor_code: expect.any(String),\n          name: expect.any(String),\n          description: expect.any(String),\n          images: expect.any(String),\n          in_stock: expect.any(Number),\n          bestseller: expect.any(Boolean),\n          new: true,\n          popularity: expect.any(Number),", "          new: true,\n          popularity: expect.any(Number),\n          compatibility: expect.any(String),\n          createdAt: expect.any(String),\n          updatedAt: expect.any(String),\n        },\n      ]),\n    );\n  });\n", "  });\n\n  it('should search by string', async () => {\n    const body = { search: 'nos' };\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())\n      .post('/boiler-parts/search')", "    const response = await request(app.getHttpServer())\n      .post('/boiler-parts/search')\n      .send(body)\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body.rows.length).toBeLessThanOrEqual(20);\n    response.body.rows.forEach((element) => {\n      expect(element.name.toLowerCase()).toContain(body.search);\n    });\n    expect(response.body.rows).toEqual(", "    });\n    expect(response.body.rows).toEqual(\n      expect.arrayContaining([\n        {\n          id: expect.any(Number),\n          price: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          parts_manufacturer: expect.any(String),\n          vendor_code: expect.any(String),\n          name: expect.any(String),", "          vendor_code: expect.any(String),\n          name: expect.any(String),\n          description: expect.any(String),\n          images: expect.any(String),\n          in_stock: expect.any(Number),\n          bestseller: expect.any(Boolean),\n          new: expect.any(Boolean),\n          popularity: expect.any(Number),\n          compatibility: expect.any(String),\n          createdAt: expect.any(String),", "          compatibility: expect.any(String),\n          createdAt: expect.any(String),\n          updatedAt: expect.any(String),\n        },\n      ]),\n    );\n  });\n\n  it('should get by name', async () => {\n    const body = { name: 'Voluptas saepe.' };", "  it('should get by name', async () => {\n    const body = { name: 'Voluptas saepe.' };\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())\n      .post('/boiler-parts/name')\n      .send(body)\n      .set('Cookie', login.headers['set-cookie']);", "      .send(body)\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body).toEqual(\n      expect.objectContaining({\n        id: expect.any(Number),\n        price: expect.any(Number),\n        boiler_manufacturer: expect.any(String),\n        parts_manufacturer: expect.any(String),\n        vendor_code: expect.any(String),", "        parts_manufacturer: expect.any(String),\n        vendor_code: expect.any(String),\n        name: 'Voluptas saepe.',\n        description: expect.any(String),\n        images: expect.any(String),\n        in_stock: expect.any(Number),\n        bestseller: expect.any(Boolean),\n        new: expect.any(Boolean),\n        popularity: expect.any(Number),\n        compatibility: expect.any(String),", "        popularity: expect.any(Number),\n        compatibility: expect.any(String),\n        createdAt: expect.any(String),\n        updatedAt: expect.any(String),\n      }),\n    );\n  });\n});\n", ""]}
{"filename": "test/controllers/shopping-cart.controller.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport * as session from 'express-session';\nimport * as passport from 'passport';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';", "import { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { BoilerPartsModule } from 'src/boiler-parts/boiler-parts.module';\nimport { BoilerPartsService } from '../../src/boiler-parts/boiler-parts.service';\nimport { UsersService } from '../../src/users/users.service';\nimport { ShoppingCart } from '../../src/shopping-cart/shopping-cart.model';\nimport { ShoppingCartModule } from '../../src/shopping-cart/shopping-cart.module';\n", "import { ShoppingCartModule } from '../../src/shopping-cart/shopping-cart.module';\n\nconst mockedUser = {\n  username: 'Jhon',\n  email: 'jhon@gmail.com',\n  password: 'jhon123',\n};\n\ndescribe('Shopping Cart Controller', () => {\n  let app: INestApplication;", "describe('Shopping Cart Controller', () => {\n  let app: INestApplication;\n  let boilerPartsService: BoilerPartsService;\n  let usersService: UsersService;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],", "        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        ShoppingCartModule,\n        BoilerPartsModule,\n        AuthModule,", "        BoilerPartsModule,\n        AuthModule,\n      ],\n    }).compile();\n\n    boilerPartsService = testModule.get<BoilerPartsService>(BoilerPartsService);\n    usersService = testModule.get<UsersService>(UsersService);\n\n    app = testModule.createNestApplication();\n    app.use(", "    app = testModule.createNestApplication();\n    app.use(\n      session({\n        secret: 'keyword',\n        resave: false,\n        saveUninitialized: false,\n      }),\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());", "    app.use(passport.initialize());\n    app.use(passport.session());\n\n    await app.init();\n  });\n\n  beforeEach(async () => {\n    const user = new User();\n\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);", "\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);\n\n    user.username = mockedUser.username;\n    user.password = hashedPassword;\n    user.email = mockedUser.email;\n\n    return user.save();\n  });\n", "  });\n\n  beforeEach(async () => {\n    const cart = new ShoppingCart();\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });\n    const part = await boilerPartsService.findOne(1);\n\n    cart.userId = user.id;", "\n    cart.userId = user.id;\n    cart.partId = part.id;\n    cart.boiler_manufacturer = part.boiler_manufacturer;\n    cart.parts_manufacturer = part.parts_manufacturer;\n    cart.price = part.price;\n    cart.in_stock = part.in_stock;\n    cart.image = JSON.parse(part.images)[0];\n    cart.name = part.name;\n    cart.total_price = part.price;", "    cart.name = part.name;\n    cart.total_price = part.price;\n\n    return cart.save();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });\n    await ShoppingCart.destroy({ where: { partId: 1 } });\n  });", "    await ShoppingCart.destroy({ where: { partId: 1 } });\n  });\n\n  it('should add cart item', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },", "    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });\n\n    const response = await request(app.getHttpServer())\n      .get(`/shopping-cart/${user.id}`)\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body).toEqual(\n      expect.arrayContaining([", "    expect(response.body).toEqual(\n      expect.arrayContaining([\n        {\n          id: expect.any(Number),\n          userId: user.id,\n          partId: expect.any(Number),\n          boiler_manufacturer: expect.any(String),\n          price: expect.any(Number),\n          parts_manufacturer: expect.any(String),\n          name: expect.any(String),", "          parts_manufacturer: expect.any(String),\n          name: expect.any(String),\n          image: expect.any(String),\n          count: expect.any(Number),\n          total_price: expect.any(Number),\n          in_stock: expect.any(Number),\n          createdAt: expect.any(String),\n          updatedAt: expect.any(String),\n        },\n      ]),", "        },\n      ]),\n    );\n  });\n\n  it('should get all cart items', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n", "      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    await request(app.getHttpServer())\n      .post('/shopping-cart/add')\n      .send({ username: mockedUser.username, partId: 3 })\n      .set('Cookie', login.headers['set-cookie']);\n\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });", "      where: { username: mockedUser.username },\n    });\n\n    const response = await request(app.getHttpServer())\n      .get(`/shopping-cart/${user.id}`)\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body.find((item) => item.partId === 3)).toEqual(\n      expect.objectContaining({\n        id: expect.any(Number),", "      expect.objectContaining({\n        id: expect.any(Number),\n        userId: user.id,\n        partId: 3,\n        boiler_manufacturer: expect.any(String),\n        price: expect.any(Number),\n        parts_manufacturer: expect.any(String),\n        name: expect.any(String),\n        image: expect.any(String),\n        count: expect.any(Number),", "        image: expect.any(String),\n        count: expect.any(Number),\n        total_price: expect.any(Number),\n        in_stock: expect.any(Number),\n        createdAt: expect.any(String),\n        updatedAt: expect.any(String),\n      }),\n    );\n  });\n", "  });\n\n  it('should get updated count of cart item', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const response = await request(app.getHttpServer())\n      .patch('/shopping-cart/count/1')\n      .send({ count: 2 })", "      .patch('/shopping-cart/count/1')\n      .send({ count: 2 })\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body).toEqual({ count: 2 });\n  });\n\n  it('should get updated total price of cart item', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')", "    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const part = await boilerPartsService.findOne(1);\n\n    const response = await request(app.getHttpServer())\n      .patch('/shopping-cart/total-price/1')\n      .send({ total_price: part.price * 3 })\n      .set('Cookie', login.headers['set-cookie']);", "      .send({ total_price: part.price * 3 })\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body).toEqual({ total_price: part.price * 3 });\n  });\n\n  it('should delete cart item', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });", "      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    await request(app.getHttpServer())\n      .delete('/shopping-cart/one/1')\n      .set('Cookie', login.headers['set-cookie']);\n\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });", "      where: { username: mockedUser.username },\n    });\n\n    const response = await request(app.getHttpServer())\n      .get(`/shopping-cart/${user.id}`)\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body.find((item) => item.partId === 1)).toBeUndefined();\n  });\n", "  });\n\n  it('should delete cart item', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const user = await usersService.findOne({\n      where: { username: mockedUser.username },\n    });", "      where: { username: mockedUser.username },\n    });\n\n    await request(app.getHttpServer())\n      .delete(`/shopping-cart/all/${user.id}`)\n      .set('Cookie', login.headers['set-cookie']);\n\n    const response = await request(app.getHttpServer())\n      .get(`/shopping-cart/${user.id}`)\n      .set('Cookie', login.headers['set-cookie']);", "      .get(`/shopping-cart/${user.id}`)\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(response.body).toStrictEqual([]);\n  });\n});\n"]}
{"filename": "test/controllers/auth.controller.spec.ts", "chunked_list": ["import { INestApplication } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as bcrypt from 'bcrypt';\nimport * as request from 'supertest';\nimport * as session from 'express-session';\nimport * as passport from 'passport';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';", "import { databaseConfig } from 'src/config/configuration';\nimport { SequelizeConfigService } from 'src/config/sequelizeConfig.service';\nimport { User } from 'src/users/users.model';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthModule } from 'src/auth/auth.module';\n\nconst mockedUser = {\n  username: 'Jhon',\n  email: 'jhon@gmail.com',\n  password: 'jhon123',", "  email: 'jhon@gmail.com',\n  password: 'jhon123',\n};\n\ndescribe('Auth Controller', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [", "    const testModule: TestingModule = await Test.createTestingModule({\n      imports: [\n        SequelizeModule.forRootAsync({\n          imports: [ConfigModule],\n          useClass: SequelizeConfigService,\n        }),\n        ConfigModule.forRoot({\n          load: [databaseConfig],\n        }),\n        AuthModule,", "        }),\n        AuthModule,\n      ],\n    }).compile();\n\n    app = testModule.createNestApplication();\n    app.use(\n      session({\n        secret: 'keyword',\n        resave: false,", "        secret: 'keyword',\n        resave: false,\n        saveUninitialized: false,\n      }),\n    );\n    app.use(passport.initialize());\n    app.use(passport.session());\n\n    await app.init();\n  });", "    await app.init();\n  });\n\n  beforeEach(async () => {\n    const user = new User();\n\n    const hashedPassword = await bcrypt.hash(mockedUser.password, 10);\n\n    user.username = mockedUser.username;\n    user.password = hashedPassword;", "    user.username = mockedUser.username;\n    user.password = hashedPassword;\n    user.email = mockedUser.email;\n\n    return user.save();\n  });\n\n  afterEach(async () => {\n    await User.destroy({ where: { username: mockedUser.username } });\n  });", "    await User.destroy({ where: { username: mockedUser.username } });\n  });\n\n  it('should login user', async () => {\n    const response = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    expect(response.body.user.username).toBe(mockedUser.username);\n    expect(response.body.msg).toBe('Logged in');", "    expect(response.body.user.username).toBe(mockedUser.username);\n    expect(response.body.msg).toBe('Logged in');\n    expect(response.body.user.email).toBe(mockedUser.email);\n  });\n\n  it('should login check', async () => {\n    const login = await request(app.getHttpServer())\n      .post('/users/login')\n      .send({ username: mockedUser.username, password: mockedUser.password });\n", "      .send({ username: mockedUser.username, password: mockedUser.password });\n\n    const loginCheck = await request(app.getHttpServer())\n      .get('/users/login-check')\n      .set('Cookie', login.headers['set-cookie']);\n\n    expect(loginCheck.body.username).toBe(mockedUser.username);\n    expect(loginCheck.body.email).toBe(mockedUser.email);\n  });\n", "  });\n\n  it('should logout', async () => {\n    const response = await request(app.getHttpServer()).get('/users/logout');\n\n    expect(response.body.msg).toBe('session has ended');\n  });\n});\n", ""]}
{"filename": "src/main.ts", "chunked_list": ["import * as session from 'express-session';\nimport * as passport from 'passport';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { DocumentBuilder } from '@nestjs/swagger';\nimport { SwaggerModule } from '@nestjs/swagger/dist';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.use(\n    session({\n      secret: 'keyword',\n      resave: false,\n      saveUninitialized: false,\n    }),\n  );\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  app.enableCors({\n    credentials: true,\n    origin: ['http://localhost:3001', 'https://shop-client-ijcw.onrender.com'],\n  });\n\n  const config = new DocumentBuilder()\n    .setTitle('\u0410\u043a\u0432\u0430 \u0442\u0435\u0440\u043c\u0438\u043a\u0441')\n    .setDescription('api documentation')\n    .setVersion('1.0')\n    .addTag('api')\n    .build();\n  const document = SwaggerModule.createDocument(app, config);\n  SwaggerModule.setup('swagger', app, document);\n\n  await app.listen(3000);\n}\nbootstrap();\n"]}
{"filename": "src/app.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { ConfigModule } from '@nestjs/config';\nimport { SequelizeConfigService } from './config/sequelizeConfig.service';\nimport { databaseConfig } from './config/configuration';\nimport { AuthModule } from './auth/auth.module';\nimport { BoilerPartsModule } from './boiler-parts/boiler-parts.module';\nimport { ShoppingCartModule } from './shopping-cart/shopping-cart.module';\nimport { PaymentModule } from './payment/payment.module';", "import { ShoppingCartModule } from './shopping-cart/shopping-cart.module';\nimport { PaymentModule } from './payment/payment.module';\n\n@Module({\n  imports: [\n    SequelizeModule.forRootAsync({\n      imports: [ConfigModule],\n      useClass: SequelizeConfigService,\n    }),\n    ConfigModule.forRoot({", "    }),\n    ConfigModule.forRoot({\n      load: [databaseConfig],\n    }),\n    UsersModule,\n    AuthModule,\n    BoilerPartsModule,\n    ShoppingCartModule,\n    PaymentModule,\n  ],", "    PaymentModule,\n  ],\n})\nexport class AppModule {}\n"]}
{"filename": "src/users/users.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { UsersController } from './users.controller';\nimport { User } from './users.model';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [SequelizeModule.forFeature([User])],\n  controllers: [UsersController],\n  providers: [UsersService],", "  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n"]}
{"filename": "src/users/users.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport * as bcrypt from 'bcrypt';\nimport { User } from './users.model';\nimport { CreateUserDto } from './dto/create-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(User)\n    private userModel: typeof User,\n  ) {}\n\n  findOne(filter: {\n    where: { id?: string; username?: string; email?: string };\n  }): Promise<User> {\n    return this.userModel.findOne({ ...filter });\n  }\n\n  async create(\n    createUserDto: CreateUserDto,\n  ): Promise<User | { warningMessage: string }> {\n    const user = new User();\n    const existingByUserName = await this.findOne({\n      where: { username: createUserDto.username },\n    });\n    const existingByEmail = await this.findOne({\n      where: { email: createUserDto.email },\n    });\n", "    if (existingByUserName) {\n      return { warningMessage: '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442' };\n    }\n\n    if (existingByEmail) {\n      return { warningMessage: '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c email \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442' };\n    }\n\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n\n    user.username = createUserDto.username;\n    user.password = hashedPassword;\n    user.email = createUserDto.email;\n\n    return user.save();\n  }\n}\n"]}
{"filename": "src/users/users.model.ts", "chunked_list": ["import { Table, Model, Column } from 'sequelize-typescript';\n\n@Table\nexport class User extends Model {\n  @Column\n  username: string;\n\n  @Column\n  password: string;\n\n  @Column\n  email: string;\n}\n"]}
{"filename": "src/users/users.controller.ts", "chunked_list": ["import {\n  Body,\n  Controller,\n  Get,\n  Header,\n  HttpCode,\n  HttpStatus,\n  Post,\n  Request,\n  UseGuards,", "  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { LocalAuthGuard } from '../auth/local.auth.guard';\nimport { AuthenticatedGuard } from 'src/auth/authenticated.guard';\nimport { ApiBody, ApiOkResponse } from '@nestjs/swagger';\nimport {\n  LoginCheckResponse,", "import {\n  LoginCheckResponse,\n  LoginUserRequest,\n  LoginUserResponse,\n  LogoutUserResponse,\n  SignupResponse,\n} from './types';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOkResponse({ type: SignupResponse })\n  @Post('/signup')\n  @HttpCode(HttpStatus.CREATED)\n  @Header('Content-type', 'application/json')\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @ApiBody({ type: LoginUserRequest })\n  @ApiOkResponse({ type: LoginUserResponse })\n  @Post('/login')\n  @UseGuards(LocalAuthGuard)\n  @HttpCode(HttpStatus.OK)\n  login(@Request() req) {\n    return { user: req.user, msg: 'Logged in' };\n  }\n\n  @ApiOkResponse({ type: LoginCheckResponse })\n  @Get('/login-check')\n  @UseGuards(AuthenticatedGuard)\n  loginCheck(@Request() req) {\n    return req.user;\n  }\n\n  @ApiOkResponse({ type: LogoutUserResponse })\n  @Get('/logout')\n  logout(@Request() req) {\n    req.session.destroy();\n    return { msg: 'session has ended' };\n  }\n}\n", "@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOkResponse({ type: SignupResponse })\n  @Post('/signup')\n  @HttpCode(HttpStatus.CREATED)\n  @Header('Content-type', 'application/json')\n  createUser(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @ApiBody({ type: LoginUserRequest })\n  @ApiOkResponse({ type: LoginUserResponse })\n  @Post('/login')\n  @UseGuards(LocalAuthGuard)\n  @HttpCode(HttpStatus.OK)\n  login(@Request() req) {\n    return { user: req.user, msg: 'Logged in' };\n  }\n\n  @ApiOkResponse({ type: LoginCheckResponse })\n  @Get('/login-check')\n  @UseGuards(AuthenticatedGuard)\n  loginCheck(@Request() req) {\n    return req.user;\n  }\n\n  @ApiOkResponse({ type: LogoutUserResponse })\n  @Get('/logout')\n  logout(@Request() req) {\n    req.session.destroy();\n    return { msg: 'session has ended' };\n  }\n}\n"]}
{"filename": "src/users/types/index.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\n\nexport class LoginUserRequest {\n  @ApiProperty({ example: 'Ivan' })\n  username: string;\n\n  @ApiProperty({ example: 'ivan123' })\n  password: string;\n}\n\nexport class LoginUserResponse {\n  @ApiProperty({\n    example: {\n      user: {\n        userId: 1,\n        username: 'Ivan',\n        password: 'ivan123',\n      },\n    },\n  })\n  user: {\n    userId: number;\n    username: string;\n    password: string;\n  };\n\n  @ApiProperty({ example: 'Logged in' })\n  msg: string;\n}\n", "export class LoginUserResponse {\n  @ApiProperty({\n    example: {\n      user: {\n        userId: 1,\n        username: 'Ivan',\n        password: 'ivan123',\n      },\n    },\n  })\n  user: {\n    userId: number;\n    username: string;\n    password: string;\n  };\n\n  @ApiProperty({ example: 'Logged in' })\n  msg: string;\n}\n", "export class LogoutUserResponse {\n  @ApiProperty({ example: 'session has ended' })\n  msg: string;\n}\n\nexport class LoginCheckResponse {\n  @ApiProperty({ example: 1 })\n  userId: number;\n\n  @ApiProperty({ example: 'Ivan' })\n  username: string;\n\n  @ApiProperty({ example: 'ivan@gmail.com' })\n  email: string;\n}\n", "export class SignupResponse {\n  @ApiProperty({ example: 1 })\n  id: number;\n\n  @ApiProperty({ example: 'Ivan' })\n  username: string;\n\n  @ApiProperty({\n    example: '$2b$10$90H0Hn.6Nx0SbrHQCX2xeeYjq.02nS5VpkIIwFAtDtCHEqHK',\n  })\n  password: string;\n\n  @ApiProperty({ example: 'ivan@gmail.com' })\n  email: string;\n\n  @ApiProperty({ example: '2023-03-17T17:23:33.502Z' })\n  updatedAt: string;\n\n  @ApiProperty({ example: '2023-03-17T17:23:33.502Z' })\n  createdAt: string;\n}\n"]}
{"filename": "src/users/dto/create-user.dto.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({ example: 'Ivan' })\n  @IsNotEmpty()\n  readonly username: string;\n\n  @ApiProperty({ example: 'ivan123' })\n  @IsNotEmpty()\n  readonly password: string;\n\n  @ApiProperty({ example: 'ivan@gmail.com' })\n  @IsNotEmpty()\n  readonly email: string;\n}\n"]}
{"filename": "src/auth/local.strategy.ts", "chunked_list": ["import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise<any> {\n    const user = await this.authService.validateUser(\n      username.toLowerCase(),\n      password,\n    );\n", "    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    return user;\n  }\n}\n"]}
{"filename": "src/auth/auth.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { SessionSerializer } from './session.serializer';\n\n@Module({\n  imports: [UsersModule, PassportModule.register({ session: true })],\n  providers: [AuthService, LocalStrategy, SessionSerializer],", "  imports: [UsersModule, PassportModule.register({ session: true })],\n  providers: [AuthService, LocalStrategy, SessionSerializer],\n})\nexport class AuthModule {}\n"]}
{"filename": "src/auth/authenticated.guard.ts", "chunked_list": ["import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AuthenticatedGuard implements CanActivate {\n  async canActivate(context: ExecutionContext) {\n    const request = context.switchToHttp().getRequest();\n\n    return request.isAuthenticated();\n  }\n}\n"]}
{"filename": "src/auth/session.serializer.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\nimport { PassportSerializer } from '@nestjs/passport';\n\n@Injectable()\nexport class SessionSerializer extends PassportSerializer {\n  serializeUser(user: any, done: (err: Error, user: any) => void) {\n    done(null, user);\n  }\n\n  deserializeUser(payload: any, done: (err: Error, user: any) => void) {\n    done(null, payload);\n  }\n}\n"]}
{"filename": "src/auth/auth.service.ts", "chunked_list": ["import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(private readonly usersService: UsersService) {}\n\n  async validateUser(username: string, password: string) {\n    const user = await this.usersService.findOne({ where: { username } });\n", "    if (!user) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    const passwordValid = await bcrypt.compare(password, user.password);\n\n    if (!passwordValid) {\n      throw new UnauthorizedException('Invalid credentials');\n    }\n\n    if (user && passwordValid) {\n      return {\n        userId: user.id,\n        username: user.username,\n        email: user.email,\n      };\n    }\n\n    return null;\n  }\n}\n", "    if (user && passwordValid) {\n      return {\n        userId: user.id,\n        username: user.username,\n        email: user.email,\n      };\n    }\n\n    return null;\n  }\n}\n"]}
{"filename": "src/auth/local.auth.guard.ts", "chunked_list": ["import { Injectable, ExecutionContext } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {\n  async canActivate(context: ExecutionContext) {\n    const result = (await super.canActivate(context)) as boolean;\n    const request = context.switchToHttp().getRequest();\n\n    await super.logIn(request);\n\n    return result;\n  }\n}\n"]}
{"filename": "src/config/sql.config.ts", "chunked_list": ["import { registerAs } from '@nestjs/config';\nimport { Dialect } from 'sequelize';\n\nexport const sqlConfig = registerAs('database', () => ({\n  dialect: <Dialect>process.env.SQL_DIALECT || 'mysql',\n  logging: process.env.SQL_LOGGING === 'true' ? true : false,\n  host: process.env.DATABASE_HOST,\n  port: +process.env.DATABASE_PORT,\n  username: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,", "  username: process.env.DATABASE_USER,\n  password: process.env.DATABASE_PASSWORD,\n  database: process.env.DATABASE_NAME,\n  autoLoadEntities: true,\n  synchronize: true,\n}));\n"]}
{"filename": "src/config/sequelizeConfig.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { User } from '../users/users.model';\nimport {\n  SequelizeOptionsFactory,\n  SequelizeModuleOptions,\n} from '@nestjs/sequelize';\n\n@Injectable()\nexport class SequelizeConfigService implements SequelizeOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n\n  createSequelizeOptions(): SequelizeModuleOptions {\n    const {\n      sql: { dialect, logging, host, port, username, password, database },\n    } = this.configService.get('database');\n\n    return {\n      dialect,\n      logging,\n      host,\n      port,\n      username,\n      password,\n      database,\n      models: [User],\n      autoLoadModels: true,\n      synchronize: true,\n      define: {\n        charset: 'utf8',\n        collate: 'utf8_general_ci',\n      },\n    };\n  }\n}\n", "@Injectable()\nexport class SequelizeConfigService implements SequelizeOptionsFactory {\n  constructor(private readonly configService: ConfigService) {}\n\n  createSequelizeOptions(): SequelizeModuleOptions {\n    const {\n      sql: { dialect, logging, host, port, username, password, database },\n    } = this.configService.get('database');\n\n    return {\n      dialect,\n      logging,\n      host,\n      port,\n      username,\n      password,\n      database,\n      models: [User],\n      autoLoadModels: true,\n      synchronize: true,\n      define: {\n        charset: 'utf8',\n        collate: 'utf8_general_ci',\n      },\n    };\n  }\n}\n"]}
{"filename": "src/config/configuration.ts", "chunked_list": ["import { registerAs } from '@nestjs/config';\nimport { sqlConfig } from './sql.config';\n\nexport const databaseConfig = registerAs('database', () => ({\n  sql: {\n    ...sqlConfig(),\n  },\n}));\n", ""]}
{"filename": "src/shopping-cart/shopping-cart.model.ts", "chunked_list": ["import { Table, Model, Column } from 'sequelize-typescript';\n\n@Table\nexport class ShoppingCart extends Model {\n  @Column\n  userId: number;\n\n  @Column({ defaultValue: 0 })\n  partId: number;\n\n  @Column\n  boiler_manufacturer: string;\n\n  @Column({ defaultValue: 0 })\n  price: number;\n\n  @Column\n  parts_manufacturer: string;\n\n  @Column\n  name: string;\n\n  @Column\n  image: string;\n\n  @Column({ defaultValue: 0 })\n  in_stock: number;\n\n  @Column({ defaultValue: 1 })\n  count: number;\n\n  @Column({ defaultValue: 0 })\n  total_price: number;\n}\n"]}
{"filename": "src/shopping-cart/shopping-cart.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { BoilerPartsService } from 'src/boiler-parts/boiler-parts.service';\nimport { UsersService } from 'src/users/users.service';\nimport { AddToCartDto } from './dto/add-to-cart.dto';\nimport { ShoppingCart } from './shopping-cart.model';\n\n@Injectable()\nexport class ShoppingCartService {\n  constructor(\n    @InjectModel(ShoppingCart)\n    private shoppingCartModel: typeof ShoppingCart,\n    private readonly usersService: UsersService,\n    private readonly boilerPartsService: BoilerPartsService,\n  ) {}\n\n  async findAll(userId: number | string): Promise<ShoppingCart[]> {\n    return this.shoppingCartModel.findAll({ where: { userId } });\n  }\n\n  async add(addToCartDto: AddToCartDto) {\n    const cart = new ShoppingCart();\n    const user = await this.usersService.findOne({\n      where: { username: addToCartDto.username },\n    });\n    const part = await this.boilerPartsService.findOne(addToCartDto.partId);\n\n    cart.userId = user.id;\n    cart.partId = part.id;\n    cart.boiler_manufacturer = part.boiler_manufacturer;\n    cart.parts_manufacturer = part.parts_manufacturer;\n    cart.price = part.price;\n    cart.in_stock = part.in_stock;\n    cart.image = JSON.parse(part.images)[0];\n    cart.name = part.name;\n    cart.total_price = part.price;\n\n    return cart.save();\n  }\n\n  async updateCount(\n    count: number,\n    partId: number | string,\n  ): Promise<{ count: number }> {\n    await this.shoppingCartModel.update({ count }, { where: { partId } });\n\n    const part = await this.shoppingCartModel.findOne({ where: { partId } });\n\n    return { count: part.count };\n  }\n\n  async updateTotalPrice(\n    total_price: number,\n    partId: number | string,\n  ): Promise<{ total_price: number }> {\n    await this.shoppingCartModel.update({ total_price }, { where: { partId } });\n\n    const part = await this.shoppingCartModel.findOne({ where: { partId } });\n\n    return { total_price: part.total_price };\n  }\n\n  async remove(partId: number | string): Promise<void> {\n    const part = await this.shoppingCartModel.findOne({ where: { partId } });\n\n    await part.destroy();\n  }\n\n  async removeAll(userId: number | string): Promise<void> {\n    await this.shoppingCartModel.destroy({ where: { userId } });\n  }\n}\n", "export class ShoppingCartService {\n  constructor(\n    @InjectModel(ShoppingCart)\n    private shoppingCartModel: typeof ShoppingCart,\n    private readonly usersService: UsersService,\n    private readonly boilerPartsService: BoilerPartsService,\n  ) {}\n\n  async findAll(userId: number | string): Promise<ShoppingCart[]> {\n    return this.shoppingCartModel.findAll({ where: { userId } });\n  }\n\n  async add(addToCartDto: AddToCartDto) {\n    const cart = new ShoppingCart();\n    const user = await this.usersService.findOne({\n      where: { username: addToCartDto.username },\n    });\n    const part = await this.boilerPartsService.findOne(addToCartDto.partId);\n\n    cart.userId = user.id;\n    cart.partId = part.id;\n    cart.boiler_manufacturer = part.boiler_manufacturer;\n    cart.parts_manufacturer = part.parts_manufacturer;\n    cart.price = part.price;\n    cart.in_stock = part.in_stock;\n    cart.image = JSON.parse(part.images)[0];\n    cart.name = part.name;\n    cart.total_price = part.price;\n\n    return cart.save();\n  }\n\n  async updateCount(\n    count: number,\n    partId: number | string,\n  ): Promise<{ count: number }> {\n    await this.shoppingCartModel.update({ count }, { where: { partId } });\n\n    const part = await this.shoppingCartModel.findOne({ where: { partId } });\n\n    return { count: part.count };\n  }\n\n  async updateTotalPrice(\n    total_price: number,\n    partId: number | string,\n  ): Promise<{ total_price: number }> {\n    await this.shoppingCartModel.update({ total_price }, { where: { partId } });\n\n    const part = await this.shoppingCartModel.findOne({ where: { partId } });\n\n    return { total_price: part.total_price };\n  }\n\n  async remove(partId: number | string): Promise<void> {\n    const part = await this.shoppingCartModel.findOne({ where: { partId } });\n\n    await part.destroy();\n  }\n\n  async removeAll(userId: number | string): Promise<void> {\n    await this.shoppingCartModel.destroy({ where: { userId } });\n  }\n}\n"]}
{"filename": "src/shopping-cart/shopping-cart.controller.ts", "chunked_list": ["import {\n  Controller,\n  Get,\n  Param,\n  UseGuards,\n  Post,\n  Body,\n  Patch,\n  Delete,\n} from '@nestjs/common';", "  Delete,\n} from '@nestjs/common';\nimport { AuthenticatedGuard } from 'src/auth/authenticated.guard';\nimport { AddToCartDto } from './dto/add-to-cart.dto';\nimport { ShoppingCartService } from './shopping-cart.service';\nimport { ApiOkResponse, ApiBody } from '@nestjs/swagger';\nimport {\n  AddToCardResponse,\n  GetAllResponse,\n  TotalPriceRequest,", "  GetAllResponse,\n  TotalPriceRequest,\n  TotalPriceResponse,\n  UpdateCountRequest,\n  UpdateCountResponse,\n} from './types';\n\n@Controller('shopping-cart')\nexport class ShoppingCartController {\n  constructor(private readonly shoppingCartService: ShoppingCartService) {}\n\n  @ApiOkResponse({ type: [GetAllResponse] })\n  @UseGuards(AuthenticatedGuard)\n  @Get(':id')\n  getAll(@Param('id') userId: string) {\n    return this.shoppingCartService.findAll(userId);\n  }\n\n  @ApiOkResponse({ type: AddToCardResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Post('/add')\n  addToCar(@Body() addToCartDto: AddToCartDto) {\n    return this.shoppingCartService.add(addToCartDto);\n  }\n\n  @ApiOkResponse({ type: UpdateCountResponse })\n  @ApiBody({ type: UpdateCountRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Patch('/count/:id')\n  updateCount(\n    @Body() { count }: { count: number },\n    @Param('id') partId: string,\n  ) {\n    return this.shoppingCartService.updateCount(count, partId);\n  }\n\n  @ApiOkResponse({ type: TotalPriceResponse })\n  @ApiBody({ type: TotalPriceRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Patch('/total-price/:id')\n  updateTotalPrice(\n    @Body() { total_price }: { total_price: number },\n    @Param('id') partId: string,\n  ) {\n    return this.shoppingCartService.updateTotalPrice(total_price, partId);\n  }\n\n  @UseGuards(AuthenticatedGuard)\n  @Delete('/one/:id')\n  removeOne(@Param('id') partId: string) {\n    return this.shoppingCartService.remove(partId);\n  }\n\n  @UseGuards(AuthenticatedGuard)\n  @Delete('/all/:id')\n  removeAll(@Param('id') userId: string) {\n    return this.shoppingCartService.removeAll(userId);\n  }\n}\n", "export class ShoppingCartController {\n  constructor(private readonly shoppingCartService: ShoppingCartService) {}\n\n  @ApiOkResponse({ type: [GetAllResponse] })\n  @UseGuards(AuthenticatedGuard)\n  @Get(':id')\n  getAll(@Param('id') userId: string) {\n    return this.shoppingCartService.findAll(userId);\n  }\n\n  @ApiOkResponse({ type: AddToCardResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Post('/add')\n  addToCar(@Body() addToCartDto: AddToCartDto) {\n    return this.shoppingCartService.add(addToCartDto);\n  }\n\n  @ApiOkResponse({ type: UpdateCountResponse })\n  @ApiBody({ type: UpdateCountRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Patch('/count/:id')\n  updateCount(\n    @Body() { count }: { count: number },\n    @Param('id') partId: string,\n  ) {\n    return this.shoppingCartService.updateCount(count, partId);\n  }\n\n  @ApiOkResponse({ type: TotalPriceResponse })\n  @ApiBody({ type: TotalPriceRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Patch('/total-price/:id')\n  updateTotalPrice(\n    @Body() { total_price }: { total_price: number },\n    @Param('id') partId: string,\n  ) {\n    return this.shoppingCartService.updateTotalPrice(total_price, partId);\n  }\n\n  @UseGuards(AuthenticatedGuard)\n  @Delete('/one/:id')\n  removeOne(@Param('id') partId: string) {\n    return this.shoppingCartService.remove(partId);\n  }\n\n  @UseGuards(AuthenticatedGuard)\n  @Delete('/all/:id')\n  removeAll(@Param('id') userId: string) {\n    return this.shoppingCartService.removeAll(userId);\n  }\n}\n"]}
{"filename": "src/shopping-cart/shopping-cart.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { ShoppingCartController } from './shopping-cart.controller';\nimport { ShoppingCartService } from './shopping-cart.service';\nimport { ShoppingCart } from './shopping-cart.model';\nimport { UsersModule } from '../users/users.module';\nimport { BoilerPartsModule } from '../boiler-parts/boiler-parts.module';\n\n@Module({\n  imports: [", "@Module({\n  imports: [\n    SequelizeModule.forFeature([ShoppingCart]),\n    UsersModule,\n    BoilerPartsModule,\n  ],\n  controllers: [ShoppingCartController],\n  providers: [ShoppingCartService],\n})\nexport class ShoppingCartModule {}\n", "})\nexport class ShoppingCartModule {}\n"]}
{"filename": "src/shopping-cart/types/index.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\n\nclass ShoppingCartItem {\n  @ApiProperty({ example: 1 })\n  id: number;\n\n  @ApiProperty({ example: 'Aliquid alias.' })\n  name: string;\n\n  @ApiProperty({ example: 2500 })\n  price: number;\n\n  @ApiProperty({\n    example:\n      'https://loremflickr.com/640/480/technics?random=849581742306099411950399951214',\n  })\n  image: string;\n\n  @ApiProperty({ example: 5 })\n  in_stock: number;\n\n  @ApiProperty({ example: 'Salmon' })\n  parts_manufacturer: string;\n\n  @ApiProperty({ example: 'Henry' })\n  boiler_manufacturer: string;\n\n  @ApiProperty({ example: 1 })\n  userId: number;\n\n  @ApiProperty({ example: 1 })\n  partId: number;\n\n  @ApiProperty({ example: 3 })\n  count: number;\n\n  @ApiProperty({ example: 3 })\n  total_price: number;\n\n  @ApiProperty({ example: '2023-03-19T12:45:51.240Z' })\n  createdAt: string;\n\n  @ApiProperty({ example: '2023-03-19T12:45:51.240Z' })\n  updatedAt: string;\n}\n", "export class GetAllResponse extends ShoppingCartItem {}\nexport class AddToCardResponse extends ShoppingCartItem {}\nexport class UpdateCountResponse {\n  @ApiProperty({ example: 1 })\n  count: number;\n}\nexport class UpdateCountRequest {\n  @ApiProperty({ example: 1 })\n  count: number;\n}\nexport class TotalPriceResponse {\n  @ApiProperty({ example: 1000 })\n  total_price: number;\n}", "export class TotalPriceResponse {\n  @ApiProperty({ example: 1000 })\n  total_price: number;\n}\nexport class TotalPriceRequest {\n  @ApiProperty({ example: 1000 })\n  total_price: number;\n}\n"]}
{"filename": "src/shopping-cart/dto/add-to-cart.dto.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class AddToCartDto {\n  @ApiProperty({ example: 'Ivan' })\n  @IsNotEmpty()\n  readonly username: string;\n\n  @ApiProperty({ example: 1 })\n  @IsOptional()\n  userId?: number;\n\n  @ApiProperty({ example: 1 })\n  @IsNotEmpty()\n  readonly partId: number;\n}\n"]}
{"filename": "src/payment/payment.controller.ts", "chunked_list": ["import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { PaymentService } from './payment.service';\nimport { MakePaymentDto } from './dto/make-paymen.dto';\nimport { AuthenticatedGuard } from 'src/auth/authenticated.guard';\nimport { ApiOkResponse } from '@nestjs/swagger';\nimport { MakePaymentResponse } from './types';\nimport { CheckPaymentDto } from './dto/check-payment.dto';\n\n@Controller('payment')\nexport class PaymentController {\n  constructor(private paymentService: PaymentService) {}\n\n  @ApiOkResponse({ type: MakePaymentResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Post()\n  makePayment(@Body() makePaymentDto: MakePaymentDto) {\n    return this.paymentService.makePayment(makePaymentDto);\n  }\n\n  @UseGuards(AuthenticatedGuard)\n  @Post('/info')\n  checkPayment(@Body() checkPaymentDto: CheckPaymentDto) {\n    return this.paymentService.checkPayment(checkPaymentDto);\n  }\n}\n", "@Controller('payment')\nexport class PaymentController {\n  constructor(private paymentService: PaymentService) {}\n\n  @ApiOkResponse({ type: MakePaymentResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Post()\n  makePayment(@Body() makePaymentDto: MakePaymentDto) {\n    return this.paymentService.makePayment(makePaymentDto);\n  }\n\n  @UseGuards(AuthenticatedGuard)\n  @Post('/info')\n  checkPayment(@Body() checkPaymentDto: CheckPaymentDto) {\n    return this.paymentService.checkPayment(checkPaymentDto);\n  }\n}\n"]}
{"filename": "src/payment/payment.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { PaymentController } from './payment.controller';\nimport { PaymentService } from './payment.service';\n\n@Module({\n  controllers: [PaymentController],\n  providers: [PaymentService],\n})\nexport class PaymentModule {}\n", "export class PaymentModule {}\n"]}
{"filename": "src/payment/payment.service.ts", "chunked_list": ["import { ForbiddenException, Injectable } from '@nestjs/common';\nimport axios from 'axios';\nimport { MakePaymentDto } from './dto/make-paymen.dto';\nimport { CheckPaymentDto } from './dto/check-payment.dto';\n\n@Injectable()\nexport class PaymentService {\n  async makePayment(makePaymentDto: MakePaymentDto) {\n    try {\n      const { data } = await axios({\n        method: 'POST',\n        url: 'https://api.yookassa.ru/v3/payments',\n        headers: {\n          'Content-Type': 'application/json',\n          'Idempotence-Key': Date.now(),\n        },\n        auth: {\n          username: '204971',\n          password: 'test_dgisbcPctB1RjjKeSBzdIuXJR0IRTFKm6Rdi9eNGZxE',\n        },\n        data: {\n          amount: {\n            value: makePaymentDto.amount,\n            currency: 'RUB',\n          },\n          capture: true,\n          confirmation: {\n            type: 'redirect',\n            return_url: 'http://localhost:3001/order',\n          },\n          description: makePaymentDto.description,\n        },\n      });\n\n      return data;", "    try {\n      const { data } = await axios({\n        method: 'POST',\n        url: 'https://api.yookassa.ru/v3/payments',\n        headers: {\n          'Content-Type': 'application/json',\n          'Idempotence-Key': Date.now(),\n        },\n        auth: {\n          username: '204971',\n          password: 'test_dgisbcPctB1RjjKeSBzdIuXJR0IRTFKm6Rdi9eNGZxE',\n        },\n        data: {\n          amount: {\n            value: makePaymentDto.amount,\n            currency: 'RUB',\n          },\n          capture: true,\n          confirmation: {\n            type: 'redirect',\n            return_url: 'http://localhost:3001/order',\n          },\n          description: makePaymentDto.description,\n        },\n      });\n\n      return data;", "    } catch (error) {\n      throw new ForbiddenException(error);\n    }\n  }\n\n  async checkPayment(checkPaymentDto: CheckPaymentDto) {\n    try {\n      const { data } = await axios({\n        method: 'GET',\n        url: `https://api.yookassa.ru/v3/payments/${checkPaymentDto.paymentId}`,\n        auth: {\n          username: '204971',\n          password: 'test_dgisbcPctB1RjjKeSBzdIuXJR0IRTFKm6Rdi9eNGZxE',\n        },\n      });\n\n      return data;", "    } catch (error) {\n      throw new ForbiddenException(error);\n    }\n  }\n}\n"]}
{"filename": "src/payment/types/index.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\n\nexport class MakePaymentResponse {\n  @ApiProperty({ example: '2b9e50d0' })\n  id: string;\n\n  @ApiProperty({ example: 'pending' })\n  status: string;\n\n  @ApiProperty({ example: { value: '100', currency: 'RUB' } })\n  amount: {\n    value: string;\n    currency: string;\n  };\n\n  @ApiProperty({ example: '\u0417\u0430\u043a\u0430\u0437 \u21161' })\n  description: string;\n\n  @ApiProperty({\n    example: {\n      type: 'redirect',\n      confirmation_url:\n        'https://yoomoney.ru/checkout/payments/v2/contract?orderId=2b',\n    },\n  })\n  confirmation: {\n    type: string;\n    confirmation_url: string;\n  };\n\n  @ApiProperty({\n    example: {\n      account_id: '204971',\n      gateway_id: '2057935',\n    },\n  })\n  recipient: {\n    account_id: string;\n    gateway_id: string;\n  };\n\n  @ApiProperty({ example: true })\n  test: boolean;\n\n  @ApiProperty({ example: false })\n  paid: boolean;\n\n  @ApiProperty({ example: false })\n  refundable: boolean;\n\n  @ApiProperty({ example: {} })\n  metadata: object;\n}\n"]}
{"filename": "src/payment/dto/make-paymen.dto.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class MakePaymentDto {\n  @ApiProperty({ example: 100 })\n  @IsNotEmpty()\n  readonly amount: number;\n\n  @ApiProperty({ example: '\u0437\u0430\u043a\u0430\u0437 \u21161' })\n  @IsOptional()\n  readonly description?: string;\n}\n"]}
{"filename": "src/payment/dto/check-payment.dto.ts", "chunked_list": ["import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class CheckPaymentDto {\n  @ApiProperty({ example: '22e12f66-000f-5000-8000-18db351245c7' })\n  @IsNotEmpty()\n  readonly paymentId: number;\n}\n"]}
{"filename": "src/boiler-parts/boiler-parts.controller.ts", "chunked_list": ["import { Body, Controller, Post } from '@nestjs/common';\nimport { Get } from '@nestjs/common';\nimport { Param, Query, UseGuards } from '@nestjs/common';\nimport { BoilerPartsService } from './boiler-parts.service';\nimport { AuthenticatedGuard } from '../auth/authenticated.guard';\nimport { ApiOkResponse, ApiBody } from '@nestjs/swagger';\nimport {\n  PaginateAndFilterResponse,\n  FindOneResponse,\n  GetBestsellersResponse,", "  FindOneResponse,\n  GetBestsellersResponse,\n  GetNewResponse,\n  SearchResponse,\n  SearchRequest,\n  GetByNameResponse,\n  GetByNameRequest,\n} from './types';\n\n@Controller('boiler-parts')\nexport class BoilerPartsController {\n  constructor(private readonly boilerPartsService: BoilerPartsService) {}\n\n  @ApiOkResponse({ type: PaginateAndFilterResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get()\n  paginateAndFilter(@Query() query) {\n    return this.boilerPartsService.paginateAndFilter(query);\n  }\n\n  @ApiOkResponse({ type: FindOneResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get('find/:id')\n  getOne(@Param('id') id: string) {\n    return this.boilerPartsService.findOne(id);\n  }\n\n  @ApiOkResponse({ type: GetBestsellersResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get('bestsellers')\n  getBestseller() {\n    return this.boilerPartsService.bestsellers();\n  }\n\n  @ApiOkResponse({ type: GetNewResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get('new')\n  getNew() {\n    return this.boilerPartsService.new();\n  }\n\n  @ApiOkResponse({ type: SearchResponse })\n  @ApiBody({ type: SearchRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Post('search')\n  search(@Body() { search }: { search: string }) {\n    return this.boilerPartsService.searchByString(search);\n  }\n\n  @ApiOkResponse({ type: GetByNameResponse })\n  @ApiBody({ type: GetByNameRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Post('name')\n  getByName(@Body() { name }: { name: string }) {\n    return this.boilerPartsService.findOneByName(name);\n  }\n}\n", "\n@Controller('boiler-parts')\nexport class BoilerPartsController {\n  constructor(private readonly boilerPartsService: BoilerPartsService) {}\n\n  @ApiOkResponse({ type: PaginateAndFilterResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get()\n  paginateAndFilter(@Query() query) {\n    return this.boilerPartsService.paginateAndFilter(query);\n  }\n\n  @ApiOkResponse({ type: FindOneResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get('find/:id')\n  getOne(@Param('id') id: string) {\n    return this.boilerPartsService.findOne(id);\n  }\n\n  @ApiOkResponse({ type: GetBestsellersResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get('bestsellers')\n  getBestseller() {\n    return this.boilerPartsService.bestsellers();\n  }\n\n  @ApiOkResponse({ type: GetNewResponse })\n  @UseGuards(AuthenticatedGuard)\n  @Get('new')\n  getNew() {\n    return this.boilerPartsService.new();\n  }\n\n  @ApiOkResponse({ type: SearchResponse })\n  @ApiBody({ type: SearchRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Post('search')\n  search(@Body() { search }: { search: string }) {\n    return this.boilerPartsService.searchByString(search);\n  }\n\n  @ApiOkResponse({ type: GetByNameResponse })\n  @ApiBody({ type: GetByNameRequest })\n  @UseGuards(AuthenticatedGuard)\n  @Post('name')\n  getByName(@Body() { name }: { name: string }) {\n    return this.boilerPartsService.findOneByName(name);\n  }\n}\n"]}
{"filename": "src/boiler-parts/boiler-parts.model.ts", "chunked_list": ["import { Table, Model, Column } from 'sequelize-typescript';\n\n@Table\nexport class BoilerParts extends Model {\n  @Column\n  boiler_manufacturer: string;\n\n  @Column({ defaultValue: 0 })\n  price: number;\n\n  @Column\n  parts_manufacturer: string;\n\n  @Column\n  vendor_code: string;\n\n  @Column\n  name: string;\n\n  @Column\n  description: string;\n\n  @Column\n  images: string;\n\n  @Column({ defaultValue: 0 })\n  in_stock: number;\n\n  @Column({ defaultValue: false })\n  bestseller: boolean;\n\n  @Column({ defaultValue: false })\n  new: boolean;\n\n  @Column\n  popularity: number;\n\n  @Column\n  compatibility: string;\n}\n"]}
{"filename": "src/boiler-parts/boiler-parts.service.ts", "chunked_list": ["import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Op } from 'sequelize';\nimport { BoilerParts } from './boiler-parts.model';\nimport { IBoilerPartsFilter, IBoilerPartsQuery } from './types';\n\n@Injectable()\nexport class BoilerPartsService {\n  constructor(\n    @InjectModel(BoilerParts)\n    private boilerPartsModel: typeof BoilerParts,\n  ) {}\n\n  async paginateAndFilter(\n    query: IBoilerPartsQuery,\n  ): Promise<{ count: number; rows: BoilerParts[] }> {\n    const limit = +query.limit;\n    const offset = +query.offset * 20;\n    const filter = {} as Partial<IBoilerPartsFilter>;\n", "    if (query.priceFrom && query.priceTo) {\n      filter.price = {\n        [Op.between]: [+query.priceFrom, +query.priceTo],\n      };\n    }\n\n    if (query.boiler) {\n      filter.boiler_manufacturer = JSON.parse(decodeURIComponent(query.boiler));\n    }\n\n    if (query.parts) {\n      filter.parts_manufacturer = JSON.parse(decodeURIComponent(query.parts));\n    }\n\n    return this.boilerPartsModel.findAndCountAll({\n      limit,\n      offset,\n      where: filter,\n    });\n  }\n\n  async bestsellers(): Promise<{ count: number; rows: BoilerParts[] }> {\n    return this.boilerPartsModel.findAndCountAll({\n      where: { bestseller: true },\n    });\n  }\n\n  async new(): Promise<{ count: number; rows: BoilerParts[] }> {\n    return this.boilerPartsModel.findAndCountAll({\n      where: { new: true },\n    });\n  }\n\n  async findOne(id: number | string): Promise<BoilerParts> {\n    return this.boilerPartsModel.findOne({\n      where: { id },\n    });\n  }\n\n  async findOneByName(name: string): Promise<BoilerParts> {\n    return this.boilerPartsModel.findOne({\n      where: { name },\n    });\n  }\n\n  async searchByString(\n    str: string,\n  ): Promise<{ count: number; rows: BoilerParts[] }> {\n    return this.boilerPartsModel.findAndCountAll({\n      limit: 20,\n      where: { name: { [Op.like]: `%${str}%` } },\n    });\n  }\n}\n", "    if (query.parts) {\n      filter.parts_manufacturer = JSON.parse(decodeURIComponent(query.parts));\n    }\n\n    return this.boilerPartsModel.findAndCountAll({\n      limit,\n      offset,\n      where: filter,\n    });\n  }\n\n  async bestsellers(): Promise<{ count: number; rows: BoilerParts[] }> {\n    return this.boilerPartsModel.findAndCountAll({\n      where: { bestseller: true },\n    });\n  }\n\n  async new(): Promise<{ count: number; rows: BoilerParts[] }> {\n    return this.boilerPartsModel.findAndCountAll({\n      where: { new: true },\n    });\n  }\n\n  async findOne(id: number | string): Promise<BoilerParts> {\n    return this.boilerPartsModel.findOne({\n      where: { id },\n    });\n  }\n\n  async findOneByName(name: string): Promise<BoilerParts> {\n    return this.boilerPartsModel.findOne({\n      where: { name },\n    });\n  }\n\n  async searchByString(\n    str: string,\n  ): Promise<{ count: number; rows: BoilerParts[] }> {\n    return this.boilerPartsModel.findAndCountAll({\n      limit: 20,\n      where: { name: { [Op.like]: `%${str}%` } },\n    });\n  }\n}\n"]}
{"filename": "src/boiler-parts/boiler-parts.module.ts", "chunked_list": ["import { Module } from '@nestjs/common';\nimport { BoilerPartsController } from './boiler-parts.controller';\nimport { BoilerPartsService } from './boiler-parts.service';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport { BoilerParts } from './boiler-parts.model';\n\n@Module({\n  imports: [SequelizeModule.forFeature([BoilerParts])],\n  controllers: [BoilerPartsController],\n  providers: [BoilerPartsService],", "  controllers: [BoilerPartsController],\n  providers: [BoilerPartsService],\n  exports: [BoilerPartsService],\n})\nexport class BoilerPartsModule {}\n"]}
{"filename": "src/boiler-parts/types/index.ts", "chunked_list": ["import { faker } from '@faker-js/faker';\nimport { Op } from 'sequelize';\nimport { ApiProperty } from '@nestjs/swagger';\n\nclass BoilerParts {\n  @ApiProperty({ example: 1 })\n  id: number;\n\n  @ApiProperty({ example: faker.lorem.sentence(2) })\n  boiler_manufacturer: string;\n\n  @ApiProperty({ example: 12345 })\n  price: string;\n\n  @ApiProperty({ example: faker.lorem.sentence(2) })\n  parts_manufacturer: string;\n\n  @ApiProperty({ example: faker.internet.password() })\n  vendor_code: string;\n\n  @ApiProperty({ example: faker.lorem.word() })\n  name: string;\n\n  @ApiProperty({ example: faker.lorem.sentence() })\n  description: string;\n\n  @ApiProperty({ example: faker.lorem.sentence() })\n  compatibility: string;\n\n  @ApiProperty({ example: faker.image.city() })\n  images: string;\n\n  @ApiProperty({ example: 5 })\n  in_stock: number;\n\n  @ApiProperty({ example: true })\n  bestseller: boolean;\n\n  @ApiProperty({ example: false })\n  new: boolean;\n\n  @ApiProperty({ example: 123 })\n  popularity: number;\n\n  @ApiProperty({ example: '2023-01-31T19:46:45.000Z' })\n  createdAt: string;\n\n  @ApiProperty({ example: '2023-01-31T19:46:45.000Z' })\n  updatedAt: string;\n}\n", "export class PaginateAndFilterResponse {\n  @ApiProperty({ example: 10 })\n  count: number;\n\n  @ApiProperty({ type: BoilerParts, isArray: true })\n  rows: BoilerParts;\n}\n\nexport class Bestsellers extends BoilerParts {\n  @ApiProperty({ example: true })\n  bestseller: boolean;\n}\n", "export class Bestsellers extends BoilerParts {\n  @ApiProperty({ example: true })\n  bestseller: boolean;\n}\n\nexport class GetBestsellersResponse extends PaginateAndFilterResponse {\n  @ApiProperty({ example: 10 })\n  count: number;\n\n  @ApiProperty({ type: BoilerParts, isArray: true })\n  rows: Bestsellers;\n}\n", "export class NewParts extends BoilerParts {\n  @ApiProperty({ example: true })\n  new: boolean;\n}\n\nexport class GetNewResponse extends PaginateAndFilterResponse {\n  @ApiProperty({ example: 10 })\n  count: number;\n\n  @ApiProperty({ type: BoilerParts, isArray: true })\n  rows: NewParts;\n}\n", "export class SearchByLetterResponse extends BoilerParts {\n  @ApiProperty({ example: 'Provident incidunt.' })\n  name: string;\n}\n\nexport class SearchResponse extends PaginateAndFilterResponse {\n  @ApiProperty({ type: SearchByLetterResponse, isArray: true })\n  rows: SearchByLetterResponse;\n}\n\nexport class SearchRequest {\n  @ApiProperty({ example: 'r' })\n  search: string;\n}\n", "export class SearchRequest {\n  @ApiProperty({ example: 'r' })\n  search: string;\n}\n\nexport class GetByNameResponse extends BoilerParts {\n  @ApiProperty({ example: 'Provident incidunt.' })\n  name: string;\n}\n\nexport class GetByNameRequest {\n  @ApiProperty({ example: 'Provident incidunt.' })\n  name: string;\n}\n", "export class GetByNameRequest {\n  @ApiProperty({ example: 'Provident incidunt.' })\n  name: string;\n}\n\nexport class FindOneResponse extends BoilerParts {}\n\nexport interface IBoilerPartsQuery {\n  limit: string;\n  offset: string;\n  boiler: string | undefined;\n  parts: string | undefined;\n  priceFrom: string | undefined;\n  priceTo: string | undefined;\n}\n", "export interface IBoilerPartsFilter {\n  boiler_manufacturer: string | undefined;\n  parts_manufacturer: string | undefined;\n  price: { [Op.between]: number[] };\n}\n"]}
