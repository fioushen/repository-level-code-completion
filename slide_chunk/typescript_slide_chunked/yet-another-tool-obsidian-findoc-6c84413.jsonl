{"filename": "src/chart.ts", "chunked_list": ["export function chartLine(\n\tdata: IDataset,\n\ttype: \"money\" | \"percent\",\n\tbeginAtZero = true\n): IChartLine {\n\treturn {\n\t\ttype: \"line\",\n\t\tdata,\n\t\toptions: {\n\t\t\tinteraction: {\n\t\t\t\tintersect: false,\n\t\t\t},\n\t\t\tscales: {\n\t\t\t\ty: {\n\t\t\t\t\tbeginAtZero,\n\t\t\t\t},\n\t\t\t},\n\t\t\tplugins: {\n\t\t\t\ttooltip: {\n\t\t\t\t\tcallbacks: {\n\t\t\t\t\t\tlabel: function (context: ITooltip) {\n\t\t\t\t\t\t\tlet previousValue: number = null;\n\t\t\t\t\t\t\tlet firstValue: number = null;\n\t\t\t\t\t\t\tlet change = 0;\n\t\t\t\t\t\t\tlet symbol: \"+\" | \"-\" = \"+\";\n\t\t\t\t\t\t\tlet label = context.dataset.label || \"\";\n", "\t\t\t\t\t\t\tif (label) {\n\t\t\t\t\t\t\t\tlabel += \": \";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (context.parsed.y !== null) {\n\t\t\t\t\t\t\t\tif (type === \"money\")\n\t\t\t\t\t\t\t\t\tlabel += new Intl.NumberFormat(\"en-US\", {\n\t\t\t\t\t\t\t\t\t\tstyle: \"currency\",\n\t\t\t\t\t\t\t\t\t\tcurrency: \"USD\",\n\t\t\t\t\t\t\t\t\t}).format(context.parsed.y);\n\t\t\t\t\t\t\t\telse if (type === \"percent\")\n\t\t\t\t\t\t\t\t\tlabel += `${context.parsed.y}%`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst currentValue: number = context.parsed.y;\n\n\t\t\t\t\t\t\t// NOTE: Skip", "\t\t\t\t\t\t\t\telse if (type === \"percent\")\n\t\t\t\t\t\t\t\t\tlabel += `${context.parsed.y}%`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst currentValue: number = context.parsed.y;\n\n\t\t\t\t\t\t\t// NOTE: Skip\n\t\t\t\t\t\t\tif (isNaN(currentValue)) return label;\n\n\t\t\t\t\t\t\t// NOTE: Item index between 1 and the last one\n\t\t\t\t\t\t\tif (context.dataIndex - 1 >= 0) {\n\t\t\t\t\t\t\t\t// NOTE: Get Value from the previous point\n\t\t\t\t\t\t\t\tpreviousValue =\n\t\t\t\t\t\t\t\t\tcontext.dataset.data[context.dataIndex - 1];\n\t\t\t\t\t\t\t\t// NOTE: Skip", "\t\t\t\t\t\t\tif (context.dataIndex - 1 >= 0) {\n\t\t\t\t\t\t\t\t// NOTE: Get Value from the previous point\n\t\t\t\t\t\t\t\tpreviousValue =\n\t\t\t\t\t\t\t\t\tcontext.dataset.data[context.dataIndex - 1];\n\t\t\t\t\t\t\t\t// NOTE: Skip\n\t\t\t\t\t\t\t\tif (previousValue === 0 || isNaN(previousValue))\n\t\t\t\t\t\t\t\t\treturn label;\n\t\t\t\t\t\t\t\t// NOTE: Positive Change\n\t\t\t\t\t\t\t\tif (currentValue > previousValue) {\n\t\t\t\t\t\t\t\t\tsymbol = \"+\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((currentValue - previousValue) /\n\t\t\t\t\t\t\t\t\t\t\tpreviousValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// NOTE: Negative Change\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tsymbol = \"-\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((previousValue - currentValue) /\n\t\t\t\t\t\t\t\t\t\t\tpreviousValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// NOTE: Append Label\n\t\t\t\t\t\t\t\tlabel += ` => ${\n\t\t\t\t\t\t\t\t\tchange !== 0 ? symbol : \"\"\n\t\t\t\t\t\t\t\t}${change.toFixed(2)}%`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// NOTE: Last item in the graph", "\t\t\t\t\t\t\t\tif (currentValue > previousValue) {\n\t\t\t\t\t\t\t\t\tsymbol = \"+\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((currentValue - previousValue) /\n\t\t\t\t\t\t\t\t\t\t\tpreviousValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// NOTE: Negative Change\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tsymbol = \"-\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((previousValue - currentValue) /\n\t\t\t\t\t\t\t\t\t\t\tpreviousValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// NOTE: Append Label\n\t\t\t\t\t\t\t\tlabel += ` => ${\n\t\t\t\t\t\t\t\t\tchange !== 0 ? symbol : \"\"\n\t\t\t\t\t\t\t\t}${change.toFixed(2)}%`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// NOTE: Last item in the graph", "\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tcontext.dataIndex ===\n\t\t\t\t\t\t\t\tcontext.dataset.data.length - 1\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tfirstValue = context.dataset.data[0];\n\t\t\t\t\t\t\t\t// NOTE: SKIP\n\t\t\t\t\t\t\t\tif (firstValue === 0 || isNaN(firstValue))\n\t\t\t\t\t\t\t\t\treturn label;\n\t\t\t\t\t\t\t\t// NOTE: Positive Change\n\t\t\t\t\t\t\t\tif (currentValue > firstValue) {\n\t\t\t\t\t\t\t\t\tsymbol = \"+\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((currentValue - firstValue) /\n\t\t\t\t\t\t\t\t\t\t\tfirstValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// NOTE: Negative Change\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tsymbol = \"-\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((firstValue - currentValue) /\n\t\t\t\t\t\t\t\t\t\t\tfirstValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// NOTE: Append Label\n\t\t\t\t\t\t\t\tlabel += ` > ${\n\t\t\t\t\t\t\t\t\tchange !== 0 ? symbol : \"\"\n\t\t\t\t\t\t\t\t}${change.toFixed(2)}%`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn label;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n", "\t\t\t\t\t\t\t\tif (currentValue > firstValue) {\n\t\t\t\t\t\t\t\t\tsymbol = \"+\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((currentValue - firstValue) /\n\t\t\t\t\t\t\t\t\t\t\tfirstValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// NOTE: Negative Change\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tsymbol = \"-\";\n\t\t\t\t\t\t\t\t\tchange =\n\t\t\t\t\t\t\t\t\t\t((firstValue - currentValue) /\n\t\t\t\t\t\t\t\t\t\t\tfirstValue) *\n\t\t\t\t\t\t\t\t\t\t100;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// NOTE: Append Label\n\t\t\t\t\t\t\t\tlabel += ` > ${\n\t\t\t\t\t\t\t\t\tchange !== 0 ? symbol : \"\"\n\t\t\t\t\t\t\t\t}${change.toFixed(2)}%`;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn label;\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n"]}
{"filename": "src/defaults.ts", "chunked_list": ["export const COLORS: string[] = [\n\t\"#1ac18f\",\n\t\"#EAE2B7\",\n\t\"#8ecae6\",\n\t\"#219ebc\",\n\t\"#026597\",\n\t\"#be37a5\",\n\t\"#fb8500\",\n\t\"#ffbe0b\",\n\t\"#fff5b8\",", "\t\"#ffbe0b\",\n\t\"#fff5b8\",\n\t\"#ff006e\",\n\t\"#8338ec\",\n\t\"#3a86ff\",\n\t\"#390099\",\n\t\"#9e0059\",\n\t\"#8c3b56\",\n\t\"#ff5400\",\n\t\"#ffbd00\",", "\t\"#ff5400\",\n\t\"#ffbd00\",\n\t\"#619b8a\",\n\t\"#7678ed\",\n\t\"#c2e83b\",\n\t\"#33658a\",\n\t\"#ce6a85\",\n\t\"#985277\",\n\t\"#5c374c\",\n\t\"#ba66ff\",", "\t\"#5c374c\",\n\t\"#ba66ff\",\n\t\"#2176ff\",\n\t\"#33a1fd\",\n\t\"#7cd671\",\n\t\"#22def7\",\n];\n\nexport const DEFAULT_SETTINGS: IPluginSettings = {\n\tmodels: {", "export const DEFAULT_SETTINGS: IPluginSettings = {\n\tmodels: {\n\t\texpenses: {\n\t\t\tdataSource: \"splitDailyDates\",\n\t\t\ttypes: [\"Income\", \"House Expenses\", \"Expenses\"],\n\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"money\",\n\t\t},\n\t\texpensesMonthly: {", "\t\t},\n\t\texpensesMonthly: {\n\t\t\tdataSource: \"splitByYearMonth\",\n\t\t\ttypes: [\"Income\", \"House Expenses\", \"Expenses\"],\n\t\t\toutput: \"generateSumDataSet\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"money\",\n\t\t},\n\t\tportfolio: {\n\t\t\tdataSource: \"splitDailyDates\",", "\t\tportfolio: {\n\t\t\tdataSource: \"splitDailyDates\",\n\t\t\ttypes: [\"Portfolio\"],\n\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: false,\n\t\t\ttype: \"money\",\n\t\t},\n\t\tincomeYearly: {\n\t\t\tdataSource: \"splitByYear\",\n\t\t\ttypes: [\"Income\"],", "\t\t\tdataSource: \"splitByYear\",\n\t\t\ttypes: [\"Income\"],\n\t\t\toutput: \"generateSumDataSet\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"money\",\n\t\t},\n\t\tincome: {\n\t\t\tdataSource: \"splitDailyDates\",\n\t\t\ttypes: [\"Income\"],\n\t\t\toutput: \"generateDailyDataSet\",", "\t\t\ttypes: [\"Income\"],\n\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"money\",\n\t\t},\n\t\tall: {\n\t\t\tdataSource: \"splitDailyDates\",\n\t\t\ttypes: [\n\t\t\t\t\"Portfolio\",\n\t\t\t\t\"Income\",", "\t\t\t\t\"Portfolio\",\n\t\t\t\t\"Income\",\n\t\t\t\t\"Mortgage\",\n\t\t\t\t\"Mortgage Rate\",\n\t\t\t\t\"Cotisation\",\n\t\t\t\t\"Dividend\",\n\t\t\t\t\"House Expenses\",\n\t\t\t\t\"Expenses\",\n\t\t\t],\n\t\t\toutput: \"generateDailyDataSet\",", "\t\t\t],\n\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"money\",\n\t\t},\n\t\tmortgage: {\n\t\t\tdataSource: \"splitDailyDates\",\n\t\t\ttypes: [\"Mortgage\"],\n\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: false,", "\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: false,\n\t\t\ttype: \"money\",\n\t\t},\n\t\tmortgageRate: {\n\t\t\tdataSource: \"splitDailyDates\",\n\t\t\ttypes: [\"Mortgage Rate\"],\n\t\t\toutput: \"generateDailyDataSet\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"percent\",", "\t\t\tbeginAtZero: true,\n\t\t\ttype: \"percent\",\n\t\t},\n\t\tdividend: {\n\t\t\tdataSource: \"splitByYearMonth\",\n\t\t\ttypes: [\"Dividend\", \"Cotisation\"],\n\t\t\toutput: \"generateSumDataSetPerTypes\",\n\t\t\tbeginAtZero: true,\n\t\t\ttype: \"money\",\n\t\t},", "\t\t\ttype: \"money\",\n\t\t},\n\t},\n\tcolors: COLORS,\n\tdebounce: \"1000\",\n\tcsvSeparator: \",\",\n};\n"]}
{"filename": "src/types.d.ts", "chunked_list": ["interface IInput {\n\ttype: string;\n\tid: string;\n\tvalue: number;\n\ttimestamp: Date;\n\textra: string;\n}\n\ninterface IDataset {\n\tlabels: string[];\n\tdatasets: {\n\t\tlabel: string;\n\t\tborderColor: string;\n\t\tfill: boolean;\n\t\ttension: number;\n\t\tdata: number[];\n\t\tsegment: {\n\t\t\tborderColor?: (ctx: IContext) => string | Array<number> | undefined;\n\t\t\tborderDash: (ctx: IContext) => string | Array<number> | undefined;\n\t\t};\n\t}[];\n}\n", "interface IDataset {\n\tlabels: string[];\n\tdatasets: {\n\t\tlabel: string;\n\t\tborderColor: string;\n\t\tfill: boolean;\n\t\ttension: number;\n\t\tdata: number[];\n\t\tsegment: {\n\t\t\tborderColor?: (ctx: IContext) => string | Array<number> | undefined;\n\t\t\tborderDash: (ctx: IContext) => string | Array<number> | undefined;\n\t\t};\n\t}[];\n}\n", "interface ITooltip {\n\tdataset: {\n\t\tlabel: string;\n\t\tdata: number[];\n\t};\n\tparsed: {\n\t\ty: number;\n\t};\n\tdataIndex: number;\n}\n", "interface IPluginSettings {\n\tmodels: {\n\t\t[key: string]: IModel;\n\t};\n\tcolors: string[];\n\tdebounce: string;\n\tcsvSeparator: string;\n}\n\ninterface IModel {\n\tdataSource: string;\n\ttypes: string[];\n\toutput: string;\n\tbeginAtZero: boolean;\n\ttype: \"money\" | \"percent\";\n}\n", "interface IModel {\n\tdataSource: string;\n\ttypes: string[];\n\toutput: string;\n\tbeginAtZero: boolean;\n\ttype: \"money\" | \"percent\";\n}\n\ninterface IEvent {\n\ttarget: {\n\t\tinnerHTML: string;\n\t};\n}\n", "interface IEvent {\n\ttarget: {\n\t\tinnerHTML: string;\n\t};\n}\n\ninterface IChartLine {\n\ttype: \"line\";\n\tdata: IDataset;\n\toptions: {\n\t\tinteraction: {\n\t\t\tintersect: boolean;\n\t\t};\n\t\tscales: {\n\t\t\ty: {\n\t\t\t\tbeginAtZero: boolean;\n\t\t\t};\n\t\t};\n\t\tplugins: {\n\t\t\ttooltip: {\n\t\t\t\tcallbacks: {\n\t\t\t\t\tlabel: (context: ITooltip) => string;\n\t\t\t\t};\n\t\t\t};\n\t\t};\n\t};\n}\n", "interface IContext {\n\tp0: { skip: boolean };\n\tp1: { skip: boolean };\n}\n"]}
{"filename": "src/ChartRenderer.ts", "chunked_list": ["import { MarkdownRenderChild } from \"obsidian\";\nimport Chart, { ChartConfiguration } from \"chart.js/auto\";\nimport { idToText } from \"utils\";\n\nexport default class ChartRenderer extends MarkdownRenderChild {\n\tprivate data: IChartLine;\n\tprivate modelInfo: IModel;\n\tprivate model: string;\n\tprivate canvases: { [key: string]: HTMLCanvasElement } = {};\n\n\tconstructor(\n\t\tmodelInfo: IModel,\n\t\tdata: IChartLine,\n\t\tmodel: string,\n\t\tel: HTMLElement\n\t) {\n\t\tsuper(el);\n\t\tthis.modelInfo = modelInfo;\n\t\tthis.data = data;\n\t\tthis.model = model;\n\t}\n\n\tasync onload() {", "\t\tif (!this.canvases[this.model]) {\n\t\t\tthis.canvases[this.model] = document.createElement(\"canvas\");\n\n\t\t\t// Chart\n\t\t\tnew Chart(\n\t\t\t\tthis.canvases[this.model].getContext(\"2d\"),\n\t\t\t\tthis.data as ChartConfiguration\n\t\t\t);\n\t\t\tthis.containerEl.createEl(\"h3\", { text: this.model });\n\n\t\t\tthis.containerEl.append(this.canvases[this.model]);\n\t\t\tthis.containerEl.createEl(\"p\", {\n\t\t\t\ttext: `Data Source: ${idToText(this.modelInfo.dataSource)}`,\n\t\t\t});\n\t\t\tthis.containerEl.createEl(\"p\", {\n\t\t\t\ttext: `Output: ${idToText(this.modelInfo.output)}`,\n\t\t\t});\n\t\t\tthis.containerEl.createEl(\"p\", {\n\t\t\t\ttext: `Found: ${this.data.data.datasets.reduce(\n\t\t\t\t\t(a, b) => (a += b.data.length),\n\t\t\t\t\t0\n\t\t\t\t)} data point(s)`,\n\t\t\t});\n\t\t} else {\n\t\t\tconsole.debug(\"Canvas already loaded\");\n\t\t}\n\t}\n}\n"]}
{"filename": "src/view.ts", "chunked_list": ["import FinDocPlugin from \"main\";\nimport { Notice, TextFileView, WorkspaceLeaf, debounce } from \"obsidian\";\nimport { getToday } from \"utils\";\nimport { types } from \"./constants\";\n\nexport const VIEW_TYPE_CSV = \"csv-view\";\n\nexport class CSVView extends TextFileView {\n\tplugin: FinDocPlugin;\n\ttableData: string[];\n\ttableHeader: string;\n\tdiv: HTMLElement;\n\tparent: HTMLElement;\n\n\tconstructor(leaf: WorkspaceLeaf, plugin: FinDocPlugin) {\n\t\tsuper(leaf);\n\t\tthis.plugin = plugin;\n\t}\n\n\tgetViewData() {\n\t\treturn this.tableData.join(\"\\n\");\n\t}\n\n\tdropdown(selected = \"\"): HTMLElement {\n\t\tconst id = new Date().getTime().toString();\n\t\tconst dropdown = this.contentEl.createEl(\"select\");\n\t\tdropdown.id = id;\n\t\tdropdown.setAttribute(\"value\", selected);\n\t\tdropdown.onchange = () => {\n\t\t\tdropdown.setAttribute(\"value\", dropdown.value);\n\t\t};\n\n\t\ttypes.forEach((option: string) => {\n\t\t\tconst opt = this.contentEl.createEl(\"option\");\n\t\t\topt.value = option;\n\t\t\topt.id = id + option.replace(\" \", \"_\");\n\t\t\topt.innerText = option;", "\t\t\tif (option === selected) opt.selected = true;\n\t\t\tdropdown.appendChild(opt);\n\t\t});\n\n\t\treturn dropdown;\n\t}\n\n\tcreateTable(data: string[]) {\n\t\tthis.div = this.contentEl.createDiv();\n\t\tconst table = this.contentEl.createEl(\"table\");\n\n\t\t//\n\t\t// Table Header\n\t\t//\n\t\tthis.tableHeader = data[0];\n\t\tconst headers = this.tableHeader.split(\n\t\t\tthis.plugin.settings.csvSeparator\n\t\t);\n\t\tconst trHeaders = this.contentEl.createEl(\"tr\");\n\t\theaders.forEach((header) => {\n\t\t\tconst th = this.contentEl.createEl(\"th\");\n\t\t\tth.innerText = header;\n\t\t\ttrHeaders.appendChild(th);\n\t\t});\n\t\tthis.div.appendChild(trHeaders);\n\n\t\t//\n\t\t// Table Content\n\t\t//\n\t\tdata.slice(1).forEach((line) => {\n\t\t\tconst trContent = this.contentEl.createEl(\"tr\");\n\t\t\tconst lineData = line.split(this.plugin.settings.csvSeparator);\n\t\t\tlineData.push(\"ACTION\");\n\t\t\tlineData.forEach((el, idx) => {\n\t\t\t\tconst td = this.contentEl.createEl(\"td\");\n\t\t\t\ttd.id = `data_${idx}`;\n\t\t\t\ttd.classList.add(\"findoc-line-data\");", "\t\t\t\tif (idx === 0) {\n\t\t\t\t\ttd.appendChild(this.dropdown(el));\n\t\t\t\t} else if (idx === lineData.length - 1) {\n\t\t\t\t\ttd.appendChild(this.createBtnRemoveLine(trContent));\n\t\t\t\t} else {\n\t\t\t\t\ttd.innerText = el;\n\t\t\t\t\ttd.contentEditable = \"true\";\n\t\t\t\t}\n\n\t\t\t\ttrContent.appendChild(td);\n\t\t\t});\n\t\t\tthis.div.appendChild(trContent);\n\t\t});\n\n\t\ttable.appendChild(this.div);\n\t\tthis.parent.appendChild(table);\n\n\t\tthis.createBtnAddLine();\n\t}\n\n\tcreateBtnRemoveLine(el: HTMLElement): HTMLElement {\n\t\tconst btn = this.contentEl.createEl(\"button\");\n\n\t\tbtn.classList.add(\"findoc-btn-margin-top\");\n\t\tbtn.id = \"deleteRow\";\n\t\tbtn.innerText = \"Delete\";\n\t\tbtn.onClickEvent(() => {\n\t\t\tel.empty();\n\t\t\tthis.saveData();\n\t\t});\n\n\t\treturn btn;\n\t}\n\n\tcreateBtnAddLine() {\n\t\tconst btn = this.contentEl.createEl(\"button\");\n\t\tbtn.classList.add(\"findoc-btn-margin-top\");\n\t\tbtn.id = \"newRow\";\n\t\tbtn.innerText = \"Add New Row\";\n\t\tbtn.onClickEvent(() => {\n\t\t\tconst trContent = this.contentEl.createEl(\"tr\");\n\t\t\tconst lineData = [\n\t\t\t\ttypes[0],\n\t\t\t\t\"ID\",\n\t\t\t\t\"0\",\n\t\t\t\tgetToday(),\n\t\t\t\t\"EXTRA\",\n\t\t\t\t\"ACTION\",\n\t\t\t];\n\t\t\tlineData.forEach((el, idx) => {\n\t\t\t\tconst td = this.contentEl.createEl(\"td\");\n\t\t\t\ttd.classList.add(\"findoc-line-data\");", "\t\t\t\tif (idx === 0) {\n\t\t\t\t\ttd.appendChild(this.dropdown(el));\n\t\t\t\t} else if (idx === lineData.length - 1) {\n\t\t\t\t\ttd.appendChild(this.createBtnRemoveLine(trContent));\n\t\t\t\t} else {\n\t\t\t\t\ttd.innerText = el;\n\t\t\t\t\ttd.contentEditable = \"true\";\n\t\t\t\t}\n\t\t\t\ttrContent.appendChild(td);\n\t\t\t});\n\t\t\tthis.div.appendChild(trContent);\n\t\t});\n\t\tthis.parent.appendChild(btn);\n\t}\n\n\tsetViewData(data: string, clear: boolean) {", "\t\tif (clear) this.clear();\n\t\tthis.tableData = data.split(\"\\n\");\n\t\tthis.parent = this.contentEl.createDiv();\n\t\tthis.createTable(this.tableData);\n\n\t\t// Margin to avoid having the iphone keyboard hide last lines\n\t\tthis.parent.classList.add(\"findoc-csv-parent\");\n\t\tthis.refresh();\n\t}\n\n\trefresh() {\n\t\tthis.div.oninput = debounce(() => {\n\t\t\tthis.saveData();\n\t\t}, parseInt(this.plugin.settings.debounce) || 1000);\n\t}\n\n\tsaveData() {\n\t\tconst rows = this.div.innerHTML.split(new RegExp(/<tr.*?>/));\n\t\tthis.tableData = rows\n\t\t\t.map((column) =>\n\t\t\t\tcolumn\n\t\t\t\t\t.split(new RegExp(/<td.*?>/))\n\t\t\t\t\t.slice(1)\n\t\t\t\t\t.filter((i) => !new RegExp(/<button.*?>.*<.*?>/).test(i))\n\t\t\t\t\t.map((i, idx) => {", "\t\t\t\t\t\tif (idx === 0) {\n\t\t\t\t\t\t\t// Select (Dropdown)\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\ti.split('value=\"')[1].split('\"')[0] || types[0]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Input field\n\t\t\t\t\t\t\treturn i\n\t\t\t\t\t\t\t\t.replaceAll(/<.*?>/g, \"\")\n\t\t\t\t\t\t\t\t.replaceAll(\n\t\t\t\t\t\t\t\t\t'&lt;br class=\"Apple-interchange-newline\"&gt',\n\t\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.join(this.plugin.settings.csvSeparator)\n\t\t\t)\n\t\t\t// Clear empty lines\n\t\t\t.filter((r) => r.length !== 0);\n\n\t\tthis.tableData = [this.tableHeader, ...this.tableData];\n\t\tthis.requestSave();\n\n\t\t// TODO: Replace this timeout with the proper and recommended way.\n\t\tnew Notice(\"Saving in progress...\", 2005);\n\t\tdebounce(() => {\n\t\t\tnew Notice(\"File Saved !\", 600);\n\t\t}, 2005);\n\t}\n\n\tclear() {\n\t\tthis.tableData = [];", "\t\tif (this.div) this.div.empty();\n\t\tif (this.parent) this.parent.empty();\n\t\tthis.contentEl.empty();\n\t}\n\n\tgetViewType() {\n\t\treturn VIEW_TYPE_CSV;\n\t}\n}\n"]}
{"filename": "src/main.ts", "chunked_list": ["import {\n\tMarkdownPostProcessorContext,\n\tNotice,\n\tPlugin,\n\tWorkspaceLeaf,\n\tnormalizePath,\n\tparseYaml,\n} from \"obsidian\";\n\nimport { CSVView, VIEW_TYPE_CSV } from \"./view\";", "\nimport { CSVView, VIEW_TYPE_CSV } from \"./view\";\nimport processing from \"./processing\";\nimport { DEFAULT_SETTINGS } from \"./defaults\";\nimport SettingsTab from \"./SettingsTab\";\nimport ChartRenderer from \"./ChartRenderer\";\n\nexport default class FinDocPlugin extends Plugin {\n\tsettings: IPluginSettings;\n\n\tasync loadSettings() {\n\t\tthis.settings = Object.assign(\n\t\t\t{},\n\t\t\tDEFAULT_SETTINGS,\n\t\t\tawait this.loadData()\n\t\t);\n\t}\n\n\tasync saveSettings() {\n\t\tawait this.saveData(this.settings);\n\t}\n\n\tasync onload() {", "\t\ttry {\n\t\t\tawait this.loadSettings();\n\t\t\tthis.addSettingTab(new SettingsTab(this.app, this));\n\n\t\t\tconst { vault } = this.app;\n\n\t\t\tthis.registerView(\n\t\t\t\tVIEW_TYPE_CSV,\n\t\t\t\t(leaf: WorkspaceLeaf) => new CSVView(leaf, this)\n\t\t\t);\n\n\t\t\tthis.registerExtensions([\"csv\"], VIEW_TYPE_CSV);\n\n\t\t\tthis.registerMarkdownCodeBlockProcessor(\n\t\t\t\t\"findoc\",\n\t\t\t\tasync (\n\t\t\t\t\tsrc: string,\n\t\t\t\t\tel: HTMLElement,\n\t\t\t\t\tctx: MarkdownPostProcessorContext\n\t\t\t\t) => {", "\t\t\t\t\ttry {\n\t\t\t\t\t\tconst activeFile = this.app.workspace.getActiveFile();\n\t\t\t\t\t\tif (!activeFile) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst content = parseYaml(src);\n\t\t\t\t\t\tif (!content || !content.filename) {\n\t\t\t\t\t\t\tnew Notice(\"No Content or No Filename\", 10000);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n", "\t\t\t\t\t\tif (content.filename) {\n\t\t\t\t\t\t\tconst filename = normalizePath(\n\t\t\t\t\t\t\t\t`${activeFile.parent.path}/${content.filename}`\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tconst data = await vault.adapter.read(filename);\n\t\t\t\t\t\t\tconst chartData = processing(\n\t\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t\tcontent.model,\n\t\t\t\t\t\t\t\tthis.settings.models,\n\t\t\t\t\t\t\t\tthis.settings.colors,\n\t\t\t\t\t\t\t\tthis.settings.csvSeparator\n\t\t\t\t\t\t\t);\n", "\t\t\t\t\t\t\tif (chartData) {\n\t\t\t\t\t\t\t\tctx.addChild(\n\t\t\t\t\t\t\t\t\tnew ChartRenderer(\n\t\t\t\t\t\t\t\t\t\tthis.settings.models[content.model],\n\t\t\t\t\t\t\t\t\t\tchartData,\n\t\t\t\t\t\t\t\t\t\tcontent.model,\n\t\t\t\t\t\t\t\t\t\tel\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tnew Notice(\"Unable to generate chart\", 10000);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}", "\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tnew Notice(e.message, 10000);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tnew Notice(e.message, 10000);\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"]}
{"filename": "src/csv.ts", "chunked_list": ["export function getData(csv: string, separator = \",\"): Array<IInput> {\n\treturn csv\n\t\t.split(\"\\n\")\n\t\t.filter(\n\t\t\t(line, idx) =>\n\t\t\t\tidx !== 0 && line !== \"\" && line.split(separator).length === 5\n\t\t)\n\t\t.map((line) => {\n\t\t\treturn {\n\t\t\t\ttype: line.split(separator)[0],\n\t\t\t\tid: line.split(separator)[1],\n\t\t\t\tvalue:\n\t\t\t\t\tparseFloat(line.split(separator)[2]) !== 0\n\t\t\t\t\t\t? parseFloat(line.split(separator)[2])\n\t\t\t\t\t\t: 0,\n\t\t\t\ttimestamp: new Date(line.split(separator)[3]),\n\t\t\t\textra: line.split(separator)[4],\n\t\t\t};\n\t\t})\n\t\t.sort((a, b) => {\n\t\t\treturn (\n\t\t\t\tnew Date(a.timestamp).getTime() -\n\t\t\t\tnew Date(b.timestamp).getTime()\n\t\t\t);\n\t\t});\n}\n"]}
{"filename": "src/methods.ts", "chunked_list": ["/*\n *\tFunctions to process the data\n */\n\nimport { getDate, getMonth, skipped } from \"utils\";\n\nexport const functions: { [key: string]: any } = {\n\tsplitByYear: (input: Array<IInput | any>) => {\n\t\tconsole.log(input);\n\t\treturn input.reduce((acc, current) => {", "\t\tconsole.log(input);\n\t\treturn input.reduce((acc, current) => {\n\t\t\tconst d = new Date(current.timestamp);\n\t\t\tif (!acc[`${d.getUTCFullYear()}`]) {\n\t\t\t\tacc[`${d.getUTCFullYear()}`] = [];\n\t\t\t}\n\t\t\tacc[`${d.getUTCFullYear()}`].push(current);\n\t\t\treturn acc;\n\t\t}, {});\n\t},\n\n\tsplitByYearMonth: (input: Array<IInput | any>) => {\n\t\treturn input.reduce((acc, current) => {\n\t\t\tconst d = new Date(current.timestamp);", "\t\t\tif (!acc[`${d.getUTCFullYear()}-${getMonth(d)}`]) {\n\t\t\t\tacc[`${d.getUTCFullYear()}-${getMonth(d)}`] = [];\n\t\t\t}\n\t\t\tacc[`${d.getUTCFullYear()}-${getMonth(d)}`].push(current);\n\t\t\treturn acc;\n\t\t}, {});\n\t},\n\n\tsplitDailyDates: (input: Array<IInput | any>) => {\n\t\treturn input.reduce((acc, current) => {\n\t\t\tconst d = new Date(current.timestamp);\n\t\t\tconst dateStr = `${d.getUTCFullYear()}-${getMonth(d)}-${getDate(\n\t\t\t\td\n\t\t\t)}`;\n", "\t\t\tif (!acc[dateStr]) {\n\t\t\t\tacc[dateStr] = [];\n\t\t\t}\n\t\t\tacc[dateStr].push(current);\n\t\t\treturn acc;\n\t\t}, {});\n\t},\n\n\tgenerateSumDataSet: ({\n\t\ttypeToSelect,\n\t\tinput,\n\t\tlabels,\n\t\ttypes,\n\t\tcolors,\n\t}: {\n\t\ttypeToSelect: string[];\n\t\tinput: { [key: string]: IInput[] };\n\t\tlabels: string[];\n\t\ttypes: string[];\n\t\tcolors: string[];\n\t}): IDataset => {\n\t\tconst usableColors = [...colors];\n\t\tconst datasets = types.map((type) => {\n\t\t\tconst color = usableColors[0];\n\t\t\tusableColors.shift();\n\t\t\tconsole.log(color);\n\t\t\treturn {\n\t\t\t\tlabel: type,\n\t\t\t\tborderColor: color,\n\t\t\t\tfill: false,\n\t\t\t\ttension: 0.2,\n\t\t\t\tspanGaps: true,\n\t\t\t\tsegment: {\n\t\t\t\t\tborderColor: (ctx: IContext) => skipped(ctx, color),\n\t\t\t\t\tborderDash: (ctx: IContext) => skipped(ctx, [3, 3]),\n\t\t\t\t},\n\t\t\t\tdata: labels\n\t\t\t\t\t.map((label: string) => {\n\t\t\t\t\t\treturn input[label]\n\t\t\t\t\t\t\t.filter((i: IInput) =>\n\t\t\t\t\t\t\t\ttypeToSelect.includes(i.type)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.reduce(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\ttypes: { [key: string]: number },\n\t\t\t\t\t\t\t\t\tcurrent: IInput\n\t\t\t\t\t\t\t\t) => {", "\t\t\t\t\t\t\t\t\tif (!types[current.id])\n\t\t\t\t\t\t\t\t\t\ttypes[current.id] = 0;\n\t\t\t\t\t\t\t\t\ttypes[current.id] += current.value;\n\t\t\t\t\t\t\t\t\treturn types;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t\t\t\t.reduce((typeSum, current) => {\n\t\t\t\t\t\tif (current[type]) typeSum.push(current[type]);\n\t\t\t\t\t\telse typeSum.push(0);\n\t\t\t\t\t\treturn typeSum;\n\t\t\t\t\t}, []),\n\t\t\t};\n\t\t});\n\t\treturn {\n\t\t\tlabels,\n\t\t\tdatasets,\n\t\t};\n\t},\n\n\tgenerateDailyDataSet: ({\n\t\ttypeToSelect,\n\t\tinput,\n\t\tlabels,\n\t\ttypes,\n\t\tcolors,\n\t}: {\n\t\ttypeToSelect: string[];\n\t\tinput: { [key: string]: IInput[] };\n\t\tlabels: string[];\n\t\ttypes: string[];\n\t\tcolors: string[];\n\t}): IDataset => {\n\t\tconst nonEmptyLabels: string[] = [];\n\t\tconst usableColors = [...colors];\n\t\tconst datasets = types.map((type) => {\n\t\t\tconst color = usableColors[0];\n\t\t\tusableColors.shift();\n\t\t\treturn {\n\t\t\t\tlabel: type,\n\t\t\t\tborderColor: color,\n\t\t\t\tfill: false,\n\t\t\t\ttension: 0.2,\n\t\t\t\tspanGaps: true,\n\t\t\t\tsegment: {\n\t\t\t\t\tborderColor: (ctx: IContext) => skipped(ctx, color),\n\t\t\t\t\tborderDash: (ctx: IContext) => skipped(ctx, [3, 3]),\n\t\t\t\t},\n\t\t\t\tdata: labels\n\t\t\t\t\t.map((label: string) => {\n\t\t\t\t\t\tconst typesFound = input[label]\n\t\t\t\t\t\t\t.filter((i: IInput) =>\n\t\t\t\t\t\t\t\ttypeToSelect.includes(i.type)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.reduce(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\ttypes: { [key: string]: number },\n\t\t\t\t\t\t\t\t\tcurrent: IInput\n\t\t\t\t\t\t\t\t) => {", "\t\t\t\t\t\tif (current[type]) typeSum.push(current[type]);\n\t\t\t\t\t\telse typeSum.push(0);\n\t\t\t\t\t\treturn typeSum;\n\t\t\t\t\t}, []),\n\t\t\t};\n\t\t});\n\t\treturn {\n\t\t\tlabels,\n\t\t\tdatasets,\n\t\t};\n\t},\n\n\tgenerateDailyDataSet: ({\n\t\ttypeToSelect,\n\t\tinput,\n\t\tlabels,\n\t\ttypes,\n\t\tcolors,\n\t}: {\n\t\ttypeToSelect: string[];\n\t\tinput: { [key: string]: IInput[] };\n\t\tlabels: string[];\n\t\ttypes: string[];\n\t\tcolors: string[];\n\t}): IDataset => {\n\t\tconst nonEmptyLabels: string[] = [];\n\t\tconst usableColors = [...colors];\n\t\tconst datasets = types.map((type) => {\n\t\t\tconst color = usableColors[0];\n\t\t\tusableColors.shift();\n\t\t\treturn {\n\t\t\t\tlabel: type,\n\t\t\t\tborderColor: color,\n\t\t\t\tfill: false,\n\t\t\t\ttension: 0.2,\n\t\t\t\tspanGaps: true,\n\t\t\t\tsegment: {\n\t\t\t\t\tborderColor: (ctx: IContext) => skipped(ctx, color),\n\t\t\t\t\tborderDash: (ctx: IContext) => skipped(ctx, [3, 3]),\n\t\t\t\t},\n\t\t\t\tdata: labels\n\t\t\t\t\t.map((label: string) => {\n\t\t\t\t\t\tconst typesFound = input[label]\n\t\t\t\t\t\t\t.filter((i: IInput) =>\n\t\t\t\t\t\t\t\ttypeToSelect.includes(i.type)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.reduce(\n\t\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t\ttypes: { [key: string]: number },\n\t\t\t\t\t\t\t\t\tcurrent: IInput\n\t\t\t\t\t\t\t\t) => {", "\t\t\t\t\t\t\t\t\tif (!types[current.id])\n\t\t\t\t\t\t\t\t\t\ttypes[current.id] = 0;\n\t\t\t\t\t\t\t\t\ttypes[current.id] = current.value;\n\t\t\t\t\t\t\t\t\treturn types;\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{}\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tObject.keys(typesFound).length > 0 &&\n\t\t\t\t\t\t\t!nonEmptyLabels.includes(label)\n\t\t\t\t\t\t)\n\t\t\t\t\t\t\tnonEmptyLabels.push(label);\n\n\t\t\t\t\t\treturn typesFound;\n\t\t\t\t\t})\n\t\t\t\t\t.filter((current) => {\n\t\t\t\t\t\tlet total = 0;\n\t\t\t\t\t\tObject.values(current).forEach((c: number) => {\n\t\t\t\t\t\t\ttotal += c;\n\t\t\t\t\t\t});\n", "\t\t\t\t\t\tif (total === 0) return null;\n\t\t\t\t\t\treturn current;\n\t\t\t\t\t})\n\t\t\t\t\t.reduce((typeSum, current) => {\n\t\t\t\t\t\tif (current[type]) typeSum.push(current[type]);\n\t\t\t\t\t\telse typeSum.push(NaN);\n\t\t\t\t\t\treturn typeSum;\n\t\t\t\t\t}, []),\n\t\t\t};\n\t\t});\n\n\t\treturn {\n\t\t\tlabels: nonEmptyLabels,\n\t\t\tdatasets,\n\t\t};\n\t},\n\n\tgenerateSumDataSetPerTypes: ({\n\t\ttypeToSelect,\n\t\tinput,\n\t\tlabels,\n\t\tcolors,\n\t}: {\n\t\ttypeToSelect: string[];\n\t\tinput: { [key: string]: IInput[] };\n\t\tlabels: string[];\n\t\tcolors: string[];\n\t}): IDataset => {\n\t\tconst usableColors = [...colors];\n\t\tconst datasets = typeToSelect.map((type) => {\n\t\t\tconst color = usableColors[0];\n\t\t\tusableColors.shift();\n\t\t\tconsole.log(color);\n\t\t\treturn {\n\t\t\t\tlabel: type,\n\t\t\t\tborderColor: color,\n\t\t\t\tfill: false,\n\t\t\t\ttension: 0.2,\n\t\t\t\tspanGaps: true,\n\t\t\t\tsegment: {\n\t\t\t\t\tborderColor: (ctx: IContext) => skipped(ctx, color),\n\t\t\t\t\tborderDash: (ctx: IContext) => skipped(ctx, [3, 3]),\n\t\t\t\t},\n\t\t\t\tdata: Object.values(input).map((i) => {\n\t\t\t\t\treturn i\n\t\t\t\t\t\t.filter((entry) => entry.type === type)\n\t\t\t\t\t\t.reduce((acc, current) => {\n\t\t\t\t\t\t\tacc += current.value;\n\t\t\t\t\t\t\treturn acc;\n\t\t\t\t\t\t}, 0);\n\t\t\t\t}),\n\t\t\t};\n\t\t});\n\n\t\treturn {\n\t\t\tlabels,\n\t\t\tdatasets,\n\t\t};\n\t},\n};\n"]}
{"filename": "src/constants.ts", "chunked_list": ["export const types: string[] = [\n\t\"Portfolio\",\n\t\"Income\",\n\t\"Mortgage\",\n\t\"Mortgage Rate\",\n\t\"Cotisation\",\n\t\"Dividend\",\n\t\"House Expenses\",\n\t\"Expenses\",\n];", "\t\"Expenses\",\n];\n"]}
{"filename": "src/loadIcons.ts", "chunked_list": ["import { addIcon } from \"obsidian\";\n\nexport default () => {\n     // Source: https://www.svgrepo.com/svg/10777/trash-can-with-cover\n\taddIcon(\n\t\t\"trash\",\n\t\t`<svg fill=\"#ffffff\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 490.646 490.646\" xml:space=\"preserve\"><g id=\"SVGRepo_bgCarrier\" stroke-width=\"0\"></g><g id=\"SVGRepo_tracerCarrier\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></g><g id=\"SVGRepo_iconCarrier\"> <g> <g> <path d=\"M399.179,67.285l-74.794,0.033L324.356,0L166.214,0.066l0.029,67.318l-74.802,0.033l0.025,62.914h307.739L399.179,67.285z M198.28,32.11l94.03-0.041l0.017,35.262l-94.03,0.041L198.28,32.11z\"></path> <path d=\"M91.465,490.646h307.739V146.359H91.465V490.646z M317.461,193.372h16.028v250.259h-16.028V193.372L317.461,193.372z M237.321,193.372h16.028v250.259h-16.028V193.372L237.321,193.372z M157.18,193.372h16.028v250.259H157.18V193.372z\"></path> </g> </g> </g></svg>`\n\t);\n};\n", "};\n"]}
{"filename": "src/utils.ts", "chunked_list": ["/* Date */\nexport function getMonth(d: Date): string | number {\n\tif (d.getUTCMonth() + 1 < 10) return \"0\" + (d.getUTCMonth() + 1);\n\treturn d.getUTCMonth() + 1;\n}\n\nexport function getDate(d: Date): string | number {\n\tif (d.getUTCDate() < 10) return \"0\" + d.getUTCDate();\n\treturn d.getUTCDate();\n}\n\n// In UTC Format.", "export function getToday() {\n\tconst d = new Date();\n\treturn `${d.getFullYear()}-${getMonth(d)}-${getDate(d)}`;\n}\n\n/* ChartJS */\nexport const skipped = (\n\tctx: IContext,\n\tvalue: string | Array<number>\n): string | Array<number> | undefined =>\n\tctx.p0.skip || ctx.p1.skip ? value : undefined;\n\n// Convert id Camel Case to text\nexport const idToText = (id: string): string => {\n\treturn `${id.charAt(0).toUpperCase()}${id\n\t\t.slice(1)\n\t\t.replace(/([A-Z])/g, \" $1\")}`;\n};\n"]}
{"filename": "src/SettingsTab.ts", "chunked_list": ["import { App, Notice, PluginSettingTab, Setting, debounce } from \"obsidian\";\nimport FinDocPlugin from \"main\";\nimport { idToText } from \"utils\";\nimport loadIcons from \"loadIcons\";\nimport { types } from \"./constants\";\n\nexport default class SettingsTab extends PluginSettingTab {\n\tplugin: FinDocPlugin;\n\n\tconstructor(app: App, plugin: FinDocPlugin) {\n\t\tsuper(app, plugin);\n\t\tthis.plugin = plugin;\n\n\t\tloadIcons();\n\t}\n\n\tcreateNewColorBtn(): HTMLElement {\n\t\tconst btn = this.containerEl.createEl(\"button\");\n\t\tbtn.classList.add(\"findoc-btn-margin-bottom\");\n\t\tbtn.id = \"newColor\";\n\t\tbtn.innerText = \"Add New Color\";\n\t\tbtn.onClickEvent(() => {\n\t\t\tthis.plugin.settings.colors.unshift(\"#ffffff\");\n\t\t\tconsole.debug(this.plugin.settings.colors);\n\t\t\tthis.display();\n\t\t});\n\t\treturn btn;\n\t}\n\n\tdisplay(): void {\n\t\tconst { containerEl } = this;\n\n\t\tcontainerEl.empty();\n\n\t\tcontainerEl.createEl(\"h2\", { text: \"Settings\" });\n\n\t\tnew Setting(containerEl).setName(\"Support\").addButton((button) => {\n\t\t\tbutton.buttonEl.innerHTML =\n\t\t\t\t\"<a style='margin: 0 auto;' href='https://www.buymeacoffee.com/studiowebux'><img width='109px' alt='Buy me a Coffee' src='https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png'/></a>\";\n\t\t\tbutton.buttonEl.classList.add(\"findoc-support-btn\");\n\t\t});\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(\"CSV Save debounce\")\n\t\t\t.setDesc(\n\t\t\t\t\"Timeout to trigger the CSV saving process (Value must be greater than 500 and less than 5000)\"\n\t\t\t)\n\t\t\t.addText((text) => {\n\t\t\t\ttext.setValue(this.plugin.settings.debounce.toString());\n\t\t\t\ttext.onChange(\n\t\t\t\t\tdebounce(async (value: string) => {", "\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tisNaN(parseInt(value)) ||\n\t\t\t\t\t\t\tparseInt(value) < 500 ||\n\t\t\t\t\t\t\tparseInt(value) > 5000\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tnew Notice(\"Invalid debounce value !\");\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.plugin.settings.debounce = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tnew Notice(\"Debounce Updated !\");\n\t\t\t\t\t}, 500)\n\t\t\t\t);\n\t\t\t});\n\n\t\tnew Setting(containerEl).setName(\"CSV Separator\").addText((text) => {\n\t\t\ttext.setValue(this.plugin.settings.csvSeparator.toString());\n\t\t\ttext.onChange(\n\t\t\t\tdebounce(async (value: string) => {\n\t\t\t\t\tthis.plugin.settings.csvSeparator = value;\n\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\tnew Notice(\"CSV Separator Updated !\");\n\t\t\t\t}, 500)\n\t\t\t);\n\t\t});\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName(\"Models\")\n\t\t\t.setDesc(\"Models available (It must be a JSON.stringify version)\");\n\t\tconst div = containerEl.createDiv();\n\t\tdiv.classList.add(\"findoc-models-container\");\n\n\t\tObject.entries(this.plugin.settings.models).forEach(([key, model]) => {\n\t\t\tconst name = idToText(key);\n\t\t\tconst modelSection = div.createDiv();\n\t\t\tconst el = modelSection.createEl(\"h2\");\n\t\t\tel.innerText = name;\n\t\t\tmodelSection.classList.add(\"findoc-model-section\");\n\n\t\t\tnew Setting(modelSection)\n\t\t\t\t.setName(`Data Source for ${name}`)\n\t\t\t\t.addDropdown((dropdown) => {\n\t\t\t\t\tdropdown.addOption(\n\t\t\t\t\t\t\"splitDailyDates\",\n\t\t\t\t\t\t\"Split By Daily Dates\"\n\t\t\t\t\t);\n\t\t\t\t\tdropdown.addOption(\n\t\t\t\t\t\t\"splitByYearMonth\",\n\t\t\t\t\t\t\"Split By Year & Month\"\n\t\t\t\t\t);\n\t\t\t\t\tdropdown.addOption(\"splitByYear\", \"Split By Year\");\n\t\t\t\t\tdropdown.setValue(\n\t\t\t\t\t\tthis.plugin.settings.models[key].dataSource\n\t\t\t\t\t);\n\n\t\t\t\t\tdropdown.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.models[key].dataSource = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tnew Notice(\"Data Source Updated !\");\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\tnew Setting(modelSection)\n\t\t\t\t.setName(`Output Function for ${name}`)\n\t\t\t\t.addDropdown((dropdown) => {\n\t\t\t\t\tdropdown.addOption(\n\t\t\t\t\t\t\"generateSumDataSet\",\n\t\t\t\t\t\t\"Generate Sum Dataset\"\n\t\t\t\t\t);\n\t\t\t\t\tdropdown.addOption(\n\t\t\t\t\t\t\"generateDailyDataSet\",\n\t\t\t\t\t\t\"Generate Daily Dataset\"\n\t\t\t\t\t);\n\t\t\t\t\tdropdown.addOption(\n\t\t\t\t\t\t\"generateSumDataSetPerTypes\",\n\t\t\t\t\t\t\"Generate Sum Dataset Per Types\"\n\t\t\t\t\t);\n\t\t\t\t\tdropdown.setValue(this.plugin.settings.models[key].output);\n\n\t\t\t\t\tdropdown.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.models[key].output = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tnew Notice(\"Output Updated !\");\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tnew Setting(modelSection)\n\t\t\t\t.setName(`Begin at Zero for ${name}`)\n\t\t\t\t.addToggle((toggle) => {\n\t\t\t\t\ttoggle.setValue(\n\t\t\t\t\t\tthis.plugin.settings.models[key].beginAtZero\n\t\t\t\t\t);\n\t\t\t\t\ttoggle.onChange(async (value) => {\n\t\t\t\t\t\tthis.plugin.settings.models[key].beginAtZero = value;\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tnew Notice(\"Begin at Zero Updated !\");\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\tconst h2 = modelSection.createEl(\"h2\");\n\t\t\th2.innerText = `Types for ${name}`;\n\n\t\t\tconst wrapper = modelSection.createDiv();\n\t\t\twrapper.classList.add(\"findoc-model-section-wrapper\");\n\n\t\t\tconst select = wrapper.createEl(\"select\");\n\t\t\tselect.id = key;\n\t\t\tselect.multiple = true;\n\t\t\tselect.classList.add(\"findoc-select\");\n\n\t\t\tselect.setAttribute(\"value\", model.types.join(\",\"));\n\n\t\t\tselect.onchange = async () => {\n\t\t\t\tconst selected = [];\n\t\t\t\t// @ts-ignore", "\t\t\t\tfor (const option of document.getElementById(key).options) {\n\t\t\t\t\tif (option.selected) {\n\t\t\t\t\t\tselected.push(option.value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// select.value = selected.join(\",\");\n\t\t\t\tmodel.types = selected;\n\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\tnew Notice(\"Types Updated !\");\n\t\t\t};\n\n\t\t\ttypes.forEach((type: string) => {\n\t\t\t\tconst opt = select.createEl(\"option\");\n\t\t\t\topt.id = type;\n\t\t\t\topt.value = type;\n\t\t\t\topt.innerText = type;\n\t\t\t\topt.selected = model.types.includes(type);\n\t\t\t});\n\n\t\t\tmodelSection.createEl(\"hr\");\n\t\t});\n\n\t\tnew Setting(containerEl).setName(\"Colors\");\n\t\tconst colorSection = containerEl.createDiv();\n\t\tcolorSection.appendChild(this.createNewColorBtn());\n\t\tcolorSection.classList.add(\"findoc-color-section\")\n\n\t\tthis.plugin.settings.colors.forEach((color, key) => {\n\t\t\tnew Setting(colorSection)\n\t\t\t\t.setName(`Color #${key}`)\n\t\t\t\t.addColorPicker(async (colorPicker) => {\n\t\t\t\t\tcolorPicker.setValue(color);\n\t\t\t\t\tcolorPicker.onChange(\n\t\t\t\t\t\tdebounce(async (value: string) => {\n\t\t\t\t\t\t\tthis.plugin.settings.colors[key] = value;\n\t\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\t\tnew Notice(\"Color Updated !\");\n\t\t\t\t\t\t}, 500)\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.addExtraButton((btn) => {\n\t\t\t\t\tbtn.setTooltip(\"Delete Color\");\n\t\t\t\t\tbtn.setIcon(\"trash\");\n\t\t\t\t\tbtn.onClick(async () => {\n\t\t\t\t\t\tthis.plugin.settings.colors.splice(key, 1);\n\t\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t\t\tnew Notice(\"Color Deleted !\");\n\t\t\t\t\t\tthis.display();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\t}\n}\n"]}
{"filename": "src/processing.ts", "chunked_list": ["import { chartLine } from \"chart\";\nimport { getData } from \"csv\";\nimport { functions } from \"methods\";\n\nfunction getTypes(typesToSelect: string[], input: Array<IInput>) {\n\treturn Object.values(input)\n\t\t.filter((line) => typesToSelect.includes(line.type))\n\t\t.reduce((types, current) => {\n\t\t\tif (!types.includes(current.id)) types.push(current.id);\n\t\t\treturn types;\n\t\t}, []);\n}\n", "\t\t\tif (!types.includes(current.id)) types.push(current.id);\n\t\t\treturn types;\n\t\t}, []);\n}\n\nfunction processing(\n\tcsvRawData: string,\n\tmodelToGenerate: string,\n\tmodels: {\n\t\t[key: string]: IModel;\n\t},\n\tcolors: string[],\n\tseparator = \",\"\n) {\n\tconst json = getData(csvRawData, separator);\n\tconst model = models[modelToGenerate];\n\n\tconst labels = Object.keys(functions[model.dataSource](json));\n\tconst types = getTypes(model.types, json);\n\tconst output: IDataset = functions[model.output]({\n\t\ttypeToSelect: model.types,\n\t\tinput: functions[model.dataSource](json),\n\t\tlabels,\n\t\ttypes,\n\t\tcolors,\n\t});\n\n\treturn chartLine(output, model.type, model.beginAtZero);\n}\n\nexport default processing;\n"]}
