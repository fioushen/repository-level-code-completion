{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/UI/Scripts/UserQueryCreationCanvas.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing TMPro;", "using System.Threading;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\nusing UnityEngine.UI;\nusing vrroom.CubicMusic.Audio;\nusing vrroom.CubicMusic.CubesMgmt;\n\nnamespace vrroom.CubicMusic.UI\n{", "namespace vrroom.CubicMusic.UI\n{\n    /// <summary>\n    /// Managest the UI for the user to create an AI query and receive the responses\n    /// </summary>\n    public class UserQueryCreationCanvas : MonoBehaviour\n    {\n        /// <summary>\n        /// Toggle to enable/disable the recording of the microphone\n        /// </summary>\n        [SerializeField]", "        private Toggle m_recordingToggle;\n\n        /// <summary>\n        /// Button to send the prompt to the AI cloud\n        /// </summary>\n        [SerializeField]\n        private Button m_sendPromptButton;\n\n        /// <summary>\n        /// Input field with the textual query\n        /// </summary>\n        [SerializeField]", "        private TMP_InputField m_textQueryInputField;\n\n        /// <summary>\n        /// The object responsible to generate the logic from the prompts.\n        /// Must implement <see cref=\"ICreatesLogicFromPrompt\"/>\n        /// If it is null, defaults to <see cref=\"CubesManager\"/>\n        /// </summary>\n        [SerializeField]\n        private MonoBehaviour m_logicFromQueriesGeneratorBehaviour;\n\n        /// <summary>\n        /// Element to be notified of the queries so that can generate logic\n        /// </summary>", "        private MonoBehaviour m_logicFromQueriesGeneratorBehaviour;\n\n        /// <summary>\n        /// Element to be notified of the queries so that can generate logic\n        /// </summary>\n        private ICreatesLogicFromPrompt m_logicFromPromptCreator;\n\n        /// <summary>\n        /// Cancellation token\n        /// </summary>\n        private CancellationTokenSource m_cancellationTokenSource;\n        \n        /// <summary>\n        /// Awake\n        /// </summary>", "        private CancellationTokenSource m_cancellationTokenSource;\n        \n        /// <summary>\n        /// Awake\n        /// </summary>\n        private void Awake()\n        {\n            m_cancellationTokenSource = new CancellationTokenSource();\n\n            if(m_logicFromQueriesGeneratorBehaviour == null)\n                m_logicFromPromptCreator = CubesManager.Instance;\n            else\n                m_logicFromPromptCreator = m_logicFromQueriesGeneratorBehaviour as ICreatesLogicFromPrompt;\n        }\n\n        /// <summary>\n        /// On Enable\n        /// </summary>", "            if(m_logicFromQueriesGeneratorBehaviour == null)\n                m_logicFromPromptCreator = CubesManager.Instance;\n            else\n                m_logicFromPromptCreator = m_logicFromQueriesGeneratorBehaviour as ICreatesLogicFromPrompt;\n        }\n\n        /// <summary>\n        /// On Enable\n        /// </summary>\n        private void OnEnable()\n        {\n            m_recordingToggle.onValueChanged.AddListener(OnRecordingToggleValueChanged);\n            m_sendPromptButton.onClick.AddListener(OnSendPromptButtonClicked);\n        }\n\n        /// <summary>\n        /// On Application Quit\n        /// </summary>", "        private void OnEnable()\n        {\n            m_recordingToggle.onValueChanged.AddListener(OnRecordingToggleValueChanged);\n            m_sendPromptButton.onClick.AddListener(OnSendPromptButtonClicked);\n        }\n\n        /// <summary>\n        /// On Application Quit\n        /// </summary>\n        private void OnApplicationQuit()\n        {\n            //cancel all pending tasks\n            m_cancellationTokenSource.Cancel(); \n        }\n\n        /// <summary>\n        /// On Disable\n        /// </summary>", "        private void OnApplicationQuit()\n        {\n            //cancel all pending tasks\n            m_cancellationTokenSource.Cancel(); \n        }\n\n        /// <summary>\n        /// On Disable\n        /// </summary>\n        private void OnDisable()\n        {\n            m_recordingToggle.onValueChanged.RemoveListener(OnRecordingToggleValueChanged);\n            m_sendPromptButton.onClick.RemoveListener(OnSendPromptButtonClicked);\n        }\n\n        /// <summary>\n        /// Callback called when the recording toggle value changes\n        /// </summary>\n        /// <param name=\"value\">The new value of the toggle</param>", "        private void OnDisable()\n        {\n            m_recordingToggle.onValueChanged.RemoveListener(OnRecordingToggleValueChanged);\n            m_sendPromptButton.onClick.RemoveListener(OnSendPromptButtonClicked);\n        }\n\n        /// <summary>\n        /// Callback called when the recording toggle value changes\n        /// </summary>\n        /// <param name=\"value\">The new value of the toggle</param>\n        private async void OnRecordingToggleValueChanged(bool value)\n        {\n            //if the toggle is on, start recording", "        private async void OnRecordingToggleValueChanged(bool value)\n        {\n            //if the toggle is on, start recording\n            if (value)\n                AudioManager.Instance.MicrophoneManager.StartRecording(false, 30);\n            //if the toggle is off, stop recording and generate the logic\n            else\n            {\n                var userAudioClip = AudioManager.Instance.MicrophoneManager.EndRecording();\n                await m_logicFromPromptCreator.GenerateLogicForGroupFromAudio(userAudioClip);\n            }\n        }\n\n        /// <summary>\n        /// Callback called when the send prompt button is clicked\n        /// </summary>", "        private async void OnSendPromptButtonClicked()\n        {\n            await m_logicFromPromptCreator.GenerateLogicForGroupFromText(m_textQueryInputField.text);\n        }\n\n#if UNITY_EDITOR\n        /// <summary>\n        /// On Validate\n        /// </summary>\n        private void OnValidate()\n        {\n            //check that the assignment of the logic from queries generator is correct", "        private void OnValidate()\n        {\n            //check that the assignment of the logic from queries generator is correct\n            if (m_logicFromQueriesGeneratorBehaviour != null && m_logicFromQueriesGeneratorBehaviour.GetComponent<ICreatesLogicFromPrompt>() == null)\n            {\n                Debug.LogError(\"[User Queries UI] The logic from queries generator must implement ICreatesLogicFromPrompt\");\n                m_logicFromQueriesGeneratorBehaviour = null;\n            }\n        }\n#endif\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/UI/Scripts/AiStatusCanvas.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing System.Collections;\nusing TMPro;\nusing UnityEngine;\nusing vrroom.CubicMusic.CubesMgmt;", "using UnityEngine;\nusing vrroom.CubicMusic.CubesMgmt;\n\nnamespace vrroom.CubicMusic.UI\n{\n    /// <summary>\n    /// UI that displays the status of the AI operations\n    /// </summary>\n    public class AiStatusCanvas : MonoBehaviour\n    {\n        /// <summary>\n        /// Text that shows the status of the AI operations\n        /// </summary>\n        [SerializeField]", "    public class AiStatusCanvas : MonoBehaviour\n    {\n        /// <summary>\n        /// Text that shows the status of the AI operations\n        /// </summary>\n        [SerializeField]\n        private TMP_Text m_statusText;\n\n        /// <summary>\n        /// Text field that displays the latest computed audio transcript\n        /// </summary>\n        [SerializeField]", "        private TMP_Text m_audioTranscriptText;\n\n        /// <summary>\n        /// Text field that displays the latest prompt response\n        /// </summary>\n        [SerializeField]\n        private TMP_Text m_promptResponseText;\n\n        /// <summary>\n        /// The coroutine that shows the progress of the AI operations\n        /// </summary>", "        private Coroutine m_progressCoroutine = default;\n\n        /// <summary>\n        /// On Enable\n        /// </summary>\n        private void OnEnable()\n        {\n            // Register to the events\n            CubesManager.Instance.AiQueryPerformer.OnPromptSent += OnPromptSent;\n            CubesManager.Instance.AiQueryPerformer.OnPromptResponseReceived += OnPromptResponseReceived;\n\n            CubesManager.Instance.AiQueryPerformer.OnAudioTranscriptionSent += OnAudioTranscriptionSent;\n            CubesManager.Instance.AiQueryPerformer.OnAudioTranscriptionResponseReceived += OnAudioTranscriptionResponseReceived;\n        }\n\n        /// <summary>\n        /// On Disable\n        /// </summary>", "        private void OnDisable()\n        {\n            // Unregister from the events\n            CubesManager.Instance.AiQueryPerformer.OnPromptSent -= OnPromptSent;\n            CubesManager.Instance.AiQueryPerformer.OnPromptResponseReceived -= OnPromptResponseReceived;\n\n            CubesManager.Instance.AiQueryPerformer.OnAudioTranscriptionSent -= OnAudioTranscriptionSent;\n            CubesManager.Instance.AiQueryPerformer.OnAudioTranscriptionResponseReceived -= OnAudioTranscriptionResponseReceived;\n        }\n\n        /// <summary>\n        /// Callback called when the prompt is sent to the AI cloud\n        /// </summary>", "        private void OnAudioTranscriptionSent()\n        {\n            m_statusText.text = \"Audio sent. Transcribing\";\n            m_progressCoroutine = StartCoroutine(ShowProgress());\n        }\n\n        /// <summary>\n        /// Callback called when the audio transcription is received from the AI cloud\n        /// </summary>\n        /// <param name=\"transcription\">Audio transcription</param>\n        private void OnAudioTranscriptionResponseReceived(string transcription)\n        {\n            StopCoroutine(m_progressCoroutine);\n            m_statusText.text = \"Audio transcription received!\";\n            m_audioTranscriptText.text = transcription;\n        }\n\n        /// <summary>\n        /// Callback called when a textual prompt is sent to the AI cloud\n        /// </summary>\n        /// <param name=\"prompt\">Textual prompt sent</param>", "        private void OnAudioTranscriptionResponseReceived(string transcription)\n        {\n            StopCoroutine(m_progressCoroutine);\n            m_statusText.text = \"Audio transcription received!\";\n            m_audioTranscriptText.text = transcription;\n        }\n\n        /// <summary>\n        /// Callback called when a textual prompt is sent to the AI cloud\n        /// </summary>\n        /// <param name=\"prompt\">Textual prompt sent</param>", "        private void OnPromptSent(string prompt)\n        {\n            m_statusText.text = \"Prompt sent. Thinking\";\n            m_progressCoroutine = StartCoroutine(ShowProgress());\n        }\n\n        /// <summary>\n        /// Callback called when a textual prompt got a response from the AI cloud\n        /// </summary>\n        /// <param name=\"response\">Textual response from cloud</param>\n        private void OnPromptResponseReceived(string response)\n        {\n            StopCoroutine(m_progressCoroutine);\n            m_statusText.text = \"Prompt response received!\";\n            m_promptResponseText.text = response;\n        }\n\n        /// <summary>\n        /// Shows progress of the AI operations while we wait for the response\n        /// </summary>\n        /// <returns></returns>", "        private void OnPromptResponseReceived(string response)\n        {\n            StopCoroutine(m_progressCoroutine);\n            m_statusText.text = \"Prompt response received!\";\n            m_promptResponseText.text = response;\n        }\n\n        /// <summary>\n        /// Shows progress of the AI operations while we wait for the response\n        /// </summary>\n        /// <returns></returns>", "        private IEnumerator ShowProgress()\n        { \n            //keep adding a dot every 0.5 seconds\n            while(true)\n            {\n                m_statusText.text += \".\";\n                yield return new WaitForSeconds(0.5f);\n            }\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/Input/Scripts/DisableActionsOnUi.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.EventSystems;\nusing UnityEngine.InputSystem;", "using UnityEngine.EventSystems;\nusing UnityEngine.InputSystem;\n\nnamespace vrroom.CubicMusic.Input\n{\n    /// <summary>\n    /// Disable specific input actions when the mouse is over a UI element,\n    /// to avoid triggering actions when interacting with the UI.\n    /// </summary>\n    public class DisableActionsOnUi : MonoBehaviour\n    {\n        /// <summary>\n        /// Reference to the actions to disable\n        /// </summary>\n        [SerializeField]\n        private InputActionReference[] m_actions;\n\n        /// <summary>\n        /// True if currently actions are enabled, false otherwise\n        /// </summary>", "    /// </summary>\n    public class DisableActionsOnUi : MonoBehaviour\n    {\n        /// <summary>\n        /// Reference to the actions to disable\n        /// </summary>\n        [SerializeField]\n        private InputActionReference[] m_actions;\n\n        /// <summary>\n        /// True if currently actions are enabled, false otherwise\n        /// </summary>", "        private bool m_currentStatus = true;\n\n        /// <summary>\n        /// Update\n        /// </summary>\n        void Update()\n        {\n            //if we are interacting with the UI and the actions are enabled, or viceversa,\n            //we need to change the status\n            if (!(EventSystem.current.IsPointerOverGameObject() ^ m_currentStatus))\n            {\n                //change the status\n                m_currentStatus = !m_currentStatus;\n\n                //enable or disable the actions", "            if (!(EventSystem.current.IsPointerOverGameObject() ^ m_currentStatus))\n            {\n                //change the status\n                m_currentStatus = !m_currentStatus;\n\n                //enable or disable the actions\n                foreach (var action in m_actions)\n                {\n                    if (m_currentStatus)\n                        action.action.Enable();\n                    else\n                        action.action.Disable();\n                }\n\n            }\n        }\n    }\n\n}", "                    if (m_currentStatus)\n                        action.action.Enable();\n                    else\n                        action.action.Disable();\n                }\n\n            }\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/Input/Scripts/FlyMovement.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing UnityEngine;\nusing UnityEngine.InputSystem;\n\nnamespace vrroom.CubicMusic.Input\n{", "namespace vrroom.CubicMusic.Input\n{\n    /// <summary>\n    /// Makes a gameobject fly around the scene\n    /// </summary>\n    public class FlyMovement : MonoBehaviour\n    {\n        /// <summary>\n        /// Action for translational movement (left/right, up/down)\n        /// </summary>\n        [SerializeField]", "        private InputActionReference m_movementAction;\n\n        /// <summary>\n        /// Action for forward/backward movement\n        /// </summary>\n        [SerializeField]\n        private InputActionReference m_upDownMovementAction;\n\n        /// <summary>\n        /// Action for activating/deactivating the current movement\n        /// </summary>\n        [SerializeField]", "        private InputActionReference m_flyActivationAction;\n\n        /// <summary>\n        /// True if the movement is activated when the <see cref=\"m_flyActivationAction\"/> is on, false otherwise\n        /// </summary>\n        [SerializeField]\n        private bool m_requireModeOn = true;\n\n        /// <summary>\n        /// Movement speed\n        /// </summary>\n        [SerializeField]", "        private float m_speed = 1.0f;\n\n        /// <summary>\n        /// If true, movement along the Y axis is mapped to up/down movement, otherwise it is mapped to forward/backward movement\n        /// </summary>\n        [SerializeField]\n        private bool m_forwardSwitch = false;\n        \n        /// <summary>\n        /// Update\n        /// </summary>\n        void Update()\n        {\n            //check if the movement is activated", "            if (m_requireModeOn ^ m_flyActivationAction.action.ReadValue<float>() > 0.5f)\n                return;\n\n            //get the movement and apply it\n            var newMovement = m_movementAction.action.ReadValue<Vector2>();\n            var newUpDownMovement = m_upDownMovementAction.action.ReadValue<float>();\n\n            var delta = newMovement;\n            transform.position += \n                (transform.right * delta.x + \n                transform.up * (m_forwardSwitch ? delta.y : newUpDownMovement) + \n                transform.forward * (m_forwardSwitch ? newUpDownMovement : delta.y)).normalized \n                * m_speed * Time.deltaTime;\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/CubesManagement/Scripts/EmotionalCubesGenerator.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;", "using System.Threading;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing vrroom.CubicMusic.Audio;\nusing vrroom.Dynaimic.Ai;\nusing vrroom.Dynaimic.GenerativeLogic;\n\nnamespace vrroom.CubicMusic.CubesMgmt\n{\n    /// <summary>", "{\n    /// <summary>\n    /// Makes the AI generate cubes and their logic at runtime depending on the emotions of the user\n    /// </summary>\n    public class EmotionalCubesGenerator : MonoBehaviour, ICreatesLogicFromPrompt\n    {\n        /// <summary>\n        /// The prompt template to generate Unity scripts that can be added to the cubes at runtime without requiring\n        /// the setup of public properties. Scripts should work out of the bo\n        /// </summary>\n        static readonly AiPromptTemplate s_promptTemplateForUnityScripts = new AiPromptTemplate()\n        {\n            PrePrompt = @\"\nCreate the initial setup for a mood representation system in Unity. The system consists of seven game objects, each representing the same mood but with variations in their behaviors. In the first step, I would like to obtain the coordinates for each game object, defining their initial positions in the scene. Please provide the coordinates in the format (x1, y1, z1), (x2, y2, z2), ..., (x7, y7, z7). The coordinates should be randomly generated within a specified range (x and z in [-4.5, 4.6] and y in [0.5, 3.6]) to ensure diversity among the objects.\n\nThe desired mood can be described as a spectrum ranging from happiness to sadness. Happiness is associated with bright colors, growing scale (limited to a minimum of 0.25 and a maximum value of 2), and graceful rotation. Sadness is characterized by muted colors, shrinking scale (with the same range described before), and melancholic rotation.\n\nIn the second step, for each game object, I would like prompts that define their behavior. The prompts should specify a subset of rotation, color transition, scale, and volume transition, where volume transition is dependent on other behaviors. The prompts should align with the desired mood and incorporate the variations mentioned above.\n\nFor each game object's behavior prompt, please include a combination of 1 to 3 behaviors from the following options:\n\n    Rotation: [Specify the rotation behavior, e.g., slow and clockwise rotation]\n    Color Transition: [Specify the color transition behavior, e.g., transition between warm and vibrant colors]\n    Scale: [Specify the scale behavior, e.g., gradual growth with a maximum scale of 3]\n\nAdditionally, please specify how volume should be incorporated as a modality of the other behaviors. Volume is never assigned and never does a transition itself, but behaviours can be dependent on the current volume of the microphone or the volume of music. For example, you can specify that the color transition is dependent on the volume of the music, where low volume corresponds to green and high volume corresponds to red. Volume transition is optional and should not be part of all of the game object behaviours, but should be present in one of the game objects.\n\nFor colors, if they are needed, choose between the values: red, blue, black, grey, green, yellow, white, magenta, cyan\n\nPlease provide the behavior prompts for each game object, ensuring that they align with the desired mood and incorporate the variations mentioned above. Make sure to describe the behavior in a format that, when fed into OpenAI, will result in the desired outcome.\n\nRemember to consider different combinations and variations for each game object to achieve a diverse and representative mood representation system.\nSeparate the various game objects descriptions with new line characters. Before the description, write the \"\"@\"\" symbol and then its set of coordinates in the format x,y,z with parenthesis;\n\nThe mood to consider is \"\"\",\n            PostPrompt = @\"\"\" .Please generate the prompts only that are coherent with this mood. Write No examples, no explanations.\"\n        };\n\n        /// <summary>\n        /// The element that performs the queries to the AI cloud\n        /// </summary>", "        private AiQueryPerformer m_aiQueryPerformer;\n\n        /// <summary>\n        /// Ai completion parameters\n        /// </summary>\n        private AiGenerationParameters m_aiParameters;\n\n        /// <inheritdoc />\n        public AiPromptTemplate PromptTemplate => s_promptTemplateForUnityScripts;\n\n        /// <summary>\n        /// Start\n        /// </summary>", "        public AiPromptTemplate PromptTemplate => s_promptTemplateForUnityScripts;\n\n        /// <summary>\n        /// Start\n        /// </summary>\n        private void Start()\n        {\n            m_aiQueryPerformer = CubesManager.Instance.AiQueryPerformer; //we use the same of the cubes manager, so also the status canvas can register to the events of only one\n            m_aiParameters = new AiGenerationParameters()\n            {\n                CompletionModel = AiCompletionModel.Accurate,\n                MaxTokens = 2048,\n                Temperature = 1.0f, //notice that we are using a high temperature to generate more creative instructions\n            };\n        }\n\n        /// <inheritdoc />", "        public async Task GenerateLogicForGroupFromAudio(AudioClip audioPrompt, CancellationToken cancellationToken = default)\n        {\n            Debug.Log($\"[Emotional Cubes Generator] Requested cubes from audio prompt\");\n\n            var transcription = await m_aiQueryPerformer.GetAudioTranscription(audioPrompt, \"en\", cancellationToken);\n            Debug.Log($\"[Emotional Cubes Generator] Audio prompt from user is: {transcription}\");\n\n            await GenerateLogicForGroupFromText(transcription);\n        }\n\n        /// <inheritdoc />", "        public async Task GenerateLogicForGroupFromText(string prompt, CancellationToken cancellationToken = default)\n        {\n            Debug.Log($\"[Emotional Cubes Generator] Requested cubes from text prompt\");\n\n            var instructions = await m_aiQueryPerformer.GetCompletion(PromptTemplate.GenerateFullPrompt(prompt), m_aiParameters.CompletionModel, \n                m_aiParameters.Temperature, m_aiParameters.MaxTokens, cancellationToken);\n            Debug.Log($\"[Emotional Cubes Generator] Instructions returned from AI are:\\n {instructions}\");\n\n            await ExecuteInstructions(instructions);\n            Debug.Log($\"[Emotional Cubes Generator] Cubes generation completed\");\n        }\n\n        /// <summary>\n        /// Executes the instructions returned from the AI to generate the cubes depending on the emotions of the user.\n        /// The format for every line is:\n        /// cube position; prompt of the logic of the cube\n        /// </summary>\n        /// <param name=\"instructions\">Instructions received by the AI</param>\n        /// <returns></returns>", "        private async Task ExecuteInstructions(string instructions)\n        {\n            var instructionLines = instructions.Split('\\n');\n\n            //for every line of the instructions, create a cube and generate the logic\n            foreach (var line in instructionLines)\n            {\n                if(string.IsNullOrEmpty(line) || string.IsNullOrWhiteSpace(line))\n                    continue;\n\n                //separate the position from the logic\n                int openParenthesisIndex = line.IndexOf('(');\n                int closeParenthesisIndex = line.IndexOf(')');\n", "                if (openParenthesisIndex == -1 || closeParenthesisIndex == -1) //may be some empty line or some example written by the AI\n                    continue;\n\n                var position = line.Substring(openParenthesisIndex + 1, closeParenthesisIndex - openParenthesisIndex - 1);\n                var prompt = line.Substring(closeParenthesisIndex + 1);\n\n                var positionParts = position.Split(',');\n\n                //read the position and beware that ChatGPT returns a dot as decimal separator, while in some countries Unity expects a comma\n                Vector3 readPosition = new Vector3(\n                    float.Parse(positionParts[0],System.Globalization.CultureInfo.InvariantCulture),\n                    float.Parse(positionParts[1],System.Globalization.CultureInfo.InvariantCulture),\n                    float.Parse(positionParts[2],System.Globalization.CultureInfo.InvariantCulture));\n\n                //generate a cube on the position\n                CubesManager.Instance.AddCubeToCurrentGroup(readPosition, Quaternion.identity, Vector3.one);\n\n                //generate the logic for the cube\n                await CubesManager.Instance.GenerateLogicForGroupFromText(prompt);\n            }\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/CubesManagement/Scripts/ICreatesLogicFromPrompt.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing vrroom.Dynaimic.GenerativeLogic;", "using UnityEngine;\nusing vrroom.Dynaimic.GenerativeLogic;\n\nnamespace vrroom.CubicMusic.CubesMgmt\n{\n\n    /// <summary>\n    /// Interface for objects that generate logic from an AI prompt\n    /// </summary>\n    public interface ICreatesLogicFromPrompt\n    {\n        /// <summary>\n        /// Template used to give more context to every prompt to make the instructions clearer to the AI\n        /// </summary>\n        AiPromptTemplate PromptTemplate { get; }\n\n        /// <summary>\n        /// Generate logic for a group of objects from a text prompt\n        /// </summary>\n        /// <param name=\"prompt\">The text prompt of the behaviour to implement</param>\n        /// <param name=\"cancellationToken\">Cancellation token</param>\n        Task GenerateLogicForGroupFromText(string prompt, CancellationToken cancellationToken = default);\n\n        /// <summary>\n        /// Generate logic for a group of objects from a text prompt\n        /// </summary>\n        /// <param name=\"audioPrompt\">The audio prompt of the behaviour to implement</param>\n        /// <param name=\"cancellationToken\">Cancellation token</param>\n        Task GenerateLogicForGroupFromAudio(AudioClip audioPrompt, CancellationToken cancellationToken = default);\n    }\n\n}", "    /// </summary>\n    public interface ICreatesLogicFromPrompt\n    {\n        /// <summary>\n        /// Template used to give more context to every prompt to make the instructions clearer to the AI\n        /// </summary>\n        AiPromptTemplate PromptTemplate { get; }\n\n        /// <summary>\n        /// Generate logic for a group of objects from a text prompt\n        /// </summary>\n        /// <param name=\"prompt\">The text prompt of the behaviour to implement</param>\n        /// <param name=\"cancellationToken\">Cancellation token</param>\n        Task GenerateLogicForGroupFromText(string prompt, CancellationToken cancellationToken = default);\n\n        /// <summary>\n        /// Generate logic for a group of objects from a text prompt\n        /// </summary>\n        /// <param name=\"audioPrompt\">The audio prompt of the behaviour to implement</param>\n        /// <param name=\"cancellationToken\">Cancellation token</param>\n        Task GenerateLogicForGroupFromAudio(AudioClip audioPrompt, CancellationToken cancellationToken = default);\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/CubesManagement/Scripts/CubesGenerator.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing UnityEngine;\nusing UnityEngine.InputSystem;\n\nnamespace vrroom.CubicMusic.CubesMgmt", "\nnamespace vrroom.CubicMusic.CubesMgmt\n{\n    /// <summary>\n    /// Generates the cubes in the scene to which the AI logic can be added at runtime\n    /// </summary>\n    public class CubesGenerator : MonoBehaviour\n    {\n        /// <summary>\n        /// Action to be used to add a cube to the scene\n        /// </summary>\n        [SerializeField]", "        private InputActionReference m_addCubeAction;\n\n        /// <summary>\n        /// On Enable\n        /// </summary>\n        private void OnEnable()\n        {\n            m_addCubeAction.action.performed += AddCubeActionPerformed;\n        }\n\n        /// <summary>\n        /// On Enable\n        /// </summary>", "        private void OnDisable()\n        {\n            m_addCubeAction.action.performed -= AddCubeActionPerformed;\n        }\n\n        /// <summary>\n        /// Callback called when the action to add a cube is performed\n        /// </summary>\n        /// <param name=\"obj\"></param>\n        private void AddCubeActionPerformed(InputAction.CallbackContext obj)\n        {\n            CubesManager.Instance.AddCubeToCurrentGroup(transform.position, transform.rotation, transform.lossyScale);\n        }\n    }\n\n}", "        private void AddCubeActionPerformed(InputAction.CallbackContext obj)\n        {\n            CubesManager.Instance.AddCubeToCurrentGroup(transform.position, transform.rotation, transform.lossyScale);\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/CubesManagement/Scripts/ObjectsGroupLogicHandler.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing RoslynCSharp;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace vrroom.CubicMusic.CubesMgmt", "\nnamespace vrroom.CubicMusic.CubesMgmt\n{\n    /// <summary>\n    /// Handles the runtime addition-removal of logic from a group of objects\n    /// </summary>\n    public class ObjectsGroupLogicHandler\n    {\n        /// <summary>\n        /// The objects that are part of the group\n        /// </summary>\n        private List<GameObject> m_groupObjects;\n\n        /// <summary>\n        /// Maps every gameobject to the list of instantiated scripts on that object\n        /// </summary>\n        private Dictionary<GameObject, List<ScriptProxy>> m_instantiatedScriptsByGo;\n\n        /// <summary>\n        /// Saves all the script types that have been added to the group\n        /// </summary>\n        private HashSet<ScriptType> m_addedScriptTypes;\n\n        /// <summary>\n        /// Get the number of objects in the group\n        /// </summary>", "        public int Count => m_groupObjects.Count;\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        public ObjectsGroupLogicHandler() \n        {\n            m_groupObjects = new List<GameObject>();\n            m_instantiatedScriptsByGo = new Dictionary<GameObject, List<ScriptProxy>>();\n            m_addedScriptTypes = new HashSet<ScriptType>();\n        }\n        \n        /// <summary>\n        /// Add an object to the group\n        /// </summary>\n        /// <param name=\"go\">Gameobject to add</param>\n        /// <param name=\"addExistingLogic\">True to add to the object the scripts already added to the existing ones, false otherwise</param>", "        public void AddObjectToCurrentGroup(GameObject go, bool addExistingLogic = false)\n        {\n            m_groupObjects.Add(go);\n            m_instantiatedScriptsByGo.Add(go, new List<ScriptProxy>());\n\n            if(addExistingLogic)\n            {\n                // Add the existing logic to the object\n                foreach (var scriptType in m_addedScriptTypes)\n                {\n                    AttachLogicToGameObject(scriptType, go);\n                }\n            }\n        }\n\n        /// <summary>\n        /// Attach a runtime script to all the objects in the group.\n        /// Only script types that have not been attached previously will be added (no duplicates admitted)\n        /// </summary>\n        /// <param name=\"script\">Runtime script to add</param>", "                foreach (var scriptType in m_addedScriptTypes)\n                {\n                    AttachLogicToGameObject(scriptType, go);\n                }\n            }\n        }\n\n        /// <summary>\n        /// Attach a runtime script to all the objects in the group.\n        /// Only script types that have not been attached previously will be added (no duplicates admitted)\n        /// </summary>\n        /// <param name=\"script\">Runtime script to add</param>", "        public void AttachLogicToGroupElements(ScriptType script)\n        {\n            // Check if the script has been already added to the group. If so, do nothing\n            if (m_addedScriptTypes.Contains(script))\n                return;\n\n            // Save the script type as added\n            m_addedScriptTypes.Add(script);\n\n            // Attach the logic to all the objects in the group\n            foreach (GameObject go in m_groupObjects)\n            {\n                AttachLogicToGameObject(script, go);\n            }\n        }\n\n        /// <summary>\n        /// Removes a runtime script from all the objects in the group\n        /// </summary>\n        /// <param name=\"script\">Runtime script to add</param>", "            foreach (GameObject go in m_groupObjects)\n            {\n                AttachLogicToGameObject(script, go);\n            }\n        }\n\n        /// <summary>\n        /// Removes a runtime script from all the objects in the group\n        /// </summary>\n        /// <param name=\"script\">Runtime script to add</param>\n        public void RemoveLogicFromGroupElements(ScriptType script)\n        {\n            // Check if the script has been already added to the group. If not, do nothing", "        public void RemoveLogicFromGroupElements(ScriptType script)\n        {\n            // Check if the script has been already added to the group. If not, do nothing\n            if (!m_addedScriptTypes.Contains(script))\n                return;\n\n            // Remove the script type from the added ones\n            m_addedScriptTypes.Remove(script);\n\n            // Attach the logic to all the objects in the group\n            foreach (GameObject go in m_groupObjects)\n            {\n                RemovesLogicFromGameObject(script, go);\n            }\n        }\n\n        /// <summary>\n        /// Attaches a runtime script to a gameobject, but only if the script has not been attached to the object yet\n        /// </summary>\n        /// <param name=\"script\">Runtime script</param>\n        /// <param name=\"go\">Gameobject to attach this script to</param>\n        /// <returns>True if the script was attached, false if it was not because it was duplicated</returns>", "            foreach (GameObject go in m_groupObjects)\n            {\n                RemovesLogicFromGameObject(script, go);\n            }\n        }\n\n        /// <summary>\n        /// Attaches a runtime script to a gameobject, but only if the script has not been attached to the object yet\n        /// </summary>\n        /// <param name=\"script\">Runtime script</param>\n        /// <param name=\"go\">Gameobject to attach this script to</param>\n        /// <returns>True if the script was attached, false if it was not because it was duplicated</returns>", "        private bool AttachLogicToGameObject(ScriptType script, GameObject go)\n        {\n            // Check if the script has been already attached to the object\n            var existingProxy = m_instantiatedScriptsByGo[go].Find(p => p.ScriptType == script);\n\n            //if not\n            if (existingProxy == null) {\n                //let's add it to the gameobject and to the list of instantiated scripts\n                var proxy = script.CreateInstance(go);\n                m_instantiatedScriptsByGo[go].Add(proxy);\n\n                return true;\n            }\n            //if it is, just return false\n            else\n                return false;\n        }\n\n        /// <summary>\n        /// Removes a runtime script from a gameobject, but only if the script was attached to the object\n        /// </summary>\n        /// <param name=\"script\">Runtime script</param>\n        /// <param name=\"go\">Gameobject to remove this script from</param>\n        /// <returns>True if the script was removed, false if it was not because it was not present</returns>", "        private bool RemovesLogicFromGameObject(ScriptType script, GameObject go)\n        {\n            // Check if the script has been already attached to the object\n            var existingProxy = m_instantiatedScriptsByGo[go].Find(p => p.ScriptType == script);\n\n            //if not, don't anything\n            if (existingProxy == null)\n                return false;\n            //if it is, remove it from the list of instantiated scripts and then destroy it\n            else\n            {\n                m_instantiatedScriptsByGo[go].Remove(existingProxy);\n                existingProxy.Dispose();\n                return true;\n            }\n\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/CubesManagement/Scripts/CubesManager.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing RoslynCSharp;\nusing System.Collections.Generic;\nusing System.Runtime.CompilerServices;\nusing System.Threading;\nusing System.Threading.Tasks;", "using System.Threading;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing vrroom.Dynaimic.Ai;\nusing vrroom.Dynaimic.GenerativeLogic;\n\nnamespace vrroom.CubicMusic.CubesMgmt\n{\n    /// <summary>\n    /// Main class of the CubicMusic system. It manages the creation and destruction of the cubes and the logic attached to them\n    /// </summary>\n    [DefaultExecutionOrder(-1)]", "    /// <summary>\n    /// Main class of the CubicMusic system. It manages the creation and destruction of the cubes and the logic attached to them\n    /// </summary>\n    [DefaultExecutionOrder(-1)]\n    public class CubesManager : MonoBehaviour, ICreatesLogicFromPrompt\n    {\n        /// <summary>\n        /// The prompt template to generate Unity scripts that can be added to the cubes at runtime without requiring\n        /// the setup of public properties. Scripts should work out of the bo\n        /// </summary>\n        static readonly AiPromptTemplate s_promptTemplateForUnityScripts = new AiPromptTemplate()\n        {\n            PrePrompt = @\"Generate a Unity C# script with internally initialized properties that does the following to the gameobject: \",\n            PostPrompt = @\"The script should work out of the box without requiring any external configuration. Here are the requirements:\n                        - The script can NOT include public properties.\n                        - The properties should be initialized internally within the script, in the start method.\n                        - If the property is a prefab, initialize it with a primitive, in the start method.\n                        - The properties should not be modifiable from external sources.\n                        - The script should include any necessary logic or code that utilizes these properties.                        \n                        - IF and only if the query is about the microphone, you can use vrroom.CubicMusic.Audio.AudioManager.Instance.MicrophoneAnalyzer.CurrentVolume property, range from 0 to 1.\n                        - IF and only if the query is about the music, you can use vrroom.CubicMusic.Audio.AudioManager.Instance.BackgroundMusicAnalyzer.CurrentVolume, range from 0 to 1.      \n                        - IF and only if the gameobject has to interact the hand, the hand can be found as a trigger collider on the Hand layer. Ignore this if the hand is not involved in the query.\n                        Please generate the Unity script meeting these specifications.\"\n        };\n\n        /// <summary>\n        /// The prefab to use for the cubes to generate. If null, a default cube will be used\n        /// </summary>\n        [SerializeField]", "        public GameObject CubePrefab;\n\n        /// <summary>\n        /// The assemblies that the generated scripts will reference\n        /// </summary>\n        [SerializeField]\n        private AssemblyReferenceAsset[] m_referenceAssemblies;\n\n        /// <summary>\n        /// The element that performs the queries to the AI cloud\n        /// </summary>", "        private AiQueryPerformer m_aiQueryPerformer;\n\n        /// <summary>\n        /// The element that creates the logic from the AI prompts\n        /// </summary>\n        private GenerativeLogicManager m_generativeLogicManager;\n\n        /// <summary>\n        /// The list of cube groups managed by this object.\n        /// Every group contains a list of cubes to which logic can be added at runtime\n        /// </summary>\n        private List<ObjectsGroupLogicHandler> m_managedCubeGroups;\n\n        /// <inheritdoc />", "        public AiPromptTemplate PromptTemplate => s_promptTemplateForUnityScripts;\n\n        /// <summary>\n        /// Get the element that performs the queries to the AI cloud\n        /// </summary>\n        public AiQueryPerformer AiQueryPerformer => m_aiQueryPerformer;\n\n        /// <summary>\n        /// Singleton instance\n        /// </summary>\n        public static CubesManager Instance;\n\n        /// <summary>\n        /// Awake\n        /// </summary>", "        public static CubesManager Instance;\n\n        /// <summary>\n        /// Awake\n        /// </summary>\n        private void Awake()\n        {\n            //destroy this object if another instance already exists\n            if(Instance != null && Instance != this)\n            {\n                Destroy(this);\n                return;\n            }\n            //else we are the singleton instance\n            else\n            {\n                Instance = this;\n\n                //initialize a few things\n                m_managedCubeGroups = new List<ObjectsGroupLogicHandler>(1);\n                m_managedCubeGroups.Add(new ObjectsGroupLogicHandler()); //creates the first group\n\n                m_aiQueryPerformer = new OpenAiQueryPerformer();\n                m_generativeLogicManager = new GenerativeLogicManager(m_aiQueryPerformer, new AiGenerationParameters(), m_referenceAssemblies);\n\n                Debug.Log(\"[Cubes Manager] Initialized\");\n            }\n            \n        }\n\n        /// <summary>\n        /// Adds a cube at the specified position, rotation and scale to the current managed group\n        /// </summary>\n        /// <param name=\"position\">Position</param>\n        /// <param name=\"rotation\">Rotation</param>\n        /// <param name=\"scale\">Local scale</param>", "            if(Instance != null && Instance != this)\n            {\n                Destroy(this);\n                return;\n            }\n            //else we are the singleton instance\n            else\n            {\n                Instance = this;\n\n                //initialize a few things\n                m_managedCubeGroups = new List<ObjectsGroupLogicHandler>(1);\n                m_managedCubeGroups.Add(new ObjectsGroupLogicHandler()); //creates the first group\n\n                m_aiQueryPerformer = new OpenAiQueryPerformer();\n                m_generativeLogicManager = new GenerativeLogicManager(m_aiQueryPerformer, new AiGenerationParameters(), m_referenceAssemblies);\n\n                Debug.Log(\"[Cubes Manager] Initialized\");\n            }\n            \n        }\n\n        /// <summary>\n        /// Adds a cube at the specified position, rotation and scale to the current managed group\n        /// </summary>\n        /// <param name=\"position\">Position</param>\n        /// <param name=\"rotation\">Rotation</param>\n        /// <param name=\"scale\">Local scale</param>", "        public void AddCubeToCurrentGroup(Vector3 position, Quaternion rotation, Vector3 scale)\n        {\n            GameObject cube = GenerateCube();\n            cube.transform.position = position;\n            cube.transform.rotation = rotation;\n            cube.transform.localScale = scale;\n            m_managedCubeGroups[0].AddObjectToCurrentGroup(cube);\n\n            Debug.Log($\"[Cubes Manager] New cube added to the group. Number of cubes is now {m_managedCubeGroups[0].Count}\");\n        }\n\n        /// <inheritdoc />", "        public async Task GenerateLogicForGroupFromAudio(AudioClip audioPrompt, CancellationToken cancellationToken = default)\n        {\n            Debug.Log($\"[Cubes Manager] Requested logic from audio prompt\");\n\n            var script = await m_generativeLogicManager.GenerateLogicFromAudio(audioPrompt, s_promptTemplateForUnityScripts, cancellationToken);\n            Debug.Log($\"[Cubes Manager] Script generated from audio is called {script.FullName}\");\n\n            AttachScriptToGroup(script);\n        }\n\n        /// <inheritdoc />", "        public async Task GenerateLogicForGroupFromText(string prompt, CancellationToken cancellationToken = default)\n        {\n            Debug.Log($\"[Cubes Manager] Requested logic from text prompt\");\n\n            ScriptType script = null;\n            int tries = 0;\n            do\n            {\n                script = await m_generativeLogicManager.GenerateLogicFromText(prompt, s_promptTemplateForUnityScripts, cancellationToken);\n\n                if (script != null) //in case of error, the script is null\n                {\n                    Debug.Log($\"[Cubes Manager] Script generated from text is called {script.FullName}\");\n                    AttachScriptToGroup(script);\n                }", "                if (script != null) //in case of error, the script is null\n                {\n                    Debug.Log($\"[Cubes Manager] Script generated from text is called {script.FullName}\");\n                    AttachScriptToGroup(script);\n                }\n            } while (script == null && ++tries < 3); //if a script fails, try again a few times\n        }\n\n        /// <summary>\n        /// Generates a cube\n        /// </summary>\n        /// <returns>Generated cube</returns>\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]", "        private GameObject GenerateCube()\n        {\n            if (CubePrefab == null)\n            {\n                return GameObject.CreatePrimitive(PrimitiveType.Cube);\n            }\n            else\n            {\n                return Object.Instantiate(CubePrefab);\n            }\n        }\n\n        /// <summary>\n        /// Attaches the specified script to the current group.\n        /// After this, a new group is created and becomes the current group\n        /// </summary>\n        /// <param name=\"script\">Script that has been generated</param>", "        private void AttachScriptToGroup(ScriptType script)\n        {\n            m_managedCubeGroups[0].AttachLogicToGroupElements(script);\n            m_managedCubeGroups.Insert(0, new ObjectsGroupLogicHandler());\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/AudioManagement/BackgroundMusic.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing UnityEngine;\n\nnamespace vrroom.CubicMusic.Audio\n{\n    /// <summary>", "{\n    /// <summary>\n    /// Sets the current audio source as background music\n    /// </summary>\n    [RequireComponent(typeof(AudioSource))]\n    public class BackgroundMusic : MonoBehaviour\n    {\n        /// <summary>\n        /// Start\n        /// </summary>\n        void Start()\n        {\n            AudioManager.Instance.SetBackgroundMusic(GetComponent<AudioSource>());\n        }\n\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/AudioManagement/MicrophoneManager.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing UnityEngine;\n\nnamespace vrroom.CubicMusic.Audio\n{", "namespace vrroom.CubicMusic.Audio\n{\n    /// <summary>\n    /// Act as a centralized manager for a certain microphone of the application\n    /// </summary>\n    public class MicrophoneManager\n    {\n        /// <summary>\n        /// The audio clip of the microphone. It may be still recording, or the\n        /// clip from the previous recording\n        /// </summary>", "        public AudioClip MicAudioClip { get; private set; }\n\n        /// <summary>\n        /// The name of the device to use for recording.\n        /// null to use the default microphone\n        /// </summary>\n        private string m_deviceName;\n\n        /// <summary>\n        /// Get the position in samples of the recording\n        /// </summary>", "        public int Position => Microphone.GetPosition(m_deviceName);\n\n        /// <summary>\n        /// True if the microphone is recording, false otherwise\n        /// </summary>\n        public bool IsRecording => Microphone.IsRecording(m_deviceName);\n\n        /// <summary>\n        /// Event called when the recording starts\n        /// </summary>\n        public Action<string, AudioClip> OnRecordingStarted;\n\n        /// <summary>        \n        /// Event called when the recording ends\n        /// </summary>\n        public Action<string, AudioClip> OnRecordingEnded;\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        /// <param name=\"deviceName\">The name of the device to use for recording. null to use the default microphone</param>\n        public MicrophoneManager(string deviceName = null)\n        {\n            m_deviceName = deviceName;\n        }\n\n        /// <summary>\n        /// Start recording from the microphone. If a recording is already in progress, it will be stopped\n        /// </summary>\n        /// <param name=\"loop\">True to loop the detection after lengthSec is reached</param>\n        /// <param name=\"lengthSec\">How many seconds maximum long should be the recorded Audioclip</param>\n        /// <param name=\"frequency\">Frequency of the recording</param>\n        /// <returns>AudioClip used by the recording microphone. Beware that this will be overwritten by the next recording</returns>", "        public AudioClip StartRecording(bool loop = true, int lengthSec = 20, int frequency = 44100)\n        {\n            if (Microphone.devices.Length == 0)\n            {\n                Debug.LogWarning(\"No microphone detected. No recording will start\");\n                return null;\n            }\n            if (Microphone.IsRecording(m_deviceName))\n            {\n                Debug.LogWarning(\"Microphone is already recording. Stopping it...\");\n                Microphone.End(m_deviceName);\n            }\n\n            MicAudioClip = Microphone.Start(m_deviceName, loop, lengthSec, frequency);\n            OnRecordingStarted?.Invoke(m_deviceName, MicAudioClip);\n\n            return MicAudioClip;\n        }\n\n        /// <summary>\n        /// Finishes recording from the microphone\n        /// </summary>\n        /// <returns>The recorded audioclip. It will be created by this method, and should be destroyed by the caller</returns>", "        public AudioClip EndRecording()\n        {\n            if (Microphone.devices.Length == 0)\n            {\n                Debug.LogWarning(\"No microphone detected\");\n                return null;\n            }\n            if (!Microphone.IsRecording(null))\n            {\n                Debug.LogWarning(\"Microphone is not recording\");\n                return null;\n            }\n\n            //saves the recorded audio clip up to now\n            var recordedAudioClip = CreateAudioClipWithRecordedData();\n\n            //stop the recording\n            Microphone.End(m_deviceName);\n            OnRecordingEnded?.Invoke(m_deviceName, MicAudioClip);\n\n            //returns the recorded audioclip\n            return recordedAudioClip;\n        }\n\n        /// <summary>\n        /// Create a new audioclip from the current recording\n        /// </summary>\n        /// <remarks>\n        /// We need this method because the AudioClip used by the Microphone is always the same,\n        /// so if we don't want the data to be overwritten, we need to create a new one with\n        /// a deep copy of the recorded data\n        /// </remarks>\n        /// <returns>Audio clip with recorded data</returns>", "        private AudioClip CreateAudioClipWithRecordedData()\n        {\n            //create a new audioclip that stores the data of the Microphone clip up to the current position\n            //and return it\n            float[] samples = new float[MicAudioClip.samples];\n            MicAudioClip.GetData(samples, 0);\n            var newAudioClip = AudioClip.Create(Guid.NewGuid().ToString(), this.Position, MicAudioClip.channels, MicAudioClip.frequency, false);\n            newAudioClip.SetData(samples, 0);\n\n            return newAudioClip;\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/AudioManagement/AudioAnalyzer.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace vrroom.CubicMusic.Audio", "\nnamespace vrroom.CubicMusic.Audio\n{\n    /// <summary>\n    /// Interface for elements that analyze some audio source\n    /// </summary>\n    public abstract class IAudioAnalyzer\n    {\n        /// <summary>\n        /// The sensitivity of the volume detection. \n        /// The higher this value, the higher the <see cref=\"CurrentVolume\"/>\n        /// </summary>", "        public abstract float VolumeSensitivity { get; set; }\n\n        /// <summary>\n        /// The current volume of the audio, in the range [0, 1]\n        /// </summary>\n        public abstract float CurrentVolume { get; }\n    }\n\n    /// <summary>\n    /// Analyzes the audio output of an audio source that is playing\n    /// </summary>", "    public class AudioAnalyzer : IAudioAnalyzer\n    {\n        /// <summary>\n        /// The element providing the audio data (e.g. the microphone)\n        /// </summary>\n        private IAudioDataSource m_audioDataSource;\n\n        /// <summary>\n        /// Array that contains the values we read from the audio source\n        /// </summary>\n        private float[] m_audioReadValue;\n\n        /// <summary>\n        /// Number of samples we read from the audio source\n        /// </summary>", "        private int m_samplesCount;\n\n        /// <summary>\n        /// Alpha value for the running average, used to provide smoothing of the volume.\n        /// Every frame the volume is computed as alpha * currentVolume + (1 - alpha) * newVolume\n        /// </summary>\n        private float m_runningAvgAlpha;\n\n        /// <summary>\n        /// The sensitivity of the volume detection\n        /// </summary>", "        private float m_volumeSensitivity;\n\n        /// <summary>\n        /// Current volume of the audio\n        /// </summary>\n        private float m_currentVolumeValue = 0;        \n\n        /// <inheritdoc/>\n        public override float VolumeSensitivity { get => m_volumeSensitivity; set => m_volumeSensitivity = value; }\n\n        /// <inheritdoc/>", "        public override float VolumeSensitivity { get => m_volumeSensitivity; set => m_volumeSensitivity = value; }\n\n        /// <inheritdoc/>\n        public override float CurrentVolume\n        {\n            get\n            {\n                ComputeVolume();\n                return Mathf.Clamp01(m_currentVolumeValue * VolumeSensitivity);\n            }\n        }\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        /// <param name=\"volumeSensitivity\">Sensitivity of the detection. Higher values means there will be higher values in return for the same audio level</param>\n        /// <param name=\"samplesCount\">Number of samples to use to compute the volume</param>\n        /// <param name=\"runningAvgAlpha\">Alpha constant for running average, used for smoothing. Higher values produce more smoothed results</param>\n        public AudioAnalyzer(IAudioDataSource audioDataSource, float volumeSensitivity = 10, int samplesCount = 128, float runningAvgAlpha = 0.25f)\n        {\n            m_audioDataSource = audioDataSource;\n            m_samplesCount = samplesCount;\n            m_runningAvgAlpha = runningAvgAlpha;\n            m_audioReadValue = new float[samplesCount];\n            m_volumeSensitivity = volumeSensitivity;\n        }\n\n        /// <summary>\n        /// Computes the volume of the audio source in this moment\n        /// </summary>", "        private void ComputeVolume()\n        {\n            if (m_audioDataSource == null || !m_audioDataSource.IsPlaying)\n                return;\n\n            //read audio source data and compute the sum of the absolute values\n            float sum = 0;\n\n            for (int c = 0; c < m_audioDataSource.AudioChannels; c++)\n            {\n                m_audioDataSource.GetAudioData(m_audioReadValue, c);\n", "            for (int c = 0; c < m_audioDataSource.AudioChannels; c++)\n            {\n                m_audioDataSource.GetAudioData(m_audioReadValue, c);\n\n                for (int i = 0; i < m_audioReadValue.Length; i++)\n                    sum += Mathf.Abs(m_audioReadValue[i]);\n            }\n\n            //compute the running average: alpha * currentVolume + (1 - alpha) * newVolume\n            m_currentVolumeValue = m_currentVolumeValue * m_runningAvgAlpha + (sum / (m_samplesCount * m_audioDataSource.AudioChannels)) * (1 - m_runningAvgAlpha);\n        }\n\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/AudioManagement/AudioManager.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing UnityEngine;\nusing vrroom.Dynaimic.Common;\n\nnamespace vrroom.CubicMusic.Audio", "\nnamespace vrroom.CubicMusic.Audio\n{\n    /// <summary>\n    /// Manages the audio in the application\n    /// </summary>\n    public class AudioManager : Singleton<AudioManager>\n    {\n        /// <summary>\n        /// The microphone manager to be used by the application\n        /// </summary>", "        public MicrophoneManager MicrophoneManager { get; private set; }\n\n        /// <summary>\n        /// Analyzer of data of the background music. Can be null if there is no background music set.\n        /// Use <see cref=\"SetBackgroundMusic(AudioSource)\"/> to set the background music.\n        /// </summary>\n        public IAudioAnalyzer BackgroundMusicAnalyzer { get; private set; }\n\n        /// <summary>\n        /// Analyzer of data of the microphone\n        /// </summary>", "        public IAudioAnalyzer MicrophoneAnalyzer { get; private set; }\n\n        /// <summary>\n        /// Constructor with initialization\n        /// </summary>\n        public AudioManager()\n        {\n            MicrophoneManager = new MicrophoneManager();\n            MicrophoneManager.StartRecording();\n            MicrophoneManager.OnRecordingEnded += OnMicrophoneRecordingEnded;   \n            MicrophoneAnalyzer = new AudioAnalyzer(new MicrophoneAudioDataSource(MicrophoneManager), 15);\n        }\n\n        /// <summary>\n        /// Called when the microphone recording ends. It restarts the recording automatically\n        /// to keep the microphone analysis going on always\n        /// </summary>\n        /// <param name=\"deviceName\">Ignored</param>\n        /// <param name=\"recordedAudioClip\">Ignored</param>", "        private void OnMicrophoneRecordingEnded(string deviceName, AudioClip recordedAudioClip)\n        {\n            MicrophoneManager.StartRecording();\n        }\n\n        /// <summary>\n        /// Set the background music to be analyzed\n        /// </summary>\n        /// <param name=\"audioSource\">Audiosource of the background music</param>\n        public void SetBackgroundMusic(AudioSource audioSource) \n        {\n            BackgroundMusicAnalyzer = new AudioAnalyzer(new AudioSourceDataSource(audioSource));\n        }\n    }\n\n}", "        public void SetBackgroundMusic(AudioSource audioSource) \n        {\n            BackgroundMusicAnalyzer = new AudioAnalyzer(new AudioSourceDataSource(audioSource));\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_CubicMusic/Runtime/AudioManagement/AudioDataSources.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace vrroom.CubicMusic.Audio", "\nnamespace vrroom.CubicMusic.Audio\n{\n    /// <summary>\n    /// Interface for elements that provide audio data\n    /// </summary>\n    public interface IAudioDataSource\n    {\n        /// <summary>\n        /// True if the audio source is playing (so data is available), false otherwise\n        /// </summary>\n        abstract bool IsPlaying { get; }\n\n        /// <summary>\n        /// The number of channels of the audio source\n        /// </summary>\n        abstract int AudioChannels { get; }\n\n        /// <summary>\n        /// Gets the audio data from a specific channel of the audio source\n        /// </summary>\n        /// <param name=\"data\">Array of data that will be filled by the function</param>\n        /// <param name=\"channel\">Channel of interest</param>\n        abstract void GetAudioData(float[] data, int channel);\n    }\n\n    /// <summary>\n    /// Audio data source that uses an <see cref=\"AudioSource\"/> as data source\n    /// </summary>", "    public class AudioSourceDataSource : IAudioDataSource\n    {\n        /// <summary>\n        /// Audio Source of interest\n        /// </summary>\n        private AudioSource m_audioSource;\n\n        /// <inheritdoc/>\n        public bool IsPlaying => m_audioSource != null && m_audioSource.isPlaying;\n\n        /// <inheritdoc/>", "        public bool IsPlaying => m_audioSource != null && m_audioSource.isPlaying;\n\n        /// <inheritdoc/>\n        public int AudioChannels => (m_audioSource != null && m_audioSource.clip != null) ? m_audioSource.clip.channels : 0;\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        /// <param name=\"audioSource\">The audio source to use as audio source :)</param>\n        public AudioSourceDataSource(AudioSource audioSource) \n        { \n            m_audioSource = audioSource;\n        }\n\n        /// <inheritdoc/>", "        public void GetAudioData(float[] data, int channel)\n        {\n            m_audioSource.GetOutputData(data, channel);\n        }\n    }\n\n    /// <summary>\n    /// Audio data source that uses a <see cref=\"MicrophoneManager\"/> as data source\n    /// </summary>\n    public class MicrophoneAudioDataSource : IAudioDataSource\n    {\n        /// <summary>\n        /// The manager of the microphone to use\n        /// </summary>", "    public class MicrophoneAudioDataSource : IAudioDataSource\n    {\n        /// <summary>\n        /// The manager of the microphone to use\n        /// </summary>\n        private MicrophoneManager m_microphoneManager;\n\n        /// <inheritdoc/>\n        public bool IsPlaying => m_microphoneManager.IsRecording;\n\n        /// <inheritdoc/>", "        public bool IsPlaying => m_microphoneManager.IsRecording;\n\n        /// <inheritdoc/>\n        public int AudioChannels => 1;\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        /// <param name=\"deviceName\">Name of the microphone device to use</param>\n        public MicrophoneAudioDataSource(MicrophoneManager microphoneManager)\n        {\n            m_microphoneManager = microphoneManager;\n        }\n\n        /// <inheritdoc/>", "        public void GetAudioData(float[] data, int channel)\n        {\n            int micPosition = m_microphoneManager.Position - (data.Length + 1);\n\n            if (micPosition < 0)\n                return;\n\n            m_microphoneManager.MicAudioClip.GetData(data, micPosition);\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_DynaimicLogic/Runtime/GenerativeLogic/GenerativeLogicManager.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing OpenAI.Audio;\nusing RoslynCSharp;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading;", "using System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing vrroom.Dynaimic.Ai;\n\nnamespace vrroom.Dynaimic.GenerativeLogic\n{\n    /// <summary>\n    /// Generates runtime logic (compiled C# scripts) starting from some prompts to the AI", "    /// <summary>\n    /// Generates runtime logic (compiled C# scripts) starting from some prompts to the AI\n    /// </summary>\n    public class GenerativeLogicManager\n    {\n        /// <summary>\n        /// The element that performs the queries to the AI cloud\n        /// </summary>\n        private AiQueryPerformer m_aiQueryPerformer;\n\n        /// <summary>\n        /// Parameters for the completion queries. We use always the same parameters for all the queries\n        /// </summary>", "        private AiQueryPerformer m_aiQueryPerformer;\n\n        /// <summary>\n        /// Parameters for the completion queries. We use always the same parameters for all the queries\n        /// </summary>\n        private AiGenerationParameters m_aiParameters;\n\n        /// <summary>\n        /// Runtime domain where the generated scripts will be loaded\n        /// </summary>\n        private ScriptDomain m_scriptsDomain;\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        /// <param name=\"aiQueryPerformer\">Element that performs the queries to the AI backend</param>\n        /// <param name=\"aiParameters\">Parameters for the completion queries. We use the same for all queries for simplicity</param>\n        /// <param name=\"referenceAssets\">The assemblies that are the references of the scripts being generated</param>\n        public GenerativeLogicManager(AiQueryPerformer aiQueryPerformer, AiGenerationParameters aiParameters, AssemblyReferenceAsset[] referenceAssets)\n        {\n            //create the runtime domain where the scripts will be loaded and add the references\n            m_scriptsDomain = ScriptDomain.CreateDomain(nameof(vrroom.Dynaimic));\n", "        private ScriptDomain m_scriptsDomain;\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        /// <param name=\"aiQueryPerformer\">Element that performs the queries to the AI backend</param>\n        /// <param name=\"aiParameters\">Parameters for the completion queries. We use the same for all queries for simplicity</param>\n        /// <param name=\"referenceAssets\">The assemblies that are the references of the scripts being generated</param>\n        public GenerativeLogicManager(AiQueryPerformer aiQueryPerformer, AiGenerationParameters aiParameters, AssemblyReferenceAsset[] referenceAssets)\n        {\n            //create the runtime domain where the scripts will be loaded and add the references\n            m_scriptsDomain = ScriptDomain.CreateDomain(nameof(vrroom.Dynaimic));\n", "            foreach (var reference in referenceAssets)\n            {\n                m_scriptsDomain.RoslynCompilerService.ReferenceAssemblies.Add(reference);\n            }\n\n            //initialize the AI query engine\n            m_aiQueryPerformer = aiQueryPerformer;\n            m_aiParameters = aiParameters;\n        }\n\n        /// <summary>\n        /// Asks the AI to generate a script at runtime starting from a prompt\n        /// </summary>\n        /// <param name=\"prompt\">The prompt with the behaviour desired from the script</param>\n        /// <param name=\"template\">Template to use to explain better the meaning of the prompt</param>\n        /// <param name=\"cancellationToken\">Cancelation token</param>\n        /// <returns>Runtime script</returns>", "        public async Task<ScriptType> GenerateLogicFromText(string prompt, AiPromptTemplate template, CancellationToken cancellationToken = default)\n        {\n            //perform the query to the AI\n            var generatedCode = await m_aiQueryPerformer.GetCompletion(template.GenerateFullPrompt(prompt), \n                m_aiParameters.CompletionModel, m_aiParameters.Temperature, m_aiParameters.MaxTokens, cancellationToken);\n\n            //compile the generated code and load it in the runtime domain\n            try\n            {\n\n                var scriptAssembly =\n#if ROSLYNCSHARP\n                //backend is IL2CPP and we are using dotnow to load the script as interpreted in a sort of VM.\n                //Notice that this must be called on the main thread, so it is going to block the application for a few seconds \n                m_scriptsDomain.CompileAndLoadSourceInterpreted(generatedCode);\n#else\n                await Task.Run(() =>\n                    //no need to build for IL2CPP, we can load the script as it is on a separate thraed\n                    m_scriptsDomain.CompileAndLoadSource(generatedCode),\n                    cancellationToken\n                );\n#endif\n                return scriptAssembly.MainType;   \n            }", "            catch (System.Exception e)\n            {\n                Debug.LogError(e);\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Asks the AI to generate a script at runtime starting from an audio prompt in English\n        /// </summary>\n        /// <param name=\"audioPrompt\">Audioclip containing the prompt, in English language</param>\n        /// <param name=\"template\">>Template to use to explain better the meaning of the prompt</param>\n        /// <param name=\"cancellationToken\">Cancelation token</param>\n        /// <returns>Runtime script</returns>", "        public async Task<ScriptType> GenerateLogicFromAudio(AudioClip audioPrompt, AiPromptTemplate template, CancellationToken cancellationToken = default)\n        {\n            var transcription = await m_aiQueryPerformer.GetAudioTranscription(audioPrompt, \"en\", cancellationToken);\n            \n            return await GenerateLogicFromText(transcription, template, cancellationToken);\n        }\n    }\n\n    /// <summary>\n    /// Parameters related to AI completions\n    /// </summary>", "    public class AiGenerationParameters\n    {\n        /// <summary>\n        /// Type of completion model to use\n        /// </summary>\n        public AiCompletionModel CompletionModel { get; set; } = AiCompletionModel.Accurate;\n\n        /// <summary>\n        /// Temperature to use for the completion. Higher values will make the AI more creative\n        /// </summary>\n        public float Temperature { get; set; } = 0.33f;\n\n        /// <summary>\n        /// Maximum number of tokens to use for the completion\n        /// </summary>", "        public float Temperature { get; set; } = 0.33f;\n\n        /// <summary>\n        /// Maximum number of tokens to use for the completion\n        /// </summary>\n        public int MaxTokens { get; set; } = 2048;\n    }\n\n    /// <summary>\n    /// Represents a template for a prompt to the AI.\n    /// It lets specify some conditions to be applied around the\n    /// prompt that has been specified by the user, so that to\n    /// add some context that the AI system should use.\n    /// (E.g. the pre-prompt may say \"Generate a Unity script that does this:\"\n    /// so that the prompt asked by the user can only include the logic that \n    /// the user wants)\n    /// </summary>", "    public class AiPromptTemplate\n    {\n        /// <summary>\n        /// Sentence to be added before the prompt\n        /// </summary>\n        public string PrePrompt { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Sentence to be added after the prompt\n        /// </summary>\n        public string PostPrompt { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Generates the full prompt to be sent to the AI cloud solution\n        /// </summary>\n        /// <param name=\"prompt\">Prompt specified by the user</param>\n        /// <returns>Compound prompt, ready to be read by the AI</returns>", "        public string PostPrompt { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Generates the full prompt to be sent to the AI cloud solution\n        /// </summary>\n        /// <param name=\"prompt\">Prompt specified by the user</param>\n        /// <returns>Compound prompt, ready to be read by the AI</returns>\n        public string GenerateFullPrompt(string prompt)\n        {\n            return $\"{PrePrompt} {prompt} {PostPrompt}\";\n        }\n    }\n \n}"]}
{"filename": "CubicMusic/Assets/_DynaimicLogic/Runtime/AiQuerys/AiQueryPerformer.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing UnityEngine;\n", "using UnityEngine;\n\nnamespace vrroom.Dynaimic.Ai\n{\n    /// <summary>\n    /// Base class for elements that can perform queries to AI cloud solutions (e.g. OpenAI APIs)\n    /// </summary>\n    public abstract class AiQueryPerformer\n    {\n        /// <summary>\n        /// Event that is triggered when a textual prompt query is sent to the AI cloud solution.\n        /// The parameter is the prompt that was sent\n        /// </summary>\n        public Action<string> OnPromptSent;\n\n        /// <summary>\n        /// Event that is triggered when a response to a prompt query is received from the AI cloud solution.\n        /// The parameter is the response that was received \n        /// </summary>\n        public Action<string> OnPromptResponseReceived;\n\n        /// <summary>\n        /// Event that is triggered when an audio transcription query is sent to the AI cloud solution.\n        /// </summary>", "        public Action OnAudioTranscriptionSent;\n\n        /// <summary>\n        /// Event that is triggered when a response to an audio transcription request is received from the AI cloud solution.\n        /// The parameter is the response that was received\n        /// </summary>\n        public Action<string> OnAudioTranscriptionResponseReceived;\n\n        /// <summary>\n        /// Constructs the AI query performer with the given initialization data\n        /// </summary>\n        /// <param name=\"initData\">Initialization data</param>\n        public AiQueryPerformer(AiQueryPerformerInitializationData initData)\n        {\n\n        }\n\n        /// <summary>\n        /// Sends a textual prompt to the AI cloud solution and returns the completion response\n        /// </summary>\n        /// <param name=\"prompt\">Textual prompt</param>\n        /// <param name=\"model\">The AI model to use</param>\n        /// <param name=\"temperature\">Temperature to provide to the GPT system, from 0 to 1</param>\n        /// <param name=\"maxTokens\">Maximum tokens of the answer</param>\n        /// <param name=\"cancellationToken\">Cancellation token</param>\n        /// <returns>Response that completes the prompt</returns>", "        public abstract Task<string> GetCompletion(string prompt, AiCompletionModel model, float temperature, int maxTokens, CancellationToken cancellationToken = default);\n\n        /// <summary>\n        /// Sends an audio prompt to the AI cloud solution and returns the transcription\n        /// </summary>\n        /// <param name=\"audio\">Audio of interest</param>\n        /// <param name=\"language\">Language of the spoken audio in the clip</param>\n        /// <param name=\"cancellationToken\">Cancellation token</param>\n        /// <returns>Audio transcription</returns>\n        public abstract Task<string> GetAudioTranscription(AudioClip audio, string language, CancellationToken cancellationToken = default);\n    }\n\n    /// <summary>", "        public abstract Task<string> GetAudioTranscription(AudioClip audio, string language, CancellationToken cancellationToken = default);\n    }\n\n    /// <summary>\n    /// Base class for initialization data for all classes inheriting from <see cref=\"AiQueryPerformer\"/>\n    /// </summary>\n    public class AiQueryPerformerInitializationData\n    {\n    }\n\n    /// <summary>\n    /// The type of AI completion model to use\n    /// </summary>", "    public enum AiCompletionModel\n    {\n        Accurate,\n        Cheap\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_DynaimicLogic/Runtime/AiQuerys/OpenAiQueryPerformer.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing OpenAI;\nusing OpenAI.Audio;\nusing OpenAI.Models;\nusing System;\nusing System.Threading;", "using System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing UnityEngine;\n\nnamespace vrroom.Dynaimic.Ai\n{\n    /// <summary>\n    /// Performs queries to the OpenAI API\n    /// </summary>\n    public class OpenAiQueryPerformer : AiQueryPerformer\n    {\n        /// <summary>\n        /// Client that performs the queries to OpenAI \n        /// </summary>", "    /// Performs queries to the OpenAI API\n    /// </summary>\n    public class OpenAiQueryPerformer : AiQueryPerformer\n    {\n        /// <summary>\n        /// Client that performs the queries to OpenAI \n        /// </summary>\n        private OpenAIClient m_openAiClient;\n\n        /// <summary>\n        /// Constructs the AI query performer with the given initialization data\n        /// </summary>\n        public OpenAiQueryPerformer() :\n            base(new AiQueryPerformerInitializationData())\n        {\n            m_openAiClient = new OpenAIClient();\n        }\n\n        /// <summary>\n        /// Constructs the AI query performer with the given initialization data\n        /// </summary>\n        /// <param name=\"initData\">Initialization data</param>\n        public OpenAiQueryPerformer(AiQueryPerformerInitializationData initData) :\n            base(initData)\n        {\n            m_openAiClient = new OpenAIClient();\n        }\n\n        /// <inheritdoc />", "        public override async Task<string> GetCompletion(string prompt, AiCompletionModel model, float temperature, int maxTokens, CancellationToken cancellationToken = default)\n        {\n            OnPromptSent?.Invoke(prompt);\n            var result = await m_openAiClient.CompletionsEndpoint.CreateCompletionAsync(prompt, model: GetOpenAiModel(model), temperature: temperature, maxTokens: maxTokens,\n                cancellationToken: cancellationToken);\n            OnPromptResponseReceived?.Invoke(result);\n\n            return result;\n        }\n\n        /// <inheritdoc />", "        public override async Task<string> GetAudioTranscription(AudioClip audio, string language, CancellationToken cancellationToken = default)\n        {\n            OnAudioTranscriptionSent?.Invoke();\n            var request = new AudioTranscriptionRequest(audio, language: language);\n            var result = await m_openAiClient.AudioEndpoint.CreateTranscriptionAsync(request, cancellationToken);\n            OnAudioTranscriptionResponseReceived?.Invoke(result);\n\n            return result;\n        }\n\n        /// <summary>\n        /// Gets the OpenAI model that corresponds to the given AI model\n        /// </summary>\n        /// <param name=\"aiModel\">AI model of interest</param>\n        /// <returns>OpenAI model</returns>\n        /// <exception cref=\"ArgumentOutOfRangeException\">In case an unknown model is provided as parameter</exception>", "        private static Model GetOpenAiModel(AiCompletionModel aiModel)\n        {\n            switch(aiModel)\n            {\n                case AiCompletionModel.Accurate:\n                    return Model.Davinci;\n                case AiCompletionModel.Cheap:\n                    return Model.GPT3_5_Turbo;\n                default:\n                    throw new ArgumentOutOfRangeException(nameof(aiModel), aiModel, null);\n            }\n        }\n    }\n\n}"]}
{"filename": "CubicMusic/Assets/_DynaimicLogic/Runtime/Common/Singleton.cs", "chunked_list": ["/*\n * Copyright (C) Antony Vitillo (aka Skarredghost), Perpetual eMotion 2023.\n * Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).\n */\n\nusing System;\n\nnamespace vrroom.Dynaimic.Common\n{\n    /// <summary>\n    /// Base class for singletons\n    /// </summary>\n    /// <remarks>\n    /// Code from https://csharpindepth.com/articles/singleton\n    /// </remarks>", "{\n    /// <summary>\n    /// Base class for singletons\n    /// </summary>\n    /// <remarks>\n    /// Code from https://csharpindepth.com/articles/singleton\n    /// </remarks>\n    public class Singleton<T> where T: Singleton<T>, new()\n    {\n        /// <summary>\n        /// Singleton instance with lazy initialization\n        /// </summary>", "        private static readonly Lazy<T> lazy = new Lazy<T>(() => new T());\n\n        /// <summary>\n        /// Get the singleton instance\n        /// </summary>\n        public static T Instance { get { return lazy.Value; } }\n\n        /// <summary>\n        /// Constructor\n        /// </summary>\n        public Singleton()\n        {\n        }\n    }\n\n}"]}
