{"filename": "src/RosettaStone.Core/Settings.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing DatabaseWrapper.Core;\n\nnamespace RosettaStone.Core\n{\n    public class Settings\n    {\n        #region Public-Members\n", "{\n    public class Settings\n    {\n        #region Public-Members\n\n        public bool EnableConsole { get; set; } = true;\n        public WebserverSettings Webserver { get; set; } = new WebserverSettings();\n        public LoggingSettings Logging { get; set; } = new LoggingSettings();\n        public DatabaseSettings Database { get; set; } = new DatabaseSettings(\"./rosettastone.db\");\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public Settings()\n        {\n\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n\n        #region Embedded-Classes\n", "        public DatabaseSettings Database { get; set; } = new DatabaseSettings(\"./rosettastone.db\");\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public Settings()\n        {\n\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n\n        #region Embedded-Classes\n", "        public class WebserverSettings\n        {\n            public string DnsHostname { get; set; } = \"localhost\";\n            public int Port { get; set; } = 8000;\n            public bool Ssl { get; set; } = false;\n            public string AdminApiKeyHeader { get; set; } = \"x-api-key\";\n            public string AdminApiKey { get; set; } = \"rosettastoneadmin\";\n\n            public WebserverSettings()\n            {\n\n            }\n        }\n", "        public class LoggingSettings\n        {\n            public string SyslogServerIp { get; set; } = \"127.0.0.1\";\n            public int SyslogServerPort { get; set; } = 514;\n            public int MinimumSeverity { get; set; } = 0;\n            public bool ConsoleLogging { get; set; } = true;\n            public bool ConsoleColors { get; set; } = true;\n            public string LogDirectory { get; set; } = \"./logs/\";\n            public string LogFilename { get; set; } = \"rosettastone.log\";\n\n            public LoggingSettings()\n            {\n\n            }\n        }\n\n        #endregion\n    }\n}\n", "            public string LogFilename { get; set; } = \"rosettastone.log\";\n\n            public LoggingSettings()\n            {\n\n            }\n        }\n\n        #endregion\n    }\n}\n"]}
{"filename": "src/RosettaStone.Core/ResultSet.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace RosettaStone.Core\n{\n    public class ResultSet\n    {\n        #region Public-Members\n", "    public class ResultSet\n    {\n        #region Public-Members\n\n        public string Key { get; set; } = null;\n        public string Left { get; set; } = null;\n        public string Right { get; set; } = null;\n        public VendorMetadata Vendor { get; set; } = null;\n        public List<VendorMetadata> Vendors { get; set; } = null;\n        public CodecMetadata Codec { get; set; } = null;\n        public List<CodecMetadata> Codecs { get; set; } = null;\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public ResultSet()\n        {\n\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}\n", "        public CodecMetadata Codec { get; set; } = null;\n        public List<CodecMetadata> Codecs { get; set; } = null;\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public ResultSet()\n        {\n\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}\n"]}
{"filename": "src/RosettaStone.Core/VendorMetadata.cs", "chunked_list": ["\ufeffusing System;\nusing System.Text.Json.Serialization;\nusing Watson.ORM.Core;\n\nnamespace RosettaStone\n{\n    [Table(\"vendors\")]\n    public class VendorMetadata\n    {\n        #region Public-Members\n\n        [JsonIgnore]\n        [Column(\"id\", true, DataTypes.Int, false)]", "        public int Id { get; set; } = 0;\n\n        [Column(\"guid\", false, DataTypes.Nvarchar, 64, false)]\n        public string GUID { get; set; } = Guid.NewGuid().ToString();\n\n        [Column(\"key\", false, DataTypes.Nvarchar, 32, false)]\n        public string Key { get; set; } = string.Empty;\n\n        [Column(\"name\", false, DataTypes.Nvarchar, 64, false)]\n        public string Name { get; set; } = string.Empty;\n\n        [Column(\"contactinfo\", false, DataTypes.Nvarchar, 256, false)]", "        public string Name { get; set; } = string.Empty;\n\n        [Column(\"contactinfo\", false, DataTypes.Nvarchar, 256, false)]\n        public string ContactInformation { get; set; } = string.Empty;\n\n        [Column(\"isassigned\", false, DataTypes.Boolean, false)]\n        public bool IsAssigned { get; set; } = false;\n\n        [Column(\"createdutc\", false, DataTypes.DateTime, false)]\n        public DateTime CreatedUtc { get; set; } = DateTime.UtcNow;\n\n        [Column(\"lastmodifiedutc\", false, DataTypes.DateTime, 32, false)]", "        public DateTime CreatedUtc { get; set; } = DateTime.UtcNow;\n\n        [Column(\"lastmodifiedutc\", false, DataTypes.DateTime, 32, false)]\n        public DateTime LastModifiedUtc { get; set; } = DateTime.UtcNow;\n\n        public int? EditDistance { get; set; } = null;\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public VendorMetadata()\n        {\n\n        }\n\n        public VendorMetadata(string key, string name, string contactInformation)\n        {", "            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n            if (String.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));\n            if (String.IsNullOrEmpty(contactInformation)) throw new ArgumentNullException(nameof(contactInformation));\n\n            Key = key;\n            Name = name;\n            ContactInformation = contactInformation;\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}"]}
{"filename": "src/RosettaStone.Core/CodecMetadata.cs", "chunked_list": ["\ufeffusing System;\nusing System.Text.Json.Serialization;\nusing Watson.ORM.Core;\n\nnamespace RosettaStone\n{\n    [Table(\"codecs\")]\n    public class CodecMetadata\n    {\n        #region Public-Members\n\n        [JsonIgnore]\n        [Column(\"id\", true, DataTypes.Int, false)]", "        public int Id { get; set; } = 0;\n\n        [Column(\"guid\", false, DataTypes.Nvarchar, 64, false)]\n        public string GUID { get; set; } = Guid.NewGuid().ToString();\n\n        [Column(\"vendorguid\", false, DataTypes.Nvarchar, 64, false)]\n        public string VendorGUID { get; set; } = Guid.NewGuid().ToString();\n\n        [Column(\"key\", false, DataTypes.Nvarchar, 32, false)]\n        public string Key { get; set; } = string.Empty;\n\n        [Column(\"name\", false, DataTypes.Nvarchar, 64, false)]", "        public string Key { get; set; } = string.Empty;\n\n        [Column(\"name\", false, DataTypes.Nvarchar, 64, false)]\n        public string Name { get; set; } = string.Empty;\n\n        [Column(\"version\", false, DataTypes.Nvarchar, 32, false)]\n        public string Version { get; set; } = string.Empty;\n\n        [Column(\"uri\", false, DataTypes.Nvarchar, 256, false)]\n        public string Uri { get; set; } = string.Empty;\n\n        [Column(\"isassigned\", false, DataTypes.Boolean, false)]", "        public string Uri { get; set; } = string.Empty;\n\n        [Column(\"isassigned\", false, DataTypes.Boolean, false)]\n        public bool IsAssigned { get; set; } = false;\n\n        [Column(\"createdutc\", false, DataTypes.DateTime, false)]\n        public DateTime CreatedUtc { get; set; } = DateTime.UtcNow;\n\n        [Column(\"lastmodifiedutc\", false, DataTypes.DateTime, 32, false)]\n        public DateTime LastModifiedUtc { get; set; } = DateTime.UtcNow;\n\n        public int? EditDistance { get; set; } = null;\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public CodecMetadata()\n        {\n\n        }\n\n        public CodecMetadata(string key, string name, string version, string uri)\n        {", "        public DateTime LastModifiedUtc { get; set; } = DateTime.UtcNow;\n\n        public int? EditDistance { get; set; } = null;\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public CodecMetadata()\n        {\n\n        }\n\n        public CodecMetadata(string key, string name, string version, string uri)\n        {", "            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n            if (String.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));\n            if (String.IsNullOrEmpty(version)) throw new ArgumentNullException(nameof(version));\n            if (String.IsNullOrEmpty(uri)) throw new ArgumentNullException(nameof(uri));\n\n            Key = key;\n            Name = name;\n            Version = version;\n            Uri = uri;\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}"]}
{"filename": "src/RosettaStone.Core/SerializationHelper.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nnamespace RosettaStone.Core\n{\n    /// <summary>", "{\n    /// <summary>\n    /// Default serialization helper.\n    /// </summary>\n    public class SerializationHelper\n    {\n        #region Public-Members\n\n        #endregion\n\n        #region Private-Members\n\n        private ExceptionConverter<Exception> _ExceptionConverter = new ExceptionConverter<Exception>();", "        private NameValueCollectionConverter _NameValueCollectionConverter = new NameValueCollectionConverter();\n        private JsonStringEnumConverter _JsonStringEnumConverter = new JsonStringEnumConverter();\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        /// <summary>\n        /// Instantiate.\n        /// </summary>\n        public SerializationHelper()\n        {\n            InstantiateConverter();\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        /// <summary>\n        /// Deserialize JSON to an instance.\n        /// </summary>\n        /// <typeparam name=\"T\">Type.</typeparam>\n        /// <param name=\"json\">JSON string.</param>\n        /// <returns>Instance.</returns>", "        public T DeserializeJson<T>(string json)\n        {\n            JsonSerializerOptions options = new JsonSerializerOptions();\n            options.Converters.Add(_ExceptionConverter);\n            options.Converters.Add(_NameValueCollectionConverter);\n            options.Converters.Add(_JsonStringEnumConverter);\n\n            return JsonSerializer.Deserialize<T>(json, options);\n        }\n\n        /// <summary>\n        /// Serialize object to JSON.\n        /// </summary>\n        /// <param name=\"obj\">Object.</param>\n        /// <param name=\"pretty\">Pretty print.</param>\n        /// <returns>JSON.</returns>", "        public string SerializeJson(object obj, bool pretty = true)\n        {\n            if (obj == null) return null;\n\n            JsonSerializerOptions options = new JsonSerializerOptions();\n            options.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;\n\n            // see https://github.com/dotnet/runtime/issues/43026\n            options.Converters.Add(_ExceptionConverter);\n            options.Converters.Add(_NameValueCollectionConverter);\n            options.Converters.Add(_JsonStringEnumConverter);\n", "            if (!pretty)\n            {\n                options.WriteIndented = false;\n                return JsonSerializer.Serialize(obj, options);\n            }\n            else\n            {\n                options.WriteIndented = true;\n                return JsonSerializer.Serialize(obj, options);\n            }\n        }\n\n        /// <summary>\n        /// Instantiation method to support fixups for various environments, e.g. Unity.\n        /// </summary>", "        public void InstantiateConverter()\n        {\n            try\n            {\n                Activator.CreateInstance<JsonStringEnumConverter>();\n            }\n            catch (Exception)\n            {\n\n            }\n        }\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n\n        #region Private-Classes\n", "        private class ExceptionConverter<TExceptionType> : JsonConverter<TExceptionType>\n        {\n            public override bool CanConvert(Type typeToConvert)\n            {\n                return typeof(Exception).IsAssignableFrom(typeToConvert);\n            }\n\n            public override TExceptionType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n            {\n                throw new NotSupportedException(\"Deserializing exceptions is not allowed\");\n            }\n", "            public override void Write(Utf8JsonWriter writer, TExceptionType value, JsonSerializerOptions options)\n            {\n                var serializableProperties = value.GetType()\n                    .GetProperties()\n                    .Select(uu => new { uu.Name, Value = uu.GetValue(value) })\n                    .Where(uu => uu.Name != nameof(Exception.TargetSite));\n\n                if (options.DefaultIgnoreCondition == JsonIgnoreCondition.WhenWritingNull)\n                {\n                    serializableProperties = serializableProperties.Where(uu => uu.Value != null);\n                }\n\n                var propList = serializableProperties.ToList();\n", "                if (propList.Count == 0)\n                {\n                    // Nothing to write\n                    return;\n                }\n\n                writer.WriteStartObject();\n\n                foreach (var prop in propList)\n                {\n                    writer.WritePropertyName(prop.Name);\n                    JsonSerializer.Serialize(writer, prop.Value, options);\n                }\n\n                writer.WriteEndObject();\n            }\n        }\n", "                foreach (var prop in propList)\n                {\n                    writer.WritePropertyName(prop.Name);\n                    JsonSerializer.Serialize(writer, prop.Value, options);\n                }\n\n                writer.WriteEndObject();\n            }\n        }\n\n        private class NameValueCollectionConverter : JsonConverter<NameValueCollection>\n        {", "        private class NameValueCollectionConverter : JsonConverter<NameValueCollection>\n        {\n            public override NameValueCollection Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) => throw new NotImplementedException();\n\n            public override void Write(Utf8JsonWriter writer, NameValueCollection value, JsonSerializerOptions options)\n            {\n                var val = value.Keys.Cast<string>()\n                    .ToDictionary(k => k, k => string.Join(\", \", value.GetValues(k)));\n                System.Text.Json.JsonSerializer.Serialize(writer, val);\n            }\n        }\n\n        #endregion\n    }\n}"]}
{"filename": "src/RosettaStone.Core/Constants.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace RosettaStone.Core\n{\n    public static class Constants\n    {\n        public static string Logo =\n            @\"                    _   _              _                    \" + Environment.NewLine +\n            @\" _ __ ___  ___  ___| |_| |_ __ _   ___| |_ ___  _ __   ___  \" + Environment.NewLine +\n            @\"| '__/ _ \\/ __|/ _ \\ __| __/ _` | / __| __/ _ \\| '_ \\ / _ \\ \" + Environment.NewLine +\n            @\"| | | (_) \\__ \\  __/ |_| || (_| | \\__ \\ || (_) | | | |  __/ \" + Environment.NewLine +\n            @\"|_|  \\___/|___/\\___|\\__|\\__\\__,_| |___/\\__\\___/|_| |_|\\___| \" + Environment.NewLine +\n            Environment.NewLine;\n", "    public static class Constants\n    {\n        public static string Logo =\n            @\"                    _   _              _                    \" + Environment.NewLine +\n            @\" _ __ ___  ___  ___| |_| |_ __ _   ___| |_ ___  _ __   ___  \" + Environment.NewLine +\n            @\"| '__/ _ \\/ __|/ _ \\ __| __/ _` | / __| __/ _ \\| '_ \\ / _ \\ \" + Environment.NewLine +\n            @\"| | | (_) \\__ \\  __/ |_| || (_| | \\__ \\ || (_) | | | |  __/ \" + Environment.NewLine +\n            @\"|_|  \\___/|___/\\___|\\__|\\__\\__,_| |___/\\__\\___/|_| |_|\\___| \" + Environment.NewLine +\n            Environment.NewLine;\n\n        public static string ProductName = \"Rosetta Stone Server\";", "        public static string ProductName = \"Rosetta Stone Server\";\n        public static string InternalServerError = \"An internal server error was encountered.\";\n        public static string BadRequestError = \"Your request was invalid.  Please refer to the API documentation.\";\n        public static string NotFoundError = \"The requested object was not found.\";\n        public static string RootHtml =\n            @\"<html>\" + Environment.NewLine +\n            @\"  <head><title>Rosetta Stone API Server</title></head>\" + Environment.NewLine +\n            @\"  <body><h3>Rosetta Stone API Server</h3><p>The Rosetta Stone API server is operational.  Refer to Github for usage.</p></body>\" + Environment.NewLine +\n            @\"</html>\" + Environment.NewLine;\n        public static string HtmlContentType = \"text/html\";\n        public static string JsonContentType = \"application/json\";\n    }\n}\n", "        public static string HtmlContentType = \"text/html\";\n        public static string JsonContentType = \"application/json\";\n    }\n}\n"]}
{"filename": "src/RosettaStone.Core/ApiErrorResponse.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace RosettaStone.Core\n{\n    public class ApiErrorResponse\n    {\n        #region Public-Members\n", "    public class ApiErrorResponse\n    {\n        #region Public-Members\n\n        public int StatusCode { get; set; } = 200;\n        public string Message { get; set; } = null;\n        public string Context { get; set; } = null;\n        public Exception Exception { get; set; } = null;\n\n        #endregion\n\n        #region Private-Members\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public ApiErrorResponse()\n        {\n\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}\n"]}
{"filename": "src/RosettaStone.Core/Services/CodecMetadataService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing ExpressionTree;\nusing FindClosestString;\nusing SyslogLogging;\nusing Watson.ORM;\nusing static Mysqlx.Expect.Open.Types.Condition.Types;", "using Watson.ORM;\nusing static Mysqlx.Expect.Open.Types.Condition.Types;\n\nnamespace RosettaStone.Core.Services\n{\n    public class CodecMetadataService\n    {\n        #region Public-Members\n\n        #endregion\n\n        #region Private-Members\n", "        private LoggingModule _Logging = null;\n        private WatsonORM _ORM = null;\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public CodecMetadataService(LoggingModule logging, WatsonORM orm)\n        {\n            _Logging = logging ?? throw new ArgumentNullException(nameof(logging));\n            _ORM = orm ?? throw new ArgumentNullException(nameof(orm));\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        public List<CodecMetadata> All()\n        {\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.Id)),\n                OperatorEnum.GreaterThan,\n                0);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectMany<CodecMetadata>(expr);\n        }\n\n        public List<CodecMetadata> AllByVendor(string vendorGuid)\n        {", "            if (String.IsNullOrEmpty(vendorGuid)) throw new ArgumentNullException(nameof(vendorGuid));\n\n            vendorGuid = vendorGuid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.VendorGUID)),\n                OperatorEnum.Equals,\n                vendorGuid);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectMany<CodecMetadata>(expr);\n        }\n", "        public CodecMetadata GetByKey(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.Key)),\n                OperatorEnum.Equals,\n                key);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectFirst<CodecMetadata>(expr);\n        }\n", "        public bool ExistsByKey(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.Key)),\n                OperatorEnum.Equals,\n                key);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.Exists<CodecMetadata>(expr);\n        }\n", "        public CodecMetadata GetByGuid(string guid)\n        {\n            if (String.IsNullOrEmpty(guid)) throw new ArgumentNullException(nameof(guid));\n\n            guid = guid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.GUID)),\n                OperatorEnum.Equals,\n                guid);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectFirst<CodecMetadata>(expr);\n        }\n", "        public bool ExistsByGuid(string guid)\n        {\n            if (String.IsNullOrEmpty(guid)) throw new ArgumentNullException(nameof(guid));\n\n            guid = guid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.GUID)),\n                OperatorEnum.Equals,\n                guid);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.Exists<CodecMetadata>(expr);\n        }\n\n        public List<CodecMetadata> Search(Expr expr, int startIndex, int maxResults)\n        {", "            if (expr == null) throw new ArgumentNullException(nameof(expr));\n            if (startIndex < 0) throw new ArgumentOutOfRangeException(nameof(startIndex));\n            if (maxResults > 1000) throw new ArgumentOutOfRangeException(nameof(maxResults));\n\n            return _ORM.SelectMany<CodecMetadata>(startIndex, maxResults, expr);\n        }\n\n        public CodecMetadata Add(CodecMetadata cm)\n        {\n            if (cm == null) throw new ArgumentNullException(nameof(cm));\n\n            cm.Key = cm.Key.ToUpper();\n            cm.GUID = cm.GUID.ToUpper();\n            cm.VendorGUID = cm.VendorGUID.ToUpper();\n", "            if (cm == null) throw new ArgumentNullException(nameof(cm));\n\n            cm.Key = cm.Key.ToUpper();\n            cm.GUID = cm.GUID.ToUpper();\n            cm.VendorGUID = cm.VendorGUID.ToUpper();\n\n            if (ExistsByGuid(cm.GUID)) throw new ArgumentException(\"Object with GUID '\" + cm.GUID + \"' already exists.\");\n            if (ExistsByKey(cm.Key)) throw new ArgumentException(\"Object with key '\" + cm.Key + \"' already exists.\");\n\n            return _ORM.Insert<CodecMetadata>(cm);\n        }\n", "        public CodecMetadata Update(CodecMetadata cm)\n        {\n            if (cm == null) throw new ArgumentNullException(nameof(cm));\n\n            cm.Key = cm.Key.ToUpper();\n            cm.GUID = cm.GUID.ToUpper();\n            cm.VendorGUID = cm.VendorGUID.ToUpper();\n\n            return _ORM.Update<CodecMetadata>(cm);\n        }\n", "        public void DeleteByGuid(string guid)\n        {\n            if (String.IsNullOrEmpty(guid)) throw new ArgumentNullException(nameof(guid));\n\n            guid = guid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.GUID)),\n                OperatorEnum.Equals,\n                guid\n                );\n\n            _ORM.DeleteMany<CodecMetadata>(expr);\n        }\n", "        public void DeleteByKey(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.Key)),\n                OperatorEnum.Equals,\n                key\n                );\n\n            _ORM.DeleteMany<CodecMetadata>(expr);\n        }\n", "        public void DeleteByVendorGuid(string vendorGuid)\n        {\n            if (String.IsNullOrEmpty(vendorGuid)) throw new ArgumentNullException(nameof(vendorGuid));\n\n            vendorGuid = vendorGuid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<CodecMetadata>(nameof(CodecMetadata.VendorGUID)),\n                OperatorEnum.Equals,\n                vendorGuid\n                );\n\n            _ORM.DeleteMany<CodecMetadata>(expr);\n        }\n", "        public CodecMetadata FindClosestMatch(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            List<CodecMetadata> all = All();\n            List<string> keys = all.Where(x => x.IsAssigned).Select(x => x.Key).ToList();\n\n            (string, int) result = ClosestString.UsingLevenshtein(key, keys);\n\n            CodecMetadata codec = GetByKey(result.Item1);\n            codec.EditDistance = result.Item2;\n            return codec;\n        }\n\n        public List<CodecMetadata> FindClosestMatches(string key, int maxResults = 10)\n        {", "            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n            if (maxResults < 1 || maxResults > 10) throw new ArgumentOutOfRangeException(nameof(maxResults));\n\n            key = key.ToUpper();\n\n            List<CodecMetadata> all = All();\n            List<string> keys = all.Where(x => x.IsAssigned).Select(x => x.Key).ToList();\n\n            List<(string, int)> result = ClosestStrings.UsingLevenshtein(key, keys, maxResults);\n            List<CodecMetadata> ret = new List<CodecMetadata>();\n", "            foreach ((string, int) item in result)\n            {\n                CodecMetadata codec = GetByKey(item.Item1);\n                codec.EditDistance = item.Item2;\n                ret.Add(codec);\n            }\n\n            return ret;\n        }\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}\n"]}
{"filename": "src/RosettaStone.Core/Services/VendorMetadataService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing ExpressionTree;\nusing FindClosestString;\nusing SyslogLogging;\nusing Watson.ORM;\n", "using Watson.ORM;\n\nnamespace RosettaStone.Core.Services\n{\n    public class VendorMetadataService\n    {\n        #region Public-Members\n\n        #endregion\n\n        #region Private-Members\n", "        private LoggingModule _Logging = null;\n        private WatsonORM _ORM = null;\n\n        #endregion\n\n        #region Constructors-and-Factories\n\n        public VendorMetadataService(LoggingModule logging, WatsonORM orm)\n        {\n            _Logging = logging ?? throw new ArgumentNullException(nameof(logging));\n            _ORM = orm ?? throw new ArgumentNullException(nameof(orm));\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        public List<VendorMetadata> All()\n        {\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.Id)),\n                OperatorEnum.GreaterThan,\n                0);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectMany<VendorMetadata>(expr);\n        }\n", "        public VendorMetadata GetByKey(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.Key)),\n                OperatorEnum.Equals,\n                key);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectFirst<VendorMetadata>(expr);\n        }\n", "        public bool ExistsByKey(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.Key)),\n                OperatorEnum.Equals,\n                key);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.Exists<VendorMetadata>(expr);\n        }\n", "        public VendorMetadata GetByGuid(string guid)\n        {\n            if (String.IsNullOrEmpty(guid)) throw new ArgumentNullException(nameof(guid));\n\n            guid = guid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.GUID)),\n                OperatorEnum.Equals,\n                guid);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.SelectFirst<VendorMetadata>(expr);\n        }\n", "        public bool ExistsByGuid(string guid)\n        {\n            if (String.IsNullOrEmpty(guid)) throw new ArgumentNullException(nameof(guid));\n\n            guid = guid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.GUID)),\n                OperatorEnum.Equals,\n                guid);\n\n            expr.PrependAnd(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.IsAssigned)),\n                OperatorEnum.Equals,\n                1);\n\n            return _ORM.Exists<VendorMetadata>(expr);\n        }\n\n        public List<VendorMetadata> Search(Expr expr, int startIndex = 0, int maxResults = 1000)\n        {", "            if (expr == null) throw new ArgumentNullException(nameof(expr));\n            if (startIndex < 0) throw new ArgumentOutOfRangeException(nameof(startIndex));\n            if (maxResults > 1000) throw new ArgumentOutOfRangeException(nameof(maxResults));\n\n            return _ORM.SelectMany<VendorMetadata>(startIndex, maxResults, expr);\n        }\n\n        public VendorMetadata Add(VendorMetadata vm)\n        {\n            if (vm == null) throw new ArgumentNullException(nameof(vm));\n", "            if (vm == null) throw new ArgumentNullException(nameof(vm));\n\n            if (ExistsByGuid(vm.GUID)) throw new ArgumentException(\"Object with GUID '\" + vm.GUID + \"' already exists.\");\n            if (ExistsByKey(vm.Key)) throw new ArgumentException(\"Object with key '\" + vm.Key + \"' already exists.\");\n\n            vm.Key = vm.Key.ToUpper();\n            vm.GUID = vm.GUID.ToUpper();\n\n            return _ORM.Insert<VendorMetadata>(vm);\n        }\n", "        public VendorMetadata Update(VendorMetadata vm)\n        {\n            if (vm == null) throw new ArgumentNullException(nameof(vm));\n\n            vm.Key = vm.Key.ToUpper();\n            vm.GUID = vm.GUID.ToUpper();\n\n            return _ORM.Update<VendorMetadata>(vm);\n        }\n\n        public void DeleteByGuid(string guid)\n        {", "        public void DeleteByGuid(string guid)\n        {\n            if (String.IsNullOrEmpty(guid)) throw new ArgumentNullException(nameof(guid));\n\n            guid = guid.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.GUID)),\n                OperatorEnum.Equals,\n                guid\n                );\n\n            _ORM.DeleteMany<VendorMetadata>(expr);\n        }\n", "        public void DeleteByKey(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            Expr expr = new Expr(\n                _ORM.GetColumnName<VendorMetadata>(nameof(VendorMetadata.Key)),\n                OperatorEnum.Equals,\n                key\n                );\n\n            _ORM.DeleteMany<VendorMetadata>(expr);\n        }\n", "        public VendorMetadata FindClosestMatch(string key)\n        {\n            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n\n            key = key.ToUpper();\n\n            List<VendorMetadata> all = All();\n            List<string> keys = all.Where(x => x.IsAssigned).Select(x => x.Key).ToList();\n\n            (string, int) result = ClosestString.UsingLevenshtein(key, keys);\n\n            VendorMetadata vendor = GetByKey(result.Item1);\n            vendor.EditDistance = result.Item2;\n            return vendor;\n        }\n\n        public List<VendorMetadata> FindClosestMatches(string key, int maxResults = 10)\n        {", "            if (String.IsNullOrEmpty(key)) throw new ArgumentNullException(nameof(key));\n            if (maxResults < 1 || maxResults > 10) throw new ArgumentOutOfRangeException(nameof(maxResults));\n\n            key = key.ToUpper();\n\n            List<VendorMetadata> all = All();\n            List<string> keys = all.Where(x => x.IsAssigned).Select(x => x.Key).ToList();\n\n            List<(string, int)> result = ClosestStrings.UsingLevenshtein(key, keys, maxResults);\n            List<VendorMetadata> ret = new List<VendorMetadata>();\n", "            foreach ((string, int) item in result)\n            {\n                VendorMetadata vendor = GetByKey(item.Item1);\n                vendor.EditDistance = item.Item2;\n                ret.Add(vendor);\n            }\n\n            return ret;\n        }\n\n        #endregion\n\n        #region Private-Methods\n\n        #endregion\n    }\n}\n"]}
{"filename": "src/RosettaStone.Server/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing GetSomeInput;\nusing RosettaStone.Core;\nusing RosettaStone.Core.Services;\nusing SyslogLogging;", "using RosettaStone.Core.Services;\nusing SyslogLogging;\nusing Watson.ORM;\nusing WatsonWebserver;\n\nnamespace RosettaStone.Server\n{\n    public static class Program\n    {\n#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously\n\n        #region Public-Members\n\n        #endregion\n\n        #region Private-Members\n", "        private static string _Header = \"[RosettaStone] \";\n        private static SerializationHelper _Serializer = new SerializationHelper();\n        private static string _SettingsFile = \"./rosettastone.json\";\n        private static Settings _Settings = new Settings();\n        private static bool _CreateDefaultRecords = false;\n        private static LoggingModule _Logging = null;\n        private static WatsonORM _ORM = null;\n        private static CodecMetadataService _Codecs = null;\n        private static VendorMetadataService _Vendors = null;\n        private static WatsonWebserver.Server _Server = null;\n\n        #endregion\n\n        #region Entrypoint\n", "        private static VendorMetadataService _Vendors = null;\n        private static WatsonWebserver.Server _Server = null;\n\n        #endregion\n\n        #region Entrypoint\n\n        public static void Main(string[] args)\n        {\n            Welcome();\n            InitializeSettings(args);\n            InitializeGlobals();\n", "            if (_Settings.EnableConsole)\n            {\n                RunConsoleWorker();\n            }\n            else\n            {\n                EventWaitHandle waitHandle = new EventWaitHandle(false, EventResetMode.AutoReset);\n                bool waitHandleSignal = false;\n                do\n                {\n                    waitHandleSignal = waitHandle.WaitOne(1000);\n                }", "                while (!waitHandleSignal);\n            }\n        }\n\n        #endregion\n\n        #region Public-Methods\n\n        #endregion\n\n        #region Private-Methods\n", "        private static void Welcome()\n        {\n            Console.WriteLine(\n                Environment.NewLine +\n                Constants.Logo +\n                Constants.ProductName + \n                Environment.NewLine);\n        }\n\n        private static void InitializeSettings(string[] args)\n        {", "        private static void InitializeSettings(string[] args)\n        {\n            if (args != null && args.Length > 0)\n            {\n                foreach (string arg in args)\n                {\n                    if (arg.StartsWith(\"--config=\"))\n                    {\n                        _SettingsFile = arg.Substring(9);\n                    }\n                    else if (arg.Equals(\"--setup\"))\n                    {\n                        _CreateDefaultRecords = true;\n                    }\n                }\n            }\n", "                    else if (arg.Equals(\"--setup\"))\n                    {\n                        _CreateDefaultRecords = true;\n                    }\n                }\n            }\n\n            if (!File.Exists(_SettingsFile))\n            {\n                Console.WriteLine(\"Settings file '\" + _SettingsFile + \"' does not exist, creating with defaults\");\n                File.WriteAllBytes(_SettingsFile, Encoding.UTF8.GetBytes(_Serializer.SerializeJson(_Settings, true)));\n            }\n            else\n            {\n                _Settings = _Serializer.DeserializeJson<Settings>(File.ReadAllText(_SettingsFile));\n                Console.WriteLine(\"Loaded settings from file '\" + _SettingsFile + \"'\");\n            }\n        }\n", "        private static void InitializeGlobals()\n        {\n            #region Logging\n\n            Console.WriteLine(\"Initializing logging to \" + _Settings.Logging.SyslogServerIp + \":\" + _Settings.Logging.SyslogServerPort);\n\n            _Logging = new LoggingModule(\n                _Settings.Logging.SyslogServerIp,\n                _Settings.Logging.SyslogServerPort,\n                _Settings.EnableConsole);\n", "            if (!String.IsNullOrEmpty(_Settings.Logging.LogDirectory)\n                && !Directory.Exists(_Settings.Logging.LogDirectory))\n            {\n                Directory.CreateDirectory(_Settings.Logging.LogDirectory);\n            }\n\n            if (!String.IsNullOrEmpty(_Settings.Logging.LogDirectory)\n                && !String.IsNullOrEmpty(_Settings.Logging.LogFilename))\n            {\n                _Settings.Logging.LogDirectory = _Settings.Logging.LogDirectory.Replace(\"\\\\\", \"/\");\n                if (!_Settings.Logging.LogDirectory.EndsWith(\"/\")) _Settings.Logging.LogDirectory += \"/\";\n\n                _Settings.Logging.LogFilename = _Settings.Logging.LogDirectory + _Settings.Logging.LogFilename;\n            }\n", "                if (!_Settings.Logging.LogDirectory.EndsWith(\"/\")) _Settings.Logging.LogDirectory += \"/\";\n\n                _Settings.Logging.LogFilename = _Settings.Logging.LogDirectory + _Settings.Logging.LogFilename;\n            }\n\n            if (!String.IsNullOrEmpty(_Settings.Logging.LogFilename))\n            {\n                _Logging.Settings.FileLogging = FileLoggingMode.FileWithDate;\n                _Logging.Settings.LogFilename = _Settings.Logging.LogFilename;\n            }\n\n            Console.WriteLine(\"Logging to file \" + _Settings.Logging.LogFilename);\n\n            #endregion\n\n            #region ORM\n\n            Console.WriteLine(\"Initializing database\");\n            _ORM = new WatsonORM(_Settings.Database);\n\n            _ORM.InitializeDatabase();\n            _ORM.InitializeTables(new List<Type>\n            {\n                typeof(CodecMetadata),\n                typeof(VendorMetadata)\n            });\n\n            #endregion\n\n            #region Services\n\n            _Codecs = new CodecMetadataService(_Logging, _ORM);\n            _Vendors = new VendorMetadataService(_Logging, _ORM);\n\n            #endregion\n\n            #region Default-Records\n", "            if (_CreateDefaultRecords)\n            {\n                VendorMetadata vendor1 = new VendorMetadata\n                {\n                    Key = \"ACTGACTGACTGACTGACTGACTGACTGAC\",\n                    Name = \"Vendor 1\",\n                    ContactInformation = \"100 S Main St, San Jose, CA 95128\",\n                };\n\n                VendorMetadata vendor2 = new VendorMetadata\n                {\n                    Key = \"GTCAGTCAGTCAGTCAGTCAGTCAGTCAAC\",\n                    Name = \"Vendor 2\",\n                    ContactInformation = \"200 S Vine St, Campbell, CA 95008\",\n                };\n\n                VendorMetadata vendor3 = new VendorMetadata\n                {\n                    Key = \"CATGCATGCATGCATGCATGCATGCATGAC\",\n                    Name = \"Vendor 3\",\n                    ContactInformation = \"300 N 1st St, San Jose, CA 95128\",\n                };\n\n                vendor1 = _Vendors.Add(vendor1);\n                Console.WriteLine(\"Creating vendor \" + vendor1.Key + \" \" + vendor1.Name);\n                vendor2 = _Vendors.Add(vendor2);\n                Console.WriteLine(\"Creating vendor \" + vendor2.Key + \" \" + vendor2.Name);\n                vendor3 = _Vendors.Add(vendor3);\n                Console.WriteLine(\"Creating vendor \" + vendor3.Key + \" \" + vendor3.Name);\n\n                CodecMetadata codec1 = new CodecMetadata\n                {\n                    VendorGUID = vendor1.GUID,\n                    Key = \"CAGTCAGTCAGTCAGTCAGTCAGTCAGTAC\",\n                    Name = \"My CODEC\",\n                    Version = \"v1.0.0\",\n                    Uri = \"https://codec1.com\"\n                };\n\n                CodecMetadata codec2 = new CodecMetadata\n                {\n                    VendorGUID = vendor2.GUID,\n                    Key = \"TCAGTCAGTCAGTCAGTCAGTCAGTCAGAC\",\n                    Name = \"My CODEC\",\n                    Version = \"v2.0.0\",\n                    Uri = \"https://codec1.com\"\n                };\n\n                CodecMetadata codec3 = new CodecMetadata\n                {\n                    VendorGUID = vendor3.GUID,\n                    Key = \"TAGCTAGCTAGCTAGCTAGCTAGCTAGCAC\",\n                    Name = \"My CODEC\",\n                    Version = \"v3.0.0\",\n                    Uri = \"https://codec1.com\"\n                };\n\n                codec1 = _Codecs.Add(codec1);\n                Console.WriteLine(\"Creating CODEC \" + codec1.Key + \" \" + codec1.Name);\n                codec2 = _Codecs.Add(codec2);\n                Console.WriteLine(\"Creating CODEC \" + codec2.Key + \" \" + codec2.Name);\n                codec3 = _Codecs.Add(codec3);\n                Console.WriteLine(\"Creating CODEC \" + codec3.Key + \" \" + codec3.Name);\n            }\n\n            #endregion\n\n            #region Webserver\n\n            _Server = new WatsonWebserver.Server(\n                _Settings.Webserver.DnsHostname,\n                _Settings.Webserver.Port,\n                _Settings.Webserver.Ssl,\n                DefaultRoute);\n\n            _Server.Routes.PreRouting = PreRouting;\n            _Server.Routes.PostRouting = PostRouting;\n\n            _Server.Routes.Static.Add(HttpMethod.GET, \"/\", GetRootRoute);\n            _Server.Routes.Static.Add(HttpMethod.GET, \"/favicon.ico\", GetFaviconRoute);\n            _Server.Routes.Static.Add(HttpMethod.GET, \"/v1.0/vendor\", GetAllVendorsV1);\n            _Server.Routes.Static.Add(HttpMethod.GET, \"/v1.0/codec\", GetAllCodecsV1);\n\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/vendor/{key}\", GetVendorByKeyV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/codec/{key}\", GetCodecByKeyV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/vendor/match/{key}\", GetVendorMatchV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/codec/match/{key}\", GetCodecMatchV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/vendor/matches/{key}\", GetVendorMatchesV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/codec/matches/{key}\", GetCodecMatchesV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/full/match/{key}\", GetFullMatchV1);\n            _Server.Routes.Parameter.Add(HttpMethod.GET, \"/v1.0/full/matches/{key}\", GetFullMatchesV1);\n\n            _Server.Start();\n\n            Console.WriteLine(\"Webserver started on \" +\n                (_Settings.Webserver.Ssl ? \"https://\" : \"http://\") +\n                _Settings.Webserver.DnsHostname + \":\" +\n                _Settings.Webserver.Port);\n\n            #endregion\n        }\n", "        private static void RunConsoleWorker()\n        {\n            bool runForever = true;\n\n            while (runForever)\n            {\n                string userInput = Inputty.GetString(\"Command [?/help]:\", null, false);\n\n                switch (userInput)\n                {\n                    case \"q\":\n                        runForever = false;\n                        break;\n                    case \"c\":\n                    case \"cls\":\n                        Console.Clear();\n                        break;\n                    case \"?\":\n                        Console.WriteLine(\"\");\n                        Console.WriteLine(\"Available commands:\");\n                        Console.WriteLine(\"q         quit, exit the application\");\n                        Console.WriteLine(\"cls       clear the screen\");\n                        Console.WriteLine(\"?         help, this menu\");\n                        Console.WriteLine(\"\");\n                        break;\n                }\n            }\n        }\n", "        private static async Task<bool> PreRouting(HttpContext ctx)\n        {\n            ctx.Response.ContentType = Constants.JsonContentType;\n            return false;\n        }\n\n        private static async Task PostRouting(HttpContext ctx)\n        {\n            ctx.Timestamp.End = DateTime.UtcNow;\n\n            _Logging.Debug(\n                _Header\n                + ctx.Request.Source.IpAddress + \":\" + ctx.Request.Source.Port + \" \"\n                + ctx.Request.Method.ToString() + \" \"\n                + ctx.Request.Url.RawWithQuery + \": \"\n                + ctx.Response.StatusCode + \" \"\n                + \"(\" + ctx.Timestamp.TotalMs + \"ms)\");\n        }\n", "        private static async Task DefaultRoute(HttpContext ctx)\n        {\n            ctx.Response.StatusCode = 400; \n            await ctx.Response.Send(_Serializer.SerializeJson(\n                new ApiErrorResponse()\n                {\n                    Message = Constants.BadRequestError,\n                    StatusCode = 400,\n                    Context = \"Unknown URL or HTTP method.\"\n                }, true));\n        }\n", "        private static async Task GetRootRoute(HttpContext ctx)\n        {\n            ctx.Response.StatusCode = 200;\n            ctx.Response.ContentType = Constants.HtmlContentType;\n            await ctx.Response.Send(Constants.RootHtml);\n            return;\n        }\n\n        private static async Task GetFaviconRoute(HttpContext ctx)\n        {\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send();\n            return;\n        }\n", "        private static async Task GetFaviconRoute(HttpContext ctx)\n        {\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send();\n            return;\n        }\n\n        private static async Task GetAllVendorsV1(HttpContext ctx)\n        {\n            List<VendorMetadata> vendors = _Vendors.All();\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(vendors, true));\n            return;\n        }\n", "        private static async Task GetAllCodecsV1(HttpContext ctx)\n        {\n            List<CodecMetadata> codecs = _Codecs.All();\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(codecs, true));\n            return;\n        }\n\n        private static async Task GetVendorByKeyV1(HttpContext ctx)\n        {\n            VendorMetadata vendor = _Vendors.GetByKey(ctx.Request.Url.Parameters[\"key\"]);", "        private static async Task GetVendorByKeyV1(HttpContext ctx)\n        {\n            VendorMetadata vendor = _Vendors.GetByKey(ctx.Request.Url.Parameters[\"key\"]);\n            if (vendor == null)\n            {\n                ctx.Response.StatusCode = 404;\n                await ctx.Response.Send(_Serializer.SerializeJson(\n                    new ApiErrorResponse()\n                    {\n                        Message = Constants.NotFoundError,\n                        StatusCode = 404,\n                        Context = null\n                    }, true));\n                return;\n            }\n            else\n            {\n                ctx.Response.StatusCode = 200;\n                await ctx.Response.Send(_Serializer.SerializeJson(vendor, true));\n                return;\n            }\n        }\n", "        private static async Task GetCodecByKeyV1(HttpContext ctx)\n        {\n            CodecMetadata codec = _Codecs.GetByKey(ctx.Request.Url.Parameters[\"key\"]);\n            if (codec == null)\n            {\n                ctx.Response.StatusCode = 404;\n                await ctx.Response.Send(_Serializer.SerializeJson(\n                    new ApiErrorResponse()\n                    {\n                        Message = Constants.NotFoundError,\n                        StatusCode = 404,\n                        Context = null\n                    }, true));\n                return;\n            }\n            else\n            {\n                ctx.Response.StatusCode = 200;\n                await ctx.Response.Send(_Serializer.SerializeJson(codec, true));\n                return;\n            }\n        }\n        ", "        private static async Task GetVendorMatchV1(HttpContext ctx)\n        {\n            VendorMetadata vendor = _Vendors.FindClosestMatch(ctx.Request.Url.Parameters[\"key\"]);\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(vendor, true));\n            return;\n        }\n        \n        private static async Task GetCodecMatchV1(HttpContext ctx)\n        {\n            CodecMetadata codec = _Codecs.FindClosestMatch(ctx.Request.Url.Parameters[\"key\"]);\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(codec, true));\n            return;\n        }\n", "        private static async Task GetCodecMatchV1(HttpContext ctx)\n        {\n            CodecMetadata codec = _Codecs.FindClosestMatch(ctx.Request.Url.Parameters[\"key\"]);\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(codec, true));\n            return;\n        }\n\n        private static async Task GetVendorMatchesV1(HttpContext ctx)\n        {\n            List<VendorMetadata> vendors = _Vendors.FindClosestMatches(ctx.Request.Url.Parameters[\"key\"], GetMaxResults(ctx));\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(vendors, true));\n            return;\n        }\n", "        private static async Task GetVendorMatchesV1(HttpContext ctx)\n        {\n            List<VendorMetadata> vendors = _Vendors.FindClosestMatches(ctx.Request.Url.Parameters[\"key\"], GetMaxResults(ctx));\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(vendors, true));\n            return;\n        }\n\n        private static async Task GetCodecMatchesV1(HttpContext ctx)\n        {\n            List<CodecMetadata> codecs = _Codecs.FindClosestMatches(ctx.Request.Url.Parameters[\"key\"], GetMaxResults(ctx));\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(codecs, true));\n            return;\n        }\n", "        private static async Task GetCodecMatchesV1(HttpContext ctx)\n        {\n            List<CodecMetadata> codecs = _Codecs.FindClosestMatches(ctx.Request.Url.Parameters[\"key\"], GetMaxResults(ctx));\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(codecs, true));\n            return;\n        }\n\n        private static async Task GetFullMatchV1(HttpContext ctx)\n        {\n            string key = ctx.Request.Url.Parameters[\"key\"];", "        private static async Task GetFullMatchV1(HttpContext ctx)\n        {\n            string key = ctx.Request.Url.Parameters[\"key\"];\n            if (key.Length < 36)\n            {\n                _Logging.Warn(_Header + \"supplied key is 35 characters or less\");\n\n                ctx.Response.StatusCode = 404;\n                await ctx.Response.Send(_Serializer.SerializeJson(\n                    new ApiErrorResponse()\n                    {\n                        Message = Constants.BadRequestError,\n                        StatusCode = 404,\n                        Context = \"Supplied key must be greater than 35 characters.\"\n                    }, true));\n                return;\n            }\n\n            // left 35, right 35\n            string left = key.Substring(0, 35);\n            string right = key.Substring((key.Length - 35), 35);\n\n            ResultSet resultSet = new ResultSet\n            {\n                Key = key,\n                Left = left,\n                Right = right,\n                Vendor = _Vendors.FindClosestMatch(left),\n                Codec = _Codecs.FindClosestMatch(right)\n            };\n\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(resultSet, true));\n            return;\n        }\n", "        private static async Task GetFullMatchesV1(HttpContext ctx)\n        {\n            string key = ctx.Request.Url.Parameters[\"key\"];\n            if (key.Length < 36)\n            {\n                _Logging.Warn(_Header + \"supplied key is 35 characters or less\");\n\n                ctx.Response.StatusCode = 404;\n                await ctx.Response.Send(_Serializer.SerializeJson(\n                    new ApiErrorResponse()\n                    {\n                        Message = Constants.BadRequestError,\n                        StatusCode = 404,\n                        Context = \"Supplied key must be greater than 35 characters.\"\n                    }, true));\n                return;\n            }\n\n            // left 35, right 35\n            string left = key.Substring(0, 35);\n            string right = key.Substring((key.Length - 35), 35);\n            int maxResults = GetMaxResults(ctx);\n\n            ResultSet resultSet = new ResultSet\n            {\n                Key = key,\n                Left = left,\n                Right = right,\n                Vendors = _Vendors.FindClosestMatches(left, maxResults),\n                Codecs = _Codecs.FindClosestMatches(right, maxResults)\n            };\n\n            ctx.Response.StatusCode = 200;\n            await ctx.Response.Send(_Serializer.SerializeJson(resultSet, true));\n            return;\n        }\n", "        private static int GetMaxResults(HttpContext ctx)\n        {\n            int maxResults = 10;\n\n            string maxResultsStr = ctx.Request.Query.Elements.Get(\"results\");\n\n            if (!String.IsNullOrEmpty(maxResultsStr))\n                maxResults = Convert.ToInt32(maxResultsStr);\n\n            if (maxResults < 1) maxResults = 1;\n            return maxResults;\n        }\n\n        #endregion\n\n#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously\n    }\n}", "            if (maxResults < 1) maxResults = 1;\n            return maxResults;\n        }\n\n        #endregion\n\n#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously\n    }\n}"]}
