{"filename": "test/ClockSnowFlake.Unitests/ClockSnowFlakeTest.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Xunit;\n\nnamespace ClockSnowFlake.Unitests\n{\n    public class ClockSnowFlakeTest\n    {\n\n        public ClockSnowFlakeTest()\n        {\n            IServiceCollection services = new ServiceCollection();\n            //\u6ce8\u610f\uff1a\u5de5\u4f5c\u673a\u5668ID\u4e0d\u80fd\u91cd\u590d\n            services.AddSnowFlakeId(x => x.WorkId = 2);\n        }\n\n        [Fact]", "        public void Id_Generate_Should_Be_Succeed()\n        {\n            var id = IdGener.GetLong();\n            Assert.True(id > 0);\n        }\n    }\n}\n"]}
{"filename": "sample/ClockSnowFlake.Demo.WebApi/Program.cs", "chunked_list": ["var builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nvar config = builder.Configuration;\n\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddSnowFlakeId(config);", "builder.Services.AddSwaggerGen();\nbuilder.Services.AddSnowFlakeId(config);\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n"]}
{"filename": "sample/ClockSnowFlake.Demo.WebApi/Controllers/SnowFlakeController.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\nusing ClockSnowFlake;\n\nnamespace ClockSnowFlake.Demo.WebApi.Controller\n{\n    [ApiController]\n    [Route(\"[controller]/[action]\")]\n    public class SnowFlakeController : ControllerBase\n    {\n        public SnowFlakeController()\n        {\n\n        }\n\n        /// <summary>\n        /// \u0221Id\n        /// </summary>\n        [HttpGet]", "        public string GetId()\n        {\n            return IdGener.GetLong().ToString();\n        }\n    }\n}"]}
{"filename": "src/ClockSnowFlake/IdGener.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace ClockSnowFlake\n{\n    /// <summary>\n    /// Id \u751f\u6210\u5668\n    /// </summary>\n    public static class IdGener\n    {\n        /// <summary>\n        ///\u57fa\u4e8e\u65f6\u949f\u5e8f\u5217\u7684 Long \u751f\u6210\u5668 \n        /// </summary>", "        public static ILongGenerator ClockLongGenerator { get; set; } = ClockSnowFlakeIdGenerator.Current;\n\n        /// <summary>\n        /// \u7528Guid\u521b\u5efa\u6807\u8bc6\n        /// </summary>\n        /// <returns></returns>\n        public static string GetGuid()\n        {\n            return Guid.NewGuid().ToString(\"N\");\n        }\n\n        /// <summary>\n        /// \u521b\u5efa Long ID\n        /// </summary>\n        /// <returns></returns>", "        public static long GetLong()\n        {\n            return ClockLongGenerator.Create();\n        }\n\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Helpers/SnowflakeHelper.cs", "chunked_list": ["\ufeffusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\n\nnamespace ClockSnowFlake\n{\n    internal class SnowflakeHelper\n    {\n        /// <summary>\n        /// \u83b7\u53d6\u968f\u673a\u5de5\u4f5cId\n        /// </summary>\n        /// <returns></returns>", "        public static long GetRandomWorkerId(long maxWorkerId)\n        {\n            //long? workerId = Math.Abs(Environment.MachineName.GetHashCode()) % maxWorkerId;\n            var workerId = GetLastIpNum();\n\n            if (workerId == null)\n            {\n                /**\n                 * \u672c\u7cfb\u7edfSnowflakeIdWorker\u7684workerId\u8303\u56f4\u4e3a0-1023\uff0cip\u6700\u540e\u4e00\u6bb5\u6570\u5b57\u6700\u5927\u4e3a255\n                 * \u4e00\u65e6\u83b7\u53d6\u672c\u673aip\u5931\u8d25\uff0c\u5c31\u53d6300-1023\u4e4b\u95f4\u7684\u968f\u673a\u6570\u505a\u4e3aworkerId\n                 */\n                workerId = CreateNumber(300, (int)(maxWorkerId % int.MaxValue));\n            }\n\n            return workerId.Value;\n        }\n\n        /// <summary>\n        /// \u751f\u6210\u56fa\u5b9a\u8303\u56f4\u7684\u968f\u673a\u6570\n        /// </summary>", "        private static int CreateNumber(int min, int max)\n        {\n            Random random = new Random();\n            return random.Next(max) % (max - min + 1) + min;\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6ip\u4e32\u4e2d\u6700\u540e\u7684\u6570\u5b57\n        /// </summary>\n        private static long? GetLastIpNum()\n        {\n            string ip = \"\";\n\n            try\n            {\n                ip = Dns.GetHostEntry(Dns.GetHostName()).AddressList.First(x => x.AddressFamily == AddressFamily.InterNetwork).ToString();\n            }\n            catch\n            {\n\n            }\n", "        private static long? GetLastIpNum()\n        {\n            string ip = \"\";\n\n            try\n            {\n                ip = Dns.GetHostEntry(Dns.GetHostName()).AddressList.First(x => x.AddressFamily == AddressFamily.InterNetwork).ToString();\n            }\n            catch\n            {\n\n            }\n", "            if (ip == \"\")\n            {\n                return null;\n            }\n\n\n            string lastNum = ip.Substring(ip.LastIndexOf('.') + 1);\n            return long.Parse(lastNum);\n        }\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Ids/ClockSnowflakeId.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace ClockSnowFlake\n{\n    /// <summary>\n    /// \u57fa\u4e8e\u65f6\u949f\u5e8f\u5217\u7684\u96ea\u82b1\u7b97\u6cd5\n    /// 64\u4f4d\u552f\u4e00Id\uff08\u753141\u4f4d\u7684timestamp + 3\u4f4d\u65f6\u949f\u5e8f\u5217 + 7\u4f4d\u81ea\u5b9a\u4e49\u7684\u673a\u5668\u7801 + 13\u4f4d\u7d2f\u52a0\u8ba1\u6570\u5668\u7ec4\u6210\uff09\n    /// </summary>\n    public class ClockSnowflakeId\n    {\n        /// <summary>\n        /// \u57fa\u51c6\u65f6\u95f4\n        /// </summary>", "    public class ClockSnowflakeId\n    {\n        /// <summary>\n        /// \u57fa\u51c6\u65f6\u95f4\n        /// </summary>\n        public const long TWEPOCH = 1288834974657L;\n\n        /// <summary>\n        /// \u673a\u5668\u6807\u8bc6\u4f4d\u6570\n        /// </summary>\n        private const int WORKER_ID_BITS = 7;\n\n        /// <summary>\n        /// \u65f6\u949f\u5e8f\u5217\u6807\u8bc6\u4f4d\u6570\n        /// </summary>", "        private const int WORKER_ID_BITS = 7;\n\n        /// <summary>\n        /// \u65f6\u949f\u5e8f\u5217\u6807\u8bc6\u4f4d\u6570\n        /// </summary>\n        private const int CLOCK_ID_BITS = 3;\n\n        /// <summary>\n        /// \u5e8f\u5217\u53f7\u6807\u8bc6\u4f4d\u6570\n        /// </summary>\n        private const int SEQUENCE_BITS = 12;\n\n        /// <summary>\n        /// \u673a\u5668ID\u6700\u5927\u503c\n        /// </summary>", "        private const int SEQUENCE_BITS = 12;\n\n        /// <summary>\n        /// \u673a\u5668ID\u6700\u5927\u503c\n        /// </summary>\n        private const long MAX_WORKER_ID = -1L ^ (-1L << WORKER_ID_BITS);\n\n        /// <summary>\n        /// \u65f6\u949f\u5e8f\u5217\u6700\u5927\u503c\n        /// </summary>\n        private const long CLOCK_SEQUENCE_MASK = -1L ^ (-1L << CLOCK_ID_BITS);\n\n        /// <summary>\n        /// \u5e8f\u5217\u53f7ID\u6700\u5927\u503c\n        /// </summary>", "        private const long CLOCK_SEQUENCE_MASK = -1L ^ (-1L << CLOCK_ID_BITS);\n\n        /// <summary>\n        /// \u5e8f\u5217\u53f7ID\u6700\u5927\u503c\n        /// </summary>\n        private const long SEQUENCE_MASK = -1L ^ (-1L << SEQUENCE_BITS);\n\n        /// <summary>\n        /// \u673a\u5668ID\u504f\u5de6\u79fb12\u4f4d\n        /// </summary>\n        private const int WORKER_ID_SHIFT = SEQUENCE_BITS;\n\n        /// <summary>\n        /// \u65f6\u949f\u5e8f\u5217\u504f\u5de6\u79fb19\u4f4d\n        /// </summary>", "        private const int WORKER_ID_SHIFT = SEQUENCE_BITS;\n\n        /// <summary>\n        /// \u65f6\u949f\u5e8f\u5217\u504f\u5de6\u79fb19\u4f4d\n        /// </summary>\n        private const int CLOCK_SEQUENCE_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS;\n\n        /// <summary>\n        /// \u65f6\u95f4\u6beb\u79d2\u5de6\u79fb22\u4f4d\n        /// </summary>\n        private const int TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + CLOCK_ID_BITS;\n\n        /// <summary>\n        /// \u65f6\u95f4\u5e8f\u5217\n        /// </summary>", "        private const int TIMESTAMP_LEFT_SHIFT = SEQUENCE_BITS + WORKER_ID_BITS + CLOCK_ID_BITS;\n\n        /// <summary>\n        /// \u65f6\u95f4\u5e8f\u5217\n        /// </summary>\n        private long _clockSequence = 0L;\n\n        /// <summary>\n        /// \u5e8f\u5217\u53f7ID\n        /// </summary>\n        private long _sequence = 0L;\n\n        /// <summary>\n        /// \u6700\u540e\u65f6\u95f4\u6233\n        /// </summary>", "        private long _sequence = 0L;\n\n        /// <summary>\n        /// \u6700\u540e\u65f6\u95f4\u6233\n        /// </summary>\n        private long _lastTimestamp = -1L;\n\n        /// <summary>\n        /// \u673a\u5668ID\n        /// </summary>\n        public long WorkerId { get; protected set; }\n\n        /// <summary>\n        /// \u5e8f\u5217\u53f7ID\n        /// </summary>", "        public long WorkerId { get; protected set; }\n\n        /// <summary>\n        /// \u5e8f\u5217\u53f7ID\n        /// </summary>\n        public long Sequence\n        {\n            get => _sequence;\n            internal set => _sequence = value;\n        }\n\n        /// <summary>\n        /// \u521d\u59cb\u5316\u4e00\u4e2a<see cref=\"ClockSnowflakeId\"/>\u7c7b\u578b\u7684\u5b9e\u4f8b\n        /// </summary>\n        /// <param name=\"workerId\">\u673a\u5668ID</param>\n        /// <param name=\"sequence\">\u5e8f\u5217\u53f7ID</param>\n        public ClockSnowflakeId(long? workerId, long sequence = 0L)\n        {", "            if (workerId == null)\n            {\n                //\u5982\u679c\u6ca1\u914d\u7f6e\uff0c\u5219\u91c7\u7528\u968f\u673a\u5de5\u4f5cId\n                workerId = SnowflakeHelper.GetRandomWorkerId(MAX_WORKER_ID);\n            }\n            // \u5982\u679c\u8d85\u51fa\u8303\u56f4\u5c31\u629b\u51fa\u5f02\u5e38\n            if (workerId > MAX_WORKER_ID || workerId < 0)\n            {\n                throw new ArgumentException($\"worker Id \u5fc5\u987b\u5927\u4e8e0\uff0c\u4e14\u4e0d\u80fd\u5927\u4e8e MaxWorkerId\uff1a{MAX_WORKER_ID}\");\n            }\n\n            // \u5148\u6821\u9a8c\u518d\u8d4b\u503c\n            WorkerId = workerId.Value;\n            _sequence = sequence;\n        }\n\n        /// <summary>\n        /// \u5bf9\u8c61\u9501\n        /// </summary>", "        private readonly object _lock = new object();\n\n        /// <summary>\n        /// \u83b7\u53d6\u4e0b\u4e00\u4e2aID\n        /// </summary>\n        /// <returns></returns>\n        public long NextId()\n        {\n            lock (_lock)\n            {\n                //\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4\u6233\n                var currentTimestamp = TimeGen();\n                //\u51fa\u73b0\u65f6\u95f4\u56de\u62e8 \u5f53\u524d\u7cfb\u7edf\u65f6\u95f4\u5c0f\u4e8e\u6700\u540e\u66f4\u65b0\u65f6\u95f4", "                if (currentTimestamp < _lastTimestamp)\n                {\n                    // _clockSequence\u81ea\u589e\uff0c\u548cCLOCK_SEQUENCE_MASK\u76f8\u4e0e\u4e00\u4e0b\uff0c\u53bb\u6389\u9ad8\u4f4d\n                    _clockSequence = (_clockSequence + 1) & CLOCK_SEQUENCE_MASK;\n                }\n\n                // \u5982\u679c\u4e0a\u6b21\u751f\u6210\u65f6\u95f4\u548c\u5f53\u524d\u65f6\u95f4\u76f8\u540c\uff0c\u5728\u540c\u4e00\u6beb\u79d2\u5185\n                if (_lastTimestamp == currentTimestamp)\n                {\n                    // sequence\u81ea\u589e\uff0c\u548cSEQUENCE_MASK\u76f8\u4e0e\u4e00\u4e0b\uff0c\u53bb\u6389\u9ad8\u4f4d\n                    _sequence = (_sequence + 1) & SEQUENCE_MASK;\n                    //\u5224\u65ad\u662f\u5426\u6ea2\u51fa,\u4e5f\u5c31\u662f\u6bcf\u6beb\u79d2\u5185\u8d85\u8fc71024\uff0c\u5f53\u4e3a1024\u65f6\uff0c\u4e0esequenceMask\u76f8\u4e0e\uff0csequence\u5c31\u7b49\u4e8e0", "                    if (_sequence == 0)\n                    {\n                        //\u7b49\u5f85\u5230\u4e0b\u4e00\u6beb\u79d2\n                        currentTimestamp = TilNextMillis(_lastTimestamp);\n                    }\n                }\n                else\n                {\n                    //\u5982\u679c\u548c\u4e0a\u6b21\u751f\u6210\u65f6\u95f4\u4e0d\u540c,\u91cd\u7f6esequence\uff0c\u5c31\u662f\u4e0b\u4e00\u6beb\u79d2\u5f00\u59cb\uff0csequence\u8ba1\u6570\u91cd\u65b0\u4ece0\u5f00\u59cb\u7d2f\u52a0,\n                    _sequence = 0;\n                }\n\n                _lastTimestamp = currentTimestamp;\n                return ((currentTimestamp - TWEPOCH) << TIMESTAMP_LEFT_SHIFT) | _clockSequence << CLOCK_SEQUENCE_SHIFT | (WorkerId << WORKER_ID_SHIFT) | _sequence;\n            }\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6\u589e\u91cf\u65f6\u95f4\u6233\uff0c\u9632\u6b62\u4ea7\u751f\u7684\u65f6\u95f4\u6bd4\u4e4b\u524d\u7684\u65f6\u95f4\u8fd8\u8981\u5c0f\uff08\u7531\u4e8eNTP\u56de\u62e8\u7b49\u95ee\u9898\uff09\uff0c\u4fdd\u6301\u589e\u91cf\u7684\u8d8b\u52bf\n        /// </summary>\n        /// <param name=\"lastTimestamp\">\u6700\u540e\u4e00\u4e2a\u65f6\u95f4\u6233</param>\n        /// <returns></returns>", "        protected virtual long TilNextMillis(long lastTimestamp)\n        {\n            var timestamp = TimeGen();\n            while (timestamp <= lastTimestamp)\n            {\n                timestamp = TimeGen();\n            }\n\n            return timestamp;\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        /// <returns></returns>", "        protected virtual long TimeGen()\n        {\n            return CurrentTimeMills();\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        public static Func<long> CurrentTimeFunc = InternalCurrentTimeMillis;\n\n        /// <summary>\n        /// \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        /// <returns></returns>", "        public static Func<long> CurrentTimeFunc = InternalCurrentTimeMillis;\n\n        /// <summary>\n        /// \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        /// <returns></returns>\n        public static long CurrentTimeMills()\n        {\n            return CurrentTimeFunc();\n        }\n\n        /// <summary>\n        /// \u91cd\u7f6e\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        /// <param name=\"func\"></param>\n        /// <returns></returns>", "        public static IDisposable StubCurrentTime(Func<long> func)\n        {\n            CurrentTimeFunc = func;\n            return new DisposableAction(() => { CurrentTimeFunc = InternalCurrentTimeMillis; });\n        }\n\n        /// <summary>\n        /// \u91cd\u7f6e\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        /// <param name=\"millis\"></param>\n        /// <returns></returns>", "        public static IDisposable StubCurrentTime(long millis)\n        {\n            CurrentTimeFunc = () => millis;\n            return new DisposableAction(() => { CurrentTimeFunc = InternalCurrentTimeMillis; });\n        }\n\n        private static readonly DateTime Jan1St1970 = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n\n        /// <summary>\n        /// \u9ed8\u8ba4\u5f53\u524d\u65f6\u95f4\u6233\n        /// </summary>\n        /// <returns></returns>", "        private static long InternalCurrentTimeMillis()\n        {\n            return (long)(DateTime.UtcNow - Jan1St1970).TotalMilliseconds;\n        }\n\n        /// <summary>\n        /// \u4e00\u6b21\u6027\u65b9\u6cd5\n        /// </summary>\n        public class DisposableAction : IDisposable\n        {\n            /// <summary>\n            /// \u6267\u884c\u65b9\u6cd5\n            /// </summary>", "        public class DisposableAction : IDisposable\n        {\n            /// <summary>\n            /// \u6267\u884c\u65b9\u6cd5\n            /// </summary>\n            private readonly Action _action;\n\n            /// <summary>\n            /// \u521d\u59cb\u5316\u4e00\u4e2a<see cref=\"DisposableAction\"/>\u7c7b\u578b\u7684\u5b9e\u4f8b\n            /// </summary>\n            /// <param name=\"action\">\u6267\u884c\u65b9\u6cd5</param>\n            public DisposableAction(Action action)\n            {\n                _action = action ?? throw new ArgumentNullException(nameof(action));\n            }\n\n            /// <summary>\n            /// \u91ca\u653e\u8d44\u6e90\n            /// </summary>", "            public void Dispose()\n            {\n                _action();\n            }\n        }\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Generator/IIdGenerator.cs", "chunked_list": ["\ufeffnamespace ClockSnowFlake\n{\n    /// <summary>\n    /// ID \u751f\u6210\u5668\n    /// </summary>\n    /// <typeparam name=\"T\">\u6570\u636e\u7c7b\u578b</typeparam>\n    public interface IIdGenerator<out T>\n    {\n        /// <summary>\n        /// \u521b\u5efa ID\n        /// </summary>\n        /// <returns></returns>\n        T Create();\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Generator/ILongGenerator.cs", "chunked_list": ["\ufeffnamespace ClockSnowFlake\n{\n    /// <summary>\n    /// Long Id \u751f\u6210\u5668\n    /// </summary>\n    public interface ILongGenerator : IIdGenerator<long>\n    {\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Generator/ClockSnowFlakeIdGenerator.cs", "chunked_list": ["\ufeffnamespace ClockSnowFlake\n{\n    /// <summary>\n    /// \u57fa\u4e8e\u65f6\u949f\u5e8f\u5217\u7684 \u96ea\u82b1\u7b97\u6cd5ID \u751f\u6210\u5668\n    /// </summary>\n    public class ClockSnowFlakeIdGenerator : ILongGenerator\n    {\n        public ClockSnowFlakeIdGenerator()\n        {\n            var workerId = SnowFakeOptionsConst.WorkId;\n            _id = new ClockSnowflakeId(workerId);\n        }\n\n        /// <summary>\n        /// \u57fa\u4e8e\u65f6\u949f\u5e8f\u5217\u7684\u96ea\u82b1\u7b97\u6cd5ID\n        /// </summary>", "        private readonly ClockSnowflakeId _id;\n\n        /// <summary>\n        /// \u83b7\u53d6<see cref=\"ClockSnowFlakeIdGenerator\"/>\u7c7b\u578b\u7684\u5b9e\u4f8b\n        /// </summary>\n        public static ClockSnowFlakeIdGenerator Current { get; set; } = new ClockSnowFlakeIdGenerator();\n\n        /// <summary>\n        /// \u521b\u5efaID\n        /// </summary>\n        /// <returns></returns>", "        public long Create()\n        {\n            return _id.NextId();\n        }\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Extensions/ServiceCollectionExtensions.cs", "chunked_list": ["\ufeffusing System;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Primitives;\nusing ClockSnowFlake;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n    public static class ServiceCollectionExtensions\n    {\n        public static IServiceCollection AddSnowFlakeId(this IServiceCollection services, IConfiguration configuration, Action<SnowFakeOptions> configure = null, string sectionName = null)\n        {\n            sectionName ??= SnowFakeOptions.SectionName;\n            services.AddOptions<SnowFakeOptions>();\n            services.PostConfigure<SnowFakeOptions>(x =>\n            {\n                configure?.Invoke(x);\n            });\n            var options = configuration.GetSection(sectionName).Get<SnowFakeOptions>() ?? new SnowFakeOptions();\n            configure?.Invoke(options);\n            SnowFakeOptionsConst.WorkId = options.WorkId;\n            Console.WriteLine($\"SnowWorkId:{SnowFakeOptionsConst.WorkId}\");\n            return services;\n        }\n", "    public static class ServiceCollectionExtensions\n    {\n        public static IServiceCollection AddSnowFlakeId(this IServiceCollection services, IConfiguration configuration, Action<SnowFakeOptions> configure = null, string sectionName = null)\n        {\n            sectionName ??= SnowFakeOptions.SectionName;\n            services.AddOptions<SnowFakeOptions>();\n            services.PostConfigure<SnowFakeOptions>(x =>\n            {\n                configure?.Invoke(x);\n            });\n            var options = configuration.GetSection(sectionName).Get<SnowFakeOptions>() ?? new SnowFakeOptions();\n            configure?.Invoke(options);\n            SnowFakeOptionsConst.WorkId = options.WorkId;\n            Console.WriteLine($\"SnowWorkId:{SnowFakeOptionsConst.WorkId}\");\n            return services;\n        }\n", "        public static IServiceCollection AddSnowFlakeId(this IServiceCollection services, Action<SnowFakeOptions> configure)\n        {\n            services.AddOptions<SnowFakeOptions>().Configure(configure);\n \n            var options = new SnowFakeOptions();\n            configure.Invoke(options);\n\n            SnowFakeOptionsConst.WorkId = options.WorkId;\n            Console.WriteLine($\"SnowWorkId:{SnowFakeOptionsConst.WorkId}\");\n            return services;\n        }\n", "        public static void AddSnowFlakeId(this IConfiguration configuration, Action<SnowFakeOptions> configure = null, string sectionName = null)\n        {\n            sectionName ??= SnowFakeOptions.SectionName;\n            var options = configuration.GetSection(sectionName).Get<SnowFakeOptions>() ?? new SnowFakeOptions();\n            configure?.Invoke(options);\n            SnowFakeOptionsConst.WorkId = options.WorkId;\n            Console.WriteLine($\"SnowWorkId:{SnowFakeOptionsConst.WorkId}\");\n        }\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Options/SnowFakeOptionsConst.cs", "chunked_list": ["\ufeffnamespace ClockSnowFlake\n{\n    public class SnowFakeOptionsConst\n    {\n        /// <summary>\n        /// \u5de5\u4f5c\u8282\u70b9ID\uff0c\u8303\u56f4 0~128\n        /// </summary>\n        public static long? WorkId { get; set; }\n    }\n}\n"]}
{"filename": "src/ClockSnowFlake/Options/SnowFlakeOptions.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Options;\n\nnamespace ClockSnowFlake\n{\n    public class SnowFakeOptions\n    {\n        public const string SectionName = \"SnowFlakeId\";\n\n        /// <summary>\n        /// \u5de5\u4f5c\u8282\u70b9ID\uff0c\u8303\u56f4 0~128\n        /// </summary>\n        public int? WorkId { get; set; }\n    }\n}\n"]}
