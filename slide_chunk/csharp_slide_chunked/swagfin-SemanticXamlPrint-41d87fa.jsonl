{"filename": "SemanticXamlPrint.DemoNetCore/Program.cs", "chunked_list": ["\ufeffusing PdfSharpCore.Pdf;\nusing SemanticXamlPrint.Parser;\nusing SemanticXamlPrint.Parser.Components;\nusing SemanticXamlPrint.PDF.NetCore;\nusing System;\nusing System.IO;\n\nnamespace SemanticXamlPrint.DemoNetCore\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"TESTING XAML PRINT\");\n            Console.BackgroundColor = ConsoleColor.Black;\n            Console.ForegroundColor = ConsoleColor.White;\n            try\n            {\n                //Get Template Contents\n                byte[] xamlFileBytes = File.ReadAllBytes(\"custom.excessgrid.template\");\n                //Use Default Parser \n                IXamlComponent xamlComponent = DefaultXamlParser.Parse(xamlFileBytes);\n\n                //####  PDF SHARP #####", "{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"TESTING XAML PRINT\");\n            Console.BackgroundColor = ConsoleColor.Black;\n            Console.ForegroundColor = ConsoleColor.White;\n            try\n            {\n                //Get Template Contents\n                byte[] xamlFileBytes = File.ReadAllBytes(\"custom.excessgrid.template\");\n                //Use Default Parser \n                IXamlComponent xamlComponent = DefaultXamlParser.Parse(xamlFileBytes);\n\n                //####  PDF SHARP #####", "                using (PdfDocument document = new PdfDocument())\n                {\n                    //Use Xaml Draw Extension to Generate PDF\n                    document.DrawXamlComponent(xamlComponent);\n                    // Save the PDF document to a file\n                    document.Save(\"outputcore.pdf\");\n                }\n                //####  PDF SHARP #####\n\n\n            }", "            catch (Exception ex)\n            {\n                Console.BackgroundColor = ConsoleColor.Black;\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(ex.Message.ToString());\n                Console.BackgroundColor = ConsoleColor.Black;\n                Console.ForegroundColor = ConsoleColor.White;\n            }\n\n            Console.ReadLine();\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF/DefaultXamlXGraphics.cs", "chunked_list": ["\ufeffusing PdfSharp.Drawing;\nusing PdfSharp.Pdf;\nusing SemanticXamlPrint.Parser.Components;\nusing System;\n\nnamespace SemanticXamlPrint.PDF\n{\n    public static class DefaultXamlXGraphics\n    {\n        public static float DrawXamlComponent(this XGraphics graphics, IXamlComponent xamlComponent, float yPositionDraw = 0)\n        {", "        public static float DrawXamlComponent(this XGraphics graphics, IXamlComponent xamlComponent, float yPositionDraw = 0)\n        {\n            if (xamlComponent == null) return yPositionDraw;\n            if (xamlComponent.Type != typeof(TemplateComponent)) throw new Exception($\"Root Component must be that of a [{nameof(TemplateComponent)}] but currently is: [{xamlComponent.Name}]\");\n            TemplateComponent Template = (TemplateComponent)xamlComponent;\n            ComponentXDrawingFormatting TemplateFormatting = Template.GetPdfXDrawingProperties(XDefaults.Formatting) ?? throw new Exception(\"Default template properties are missing\");\n            float _currentLineY = yPositionDraw + Template.MarginTop;\n            //Draw Root Component Children\n            for (int i = 0; i < Template?.Children?.Count; i++)\n                _currentLineY = graphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)graphics.PageSize.Width);\n            return _currentLineY;\n        }", "            for (int i = 0; i < Template?.Children?.Count; i++)\n                _currentLineY = graphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)graphics.PageSize.Width);\n            return _currentLineY;\n        }\n        public static float DrawXamlComponent(this PdfDocument document, IXamlComponent xamlComponent, float yPositionDraw = 0, PdfSharp.PageOrientation pageOrientation = PdfSharp.PageOrientation.Portrait)\n        {\n            if (xamlComponent == null) return yPositionDraw;\n            if (xamlComponent.Type != typeof(TemplateComponent)) throw new Exception($\"Root Component must be that of a [{nameof(TemplateComponent)}] but currently is: [{xamlComponent.Name}]\");\n            TemplateComponent Template = (TemplateComponent)xamlComponent;\n            ComponentXDrawingFormatting TemplateFormatting = Template.GetPdfXDrawingProperties(XDefaults.Formatting) ?? throw new Exception(\"Default template properties are missing\");\n            float _currentLineY = yPositionDraw + Template.MarginTop;\n            //create default Page\n            // Add a page to the document\n            PdfPage page = document.AddPage();\n            page.Orientation = pageOrientation;\n            //Draw Root Component Children", "            for (int i = 0; i < Template?.Children?.Count; i++)\n            {\n                double pageHeight = page.Height.Point - 2 * Template.MarginTop;\n                if (_currentLineY > pageHeight)\n                {\n                    page = document.AddPage();\n                    page.Orientation = pageOrientation;\n                    _currentLineY = yPositionDraw + Template.MarginTop;\n                }\n                //Draw Component\n                using (XGraphics xgraphics = XGraphics.FromPdfPage(page))\n                    _currentLineY = xgraphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)xgraphics.PageSize.Width);\n            }\n            return _currentLineY;\n        }\n    }\n}\n", "                using (XGraphics xgraphics = XGraphics.FromPdfPage(page))\n                    _currentLineY = xgraphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)xgraphics.PageSize.Width);\n            }\n            return _currentLineY;\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF/_XDefaults.cs", "chunked_list": ["\ufeffusing PdfSharp.Drawing;\n\nnamespace SemanticXamlPrint.PDF\n{\n    public static class XDefaults\n    {\n        public static ComponentXDrawingFormatting Formatting = new ComponentXDrawingFormatting\n        {\n            Font = new XFont(\"Calibri\", 12, XFontStyle.Regular),\n            StringFormat = new XStringFormat { Alignment = XStringAlignment.Near, LineAlignment = XLineAlignment.Near },\n            Brush = XBrushes.Black\n        };\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF/Extensions/XGraphicsQRCodeExtensions.cs", "chunked_list": ["\ufeffusing PdfSharp.Drawing;\nusing QRCoder;\nusing System;\nusing System.Drawing;\nusing System.IO;\n\nnamespace SemanticXamlPrint.PDF\n{\n    internal static class XGraphicsQRCodeExtensions\n    {\n        public static int DrawQRCodeCenteredAndReturnHeight(this XGraphics graphics, string text, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n            //Generate QR Code", "    internal static class XGraphicsQRCodeExtensions\n    {\n        public static int DrawQRCodeCenteredAndReturnHeight(this XGraphics graphics, string text, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n            //Generate QR Code\n            using (QRCodeGenerator qrGenerator = new QRCodeGenerator())\n            using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(text ?? \"unspecified\", QRCodeGenerator.ECCLevel.Q))\n            using (QRCode qrCode = new QRCode(qrCodeData))\n            {\n                using (MemoryStream stream = new MemoryStream())\n                {\n                    Bitmap qrCodeImage = qrCode.GetGraphic(10);\n                    qrCodeImage.Save(stream, System.Drawing.Imaging.ImageFormat.Png);\n                    //Draw Image\n                    float newWidth = Math.Min(qrCodeImage.Height, maxWidth > 0 ? maxWidth : qrCodeImage.Width);\n                    float newHeight = Math.Min(qrCodeImage.Height, maxHeight > 0 ? maxHeight : qrCodeImage.Height);\n                    float centeredX = x + (maxLayoutWith - newWidth) / 2;\n                    graphics.DrawImage(XImage.FromStream(stream), centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n                    return (int)newHeight;\n                }\n            }\n        }\n    }\n}\n", "                using (MemoryStream stream = new MemoryStream())\n                {\n                    Bitmap qrCodeImage = qrCode.GetGraphic(10);\n                    qrCodeImage.Save(stream, System.Drawing.Imaging.ImageFormat.Png);\n                    //Draw Image\n                    float newWidth = Math.Min(qrCodeImage.Height, maxWidth > 0 ? maxWidth : qrCodeImage.Width);\n                    float newHeight = Math.Min(qrCodeImage.Height, maxHeight > 0 ? maxHeight : qrCodeImage.Height);\n                    float centeredX = x + (maxLayoutWith - newWidth) / 2;\n                    graphics.DrawImage(XImage.FromStream(stream), centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n                    return (int)newHeight;\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF/Extensions/XGraphicsExtensions.cs", "chunked_list": ["\ufeffusing PdfSharp.Drawing;\nusing PdfSharp.Drawing.Layout;\nusing SemanticXamlPrint.Parser.Components;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nnamespace SemanticXamlPrint.PDF", "\nnamespace SemanticXamlPrint.PDF\n{\n    public static class XGraphicsExtensions\n    {\n        public static float DrawComponent(this XGraphics graphics, IXamlComponent component, ComponentXDrawingFormatting TemplateFormatting, float currentX, float currentY, float maxLayoutWidth)\n        {\n            maxLayoutWidth = maxLayoutWidth == 0 ? (float)graphics.PageSize.Width : maxLayoutWidth;\n            //Draw\n            if (component.Type == typeof(LineBreakComponent))\n            {\n                currentY += 3;\n            }", "            if (component.Type == typeof(LineBreakComponent))\n            {\n                currentY += 3;\n            }\n            else if (component.Type == typeof(LineComponent))\n            {\n                LineComponent lineComponent = (LineComponent)component;\n                currentY += 3;\n                currentY += graphics.DrawlLineAndReturnHeight(lineComponent.Style.ToDashStyle(), currentX, currentY, (int)maxLayoutWidth);\n                currentY += 3;\n            }", "            else if (component.Type == typeof(ImageComponent))\n            {\n                ImageComponent imageComponent = (ImageComponent)component;\n                string imageSource = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, imageComponent.Source ?? \"default.png\");\n                if (File.Exists(imageSource))\n                {\n                    currentY += graphics.DrawImageCenteredAndReturnHeight(XImage.FromFile(imageSource), currentX, currentY, imageComponent.Width, imageComponent.Height, maxLayoutWidth);\n                }\n            }\n            else if (component.Type == typeof(QRCodeComponent))\n            {\n                QRCodeComponent qRCodeComponent = (QRCodeComponent)component;\n                currentY += graphics.DrawQRCodeCenteredAndReturnHeight(qRCodeComponent.Text, currentX, currentY, qRCodeComponent.Width, qRCodeComponent.Height, maxLayoutWidth);\n            }", "            else if (component.Type == typeof(QRCodeComponent))\n            {\n                QRCodeComponent qRCodeComponent = (QRCodeComponent)component;\n                currentY += graphics.DrawQRCodeCenteredAndReturnHeight(qRCodeComponent.Text, currentX, currentY, qRCodeComponent.Width, qRCodeComponent.Height, maxLayoutWidth);\n            }\n            else if (component.Type == typeof(DataComponent))\n            {\n                DataComponent dataComponent = (DataComponent)component;\n                ComponentXDrawingFormatting fmt = component.GetPdfXDrawingProperties(TemplateFormatting);\n                //Draw Data Component\n                currentY += graphics.DrawStringAndReturnHeight(dataComponent.Text, dataComponent.TextWrap, fmt, currentX, currentY, (int)maxLayoutWidth);\n            }", "            else if (component.Type == typeof(CellsComponent))\n            {\n                CellsComponent dataRowComponent = (CellsComponent)component;\n                ComponentXDrawingFormatting rowfmt = component.GetPdfXDrawingProperties(TemplateFormatting);\n                //Get all Children of DataRowCells\n                List<CellComponent> dataRowCells = dataRowComponent.Children?.Where(element => element.Type == typeof(CellComponent)).Select(validElement => (CellComponent)validElement).ToList();\n                int additionalHeight = 0;\n                foreach (CellComponent cell in dataRowCells)\n                {\n                    ComponentXDrawingFormatting cellFmt = cell.GetPdfXDrawingProperties(rowfmt);\n                    //Set RowCell Location\n                    float x = (cell.X <= 0) ? 0f : cell.X;\n                    float y = (cell.Y <= 0) ? currentY : cell.Y;\n                    float z = (cell.Z <= 0) ? (int)maxLayoutWidth : cell.Z;\n                    //Write String \n                    int textHeight = graphics.DrawStringAndReturnHeight(cell.Text, cell.TextWrap, cellFmt, x, y, z);\n                    additionalHeight = (textHeight > additionalHeight) ? textHeight : additionalHeight;\n                }\n                //Add Line Height\n                currentY += additionalHeight;\n            }", "            else if (component.Type == typeof(GridComponent))\n            {\n                GridComponent gridComponent = (GridComponent)component;\n                ComponentXDrawingFormatting gridfmt = component.GetPdfXDrawingProperties(TemplateFormatting);\n                List<int> columnWidths = graphics.GetDivideColumnWidths(gridComponent.ColumnWidths, maxLayoutWidth);\n                float y_before_grid = currentY;\n                float longest_column_y = currentY;\n                //Get Grid Rows\n                List<GridRowComponent> gridRows = gridComponent.Children?.Where(element => element.Type == typeof(GridRowComponent)).Select(validElement => (GridRowComponent)validElement).ToList();\n                foreach (GridRowComponent row in gridRows)\n                {\n                    float current_y = longest_column_y;\n                    float current_x = currentX;\n                    ComponentXDrawingFormatting rowFmt = row.GetPdfXDrawingProperties(gridfmt);", "                foreach (GridRowComponent row in gridRows)\n                {\n                    float current_y = longest_column_y;\n                    float current_x = currentX;\n                    ComponentXDrawingFormatting rowFmt = row.GetPdfXDrawingProperties(gridfmt);\n                    for (int colIndex = 0; colIndex < columnWidths.Count; colIndex++)\n                    {\n                        IXamlComponent componentUnderColumn = row.Children?.FirstOrDefault(x => x.CustomProperties.IsPropertyExistsWithValue(\"grid.column\", colIndex.ToString()));\n                        if (componentUnderColumn != null)\n                        {\n                            float new_y = graphics.DrawComponent(componentUnderColumn, rowFmt, current_x, current_y, columnWidths[colIndex]);\n                            longest_column_y = (new_y > longest_column_y) ? new_y : longest_column_y;\n                            //Next Column Starting X co-ordinates\n                            current_x += columnWidths[colIndex];\n                        }\n                    }\n                }\n                //set Highest Column Height\n                currentY = longest_column_y;\n                //# Check if Drawing Border", "                        if (componentUnderColumn != null)\n                        {\n                            float new_y = graphics.DrawComponent(componentUnderColumn, rowFmt, current_x, current_y, columnWidths[colIndex]);\n                            longest_column_y = (new_y > longest_column_y) ? new_y : longest_column_y;\n                            //Next Column Starting X co-ordinates\n                            current_x += columnWidths[colIndex];\n                        }\n                    }\n                }\n                //set Highest Column Height\n                currentY = longest_column_y;\n                //# Check if Drawing Border", "                if (!string.IsNullOrEmpty(gridComponent.BorderStyle))\n                {\n                    graphics.DrawRectangleAndReturnHeight(gridComponent.BorderStyle.ToDashStyle(), currentX, y_before_grid, (int)maxLayoutWidth, (currentY - y_before_grid), gridComponent.BorderWidth);\n                    float current_x = currentX;\n                    for (int colIndex = 0; colIndex < columnWidths.Count; colIndex++)\n                    {\n                        graphics.DrawRectangleAndReturnHeight(gridComponent.BorderStyle.ToDashStyle(), current_x, y_before_grid, columnWidths[colIndex], (currentY - y_before_grid), gridComponent.BorderWidth);\n                        current_x += columnWidths[colIndex];\n                    }\n                }\n            }\n            else\n            {\n                //unknown Component\n            }\n            return currentY;\n        }\n", "        public static int DrawStringAndReturnHeight(this XGraphics gfx, string text, bool textWrap, ComponentXDrawingFormatting cellFmt, double x, double y, double z)\n        {\n            text = text ?? string.Empty;\n            XFont font = cellFmt.Font;\n            XStringFormat stringFormat = cellFmt.StringFormat;\n            XBrush brush = cellFmt.Brush;\n            //Check wrap\n            if (textWrap && gfx.MeasureString(text, font).Width > z)\n            {\n                string[] lines = SplitTextIntoLines(gfx, text, font, z);\n                double lineHeight = font.GetHeight();\n                double totalHeight = lines.Length * lineHeight;\n                XTextFormatter textFormatter = new XTextFormatter(gfx);", "                foreach (string line in lines)\n                {\n                    textFormatter.DrawString(line, font, brush, new XRect(x + 2, y, (z - 2), totalHeight), stringFormat);\n                    y += lineHeight;\n                }\n                return (int)totalHeight;\n            }\n            else\n            {\n                XRect layoutRect = new XRect(x + 2, y, (z - 4), gfx.MeasureString(text, font).Height);\n                gfx.DrawString(text, font, brush, layoutRect, stringFormat);\n                return (int)layoutRect.Height;\n            }\n        }\n\n", "        public static List<int> GetDivideColumnWidths(this XGraphics graphics, string pattern, float maxLayoutWith)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(pattern)) return GetDivideColumnWidths(graphics, 1, maxLayoutWith);\n                List<int> columnWidths = new List<int>();\n                int total = pattern.Split(new char[] { '*' }, StringSplitOptions.RemoveEmptyEntries).Sum(p => Convert.ToInt32(p));\n                if (total < 1) return GetDivideColumnWidths(graphics, 1, maxLayoutWith);\n                int remainingWidth = (int)maxLayoutWith;\n                foreach (string s in pattern.Split('*'))\n                {\n                    int w = (int)Math.Round((double)remainingWidth / total * Convert.ToInt32(s));\n                    columnWidths.Add(w);\n                    remainingWidth -= w;\n                    total -= Convert.ToInt32(s);\n                }\n                return columnWidths;\n            }\n            catch { return GetDivideColumnWidths(graphics, 1, maxLayoutWith); }\n        }", "                foreach (string s in pattern.Split('*'))\n                {\n                    int w = (int)Math.Round((double)remainingWidth / total * Convert.ToInt32(s));\n                    columnWidths.Add(w);\n                    remainingWidth -= w;\n                    total -= Convert.ToInt32(s);\n                }\n                return columnWidths;\n            }\n            catch { return GetDivideColumnWidths(graphics, 1, maxLayoutWith); }\n        }", "        public static List<int> GetDivideColumnWidths(this XGraphics graphics, int columns, float maxLayoutWith)\n        {\n            columns = columns <= 0 ? 1 : columns;\n            int evenColumnWidth = (int)maxLayoutWith / columns;\n            List<int> columnWidths = new List<int>();\n            for (var i = 0; i < columns; i += 1)\n                columnWidths.Add(evenColumnWidth);\n            return columnWidths;\n        }\n\n        public static int DrawlLineAndReturnHeight(this XGraphics graphics, XDashStyle dashStyle, float x, float y, float z)\n        {\n            XPen pen = new XPen(XColors.Black)\n            {\n                DashStyle = dashStyle\n            };\n            graphics.DrawLine(pen, x, y, z, y);\n            return 1;\n        }", "        public static int DrawlLineAndReturnHeight(this XGraphics graphics, XDashStyle dashStyle, float x, float y, float z)\n        {\n            XPen pen = new XPen(XColors.Black)\n            {\n                DashStyle = dashStyle\n            };\n            graphics.DrawLine(pen, x, y, z, y);\n            return 1;\n        }\n        public static int DrawImageCenteredAndReturnHeight(this XGraphics graphics, XImage image, double x, double y, double maxWidth, double maxHeight, double maxLayoutWidth)\n        {\n            double newWidth = Math.Min(image.PixelWidth, maxWidth > 0 ? maxWidth : image.PixelWidth);\n            double newHeight = Math.Min(image.PixelHeight, maxHeight > 0 ? maxHeight : image.PixelHeight);\n            double centeredX = x + (maxLayoutWidth - newWidth) / 2;\n            graphics.DrawImage(image, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n            return (int)newHeight;\n        }", "        public static int DrawImageCenteredAndReturnHeight(this XGraphics graphics, XImage image, double x, double y, double maxWidth, double maxHeight, double maxLayoutWidth)\n        {\n            double newWidth = Math.Min(image.PixelWidth, maxWidth > 0 ? maxWidth : image.PixelWidth);\n            double newHeight = Math.Min(image.PixelHeight, maxHeight > 0 ? maxHeight : image.PixelHeight);\n            double centeredX = x + (maxLayoutWidth - newWidth) / 2;\n            graphics.DrawImage(image, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n            return (int)newHeight;\n        }\n        public static int DrawRectangleAndReturnHeight(this XGraphics gfx, XDashStyle dashStyle, double x, double y, double width, double height, double lineWidth = 0.3)\n        {\n            XPen pen = new XPen(XColors.Black, lineWidth)\n            {\n                DashStyle = dashStyle\n            };\n            gfx.DrawRectangle(pen, x, y, width, height);\n            return (int)height;\n        }\n\n", "        public static int DrawRectangleAndReturnHeight(this XGraphics gfx, XDashStyle dashStyle, double x, double y, double width, double height, double lineWidth = 0.3)\n        {\n            XPen pen = new XPen(XColors.Black, lineWidth)\n            {\n                DashStyle = dashStyle\n            };\n            gfx.DrawRectangle(pen, x, y, width, height);\n            return (int)height;\n        }\n\n", "        private static string[] SplitTextIntoLines(XGraphics gfx, string text, XFont font, double maxWidth)\n        {\n            string[] words = text?.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n            List<string> lines = new List<string>();\n            StringBuilder currentLine = new StringBuilder();\n            foreach (string word in words)\n            {\n                if (gfx.MeasureString(string.Format(\"{0}{1} \", currentLine, word), font).Width <= maxWidth)\n                {\n                    currentLine.Append(string.Format(\"{0} \", word));\n                }\n                else\n                {\n                    lines.Add(currentLine.ToString().TrimEnd());\n                    currentLine.Clear();\n                    currentLine.Append(string.Format(\"{0} \", word));\n                }\n            }", "            if (currentLine.Length > 0)\n            {\n                lines.Add(currentLine.ToString().TrimEnd());\n            }\n            return lines.ToArray();\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF/Extensions/XamlComponentFormattingExtensions.cs", "chunked_list": ["\ufeffusing PdfSharp.Drawing;\nusing SemanticXamlPrint.Parser.Components;\nusing System;\n\nnamespace SemanticXamlPrint.PDF\n{\n    internal static class XamlComponentFormattingExtensions\n    {\n        public static ComponentXDrawingFormatting GetPdfXDrawingProperties(this IXamlComponent component, ComponentXDrawingFormatting parentFormatting)\n        {\n", "        public static ComponentXDrawingFormatting GetPdfXDrawingProperties(this IXamlComponent component, ComponentXDrawingFormatting parentFormatting)\n        {\n\n            if (!component.Type.IsSubclassOf(typeof(XamlComponentCommonProperties))) return parentFormatting;\n            XamlComponentCommonProperties styleFmt = (XamlComponentCommonProperties)component;\n            //Return Custom\n            return new ComponentXDrawingFormatting\n            {\n                Font = new XFont((string.IsNullOrEmpty(styleFmt.Font) ? parentFormatting.Font.Name : styleFmt.Font),\n                                ((styleFmt.FontSize <= 0) ? parentFormatting.Font.Size : styleFmt.FontSize),\n                                (string.IsNullOrEmpty(styleFmt.FontStyle) ? parentFormatting.Font.Style : GetOverridedFontStyle(styleFmt.FontStyle))),\n\n                StringFormat = string.IsNullOrEmpty(styleFmt.Align) ? parentFormatting.StringFormat : GetConvertedStringFormat(styleFmt.Align),\n                Brush = string.IsNullOrEmpty(styleFmt.Color) ? parentFormatting.Brush : GetXSolidBrushFromColorString(styleFmt.Color)\n            };\n        }\n", "        private static XFontStyle GetOverridedFontStyle(string fontStyle)\n        {\n            switch (fontStyle?.Trim()?.ToLower())\n            {\n                case \"bold\":\n                    return XFontStyle.Bold;\n                case \"italic\":\n                    return XFontStyle.Italic;\n                case \"underline\":\n                    return XFontStyle.Underline;\n                case \"strikeout\":\n                    return XFontStyle.Strikeout;\n                default:\n                    return XFontStyle.Regular;\n            }\n        }", "        private static XStringFormat GetConvertedStringFormat(string alignment)\n        {\n            switch (alignment?.Trim()?.ToLower())\n            {\n                case \"center\":\n                    return new XStringFormat { Alignment = XStringAlignment.Center };\n                case \"right\":\n                    return new XStringFormat { Alignment = XStringAlignment.Far };\n                default:\n                    return new XStringFormat { Alignment = XStringAlignment.Near };\n            }\n        }\n", "        public static XDashStyle ToDashStyle(this string style)\n        {\n            switch (style?.Trim()?.ToLower())\n            {\n                case \"dash\":\n                    return XDashStyle.Dash;\n                case \"dot\":\n                    return XDashStyle.Dot;\n                case \"dashdot\":\n                    return XDashStyle.DashDot;\n                case \"dashdotdot\":\n                    return XDashStyle.DashDotDot;\n                default:\n                    return XDashStyle.Solid;\n            }\n        }", "        public static XSolidBrush GetXSolidBrushFromColorString(string colorString)\n        {\n            if (string.IsNullOrEmpty(colorString)) return XBrushes.Black;\n            string colorCode = colorString.ToLower().Trim();\n            //support html colors e.g. #B56E22\n            if (colorCode.StartsWith(\"#\") && colorCode.Length == 7) return GetHtmlColor(colorCode.Substring(1));\n            return Enum.TryParse(colorCode, true, out XKnownColor xKnownColor) ? new XSolidBrush(XColor.FromKnownColor(xKnownColor)) : XBrushes.Black;\n        }\n\n        private static XSolidBrush GetHtmlColor(string colorCode)\n        {\n            try\n            {\n                int r = int.Parse(colorCode.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);\n                int g = int.Parse(colorCode.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);\n                int b = int.Parse(colorCode.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);\n                return new XSolidBrush(XColor.FromArgb(r, g, b));\n            }\n            catch { return XBrushes.Black; }\n        }\n    }", "        private static XSolidBrush GetHtmlColor(string colorCode)\n        {\n            try\n            {\n                int r = int.Parse(colorCode.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);\n                int g = int.Parse(colorCode.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);\n                int b = int.Parse(colorCode.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);\n                return new XSolidBrush(XColor.FromArgb(r, g, b));\n            }\n            catch { return XBrushes.Black; }\n        }\n    }", "    public class ComponentXDrawingFormatting\n    {\n        public XStringFormat StringFormat { get; set; }\n        public XFont Font { get; set; }\n        public XBrush Brush { get; set; }\n    }\n}"]}
{"filename": "SemanticXamlPrint.PDF.NetCore/DefaultXamlXGraphics.cs", "chunked_list": ["\ufeffusing PdfSharpCore.Drawing;\nusing PdfSharpCore.Pdf;\nusing SemanticXamlPrint.Parser.Components;\nusing System;\n\nnamespace SemanticXamlPrint.PDF.NetCore\n{\n    public static class DefaultXamlXGraphics\n    {\n        public static float DrawXamlComponent(this XGraphics graphics, IXamlComponent xamlComponent, float yPositionDraw = 0)\n        {", "        public static float DrawXamlComponent(this XGraphics graphics, IXamlComponent xamlComponent, float yPositionDraw = 0)\n        {\n            if (xamlComponent == null) return yPositionDraw;\n            if (xamlComponent.Type != typeof(TemplateComponent)) throw new Exception($\"Root Component must be that of a [{nameof(TemplateComponent)}] but currently is: [{xamlComponent.Name}]\");\n            TemplateComponent Template = (TemplateComponent)xamlComponent;\n            ComponentXDrawingFormatting TemplateFormatting = Template.GetPdfXDrawingProperties(XDefaults.Formatting) ?? throw new Exception(\"Default template properties are missing\");\n            float _currentLineY = yPositionDraw + Template.MarginTop;\n            //Draw Root Component Children\n            for (int i = 0; i < Template?.Children?.Count; i++)\n                _currentLineY = graphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)graphics.PageSize.Width);\n            return _currentLineY;\n        }", "            for (int i = 0; i < Template?.Children?.Count; i++)\n                _currentLineY = graphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)graphics.PageSize.Width);\n            return _currentLineY;\n        }\n        public static float DrawXamlComponent(this PdfDocument document, IXamlComponent xamlComponent, float yPositionDraw = 0, PdfSharpCore.PageOrientation pageOrientation = PdfSharpCore.PageOrientation.Portrait)\n        {\n            if (xamlComponent == null) return yPositionDraw;\n            if (xamlComponent.Type != typeof(TemplateComponent)) throw new Exception($\"Root Component must be that of a [{nameof(TemplateComponent)}] but currently is: [{xamlComponent.Name}]\");\n            TemplateComponent Template = (TemplateComponent)xamlComponent;\n            ComponentXDrawingFormatting TemplateFormatting = Template.GetPdfXDrawingProperties(XDefaults.Formatting) ?? throw new Exception(\"Default template properties are missing\");\n            float _currentLineY = yPositionDraw + Template.MarginTop;\n            //create default Page\n            // Add a page to the document\n            PdfPage page = document.AddPage();\n            page.Orientation = pageOrientation;\n            //Draw Root Component Children", "            for (int i = 0; i < Template?.Children?.Count; i++)\n            {\n                double pageHeight = page.Height.Point - 2 * Template.MarginTop;\n                if (_currentLineY > pageHeight)\n                {\n                    page = document.AddPage();\n                    page.Orientation = pageOrientation;\n                    _currentLineY = yPositionDraw + Template.MarginTop;\n                }\n                //Draw Component\n                using (XGraphics xgraphics = XGraphics.FromPdfPage(page))\n                    _currentLineY = xgraphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)xgraphics.PageSize.Width);\n            }\n            return _currentLineY;\n        }\n    }\n}\n", "                using (XGraphics xgraphics = XGraphics.FromPdfPage(page))\n                    _currentLineY = xgraphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, (float)xgraphics.PageSize.Width);\n            }\n            return _currentLineY;\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF.NetCore/_XDefaults.cs", "chunked_list": ["\ufeffusing PdfSharpCore.Drawing;\n\nnamespace SemanticXamlPrint.PDF.NetCore\n{\n    public static class XDefaults\n    {\n        public static ComponentXDrawingFormatting Formatting = new ComponentXDrawingFormatting\n        {\n            Font = new XFont(\"Calibri\", 12, XFontStyle.Regular),\n            StringFormat = new XStringFormat { Alignment = XStringAlignment.Near, LineAlignment = XLineAlignment.Near },\n            Brush = XBrushes.Black\n        };\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF.NetCore/Extensions/XGraphicsQRCodeExtensions.cs", "chunked_list": ["\ufeffusing PdfSharpCore.Drawing;\nusing QRCoder;\nusing System;\nusing System.IO;\n\nnamespace SemanticXamlPrint.PDF.NetCore\n{\n    internal static class XGraphicsQRCodeExtensions\n    {\n        public static int DrawQRCodeCenteredAndReturnHeight(this XGraphics graphics, string text, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n            //Generate QR Code", "        public static int DrawQRCodeCenteredAndReturnHeight(this XGraphics graphics, string text, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n            //Generate QR Code\n            using (QRCodeGenerator qrGenerator = new QRCodeGenerator())\n            using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(text ?? \"unspecified\", QRCodeGenerator.ECCLevel.Q))\n            using (QRCode qrCode = new QRCode(qrCodeData))\n            {\n                using (MemoryStream stream = new MemoryStream())\n                using (SixLabors.ImageSharp.Image qrCodeImage = qrCode.GetGraphic(10))\n                {\n                    qrCodeImage.Save(stream, new SixLabors.ImageSharp.Formats.Png.PngEncoder());\n                    byte[] streamBytes = stream.ToArray();\n                    float newWidth = Math.Min(qrCodeImage.Height, maxWidth > 0 ? maxWidth : qrCodeImage.Width);\n                    float newHeight = Math.Min(qrCodeImage.Height, maxHeight > 0 ? maxHeight : qrCodeImage.Height);\n                    float centeredX = x + (maxLayoutWith - newWidth) / 2;\n                    graphics.DrawImage(XImage.FromStream(() => { return new MemoryStream(streamBytes); }), centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n                    return (int)newHeight;\n                }\n            }\n        }\n    }\n}\n", "                using (SixLabors.ImageSharp.Image qrCodeImage = qrCode.GetGraphic(10))\n                {\n                    qrCodeImage.Save(stream, new SixLabors.ImageSharp.Formats.Png.PngEncoder());\n                    byte[] streamBytes = stream.ToArray();\n                    float newWidth = Math.Min(qrCodeImage.Height, maxWidth > 0 ? maxWidth : qrCodeImage.Width);\n                    float newHeight = Math.Min(qrCodeImage.Height, maxHeight > 0 ? maxHeight : qrCodeImage.Height);\n                    float centeredX = x + (maxLayoutWith - newWidth) / 2;\n                    graphics.DrawImage(XImage.FromStream(() => { return new MemoryStream(streamBytes); }), centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n                    return (int)newHeight;\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF.NetCore/Extensions/XGraphicsExtensions.cs", "chunked_list": ["\ufeffusing PdfSharpCore.Drawing;\nusing PdfSharpCore.Drawing.Layout;\nusing SemanticXamlPrint.Parser.Components;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nnamespace SemanticXamlPrint.PDF.NetCore", "\nnamespace SemanticXamlPrint.PDF.NetCore\n{\n    public static class XGraphicsExtensions\n    {\n        public static float DrawComponent(this XGraphics graphics, IXamlComponent component, ComponentXDrawingFormatting TemplateFormatting, float currentX, float currentY, float maxLayoutWidth)\n        {\n            maxLayoutWidth = maxLayoutWidth == 0 ? (float)graphics.PageSize.Width : maxLayoutWidth;\n            //Draw\n            if (component.Type == typeof(LineBreakComponent))\n            {\n                currentY += 3;\n            }", "            if (component.Type == typeof(LineBreakComponent))\n            {\n                currentY += 3;\n            }\n            else if (component.Type == typeof(LineComponent))\n            {\n                LineComponent lineComponent = (LineComponent)component;\n                currentY += 3;\n                currentY += graphics.DrawlLineAndReturnHeight(lineComponent.Style.ToDashStyle(), currentX, currentY, (int)maxLayoutWidth);\n                currentY += 3;\n            }", "            else if (component.Type == typeof(ImageComponent))\n            {\n                ImageComponent imageComponent = (ImageComponent)component;\n                string imageSource = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, imageComponent.Source ?? \"default.png\");\n                if (File.Exists(imageSource))\n                {\n                    currentY += graphics.DrawImageCenteredAndReturnHeight(XImage.FromFile(imageSource), currentX, currentY, imageComponent.Width, imageComponent.Height, maxLayoutWidth);\n                }\n            }\n            else if (component.Type == typeof(QRCodeComponent))\n            {\n                QRCodeComponent qRCodeComponent = (QRCodeComponent)component;\n                currentY += graphics.DrawQRCodeCenteredAndReturnHeight(qRCodeComponent.Text, currentX, currentY, qRCodeComponent.Width, qRCodeComponent.Height, maxLayoutWidth);\n            }", "            else if (component.Type == typeof(QRCodeComponent))\n            {\n                QRCodeComponent qRCodeComponent = (QRCodeComponent)component;\n                currentY += graphics.DrawQRCodeCenteredAndReturnHeight(qRCodeComponent.Text, currentX, currentY, qRCodeComponent.Width, qRCodeComponent.Height, maxLayoutWidth);\n            }\n            else if (component.Type == typeof(DataComponent))\n            {\n                DataComponent dataComponent = (DataComponent)component;\n                ComponentXDrawingFormatting fmt = component.GetPdfXDrawingProperties(TemplateFormatting);\n                //Draw Data Component\n                currentY += graphics.DrawStringAndReturnHeight(dataComponent.Text, dataComponent.TextWrap, fmt, currentX, currentY, (int)maxLayoutWidth);\n            }", "            else if (component.Type == typeof(CellsComponent))\n            {\n                CellsComponent dataRowComponent = (CellsComponent)component;\n                ComponentXDrawingFormatting rowfmt = component.GetPdfXDrawingProperties(TemplateFormatting);\n                //Get all Children of DataRowCells\n                List<CellComponent> dataRowCells = dataRowComponent.Children?.Where(element => element.Type == typeof(CellComponent)).Select(validElement => (CellComponent)validElement).ToList();\n                int additionalHeight = 0;\n                foreach (CellComponent cell in dataRowCells)\n                {\n                    ComponentXDrawingFormatting cellFmt = cell.GetPdfXDrawingProperties(rowfmt);\n                    //Set RowCell Location\n                    float x = (cell.X <= 0) ? 0f : cell.X;\n                    float y = (cell.Y <= 0) ? currentY : cell.Y;\n                    float z = (cell.Z <= 0) ? (int)maxLayoutWidth : cell.Z;\n                    //Write String \n                    int textHeight = graphics.DrawStringAndReturnHeight(cell.Text, cell.TextWrap, cellFmt, x, y, z);\n                    additionalHeight = (textHeight > additionalHeight) ? textHeight : additionalHeight;\n                }\n                //Add Line Height\n                currentY += additionalHeight;\n            }", "            else if (component.Type == typeof(GridComponent))\n            {\n                GridComponent gridComponent = (GridComponent)component;\n                ComponentXDrawingFormatting gridfmt = component.GetPdfXDrawingProperties(TemplateFormatting);\n                List<int> columnWidths = graphics.GetDivideColumnWidths(gridComponent.ColumnWidths, maxLayoutWidth);\n                float y_before_grid = currentY;\n                float longest_column_y = currentY;\n                //Get Grid Rows\n                List<GridRowComponent> gridRows = gridComponent.Children?.Where(element => element.Type == typeof(GridRowComponent)).Select(validElement => (GridRowComponent)validElement).ToList();\n                foreach (GridRowComponent row in gridRows)\n                {\n                    float current_y = longest_column_y;\n                    float current_x = currentX;\n                    ComponentXDrawingFormatting rowFmt = row.GetPdfXDrawingProperties(gridfmt);", "                foreach (GridRowComponent row in gridRows)\n                {\n                    float current_y = longest_column_y;\n                    float current_x = currentX;\n                    ComponentXDrawingFormatting rowFmt = row.GetPdfXDrawingProperties(gridfmt);\n                    for (int colIndex = 0; colIndex < columnWidths.Count; colIndex++)\n                    {\n                        IXamlComponent componentUnderColumn = row.Children?.FirstOrDefault(x => x.CustomProperties.IsPropertyExistsWithValue(\"grid.column\", colIndex.ToString()));\n                        if (componentUnderColumn != null)\n                        {\n                            float new_y = graphics.DrawComponent(componentUnderColumn, rowFmt, current_x, current_y, columnWidths[colIndex]);\n                            longest_column_y = (new_y > longest_column_y) ? new_y : longest_column_y;\n                            //Next Column Starting X co-ordinates\n                            current_x += columnWidths[colIndex];\n                        }\n                    }\n                }\n                //set Highest Column Height\n                currentY = longest_column_y;\n                //# Check if Drawing Border", "                        if (componentUnderColumn != null)\n                        {\n                            float new_y = graphics.DrawComponent(componentUnderColumn, rowFmt, current_x, current_y, columnWidths[colIndex]);\n                            longest_column_y = (new_y > longest_column_y) ? new_y : longest_column_y;\n                            //Next Column Starting X co-ordinates\n                            current_x += columnWidths[colIndex];\n                        }\n                    }\n                }\n                //set Highest Column Height\n                currentY = longest_column_y;\n                //# Check if Drawing Border", "                if (!string.IsNullOrEmpty(gridComponent.BorderStyle))\n                {\n                    graphics.DrawRectangleAndReturnHeight(gridComponent.BorderStyle.ToDashStyle(), currentX, y_before_grid, (int)maxLayoutWidth, (currentY - y_before_grid), gridComponent.BorderWidth);\n                    float current_x = currentX;\n                    for (int colIndex = 0; colIndex < columnWidths.Count; colIndex++)\n                    {\n                        graphics.DrawRectangleAndReturnHeight(gridComponent.BorderStyle.ToDashStyle(), current_x, y_before_grid, columnWidths[colIndex], (currentY - y_before_grid), gridComponent.BorderWidth);\n                        current_x += columnWidths[colIndex];\n                    }\n                }\n            }\n            else\n            {\n                //unknown Component\n            }\n            return currentY;\n        }\n", "        public static int DrawStringAndReturnHeight(this XGraphics gfx, string text, bool textWrap, ComponentXDrawingFormatting cellFmt, double x, double y, double z)\n        {\n            text = text ?? string.Empty;\n            XFont font = cellFmt.Font;\n            XStringFormat stringFormat = cellFmt.StringFormat;\n            XBrush brush = cellFmt.Brush;\n            //Check wrap\n            if (textWrap && gfx.MeasureString(text, font).Width > z)\n            {\n                string[] lines = SplitTextIntoLines(gfx, text, font, z);\n                double lineHeight = font.GetHeight();\n                double totalHeight = lines.Length * lineHeight;\n                XTextFormatter textFormatter = new XTextFormatter(gfx);", "                foreach (string line in lines)\n                {\n                    textFormatter.DrawString(line, font, brush, new XRect(x + 2, y, (z - 2), totalHeight), stringFormat);\n                    y += lineHeight;\n                }\n                return (int)totalHeight;\n            }\n            else\n            {\n                XRect layoutRect = new XRect(x + 2, y, (z - 4), gfx.MeasureString(text, font).Height);\n                gfx.DrawString(text, font, brush, layoutRect, stringFormat);\n                return (int)layoutRect.Height;\n            }\n        }\n\n", "        public static List<int> GetDivideColumnWidths(this XGraphics graphics, string pattern, float maxLayoutWith)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(pattern)) return GetDivideColumnWidths(graphics, 1, maxLayoutWith);\n                List<int> columnWidths = new List<int>();\n                int total = pattern.Split(new char[] { '*' }, StringSplitOptions.RemoveEmptyEntries).Sum(p => Convert.ToInt32(p));\n                if (total < 1) return GetDivideColumnWidths(graphics, 1, maxLayoutWith);\n                int remainingWidth = (int)maxLayoutWith;\n                foreach (string s in pattern.Split('*'))\n                {\n                    int w = (int)Math.Round((double)remainingWidth / total * Convert.ToInt32(s));\n                    columnWidths.Add(w);\n                    remainingWidth -= w;\n                    total -= Convert.ToInt32(s);\n                }\n                return columnWidths;\n            }\n            catch { return GetDivideColumnWidths(graphics, 1, maxLayoutWith); }\n        }", "                foreach (string s in pattern.Split('*'))\n                {\n                    int w = (int)Math.Round((double)remainingWidth / total * Convert.ToInt32(s));\n                    columnWidths.Add(w);\n                    remainingWidth -= w;\n                    total -= Convert.ToInt32(s);\n                }\n                return columnWidths;\n            }\n            catch { return GetDivideColumnWidths(graphics, 1, maxLayoutWith); }\n        }", "        public static List<int> GetDivideColumnWidths(this XGraphics graphics, int columns, float maxLayoutWith)\n        {\n            columns = columns <= 0 ? 1 : columns;\n            int evenColumnWidth = (int)maxLayoutWith / columns;\n            List<int> columnWidths = new List<int>();\n            for (var i = 0; i < columns; i += 1)\n                columnWidths.Add(evenColumnWidth);\n            return columnWidths;\n        }\n\n        public static int DrawlLineAndReturnHeight(this XGraphics graphics, XDashStyle dashStyle, float x, float y, float z)\n        {\n            XPen pen = new XPen(XColors.Black)\n            {\n                DashStyle = dashStyle\n            };\n            graphics.DrawLine(pen, x, y, z, y);\n            return 1;\n        }", "        public static int DrawlLineAndReturnHeight(this XGraphics graphics, XDashStyle dashStyle, float x, float y, float z)\n        {\n            XPen pen = new XPen(XColors.Black)\n            {\n                DashStyle = dashStyle\n            };\n            graphics.DrawLine(pen, x, y, z, y);\n            return 1;\n        }\n        public static int DrawImageCenteredAndReturnHeight(this XGraphics graphics, XImage image, double x, double y, double maxWidth, double maxHeight, double maxLayoutWidth)\n        {\n            double newWidth = Math.Min(image.PixelWidth, maxWidth > 0 ? maxWidth : image.PixelWidth);\n            double newHeight = Math.Min(image.PixelHeight, maxHeight > 0 ? maxHeight : image.PixelHeight);\n            double centeredX = x + (maxLayoutWidth - newWidth) / 2;\n            graphics.DrawImage(image, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n            return (int)newHeight;\n        }", "        public static int DrawImageCenteredAndReturnHeight(this XGraphics graphics, XImage image, double x, double y, double maxWidth, double maxHeight, double maxLayoutWidth)\n        {\n            double newWidth = Math.Min(image.PixelWidth, maxWidth > 0 ? maxWidth : image.PixelWidth);\n            double newHeight = Math.Min(image.PixelHeight, maxHeight > 0 ? maxHeight : image.PixelHeight);\n            double centeredX = x + (maxLayoutWidth - newWidth) / 2;\n            graphics.DrawImage(image, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n            return (int)newHeight;\n        }\n        public static int DrawRectangleAndReturnHeight(this XGraphics gfx, XDashStyle dashStyle, double x, double y, double width, double height, double lineWidth = 0.3)\n        {\n            XPen pen = new XPen(XColors.Black, lineWidth)\n            {\n                DashStyle = dashStyle\n            };\n            gfx.DrawRectangle(pen, x, y, width, height);\n            return (int)height;\n        }\n\n", "        public static int DrawRectangleAndReturnHeight(this XGraphics gfx, XDashStyle dashStyle, double x, double y, double width, double height, double lineWidth = 0.3)\n        {\n            XPen pen = new XPen(XColors.Black, lineWidth)\n            {\n                DashStyle = dashStyle\n            };\n            gfx.DrawRectangle(pen, x, y, width, height);\n            return (int)height;\n        }\n\n", "        private static string[] SplitTextIntoLines(XGraphics gfx, string text, XFont font, double maxWidth)\n        {\n            string[] words = text?.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n            List<string> lines = new List<string>();\n            StringBuilder currentLine = new StringBuilder();\n            foreach (string word in words)\n            {\n                if (gfx.MeasureString(string.Format(\"{0}{1} \", currentLine, word), font).Width <= maxWidth)\n                {\n                    currentLine.Append(string.Format(\"{0} \", word));\n                }\n                else\n                {\n                    lines.Add(currentLine.ToString().TrimEnd());\n                    currentLine.Clear();\n                    currentLine.Append(string.Format(\"{0} \", word));\n                }\n            }", "            if (currentLine.Length > 0)\n            {\n                lines.Add(currentLine.ToString().TrimEnd());\n            }\n            return lines.ToArray();\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.PDF.NetCore/Extensions/XamlComponentFormattingExtensions.cs", "chunked_list": ["\ufeffusing PdfSharpCore.Drawing;\nusing SemanticXamlPrint.Parser.Components;\nusing System;\n\nnamespace SemanticXamlPrint.PDF.NetCore\n{\n    internal static class XamlComponentFormattingExtensions\n    {\n        public static ComponentXDrawingFormatting GetPdfXDrawingProperties(this IXamlComponent component, ComponentXDrawingFormatting parentFormatting)\n        {\n", "        public static ComponentXDrawingFormatting GetPdfXDrawingProperties(this IXamlComponent component, ComponentXDrawingFormatting parentFormatting)\n        {\n\n            if (!component.Type.IsSubclassOf(typeof(XamlComponentCommonProperties))) return parentFormatting;\n            XamlComponentCommonProperties styleFmt = (XamlComponentCommonProperties)component;\n            //Return Custom\n            return new ComponentXDrawingFormatting\n            {\n                Font = new XFont((string.IsNullOrEmpty(styleFmt.Font) ? parentFormatting.Font.Name : styleFmt.Font),\n                                ((styleFmt.FontSize <= 0) ? parentFormatting.Font.Size : styleFmt.FontSize),\n                                (string.IsNullOrEmpty(styleFmt.FontStyle) ? parentFormatting.Font.Style : GetOverridedFontStyle(styleFmt.FontStyle))),\n\n                StringFormat = string.IsNullOrEmpty(styleFmt.Align) ? parentFormatting.StringFormat : GetConvertedStringFormat(styleFmt.Align),\n                Brush = string.IsNullOrEmpty(styleFmt.Color) ? parentFormatting.Brush : GetXSolidBrushFromColorString(styleFmt.Color)\n            };\n        }\n", "        private static XFontStyle GetOverridedFontStyle(string fontStyle)\n        {\n            switch (fontStyle?.Trim()?.ToLower())\n            {\n                case \"bold\":\n                    return XFontStyle.Bold;\n                case \"italic\":\n                    return XFontStyle.Italic;\n                case \"underline\":\n                    return XFontStyle.Underline;\n                case \"strikeout\":\n                    return XFontStyle.Strikeout;\n                default:\n                    return XFontStyle.Regular;\n            }\n        }", "        private static XStringFormat GetConvertedStringFormat(string alignment)\n        {\n            switch (alignment?.Trim()?.ToLower())\n            {\n                case \"center\":\n                    return new XStringFormat { Alignment = XStringAlignment.Center };\n                case \"right\":\n                    return new XStringFormat { Alignment = XStringAlignment.Far };\n                default:\n                    return new XStringFormat { Alignment = XStringAlignment.Near };\n            }\n        }\n", "        public static XDashStyle ToDashStyle(this string style)\n        {\n            switch (style?.Trim()?.ToLower())\n            {\n                case \"dash\":\n                    return XDashStyle.Dash;\n                case \"dot\":\n                    return XDashStyle.Dot;\n                case \"dashdot\":\n                    return XDashStyle.DashDot;\n                case \"dashdotdot\":\n                    return XDashStyle.DashDotDot;\n                default:\n                    return XDashStyle.Solid;\n            }\n        }", "        public static XSolidBrush GetXSolidBrushFromColorString(string colorString)\n        {\n            if (string.IsNullOrEmpty(colorString)) return XBrushes.Black;\n            string colorCode = colorString.ToLower().Trim();\n            //support html colors e.g. #B56E22\n            if (colorCode.StartsWith(\"#\") && colorCode.Length == 7) return GetHtmlColor(colorCode.Substring(1));\n            return Enum.TryParse(colorCode, true, out XKnownColor xKnownColor) ? new XSolidBrush(XColor.FromKnownColor(xKnownColor)) : XBrushes.Black;\n        }\n\n        private static XSolidBrush GetHtmlColor(string colorCode)\n        {\n            try\n            {\n                int r = int.Parse(colorCode.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);\n                int g = int.Parse(colorCode.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);\n                int b = int.Parse(colorCode.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);\n                return new XSolidBrush(XColor.FromArgb(r, g, b));\n            }\n            catch { return XBrushes.Black; }\n        }\n    }", "        private static XSolidBrush GetHtmlColor(string colorCode)\n        {\n            try\n            {\n                int r = int.Parse(colorCode.Substring(0, 2), System.Globalization.NumberStyles.HexNumber);\n                int g = int.Parse(colorCode.Substring(2, 2), System.Globalization.NumberStyles.HexNumber);\n                int b = int.Parse(colorCode.Substring(4, 2), System.Globalization.NumberStyles.HexNumber);\n                return new XSolidBrush(XColor.FromArgb(r, g, b));\n            }\n            catch { return XBrushes.Black; }\n        }\n    }", "    public class ComponentXDrawingFormatting\n    {\n        public XStringFormat StringFormat { get; set; }\n        public XFont Font { get; set; }\n        public XBrush Brush { get; set; }\n    }\n}"]}
{"filename": "SemanticXamlPrint.Parser/DefaultXamlParser.cs", "chunked_list": ["\ufeffusing SemanticXamlPrint.Parser.Components;\nusing SemanticXamlPrint.Parser.Extensions;\nusing System.IO;\nusing System.Xml;\n\nnamespace SemanticXamlPrint.Parser\n{\n    public static class DefaultXamlParser\n    {\n        /// <summary>\n        /// DefaultXamlParser Function that will transform File Bytes to an IXamlComponent\n        /// </summary>\n        /// <param name=\"xamlFileBytes\"></param>\n        /// <returns></returns>", "        public static IXamlComponent Parse(this byte[] xamlFileBytes)\n        {\n            using (MemoryStream stream = new MemoryStream(xamlFileBytes))\n            {\n                var xmlDocument = new XmlDocument();\n                xmlDocument.Load(stream);\n                var rootNode = xmlDocument.DocumentElement;\n                return rootNode.CreateComponentFromXml();\n            }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Extensions/XmlNodeExtensions.cs", "chunked_list": ["\ufeffusing SemanticXamlPrint.Parser.Components;\nusing System;\nusing System.Xml;\n\nnamespace SemanticXamlPrint.Parser.Extensions\n{\n    public static class XmlNodeExtensions\n    {\n        /// <summary>\n        /// This will Create an IXamlComponent Object from Xml Node\n        /// </summary>\n        /// <param name=\"node\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"Exception\"></exception>", "        public static IXamlComponent CreateComponentFromXml(this XmlNode node)\n        {\n            IXamlComponent component;\n            switch (node.Name?.ToLower()?.Trim())\n            {\n                case \"template\":\n                    component = new TemplateComponent();\n                    break;\n                case \"image\":\n                    component = new ImageComponent();\n                    break;\n                case \"grid\":\n                    component = new GridComponent();\n                    break;\n                case \"gridrow\":\n                    component = new GridRowComponent();\n                    break;\n                case \"cells\":\n                    component = new CellsComponent();\n                    break;\n                case \"cell\":\n                    component = new CellComponent();\n                    break;\n                case \"qrcode\":\n                    component = new QRCodeComponent();\n                    break;\n                case \"data\":\n                    component = new DataComponent();\n                    break;\n                case \"line\":\n                    component = new LineComponent();\n                    break;\n                case \"linebreak\":\n                    component = new LineBreakComponent();\n                    break;\n                case \"#text\":\n                    component = new TextBlockComponent(node.Value);\n                    break;\n                case \"#comment\":\n                    return null;\n                default:\n                    throw new Exception($\"Invalid node name {node.Name}\");\n            }\n            // parse attributes", "            if (node?.Attributes != null)\n                foreach (XmlAttribute attribute in node.Attributes)\n                {\n                    _ = component.TrySetProperty(attribute.Name?.ToLower()?.Trim(), attribute.Value);\n                }\n            // parse child nodes\n            if (node?.ChildNodes != null)\n                foreach (XmlNode childNode in node.ChildNodes)\n                {\n                    IXamlComponent childObject = childNode.CreateComponentFromXml();\n                    if (childObject != null)\n                    {", "                    if (childObject != null)\n                    {\n                        if (childObject.Type == typeof(TemplateComponent)) throw new Exception($\"{nameof(TemplateComponent)} can NOT be a child class\");\n                        component.AddChild(childObject);\n                    }\n                }\n            return component;\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Extensions/XamlComponentCustomPropertyExtensions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public static class XamlComponentCustomPropertyExtensions\n    {\n\n        private static XamlComponentCustomProperty GetProperty(this List<XamlComponentCustomProperty> customProperties, string property) => customProperties?.FirstOrDefault(x => x.Key?.ToLower() == property?.ToLower());\n", "        private static XamlComponentCustomProperty GetProperty(this List<XamlComponentCustomProperty> customProperties, string property) => customProperties?.FirstOrDefault(x => x.Key?.ToLower() == property?.ToLower());\n\n        public static bool IsPropertyExists(this List<XamlComponentCustomProperty> customProperties, string property)\n        {\n            return GetProperty(customProperties, property) != null;\n        }\n        public static bool IsPropertyExistsWithValue(this List<XamlComponentCustomProperty> customProperties, string property, string value)\n        {\n            return customProperties?.FirstOrDefault(x => x.Key?.ToLower() == property?.ToLower() && x.Value.Equals(value, StringComparison.OrdinalIgnoreCase)) != null;\n        }\n        public static void AddCustomProperty(this List<XamlComponentCustomProperty> customProperties, string property, string value)\n        {", "        public static void AddCustomProperty(this List<XamlComponentCustomProperty> customProperties, string property, string value)\n        {\n            if (customProperties.IsPropertyExists(property) || string.IsNullOrEmpty(property)) return;\n            customProperties?.Add(new XamlComponentCustomProperty(property?.ToLower()?.Trim(), value));\n        }\n        public static T GetPropertyValue<T>(this List<XamlComponentCustomProperty> customProperties, string property) where T : IConvertible\n        {\n            try\n            {\n                XamlComponentCustomProperty propertyObj = GetProperty(customProperties, property);\n                return (propertyObj == null) ? default : (T)Convert.ChangeType(propertyObj.Value.Trim(), typeof(T));\n            }\n            catch { return default; }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/_IXamlComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public interface IXamlComponent\n    {\n        string Name { get; }\n        Type Type { get; }\n        bool TrySetProperty(string propertyName, string value);\n        void AddChild(IXamlComponent child);\n        List<IXamlComponent> Children { get; }\n        List<XamlComponentCustomProperty> CustomProperties { get; }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/TextBlockComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class TextBlockComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes\n        public string Text { get; set; }\n        public TextBlockComponent(string text, bool trimWhitespaces = true)\n        {\n            Text = trimWhitespaces ? text?.Trim() : text;\n        }\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {", "        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child) => throw new Exception($\"property of type {Name} can not accept childrens\");\n        //Override to String\n        public override string ToString() => Text;\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/DataComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class DataComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes\n        public string Text { get; set; }\n        public bool TextWrap { get; set; } = false;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"text\":\n                        Text = value;\n                        break;\n                    case \"textwrap\":\n                        TextWrap = bool.TryParse(value, out bool wrap) && wrap;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"text\":\n                        Text = value;\n                        break;\n                    case \"textwrap\":\n                        TextWrap = bool.TryParse(value, out bool wrap) && wrap;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            if (child?.Name == nameof(TextBlockComponent))\n            {\n                this.Text = (child.ToString()) ?? this.Text;\n            }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/LineBreakComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class LineBreakComponent : IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                switch (propertyName)\n                {\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child) => throw new Exception($\"property of type {nameof(LineComponent)} can not accept childrens\");\n    }\n\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/ImageComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class ImageComponent : IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        //Component Attributes\n        public string Source { get; set; } = null;\n        public int Width { get; set; } = 0;\n        public int Height { get; set; } = 0;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                switch (propertyName)\n                {\n                    case \"source\":\n                        Source = value?.Trim();\n                        break;\n                    case \"width\":\n                        Width = (int.TryParse(value, out int width) && width > 0) ? width : 0;\n                        break;\n                    case \"height\":\n                        Height = (int.TryParse(value, out int height) && height > 0) ? height : 0;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child) => throw new Exception($\"property of type {Name} can not accept childrens\");\n    }\n\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/CellComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class CellComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes\n        public string Text { get; set; }\n        public bool TextWrap { get; set; } = false;\n        public float X { get; set; } = 0;\n        public float Y { get; set; } = 0;\n        public float Z { get; set; } = 0;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {", "        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"text\":\n                        Text = value;\n                        break;\n                    case \"textwrap\":\n                        TextWrap = bool.TryParse(value, out bool wrap) && wrap;\n                        break;\n                    case \"x\":\n                        X = (float.TryParse(value, out float x) && x > 0) ? x : 0;\n                        break;\n                    case \"y\":\n                        Y = (float.TryParse(value, out float y) && y > 0) ? y : 0; ;\n                        break;\n                    case \"z\":\n                        Z = (float.TryParse(value, out float z) && z > 0) ? z : 0; ;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            if (child?.Name == nameof(TextBlockComponent))\n            {\n                this.Text = (child.ToString()) ?? this.Text;\n            }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/CellsComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class CellsComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            if (child.Type != typeof(CellComponent)) throw new Exception($\"[{Name}] can only contain child elements of type: [{nameof(CellComponent)}]\");\n            Children.Add(child);\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/_XamlComponentCommonProperties.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public abstract class XamlComponentCommonProperties\n    {\n        public string Font { get; set; } = null;\n        public string FontStyle { get; set; } = null;\n        public int FontSize { get; set; } = 0;\n        public string Align { get; set; } = null;\n        public string Color { get; set; } = null;\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();", "        public int FontSize { get; set; } = 0;\n        public string Align { get; set; } = null;\n        public string Color { get; set; } = null;\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        public bool SetCommonProperties(string propertyName, string value)\n        {\n            try\n            {\n                switch (propertyName)\n                {\n                    case \"font\":\n                        Font = value;\n                        break;\n                    case \"fontstyle\":\n                        FontStyle = value;\n                        break;\n                    case \"fontweight\":\n                        FontStyle = value;\n                        break;\n                    case \"fontsize\":\n                        FontSize = int.TryParse(value, out int fontSize) ? fontSize : 0;\n                        break;\n                    case \"align\":\n                        Align = value;\n                        break;\n                    case \"textalign\":\n                        Align = value;\n                        break;\n                    case \"foreground\":\n                        Color = value;\n                        break;\n                    case \"color\":\n                        Color = value;\n                        break;\n                    default:\n                        return false;\n                }\n                return true;\n            }\n            catch { return false; }\n        }\n    }", "    public class XamlComponentCustomProperty\n    {\n        public XamlComponentCustomProperty(string key, string value)\n        {\n            Key = key;\n            Value = value;\n        }\n        public string Key { get; }\n        public string Value { get; }\n    }\n}\n", "        public string Value { get; }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/TemplateComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class TemplateComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        //Component Attributes\n        public int MaxWidth { get; set; } = 0;\n        public int MarginTop { get; set; } = 0;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"maxwidth\":\n                        MaxWidth = (int.TryParse(value, out int maxWidth) && maxWidth > 0) ? maxWidth : 0;\n                        break;\n                    case \"margintop\":\n                        MarginTop = (int.TryParse(value, out int marginTop) && marginTop > 0) ? marginTop : 0;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"maxwidth\":\n                        MaxWidth = (int.TryParse(value, out int maxWidth) && maxWidth > 0) ? maxWidth : 0;\n                        break;\n                    case \"margintop\":\n                        MarginTop = (int.TryParse(value, out int marginTop) && marginTop > 0) ? marginTop : 0;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            if (child?.Name == nameof(TemplateComponent)) throw new Exception(\"template can not have another template as its children\");\n            Children.Add(child);\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/GridComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class GridComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public string ColumnWidths { get; set; } = null;", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public string ColumnWidths { get; set; } = null;\n        public string BorderStyle { get; set; }\n        public double BorderWidth { get; set; } = 0.3;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"columnwidths\":\n                        ColumnWidths = value.Contains(\"*\") ? value?.Trim() : null;\n                        break;\n                    case \"borderstyle\":\n                        BorderStyle = value?.Trim();\n                        break;\n                    case \"borderwidth\":\n                        BorderWidth = (double.TryParse(value, out double width) && width > 0) ? width : 0.3;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    case \"columnwidths\":\n                        ColumnWidths = value.Contains(\"*\") ? value?.Trim() : null;\n                        break;\n                    case \"borderstyle\":\n                        BorderStyle = value?.Trim();\n                        break;\n                    case \"borderwidth\":\n                        BorderWidth = (double.TryParse(value, out double width) && width > 0) ? width : 0.3;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            if (child.Type != typeof(GridRowComponent)) throw new Exception($\"[{Name}] can only contain child elements of type: [{nameof(GridRowComponent)}]\");\n            Children.Add(child);\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/LineComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class LineComponent : IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        //Component Attributes\n        public string Style { get; set; } = null;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                switch (propertyName)\n                {\n                    case \"style\":\n                        Style = value;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child) => throw new Exception($\"property of type {Name} can not accept childrens\");\n    }\n\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/QRCodeComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class QRCodeComponent : IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        //Component Attributes", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public List<XamlComponentCustomProperty> CustomProperties { get; private set; } = new List<XamlComponentCustomProperty>();\n        //Component Attributes\n        public string Text { get; set; }\n        public int Width { get; set; } = 0;\n        public int Height { get; set; } = 0;\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                switch (propertyName)\n                {\n                    case \"text\":\n                        Text = value;\n                        break;\n                    case \"width\":\n                        Width = (int.TryParse(value, out int width) && width > 0) ? width : 0;\n                        break;\n                    case \"height\":\n                        Height = (int.TryParse(value, out int height) && height > 0) ? height : 0;\n                        break;\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            if (child?.Name == nameof(TextBlockComponent))\n            {\n                this.Text = (child.ToString()) ?? this.Text;\n            }\n        }\n    }\n\n}\n"]}
{"filename": "SemanticXamlPrint.Parser/Components/GridRowComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SemanticXamlPrint.Parser.Components\n{\n    public class GridRowComponent : XamlComponentCommonProperties, IXamlComponent\n    {\n        public string Name => Type.Name;\n        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {", "        public Type Type => this.GetType();\n        public List<IXamlComponent> Children { get; private set; } = new List<IXamlComponent>();\n        public bool TrySetProperty(string propertyName, string value)\n        {\n            try\n            {\n                if (base.SetCommonProperties(propertyName, value)) return true;\n                switch (propertyName)\n                {\n                    default:\n                        CustomProperties.AddCustomProperty(propertyName, value);\n                        break;\n                }\n                return true;\n            }\n            catch { return false; }\n        }", "        public void AddChild(IXamlComponent child)\n        {\n            Children.Add(child);\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint/DefaultXamlGraphics.cs", "chunked_list": ["\ufeffusing SemanticXamlPrint.Parser.Components;\nusing System;\nusing System.Drawing;\nusing System.Drawing.Printing;\n\nnamespace SemanticXamlPrint\n{\n    public static class DefaultXamlGraphics\n    {\n        private static int CurrentChildIndex { get; set; } = 0;\n        private static bool RequestedMorePage { get; set; } = false;", "        private static int CurrentChildIndex { get; set; } = 0;\n        private static bool RequestedMorePage { get; set; } = false;\n        public static float DrawXamlComponent(this PrintPageEventArgs eventArgs, IXamlComponent xamlComponent, float yPositionDraw = 0)\n        {\n            if (xamlComponent == null) return yPositionDraw;\n            if (xamlComponent.Type != typeof(TemplateComponent)) throw new Exception($\"Root Component must be that of a [{nameof(TemplateComponent)}] but currently is: [{xamlComponent.Name}]\");\n            TemplateComponent Template = (TemplateComponent)xamlComponent;\n            ComponentDrawingFormatting TemplateFormatting = Template.GetSystemDrawingProperties(Defaults.Formatting) ?? throw new Exception(\"Default template properties are missing\");\n            float _currentLineY = yPositionDraw + Template.MarginTop;\n            double pageHeight = eventArgs.PageSettings.PaperSize.Height - 2 * Template.MarginTop;\n            //Draw Root Component Children\n            CurrentChildIndex = RequestedMorePage ? CurrentChildIndex : 0;", "            for (int i = CurrentChildIndex; i < Template?.Children?.Count; i++)\n            {\n                if (_currentLineY > pageHeight)\n                {\n                    eventArgs.HasMorePages = true;\n                    RequestedMorePage = true;\n                    return yPositionDraw;\n                }\n                else\n                {\n                    eventArgs.HasMorePages = false;\n                    RequestedMorePage = false;\n                }\n                _currentLineY = eventArgs.Graphics.DrawComponent(Template?.Children[i], TemplateFormatting, 0, _currentLineY, eventArgs.Graphics.VisibleClipBounds.Width);\n                CurrentChildIndex++;\n            }\n            return _currentLineY;\n        }\n\n        [Obsolete(\"This method is obsolete, please use DrawXamlComponent an Extension of: PrintPageEventArgs\")]", "        public static float DrawXamlComponent(this Graphics graphics, IXamlComponent xamlComponent, float yPositionDraw = 0) => throw new Exception(\"method is obsolete, please use DrawXamlComponent an Extension of: PrintPageEventArgs\");\n    }\n}\n"]}
{"filename": "SemanticXamlPrint/_Defaults.cs", "chunked_list": ["\ufeffusing System.Drawing;\n\nnamespace SemanticXamlPrint\n{\n    public static class Defaults\n    {\n        public static ComponentDrawingFormatting Formatting = new ComponentDrawingFormatting\n        {\n            Font = new Font(\"Calibri\", 12, FontStyle.Regular),\n            StringFormat = new StringFormat { Alignment = StringAlignment.Near, LineAlignment = StringAlignment.Near },\n            Brush = Brushes.Black\n        };\n    }\n}\n"]}
{"filename": "SemanticXamlPrint/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyDescription(\"Semantic XAML Printing Service. Parser and Printer\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]", "[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"b4082a1b-7b3c-4d23-a031-47e400c7fcfc\")]", "// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"b4082a1b-7b3c-4d23-a031-47e400c7fcfc\")]\n\n// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//", "//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n"]}
{"filename": "SemanticXamlPrint/Extensions/GraphicsExtensions.cs", "chunked_list": ["\ufeffusing SemanticXamlPrint.Parser.Components;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.IO;\nusing System.Linq;\n\nnamespace SemanticXamlPrint\n{\n    internal static class GraphicsExtensions\n    {", "namespace SemanticXamlPrint\n{\n    internal static class GraphicsExtensions\n    {\n        public static float DrawComponent(this Graphics graphics, IXamlComponent component, ComponentDrawingFormatting TemplateFormatting, float currentX, float currentY, float maxLayoutWidth)\n        {\n            maxLayoutWidth = maxLayoutWidth == 0 ? graphics.VisibleClipBounds.Width : maxLayoutWidth;\n            //Draw\n            if (component.Type == typeof(LineBreakComponent))\n            {\n                currentY += 3;\n            }", "            if (component.Type == typeof(LineBreakComponent))\n            {\n                currentY += 3;\n            }\n            else if (component.Type == typeof(LineComponent))\n            {\n                LineComponent lineComponent = (LineComponent)component;\n                currentY += 3;\n                currentY += graphics.DrawlLineAndReturnHeight(lineComponent.Style.ToDashStyle(), currentX, currentY, (int)maxLayoutWidth);\n                currentY += 3;\n            }", "            else if (component.Type == typeof(ImageComponent))\n            {\n                ImageComponent imageComponent = (ImageComponent)component;\n                string imageSource = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, imageComponent.Source ?? \"default.png\");\n                if (File.Exists(imageSource))\n                {\n                    currentY += graphics.DrawImageCenteredAndReturnHeight(Image.FromFile(imageSource), currentX, currentY, imageComponent.Width, imageComponent.Height, maxLayoutWidth);\n                }\n            }\n            else if (component.Type == typeof(QRCodeComponent))\n            {\n                QRCodeComponent qRCodeComponent = (QRCodeComponent)component;\n                currentY += graphics.DrawQRCodeCenteredAndReturnHeight(qRCodeComponent.Text, currentX, currentY, qRCodeComponent.Width, qRCodeComponent.Height, maxLayoutWidth);\n            }", "            else if (component.Type == typeof(QRCodeComponent))\n            {\n                QRCodeComponent qRCodeComponent = (QRCodeComponent)component;\n                currentY += graphics.DrawQRCodeCenteredAndReturnHeight(qRCodeComponent.Text, currentX, currentY, qRCodeComponent.Width, qRCodeComponent.Height, maxLayoutWidth);\n            }\n            else if (component.Type == typeof(DataComponent))\n            {\n                DataComponent dataComponent = (DataComponent)component;\n                ComponentDrawingFormatting fmt = component.GetSystemDrawingProperties(TemplateFormatting);\n                //Draw Data Component\n                currentY += graphics.DrawStringAndReturnHeight(dataComponent.Text, dataComponent.TextWrap, fmt, currentX, currentY, (int)maxLayoutWidth);\n            }", "            else if (component.Type == typeof(CellsComponent))\n            {\n                CellsComponent dataRowComponent = (CellsComponent)component;\n                ComponentDrawingFormatting rowfmt = component.GetSystemDrawingProperties(TemplateFormatting);\n                //Get all Children of DataRowCells\n                List<CellComponent> dataRowCells = dataRowComponent.Children?.Where(element => element.Type == typeof(CellComponent)).Select(validElement => (CellComponent)validElement).ToList();\n                int additionalHeight = 0;\n                foreach (CellComponent cell in dataRowCells)\n                {\n                    ComponentDrawingFormatting cellFmt = cell.GetSystemDrawingProperties(rowfmt);\n                    //Set RowCell Location\n                    float x = (cell.X <= 0) ? 0f : cell.X;\n                    float y = (cell.Y <= 0) ? currentY : cell.Y;\n                    float z = (cell.Z <= 0) ? (int)maxLayoutWidth : cell.Z;\n                    //Write String \n                    int textHeight = graphics.DrawStringAndReturnHeight(cell.Text, cell.TextWrap, cellFmt, x, y, z);\n                    additionalHeight = (textHeight > additionalHeight) ? textHeight : additionalHeight;\n                }\n                //Add Line Height\n                currentY += additionalHeight;\n            }", "            else if (component.Type == typeof(GridComponent))\n            {\n                GridComponent gridComponent = (GridComponent)component;\n                ComponentDrawingFormatting gridfmt = component.GetSystemDrawingProperties(TemplateFormatting);\n                List<int> columnWidths = graphics.GetDivideColumnWidths(gridComponent.ColumnWidths, maxLayoutWidth);\n                float y_before_grid = currentY;\n                float longest_column_y = currentY;\n                //Get Grid Rows\n                List<GridRowComponent> gridRows = gridComponent.Children?.Where(element => element.Type == typeof(GridRowComponent)).Select(validElement => (GridRowComponent)validElement).ToList();\n                foreach (GridRowComponent row in gridRows)\n                {\n                    float current_y = longest_column_y;\n                    float current_x = currentX;\n                    ComponentDrawingFormatting rowFmt = row.GetSystemDrawingProperties(gridfmt);", "                foreach (GridRowComponent row in gridRows)\n                {\n                    float current_y = longest_column_y;\n                    float current_x = currentX;\n                    ComponentDrawingFormatting rowFmt = row.GetSystemDrawingProperties(gridfmt);\n                    for (int colIndex = 0; colIndex < columnWidths.Count; colIndex++)\n                    {\n                        IXamlComponent componentUnderColumn = row.Children?.FirstOrDefault(x => x.CustomProperties.IsPropertyExistsWithValue(\"grid.column\", colIndex.ToString()));\n                        if (componentUnderColumn != null)\n                        {\n                            float new_y = graphics.DrawComponent(componentUnderColumn, rowFmt, current_x, current_y, columnWidths[colIndex]);\n                            longest_column_y = (new_y > longest_column_y) ? new_y : longest_column_y;\n                            //Next Column Starting X co-ordinates\n                            current_x += columnWidths[colIndex];\n                        }\n                    }\n                }\n                //set Highest Column Height\n                currentY = longest_column_y;\n                //# Check if Drawing Border", "                        if (componentUnderColumn != null)\n                        {\n                            float new_y = graphics.DrawComponent(componentUnderColumn, rowFmt, current_x, current_y, columnWidths[colIndex]);\n                            longest_column_y = (new_y > longest_column_y) ? new_y : longest_column_y;\n                            //Next Column Starting X co-ordinates\n                            current_x += columnWidths[colIndex];\n                        }\n                    }\n                }\n                //set Highest Column Height\n                currentY = longest_column_y;\n                //# Check if Drawing Border", "                if (!string.IsNullOrEmpty(gridComponent.BorderStyle))\n                {\n                    graphics.DrawRectangleAndReturnHeight(gridComponent.BorderStyle.ToDashStyle(), currentX, y_before_grid, (int)maxLayoutWidth, (currentY - y_before_grid), gridComponent.BorderWidth);\n                    float current_x = currentX;\n                    for (int colIndex = 0; colIndex < columnWidths.Count; colIndex++)\n                    {\n                        graphics.DrawRectangleAndReturnHeight(gridComponent.BorderStyle.ToDashStyle(), current_x, y_before_grid, columnWidths[colIndex], (currentY - y_before_grid), gridComponent.BorderWidth);\n                        current_x += columnWidths[colIndex];\n                    }\n                }\n            }\n            else\n            {\n                //unknown Component\n            }\n            return currentY;\n        }\n", "        public static int DrawStringAndReturnHeight(this Graphics graphics, string text, bool textWrap, ComponentDrawingFormatting cellFmt, float x, float y, float z)\n        {\n            text = text ?? string.Empty;\n            if (textWrap && (int)graphics.MeasureString(text, cellFmt.Font).Width > z)\n            {\n                SizeF size = graphics.MeasureString(text, cellFmt.Font, (int)z);\n                RectangleF layoutF = new RectangleF(new PointF(x, y), size);\n                graphics.DrawString(text, cellFmt.Font, cellFmt.Brush, layoutF, cellFmt.StringFormat);\n                return (int)layoutF.Height;\n            }\n            else\n            {\n                SizeF size = graphics.MeasureString(text, cellFmt.Font, (int)z, new StringFormat { FormatFlags = StringFormatFlags.NoWrap });\n                Rectangle layout = new Rectangle((int)x, (int)y, (int)z, (int)size.Height);\n                graphics.DrawString(text, cellFmt.Font, cellFmt.Brush, layout, cellFmt.StringFormat);\n                return layout.Height;\n            }\n        }\n\n", "        public static List<int> GetDivideColumnWidths(this Graphics graphics, string pattern, float maxLayoutWith)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(pattern)) return GetDivideColumnWidths(graphics, 1, maxLayoutWith);\n                List<int> columnWidths = new List<int>();\n                int total = pattern.Split(new char[] { '*' }, StringSplitOptions.RemoveEmptyEntries).Sum(p => Convert.ToInt32(p));\n                if (total < 1) return GetDivideColumnWidths(graphics, 1, maxLayoutWith);\n                int remainingWidth = (int)maxLayoutWith;\n                foreach (string s in pattern.Split('*'))\n                {\n                    int w = (int)Math.Round((double)remainingWidth / total * Convert.ToInt32(s));\n                    columnWidths.Add(w);\n                    remainingWidth -= w;\n                    total -= Convert.ToInt32(s);\n                }\n                return columnWidths;\n            }\n            catch { return GetDivideColumnWidths(graphics, 1, maxLayoutWith); }\n        }", "                foreach (string s in pattern.Split('*'))\n                {\n                    int w = (int)Math.Round((double)remainingWidth / total * Convert.ToInt32(s));\n                    columnWidths.Add(w);\n                    remainingWidth -= w;\n                    total -= Convert.ToInt32(s);\n                }\n                return columnWidths;\n            }\n            catch { return GetDivideColumnWidths(graphics, 1, maxLayoutWith); }\n        }", "        public static List<int> GetDivideColumnWidths(this Graphics graphics, int columns, float maxLayoutWith)\n        {\n            columns = columns <= 0 ? 1 : columns;\n            int evenColumnWidth = (int)maxLayoutWith / columns;\n            List<int> columnWidths = new List<int>();\n            for (var i = 0; i < columns; i += 1)\n                columnWidths.Add(evenColumnWidth);\n            return columnWidths;\n        }\n\n        public static int DrawlLineAndReturnHeight(this Graphics graphics, DashStyle dashStyle, float x, float y, float z)\n        {", "        public static int DrawlLineAndReturnHeight(this Graphics graphics, DashStyle dashStyle, float x, float y, float z)\n        {\n            using (Pen pen = new Pen(Color.Black) { DashStyle = dashStyle })\n            {\n                graphics.DrawLine(pen, x, y, z, y);\n            }\n            return 1;\n        }\n        public static int DrawImageCenteredAndReturnHeight(this Graphics graphics, Image image, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n\n            float newWidth = Math.Min(image.Height, maxWidth > 0 ? maxWidth : image.Width);\n            float newHeight = Math.Min(image.Height, maxHeight > 0 ? maxHeight : image.Height);\n            float centeredX = x + (maxLayoutWith - newWidth) / 2;\n            graphics.DrawImage(image, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n            return (int)newHeight;\n        }", "        public static int DrawImageCenteredAndReturnHeight(this Graphics graphics, Image image, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n\n            float newWidth = Math.Min(image.Height, maxWidth > 0 ? maxWidth : image.Width);\n            float newHeight = Math.Min(image.Height, maxHeight > 0 ? maxHeight : image.Height);\n            float centeredX = x + (maxLayoutWith - newWidth) / 2;\n            graphics.DrawImage(image, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n            return (int)newHeight;\n        }\n        public static int DrawRectangleAndReturnHeight(this Graphics graphics, DashStyle dashStyle, float x, float y, float z, float height, double lineWidth = 0.3)\n        {", "        public static int DrawRectangleAndReturnHeight(this Graphics graphics, DashStyle dashStyle, float x, float y, float z, float height, double lineWidth = 0.3)\n        {\n            using (Pen pen = new Pen(Color.Black, (float)lineWidth) { DashStyle = dashStyle })\n            {\n                graphics.DrawRectangle(pen, x, y, z, height);\n            }\n            return (int)height;\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint/Extensions/GraphicsQRCodeExtensions.cs", "chunked_list": ["\ufeffusing QRCoder;\nusing System;\nusing System.Drawing;\n\nnamespace SemanticXamlPrint\n{\n    internal static class GraphicsQRCodeExtensions\n    {\n        public static int DrawQRCodeCenteredAndReturnHeight(this Graphics graphics, string text, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n            //Generate QR Code", "        public static int DrawQRCodeCenteredAndReturnHeight(this Graphics graphics, string text, float x, float y, float maxWidth, float maxHeight, float maxLayoutWith)\n        {\n            //Generate QR Code\n            using (QRCodeGenerator qrGenerator = new QRCodeGenerator())\n            using (QRCodeData qrCodeData = qrGenerator.CreateQrCode(text ?? \"unspecified\", QRCodeGenerator.ECCLevel.Q))\n            using (QRCode qrCode = new QRCode(qrCodeData))\n            {\n                Bitmap qrCodeImage = qrCode.GetGraphic(10);\n                //Draw Image\n                float newWidth = Math.Min(qrCodeImage.Height, maxWidth > 0 ? maxWidth : qrCodeImage.Width);\n                float newHeight = Math.Min(qrCodeImage.Height, maxHeight > 0 ? maxHeight : qrCodeImage.Height);\n                float centeredX = x + (maxLayoutWith - newWidth) / 2;\n                graphics.DrawImage(qrCodeImage, centeredX > 0 ? centeredX : x, y, newWidth, newHeight);\n                return (int)newHeight;\n            }\n        }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint/Extensions/XamlComponentFormattingExtensions.cs", "chunked_list": ["\ufeffusing SemanticXamlPrint.Parser.Components;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\n\nnamespace SemanticXamlPrint\n{\n    internal static class XamlComponentFormattingExtensions\n    {\n        public static ComponentDrawingFormatting GetSystemDrawingProperties(this IXamlComponent component, ComponentDrawingFormatting parentFormatting)\n        {\n", "        public static ComponentDrawingFormatting GetSystemDrawingProperties(this IXamlComponent component, ComponentDrawingFormatting parentFormatting)\n        {\n\n            if (!component.Type.IsSubclassOf(typeof(XamlComponentCommonProperties))) return parentFormatting;\n            XamlComponentCommonProperties styleFmt = (XamlComponentCommonProperties)component;\n            //Return Custom\n            return new ComponentDrawingFormatting\n            {\n                Font = new Font((string.IsNullOrEmpty(styleFmt.Font) ? parentFormatting.Font.Name : styleFmt.Font),\n                                ((styleFmt.FontSize <= 0) ? parentFormatting.Font.Size : styleFmt.FontSize),\n                                (string.IsNullOrEmpty(styleFmt.FontStyle) ? parentFormatting.Font.Style : GetOverridedFontStyle(styleFmt.FontStyle))),\n\n                StringFormat = string.IsNullOrEmpty(styleFmt.Align) ? parentFormatting.StringFormat : GetConvertedStringFormat(styleFmt.Align),\n                Brush = string.IsNullOrEmpty(styleFmt.Color) ? parentFormatting.Brush : GetSolidBrushFromColorString(styleFmt.Color)\n            };\n        }\n", "        private static FontStyle GetOverridedFontStyle(string fontStyle)\n        {\n            switch (fontStyle?.Trim()?.ToLower())\n            {\n                case \"bold\":\n                    return FontStyle.Bold;\n                case \"italic\":\n                    return FontStyle.Italic;\n                case \"underline\":\n                    return FontStyle.Underline;\n                case \"strikeout\":\n                    return FontStyle.Strikeout;\n                default:\n                    return FontStyle.Regular;\n            }\n        }", "        private static StringFormat GetConvertedStringFormat(string alignment)\n        {\n            switch (alignment?.Trim()?.ToLower())\n            {\n                case \"center\":\n                    return new StringFormat { Alignment = StringAlignment.Center };\n                case \"right\":\n                    return new StringFormat { Alignment = StringAlignment.Far };\n                default:\n                    return new StringFormat { Alignment = StringAlignment.Near };\n            }\n        }\n", "        public static DashStyle ToDashStyle(this string style)\n        {\n            switch (style?.Trim()?.ToLower())\n            {\n                case \"dash\":\n                    return DashStyle.Dash;\n                case \"dot\":\n                    return DashStyle.Dot;\n                case \"dashdot\":\n                    return DashStyle.DashDot;\n                case \"dashdotdot\":\n                    return DashStyle.DashDotDot;\n                default:\n                    return DashStyle.Solid;\n            }\n        }", "        public static Brush GetSolidBrushFromColorString(string colorString)\n        {\n            if (string.IsNullOrEmpty(colorString)) return Brushes.Black;\n            string colorCode = colorString.ToLower().Trim();\n            //support html colors e.g. #B56E22\n            if (colorCode.StartsWith(\"#\") && colorCode.Length == 7) return GetHtmlColor(colorCode);\n            switch (colorCode)\n            {\n                case \"red\":\n                    return new SolidBrush(Color.Red);\n                case \"green\":\n                    return new SolidBrush(Color.Green);\n                case \"blue\":\n                    return new SolidBrush(Color.Blue);\n                case \"yellow\":\n                    return new SolidBrush(Color.Yellow);\n                case \"orange\":\n                    return new SolidBrush(Color.Orange);\n                case \"purple\":\n                    return new SolidBrush(Color.Purple);\n                case \"pink\":\n                    return new SolidBrush(Color.Pink);\n                case \"black\":\n                    return new SolidBrush(Color.Black);\n                case \"white\":\n                    return new SolidBrush(Color.White);\n                case \"gray\":\n                    return new SolidBrush(Color.Gray);\n                case \"brown\":\n                    return new SolidBrush(Color.Brown);\n                case \"cyan\":\n                    return new SolidBrush(Color.Cyan);\n                case \"magenta\":\n                    return new SolidBrush(Color.Magenta);\n                // Add more cases for additional color names\n                default:\n                    return new SolidBrush(Color.Black);\n            }\n        }", "        private static Brush GetHtmlColor(string colorString)\n        {\n            try { return new SolidBrush(ColorTranslator.FromHtml(colorString)); }\n            catch { return new SolidBrush(Color.Black); }\n        }\n    }\n    public class ComponentDrawingFormatting\n    {\n        public Font Font { get; set; }\n        public StringFormat StringFormat { get; set; }\n        public Brush Brush { get; set; }\n    }\n}\n", "        public Font Font { get; set; }\n        public StringFormat StringFormat { get; set; }\n        public Brush Brush { get; set; }\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Demo/Program.cs", "chunked_list": ["\ufeffusing PdfSharp.Drawing;\nusing PdfSharp.Pdf;\nusing SemanticXamlPrint.Parser;\nusing SemanticXamlPrint.Parser.Components;\nusing SemanticXamlPrint.PDF;\nusing System;\nusing System.Drawing.Printing;\nusing System.IO;\nnamespace SemanticXamlPrint.Demo\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"TESTING XAML PRINT\");\n            Console.BackgroundColor = ConsoleColor.Black;\n            Console.ForegroundColor = ConsoleColor.White;\n            try\n            {\n                //Get Template Contents\n                byte[] xamlFileBytes = File.ReadAllBytes(\"custom.data.template\");\n                //Use Default Parser \n                IXamlComponent xamlComponent = DefaultXamlParser.Parse(xamlFileBytes);\n\n                //####  SYSTEM DRAWING #####\n                PrintDocument printDocument = new PrintDocument();\n                printDocument.PrintPage += (obj, eventAgs) =>\n                {\n                    //Use Xaml Draw Extension to Print\n                    eventAgs.DrawXamlComponent(xamlComponent);\n                };\n                printDocument.Print();\n                printDocument.Print();\n                //####  SYSTEM DRAWING #####\n\n\n                //####  PDF SHARP #####", "namespace SemanticXamlPrint.Demo\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"TESTING XAML PRINT\");\n            Console.BackgroundColor = ConsoleColor.Black;\n            Console.ForegroundColor = ConsoleColor.White;\n            try\n            {\n                //Get Template Contents\n                byte[] xamlFileBytes = File.ReadAllBytes(\"custom.data.template\");\n                //Use Default Parser \n                IXamlComponent xamlComponent = DefaultXamlParser.Parse(xamlFileBytes);\n\n                //####  SYSTEM DRAWING #####\n                PrintDocument printDocument = new PrintDocument();\n                printDocument.PrintPage += (obj, eventAgs) =>\n                {\n                    //Use Xaml Draw Extension to Print\n                    eventAgs.DrawXamlComponent(xamlComponent);\n                };\n                printDocument.Print();\n                printDocument.Print();\n                //####  SYSTEM DRAWING #####\n\n\n                //####  PDF SHARP #####", "                using (PdfDocument document = new PdfDocument())\n                {\n                    // Add a page to the document\n                    PdfPage page = document.AddPage();\n                    // Create a graphics object for the page\n                    XGraphics xgraphics = XGraphics.FromPdfPage(page);\n                    //Use Xaml Draw Extension to Generate PDF\n                    xgraphics.DrawXamlComponent(xamlComponent);\n                    // Save the PDF document to a file\n                    document.Save(\"output.pdf\");\n                }\n                //####  PDF SHARP #####\n            }", "            catch (Exception ex)\n            {\n                Console.BackgroundColor = ConsoleColor.Black;\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(ex.Message.ToString());\n                Console.BackgroundColor = ConsoleColor.Black;\n                Console.ForegroundColor = ConsoleColor.White;\n            }\n\n            Console.ReadLine();\n        }\n\n    }\n}\n"]}
{"filename": "SemanticXamlPrint.Demo/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following \n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"SemanticXamlPrint\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"SemanticXamlPrint.Demo.Properties\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible \n// to COM components.  If you need to access a type in this assembly from ", "// Setting ComVisible to false makes the types in this assembly not visible \n// to COM components.  If you need to access a type in this assembly from \n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"c5a0dd91-c14b-4d24-9250-8a8c7623d1d6\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version \n//      Build Number\n//      Revision\n//\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n", "[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
