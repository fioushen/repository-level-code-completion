{"filename": "Packages/com.vrchat.core.vpm-resolver/Editor/Resolver/Resolver.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing Serilog;\nusing Serilog.Sinks.Unity3D;\nusing UnityEditor;\nusing UnityEngine;", "using UnityEditor;\nusing UnityEngine;\nusing VRC.PackageManagement.Core;\nusing VRC.PackageManagement.Core.Types;\nusing VRC.PackageManagement.Core.Types.Packages;\nusing Version = VRC.PackageManagement.Core.Types.VPMVersion.Version;\n\nnamespace VRC.PackageManagement.Resolver\n{\n    ", "{\n    \n    [InitializeOnLoad]\n    public class Resolver\n    {\n        private const string _projectLoadedKey = \"PROJECT_LOADED\";\n        \n        private static string _projectDir;\n        public static string ProjectDir\n        {\n            get\n            {", "        public static string ProjectDir\n        {\n            get\n            {\n                if (_projectDir != null)\n                {\n                    return _projectDir;\n                }\n\n                try\n                {\n                    _projectDir = new DirectoryInfo(Assembly.GetExecutingAssembly().Location).Parent.Parent.Parent\n                        .FullName;\n                    return _projectDir;\n                }", "                catch (Exception)\n                {\n                    return \"\";\n                }\n            }\n        }\n\n        static Resolver()\n        {\n            SetupLogging();\n            if (!SessionState.GetBool(_projectLoadedKey, false))\n            {\n#pragma warning disable 4014\n                CheckResolveNeeded();\n#pragma warning restore 4014\n            }\n        }\n", "            if (!SessionState.GetBool(_projectLoadedKey, false))\n            {\n#pragma warning disable 4014\n                CheckResolveNeeded();\n#pragma warning restore 4014\n            }\n        }\n\n        private static void SetupLogging()\n        {\n            VRCLibLogger.SetLoggerDirectly(\n                new LoggerConfiguration()\n                    .MinimumLevel.Information()\n                    .WriteTo.Unity3D()\n                    .CreateLogger()\n            );\n        }\n", "        private static void SetupLogging()\n        {\n            VRCLibLogger.SetLoggerDirectly(\n                new LoggerConfiguration()\n                    .MinimumLevel.Information()\n                    .WriteTo.Unity3D()\n                    .CreateLogger()\n            );\n        }\n\n        private static async Task CheckResolveNeeded()\n        {\n            SessionState.SetBool(_projectLoadedKey, true);\n            \n            //Wait for project to finish compiling", "        private static async Task CheckResolveNeeded()\n        {\n            SessionState.SetBool(_projectLoadedKey, true);\n            \n            //Wait for project to finish compiling\n            while (EditorApplication.isCompiling || EditorApplication.isUpdating)\n            {\n                await Task.Delay(250);\n            }\n\n            try\n            {\n", "                if (string.IsNullOrWhiteSpace(ProjectDir))\n                {\n                    return;\n                }\n                \n                if (VPMProjectManifest.ResolveIsNeeded(ProjectDir))\n                {\n                    Debug.Log($\"Resolve needed.\");\n                    var result = EditorUtility.DisplayDialog(\"VRChat Package Management\",\n                        $\"This project requires some VRChat Packages which are not in the project yet.\\n\\nPress OK to download and install them.\",\n                        \"OK\", \"Show Me What's Missing\");", "                    if (result)\n                    {\n                        ResolveStatic(ProjectDir);\n                    }\n                    else\n                    {\n                        ResolverWindow.ShowWindow();\n                    }\n                }\n            }\n            catch (Exception)\n            {\n                // Unity says we can't open windows from this function so it throws an exception but also works fine.\n            }\n        }\n        ", "            catch (Exception)\n            {\n                // Unity says we can't open windows from this function so it throws an exception but also works fine.\n            }\n        }\n        \n        public static bool VPMManifestExists()\n        {\n            return VPMProjectManifest.Exists(ProjectDir, out _);\n        }\n", "        public static void CreateManifest()\n        {\n            VPMProjectManifest.Load(ProjectDir);\n            ResolverWindow.Refresh();\n        }\n        \n        public static void ResolveManifest()\n        {\n            ResolveStatic(ProjectDir);\n        }\n", "        public static void ResolveStatic(string dir)\n        {\n            // Todo: calculate and show actual progress\n            EditorUtility.DisplayProgressBar($\"Getting all VRChat Packages\", \"Downloading and Installing...\", 0.5f);\n            VPMProjectManifest.Resolve(ProjectDir);\n            EditorUtility.ClearProgressBar();\n            ForceRefresh();\n        }\n        \n        public static List<string> GetAllVersionsOf(string id)\n        {\n            var project = new UnityProject(ProjectDir);\n\n            var versions = new List<string>();", "        public static List<string> GetAllVersionsOf(string id)\n        {\n            var project = new UnityProject(ProjectDir);\n\n            var versions = new List<string>();\n            foreach (var provider in Repos.GetAll)\n            {\n                var packagesWithVersions = provider.GetAllWithVersions();\n\n                foreach (var packageVersionList in packagesWithVersions)\n                {", "                foreach (var packageVersionList in packagesWithVersions)\n                {\n                    foreach (var package in packageVersionList.Value.VersionsDescending)\n                    {\n                        if (package.Id != id)\n                            continue;\n                        if (Version.TryParse(package.Version, out var result))\n                        {\n                            if (!versions.Contains(package.Version))\n                                versions.Add(package.Version);\n                        }\n                    }\n                }\n            }\n\n            // Sort packages in project to the top\n            var sorted = from entry in versions orderby project.VPMProvider.HasPackage(entry) descending select entry;\n\n            return sorted.ToList<string>();\n        }\n", "                            if (!versions.Contains(package.Version))\n                                versions.Add(package.Version);\n                        }\n                    }\n                }\n            }\n\n            // Sort packages in project to the top\n            var sorted = from entry in versions orderby project.VPMProvider.HasPackage(entry) descending select entry;\n\n            return sorted.ToList<string>();\n        }\n", "        public static List<string> GetAffectedPackageList(IVRCPackage package)\n        {\n            List<string> list = new List<string>();\n\n            var project = new UnityProject(ProjectDir);\n\n            if (Repos.GetAllDependencies(package, out Dictionary<string, string> dependencies, null))\n            {\n                foreach (KeyValuePair<string, string> item in dependencies)\n                {\n                    project.VPMProvider.Refresh();", "                foreach (KeyValuePair<string, string> item in dependencies)\n                {\n                    project.VPMProvider.Refresh();\n                    if (project.VPMProvider.GetPackage(item.Key, item.Value) == null)\n                    {\n                        IVRCPackage d = Repos.GetPackageWithVersionMatch(item.Key, item.Value);\n                        if (d != null)\n                        {\n                            list.Add(d.Id + \" \" + d.Version + \"\\n\");\n                        }\n                    }\n                }\n\n                return list;\n            }\n\n            return null;\n        }\n        ", "        public static void ForceRefresh ()\n        {\n            MethodInfo method = typeof( UnityEditor.PackageManager.Client ).GetMethod( \"Resolve\", BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.DeclaredOnly );\n            if( method != null )\n                method.Invoke( null, null );\n\n            AssetDatabase.Refresh();\n        }\n\n    }\n}"]}
{"filename": "Packages/com.vrchat.core.vpm-resolver/Editor/Resolver/ResolverWindow.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\nusing System.Text;\nusing System.Threading.Tasks;\nusing UnityEditor;\nusing UnityEditor.UIElements;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing VRC.PackageManagement.Core;\nusing VRC.PackageManagement.Core.Types;\nusing VRC.PackageManagement.Core.Types.Packages;", "using VRC.PackageManagement.Core.Types;\nusing VRC.PackageManagement.Core.Types.Packages;\nusing Version = VRC.PackageManagement.Core.Types.VPMVersion.Version;\n\nnamespace VRC.PackageManagement.Resolver\n{\n    public class ResolverWindow : EditorWindow\n    {\n        // VisualElements\n        private static VisualElement _rootView;\n        private static Button _refreshButton;", "        private static VisualElement _rootView;\n        private static Button _refreshButton;\n        private static Button _createButton;\n        private static Button _resolveButton;\n        private static Box _manifestInfo;\n        private static Label _manifestLabel;\n        private static bool _isUpdating;\n        private static Color _colorPositive = Color.green;\n        private static Color _colorNegative = new Color(1, 0.3f, 0.3f);\n\n\n        [MenuItem(\"VRChat SDK/Utilities/Package Resolver\")]", "        private static Color _colorNegative = new Color(1, 0.3f, 0.3f);\n\n\n        [MenuItem(\"VRChat SDK/Utilities/Package Resolver\")]\n        public static void ShowWindow()\n        {\n            ResolverWindow wnd = GetWindow<ResolverWindow>();\n            wnd.titleContent = new GUIContent(\"Package Resolver\");\n        }\n\n        public static void Refresh()\n        {", "        public static void Refresh()\n        {\n            if (_rootView == null || string.IsNullOrWhiteSpace(Resolver.ProjectDir)) return;\n\n            _manifestInfo.SetEnabled(!_isUpdating);\n            _refreshButton.SetEnabled(!_isUpdating);\n            _manifestLabel.text = (_isUpdating ? \"Working ...\" : \"Required Packages\");\n            _manifestInfo.Clear();\n            _manifestInfo.Add(_manifestLabel);\n\n            bool needsResolve = VPMProjectManifest.ResolveIsNeeded(Resolver.ProjectDir);\n            string resolveStatus = needsResolve ? \"Please press  \\\"Resolve\\\" to Download them.\" : \"All of them are in the project.\";\n            \n            // check for vpm dependencies", "            if (!Resolver.VPMManifestExists())\n            {\n                TextElement noManifestText = new TextElement();\n                noManifestText.text = \"No VPM Manifest\";\n                noManifestText.style.color = _colorNegative;\n                _manifestInfo.Add(noManifestText);\n            }\n            else\n            {\n                var manifest = VPMProjectManifest.Load(Resolver.ProjectDir);\n                var project = new UnityProject(Resolver.ProjectDir);\n                \n                // Here is where we detect if all dependencies are installed\n                var allDependencies = (manifest.locked != null && manifest.locked.Count > 0)\n                    ? manifest.locked\n                    : manifest.dependencies;\n", "                foreach (var pair in allDependencies)\n                {\n                    var id = pair.Key;\n                    var version = pair.Value.version;\n                    IVRCPackage package = project.VPMProvider.GetPackage(id, version);\n                    _manifestInfo.Add(CreateDependencyRow(id, version, project, (package != null)));\n                }\n\n            }\n            _resolveButton.SetEnabled(needsResolve);\n            Resolver.ForceRefresh();\n        }\n\n        /// <summary>\n        /// Unity calls the CreateGUI method automatically when the window needs to display\n        /// </summary>", "        private void CreateGUI()\n        {\n            _rootView = rootVisualElement;\n            _rootView.name = \"root-view\";\n            _rootView.styleSheets.Add((StyleSheet)Resources.Load(\"ResolverWindowStyle\"));\n\n            // Main Container\n            var container = new Box()\n            {\n                name = \"buttons\"\n            };\n            _rootView.Add(container);\n\n            // Create Button", "            if (!Resolver.VPMManifestExists())\n            {\n                _createButton = new Button(Resolver.CreateManifest)\n                {\n                    text = \"Create\",\n                    name = \"create-button-base\"\n                };\n                container.Add(_createButton);\n            }\n            else\n            {\n                _resolveButton = new Button(Resolver.ResolveManifest)\n                {\n                    text = \"Resolve All\",\n                    name = \"resolve-button-base\"\n                };\n                container.Add(_resolveButton);\n            }\n\n            // Manifest Info\n            _manifestInfo = new Box()\n            {\n                name = \"manifest-info\",\n            };\n            _manifestLabel = (new Label(\"Required Packages\") { name = \"manifest-header\" });\n\n            _rootView.Add(_manifestInfo);\n\n            // Refresh Button\n            var refreshBox = new Box();\n            _refreshButton = new Button(Refresh)\n            {\n                text = \"Refresh\",\n                name = \"refresh-button-base\"\n            };\n            refreshBox.Add(_refreshButton);\n            _rootView.Add(refreshBox);\n\n            Refresh();\n        }\n", "        private static VisualElement CreateDependencyRow(string id, string version, UnityProject project, bool havePackage)\n        {\n            // Table\n\n            VisualElement row = new Box() { name = \"package-box\" };\n            VisualElement column1 = new Box() { name = \"package-box\" };\n            VisualElement column2 = new Box() { name = \"package-box\" };\n            VisualElement column3 = new Box() { name = \"package-box\" };\n            VisualElement column4 = new Box() { name = \"package-box\" };\n\n            column1.style.minWidth = 200;\n            column2.style.minWidth = 100;\n            column3.style.minWidth = 100;\n            column4.style.minWidth = 100;\n\n            row.Add(column1);\n            row.Add(column2);\n            row.Add(column3);\n            row.Add(column4);\n\n            // Package Name + Status\n\n            TextElement text = new TextElement { text = $\"{id} {version} \" };\n\n            column1.Add(text);\n", "            if (!havePackage)\n            {\n                TextElement missingText = new TextElement { text = \"MISSING\" };\n                missingText.style.color = _colorNegative;\n                missingText.style.display = (_isUpdating ? DisplayStyle.None : DisplayStyle.Flex);\n                column2.Add(missingText);\n            }\n\n            // Version Popup\n\n            var choices = new List<string>();", "            foreach (string n in Resolver.GetAllVersionsOf(id))\n            {\n                choices.Add(n);\n            }\n\n            var popupField = new PopupField<string>(choices, 0);\n            popupField.value = choices[0];\n            popupField.style.display = (_isUpdating ? DisplayStyle.None : DisplayStyle.Flex);\n\n            column3.Add(popupField);\n\n            // Button\n\n            Button updateButton = new Button() { text = \"Update\" };", "            if (havePackage)\n                RefreshUpdateButton(updateButton, version, choices[0]);\n            else\n                RefreshMissingButton(updateButton);\n\n            updateButton.clicked += (() =>\n            {\n                IVRCPackage package = Repos.GetPackageWithVersionMatch(id, popupField.value);\n\n                // Check and warn on Dependencies if Updating or Downgrading\n                if (Version.TryParse(version, out var currentVersion) &&\n                    Version.TryParse(popupField.value, out var newVersion))\n                {\n                    Dictionary<string, string> dependencies = new Dictionary<string, string>();\n                    StringBuilder dialogMsg = new StringBuilder();\n                    List<string> affectedPackages = Resolver.GetAffectedPackageList(package);", "                if (Version.TryParse(version, out var currentVersion) &&\n                    Version.TryParse(popupField.value, out var newVersion))\n                {\n                    Dictionary<string, string> dependencies = new Dictionary<string, string>();\n                    StringBuilder dialogMsg = new StringBuilder();\n                    List<string> affectedPackages = Resolver.GetAffectedPackageList(package);\n                    for (int v = 0; v < affectedPackages.Count; v++)\n                    {\n                        dialogMsg.Append(affectedPackages[v]);\n                    }\n", "                    if (affectedPackages.Count > 1)\n                    {\n                        dialogMsg.Insert(0, \"This will update multiple packages:\\n\\n\");\n                        dialogMsg.AppendLine(\"\\nAre you sure?\");\n                        if (EditorUtility.DisplayDialog(\"Package Has Dependencies\", dialogMsg.ToString(), \"OK\", \"Cancel\"))\n                            OnUpdatePackageClicked(project, package);\n                    }\n                    else\n                    {\n                        OnUpdatePackageClicked(project, package);\n                    }\n                }\n\n            });\n            column4.Add(updateButton);\n\n            popupField.RegisterCallback<ChangeEvent<string>>((evt) =>\n            {", "                if (havePackage)\n                    RefreshUpdateButton(updateButton, version, evt.newValue);\n                else\n                    RefreshMissingButton(updateButton);\n            });\n\n            return row;\n        }\n\n        private static void RefreshUpdateButton(Button button, string currentVersion, string highestAvailableVersion)\n        {", "        private static void RefreshUpdateButton(Button button, string currentVersion, string highestAvailableVersion)\n        {\n            if (currentVersion == highestAvailableVersion)\n            {\n                button.style.display = DisplayStyle.None;\n            }\n            else\n            {\n                button.style.display = (_isUpdating ? DisplayStyle.None : DisplayStyle.Flex);\n                if (Version.TryParse(currentVersion, out var currentVersionObject) &&\n                    Version.TryParse(highestAvailableVersion, out var highestAvailableVersionObject))\n                {", "                if (Version.TryParse(currentVersion, out var currentVersionObject) &&\n                    Version.TryParse(highestAvailableVersion, out var highestAvailableVersionObject))\n                {\n                    if (currentVersionObject < highestAvailableVersionObject)\n                    {\n                        SetButtonColor(button, _colorPositive);\n                        button.text = \"Update\";\n                    }\n                    else\n                    {\n                        SetButtonColor(button, _colorNegative);\n                        button.text = \"Downgrade\";\n                    }\n                }\n            }\n        }\n", "        private static void RefreshMissingButton(Button button)\n        {\n            button.text = \"Resolve\";\n            SetButtonColor(button, Color.white);\n            button.style.display = (_isUpdating ? DisplayStyle.None : DisplayStyle.Flex);\n        }\n\n        private static void SetButtonColor(Button button, Color color)\n        {\n            button.style.color = color;\n            color.a = 0.25f;\n            button.style.borderRightColor =\n            button.style.borderLeftColor =\n            button.style.borderTopColor =\n            button.style.borderBottomColor =\n            color;\n        }\n", "        private static async void OnUpdatePackageClicked(UnityProject project, IVRCPackage package)\n        {\n            _isUpdating = true;\n            Refresh();\n            await Task.Delay(500);\n            await Task.Run(() => project.UpdateVPMPackage(package));\n            _isUpdating = false;\n            Refresh();\n        }\n\n    }\n}"]}
{"filename": "Packages/com.vrchat.core.vpm-resolver/Editor/PackageMaker/PackageMakerWindow.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing UnityEditor;\nusing UnityEditor.UIElements;\nusing UnityEditor.VersionControl;", "using UnityEditor.UIElements;\nusing UnityEditor.VersionControl;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing VRC.PackageManagement.Core.Types.Packages;\nusing YamlDotNet.Serialization.NodeTypeResolvers;\n\nnamespace VRC.PackageManagement.PackageMaker\n{\n    public class PackageMakerWindow : EditorWindow\n    {\n        // VisualElements", "{\n    public class PackageMakerWindow : EditorWindow\n    {\n        // VisualElements\n        private VisualElement _rootView;\n   \t\tprivate TextField _targetAssetFolderField;\n        private TextField _packageIDField;\n        private Button _actionButton;\n        private EnumField _targetVRCPackageField;\n        private static string _projectDir;\n        private PackageMakerWindowData _windowData;\n", "        private EnumField _targetVRCPackageField;\n        private static string _projectDir;\n        private PackageMakerWindowData _windowData;\n\n        private void LoadDataFromSave()\n        {\n            if (!string.IsNullOrWhiteSpace(_windowData.targetAssetFolder))\n            {\n                _targetAssetFolderField.SetValueWithoutNotify(_windowData.targetAssetFolder);\n            }\n            _packageIDField.SetValueWithoutNotify(_windowData.packageID);\n            _targetVRCPackageField.SetValueWithoutNotify(_windowData.relatedPackage);\n            \n            RefreshActionButtonState();\n        }\n", "        private void OnEnable()\n        {\n            _projectDir = Directory.GetParent(Application.dataPath).FullName;\n            Refresh();\n        }\n\n        [MenuItem(\"VRChat SDK/Utilities/Package Maker\")]\n        public static void ShowWindow()\n        {\n            PackageMakerWindow wnd = GetWindow<PackageMakerWindow>();\n            wnd.titleContent = new GUIContent(\"Package Maker\");\n        }\n        \n        [MenuItem(\"Assets/Export VPM as UnityPackage\")]", "        private static void ExportAsUnityPackage ()\n        {\n\n            var foldersToExport = new List<string>();\n            StringBuilder exportFilename = new StringBuilder(\"exported\");\n            foreach (string guid in Selection.assetGUIDs)\n            {\n                string selectedFolder = AssetDatabase.GUIDToAssetPath(guid);\n                var manifestPath = Path.Combine(selectedFolder, VRCPackageManifest.Filename);\n                var manifest = VRCPackageManifest.GetManifestAtPath(manifestPath);\n                if (manifest == null)\n                {\n                    Debug.LogWarning($\"Could not read valid Package Manifest at {manifestPath}. You need to create this first to export a VPM Package.\");\n                    continue;\n                }\n                exportFilename.Append($\"-{manifest.Id}-{manifest.Version}\");\n                foldersToExport.Add(selectedFolder);\n            }\n\n            exportFilename.Append(\".unitypackage\");\n            var exportDir = Path.Combine(Directory.GetCurrentDirectory(), \"Exports\");\n            Directory.CreateDirectory(exportDir);\n            AssetDatabase.ExportPackage\n            (\n                foldersToExport.ToArray(), \n                Path.Combine(exportDir, exportFilename.ToString()),\n                ExportPackageOptions.Recurse | ExportPackageOptions.Interactive\n            );\n        }\n", "                if (manifest == null)\n                {\n                    Debug.LogWarning($\"Could not read valid Package Manifest at {manifestPath}. You need to create this first to export a VPM Package.\");\n                    continue;\n                }\n                exportFilename.Append($\"-{manifest.Id}-{manifest.Version}\");\n                foldersToExport.Add(selectedFolder);\n            }\n\n            exportFilename.Append(\".unitypackage\");\n            var exportDir = Path.Combine(Directory.GetCurrentDirectory(), \"Exports\");\n            Directory.CreateDirectory(exportDir);\n            AssetDatabase.ExportPackage\n            (\n                foldersToExport.ToArray(), \n                Path.Combine(exportDir, exportFilename.ToString()),\n                ExportPackageOptions.Recurse | ExportPackageOptions.Interactive\n            );\n        }\n", "        private void Refresh()\n        {\n            if (_windowData == null)\n            {\n                _windowData = PackageMakerWindowData.GetOrCreate();\n            }\n            \n            if (_rootView == null) return;\n\n            if (_windowData != null)\n            {\n                LoadDataFromSave();\n            }\n        }\n", "            if (_windowData != null)\n            {\n                LoadDataFromSave();\n            }\n        }\n\n        private void RefreshActionButtonState()\n        {\n            _actionButton.SetEnabled(\n                StringIsValidAssetFolder(_windowData.targetAssetFolder) &&\n                !string.IsNullOrWhiteSpace(_windowData.packageID)\n            );\n        }\n\n        /// <summary>\n        /// Unity calls the CreateGUI method automatically when the window needs to display\n        /// </summary>", "        private void CreateGUI()\n        {\n            if (_windowData == null)\n            {\n                _windowData = PackageMakerWindowData.GetOrCreate();\n            }\n            \n            _rootView = rootVisualElement;\n            _rootView.name = \"root-view\";\n            _rootView.styleSheets.Add((StyleSheet) Resources.Load(\"PackageMakerWindowStyle\"));\n\n            // Create Target Asset folder and register for drag and drop events\n            _rootView.Add(CreateTargetFolderElement());\n            _rootView.Add(CreatePackageIDElement());\n            _rootView.Add(CreateTargetVRCPackageElement());\n            _rootView.Add(CreateActionButton());\n\n            Refresh();\n        }\n", "        public enum VRCPackageEnum\n        {\n            None = 0,\n            Worlds = 1,\n            Avatars = 2,\n            Base = 3,\n            UdonSharp = 4,\n        }\n        \n        private VisualElement CreateTargetVRCPackageElement()\n        {\n            _targetVRCPackageField = new EnumField(\"Related VRChat Package\", VRCPackageEnum.None);\n            _targetVRCPackageField.RegisterValueChangedCallback(OnTargetVRCPackageChanged);\n            var box = new Box();\n            box.Add(_targetVRCPackageField);\n            return box;\n        }\n", "        private VisualElement CreateTargetVRCPackageElement()\n        {\n            _targetVRCPackageField = new EnumField(\"Related VRChat Package\", VRCPackageEnum.None);\n            _targetVRCPackageField.RegisterValueChangedCallback(OnTargetVRCPackageChanged);\n            var box = new Box();\n            box.Add(_targetVRCPackageField);\n            return box;\n        }\n\n        private void OnTargetVRCPackageChanged(ChangeEvent<Enum> evt)\n        {\n            _windowData.relatedPackage = (VRCPackageEnum)evt.newValue;\n            _windowData.Save();\n        }\n", "        private void OnTargetVRCPackageChanged(ChangeEvent<Enum> evt)\n        {\n            _windowData.relatedPackage = (VRCPackageEnum)evt.newValue;\n            _windowData.Save();\n        }\n\n        private VisualElement CreateActionButton()\n        {\n            _actionButton = new Button(OnActionButtonPressed)\n            {\n                text = \"Convert Assets to Package\",\n                name = \"action-button\"\n            };\n            return _actionButton;\n        }\n", "        private void OnActionButtonPressed()\n        {\n            bool result = EditorUtility.DisplayDialog(\"One-Way Conversion\",\n                $\"This process will move the assets from {_windowData.targetAssetFolder} into a new Package with the id {_windowData.packageID} and give it references to {_windowData.relatedPackage}.\",\n                \"Ok\", \"Wait, not yet.\");\n            if (result)\n            {\n                string newPackageFolderPath = Path.Combine(_projectDir, \"Packages\", _windowData.packageID);\n                Directory.CreateDirectory(newPackageFolderPath);\n                var fullTargetAssetFolder = Path.Combine(_projectDir, _windowData.targetAssetFolder);\n                DoMigration(fullTargetAssetFolder, newPackageFolderPath);\n                ForceRefresh();\n            }\n        }\n        ", "        public static void ForceRefresh ()\n        {\n            MethodInfo method = typeof( UnityEditor.PackageManager.Client ).GetMethod( \"Resolve\", BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.DeclaredOnly );\n            if( method != null )\n                method.Invoke( null, null );\n\n            AssetDatabase.Refresh();\n        }\n\n        private VisualElement CreatePackageIDElement()\n        {\n            var box = new Box()\n            {\n                name = \"package-name-box\"\n            };\n\n            _packageIDField = new TextField(\"Package ID\", 255, false, false, '*');\n            _packageIDField.RegisterValueChangedCallback(OnPackageIDChanged);\n            box.Add(_packageIDField);\n            \n            box.Add(new Label(\"Lowercase letters, numbers and dots only.\")\n            {\n                name=\"description\",\n                tooltip = \"Standard practice is reverse domain notation like com.vrchat.packagename. Needs to be unique across VRChat, so if you don't own a domain you can try your username.\",\n            });\n            \n            return box;\n        }\n", "        private VisualElement CreatePackageIDElement()\n        {\n            var box = new Box()\n            {\n                name = \"package-name-box\"\n            };\n\n            _packageIDField = new TextField(\"Package ID\", 255, false, false, '*');\n            _packageIDField.RegisterValueChangedCallback(OnPackageIDChanged);\n            box.Add(_packageIDField);\n            \n            box.Add(new Label(\"Lowercase letters, numbers and dots only.\")\n            {\n                name=\"description\",\n                tooltip = \"Standard practice is reverse domain notation like com.vrchat.packagename. Needs to be unique across VRChat, so if you don't own a domain you can try your username.\",\n            });\n            \n            return box;\n        }\n", "        private Regex packageIdRegex = new Regex(\"[^a-z0-9.]\");\n        private void OnPackageIDChanged(ChangeEvent<string> evt)\n        {\n            if (evt.newValue != null)\n            {\n                string newId = packageIdRegex.Replace(evt.newValue, \"-\");\n                _packageIDField.SetValueWithoutNotify(newId);\n                _windowData.packageID = newId;\n                _windowData.Save();\n            }\n            RefreshActionButtonState();\n        }\n", "        private VisualElement CreateTargetFolderElement()\n        {\n            var targetFolderBox = new Box()\n            {\n                name = \"editor-target-box\"\n            };\n            \n            _targetAssetFolderField = new TextField(\"Target Folder\");\n            _targetAssetFolderField.RegisterCallback<DragEnterEvent>(OnTargetAssetFolderDragEnter, TrickleDown.TrickleDown);\n            _targetAssetFolderField.RegisterCallback<DragLeaveEvent>(OnTargetAssetFolderDragLeave, TrickleDown.TrickleDown);\n            _targetAssetFolderField.RegisterCallback<DragUpdatedEvent>(OnTargetAssetFolderDragUpdated, TrickleDown.TrickleDown);\n            _targetAssetFolderField.RegisterCallback<DragPerformEvent>(OnTargetAssetFolderDragPerform, TrickleDown.TrickleDown);\n            _targetAssetFolderField.RegisterCallback<DragExitedEvent>(OnTargetAssetFolderDragExited, TrickleDown.TrickleDown);\n            _targetAssetFolderField.RegisterValueChangedCallback(OnTargetAssetFolderValueChanged);\n            targetFolderBox.Add(_targetAssetFolderField);\n            \n            targetFolderBox.Add(new Label(\"Drag and Drop an Assets Folder to Convert Above\"){name=\"description\"});\n            return targetFolderBox;\n        }\n\n        #region TargetAssetFolder Field Events\n", "        private bool StringIsValidAssetFolder(string targetFolder)\n        {\n            return !string.IsNullOrWhiteSpace(targetFolder) && AssetDatabase.IsValidFolder(targetFolder);\n        }\n        \n        private void OnTargetAssetFolderValueChanged(ChangeEvent<string> evt)\n        {\n            string targetFolder = evt.newValue;\n\n            if (StringIsValidAssetFolder(targetFolder))\n            {\n                _windowData.targetAssetFolder = evt.newValue;\n                _windowData.Save();\n                RefreshActionButtonState();\n            }\n            else\n            {\n                _targetAssetFolderField.SetValueWithoutNotify(evt.previousValue);\n            }\n        }\n        ", "            if (StringIsValidAssetFolder(targetFolder))\n            {\n                _windowData.targetAssetFolder = evt.newValue;\n                _windowData.Save();\n                RefreshActionButtonState();\n            }\n            else\n            {\n                _targetAssetFolderField.SetValueWithoutNotify(evt.previousValue);\n            }\n        }\n        ", "        private void OnTargetAssetFolderDragExited(DragExitedEvent evt)\n        {\n            DragAndDrop.visualMode = DragAndDropVisualMode.None;\n        }\n\n        private void OnTargetAssetFolderDragPerform(DragPerformEvent evt)\n        {\n            var targetFolder = DragAndDrop.paths[0];\n            if (!string.IsNullOrWhiteSpace(targetFolder) && AssetDatabase.IsValidFolder(targetFolder))\n            {\n                _targetAssetFolderField.value = targetFolder;\n            }\n            else\n            {\n                Debug.LogError($\"Could not accept {targetFolder}. Needs to be a folder within the project\");\n            }\n        }\n", "            if (!string.IsNullOrWhiteSpace(targetFolder) && AssetDatabase.IsValidFolder(targetFolder))\n            {\n                _targetAssetFolderField.value = targetFolder;\n            }\n            else\n            {\n                Debug.LogError($\"Could not accept {targetFolder}. Needs to be a folder within the project\");\n            }\n        }\n\n        private void OnTargetAssetFolderDragUpdated(DragUpdatedEvent evt)\n        {", "        private void OnTargetAssetFolderDragUpdated(DragUpdatedEvent evt)\n        {\n            if (DragAndDrop.paths.Length == 1)\n            {\n                DragAndDrop.visualMode = DragAndDropVisualMode.Copy;\n                DragAndDrop.AcceptDrag();\n            }\n            else\n            {\n                DragAndDrop.visualMode = DragAndDropVisualMode.Rejected;\n            }\n        }\n", "        private void OnTargetAssetFolderDragLeave(DragLeaveEvent evt)\n        {\n            DragAndDrop.visualMode = DragAndDropVisualMode.None;\n        }\n\n        private void OnTargetAssetFolderDragEnter(DragEnterEvent evt)\n        {\n            if (DragAndDrop.paths.Length == 1)\n            { \n                DragAndDrop.visualMode = DragAndDropVisualMode.Copy;\n                DragAndDrop.AcceptDrag();\n            }\n        }\n\n        #endregion\n\n        #region Migration Logic\n", "        private void DoMigration(string corePath, string targetDir)\n        {\n            \n            EditorUtility.DisplayProgressBar(\"Migrating Package\", \"Creating Starter Package\", 0.1f);\n            \n            // Convert PackageType enum to VRC Package ID string\n            string packageType = null;\n            switch (_windowData.relatedPackage)\n            {\n                case VRCPackageEnum.Avatars:\n                    packageType = \"com.vrchat.avatars\";\n                    break;\n                case VRCPackageEnum.Base:\n                    packageType = \"com.vrchat.base\";\n                    break;\n                case VRCPackageEnum.Worlds:\n                    packageType = \"com.vrchat.clientsim\"; // we want ClientSim too, need to specify that for now\n                    break;\n                case VRCPackageEnum.UdonSharp:\n                    packageType = \"com.vrchat.udonsharp\";\n                    break;\n            }\n\n            string parentDir = new DirectoryInfo(targetDir)?.Parent.FullName;\n            Core.Utilities.CreateStarterPackage(_windowData.packageID, parentDir, packageType);\n            var allFiles = GetAllFiles(corePath).ToList();\n            MoveFilesToPackageDir(allFiles, corePath, targetDir);\n            \n            // Clear target asset folder since it should no longer exist\n            _windowData.targetAssetFolder = \"\";\n            \n        }\n        ", "        private static IEnumerable<string> GetAllFiles(string path)\n        {\n            var excludedPaths = new List<string>()\n            {\n                \"Editor.meta\"\n            };\n            return Directory.EnumerateFiles(path, \"*.*\", SearchOption.AllDirectories)\n                .Where(\n                    s => excludedPaths.All(entry => !s.Contains(entry))\n                );\n        }\n        ", "        public static void MoveFilesToPackageDir(List<string> files, string pathBase, string targetDir)\n        {\n            EditorUtility.DisplayProgressBar(\"Migrating Package\", \"Moving Package Files\", 0f);\n            float totalFiles = files.Count;\n\n            for (int i = 0; i < files.Count; i++)\n            {\n                try\n                {\n                    EditorUtility.DisplayProgressBar(\"Migrating Package\", \"Moving Package Files\", i / totalFiles);\n                    var file = files[i];\n                    string simplifiedPath = file.Replace($\"{pathBase}\\\\\", \"\");\n                \n                    string dest = null;", "                    if (simplifiedPath.Contains(\"Editor\\\\\"))\n                    {\n                        // Remove extra 'Editor' subfolders\n                        dest = simplifiedPath.Replace(\"Editor\\\\\", \"\");\n                        dest = Path.Combine(targetDir, \"Editor\", dest);\n                    }\n                    else\n                    {\n                        // Make complete path to Runtime folder\n                        dest = Path.Combine(targetDir, \"Runtime\", simplifiedPath);\n                    }\n\n                    string targetEnclosingDir = Path.GetDirectoryName(dest);\n                    Directory.CreateDirectory(targetEnclosingDir);\n                    var sourceFile = Path.Combine(pathBase, simplifiedPath);\n                    File.Move(sourceFile, dest);\n                }", "                catch (Exception e)\n                {\n                    Debug.LogError($\"Error moving {files[i]}: {e.Message}\");\n                    continue;\n                }\n            }\n            \n            Directory.Delete(pathBase, true); // cleans up leftover folders since only files are moved\n            EditorUtility.ClearProgressBar();\n        }\n        \n        // Important while we're doing copy-and-rename in order to rename paths with \"Assets\" without renaming paths with \"Sample Assets\"", "        public static string ReplaceFirst(string text, string search, string replace)\n        {\n            int pos = text.IndexOf(search);\n            if (pos < 0)\n            {\n                return text;\n            }\n\n            return text.Substring(0, pos) + replace + text.Substring(pos + search.Length);\n        }\n\n        #endregion\n    }\n\n}"]}
{"filename": "Packages/com.vrchat.core.vpm-resolver/Editor/PackageMaker/PackageMakerWindowData.cs", "chunked_list": ["\ufeffusing System.IO;\nusing UnityEditor;\nusing UnityEngine;\nusing VRC.PackageManagement.PackageMaker;\n\npublic class PackageMakerWindowData : ScriptableObject\n{\n    public static string defaultAssetPath = Path.Combine(\"Assets\", \"PackageMakerWindowData.asset\");\n    public string targetAssetFolder;\n    public string packageID;\n    public PackageMakerWindow.VRCPackageEnum relatedPackage;\n", "    public string targetAssetFolder;\n    public string packageID;\n    public PackageMakerWindow.VRCPackageEnum relatedPackage;\n\n    public static PackageMakerWindowData GetOrCreate()\n    {\n        var existingData = AssetDatabase.AssetPathToGUID(defaultAssetPath);\n        if (string.IsNullOrWhiteSpace(existingData))\n        {\n            return Create();\n        }\n        else\n        {\n            var saveData = AssetDatabase.LoadAssetAtPath<PackageMakerWindowData>(defaultAssetPath);", "            if (saveData == null)\n            {\n                Debug.LogError($\"Could not load saved data but the save file exists. Resetting.\");\n                return Create();\n            }\n            return saveData;\n        }\n    }\n\n    public static PackageMakerWindowData Create()\n    {\n        var saveData = CreateInstance<PackageMakerWindowData>();\n        AssetDatabase.CreateAsset(saveData, defaultAssetPath);\n        AssetDatabase.SaveAssets();\n        return saveData;\n    }\n", "    public static PackageMakerWindowData Create()\n    {\n        var saveData = CreateInstance<PackageMakerWindowData>();\n        AssetDatabase.CreateAsset(saveData, defaultAssetPath);\n        AssetDatabase.SaveAssets();\n        return saveData;\n    }\n\n    public void Save()\n    {\n        AssetDatabase.SaveAssets();\n    }\n}\n", "    public void Save()\n    {\n        AssetDatabase.SaveAssets();\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer/Runtime/DataListExt.cs", "chunked_list": ["using VRC.SDK3.Data;\nusing Koyashiro.GenericDataContainer.Internal;\n\nnamespace Koyashiro.GenericDataContainer\n{\n    public static class DataListExt\n    {\n        public static int Capacity<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            return dataList.Capacity;\n        }\n", "        public static int Count<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            return dataList.Count;\n        }\n\n        public static void Add<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            dataList.Add(token);\n        }\n", "        public static void AddRange<T>(this DataList<T> list, T[] collection)\n        {\n            foreach (var item in collection)\n            {\n                list.Add(item);\n            }\n        }\n\n        public static void AddRange<T>(this DataList<T> list, DataList<T> collection)\n        {\n            var dataList = (DataList)(object)(list);\n            var tokens = (DataList)(object)collection;\n            dataList.AddRange(tokens);\n        }\n", "        public static void AddRange<T>(this DataList<T> list, DataList<T> collection)\n        {\n            var dataList = (DataList)(object)(list);\n            var tokens = (DataList)(object)collection;\n            dataList.AddRange(tokens);\n        }\n\n        public static void BinarySearch<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            dataList.BinarySearch(token);\n        }\n", "        public static void BinarySearch<T>(this DataList<T> list, int index, int count, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            dataList.BinarySearch(index, count, token);\n        }\n\n        public static void Clear<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.Clear();\n        }\n", "        public static bool Contains<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.Contains(token);\n        }\n\n        public static DataList<T> DeepClone<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            return (DataList<T>)(object)dataList.DeepClone();\n        }\n", "        public static DataList<T> GetRange<T>(this DataList<T> list, int index, int count)\n        {\n            var dataList = (DataList)(object)(list);\n            return (DataList<T>)(object)dataList.GetRange(index, count);\n        }\n\n        public static int IndexOf<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.IndexOf(token);\n        }\n", "        public static int IndexOf<T>(this DataList<T> list, T item, int index)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.IndexOf(token, index);\n        }\n\n        public static int IndexOf<T>(this DataList<T> list, T item, int index, int count)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.IndexOf(token, index, count);\n        }\n", "        public static void Insert<T>(this DataList<T> list, int index, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            dataList.Insert(index, token);\n        }\n\n        public static void InsertRange<T>(this DataList<T> list, int index, T[] collection)\n        {\n            for (var i = index; i < collection.Length; i++)\n            {\n                list.Insert(i, collection[i]);\n            }\n        }\n", "            for (var i = index; i < collection.Length; i++)\n            {\n                list.Insert(i, collection[i]);\n            }\n        }\n\n        public static void InsertRange<T>(this DataList<T> list, int index, DataList<T> collection)\n        {\n            var dataList = (DataList)(object)(list);\n            var tokens = (DataList)(object)collection;\n            dataList.InsertRange(index, tokens);\n        }\n", "        public static int LastIndexOf<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.LastIndexOf(token);\n        }\n\n        public static int LastIndexOf<T>(this DataList<T> list, T item, int index)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.LastIndexOf(token, index);\n        }\n", "        public static int LastIndexOf<T>(this DataList<T> list, T item, int index, int count)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.LastIndexOf(token, index, count);\n        }\n\n        public static bool Remove<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.Remove(token);\n        }\n", "        public static bool RemoveAll<T>(this DataList<T> list, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            return dataList.RemoveAll(token);\n        }\n\n        public static void RemoveAt<T>(this DataList<T> list, int index)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.RemoveAt(index);\n        }\n", "        public static void RemoveRange<T>(this DataList<T> list, int index, int count)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.RemoveRange(index, count);\n        }\n\n        public static void Reverse<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.Reverse();\n        }\n", "        public static void Reverse<T>(this DataList<T> list, int index, int count)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.Reverse(index, count);\n        }\n\n        public static void SetValue<T>(this DataList<T> list, int index, T item)\n        {\n            var dataList = (DataList)(object)(list);\n            var token = DataTokenUtil.NewDataToken(item);\n            dataList.SetValue(index, token);\n        }\n", "        public static DataList<T> ShallowClone<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            return (DataList<T>)(object)dataList.ShallowClone();\n        }\n\n        public static void Sort<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.Sort();\n        }\n", "        public static void Sort<T>(this DataList<T> list, int index, int count)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.Sort(index, count);\n        }\n\n        public static T[] ToArray<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            var length = dataList.Count;\n            var array = new T[length];", "            for (var i = 0; i < length; i++)\n            {\n                var token = dataList[i];\n                switch (token.TokenType)\n                {\n                    case TokenType.Reference:\n                        array[i] = (T)token.Reference;\n                        break;\n                    default:\n                        array[i] = (T)(object)token;\n                        break;\n                }\n            }\n            return array;\n        }\n", "        public static object[] ToObjectArray<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            var length = dataList.Count;\n            var array = new object[length];\n            for (var i = 0; i < length; i++)\n            {\n                var token = dataList[i];\n                switch (token.TokenType)\n                {\n                    case TokenType.Reference:\n                        array[i] = (T)token.Reference;\n                        break;\n                    default:\n                        array[i] = (T)(object)token;\n                        break;\n                }\n            }\n            return array;\n        }\n", "        public static void TrimExcess<T>(this DataList<T> list)\n        {\n            var dataList = (DataList)(object)(list);\n            dataList.TrimExcess();\n        }\n\n        public static bool TryGetValue<T>(this DataList<T> list, int index, out T value)\n        {\n            var dataList = (DataList)(object)(list);\n            if (!dataList.TryGetValue(index, out var token))\n            {\n                value = default;\n                return false;\n            }\n\n            switch (token.TokenType)\n            {\n                case TokenType.Reference:\n                    value = (T)token.Reference;\n                    break;\n                default:\n                    value = (T)(object)token;\n                    break;\n            }\n\n            return true;\n        }\n", "            if (!dataList.TryGetValue(index, out var token))\n            {\n                value = default;\n                return false;\n            }\n\n            switch (token.TokenType)\n            {\n                case TokenType.Reference:\n                    value = (T)token.Reference;\n                    break;\n                default:\n                    value = (T)(object)token;\n                    break;\n            }\n\n            return true;\n        }\n", "        public static T GetValue<T>(this DataList<T> list, int index)\n        {\n            var dataList = (DataList)(object)(list);\n\n            var token = dataList[index];\n            switch (token.TokenType)\n            {\n                case TokenType.Reference:\n                    return (T)token.Reference;\n                default:\n                    return (T)(object)token;\n            }\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer/Runtime/DataDictionary.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\n\nnamespace Koyashiro.GenericDataContainer\n{\n    [AddComponentMenu(\"\")]\n    public class DataDictionary<TKey, TValue> : UdonSharpBehaviour\n    {\n        public static DataDictionary<TKey, TValue> New()\n        {\n            return (DataDictionary<TKey, TValue>)(object)new DataDictionary();\n        }\n    }\n}\n", "        public static DataDictionary<TKey, TValue> New()\n        {\n            return (DataDictionary<TKey, TValue>)(object)new DataDictionary();\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer/Runtime/DataList.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.GenericDataContainer.Internal;\n\nnamespace Koyashiro.GenericDataContainer\n{\n    [AddComponentMenu(\"\")]\n    public class DataList<T> : UdonSharpBehaviour\n    {\n        public static DataList<T> New()\n        {\n            return (DataList<T>)(object)new DataList();\n        }\n", "    public class DataList<T> : UdonSharpBehaviour\n    {\n        public static DataList<T> New()\n        {\n            return (DataList<T>)(object)new DataList();\n        }\n\n        public static DataList<T> New(params T[] array)\n        {\n            var tokens = DataTokenUtil.NewDataTokens(array);\n            return (DataList<T>)(object)new DataList(tokens);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer/Runtime/DataDictionaryExt.cs", "chunked_list": ["using VRC.SDK3.Data;\nusing Koyashiro.GenericDataContainer.Internal;\n\nnamespace Koyashiro.GenericDataContainer\n{\n    public static class DataDictionaryExt\n    {\n        public static int Count<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            return dataDictionary.Count;\n        }\n", "        public static void Add<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key, TValue value)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            var keyToken = DataTokenUtil.NewDataToken(key);\n            var valueToken = DataTokenUtil.NewDataToken(value);\n            dataDictionary.Add(keyToken, valueToken);\n        }\n\n        public static void Clear<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            dataDictionary.Clear();\n        }\n", "        public static void Clear<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            dataDictionary.Clear();\n        }\n\n        public static bool ContainsKey<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            var keyToken = DataTokenUtil.NewDataToken(key);\n            return dataDictionary.ContainsKey(keyToken);\n        }\n", "        public static bool ContainsValue<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TValue value)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            var keyValue = DataTokenUtil.NewDataToken(value);\n            return dataDictionary.ContainsValue(keyValue);\n        }\n\n        public static DataDictionary<TKey, TValue> DeepClohne<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            return (DataDictionary<TKey, TValue>)(object)dataDictionary.DeepClone();\n        }\n", "        public static DataList<TKey> GetKeys<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            return (DataList<TKey>)(object)dataDictionary.GetKeys();\n        }\n\n        public static DataList<TValue> GetValues<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            return (DataList<TValue>)(object)dataDictionary.GetValues();\n        }\n", "        public static bool Remove<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            var keyToken = DataTokenUtil.NewDataToken(key);\n            return dataDictionary.Remove(keyToken);\n        }\n\n        public static bool Remove<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key, out TValue value)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            var keyToken = DataTokenUtil.NewDataToken(key);\n            var result = dataDictionary.Remove(keyToken, out var valueToken);\n            switch (valueToken.TokenType)\n            {\n                case TokenType.Reference:\n                    value = (TValue)valueToken.Reference;\n                    break;\n                default:\n                    value = (TValue)(object)valueToken;\n                    break;\n            }\n            return result;\n        }\n", "        public static void SetValue<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key, TValue value)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            var keyToken = DataTokenUtil.NewDataToken(key);\n            var keyValue = DataTokenUtil.NewDataToken(value);\n            dataDictionary.SetValue(keyToken, keyValue);\n        }\n\n        public static DataDictionary<TKey, TValue> ShallowClone<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            return (DataDictionary<TKey, TValue>)(object)dataDictionary.ShallowClone();\n        }\n", "        public static DataDictionary<TKey, TValue> ShallowClone<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n            return (DataDictionary<TKey, TValue>)(object)dataDictionary.ShallowClone();\n        }\n\n        public static bool TryGetValue<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key, out TValue value)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n\n            var keyToken = DataTokenUtil.NewDataToken(key);", "            if (!dataDictionary.TryGetValue(keyToken, out var valueToken))\n            {\n                value = default;\n                return false;\n            }\n\n            switch (valueToken.TokenType)\n            {\n                case TokenType.Reference:\n                    value = (TValue)valueToken.Reference;\n                    break;\n                default:\n                    value = (TValue)(object)valueToken;\n                    break;\n            }\n\n            return true;\n        }\n", "        public static TValue GetValue<TKey, TValue>(this DataDictionary<TKey, TValue> dictionary, TKey key)\n        {\n            var dataDictionary = (DataDictionary)(object)(dictionary);\n\n            var keyToken = DataTokenUtil.NewDataToken(key);\n\n            var valueToken = dataDictionary[keyToken];\n            switch (valueToken.TokenType)\n            {\n                case TokenType.Reference:\n                    return (TValue)valueToken.Reference;\n                default:\n                    return (TValue)(object)valueToken;\n            }\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer/Runtime/Internal/DataTokenUtil.cs", "chunked_list": ["using VRC.SDK3.Data;\n\nnamespace Koyashiro.GenericDataContainer.Internal\n{\n    public static class DataTokenUtil\n    {\n        public static DataToken NewDataToken<T>(T obj)\n        {\n            var objType = obj.GetType();\n\n            // TokenType.Boolean", "            if (objType == typeof(bool))\n            {\n                return new DataToken((bool)(object)obj);\n            }\n            // TokenType.SByte\n            else if (objType == typeof(sbyte))\n            {\n                return new DataToken((sbyte)(object)obj);\n            }\n            // TokenType.Byte\n            else if (objType == typeof(byte))\n            {\n                return new DataToken((byte)(object)obj);\n            }\n            // TokenType.Short", "            else if (objType == typeof(byte))\n            {\n                return new DataToken((byte)(object)obj);\n            }\n            // TokenType.Short\n            else if (objType == typeof(short))\n            {\n                return new DataToken((short)(object)obj);\n            }\n            // TokenType.UShort\n            else if (objType == typeof(ushort))\n            {\n                return new DataToken((ushort)(object)obj);\n            }\n            // TokenType.Int", "            else if (objType == typeof(ushort))\n            {\n                return new DataToken((ushort)(object)obj);\n            }\n            // TokenType.Int\n            else if (objType == typeof(int))\n            {\n                return new DataToken((int)(object)obj);\n            }\n            // TokenType.UInt\n            else if (objType == typeof(uint))\n            {\n                return new DataToken((uint)(object)obj);\n            }\n            // TokenType.Long", "            else if (objType == typeof(uint))\n            {\n                return new DataToken((uint)(object)obj);\n            }\n            // TokenType.Long\n            else if (objType == typeof(long))\n            {\n                return new DataToken((long)(object)obj);\n            }\n            // TokenType.ULong\n            else if (objType == typeof(ulong))\n            {\n                return new DataToken((ulong)(object)obj);\n            }\n            // TokenType.Float", "            else if (objType == typeof(ulong))\n            {\n                return new DataToken((ulong)(object)obj);\n            }\n            // TokenType.Float\n            else if (objType == typeof(float))\n            {\n                return new DataToken((float)(object)obj);\n            }\n            // TokenType.Double\n            else if (objType == typeof(double))\n            {\n                return new DataToken((double)(object)obj);\n            }\n            // TokenType.String", "            else if (objType == typeof(double))\n            {\n                return new DataToken((double)(object)obj);\n            }\n            // TokenType.String\n            else if (objType == typeof(string))\n            {\n                return new DataToken((string)(object)obj);\n            }\n            // TokenType.DataList\n            else if (objType == typeof(DataList))\n            {\n                return new DataToken((DataList)(object)obj);\n            }\n            // TokenType.DataDictionary", "            else if (objType == typeof(DataList))\n            {\n                return new DataToken((DataList)(object)obj);\n            }\n            // TokenType.DataDictionary\n            else if (objType == typeof(DataDictionary))\n            {\n                return new DataToken((DataDictionary)(object)obj);\n            }\n            // TokenType.Error\n            else if (objType == typeof(DataError))\n            {\n                return new DataToken((DataError)(object)obj);\n            }\n            // TokenType.Reference\n            else\n            {\n                return new DataToken(obj);\n            }\n        }\n", "            else if (objType == typeof(DataError))\n            {\n                return new DataToken((DataError)(object)obj);\n            }\n            // TokenType.Reference\n            else\n            {\n                return new DataToken(obj);\n            }\n        }\n", "        public static DataToken[] NewDataTokens<T>(T[] array)\n        {\n            var length = array.Length;\n            var tokens = new DataToken[length];\n            var arrayType = array.GetType();\n\n            // TokenType.Boolean\n            if (arrayType == typeof(bool[]))\n            {\n                var boolArray = (bool[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(boolArray[i]);\n                }\n            }\n            // TokenType.SByte", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(boolArray[i]);\n                }\n            }\n            // TokenType.SByte\n            else if (arrayType == typeof(sbyte[]))\n            {\n                var sbyteArray = (sbyte[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(sbyteArray[i]);\n                }\n            }\n            // TokenType.Byte", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(sbyteArray[i]);\n                }\n            }\n            // TokenType.Byte\n            else if (arrayType == typeof(byte[]))\n            {\n                var byteArray = (byte[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(byteArray[i]);\n                }\n            }\n            // TokenType.Short", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(byteArray[i]);\n                }\n            }\n            // TokenType.Short\n            else if (arrayType == typeof(short[]))\n            {\n                var shortArray = (short[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(shortArray[i]);\n                }\n            }\n            // TokenType.UShort", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(shortArray[i]);\n                }\n            }\n            // TokenType.UShort\n            else if (arrayType == typeof(ushort[]))\n            {\n                var ushortArray = (ushort[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(ushortArray[i]);\n                }\n            }\n            // TokenType.Int", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(ushortArray[i]);\n                }\n            }\n            // TokenType.Int\n            else if (arrayType == typeof(int[]))\n            {\n                var intArray = (int[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(intArray[i]);\n                }\n            }\n            // TokenType.UInt", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(intArray[i]);\n                }\n            }\n            // TokenType.UInt\n            else if (arrayType == typeof(uint[]))\n            {\n                var uintArray = (uint[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(uintArray[i]);\n                }\n            }\n            // TokenType.Long", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(uintArray[i]);\n                }\n            }\n            // TokenType.Long\n            else if (arrayType == typeof(long[]))\n            {\n                var longArray = (long[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(longArray[i]);\n                }\n            }\n            // TokenType.ULong", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(longArray[i]);\n                }\n            }\n            // TokenType.ULong\n            else if (arrayType == typeof(ulong[]))\n            {\n                var ulongArray = (ulong[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(ulongArray[i]);\n                }\n            }\n            // TokenType.Float", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(ulongArray[i]);\n                }\n            }\n            // TokenType.Float\n            else if (arrayType == typeof(float[]))\n            {\n                var floatArray = (float[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(floatArray[i]);\n                }\n            }\n            // TokenType.Double", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(floatArray[i]);\n                }\n            }\n            // TokenType.Double\n            else if (arrayType == typeof(double[]))\n            {\n                var doubleArray = (double[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(doubleArray[i]);\n                }\n            }\n            // TokenType.String", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(doubleArray[i]);\n                }\n            }\n            // TokenType.String\n            else if (arrayType == typeof(string[]))\n            {\n                var stringArray = (string[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(stringArray[i]);\n                }\n            }\n            // TokenType.DataList", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(stringArray[i]);\n                }\n            }\n            // TokenType.DataList\n            else if (arrayType == typeof(DataList[]))\n            {\n                var dataListArray = (DataList[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(dataListArray[i]);\n                }\n            }\n            // TokenType.DataDictionary", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(dataListArray[i]);\n                }\n            }\n            // TokenType.DataDictionary\n            else if (arrayType == typeof(DataDictionary[]))\n            {\n                var dataDictionaryArray = (DataDictionary[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(dataDictionaryArray[i]);\n                }\n            }\n            // TokenType.Error", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(dataDictionaryArray[i]);\n                }\n            }\n            // TokenType.Error\n            else if (arrayType == typeof(DataError[]))\n            {\n                var errorArray = (DataError[])(object)array;\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(errorArray[i]);\n                }\n            }\n            // TokenType.Reference\n            else\n            {", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(errorArray[i]);\n                }\n            }\n            // TokenType.Reference\n            else\n            {\n                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(array[i]);\n                }\n            }\n\n            return tokens;\n        }\n    }\n}\n", "                for (var i = 0; i < length; i++)\n                {\n                    tokens[i] = new DataToken(array[i]);\n                }\n            }\n\n            return tokens;\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListInsertRangeTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListInsertRangeTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.InsertRange(0, new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.InsertRange(2, DataList<int>.New(new int[] { 500, 600, 700, 800 }));\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(500),\n                        new DataToken(600),\n                        new DataToken(700),\n                        new DataToken(800),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n        }\n    }\n}\n", "    public class DataListInsertRangeTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.InsertRange(0, new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.InsertRange(2, DataList<int>.New(new int[] { 500, 600, 700, 800 }));\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(500),\n                        new DataToken(600),\n                        new DataToken(700),\n                        new DataToken(800),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListToObjectArrayTest.cs", "chunked_list": ["using UnityEngine;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListToObjectArrayTest : UdonSharpBehaviour\n    {\n        public TestUserDefinedClass testUserDefinedClass;\n", "        public TestUserDefinedClass testUserDefinedClass;\n\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 0, 1, 2, 3 });\n            Assert.Equal(new object[] { 0, 1, 2, 3 }, list.ToObjectArray(), this);\n\n            var list2 = DataList<TestUserDefinedClass>.New();\n            Assert.Equal(new object[] { }, list2.ToObjectArray(), this);\n\n            var list3 = DataList<TestUserDefinedClass>.New(new TestUserDefinedClass[] { testUserDefinedClass });\n            Assert.Equal(new object[] { testUserDefinedClass }, list3.ToObjectArray(), this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListInsertTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListInsertTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.Insert(0, 100);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), }), list, this);\n\n            list.Insert(1, 200);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), new DataToken(200), }), list, this);\n\n            list.Insert(0, 300);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(300), new DataToken(100), new DataToken(200), }), list, this);\n        }\n    }\n}\n", "    public class DataListInsertTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.Insert(0, 100);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), }), list, this);\n\n            list.Insert(1, 200);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), new DataToken(200), }), list, this);\n\n            list.Insert(0, 300);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(300), new DataToken(100), new DataToken(200), }), list, this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListToArrayTest.cs", "chunked_list": ["using UnityEngine;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListToArrayTest : UdonSharpBehaviour\n    {\n        public TestUserDefinedClass testUserDefinedClass;\n", "        public TestUserDefinedClass testUserDefinedClass;\n\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 0, 1, 2, 3 });\n            Assert.Equal(new int[] { 0, 1, 2, 3 }, list.ToArray(), this);\n\n            var list2 = DataList<TestUserDefinedClass>.New();\n            Assert.Equal(new TestUserDefinedClass[] { }, list2.ToArray(), this);\n\n            var list3 = DataList<TestUserDefinedClass>.New(new TestUserDefinedClass[] { testUserDefinedClass });\n            Assert.Equal(new TestUserDefinedClass[] { testUserDefinedClass }, list3.ToArray(), this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListRemoveRangeTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListRemoveRangeTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(0);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(2);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(1);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(200) }), list, this);\n\n            list.RemoveAt(0);\n            Assert.Equal(new DataList(), list, this);\n        }\n    }\n}\n", "    public class DataListRemoveRangeTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(0);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(2);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(1);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(200) }), list, this);\n\n            list.RemoveAt(0);\n            Assert.Equal(new DataList(), list, this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListAddTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListAddTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.Add(100);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100) }), list, this);\n\n            list.Add(200);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), new DataToken(200) }), list, this);\n\n            list.Add(300);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), new DataToken(200), new DataToken(300) }), list, this);\n        }\n    }\n}\n", "    public class DataListAddTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.Add(100);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100) }), list, this);\n\n            list.Add(200);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), new DataToken(200) }), list, this);\n\n            list.Add(300);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(100), new DataToken(200), new DataToken(300) }), list, this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListAddRangeTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListAddRangeTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.AddRange(new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.AddRange(DataList<int>.New(new int[] { 500, 600, 700, 800 }));\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400),\n                        new DataToken(500),\n                        new DataToken(600),\n                        new DataToken(700),\n                        new DataToken(800)\n                    }\n                ),\n                list,\n                this\n            );\n        }\n    }\n}\n", "    public class DataListAddRangeTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New();\n            Assert.Equal(new DataList(), list, this);\n\n            list.AddRange(new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.AddRange(DataList<int>.New(new int[] { 500, 600, 700, 800 }));\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400),\n                        new DataToken(500),\n                        new DataToken(600),\n                        new DataToken(700),\n                        new DataToken(800)\n                    }\n                ),\n                list,\n                this\n            );\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListNewTest.cs", "chunked_list": ["using System;\nusing UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListNewTest : UdonSharpBehaviour\n    {", "    [AddComponentMenu(\"\")]\n    public class DataListNewTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            Assert.Equal(new DataList(), DataList<int>.New(), this);\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(false), new DataToken(true) }),\n                DataList<bool>.New(new bool[] { false, true }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken((sbyte)0), new DataToken((sbyte)1) }),\n                DataList<sbyte>.New(new sbyte[] { (sbyte)0, (sbyte)1 }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken((byte)0), new DataToken((byte)1) }),\n                DataList<byte>.New(new byte[] { (byte)0, (byte)1 }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken((short)0), new DataToken((short)1) }),\n                DataList<short>.New(new short[] { (short)0, (short)1 }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken((ushort)0), new DataToken((ushort)1) }),\n                DataList<ushort>.New(new ushort[] { (ushort)0, (ushort)1 }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(0), new DataToken(1) }),\n                DataList<int>.New(new int[] { 0, 1 }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(0U), new DataToken(1U) }),\n                DataList<uint>.New(new uint[] { 0, 1 }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(0L), new DataToken(1L) }),\n                DataList<long>.New(new long[] { 0L, 1L }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(0UL), new DataToken(1UL) }),\n                DataList<ulong>.New(new ulong[] { 0UL, 1UL }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(0F), new DataToken(1F) }),\n                DataList<float>.New(new float[] { 0F, 1F }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(0D), new DataToken(1D) }),\n                DataList<double>.New(new double[] { 0D, 1D }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(\"aaa\"), new DataToken(\"bbb\") }),\n                DataList<string>.New(new string[] { \"aaa\", \"bbb\" }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(new DataList()) }),\n                DataList<DataList>.New(new DataList[] { new DataList() }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(new DataDictionary()) }),\n                DataList<DataDictionary>.New(new DataDictionary[] { new DataDictionary() }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(new DateTime(2023, 01, 01, 0, 0, 0)), new DataToken(new DateTime(2023, 01, 02, 0, 0, 0)) }),\n                DataList<DateTime>.New(new DateTime[] { new DateTime(2023, 01, 01, 0, 0, 0), new DateTime(2023, 01, 02, 0, 0, 0) }),\n                this\n            );\n            Assert.Equal(\n                new DataList(new DataToken[] { new DataToken(DataError.None), new DataToken(DataError.KeyDoesNotExist) }),\n                DataList<DataError>.New(new DataError[] { DataError.None, DataError.KeyDoesNotExist }),\n                this\n            );\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/TestUserDefinedClass.cs", "chunked_list": ["using UdonSharp;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    public class TestUserDefinedClass : UdonSharpBehaviour\n    {\n        public string field;\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListRemoveTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListRemoveTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.Remove(100);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.Remove(400);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.Remove(300);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(200) }), list, this);\n\n            list.Remove(200);\n            Assert.Equal(new DataList(), list, this);\n\n            list.Remove(0);\n            Assert.Equal(new DataList(), list, this);\n        }\n    }\n}\n", "    public class DataListRemoveTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.Remove(100);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.Remove(400);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.Remove(300);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(200) }), list, this);\n\n            list.Remove(200);\n            Assert.Equal(new DataList(), list, this);\n\n            list.Remove(0);\n            Assert.Equal(new DataList(), list, this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListGetValueTest.cs", "chunked_list": ["using UnityEngine;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListGetValueTest : UdonSharpBehaviour\n    {\n        public TestUserDefinedClass testUserDefinedClass;\n", "        public TestUserDefinedClass testUserDefinedClass;\n\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n\n            Assert.Equal(100, list.GetValue(0), this);\n            Assert.Equal(200, list.GetValue(1), this);\n            Assert.Equal(300, list.GetValue(2), this);\n            Assert.Equal(400, list.GetValue(3), this);\n\n            var list2 = DataList<TestUserDefinedClass>.New();\n            list2.Add(testUserDefinedClass);\n            var value = list2.GetValue(0);\n            Assert.Equal(\"Hello, world!\", value.field, this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListRemoveAtTest.cs", "chunked_list": ["using UnityEngine;\nusing VRC.SDK3.Data;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListRemoveAtTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(0);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(2);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(1);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(200) }), list, this);\n\n            list.RemoveAt(0);\n            Assert.Equal(new DataList(), list, this);\n        }\n    }\n}\n", "    public class DataListRemoveAtTest : UdonSharpBehaviour\n    {\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(100),\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(0);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300),\n                        new DataToken(400)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(2);\n            Assert.Equal(\n                new DataList(\n                    new DataToken[]\n                    {\n                        new DataToken(200),\n                        new DataToken(300)\n                    }\n                ),\n                list,\n                this\n            );\n\n            list.RemoveAt(1);\n            Assert.Equal(new DataList(new DataToken[] { new DataToken(200) }), list, this);\n\n            list.RemoveAt(0);\n            Assert.Equal(new DataList(), list, this);\n        }\n    }\n}\n"]}
{"filename": "Packages/net.koyashiro.genericdatacontainer.tests/Tests/Runtime/DataListTryGetValueTest.cs", "chunked_list": ["using UnityEngine;\nusing UdonSharp;\nusing Koyashiro.UdonTest;\n\nnamespace Koyashiro.GenericDataContainer.Tests\n{\n    [AddComponentMenu(\"\")]\n    public class DataListTryGetValueTest : UdonSharpBehaviour\n    {\n        public TestUserDefinedClass testUserDefinedClass;\n", "        public TestUserDefinedClass testUserDefinedClass;\n\n        public void Start()\n        {\n            var list = DataList<int>.New(new int[] { 100, 200, 300, 400 });\n\n            int output;\n            Assert.True(list.TryGetValue(0, out output));\n            Assert.Equal(100, output);\n\n            Assert.True(list.TryGetValue(1, out output));\n            Assert.Equal(200, output);\n\n            Assert.True(list.TryGetValue(2, out output));\n            Assert.Equal(300, output);\n\n            Assert.True(list.TryGetValue(3, out output));\n            Assert.Equal(400, output);\n\n            Assert.False(list.TryGetValue(4, out output));\n            Assert.Equal(default(int), output);\n\n            var list2 = DataList<TestUserDefinedClass>.New();\n            list2.Add(testUserDefinedClass);\n            TestUserDefinedClass output2;\n            Assert.True(list2.TryGetValue(0, out output2));\n            Assert.Equal(\"Hello, world!\", output2.field, this);\n        }\n    }\n}\n"]}
