{"filename": "Canvas.MAUI/MauiProgram.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Logging;\n\nnamespace Canvas.MAUI\n{\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                    fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n                });\n\n#if DEBUG\n\t\tbuilder.Logging.AddDebug();\n#endif\n\n            return builder.Build();\n        }\n    }\n}"]}
{"filename": "Canvas.MAUI/MainPage.xaml.cs", "chunked_list": ["\ufeffusing Canvas.MAUI.ViewModels;\n\nnamespace Canvas.MAUI\n{\n    public partial class MainPage : ContentPage\n    {\n        public MainPage()\n        {\n            InitializeComponent();\n            BindingContext= new MainViewModel();\n\n        }\n", "        private void SearchClicked(object sender, EventArgs e)\n        {\n            (BindingContext as MainViewModel).Search();\n        }\n\n        private void DeleteClick(object sender, EventArgs e)\n        {\n            (BindingContext as MainViewModel).Delete();\n        }\n    }\n}"]}
{"filename": "Canvas.MAUI/AppShell.xaml.cs", "chunked_list": ["\ufeffnamespace Canvas.MAUI\n{\n    public partial class AppShell : Shell\n    {\n        public AppShell()\n        {\n            InitializeComponent();\n        }\n    }\n}"]}
{"filename": "Canvas.MAUI/App.xaml.cs", "chunked_list": ["\ufeffnamespace Canvas.MAUI\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n\n            MainPage = new AppShell();\n        }\n    }\n}"]}
{"filename": "Canvas.MAUI/ViewModels/MainViewModel.cs", "chunked_list": ["\ufeffusing Canvas.CLI.Models;\nusing Canvas.Library.Services;\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Text;\nusing System.Threading.Tasks;", "using System.Text;\nusing System.Threading.Tasks;\n\nnamespace Canvas.MAUI.ViewModels\n{\n    public class MainViewModel : INotifyPropertyChanged\n    {\n        public ObservableCollection<Student> Students { \n            get\n            {\n                if(string.IsNullOrEmpty(Query))\n                {\n                    return new ObservableCollection<Student>(StudentService.Current.Enrollments);\n                }\n                return new ObservableCollection<Student>(StudentService.Current.Search(Query));\n            }\n        }\n", "                if(string.IsNullOrEmpty(Query))\n                {\n                    return new ObservableCollection<Student>(StudentService.Current.Enrollments);\n                }\n                return new ObservableCollection<Student>(StudentService.Current.Search(Query));\n            }\n        }\n\n        public string Query { get; set; }\n\n        public void Search() {\n            NotifyPropertyChanged(\"Students\");\n        }\n", "        public string Query { get; set; }\n\n        public void Search() {\n            NotifyPropertyChanged(\"Students\");\n        }\n\n        public void Delete()\n        {\n            if(SelectedStudent == null)\n            {\n                return;\n            }\n            StudentService.Current.Delete(SelectedStudent);\n            NotifyPropertyChanged(\"Students\");\n        }\n", "            if(SelectedStudent == null)\n            {\n                return;\n            }\n            StudentService.Current.Delete(SelectedStudent);\n            NotifyPropertyChanged(\"Students\");\n        }\n\n        public Student SelectedStudent { get; set; }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n", "        public Student SelectedStudent { get; set; }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        private void NotifyPropertyChanged([CallerMemberName] String propertyName = \"\")\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n}\n"]}
{"filename": "Canvas.MAUI/Platforms/Tizen/Main.cs", "chunked_list": ["using Microsoft.Maui;\nusing Microsoft.Maui.Hosting;\nusing System;\n\nnamespace Canvas.MAUI\n{\n    internal class Program : MauiApplication\n    {\n        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n\n        static void Main(string[] args)\n        {\n            var app = new Program();\n            app.Run(args);\n        }\n    }\n}", "        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n\n        static void Main(string[] args)\n        {\n            var app = new Program();\n            app.Run(args);\n        }\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/iOS/AppDelegate.cs", "chunked_list": ["\ufeffusing Foundation;\n\nnamespace Canvas.MAUI\n{\n    [Register(\"AppDelegate\")]\n    public class AppDelegate : MauiUIApplicationDelegate\n    {\n        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/iOS/Program.cs", "chunked_list": ["\ufeffusing ObjCRuntime;\nusing UIKit;\n\nnamespace Canvas.MAUI\n{\n    public class Program\n    {\n        // This is the main entry point of the application.\n        static void Main(string[] args)\n        {\n            // if you want to use a different Application Delegate class from \"AppDelegate\"\n            // you can specify it here.\n            UIApplication.Main(args, null, typeof(AppDelegate));\n        }\n    }\n}", "            // if you want to use a different Application Delegate class from \"AppDelegate\"\n            // you can specify it here.\n            UIApplication.Main(args, null, typeof(AppDelegate));\n        }\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/Android/MainApplication.cs", "chunked_list": ["\ufeffusing Android.App;\nusing Android.Runtime;\n\nnamespace Canvas.MAUI\n{\n    [Application]\n    public class MainApplication : MauiApplication\n    {\n        public MainApplication(IntPtr handle, JniHandleOwnership ownership)\n            : base(handle, ownership)\n        {\n        }\n", "        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/Android/MainActivity.cs", "chunked_list": ["\ufeffusing Android.App;\nusing Android.Content.PM;\nusing Android.OS;\n\nnamespace Canvas.MAUI\n{\n    [Activity(Theme = \"@style/Maui.SplashTheme\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]\n    public class MainActivity : MauiAppCompatActivity\n    {\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/Windows/App.xaml.cs", "chunked_list": ["\ufeffusing Microsoft.UI.Xaml;\n\n// To learn more about WinUI, the WinUI project structure,\n// and more about our project templates, see: http://aka.ms/winui-project-info.\n\nnamespace Canvas.MAUI.WinUI\n{\n    /// <summary>\n    /// Provides application-specific behavior to supplement the default Application class.\n    /// </summary>\n    public partial class App : MauiWinUIApplication\n    {\n        /// <summary>\n        /// Initializes the singleton application object.  This is the first line of authored code\n        /// executed, and as such is the logical equivalent of main() or WinMain().\n        /// </summary>\n        public App()\n        {\n            this.InitializeComponent();\n        }\n", "    /// Provides application-specific behavior to supplement the default Application class.\n    /// </summary>\n    public partial class App : MauiWinUIApplication\n    {\n        /// <summary>\n        /// Initializes the singleton application object.  This is the first line of authored code\n        /// executed, and as such is the logical equivalent of main() or WinMain().\n        /// </summary>\n        public App()\n        {\n            this.InitializeComponent();\n        }\n", "        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/MacCatalyst/AppDelegate.cs", "chunked_list": ["\ufeffusing Foundation;\n\nnamespace Canvas.MAUI\n{\n    [Register(\"AppDelegate\")]\n    public class AppDelegate : MauiUIApplicationDelegate\n    {\n        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();\n    }\n}"]}
{"filename": "Canvas.MAUI/Platforms/MacCatalyst/Program.cs", "chunked_list": ["\ufeffusing ObjCRuntime;\nusing UIKit;\n\nnamespace Canvas.MAUI\n{\n    public class Program\n    {\n        // This is the main entry point of the application.\n        static void Main(string[] args)\n        {\n            // if you want to use a different Application Delegate class from \"AppDelegate\"\n            // you can specify it here.\n            UIApplication.Main(args, null, typeof(AppDelegate));\n        }\n    }\n}", "            // if you want to use a different Application Delegate class from \"AppDelegate\"\n            // you can specify it here.\n            UIApplication.Main(args, null, typeof(AppDelegate));\n        }\n    }\n}"]}
{"filename": "Canvas.CLI/Program.cs", "chunked_list": ["\ufeffusing Canvas.CLI.Models;\nusing Canvas.Library.Services;\n\nnamespace Canvas\n{\n    internal class Program\n    {\n\n        static void Main(string[] args)\n        {\n            List<Course> courses = new List<Course>();\n            StudentMenu();\n            CourseMenu(courses);\n\n        }\n\n        static void CourseMenu(List<Course> courses) {\n            var myStudentService = StudentService.Current;\n        }\n\n        static void StudentMenu()\n        {\n            var studentService = StudentService.Current;", "            while (true)\n            {\n                Console.WriteLine(\"C. Create a Student\");\n                Console.WriteLine(\"R. List Students\");\n                Console.WriteLine(\"U. Update a Student\");\n                Console.WriteLine(\"D. Delete a Student\");\n                Console.WriteLine(\"Q. Quit\");\n\n                var choice = Console.ReadLine() ?? string.Empty;\n\n                if (choice.Equals(\"C\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    //Create stuff\n                    Console.WriteLine(\"Id: \");\n                    var Id = int.Parse(Console.ReadLine() ?? \"0\");\n\n                    Console.WriteLine(\"Name: \");\n                    var name = Console.ReadLine();\n\n                    StudentService.Current.Add(\n                        new Student\n                        {\n                            Id = Id,\n                            Name = name ?? \"John/Jane Doe\"\n                        }\n                    );\n\n                }", "                if (choice.Equals(\"C\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    //Create stuff\n                    Console.WriteLine(\"Id: \");\n                    var Id = int.Parse(Console.ReadLine() ?? \"0\");\n\n                    Console.WriteLine(\"Name: \");\n                    var name = Console.ReadLine();\n\n                    StudentService.Current.Add(\n                        new Student\n                        {\n                            Id = Id,\n                            Name = name ?? \"John/Jane Doe\"\n                        }\n                    );\n\n                }", "                else if (choice.Equals(\"R\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    //Read stuff\n                    StudentService.Current.Read();\n\n                }\n                else if (choice.Equals(\"U\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    //Update stuff\n                    Console.WriteLine(\"Which student should be updated?\");\n                    studentService.Read();\n                    var updateChoice = int.Parse(Console.ReadLine() ?? \"0\");\n\n                    var studentToUpdate = studentService.Get(updateChoice);", "                    if (studentToUpdate != null)\n                    {\n                        Console.WriteLine(\"What is the student's updated name?\");\n                        studentToUpdate.Name = Console.ReadLine() ?? \"John/Jane Doe\";\n                    }\n                }\n                else if (choice.Equals(\"D\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    //Delete stuff\n                    Console.WriteLine(\"Which student should be deleted?\");\n                    studentService.Read();\n                    var deleteChoice = int.Parse(Console.ReadLine() ?? \"0\");\n                    studentService.Delete(deleteChoice);\n                }", "                else if (choice.Equals(\"Q\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    break;\n                }\n                else\n                {\n                    Console.WriteLine(\"Sorry, that functionality isn't supported\");\n                }\n            }\n        }\n    }\n}"]}
{"filename": "Canvas.Library/Services/StudentService.cs", "chunked_list": ["\ufeffusing Canvas.CLI.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Canvas.Library.Services\n{\n    public class StudentService\n    {", "{\n    public class StudentService\n    {\n        private static StudentService? instance;\n        private static object _lock = new object();\n        public static StudentService Current {\n            get\n            {\n                lock(_lock)\n                {\n                    if (instance == null)\n                    {\n                        instance = new StudentService();\n                    }\n                }\n\n                return instance;\n            }\n        }\n\n        private List<Student> enrollments;\n        private StudentService()\n        {\n            enrollments = new List<Student>\n            {\n                new Student{Id = 1, Name = \"John Smith\"},\n                new Student{Id = 2, Name = \"Bob Smith\"},\n                new Student{Id = 3, Name = \"Sue Smith\"}\n            };\n        }\n\n        public List<Student> Enrollments\n        {\n            get { return enrollments; }\n        }\n\n        public List<Student> Search(string query)\n        {\n            return Enrollments.Where(s => s.Name.ToUpper().Contains(query.ToUpper())).ToList();\n        }\n\n        public Student? Get(int id)\n        {\n            return enrollments.FirstOrDefault(e => e.Id == id);\n        }\n", "                    if (instance == null)\n                    {\n                        instance = new StudentService();\n                    }\n                }\n\n                return instance;\n            }\n        }\n\n        private List<Student> enrollments;\n        private StudentService()\n        {\n            enrollments = new List<Student>\n            {\n                new Student{Id = 1, Name = \"John Smith\"},\n                new Student{Id = 2, Name = \"Bob Smith\"},\n                new Student{Id = 3, Name = \"Sue Smith\"}\n            };\n        }\n\n        public List<Student> Enrollments\n        {\n            get { return enrollments; }\n        }\n\n        public List<Student> Search(string query)\n        {\n            return Enrollments.Where(s => s.Name.ToUpper().Contains(query.ToUpper())).ToList();\n        }\n\n        public Student? Get(int id)\n        {\n            return enrollments.FirstOrDefault(e => e.Id == id);\n        }\n", "        public void Add(Student? student)\n        {\n            if (student != null) {\n                enrollments.Add(student);\n            }\n        }\n\n        public void Delete(int id)\n        {\n            var enrollmentToRemove = Get(id);\n            if (enrollmentToRemove != null)\n            {\n                enrollments.Remove(enrollmentToRemove);\n            }\n        }\n", "            if (enrollmentToRemove != null)\n            {\n                enrollments.Remove(enrollmentToRemove);\n            }\n        }\n\n        public void Delete(Student s)\n        {\n            Delete(s.Id);\n        }\n", "        public void Read()\n        {\n            enrollments.ForEach(Console.WriteLine);\n        }\n    }\n}\n"]}
{"filename": "Canvas.Library/Models/Course.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Canvas.CLI.Models\n{\n    public class Course\n    {\n        public int Id { get; set; }", "    public class Course\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public List<Student> Roster { get; set; }\n    }\n}\n"]}
{"filename": "Canvas.Library/Models/Student.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Canvas.CLI.Models\n{\n    public class Student\n    {\n        public int Id { get; set; }", "    public class Student\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n\n        public Student()\n        {\n            Name = string.Empty;\n        }\n\n        public override string ToString()\n        {\n            return $\"{Id}. {Name}\";\n        }\n    }\n", "        public override string ToString()\n        {\n            return $\"{Id}. {Name}\";\n        }\n    }\n\n    public enum Classifications\n    {\n        None\n        , Freshman\n        , Sophomore\n        , Junior\n        , Senior\n        , NonDegree\n    }\n}\n"]}
