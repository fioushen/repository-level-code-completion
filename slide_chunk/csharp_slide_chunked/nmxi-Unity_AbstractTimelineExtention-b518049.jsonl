{"filename": "Assets/TimelineExtension/Scripts/CustomActivationTrack/CustomActivationMixerBehavior.cs", "chunked_list": ["using System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\n#if UNITY_EDITOR\nusing UnityEditor;\n#endif\n\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack", "\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack\n{\n    public class CustomActivationMixerBehavior : PlayableBehaviour\n    {\n        public PlayableDirector Director;\n        public GameObject TrackBindingObject;\n\n        private List<ParticleSystem> particleSystemList = new();\n        private List<Animator> animatorList = new();\n", "        private bool initialized;\n        private float deltaTime;    //\u524d\u306b\u30d5\u30ec\u30fc\u30e0\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\n        private float lastDeltaTime;\n        private float lastTime;\n\n        public override void OnGraphStart(Playable playable)\n        {\n            initialized = false;\n            \n            base.OnGraphStart(playable);\n            \n            Initialize();\n        }\n", "        private void Initialize()\n        {\n            if (TrackBindingObject == null)\n            {\n                return;\n            }\n            \n            particleSystemList = TrackBindingObject.GetComponentsInChildren<ParticleSystem>().ToList();\n            animatorList = TrackBindingObject.GetComponentsInChildren<Animator>().ToList();\n            \n            initialized = true;\n        }\n", "        public override void ProcessFrame(Playable playable, FrameData info, object playerData)\n        {\n            if (TrackBindingObject == null)\n            {\n                return;\n            }\n\n            if (!initialized)\n            {\n                Initialize();\n            }\n\n            var inputCount = playable.GetInputCount();\n            var currentTime = Director.time <= Director.duration ? Director.time % Director.duration : Director.time;\n            \n            deltaTime = (float)currentTime - lastTime;\n\n#if UNITY_EDITOR", "            if (!EditorApplication.isPlaying)\n            {\n                //\u975ePlay\u6642\n                particleSystemList = TrackBindingObject.GetComponentsInChildren<ParticleSystem>().ToList();    \n                animatorList = TrackBindingObject.GetComponentsInChildren<Animator>().ToList();\n            }\n#endif\n\n            var isProcessed = false;\n            for (var i = 0; i < inputCount; i++)\n            {", "            for (var i = 0; i < inputCount; i++)\n            {\n                if (playable.GetInputWeight(i) <= 0)\n                {\n                    continue;\n                }\n\n                var scriptPlayable = (ScriptPlayable<CustomActivationPlayableBehavior>)playable.GetInput(i);\n                var clip = scriptPlayable.GetBehaviour();\n                var clipTime = currentTime - clip.StartTiming;\n", "                if (clip.StartTiming <= currentTime && clip.EndTiming >= currentTime &&\n                    !TrackBindingObject.activeSelf)\n                {\n                    TrackBindingObject.SetActive(true);\n                    \n                    foreach (var particleSystem in particleSystemList)\n                    {\n                        particleSystem.time = 0f;\n                        particleSystem.Simulate((float)clipTime, true, true);\n                    }\n                }", "                else if (lastDeltaTime <= 0 && 0 < deltaTime)\n                {\n                    // Debug.Log($\"lastDeltaTime: {lastDeltaTime}, deltaTime: {deltaTime}\");\n                    \n                    foreach (var particleSystem in particleSystemList)\n                    {\n                        particleSystem.Simulate((float)clipTime, true);\n                    }\n                }\n                else\n                {\n                    //ParticleSystem manual update", "                    foreach (var particleSystem in particleSystemList)\n                    {\n                        if (0 < deltaTime)\n                        {\n                            particleSystem.Simulate(deltaTime, true, false);\n                        }\n                        else\n                        {\n                            particleSystem.Simulate((float)clipTime, true);\n                        }\n                    }\n\n                    //Animation manual update", "                    foreach (var animator in animatorList)\n                    {\n                        for (var j = 0; j < animator.layerCount; j++)\n                        {\n                            var animatorClipInfoArray = animator.GetCurrentAnimatorClipInfo(j);\n\n                            foreach (var clipInfo in animatorClipInfoArray)\n                            {\n                                var duration = clipInfo.clip.length;\n                                var normalizedTime = clipTime % duration / duration;\n                                animator.speed = 0f;\n                                animator.ForceStateNormalizedTime((float)normalizedTime);\n                                animator.playableGraph.Evaluate();\n                            }\n                        }\n                    }\n                }\n\n                lastDeltaTime = deltaTime;\n                \n                isProcessed = true;\n                \n                break;\n            }\n            ", "            if (!isProcessed)\n            {\n                TrackBindingObject.SetActive(false);\n            }\n\n            lastTime = (float)currentTime;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/CustomActivationTrack/CustomActivationTrack.cs", "chunked_list": ["using System;\nusing System.ComponentModel;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack\n{\n    [TrackClipType(typeof(CustomActivationClip))]", "{\n    [TrackClipType(typeof(CustomActivationClip))]\n    [TrackBindingType(typeof(GameObject))]\n    [DisplayName(\"Additional/Custom Activation Track\")]\n    public class CustomActivationTrack : TrackAsset\n    {\n        [HideInInspector] public int TrackIndex;\n\n        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)\n        {\n            var clips = GetClips().ToArray();\n    ", "        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)\n        {\n            var clips = GetClips().ToArray();\n    \n            for (var i = 0; i < clips.Length; i++)\n            {\n                var customActivationClip = clips[i].asset as CustomActivationClip;\n                customActivationClip.TrackIndexPassingThrough = TrackIndex;\n                customActivationClip.ClipIndexPassingThrough = i;\n                customActivationClip.StartTimingPassthrough = clips[i].start;\n                customActivationClip.EndTimingPassthrough = clips[i].end;\n                customActivationClip.DurationPassthrough = clips[i].duration;\n            }\n\n            var playable = ScriptPlayable<CustomActivationMixerBehavior>.Create(graph, inputCount);\n            var behaviour = playable.GetBehaviour();\n            behaviour.Director = go.GetComponent<PlayableDirector>();\n            behaviour.TrackBindingObject = (GameObject)go.GetComponent<PlayableDirector>().GetGenericBinding(this);\n            return playable;\n        }\n    }   \n}"]}
{"filename": "Assets/TimelineExtension/Scripts/CustomActivationTrack/CustomActivationClip.cs", "chunked_list": ["using System;\nusing System.ComponentModel;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack\n{\n    [DisplayName(\"Custom Activation Clip\")]  \n    [Serializable]\n    public class CustomActivationClip : PlayableAsset, ITimelineClipAsset\n    {", "    [DisplayName(\"Custom Activation Clip\")]  \n    [Serializable]\n    public class CustomActivationClip : PlayableAsset, ITimelineClipAsset\n    {\n        [NonSerialized] public int TrackIndexPassingThrough;\n        [NonSerialized] public int ClipIndexPassingThrough;\n        [NonSerialized] public double StartTimingPassthrough;\n        [NonSerialized] public double EndTimingPassthrough;\n        [NonSerialized] public double DurationPassthrough;\n    \n        private CustomActivationPlayableBehavior data = new ();\n    ", "        [NonSerialized] public double DurationPassthrough;\n    \n        private CustomActivationPlayableBehavior data = new ();\n    \n        public ClipCaps clipCaps\n        {\n            get { return ClipCaps.None; }\n        }\n\n        public override Playable CreatePlayable(PlayableGraph graph, GameObject go)\n        {\n            data.TrackIndex = TrackIndexPassingThrough;\n            data.ClipIndex = ClipIndexPassingThrough;\n            data.StartTiming = StartTimingPassthrough;\n            data.EndTiming = EndTimingPassthrough;\n            data.Duration = DurationPassthrough;\n\n            return ScriptPlayable<CustomActivationPlayableBehavior>.Create(graph, data);\n        }\n    }   \n}", "        public override Playable CreatePlayable(PlayableGraph graph, GameObject go)\n        {\n            data.TrackIndex = TrackIndexPassingThrough;\n            data.ClipIndex = ClipIndexPassingThrough;\n            data.StartTiming = StartTimingPassthrough;\n            data.EndTiming = EndTimingPassthrough;\n            data.Duration = DurationPassthrough;\n\n            return ScriptPlayable<CustomActivationPlayableBehavior>.Create(graph, data);\n        }\n    }   \n}"]}
{"filename": "Assets/TimelineExtension/Scripts/CustomActivationTrack/CustomActivationPlayableBehavior.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack\n{\n    [Serializable]\n    public class CustomActivationPlayableBehavior : PlayableBehaviour\n    {", "    [Serializable]\n    public class CustomActivationPlayableBehavior : PlayableBehaviour\n    {\n        [HideInInspector] public int TrackIndex;\n        [HideInInspector] public int ClipIndex;\n        [HideInInspector] public double StartTiming;\n        [HideInInspector] public double EndTiming;\n        [HideInInspector] public double Duration;\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractIntValueControlMixerBehaviour.cs", "chunked_list": ["\ufeffusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public class AbstractIntValueControlMixerBehaviour : PlayableBehaviour\n    {\n        public override void ProcessFrame(Playable playable, FrameData info, object playerData)\n        {\n            var trackBinding = playerData as AbstractIntValueController;\n\n            if (!trackBinding)\n                return;\n\n            var Value = 0;\n\n            var inputCount = playable.GetInputCount();\n", "            if (!trackBinding)\n                return;\n\n            var Value = 0;\n\n            var inputCount = playable.GetInputCount();\n\n            for (var i = 0; i < inputCount; i++)\n            {\n                var inputWeight = playable.GetInputWeight(i);\n", "                if (inputWeight == 0f)\n                {\n                    continue;\n                }\n                \n                var inputPlayable = (ScriptPlayable<AbstractIntValueControlBehaviour>)playable.GetInput(i);\n                var inputBehaviour = inputPlayable.GetBehaviour();\n                Value = inputBehaviour.Value;\n                break;\n            }\n\n            //Apply\n            trackBinding.SetValue(Value);\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractBoolValueControlClip.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractBoolValueControlClip : PlayableAsset, ITimelineClipAsset\n    {\n        public bool Value;\n", "    public class AbstractBoolValueControlClip : PlayableAsset, ITimelineClipAsset\n    {\n        public bool Value;\n\n        public ClipCaps clipCaps\n        {\n            get { return ClipCaps.None; }\n        }\n\n        public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)\n        {\n            var data = new AbstractBoolValueControlBehaviour\n            {\n                Value = Value\n            };\n\n            var playable = ScriptPlayable<AbstractBoolValueControlBehaviour>.Create(graph, data);\n\n            return playable;\n        }\n    }\n}", "        public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)\n        {\n            var data = new AbstractBoolValueControlBehaviour\n            {\n                Value = Value\n            };\n\n            var playable = ScriptPlayable<AbstractBoolValueControlBehaviour>.Create(graph, data);\n\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractColorValueControlTrack.cs", "chunked_list": ["using System.ComponentModel;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [TrackClipType(typeof(AbstractColorValueControlClip))]\n    [TrackBindingType(typeof(AbstractColorValueController))]\n    [DisplayName(\"Additional/Abstract Color Value Control Track\")]\n    public class AbstractColorValueControlTrack : TrackAsset\n    {", "    [TrackBindingType(typeof(AbstractColorValueController))]\n    [DisplayName(\"Additional/Abstract Color Value Control Track\")]\n    public class AbstractColorValueControlTrack : TrackAsset\n    {\n        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)\n        {\n            foreach (var clip in GetClips())\n            {\n                var customClip = clip.asset as AbstractColorValueControlClip;\n                var c = customClip.Value;\n                var s = $\"{c.r:F1}, {c.g:F1}, {c.b:F1}, {c.a:F1}\";\n                clip.displayName = s;\n            }\n            \n            var playable = ScriptPlayable<AbstractColorValueControlMixerBehaviour>.Create(graph, inputCount);\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractBoolValueControlMixerBehaviour.cs", "chunked_list": ["\ufeffusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public class AbstractBoolValueControlMixerBehaviour : PlayableBehaviour\n    {\n        public override void ProcessFrame(Playable playable, FrameData info, object playerData)\n        {\n            var trackBinding = playerData as AbstractBoolValueController;\n", "            if (!trackBinding)\n                return;\n\n            var Value = false;\n\n            var inputCount = playable.GetInputCount();\n\n            for (var i = 0; i < inputCount; i++)\n            {\n                var inputWeight = playable.GetInputWeight(i);\n", "                if (inputWeight <= 0f)\n                {\n                    continue;\n                }\n\n                var inputPlayable = (ScriptPlayable<AbstractBoolValueControlBehaviour>)playable.GetInput(i);\n                var inputBehaviour = inputPlayable.GetBehaviour();\n                Value = inputBehaviour.Value;\n                break;\n            }\n\n            //Apply\n            trackBinding.SetValue(Value);\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractIntValueController.cs", "chunked_list": ["\ufeffusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public abstract class AbstractIntValueController : MonoBehaviour\n    {\n        public int value { get; private set; }\n\n        public void SetValue(int value)\n        {\n            this.value = value;\n            OnValueChanged(this.value);\n        }\n", "        public void SetValue(int value)\n        {\n            this.value = value;\n            OnValueChanged(this.value);\n        }\n\n        protected abstract void OnValueChanged(int value);\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractColorValueControlBehaviour.cs", "chunked_list": ["using System;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractColorValueControlBehaviour : PlayableBehaviour\n    {\n        [SerializeField] public Color Value = Color.white;\n    }\n}", "        [SerializeField] public Color Value = Color.white;\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractColorValueControlMixerBehaviour.cs", "chunked_list": ["using UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public class AbstractColorValueControlMixerBehaviour : PlayableBehaviour\n    {\n        public override void ProcessFrame(Playable playable, FrameData info, object playerData)\n        {\n            var trackBinding = playerData as AbstractColorValueController;\n", "            if (!trackBinding)\n                return;\n\n            var color0 = Color.white;\n            var color1 = Color.white;\n            var weight = 0f;\n\n            var inputCount = playable.GetInputCount();\n\n            // var count = 0;\n            for (var i = 0; i < inputCount; i++)\n            {\n                var inputWeight = playable.GetInputWeight(i);\n", "            for (var i = 0; i < inputCount; i++)\n            {\n                var inputWeight = playable.GetInputWeight(i);\n\n                if (inputWeight == 0f)\n                    continue;\n\n                var inputPlayable0 = (ScriptPlayable<AbstractColorValueControlBehaviour>)playable.GetInput(i);\n                var inputBehaviour = inputPlayable0.GetBehaviour();\n                \n                if (inputWeight == 1f)\n                {\n                    color0 = inputBehaviour.Value;\n                    weight = 1f;\n                }\n                else\n                {\n                    color0 = inputBehaviour.Value;\n                    var inputPlayable1 = (ScriptPlayable<AbstractColorValueControlBehaviour>)playable.GetInput(i + 1);\n                    color1 = inputPlayable1.GetBehaviour().Value;\n                    weight = inputWeight;\n                }\n                \n                break;\n            }\n\n            //Apply\n            trackBinding.SetValue(Color.Lerp(color0,color1, 1f - weight));\n        }\n    }\n}", "                if (inputWeight == 1f)\n                {\n                    color0 = inputBehaviour.Value;\n                    weight = 1f;\n                }\n                else\n                {\n                    color0 = inputBehaviour.Value;\n                    var inputPlayable1 = (ScriptPlayable<AbstractColorValueControlBehaviour>)playable.GetInput(i + 1);\n                    color1 = inputPlayable1.GetBehaviour().Value;\n                    weight = inputWeight;\n                }\n                \n                break;\n            }\n\n            //Apply\n            trackBinding.SetValue(Color.Lerp(color0,color1, 1f - weight));\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractFloatValueControlBehaviour.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractFloatValueControlBehaviour : PlayableBehaviour\n    {\n        [SerializeField] public float Value = 1f;\n    }\n}", "        [SerializeField] public float Value = 1f;\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractBoolValueController.cs", "chunked_list": ["\ufeffusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public abstract class AbstractBoolValueController : MonoBehaviour\n    {\n        public bool value { get; private set; }\n\n        public void SetValue(bool value)\n        {\n            this.value = value;\n            OnValueInput(this.value);\n        }\n", "        public void SetValue(bool value)\n        {\n            this.value = value;\n            OnValueInput(this.value);\n        }\n\n        protected abstract void OnValueInput(bool value);\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractFloatValueControlClip.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractFloatValueControlClip : PlayableAsset\n    {\n        public float Value;\n", "        public float Value;\n\n        public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)\n        {\n            var data = new AbstractFloatValueControlBehaviour\n            {\n                Value = Value\n            };\n            \n            var playable = ScriptPlayable<AbstractFloatValueControlBehaviour>.Create(graph, data);\n\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractBoolValueControlTrack.cs", "chunked_list": ["\ufeffusing System.ComponentModel;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [TrackClipType(typeof(AbstractBoolValueControlClip))]\n    [TrackBindingType(typeof(AbstractBoolValueController))]\n    [DisplayName(\"Additional/Abstract Bool Value Control Track\")]\n    public class AbstractBoolValueControlTrack : TrackAsset\n    {", "    [TrackBindingType(typeof(AbstractBoolValueController))]\n    [DisplayName(\"Additional/Abstract Bool Value Control Track\")]\n    public class AbstractBoolValueControlTrack : TrackAsset\n    {\n        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)\n        {\n            foreach (var clip in GetClips())\n            {\n                var customClip = clip.asset as AbstractBoolValueControlClip;\n                clip.displayName = customClip.Value.ToString();\n            }\n            \n            var playable = ScriptPlayable<AbstractBoolValueControlMixerBehaviour>.Create(graph, inputCount);\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractColorValueControlClip.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractColorValueControlClip : PlayableAsset\n    {\n        [ColorUsage(true, true)] public Color Value;\n", "        [ColorUsage(true, true)] public Color Value;\n\n        public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)\n        {\n            var data = new AbstractColorValueControlBehaviour\n            {\n                Value = Value\n            };\n            \n            var playable = ScriptPlayable<AbstractColorValueControlBehaviour>.Create(graph, data);\n\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractFloatValueController.cs", "chunked_list": ["using UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public abstract class AbstractFloatValueController : MonoBehaviour\n    {\n        public float Value => currentValueFromIndex0();\n\n        public void SetValue(float value)\n        {\n            OnValueChanged(value);\n        }\n", "        public void SetValue(float value)\n        {\n            OnValueChanged(value);\n        }\n\n        protected abstract void OnValueChanged(float value);\n        protected abstract float currentValueFromIndex0();\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractIntValueControlBehaviour.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractIntValueControlBehaviour : PlayableBehaviour\n    {\n        [SerializeField] public int Value = 0;\n    }\n}", "        [SerializeField] public int Value = 0;\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractIntValueControlClip.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractIntValueControlClip : PlayableAsset, ITimelineClipAsset\n    {\n        public int Value;\n        ", "    public class AbstractIntValueControlClip : PlayableAsset, ITimelineClipAsset\n    {\n        public int Value;\n        \n        public ClipCaps clipCaps\n        {\n            get { return ClipCaps.None; }\n        }\n\n        public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)\n        {\n            var data = new AbstractIntValueControlBehaviour\n            {\n                Value = Value\n            };\n            \n            var playable = ScriptPlayable<AbstractIntValueControlBehaviour>.Create(graph, data);\n\n            return playable;\n        }\n    }\n}", "        public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)\n        {\n            var data = new AbstractIntValueControlBehaviour\n            {\n                Value = Value\n            };\n            \n            var playable = ScriptPlayable<AbstractIntValueControlBehaviour>.Create(graph, data);\n\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractBoolValueControlBehaviour.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [Serializable]\n    public class AbstractBoolValueControlBehaviour : PlayableBehaviour\n    {\n        [SerializeField] public bool Value = false;\n    }\n}", "        [SerializeField] public bool Value = false;\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractFloatValueControlMixerBehaviour.cs", "chunked_list": ["\ufeffusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public class AbstractFloatValueControlMixerBehaviour : PlayableBehaviour\n    {\n        public override void ProcessFrame(Playable playable, FrameData info, object playerData)\n        {\n            var trackBinding = playerData as AbstractFloatValueController;\n\n            if (!trackBinding)\n                return;\n\n            var value = 0f;\n\n            var inputCount = playable.GetInputCount();\n", "            if (!trackBinding)\n                return;\n\n            var value = 0f;\n\n            var inputCount = playable.GetInputCount();\n\n            for (var i = 0; i < inputCount; i++)\n            {\n                var inputWeight = playable.GetInputWeight(i);\n", "                if (inputWeight == 0f)\n                {\n                    continue;\n                }\n                \n                var inputPlayable = (ScriptPlayable<AbstractFloatValueControlBehaviour>)playable.GetInput(i);\n                var inputBehaviour = inputPlayable.GetBehaviour();\n\n                value += inputBehaviour.Value * inputWeight;\n            }\n\n            //Apply\n            trackBinding.SetValue(value);\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractIntValueControlTrack.cs", "chunked_list": ["\ufeffusing System.ComponentModel;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [TrackClipType(typeof(AbstractIntValueControlClip))]\n    [TrackBindingType(typeof(AbstractIntValueController))]\n    [DisplayName(\"Additional/Abstract Int Value Control Track\")]\n    public class AbstractIntValueControlTrack : TrackAsset\n    {", "    [TrackBindingType(typeof(AbstractIntValueController))]\n    [DisplayName(\"Additional/Abstract Int Value Control Track\")]\n    public class AbstractIntValueControlTrack : TrackAsset\n    {\n        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)\n        {\n            foreach (var clip in GetClips())\n            {\n                var customClip = clip.asset as AbstractIntValueControlClip;\n                clip.displayName = $\"{customClip.Value}\";\n            }\n            \n            var playable = ScriptPlayable<AbstractIntValueControlMixerBehaviour>.Create(graph, inputCount);\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractFloatValueControlTrack.cs", "chunked_list": ["\ufeffusing System.ComponentModel;\nusing UnityEngine;\nusing UnityEngine.Playables;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    [TrackClipType(typeof(AbstractFloatValueControlClip))]\n    [TrackBindingType(typeof(AbstractFloatValueController))]\n    [DisplayName(\"Additional/Abstract Float Value Control Track\")]\n    public class AbstractFloatValueControlTrack : TrackAsset\n    {", "    [TrackBindingType(typeof(AbstractFloatValueController))]\n    [DisplayName(\"Additional/Abstract Float Value Control Track\")]\n    public class AbstractFloatValueControlTrack : TrackAsset\n    {\n        public override Playable CreateTrackMixer(PlayableGraph graph, GameObject go, int inputCount)\n        {\n            foreach (var clip in GetClips())\n            {\n                var customClip = clip.asset as AbstractFloatValueControlClip;\n                clip.displayName = $\"{customClip.Value:F2}\";\n            }\n            \n            var playable = ScriptPlayable<AbstractFloatValueControlMixerBehaviour>.Create(graph, inputCount);\n            return playable;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/AbstractColorValueController.cs", "chunked_list": ["using UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack\n{\n    public abstract class AbstractColorValueController : MonoBehaviour\n    {\n        public Color value { get; private set; }\n\n        public void SetValue(Color value)\n        {\n            if (value == this.value)\n            {\n                return;\n            }\n            \n            this.value = value;\n            OnValueChanged(this.value);\n        }\n", "        public void SetValue(Color value)\n        {\n            if (value == this.value)\n            {\n                return;\n            }\n            \n            this.value = value;\n            OnValueChanged(this.value);\n        }\n", "        protected abstract void OnValueChanged(Color value);\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/RendererMaterialData.cs", "chunked_list": ["using System;\nusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    [Serializable]\n    public class RendererMaterialData\n    {\n        public Renderer TargetRenderer;\n        public int MaterialIndex;\n        public string PropertyName;\n        ", "        public Renderer TargetRenderer;\n        public int MaterialIndex;\n        public string PropertyName;\n        \n        public void SetValue(float value)\n        {\n            TargetRenderer.materials[MaterialIndex].SetFloat(PropertyName, value);\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/EnvironmentSkyIntensityController.cs", "chunked_list": ["using UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class EnvironmentSkyIntensityController : AbstractFloatValueController\n    {\n        protected override void OnValueChanged(float value)\n        {\n            RenderSettings.ambientIntensity = value;\n        }\n", "        protected override float currentValueFromIndex0()\n        {\n            return RenderSettings.ambientIntensity;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/LightIntensityController.cs", "chunked_list": ["using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class LightIntensityController : AbstractFloatValueController\n    {\n        [SerializeField] private List<Light> lightList;\n\n        protected override void OnValueChanged(float value)\n        {", "        protected override void OnValueChanged(float value)\n        {\n            foreach (var light in lightList)\n            {\n                light.intensity = value;\n            }\n        }\n\n        protected override float currentValueFromIndex0()\n        {\n            return lightList[0].intensity;\n        }\n    }\n}", "        protected override float currentValueFromIndex0()\n        {\n            return lightList[0].intensity;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/RendererEnabler.cs", "chunked_list": ["using System.Collections;\nusing UnityEngine;\nusing UnityEngine.Events;\n\n#if UNITY_EDITOR\nusing UnityEditor;\n#endif\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class RendererEnabler : AbstractBoolValueController\n    {\n        private Renderer[] renderers;\n", "namespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class RendererEnabler : AbstractBoolValueController\n    {\n        private Renderer[] renderers;\n\n        [SerializeField] private bool initializeValue = false;\n        [SerializeField] private int customDelayMs = 0; //Enable Disable\u3092\u9045\u3089\u305b\u308b\u6642\u9593\n        [SerializeField] public UnityEvent<bool> OnStateChanged; //enable,disable\u304c\u5207\u308a\u66ff\u308f\u3063\u305f\u3068\u304d\u306b\u547c\u3070\u308c\u308b\n\n        private bool isFirst;", "        private bool isFirst;\n        private bool prevState;\n\n        private void Start()\n        {\n            isFirst = true;\n\n            GetRenderers();\n            prevState = initializeValue;\n            SetEnable(initializeValue);\n        }\n", "        protected override void OnValueInput(bool value)\n        {\n#if UNITY_EDITOR\n            if (!EditorApplication.isPlaying && renderers == null)\n            {\n                GetRenderers();\n            }\n#endif\n            if (renderers == null)\n            {\n                GetRenderers();\n            }\n\n            SetEnable(value);\n        }\n", "            if (renderers == null)\n            {\n                GetRenderers();\n            }\n\n            SetEnable(value);\n        }\n\n        public void SetEnable(bool enable)\n        {\n            if (prevState != enable || isFirst)\n            {", "        public void SetEnable(bool enable)\n        {\n            if (prevState != enable || isFirst)\n            {\n                if (!isFirst)\n                {\n                    OnStateChanged?.Invoke(enable);\n                }\n\n                prevState = enable;\n                isFirst = false;\n\n                Debug.Log($\"RendererEnabler: name={gameObject.name} state={enable}\");\n                \n#if UNITY_EDITOR", "                if (!EditorApplication.isPlaying)\n                {\n                    foreach (var renderer in renderers)\n                    {\n                        renderer.enabled = enable;\n                    }\n                }\n                else\n                {\n                    if (customDelayMs <= 0)\n                    {", "                    if (customDelayMs <= 0)\n                    {\n                        foreach (var renderer in renderers)\n                        {\n                            renderer.enabled = enable;\n                        }\n                    }\n                    else\n                    {\n                        StartCoroutine(DelaySetEnable(enable, customDelayMs));\n                    }\n                }\n#else", "            if (customDelayMs <= 0)\n            {\n                foreach (var renderer in renderers)\n                {\n                    renderer.enabled = enable;\n                }\n            }\n            else\n            {\n                StartCoroutine(DelaySetEnable(enable, customDelayMs));\n            }\n#endif\n            }\n        }\n", "        private IEnumerator DelaySetEnable(bool enable, int customDelayMs)\n        {\n            yield return new WaitForSeconds((float)customDelayMs / 1000f);\n\n            foreach (var renderer in renderers)\n            {\n                renderer.enabled = enable;\n            }\n        }\n\n        [ContextMenu(\"EnableRenderers\")]", "        public void EnableRenderers()\n        {\n            SetEnable(true);\n        }\n\n        [ContextMenu(\"DisableRenderers\")]\n        public void DisableRenderers()\n        {\n            SetEnable(false);\n        }\n", "        public void GetRenderers()\n        {\n            Debug.Log($\"GetRenderers : root={gameObject.name}\");\n            renderers = GetComponentsInChildren<Renderer>();\n\n            prevState = renderers[0].enabled;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/LightColorController.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class LightColorController : AbstractColorValueController\n    {\n        [SerializeField] private List<Light> lightList;\n\n        protected override void OnValueChanged(Color value)\n        {", "        protected override void OnValueChanged(Color value)\n        {\n            foreach (var light in lightList)\n            {\n                light.color = value;\n            }\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/RendererMaterialColorValueController.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    [ExecuteAlways]\n    public class RendererMaterialColorValueController : AbstractColorValueController\n    {\n        public List<RendererMaterialData> RendererMaterialDataList;\n\n        private Dictionary<string, MaterialPropertyBlock> _materialPropertyBlockDict = new();\n        ", "        private void Start()\n        {\n            _materialPropertyBlockDict = new Dictionary<string, MaterialPropertyBlock>();\n        }\n        \n        protected override void OnValueChanged(Color value)\n        {\n            for (var i = 0; i < RendererMaterialDataList.Count; i++)\n            {\n                var item = RendererMaterialDataList[i];\n                var renderer = RendererMaterialDataList[i].TargetRenderer;\n                ", "                if (renderer == null)\n                {\n                    continue;\n                }\n\n                MaterialPropertyBlock block;\n                if (!_materialPropertyBlockDict.ContainsKey(item.TargetRenderer.name))\n                {\n                    block = new MaterialPropertyBlock();\n                    _materialPropertyBlockDict.Add(item.TargetRenderer.name, block);\n                }\n                else\n                {\n                    block = _materialPropertyBlockDict[item.TargetRenderer.name];\n                }\n                \n                renderer.GetPropertyBlock(block);\n                block.SetVector(item.PropertyName, value);\n                renderer.SetPropertyBlock(block);\n            }\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/ObjectActivationController.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    /// <summary>\n    /// Bool\u5024\u3067List\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e00\u62ec\u3067Active\u3092\u5207\u308a\u66ff\u3048\u308b\n    /// </summary>\n    public class ObjectActivationController : AbstractBoolValueController\n    {\n        [SerializeField] private List<GameObject> targetObjectList;\n        [SerializeField] private UnityEvent<ObjectActivationEvent> OnObjectActivationEvent;\n", "    /// </summary>\n    public class ObjectActivationController : AbstractBoolValueController\n    {\n        [SerializeField] private List<GameObject> targetObjectList;\n        [SerializeField] private UnityEvent<ObjectActivationEvent> OnObjectActivationEvent;\n\n        private bool isActiveLastFrame;\n        \n        protected override void OnValueInput(bool value)\n        {\n            if (isActiveLastFrame == value)\n            {\n                return;\n            }\n            \n            SetActive(value);\n            \n            isActiveLastFrame = value;\n        }\n        ", "        protected override void OnValueInput(bool value)\n        {\n            if (isActiveLastFrame == value)\n            {\n                return;\n            }\n            \n            SetActive(value);\n            \n            isActiveLastFrame = value;\n        }\n        ", "        private void SetActive(bool isActive)\n        {\n            foreach (var targetObject in targetObjectList)\n            {\n                targetObject.SetActive(isActive);\n                \n                var eventData = new ObjectActivationEvent(isActive, targetObject.transform);\n                OnObjectActivationEvent?.Invoke(eventData);\n            }\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/ObjectListActivationController.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    /// <summary>\n    /// Int\u5024\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eList\u306e\u8981\u7d20\u306eActive\u3092\u5207\u308a\u66ff\u3048\u308b\n    /// </summary>\n    public class ObjectListActivationController : AbstractIntValueController\n    {\n        [SerializeField] private List<GameObject> targetObjectList;\n        [SerializeField] private UnityEvent<ObjectActivationEvent> OnObjectActivationEvent;\n        ", "    /// </summary>\n    public class ObjectListActivationController : AbstractIntValueController\n    {\n        [SerializeField] private List<GameObject> targetObjectList;\n        [SerializeField] private UnityEvent<ObjectActivationEvent> OnObjectActivationEvent;\n        \n        private int lastFrameValue = -1;\n        \n        protected override void OnValueChanged(int value)\n        {\n            if (lastFrameValue == value)\n            {\n                return;\n            }\n            \n            SetActiveObjects(value);\n            \n            lastFrameValue = value;\n        }\n        ", "        protected override void OnValueChanged(int value)\n        {\n            if (lastFrameValue == value)\n            {\n                return;\n            }\n            \n            SetActiveObjects(value);\n            \n            lastFrameValue = value;\n        }\n        ", "        private void SetActiveObjects(int value)\n        {\n            for (var i = 0; i < targetObjectList.Count; i++)\n            {\n                var isActive = i == value;\n                targetObjectList[i].SetActive(isActive);\n                \n                var eventData = new ObjectActivationEvent(isActive, targetObjectList[i].transform);\n                OnObjectActivationEvent?.Invoke(eventData);\n            }\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/RendererMaterialFloatValueController.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class RendererMaterialFloatValueController : AbstractFloatValueController\n    {\n        [SerializeField] private float multiplier = 1f;\n        public List<RendererMaterialData> RendererMaterialDataList;\n\n        private Dictionary<string, MaterialPropertyBlock> _materialPropertyBlockDict = new();\n", "        private void Start()\n        {\n            _materialPropertyBlockDict = new Dictionary<string, MaterialPropertyBlock>();\n        }\n\n        protected override void OnValueChanged(float value)\n        {\n            // Debug.Log($\"{gameObject.name} {value}\");\n            \n            for (var i = 0; i < RendererMaterialDataList.Count; i++)\n            {\n                var item = RendererMaterialDataList[i];\n                var renderer = RendererMaterialDataList[i].TargetRenderer;\n                ", "            for (var i = 0; i < RendererMaterialDataList.Count; i++)\n            {\n                var item = RendererMaterialDataList[i];\n                var renderer = RendererMaterialDataList[i].TargetRenderer;\n                \n                if (renderer == null)\n                {\n                    continue;\n                }\n\n                MaterialPropertyBlock block;", "                if (!_materialPropertyBlockDict.ContainsKey(item.TargetRenderer.name))\n                {\n                    block = new MaterialPropertyBlock();\n                    _materialPropertyBlockDict.Add(item.TargetRenderer.name, block);\n                }\n                else\n                {\n                    block = _materialPropertyBlockDict[item.TargetRenderer.name];\n                }\n                \n                renderer.GetPropertyBlock(block);\n                value *= multiplier;\n                block.SetFloat(item.PropertyName, value);\n                renderer.SetPropertyBlock(block);\n            }\n        }\n", "        protected override float currentValueFromIndex0()\n        {\n            var item = RendererMaterialDataList[0];\n            var renderer = RendererMaterialDataList[0];\n\n            return renderer.TargetRenderer.materials[renderer.MaterialIndex].GetFloat(item.PropertyName);\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/ImageController.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class ImageController : AbstractColorValueController\n    {\n        [SerializeField] private List<Image> imageList;\n\n        protected override void OnValueChanged(Color value)\n        {", "        protected override void OnValueChanged(Color value)\n        {\n            foreach (var image in imageList)\n            {\n                image.color = value;\n            }\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/EnvironmentAmbientColorController.cs", "chunked_list": ["using UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class EnvironmentAmbientColorController : AbstractColorValueController\n    {\n        protected override void OnValueChanged(Color value)\n        {\n            RenderSettings.ambientSkyColor = value;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/ObjectActivationEvent.cs", "chunked_list": ["using UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    /// <summary>\n    /// Object\u306eActive\u304c\u5207\u308a\u66ff\u308f\u3063\u305f\u3068\u304d\u306b\u6e21\u3055\u308c\u308b\u30c7\u30fc\u30bf\n    /// </summary>\n    public class ObjectActivationEvent\n    {\n        public readonly bool IsActive;\n        public readonly Transform ObjectTransform;\n\n        public ObjectActivationEvent(bool isActive, Transform objectTransform)\n        {\n            IsActive = isActive;\n            ObjectTransform = objectTransform;\n        }\n    }\n}", "        public readonly bool IsActive;\n        public readonly Transform ObjectTransform;\n\n        public ObjectActivationEvent(bool isActive, Transform objectTransform)\n        {\n            IsActive = isActive;\n            ObjectTransform = objectTransform;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Scripts/AbstractValueControlTrack/Controller/IntValueControllerSample.cs", "chunked_list": ["using UnityEngine;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Controller\n{\n    public class IntValueControllerSample : AbstractIntValueController\n    {\n        [SerializeField] private int testValue;\n        \n        protected override void OnValueChanged(int value)\n        {\n            this.testValue = value;\n        }\n    }\n}", "        protected override void OnValueChanged(int value)\n        {\n            this.testValue = value;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Editor/AbstractValueControlTrackEditor/AbstractFloatValueControlTrackCustomEditor.cs", "chunked_list": ["using UnityEditor;\nusing UnityEditor.Timeline;\nusing UnityEngine;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Editor\n{\n    internal static class AbstractFloatValueControlTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(1f, 0.5f, 0.5f);\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractFloatValueControlTrack))]", "    public class AbstractFloatValueControlTrackCustomEditor : TrackEditor\n    {\n        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = AbstractFloatValueControlTrackEditorUtility.PrimaryColor;\n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractFloatValueControlClip))]", "    public class AbstractFloatValueControlCustomEditor : ClipEditor\n    {\n        public override ClipDrawOptions GetClipOptions(TimelineClip clip)\n        {\n            var clipOptions = base.GetClipOptions(clip);\n            clipOptions.icons = null;\n            clipOptions.highlightColor = AbstractFloatValueControlTrackEditorUtility.PrimaryColor;\n            return clipOptions;\n        }\n    }\n    \n    [CanEditMultipleObjects]\n    [CustomEditor(typeof(AbstractFloatValueControlClip))]", "    public class AbstractFloatValueControlClipEditor : UnityEditor.Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            DrawDefaultInspector();\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Editor/AbstractValueControlTrackEditor/AbstractBoolValueControlTrackCustomEditor.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEditor;\nusing UnityEditor.Timeline;\nusing UnityEngine;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Editor\n{\n    internal static class AbstractBoolValueControlTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(0.5f, 1f, 0.5f);\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractBoolValueControlTrack))]", "    internal static class AbstractBoolValueControlTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(0.5f, 1f, 0.5f);\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractBoolValueControlTrack))]\n    public class AbstractBoolValueControlTrackCustomEditor : TrackEditor\n    {\n        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = AbstractBoolValueControlTrackEditorUtility.PrimaryColor;\n            \n            // Debug.Log(binding.GetType());\n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractBoolValueControlClip))]", "        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = AbstractBoolValueControlTrackEditorUtility.PrimaryColor;\n            \n            // Debug.Log(binding.GetType());\n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractBoolValueControlClip))]", "    public class AbstractBoolValueControlCustomEditor : ClipEditor\n    {\n        Dictionary<AbstractBoolValueControlClip, Texture2D> textures = new();\n        \n        public override ClipDrawOptions GetClipOptions(TimelineClip clip)\n        {\n            var clipOptions = base.GetClipOptions(clip);\n            clipOptions.icons = null;\n            clipOptions.highlightColor = AbstractBoolValueControlTrackEditorUtility.PrimaryColor;\n            return clipOptions;\n        }\n        ", "        public override void DrawBackground(TimelineClip clip, ClipBackgroundRegion region)\n        {\n            var tex = GetSolidColorTexture(clip);\n            if (tex) GUI.DrawTexture(region.position, tex);\n        }\n        \n        public override void OnClipChanged(TimelineClip clip)\n        {\n            GetSolidColorTexture(clip, true);\n        }\n        \n        Texture2D GetSolidColorTexture(TimelineClip clip, bool update = false)\n        {\n            var tex = Texture2D.blackTexture;\n        \n            var customClip = clip.asset as AbstractBoolValueControlClip;\n        ", "            if (update) \n            {\n                textures.Remove(customClip);\n            }\n            else\n            {\n                textures.TryGetValue(customClip, out tex);\n                if (tex) return tex;\n            }\n        \n            var c = customClip.Value ? new Color(0.8f, 0.8f, 0.8f) : new Color(0.2f, 0.2f, 0.2f);\n            tex = new Texture2D(1, 1);\n            tex.SetPixel(0, 0, c);\n            tex.Apply();\n            ", "            if (textures.ContainsKey(customClip))\n            {\n                textures[customClip] = tex;\n            }\n            else\n            {\n                textures.Add(customClip, tex);   \n            }\n        \n            return tex;\n        }\n    }\n    \n    [CanEditMultipleObjects]\n    [CustomEditor(typeof(AbstractBoolValueControlClip))]", "    public class AbstractBoolValueControlClipEditor : UnityEditor.Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            DrawDefaultInspector();\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Editor/AbstractValueControlTrackEditor/AbstractColorValueControlTrackCustomEditor.cs", "chunked_list": ["using System.Collections.Generic;\nusing UnityEditor;\nusing UnityEditor.Timeline;\nusing UnityEngine;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Editor\n{\n    internal static class AbstractColorValueControlTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(0.5f, 0.5f, 1f);\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractColorValueControlTrack))]", "    internal static class AbstractColorValueControlTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(0.5f, 0.5f, 1f);\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractColorValueControlTrack))]\n    public class AbstractColorValueControlTrackCustomEditor : TrackEditor\n    {\n        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = AbstractColorValueControlTrackEditorUtility.PrimaryColor;\n            \n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractColorValueControlClip))]", "        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = AbstractColorValueControlTrackEditorUtility.PrimaryColor;\n            \n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractColorValueControlClip))]", "    public class AbstractColorValueControlCustomEditor : ClipEditor\n    {\n        Dictionary<AbstractColorValueControlClip, Texture2D> textures = new();\n        \n        public override ClipDrawOptions GetClipOptions(TimelineClip clip)\n        {\n            var clipOptions = base.GetClipOptions(clip);\n            clipOptions.icons = null;\n            clipOptions.highlightColor = AbstractColorValueControlTrackEditorUtility.PrimaryColor;\n            return clipOptions;\n        }\n        ", "        public override void DrawBackground(TimelineClip clip, ClipBackgroundRegion region)\n        {\n            var tex = GetGradientTexture(clip);\n            if (tex) GUI.DrawTexture(region.position, tex);\n        }\n        \n        public override void OnClipChanged(TimelineClip clip)\n        {\n            GetGradientTexture(clip, true);\n        }\n\n        Texture2D GetGradientTexture(TimelineClip clip, bool update = false)\n        {\n            var tex = Texture2D.whiteTexture;\n\n            var customClip = clip.asset as AbstractColorValueControlClip;", "            if (!customClip) return tex;\n\n            var gradient = customClip.Value;\n            if (gradient == null) return tex;\n\n            if (update) \n            {\n                textures.Remove(customClip);\n            }\n            else\n            {\n                textures.TryGetValue(customClip, out tex);", "                if (tex) return tex;\n            }\n\n            var b = (float)(clip.blendInDuration / clip.duration);\n            tex = new Texture2D(128, 1);\n            for (int i = 0; i < tex.width; ++i)\n            {\n                var t = (float)i / tex.width;\n                var color = customClip.Value;\n                \n                //get max color element\n                var max = Mathf.Max(color.r, color.g, color.b);", "                if (max > 1f)\n                {\n                    color.r /= max;\n                    color.g /= max;\n                    color.b /= max;\n                }\n\n                color.a = 1f;\n                if (b > 0f) color.a = Mathf.Min(t / b, 1f);\n                tex.SetPixel(i, 0, color);\n            }\n            tex.Apply();\n", "                if (b > 0f) color.a = Mathf.Min(t / b, 1f);\n                tex.SetPixel(i, 0, color);\n            }\n            tex.Apply();\n\n            if (textures.ContainsKey(customClip))\n            {\n                textures[customClip] = tex;\n            }\n            else\n            {\n                textures.Add(customClip, tex);   \n            }\n\n            return tex;\n        }\n    }\n    \n    [CanEditMultipleObjects]\n    [CustomEditor(typeof(AbstractColorValueControlClip))]", "    public class AbstractColorValueControlClipEditor : UnityEditor.Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            DrawDefaultInspector();\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Editor/AbstractValueControlTrackEditor/AbstractIntValueControlTrackCustomEditor.cs", "chunked_list": ["using UnityEditor;\nusing UnityEditor.Timeline;\nusing UnityEngine;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.AbstractValueControlTrack.Editor\n{\n    internal static class AbstractIntValueControlTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(1f, 1f, 0.5f);\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractIntValueControlTrack))]", "    public class AbstractIntValueControlTrackCustomEditor : TrackEditor\n    {\n        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = AbstractIntValueControlTrackEditorUtility.PrimaryColor;\n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(AbstractIntValueControlClip))]", "    public class AbstractIntValueControlCustomEditor : ClipEditor\n    {\n        public override ClipDrawOptions GetClipOptions(TimelineClip clip)\n        {\n            var clipOptions = base.GetClipOptions(clip);\n            clipOptions.icons = null;\n            clipOptions.highlightColor = AbstractIntValueControlTrackEditorUtility.PrimaryColor;\n            return clipOptions;\n        }\n    }\n    \n    [CanEditMultipleObjects]\n    [CustomEditor(typeof(AbstractIntValueControlClip))]", "    public class AbstractIntValueControlClipEditor : UnityEditor.Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            DrawDefaultInspector();\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Editor/CustomActivationTrackEditor/CustomActivationTrackCustomEditor.cs", "chunked_list": ["using UnityEditor.Timeline;\nusing UnityEngine;\nusing UnityEngine.Timeline;\n\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack.Editor\n{\n    internal static class CustomActivationTrackEditorUtility\n    {\n        internal static Color PrimaryColor = new(0.5f, 1f, 0.5f);\n    }\n    \n    [CustomTimelineEditor(typeof(CustomActivationTrack))]", "    public class CustomActivationTrackCustomEditor : TrackEditor\n    {\n        public override TrackDrawOptions GetTrackOptions(TrackAsset track, Object binding)\n        {\n            track.name = \"CustomTrack\";\n\n            var options = base.GetTrackOptions(track, binding);\n            options.trackColor = CustomActivationTrackEditorUtility.PrimaryColor;\n            return options;\n        }\n    }\n    \n    [CustomTimelineEditor(typeof(CustomActivationClip))]", "    public class CustomActivationClipCustomEditor : ClipEditor\n    {\n        public override ClipDrawOptions GetClipOptions(TimelineClip clip)\n        {\n            var clipOptions = base.GetClipOptions(clip);\n            clipOptions.icons = null;\n            clipOptions.highlightColor = CustomActivationTrackEditorUtility.PrimaryColor;\n            return clipOptions;\n        }\n    }\n}"]}
{"filename": "Assets/TimelineExtension/Editor/CustomActivationTrackEditor/ActivationTrackConverter.cs", "chunked_list": ["using System.ComponentModel;\nusing System.Linq;\nusing UnityEditor;\nusing UnityEditor.Timeline;\nusing UnityEngine.Timeline;\nusing UnityEngine;\nusing UnityEngine.Playables;\n\nnamespace dev.kemomimi.TimelineExtension.CustomActivationTrack.Editor\n{", "namespace dev.kemomimi.TimelineExtension.CustomActivationTrack.Editor\n{\n    [DisplayName(\"ActivationTrackConverter\")]\n    public class ActivationTrackConverter : EditorWindow\n    {\n        private const string DEBUGLOG_PREFIX = \"[<color=#FF9654>Converter</color>]\";\n        \n        [MenuItem(\"Tools/ActivationTrackConverter\")]\n        public static void ConvertActivationTrackToCustomActivationTrack()\n        {\n            var directors = FindObjectsOfType<PlayableDirector>();\n            Debug.Log($\"{DEBUGLOG_PREFIX} Found playable directors : {directors.Length}\");\n            ", "        public static void ConvertActivationTrackToCustomActivationTrack()\n        {\n            var directors = FindObjectsOfType<PlayableDirector>();\n            Debug.Log($\"{DEBUGLOG_PREFIX} Found playable directors : {directors.Length}\");\n            \n            foreach (var director in directors)\n            {\n                var timelineAsset = director.playableAsset as TimelineAsset;\n                Debug.Log($\"{DEBUGLOG_PREFIX} Target Timeline Asset : {timelineAsset.name}\");\n                var tracks = timelineAsset.GetOutputTracks().ToList();\n\n                var activationTrackCount = 0;\n                //Activation Track convert to custom activation track", "                for (var index = 0; index < tracks.Count; index++)\n                {\n                    var track = tracks[index];\n                    if (track.GetType() == typeof(ActivationTrack))\n                    {\n                        if (track.muted)\n                        {\n                            Debug.Log($\"{DEBUGLOG_PREFIX} track muted, skip : {track.name}\");\n                            continue;\n                        }\n\n                        //create custom activation track\n                        var newCustomActivationTrack = timelineAsset.CreateTrack<CustomActivationTrack>(null, track.name);\n                        TimelineEditor.Refresh(RefreshReason.ContentsAddedOrRemoved);\n                        newCustomActivationTrack.name = track.name;\n\n                        //copy clip\n                        var activationClips = track.GetClips().ToList();", "                        foreach (var activationClip in activationClips)\n                        {\n                            var customActivationClip = newCustomActivationTrack.CreateDefaultClip();\n                            customActivationClip.displayName = activationClip.displayName;\n                            customActivationClip.start = activationClip.start;\n                            customActivationClip.duration = activationClip.duration;\n                        }\n                        \n                        //get binding\n                        var binding = director.playableAsset.outputs.ToArray()[index].sourceObject;\n                        var bindingObject = director.GetGenericBinding(binding);\n                        \n                        //set binding\n                        director.SetGenericBinding(newCustomActivationTrack, bindingObject);\n\n                        activationTrackCount++;\n                        track.muted = true;\n                    }\n                }\n                \n                Debug.Log($\"{DEBUGLOG_PREFIX} Convert Activation Track Count : {activationTrackCount}\");\n                \n                //save asset\n                AssetDatabase.SaveAssets();\n            }\n        }\n    }\n}"]}
