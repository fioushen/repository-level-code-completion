{"filename": "PFlender/Objects/Actors.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Numerics;\nusing System.Drawing;\nusing Keyframes;\nusing System.Diagnostics.Eventing.Reader;\nusing System.CodeDom;", "using System.Diagnostics.Eventing.Reader;\nusing System.CodeDom;\n\nnamespace Actors\n{\n\n\t#region Actor\n\tpublic class Actor\n    {\n\t\tpublic Keyframes_Manager keyframes_manager = new Keyframes_Manager();\n\n\n\t\t\n\t\t//Actor information:", "\t\tpublic Keyframes_Manager keyframes_manager = new Keyframes_Manager();\n\n\n\t\t\n\t\t//Actor information:\n\t\tpublic string name = null;\n\t\tpublic string type = \"Cube\";\n\t\tpublic List<string> childs = new List<string>();\n\t\t//Actor values:\n\t\tpublic Vector2 position = new Vector2(0,0);\n\t\tpublic float rotation = 0f;", "\t\tpublic Vector2 position = new Vector2(0,0);\n\t\tpublic float rotation = 0f;\n\t\tpublic Vector2 scale = new Vector2(1,1);\n\t\tpublic Color color = Color.FromArgb(255,255,255,255);\n\t\tpublic bool visibility = true;\n\n\t}\n\t#endregion\n\n\tpublic class Actor_Manager\n\t{\n\t\tList<Actor> actors = new List<Actor>();\n\t\t\n\n\t\t//Remove an Actor from the current scene", "\tpublic class Actor_Manager\n\t{\n\t\tList<Actor> actors = new List<Actor>();\n\t\t\n\n\t\t//Remove an Actor from the current scene\n\t\tpublic void Remove(Actor actor)\n\t\t{\n\t\t\tactors.Remove(actor);\n\t\t}\n\n\n\t\t//Add a new Actor to the current scene", "\t\tpublic void Add(Actor actor,string name = null, string type = \"Cube\")\n\t\t{\n\t\t\tactor.keyframes_manager.Init(240);\n\t\t\tactor.type = type;\n\t\t\tactor.name = name;\n\t\t\tactors.Add(actor);\n\t\t\t\n\t\t}\n\n\n\t\t//Get an Actor object by calling it's name.", "\t\tpublic Actor Get(string actor_name)\n\t\t{\n\t\t\tforeach (Actor actor in actors)\n\t\t\t{\n\t\t\t\tif (actor.name == actor_name) return actor; \n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\n\t\t//This will be implemented later.", "\t\tpublic void Set_Parent(Actor Parent, Actor Child)\n\t\t{\n\n\t\t}\n\n\n\t\t//Refresh the current values of an Actor( position, scale, rotation ) at an certain frame of the animation.\n\t\t//This will apply any changes made by keyframes.\n\t\tpublic void Refresh_Values(Actor actor, int frame)\n\t\t{\n\t\t\tvar keyframes_list = actor.keyframes_manager.keyframes;\n\t\t\t", "\t\tpublic void Refresh_Values(Actor actor, int frame)\n\t\t{\n\t\t\tvar keyframes_list = actor.keyframes_manager.keyframes;\n\t\t\t\n\t\t\tif (keyframes_list[frame] != null )\n\t\t\t{\n\t\t\t\t\n\t\t\t\tactor.position = keyframes_list[frame].position;\n\t\t\t\tactor.scale = keyframes_list[frame].scale;\n\t\t\t\tactor.rotation = keyframes_list[frame].rotation;\n\t\t\t\tactor.color = keyframes_list[frame].color;\n\t\t\t\tactor.visibility = keyframes_list[frame].visibility;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\n\n\t}\n}\n"]}
{"filename": "PFlender/Objects/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"Objects\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"Objects\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from", "// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"3c9985b1-bb70-48e7-9871-04c471eb76d4\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "PFlender/Objects/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs", "chunked_list": ["// <autogenerated />\nusing System;\nusing System.Reflection;\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETFramework,Version=v4.8\", FrameworkDisplayName = \".NET Framework 4.8\")]\n"]}
{"filename": "PFlender/Keyframes/Keyframe.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Numerics;\nusing System.Drawing;\nusing System.Diagnostics;\n\nnamespace Keyframes", "\nnamespace Keyframes\n{\n\n\t#region Keyframe\n\tpublic class Keyframe\n    {\n        //Key information.\n        //If a key type is not set, it's default type will be bridge.\n        //Bridges are auto generated frames which set the current information in between two real realkeyframes.\n        //Therefore not seeable or changeable by hand.", "        public int current_frame;\n        public string type = \"bridge\";\n        public string name = null;\n        \n\n        //Actor values or changes:\n        public Vector2 position;\n        public float rotation;\n        public Vector2 scale;\n        public Color color;\n        public bool visibility = true;\n    }\n\t#endregion\n", "        public Vector2 scale;\n        public Color color;\n        public bool visibility = true;\n    }\n\t#endregion\n\n\tpublic class Keyframes_Manager\n    {\n        public List<Keyframe> keyframes = new List<Keyframe>();\n        public List<Keyframe> bridge_keyframes = new List<Keyframe>();\n\n\n        //initializes ", "        public void Init(int animation_numOfFrames)\n        {\n            for (int frame = 0; frame <= animation_numOfFrames; frame++)\n            {\n                keyframes.Add(null); \n                bridge_keyframes.Add(null);\n            }\n        }\n\n        // Refresh has currently a bug.\n        public void Refresh()\n        {\n            //Removes unused place in keyframes.\n            int last_real_key = 0;\n\n\n            //Finds last mention of a keyframe in the list.", "        public void Refresh()\n        {\n            //Removes unused place in keyframes.\n            int last_real_key = 0;\n\n\n            //Finds last mention of a keyframe in the list.\n            for (int frame = 0; frame < keyframes.Count; frame++)\n            {\n                if (keyframes[frame] != null)\n                {\n                    last_real_key = frame++;\n                }\n            }\n\n\n            //Deletes all unnecessary null states.", "                if (keyframes[frame] != null)\n                {\n                    last_real_key = frame++;\n                }\n            }\n\n\n            //Deletes all unnecessary null states.\n            while (keyframes.Count > last_real_key)\n            {\n                keyframes.RemoveAt(last_real_key);\n            }\n\n        }\n\n        //set the length of the keyframes list, wheter it will be filled with nulls or keys.", "            while (keyframes.Count > last_real_key)\n            {\n                keyframes.RemoveAt(last_real_key);\n            }\n\n        }\n\n        //set the length of the keyframes list, wheter it will be filled with nulls or keys.\n        public void Set_Length(int length)\n        {\n            while (keyframes.Count < length) \n            {\n                keyframes.Add(null);\n            }\n        }\n\n        //Add a new Keyframe to an Actor at an specific frame.", "        public void Set_Length(int length)\n        {\n            while (keyframes.Count < length) \n            {\n                keyframes.Add(null);\n            }\n        }\n\n        //Add a new Keyframe to an Actor at an specific frame.\n\t\tpublic void Add_Keyframe(int frame, string type, Vector2 position, float rotation, Vector2 scale, Color color, bool visibility = true, string name = null)\n\t\t{\n            keyframes.RemoveAt(frame);\n\n\n            Keyframe new_keyframe = new Keyframe();\n\n            new_keyframe.current_frame = frame;\n            new_keyframe.type = type;\n            new_keyframe.name = name;\n            new_keyframe.position = position;\n            new_keyframe.rotation = rotation;\n            new_keyframe.scale = scale;\n            new_keyframe.color = color;\n            new_keyframe.visibility = visibility;\n\n            keyframes.Insert(frame, new_keyframe);\n        }\n\n        //Debug the current keys of an Actor.", "\t\tpublic void Add_Keyframe(int frame, string type, Vector2 position, float rotation, Vector2 scale, Color color, bool visibility = true, string name = null)\n\t\t{\n            keyframes.RemoveAt(frame);\n\n\n            Keyframe new_keyframe = new Keyframe();\n\n            new_keyframe.current_frame = frame;\n            new_keyframe.type = type;\n            new_keyframe.name = name;\n            new_keyframe.position = position;\n            new_keyframe.rotation = rotation;\n            new_keyframe.scale = scale;\n            new_keyframe.color = color;\n            new_keyframe.visibility = visibility;\n\n            keyframes.Insert(frame, new_keyframe);\n        }\n\n        //Debug the current keys of an Actor.", "        public void Debug_Keyframes()\n        {\n            foreach (var keyframe in keyframes)\n            {\n                if (keyframe != null)\n                {\n                    Debug.WriteLine($\"{keyframe.current_frame} | {keyframe.name}  {keyframe.type}  {keyframe.position}  {keyframe.rotation}  {keyframe.scale}  {keyframe.color}  {keyframe.visibility}\");\n                }\n            }\n        }\n\n\n\n\n", "\t\t//public void Change_Keyframe(int frame = -1, string type, string name = null, Vector2 position = , float rotation =, Vector2 scale, Color color, bool visibility = true)\n\t\t//{\n\n  //          //DEBUGGING\n  //          try \n  //          {\n  //              if (frame <= keyframes.Count)\n  //              {\n  //                  if (keyframes[frame] == null) \n  //                  {Debug.WriteLine($\"Missing object | keyframe to change at frame {frame} could not be found. There might be a need to add one there.\");     return; }\n  //              }\n  //              else\n  //              {\n\t\t//\t\t\t{Debug.WriteLine($\"Out of Index | keyframe to change at frame {frame} could not be found. The wished frame is currently out of keyframes index.\"); return; }\n\t\t//\t\t}", "  //                  if (keyframes[frame] == null) \n  //                  {Debug.WriteLine($\"Missing object | keyframe to change at frame {frame} could not be found. There might be a need to add one there.\");     return; }\n  //              }\n  //              else\n  //              {\n\t\t//\t\t\t{Debug.WriteLine($\"Out of Index | keyframe to change at frame {frame} could not be found. The wished frame is currently out of keyframes index.\"); return; }\n\t\t//\t\t}\n\t\t//\t\tif (frame == -1)\n\t\t//\t\t{ Debug.WriteLine($\"Missing Information | keyframe couldn't be changed because of the missing value frame.\"); return; }\n\t\t//\t}\n  //          finally { }\n            \n            \n\n\n\n\n  //          Keyframe changed_keyframe;", "  //          finally { }\n            \n            \n\n\n\n\n  //          Keyframe changed_keyframe;\n  //          if (type != null) { }\n  //          changed_keyframe.type = type;\n\n\n\n            \n\t\t\t\n\n\t\t//}\n\t}\n}\n", "  //          if (type != null) { }\n  //          changed_keyframe.type = type;\n\n\n\n            \n\t\t\t\n\n\t\t//}\n\t}\n}\n"]}
{"filename": "PFlender/Keyframes/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"Keyframes\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"Keyframes\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from", "// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"03b6cfd6-32ff-4f64-8151-fa5ada813544\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "PFlender/Keyframes/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs", "chunked_list": ["// <autogenerated />\nusing System;\nusing System.Reflection;\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETFramework,Version=v4.8\", FrameworkDisplayName = \".NET Framework 4.8\")]\n"]}
{"filename": "PFlender/File_Writer/File_Writer.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO;\nusing System.Numerics;\nusing System.Drawing;\nusing Keyframes;\nusing Actors;", "using Keyframes;\nusing Actors;\n\n\nnamespace file_writer\n{\n    public class File_Writer\n    {\n\n        public void Write_File(string filename) {\n                string path = $@\"C:\\Users\\Pascal\\Desktop\\...PFlender data\\file testing\\{filename}.PFlend\"; // Replace with your desired file path\n\n                // Create a new file or overwrite an existing file", "        public void Write_File(string filename) {\n                string path = $@\"C:\\Users\\Pascal\\Desktop\\...PFlender data\\file testing\\{filename}.PFlend\"; // Replace with your desired file path\n\n                // Create a new file or overwrite an existing file\n                using (StreamWriter writer = new StreamWriter(path))\n            {\n                // Write some text to the file\n                writer.WriteLine(\"Hello, world!\");\n                writer.WriteLine(\"This is a new line.\");\n            }\n\n        }\n\n    }\n}\n"]}
{"filename": "PFlender/File_Writer/path.cs", "chunked_list": ["\ufeffnamespace File_Writer\n{\n\tinternal class path\n\t{\n\t}\n}"]}
{"filename": "PFlender/File_Writer/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"File_Writer\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"File_Writer\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from", "// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"5f3b0a6c-64ec-4069-a9d8-c4f5117fba28\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "PFlender/File_Writer/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs", "chunked_list": ["// <autogenerated />\nusing System;\nusing System.Reflection;\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETFramework,Version=v4.8\", FrameworkDisplayName = \".NET Framework 4.8\")]\n"]}
{"filename": "PFlender/PFlender/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace PFlender\n{\n\tinternal static class Program\n\t{\n\t\t/// <summary>\n\t\t/// The main entry point for the application.\n\t\t/// </summary>\n\t\t[STAThread]\n\t\tstatic void Main()\n\t\t{\n\t\t\tApplication.EnableVisualStyles();\n\t\t\tApplication.SetCompatibleTextRenderingDefault(false);\n\t\t\tApplication.Run(new Main_Application_Form());\n\t\t}\n\t}\n}\n", "\tinternal static class Program\n\t{\n\t\t/// <summary>\n\t\t/// The main entry point for the application.\n\t\t/// </summary>\n\t\t[STAThread]\n\t\tstatic void Main()\n\t\t{\n\t\t\tApplication.EnableVisualStyles();\n\t\t\tApplication.SetCompatibleTextRenderingDefault(false);\n\t\t\tApplication.Run(new Main_Application_Form());\n\t\t}\n\t}\n}\n"]}
{"filename": "PFlender/PFlender/Main.Designer.cs", "chunked_list": ["\ufeffnamespace PFlender\n{\n\tpartial class Main_Application_Form\n\t{\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\n\t\t/// <summary>\n\t\t/// Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>", "\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing && (components != null))\n\t\t\t{\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\n\t\t#region Windows Form Designer generated code\n\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>", "\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tthis.SuspendLayout();\n\t\t\t// \n\t\t\t// Main_Application_Form\n\t\t\t// \n\t\t\tthis.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n\t\t\tthis.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n\t\t\tthis.ClientSize = new System.Drawing.Size(800, 450);\n\t\t\tthis.Name = \"Main_Application_Form\";\n\t\t\tthis.Text = \"PFlender\";\n\t\t\tthis.ResumeLayout(false);\n\n\t\t}\n\n\t\t#endregion\n\t}\n}\n\n"]}
{"filename": "PFlender/PFlender/Main.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing System.Numerics;", "using System.Windows.Forms;\nusing System.Numerics;\nusing Keyframes;\nusing Actors;\nusing System.Diagnostics;\nusing file_reader;\nusing file_editor;\nusing System.IO;\n\nnamespace PFlender", "\nnamespace PFlender\n{\n\tpublic partial class Main_Application_Form : Form \n\t{\n\t\n\t\tTimer timer = new Timer();\n\n\t\tFile_Reader file_reader = new File_Reader();\n\t\tFile_Writer file_writer = new File_Writer();\n\n\t\tint frame = 0;", "\t\tprivate DateTime lastTime = DateTime.MinValue;\n\t\tActor_Manager actor_manager = new Actor_Manager();\n\t\n\t\tpublic Main_Application_Form()\n\t\t{\n\t\t\tInitializeComponent();\n\n\t\t\t//TEST\n\t\t\t//actor_manager.Add(new Actor(), \"Birne\");\n\t\t\t//actor_manager.Add(new Actor(), \"Apfel\");\n\t\t\t//actor_manager.Get(\"Birne\").keyframes_manager.Add_Keyframe(10, \"bezier\", new Vector2(2, 1), 45, new Vector2(2, 1), Color.FromArgb(1, 1, 1, 1), true, \"Birnenkey\");\n\t\t\t//actor_manager.Get(\"Apfel\").keyframes_manager.Add_Keyframe(23, \"bezier\", new Vector2(2, 111), 3, new Vector2(1, 1), Color.FromArgb(1, 1, 1, 1), true, \"Apfelkey\");\n\t\t\t//actor_manager.Get(\"Birne\").keyframes_manager.Debug_Keyframes();\n\t\t\t//actor_manager.Get(\"Apfel\").keyframes_manager.Debug_Keyframes();\n\t\t\ttimer.Start();\n\t\t\ttimer.Tick += new EventHandler(timer1_Tick);\n\t\t\ttimer.Interval = 1;\n\t\t\tfile_reader.Read_File(actor_manager);\n\t\t\tactor_manager.Get(\"actor1\").keyframes_manager.Debug_Keyframes();\n\t\t\tactor_manager.Get(\"act2\").keyframes_manager.Debug_Keyframes();\n\t\t\tfile_writer.Write_File(\"createtest\");\n\t\t\t\n\n\t\t}\n", "\t\tprivate void timer1_Tick(object sender, EventArgs e)\n\t\t{\n\t\t\tframe++;\n\n\t\t\tif (DateTime.Now - lastTime >= TimeSpan.FromSeconds(1))\n\t\t\t{\n\t\t\t\t//Debug.WriteLine(frame);\n\t\t\t\tframe = 0;\n\t\t\t\t\n\t\t\t\tlastTime = DateTime.Now;\n\t\t\t}\n\n\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t}\n\n\t}\n}\n"]}
{"filename": "PFlender/PFlender/Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace PFlender.Properties\n{\n\n\n\t[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n\t[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"11.0.0.0\")]\n\tinternal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase\n\t{\n", "\tinternal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase\n\t{\n\n\t\tprivate static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n\n\t\tpublic static Settings Default\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn defaultInstance;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "PFlender/PFlender/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace PFlender.Properties\n{\n\n\n\t/// <summary>\n\t///   A strongly-typed resource class, for looking up localized strings, etc.\n\t/// </summary>\n\t// This class was auto-generated by the StronglyTypedResourceBuilder\n\t// class via a tool like ResGen or Visual Studio.\n\t// To add or remove a member, edit your .ResX file then rerun ResGen\n\t// with the /str option, or rebuild your VS project.\n\t[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"4.0.0.0\")]\n\t[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n\t[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]", "\t/// </summary>\n\t// This class was auto-generated by the StronglyTypedResourceBuilder\n\t// class via a tool like ResGen or Visual Studio.\n\t// To add or remove a member, edit your .ResX file then rerun ResGen\n\t// with the /str option, or rebuild your VS project.\n\t[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"4.0.0.0\")]\n\t[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n\t[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n\tinternal class Resources\n\t{\n", "\tinternal class Resources\n\t{\n\n\t\tprivate static global::System.Resources.ResourceManager resourceMan;\n\n\t\tprivate static global::System.Globalization.CultureInfo resourceCulture;\n\n\t\t[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n\t\tinternal Resources()\n\t\t{\n\t\t}\n\n\t\t/// <summary>\n\t\t///   Returns the cached ResourceManager instance used by this class.\n\t\t/// </summary>\n\t\t[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tinternal static global::System.Resources.ResourceManager ResourceManager\n\t\t{\n\t\t\tget\n\t\t\t{", "\t\t\t\tif ((resourceMan == null))\n\t\t\t\t{\n\t\t\t\t\tglobal::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"PFlender.Properties.Resources\", typeof(Resources).Assembly);\n\t\t\t\t\tresourceMan = temp;\n\t\t\t\t}\n\t\t\t\treturn resourceMan;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t///   Overrides the current thread's CurrentUICulture property for all\n\t\t///   resource lookups using this strongly typed resource class.\n\t\t/// </summary>\n\t\t[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tinternal static global::System.Globalization.CultureInfo Culture\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn resourceCulture;\n\t\t\t}\n\t\t\tset\n\t\t\t{\n\t\t\t\tresourceCulture = value;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "PFlender/PFlender/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"PFlender\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"PFlender\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from", "// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"e25a4171-8ad3-4abc-87cb-24e209141bb7\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "PFlender/PFlender/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs", "chunked_list": ["// <autogenerated />\nusing System;\nusing System.Reflection;\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETFramework,Version=v4.8\", FrameworkDisplayName = \".NET Framework 4.8\")]\n"]}
{"filename": "PFlender/file_editor/File_Writer.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Drawing;\nusing Keyframes;\nusing Actors;\n", "using Actors;\n\nnamespace file_editor\n{\n\tpublic class File_Writer\n\t{\n\n\t\tpublic void Write_File(string filename)\n\t\t{\n\t\t\tstring path = $@\"C:\\Users\\Pascal\\Desktop\\...PFlender data\\file testing\\{filename}.PFlend\"; // Replace with your desired file path\n\t\t\tstring app_version = \"a20230426\";\n\n\t\t\t// Create a new file or overwrite an existing file", "\t\t\tusing (StreamWriter writer = new StreamWriter(path))\n\t\t\t{\n\t\t\t\t// Write some text to the file\n\t\t\t\twriter.WriteLine(\"# pflender \" + app_version);\n\t\t\t\twriter.WriteLine(\"\\n// This is an .PFlend file, made for PFlender\\n\\n#-\");\n\n\t\t\t}\n\n\t\t}\n\n\t}\n}\n"]}
{"filename": "PFlender/file_editor/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"file_editor\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"file_editor\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from", "// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"bdf7e67e-a0d1-41b1-bcf5-8e8f1f76c74e\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "PFlender/file_editor/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs", "chunked_list": ["// <autogenerated />\nusing System;\nusing System.Reflection;\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETFramework,Version=v4.8\", FrameworkDisplayName = \".NET Framework 4.8\")]\n"]}
{"filename": "PFlender/file_reader/File_Reader.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO;\nusing System.Diagnostics;\nusing Keyframes;\nusing Actors;\nusing System.Numerics;", "using Actors;\nusing System.Numerics;\nusing System.Drawing;\n\nnamespace file_reader\n{\n    public class File_Reader\n    {\n\t\t//path the PFlend file is saved in.\n        string path = @\"C:\\Users\\Pascal\\Desktop\\...PFlender data\\file testing\\test1.PFlend\";\n\n       \n", "        public void Read_File(Actor_Manager actor_manager)\n        {\n\t\t\tTextReader reader = new StreamReader(path);\n            //Debug.WriteLine(reader.ReadToEnd());\n\t\t\tstring current_folder = \"none\";\n            string current_actor = \"none\";\n\n\n\t\t\tstring name = null;\n\t\t    string type = \"Cube\";\n\t\t    List<string> childs = new List<string>();\n\t\t    //Actor values:\n\t\t    float positionX = 0f;\n\t\t\tfloat positionY = 0f;\n\t\t\tfloat rotation = 0f;\n\t\t    float scaleX = 1f;\n            float scaleY = 1f;\n\t\t    int colorA = 0;\n\t\t\tint colorR = 0;\n            int colorG = 0;\n            int colorB = 0;\n\t\t\tbool visibility = true;\n\n", "\t\t\tif (!File.Exists(path)) \n            {\n                Debug.WriteLine(\"Not found | File could not be found in the given dictionary.\");\n                return;\n            }\n\n            while (current_folder != \"end\")\n            {\n                string current_line = reader.ReadLine();\n\n\n\t\t\t\t//only read process the current line if it's not empty.", "\t\t\t\tif (current_line != null)\n\t\t\t\t{\n\n\n\t\t\t\t\t\n\t\t\t\t\tstring[] current_line_split = current_line.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n\t\t\t\t\t\n\n\t\t\t\t\t\n\t\t\t\t\t//a new file folder will be opened:\n\t\t\t\t\tif (current_line_split.Length != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Change the current \"folder\" in the file. \n\t\t\t\t\t\t/// A folder describes which current PFlender property is saved as text.\n\t\t\t\t\t\t/// It is always labeled with a # + folder name.\n\t\t\t\t\t\t/// The folder \"end\" tells the reader that it's the end of the file.\n", "\t\t\t\t\tif (current_line_split.Length != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Change the current \"folder\" in the file. \n\t\t\t\t\t\t/// A folder describes which current PFlender property is saved as text.\n\t\t\t\t\t\t/// It is always labeled with a # + folder name.\n\t\t\t\t\t\t/// The folder \"end\" tells the reader that it's the end of the file.\n\n\t\t\t\t\t\tif (current_line_split[0] == \"#\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (current_line_split[1] == \"actors\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_folder = \"actors\";\n\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\tif (current_line_split[1] == \"actors\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_folder = \"actors\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[1] == \"keyframes\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_folder = \"keyframes\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[1] == \"end\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_folder = \"end\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//The following actions will the reader do if the current folder is \"actors\".", "\t\t\t\t\t\t\tif (current_line_split[1] == \"end\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_folder = \"end\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//The following actions will the reader do if the current folder is \"actors\".\n\t\t\t\t\t\tif (current_folder == \"actors\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (current_line_split[0] == \"+\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_actor = current_line_split[1];\n\t\t\t\t\t\t\t\tname = current_actor;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//create actor on end of file actorinfo", "\t\t\t\t\t\t\tif (current_line_split[0] == \"+\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrent_actor = current_line_split[1];\n\t\t\t\t\t\t\t\tname = current_actor;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//create actor on end of file actorinfo\n\t\t\t\t\t\t\tif (current_line_split[0] == \"-\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tDebug.WriteLine(\"- noticed\");\n\t\t\t\t\t\t\t\tactor_manager.Add(new Actor(), current_actor);\n\t\t\t\t\t\t\t\tactor_manager.Get(current_actor).keyframes_manager.Add_Keyframe(0, \"bridge\", new Vector2(positionX, positionY), rotation, new Vector2(scaleX, scaleY), Color.FromArgb(colorA, colorR, colorG, colorB), visibility, name + \"_StartProperty\");\n\t\t\t\t\t\t\t}\n", "\t\t\t\t\t\t\tif (current_line_split[0] == \"type\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype = current_line_split[2];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"posX\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpositionX = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"posY\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpositionX = float.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\tif (current_line_split[0] == \"posY\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpositionX = float.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"rot\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tpositionX = float.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"scaleX\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tscaleX = float.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\tif (current_line_split[0] == \"scaleX\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tscaleX = float.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"scaleY\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tscaleY = float.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"colA\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorA = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\tif (current_line_split[0] == \"colA\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorA = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"colR\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorR = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"colG\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorG = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\tif (current_line_split[0] == \"colG\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorG = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"colB\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolorB = int.Parse(current_line_split[2]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (current_line_split[0] == \"vis\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (current_line_split[2] == \"t\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvisibility = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse { visibility = false; }\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n            \n\t\t}\n\n\t}\n}\n", "\t\t\t\t\t\t\tif (current_line_split[0] == \"vis\")\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (current_line_split[2] == \"t\")\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvisibility = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse { visibility = false; }\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n            }\n            \n\t\t}\n\n\t}\n}\n"]}
{"filename": "PFlender/file_reader/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"file_reader\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"file_reader\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from", "// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"128b5d6c-94f9-4f0d-90fc-6edc8fdbf31a\")]\n\n// Version information for an assembly consists of the following four values:\n//", "// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "PFlender/file_reader/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs", "chunked_list": ["// <autogenerated />\nusing System;\nusing System.Reflection;\n[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(\".NETFramework,Version=v4.8\", FrameworkDisplayName = \".NET Framework 4.8\")]\n"]}
