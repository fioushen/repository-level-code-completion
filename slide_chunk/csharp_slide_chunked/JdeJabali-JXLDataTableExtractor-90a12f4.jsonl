{"filename": "JdeJabali.JXLDataTableExtractor/DataTableExtractor.cs", "chunked_list": ["\ufeffusing JdeJabali.JXLDataTableExtractor.Configuration;\nusing JdeJabali.JXLDataTableExtractor.DataExtraction;\nusing JdeJabali.JXLDataTableExtractor.Exceptions;\nusing JdeJabali.JXLDataTableExtractor.JXLExtractedData;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace JdeJabali.JXLDataTableExtractor", "\nnamespace JdeJabali.JXLDataTableExtractor\n{\n    public class DataTableExtractor :\n        IDataTableExtractorConfiguration,\n        IDataTableExtractorWorkbookConfiguration,\n        IDataTableExtractorSearchConfiguration,\n        IDataTableExtractorWorksheetConfiguration\n    {\n        private bool _readAllWorksheets;\n        private int _searchLimitRow;", "        private bool _readAllWorksheets;\n        private int _searchLimitRow;\n        private int _searchLimitColumn;\n\n        private readonly List<string> _workbooks = new List<string>();\n        private readonly List<int> _worksheetIndexes = new List<int>();\n        private readonly List<string> _worksheets = new List<string>();\n\n        private readonly List<HeaderToSearch> _headersToSearch = new List<HeaderToSearch>();\n        private HeaderToSearch _headerToSearch;\n", "        private readonly List<HeaderToSearch> _headersToSearch = new List<HeaderToSearch>();\n        private HeaderToSearch _headerToSearch;\n\n        private DataReader _reader;\n\n        private DataTableExtractor()\n        {\n        }\n\n        public static IDataTableExtractorConfiguration Configure()\n        {\n            return new DataTableExtractor();\n        }\n", "        public static IDataTableExtractorConfiguration Configure()\n        {\n            return new DataTableExtractor();\n        }\n\n        public IDataTableExtractorWorkbookConfiguration Workbook(string workbook)\n        {\n            if (string.IsNullOrEmpty(workbook))\n            {\n                throw new ArgumentException($\"{nameof(workbook)} cannot be null or empty.\");\n            }\n\n            // You can't add more than one workbook anyway, so there is no need to check for duplicates.\n            // This would imply that there is a configuration for each workbook.\n            _workbooks.Add(workbook);\n\n            return this;\n        }\n", "        public IDataTableExtractorWorkbookConfiguration Workbooks(string[] workbooks)\n        {\n            if (workbooks is null)\n            {\n                throw new ArgumentNullException($\"{nameof(workbooks)} cannot be null.\");\n            }\n\n            foreach (string workbook in workbooks)\n            {\n                if (_workbooks.Contains(workbook))\n                {\n                    throw new DuplicateWorkbookException(\"Cannot search for more than one workbook with the same name: \" +\n                        $@\"\"\"{workbook}\"\".\");\n                }\n\n                _workbooks.Add(workbook);\n            }\n\n            return this;\n        }\n", "                if (_workbooks.Contains(workbook))\n                {\n                    throw new DuplicateWorkbookException(\"Cannot search for more than one workbook with the same name: \" +\n                        $@\"\"\"{workbook}\"\".\");\n                }\n\n                _workbooks.Add(workbook);\n            }\n\n            return this;\n        }\n", "        public IDataTableExtractorSearchConfiguration SearchLimits(int searchLimitRow, int searchLimitColumn)\n        {\n            _searchLimitRow = searchLimitRow;\n            _searchLimitColumn = searchLimitColumn;\n\n            return this;\n        }\n\n        public IDataTableExtractorSearchConfiguration Worksheet(int worksheetIndex)\n        {\n            if (worksheetIndex < 0)\n            {\n                throw new ArgumentException($\"{nameof(worksheetIndex)} cannot be less than zero.\");\n            }\n", "        public IDataTableExtractorSearchConfiguration Worksheet(int worksheetIndex)\n        {\n            if (worksheetIndex < 0)\n            {\n                throw new ArgumentException($\"{nameof(worksheetIndex)} cannot be less than zero.\");\n            }\n\n            if (_worksheetIndexes.Contains(worksheetIndex))\n            {\n                throw new ArgumentException(\"Cannot search for more than one worksheet with the same name: \" +\n                    $@\"\"\"{worksheetIndex}\"\".\");\n            }\n\n            _worksheetIndexes.Add(worksheetIndex);\n\n            return this;\n        }\n", "        public IDataTableExtractorSearchConfiguration Worksheets(int[] worksheetIndexes)\n        {\n            if (worksheetIndexes is null)\n            {\n                throw new ArgumentException($\"{nameof(worksheetIndexes)} cannot be null or empty.\");\n            }\n\n            _worksheetIndexes.AddRange(worksheetIndexes);\n\n            return this;\n        }\n", "        public IDataTableExtractorSearchConfiguration Worksheet(string worksheet)\n        {\n            if (string.IsNullOrEmpty(worksheet))\n            {\n                throw new ArgumentException($\"{nameof(worksheet)} cannot be null or empty.\");\n            }\n\n            if (_worksheets.Contains(worksheet))\n            {\n                throw new ArgumentException(\"Cannot search for more than one worksheet with the same name: \" +\n                    $@\"\"\"{worksheet}\"\".\");\n            }\n\n            _worksheets.Add(worksheet);\n\n            return this;\n        }\n", "        public IDataTableExtractorSearchConfiguration Worksheets(string[] worksheets)\n        {\n            if (worksheets is null)\n            {\n                throw new ArgumentException($\"{nameof(worksheets)} cannot be null or empty.\");\n            }\n\n            _worksheets.AddRange(worksheets);\n\n            return this;\n        }\n", "        public IDataTableExtractorWorksheetConfiguration ReadOnlyTheIndicatedSheets()\n        {\n            _readAllWorksheets = false;\n\n            if (_worksheetIndexes.Count == 0 && _worksheets.Count == 0)\n            {\n                throw new InvalidOperationException(\"No worksheets selected.\");\n            }\n\n            return this;\n        }\n", "        public IDataTableExtractorWorksheetConfiguration ReadAllWorksheets()\n        {\n            _readAllWorksheets = true;\n\n            return this;\n        }\n\n        IDataTableExtractorWorksheetConfiguration IDataTableColumnsToSearch.ColumnHeader(string columnHeader)\n        {\n            if (string.IsNullOrEmpty(columnHeader))\n            {\n                throw new ArgumentException($\"{nameof(columnHeader)} cannot be null or empty.\");\n            }\n", "            if (string.IsNullOrEmpty(columnHeader))\n            {\n                throw new ArgumentException($\"{nameof(columnHeader)} cannot be null or empty.\");\n            }\n\n            if (_headersToSearch.FirstOrDefault(h => h.ColumnHeaderName == columnHeader) != null)\n            {\n                throw new DuplicateColumnException(\"Cannot search for more than one column header with the same name: \" +\n                    $@\"\"\"{columnHeader}\"\".\");\n            }\n\n            _headerToSearch = new HeaderToSearch()\n            {\n                ColumnHeaderName = columnHeader,\n            };\n\n            _headersToSearch.Add(_headerToSearch);\n\n            return this;\n        }\n\n        IDataTableExtractorWorksheetConfiguration IDataTableColumnsToSearch.ColumnIndex(int columnIndex)\n        {", "            if (columnIndex < 0)\n            {\n                throw new ArgumentException($\"{nameof(columnIndex)} cannot be less than zero.\");\n            }\n\n            if (_headersToSearch.FirstOrDefault(h => h.ColumnIndex == columnIndex) != null)\n            {\n                throw new DuplicateColumnException(\"Cannot search for more than one column with the same index: \" +\n                    $@\"\"\"{columnIndex}\"\".\");\n            }\n\n            _headerToSearch = new HeaderToSearch()\n            {\n                ColumnIndex = columnIndex,\n            };\n\n            _headersToSearch.Add(_headerToSearch);\n\n            return this;\n        }\n\n        IDataTableExtractorWorksheetConfiguration IDataTableColumnsToSearch.CustomColumnHeaderMatch(Func<string, bool> conditional)\n        {", "            if (conditional is null)\n            {\n                throw new ArgumentNullException(\"Conditional cannot be null.\");\n            }\n\n            _headerToSearch = new HeaderToSearch()\n            {\n                ConditionalToReadColumnHeader = conditional,\n            };\n\n            _headersToSearch.Add(_headerToSearch);\n\n            return this;\n        }\n\n        IDataTableExtractorWorksheetConfiguration IDataTableExtractorColumnConfiguration.ConditionToExtractRow(Func<string, bool> conditional)\n        {", "            if (conditional is null)\n            {\n                throw new ArgumentNullException(\"Conditional cannot be null.\");\n            }\n\n            if (_headerToSearch is null)\n            {\n                throw new InvalidOperationException(nameof(_headerToSearch));\n            }\n\n            _headerToSearch.ConditionalToReadRow = conditional;\n\n            return this;\n        }\n\n        public List<JXLWorkbookData> GetWorkbooksData()\n        {\n            _reader = new DataReader()\n            {\n                Workbooks = _workbooks,\n                SearchLimitRow = _searchLimitRow,\n                SearchLimitColumn = _searchLimitColumn,\n                WorksheetIndexes = _worksheetIndexes,\n                Worksheets = _worksheets,\n                ReadAllWorksheets = _readAllWorksheets,\n                HeadersToSearch = _headersToSearch,\n            };\n\n            return _reader.GetWorkbooksData();\n        }\n\n        public List<JXLExtractedRow> GetExtractedRows()\n        {\n            _reader = new DataReader()\n            {\n                Workbooks = _workbooks,\n                SearchLimitRow = _searchLimitRow,\n                SearchLimitColumn = _searchLimitColumn,\n                WorksheetIndexes = _worksheetIndexes,\n                Worksheets = _worksheets,\n                ReadAllWorksheets = _readAllWorksheets,\n                HeadersToSearch = _headersToSearch,\n            };\n\n            return _reader.GetJXLExtractedRows();\n        }\n", "        public DataTable GetDataTable()\n        {\n            _reader = new DataReader()\n            {\n                Workbooks = _workbooks,\n                SearchLimitRow = _searchLimitRow,\n                SearchLimitColumn = _searchLimitColumn,\n                WorksheetIndexes = _worksheetIndexes,\n                Worksheets = _worksheets,\n                ReadAllWorksheets = _readAllWorksheets,\n                HeadersToSearch = _headersToSearch,\n            };\n\n            return _reader.GetDataTable();\n        }\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/DataExtraction/DataReaderHelpers.cs", "chunked_list": ["\ufeffusing OfficeOpenXml;\nusing System;\nusing System.IO;\nusing System.Linq;\n\ninternal static class DataReaderHelpers\n{\n    public static string GetCellValue(int row, int column, ExcelWorksheet sheet)\n    {\n        return sheet.Cells[row, column].Value is null\n            ? string.Empty\n            : sheet.Cells[row, column].Value.ToString();\n    }\n", "    public static FileStream GetFileStream(string workbookFilename)\n    {\n        // Activate asynchronous read, or not?\n        return new FileStream(\n            workbookFilename,\n            FileMode.Open,\n            FileAccess.Read,\n            FileShare.ReadWrite,\n            bufferSize: 4096,\n            useAsync: false);\n    }\n", "    public static ExcelWorksheet GetWorksheetByIndex(int index, string workbook, ExcelPackage excel)\n    {\n        ExcelWorksheet worksheet = excel.Workbook.Worksheets\n            .AsEnumerable()\n            .FirstOrDefault(ws => ws.Index == index);\n\n        if (worksheet is null)\n        {\n            throw new IndexOutOfRangeException($@\"Worksheet index not found: \"\"{index}\"\" in \"\"{workbook}\"\".\");\n        }\n\n        return worksheet;\n    }\n", "    public static ExcelWorksheet GetWorksheetByName(string worksheetName, string workbook, ExcelPackage excel)\n    {\n        ExcelWorksheet worksheet = excel.Workbook.Worksheets\n            .AsEnumerable()\n            .FirstOrDefault(ws => ws.Name == worksheetName);\n\n        if (worksheet is null)\n        {\n            throw new IndexOutOfRangeException($@\"Worksheet name not found: \"\"{worksheetName}\"\" in \"\"{workbook}\"\".\");\n        }\n\n        return worksheet;\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/DataExtraction/HeaderToSearch.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace JdeJabali.JXLDataTableExtractor.DataExtraction\n{\n    internal class HeaderToSearch\n    {\n        public string ColumnHeaderName { get; internal set; }\n        public int? ColumnIndex { get; internal set; }\n        public Func<string, bool> ConditionalToReadColumnHeader { get; internal set; }\n        public Func<string, bool> ConditionalToReadRow { get; internal set; } = cellValue => true;\n        public HeaderCoord HeaderCoord { get; internal set; } = new HeaderCoord();\n    }\n}", "        public HeaderCoord HeaderCoord { get; internal set; } = new HeaderCoord();\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/DataExtraction/DataReader.cs", "chunked_list": ["\ufeffusing JdeJabali.JXLDataTableExtractor.JXLExtractedData;\nusing OfficeOpenXml;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.IO;\nusing System.Linq;\n\nnamespace JdeJabali.JXLDataTableExtractor.DataExtraction\n{\n    internal class DataReader\n    {\n        public List<string> Workbooks { get; set; } = new List<string>();", "namespace JdeJabali.JXLDataTableExtractor.DataExtraction\n{\n    internal class DataReader\n    {\n        public List<string> Workbooks { get; set; } = new List<string>();\n        public int SearchLimitRow { get; set; }\n        public int SearchLimitColumn { get; set; }\n        public List<int> WorksheetIndexes { get; set; } = new List<int>();\n        public List<string> Worksheets { get; set; } = new List<string>();\n        public bool ReadAllWorksheets { get; set; }\n        public List<HeaderToSearch> HeadersToSearch { get; set; } = new List<HeaderToSearch>();\n", "        public bool ReadAllWorksheets { get; set; }\n        public List<HeaderToSearch> HeadersToSearch { get; set; } = new List<HeaderToSearch>();\n\n        public DataTable GetDataTable()\n        {\n            List<JXLWorkbookData> data = GetWorkbooksData();\n\n            DataTable dataTable = new DataTable();\n\n            List<HeaderToSearch> orderedColumns = HeadersToSearch.OrderBy(column => column.HeaderCoord.Column).ToList();\n", "            foreach (HeaderToSearch headerCoord in orderedColumns)\n            {\n                if (!string.IsNullOrEmpty(headerCoord.ColumnHeaderName))\n                {\n                    dataTable.Columns.Add(headerCoord.ColumnHeaderName);\n                }\n                else\n                {\n                    dataTable.Columns.Add(\"Column \" + headerCoord.HeaderCoord.Column.ToString() + \":\");\n                }\n            }\n", "            if (data.Count == 0)\n            {\n                return dataTable;\n            }\n\n            List<JXLExtractedRow> extractedRows = data\n                .SelectMany(workbookData => workbookData.WorksheetsData\n                .SelectMany(worksheetData => worksheetData.Rows))\n                .ToList();\n\n            foreach (JXLExtractedRow extractedRow in extractedRows)\n            {\n                string[] columns = new string[extractedRow.Columns.Count];\n", "            foreach (JXLExtractedRow extractedRow in extractedRows)\n            {\n                string[] columns = new string[extractedRow.Columns.Count];\n\n                for (int i = 0; i < extractedRow.Columns.Count; i++)\n                {\n                    string columnName = string.Empty;\n\n                    if (!string.IsNullOrEmpty(orderedColumns[i].ColumnHeaderName))\n                    {\n                        columnName = orderedColumns[i].ColumnHeaderName;\n                    }\n                    else\n                    {\n                        columnName = orderedColumns[i].HeaderCoord.Column.ToString();\n                    }\n", "                    if (!string.IsNullOrEmpty(orderedColumns[i].ColumnHeaderName))\n                    {\n                        columnName = orderedColumns[i].ColumnHeaderName;\n                    }\n                    else\n                    {\n                        columnName = orderedColumns[i].HeaderCoord.Column.ToString();\n                    }\n\n                    if (extractedRow.Columns.TryGetValue(columnName, out string value))\n                    {\n                        columns[i] = value;\n                    }\n                }\n\n                dataTable.Rows.Add(columns);\n            }\n\n            return dataTable;\n        }\n\n        public List<JXLExtractedRow> GetJXLExtractedRows()\n        {\n            List<JXLWorkbookData> data = GetWorkbooksData();\n\n            List<JXLExtractedRow> extractedRows = data\n                .SelectMany(workbookData => workbookData.WorksheetsData\n                .SelectMany(worksheetData => worksheetData.Rows))\n                .ToList();\n\n            return extractedRows;\n        }\n\n        public List<JXLWorkbookData> GetWorkbooksData()\n        {\n            List<JXLWorkbookData> workbooksData = new List<JXLWorkbookData>();\n", "                    if (extractedRow.Columns.TryGetValue(columnName, out string value))\n                    {\n                        columns[i] = value;\n                    }\n                }\n\n                dataTable.Rows.Add(columns);\n            }\n\n            return dataTable;\n        }\n\n        public List<JXLExtractedRow> GetJXLExtractedRows()\n        {\n            List<JXLWorkbookData> data = GetWorkbooksData();\n\n            List<JXLExtractedRow> extractedRows = data\n                .SelectMany(workbookData => workbookData.WorksheetsData\n                .SelectMany(worksheetData => worksheetData.Rows))\n                .ToList();\n\n            return extractedRows;\n        }\n\n        public List<JXLWorkbookData> GetWorkbooksData()\n        {\n            List<JXLWorkbookData> workbooksData = new List<JXLWorkbookData>();\n", "            foreach (string workbook in Workbooks)\n            {\n                using (ExcelPackage excel = new ExcelPackage(DataReaderHelpers.GetFileStream(workbook)))\n                {\n                    JXLWorkbookData workbookData = new JXLWorkbookData();\n                    workbookData.WorkbookPath = workbook;\n                    workbookData.WorkbookName = Path.GetFileNameWithoutExtension(workbook);\n\n                    List<JXLWorksheetData> worksheetsData = new List<JXLWorksheetData>();\n\n                    Func<string, ExcelPackage, List<JXLWorksheetData>> getWorksheetsData =\n                        ResolveGettingWorksheetsMethod();\n", "                    if (getWorksheetsData != null)\n                    {\n                        worksheetsData = getWorksheetsData(workbook, excel);\n                    }\n\n                    workbookData.WorksheetsData.AddRange(worksheetsData);\n                    workbooksData.Add(workbookData);\n                }\n            }\n\n            return workbooksData;\n        }\n\n        private Func<string, ExcelPackage, List<JXLWorksheetData>> ResolveGettingWorksheetsMethod()\n        {", "            if (ReadAllWorksheets)\n            {\n                return GetAllWorksheetsData;\n            }\n\n            if (WorksheetIndexes.Count > 0)\n            {\n                return GetWorksheetsDataByIndex;\n            }\n\n            if (Worksheets.Count > 0)\n            {\n                return GetWorksheetsDataByName;\n            }\n\n            return null;\n        }\n\n        private List<JXLWorksheetData> GetWorksheetsDataByName(string workbook, ExcelPackage excel)\n        {\n            List<JXLWorksheetData> worksheetsData = new List<JXLWorksheetData>();\n            JXLWorksheetData worksheetData;\n", "            if (Worksheets.Count > 0)\n            {\n                return GetWorksheetsDataByName;\n            }\n\n            return null;\n        }\n\n        private List<JXLWorksheetData> GetWorksheetsDataByName(string workbook, ExcelPackage excel)\n        {\n            List<JXLWorksheetData> worksheetsData = new List<JXLWorksheetData>();\n            JXLWorksheetData worksheetData;\n", "            foreach (string worksheetName in Worksheets)\n            {\n                try\n                {\n                    ExcelWorksheet sheet = DataReaderHelpers.GetWorksheetByName(worksheetName, workbook, excel);\n                    worksheetData = ExtractRows(sheet);\n                    worksheetData.WorksheetName = sheet.Name;\n                }\n                catch\n                {\n                    throw new InvalidOperationException($@\"Error reading worksheet by name: \"\"{worksheetName}\"\" \" +\n                        $@\"in workbook: \"\"{workbook}\"\"\");\n                }\n", "                if (worksheetData != null)\n                {\n                    worksheetsData.Add(worksheetData);\n                }\n            }\n\n            return worksheetsData;\n        }\n\n        private List<JXLWorksheetData> GetWorksheetsDataByIndex(string workbook, ExcelPackage excel)\n        {\n            List<JXLWorksheetData> worksheetsData = new List<JXLWorksheetData>();\n            JXLWorksheetData worksheetData;\n", "            foreach (int worksheetIndex in WorksheetIndexes)\n            {\n                try\n                {\n                    ExcelWorksheet sheet = DataReaderHelpers.GetWorksheetByIndex(worksheetIndex, workbook, excel);\n                    worksheetData = ExtractRows(sheet);\n                    worksheetData.WorksheetName = sheet.Name;\n                }\n                catch (Exception ex)\n                {\n                    throw new InvalidOperationException($@\"Error reading worksheet by index: \"\"{worksheetIndex}\"\" \" +\n                        $@\"in workbook: \"\"{workbook}\"\". {ex.Message}\");\n                }\n", "                catch (Exception ex)\n                {\n                    throw new InvalidOperationException($@\"Error reading worksheet by index: \"\"{worksheetIndex}\"\" \" +\n                        $@\"in workbook: \"\"{workbook}\"\". {ex.Message}\");\n                }\n\n                if (worksheetData != null)\n                {\n                    worksheetsData.Add(worksheetData);\n                }\n            }\n\n            return worksheetsData;\n        }\n\n        private List<JXLWorksheetData> GetAllWorksheetsData(string workbook, ExcelPackage excel)\n        {\n            List<JXLWorksheetData> worksheetsData = new List<JXLWorksheetData>();\n            JXLWorksheetData worksheetData;\n", "            foreach (ExcelWorksheet worksheet in excel.Workbook.Worksheets)\n            {\n                try\n                {\n                    worksheetData = ExtractRows(worksheet);\n                    worksheetData.WorksheetName = worksheet.Name;\n                }\n                catch\n                {\n                    throw new InvalidOperationException($@\"Error reading worksheet: \"\"{worksheet.Name}\"\" \" +\n                        $@\"in workbook: \"\"{workbook}\"\"\");\n                }\n", "                if (worksheetData != null)\n                {\n                    worksheetsData.Add(worksheetData);\n                }\n            }\n\n            return worksheetsData;\n        }\n\n        private JXLWorksheetData ExtractRows(ExcelWorksheet sheet)\n        {\n            JXLWorksheetData worksheetData = new JXLWorksheetData()\n            {\n                WorksheetName = sheet.Name\n            };\n\n            GetHeadersCoordinates(sheet);\n", "        private JXLWorksheetData ExtractRows(ExcelWorksheet sheet)\n        {\n            JXLWorksheetData worksheetData = new JXLWorksheetData()\n            {\n                WorksheetName = sheet.Name\n            };\n\n            GetHeadersCoordinates(sheet);\n\n            if (!AreHeadersInTheSameRow())\n            {\n                throw new InvalidOperationException(\n                    $\"The headers to look for found in {worksheetData.WorksheetName} do not match in the same row. Cannot continue.\");\n            }\n\n            worksheetData = GetWorksheetData(sheet);\n\n            return worksheetData;\n        }\n", "            if (!AreHeadersInTheSameRow())\n            {\n                throw new InvalidOperationException(\n                    $\"The headers to look for found in {worksheetData.WorksheetName} do not match in the same row. Cannot continue.\");\n            }\n\n            worksheetData = GetWorksheetData(sheet);\n\n            return worksheetData;\n        }\n", "        private JXLWorksheetData GetWorksheetData(ExcelWorksheet sheet)\n        {\n            JXLWorksheetData worksheetData = new JXLWorksheetData();\n\n            if (HeadersToSearch.Count == 0)\n            {\n                return worksheetData;\n            }\n\n            HeaderCoord? firstColumnWithHeader = HeadersToSearch\n                .FirstOrDefault(h => !string.IsNullOrEmpty(h.ColumnHeaderName))?\n                .HeaderCoord;\n\n            // If there is no column with a header, it means that all columns must be found by their indexes.\n            // In that case the rows will begin to be read from the first", "            if (firstColumnWithHeader is null)\n            {\n                firstColumnWithHeader = new HeaderCoord\n                {\n                    Row = 0,\n                    Column = 1,\n                };\n            }\n\n            for (int row = firstColumnWithHeader.Value.Row + 1; row <= sheet.Dimension.Rows; row++)\n            {\n                JXLExtractedRow extractedRow = GetRow(row, sheet, out bool canAddRow);\n", "            for (int row = firstColumnWithHeader.Value.Row + 1; row <= sheet.Dimension.Rows; row++)\n            {\n                JXLExtractedRow extractedRow = GetRow(row, sheet, out bool canAddRow);\n\n                if (extractedRow != null && canAddRow && extractedRow.Columns.Count > 0)\n                {\n                    worksheetData.Rows.Add(extractedRow);\n                }\n            }\n\n            return worksheetData;\n        }\n", "        private JXLExtractedRow GetRow(int row, ExcelWorksheet sheet, out bool canAddRow)\n        {\n            canAddRow = true;\n\n            JXLExtractedRow extractedRow = new JXLExtractedRow();\n\n            foreach (HeaderToSearch headerToSearch in HeadersToSearch)\n            {\n                string cellValue = DataReaderHelpers\n                    .GetCellValue(row, headerToSearch.HeaderCoord.Column, sheet);\n", "                if (!headerToSearch.ConditionalToReadRow(cellValue))\n                {\n                    canAddRow = false;\n                }\n\n                if (!string.IsNullOrEmpty(headerToSearch.ColumnHeaderName))\n                {\n                    extractedRow.Columns.Add(headerToSearch.ColumnHeaderName, cellValue);\n                }\n                else\n                {\n                    extractedRow.Columns.Add(headerToSearch.HeaderCoord.Column.ToString(),\n                        cellValue);\n                }\n            }\n\n            return extractedRow;\n        }\n", "        private void GetHeadersCoordinates(ExcelWorksheet sheet)\n        {\n            AddHeaderCoordsFromWorksheetColumnConfigurations(sheet);\n\n            AddHeaderCoordsFromWorksheetColumnIndexesConfigurations();\n\n            AddHeaderCoordsFromCustomColumnHeaderMatch(sheet);\n        }\n\n        private void AddHeaderCoordsFromWorksheetColumnConfigurations(ExcelWorksheet sheet)\n        {\n            List<HeaderToSearch> headersToSearch = HeadersToSearch\n                .Where(h => !string.IsNullOrEmpty(h.ColumnHeaderName))\n                .ToList();\n", "        private void AddHeaderCoordsFromWorksheetColumnConfigurations(ExcelWorksheet sheet)\n        {\n            List<HeaderToSearch> headersToSearch = HeadersToSearch\n                .Where(h => !string.IsNullOrEmpty(h.ColumnHeaderName))\n                .ToList();\n\n            foreach (HeaderToSearch headerToSearch in headersToSearch)\n            {\n                bool headerFound = false;\n\n                for (int row = 1; row <= SearchLimitRow; row++)\n                {", "                for (int row = 1; row <= SearchLimitRow; row++)\n                {\n                    if (headerFound)\n                    {\n                        break;\n                    }\n\n                    for (int column = 1; column <= SearchLimitColumn; column++)\n                    {\n                        string cellValue = DataReaderHelpers.GetCellValue(row, column, sheet);\n", "                        if (string.Equals(cellValue, headerToSearch.ColumnHeaderName, StringComparison.Ordinal))\n                        {\n                            headerToSearch.HeaderCoord = new HeaderCoord\n                            {\n                                Row = row,\n                                Column = column,\n                            };\n\n                            headerFound = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n", "        private void AddHeaderCoordsFromWorksheetColumnIndexesConfigurations()\n        {\n            List<HeaderToSearch> headersToSearch = HeadersToSearch\n                .Where(h =>\n                    string.IsNullOrEmpty(h.ColumnHeaderName) &&\n                    h.ConditionalToReadColumnHeader is null &&\n                    h.ColumnIndex != null)\n                .ToList();\n\n            foreach (HeaderToSearch headerToSearch in headersToSearch)\n            {\n                headerToSearch.HeaderCoord = new HeaderCoord\n                {\n                    Row = 1,\n                    Column = headerToSearch.ColumnIndex.Value,\n                };\n            }\n        }\n", "            foreach (HeaderToSearch headerToSearch in headersToSearch)\n            {\n                headerToSearch.HeaderCoord = new HeaderCoord\n                {\n                    Row = 1,\n                    Column = headerToSearch.ColumnIndex.Value,\n                };\n            }\n        }\n\n        private void AddHeaderCoordsFromCustomColumnHeaderMatch(ExcelWorksheet sheet)\n        {\n            List<HeaderToSearch> headersToSearch = HeadersToSearch\n                .Where(h =>\n                    string.IsNullOrEmpty(h.ColumnHeaderName) &&\n                    h.ConditionalToReadColumnHeader != null &&\n                    h.ColumnIndex is null)\n                .ToList();\n", "        private void AddHeaderCoordsFromCustomColumnHeaderMatch(ExcelWorksheet sheet)\n        {\n            List<HeaderToSearch> headersToSearch = HeadersToSearch\n                .Where(h =>\n                    string.IsNullOrEmpty(h.ColumnHeaderName) &&\n                    h.ConditionalToReadColumnHeader != null &&\n                    h.ColumnIndex is null)\n                .ToList();\n\n            foreach (HeaderToSearch headerToSearch in headersToSearch)\n            {\n                bool headerFound = false;\n", "            foreach (HeaderToSearch headerToSearch in headersToSearch)\n            {\n                bool headerFound = false;\n\n                for (int row = 1; row <= SearchLimitRow; row++)\n                {\n                    if (headerFound)\n                    {\n                        break;\n                    }\n", "                    for (int column = 1; column <= SearchLimitColumn; column++)\n                    {\n                        string cellValue = DataReaderHelpers.GetCellValue(row, column, sheet);\n\n                        if (headerToSearch.ConditionalToReadColumnHeader(cellValue))\n                        {\n                            headerToSearch.ColumnHeaderName = cellValue;\n                            headerToSearch.HeaderCoord = new HeaderCoord\n                            {\n                                Row = row,\n                                Column = column,\n                            };\n\n                            headerFound = true;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n", "        private bool AreHeadersInTheSameRow()\n        {\n            if (!HeadersToSearch.Any())\n            {\n                throw new InvalidOperationException($\"{nameof(HeadersToSearch)} is empty.\");\n            }\n\n            int firstHeaderRow = HeadersToSearch.First().HeaderCoord.Row;\n\n            return HeadersToSearch\n                .Where(h => !string.IsNullOrEmpty(h.ColumnHeaderName))\n                .ToList()\n                .All(header => header.HeaderCoord.Row == firstHeaderRow);\n        }\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/DataExtraction/HeaderCoord.cs", "chunked_list": ["\ufeffnamespace JdeJabali.JXLDataTableExtractor.DataExtraction\n{\n    internal struct HeaderCoord\n    {\n        public int Row { get; set; }\n        public int Column { get; set; }\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Helpers/ConditionalsToExtractRow.cs", "chunked_list": ["\ufeffnamespace JdeJabali.JXLDataTableExtractor.Helpers\n{\n    public static partial class ConditionalsToExtractRow\n    {\n        /// <summary>\n        /// The <paramref name=\"value\"/> parameter is always ignored.\n        /// </summary>\n        /// <param name=\"value\"></param>\n        /// <returns></returns>\n        public static bool AlwaysTrue(string value)\n        {\n            return true;\n        }\n", "        public static bool AlwaysTrue(string value)\n        {\n            return true;\n        }\n\n        public static bool IsNotNullOrEmpty(string value)\n        {\n            return !string.IsNullOrEmpty(value);\n        }\n\n        public static bool HasNumericValueAboveZero(string value)\n        {", "        public static bool HasNumericValueAboveZero(string value)\n        {\n            if (string.IsNullOrEmpty(value))\n            {\n                return false;\n            }\n\n            _ = decimal.TryParse(value, out decimal result);\n\n            return result > 0;\n        }\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Exceptions/DuplicateWorkbookException.cs", "chunked_list": ["\ufeffusing System;\nusing System.Runtime.Serialization;\n\nnamespace JdeJabali.JXLDataTableExtractor.Exceptions\n{\n    [Serializable]\n    public class DuplicateWorkbookException : Exception\n    {\n        public DuplicateWorkbookException()\n        {\n        }\n\n        public DuplicateWorkbookException(string message) : base(message)\n        {\n        }\n\n        public DuplicateWorkbookException(string message, Exception innerException) : base(message, innerException)\n        {\n        }\n\n        protected DuplicateWorkbookException(SerializationInfo info, StreamingContext context) : base(info, context)\n        {\n        }\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Exceptions/DuplicateColumnException.cs", "chunked_list": ["\ufeffusing System;\nusing System.Runtime.Serialization;\n\nnamespace JdeJabali.JXLDataTableExtractor.Exceptions\n{\n    [Serializable]\n    public class DuplicateColumnException : Exception\n    {\n        public DuplicateColumnException()\n        {\n        }\n\n        public DuplicateColumnException(string message) : base(message)\n        {\n        }\n\n        public DuplicateColumnException(string message, Exception innerException) : base(message, innerException)\n        {\n        }\n\n        protected DuplicateColumnException(SerializationInfo info, StreamingContext context) : base(info, context)\n        {\n        }\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/JXLExtractedData/JXLExtractedRow.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace JdeJabali.JXLDataTableExtractor.JXLExtractedData\n{\n    public class JXLExtractedRow\n    {\n        public Dictionary<string, string> Columns { get; set; } = new Dictionary<string, string>();\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/JXLExtractedData/JXLDataExtracted.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace JdeJabali.JXLDataTableExtractor.JXLExtractedData\n{\n    public class JXLDataExtracted\n    {\n        public List<JXLWorkbookData> WorkbooksData { get; set; } = new List<JXLWorkbookData>();\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/JXLExtractedData/JXLWorksheetData.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace JdeJabali.JXLDataTableExtractor.JXLExtractedData\n{\n    public class JXLWorksheetData\n    {\n        public string WorksheetName { get; set; } = string.Empty;\n\n        public List<JXLExtractedRow> Rows { get; set; } = new List<JXLExtractedRow>();\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/JXLExtractedData/JXLWorkbookData.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace JdeJabali.JXLDataTableExtractor.JXLExtractedData\n{\n    public class JXLWorkbookData\n    {\n        public string WorkbookPath { get; set; } = string.Empty;\n        public string WorkbookName { get; set; } = string.Empty;\n\n        public List<JXLWorksheetData> WorksheetsData { get; set; } = new List<JXLWorksheetData>();\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataTableExtractorWorksheetConfiguration.cs", "chunked_list": ["\ufeffnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataTableExtractorWorksheetConfiguration : IDataTableColumnsToSearch, IDataTableExtractorColumnConfiguration, IDataExtraction\n    {\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataTableExtractorSearchConfiguration.cs", "chunked_list": ["\ufeffnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataTableExtractorSearchConfiguration\n    {\n        /// <exception cref=\"ArgumentException\"/>\n        IDataTableExtractorSearchConfiguration Worksheet(int worksheetIndex);\n\n        /// <exception cref=\"ArgumentException\"/>\n        IDataTableExtractorSearchConfiguration Worksheets(int[] worksheetIndexes);\n\n        /// <exception cref=\"ArgumentException\"/>\n        IDataTableExtractorSearchConfiguration Worksheet(string worksheet);\n\n        /// <exception cref=\"ArgumentException\"/>\n        IDataTableExtractorSearchConfiguration Worksheets(string[] worksheets);\n\n        /// <summary>\n        /// Read all the worksheets in the workbook(s) specified.\n        /// </summary>\n        /// <returns></returns>\n        IDataTableExtractorWorksheetConfiguration ReadAllWorksheets();\n        IDataTableExtractorWorksheetConfiguration ReadOnlyTheIndicatedSheets();\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataTableExtractorWorkbookConfiguration.cs", "chunked_list": ["\ufeffnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataTableExtractorWorkbookConfiguration\n    {\n        /// <summary>\n        /// Limit to search the column headers in the worksheet(s).\n        /// </summary>\n        /// <param name=\"searchLimitRow\"></param>\n        /// <param name=\"searchLimitColumn\"></param>\n        /// <returns></returns>\n        IDataTableExtractorSearchConfiguration SearchLimits(int searchLimitRow, int searchLimitColumn);\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataTableColumnsToSearch.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataTableColumnsToSearch\n    {\n        /// <summary>\n        /// The column header to search inside the worksheet(s). Must match exactly.\n        /// </summary>\n        /// <param name=\"columnHeader\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentException\"/>\n        /// <exception cref=\"DuplicateColumnException\"/>\n        IDataTableExtractorWorksheetConfiguration ColumnHeader(string columnHeader);\n\n        /// <summary>\n        /// The column index to search inside the worksheet(s). All the column indexes by default have \n        /// the starting row to one.\n        /// </summary>\n        /// <param name=\"columnIndex\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentException\"/>\n        /// <exception cref=\"DuplicateColumnException\"/>\n        IDataTableExtractorWorksheetConfiguration ColumnIndex(int columnIndex);\n\n        /// <summary>\n        /// The column header to search inside the worksheet(s). \n        /// This method change how the column header is matched. Otherwise must match exactly.\n        /// <code>\n        /// e.g. cellValue => cellValue.Contains(\"Column Name\", StringComparison.OrdinalIgnoreCase)\n        /// </code>\n        /// </summary>\n        /// <param name=\"conditional\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentNullException\"/>\n        IDataTableExtractorWorksheetConfiguration CustomColumnHeaderMatch(Func<string, bool> conditional);\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataExtraction.cs", "chunked_list": ["\ufeffusing JdeJabali.JXLDataTableExtractor.JXLExtractedData;\nusing System.Collections.Generic;\nusing System.Data;\n\nnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataExtraction\n    {\n        /// <summary>\n        /// Extract all the data from the workbook(s).\n        /// </summary>\n        /// <returns></returns>\n        /// <exception cref=\"InvalidOperationException\"/>\n        List<JXLWorkbookData> GetWorkbooksData();\n\n        /// <summary>\n        /// Only retrieves the extracted rows from all the workbooks and worksheets.\n        /// </summary>\n        /// <returns></returns>\n        /// <exception cref=\"InvalidOperationException\"/>\n        List<JXLExtractedRow> GetExtractedRows();\n\n        /// <summary>    \n        /// Convert the result of <see cref=\"GetWorkbooksData\"/> to a DataTable.\n        /// </summary>\n        /// <returns>The <see cref=\"DataTable\"/> with all the rows read.</returns>\n        /// <exception cref=\"InvalidOperationException\"/>\n        DataTable GetDataTable();\n    }\n}"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataTableExtractorConfiguration.cs", "chunked_list": ["\ufeffusing JdeJabali.JXLDataTableExtractor.Exceptions;\n\nnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataTableExtractorConfiguration\n    {\n        /// <summary>\n        /// The route of the workbook to read\n        /// </summary>\n        /// <param name=\"workbook\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentException\"/>\n        IDataTableExtractorWorkbookConfiguration Workbook(string workbook);\n\n        /// <summary>\n        /// The route of the workbooks to read\n        /// </summary>\n        /// <param name=\"workbooks\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentException\"/>\n        /// <exception cref=\"DuplicateWorkbookException\"/>\n        IDataTableExtractorWorkbookConfiguration Workbooks(string[] workbooks);\n    }\n}\n"]}
{"filename": "JdeJabali.JXLDataTableExtractor/Configuration/IDataTableExtractorColumnConfiguration.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace JdeJabali.JXLDataTableExtractor.Configuration\n{\n    public interface IDataTableExtractorColumnConfiguration\n    {\n        /// <summary>\n        /// Can use a custom <paramref name=\"conditional\"/>. Or one of the <see cref=\"Helpers.ConditionalsToExtractRow\"/> methods.\n        /// </summary>\n        /// <param name=\"conditional\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"ArgumentNullException\"/>\n        IDataTableExtractorWorksheetConfiguration ConditionToExtractRow(Func<string, bool> conditional);\n    }\n}"]}
