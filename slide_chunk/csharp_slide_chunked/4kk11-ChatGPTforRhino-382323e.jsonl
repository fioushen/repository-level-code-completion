{"filename": "ChatUI/MainWindow.xaml.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;", "using System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Navigation;\nusing System.Windows.Shapes;\nusing System.Windows.Annotations;\nusing System.Windows.Media.Animation;\nusing ChatUI.MVVM.Model;", "using System.Windows.Media.Animation;\nusing ChatUI.MVVM.Model;\nusing System.Runtime.Remoting.Messaging;\nusing System.Collections.ObjectModel;\nusing ChatUI.MVVM.ViewModel;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing ChatGPTConnection;\n\nnamespace ChatUI", "\nnamespace ChatUI\n{\n\tpublic partial class MainWindow : Window\n\t{\n\t\tpublic static string DllDirectory\n\t\t{\n\t\t\tget \n\t\t\t{\n\t\t\t\tstring dllPath = System.IO.Path.Combine(System.Reflection.Assembly.GetExecutingAssembly().Location);\n\t\t\t\tstring dllDirectory = System.IO.Directory.GetParent(dllPath).FullName;\n\t\t\t\treturn dllDirectory;\n\t\t\t}\n\t\t}\n", "\t\tpublic event ChatGPTResponseEventHandler ResponseReceived;\n\n\t\tpublic MainWindow()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t\tvar vm = this.DataContext as MainViewModel;\n\t\t}\n\n\n\n\t\tprivate void Border_MouseDown(object sender, MouseButtonEventArgs e)\n\t\t{", "\t\tprivate void Border_MouseDown(object sender, MouseButtonEventArgs e)\n\t\t{\n\t\t\tif (e.LeftButton == MouseButtonState.Pressed)\n\t\t\t{\n\t\t\t\tDragMove();\n\t\t\t}\n\t\t}\n\n\t\tprivate void MinimizeButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tthis.WindowState = WindowState.Minimized;\n\t\t}\n", "\t\tprivate void MinimizeButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tthis.WindowState = WindowState.Minimized;\n\t\t}\n\n\t\tprivate void WindowStateButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tif (this.WindowState != WindowState.Maximized)\n\t\t\t{\n\t\t\t\tthis.WindowState = WindowState.Maximized;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.WindowState = WindowState.Normal;\n\t\t\t\t\n\t\t\t}\n\t\t}\n", "\t\tprivate void CloseButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tthis.Close();\n\t\t}\n\n\t\tprivate void OptionButton_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tvar optionWindow = new OptionWindow();\t\t\n\t\t\toptionWindow.Owner = this;\n\t\t\toptionWindow.ShowDialog();\n\t\t}\n\n\n\t\t//\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\n\t\t//ChatGPT\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30c6\u30ad\u30b9\u30c8\u304c\u8a73\u7d30\u5316", "\t\tprivate bool _isDebagMode;\n\n\t\tpublic bool IsDebagMode\n\t\t{\n\t\t\tget => _isDebagMode;\n\t\t\tset\n\t\t\t{\n\t\t\t\t_isDebagMode = value;\n\t\t\t}\n\t\t}\n\t\tprivate void Button_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tChangeDebagMode(!_isDebagMode);", "\t\tprivate void Button_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tChangeDebagMode(!_isDebagMode);\n\t\t\tif (_isDebagMode) DebugButton.Background = Brushes.LightSlateGray;\n\t\t\telse DebugButton.Background = Brushes.Transparent;\n\t\t}\n\n\t\tprivate void ChangeDebagMode(bool state)\n\t\t{\n\t\t\tIsDebagMode = state;\n\t\t\t//\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30b9\u30c6\u30fc\u30c8\u3092\u5909\u5316\u3055\u305b\u308b\n\t\t\tvar vm = this.DataContext as MainViewModel;", "\t\t\tforeach (MessageModel mm in vm.Messages)\n\t\t\t{\n\t\t\t\tmm.UseSubMessage = state;\n\t\t\t}\n\t\t}\n\n\t\tinternal void OnResponseReceived(ChatGPTResponseEventArgs e)\n\t\t{\n\t\t\tResponseReceived?.Invoke(this, e);\n\t\t}\n\n\n\t}\n}\n"]}
{"filename": "ChatUI/Settings.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.IO;\nusing System.Windows.Controls;\nusing System.Windows;\n\nnamespace ChatUI", "\nnamespace ChatUI\n{\n\n\tpublic class Settings\n\t{\n\t\tprivate static readonly string FileName = Path.Combine(MainWindow.DllDirectory, \"Settings.xml\");\n\t\tpublic string APIKey { get; set; }\n\t\tpublic string SystemMessage { get; set; }\n\t\tpublic Settings(string apikey, string systemMessage) \n\t\t{\n\t\t\tAPIKey = apikey;\n\t\t\tSystemMessage = systemMessage;\n\t\t}\n\n\t\tpublic Settings() { }\n", "\t\tpublic string SystemMessage { get; set; }\n\t\tpublic Settings(string apikey, string systemMessage) \n\t\t{\n\t\t\tAPIKey = apikey;\n\t\t\tSystemMessage = systemMessage;\n\t\t}\n\n\t\tpublic Settings() { }\n\n\t\tpublic void SaveSettings()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar writer = new System.Xml.Serialization.XmlSerializer(typeof(Settings));\n\t\t\t\t", "\t\tpublic void SaveSettings()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar writer = new System.Xml.Serialization.XmlSerializer(typeof(Settings));\n\t\t\t\t\n\t\t\t\tusing (var file = new StreamWriter(FileName))\n\t\t\t\t{\n\t\t\t\t\twriter.Serialize(file, this);\n\t\t\t\t}\n\t\t\t}", "\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\n\t\tpublic static Settings LoadSettings()\n\t\t{\n\t\t\tif (File.Exists(FileName))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar reader = new System.Xml.Serialization.XmlSerializer(typeof(Settings));\n\t\t\t\t\t", "\t\t\tif (File.Exists(FileName))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar reader = new System.Xml.Serialization.XmlSerializer(typeof(Settings));\n\t\t\t\t\t\n\t\t\t\t\tusing (var file = new StreamReader(FileName))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn reader.Deserialize(file) as Settings;\n\t\t\t\t\t}\n\t\t\t\t}", "\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\tthrow ex;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse { return null; }\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/ChatGPTResponseEvent.cs", "chunked_list": ["\ufeffusing ChatGPTConnection;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatUI\n{\n\n\tpublic delegate void ChatGPTResponseEventHandler(object sender, ChatGPTResponseEventArgs e);", "{\n\n\tpublic delegate void ChatGPTResponseEventHandler(object sender, ChatGPTResponseEventArgs e);\n\tpublic class ChatGPTResponseEventArgs : EventArgs\n\t{\n\t\tpublic ChatGPTResponseModel Response { get; private set; }\n\n\t\tpublic ChatGPTResponseEventArgs(ChatGPTResponseModel response)\n\t\t{\n\t\t\tResponse = response;\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/OptionWindow.xaml.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Documents;\nusing System.Windows.Input;", "using System.Windows.Documents;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\nusing System.Windows.Shapes;\n\nnamespace ChatUI\n{\n\t/// <summary>\n\t/// OptionWindow.xaml \u306e\u76f8\u4e92\u4f5c\u7528\u30ed\u30b8\u30c3\u30af", "\t/// <summary>\n\t/// OptionWindow.xaml \u306e\u76f8\u4e92\u4f5c\u7528\u30ed\u30b8\u30c3\u30af\n\t/// </summary>\n\tpublic partial class OptionWindow : Window\n\t{\n\t\tpublic OptionWindow()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t\t//\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\n\t\t\tSettings settings = Settings.LoadSettings();\n\t\t\tif (settings != null)\n\t\t\t{\n\t\t\t\tTextBox_APIKey.Password= settings.APIKey;\n\t\t\t\tTextBox_SytemPrompt.Text = settings.SystemMessage;\n\t\t\t}\n\t\t}\n", "\t\t\tif (settings != null)\n\t\t\t{\n\t\t\t\tTextBox_APIKey.Password= settings.APIKey;\n\t\t\t\tTextBox_SytemPrompt.Text = settings.SystemMessage;\n\t\t\t}\n\t\t}\n\n\t\tprivate void Button_Click(object sender, RoutedEventArgs e)\n\t\t{\n\t\t\tstring apiKey = TextBox_APIKey.Password;\n\t\t\tstring systemMessage = TextBox_SytemPrompt.Text;", "\t\t\tif (apiKey == null || systemMessage == null) return;\n\t\t\t//\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u30bb\u30fc\u30d6\n\t\t\tSettings settings = new Settings(apiKey, systemMessage);\n\t\t\tsettings.SaveSettings();\n\t\t\tthis.Close();\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/App.xaml.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows;\n\nnamespace ChatUI\n{", "namespace ChatUI\n{\n\t/// <summary>\n\t/// App.xaml \u306e\u76f8\u4e92\u4f5c\u7528\u30ed\u30b8\u30c3\u30af\n\t/// </summary>\n\tpublic partial class App : Application\n\t{\n\t}\n}\n"]}
{"filename": "ChatUI/CustomControls/LoadingSpinner.cs", "chunked_list": ["\ufeffusing System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Media;\nusing System.Windows.Shapes;\nusing System.Windows.Media.Animation;\n\nnamespace ChatUI.CustomControls\n{\n\tpublic class LoadingSpinner : Canvas\n\t{\n\t\t// \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u3057\u3066\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9a\u7fa9\u3059\u308b", "{\n\tpublic class LoadingSpinner : Canvas\n\t{\n\t\t// \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u3057\u3066\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9a\u7fa9\u3059\u308b\n\t\tpublic int CircleCount { get; set; } = 8; // \u5186\u306e\u6570\n\t\tpublic double CircleRadius { get; set; } = 20; // \u5186\u306e\u534a\u5f84\n\t\tpublic double EllipseSize { get; set; } = 12; // \u5186\u306e\u30b5\u30a4\u30ba\n\n\t\tprivate Canvas LoadingSpinnerCanvas;\n\n\t\tpublic LoadingSpinner()\n\t\t{\n\t\t\t// Canvas\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\n\t\t\tLoadingSpinnerCanvas = new Canvas();\n\t\t\tLoadingSpinnerCanvas.Width = 100;\n\t\t\tLoadingSpinnerCanvas.Height = 100;\n\n\t\t\t// CreateLoadingSpinner\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n\t\t\tCreateLoadingSpinner();\n\n\t\t\t// \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306bCanvas\u3092\u8ffd\u52a0\u3059\u308b\n\t\t\tthis.Children.Add(LoadingSpinnerCanvas);\n\t\t}\n", "\t\tprivate Canvas LoadingSpinnerCanvas;\n\n\t\tpublic LoadingSpinner()\n\t\t{\n\t\t\t// Canvas\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\n\t\t\tLoadingSpinnerCanvas = new Canvas();\n\t\t\tLoadingSpinnerCanvas.Width = 100;\n\t\t\tLoadingSpinnerCanvas.Height = 100;\n\n\t\t\t// CreateLoadingSpinner\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n\t\t\tCreateLoadingSpinner();\n\n\t\t\t// \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306bCanvas\u3092\u8ffd\u52a0\u3059\u308b\n\t\t\tthis.Children.Add(LoadingSpinnerCanvas);\n\t\t}\n", "\t\tprivate void CreateLoadingSpinner()\n\t\t{\n\n\t\t\tdouble canvasCenterX = LoadingSpinnerCanvas.ActualWidth / 2; // Canvas\u306e\u4e2d\u5fc3\u70b9\u306eX\u5ea7\u6a19\n\t\t\tdouble canvasCenterY = LoadingSpinnerCanvas.ActualHeight / 2; // Canvas\u306e\u4e2d\u5fc3\u70b9\u306eY\u5ea7\u6a19\n\t\t\tdouble angle = 0; // \u5186\u3092\u914d\u7f6e\u3059\u308b\u89d2\u5ea6\uff0845\u5ea6\u5358\u4f4d\uff09\n\n\t\t\tfor (int i = 0; i < CircleCount; i++)\n\t\t\t{\n\t\t\t\t// \u89d2\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n\t\t\t\tdouble angleInRadians = angle * Math.PI / 180;\n\n\t\t\t\t// \u5186\u3092\u914d\u7f6e\u3059\u308b\u5ea7\u6a19\u3092\u8a08\u7b97\n\t\t\t\tdouble circleCenterX = canvasCenterX + CircleRadius * Math.Cos(angleInRadians);\n\t\t\t\tdouble circleCenterY = canvasCenterY + CircleRadius * Math.Sin(angleInRadians);\n\n\t\t\t\t// \u5186\u3092\u4f5c\u6210\u3057\u3066Canvas\u306b\u8ffd\u52a0\n\t\t\t\tEllipse circle = new Ellipse();\n\t\t\t\tcircle.Width = EllipseSize;\n\t\t\t\tcircle.Height = EllipseSize;\n\t\t\t\tcircle.Fill = new SolidColorBrush(Color.FromRgb(0x62, 0xA7, 0xB7));\n\t\t\t\tCanvas.SetLeft(circle, circleCenterX - circle.Width / 2);\n\t\t\t\tCanvas.SetTop(circle, circleCenterY - circle.Height / 2);\n\t\t\t\tLoadingSpinnerCanvas.Children.Add(circle);\n\n\t\t\t\t// Opacity\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n\t\t\t\tDoubleAnimation opacityAnimation = new DoubleAnimation();\n\t\t\t\topacityAnimation.From = 1.0;\n\t\t\t\topacityAnimation.To = -0.3;\n\t\t\t\topacityAnimation.Duration = new Duration(TimeSpan.FromSeconds(0.5));\n\t\t\t\topacityAnimation.AutoReverse = true;\n\t\t\t\topacityAnimation.RepeatBehavior = RepeatBehavior.Forever;\n\n\t\t\t\t// BeginTime\u3092\u5272\u308a\u5f53\u3066\u3066\u3001\u9806\u756a\u306bOpacity\u304c\u5909\u5316\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\t\t\t\topacityAnimation.BeginTime = TimeSpan.FromSeconds(i * 0.125);\n\t\t\t\tcircle.BeginAnimation(Ellipse.OpacityProperty, opacityAnimation);\n\n\t\t\t\t// \u6b21\u306e\u5186\u3092\u914d\u7f6e\u3059\u308b\u89d2\u5ea6\u3092\u66f4\u65b0\n\t\t\t\tangle += 360 / CircleCount;\n\t\t\t}\n\n\t\t}\n\t}\n}\n\t\t\t\n\n"]}
{"filename": "ChatUI/MVVM/Model/MessageModel.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.Remoting;\nusing System.Security.Policy;\nusing System.Text;\nusing System.Threading.Tasks;\n", "using System.Threading.Tasks;\n\nnamespace ChatUI.MVVM.Model\n{\n\tclass MessageModel : INotifyPropertyChanged\n\t{\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\n\t\tpublic string Username { get; set; }\n\t\tpublic string UsernameColor { get; set; }\n\t\tpublic string ImageSource { get; set; }\n", "\t\tpublic string Username { get; set; }\n\t\tpublic string UsernameColor { get; set; }\n\t\tpublic string ImageSource { get; set; }\n\n\t\tpublic bool UseSubMessage {\n\t\t\tget { return useSubMessage; }\n\t\t\tset { \n\t\t\t\tuseSubMessage = value;\n\t\t\t\tOnPropertyChanged(\"Message\");\n\t\t\t}\n\t\t}", "\t\tprivate bool useSubMessage ;\n\t\tpublic string Message {\n\t\t\tget { \n\n\t\t\t\treturn (UseSubMessage && SubMessage != null)? SubMessage : MainMessage; \n\t\t\t}\n\t\t\tset { MainMessage = value; }\n\t\t}\n\t\t\n\t\tpublic string MainMessage { get; set; }\n\t\tpublic string SubMessage { get; set; }", "\t\tpublic string MainMessage { get; set; }\n\t\tpublic string SubMessage { get; set; }\n\t\tpublic DateTime Time { get; set; }\n\t\tpublic bool IsMyMessage { get; set; }\n\t\tpublic bool IsLoadingSpinner { get; set; }\n\n\t\tpublic void OnPropertyChanged([CallerMemberName] string propertyName = null)\n\t\t{\n\t\t\tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/MVVM/ViewModel/MainViewModel.cs", "chunked_list": ["\ufeffusing ChatGPTConnection;\nusing ChatUI.Core;\nusing ChatUI.MVVM.Model;\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing System.Runtime.CompilerServices;\nusing System.Text;", "using System.Runtime.CompilerServices;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\n\nnamespace ChatUI.MVVM.ViewModel\n{\n\tinternal class MainViewModel : ObservableObject\n\t{\n\t\tpublic ObservableCollection<MessageModel> Messages { get; set; }\n\t\tprivate MainWindow MainWindow { get; set; }", "\t\tprivate MainWindow MainWindow { get; set; }\n\t\tpublic RelayCommand SendCommand { get; set; }\n\n\t\tprivate string _message = \"\";\n\t\tpublic string Message\n\t\t{\n\t\t\tget { return _message; }\n\t\t\tset\n\t\t\t{\n\t\t\t\t_message = value;\n\t\t\t\tOnPropertyChanged();\n\t\t\t}\n\t\t}\n", "\t\tprivate string CatIconPath => Path.Combine(MainWindow.DllDirectory, \"Icons/cat.jpeg\");\n\n\t\tpublic MainViewModel()\n\t\t{\n\t\t\tMessages = new ObservableCollection<MessageModel>();\n\n\t\t\t//\u30d3\u30e5\u30fc(?)\u3092\u53d6\u5f97\n\t\t\tvar window = Application.Current.Windows.OfType<Window>().FirstOrDefault(x => x is MainWindow);\n\t\t\tMainWindow = (MainWindow)window;\n\n\t\t\t//\u30ad\u30fc\u3092\u62bc\u3057\u305f\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ffd\u52a0\u3055\u308c\u308b\u30b3\u30de\u30f3\u30c9\n\t\t\tSendCommand = new RelayCommand(o =>\n\t\t\t{", "\t\t\t\tif (Message == \"\") return;\n\n\t\t\t\t//\u81ea\u5206\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8ffd\u52a0\n\t\t\t\tAddMyMessages(Message);\n\n\t\t\t\t//ChatGPT\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u304a\u304f\u308a\u3001\u8fd4\u4fe1\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u8ffd\u52a0\n\t\t\t\tSendToChatGPT(Message);\n\n\t\t\t\t//\u30e1\u30c3\u30bb\u30fc\u30b8\u30dc\u30c3\u30af\u30b9\u3092\u7a7a\u306b\u3059\u308b\n\t\t\t\tMessage = \"\";\n\t\t\t});\n\t\t\t//Test_Message();\n\t\t}\n", "\t\tprivate void AddMyMessages(string message)\n\t\t{\n\t\t\tMessages.Add(new MessageModel\n\t\t\t{\n\t\t\t\tUsername = \"You\",\n\t\t\t\tUsernameColor = \"White\",\n\t\t\t\tTime = DateTime.Now,\n\t\t\t\tMainMessage = message,\n\t\t\t\tIsMyMessage = true\n\t\t\t});\n\n\t\t\tScrollToBottom();\n\t\t}\n\n\t\t//TODO: \u591a\u8cac\u52d9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u5206\u5272\u3057\u305f\u3044", "\t\tprivate async void SendToChatGPT(string message)\n\t\t{\n\t\t\t//LoadingSpinner\u3092\u8868\u793a\n\t\t\tAddLoadingSpinner();\n\n\t\t\t//API\u30ad\u30fc\u3092\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u53d6\u5f97\n\t\t\tSettings settings = Settings.LoadSettings();\n\t\t\tif (settings == null || settings.APIKey == \"\")\n\t\t\t{\n\t\t\t\tMessageBox.Show(\"API key not found. Please set from the options.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstring apiKey = settings.APIKey;\n\t\t\tstring systemMessage = settings.SystemMessage;\n\t\t\t//ChatGPT\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\n\t\t\tChatGPTConnector connector = new ChatGPTConnector(apiKey, systemMessage);\n\t\t\tvar response = await connector.RequestAsync(message);\n\n\t\t\t//LoadingSpinner\u3092\u524a\u9664\n\t\t\tDeleteLoadingSpinner();\n", "\t\t\tif (!response.isSuccess)\n\t\t\t{\n\t\t\t\tAddChatGPTMessage(\"API request failed. API key may be wrong.\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//\u8fd4\u4fe1\u3092\u30c1\u30e3\u30c3\u30c8\u6b04\u306b\u8ffd\u52a0\n\t\t\tstring conversationText = response.GetConversation();\n\t\t\tstring fullText = response.GetMessage();\n\t\t\tAddChatGPTMessage(conversationText, fullText);\n\n\t\t\t//\u30a4\u30d9\u30f3\u30c8\u3092\u5b9f\u884c\n\t\t\tMainWindow.OnResponseReceived(new ChatGPTResponseEventArgs(response));\n\t\t\t\n\t\t}\n\n\t\t\n", "\t\tprivate void AddChatGPTMessage(string mainMessage, string subMessage)\n\t\t{\n\t\t\tMessages.Add(new MessageModel\n\t\t\t{\n\t\t\t\tUsername = \"ChatGPT\",\n\t\t\t\tUsernameColor = \"#738CBA\",\n\t\t\t\tImageSource = CatIconPath,\n\t\t\t\tTime = DateTime.Now,\n\t\t\t\tMainMessage = mainMessage,\n\t\t\t\tSubMessage = subMessage,\n\t\t\t\tUseSubMessage = MainWindow.IsDebagMode,\n\t\t\t\tIsMyMessage = false\n\t\t\t});\n\n\t\t\tScrollToBottom();\n\t\t}\n", "\t\tprivate void ScrollToBottom()\n\t\t{\n\t\t\tint lastIndex = MainWindow.ChatView.Items.Count - 1;\n\t\t\tvar item = MainWindow.ChatView.Items[lastIndex];\n\t\t\tMainWindow.ChatView.ScrollIntoView(item);\n\t\t}\n\n\t\tprivate void AddLoadingSpinner()\n\t\t{\n\t\t\tMessages.Add(new MessageModel\n\t\t\t{\n\t\t\t\tIsLoadingSpinner = true\n\t\t\t});\n\t\t\tScrollToBottom();\n\t\t}\n", "\t\tprivate void DeleteLoadingSpinner()\n\t\t{\n\t\t\tfor (int i = 0; i < Messages.Count; i++)\n\t\t\t{\n\t\t\t\tvar item = Messages[i];\n\t\t\t\tif (item.IsLoadingSpinner)\n\t\t\t\t{\n\t\t\t\t\tMessages.Remove(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace ChatUI.Properties\n{\n\n\n\t[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n\t[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"11.0.0.0\")]\n\tinternal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase\n\t{\n", "\tinternal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase\n\t{\n\n\t\tprivate static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n\n\t\tpublic static Settings Default\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn defaultInstance;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30c4\u30fc\u30eb\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n//     \u30e9\u30f3\u30bf\u30a4\u30e0 \u30d0\u30fc\u30b8\u30e7\u30f3:4.0.30319.42000\n//\n//     \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u5909\u66f4\u306f\u3001\u6b63\u3057\u304f\u306a\u3044\u52d5\u4f5c\u306e\u539f\u56e0\u306b\u306a\u3063\u305f\u308a\u3001\n//     \u30b3\u30fc\u30c9\u304c\u518d\u751f\u6210\u3055\u308c\u308b\u3068\u304d\u306b\u5931\u308f\u308c\u305f\u308a\u3057\u307e\u3059\u3002\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace ChatUI.Properties\n{\n\n\n\t/// <summary>\n\t///   \u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u3055\u308c\u305f\u6587\u5b57\u5217\u306a\u3069\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u3001\u53b3\u5bc6\u306b\u578b\u6307\u5b9a\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9 \u30af\u30e9\u30b9\u3067\u3059\u3002\n\t/// </summary>\n\t// \u3053\u306e\u30af\u30e9\u30b9\u306f StronglyTypedResourceBuilder \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066 ResGen", "\t/// </summary>\n\t// \u3053\u306e\u30af\u30e9\u30b9\u306f StronglyTypedResourceBuilder \u30af\u30e9\u30b9\u306b\u3088\u3063\u3066 ResGen\n\t// \u307e\u305f\u306f Visual Studio \u306e\u3088\u3046\u306a\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n\t// \u30e1\u30f3\u30d0\u30fc\u3092\u8ffd\u52a0\u307e\u305f\u306f\u524a\u9664\u3059\u308b\u306b\u306f\u3001.ResX \u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u3066\u3001/str \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u5171\u306b\n\t// ResGen \u3092\u5b9f\u884c\u3057\u76f4\u3059\u304b\u3001\u307e\u305f\u306f VS \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30ea\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n\t[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"4.0.0.0\")]\n\t[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n\t[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n\tinternal class Resources\n\t{\n", "\tinternal class Resources\n\t{\n\n\t\tprivate static global::System.Resources.ResourceManager resourceMan;\n\n\t\tprivate static global::System.Globalization.CultureInfo resourceCulture;\n\n\t\t[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n\t\tinternal Resources()\n\t\t{\n\t\t}\n\n\t\t/// <summary>\n\t\t///   \u3053\u306e\u30af\u30e9\u30b9\u3067\u4f7f\u7528\u3055\u308c\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f ResourceManager \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\n\t\t/// </summary>\n\t\t[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tinternal static global::System.Resources.ResourceManager ResourceManager\n\t\t{\n\t\t\tget\n\t\t\t{", "\t\t\t\tif ((resourceMan == null))\n\t\t\t\t{\n\t\t\t\t\tglobal::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ChatUI.Properties.Resources\", typeof(Resources).Assembly);\n\t\t\t\t\tresourceMan = temp;\n\t\t\t\t}\n\t\t\t\treturn resourceMan;\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t///   \u3059\u3079\u3066\u306b\u3064\u3044\u3066\u3001\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e CurrentUICulture \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\n\t\t///   \u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e CurrentUICulture \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002\n\t\t/// </summary>\n\t\t[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n\t\tinternal static global::System.Globalization.CultureInfo Culture\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn resourceCulture;\n\t\t\t}\n\t\t\tset\n\t\t\t{\n\t\t\t\tresourceCulture = value;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Resources;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing System.Windows;\n\n// \u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u95a2\u3059\u308b\u4e00\u822c\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u5c5e\u6027\u30bb\u30c3\u30c8\u3092\u3068\u304a\u3057\u3066\u5236\u5fa1\u3055\u308c\u307e\u3059\u3002\n// \u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u60c5\u5831\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001\n// \u3053\u308c\u3089\u306e\u5c5e\u6027\u5024\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[assembly: AssemblyTitle(\"ChatUI\")]", "// \u3053\u308c\u3089\u306e\u5c5e\u6027\u5024\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[assembly: AssemblyTitle(\"ChatUI\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"ChatUI\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n", "[assembly: AssemblyCulture(\"\")]\n\n// ComVisible \u3092 false \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u3053\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u5185\u306e\u578b\u306f COM \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\n// \u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002COM \u304b\u3089\u3053\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u5185\u306e\u578b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\n// \u305d\u306e\u578b\u306e ComVisible \u5c5e\u6027\u3092 true \u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[assembly: ComVisible(false)]\n\n//\u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u53ef\u80fd\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d3\u30eb\u30c9\u3092\u958b\u59cb\u3059\u308b\u306b\u306f\u3001\n//.csproj \u30d5\u30a1\u30a4\u30eb\u306e <UICulture>CultureYouAreCodingWith</UICulture> \u3092\n//<PropertyGroup> \u5185\u90e8\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001", "//.csproj \u30d5\u30a1\u30a4\u30eb\u306e <UICulture>CultureYouAreCodingWith</UICulture> \u3092\n//<PropertyGroup> \u5185\u90e8\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u3001\n//\u30bd\u30fc\u30b9 \u30d5\u30a1\u30a4\u30eb\u3067\u82f1\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001<UICulture> \u3092 en-US \u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u6b21\u306b\u3001\n//\u4e0b\u306e NeutralResourceLanguage \u5c5e\u6027\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u89e3\u9664\u3057\u307e\u3059\u3002\u4e0b\u306e\u884c\u306e \"en-US\" \u3092\n//\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 \u30d5\u30a1\u30a4\u30eb\u306e UICulture \u8a2d\u5b9a\u3068\u4e00\u81f4\u3059\u308b\u3088\u3046\u66f4\u65b0\u3057\u307e\u3059\u3002\n\n//[assembly: NeutralResourcesLanguage(\"en-US\", UltimateResourceFallbackLocation.Satellite)]\n\n\n[assembly: ThemeInfo(", "\n[assembly: ThemeInfo(\n\tResourceDictionaryLocation.None, //\u30c6\u30fc\u30de\u56fa\u6709\u306e\u30ea\u30bd\u30fc\u30b9 \u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u5834\u6240\n\t\t\t\t\t\t\t\t\t //(\u30ea\u30bd\u30fc\u30b9\u304c\u30da\u30fc\u30b8\u3001\n\t\t\t\t\t\t\t\t\t // \u307e\u305f\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30ea\u30bd\u30fc\u30b9 \u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059)\n\tResourceDictionaryLocation.SourceAssembly //\u6c4e\u7528\u30ea\u30bd\u30fc\u30b9 \u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u304c\u7f6e\u304b\u308c\u3066\u3044\u308b\u5834\u6240\n\t\t\t\t\t\t\t\t\t\t\t  //(\u30ea\u30bd\u30fc\u30b9\u304c\u30da\u30fc\u30b8\u3001\n\t\t\t\t\t\t\t\t\t\t\t  //\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u307e\u305f\u306f\u3044\u305a\u308c\u306e\u30c6\u30fc\u30de\u56fa\u6709\u306e\u30ea\u30bd\u30fc\u30b9 \u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u3082\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059)\n)]\n", ")]\n\n\n// \u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u306f\u6b21\u306e 4 \u3064\u306e\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059:\n//\n//      \u30e1\u30b8\u30e3\u30fc \u30d0\u30fc\u30b8\u30e7\u30f3\n//      \u30de\u30a4\u30ca\u30fc \u30d0\u30fc\u30b8\u30e7\u30f3\n//      \u30d3\u30eb\u30c9\u756a\u53f7\n//      \u30ea\u30d3\u30b8\u30e7\u30f3\n//", "//      \u30ea\u30d3\u30b8\u30e7\u30f3\n//\n// \u3059\u3079\u3066\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001\u6b21\u3092\u4f7f\u7528\u3057\u3066\u30d3\u30eb\u30c9\u756a\u53f7\u3068\u30ea\u30d3\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u65e2\u5b9a\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\n// \u65e2\u5b9a\u5024\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "ChatUI/Core/ObservableObject.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatUI.Core\n{\n\tinternal class ObservableObject : INotifyPropertyChanged\n\t{", "namespace ChatUI.Core\n{\n\tinternal class ObservableObject : INotifyPropertyChanged\n\t{\n\t\tpublic event PropertyChangedEventHandler PropertyChanged;\n\n\t\tpublic void OnPropertyChanged([CallerMemberName] string propertyName = null)\n\t\t{\n\t\t\tPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatUI/Core/RelayCommand.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Input;\n\nnamespace ChatUI.Core\n{\n\tclass RelayCommand : ICommand\n\t{\n\t\tprivate Action<object> execute;\n\t\tprivate Func<object, bool> canExecute;\n", "{\n\tclass RelayCommand : ICommand\n\t{\n\t\tprivate Action<object> execute;\n\t\tprivate Func<object, bool> canExecute;\n\n\t\tpublic event EventHandler CanExecuteChanged\n\t\t{\n\t\t\tadd { CommandManager.RequerySuggested += value; }\n\t\t\tremove { CommandManager.RequerySuggested -= value; }\n\t\t}\n\n\t\tpublic RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)\n\t\t{\n\t\t\tthis.execute = execute;\n\t\t\tthis.canExecute = canExecute;\n\t\t}\n", "\t\tpublic bool CanExecute(object parameter)\n\t\t{\n\t\t\treturn this.canExecute == null || this.canExecute(parameter);\n\t\t}\n\n\t\tpublic void Execute(object parameter)\n\t\t{\n\t\t\tthis.execute(parameter);\n\t\t}\n\n\t}\n}\n"]}
{"filename": "ChatGPTforRhino/SelectObjectCommand.cs", "chunked_list": ["\ufeffusing Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.DocObjects;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n", "using System.Linq;\n\nnamespace ChatGPTforRhino\n{\n    public class SelectObjectCommand : Command\n    {\n        public SelectObjectCommand()\n        {\n            Instance = this;\n        }\n\n        ///<summary>The only instance of the MyCommand command.</summary>", "        public static SelectObjectCommand Instance { get; private set; }\n\n        public override string EnglishName => \"SelectObject\";\n\t\t\n        protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n        {\n\t\t\tstring name = null;\n\t\t\tif (!InputString(out name)) return Result.Failure;\n\t\t\t//doc.Objects.F\n\t\t\tRhinoObject ro = doc.Objects.Where(k => k.Name == name).FirstOrDefault();\n\t\t\tdoc.Objects.Select(ro.Id);\n\t\t\treturn Result.Success;\n        }\n", "\t\tprivate bool InputString(out string userMessage)\n\t\t{\n\t\t\tusing (GetString gs = new GetString())\n\t\t\t{\n\t\t\t\tgs.SetCommandPrompt(\"Name\");\n\n\t\t\t\tgs.GetLiteralString();\n\t\t\t\tif (gs.CommandResult() != Result.Success)\n\t\t\t\t{\n\t\t\t\t\tuserMessage = null;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tuserMessage = gs.StringResult();\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n}"]}
{"filename": "ChatGPTforRhino/RhinoCommand.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Rhino;\n\nnamespace ChatGPTforRhino\n{\n\tpublic class RhinoCommands\n\t{\n\t\tstring[] Commands;\n\t\tpublic RhinoCommands(string[] commands) \n\t\t{", "{\n\tpublic class RhinoCommands\n\t{\n\t\tstring[] Commands;\n\t\tpublic RhinoCommands(string[] commands) \n\t\t{\n\t\t\tif (commands == null || commands.Length == 0) throw new Exception(\"command is null or has no content\");\n\t\t\tthis.Commands = commands;\n\t\t}\n\n\t\tpublic void RunCommand()\n\t\t{", "\t\tpublic void RunCommand()\n\t\t{\n\t\t\tforeach (string command in Commands)\n\t\t\t{\n\t\t\t\tRhinoApp.RunScript(command, false);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "ChatGPTforRhino/ChatGPTforRhinoPlugin.cs", "chunked_list": ["\ufeffusing Rhino;\nusing Rhino.PlugIns;\nusing System;\n\nnamespace ChatGPTforRhino\n{\n\n\tpublic class ChatGPTforRhinoPlugin : Rhino.PlugIns.PlugIn\n\t{\n\t\tpublic ChatGPTforRhinoPlugin()\n\t\t{\n\t\t\tInstance = this;\n\t\t}\n", "\t\tpublic static ChatGPTforRhinoPlugin Instance { get; private set; }\n\n\t\tprotected override LoadReturnCode OnLoad(ref string errorMessage)\n\t\t{\n\t\t\t\n\t\t\treturn base.OnLoad(ref errorMessage);\n\t\t}\n\n\n\t}\n}"]}
{"filename": "ChatGPTforRhino/SetNameCommand.cs", "chunked_list": ["\ufeffusing Rhino;\nusing Rhino.Commands;\nusing Rhino.Geometry;\nusing Rhino.DocObjects;\nusing Rhino.Input;\nusing Rhino.Input.Custom;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n", "using System.Linq;\n\nnamespace ChatGPTforRhino\n{\n    public class SetNameCommand : Command\n    {\n        public SetNameCommand()\n        {\n            Instance = this;\n        }\n", "        public static SetNameCommand Instance { get; private set; }\n\n        public override string EnglishName => \"SetName\";\n\n        protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n        {\n            if (doc.Objects.Count == 0) return Result.Failure;\n\t\t\tstring newName = null;\n\t\t\tif (!InputString(out newName)) return Result.Failure;\n\n\t\t\tvar enm = doc.Objects.GetEnumerator();\n\t\t\tenm.MoveNext();\n\t\t\tRhinoObject ro = enm.Current;\n\t\t\tro.Name = newName;\n\t\t\tro.CommitChanges();\n\n            return Result.Success;\n        }\n", "\t\t\tif (!InputString(out newName)) return Result.Failure;\n\n\t\t\tvar enm = doc.Objects.GetEnumerator();\n\t\t\tenm.MoveNext();\n\t\t\tRhinoObject ro = enm.Current;\n\t\t\tro.Name = newName;\n\t\t\tro.CommitChanges();\n\n            return Result.Success;\n        }\n", "\t\tprivate bool InputString(out string userMessage)\n\t\t{\n\t\t\tusing (GetString gs = new GetString())\n\t\t\t{\n\t\t\t\tgs.SetCommandPrompt(\"Name\");\n\t\t\t\tgs.GetLiteralString();\n\t\t\t\tif (gs.CommandResult() != Result.Success)\n\t\t\t\t{\n\t\t\t\t\tuserMessage = null;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tuserMessage = gs.StringResult();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n}"]}
{"filename": "ChatGPTforRhino/ChatGPTWindowCommand.cs", "chunked_list": ["\ufeffusing System;\nusing Rhino;\nusing Rhino.Commands;\nusing ChatUI;\nusing System.Windows.Interop;\nusing System.Windows;\nusing ChatGPTConnection;\n\nnamespace ChatGPTforRhino\n{\n    public class ChatGPTWindowCommand : Command\n    {\n        public ChatGPTWindowCommand()\n        {\n            Instance = this;\n        }\n", "namespace ChatGPTforRhino\n{\n    public class ChatGPTWindowCommand : Command\n    {\n        public ChatGPTWindowCommand()\n        {\n            Instance = this;\n        }\n\n        public static ChatGPTWindowCommand Instance { get; private set; }\n", "        public static ChatGPTWindowCommand Instance { get; private set; }\n\n        public override string EnglishName => \"ChatGPT_window\";\n\n        protected override Result RunCommand(RhinoDoc doc, RunMode mode)\n        {\n            if (IsWindowOpen<ChatUI.MainWindow>()) return Result.Success;\n\n            var window = new ChatUI.MainWindow();\n\n\t\t\twindow.ResponseReceived -= ResponseReceived;\n\t\t\twindow.ResponseReceived += ResponseReceived;\n\n            //Rhino\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u89aa\u306b\u8a2d\u5b9a\n            var rhinoHandle = RhinoApp.MainWindowHandle();\n            var helper = new WindowInteropHelper(window);\n            helper.Owner = rhinoHandle;\n\n\t\t\twindow.Show();\n            return Result.Success;\n        }\n\n\t\t// \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u6307\u5b9a\u3057\u305f\u578b\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u3059\u3067\u306b\u958b\u304b\u308c\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af", "\t\tprivate bool IsWindowOpen<T>() where T : Window\n\t\t{\n\t\t\tforeach (Window window in Application.Current.Windows)\n\t\t\t{\n\t\t\t\tif (window is T) return true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate void ResponseReceived(object sender, ChatGPTResponseEventArgs e)\n\t\t{\n\t\t\tChatGPTResponseModel response = e.Response;\n\t\t\tRhinoCommands command = new RhinoCommands(response.GetCommands());", "\t\tprivate void ResponseReceived(object sender, ChatGPTResponseEventArgs e)\n\t\t{\n\t\t\tChatGPTResponseModel response = e.Response;\n\t\t\tRhinoCommands command = new RhinoCommands(response.GetCommands());\n\t\t\tif (command != null) command.RunCommand();\n\t\t}\n\t}\n}"]}
{"filename": "ChatGPTforRhino/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing Rhino.PlugIns;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// Plug-in Description Attributes - all of these are optional.\n// These will show in Rhino's option dialog, in the tab Plug-ins.\n[assembly: PlugInDescription(DescriptionType.Address, \"\")]\n[assembly: PlugInDescription(DescriptionType.Country, \"\")]\n[assembly: PlugInDescription(DescriptionType.Email, \"\")]", "[assembly: PlugInDescription(DescriptionType.Country, \"\")]\n[assembly: PlugInDescription(DescriptionType.Email, \"\")]\n[assembly: PlugInDescription(DescriptionType.Phone, \"\")]\n[assembly: PlugInDescription(DescriptionType.Fax, \"\")]\n[assembly: PlugInDescription(DescriptionType.Organization, \"\")]\n[assembly: PlugInDescription(DescriptionType.UpdateUrl, \"\")]\n[assembly: PlugInDescription(DescriptionType.WebSite, \"\")]\n\n// Icons should be Windows .ico files and contain 32-bit images in the following sizes: 16, 24, 32, 48, and 256.\n[assembly: PlugInDescription(DescriptionType.Icon, \"ChatGPTforRhino.EmbeddedResources.plugin-utility.ico\")]", "// Icons should be Windows .ico files and contain 32-bit images in the following sizes: 16, 24, 32, 48, and 256.\n[assembly: PlugInDescription(DescriptionType.Icon, \"ChatGPTforRhino.EmbeddedResources.plugin-utility.ico\")]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n// This will also be the Guid of the Rhino plug-in\n[assembly: Guid(\"272fe4eb-c2b0-4174-ad9b-929a095505ea\")]\n"]}
{"filename": "ChatGPTConnection/ChatGPTConnector.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\nnamespace ChatGPTConnection\n{\n\tpublic class ChatGPTConnector\n\t{\n", "namespace ChatGPTConnection\n{\n\tpublic class ChatGPTConnector\n\t{\n\n\t\tprivate readonly string _systemMessage;\n\n\t\tprivate readonly string _apiKey;\n\n\t\t//\u4f1a\u8a71\u5c65\u6b74\u3092\u4fdd\u6301\u3059\u308b\u30ea\u30b9\u30c8\n\t\t//\u4eca\u56de\u306f\u9001\u4fe1\u306e\u5ea6\u306b\u3053\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u306e\u3067\u904e\u53bb\u306e\u4f1a\u8a71\u306f\u4fdd\u6301\u3055\u308c\u306a\u3044", "\t\tprivate readonly List<ChatGPTMessageModel> _messageList = new List<ChatGPTMessageModel>();\n\n\t\tpublic ChatGPTConnector(string apiKey, string systemMessage)\n\t\t{\n\t\t\t_apiKey = apiKey;\n\t\t\t_systemMessage = systemMessage;\n\t\t\t_messageList.Add(new ChatGPTMessageModel() { role = \"system\", content = _systemMessage });\n\t\t}\n\n\t\tpublic async Task<ChatGPTResponseModel> RequestAsync(string userMessage)\n\t\t{\n\t\t\t//\u6587\u7ae0\u751f\u6210AI\u306eAPI\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8a2d\u5b9a\n\t\t\tvar apiUrl = \"https://api.openai.com/v1/chat/completions\";\n\t\t\t_messageList.Add(new ChatGPTMessageModel { role = \"user\", content = userMessage });\n\n\t\t\t//OpenAI\u306eAPI\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fc5\u8981\u306a\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3092\u8a2d\u5b9a\n\t\t\tvar headers = new Dictionary<string, string>\n\t\t\t{\n\t\t\t\t{\"Authorization\", \"Bearer \" + _apiKey},\n\t\t\t\t{\"X-Slack-No-Retry\", \"1\"}\n\t\t\t};\n\n\t\t\t//\u6587\u7ae0\u751f\u6210\u3067\u5229\u7528\u3059\u308b\u30e2\u30c7\u30eb\u3084\u30c8\u30fc\u30af\u30f3\u4e0a\u9650\u3001\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u8a2d\u5b9a\n\t\t\tvar options = new ChatGPTCompletionRequestModel()\n\t\t\t{\n\t\t\t\tmodel = \"gpt-3.5-turbo\",\n\t\t\t\tmessages = _messageList\n\t\t\t};\n\n\t\t\tvar jsonOptions = JsonConvert.SerializeObject(options);\n\n\t\t\tvar httpClient = new HttpClient();\n", "\t\tpublic async Task<ChatGPTResponseModel> RequestAsync(string userMessage)\n\t\t{\n\t\t\t//\u6587\u7ae0\u751f\u6210AI\u306eAPI\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u8a2d\u5b9a\n\t\t\tvar apiUrl = \"https://api.openai.com/v1/chat/completions\";\n\t\t\t_messageList.Add(new ChatGPTMessageModel { role = \"user\", content = userMessage });\n\n\t\t\t//OpenAI\u306eAPI\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fc5\u8981\u306a\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3092\u8a2d\u5b9a\n\t\t\tvar headers = new Dictionary<string, string>\n\t\t\t{\n\t\t\t\t{\"Authorization\", \"Bearer \" + _apiKey},\n\t\t\t\t{\"X-Slack-No-Retry\", \"1\"}\n\t\t\t};\n\n\t\t\t//\u6587\u7ae0\u751f\u6210\u3067\u5229\u7528\u3059\u308b\u30e2\u30c7\u30eb\u3084\u30c8\u30fc\u30af\u30f3\u4e0a\u9650\u3001\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u8a2d\u5b9a\n\t\t\tvar options = new ChatGPTCompletionRequestModel()\n\t\t\t{\n\t\t\t\tmodel = \"gpt-3.5-turbo\",\n\t\t\t\tmessages = _messageList\n\t\t\t};\n\n\t\t\tvar jsonOptions = JsonConvert.SerializeObject(options);\n\n\t\t\tvar httpClient = new HttpClient();\n", "\t\t\tforeach (var header in headers)\n\t\t\t{\n\t\t\t\thttpClient.DefaultRequestHeaders.Add(header.Key, header.Value);\n\t\t\t}\n\n\t\t\tvar responseString = await httpClient.PostAsync(apiUrl, new StringContent(jsonOptions, Encoding.UTF8, \"application/json\"));\n\n\t\t\tif (!responseString.IsSuccessStatusCode)\n\t\t\t{\n\t\t\t\treturn new ChatGPTResponseModel() {isSuccess = false };\t\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvar content = await responseString.Content.ReadAsStringAsync();\n\t\t\t\tvar responseObject = JsonConvert.DeserializeObject<ChatGPTResponseModel>(content);\n\t\t\t\tresponseObject.isSuccess = true;\n\t\t\t\treturn responseObject;\n\t\t\t}\n\t\t}\n\n\n\n\t}\n\n", "\tpublic class ChatGPTMessageModel\n\t{\n\t\tpublic string role;\n\t\tpublic string content;\n\t}\n\n\t//ChatGPT API\u306bRequest\u3092\u9001\u308b\u305f\u3081\u306eJSON\u7528\u30af\u30e9\u30b9\n\tpublic class ChatGPTCompletionRequestModel\n\t{\n\t\tpublic string model;\n\t\tpublic List<ChatGPTMessageModel> messages;\n\t}\n\n\t//ChatGPT API\u304b\u3089\u306eResponse\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9", "\t\tpublic string model;\n\t\tpublic List<ChatGPTMessageModel> messages;\n\t}\n\n\t//ChatGPT API\u304b\u3089\u306eResponse\u3092\u53d7\u3051\u53d6\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\n\tpublic class ChatGPTResponseModel\n\t{\n\t\tpublic bool isSuccess;\n\t\tpublic string id;\n\t\tpublic string @object;\n\t\tpublic int created;\n\t\tpublic Choice[] choices;", "\t\tpublic string id;\n\t\tpublic string @object;\n\t\tpublic int created;\n\t\tpublic Choice[] choices;\n\t\tpublic Usage usage;\n\n\t\tpublic class Choice\n\t\t{\n\t\t\tpublic int index;\n\t\t\tpublic ChatGPTMessageModel message;\n\t\t\tpublic string finish_reason;\n\t\t}\n", "\t\t\tpublic int index;\n\t\t\tpublic ChatGPTMessageModel message;\n\t\t\tpublic string finish_reason;\n\t\t}\n\n\t\tpublic class Usage\n\t\t{\n\t\t\tpublic int prompt_tokens;\n\t\t\tpublic int completion_tokens;\n\t\t\tpublic int total_tokens;\n\t\t}\n", "\t\t\tpublic int completion_tokens;\n\t\t\tpublic int total_tokens;\n\t\t}\n\n\t\tpublic string GetMessage()\n\t\t{\n\t\t\treturn this.choices[0].message.content;\n\t\t}\n\n\t\t//ChatGPT\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d1\u30fc\u30b9\u3059\u308b\n\t\t//TODO: \u3082\u3046\u5c11\u3057\u3046\u307e\u304f\u3064\u304f\u308a\u305f\u3044\n\t\tpublic string[] GetCommands()\n\t\t{\n\t\t\tstring messageContent = GetMessage();\n\t\t\tstring text = messageContent.Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n\t\t\tstring[] sepalater = { \"[\u30b3\u30de\u30f3\u30c9]\", \"[\u4f1a\u8a71\u90e8\u5206]\" };\n\t\t\tstring[] words = text.Split(sepalater, StringSplitOptions.RemoveEmptyEntries);", "\t\t\tif (words.Length == 1) return null;\n\t\t\tstring[] commands = words[0].Split(';');\n\t\t\treturn commands;\n\t\t}\n\n\t\tpublic string GetConversation()\n\t\t{\n\t\t\tstring messageContent = GetMessage();\n\t\t\tstring text = messageContent.Replace(\"\\r\", \"\").Replace(\"\\n\", \"\");\n\t\t\tstring[] sepalater = { \"[\u30b3\u30de\u30f3\u30c9]\", \"[\u4f1a\u8a71\u90e8\u5206]\" };\n\t\t\tstring[] words = text.Split(sepalater, StringSplitOptions.RemoveEmptyEntries);", "\t\t\tif (words.Length == 1) return words[0];\n\t\t\treturn words[1];\n\t\t}\n\n\t\n\t}\n}\n"]}
{"filename": "ChatGPTConnection/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// \u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u95a2\u3059\u308b\u4e00\u822c\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u5c5e\u6027\u30bb\u30c3\u30c8\u3092\u3068\u304a\u3057\u3066\u5236\u5fa1\u3055\u308c\u307e\u3059\u3002\n// \u5236\u5fa1\u3055\u308c\u307e\u3059\u3002\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u60c5\u5831\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001\n// \u3053\u308c\u3089\u306e\u5c5e\u6027\u5024\u3092\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[assembly: AssemblyTitle(\"ChatGPTConnection\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"ChatGPTConnection\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// ComVisible \u3092 false \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u3053\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u5185\u306e\u578b\u306f COM \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\n// \u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002COM \u304b\u3089\u3053\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u5185\u306e\u578b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001", "// ComVisible \u3092 false \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u3053\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u5185\u306e\u578b\u306f COM \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304b\u3089\n// \u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002COM \u304b\u3089\u3053\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u5185\u306e\u578b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\n// \u305d\u306e\u578b\u306e ComVisible \u5c5e\u6027\u3092 true \u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[assembly: ComVisible(false)]\n\n// \u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c COM \u306b\u516c\u958b\u3055\u308c\u308b\u5834\u5408\u3001\u6b21\u306e GUID \u304c typelib \u306e ID \u306b\u306a\u308a\u307e\u3059\n[assembly: Guid(\"64341dba-031a-4ae2-972d-5ce86c048dab\")]\n\n// \u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u306f\u3001\u4ee5\u4e0b\u306e 4 \u3064\u306e\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059:\n//", "// \u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u60c5\u5831\u306f\u3001\u4ee5\u4e0b\u306e 4 \u3064\u306e\u5024\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059:\n//\n//      \u30e1\u30b8\u30e3\u30fc \u30d0\u30fc\u30b8\u30e7\u30f3\n//      \u30de\u30a4\u30ca\u30fc \u30d0\u30fc\u30b8\u30e7\u30f3\n//      \u30d3\u30eb\u30c9\u756a\u53f7\n//      \u30ea\u30d3\u30b8\u30e7\u30f3\n//\n// \u3059\u3079\u3066\u306e\u5024\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001\u6b21\u3092\u4f7f\u7528\u3057\u3066\u30d3\u30eb\u30c9\u756a\u53f7\u3068\u30ea\u30d3\u30b8\u30e7\u30f3\u756a\u53f7\u3092\u65e2\u5b9a\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\n// \u65e2\u5b9a\u5024\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// \u65e2\u5b9a\u5024\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
