{"filename": "cpp/Demo_2020-02-15/Client/mainForm.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Threading.Tasks;", "using System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace csharp_test_client\n{\n    public partial class mainForm : Form\n    {\n        ClientSimpleTcp Network = new ClientSimpleTcp();\n\n        bool IsNetworkThreadRunning = false;\n        bool IsBackGroundProcessRunning = false;\n\n        System.Threading.Thread NetworkReadThread = null;\n        System.Threading.Thread NetworkSendThread = null;\n\n        PacketBufferManager PacketBuffer = new PacketBufferManager();\n        Queue<PacketData> RecvPacketQueue = new Queue<PacketData>();\n        Queue<byte[]> SendPacketQueue = new Queue<byte[]>();\n\n        System.Windows.Threading.DispatcherTimer dispatcherUITimer;\n\n\n        public mainForm()\n        {\n            InitializeComponent();\n        }\n", "        private void mainForm_Load(object sender, EventArgs e)\n        {\n            PacketBuffer.Init((8096 * 10), PacketDef.PACKET_HEADER_SIZE, 1024);\n\n            IsNetworkThreadRunning = true;\n            NetworkReadThread = new System.Threading.Thread(this.NetworkReadProcess);\n            NetworkReadThread.Start();\n            NetworkSendThread = new System.Threading.Thread(this.NetworkSendProcess);\n            NetworkSendThread.Start();\n\n            IsBackGroundProcessRunning = true;\n            dispatcherUITimer = new System.Windows.Threading.DispatcherTimer();\n            dispatcherUITimer.Tick += new EventHandler(BackGroundProcess);\n            dispatcherUITimer.Interval = new TimeSpan(0, 0, 0, 0, 100);\n            dispatcherUITimer.Start();\n\n            btnDisconnect.Enabled = false;\n\n            SetPacketHandler();\n            DevLog.Write(\"\ud504\ub85c\uadf8\ub7a8 \uc2dc\uc791 !!!\", LOG_LEVEL.INFO);\n        }\n", "        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            IsNetworkThreadRunning = false;\n            IsBackGroundProcessRunning = false;\n\n            Network.Close();\n        }\n\n        private void btnConnect_Click(object sender, EventArgs e)\n        {\n            string address = textBoxIP.Text;\n", "        private void btnConnect_Click(object sender, EventArgs e)\n        {\n            string address = textBoxIP.Text;\n\n            if (checkBoxLocalHostIP.Checked)\n            {\n                address = \"127.0.0.1\";\n            }\n\n            int port = Convert.ToInt32(textBoxPort.Text);\n", "            if (Network.Connect(address, port))\n            {\n                labelStatus.Text = string.Format(\"{0}. \uc11c\ubc84\uc5d0 \uc811\uc18d \uc911\", DateTime.Now);\n                btnConnect.Enabled = false;\n                btnDisconnect.Enabled = true;\n\n                DevLog.Write($\"\uc11c\ubc84\uc5d0 \uc811\uc18d \uc911\", LOG_LEVEL.INFO);\n            }\n            else\n            {\n                labelStatus.Text = string.Format(\"{0}. \uc11c\ubc84\uc5d0 \uc811\uc18d \uc2e4\ud328\", DateTime.Now);\n            }\n        }\n", "        private void btnDisconnect_Click(object sender, EventArgs e)\n        {\n            SetDisconnectd();\n            Network.Close();\n        }\n\n        private void button1_Click(object sender, EventArgs e)\n        {\n            if (string.IsNullOrEmpty(textSendText.Text))\n            {\n                MessageBox.Show(\"\ubcf4\ub0bc \ud14d\uc2a4\ud2b8\ub97c \uc785\ub825\ud558\uc138\uc694\");\n                return;\n            }\n\n            var body = Encoding.UTF8.GetBytes(textSendText.Text);\n\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)(body.Length + PacketDef.PACKET_HEADER_SIZE)));\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)PACKET_ID.DEV_ECHO));\n            dataSource.AddRange(new byte[] { (byte)0 });\n            dataSource.AddRange(body);\n\n            SendPacketQueue.Enqueue(dataSource.ToArray());\n        }\n\n\n\n        void NetworkReadProcess()\n        {\n            const Int16 PacketHeaderSize = PacketDef.PACKET_HEADER_SIZE;\n", "            if (string.IsNullOrEmpty(textSendText.Text))\n            {\n                MessageBox.Show(\"\ubcf4\ub0bc \ud14d\uc2a4\ud2b8\ub97c \uc785\ub825\ud558\uc138\uc694\");\n                return;\n            }\n\n            var body = Encoding.UTF8.GetBytes(textSendText.Text);\n\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)(body.Length + PacketDef.PACKET_HEADER_SIZE)));\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)PACKET_ID.DEV_ECHO));\n            dataSource.AddRange(new byte[] { (byte)0 });\n            dataSource.AddRange(body);\n\n            SendPacketQueue.Enqueue(dataSource.ToArray());\n        }\n\n\n\n        void NetworkReadProcess()\n        {\n            const Int16 PacketHeaderSize = PacketDef.PACKET_HEADER_SIZE;\n", "            while (IsNetworkThreadRunning)\n            {\n                if (Network.IsConnected() == false)\n                {\n                    System.Threading.Thread.Sleep(1);\n                    continue;\n                }\n\n                var recvData = Network.Receive();\n\n                if (recvData != null)\n                {\n                    PacketBuffer.Write(recvData.Item2, 0, recvData.Item1);\n", "                if (recvData != null)\n                {\n                    PacketBuffer.Write(recvData.Item2, 0, recvData.Item1);\n\n                    while (true)\n                    {\n                        var data = PacketBuffer.Read();\n                        if (data.Count < 1)\n                        {\n                            break;\n                        }\n\n                        var packet = new PacketData();\n                        packet.DataSize = (short)(data.Count - PacketHeaderSize);\n                        packet.PacketID = BitConverter.ToInt16(data.Array, data.Offset + 2);\n                        packet.Type = (SByte)data.Array[(data.Offset + 4)];\n                        packet.BodyData = new byte[packet.DataSize];\n                        Buffer.BlockCopy(data.Array, (data.Offset + PacketHeaderSize), packet.BodyData, 0, (data.Count - PacketHeaderSize));\n                        lock (((System.Collections.ICollection)RecvPacketQueue).SyncRoot)\n                        {\n                            RecvPacketQueue.Enqueue(packet);\n                        }\n                    }\n                    \n                    DevLog.Write($\"\ubc1b\uc740 \ub370\uc774\ud130 \ud06c\uae30: {recvData.Item1}\", LOG_LEVEL.INFO);\n                }\n                else\n                {\n                    Network.Close();\n                    SetDisconnectd();\n                    DevLog.Write(\"\uc11c\ubc84\uc640 \uc811\uc18d \uc885\ub8cc !!!\", LOG_LEVEL.INFO);\n                }\n            }\n        }\n\n        void NetworkSendProcess()\n        {", "            while (IsNetworkThreadRunning)\n            {\n                System.Threading.Thread.Sleep(1);\n\n                if (Network.IsConnected() == false)\n                {\n                    continue;\n                }\n\n                lock (((System.Collections.ICollection)SendPacketQueue).SyncRoot)\n                {", "                    if (SendPacketQueue.Count > 0)\n                    {\n                        var packet = SendPacketQueue.Dequeue();\n                        Network.Send(packet);\n                    }\n                }\n            }\n        }\n\n\n        void BackGroundProcess(object sender, EventArgs e)\n        {\n            ProcessLog();\n\n            try\n            {\n                var packet = new PacketData();\n\n                lock (((System.Collections.ICollection)RecvPacketQueue).SyncRoot)\n                {", "                    if (RecvPacketQueue.Count() > 0)\n                    {\n                        packet = RecvPacketQueue.Dequeue();\n                    }\n                }\n\n                if (packet.PacketID != 0)\n                {\n                    PacketProcess(packet);\n                }\n            }", "            catch (Exception ex)\n            {\n                MessageBox.Show(string.Format(\"ReadPacketQueueProcess. error:{0}\", ex.Message));\n            }\n        }\n\n        private void ProcessLog()\n        {\n            // \ub108\ubb34 \uc774 \uc791\uc5c5\ub9cc \ud560 \uc218 \uc5c6\uc73c\ubbc0\ub85c \uc77c\uc815 \uc791\uc5c5 \uc774\uc0c1\uc744 \ud558\uba74 \uc77c\ub2e8 \ud328\uc2a4\ud55c\ub2e4.\n            int logWorkCount = 0;\n", "            while (IsBackGroundProcessRunning)\n            {\n                System.Threading.Thread.Sleep(1);\n\n                string msg;\n\n                if (DevLog.GetLog(out msg))\n                {\n                    ++logWorkCount;\n\n                    if (listBoxLog.Items.Count > 512)\n                    {\n                        listBoxLog.Items.Clear();\n                    }\n\n                    listBoxLog.Items.Add(msg);\n                    listBoxLog.SelectedIndex = listBoxLog.Items.Count - 1;\n                }\n                else\n                {\n                    break;\n                }\n", "                    if (listBoxLog.Items.Count > 512)\n                    {\n                        listBoxLog.Items.Clear();\n                    }\n\n                    listBoxLog.Items.Add(msg);\n                    listBoxLog.SelectedIndex = listBoxLog.Items.Count - 1;\n                }\n                else\n                {\n                    break;\n                }\n", "                if (logWorkCount > 8)\n                {\n                    break;\n                }\n            }\n        }\n\n\n        public void SetDisconnectd()\n        {\n            if (btnConnect.Enabled == false)\n            {\n                btnConnect.Enabled = true;\n                btnDisconnect.Enabled = false;\n            }\n\n            SendPacketQueue.Clear();\n\n            listBoxRoomChatMsg.Items.Clear();\n            listBoxRoomUserList.Items.Clear();\n\n            labelStatus.Text = \"\uc11c\ubc84 \uc811\uc18d\uc774 \ub04a\uc5b4\uc9d0\";\n        }\n", "        public void SetDisconnectd()\n        {\n            if (btnConnect.Enabled == false)\n            {\n                btnConnect.Enabled = true;\n                btnDisconnect.Enabled = false;\n            }\n\n            SendPacketQueue.Clear();\n\n            listBoxRoomChatMsg.Items.Clear();\n            listBoxRoomUserList.Items.Clear();\n\n            labelStatus.Text = \"\uc11c\ubc84 \uc811\uc18d\uc774 \ub04a\uc5b4\uc9d0\";\n        }\n", "        public void PostSendPacket(PACKET_ID packetID, byte[] bodyData)\n        {\n            if (Network.IsConnected() == false)\n            {\n                DevLog.Write(\"\uc11c\ubc84 \uc5f0\uacb0\uc774 \ub418\uc5b4 \uc788\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4\", LOG_LEVEL.ERROR);\n                return;\n            }\n\n            Int16 bodyDataSize = 0;\n            if (bodyData != null)\n            {\n                bodyDataSize = (Int16)bodyData.Length;\n            }\n            var packetSize = bodyDataSize + PacketDef.PACKET_HEADER_SIZE;\n\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)packetSize));\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)packetID));\n            dataSource.AddRange(new byte[] { (byte)0 });\n            ", "            if (bodyData != null)\n            {\n                bodyDataSize = (Int16)bodyData.Length;\n            }\n            var packetSize = bodyDataSize + PacketDef.PACKET_HEADER_SIZE;\n\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)packetSize));\n            dataSource.AddRange(BitConverter.GetBytes((UInt16)packetID));\n            dataSource.AddRange(new byte[] { (byte)0 });\n            ", "            if (bodyData != null)\n            {\n                dataSource.AddRange(bodyData);\n            }\n           \n            SendPacketQueue.Enqueue(dataSource.ToArray());\n        }\n\n        void AddRoomUserList(Int64 userUniqueId, string userID)\n        {\n            var msg = $\"{userUniqueId}: {userID}\";\n            listBoxRoomUserList.Items.Add(msg);\n        }\n\n        void RemoveRoomUserList(Int64 userUniqueId)\n        {\n            object removeItem = null;\n", "            foreach( var user in listBoxRoomUserList.Items)\n            {\n                var items = user.ToString().Split(\":\");\n                if( items[0].ToInt64() == userUniqueId)\n                {\n                    removeItem = user;\n                    return;\n                }\n            }\n\n            if (removeItem != null)\n            {\n                listBoxRoomUserList.Items.Remove(removeItem);\n            }\n        }\n\n\n        // \ub85c\uadf8\uc778 \uc694\uccad", "            if (removeItem != null)\n            {\n                listBoxRoomUserList.Items.Remove(removeItem);\n            }\n        }\n\n\n        // \ub85c\uadf8\uc778 \uc694\uccad\n        private void button2_Click(object sender, EventArgs e)\n        {\n            var loginReq = new LoginReqPacket();\n            loginReq.SetValue(textBoxUserID.Text, textBoxUserPW.Text);\n                    \n            PostSendPacket(PACKET_ID.LOGIN_REQ, loginReq.ToBytes());            \n            DevLog.Write($\"\ub85c\uadf8\uc778 \uc694\uccad:  {textBoxUserID.Text}, {textBoxUserPW.Text}\");\n        }\n", "        private void button2_Click(object sender, EventArgs e)\n        {\n            var loginReq = new LoginReqPacket();\n            loginReq.SetValue(textBoxUserID.Text, textBoxUserPW.Text);\n                    \n            PostSendPacket(PACKET_ID.LOGIN_REQ, loginReq.ToBytes());            \n            DevLog.Write($\"\ub85c\uadf8\uc778 \uc694\uccad:  {textBoxUserID.Text}, {textBoxUserPW.Text}\");\n        }\n\n        private void btn_RoomEnter_Click(object sender, EventArgs e)\n        {\n            var requestPkt = new RoomEnterReqPacket();\n            requestPkt.SetValue(textBoxRoomNumber.Text.ToInt32());\n\n            PostSendPacket(PACKET_ID.ROOM_ENTER_REQ, requestPkt.ToBytes());\n            DevLog.Write($\"\ubc29 \uc785\uc7a5 \uc694\uccad:  {textBoxRoomNumber.Text} \ubc88\");\n        }\n", "        private void btn_RoomEnter_Click(object sender, EventArgs e)\n        {\n            var requestPkt = new RoomEnterReqPacket();\n            requestPkt.SetValue(textBoxRoomNumber.Text.ToInt32());\n\n            PostSendPacket(PACKET_ID.ROOM_ENTER_REQ, requestPkt.ToBytes());\n            DevLog.Write($\"\ubc29 \uc785\uc7a5 \uc694\uccad:  {textBoxRoomNumber.Text} \ubc88\");\n        }\n\n        private void btn_RoomLeave_Click(object sender, EventArgs e)\n        {\n            PostSendPacket(PACKET_ID.ROOM_LEAVE_REQ,  null);\n            DevLog.Write($\"\ubc29 \uc785\uc7a5 \uc694\uccad:  {textBoxRoomNumber.Text} \ubc88\");\n        }\n", "        private void btn_RoomLeave_Click(object sender, EventArgs e)\n        {\n            PostSendPacket(PACKET_ID.ROOM_LEAVE_REQ,  null);\n            DevLog.Write($\"\ubc29 \uc785\uc7a5 \uc694\uccad:  {textBoxRoomNumber.Text} \ubc88\");\n        }\n\n        private void btnRoomChat_Click(object sender, EventArgs e)\n        {\n            if(textBoxRoomSendMsg.Text.IsEmpty())\n            {\n                MessageBox.Show(\"\ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \uc785\ub825\ud558\uc138\uc694\");\n                return;\n            }\n\n            var requestPkt = new RoomChatReqPacket();\n            requestPkt.SetValue(textBoxRoomSendMsg.Text);\n\n            PostSendPacket(PACKET_ID.ROOM_CHAT_REQ, requestPkt.ToBytes());\n            DevLog.Write($\"\ubc29 \ucc44\ud305 \uc694\uccad\");\n        }\n", "            if(textBoxRoomSendMsg.Text.IsEmpty())\n            {\n                MessageBox.Show(\"\ucc44\ud305 \uba54\uc2dc\uc9c0\ub97c \uc785\ub825\ud558\uc138\uc694\");\n                return;\n            }\n\n            var requestPkt = new RoomChatReqPacket();\n            requestPkt.SetValue(textBoxRoomSendMsg.Text);\n\n            PostSendPacket(PACKET_ID.ROOM_CHAT_REQ, requestPkt.ToBytes());\n            DevLog.Write($\"\ubc29 \ucc44\ud305 \uc694\uccad\");\n        }\n", "        private void btnRoomRelay_Click(object sender, EventArgs e)\n        {\n            //if( textBoxRelay.Text.IsEmpty())\n            //{\n            //    MessageBox.Show(\"\ub9b4\ub808\uc774 \ud560 \ub370\uc774\ud130\uac00 \uc5c6\uc2b5\ub2c8\ub2e4\");\n            //    return;\n            //}\n            \n            //var bodyData = Encoding.UTF8.GetBytes(textBoxRelay.Text);\n            //PostSendPacket(PACKET_ID.PACKET_ID_ROOM_RELAY_REQ, bodyData);\n            //DevLog.Write($\"\ubc29 \ub9b4\ub808\uc774 \uc694\uccad\");\n        }\n\n        // \ub85c\uadf8\uc778\uc11c\ubc84\uc5d0 \ub85c\uadf8\uc778 \uc694\uccad\ud558\uae30", "        private async void button3_Click(object sender, EventArgs e)\n        {\n            var client = new HttpClient();\n            \n            var loginJson = new LoginReqJson { userID = textBox2.Text, userPW = \"hhh\" };\n            var json = Utf8Json.JsonSerializer.ToJsonString(loginJson);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            var response = await client.PostAsync(textBox1.Text, content);\n            var responseStream = await response.Content.ReadAsByteArrayAsync();//await response.Content.ReadAsStringAsync();\n            var loginRes = Utf8Json.JsonSerializer.Deserialize<LoginResJson>(responseStream);\n", "            if (loginRes.result == 1)\n            {\n                textBoxIP.Text = loginRes.gameServerIP;\n                textBoxPort.Text = loginRes.gameServerPort.ToString();\n                textBoxUserID.Text = textBox2.Text;\n                textBoxUserPW.Text = loginRes.authToken;\n\n                DevLog.Write($\"[\uc131\uacf5] LoginServer\uc5d0 \ub85c\uadf8\uc778 \uc694\uccad\");\n            }\n            else\n            {\n                DevLog.Write($\"[\uc2e4\ud328] LoginServer\uc5d0 \ub85c\uadf8\uc778 \uc694\uccad !!!\");\n            }\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/ClientSimpleTcp.cs", "chunked_list": ["\ufeffusing System;\nusing System.Net.Sockets;\nusing System.Net;\n\nnamespace csharp_test_client\n{\n    public class ClientSimpleTcp\n    {\n        public Socket Sock = null;   \n        public string LatestErrorMsg;\n        \n\n        //\uc18c\ucf13\uc5f0\uacb0        ", "        public Socket Sock = null;   \n        public string LatestErrorMsg;\n        \n\n        //\uc18c\ucf13\uc5f0\uacb0        \n        public bool Connect(string ip, int port)\n        {\n            try\n            {\n                IPAddress serverIP = IPAddress.Parse(ip);\n                int serverPort = port;\n\n                Sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n                Sock.Connect(new IPEndPoint(serverIP, serverPort));\n", "                if (Sock == null || Sock.Connected == false)\n                {\n                    return false;\n                }\n\n                return true;\n            }\n            catch (Exception ex)\n            {\n                LatestErrorMsg = ex.Message;\n                return false;\n            }\n        }\n\n        public Tuple<int,byte[]> Receive()\n        {\n\n            try\n            {\n                byte[] ReadBuffer = new byte[2048];\n                var nRecv = Sock.Receive(ReadBuffer, 0, ReadBuffer.Length, SocketFlags.None);\n", "                if (nRecv == 0)\n                {\n                    return null;\n                }\n\n                return Tuple.Create(nRecv,ReadBuffer);\n            }\n            catch (SocketException se)\n            {\n                LatestErrorMsg = se.Message;\n            }\n\n            return null;\n        }\n\n        //\uc2a4\ud2b8\ub9bc\uc5d0 \uc4f0\uae30", "        public void Send(byte[] sendData)\n        {\n            try\n            {\n                if (Sock != null && Sock.Connected) //\uc5f0\uacb0\uc0c1\ud0dc \uc720\ubb34 \ud655\uc778\n                {\n                    Sock.Send(sendData, 0, sendData.Length, SocketFlags.None);\n                }\n                else\n                {\n                    LatestErrorMsg = \"\uba3c\uc800 \ucc44\ud305\uc11c\ubc84\uc5d0 \uc811\uc18d\ud558\uc138\uc694!\";\n                }\n            }", "            catch (SocketException se)\n            {\n                LatestErrorMsg = se.Message;\n            }\n        }\n\n        //\uc18c\ucf13\uacfc \uc2a4\ud2b8\ub9bc \ub2eb\uae30\n        public void Close()\n        {\n            if (Sock != null && Sock.Connected)\n            {\n                //Sock.Shutdown(SocketShutdown.Both);\n                Sock.Close();\n            }\n        }\n", "            if (Sock != null && Sock.Connected)\n            {\n                //Sock.Shutdown(SocketShutdown.Both);\n                Sock.Close();\n            }\n        }\n\n        public bool IsConnected() { return (Sock != null && Sock.Connected) ? true : false; }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/PacketDefine.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace csharp_test_client\n{\n    class PacketDef\n    {\n        public const Int16 PACKET_HEADER_SIZE = 5;", "    class PacketDef\n    {\n        public const Int16 PACKET_HEADER_SIZE = 5;\n        public const int MAX_USER_ID_BYTE_LENGTH = 33;\n        public const int MAX_USER_PW_BYTE_LENGTH = 33;\n        public const int MAX_CHAT_MSG_SIZE = 257;\n    }\n\n    public enum PACKET_ID : ushort\n    {\n        DEV_ECHO = 1,\n\n        // \ub85c\uadf8\uc778\n        LOGIN_REQ = 201,\n        LOGIN_RES = 202,\n                \n        ROOM_ENTER_REQ = 206,\n        ROOM_ENTER_RES = 207,        \n        ROOM_NEW_USER_NTF = 208,\n        ROOM_USER_LIST_NTF = 209,\n\n        ROOM_LEAVE_REQ = 215,\n        ROOM_LEAVE_RES = 216,\n        ROOM_LEAVE_USER_NTF = 217,\n\n        ROOM_CHAT_REQ = 221,\n        ROOM_CHAT_RES = 222,\n        ROOM_CHAT_NOTIFY = 223,\n    }\n\n", "    public enum PACKET_ID : ushort\n    {\n        DEV_ECHO = 1,\n\n        // \ub85c\uadf8\uc778\n        LOGIN_REQ = 201,\n        LOGIN_RES = 202,\n                \n        ROOM_ENTER_REQ = 206,\n        ROOM_ENTER_RES = 207,        \n        ROOM_NEW_USER_NTF = 208,\n        ROOM_USER_LIST_NTF = 209,\n\n        ROOM_LEAVE_REQ = 215,\n        ROOM_LEAVE_RES = 216,\n        ROOM_LEAVE_USER_NTF = 217,\n\n        ROOM_CHAT_REQ = 221,\n        ROOM_CHAT_RES = 222,\n        ROOM_CHAT_NOTIFY = 223,\n    }\n\n", "    public enum ERROR_CODE : Int16\n    {\n        ERROR_NONE = 0,\n\n\n\n        ERROR_CODE_USER_MGR_INVALID_USER_UNIQUEID = 112,\n\n        ERROR_CODE_PUBLIC_CHANNEL_IN_USER = 114,\n\n        ERROR_CODE_PUBLIC_CHANNEL_INVALIDE_NUMBER = 115,\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/DevLog.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing System.Runtime.CompilerServices;\nusing System.Threading;\n\nnamespace csharp_test_client", "\nnamespace csharp_test_client\n{\n    public class DevLog\n    {\n        static System.Collections.Concurrent.ConcurrentQueue<string> logMsgQueue = new System.Collections.Concurrent.ConcurrentQueue<string>();\n\n        static Int64 \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8 = (Int64)LOG_LEVEL.TRACE;\n\n        \n", "        static public void Init(LOG_LEVEL logLevel)\n        {\n            ChangeLogLevel(logLevel);\n        }\n\n        static public void ChangeLogLevel(LOG_LEVEL logLevel)\n        {\n            Interlocked.Exchange(ref \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8, (int)logLevel);\n        }\n\n        public static LOG_LEVEL CurrentLogLevel()\n        {\n            var curLogLevel = (LOG_LEVEL)Interlocked.Read(ref \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8);\n            return curLogLevel;\n        }\n", "        public static LOG_LEVEL CurrentLogLevel()\n        {\n            var curLogLevel = (LOG_LEVEL)Interlocked.Read(ref \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8);\n            return curLogLevel;\n        }\n\n        static public void Write(string msg, LOG_LEVEL logLevel = LOG_LEVEL.TRACE,\n                                [CallerFilePath] string fileName = \"\",\n                                [CallerMemberName] string methodName = \"\",\n                                [CallerLineNumber] int lineNumber = 0)\n        {", "            if (CurrentLogLevel() <= logLevel)\n            {\n                logMsgQueue.Enqueue(string.Format(\"{0}:{1}| {2}\", DateTime.Now, methodName, msg));\n            }\n        }\n\n        static public bool GetLog(out string msg)\n        {\n            if (logMsgQueue.TryDequeue(out msg))\n            {\n                return true;\n            }\n\n            return false;\n        }\n        \n    }\n\n", "            if (logMsgQueue.TryDequeue(out msg))\n            {\n                return true;\n            }\n\n            return false;\n        }\n        \n    }\n\n", "    public enum LOG_LEVEL\n    {\n        TRACE,\n        DEBUG,\n        INFO,\n        WARN,\n        ERROR,\n        DISABLE\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/mainForm.Designer.cs", "chunked_list": ["\ufeffnamespace csharp_test_client\n{\n    partial class mainForm\n    {\n        /// <summary>\n        /// \ud544\uc218 \ub514\uc790\uc774\ub108 \ubcc0\uc218\uc785\ub2c8\ub2e4.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// \uc0ac\uc6a9 \uc911\uc778 \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4\ub97c \uc815\ub9ac\ud569\ub2c8\ub2e4.\n        /// </summary>\n        /// <param name=\"disposing\">\uad00\ub9ac\ub418\ub294 \ub9ac\uc18c\uc2a4\ub97c \uc0ad\uc81c\ud574\uc57c \ud558\uba74 true\uc774\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 false\uc785\ub2c8\ub2e4.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Windows Form \ub514\uc790\uc774\ub108\uc5d0\uc11c \uc0dd\uc131\ud55c \ucf54\ub4dc\n\n        /// <summary>\n        /// \ub514\uc790\uc774\ub108 \uc9c0\uc6d0\uc5d0 \ud544\uc694\ud55c \uba54\uc11c\ub4dc\uc785\ub2c8\ub2e4. \n        /// \uc774 \uba54\uc11c\ub4dc\uc758 \ub0b4\uc6a9\uc744 \ucf54\ub4dc \ud3b8\uc9d1\uae30\ub85c \uc218\uc815\ud558\uc9c0 \ub9c8\uc138\uc694.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            this.btnDisconnect = new System.Windows.Forms.Button();\n            this.btnConnect = new System.Windows.Forms.Button();\n            this.groupBox5 = new System.Windows.Forms.GroupBox();\n            this.textBoxPort = new System.Windows.Forms.TextBox();\n            this.label10 = new System.Windows.Forms.Label();\n            this.checkBoxLocalHostIP = new System.Windows.Forms.CheckBox();\n            this.textBoxIP = new System.Windows.Forms.TextBox();\n            this.label9 = new System.Windows.Forms.Label();\n            this.button1 = new System.Windows.Forms.Button();\n            this.textSendText = new System.Windows.Forms.TextBox();\n            this.labelStatus = new System.Windows.Forms.Label();\n            this.listBoxLog = new System.Windows.Forms.ListBox();\n            this.label1 = new System.Windows.Forms.Label();\n            this.textBoxUserID = new System.Windows.Forms.TextBox();\n            this.textBoxUserPW = new System.Windows.Forms.TextBox();\n            this.label2 = new System.Windows.Forms.Label();\n            this.button2 = new System.Windows.Forms.Button();\n            this.Room = new System.Windows.Forms.GroupBox();\n            this.textBoxRelay = new System.Windows.Forms.TextBox();\n            this.btnRoomRelay = new System.Windows.Forms.Button();\n            this.btnRoomChat = new System.Windows.Forms.Button();\n            this.textBoxRoomSendMsg = new System.Windows.Forms.TextBox();\n            this.listBoxRoomChatMsg = new System.Windows.Forms.ListBox();\n            this.label4 = new System.Windows.Forms.Label();\n            this.listBoxRoomUserList = new System.Windows.Forms.ListBox();\n            this.btn_RoomLeave = new System.Windows.Forms.Button();\n            this.btn_RoomEnter = new System.Windows.Forms.Button();\n            this.textBoxRoomNumber = new System.Windows.Forms.TextBox();\n            this.label3 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n            this.button3 = new System.Windows.Forms.Button();\n            this.textBox2 = new System.Windows.Forms.TextBox();\n            this.label6 = new System.Windows.Forms.Label();\n            this.textBox1 = new System.Windows.Forms.TextBox();\n            this.label5 = new System.Windows.Forms.Label();\n            this.groupBox5.SuspendLayout();\n            this.Room.SuspendLayout();\n            this.groupBox1.SuspendLayout();\n            this.SuspendLayout();\n            // \n            // btnDisconnect\n            // \n            this.btnDisconnect.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.btnDisconnect.Location = new System.Drawing.Point(322, 18);\n            this.btnDisconnect.Name = \"btnDisconnect\";\n            this.btnDisconnect.Size = new System.Drawing.Size(101, 28);\n            this.btnDisconnect.TabIndex = 29;\n            this.btnDisconnect.Text = \"\uc811\uc18d \ub04a\uae30\";\n            this.btnDisconnect.UseVisualStyleBackColor = true;\n            this.btnDisconnect.Click += new System.EventHandler(this.btnDisconnect_Click);\n            // \n            // btnConnect\n            // \n            this.btnConnect.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.btnConnect.Location = new System.Drawing.Point(430, 18);\n            this.btnConnect.Name = \"btnConnect\";\n            this.btnConnect.Size = new System.Drawing.Size(101, 28);\n            this.btnConnect.TabIndex = 28;\n            this.btnConnect.Text = \"\uc811\uc18d\ud558\uae30\";\n            this.btnConnect.UseVisualStyleBackColor = true;\n            this.btnConnect.Click += new System.EventHandler(this.btnConnect_Click);\n            // \n            // groupBox5\n            // \n            this.groupBox5.Controls.Add(this.textBoxPort);\n            this.groupBox5.Controls.Add(this.label10);\n            this.groupBox5.Controls.Add(this.checkBoxLocalHostIP);\n            this.groupBox5.Controls.Add(this.textBoxIP);\n            this.groupBox5.Controls.Add(this.label9);\n            this.groupBox5.Controls.Add(this.btnDisconnect);\n            this.groupBox5.Controls.Add(this.btnConnect);\n            this.groupBox5.Location = new System.Drawing.Point(14, 65);\n            this.groupBox5.Name = \"groupBox5\";\n            this.groupBox5.Size = new System.Drawing.Size(571, 65);\n            this.groupBox5.TabIndex = 27;\n            this.groupBox5.TabStop = false;\n            this.groupBox5.Text = \"Socket \ub354\ubbf8 \ud074\ub77c\uc774\uc5b8\ud2b8 \uc124\uc815\";\n            // \n            // textBoxPort\n            // \n            this.textBoxPort.Location = new System.Drawing.Point(257, 18);\n            this.textBoxPort.MaxLength = 6;\n            this.textBoxPort.Name = \"textBoxPort\";\n            this.textBoxPort.Size = new System.Drawing.Size(58, 22);\n            this.textBoxPort.TabIndex = 18;\n            this.textBoxPort.Text = \"11021\";\n            this.textBoxPort.WordWrap = false;\n            // \n            // label10\n            // \n            this.label10.AutoSize = true;\n            this.label10.Location = new System.Drawing.Point(186, 23);\n            this.label10.Name = \"label10\";\n            this.label10.Size = new System.Drawing.Size(73, 14);\n            this.label10.TabIndex = 17;\n            this.label10.Text = \"\ud3ec\ud2b8 \ubc88\ud638:\";\n            // \n            // checkBoxLocalHostIP\n            // \n            this.checkBoxLocalHostIP.AutoSize = true;\n            this.checkBoxLocalHostIP.Checked = true;\n            this.checkBoxLocalHostIP.CheckState = System.Windows.Forms.CheckState.Checked;\n            this.checkBoxLocalHostIP.Location = new System.Drawing.Point(13, 41);\n            this.checkBoxLocalHostIP.Name = \"checkBoxLocalHostIP\";\n            this.checkBoxLocalHostIP.Size = new System.Drawing.Size(119, 18);\n            this.checkBoxLocalHostIP.TabIndex = 15;\n            this.checkBoxLocalHostIP.Text = \"localhost \uc0ac\uc6a9\";\n            this.checkBoxLocalHostIP.UseVisualStyleBackColor = true;\n            // \n            // textBoxIP\n            // \n            this.textBoxIP.Location = new System.Drawing.Point(78, 18);\n            this.textBoxIP.MaxLength = 6;\n            this.textBoxIP.Name = \"textBoxIP\";\n            this.textBoxIP.Size = new System.Drawing.Size(99, 22);\n            this.textBoxIP.TabIndex = 11;\n            this.textBoxIP.Text = \"0.0.0.0\";\n            this.textBoxIP.WordWrap = false;\n            // \n            // label9\n            // \n            this.label9.AutoSize = true;\n            this.label9.Location = new System.Drawing.Point(7, 23);\n            this.label9.Name = \"label9\";\n            this.label9.Size = new System.Drawing.Size(73, 14);\n            this.label9.TabIndex = 10;\n            this.label9.Text = \"\uc11c\ubc84 \uc8fc\uc18c:\";\n            // \n            // button1\n            // \n            this.button1.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.button1.Location = new System.Drawing.Point(365, 137);\n            this.button1.Name = \"button1\";\n            this.button1.Size = new System.Drawing.Size(114, 28);\n            this.button1.TabIndex = 39;\n            this.button1.Text = \"echo \ubcf4\ub0b4\uae30\";\n            this.button1.UseVisualStyleBackColor = true;\n            this.button1.Click += new System.EventHandler(this.button1_Click);\n            // \n            // textSendText\n            // \n            this.textSendText.Location = new System.Drawing.Point(14, 141);\n            this.textSendText.MaxLength = 32;\n            this.textSendText.Name = \"textSendText\";\n            this.textSendText.Size = new System.Drawing.Size(343, 22);\n            this.textSendText.TabIndex = 38;\n            this.textSendText.Text = \"test1\";\n            this.textSendText.WordWrap = false;\n            // \n            // labelStatus\n            // \n            this.labelStatus.AutoSize = true;\n            this.labelStatus.Location = new System.Drawing.Point(11, 733);\n            this.labelStatus.Name = \"labelStatus\";\n            this.labelStatus.Size = new System.Drawing.Size(135, 14);\n            this.labelStatus.TabIndex = 40;\n            this.labelStatus.Text = \"\uc11c\ubc84 \uc811\uc18d \uc0c1\ud0dc: ???\";\n            // \n            // listBoxLog\n            // \n            this.listBoxLog.FormattingEnabled = true;\n            this.listBoxLog.HorizontalScrollbar = true;\n            this.listBoxLog.Location = new System.Drawing.Point(11, 494);\n            this.listBoxLog.Name = \"listBoxLog\";\n            this.listBoxLog.Size = new System.Drawing.Size(567, 225);\n            this.listBoxLog.TabIndex = 41;\n            // \n            // label1\n            // \n            this.label1.AutoSize = true;\n            this.label1.Location = new System.Drawing.Point(11, 183);\n            this.label1.Name = \"label1\";\n            this.label1.Size = new System.Drawing.Size(55, 14);\n            this.label1.TabIndex = 42;\n            this.label1.Text = \"UserID:\";\n            // \n            // textBoxUserID\n            // \n            this.textBoxUserID.Location = new System.Drawing.Point(78, 180);\n            this.textBoxUserID.MaxLength = 6;\n            this.textBoxUserID.Name = \"textBoxUserID\";\n            this.textBoxUserID.Size = new System.Drawing.Size(99, 22);\n            this.textBoxUserID.TabIndex = 43;\n            this.textBoxUserID.Text = \"jacking75\";\n            this.textBoxUserID.WordWrap = false;\n            // \n            // textBoxUserPW\n            // \n            this.textBoxUserPW.Location = new System.Drawing.Point(262, 180);\n            this.textBoxUserPW.MaxLength = 6;\n            this.textBoxUserPW.Name = \"textBoxUserPW\";\n            this.textBoxUserPW.Size = new System.Drawing.Size(99, 22);\n            this.textBoxUserPW.TabIndex = 45;\n            this.textBoxUserPW.Text = \"jacking75\";\n            this.textBoxUserPW.WordWrap = false;\n            // \n            // label2\n            // \n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(195, 185);\n            this.label2.Name = \"label2\";\n            this.label2.Size = new System.Drawing.Size(70, 14);\n            this.label2.TabIndex = 44;\n            this.label2.Text = \"PassWD:\";\n            // \n            // button2\n            // \n            this.button2.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.button2.Location = new System.Drawing.Point(368, 177);\n            this.button2.Name = \"button2\";\n            this.button2.Size = new System.Drawing.Size(166, 28);\n            this.button2.TabIndex = 46;\n            this.button2.Text = \"Login\";\n            this.button2.UseVisualStyleBackColor = true;\n            this.button2.Click += new System.EventHandler(this.button2_Click);\n            // \n            // Room\n            // \n            this.Room.Controls.Add(this.textBoxRelay);\n            this.Room.Controls.Add(this.btnRoomRelay);\n            this.Room.Controls.Add(this.btnRoomChat);\n            this.Room.Controls.Add(this.textBoxRoomSendMsg);\n            this.Room.Controls.Add(this.listBoxRoomChatMsg);\n            this.Room.Controls.Add(this.label4);\n            this.Room.Controls.Add(this.listBoxRoomUserList);\n            this.Room.Controls.Add(this.btn_RoomLeave);\n            this.Room.Controls.Add(this.btn_RoomEnter);\n            this.Room.Controls.Add(this.textBoxRoomNumber);\n            this.Room.Controls.Add(this.label3);\n            this.Room.Location = new System.Drawing.Point(13, 209);\n            this.Room.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);\n            this.Room.Name = \"Room\";\n            this.Room.Padding = new System.Windows.Forms.Padding(3, 2, 3, 2);\n            this.Room.Size = new System.Drawing.Size(566, 271);\n            this.Room.TabIndex = 47;\n            this.Room.TabStop = false;\n            this.Room.Text = \"Room\";\n            // \n            // textBoxRelay\n            // \n            this.textBoxRelay.Location = new System.Drawing.Point(350, 26);\n            this.textBoxRelay.MaxLength = 6;\n            this.textBoxRelay.Name = \"textBoxRelay\";\n            this.textBoxRelay.Size = new System.Drawing.Size(124, 22);\n            this.textBoxRelay.TabIndex = 55;\n            this.textBoxRelay.Text = \"test\";\n            this.textBoxRelay.WordWrap = false;\n            // \n            // btnRoomRelay\n            // \n            this.btnRoomRelay.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.btnRoomRelay.Location = new System.Drawing.Point(480, 22);\n            this.btnRoomRelay.Name = \"btnRoomRelay\";\n            this.btnRoomRelay.Size = new System.Drawing.Size(75, 28);\n            this.btnRoomRelay.TabIndex = 54;\n            this.btnRoomRelay.Text = \"Relay\";\n            this.btnRoomRelay.UseVisualStyleBackColor = true;\n            this.btnRoomRelay.Click += new System.EventHandler(this.btnRoomRelay_Click);\n            // \n            // btnRoomChat\n            // \n            this.btnRoomChat.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.btnRoomChat.Location = new System.Drawing.Point(499, 230);\n            this.btnRoomChat.Name = \"btnRoomChat\";\n            this.btnRoomChat.Size = new System.Drawing.Size(57, 28);\n            this.btnRoomChat.TabIndex = 53;\n            this.btnRoomChat.Text = \"chat\";\n            this.btnRoomChat.UseVisualStyleBackColor = true;\n            this.btnRoomChat.Click += new System.EventHandler(this.btnRoomChat_Click);\n            // \n            // textBoxRoomSendMsg\n            // \n            this.textBoxRoomSendMsg.Location = new System.Drawing.Point(15, 233);\n            this.textBoxRoomSendMsg.MaxLength = 32;\n            this.textBoxRoomSendMsg.Name = \"textBoxRoomSendMsg\";\n            this.textBoxRoomSendMsg.Size = new System.Drawing.Size(478, 22);\n            this.textBoxRoomSendMsg.TabIndex = 52;\n            this.textBoxRoomSendMsg.Text = \"test1\";\n            this.textBoxRoomSendMsg.WordWrap = false;\n            // \n            // listBoxRoomChatMsg\n            // \n            this.listBoxRoomChatMsg.FormattingEnabled = true;\n            this.listBoxRoomChatMsg.Location = new System.Drawing.Point(165, 70);\n            this.listBoxRoomChatMsg.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);\n            this.listBoxRoomChatMsg.Name = \"listBoxRoomChatMsg\";\n            this.listBoxRoomChatMsg.Size = new System.Drawing.Size(391, 147);\n            this.listBoxRoomChatMsg.TabIndex = 51;\n            // \n            // label4\n            // \n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(11, 55);\n            this.label4.Name = \"label4\";\n            this.label4.Size = new System.Drawing.Size(70, 14);\n            this.label4.TabIndex = 50;\n            this.label4.Text = \"User List:\";\n            // \n            // listBoxRoomUserList\n            // \n            this.listBoxRoomUserList.FormattingEnabled = true;\n            this.listBoxRoomUserList.Location = new System.Drawing.Point(15, 72);\n            this.listBoxRoomUserList.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);\n            this.listBoxRoomUserList.Name = \"listBoxRoomUserList\";\n            this.listBoxRoomUserList.Size = new System.Drawing.Size(140, 147);\n            this.listBoxRoomUserList.TabIndex = 49;\n            // \n            // btn_RoomLeave\n            // \n            this.btn_RoomLeave.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.btn_RoomLeave.Location = new System.Drawing.Point(247, 21);\n            this.btn_RoomLeave.Name = \"btn_RoomLeave\";\n            this.btn_RoomLeave.Size = new System.Drawing.Size(75, 28);\n            this.btn_RoomLeave.TabIndex = 48;\n            this.btn_RoomLeave.Text = \"Leave\";\n            this.btn_RoomLeave.UseVisualStyleBackColor = true;\n            this.btn_RoomLeave.Click += new System.EventHandler(this.btn_RoomLeave_Click);\n            // \n            // btn_RoomEnter\n            // \n            this.btn_RoomEnter.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.btn_RoomEnter.Location = new System.Drawing.Point(165, 20);\n            this.btn_RoomEnter.Name = \"btn_RoomEnter\";\n            this.btn_RoomEnter.Size = new System.Drawing.Size(75, 28);\n            this.btn_RoomEnter.TabIndex = 47;\n            this.btn_RoomEnter.Text = \"Enter\";\n            this.btn_RoomEnter.UseVisualStyleBackColor = true;\n            this.btn_RoomEnter.Click += new System.EventHandler(this.btn_RoomEnter_Click);\n            // \n            // textBoxRoomNumber\n            // \n            this.textBoxRoomNumber.Location = new System.Drawing.Point(112, 22);\n            this.textBoxRoomNumber.MaxLength = 6;\n            this.textBoxRoomNumber.Name = \"textBoxRoomNumber\";\n            this.textBoxRoomNumber.Size = new System.Drawing.Size(43, 22);\n            this.textBoxRoomNumber.TabIndex = 44;\n            this.textBoxRoomNumber.Text = \"0\";\n            this.textBoxRoomNumber.WordWrap = false;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(6, 27);\n            this.label3.Name = \"label3\";\n            this.label3.Size = new System.Drawing.Size(104, 14);\n            this.label3.TabIndex = 43;\n            this.label3.Text = \"Room Number:\";\n            // \n            // groupBox1\n            // \n            this.groupBox1.Controls.Add(this.button3);\n            this.groupBox1.Controls.Add(this.textBox2);\n            this.groupBox1.Controls.Add(this.label6);\n            this.groupBox1.Controls.Add(this.textBox1);\n            this.groupBox1.Controls.Add(this.label5);\n            this.groupBox1.Location = new System.Drawing.Point(14, 13);\n            this.groupBox1.Name = \"groupBox1\";\n            this.groupBox1.Size = new System.Drawing.Size(566, 46);\n            this.groupBox1.TabIndex = 48;\n            this.groupBox1.TabStop = false;\n            this.groupBox1.Text = \"LoginServer\";\n            // \n            // button3\n            // \n            this.button3.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(129)));\n            this.button3.Location = new System.Drawing.Point(446, 13);\n            this.button3.Name = \"button3\";\n            this.button3.Size = new System.Drawing.Size(66, 28);\n            this.button3.TabIndex = 30;\n            this.button3.Text = \"Login\";\n            this.button3.UseVisualStyleBackColor = true;\n            this.button3.Click += new System.EventHandler(this.button3_Click);\n            // \n            // textBox2\n            // \n            this.textBox2.Location = new System.Drawing.Point(354, 15);\n            this.textBox2.MaxLength = 6;\n            this.textBox2.Name = \"textBox2\";\n            this.textBox2.Size = new System.Drawing.Size(84, 22);\n            this.textBox2.TabIndex = 20;\n            this.textBox2.Text = \"jacking75\";\n            this.textBox2.WordWrap = false;\n            // \n            // label6\n            // \n            this.label6.AutoSize = true;\n            this.label6.Location = new System.Drawing.Point(328, 20);\n            this.label6.Name = \"label6\";\n            this.label6.Size = new System.Drawing.Size(25, 14);\n            this.label6.TabIndex = 19;\n            this.label6.Text = \"ID:\";\n            // \n            // textBox1\n            // \n            this.textBox1.Location = new System.Drawing.Point(83, 14);\n            this.textBox1.MaxLength = 6;\n            this.textBox1.Name = \"textBox1\";\n            this.textBox1.Size = new System.Drawing.Size(219, 22);\n            this.textBox1.TabIndex = 13;\n            this.textBox1.Text = \"http://localhost:19000/api/Login\";\n            this.textBox1.WordWrap = false;\n            // \n            // label5\n            // \n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(11, 18);\n            this.label5.Name = \"label5\";\n            this.label5.Size = new System.Drawing.Size(70, 14);\n            this.label5.TabIndex = 12;\n            this.label5.Text = \"LoginAPI:\";\n            // \n            // mainForm\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(599, 754);\n            this.Controls.Add(this.groupBox1);\n            this.Controls.Add(this.Room);\n            this.Controls.Add(this.button2);\n            this.Controls.Add(this.textBoxUserPW);\n            this.Controls.Add(this.label2);\n            this.Controls.Add(this.textBoxUserID);\n            this.Controls.Add(this.label1);\n            this.Controls.Add(this.labelStatus);\n            this.Controls.Add(this.listBoxLog);\n            this.Controls.Add(this.button1);\n            this.Controls.Add(this.textSendText);\n            this.Controls.Add(this.groupBox5);\n            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Fixed3D;\n            this.Name = \"mainForm\";\n            this.Text = \"\ub124\ud2b8\uc6cc\ud06c \ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8\";\n            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.mainForm_FormClosing);\n            this.Load += new System.EventHandler(this.mainForm_Load);\n            this.groupBox5.ResumeLayout(false);\n            this.groupBox5.PerformLayout();\n            this.Room.ResumeLayout(false);\n            this.Room.PerformLayout();\n            this.groupBox1.ResumeLayout(false);\n            this.groupBox1.PerformLayout();\n            this.ResumeLayout(false);\n            this.PerformLayout();\n\n        }\n\n        #endregion\n\n        private System.Windows.Forms.Button btnDisconnect;\n        private System.Windows.Forms.Button btnConnect;\n        private System.Windows.Forms.GroupBox groupBox5;\n        private System.Windows.Forms.TextBox textBoxPort;\n        private System.Windows.Forms.Label label10;\n        private System.Windows.Forms.CheckBox checkBoxLocalHostIP;\n        private System.Windows.Forms.TextBox textBoxIP;\n        private System.Windows.Forms.Label label9;\n        private System.Windows.Forms.Button button1;\n        private System.Windows.Forms.TextBox textSendText;\n        private System.Windows.Forms.Label labelStatus;\n        private System.Windows.Forms.ListBox listBoxLog;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.TextBox textBoxUserID;\n        private System.Windows.Forms.TextBox textBoxUserPW;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Button button2;\n        private System.Windows.Forms.GroupBox Room;\n        private System.Windows.Forms.Button btn_RoomLeave;\n        private System.Windows.Forms.Button btn_RoomEnter;\n        private System.Windows.Forms.TextBox textBoxRoomNumber;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Button btnRoomChat;\n        private System.Windows.Forms.TextBox textBoxRoomSendMsg;\n        private System.Windows.Forms.ListBox listBoxRoomChatMsg;\n        private System.Windows.Forms.Label label4;\n        private System.Windows.Forms.ListBox listBoxRoomUserList;\n        private System.Windows.Forms.Button btnRoomRelay;\n        private System.Windows.Forms.TextBox textBoxRelay;\n        private System.Windows.Forms.GroupBox groupBox1;\n        private System.Windows.Forms.Button button3;\n        private System.Windows.Forms.TextBox textBox2;\n        private System.Windows.Forms.Label label6;\n        private System.Windows.Forms.TextBox textBox1;\n        private System.Windows.Forms.Label label5;\n    }\n}\n\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/PacketProcessForm.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace csharp_test_client\n{\n    public partial class mainForm\n    {\n        Dictionary<PACKET_ID, Action<byte[]>> PacketFuncDic = new Dictionary<PACKET_ID, Action<byte[]>>();\n\n        void SetPacketHandler()\n        {\n            PacketFuncDic.Add(PACKET_ID.DEV_ECHO, PacketProcess_DevEcho);\n            PacketFuncDic.Add(PACKET_ID.LOGIN_RES, PacketProcess_LoginResponse);\n            PacketFuncDic.Add(PACKET_ID.ROOM_ENTER_RES, PacketProcess_RoomEnterResponse);\n            PacketFuncDic.Add(PACKET_ID.ROOM_USER_LIST_NTF, PacketProcess_RoomUserListNotify);\n            PacketFuncDic.Add(PACKET_ID.ROOM_NEW_USER_NTF, PacketProcess_RoomNewUserNotify);\n            PacketFuncDic.Add(PACKET_ID.ROOM_LEAVE_RES, PacketProcess_RoomLeaveResponse);\n            PacketFuncDic.Add(PACKET_ID.ROOM_LEAVE_USER_NTF, PacketProcess_RoomLeaveUserNotify);\n            PacketFuncDic.Add(PACKET_ID.ROOM_CHAT_RES, PacketProcess_RoomChatResponse);            \n            PacketFuncDic.Add(PACKET_ID.ROOM_CHAT_NOTIFY, PacketProcess_RoomChatNotify);            \n        }\n\n        void PacketProcess(PacketData packet)\n        {\n            var packetType = (PACKET_ID)packet.PacketID;\n            //DevLog.Write(\"Packet Error:  PacketID:{packet.PacketID.ToString()},  Error: {(ERROR_CODE)packet.Result}\");\n            //DevLog.Write(\"RawPacket: \" + packet.PacketID.ToString() + \", \" + PacketDump.Bytes(packet.BodyData));\n", "    public partial class mainForm\n    {\n        Dictionary<PACKET_ID, Action<byte[]>> PacketFuncDic = new Dictionary<PACKET_ID, Action<byte[]>>();\n\n        void SetPacketHandler()\n        {\n            PacketFuncDic.Add(PACKET_ID.DEV_ECHO, PacketProcess_DevEcho);\n            PacketFuncDic.Add(PACKET_ID.LOGIN_RES, PacketProcess_LoginResponse);\n            PacketFuncDic.Add(PACKET_ID.ROOM_ENTER_RES, PacketProcess_RoomEnterResponse);\n            PacketFuncDic.Add(PACKET_ID.ROOM_USER_LIST_NTF, PacketProcess_RoomUserListNotify);\n            PacketFuncDic.Add(PACKET_ID.ROOM_NEW_USER_NTF, PacketProcess_RoomNewUserNotify);\n            PacketFuncDic.Add(PACKET_ID.ROOM_LEAVE_RES, PacketProcess_RoomLeaveResponse);\n            PacketFuncDic.Add(PACKET_ID.ROOM_LEAVE_USER_NTF, PacketProcess_RoomLeaveUserNotify);\n            PacketFuncDic.Add(PACKET_ID.ROOM_CHAT_RES, PacketProcess_RoomChatResponse);            \n            PacketFuncDic.Add(PACKET_ID.ROOM_CHAT_NOTIFY, PacketProcess_RoomChatNotify);            \n        }\n\n        void PacketProcess(PacketData packet)\n        {\n            var packetType = (PACKET_ID)packet.PacketID;\n            //DevLog.Write(\"Packet Error:  PacketID:{packet.PacketID.ToString()},  Error: {(ERROR_CODE)packet.Result}\");\n            //DevLog.Write(\"RawPacket: \" + packet.PacketID.ToString() + \", \" + PacketDump.Bytes(packet.BodyData));\n", "            if (PacketFuncDic.ContainsKey(packetType))\n            {\n                PacketFuncDic[packetType](packet.BodyData);\n            }\n            else\n            {\n                DevLog.Write(\"Unknown Packet Id: \" + packet.PacketID.ToString());\n            }         \n        }\n\n        void PacketProcess_DevEcho(byte[] bodyData)\n        {\n            DevLog.Write($\"Echo:  {Encoding.UTF8.GetString(bodyData)}\");\n        }\n\n\n        void PacketProcess_LoginResponse(byte[] bodyData)\n        {\n            var responsePkt = new LoginResPacket();\n            responsePkt.FromBytes(bodyData);\n\n            DevLog.Write($\"\ub85c\uadf8\uc778 \uacb0\uacfc:  {(ERROR_CODE)responsePkt.Result}\");\n        }\n\n\n        void PacketProcess_RoomEnterResponse(byte[] bodyData)\n        {\n            var responsePkt = new RoomEnterResPacket();\n            responsePkt.FromBytes(bodyData);\n\n            DevLog.Write($\"\ubc29 \uc785\uc7a5 \uacb0\uacfc:  {(ERROR_CODE)responsePkt.Result}\");\n        }\n\n        void PacketProcess_RoomUserListNotify(byte[] bodyData)\n        {\n            var notifyPkt = new RoomUserListNtfPacket();\n            notifyPkt.FromBytes(bodyData);\n", "            for (int i = 0; i < notifyPkt.UserCount; ++i)\n            {\n                AddRoomUserList(notifyPkt.UserUniqueIdList[i], notifyPkt.UserIDList[i]);\n            }\n\n            DevLog.Write($\"\ubc29\uc758 \uae30\uc874 \uc720\uc800 \ub9ac\uc2a4\ud2b8 \ubc1b\uc74c\");\n        }\n\n        void PacketProcess_RoomNewUserNotify(byte[] bodyData)\n        {\n            var notifyPkt = new RoomNewUserNtfPacket();\n            notifyPkt.FromBytes(bodyData);\n\n            AddRoomUserList(notifyPkt.UserUniqueId, notifyPkt.UserID);\n            \n            DevLog.Write($\"\ubc29\uc5d0 \uc0c8\ub85c \ub4e4\uc5b4\uc628 \uc720\uc800 \ubc1b\uc74c\");\n        }\n\n\n        void PacketProcess_RoomLeaveResponse(byte[] bodyData)\n        {\n            var responsePkt = new RoomLeaveResPacket();\n            responsePkt.FromBytes(bodyData);\n\n            DevLog.Write($\"\ubc29 \ub098\uac00\uae30 \uacb0\uacfc:  {(ERROR_CODE)responsePkt.Result}\");\n        }\n\n        void PacketProcess_RoomLeaveUserNotify(byte[] bodyData)\n        {\n            var notifyPkt = new RoomLeaveUserNtfPacket();\n            notifyPkt.FromBytes(bodyData);\n\n            RemoveRoomUserList(notifyPkt.UserUniqueId);\n\n            DevLog.Write($\"\ubc29\uc5d0\uc11c \ub098\uac04 \uc720\uc800 \ubc1b\uc74c\");\n        }\n\n\n        void PacketProcess_RoomChatResponse(byte[] bodyData)\n        {\n            var responsePkt = new RoomChatResPacket();\n            responsePkt.FromBytes(bodyData);\n\n            var errorCode = (ERROR_CODE)responsePkt.Result;\n            var msg = $\"\ubc29 \ucc44\ud305 \uc694\uccad \uacb0\uacfc:  {(ERROR_CODE)responsePkt.Result}\";", "            if (errorCode == ERROR_CODE.ERROR_NONE)\n            {\n                DevLog.Write(msg, LOG_LEVEL.ERROR);\n            }\n            else\n            {\n                AddRoomChatMessageList(\"\", msg);\n            }\n        }\n\n\n        void PacketProcess_RoomChatNotify(byte[] bodyData)\n        {\n            var responsePkt = new RoomChatNtfPacket();\n            responsePkt.FromBytes(bodyData);\n\n            AddRoomChatMessageList(responsePkt.UserID, responsePkt.Message);\n        }\n\n        void AddRoomChatMessageList(string userID, string msgssage)\n        {\n            var msg = $\"{userID}:  {msgssage}\";\n", "            if (listBoxRoomChatMsg.Items.Count > 512)\n            {\n                listBoxRoomChatMsg.Items.Clear();\n            }\n\n            listBoxRoomChatMsg.Items.Add(msg);\n            listBoxRoomChatMsg.SelectedIndex = listBoxRoomChatMsg.Items.Count - 1;\n        }\n\n\n        void PacketProcess_RoomRelayNotify(byte[] bodyData)\n        {\n            var notifyPkt = new RoomRelayNtfPacket();\n            notifyPkt.FromBytes(bodyData);\n\n            var stringData = Encoding.UTF8.GetString(notifyPkt.RelayData);\n            DevLog.Write($\"\ubc29\uc5d0\uc11c \ub9b4\ub808\uc774 \ubc1b\uc74c. {notifyPkt.UserUniqueId} - {stringData}\");\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/PacketBufferManager.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace csharp_test_client\n{\n    class PacketBufferManager\n    {\n        int BufferSize = 0;\n        int ReadPos = 0;\n        int WritePos = 0;\n\n        int HeaderSize = 0;\n        int MaxPacketSize = 0;\n        byte[] PacketData;\n        byte[] PacketDataTemp;\n", "    class PacketBufferManager\n    {\n        int BufferSize = 0;\n        int ReadPos = 0;\n        int WritePos = 0;\n\n        int HeaderSize = 0;\n        int MaxPacketSize = 0;\n        byte[] PacketData;\n        byte[] PacketDataTemp;\n", "        public bool Init(int size, int headerSize, int maxPacketSize)\n        {\n            if (size < (maxPacketSize * 2) || size < 1 || headerSize < 1 || maxPacketSize < 1)\n            {\n                return false;\n            }\n\n            BufferSize = size;\n            PacketData = new byte[size];\n            PacketDataTemp = new byte[size];\n            HeaderSize = headerSize;\n            MaxPacketSize = maxPacketSize;\n\n            return true;\n        }\n", "        public bool Write(byte[] data, int pos, int size)\n        {\n            if (data == null || (data.Length < (pos + size)))\n            {\n                return false;\n            }\n\n            var remainBufferSize = BufferSize - WritePos;\n\n            if (remainBufferSize < size)\n            {\n                return false;\n            }\n\n            Buffer.BlockCopy(data, pos, PacketData, WritePos, size);\n            WritePos += size;\n", "            if (remainBufferSize < size)\n            {\n                return false;\n            }\n\n            Buffer.BlockCopy(data, pos, PacketData, WritePos, size);\n            WritePos += size;\n\n            if (NextFree() == false)\n            {\n                BufferRelocate();\n            }\n            return true;\n        }\n\n        public ArraySegment<byte> Read()\n        {\n            var enableReadSize = WritePos - ReadPos;\n", "            if (NextFree() == false)\n            {\n                BufferRelocate();\n            }\n            return true;\n        }\n\n        public ArraySegment<byte> Read()\n        {\n            var enableReadSize = WritePos - ReadPos;\n", "            if (enableReadSize < HeaderSize)\n            {\n                return new ArraySegment<byte>();\n            }\n\n            var packetDataSize = BitConverter.ToInt16(PacketData, ReadPos);\n            if (enableReadSize < packetDataSize)\n            {\n                return new ArraySegment<byte>();\n            }\n\n            var completePacketData = new ArraySegment<byte>(PacketData, ReadPos, packetDataSize);\n            ReadPos += packetDataSize;\n            return completePacketData;\n        }\n\n        bool NextFree()\n        {\n            var enableWriteSize = BufferSize - WritePos;\n", "            if (enableWriteSize < MaxPacketSize)\n            {\n                return false;\n            }\n\n            return true;\n        }\n\n        void BufferRelocate()\n        {\n            var enableReadSize = WritePos - ReadPos;\n\n            Buffer.BlockCopy(PacketData, ReadPos, PacketDataTemp, 0, enableReadSize);\n            Buffer.BlockCopy(PacketDataTemp, 0, PacketData, 0, enableReadSize);\n\n            ReadPos = 0;\n            WritePos = enableReadSize;\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/Packet.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace csharp_test_client\n{\n    #region LoginServer \n    public class LoginReqJson\n    {", "    #region LoginServer \n    public class LoginReqJson\n    {\n        public string userID { get; set; }\n        public string userPW { get; set; }\n    }\n\n    public class LoginResJson\n    {\n        public int result { get; set; }\n        public string authToken { get; set; }\n", "        public int result { get; set; }\n        public string authToken { get; set; }\n\n        public string gameServerIP { get; set; }\n        public UInt16 gameServerPort { get; set; }\n    }\n    #endregion\n\n\n\n    struct PacketData\n    {", "    struct PacketData\n    {\n        public Int16 DataSize;\n        public Int16 PacketID;\n        public SByte Type;\n        public byte[] BodyData;\n    }\n\n    public class PacketDump\n    {\n        public static string Bytes(byte[] byteArr)\n        {\n            StringBuilder sb = new StringBuilder(\"[\");", "    public class PacketDump\n    {\n        public static string Bytes(byte[] byteArr)\n        {\n            StringBuilder sb = new StringBuilder(\"[\");\n            for (int i = 0; i < byteArr.Length; ++i)\n            {\n                sb.Append(byteArr[i] + \" \");\n            }\n            sb.Append(\"]\");\n            return sb.ToString();\n        }\n    }\n    \n", "    public class ErrorNtfPacket\n    {\n        public ERROR_CODE Error;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            Error = (ERROR_CODE)BitConverter.ToInt16(bodyData, 0);\n            return true;\n        }\n    }\n    \n", "    public class LoginReqPacket\n    {\n        byte[] UserID = new byte[PacketDef.MAX_USER_ID_BYTE_LENGTH];\n        byte[] UserPW = new byte[PacketDef.MAX_USER_PW_BYTE_LENGTH];\n\n        public void SetValue(string userID, string userPW)\n        {\n            Encoding.UTF8.GetBytes(userID).CopyTo(UserID, 0);\n            Encoding.UTF8.GetBytes(userPW).CopyTo(UserPW, 0);\n        }\n\n        public byte[] ToBytes()\n        {\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(UserID);\n            dataSource.AddRange(UserPW);\n            return dataSource.ToArray();\n        }\n    }\n", "    public class LoginResPacket\n    {\n        public UInt16 Result;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            Result = BitConverter.ToUInt16(bodyData, 0);\n            return true;\n        }\n    }\n\n", "    public class RoomEnterReqPacket\n    {\n        int RoomNumber;\n        public void SetValue(int roomNumber)\n        {\n            RoomNumber = roomNumber;\n        }\n\n        public byte[] ToBytes()\n        {\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(BitConverter.GetBytes(RoomNumber));\n            return dataSource.ToArray();\n        }\n    }\n", "    public class RoomEnterResPacket\n    {\n        public UInt16 Result;\n        //public Int64 RoomUserUniqueId;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            Result = BitConverter.ToUInt16(bodyData, 0);\n            //RoomUserUniqueId = BitConverter.ToInt64(bodyData, 2);\n            return true;\n        }\n    }\n", "    public class RoomUserListNtfPacket\n    {\n        public int UserCount = 0;\n        public List<Int64> UserUniqueIdList = new List<Int64>();\n        public List<string> UserIDList = new List<string>();\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            var readPos = 0;\n            var userCount = (SByte)bodyData[readPos];\n            ++readPos;\n", "            for (int i = 0; i < userCount; ++i)\n            {\n                var uniqeudId = BitConverter.ToInt64(bodyData, readPos);\n                readPos += 8;\n\n                var idlen = (SByte)bodyData[readPos];\n                ++readPos;\n\n                var id = Encoding.UTF8.GetString(bodyData, readPos, idlen);\n                readPos += idlen;\n\n                UserUniqueIdList.Add(uniqeudId);\n                UserIDList.Add(id);\n            }\n\n            UserCount = userCount;\n            return true;\n        }\n    }\n", "    public class RoomNewUserNtfPacket\n    {\n        public Int64 UserUniqueId;\n        public string UserID;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            var readPos = 0;\n\n            UserUniqueId = BitConverter.ToInt64(bodyData, readPos);\n            readPos += 8;\n\n            var idlen = (SByte)bodyData[readPos];\n            ++readPos;\n\n            UserID = Encoding.UTF8.GetString(bodyData, readPos, idlen);\n            readPos += idlen;\n\n            return true;\n        }\n    }\n\n", "    public class RoomChatReqPacket\n    {\n        byte[] Msg = new byte[PacketDef.MAX_CHAT_MSG_SIZE];\n\n        public void SetValue(string message)\n        {\n            Encoding.UTF8.GetBytes(message).CopyTo(Msg, 0);\n        }\n\n        public byte[] ToBytes()\n        {\n            List<byte> dataSource = new List<byte>();\n            dataSource.AddRange(Msg);\n            return dataSource.ToArray();\n        }\n    }\n", "    public class RoomChatResPacket\n    {\n        public UInt16 Result;\n        \n        public bool FromBytes(byte[] bodyData)\n        {\n            Result = BitConverter.ToUInt16(bodyData, 0);\n            return true;\n        }\n    }\n", "    public class RoomChatNtfPacket\n    {\n        public string UserID;\n        public string Message;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            UserID = Encoding.UTF8.GetString(bodyData, 0, PacketDef.MAX_USER_ID_BYTE_LENGTH);\n            UserID = UserID.Trim();\n            Message = Encoding.UTF8.GetString(bodyData, PacketDef.MAX_USER_ID_BYTE_LENGTH, PacketDef.MAX_CHAT_MSG_SIZE);\n            Message = Message.Trim();\n\n            return true;\n        }\n    }\n\n", "     public class RoomLeaveResPacket\n    {\n        public UInt16 Result;\n        \n        public bool FromBytes(byte[] bodyData)\n        {\n            Result = BitConverter.ToUInt16(bodyData, 0);\n            return true;\n        }\n    }\n", "    public class RoomLeaveUserNtfPacket\n    {\n        public Int64 UserUniqueId;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            UserUniqueId = BitConverter.ToInt64(bodyData, 0);\n            return true;\n        }\n    }\n\n\n    ", "    public class RoomRelayNtfPacket\n    {\n        public Int64 UserUniqueId;\n        public byte[] RelayData;\n\n        public bool FromBytes(byte[] bodyData)\n        {\n            UserUniqueId = BitConverter.ToInt64(bodyData, 0);\n\n            var relayDataLen = bodyData.Length - 8;\n            RelayData = new byte[relayDataLen];\n            Buffer.BlockCopy(bodyData, 8, RelayData, 0, relayDataLen);\n            return true;\n        }\n    }\n\n", "    public class PingRequest\n    {\n        public Int16 PingNum;\n\n        public byte[] ToBytes()\n        {\n            return BitConverter.GetBytes(PingNum);\n        }\n\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace csharp_test_client\n{\n    static class Program\n    {\n        /// <summary>\n        /// \ud574\ub2f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uc8fc \uc9c4\uc785\uc810\uc785\ub2c8\ub2e4.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new mainForm());\n        }\n    }\n}\n", "    static class Program\n    {\n        /// <summary>\n        /// \ud574\ub2f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uc8fc \uc9c4\uc785\uc810\uc785\ub2c8\ub2e4.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new mainForm());\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace csharp_test_client.Properties\n{\n\n\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"11.0.0.0\")]\n    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase\n    {\n", "    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase\n    {\n\n        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n\n        public static Settings Default\n        {\n            get\n            {\n                return defaultInstance;\n            }\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     \uc774 \ucf54\ub4dc\ub294 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n//     \ub7f0\ud0c0\uc784 \ubc84\uc804:4.0.30319.42000\n//\n//     \ud30c\uc77c \ub0b4\uc6a9\uc744 \ubcc0\uacbd\ud558\uba74 \uc798\ubabb\ub41c \ub3d9\uc791\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc73c\uba70, \ucf54\ub4dc\ub97c \ub2e4\uc2dc \uc0dd\uc131\ud558\uba74\n//     \uc774\ub7ec\ud55c \ubcc0\uacbd \ub0b4\uc6a9\uc774 \uc190\uc2e4\ub429\ub2c8\ub2e4.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace csharp_test_client.Properties\n{\n\n\n    /// <summary>\n    ///   \uc9c0\uc5ed\ud654\ub41c \ubb38\uc790\uc5f4 \ub4f1\uc744 \ucc3e\uae30 \uc704\ud55c \uac15\ub825\ud55c \ud615\uc2dd\uc758 \ub9ac\uc18c\uc2a4 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4.\n    /// </summary>\n    // \uc774 \ud074\ub798\uc2a4\ub294 ResGen \ub610\ub294 Visual Studio\uc640 \uac19\uc740 \ub3c4\uad6c\ub97c \ud1b5\ud574 StronglyTypedResourceBuilder", "    /// </summary>\n    // \uc774 \ud074\ub798\uc2a4\ub294 ResGen \ub610\ub294 Visual Studio\uc640 \uac19\uc740 \ub3c4\uad6c\ub97c \ud1b5\ud574 StronglyTypedResourceBuilder\n    // \ud074\ub798\uc2a4\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n    // \uba64\ubc84\ub97c \ucd94\uac00\ud558\uac70\ub098 \uc81c\uac70\ud558\ub824\uba74 .ResX \ud30c\uc77c\uc744 \ud3b8\uc9d1\ud55c \ub2e4\uc74c /str \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uc5ec\n    // ResGen\uc744 \ub2e4\uc2dc \uc2e4\ud589\ud558\uac70\ub098 VS \ud504\ub85c\uc81d\ud2b8\ub97c \ub2e4\uc2dc \ube4c\ub4dc\ud558\uc2ed\uc2dc\uc624.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"4.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources\n    {\n", "    internal class Resources\n    {\n\n        private static global::System.Resources.ResourceManager resourceMan;\n\n        private static global::System.Globalization.CultureInfo resourceCulture;\n\n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources()\n        {\n        }\n\n        /// <summary>\n        ///   \uc774 \ud074\ub798\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uce90\uc2dc\ub41c ResourceManager \uc778\uc2a4\ud134\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager\n        {\n            get\n            {", "                if ((resourceMan == null))\n                {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"csharp_test_client.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n\n        /// <summary>\n        ///   \uc774 \uac15\ub825\ud55c \ud615\uc2dd\uc758 \ub9ac\uc18c\uc2a4 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \uc870\ud68c\uc5d0 \ub300\ud574\n        ///   \ud604\uc7ac \uc2a4\ub808\ub4dc\uc758 CurrentUICulture \uc18d\uc131\uc744 \uc7ac\uc815\uc758\ud569\ub2c8\ub2e4.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture\n        {\n            get\n            {\n                return resourceCulture;\n            }\n            set\n            {\n                resourceCulture = value;\n            }\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/Client/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// \uc5b4\uc148\ube14\ub9ac\uc5d0 \ub300\ud55c \uc77c\ubc18 \uc815\ubcf4\ub294 \ub2e4\uc74c \ud2b9\uc131 \uc9d1\ud569\uc744 \ud1b5\ud574 \n// \uc81c\uc5b4\ub429\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac\uc640 \uad00\ub828\ub41c \uc815\ubcf4\ub97c \uc218\uc815\ud558\ub824\uba74\n// \uc774\ub7ec\ud55c \ud2b9\uc131 \uac12\uc744 \ubcc0\uacbd\ud558\uc138\uc694.\n[assembly: AssemblyTitle(\"csharp_test_client\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"csharp_test_client\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2016\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// ComVisible\uc744 false\ub85c \uc124\uc815\ud558\uba74 \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc774 COM \uad6c\uc131 \uc694\uc18c\uc5d0 \n// \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.  COM\uc5d0\uc11c \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc5d0 \uc561\uc138\uc2a4\ud558\ub824\uba74 ", "// ComVisible\uc744 false\ub85c \uc124\uc815\ud558\uba74 \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc774 COM \uad6c\uc131 \uc694\uc18c\uc5d0 \n// \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.  COM\uc5d0\uc11c \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc5d0 \uc561\uc138\uc2a4\ud558\ub824\uba74 \n// \ud574\ub2f9 \ud615\uc2dd\uc5d0 \ub300\ud574 ComVisible \ud2b9\uc131\uc744 true\ub85c \uc124\uc815\ud558\uc138\uc694.\n[assembly: ComVisible(false)]\n\n// \uc774 \ud504\ub85c\uc81d\ud2b8\uac00 COM\uc5d0 \ub178\ucd9c\ub418\ub294 \uacbd\uc6b0 \ub2e4\uc74c GUID\ub294 typelib\uc758 ID\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n[assembly: Guid(\"9e4b5e72-4e76-4e22-90b0-e53275a99018\")]\n\n// \uc5b4\uc148\ube14\ub9ac\uc758 \ubc84\uc804 \uc815\ubcf4\ub294 \ub2e4\uc74c \ub124 \uac00\uc9c0 \uac12\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.\n//", "// \uc5b4\uc148\ube14\ub9ac\uc758 \ubc84\uc804 \uc815\ubcf4\ub294 \ub2e4\uc74c \ub124 \uac00\uc9c0 \uac12\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.\n//\n//      \uc8fc \ubc84\uc804\n//      \ubd80 \ubc84\uc804 \n//      \ube4c\ub4dc \ubc88\ud638\n//      \uc218\uc815 \ubc84\uc804\n//\n// \ubaa8\ub4e0 \uac12\uc744 \uc9c0\uc815\ud558\uac70\ub098 \uc544\ub798\uc640 \uac19\uc774 '*'\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube4c\ub4dc \ubc88\ud638 \ubc0f \uc218\uc815 \ubc88\ud638\uac00 \uc790\ub3d9\uc73c\ub85c \n// \uc9c0\uc815\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// \uc9c0\uc815\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/DBRedis.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing CloudStructures;\nusing CloudStructures.Structures;\n\n\nnamespace APIServer\n{\n    public class DBRedis {\n", "namespace APIServer\n{\n    public class DBRedis {\n\n        public static RedisConnection Connection { get; set; }\n        \n        static public void Init(string name, string address)\n         {\n            var config = new RedisConfig(name, address);\n            Connection = new RedisConnection(config);\n        }\n\n\n        ", "        static public async Task<RedisResult<TReturn>> GetValue<TReturn>( string key )  {\n            var defaultExpiry = TimeSpan.FromSeconds(60);\n            var redis = new RedisString<TReturn>(DBRedis.Connection, key, defaultExpiry);\n            var cachedObject = await redis.GetAsync();\n            return cachedObject;\n        }\n\n\n        static public async Task<bool> SetValue<T>( string key, T value ) where T : class  {\n            var defaultExpiry = TimeSpan.FromSeconds(60);\n            var redis = new RedisString<T>(DBRedis.Connection, key, defaultExpiry);\n\n            var result = await redis.SetAsync(value);\n            return result;\n        }      \n    }\n}\n", "        static public async Task<bool> SetValue<T>( string key, T value ) where T : class  {\n            var defaultExpiry = TimeSpan.FromSeconds(60);\n            var redis = new RedisString<T>(DBRedis.Connection, key, defaultExpiry);\n\n            var result = await redis.SetAsync(value);\n            return result;\n        }      \n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/LoginServer.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace APIServer\n{\n    public class LoginServer\n    {\n        public static ServerOption ServerOpt;\n", "        public static ServerOption ServerOpt;\n\n        static public void Init(string[] args)\n        {\n            ServerOpt = (CommandLine.Parser.Default.ParseArguments<ServerOption>(args) as CommandLine.Parsed<ServerOption>).Value;\n\n            DBRedis.Init(ServerOpt.RedisName, ServerOpt.RedisAddress);\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/ServerOptions.cs", "chunked_list": ["\ufeffusing CommandLine;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace APIServer\n{\n    public class ServerOption\n    {\n        [Option(\"redisName\", Required = true, HelpText = \"Redis Server Name\")]", "    public class ServerOption\n    {\n        [Option(\"redisName\", Required = true, HelpText = \"Redis Server Name\")]\n        public string RedisName { get; set; }\n\n        [Option(\"redisAddress\", Required = true, HelpText = \"Redis Server Address\")]\n        public string RedisAddress { get; set; }\n\n\n        [Option(\"gameServerIP\", Required = true, HelpText = \"GameServer IP\")]\n        public string GameServerIP { get; set; }\n\n        [Option(\"gameServerPort\", Required = true, HelpText = \"GameServer Port\")]", "        public string GameServerIP { get; set; }\n\n        [Option(\"gameServerPort\", Required = true, HelpText = \"GameServer Port\")]\n        public int GameServerPort { get; set; }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\n", "using Microsoft.Extensions.Logging;\n\nnamespace APIServer\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            LoginServer.Init(args);\n\n            BuildWebHost(args).Run();\n        }\n        \n", "        public static IWebHost BuildWebHost(string[] args) =>\n            WebHost.CreateDefaultBuilder(args)\n                .UseKestrel()\n                .UseIISIntegration()\n                .UseStartup<Startup>()\n                .UseUrls(\"http://*:19000/\")\n                .Build();\n\n\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/Startup.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;", "using Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\n\nnamespace APIServer\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n", "        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {            ", "        public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {            \n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/Controllers/AccountController.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Diagnostics;\n\nnamespace APIServer.Controllers\n{\n    [Produces(\"application/json\")]", "{\n    [Produces(\"application/json\")]\n    [Route(\"api/Account/Create\")]\n    public class AccountController : Controller\n    {\n        [HttpPost]\n        public async Task<CreateuserRes> Process([FromBody] CreateuserReq request)\n        {\n            Debug.WriteLine(\"Process Function Called\");\n            return new CreateuserRes() { Result = (short)0 };\n        }\n                \n", "        public class CreateuserReq\n        {\n            public string UserID;\n            public string UserPW;       \n        }\n         \n        public class CreateuserRes \n        {\n             public short Result; \n        }\n    }\n}\n", "             public short Result; \n        }\n    }\n}\n"]}
{"filename": "cpp/Demo_2020-02-15/APIServer/Controllers/LoginController.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace APIServer.Controllers\n{\n    [Produces(\"application/json\")]", "{\n    [Produces(\"application/json\")]\n    [Route(\"api/Login\")]\n    [ApiController]\n    public class LoginController : Controller\n    {\n        [HttpPost]\n        public async Task<LoginRes> Process([FromBody] LoginReq request)\n        {\n            var response = new LoginRes() \n            { \n                result = 1, \n                authToken = \"fake\",\n                gameServerIP = LoginServer.ServerOpt.GameServerIP,\n                gameServerPort = (UInt16)LoginServer.ServerOpt.GameServerPort,\n            };\n\n            var authToken = CreateAuthToken();\n\n            var result = await DBRedis.SetValue(request.userID, authToken);\n            \n            response.authToken = authToken;\n            return response;                        \n        }\n\n        string CreateAuthToken()\n        {\n            string token = Convert.ToBase64String(Guid.NewGuid().ToByteArray());\n            return token;\n        }\n\n    }\n", "    public class LoginReq\n    {\n        public string userID { get; set; }\n        public string userPW { get; set; }\n    }\n\n    public class LoginRes\n    {\n        public int result { get; set; }\n        public string authToken { get; set; }\n", "        public int result { get; set; }\n        public string authToken { get; set; }\n\n        public string gameServerIP { get; set; }\n        public UInt16 gameServerPort { get; set; }\n    }\n}"]}
{"filename": "csharp/redisTest/FastBinaryWrite.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace csharp_test_client\n{\n    public class FastBinaryWrite\n    {\n        public static void Boolean(byte[] bytes, int offset, bool value)\n        {\n            bytes[offset] = (byte)(value ? 1 : 0);\n        }\n", "        public static void Boolean(byte[] bytes, int offset, bool value)\n        {\n            bytes[offset] = (byte)(value ? 1 : 0);\n        }\n\n        public static void BooleanTrueUnsafe(byte[] bytes, int offset)\n        {\n            bytes[offset] = (byte)(1);\n        }\n\n        public static void BooleanFalseUnsafe(byte[] bytes, int offset)\n        {\n            bytes[offset] = (byte)(0);\n        }\n", "        public static void BooleanFalseUnsafe(byte[] bytes, int offset)\n        {\n            bytes[offset] = (byte)(0);\n        }\n\n        public static void Byte(byte[] bytes, int offset, byte value)\n        {\n            bytes[offset] = value;\n        }\n\n        public static int Bytes(byte[] bytes, int offset, byte[] value)\n        {\n            Buffer.BlockCopy(value, 0, bytes, offset, value.Length);\n            return value.Length;\n        }\n", "        public static int Bytes(byte[] bytes, int offset, byte[] value)\n        {\n            Buffer.BlockCopy(value, 0, bytes, offset, value.Length);\n            return value.Length;\n        }\n\n        public static int SByte(byte[] bytes, int offset, sbyte value)\n        {\n            bytes[offset] = (byte)value;\n            return 1;\n        }\n", "        public static unsafe int Single(byte[] bytes, int offset, float value)\n        {\n            if (offset % 4 == 0)\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    *(float*)(ptr + offset) = value;\n                }\n            }\n            else\n            {\n                uint num = *(uint*)(&value);\n                bytes[offset] = (byte)num;\n                bytes[offset + 1] = (byte)(num >> 8);\n                bytes[offset + 2] = (byte)(num >> 16);\n                bytes[offset + 3] = (byte)(num >> 24);\n            }\n\n            return 4;\n        }\n", "        public static unsafe int Double(byte[] bytes, int offset, double value)\n        {\n            if (offset % 8 == 0)\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    *(double*)(ptr + offset) = value;\n                }\n            }\n            else\n            {\n                ulong num = (ulong)(*(long*)(&value));\n                bytes[offset] = (byte)num;\n                bytes[offset + 1] = (byte)(num >> 8);\n                bytes[offset + 2] = (byte)(num >> 16);\n                bytes[offset + 3] = (byte)(num >> 24);\n                bytes[offset + 4] = (byte)(num >> 32);\n                bytes[offset + 5] = (byte)(num >> 40);\n                bytes[offset + 6] = (byte)(num >> 48);\n                bytes[offset + 7] = (byte)(num >> 56);\n            }\n\n            return 8;\n        }\n", "        public static unsafe int Int16(byte[] bytes, int offset, short value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(short*)(ptr + offset) = value;\n            }\n\n            return 2;\n        }\n\n        public static unsafe int Int32(byte[] bytes, int offset, int value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(int*)(ptr + offset) = value;\n            }\n\n            return 4;\n        }\n", "        public static unsafe int Int32(byte[] bytes, int offset, int value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(int*)(ptr + offset) = value;\n            }\n\n            return 4;\n        }\n\n        public static unsafe void Int32Unsafe(byte[] bytes, int offset, int value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(int*)(ptr + offset) = value;\n            }\n        }\n", "        public static unsafe void Int32Unsafe(byte[] bytes, int offset, int value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(int*)(ptr + offset) = value;\n            }\n        }\n\n        public static unsafe int Int64(byte[] bytes, int offset, long value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(long*)(ptr + offset) = value;\n            }\n\n            return 8;\n        }\n", "        public static unsafe int Int64(byte[] bytes, int offset, long value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(long*)(ptr + offset) = value;\n            }\n\n            return 8;\n        }\n\n        public static unsafe int UInt16(byte[] bytes, int offset, ushort value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(ushort*)(ptr + offset) = value;\n            }\n\n            return 2;\n        }\n", "        public static unsafe int UInt16(byte[] bytes, int offset, ushort value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(ushort*)(ptr + offset) = value;\n            }\n\n            return 2;\n        }\n\n        public static unsafe int UInt32(byte[] bytes, int offset, uint value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(uint*)(ptr + offset) = value;\n            }\n\n            return 4;\n        }\n", "        public static unsafe int UInt32(byte[] bytes, int offset, uint value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(uint*)(ptr + offset) = value;\n            }\n\n            return 4;\n        }\n\n        public static unsafe int UInt64(byte[] bytes, int offset, ulong value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(ulong*)(ptr + offset) = value;\n            }\n\n            return 8;\n        }\n", "        public static unsafe int UInt64(byte[] bytes, int offset, ulong value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(ulong*)(ptr + offset) = value;\n            }\n\n            return 8;\n        }\n\n        public static int Char(byte[] bytes, int offset, char value)\n        {\n            return UInt16(bytes, offset, (ushort)value);\n        }\n", "        public static int Char(byte[] bytes, int offset, char value)\n        {\n            return UInt16(bytes, offset, (ushort)value);\n        }\n\n        public static int String(byte[] bytes, int offset, string value)\n        {\n            return StringEncoding.UTF8.GetBytes(value, 0, value.Length, bytes, offset);\n        }\n\n        public static unsafe int Decimal(byte[] bytes, int offset, decimal value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(Decimal*)(ptr + offset) = value;\n            }\n\n            return 16;\n        }\n", "        public static unsafe int Decimal(byte[] bytes, int offset, decimal value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(Decimal*)(ptr + offset) = value;\n            }\n\n            return 16;\n        }\n\n        public static unsafe int Guid(byte[] bytes, int offset, Guid value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(Guid*)(ptr + offset) = value;\n            }\n\n            return 16;\n        }\n\n        #region Timestamp/Duration", "        public static unsafe int Guid(byte[] bytes, int offset, Guid value)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                *(Guid*)(ptr + offset) = value;\n            }\n\n            return 16;\n        }\n\n        #region Timestamp/Duration", "        public static unsafe int TimeSpan(ref byte[] bytes, int offset, TimeSpan timeSpan)\n        {\n            checked\n            {\n                long ticks = timeSpan.Ticks;\n                long seconds = ticks / System.TimeSpan.TicksPerSecond;\n                int nanos = (int)(ticks % System.TimeSpan.TicksPerSecond) * Duration.NanosecondsPerTick;\n\n                fixed (byte* ptr = bytes)\n                {\n                    *(long*)(ptr + offset) = seconds;\n                    *(int*)(ptr + offset + 8) = nanos;\n                }\n\n                return 12;\n            }\n        }\n", "        public static unsafe int DateTime(ref byte[] bytes, int offset, DateTime dateTime)\n        {\n            dateTime = dateTime.ToUniversalTime();\n\n            // Do the arithmetic using DateTime.Ticks, which is always non-negative, making things simpler.\n            long secondsSinceBclEpoch = dateTime.Ticks / System.TimeSpan.TicksPerSecond;\n            int nanoseconds = (int)(dateTime.Ticks % System.TimeSpan.TicksPerSecond) * Duration.NanosecondsPerTick;\n\n            fixed (byte* ptr = bytes)\n            {\n                *(long*)(ptr + offset) = (secondsSinceBclEpoch - Timestamp.BclSecondsAtUnixEpoch);\n                *(int*)(ptr + offset + 8) = nanoseconds;\n            }\n\n            return 12;\n        }\n", "        internal static class Timestamp\n        {\n            internal static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n            internal const long BclSecondsAtUnixEpoch = 62135596800;\n            internal const long UnixSecondsAtBclMaxValue = 253402300799;\n            internal const long UnixSecondsAtBclMinValue = -BclSecondsAtUnixEpoch;\n            internal const int MaxNanos = Duration.NanosecondsPerSecond - 1;\n\n            internal static bool IsNormalized(long seconds, int nanoseconds)\n            {\n                return nanoseconds >= 0 &&\n                    nanoseconds <= MaxNanos &&\n                    seconds >= UnixSecondsAtBclMinValue &&\n                    seconds <= UnixSecondsAtBclMaxValue;\n            }\n        }\n", "        internal static class Duration\n        {\n            public const int NanosecondsPerSecond = 1000000000;\n            public const int NanosecondsPerTick = 100;\n            public const long MaxSeconds = 315576000000L;\n            public const long MinSeconds = -315576000000L;\n            internal const int MaxNanoseconds = NanosecondsPerSecond - 1;\n            internal const int MinNanoseconds = -NanosecondsPerSecond + 1;\n\n            internal static bool IsNormalized(long seconds, int nanoseconds)\n            {\n                // Simple boundaries", "                if (seconds < MinSeconds || seconds > MaxSeconds ||\n                    nanoseconds < MinNanoseconds || nanoseconds > MaxNanoseconds)\n                {\n                    return false;\n                }\n                // We only have a problem is one is strictly negative and the other is\n                // strictly positive.\n                return Math.Sign(seconds) * Math.Sign(nanoseconds) != -1;\n            }\n        }\n        #endregion\n    }\n}\n"]}
{"filename": "csharp/redisTest/mainForm.cs", "chunked_list": ["\ufeffusing CloudStructures;\nusing CloudStructures.Structures;\nusing MessagePack;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;", "using System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace csharp_test_client\n{\n    public partial class mainForm : Form\n    {\n        bool IsBackGroundProcessRunning = false;\n        \n        System.Windows.Forms.Timer dispatcherUITimer = new();\n\n        \n        public mainForm()\n        {\n            InitializeComponent();\n        }\n", "        private void mainForm_Load(object sender, EventArgs e)\n        {            \n            IsBackGroundProcessRunning = true;\n            dispatcherUITimer.Tick += new EventHandler(BackGroundProcess);\n            dispatcherUITimer.Interval = 100;\n            dispatcherUITimer.Start();\n\n        \n            DevLog.Write(\"\ud504\ub85c\uadf8\ub7a8 \uc2dc\uc791 !!!\", LOG_LEVEL.INFO);\n        }\n", "        private void mainForm_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            IsBackGroundProcessRunning = false;\n\n        }\n        \n        void BackGroundProcess(object sender, EventArgs e)\n        {\n            ProcessLog();\n                        \n        }\n", "        private void ProcessLog()\n        {\n            // \ub108\ubb34 \uc774 \uc791\uc5c5\ub9cc \ud560 \uc218 \uc5c6\uc73c\ubbc0\ub85c \uc77c\uc815 \uc791\uc5c5 \uc774\uc0c1\uc744 \ud558\uba74 \uc77c\ub2e8 \ud328\uc2a4\ud55c\ub2e4.\n            int logWorkCount = 0;\n\n            while (IsBackGroundProcessRunning)\n            {\n                System.Threading.Thread.Sleep(1);\n\n                string msg;\n", "                if (DevLog.GetLog(out msg))\n                {\n                    ++logWorkCount;\n\n                    if (listBoxLog.Items.Count > 512)\n                    {\n                        listBoxLog.Items.Clear();\n                    }\n\n                    listBoxLog.Items.Add(msg);\n                    listBoxLog.SelectedIndex = listBoxLog.Items.Count - 1;\n                }\n                else\n                {\n                    break;\n                }\n", "                if (logWorkCount > 8)\n                {\n                    break;\n                }\n            }\n        }\n     \n        RedisConnection GetRedisConnection(string address)\n        {   \n            var config = new RedisConfig(\"test\", address);\n            var Connection = new RedisConnection(config);\n            return Connection;\n        }\n\n        async Task<List<string>> MultiLPopTest(string address, string key)\n        {\n            var readDataList = new List<string>();\n\n            var redis = new RedisList<string>(GetRedisConnection(address), key, null);\n            ", "            while (true)\n            {\n                var result = await redis.LeftPopAsync();\n\n                if (result.HasValue)\n                {\n                    readDataList.Add(result.Value);\n                }\n                else \n                {\n                    break;\n                }\n            }\n\n            return readDataList;           \n        }\n\n        \n        // \ubcf5\uc218\uc758 LPop \ud14c\uc2a4\ud2b8 \uc2dc\uc791", "        private async void button3_Click(object sender, EventArgs e)\n        {\n            DevLog.Write(\"Multi Session LPop Test - start\", LOG_LEVEL.INFO);\n\n            var key = \"MLPoptest\";\n            var redis = new RedisList<string>(GetRedisConnection(textBox1.Text), key, null);\n\n            for(var i = 0; i < 100; ++i)\n            {\n                await redis.RightPushAsync($\"abcde_{i}\");\n            }\n\n\n            var task1 = Task.Run(() => MultiLPopTest(textBox1.Text, key));\n            var task2 = Task.Run(() => MultiLPopTest(textBox1.Text, key));\n            var task3 = Task.Run(() => MultiLPopTest(textBox1.Text, key));\n\n            Task.WaitAll(task1, task2, task3);\n\n            \n            listBox1.Items.Clear();\n            listBox2.Items.Clear();\n            listBox3.Items.Clear();\n\n            DevLog.Write($\"Multi Session LPop Test - index 1 - Count:{task1.Result.Count}\", LOG_LEVEL.INFO);", "            foreach (var value in task1.Result)\n            {\n                listBox1.Items.Add(value);\n            }\n            DevLog.Write($\"Multi Session LPop Test - index 2 - Count:{task2.Result.Count}\", LOG_LEVEL.INFO);\n            foreach (var value in task2.Result)\n            {\n                listBox2.Items.Add(value);\n            }\n            DevLog.Write($\"Multi Session LPop Test - index 3 - Count:{task3.Result.Count}\", LOG_LEVEL.INFO);\n            foreach (var value in task3.Result)\n            {\n                listBox3.Items.Add(value);\n            }\n\n            DevLog.Write(\"Multi Session LPop Test - end\", LOG_LEVEL.INFO);\n        }\n\n    }\n\n    [MessagePackObject]", "            foreach (var value in task3.Result)\n            {\n                listBox3.Items.Add(value);\n            }\n\n            DevLog.Write(\"Multi Session LPop Test - end\", LOG_LEVEL.INFO);\n        }\n\n    }\n\n    [MessagePackObject]", "    public class PvPMatchingResult\n    {\n        [Key(0)]\n        public string IP;\n        [Key(1)]\n        public UInt16 Port;\n        [Key(2)]\n        public Int32 RoomNumber;\n        [Key(3)]\n        public Int32 Index;\n        [Key(4)]", "        public Int32 Index;\n        [Key(4)]\n        public string Token;\n    }\n\n\n    public class GameServerInfo\n    {\n        public Int32 Index;\n        public string IP;\n        public UInt16 Port;\n    }", "        public Int32 Index;\n        public string IP;\n        public UInt16 Port;\n    }\n    public class PvPGameServerGroup\n    {\n        public List<GameServerInfo> ServerList = new List<GameServerInfo>();\n    }\n\n    public class KeyDefine\n    {", "    public class KeyDefine\n    {\n        public const string RequesMatchingQueue = \"req_matching\";\n\n        public const string PvPGameServerList = \"pvp_gameServer_list\";\n\n        public const string PrefixGameServerRoomQueue = \"gs_room_queue_\";\n\n        public const string PrefixMatchingResult = \"ret_matching_\";\n\n        public const string PrefixMatchingResultToGameServer = \"ret_newGmae_\";\n    }\n}\n", "        public const string PrefixMatchingResult = \"ret_matching_\";\n\n        public const string PrefixMatchingResultToGameServer = \"ret_newGmae_\";\n    }\n}\n"]}
{"filename": "csharp/redisTest/FastBinaryRead.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace csharp_test_client\n{\n    public class FastBinaryRead\n    {\n        public static bool Boolean(byte[] bytes, int offset)\n        {\n            return (bytes[offset] == 0) ? false : true;\n        }", "        public static bool Boolean(byte[] bytes, int offset)\n        {\n            return (bytes[offset] == 0) ? false : true;\n        }\n        public static bool Boolean(ReadOnlySpan<byte> bytes, int offset)\n        {\n            return (bytes[offset] == 0) ? false : true;\n        }\n\n        public static byte Byte(byte[] bytes, int offset)\n        {\n            return bytes[offset];\n        }", "        public static byte Byte(byte[] bytes, int offset)\n        {\n            return bytes[offset];\n        }\n        public static byte Byte(ReadOnlySpan<byte> bytes, int offset)\n        {\n            return bytes[offset];\n        }\n\n        public static byte[] Bytes(byte[] bytes, int offset, int count)\n        {\n            var dest = new byte[count];\n            Buffer.BlockCopy(bytes, offset, dest, 0, count);\n            return dest;\n        }\n", "        public static byte[] Bytes(byte[] bytes, int offset, int count)\n        {\n            var dest = new byte[count];\n            Buffer.BlockCopy(bytes, offset, dest, 0, count);\n            return dest;\n        }\n\n        public static sbyte SByte(byte[] bytes, int offset)\n        {\n            return (sbyte)bytes[offset];\n        }", "        public static sbyte SByte(ReadOnlySpan<byte> bytes, int offset)\n        {\n            return (sbyte)bytes[offset];\n        }\n\n        public static unsafe float Single(byte[] bytes, int offset)\n        {\n            if (offset % 4 == 0)\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    return *(float*)(ptr + offset);\n                }\n            }\n            else\n            {\n                uint num = (uint)((int)bytes[offset] | (int)bytes[offset + 1] << 8 | (int)bytes[offset + 2] << 16 | (int)bytes[offset + 3] << 24);\n                return *(float*)(&num);\n            }\n        }", "        public static unsafe float Single(ReadOnlySpan<byte> bytes, int offset)\n        {\n            if (offset % 4 == 0)\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    return *(float*)(ptr + offset);\n                }\n            }\n            else\n            {\n                uint num = (uint)((int)bytes[offset] | (int)bytes[offset + 1] << 8 | (int)bytes[offset + 2] << 16 | (int)bytes[offset + 3] << 24);\n                return *(float*)(&num);\n            }\n        }\n", "        public static unsafe double Double(byte[] bytes, int offset)\n        {\n            if (offset % 8 == 0)\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    return *(double*)(ptr + offset);\n                }\n            }\n            else\n            {\n                uint num = (uint)((int)bytes[offset] | (int)bytes[offset + 1] << 8 | (int)bytes[offset + 2] << 16 | (int)bytes[offset + 3] << 24);\n                ulong num2 = (ulong)((int)bytes[offset + 4] | (int)bytes[offset + 5] << 8 | (int)bytes[offset + 6] << 16 | (int)bytes[offset + 7] << 24) << 32 | (ulong)num;\n                return *(double*)(&num2);\n            }\n        }", "        public static unsafe double Double(ReadOnlySpan<byte> bytes, int offset)\n        {\n            if (offset % 8 == 0)\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    return *(double*)(ptr + offset);\n                }\n            }\n            else\n            {\n                uint num = (uint)((int)bytes[offset] | (int)bytes[offset + 1] << 8 | (int)bytes[offset + 2] << 16 | (int)bytes[offset + 3] << 24);\n                ulong num2 = (ulong)((int)bytes[offset + 4] | (int)bytes[offset + 5] << 8 | (int)bytes[offset + 6] << 16 | (int)bytes[offset + 7] << 24) << 32 | (ulong)num;\n                return *(double*)(&num2);\n            }\n        }\n", "        public static unsafe short Int16(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(short*)(ptr + offset);\n            }\n        }\n        public static unsafe short Int16(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(short*)(ptr + offset);\n            }\n        }\n", "        public static unsafe int Int32(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(int*)(ptr + offset);\n            }\n        }\n        public static unsafe int Int32(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(int*)(ptr + offset);\n            }\n        }\n", "        public static unsafe long Int64(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(long*)(ptr + offset);\n            }\n        }\n        public static unsafe long Int64(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(long*)(ptr + offset);\n            }\n        }\n", "        public static unsafe ushort UInt16(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(ushort*)(ptr + offset);\n            }\n        }\n        public static unsafe ushort UInt16(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(ushort*)(ptr + offset);\n            }\n        }\n", "        public static unsafe uint UInt32(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(uint*)(ptr + offset);\n            }\n        }\n        public static unsafe uint UInt32(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(uint*)(ptr + offset);\n            }\n        }\n", "        public static unsafe ulong UInt64(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(ulong*)(ptr + offset);\n            }\n        }\n        public static unsafe ulong UInt64(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(ulong*)(ptr + offset);\n            }\n        }\n", "        public static char Char(byte[] bytes, int offset)\n        {\n            return (char)FastBinaryRead.UInt16(bytes, offset);\n        }\n        public static char Char(ReadOnlySpan<byte> bytes, int offset)\n        {\n            return (char)FastBinaryRead.UInt16(bytes, offset);\n        }\n\n        public static string String(byte[] bytes, int offset, int count)\n        {\n            return StringEncoding.UTF8.GetString(bytes, offset, count);\n        }\n", "        public static string String(byte[] bytes, int offset, int count)\n        {\n            return StringEncoding.UTF8.GetString(bytes, offset, count);\n        }\n\n        public static unsafe decimal Decimal(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(Decimal*)(ptr + offset);\n            }\n        }", "        public static unsafe decimal Decimal(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(Decimal*)(ptr + offset);\n            }\n        }\n\n        public static unsafe Guid Guid(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(Guid*)(ptr + offset);\n            }\n        }", "        public static unsafe Guid Guid(byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(Guid*)(ptr + offset);\n            }\n        }\n        public static unsafe Guid Guid(ReadOnlySpan<byte> bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                return *(Guid*)(ptr + offset);\n            }\n        }\n\n        #region Timestamp/Duration      ", "        public static unsafe TimeSpan TimeSpan(ref byte[] bytes, int offset)\n        {\n            checked\n            {\n                fixed (byte* ptr = bytes)\n                {\n                    var seconds = *(long*)(ptr + offset);\n                    var nanos = *(int*)(ptr + offset + 8);\n\n                    if (!Duration.IsNormalized(seconds, nanos))\n                    {\n                        throw new InvalidOperationException(\"Duration was not a valid normalized duration\");\n                    }\n                    long ticks = seconds * System.TimeSpan.TicksPerSecond + nanos / Duration.NanosecondsPerTick;\n                    return System.TimeSpan.FromTicks(ticks);\n                }\n            }\n        }\n", "                    if (!Duration.IsNormalized(seconds, nanos))\n                    {\n                        throw new InvalidOperationException(\"Duration was not a valid normalized duration\");\n                    }\n                    long ticks = seconds * System.TimeSpan.TicksPerSecond + nanos / Duration.NanosecondsPerTick;\n                    return System.TimeSpan.FromTicks(ticks);\n                }\n            }\n        }\n\n        public static unsafe DateTime DateTime(ref byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                var seconds = *(long*)(ptr + offset);\n                var nanos = *(int*)(ptr + offset + 8);\n", "        public static unsafe DateTime DateTime(ref byte[] bytes, int offset)\n        {\n            fixed (byte* ptr = bytes)\n            {\n                var seconds = *(long*)(ptr + offset);\n                var nanos = *(int*)(ptr + offset + 8);\n\n                if (!Timestamp.IsNormalized(seconds, nanos))\n                {\n                    throw new InvalidOperationException(string.Format(@\"Timestamp contains invalid values: Seconds={0}; Nanos={1}\", seconds, nanos));\n                }\n                return Timestamp.UnixEpoch.AddSeconds(seconds).AddTicks(nanos / Duration.NanosecondsPerTick);\n            }\n        }\n", "        internal static class Timestamp\n        {\n            internal static readonly DateTime UnixEpoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);\n            internal const long BclSecondsAtUnixEpoch = 62135596800;\n            internal const long UnixSecondsAtBclMaxValue = 253402300799;\n            internal const long UnixSecondsAtBclMinValue = -BclSecondsAtUnixEpoch;\n            internal const int MaxNanos = Duration.NanosecondsPerSecond - 1;\n\n            internal static bool IsNormalized(long seconds, int nanoseconds)\n            {\n                return nanoseconds >= 0 &&\n                    nanoseconds <= MaxNanos &&\n                    seconds >= UnixSecondsAtBclMinValue &&\n                    seconds <= UnixSecondsAtBclMaxValue;\n            }\n        }\n", "        internal static class Duration\n        {\n            public const int NanosecondsPerSecond = 1000000000;\n            public const int NanosecondsPerTick = 100;\n            public const long MaxSeconds = 315576000000L;\n            public const long MinSeconds = -315576000000L;\n            internal const int MaxNanoseconds = NanosecondsPerSecond - 1;\n            internal const int MinNanoseconds = -NanosecondsPerSecond + 1;\n\n            internal static bool IsNormalized(long seconds, int nanoseconds)\n            {\n                // Simple boundaries", "                if (seconds < MinSeconds || seconds > MaxSeconds ||\n                    nanoseconds < MinNanoseconds || nanoseconds > MaxNanoseconds)\n                {\n                    return false;\n                }\n                // We only have a problem is one is strictly negative and the other is\n                // strictly positive.\n                return Math.Sign(seconds) * Math.Sign(nanoseconds) != -1;\n            }\n        }\n        #endregion\n    }\n", "    internal static class StringEncoding\n    {\n        public static Encoding UTF8 = new UTF8Encoding(false);\n    }\n}\n"]}
{"filename": "csharp/redisTest/DevLog.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing System.Runtime.CompilerServices;\nusing System.Threading;\n\nnamespace csharp_test_client", "\nnamespace csharp_test_client\n{\n    public class DevLog\n    {\n        static System.Collections.Concurrent.ConcurrentQueue<string> logMsgQueue = new System.Collections.Concurrent.ConcurrentQueue<string>();\n\n        static Int64 \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8 = (Int64)LOG_LEVEL.TRACE;\n\n        \n", "        static public void Init(LOG_LEVEL logLevel)\n        {\n            ChangeLogLevel(logLevel);\n        }\n\n        static public void ChangeLogLevel(LOG_LEVEL logLevel)\n        {\n            Interlocked.Exchange(ref \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8, (int)logLevel);\n        }\n\n        public static LOG_LEVEL CurrentLogLevel()\n        {\n            var curLogLevel = (LOG_LEVEL)Interlocked.Read(ref \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8);\n            return curLogLevel;\n        }\n", "        public static LOG_LEVEL CurrentLogLevel()\n        {\n            var curLogLevel = (LOG_LEVEL)Interlocked.Read(ref \ucd9c\ub825\uac00\ub2a5_\ub85c\uadf8\ub808\ubca8);\n            return curLogLevel;\n        }\n\n        static public void Write(string msg, LOG_LEVEL logLevel = LOG_LEVEL.TRACE,\n                                [CallerFilePath] string fileName = \"\",\n                                [CallerMemberName] string methodName = \"\",\n                                [CallerLineNumber] int lineNumber = 0)\n        {", "            if (CurrentLogLevel() <= logLevel)\n            {\n                logMsgQueue.Enqueue(string.Format(\"{0}:{1}| {2}\", DateTime.Now, methodName, msg));\n            }\n        }\n\n        static public bool GetLog(out string msg)\n        {\n            if (logMsgQueue.TryDequeue(out msg))\n            {\n                return true;\n            }\n\n            return false;\n        }\n        \n    }\n\n", "            if (logMsgQueue.TryDequeue(out msg))\n            {\n                return true;\n            }\n\n            return false;\n        }\n        \n    }\n\n", "    public enum LOG_LEVEL\n    {\n        TRACE,\n        DEBUG,\n        INFO,\n        WARN,\n        ERROR,\n        DISABLE\n    }\n}\n"]}
{"filename": "csharp/redisTest/mainForm.Designer.cs", "chunked_list": ["\ufeffnamespace csharp_test_client\n{\n    partial class mainForm\n    {\n        /// <summary>\n        /// \ud544\uc218 \ub514\uc790\uc774\ub108 \ubcc0\uc218\uc785\ub2c8\ub2e4.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// \uc0ac\uc6a9 \uc911\uc778 \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4\ub97c \uc815\ub9ac\ud569\ub2c8\ub2e4.\n        /// </summary>\n        /// <param name=\"disposing\">\uad00\ub9ac\ub418\ub294 \ub9ac\uc18c\uc2a4\ub97c \uc0ad\uc81c\ud574\uc57c \ud558\uba74 true\uc774\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 false\uc785\ub2c8\ub2e4.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Windows Form \ub514\uc790\uc774\ub108\uc5d0\uc11c \uc0dd\uc131\ud55c \ucf54\ub4dc\n\n        /// <summary>\n        /// Required method for Designer support - do not modify\n        /// the contents of this method with the code editor.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            this.listBoxLog = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();\n            this.label5 = new System.Windows.Forms.Label();\n            this.groupBox1 = new System.Windows.Forms.GroupBox();\n            this.listBox3 = new System.Windows.Forms.ListBox();\n            this.listBox2 = new System.Windows.Forms.ListBox();\n            this.listBox1 = new System.Windows.Forms.ListBox();\n            this.button3 = new System.Windows.Forms.Button();\n            this.groupBox1.SuspendLayout();\n            this.SuspendLayout();\n            // \n            // listBoxLog\n            // \n            this.listBoxLog.FormattingEnabled = true;\n            this.listBoxLog.HorizontalScrollbar = true;\n            this.listBoxLog.ItemHeight = 15;\n            this.listBoxLog.Location = new System.Drawing.Point(10, 402);\n            this.listBoxLog.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.listBoxLog.Name = \"listBoxLog\";\n            this.listBoxLog.Size = new System.Drawing.Size(496, 319);\n            this.listBoxLog.TabIndex = 41;\n            // \n            // textBox1\n            // \n            this.textBox1.Location = new System.Drawing.Point(64, 20);\n            this.textBox1.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.textBox1.Name = \"textBox1\";\n            this.textBox1.Size = new System.Drawing.Size(133, 23);\n            this.textBox1.TabIndex = 22;\n            this.textBox1.Text = \"127.0.0.1:6379\";\n            // \n            // label5\n            // \n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(10, 24);\n            this.label5.Name = \"label5\";\n            this.label5.Size = new System.Drawing.Size(49, 15);\n            this.label5.TabIndex = 21;\n            this.label5.Text = \"Address\";\n            // \n            // groupBox1\n            // \n            this.groupBox1.Controls.Add(this.listBox3);\n            this.groupBox1.Controls.Add(this.listBox2);\n            this.groupBox1.Controls.Add(this.listBox1);\n            this.groupBox1.Controls.Add(this.button3);\n            this.groupBox1.Controls.Add(this.textBox1);\n            this.groupBox1.Controls.Add(this.label5);\n            this.groupBox1.Location = new System.Drawing.Point(12, 13);\n            this.groupBox1.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.groupBox1.Name = \"groupBox1\";\n            this.groupBox1.Padding = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.groupBox1.Size = new System.Drawing.Size(494, 261);\n            this.groupBox1.TabIndex = 55;\n            this.groupBox1.TabStop = false;\n            this.groupBox1.Text = \"Redis - MultiLPop\";\n            // \n            // listBox3\n            // \n            this.listBox3.FormattingEnabled = true;\n            this.listBox3.HorizontalScrollbar = true;\n            this.listBox3.ItemHeight = 15;\n            this.listBox3.Location = new System.Drawing.Point(298, 53);\n            this.listBox3.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.listBox3.Name = \"listBox3\";\n            this.listBox3.Size = new System.Drawing.Size(140, 184);\n            this.listBox3.TabIndex = 57;\n            // \n            // listBox2\n            // \n            this.listBox2.FormattingEnabled = true;\n            this.listBox2.HorizontalScrollbar = true;\n            this.listBox2.ItemHeight = 15;\n            this.listBox2.Location = new System.Drawing.Point(152, 53);\n            this.listBox2.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.listBox2.Name = \"listBox2\";\n            this.listBox2.Size = new System.Drawing.Size(140, 184);\n            this.listBox2.TabIndex = 57;\n            // \n            // listBox1\n            // \n            this.listBox1.FormattingEnabled = true;\n            this.listBox1.HorizontalScrollbar = true;\n            this.listBox1.ItemHeight = 15;\n            this.listBox1.Location = new System.Drawing.Point(6, 53);\n            this.listBox1.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.listBox1.Name = \"listBox1\";\n            this.listBox1.Size = new System.Drawing.Size(140, 184);\n            this.listBox1.TabIndex = 56;\n            // \n            // button3\n            // \n            this.button3.Font = new System.Drawing.Font(\"\ub9d1\uc740 \uace0\ub515\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.button3.Location = new System.Drawing.Point(203, 16);\n            this.button3.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.button3.Name = \"button3\";\n            this.button3.Size = new System.Drawing.Size(117, 32);\n            this.button3.TabIndex = 55;\n            this.button3.Text = \"\ud14c\uc2a4\ud2b8 \uc2dc\uc791\";\n            this.button3.UseVisualStyleBackColor = true;\n            this.button3.Click += new System.EventHandler(this.button3_Click);\n            // \n            // mainForm\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(521, 721);\n            this.Controls.Add(this.groupBox1);\n            this.Controls.Add(this.listBoxLog);\n            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Fixed3D;\n            this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);\n            this.Name = \"mainForm\";\n            this.Text = \"\ub124\ud2b8\uc6cc\ud06c \ud14c\uc2a4\ud2b8 \ud074\ub77c\uc774\uc5b8\ud2b8\";\n            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.mainForm_FormClosing);\n            this.Load += new System.EventHandler(this.mainForm_Load);\n            this.groupBox1.ResumeLayout(false);\n            this.groupBox1.PerformLayout();\n            this.ResumeLayout(false);\n\n        }\n\n        #endregion\n        private System.Windows.Forms.ListBox listBoxLog;\n        private System.Windows.Forms.TextBox textBox1;\n        private System.Windows.Forms.Label label5;\n        private System.Windows.Forms.GroupBox groupBox1;\n        private System.Windows.Forms.Button button3;\n        private System.Windows.Forms.ListBox listBox3;\n        private System.Windows.Forms.ListBox listBox2;\n        private System.Windows.Forms.ListBox listBox1;\n    }\n}"]}
{"filename": "csharp/redisTest/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace csharp_test_client\n{\n    static class Program\n    {\n        /// <summary>\n        /// \ud574\ub2f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uc8fc \uc9c4\uc785\uc810\uc785\ub2c8\ub2e4.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new mainForm());\n        }\n    }\n}\n", "    static class Program\n    {\n        /// <summary>\n        /// \ud574\ub2f9 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uc8fc \uc9c4\uc785\uc810\uc785\ub2c8\ub2e4.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new mainForm());\n        }\n    }\n}\n"]}
{"filename": "csharp/redisTest/Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     \uc774 \ucf54\ub4dc\ub294 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n//     \ub7f0\ud0c0\uc784 \ubc84\uc804:4.0.30319.42000\n//\n//     \ud30c\uc77c \ub0b4\uc6a9\uc744 \ubcc0\uacbd\ud558\uba74 \uc798\ubabb\ub41c \ub3d9\uc791\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc73c\uba70, \ucf54\ub4dc\ub97c \ub2e4\uc2dc \uc0dd\uc131\ud558\uba74\n//     \uc774\ub7ec\ud55c \ubcc0\uacbd \ub0b4\uc6a9\uc774 \uc190\uc2e4\ub429\ub2c8\ub2e4.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace csharp_test_client.Properties {\n    \n    \n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"16.7.0.0\")]\n    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {\n        \n        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        ", "        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        \n        public static Settings Default {\n            get {\n                return defaultInstance;\n            }\n        }\n    }\n}\n"]}
{"filename": "csharp/redisTest/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     \uc774 \ucf54\ub4dc\ub294 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n//     \ub7f0\ud0c0\uc784 \ubc84\uc804:4.0.30319.42000\n//\n//     \ud30c\uc77c \ub0b4\uc6a9\uc744 \ubcc0\uacbd\ud558\uba74 \uc798\ubabb\ub41c \ub3d9\uc791\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc73c\uba70, \ucf54\ub4dc\ub97c \ub2e4\uc2dc \uc0dd\uc131\ud558\uba74\n//     \uc774\ub7ec\ud55c \ubcc0\uacbd \ub0b4\uc6a9\uc774 \uc190\uc2e4\ub429\ub2c8\ub2e4.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace csharp_test_client.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   \uc9c0\uc5ed\ud654\ub41c \ubb38\uc790\uc5f4 \ub4f1\uc744 \ucc3e\uae30 \uc704\ud55c \uac15\ub825\ud55c \ud615\uc2dd\uc758 \ub9ac\uc18c\uc2a4 \ud074\ub798\uc2a4\uc785\ub2c8\ub2e4.\n    /// </summary>\n    // \uc774 \ud074\ub798\uc2a4\ub294 ResGen \ub610\ub294 Visual Studio\uc640 \uac19\uc740 \ub3c4\uad6c\ub97c \ud1b5\ud574 StronglyTypedResourceBuilder", "    /// </summary>\n    // \uc774 \ud074\ub798\uc2a4\ub294 ResGen \ub610\ub294 Visual Studio\uc640 \uac19\uc740 \ub3c4\uad6c\ub97c \ud1b5\ud574 StronglyTypedResourceBuilder\n    // \ud074\ub798\uc2a4\uc5d0\uc11c \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n    // \uba64\ubc84\ub97c \ucd94\uac00\ud558\uac70\ub098 \uc81c\uac70\ud558\ub824\uba74 .ResX \ud30c\uc77c\uc744 \ud3b8\uc9d1\ud55c \ub2e4\uc74c /str \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uc5ec ResGen\uc744\n    // \ub2e4\uc2dc \uc2e4\ud589\ud558\uac70\ub098 VS \ud504\ub85c\uc81d\ud2b8\ub97c \ub2e4\uc2dc \ube4c\ub4dc\ud558\uc2ed\uc2dc\uc624.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        ", "    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   \uc774 \ud074\ub798\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uce90\uc2dc\ub41c ResourceManager \uc778\uc2a4\ud134\uc2a4\ub97c \ubc18\ud658\ud569\ub2c8\ub2e4.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {", "                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"csharp_test_client.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   \uc774 \uac15\ub825\ud55c \ud615\uc2dd\uc758 \ub9ac\uc18c\uc2a4 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub4e0 \ub9ac\uc18c\uc2a4 \uc870\ud68c\uc5d0 \ub300\ud574 \ud604\uc7ac \uc2a4\ub808\ub4dc\uc758 CurrentUICulture \uc18d\uc131\uc744\n        ///   \uc7ac\uc815\uc758\ud569\ub2c8\ub2e4.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n    }\n}\n"]}
{"filename": "csharp/redisTest/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// \uc5b4\uc148\ube14\ub9ac\uc5d0 \ub300\ud55c \uc77c\ubc18 \uc815\ubcf4\ub294 \ub2e4\uc74c \ud2b9\uc131 \uc9d1\ud569\uc744 \ud1b5\ud574 \n// \uc81c\uc5b4\ub429\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac\uc640 \uad00\ub828\ub41c \uc815\ubcf4\ub97c \uc218\uc815\ud558\ub824\uba74\n// \uc774\ub7ec\ud55c \ud2b9\uc131 \uac12\uc744 \ubcc0\uacbd\ud558\uc138\uc694.\n[assembly: AssemblyTitle(\"csharp_test_client\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"csharp_test_client\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2016\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// ComVisible\uc744 false\ub85c \uc124\uc815\ud558\uba74 \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc774 COM \uad6c\uc131 \uc694\uc18c\uc5d0 \n// \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.  COM\uc5d0\uc11c \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc5d0 \uc561\uc138\uc2a4\ud558\ub824\uba74 ", "// ComVisible\uc744 false\ub85c \uc124\uc815\ud558\uba74 \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc774 COM \uad6c\uc131 \uc694\uc18c\uc5d0 \n// \ud45c\uc2dc\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.  COM\uc5d0\uc11c \uc774 \uc5b4\uc148\ube14\ub9ac\uc758 \ud615\uc2dd\uc5d0 \uc561\uc138\uc2a4\ud558\ub824\uba74 \n// \ud574\ub2f9 \ud615\uc2dd\uc5d0 \ub300\ud574 ComVisible \ud2b9\uc131\uc744 true\ub85c \uc124\uc815\ud558\uc138\uc694.\n[assembly: ComVisible(false)]\n\n// \uc774 \ud504\ub85c\uc81d\ud2b8\uac00 COM\uc5d0 \ub178\ucd9c\ub418\ub294 \uacbd\uc6b0 \ub2e4\uc74c GUID\ub294 typelib\uc758 ID\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n[assembly: Guid(\"9e4b5e72-4e76-4e22-90b0-e53275a99018\")]\n\n// \uc5b4\uc148\ube14\ub9ac\uc758 \ubc84\uc804 \uc815\ubcf4\ub294 \ub2e4\uc74c \ub124 \uac00\uc9c0 \uac12\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.\n//", "// \uc5b4\uc148\ube14\ub9ac\uc758 \ubc84\uc804 \uc815\ubcf4\ub294 \ub2e4\uc74c \ub124 \uac00\uc9c0 \uac12\uc73c\ub85c \uad6c\uc131\ub429\ub2c8\ub2e4.\n//\n//      \uc8fc \ubc84\uc804\n//      \ubd80 \ubc84\uc804 \n//      \ube4c\ub4dc \ubc88\ud638\n//      \uc218\uc815 \ubc84\uc804\n//\n// \ubaa8\ub4e0 \uac12\uc744 \uc9c0\uc815\ud558\uac70\ub098 \uc544\ub798\uc640 \uac19\uc774 '*'\ub97c \uc0ac\uc6a9\ud558\uc5ec \ube4c\ub4dc \ubc88\ud638 \ubc0f \uc218\uc815 \ubc88\ud638\uac00 \uc790\ub3d9\uc73c\ub85c \n// \uc9c0\uc815\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// \uc9c0\uc815\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
