{"filename": "IwaraDownloader/Video.cs", "chunked_list": ["\ufeffusing System.ComponentModel;\nusing System.Net;\nusing static Dawnlc.Module.Utils;\nusing static Dawnlc.Module.Video;\n\nnamespace Dawnlc.Module\n{\n    public class Video : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler? PropertyChanged;\n", "        public event PropertyChangedEventHandler? PropertyChanged;\n\n        protected void OnPropertyChanged(string propertyName)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n        public Video()\n        {\n        }\n        public Video(FileInfo file)\n        {\n            Path = System.IO.Path.GetFullPath(file.FullName);\n            Size = file.Length;\n            Hash = file.OpenRead().SHA1Hash();\n        }\n        /// <summary>\n        /// ID\n        /// </summary>", "        public string ID\n        {\n            get\n            {\n                if (id == null)\n                {\n                    id = Guid.NewGuid().ToString();\n                    OnPropertyChanged(nameof(ID));\n                }\n                return id;\n            }\n            set\n            {", "                if (value != id)\n                {\n                    id = value;\n                    OnPropertyChanged(nameof(ID));\n                }\n            }\n        }\n        private string? id;\n\n        /// <summary>\n        /// Source\n        /// </summary>", "        public string Source\n        {\n            get\n            {\n                if (!string.IsNullOrEmpty(source))\n                {\n                    return source.ToLower();\n                }\n                throw new ArgumentNullException(nameof(Source));\n            }\n            set\n            {", "                if (source != value)\n                {\n                    source = value;\n                    OnPropertyChanged(nameof(Source));\n                }\n            }\n        }\n        private string? source;\n\n        /// <summary>\n        /// \u540d\u5b57\n        /// </summary>", "        public string Name\n        {\n            get\n            {\n                return name ?? ID;\n            }\n            set\n            {\n                if (name != value)\n                {\n                    name = value;\n                    OnPropertyChanged(nameof(Name));\n                }\n            }\n        }\n        private string? name;\n\n        /// <summary>\n        /// \u4f5c\u8005\u522b\u540d\n        /// </summary>", "                if (name != value)\n                {\n                    name = value;\n                    OnPropertyChanged(nameof(Name));\n                }\n            }\n        }\n        private string? name;\n\n        /// <summary>\n        /// \u4f5c\u8005\u522b\u540d\n        /// </summary>", "        public string Alias\n        {\n            get\n            {\n                return alias ?? \"Unknown\";\n            }\n            set\n            {\n                if (alias != value)\n                {\n                    alias = value;\n                    OnPropertyChanged(nameof(Alias));\n                }\n            }\n        }\n        private string? alias;\n\n        /// <summary>\n        /// \u4f5c\u8005\n        /// </summary>", "                if (alias != value)\n                {\n                    alias = value;\n                    OnPropertyChanged(nameof(Alias));\n                }\n            }\n        }\n        private string? alias;\n\n        /// <summary>\n        /// \u4f5c\u8005\n        /// </summary>", "        public string Author\n        {\n            get\n            {\n                return author ?? \"Unknown\";\n            }\n            set\n            {\n                if (author != value)\n                {\n                    author = value;\n                    OnPropertyChanged(nameof(Author));\n                }\n            }\n        }\n        private string? author;\n\n", "                if (author != value)\n                {\n                    author = value;\n                    OnPropertyChanged(nameof(Author));\n                }\n            }\n        }\n        private string? author;\n\n\n        public struct Tag\n        {", "        public struct Tag\n        {\n            public string ID { get; set; }\n            public string Type { get; set; }\n        }\n        /// <summary>\n        /// \u6807\u7b7e\n        /// </summary>\n        public List<Tag> Tags\n        {\n            get\n            {\n                return tags ?? new List<Tag>() { new Tag() { ID = \"Uncategorized\" , Type = \"Uncategorized\" } };\n            }\n            set\n            {", "                if (tags != value)\n                {\n                    tags = value;\n                    OnPropertyChanged(nameof(Tag));\n                }\n            }\n        }\n        private List<Tag>? tags;\n\n        /// <summary>\n        /// \u9644\u52a0\u4fe1\u606f\n        /// </summary>", "        public string Info\n        {\n            get\n            {\n                return info ?? \"\";\n            }\n            set\n            {\n                if (info != value)\n                {\n                    info = value;\n                    OnPropertyChanged(nameof(Info));\n                }\n            }\n        }\n        private string? info;\n\n        /// <summary>\n        /// \u4e0a\u4f20\u65f6\u95f4\n        /// </summary>", "                if (info != value)\n                {\n                    info = value;\n                    OnPropertyChanged(nameof(Info));\n                }\n            }\n        }\n        private string? info;\n\n        /// <summary>\n        /// \u4e0a\u4f20\u65f6\u95f4\n        /// </summary>", "        public DateTime UploadTime\n        {\n            get\n            {\n                return uploadTime ?? new();\n            }\n            set\n            {\n                if (value != uploadTime)\n                {\n                    uploadTime = value;\n                    OnPropertyChanged(nameof(UploadTime));\n                }\n            }\n        }\n        private DateTime? uploadTime;\n\n        /// <summary>\n        /// \u4e0b\u8f7d\u65f6\u95f4\n        /// </summary>", "                if (value != uploadTime)\n                {\n                    uploadTime = value;\n                    OnPropertyChanged(nameof(UploadTime));\n                }\n            }\n        }\n        private DateTime? uploadTime;\n\n        /// <summary>\n        /// \u4e0b\u8f7d\u65f6\u95f4\n        /// </summary>", "        public DateTime DownloadTime\n        {\n            get\n            {\n                return downloadTime ?? new();\n            }\n            set\n            {\n                if (value != downloadTime)\n                {\n                    downloadTime = value;\n                    OnPropertyChanged(nameof(DownloadTime));\n                }\n            }\n        }\n        private DateTime? downloadTime;\n\n        /// <summary>\n        /// \u5927\u5c0f\n        /// </summary>", "                if (value != downloadTime)\n                {\n                    downloadTime = value;\n                    OnPropertyChanged(nameof(DownloadTime));\n                }\n            }\n        }\n        private DateTime? downloadTime;\n\n        /// <summary>\n        /// \u5927\u5c0f\n        /// </summary>", "        public long Size\n        {\n            get\n            {\n                return size ?? 0;\n            }\n            set\n            {\n                if (size != value)\n                {\n                    size = value;\n                    OnPropertyChanged(nameof(Size));\n                }\n            }\n        }\n        private long? size;\n\n        /// <summary>\n        /// \u8def\u5f84\n        /// </summary>", "                if (size != value)\n                {\n                    size = value;\n                    OnPropertyChanged(nameof(Size));\n                }\n            }\n        }\n        private long? size;\n\n        /// <summary>\n        /// \u8def\u5f84\n        /// </summary>", "        public string Path\n        {\n            get\n            {\n                path ??= System.IO.Path.Combine(Env.MainConfig.WebRootPath, Author, $\"{ID}[{Source}].mp4\");\n                string directoryPath = System.IO.Path.GetDirectoryName(System.IO.Path.GetFullPath(path)) ?? System.IO.Path.Combine(Env.MainConfig.WebRootPath, Author);\n                if (System.IO.Path.Exists(directoryPath)) \n                {\n                    return path;\n                }\n                else\n                {\n                    Directory.CreateDirectory(directoryPath);\n                    return path;\n                }\n            }\n            set\n            {", "                if (value != path)\n                {\n                    if (IsValidPath(value))\n                    {\n                        path = value;\n                        OnPropertyChanged(nameof(Path));\n                    }\n                    else\n                    {\n                        throw new NotSupportedException(value);\n                    }\n                }\n            }\n        }\n        private string? path;\n\n        /// <summary>\n        /// \u662f\u5426\u5b58\u5728\n        /// </summary>", "        public bool Exists\n        {\n            get\n            {\n                return exists;\n            }\n            set\n            {\n                if (value != exists)\n                {\n                    exists = value;\n                    OnPropertyChanged(nameof(Exists));\n                }\n            }\n        }", "                if (value != exists)\n                {\n                    exists = value;\n                    OnPropertyChanged(nameof(Exists));\n                }\n            }\n        }\n        private bool exists;\n\n        /// <summary>\n        /// Hash\n        /// </summary>\n        public byte[]? Hash\n        {\n            get\n            {\n                return hash;\n            }\n            set\n            {", "                if (hash != value)\n                {\n                    hash = value;\n                    OnPropertyChanged(nameof(Hash));\n                }\n            }\n        }\n        private byte[]? hash;\n    }\n    public class VideoTask: Video\n    {\n        \n        /// <summary>\n        /// \u4e0b\u8f7d\u5730\u5740\n        /// </summary>", "    public class VideoTask: Video\n    {\n        \n        /// <summary>\n        /// \u4e0b\u8f7d\u5730\u5740\n        /// </summary>\n        public string DownloadUrl\n        {\n            get\n            {\n                return downloadUrl ?? throw new ArgumentNullException(nameof(DownloadUrl));\n            }\n            set\n            {", "                if (downloadUrl != value)\n                {\n                    downloadUrl = value;\n                    OnPropertyChanged(nameof(DownloadUrl));\n                }\n            }\n        }\n        private string? downloadUrl;\n        /// <summary>\n        /// \u4e0b\u8f7d\u5730\u5740\n        /// </summary>\n        public string? DownloadProxy\n        {\n            get\n            {\n                return downloadProxy;\n            }\n            set\n            {", "                if (downloadProxy != value)\n                {\n                    downloadProxy = value;\n                    OnPropertyChanged(nameof(DownloadProxy));\n                }\n            }\n        }\n        private string? downloadProxy;\n        /// <summary>\n        /// \u4e0b\u8f7d\u4f7f\u7528\u7684Authorization\n        /// </summary>\n        public string? Authorization\n        {\n            get\n            {\n                return authorization;\n            }\n            set\n            {", "                if (authorization != value)\n                {\n                    authorization = value;\n                    OnPropertyChanged(nameof(Authorization));\n                }\n            }\n        }\n        private string? authorization;\n        /// <summary>\n        /// \u4e0b\u8f7d\u4f7f\u7528\u7684Cookies\n        /// </summary>\n        public List<Cookie> DownloadCookies\n        {\n            get\n            {\n                return downloadCookies ?? new List<Cookie>();\n            }\n            set\n            {", "                if (downloadCookies != value)\n                {\n                    downloadCookies = value;\n                    OnPropertyChanged(nameof(DownloadCookies));\n                }\n            }\n        }\n        private List<Cookie>? downloadCookies;\n    }\n}\n"]}
{"filename": "IwaraDownloader/Config.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\nusing static Dawnlc.Module.Utils;\n\nnamespace IwaraDownloader\n{\n    public struct Config\n    {\n        \n        public Config()\n        {\n        }\n", "        public enum AuthenticationType\n        {\n            None,\n            Token\n        }\n        public int Port { get; set; } = 6800;\n        public int ConcurrentDownloads { get; set; } = 4;\n        public long BufferBlockSize { get; set; } = 16000000;\n        public int ParallelCount { get; set; } = 8;\n        public string WebRootPath { get; set; } = Path.Combine(Env.Path, \"root\");\n        public AuthenticationType AuthType { get; set; } = AuthenticationType.None;", "        public int ParallelCount { get; set; } = 8;\n        public string WebRootPath { get; set; } = Path.Combine(Env.Path, \"root\");\n        public AuthenticationType AuthType { get; set; } = AuthenticationType.None;\n        public bool IsHTTPS { get; set; } = false;\n        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\n        public string? Token { get; set; }\n        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\n        public string? CertPath { get; set; }\n        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\n        public string? KeyPath { get; set; }\n    }\n}\n"]}
{"filename": "IwaraDownloader/Result.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Dawnlc.Module\n{\n    public enum ResultCode\n    {\n        /// <summary>\n        /// \u672a\u521d\u59cb\u5316\n        /// </summary>\n        Uninitialized = -1,\n        /// <summary>\n        /// \u8bf7\u6c42\u6210\u529f\n        /// </summary>\n        OK,\n        /// <summary>\n        /// \u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u8bed\u6cd5\u9519\u8bef\uff0c\u670d\u52a1\u5668\u65e0\u6cd5\u7406\u89e3(\u9519\u8bef\u8bf7\u6c42)\n        /// </summary>\n        BadRequest,\n        /// <summary>\n        /// \u670d\u52a1\u5668\u7406\u89e3\u8bf7\u6c42\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\uff0c\u4f46\u662f\u62d2\u7edd\u6267\u884c\u6b64\u8bf7\u6c42(\u6ca1\u6709\u6743\u9650)\n        /// </summary>\n        Forbidden,\n        /// <summary>\n        /// \u8bf7\u6c42\u8981\u6c42\u7528\u6237\u7684\u8eab\u4efd\u8ba4\u8bc1(\u672a\u767b\u5f55)\n        /// </summary>\n        Unauthorized,\n        /// <summary>\n        /// \u672a\u88ab\u5904\u7406\u7684\u9519\u8bef(\u5185\u90e8\u9519\u8bef)\n        /// </summary>\n        Unhandled,\n        /// <summary>\n        /// \u5df2\u5b58\u5728\n        /// </summary>\n        Exists,\n        /// <summary>\n        /// \u4e0d\u5b58\u5728\n        /// </summary>\n        NotFound,\n        /// <summary>\n        /// \u8def\u5f84\u4e0d\u5b58\u5728\n        /// </summary>\n        PathNotFound\n\n    }", "    public class Result\n    {\n        private int? ver;\n        public int Ver\n        {\n            get\n            {\n                return ver ?? 1;\n            }\n            set\n            {\n                ver = value;\n            }\n        }\n        private ResultCode? code;", "        public ResultCode Code\n        {\n            get\n            {\n                return code ?? ResultCode.Uninitialized;\n            }\n            set\n            {\n                code = value;\n            }\n        }\n        private string? msg;", "        public string Msg\n        {\n            get\n            {\n                return msg ?? Code.ToString();\n            }\n            set\n            {\n                msg = value;\n            }\n        }\n        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]\n        public object? Data { get; set; }\n    }\n}\n"]}
{"filename": "IwaraDownloader/Database.cs", "chunked_list": ["\ufeffusing Microsoft.Data.Sqlite;\nusing System.Collections.Specialized;\nusing System.Text.Json;\nusing static Dawnlc.Module.Utils;\nusing System.Collections.ObjectModel;\n\nnamespace Dawnlc.Module\n{\n    public class Database\n    {\n        public ObservableCollection<Video> Videos { get; set; }", "    public class Database\n    {\n        public ObservableCollection<Video> Videos { get; set; }\n        private static SqliteConnection DBConnect { get; set; } = new SqliteConnection($\"Data Source={Path.Combine(Env.Path, $\"{Env.Name}.db\")}\");\n\n        private static SqliteDataReader ExecuteReaderCommand(string command)\n        {\n            SqliteCommand DBCommand = DBConnect.CreateCommand();\n            DBCommand.CommandText = command;\n            return DBCommand.ExecuteReader();\n        }", "        private static int ExecuteCommand(string command)\n        {\n            SqliteCommand DBCommand = DBConnect.CreateCommand();\n            DBCommand.CommandText = command;\n            return DBCommand.ExecuteNonQuery();\n        }\n        public Database()\n        {\n            SqliteCommand DBCommand = DBConnect.CreateCommand();\n            DBConnect.Open();\n            ExecuteCommand(@\"\n                CREATE TABLE IF NOT EXISTS 'Videos' (\n                    ID            TEXT PRIMARY KEY UNIQUE,\n                    Source        TEXT NOT NULL,\n                    Name          TEXT NOT NULL,\n                    Alias         TEXT NOT NULL,\n                    Author        TEXT NOT NULL,\n                    Tag           TEXT NOT NULL,\n                    Info          TEXT NOT NULL,\n                    UploadTime    DATETIME NOT NULL,\n                    DownloadTime  DATETIME NOT NULL,\n                    Size          INTEGER NOT NULL,\n                    Path          TEXT NOT NULL,\n                    [Exists]      BOOLEAN NOT NULL,\n                    Hash          BLOB NOT NULL\n                );\n            \");", "            using (var reader = ExecuteReaderCommand(@\"SELECT * FROM 'Videos'\"))\n            {\n                Videos = reader.ConvertToVideo();\n            }\n            SqliteCommand INSERT_Videos = new($\"INSERT INTO 'Videos' (ID,Source,Name,Alias,Author,Tag,Info,UploadTime,DownloadTime,Size,Path,[Exists],Hash) VALUES (@ID,@Source,@Name,@Alias,@Author,@Tag,@Info,@UploadTime,@DownloadTime,@Size,@Path,@Exists,@Hash)\", DBConnect);\n            SqliteCommand DELETE_Videos = new($\"DELETE FROM 'Videos' WHERE ID=@ID\", DBConnect);\n            SqliteCommand UPDATE_Videos = new($\"UPDATE 'Videos' SET ID=@ID,Source=@Source,Name=@Name,Alias=@Alias,Author=@Author,Tag=@Tag,Info=@Info,UploadTime=@UploadTime,DownloadTime=@DownloadTime,Size=@Size,Path=@Path,[Exists]=@Exists,Hash=@Hash WHERE ID=@ID\", DBConnect);\n            Videos.CollectionChanged += (sender, e) =>\n            {\n                switch (e.Action)\n                {\n                    case NotifyCollectionChangedAction.Add:", "                        if (e.NewItems != null)\n                        {\n                            foreach (Video item in e.NewItems)\n                            {\n                                INSERT_Videos.Parameters.AddRange(new SqliteParameter[] \n                                {\n                                    new(\"@ID\",item.ID),\n                                    new(\"@Source\",item.Source),\n                                    new(\"@Name\",item.Name),\n                                    new(\"@Alias\",item.Alias),\n                                    new(\"@Author\",item.Author),\n                                    new(\"@Tag\",JsonSerializer.Serialize(item.Tags)),\n                                    new(\"@Info\",item.Info),\n                                    new(\"@UploadTime\",item.UploadTime),\n                                    new(\"@DownloadTime\",item.DownloadTime),\n                                    new(\"@Size\",item.Size),\n                                    new(\"@Path\",item.Path),\n                                    new(\"@Exists\",item.Exists),\n                                    new(\"@Hash\",item.Hash)\n                                });\n                                INSERT_Videos.ExecuteNonQuery();\n                                INSERT_Videos.Parameters.Clear();\n                            }\n                        }\n                        break;\n                    case NotifyCollectionChangedAction.Remove:", "                        if (e.OldItems != null)\n                        {\n                            foreach (Video item in e.OldItems)\n                            {\n                                DELETE_Videos.Parameters.AddWithValue(\"@ID\", item.ID);\n                                DELETE_Videos.ExecuteNonQuery();\n                                DELETE_Videos.Parameters.Clear();\n                            }\n                        }\n                        break;\n                    case NotifyCollectionChangedAction.Replace:\n                    case NotifyCollectionChangedAction.Reset:", "                        if (e.NewItems != null)\n                        {\n                            foreach (Video item in e.NewItems)\n                            {\n                                UPDATE_Videos.Parameters.AddRange(new SqliteParameter[]\n                                {\n                                    new(\"@ID\",item.ID),\n                                    new(\"@Source\",item.Source),\n                                    new(\"@Name\",item.Name),\n                                    new(\"@Alias\",item.Alias),\n                                    new(\"@Author\",item.Author),\n                                    new(\"@Tag\",JsonSerializer.Serialize(item.Tags)),\n                                    new(\"@Info\",item.Info),\n                                    new(\"@UploadTime\",item.UploadTime),\n                                    new(\"@DownloadTime\",item.DownloadTime),\n                                    new(\"@Size\",item.Size),\n                                    new(\"@Path\",item.Path),\n                                    new(\"@Exists\",item.Exists),\n                                    new(\"@Hash\",item.Hash)\n                                });\n                                UPDATE_Videos.ExecuteNonQuery();\n                                UPDATE_Videos.Parameters.Clear();\n                            }\n                        }\n                        break;\n                    default:\n                        break;\n                }\n            };\n        }\n    }\n}\n"]}
{"filename": "IwaraDownloader/HTTP.cs", "chunked_list": ["\ufeffusing System.Net;\nusing static Dawnlc.Module.Utils;\n\nnamespace Dawnlc.Module\n{\n    public static class HTTP\n    {\n        private static ClientPool Handler { get; set; } = new(10, new(0, 1, 0));\n        private class ClientHandler : HttpClientHandler\n        {\n            private readonly HttpMessageInvoker Handler = new(new SocketsHttpHandler()\n            {\n                SslOptions = new()\n                {\n                    //Domain Fronting\n                    TargetHost = \"download.windowsupdate.com\"\n                }\n            });", "        private class ClientHandler : HttpClientHandler\n        {\n            private readonly HttpMessageInvoker Handler = new(new SocketsHttpHandler()\n            {\n                SslOptions = new()\n                {\n                    //Domain Fronting\n                    TargetHost = \"download.windowsupdate.com\"\n                }\n            });\n            protected override void Dispose(bool disposing)\n            {\n                base.Dispose(disposing);\n                Handler.Dispose();\n            }", "            protected override void Dispose(bool disposing)\n            {\n                base.Dispose(disposing);\n                Handler.Dispose();\n            }\n            protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n            {\n                return await Handler.SendAsync(request, cancellationToken);\n            }\n        }\n        private class ClientPool : IDisposable\n        {", "        private class ClientPool : IDisposable\n        {\n            private class Client : IDisposable\n            {\n                public DateTime LastUseTime { get; set; }\n                public string Host { get; set; }\n                private HttpClient ClientHandle { get; set; }\n                public Client(Uri uri, TimeSpan timeout)\n                {\n                    Host = uri.Host;\n                    ClientHandle = new(new ClientHandler()\n                    {\n                        AutomaticDecompression = DecompressionMethods.GZip,\n                        AllowAutoRedirect = true,\n                        ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => { return true; }\n                    })\n                    {\n                        Timeout = timeout\n                    };\n                }", "                public HttpResponseMessage Send(HttpRequestMessage httpRequestMessage, CancellationToken cancellationToken)\n                {\n                    return Send(httpRequestMessage, DefaultCompletionOption, cancellationToken);\n                }\n                public HttpResponseMessage Send(HttpRequestMessage httpRequestMessage, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n                {\n                    LastUseTime = DateTime.Now;\n                    return ClientHandle.Send(httpRequestMessage, completionOption, cancellationToken);\n                }\n                public Task<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequestMessage, CancellationToken cancellationToken)\n                {\n                    return SendAsync(httpRequestMessage, DefaultCompletionOption, cancellationToken);\n                }\n                public Task<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequestMessage, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n                {\n                    LastUseTime = DateTime.Now;\n                    return ClientHandle.SendAsync(httpRequestMessage, completionOption, cancellationToken);\n                }", "                public void ClearDefaultRequestHeaders()\n                {\n                    ClientHandle.DefaultRequestHeaders.Clear();\n                }\n                public void Dispose()\n                {\n                    ClientHandle.Dispose();\n                }\n            }\n            private volatile bool _disposed;\n            private List<Client> Clients { get; set; }", "            private volatile bool _disposed;\n            private List<Client> Clients { get; set; }\n            private TimeSpan Timeout { get; set; }\n            private int MaxClient { get; set; }\n            public static HttpCompletionOption DefaultCompletionOption { get; set; } = HttpCompletionOption.ResponseContentRead;\n            public ClientPool(int maxClient, TimeSpan timeout)\n            {\n                Timeout = timeout;\n                Clients = new();\n                MaxClient = maxClient;\n            }", "            public ClientPool StartClient(Uri url)\n            {\n                CheckDisposed();\n                if (!Clients.Any(i => i.Host == url.Host))\n                {\n                    Clients.Add(new(url, Timeout));\n                }\n                while (Clients.Count > MaxClient)\n                {\n                    Client client = Clients.OrderBy(i => i.LastUseTime).Last();\n                    client.Dispose();\n                    Clients.Remove(client);\n                }\n                return this;\n            }", "            private static HttpRequestMessage CreateRequestMessage(HttpMethod method, Uri uri, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null)\n            {\n                HttpRequestMessage request = new(method, uri);\n                request.Headers.Add(\"user-agent\", new List<string> { $\"{Env.Name} {string.Join(\".\", Env.Version)}\" });\n                if (headers != null)\n                {\n                    foreach (var header in headers)\n                    {\n                        request.Headers.Add(header.Key, header.Value);\n                    }\n                }\n                return request;\n            }\n\n            public Task<HttpResponseMessage> HeadAsync(Uri requestUri, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => HeadAsync(requestUri, DefaultCompletionOption, headers);\n            public Task<HttpResponseMessage> HeadAsync(Uri requestUri, HttpCompletionOption completionOption, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => HeadAsync(requestUri, completionOption, CancellationToken.None, headers);\n            public Task<HttpResponseMessage> HeadAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => SendAsync(CreateRequestMessage(HttpMethod.Head, requestUri, headers), completionOption, cancellationToken);\n\n            public Task<HttpResponseMessage> GetAsync(Uri requestUri, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => GetAsync(requestUri, DefaultCompletionOption, headers);\n            public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => GetAsync(requestUri, completionOption, CancellationToken.None, headers);\n            public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => SendAsync(CreateRequestMessage(HttpMethod.Get, requestUri, headers), completionOption, cancellationToken);\n            public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent? content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => PostAsync(requestUri, content, CancellationToken.None, headers);\n            public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent? content, CancellationToken cancellationToken, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null)\n            {\n                HttpRequestMessage request = CreateRequestMessage(HttpMethod.Post, requestUri, headers);\n                request.Content = content;\n                return SendAsync(request, cancellationToken);\n            }\n            public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent? content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => PutAsync(requestUri, content, CancellationToken.None, headers);\n            public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent? content, CancellationToken cancellationToken, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null)\n            {\n                HttpRequestMessage request = CreateRequestMessage(HttpMethod.Put, requestUri, headers);\n                request.Content = content;\n                return SendAsync(request, cancellationToken);\n            }\n            public Task<HttpResponseMessage> PatchAsync(Uri requestUri, HttpContent? content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => PatchAsync(requestUri, content, CancellationToken.None, headers);\n            public Task<HttpResponseMessage> PatchAsync(Uri requestUri, HttpContent? content, CancellationToken cancellationToken, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null)\n            {\n                HttpRequestMessage request = CreateRequestMessage(HttpMethod.Patch, requestUri, headers);\n                request.Content = content;\n                return SendAsync(request, cancellationToken);\n            }\n            public Task<HttpResponseMessage> DeleteAsync(Uri requestUri, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => DeleteAsync(requestUri, CancellationToken.None, headers);\n            public Task<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? headers = null) => SendAsync(CreateRequestMessage(HttpMethod.Delete, requestUri, headers), cancellationToken);", "            public HttpResponseMessage Send(HttpRequestMessage request, CancellationToken cancellationToken)\n            {\n                return Send(request, DefaultCompletionOption, cancellationToken);\n            }\n            public HttpResponseMessage Send(HttpRequestMessage httpRequestMessage, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n            {\n                CheckDisposed();\n                Client? client = Clients.Find(i => i.Host == httpRequestMessage.RequestUri?.Host) ?? throw new(\"\u672a\u627e\u5230\u53ef\u7528\u7684HTTP\u5ba2\u6237\u7aef\u3002\");\n                client.ClearDefaultRequestHeaders();\n                return client.Send(httpRequestMessage, completionOption, cancellationToken);\n            }\n            public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n            {\n                return SendAsync(request, DefaultCompletionOption, cancellationToken);\n            }\n            public Task<HttpResponseMessage> SendAsync(HttpRequestMessage httpRequestMessage, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n            {\n                CheckDisposed();\n                Client? client = Clients.Find(i => i.Host == httpRequestMessage.RequestUri?.Host) ?? throw new(\"\u672a\u627e\u5230\u53ef\u7528\u7684HTTP\u5ba2\u6237\u7aef\u3002\");\n                client.ClearDefaultRequestHeaders();\n                return client.SendAsync(httpRequestMessage, completionOption, cancellationToken);\n            }", "            public void Dispose()\n            {\n                Dispose(true);\n                GC.SuppressFinalize(this);\n            }\n            protected virtual void Dispose(bool disposing)\n            {\n                if (disposing && !_disposed)\n                {\n                    _disposed = true;\n", "                    foreach (var item in Clients)\n                    {\n                        item.Dispose();\n                    }\n                }\n            }\n            private void CheckDisposed()\n            {\n                if (_disposed)\n                {\n                    throw new ObjectDisposedException(GetType().ToString());\n                }\n            }\n        }", "                if (_disposed)\n                {\n                    throw new ObjectDisposedException(GetType().ToString());\n                }\n            }\n        }\n        public static async Task<HttpResponseMessage> GetAsync(Uri url, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).GetAsync(url, head);\n        }\n        public static async Task<HttpResponseMessage> GetStreamAsync(Uri url, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).GetAsync(url, HttpCompletionOption.ResponseHeadersRead, head);\n        }", "        public static async Task<HttpResponseMessage> GetStreamAsync(Uri url, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).GetAsync(url, HttpCompletionOption.ResponseHeadersRead, head);\n        }\n        public static async Task<HttpResponseMessage> PostAsync(Uri url, HttpContent content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).PostAsync(url, content, head);\n        }\n        public static async Task<HttpResponseMessage> PatchAsync(Uri url, HttpContent content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).PatchAsync(url, content, head);\n        }", "        public static async Task<HttpResponseMessage> PatchAsync(Uri url, HttpContent content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).PatchAsync(url, content, head);\n        }\n        public static async Task<HttpResponseMessage> PutAsync(Uri url, HttpContent content, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            return await Handler.StartClient(url).PutAsync(url, content, head);\n        }\n        \n        public static async Task DownloadAsync(Uri url, string path, DownloadTask task, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            try\n            {", "        public static async Task DownloadAsync(Uri url, string path, DownloadTask task, IEnumerable<KeyValuePair<string, IEnumerable<string>>>? head = null)\n        {\n            try\n            {\n                if (File.Exists(path))\n                {\n                    File.Delete(path);\n                }\n\n                long ReceivedBytes = 0;\n\n                head ??= new List<KeyValuePair<string, IEnumerable<string>>>();\n                List<KeyValuePair<string, IEnumerable<string>>>? getLength = new() { new(\"Range\", new List<string>() { $\"bytes=0-16\" }) };\n                HttpResponseMessage httpResponse = await GetAsync(url, getLength.Concat(head.Where(i => i.Key.ToLower() != \"range\")));", "                if (httpResponse.IsSuccessStatusCode && Env.MainConfig.ParallelCount != 0)\n                {\n                    long fileLength = httpResponse.Content.Headers.ContentRange?.Length ?? httpResponse.Content.Headers.ContentLength ?? -1;\n                    long chunkSize = fileLength / Env.MainConfig.ParallelCount;\n                    if (fileLength > 0)\n                    {\n                        async Task chunk(int p, int tryCount)\n                        {\n                            Log($\"Task: {task.Video.Name} chunk: {p} try: {tryCount} \");\n                            long rangeStart = p * chunkSize;\n                            long rangeEnd = ((p + 1) != Env.MainConfig.ParallelCount) ? (rangeStart + chunkSize) : fileLength;\n                            try\n                            {\n                                byte[] buffer = new byte[Env.MainConfig.BufferBlockSize];\n                                List<KeyValuePair<string, IEnumerable<string>>>? Range = new() { new(\"Range\", new List<string>() { $\"bytes={rangeStart}-{rangeEnd}\" }) };\n                                Stream ResponseStream = await (await GetStreamAsync(url, Range.Concat(head.Where(i => i.Key.ToLower() != \"range\")))).Content.ReadAsStreamAsync();\n                                int bytesRead;\n                                long chunkSeek = rangeStart;", "                                using (FileStream destination = new(path, FileMode.OpenOrCreate, FileAccess.Write, FileShare.Write))\n                                {\n                                    while ((bytesRead = await ResponseStream.ReadAsync(buffer)) != 0)\n                                    {\n                                        destination.Seek(chunkSeek, SeekOrigin.Begin);\n                                        await destination.WriteAsync(buffer.AsMemory(0, bytesRead));\n                                        ReceivedBytes += bytesRead;\n                                        chunkSeek = destination.Position;\n                                        task.OnDownloadProgressChanged((double)ReceivedBytes / fileLength * 100);\n                                    }\n                                };\n                            }", "                            catch (HttpRequestException ex)\n                            {\n                                if (tryCount < 5)\n                                {\n                                    Log($\"Task: {task.Video.Name} HttpRequestException try:{tryCount} Delay10s\");\n                                    await Task.Delay(1000 * 10);\n                                    await chunk(p, tryCount++);\n                                }\n                                else\n                                {\n                                    Log($\"Task: {task.Video.Name} tryCount Max throw\");\n                                    throw ex;\n                                }\n                            }\n                        }\n                        Task.WaitAll(Enumerable.Range(0, Env.MainConfig.ParallelCount).Select(p => chunk(p, 0)).ToArray());\n                        return;\n                    }\n                }\n                byte[] buffer = new byte[Env.MainConfig.BufferBlockSize];\n                Stream ResponseStream = await (await GetStreamAsync(url, head)).Content.ReadAsStreamAsync();\n                int bytesRead;", "                using (FileStream destination = new(path, FileMode.OpenOrCreate, FileAccess.Write, FileShare.ReadWrite))\n                {\n                    while ((bytesRead = await ResponseStream.ReadAsync(buffer)) != 0)\n                    {\n                        ReceivedBytes += bytesRead;\n                        await destination.WriteAsync(buffer.AsMemory(0, bytesRead));\n                        task.OnDownloadProgressChanged((double)ReceivedBytes / ResponseStream.Length * 100);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Log($\"DownloadException {url.ToString() ?? path}\");\n                Warn($\"----------- Errer info -----------{Environment.NewLine}{ex}\");\n            }\n        }\n    }\n}\n", "            catch (Exception ex)\n            {\n                Log($\"DownloadException {url.ToString() ?? path}\");\n                Warn($\"----------- Errer info -----------{Environment.NewLine}{ex}\");\n            }\n        }\n    }\n}\n"]}
{"filename": "IwaraDownloader/Request.cs", "chunked_list": ["\ufeffusing System.Text.Json;\n\nnamespace Dawnlc.Module\n{\n    public enum RequestCode\n    {\n        Add,\n        Check,\n        State\n    }\n    public struct Request\n    {\n        public int[] Ver\n        {\n            get\n            {\n                return ver ?? new int[] { 0, 0, 0 };\n            }\n            set\n            {\n                ver = value;\n            }\n        }\n        private int[]? ver;\n\n        public string? Token\n        {\n            get\n            {\n                return token;\n            }\n            set\n            {\n                token = value;\n            }\n        }\n        private string? token;\n", "    public struct Request\n    {\n        public int[] Ver\n        {\n            get\n            {\n                return ver ?? new int[] { 0, 0, 0 };\n            }\n            set\n            {\n                ver = value;\n            }\n        }\n        private int[]? ver;\n\n        public string? Token\n        {\n            get\n            {\n                return token;\n            }\n            set\n            {\n                token = value;\n            }\n        }\n        private string? token;\n", "        public RequestCode Code\n        {\n            get\n            {\n                return code ?? throw new ArgumentNullException(\"Request Code is null\");\n            }\n            set\n            {\n                code = value;\n            }\n        }\n        private RequestCode? code;\n        ", "        public JsonDocument Data\n        {\n            get\n            {\n                return data ?? throw new ArgumentNullException(\"Request Data is null\");\n            }\n            set\n            {\n                data = value;\n            }\n        }\n        private JsonDocument? data;\n\n    }\n\n}\n\n"]}
{"filename": "IwaraDownloader/DownloadManager.cs", "chunked_list": ["\ufeffnamespace Dawnlc.Module\n{\n    public class DownloadManager\n    {\n\n    }\n}\n"]}
{"filename": "IwaraDownloader/ExtensionMethods.cs", "chunked_list": ["\ufeffusing Microsoft.Data.Sqlite;\nusing System.Collections;\nusing System.Collections.ObjectModel;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Text.Json;\n\nnamespace Dawnlc.Module\n{\n    public static class ExtensionMethods\n    {", "{\n    public static class ExtensionMethods\n    {\n        private static readonly SHA1 SHA1 = SHA1.Create();\n        private static readonly SHA256 SHA256 = SHA256.Create();\n        private static readonly MD5 MD5 = MD5.Create();\n        public static string ToReadableString(this long bytes, int decimalPlaces)\n        {\n            double numBytes = Convert.ToDouble(bytes);\n            numBytes = Math.Max(numBytes, 0);\n            string[] suffixes = { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };\n            int suffixIndex = 0;", "            while (numBytes >= 1024 && suffixIndex < suffixes.Length - 1)\n            {\n                numBytes /= 1024;\n                suffixIndex++;\n            }\n            return $\"{numBytes.ToString($\"N{decimalPlaces}\")} {suffixes[suffixIndex]}\";\n        }\n\n        public static string ToReadableString(this double bytes, int decimalPlaces)\n        {\n            bytes = Math.Max(bytes, 0);\n            string[] suffixes = { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };\n            int suffixIndex = 0;", "        public static string ToReadableString(this double bytes, int decimalPlaces)\n        {\n            bytes = Math.Max(bytes, 0);\n            string[] suffixes = { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };\n            int suffixIndex = 0;\n            while (bytes >= 1024 && suffixIndex < suffixes.Length - 1)\n            {\n                bytes /= 1024;\n                suffixIndex++;\n            }\n            return $\"{bytes.ToString($\"N{decimalPlaces}\")} {suffixes[suffixIndex]}\";\n        }\n        /// <summary>\n        /// \u5b57\u8282\u6570\u7ec4\u662f\u5426\u76f8\u7b49\n        /// </summary>\n        /// <param name=\"byteDatas\"></param>\n        /// <returns></returns>", "        public static bool SequenceCompare(this byte[]? x, byte[]? y)\n        {\n            if (ReferenceEquals(x, y)) return true;\n            if (x is null || y is null) return false;\n            if (x.Length != y.Length) return false;\n            return x.SequenceEqual(y);\n        }\n\n        /// <summary>\n        /// byte[] \u4e0d\u540c\u8ba1\u6570\n        /// </summary>\n        /// <param name=\"byteDatas\"></param>\n        /// <returns></returns>", "        public static int Differences(this byte[] x, byte[] y)\n        {\n            return new BitArray(x).Differences(new BitArray(y));\n        }\n        /// <summary>\n        /// BitArray \u4e0d\u540c\u8ba1\u6570\n        /// </summary>\n        /// <param name=\"byteDatas\"></param>\n        /// <returns></returns>\n        public static int Differences(this BitArray x, BitArray y)\n        {\n            int differences = 0;\n            BitArray xor = x.Xor(y);", "        public static int Differences(this BitArray x, BitArray y)\n        {\n            int differences = 0;\n            BitArray xor = x.Xor(y);\n            for (int i = 0; i < xor.Length; i++)\n            {\n                if (xor[i])\n                {\n                    differences++;\n                }\n            }\n            return differences;\n        }\n\n        /// <summary>\n        /// \u5b57\u8282\u6570\u7ec4\u8f6c16\u8fdb\u5236\u5b57\u7b26\u4e32\n        /// </summary>\n        /// <param name=\"byteDatas\"></param>\n        /// <returns></returns>", "        public static string BytesToHexString(this byte[] byteDatas)\n        {\n            StringBuilder builder = new();\n            for (int i = 0; i < byteDatas.Length; i++)\n            {\n                builder.Append(string.Format(\"{0:X2}\", byteDatas[i]));\n            }\n            return builder.ToString();\n        }\n        /// <summary>\n        /// 16\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c\u5b57\u8282\u6570\u7ec4\n        /// </summary>\n        /// <param name=\"HexString\"></param>\n        /// <returns></returns>", "        public static byte[] HexStringToBytes(this string HexString)\n        {\n            if (HexString.Length % 2 != 0) throw new ArgumentException(\"Format err\", nameof(HexString));\n            char[] Hex = HexString.ToCharArray();\n            byte[] bytes = new byte[Hex.Length / 2];\n            for (int i = 0; i < bytes.Length; i++)\n            {\n                bytes[i] = Convert.ToByte($\"{Hex[i * 2]}{Hex[(i * 2) + 1]}\", 16);\n            }\n            return bytes;\n        }\n        /// <summary>\n        /// \u8ba1\u7b97MD5Hash\n        /// </summary>\n        /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n        /// <returns>MD5Hash\u5b57\u8282\u6570\u7ec4</returns>", "        public static async Task<byte[]> MD5HashAsync(this Stream inputStream)\n        {\n            return await MD5.ComputeHashAsync(inputStream);\n        }\n        /// <summary>\n        /// \u8ba1\u7b97SHA1Hash\n        /// </summary>\n        /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n        /// <returns>SHA1Hash\u5b57\u8282\u6570\u7ec4</returns>\n        public static async Task<byte[]> SHA1HashAsync(this Stream inputStream)\n        {\n            return await SHA1.ComputeHashAsync(inputStream);\n        }/// <summary>\n         /// \u8ba1\u7b97SHA256Hash\n         /// </summary>\n         /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n         /// <returns>SHA256Hash\u5b57\u8282\u6570\u7ec4</returns>", "        public static async Task<byte[]> SHA1HashAsync(this Stream inputStream)\n        {\n            return await SHA1.ComputeHashAsync(inputStream);\n        }/// <summary>\n         /// \u8ba1\u7b97SHA256Hash\n         /// </summary>\n         /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n         /// <returns>SHA256Hash\u5b57\u8282\u6570\u7ec4</returns>\n        public static async Task<byte[]> SHA256HashAsync(this Stream inputStream)\n        {\n            return await SHA256.ComputeHashAsync(inputStream);\n        }\n        /// <summary>\n        /// \u8ba1\u7b97MD5Hash\n        /// </summary>\n        /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n        /// <returns>MD5Hash\u5b57\u8282\u6570\u7ec4</returns>", "        public static async Task<byte[]> SHA256HashAsync(this Stream inputStream)\n        {\n            return await SHA256.ComputeHashAsync(inputStream);\n        }\n        /// <summary>\n        /// \u8ba1\u7b97MD5Hash\n        /// </summary>\n        /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n        /// <returns>MD5Hash\u5b57\u8282\u6570\u7ec4</returns>\n        public static byte[] MD5Hash(this Stream inputStream)\n        {\n            return MD5.ComputeHash(inputStream);\n        }\n        /// <summary>\n        /// \u8ba1\u7b97SHA1Hash\n        /// </summary>\n        /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n        /// <returns>SHA1Hash\u5b57\u8282\u6570\u7ec4</returns>", "        public static byte[] MD5Hash(this Stream inputStream)\n        {\n            return MD5.ComputeHash(inputStream);\n        }\n        /// <summary>\n        /// \u8ba1\u7b97SHA1Hash\n        /// </summary>\n        /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n        /// <returns>SHA1Hash\u5b57\u8282\u6570\u7ec4</returns>\n        public static byte[] SHA1Hash(this Stream inputStream)\n        {\n            return SHA1.ComputeHash(inputStream);\n        }/// <summary>\n         /// \u8ba1\u7b97SHA256Hash\n         /// </summary>\n         /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n         /// <returns>SHA256Hash\u5b57\u8282\u6570\u7ec4</returns>", "        public static byte[] SHA1Hash(this Stream inputStream)\n        {\n            return SHA1.ComputeHash(inputStream);\n        }/// <summary>\n         /// \u8ba1\u7b97SHA256Hash\n         /// </summary>\n         /// <param name=\"inputStream\">\u6570\u636e\u6d41</param>\n         /// <returns>SHA256Hash\u5b57\u8282\u6570\u7ec4</returns>\n        public static byte[] SHA256Hash(this Stream inputStream)\n        {\n            return SHA256.ComputeHash(inputStream);\n        }\n", "        public static byte[] SHA256Hash(this Stream inputStream)\n        {\n            return SHA256.ComputeHash(inputStream);\n        }\n\n        public static Result Preprocessing(this HttpContext Context, out HttpRequest request, out HttpResponse response)\n        {\n            request = Context.Request;\n            response = Context.Response;\n            response.StatusCode = StatusCodes.Status500InternalServerError;\n            response.ContentType = \"application/json\";\n            return new();\n        }\n        /*", "        public static ObservableCollection<T> ConvertTo<T>(this SqliteDataReader reader)\n        {\n            ObservableCollection<T> list = new();\n            using (reader)\n            {\n                if (reader.HasRows)\n                {\n                    PropertyInfo[] propertyInfos = Activator.CreateInstance<T>()?.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase) ?? throw new NullReferenceException();\n                    while (reader.Read())\n                    {\n                        T obj = Activator.CreateInstance<T>();", "                    while (reader.Read())\n                    {\n                        T obj = Activator.CreateInstance<T>();\n                        for (int i = 0; i < reader.FieldCount; i++)\n                        {\n                            try\n                            {\n                                for (int s = 0; s < propertyInfos.Length; s++)\n                                {\n                                    if (propertyInfos[s].Name.Equals(reader.GetName(i)))\n                                    {\n                                        try\n                                        {\n                                            propertyInfos[s].SetValue(obj, Convert.ChangeType(reader[i], propertyInfos[s].PropertyType), null);\n                                        }", "                                    if (propertyInfos[s].Name.Equals(reader.GetName(i)))\n                                    {\n                                        try\n                                        {\n                                            propertyInfos[s].SetValue(obj, Convert.ChangeType(reader[i], propertyInfos[s].PropertyType), null);\n                                        }\n                                        catch (InvalidCastException)\n                                        {\n                                            propertyInfos[s].SetValue(obj, Convert.ToString(reader[i]).ConvertTo(propertyInfos[s].PropertyType));\n                                        }\n                                    }\n                                }\n                            }", "                            catch (Exception ex)\n                            {\n                                Console.WriteLine($\"Err: {reader[i]} {obj?.GetType()} {ex}\");\n                            }\n                        }\n                        list.Add(obj);\n                    }\n                }\n            }\n            return list;\n        }\n        */", "        public static ObservableCollection<Video> ConvertToVideo(this SqliteDataReader reader)\n        {\n            ObservableCollection<Video> list = new();\n            using (reader)\n            {\n                if (reader.HasRows)\n                {\n                    while (reader.Read())\n                    {\n                        Video obj = new();\n                        for (int i = 0; i < reader.FieldCount; i++)\n                        {\n                            object item = reader[i];\n                            string name = reader.GetName(i);\n                            try\n                            {\n                                switch (name)\n                                {\n                                    case \"ID\":\n                                        obj.ID = Convert.ToString(item)!;\n                                        break;\n                                    case \"Source\":\n                                        obj.Source = Convert.ToString(item)!;\n                                        break;\n                                    case \"Name\":\n                                        obj.Name = Convert.ToString(item)!;\n                                        break;\n                                    case \"Alias\":\n                                        obj.Alias = Convert.ToString(item)!;\n                                        break;\n                                    case \"Author\":\n                                        obj.Author = Convert.ToString(item)!;\n                                        break;\n                                    case \"Tags\":\n                                        obj.Tags = (List<Video.Tag>?)Convert.ToString(item).ConvertTo(typeof(List<Video.Tag>)) ?? new List<Video.Tag>();\n                                        break;\n                                    case \"Info\":\n                                        obj.Author = Convert.ToString(item)!;\n                                        break;\n                                    case \"UploadTime\":\n                                        obj.UploadTime = (DateTime)Convert.ChangeType(item, typeof(DateTime));\n                                        break;\n                                    case \"DownloadTime\":\n                                        obj.DownloadTime = (DateTime)Convert.ChangeType(item, typeof(DateTime));\n                                        break;\n                                    case \"Size\":\n                                        obj.Size = (long)Convert.ChangeType(item, typeof(long));\n                                        break;\n                                    case \"Path\":\n                                        obj.Path = Convert.ToString(item)!;\n                                        break;\n                                    case \"Exists\":\n                                        obj.Exists = (bool)Convert.ChangeType(item, typeof(bool));\n                                        break;\n                                    case \"Hash\":\n                                        obj.Hash = (byte[])Convert.ChangeType(item, typeof(byte[]));\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }", "                        for (int i = 0; i < reader.FieldCount; i++)\n                        {\n                            object item = reader[i];\n                            string name = reader.GetName(i);\n                            try\n                            {\n                                switch (name)\n                                {\n                                    case \"ID\":\n                                        obj.ID = Convert.ToString(item)!;\n                                        break;\n                                    case \"Source\":\n                                        obj.Source = Convert.ToString(item)!;\n                                        break;\n                                    case \"Name\":\n                                        obj.Name = Convert.ToString(item)!;\n                                        break;\n                                    case \"Alias\":\n                                        obj.Alias = Convert.ToString(item)!;\n                                        break;\n                                    case \"Author\":\n                                        obj.Author = Convert.ToString(item)!;\n                                        break;\n                                    case \"Tags\":\n                                        obj.Tags = (List<Video.Tag>?)Convert.ToString(item).ConvertTo(typeof(List<Video.Tag>)) ?? new List<Video.Tag>();\n                                        break;\n                                    case \"Info\":\n                                        obj.Author = Convert.ToString(item)!;\n                                        break;\n                                    case \"UploadTime\":\n                                        obj.UploadTime = (DateTime)Convert.ChangeType(item, typeof(DateTime));\n                                        break;\n                                    case \"DownloadTime\":\n                                        obj.DownloadTime = (DateTime)Convert.ChangeType(item, typeof(DateTime));\n                                        break;\n                                    case \"Size\":\n                                        obj.Size = (long)Convert.ChangeType(item, typeof(long));\n                                        break;\n                                    case \"Path\":\n                                        obj.Path = Convert.ToString(item)!;\n                                        break;\n                                    case \"Exists\":\n                                        obj.Exists = (bool)Convert.ChangeType(item, typeof(bool));\n                                        break;\n                                    case \"Hash\":\n                                        obj.Hash = (byte[])Convert.ChangeType(item, typeof(byte[]));\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            }", "                            catch (Exception ex)\n                            {\n                                Console.WriteLine($\"DB {name} {item} Err: {ex}\");\n                            }\n                        }\n                        list.Add(obj);\n                    }\n                }\n            }\n            return list;\n        }\n", "        public static T ConvertTo<T>(this string? obj) where T : new()\n        {\n            try\n            {\n                return JsonSerializer.Deserialize<T>(obj!) ?? new T();\n            }\n            catch (Exception)\n            {\n                return new T();\n            }\n        }", "        public static object? ConvertTo(this string? obj, Type type)\n        {\n            try\n            {\n                return JsonSerializer.Deserialize(obj!, type);\n            }\n            catch (Exception)\n            {\n                return Activator.CreateInstance(type);\n            }\n        }", "        public static Action<T> LimitInvocationRate<T>(this Action<T> action, int maxInvocations, TimeSpan period)\n        {\n            int invocationCount = 0;\n            Timer? timer = null;\n\n            void limitedEventHandler(T e)\n            {\n                if (Interlocked.Increment(ref invocationCount) <= maxInvocations)\n                {\n                    action(e);\n                }\n\n                timer ??= new Timer(_ =>\n                {\n                    Interlocked.Exchange(ref invocationCount, 0);\n                    timer?.Change(period, Timeout.InfiniteTimeSpan);\n                }, null, period, Timeout.InfiniteTimeSpan);\n            }\n\n            return limitedEventHandler;\n        }\n\n    }\n}\n"]}
{"filename": "IwaraDownloader/Utils.cs", "chunked_list": ["\ufeffusing IwaraDownloader;\nusing System.Net;\nusing System.Net.Http.Headers;\nusing System.Reflection;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing static IwaraDownloader.Config;\n\nnamespace Dawnlc.Module\n{\n    public class Utils\n    {", "namespace Dawnlc.Module\n{\n    public class Utils\n    {\n        public static class Env\n        {\n            private static readonly Version version = Assembly.GetExecutingAssembly().GetName().Version ?? new(1,0,0);\n            public static readonly string Name = \"IwaraDownloader\";\n            public static readonly string Path = AppDomain.CurrentDomain.BaseDirectory;\n            public static readonly string Developer = \"dawn-lc\";\n            public static readonly string HomePage = $\"https://github.com/{Developer}/{Name}\";", "            public static readonly string Path = AppDomain.CurrentDomain.BaseDirectory;\n            public static readonly string Developer = \"dawn-lc\";\n            public static readonly string HomePage = $\"https://github.com/{Developer}/{Name}\";\n            public static readonly int[] Version = new int[] { version.Major, version.Minor, version.Build };\n            public static readonly HttpHeaders Headers = new HttpClient().DefaultRequestHeaders;\n            public static Config MainConfig { get; set; } = DeserializeJSONFile<Config>(System.IO.Path.Combine(Path, \"config.json\"));\n        }\n        public static JsonSerializerOptions JsonOptions { get; set; } = new()\n        {\n            WriteIndented = true,\n            PropertyNameCaseInsensitive = true,\n            Converters =\n            {\n                new JsonStringEnumConverter()\n            }\n        };\n", "        public class DownloadOptions\n        {\n            public CookieContainer? Cookies { get; set; }\n            public WebProxy? Proxy { get; set; }\n            public HttpHeaders? Headers { get; set; }\n        }\n\n        public class AuthenticationException : Exception\n        {\n            public AuthenticationType AuthenticationType { get; set; }\n            public AuthenticationException(AuthenticationType type, string message) : base(message)\n            {\n                AuthenticationType = type;\n            }\n        }\n", "            public AuthenticationType AuthenticationType { get; set; }\n            public AuthenticationException(AuthenticationType type, string message) : base(message)\n            {\n                AuthenticationType = type;\n            }\n        }\n\n        public static void Log(string? value)\n        {\n            Console.WriteLine($\"[{DateTime.Now}] I {value}\");\n            //AnsiConsole.MarkupLine($\"[bold][[{DateTime.Now}]] [lime]I[/][/] {Markup.Escape(value ?? \"null\")}\");\n        }", "        public static void Warn(string value)\n        {\n            Console.WriteLine($\"[{DateTime.Now}] W {value}\");\n            //AnsiConsole.MarkupLine($\"[bold][[{DateTime.Now}]] [orangered1]W[/][/] {Markup.Escape(value)}\");\n        }\n        public static void Error(string value)\n        {\n            Console.WriteLine($\"[{DateTime.Now}] E {value}\");\n            //AnsiConsole.MarkupLine($\"[bold][[{DateTime.Now}]] [red]E[/][/] {Markup.Escape(value)}\");\n        }\n\n", "        public static bool IsValidPath(string path)\n        {\n            try\n            {\n                return !(string.IsNullOrEmpty(path) || !Path.IsPathRooted(path) || !Directory.Exists(Path.GetPathRoot(path)) || path.IndexOfAny(Path.GetInvalidPathChars()) >= 0);\n            }\n            catch\n            {\n                return false;\n            }\n        }\n", "        public static async Task<T> DeserializeJSONFileAsync<T>(string path) where T : new()\n        {\n            T? data;\n            return File.Exists(path) ? (data = JsonSerializer.Deserialize<T>(await File.ReadAllTextAsync(path), JsonOptions)) != null ? data : new T() : new T();\n        }\n\n        public static T DeserializeJSONFile<T>(string path) where T : new()\n        {\n            T? data;\n            return File.Exists(path) ? (data = JsonSerializer.Deserialize<T>(File.ReadAllText(path), JsonOptions)) != null ? data : new T() : new T();\n        }\n    }\n}\n"]}
{"filename": "IwaraDownloader/DownloadTask.cs", "chunked_list": ["\ufeffusing System.Net;\nusing static Dawnlc.Module.Utils;\n\nnamespace Dawnlc.Module\n{\n\n    public class DownloadTask\n    {\n        public event Action<double>? DownloadProgressChanged;\n        public void OnDownloadProgressChanged(double progressPercentage)\n        {\n            Progress = progressPercentage;\n            DownloadProgressChanged?.Invoke(progressPercentage);\n        }", "        public event Action<double>? DownloadProgressChanged;\n        public void OnDownloadProgressChanged(double progressPercentage)\n        {\n            Progress = progressPercentage;\n            DownloadProgressChanged?.Invoke(progressPercentage);\n        }\n        public enum TaskState\n        {\n            Waiting,\n            Downloading,\n            Downloaded,\n            Error\n        }", "        public TaskState State { get; set; }\n        public VideoTask Video { get; set; }\n        public double Progress { get; set; }\n        public DownloadOptions Options { get; set; }\n        public DownloadTask(VideoTask video)\n        {\n            Video = video;\n            Options = new();\n            CookieContainer Cookies = new();\n            foreach (var item in Video.DownloadCookies)\n            {\n                Cookies.Add(item);\n            }\n            Options.Cookies = Cookies;", "            foreach (var item in Video.DownloadCookies)\n            {\n                Cookies.Add(item);\n            }\n            Options.Cookies = Cookies;\n            if (Video.DownloadProxy != null)\n            {\n                Options.Proxy = new (new Uri(Video.DownloadProxy));\n            }\n            if (Video.Authorization != null)\n            {\n                Options.Headers ??= Env.Headers;\n                Options.Headers.Remove(HttpRequestHeader.Authorization.ToString());\n                Options.Headers.Add(HttpRequestHeader.Authorization.ToString(), Video.Authorization);\n            }\n            State = TaskState.Waiting;\n        }\n    }\n}\n", "            if (Video.Authorization != null)\n            {\n                Options.Headers ??= Env.Headers;\n                Options.Headers.Remove(HttpRequestHeader.Authorization.ToString());\n                Options.Headers.Add(HttpRequestHeader.Authorization.ToString(), Video.Authorization);\n            }\n            State = TaskState.Waiting;\n        }\n    }\n}\n"]}
{"filename": "IwaraDownloader/Program.cs", "chunked_list": ["using Dawnlc.Module;\nusing Microsoft.AspNetCore.StaticFiles;\nusing System.Collections.Concurrent;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing static Dawnlc.Module.Utils;\n\nnamespace IwaraDownloader\n{\n    public partial class Program\n    {", "namespace IwaraDownloader\n{\n    public partial class Program\n    {\n        public static Database DB { get; set; } = new();\n        private static ConcurrentDictionary<string, DownloadTask> DownloadQueue = new();\n        public static WebApplicationBuilder Initialize()\n        {\n            Console.WriteLine(Figgle.FiggleFonts.Standard.Render(Env.Name));\n            DirectoryInfo WebRootPath = new(Env.MainConfig.WebRootPath);\n            if (!WebRootPath.Exists)\n            {\n                Directory.CreateDirectory(WebRootPath.FullName);\n            }\n            var builder = WebApplication.CreateBuilder(new WebApplicationOptions\n            {\n                WebRootPath = WebRootPath.FullName\n            });\n            builder.Services.AddMemoryCache();\n            builder.Logging.ClearProviders();\n\n            builder.Environment.ApplicationName = Env.Name;\n            builder.Environment.ContentRootPath = Env.Path;\n\n            builder.WebHost.UseKestrel();\n            builder.WebHost.UseQuic();\n\n", "            if (!WebRootPath.Exists)\n            {\n                Directory.CreateDirectory(WebRootPath.FullName);\n            }\n            var builder = WebApplication.CreateBuilder(new WebApplicationOptions\n            {\n                WebRootPath = WebRootPath.FullName\n            });\n            builder.Services.AddMemoryCache();\n            builder.Logging.ClearProviders();\n\n            builder.Environment.ApplicationName = Env.Name;\n            builder.Environment.ContentRootPath = Env.Path;\n\n            builder.WebHost.UseKestrel();\n            builder.WebHost.UseQuic();\n\n", "            if (Env.MainConfig.IsHTTPS)\n            {\n                builder.WebHost.ConfigureKestrel(options =>\n                {\n                    options.ConfigureHttpsDefaults(httpsOptions =>\n                    {\n\n                        FileInfo cert = new(Env.MainConfig.CertPath ?? Path.Combine(Env.Path, \"cert.pem\"));\n                        FileInfo key = new(Env.MainConfig.KeyPath ?? Path.Combine(Env.Path, \"key.pem\"));\n                        if (!cert.Exists || !key.Exists)\n                        {\n                            throw new FileNotFoundException($\"{(cert.Exists ? $\"Not found {cert.FullName}{Environment.NewLine}\" : \"\")}{(key.Exists ? $\"Not found {key.FullName}\" : \"\")}\");\n                        }\n                        httpsOptions.ServerCertificate = X509Certificate2.CreateFromPemFile(cert.FullName, key.FullName);\n\n                    });\n                });\n            }\n\n            builder.Services.AddCors(options =>\n            {\n                options.AddPolicy(\"AllowAllOrigins\", policy =>\n                {\n                    policy.WithOrigins(\"*\");\n                });\n            });\n            builder.Services.AddControllers();\n", "                        if (!cert.Exists || !key.Exists)\n                        {\n                            throw new FileNotFoundException($\"{(cert.Exists ? $\"Not found {cert.FullName}{Environment.NewLine}\" : \"\")}{(key.Exists ? $\"Not found {key.FullName}\" : \"\")}\");\n                        }\n                        httpsOptions.ServerCertificate = X509Certificate2.CreateFromPemFile(cert.FullName, key.FullName);\n\n                    });\n                });\n            }\n\n            builder.Services.AddCors(options =>\n            {\n                options.AddPolicy(\"AllowAllOrigins\", policy =>\n                {\n                    policy.WithOrigins(\"*\");\n                });\n            });\n            builder.Services.AddControllers();\n", "            if (!File.Exists(Path.Combine(Env.Path, $\"config.json\")))\n            {\n                File.WriteAllText(Path.Combine(Env.Path, $\"config.json\"), JsonSerializer.Serialize(Env.MainConfig, JsonOptions));\n            }\n\n            return builder;\n        }\n\n        public static async Task Main()\n        {\n            try\n            {\n                WebApplication app = Initialize().Build();\n                app.UseStaticFiles();\n                app.Urls.Add($\"http://0.0.0.0:{Env.MainConfig.Port}\");\n                app.Urls.Add($\"http://[::]:{Env.MainConfig.Port}\");", "        public static async Task Main()\n        {\n            try\n            {\n                WebApplication app = Initialize().Build();\n                app.UseStaticFiles();\n                app.Urls.Add($\"http://0.0.0.0:{Env.MainConfig.Port}\");\n                app.Urls.Add($\"http://[::]:{Env.MainConfig.Port}\");\n                if (Env.MainConfig.IsHTTPS)\n                {\n                    app.UseHttpsRedirection();\n                    app.Urls.Add($\"https://0.0.0.0:{Env.MainConfig.Port}\");\n                    app.Urls.Add($\"https://[::]:{Env.MainConfig.Port}\");\n                }\n                app.UseCors(\"AllowAllOrigins\");\n\n                app.MapPost(\"/jsonrpc\", RPC);\n                app.MapGet(\"/jsonrpc\", RPC);\n                app.MapGet(\"/playlist.xspf\",(HttpRequest Request, HttpResponse Response) => PlayList(Request, Response));\n                app.MapGet(\"/{ID:guid}.mp4\", (HttpRequest Request, HttpResponse Response, string ID) => FileServer(Request, Response,ID));\n\n                \n                List<Video> ErrorFileList = new();", "                if (Env.MainConfig.IsHTTPS)\n                {\n                    app.UseHttpsRedirection();\n                    app.Urls.Add($\"https://0.0.0.0:{Env.MainConfig.Port}\");\n                    app.Urls.Add($\"https://[::]:{Env.MainConfig.Port}\");\n                }\n                app.UseCors(\"AllowAllOrigins\");\n\n                app.MapPost(\"/jsonrpc\", RPC);\n                app.MapGet(\"/jsonrpc\", RPC);\n                app.MapGet(\"/playlist.xspf\",(HttpRequest Request, HttpResponse Response) => PlayList(Request, Response));\n                app.MapGet(\"/{ID:guid}.mp4\", (HttpRequest Request, HttpResponse Response, string ID) => FileServer(Request, Response,ID));\n\n                \n                List<Video> ErrorFileList = new();", "                foreach (var item in DB.Videos)\n                {\n                    item.Exists = File.Exists(item.Path);\n                    if (!item.Exists)\n                    {\n                        ErrorFileList.Add(item);\n                        Warn($\"{item.Name} \u013c\u02a7!\");\n                        continue;\n                    }\n                    using (FileStream file = File.OpenRead(item.Path))\n                    {", "                    using (FileStream file = File.OpenRead(item.Path))\n                    {\n                        if (item.Size != file.Length)\n                        {\n                            ErrorFileList.Add(item);\n                            Warn($\"{item.Name} \u013c\u0423\u02a7!\");\n                            continue;\n                        }\n                        if (!(await file.SHA256HashAsync()).SequenceCompare(item.Hash))\n                        {\n                            ErrorFileList.Add(item);\n                            Warn($\"{item.Name} \u013c\u0423\u02a7!\");\n                            continue;\n                        }\n                    }\n                }", "                        if (!(await file.SHA256HashAsync()).SequenceCompare(item.Hash))\n                        {\n                            ErrorFileList.Add(item);\n                            Warn($\"{item.Name} \u013c\u0423\u02a7!\");\n                            continue;\n                        }\n                    }\n                }\n                foreach (var item in ErrorFileList)\n                {\n                    DB.Videos.Remove(item);\n                    Log($\"{item.Name} \u01b3\");\n                }\n                Log($\"\");\n                app.Run();\n            }", "                foreach (var item in ErrorFileList)\n                {\n                    DB.Videos.Remove(item);\n                    Log($\"{item.Name} \u01b3\");\n                }\n                Log($\"\");\n                app.Run();\n            }\n            catch (Exception e)\n            {\n                Error($\"{e.Message}\");\n                Error($\"{e}\");\n                Console.WriteLine(\"\u02f3...\");\n                Console.ReadKey();\n            }\n            \n        }", "            catch (Exception e)\n            {\n                Error($\"{e.Message}\");\n                Error($\"{e}\");\n                Console.WriteLine(\"\u02f3...\");\n                Console.ReadKey();\n            }\n            \n        }\n        public static IResult FileServer(HttpRequest Request, HttpResponse Response, string ID)\n        {\n            Log($\"{Request.Method} {Request.Path} {Request.ContentLength}\");\n", "        public static IResult FileServer(HttpRequest Request, HttpResponse Response, string ID)\n        {\n            Log($\"{Request.Method} {Request.Path} {Request.ContentLength}\");\n\n            if (!DB.Videos.Any(i => i.ID == ID))\n            {\n                Response.StatusCode = StatusCodes.Status404NotFound;\n                return Results.BadRequest();\n            }\n            Video video = DB.Videos.First(i => i.ID == ID);\n            FileInfo file = new(video.Path);", "            if (!file.Exists)\n            {\n                video.Exists = false;\n                Response.StatusCode = StatusCodes.Status404NotFound;\n                return Results.BadRequest();\n            }\n            new FileExtensionContentTypeProvider().TryGetContentType(file.FullName, out string? contentType);\n\n            return Results.Stream(File.OpenRead(file.FullName), contentType, enableRangeProcessing: true);\n\n        }", "        public static async Task PlayList(HttpRequest Request, HttpResponse Response)\n        {\n            Log($\"{Request.Method} {Request.Path} {Request.ContentLength}\");\n            Response.StatusCode = StatusCodes.Status200OK;\n            Response.ContentType = \"text/xml\";\n            string orderby = Request.Query.ContainsKey(\"orderby\") ? Request.Query[\"orderby\"]! : \"uploadTime\";\n            IEnumerable<Video> OrderList = orderby.ToLower() switch\n            {\n                \"name\" => DB.Videos.Where(i => !i.Exists || !Request.Query.ContainsKey(\"key\") || i.Name.Contains(Request.Query[\"key\"]!, StringComparison.CurrentCultureIgnoreCase)).OrderByDescending(p => p.Name),\n                \"author\" => DB.Videos.Where(i => !i.Exists || !Request.Query.ContainsKey(\"key\") || (i.Author.Contains(Request.Query[\"key\"]!, StringComparison.CurrentCultureIgnoreCase) || i.Alias.Contains(Request.Query[\"key\"]!, StringComparison.CurrentCultureIgnoreCase))).OrderByDescending(p => p.Author),\n                \"tag\" => DB.Videos.Where(i => !i.Exists || !Request.Query.ContainsKey(\"key\") || i.Tags.Any(t => t.ID.Contains(Request.Query[\"key\"]!, StringComparison.CurrentCultureIgnoreCase))),\n                \"size\" => DB.Videos.Where(i => i.Exists).OrderByDescending(p => p.Size),\n                _ => DB.Videos.Where(i => i.Exists).OrderByDescending(p => p.UploadTime),\n            };\n            string list = $\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><playlist xmlns=\\\"http://xspf.org/ns/0/\\\" xmlns:vlc=\\\"http://www.videolan.org/vlc/playlist/ns/0/\\\" version=\\\"1\\\"><title>{Env.Name} OrderBy {orderby}</title><trackList>\";", "            foreach (var item in OrderList)\n            {\n                list += $\"<track><location>/{item.ID}.mp4</location></track>\";\n            }\n            list += \"</trackList></playlist>\";\n            await Response.WriteAsync(list);\n        }\n        public static async Task<Task> RPC(HttpContext context)\n        {\n            Result result = context.Preprocessing(out HttpRequest Request, out HttpResponse Response);\n            Log($\"{Request.Method} {Request.Path} {Request.ContentLength}\");\n            try\n            {\n                Request quest = await RequestCheck(Request);\n                Response.StatusCode = StatusCodes.Status200OK;\n                switch (quest.Code)\n                {\n                    case RequestCode.Add:\n                        VideoTask Task = JsonSerializer.Deserialize<VideoTask>(quest.Data, JsonOptions) ?? throw new ArgumentNullException(nameof(VideoTask), \"Deserialization failed\");", "                        if (DB.Videos.Any(i => i.Source == Task.Source))\n                        {\n                            result = new() { Code = ResultCode.Exists, Msg = \"\u0474\" };\n                            break;\n                        }\n                        PustDownloadTask(Task);\n                        result = new() { Code = ResultCode.OK, Msg = \"\" };\n                        break;\n                    case RequestCode.Check:\n                        VideoTask TestTask = JsonSerializer.Deserialize<VideoTask>(quest.Data, JsonOptions) ?? throw new ArgumentNullException(nameof(VideoTask), \"Deserialization failed\");\n                        if (Directory.Exists(Path.GetDirectoryName(TestTask.Path)))\n                        {\n                            result = new() { Code = ResultCode.OK, Msg = \"\" };\n                        }\n                        break;\n                    case RequestCode.State:\n                        Log($\"Ver:{string.Join('.', quest.Ver)}\");\n                        result = new() { Code = ResultCode.OK, Data = DownloadQueue };\n                        break;\n                    default:\n                        throw new ArgumentException($\"\u03b4\u05aa {quest}\");\n                }\n\n            }", "                        if (Directory.Exists(Path.GetDirectoryName(TestTask.Path)))\n                        {\n                            result = new() { Code = ResultCode.OK, Msg = \"\" };\n                        }\n                        break;\n                    case RequestCode.State:\n                        Log($\"Ver:{string.Join('.', quest.Ver)}\");\n                        result = new() { Code = ResultCode.OK, Data = DownloadQueue };\n                        break;\n                    default:\n                        throw new ArgumentException($\"\u03b4\u05aa {quest}\");\n                }\n\n            }", "            catch (ArgumentException ex)\n            {\n                result = new() { Code = ResultCode.BadRequest, Msg = $\"\u02bd\ucce3[{ex.Message}]\" };\n            }\n            catch (AuthenticationException)\n            {\n                result = new() { Code = ResultCode.Unauthorized, Msg = \"\u03b4\u0228\" };\n            }\n            catch (Exception ex)\n            {\n                Response.StatusCode = StatusCodes.Status500InternalServerError;\n                result = new() { Code = ResultCode.Unhandled, Msg = ex.Message };\n            }\n            return Response.WriteAsJsonAsync(result);\n        }", "            catch (Exception ex)\n            {\n                Response.StatusCode = StatusCodes.Status500InternalServerError;\n                result = new() { Code = ResultCode.Unhandled, Msg = ex.Message };\n            }\n            return Response.WriteAsJsonAsync(result);\n        }\n        public static async Task<Request> RequestCheck(HttpRequest Request)\n        {\n            if (!Request.HasJsonContentType())\n            {\n                throw new ArgumentException(\"\u02bd\u0237\");\n            }\n            Request quest = await Request.ReadFromJsonAsync<Request>(JsonOptions);\n            return Authentication(quest) ? quest : throw new AuthenticationException(Env.MainConfig.AuthType, \"\u05a4\u02a7\");\n        }", "            if (!Request.HasJsonContentType())\n            {\n                throw new ArgumentException(\"\u02bd\u0237\");\n            }\n            Request quest = await Request.ReadFromJsonAsync<Request>(JsonOptions);\n            return Authentication(quest) ? quest : throw new AuthenticationException(Env.MainConfig.AuthType, \"\u05a4\u02a7\");\n        }\n        public static bool Authentication(Request Request)\n        {\n            switch (Env.MainConfig.AuthType)\n            {\n                case Config.AuthenticationType.Token:", "                    if (!TokenCheck().Match(Request.Token ?? \"\").Success)\n                    {\n                        throw new ArgumentException($\"Token format error\");\n                    }\n                    return Env.MainConfig.Token == Request.Token;\n                case Config.AuthenticationType.None:\n                default:\n                    return true;\n            }\n        }\n", "        public static void PustDownloadTask(VideoTask task)\n        {\n            Log($\"{task.Name}\u047d\u0636!\");\n            DownloadQueue.AddOrUpdate(task.ID, new DownloadTask(task), (k, v) => v);\n            if (DownloadQueue.Count(i => i.Value.State == DownloadTask.TaskState.Downloading) < Env.MainConfig.ConcurrentDownloads)\n            {\n                DownloadFile();\n            }\n        }\n        public static async void DownloadFile()\n        {", "        public static async void DownloadFile()\n        {\n            if (DownloadQueue.Any(i => i.Value.State == DownloadTask.TaskState.Waiting))\n            {\n                DownloadTask task = DownloadQueue.First(i => i.Value.State == DownloadTask.TaskState.Waiting).Value;\n                task.State = DownloadTask.TaskState.Downloading;\n                Log($\"\u02bc {task.Video.Name}\");\n                try\n                {\n                    Action<double> action = (e) =>\n                    {\n                        task.Progress = e;\n                        Log($\"{task.Video.Name} {e:N2}%\");\n                    };\n                    task.DownloadProgressChanged += action.LimitInvocationRate(1, TimeSpan.FromSeconds(1));\n                    await HTTP.DownloadAsync(new(task.Video.DownloadUrl), task.Video.Path, task);\n                    task.Progress = 100;\n                    task.State = DownloadTask.TaskState.Downloaded;\n                    Log($\"{task.Video.Name} \u0423\u013c...\");", "                    using (FileStream file = File.OpenRead(task.Video.Path))\n                    {\n                        task.Video.Exists = true;\n                        task.Video.Size = file.Length;\n                        task.Video.Hash = await file.SHA256HashAsync();\n                    }\n                    task.Video.DownloadTime = DateTime.Now;\n                    DB.Videos.Add(task.Video);\n                    Log($\"{task.Video.Name} \");\n                }\n                catch (Exception ex)\n                {\n                    Warn($\"{task.Video.Name} \u02a7 {ex}\");\n                    task.State = DownloadTask.TaskState.Error;\n                    return;\n                }\n                finally\n                {\n                    GC.Collect();\n                    DownloadFile();\n                }\n            }\n        }\n\n        [GeneratedRegex(\"^(?![a-zA-Z]+$)(?!\\\\d+$)(?![^\\\\da-zA-Z\\\\s]+$).{6,}$\")]", "                catch (Exception ex)\n                {\n                    Warn($\"{task.Video.Name} \u02a7 {ex}\");\n                    task.State = DownloadTask.TaskState.Error;\n                    return;\n                }\n                finally\n                {\n                    GC.Collect();\n                    DownloadFile();\n                }\n            }\n        }\n\n        [GeneratedRegex(\"^(?![a-zA-Z]+$)(?!\\\\d+$)(?![^\\\\da-zA-Z\\\\s]+$).{6,}$\")]", "        private static partial Regex TokenCheck();\n    }\n}"]}
