{"filename": "src/ExampleWebApplication/Program.cs", "chunked_list": ["using ExampleWebApplication.WebSocketRequestHandlers;\nusing Newtonsoft.Json.Serialization;\nusing Newtonsoft.Json;\nusing TraTech.WebSocketHub;\nusing ExampleWebApplication.WebSocketHubKeys;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();", "builder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\n\nbuilder.Services.AddWebSocketHub<int>()\n    .AddRequestHandler<WebSocketRequestHandler1>(\"messageType1\");\n\nbuilder.Services.AddWebSocketHub<SocketUser>()\n    .AddJsonSerializerSettings(new JsonSerializerSettings\n    {", "    .AddJsonSerializerSettings(new JsonSerializerSettings\n    {\n        ContractResolver = new CamelCasePropertyNamesContractResolver()\n    })\n    .AddReceiveBufferSize(4 * 1024)\n    .AddRequestHandler<WebSocketRequestHandler2>(\"messageType2\");\n\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.UseWebSocketHub(\n    acceptIf: (httpContext) => httpContext.Request.Path == \"/ws1\" && !string.IsNullOrEmpty(httpContext.Request.Query[\"id\"]),\n    keyGenerator: (httpContext) => int.Parse(httpContext.Request.Query[\"id\"])\n);\n\napp.UseWebSocketHub(\n    acceptIf: (httpContext) => httpContext.Request.Path == \"/ws2\" && !string.IsNullOrEmpty(httpContext.Request.Query[\"id\"]),\n    keyGenerator: (httpContext) =>\n    {\n        int id = int.Parse(httpContext.Request.Query[\"id\"]);\n        return new SocketUser(id);\n    }\n);\n\napp.MapControllers();\n\napp.Run();\n", "var app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.UseWebSocketHub(\n    acceptIf: (httpContext) => httpContext.Request.Path == \"/ws1\" && !string.IsNullOrEmpty(httpContext.Request.Query[\"id\"]),\n    keyGenerator: (httpContext) => int.Parse(httpContext.Request.Query[\"id\"])\n);\n\napp.UseWebSocketHub(\n    acceptIf: (httpContext) => httpContext.Request.Path == \"/ws2\" && !string.IsNullOrEmpty(httpContext.Request.Query[\"id\"]),\n    keyGenerator: (httpContext) =>\n    {\n        int id = int.Parse(httpContext.Request.Query[\"id\"]);\n        return new SocketUser(id);\n    }\n);\n\napp.MapControllers();\n\napp.Run();\n"]}
{"filename": "src/ExampleWebApplication/WebSocketHubKeys/SocketUser.cs", "chunked_list": ["\ufeffnamespace ExampleWebApplication.WebSocketHubKeys\n{\n    public class SocketUser\n    {\n        public int Id { get; private set; }\n        public DateTime OpenDate { get; private set; }\n\n        public SocketUser(int id)\n        {\n            Id = id;\n            OpenDate = DateTime.UtcNow;\n        }\n    }\n}\n"]}
{"filename": "src/ExampleWebApplication/WebSocketRequestHandlers/WebSocketRequestHandler1.cs", "chunked_list": ["\ufeffusing TraTech.WebSocketHub;\n\nnamespace ExampleWebApplication.WebSocketRequestHandlers\n{\n    public class WebSocketRequestHandler1 : IWebSocketRequestHandler\n    {\n        public Task HandleRequestAsync(string key, string data)\n        {\n            Console.WriteLine(\"------- HandleRequestAsync started -------\");\n            Console.WriteLine(\"key\");\n            Console.WriteLine(key);\n            Console.WriteLine(\"data\");\n            Console.WriteLine(data);\n            Console.WriteLine(\"------- HandleRequestAsync finished -------\");\n            return Task.CompletedTask;\n        }\n    }\n}\n"]}
{"filename": "src/ExampleWebApplication/WebSocketRequestHandlers/WebSocketRequestHandler2.cs", "chunked_list": ["\ufeffusing TraTech.WebSocketHub;\n\nnamespace ExampleWebApplication.WebSocketRequestHandlers\n{\n    public class WebSocketRequestHandler2 : IWebSocketRequestHandler\n    {\n        public Task HandleRequestAsync(string key, string data)\n        {\n            Console.WriteLine(\"------- HandleRequestAsync started -------\");\n            Console.WriteLine(\"key\");\n            Console.WriteLine(key);\n            Console.WriteLine(\"data\");\n            Console.WriteLine(data);\n            Console.WriteLine(\"------- HandleRequestAsync finished -------\");\n            return Task.CompletedTask;\n        }\n    }\n}\n"]}
{"filename": "src/ExampleWebApplication/Controllers/WebSocket2Controller.cs", "chunked_list": ["using ExampleWebApplication.WebSocketHubKeys;\nusing Microsoft.AspNetCore.Mvc;\nusing TraTech.WebSocketHub;\n\nnamespace ExampleWebApplication.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WebSocket2Controller : ControllerBase\n    {\n        private readonly WebSocketHub<SocketUser> _webSocketHub;\n\n        public WebSocket2Controller(WebSocketHub<SocketUser> webSocketHub)\n        {\n            _webSocketHub = webSocketHub;\n        }\n\n        [HttpGet(\"GetSocketListWithSelector\")]", "    public class WebSocket2Controller : ControllerBase\n    {\n        private readonly WebSocketHub<SocketUser> _webSocketHub;\n\n        public WebSocket2Controller(WebSocketHub<SocketUser> webSocketHub)\n        {\n            _webSocketHub = webSocketHub;\n        }\n\n        [HttpGet(\"GetSocketListWithSelector\")]\n        public IActionResult GetSocketListWithSelector(int id)\n        {\n            var socketListOfUser = _webSocketHub.GetSocketList((key) => key.Id == id);\n            return Ok(socketListOfUser);\n        }\n\n        [HttpGet(\"RemoveAsyncWithSelector\")]", "        public IActionResult GetSocketListWithSelector(int id)\n        {\n            var socketListOfUser = _webSocketHub.GetSocketList((key) => key.Id == id);\n            return Ok(socketListOfUser);\n        }\n\n        [HttpGet(\"RemoveAsyncWithSelector\")]\n        public async Task<IActionResult> RemoveWithSelector(int id)\n        {\n            var firstSocketOfUser = _webSocketHub.GetSocketList((key) => key.Id == id).First();\n            await _webSocketHub.RemoveAsync(\n                (key) => key.Id == id,\n                firstSocketOfUser\n            );\n            return Ok(firstSocketOfUser);\n        }\n\n        [HttpGet(\"RemoveFirstAsync\")]", "        public async Task<IActionResult> RemoveFirstAsync(int id)\n        {\n            await _webSocketHub.RemoveFirstAsync(\n                (key) => key.Id > id\n            );\n            return Ok();\n        }\n\n        [HttpGet(\"RemoveWhereAsync\")]\n        public async Task<IActionResult> RemoveWhereAsync(int id)\n        {\n            await _webSocketHub.RemoveWhereAsync(\n                (key) => key.Id > id\n            );\n            return Ok();\n        }\n\n        [HttpGet(\"RemoveAllAsync\")]", "        public async Task<IActionResult> RemoveWhereAsync(int id)\n        {\n            await _webSocketHub.RemoveWhereAsync(\n                (key) => key.Id > id\n            );\n            return Ok();\n        }\n\n        [HttpGet(\"RemoveAllAsync\")]\n        public async Task<IActionResult> RemoveAllAsync()\n        {\n            await _webSocketHub.RemoveAllAsync();\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithSocketList\")]", "        public async Task<IActionResult> RemoveAllAsync()\n        {\n            await _webSocketHub.RemoveAllAsync();\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithSocketList\")]\n        public async Task<IActionResult> SendAsyncWithSocketList(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendAsyncWithSocketList\",\n                Payload = new\n                {\n                    Data = \"SendAsyncWithSocketList\"\n                }\n            };\n            var socketListOfUser = _webSocketHub.GetSocketList((key) => key.Id == id);\n            await _webSocketHub.SendAsync(message, socketListOfUser.ToArray());\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithSelector\")]", "        public async Task<IActionResult> SendAsyncWithSelector(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendAsyncWithSelector\",\n                Payload = new\n                {\n                    Data = \"SendAsyncWithSelector\"\n                }\n            };\n            await _webSocketHub.SendAsync(message, (key) => key.Id == id);\n            return Ok();\n        }\n\n        [HttpGet(\"SendWhereAsync\")]", "        public async Task<IActionResult> SendWhereAsync(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendWhereAsync\",\n                Payload = new\n                {\n                    Data = \"SendWhereAsync\"\n                }\n            };\n            await _webSocketHub.SendWhereAsync(message, (key) => key.Id > id);\n            return Ok();\n        }\n\n        [HttpGet(\"SendAllAsync\")]", "        public async Task<IActionResult> SendAllAsync()\n        {\n            var message = new Message()\n            {\n                Type = \"SendAllAsync\",\n                Payload = new\n                {\n                    Data = \"SendAllAsync\"\n                }\n            };\n            await _webSocketHub.SendAllAsync(message);\n            return Ok();\n        }\n    }\n}"]}
{"filename": "src/ExampleWebApplication/Controllers/WebSocket1Controller.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\nusing TraTech.WebSocketHub;\n\nnamespace ExampleWebApplication.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WebSocket1Controller : ControllerBase\n    {\n        private readonly WebSocketHub<int> _webSocketHub;\n\n        public WebSocket1Controller(WebSocketHub<int> webSocketHub)\n        {\n            _webSocketHub = webSocketHub;\n        }\n\n        [HttpGet(\"GetSocketList\")]", "        private readonly WebSocketHub<int> _webSocketHub;\n\n        public WebSocket1Controller(WebSocketHub<int> webSocketHub)\n        {\n            _webSocketHub = webSocketHub;\n        }\n\n        [HttpGet(\"GetSocketList\")]\n        public IActionResult GetSocketList(int id)\n        {\n            var socketListOfUser = _webSocketHub.GetSocketList(id);\n            return Ok(socketListOfUser);\n        }\n\n        [HttpGet(\"GetSocketListWithSelector\")]", "        public IActionResult GetSocketList(int id)\n        {\n            var socketListOfUser = _webSocketHub.GetSocketList(id);\n            return Ok(socketListOfUser);\n        }\n\n        [HttpGet(\"GetSocketListWithSelector\")]\n        public IActionResult GetSocketListWithSelector(int id)\n        {\n            var socketListOfUser = _webSocketHub.GetSocketList((key) => key == id);\n            return Ok(socketListOfUser);\n        }\n\n        [HttpGet(\"RemoveAsyncWithKey\")]", "        public async Task<IActionResult> RemoveAsync(int id)\n        {\n            var firstSocketOfUser = _webSocketHub.GetSocketList(id).First();\n            await _webSocketHub.RemoveAsync(\n                id,\n                firstSocketOfUser\n            );\n            return Ok(firstSocketOfUser);\n        }\n\n        [HttpGet(\"RemoveAsyncWithSelector\")]", "        public async Task<IActionResult> RemoveWithSelector(int id)\n        {\n            var firstSocketOfUser = _webSocketHub.GetSocketList(id).First();\n            await _webSocketHub.RemoveAsync(\n                (key) => key == id,\n                firstSocketOfUser\n            );\n            return Ok(firstSocketOfUser);\n        }\n\n        [HttpGet(\"RemoveFirstAsync\")]", "        public async Task<IActionResult> RemoveFirstAsync(int id)\n        {\n            await _webSocketHub.RemoveFirstAsync(\n                (key) => key > id\n            );\n            return Ok();\n        }\n\n        [HttpGet(\"RemoveWhereAsync\")]\n        public async Task<IActionResult> RemoveWhereAsync(int id)\n        {\n            await _webSocketHub.RemoveWhereAsync(\n                (key) => key > id\n            );\n            return Ok();\n        }\n\n        [HttpGet(\"RemoveAllAsync\")]", "        public async Task<IActionResult> RemoveWhereAsync(int id)\n        {\n            await _webSocketHub.RemoveWhereAsync(\n                (key) => key > id\n            );\n            return Ok();\n        }\n\n        [HttpGet(\"RemoveAllAsync\")]\n        public async Task<IActionResult> RemoveAllAsync()\n        {\n            await _webSocketHub.RemoveAllAsync();\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithSocketList\")]", "        public async Task<IActionResult> RemoveAllAsync()\n        {\n            await _webSocketHub.RemoveAllAsync();\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithSocketList\")]\n        public async Task<IActionResult> SendAsyncWithSocketList(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendAsyncWithSocketList\",\n                Payload = new\n                {\n                    Data = \"SendAsyncWithSocketList\"\n                }\n            };\n            var socketListOfUser = _webSocketHub.GetSocketList(id);\n            await _webSocketHub.SendAsync(message, socketListOfUser.ToArray());\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithKey\")]", "        public async Task<IActionResult> SendAsyncWithKey(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendAsyncWithKey\",\n                Payload = new\n                {\n                    Data = \"SendAsyncWithKey\"\n                }\n            };\n            await _webSocketHub.SendAsync(message, id);\n            return Ok();\n        }\n\n        [HttpGet(\"SendAsyncWithSelector\")]", "        public async Task<IActionResult> SendAsyncWithSelector(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendAsyncWithSelector\",\n                Payload = new\n                {\n                    Data = \"SendAsyncWithSelector\"\n                }\n            };\n            await _webSocketHub.SendAsync(message, (key) => key == id);\n            return Ok();\n        }\n\n        [HttpGet(\"SendWhereAsync\")]", "        public async Task<IActionResult> SendWhereAsync(int id)\n        {\n            var message = new Message()\n            {\n                Type = \"SendWhereAsync\",\n                Payload = new\n                {\n                    Data = \"SendWhereAsync\"\n                }\n            };\n            await _webSocketHub.SendWhereAsync(message, (key) => key > id);\n            return Ok();\n        }\n\n        [HttpGet(\"SendAllAsync\")]", "        public async Task<IActionResult> SendAllAsync()\n        {\n            var message = new Message()\n            {\n                Type = \"SendAllAsync\",\n                Payload = new\n                {\n                    Data = \"SendAllAsync\"\n                }\n            };\n            await _webSocketHub.SendAllAsync(message);\n            return Ok();\n        }\n    }\n}"]}
{"filename": "src/WebSocketHub/Abstractions/src/IWebSocketRequestHandlerProvider.cs", "chunked_list": ["\ufeffusing System.Diagnostics.CodeAnalysis;\n\nnamespace TraTech.WebSocketHub\n{\n    /// <summary>\n    /// Defines the interface for providing WebSocket request handlers.\n    /// </summary>\n    /// <remarks>\n    /// This interface defines methods for getting and adding WebSocket request handlers for the specified message types.\n    /// </remarks>\n    public interface IWebSocketRequestHandlerProvider\n    {\n        /// <summary>\n        /// Gets the type of WebSocket request handler for the specified message type.\n        /// </summary>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <returns>A task that represents the asynchronous operation. The task result is the type of WebSocket request handler for the specified message type, or null if no handler was found.</returns>\n        Task<Type?> GetHandlerAsync(string messageType);\n\n        /// <summary>\n        /// Adds a WebSocket request handler of type THandler for the specified message type.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <remarks>", "    /// This interface defines methods for getting and adding WebSocket request handlers for the specified message types.\n    /// </remarks>\n    public interface IWebSocketRequestHandlerProvider\n    {\n        /// <summary>\n        /// Gets the type of WebSocket request handler for the specified message type.\n        /// </summary>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <returns>A task that represents the asynchronous operation. The task result is the type of WebSocket request handler for the specified message type, or null if no handler was found.</returns>\n        Task<Type?> GetHandlerAsync(string messageType);\n\n        /// <summary>\n        /// Adds a WebSocket request handler of type THandler for the specified message type.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <remarks>", "        /// This method adds a WebSocket request handler of type THandler for the specified message type. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor.\n        /// </remarks>\n        void AddHandler<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string messageType) where THandler : class, IWebSocketRequestHandler;\n\n        /// <summary>\n        /// Tries to add a WebSocket request handler of type THandler for the specified message type.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <returns>A boolean value indicating whether the WebSocket request handler was added successfully.</returns>\n        /// <remarks>", "        /// This method tries to add a WebSocket request handler of type THandler for the specified message type. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor. If a handler already exists for the specified message type, this method returns false and does not add the new handler.\n        /// </remarks>\n        bool TryAddHandler<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string messageType) where THandler : class, IWebSocketRequestHandler;\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Abstractions/src/IWebSocketRequestHandler.cs", "chunked_list": ["\ufeffnamespace TraTech.WebSocketHub\n{\n    /// <summary>\n    /// Defines the interface for handling WebSocket requests.\n    /// </summary>\n    /// <remarks>\n    /// This interface defines a method for handling WebSocket requests with the specified key and data.\n    /// </remarks>\n    public interface IWebSocketRequestHandler\n    {\n        /// <summary>\n        /// Handles the WebSocket request with the specified key and data.\n        /// </summary>\n        /// <param name=\"key\">The key associated with the WebSocket connection.</param>\n        /// <param name=\"data\">The data received from the WebSocket connection.</param>\n        /// <returns>A task that represents the asynchronous operation.</returns>\n        Task HandleRequestAsync(string key, string data);\n    }\n}\n", "    public interface IWebSocketRequestHandler\n    {\n        /// <summary>\n        /// Handles the WebSocket request with the specified key and data.\n        /// </summary>\n        /// <param name=\"key\">The key associated with the WebSocket connection.</param>\n        /// <param name=\"data\">The data received from the WebSocket connection.</param>\n        /// <returns>A task that represents the asynchronous operation.</returns>\n        Task HandleRequestAsync(string key, string data);\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/Message.cs", "chunked_list": ["\ufeffnamespace TraTech.WebSocketHub\n{\n    /// <summary>\n    /// Represents a message sent over a WebSocket connection.\n    /// </summary>\n    public class Message\n    {\n        /// <summary>\n        /// Gets or sets the type of the message.\n        /// </summary>\n        public string Type { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Gets or sets the payload of the message.\n        /// </summary>\n        public object? Payload { get; set; }\n    }\n}\n", "        public string Type { get; set; } = string.Empty;\n\n        /// <summary>\n        /// Gets or sets the payload of the message.\n        /// </summary>\n        public object? Payload { get; set; }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketHubBuilder.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Newtonsoft.Json;\nusing System.Diagnostics.CodeAnalysis;\n\nnamespace TraTech.WebSocketHub\n{\n    public class WebSocketHubBuilder\n    {\n        /// <summary>\n        /// Initializes a new instance of the WebSocketHubBuilder class with the specified collection of services.\n        /// </summary>\n        /// <param name=\"services\">The collection of services to use for the WebSocketHub.</param>\n        /// <remarks>", "        /// Initializes a new instance of the WebSocketHubBuilder class with the specified collection of services.\n        /// </summary>\n        /// <param name=\"services\">The collection of services to use for the WebSocketHub.</param>\n        /// <remarks>\n        /// This constructor initializes a new instance of the WebSocketHubBuilder class with the specified collection of services. It is used to configure services for the WebSocketHub.\n        /// </remarks>\n        public WebSocketHubBuilder(IServiceCollection services) => Services = services;\n\n        /// <summary>\n        /// Gets the collection of services registered in the application.\n        /// </summary>\n        /// <remarks>\n        /// This property returns the collection of services registered in the application. It is used to add and configure services for the WebSocketHub.\n        /// </remarks>", "        public virtual IServiceCollection Services { get; }\n\n        /// <summary>\n        /// Adds a WebSocket request handler of type THandler for the specified message type to the WebSocketHubOptions.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <returns>A WebSocketHubBuilder instance.</returns>\n        /// <remarks>\n        /// This method adds a WebSocket request handler of type THandler for the specified message type to the WebSocketHubOptions. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor. The THandler type is also registered as a transient service in the application services.\n        /// </remarks>", "        /// This method adds a WebSocket request handler of type THandler for the specified message type to the WebSocketHubOptions. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor. The THandler type is also registered as a transient service in the application services.\n        /// </remarks>\n        public WebSocketHubBuilder AddRequestHandler<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string messageType)\n            where THandler : class, IWebSocketRequestHandler\n        {\n            Services.Configure<WebSocketHubOptions>(o =>\n            {\n                o.WebSocketRequestHandler.TryAddHandler<THandler>(messageType);\n            });\n\n            Services.TryAddTransient<THandler>();\n\n            return this;\n        }\n\n        /// <summary>\n        /// Adds the specified JsonSerializerSettings to the WebSocketHubOptions.\n        /// </summary>\n        /// <param name=\"jsonSerializerSettings\">The JsonSerializerSettings to add.</param>\n        /// <returns>A WebSocketHubBuilder instance.</returns>\n        /// <remarks>\n        /// This method adds the specified JsonSerializerSettings to the WebSocketHubOptions. The JsonSerializerSettings are used to configure the JSON serializer used to serialize WebSocket messages.\n        /// </remarks>", "        public WebSocketHubBuilder AddJsonSerializerSettings(JsonSerializerSettings jsonSerializerSettings)\n        {\n            Services.Configure<WebSocketHubOptions>(o =>\n            {\n                o.UseJsonSerializerSettings(jsonSerializerSettings);\n            });\n\n            return this;\n        }\n\n        /// <summary>\n        /// Adds the specified receive buffer size to the WebSocketHubOptions.\n        /// </summary>\n        /// <param name=\"receiveBufferSize\">The receive buffer size to add.</param>\n        /// <returns>A WebSocketHubBuilder instance.</returns>\n        /// <remarks>\n        /// This method adds the specified receive buffer size to the WebSocketHubOptions. The receive buffer size is used to configure the size of the buffer used to receive WebSocket messages.\n        /// </remarks>", "        public WebSocketHubBuilder AddReceiveBufferSize(int receiveBufferSize)\n        {\n            Services.Configure<WebSocketHubOptions>(o =>\n            {\n                o.UseReceiveBufferSize(receiveBufferSize);\n            });\n\n            return this;\n        }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketRequestHandlerProvider.cs", "chunked_list": ["\ufeffusing System.Diagnostics.CodeAnalysis;\n\nnamespace TraTech.WebSocketHub\n{\n    /// <summary>\n    /// Provides WebSocket request handlers for handling WebSocket requests.\n    /// </summary>\n    /// <remarks>\n    /// This class provides WebSocket request handlers for handling WebSocket requests. It implements the IWebSocketRequestHandlerProvider interface.\n    /// </remarks>\n    public class WebSocketRequestHandlerProvider : IWebSocketRequestHandlerProvider\n    {", "    /// This class provides WebSocket request handlers for handling WebSocket requests. It implements the IWebSocketRequestHandlerProvider interface.\n    /// </remarks>\n    public class WebSocketRequestHandlerProvider : IWebSocketRequestHandlerProvider\n    {\n        private readonly object _lock = new();\n\n        /// <summary>\n        /// The dictionary that maps message types to WebSocket request handler types.\n        /// </summary>\n        /// <remarks>\n        /// This field is a dictionary that maps message types to WebSocket request handler types. It is used by the WebSocketRequestHandlerProvider to provide WebSocket request handlers for handling WebSocket requests.\n        /// </remarks>", "        private readonly Dictionary<string, Type> _handlerTypeMap = new(StringComparer.Ordinal);\n\n        /// <summary>\n        /// Attempts to add a WebSocket request handler of type THandler for the specified message type to the handler type map.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <returns>true if the WebSocket request handler was added to the handler type map; otherwise, false.</returns>\n        /// <exception cref=\"InvalidOperationException\">Thrown when <typeparamref name=\"THandler\"/> is not assignable from IWebSocketRequestHandler.</exception>\n        /// <remarks>\n        /// This method attempts to add a WebSocket request handler of type THandler for the specified message type to the handler type map. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor. If the message type is already associated with a WebSocket request handler type, this method returns false. Otherwise, it adds the message type and WebSocket request handler type to the handler type map and returns true.\n        /// </remarks>", "        /// This method attempts to add a WebSocket request handler of type THandler for the specified message type to the handler type map. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor. If the message type is already associated with a WebSocket request handler type, this method returns false. Otherwise, it adds the message type and WebSocket request handler type to the handler type map and returns true.\n        /// </remarks>\n        public bool TryAddHandler<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string messageType)\n            where THandler : class, IWebSocketRequestHandler\n        {\n            if (_handlerTypeMap.ContainsKey(messageType))\n            {\n                return false;\n            }\n\n            if (!typeof(IWebSocketRequestHandler).IsAssignableFrom(typeof(THandler)))\n            {\n                throw new InvalidOperationException($\"{typeof(THandler)} is not assignable from IWebSocketRequestHandler\");\n            }\n\n            lock (_lock)\n            {\n                _handlerTypeMap.Add(messageType, typeof(THandler));\n                return true;\n            }\n        }\n\n        /// <summary>\n        /// Adds a WebSocket request handler of type THandler for the specified message type to the handler type map.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <exception cref=\"InvalidOperationException\">Thrown when a WebSocket request handler already exists for the specified message type.</exception>\n        /// <remarks>", "            if (!typeof(IWebSocketRequestHandler).IsAssignableFrom(typeof(THandler)))\n            {\n                throw new InvalidOperationException($\"{typeof(THandler)} is not assignable from IWebSocketRequestHandler\");\n            }\n\n            lock (_lock)\n            {\n                _handlerTypeMap.Add(messageType, typeof(THandler));\n                return true;\n            }\n        }\n\n        /// <summary>\n        /// Adds a WebSocket request handler of type THandler for the specified message type to the handler type map.\n        /// </summary>\n        /// <typeparam name=\"THandler\">The type of WebSocket request handler to add.</typeparam>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <exception cref=\"InvalidOperationException\">Thrown when a WebSocket request handler already exists for the specified message type.</exception>\n        /// <remarks>", "        /// This method adds a WebSocket request handler of type THandler for the specified message type to the handler type map. The THandler type must implement the IWebSocketRequestHandler interface and have a public constructor. If a WebSocket request handler already exists for the specified message type, this method throws an InvalidOperationException.\n        /// </remarks>\n        public void AddHandler<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string messageType)\n            where THandler : class, IWebSocketRequestHandler\n        {\n            if (_handlerTypeMap.ContainsKey(messageType))\n            {\n                throw new InvalidOperationException(\"WebSocketRequestHandler already exists: \" + messageType);\n            }\n            lock (_lock)\n            {", "                if (!TryAddHandler<THandler>(messageType))\n                {\n                    throw new InvalidOperationException(\"WebSocketRequestHandler already exists: \" + messageType);\n                }\n            }\n        }\n\n        /// <summary>\n        /// Gets the WebSocket request handler type associated with the specified message type.\n        /// </summary>\n        /// <param name=\"messageType\">The message type associated with the WebSocket request handler.</param>\n        /// <returns>A task that represents the asynchronous operation. The task result is the WebSocket request handler type associated with the specified message type, or null if no WebSocket request handler is associated with the message type.</returns>\n        /// <remarks>\n        /// This method gets the WebSocket request handler type associated with the specified message type from the handler type map. It returns a task that represents the asynchronous operation. The task result is the WebSocket request handler type associated with the specified message type, or null if no WebSocket request handler is associated with the message type.\n        /// </remarks>\n        public Task<Type?> GetHandlerAsync(string messageType)\n        {\n            return Task.FromResult(_handlerTypeMap.TryGetValue(messageType, out var handlerType) ? handlerType : null);\n        }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketHubAppBuilderExtensions.cs", "chunked_list": ["\ufeffusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.WebSockets;\n\nnamespace TraTech.WebSocketHub\n{\n    public static class WebSocketHubAppBuilderExtensions\n    {\n        /// <summary>\n        /// Adds the WebSocketHubMiddleware to the pipeline with the specified acceptIf and keyGenerator functions.\n        /// </summary>\n        /// <typeparam name=\"TKey\">The type of key associated with WebSocket connections.</typeparam>\n        /// <param name=\"app\">The IApplicationBuilder instance.</param>\n        /// <param name=\"acceptIf\">The function used to determine if a WebSocket request should be accepted.</param>\n        /// <param name=\"keyGenerator\">The function used to generate a key for the WebSocket connection.</param>\n        /// <returns>The IApplicationBuilder instance.</returns>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"app\"/>, <paramref name=\"acceptIf\"/>, or <paramref name=\"keyGenerator\"/> is null.</exception>\n        /// <remarks>\n        /// This extension method adds the WebSocketHubMiddleware to the pipeline with the specified acceptIf and keyGenerator functions for handling WebSocket requests associated with keys of type TKey.\n        /// </remarks>", "        public static IApplicationBuilder UseWebSocketHub<TKey>(this IApplicationBuilder app, Func<HttpContext, bool> acceptIf, Func<HttpContext, TKey> keyGenerator)\n            where TKey : notnull\n        {\n            if (app == null)\n            {\n                throw new ArgumentNullException(nameof(app));\n            }\n            if (acceptIf == null)\n            {\n                throw new ArgumentNullException(nameof(acceptIf));\n            }", "            if (keyGenerator == null)\n            {\n                throw new ArgumentNullException(nameof(keyGenerator));\n            }\n\n            VerifyServicesRegistered(app);\n\n            return app.UseMiddleware<WebSocketHubMiddleware<TKey>>(acceptIf, keyGenerator);\n        }\n\n        /// <summary>\n        /// Verifies that the WebSocketMiddleware is registered in the application services.\n        /// </summary>\n        /// <param name=\"app\">The IApplicationBuilder instance.</param>\n        /// <param name=\"options\">The WebSocket options to configure the middleware.</param>\n        /// <remarks>\n        /// This method verifies that the WebSocketMiddleware is registered in the application services. If it is not registered, this method adds it to the pipeline with the specified WebSocket options, or with default options if no options are specified.\n        /// </remarks>", "        private static void VerifyServicesRegistered(IApplicationBuilder app, WebSocketOptions? options = null)\n        {\n            if (app.ApplicationServices.GetService(typeof(WebSocketMiddleware)) == null)\n            {\n                if (options is not null)\n                {\n                    app.UseWebSockets(options);\n                }\n                else\n                {\n                    app.UseWebSockets();\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketHubOptions.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\n\nnamespace TraTech.WebSocketHub\n{\n    /// <summary>\n    /// Represents the options for configuring the WebSocketHub.\n    /// </summary>\n    /// <remarks>\n    /// This class represents the options for configuring the WebSocketHub. It contains properties for configuring the WebSocket request handler provider, the JSON serializer settings, and the receive buffer size.\n    /// </remarks>\n    public class WebSocketHubOptions\n    {\n        /// <summary>\n        /// Gets the WebSocket request handler provider.\n        /// </summary>\n        /// <remarks>\n        /// This property gets the WebSocket request handler provider. It is used to provide WebSocket request handlers for handling WebSocket requests.\n        /// </remarks>", "    /// This class represents the options for configuring the WebSocketHub. It contains properties for configuring the WebSocket request handler provider, the JSON serializer settings, and the receive buffer size.\n    /// </remarks>\n    public class WebSocketHubOptions\n    {\n        /// <summary>\n        /// Gets the WebSocket request handler provider.\n        /// </summary>\n        /// <remarks>\n        /// This property gets the WebSocket request handler provider. It is used to provide WebSocket request handlers for handling WebSocket requests.\n        /// </remarks>\n        public IWebSocketRequestHandlerProvider WebSocketRequestHandler { get; private set; }\n\n        /// <summary>\n        /// Gets the JSON serializer settings.\n        /// </summary>\n        /// <remarks>\n        /// This property gets the JSON serializer settings. It is used to configure the JSON serializer used to serialize WebSocket messages.\n        /// </remarks>\n        public JsonSerializerSettings? JsonSerializerSettings { get; private set; }\n\n        /// <summary>\n        /// Gets the receive buffer size.\n        /// </summary>\n        /// <remarks>\n        /// This property gets the receive buffer size. It is used to configure the size of the buffer used to receive WebSocket messages.\n        /// </remarks>", "        public IWebSocketRequestHandlerProvider WebSocketRequestHandler { get; private set; }\n\n        /// <summary>\n        /// Gets the JSON serializer settings.\n        /// </summary>\n        /// <remarks>\n        /// This property gets the JSON serializer settings. It is used to configure the JSON serializer used to serialize WebSocket messages.\n        /// </remarks>\n        public JsonSerializerSettings? JsonSerializerSettings { get; private set; }\n\n        /// <summary>\n        /// Gets the receive buffer size.\n        /// </summary>\n        /// <remarks>\n        /// This property gets the receive buffer size. It is used to configure the size of the buffer used to receive WebSocket messages.\n        /// </remarks>", "        public int ReceiveBufferSize { get; private set; } = 4 * 1024;\n\n        /// <summary>\n        /// Initializes a new instance of the WebSocketHubOptions class.\n        /// </summary>\n        /// <remarks>\n        /// This constructor initializes a new instance of the WebSocketHubOptions class with a default WebSocket request handler provider.\n        /// </remarks>\n        public WebSocketHubOptions()\n        {\n            WebSocketRequestHandler = new WebSocketRequestHandlerProvider();\n        }\n        /// <summary>\n        /// Sets the WebSocket request handler provider.\n        /// </summary>\n        /// <param name=\"webSocketRequestHandlerProvider\">The WebSocket request handler provider to set.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"webSocketRequestHandlerProvider\"/> is null.</exception>\n        /// <remarks>\n        /// This method sets the WebSocket request handler provider. It is used to provide WebSocket request handlers for handling WebSocket requests.\n        /// </remarks>", "        public void UseWebSocketRequestHandlerProvider(IWebSocketRequestHandlerProvider webSocketRequestHandlerProvider)\n        {\n            WebSocketRequestHandler = webSocketRequestHandlerProvider ?? throw new ArgumentNullException(nameof(webSocketRequestHandlerProvider));\n        }\n\n        /// <summary>\n        /// Sets the JSON serializer settings.\n        /// </summary>\n        /// <param name=\"jsonSerializerSettings\">The JSON serializer settings to set.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"jsonSerializerSettings\"/> is null.</exception>\n        /// <remarks>\n        /// This method sets the JSON serializer settings. It is used to configure the JSON serializer used to serialize WebSocket messages.\n        /// </remarks>", "        public void UseJsonSerializerSettings(JsonSerializerSettings jsonSerializerSettings)\n        {\n            JsonSerializerSettings = jsonSerializerSettings ?? throw new ArgumentNullException(nameof(jsonSerializerSettings));\n        }\n\n        /// <summary>\n        /// Sets the receive buffer size.\n        /// </summary>\n        /// <param name=\"receiveBufferSize\">The receive buffer size to set.</param>\n        /// <remarks>\n        /// This method sets the receive buffer size. It is used to configure the size of the buffer used to receive WebSocket messages.\n        /// </remarks>", "        public void UseReceiveBufferSize(int receiveBufferSize)\n        {\n            ReceiveBufferSize = receiveBufferSize;\n        }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketHubServiceCollectionExtensions.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.DependencyInjection;\n\nnamespace TraTech.WebSocketHub\n{\n    public static class WebSocketHubServiceCollectionExtensions\n    {\n        /// <summary>\n        /// Adds the WebSocketHub to the service collection with the specified key type.\n        /// </summary>\n        /// <typeparam name=\"TKey\">The type of key associated with WebSocket connections.</typeparam>\n        /// <param name=\"services\">The IServiceCollection instance.</param>\n        /// <returns>A WebSocketHubBuilder instance.</returns>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"services\"/> is null.</exception>\n        /// <remarks>\n        /// This extension method adds the WebSocketHub to the service collection with the specified key type. It also registers the WebSocketHub as a singleton service and adds options to the service collection.\n        /// </remarks>", "        public static WebSocketHubBuilder AddWebSocketHub<TKey>(this IServiceCollection services)\n            where TKey : notnull\n        {\n            if (services == null)\n            {\n                throw new ArgumentNullException(nameof(services));\n            }\n\n            services.AddOptions();\n\n            services.AddSingleton<WebSocketHub<TKey>>();\n\n            return new WebSocketHubBuilder(services);\n        }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketHubMiddleware.cs", "chunked_list": ["\ufeffusing System.Net.WebSockets;\nusing System.Text;\nusing Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;\n\nnamespace TraTech.WebSocketHub\n{\n    public class WebSocketHubMiddleware<TKey>\n            where TKey : notnull\n    {\n        private readonly IServiceProvider _serviceProvider;", "        private readonly IServiceProvider _serviceProvider;\n        private readonly RequestDelegate _next;\n        private readonly Func<HttpContext, bool> _acceptIf;\n        private readonly WebSocketHub<TKey> _webSocketHub;\n        private readonly Func<HttpContext, TKey> _keyGenerator;\n        private readonly byte[] _receiveBuffer;\n\n        public WebSocketHubMiddleware(IServiceProvider serviceProvider, RequestDelegate next, WebSocketHub<TKey> webSocketHub, Func<HttpContext, bool> acceptIf, Func<HttpContext, TKey> keyGenerator)\n        {\n            _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));\n            _next = next ?? throw new ArgumentNullException(nameof(next));\n            _acceptIf = acceptIf ?? throw new ArgumentNullException(nameof(acceptIf));\n            _webSocketHub = webSocketHub ?? throw new ArgumentNullException(nameof(webSocketHub));\n            _keyGenerator = keyGenerator ?? throw new ArgumentNullException(nameof(keyGenerator));\n            _receiveBuffer = new byte[_webSocketHub.Options.ReceiveBufferSize];\n        }\n", "        public async Task Invoke(HttpContext httpContext)\n        {\n\n            if (httpContext.WebSockets.IsWebSocketRequest && _acceptIf(httpContext))\n            {\n                try\n                {\n                    WebSocket webSocket = await httpContext.WebSockets.AcceptWebSocketAsync();\n\n                    var key = _keyGenerator(httpContext);\n                    _webSocketHub.Add(key, webSocket);\n", "                    while (webSocket.State == WebSocketState.Open || webSocket.State == WebSocketState.CloseSent)\n                    {\n                        try\n                        {\n                            WebSocketReceiveResult result = await webSocket.ReceiveAsync(new ArraySegment<byte>(_receiveBuffer), CancellationToken.None);\n                            string request = Encoding.UTF8.GetString(_receiveBuffer, 0, result.Count);\n\n                            if (result.MessageType == WebSocketMessageType.Close)\n                            {\n                                break;\n                            }\n\n                            Message? serializedRequest = _webSocketHub.DeserializeMessage(request);", "                            if (serializedRequest == null) { throw new NullReferenceException(nameof(serializedRequest)); }\n\n                            Type? handlerType = await _webSocketHub.Options.WebSocketRequestHandler.GetHandlerAsync(serializedRequest.Type);\n                            if (handlerType == null) { throw new NullReferenceException(nameof(handlerType)); }\n\n                            if (_serviceProvider.GetService(handlerType) is not IWebSocketRequestHandler service) { throw new NullReferenceException(nameof(service)); }\n\n                            await service.HandleRequestAsync(\n                                JsonConvert.SerializeObject(key, _webSocketHub.Options.JsonSerializerSettings),\n                                JsonConvert.SerializeObject(serializedRequest.Payload, _webSocketHub.Options.JsonSerializerSettings)\n                            );\n                        }", "                        catch (Exception exp)\n                        {\n                            Console.WriteLine(exp.ToString());\n                            continue;\n                        }\n                    }\n\n                    await _webSocketHub.RemoveAsync(key, webSocket);\n                }\n                catch (Exception exp)\n                {\n                    Console.WriteLine(exp.ToString());\n                }\n            }\n            else\n            {\n                await _next(httpContext);\n            }\n        }\n    }\n}\n", "                catch (Exception exp)\n                {\n                    Console.WriteLine(exp.ToString());\n                }\n            }\n            else\n            {\n                await _next(httpContext);\n            }\n        }\n    }\n}\n"]}
{"filename": "src/WebSocketHub/Core/src/WebSocketHub.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Options;\nusing Newtonsoft.Json;\nusing System.Collections.ObjectModel;\nusing System.Net.WebSockets;\nusing System.Text;\n\nnamespace TraTech.WebSocketHub\n{\n    /// <summary>\n    /// Represents a hub for managing WebSocket connections associated with keys of type TKey.", "    /// <summary>\n    /// Represents a hub for managing WebSocket connections associated with keys of type TKey.\n    /// </summary>\n    /// <typeparam name=\"TKey\">The type of key associated with WebSocket connections.</typeparam>\n    /// <remarks>\n    /// This class provides methods for managing WebSocket connections associated with keys of type TKey, such as adding, removing, and retrieving WebSocket connections.\n    /// </remarks>\n    public class WebSocketHub<TKey>\n        where TKey : notnull\n    {\n        /// <summary>\n        /// A dictionary that maps keys to a list of WebSocket connections.\n        /// </summary>\n        /// <remarks>\n        /// This dictionary is used to maintain a mapping between keys and the WebSocket connections associated with them.\n        /// </remarks>", "        private readonly Dictionary<TKey, List<WebSocket>> _webSocketDictionary;\n\n        /// <summary>\n        /// A function that selects WebSocket connections that are open.\n        /// </summary>\n        /// <remarks>\n        /// This function returns true if the specified WebSocket connection is open, and false otherwise.\n        /// </remarks>\n        private static readonly Func<WebSocket, bool> _openSocketSelector = socket => socket.State == WebSocketState.Open;\n\n", "        private static readonly Func<WebSocket, bool> _openSocketSelector = socket => socket.State == WebSocketState.Open;\n\n\n        public WebSocketHubOptions Options { get; private set; }\n\n        /// <summary>\n        /// Initializes a new instance of the WebSocketHub class with the specified options.\n        /// </summary>\n        /// <param name=\"options\">The options to configure the WebSocketHub.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"options\"/> is null.</exception>\n        /// <remarks>", "        /// This constructor initializes a new instance of the WebSocketHub class with the specified options. It also initializes an empty WebSocket dictionary.\n        /// </remarks>\n        public WebSocketHub(IOptions<WebSocketHubOptions> options)\n        {\n            if (options == null) throw new ArgumentNullException(nameof(options));\n            Options = options.Value;\n\n            _webSocketDictionary = new();\n        }\n\n        /// <summary>\n        /// Encodes the specified Message object into a UTF-8 encoded byte array.\n        /// </summary>\n        /// <param name=\"message\">The Message object to encode.</param>\n        /// <returns>A UTF-8 encoded byte array representing the specified Message object.</returns>\n        /// <remarks>\n        /// This method encodes the specified Message object into a UTF-8 encoded byte array using the JSON serializer settings specified in the WebSocketHubOptions.\n        /// </remarks>\n        private byte[] EncodeMessage(Message message)\n        {\n            return Encoding.UTF8.GetBytes(\n                JsonConvert.SerializeObject(message, Options.JsonSerializerSettings)\n            );\n        }\n\n        /// <summary>\n        /// Sends the specified message to the specified WebSocket connection if it is open.\n        /// </summary>\n        /// <param name=\"message\">The message to send.</param>\n        /// <param name=\"socket\">The WebSocket connection to send the message to.</param>\n        /// <returns>A task that represents the asynchronous operation.</returns>\n        /// <remarks>\n        /// This method sends the specified message to the specified WebSocket connection if it is open. If the WebSocket connection is not open or the message is null, the method returns without sending the message.\n        /// </remarks>", "        private static async Task SendAsync(byte[] message, WebSocket socket)\n        {\n            if (socket == null || socket.State != WebSocketState.Open) return;\n            if (message == null) return;\n\n            if (socket.State == WebSocketState.Open)\n                await socket.SendAsync(new ArraySegment<byte>(message), WebSocketMessageType.Text, true, CancellationToken.None);\n        }\n\n        /// <summary>\n        /// Closes the specified WebSocket connection if it is not already closed or aborted.\n        /// </summary>\n        /// <param name=\"webSocket\">The WebSocket connection to close.</param>\n        /// <returns>A task that represents the asynchronous operation.</returns>\n        /// <remarks>\n        /// This method closes the specified WebSocket connection with the WebSocket close status of \"NormalClosure\" and the reason string of \"Connection End\" if the WebSocket connection is not already closed or aborted.\n        /// </remarks>", "        private static async Task CloseWebSocketAsync(WebSocket webSocket)\n        {\n            if (webSocket.State != WebSocketState.Closed && webSocket.State != WebSocketState.Aborted)\n            {\n                await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, \"Connection End\", CancellationToken.None);\n            }\n        }\n\n        /// <summary>\n        /// Deserializes the specified JSON message into a Message object.\n        /// </summary>\n        /// <param name=\"message\">The JSON message to deserialize.</param>\n        /// <returns>A Message object representing the deserialized JSON message.</returns>\n        /// <remarks>\n        /// This method deserializes the specified JSON message into a Message object using the JSON serializer settings specified in the WebSocketHubOptions.\n        /// </remarks>\n        public Message? DeserializeMessage(string message)\n        {\n            return JsonConvert.DeserializeObject<Message>(message, Options.JsonSerializerSettings);\n        }\n\n        /// <summary>\n        /// Gets the list of WebSocket instances associated with the specified key.\n        /// </summary>\n        /// <param name=\"key\">The key to look up the WebSocket list.</param>\n        /// <returns>A read-only collection of WebSocket instances.</returns>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the key is not found in the WebSocket dictionary.</exception>\n        public ReadOnlyCollection<WebSocket> GetSocketList(TKey key)\n        {\n            lock (_webSocketDictionary)\n            {", "                if (!_webSocketDictionary.ContainsKey(key)) throw new KeyNotFoundException(nameof(key));\n\n                return _webSocketDictionary[key].AsReadOnly();\n            }\n        }\n\n        /// <summary>\n        /// Returns a read-only collection of WebSocket connections associated with the key selected by the specified function from the WebSocket dictionary.\n        /// </summary>\n        /// <param name=\"selector\">The function used to select the key associated with the WebSocket connections to retrieve.</param>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the selected key cannot be found in the WebSocket dictionary.</exception>\n        /// <returns>A read-only collection of WebSocket connections associated with the selected key.</returns>\n        /// <remarks>\n        /// This method returns a read-only collection of WebSocket connections associated with the key that fulfills the criteria specified by the <paramref name=\"selector\"/> function from the WebSocket dictionary.\n        /// </remarks>\n        public ReadOnlyCollection<WebSocket> GetSocketList(Func<TKey, bool> selector)\n        {\n            lock (_webSocketDictionary)\n            {\n                TKey key = _webSocketDictionary.Keys.FirstOrDefault(selector) ?? throw new KeyNotFoundException(nameof(selector));\n\n                return _webSocketDictionary[key].AsReadOnly();\n            }\n        }\n\n        /// <summary>\n        /// Adds the specified WebSocket connection to the WebSocket dictionary associated with the specified key.\n        /// </summary>\n        /// <param name=\"key\">The key associated with the WebSocket connection.</param>\n        /// <param name=\"webSocket\">The WebSocket connection to add.</param>", "        public void Add(TKey key, WebSocket webSocket)\n        {\n            if (webSocket == null) return;\n\n            lock (_webSocketDictionary)\n            {\n                if (!_webSocketDictionary.ContainsKey(key)) _webSocketDictionary[key] = new List<WebSocket>();\n                _webSocketDictionary[key].Add(webSocket);\n            }\n        }\n\n        /// <summary>\n        /// Removes the specified WebSocket connection associated with the specified key from the WebSocket dictionary and closes it.\n        /// </summary>\n        /// <param name=\"key\">The key associated with the WebSocket connection to remove.</param>\n        /// <param name=\"webSocket\">The WebSocket connection to remove.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"webSocket\"/> is null.</exception>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the specified key cannot be found in the WebSocket dictionary.</exception>", "        public async Task RemoveAsync(TKey key, WebSocket webSocket)\n        {\n            if (webSocket == null) throw new ArgumentNullException(nameof(webSocket));\n\n            lock (_webSocketDictionary)\n            {\n                if (!_webSocketDictionary.ContainsKey(key)) throw new KeyNotFoundException(nameof(key));\n\n                _webSocketDictionary[key].Remove(webSocket);\n\n                if (_webSocketDictionary[key].Count == 0) _webSocketDictionary.Remove(key);\n            }\n\n            await WebSocketHub<TKey>.CloseWebSocketAsync(webSocket);\n        }\n\n        /// <summary>\n        /// Removes the specified WebSocket connection associated with the key selected by the specified function from the WebSocket dictionary and closes it.\n        /// </summary>\n        /// <param name=\"selector\">The function used to select the key associated with the WebSocket connection to remove.</param>\n        /// <param name=\"webSocket\">The WebSocket connection to remove.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"webSocket\"/> is null.</exception>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the selected key cannot be found in the WebSocket dictionary.</exception>\n        /// <remarks>\n        /// This method removes the specified WebSocket connection associated with the first key that fulfills the criteria specified by the <paramref name=\"selector\"/> function from the WebSocket dictionary and closes it.\n        /// </remarks>", "                if (_webSocketDictionary[key].Count == 0) _webSocketDictionary.Remove(key);\n            }\n\n            await WebSocketHub<TKey>.CloseWebSocketAsync(webSocket);\n        }\n\n        /// <summary>\n        /// Removes the specified WebSocket connection associated with the key selected by the specified function from the WebSocket dictionary and closes it.\n        /// </summary>\n        /// <param name=\"selector\">The function used to select the key associated with the WebSocket connection to remove.</param>\n        /// <param name=\"webSocket\">The WebSocket connection to remove.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"webSocket\"/> is null.</exception>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the selected key cannot be found in the WebSocket dictionary.</exception>\n        /// <remarks>\n        /// This method removes the specified WebSocket connection associated with the first key that fulfills the criteria specified by the <paramref name=\"selector\"/> function from the WebSocket dictionary and closes it.\n        /// </remarks>", "        public async Task RemoveAsync(Func<TKey, bool> selector, WebSocket webSocket)\n        {\n            if (webSocket == null) throw new ArgumentNullException(nameof(webSocket));\n\n            lock (_webSocketDictionary)\n            {\n                TKey key = _webSocketDictionary.Keys.FirstOrDefault(selector) ?? throw new KeyNotFoundException(nameof(key));\n\n                if (_webSocketDictionary.ContainsKey(key)) _webSocketDictionary[key].Remove(webSocket);\n                if (_webSocketDictionary[key].Count == 0) _webSocketDictionary.Remove(key);\n            }\n\n            await WebSocketHub<TKey>.CloseWebSocketAsync(webSocket);\n        }\n\n        /// <summary>\n        /// Removes the WebSocket connection associated with the first key selected by the specified function from the WebSocket dictionary and closes it.\n        /// </summary>\n        /// <param name=\"selector\">The function used to select the key associated with the WebSocket connection to remove.</param>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the selected key cannot be found in the WebSocket dictionary.</exception>\n        /// <remarks>\n        /// This method removes the WebSocket connection associated with the first key that fulfills the criteria specified by the <paramref name=\"selector\"/> function from the WebSocket dictionary and closes it.\n        /// </remarks>", "                if (_webSocketDictionary.ContainsKey(key)) _webSocketDictionary[key].Remove(webSocket);\n                if (_webSocketDictionary[key].Count == 0) _webSocketDictionary.Remove(key);\n            }\n\n            await WebSocketHub<TKey>.CloseWebSocketAsync(webSocket);\n        }\n\n        /// <summary>\n        /// Removes the WebSocket connection associated with the first key selected by the specified function from the WebSocket dictionary and closes it.\n        /// </summary>\n        /// <param name=\"selector\">The function used to select the key associated with the WebSocket connection to remove.</param>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the selected key cannot be found in the WebSocket dictionary.</exception>\n        /// <remarks>\n        /// This method removes the WebSocket connection associated with the first key that fulfills the criteria specified by the <paramref name=\"selector\"/> function from the WebSocket dictionary and closes it.\n        /// </remarks>", "        public async Task RemoveFirstAsync(Func<TKey, bool> selector)\n        {\n            IEnumerable<WebSocket> sockets = Enumerable.Empty<WebSocket>();\n\n            lock (_webSocketDictionary)\n            {\n                TKey key = _webSocketDictionary.Keys.FirstOrDefault(selector) ?? throw new KeyNotFoundException(nameof(key));\n\n                sockets = _webSocketDictionary[key];\n                _webSocketDictionary.Remove(key);\n            }\n", "            foreach (var socket in sockets)\n            {\n                await WebSocketHub<TKey>.CloseWebSocketAsync(socket);\n            }\n        }\n\n        /// <summary>\n        /// Removes the WebSocket connections associated with the keys selected by the specified function from the WebSocket dictionary and closes them.\n        /// </summary>\n        /// <param name=\"selector\">The function used to select the keys associated with the WebSocket connections to remove.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"selector\"/> is null.</exception>\n        /// <exception cref=\"NullReferenceException\">Thrown when the selected keys are null.</exception>\n        /// <remarks>\n        /// This method removes the WebSocket connections associated with the keys that fulfill the criteria specified by the <paramref name=\"selector\"/> function from the WebSocket dictionary and closes them.\n        /// </remarks>", "        public async Task RemoveWhereAsync(Func<TKey, bool> selector)\n        {\n            List<WebSocket> sockets = new();\n\n            lock (_webSocketDictionary)\n            {\n                IEnumerable<TKey>? keys = _webSocketDictionary.Keys.Where(selector);\n\n                if (keys == null) throw new NullReferenceException(nameof(keys));\n\n                if (!keys.Any()) return;\n", "                if (keys == null) throw new NullReferenceException(nameof(keys));\n\n                if (!keys.Any()) return;\n\n                foreach (var key in keys)\n                {\n                    sockets.AddRange(_webSocketDictionary[key]);\n                    _webSocketDictionary.Remove(key);\n                }\n            }\n", "            foreach (var socket in sockets)\n            {\n                await WebSocketHub<TKey>.CloseWebSocketAsync(socket);\n            }\n        }\n\n        /// <summary>\n        /// Removes all WebSocket connections from the WebSocket dictionary and closes them.\n        /// </summary>\n        /// <returns>A task representing the asynchronous remove operation.</returns>\n        public async Task RemoveAllAsync()\n        {\n            List<WebSocket> sockets = new();\n\n            lock (_webSocketDictionary)\n            {", "        public async Task RemoveAllAsync()\n        {\n            List<WebSocket> sockets = new();\n\n            lock (_webSocketDictionary)\n            {\n                foreach (var keyValue in _webSocketDictionary)\n                {\n                    sockets.AddRange(keyValue.Value);\n                }\n\n                _webSocketDictionary.Clear();\n            }\n", "            foreach (var socket in sockets)\n            {\n                await WebSocketHub<TKey>.CloseWebSocketAsync(socket);\n            }\n        }\n\n        /// <summary>\n        /// Sends the specified message to the specified WebSocket connections.\n        /// </summary>\n        /// <param name=\"message\">The message to be sent.</param>\n        /// <param name=\"sockets\">The WebSocket connections to send the message to.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"sockets\"/> is null or empty, or when <paramref name=\"message\"/> is null.</exception>\n        /// <remarks>\n        /// This method sends the specified <paramref name=\"message\"/> to the specified <paramref name=\"sockets\"/> that are currently open.\n        /// </remarks>", "        public async Task SendAsync(Message message, params WebSocket[] sockets)\n        {\n            if (sockets == null || sockets.Length == 0 || message == null)\n                return;\n\n            byte[] byteMessage = EncodeMessage(message);\n\n            foreach (var socket in sockets.Where(_openSocketSelector))\n            {\n                await WebSocketHub<TKey>.SendAsync(byteMessage, socket);\n            }\n        }\n\n        /// <summary>\n        /// Sends the specified message to the WebSocket connections associated with the specified key.\n        /// </summary>\n        /// <param name=\"message\">The message to be sent.</param>\n        /// <param name=\"key\">The key associated with the WebSocket connections to send the message to.</param>\n        /// <typeparam name=\"TKey\">The type of the key associated with the WebSocket connections.</typeparam>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"key\"/> or <paramref name=\"message\"/> is null.</exception>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the specified key cannot be found in the WebSocket dictionary.</exception>\n        /// <remarks>\n        /// This method sends the specified <paramref name=\"message\"/> to all WebSocket connections associated with the specified <paramref name=\"key\"/> that are currently open.\n        /// </remarks>", "        public async Task SendAsync(Message message, TKey key)\n        {\n            if (key == null || message == null)\n                return;\n\n            IEnumerable<WebSocket> openSocketList = Enumerable.Empty<WebSocket>();\n\n            lock (_webSocketDictionary)\n            {\n                if (!_webSocketDictionary.ContainsKey(key)) throw new KeyNotFoundException(nameof(key));\n\n                openSocketList = _webSocketDictionary[key].Where(_openSocketSelector);\n            }\n\n            byte[] byteMessage = EncodeMessage(message);\n", "                if (!_webSocketDictionary.ContainsKey(key)) throw new KeyNotFoundException(nameof(key));\n\n                openSocketList = _webSocketDictionary[key].Where(_openSocketSelector);\n            }\n\n            byte[] byteMessage = EncodeMessage(message);\n\n            foreach (var websocket in openSocketList)\n            {\n                await SendAsync(byteMessage, websocket);\n            }\n        }\n\n        /// <summary>\n        /// Sends the specified message to the WebSocket connections associated with the selected key.\n        /// </summary>\n        /// <param name=\"message\">The message to be sent.</param>\n        /// <param name=\"selector\">The function used to select the key associated with the WebSocket connections to send the message to.</param>\n        /// <typeparam name=\"TKey\">The type of the key associated with the WebSocket connections.</typeparam>\n        /// <param name=\"_openSocketSelector\">The function used to determine if a WebSocket connection is open.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"message\"/> or <paramref name=\"selector\"/> is null.</exception>\n        /// <exception cref=\"KeyNotFoundException\">Thrown when the selected key cannot be found in the WebSocket dictionary.</exception>\n        /// <remarks>\n        /// This method sends the specified <paramref name=\"message\"/> to all WebSocket connections associated with the first key that fulfills the criteria specified by the <paramref name=\"selector\"/> function.\n        /// </remarks>", "        public async Task SendAsync(Message message, Func<TKey, bool> selector)\n        {\n            if (message == null) return;\n\n            IEnumerable<WebSocket> openSocketList = Enumerable.Empty<WebSocket>();\n\n            lock (_webSocketDictionary)\n            {\n                TKey key = _webSocketDictionary.Keys.FirstOrDefault(selector) ?? throw new KeyNotFoundException(nameof(selector));\n                openSocketList = _webSocketDictionary[key].Where(_openSocketSelector);\n            }\n\n            byte[] byteMessage = EncodeMessage(message);\n", "            foreach (var websocket in openSocketList)\n            {\n                await SendAsync(byteMessage, websocket);\n            }\n        }\n\n        /// <summary>\n        /// Sends the specified message to the WebSocket connections selected by the specified function.\n        /// </summary>\n        /// <param name=\"message\">The message to be sent.</param>\n        /// <param name=\"selector\">The function used to select the keys associated with the WebSocket connections to send the message to.</param>\n        /// <typeparam name=\"TKey\">The type of the key associated with the WebSocket connections.</typeparam>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"message\"/> or <paramref name=\"selector\"/> is null.</exception>\n        /// <exception cref=\"NullReferenceException\">Thrown when the selected keys are null.</exception>\n        /// <remarks>\n        /// This method sends the specified <paramref name=\"message\"/> to all WebSocket connections associated with the keys that fulfill the criteria specified by the <paramref name=\"selector\"/> function.\n        /// </remarks>", "        public async Task SendWhereAsync(Message message, Func<TKey, bool> selector)\n        {\n            if (message == null) return;\n\n            List<WebSocket> sockets = new();\n\n            lock (_webSocketDictionary)\n            {\n                IEnumerable<TKey>? keys = _webSocketDictionary.Keys.Where(selector);\n\n                if (keys == null) throw new NullReferenceException(nameof(keys));\n", "                if (keys == null) throw new NullReferenceException(nameof(keys));\n\n                if (!keys.Any()) return;\n\n                foreach (var key in keys)\n                {\n                    sockets.AddRange(_webSocketDictionary[key].Where(_openSocketSelector));\n                }\n            }\n\n            byte[] byteMessage = EncodeMessage(message);\n", "            foreach (var socket in sockets)\n            {\n                await SendAsync(byteMessage, socket);\n            }\n        }\n\n        /// <summary>\n        /// Sends the specified message to all WebSocket connections in the WebSocket dictionary.\n        /// </summary>\n        /// <param name=\"message\">The message to be sent.</param>\n        /// <exception cref=\"ArgumentNullException\">Thrown when <paramref name=\"message\"/> is null.</exception>\n        /// <remarks>\n        /// This method sends the specified <paramref name=\"message\"/> to all WebSocket connections in the WebSocket dictionary that are currently open.\n        /// </remarks>", "        public async Task SendAllAsync(Message message)\n        {\n            if (message == null) return;\n\n            List<WebSocket> sockets = new();\n\n            lock (_webSocketDictionary)\n            {\n                foreach (var keyValuePair in _webSocketDictionary)\n                {\n                    sockets.AddRange(keyValuePair.Value.Where(_openSocketSelector));\n                }\n            }\n\n            byte[] byteMessage = EncodeMessage(message);\n", "                foreach (var keyValuePair in _webSocketDictionary)\n                {\n                    sockets.AddRange(keyValuePair.Value.Where(_openSocketSelector));\n                }\n            }\n\n            byte[] byteMessage = EncodeMessage(message);\n\n            foreach (var socket in sockets)\n            {\n                await SendAsync(byteMessage, socket);\n            }\n        }\n    }\n}\n", "            foreach (var socket in sockets)\n            {\n                await SendAsync(byteMessage, socket);\n            }\n        }\n    }\n}\n"]}
