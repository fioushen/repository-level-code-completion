{"filename": "src/MergeEnvironments/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\n// ReSharper disable RedundantUsingDirective\nusing System.Collections.Generic;  // can't alias\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis;  // can't alias\nusing System.Linq; // can't alias\n\nnamespace MergeEnvironments\n{\n    internal class Enhancement\n    {\n        internal readonly string Path;\n\n        public Enhancement(string path)\n        {\n            Path = path;\n        }\n    }\n", "namespace MergeEnvironments\n{\n    internal class Enhancement\n    {\n        internal readonly string Path;\n\n        public Enhancement(string path)\n        {\n            Path = path;\n        }\n    }\n", "    public static class Program\n    {\n        public static int Execute(\n            List<string> environmentPaths,\n            string output,\n            System.IO.Stream? stdout,\n            System.IO.TextWriter stderr\n        )\n        {\n            var shellRegistry =\n                new Registering.TypedRegistry<Aas.IAssetAdministrationShell>();\n\n            var submodelRegistry = new Registering.TypedRegistry<Aas.ISubmodel>();\n\n            var conceptDescriptionRegistry =\n                new Registering.TypedRegistry<Aas.IConceptDescription>();\n\n            var unwrapper = new Aas.Enhancing.Unwrapper<Enhancement>();\n", "            foreach (var envPth in environmentPaths)\n            {\n                var enhancer = new Aas.Enhancing.Enhancer<Enhancement>(\n                    _ => new Enhancement(\n                        new System.IO.FileInfo(envPth).FullName\n                    )\n                );\n\n                var fileInfo = new System.IO.FileInfo(envPth);\n\n                if (!fileInfo.Exists)\n                {\n                    stderr.WriteLine($\"{fileInfo.FullName}: File does not exist\");\n                    return 1;\n                }\n\n                System.Text.Json.Nodes.JsonNode? node;\n                try\n                {\n                    using var file = fileInfo.OpenRead();\n                    node = System.Text.Json.Nodes.JsonNode.Parse(\n                        System.IO.File.ReadAllBytes(envPth)\n                    );\n                }", "                if (!fileInfo.Exists)\n                {\n                    stderr.WriteLine($\"{fileInfo.FullName}: File does not exist\");\n                    return 1;\n                }\n\n                System.Text.Json.Nodes.JsonNode? node;\n                try\n                {\n                    using var file = fileInfo.OpenRead();\n                    node = System.Text.Json.Nodes.JsonNode.Parse(\n                        System.IO.File.ReadAllBytes(envPth)\n                    );\n                }", "                catch (System.Text.Json.JsonException exception)\n                {\n                    stderr.WriteLine(\n                        $\"{fileInfo.FullName}: \" +\n                        $\"JSON parsing failed: {exception.Message}\"\n                    );\n                    return 1;\n                }\n\n                if (node == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null node\"\n                    );\n                }\n\n                Aas.IEnvironment? env;\n                try\n                {\n                    env = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n                }", "                if (node == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null node\"\n                    );\n                }\n\n                Aas.IEnvironment? env;\n                try\n                {\n                    env = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n                }", "                catch (Aas.Jsonization.Exception exception)\n                {\n                    stderr.WriteLine(\n                        $\"{fileInfo.FullName}: \" +\n                        $\"JSON parsing failed: {exception.Cause} at {exception.Path}\"\n                    );\n                    return 1;\n                }\n\n                if (env == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null instance\"\n                    );\n                }\n\n                env = (Aas.IEnvironment)enhancer.Wrap(env);\n", "                if (env == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null instance\"\n                    );\n                }\n\n                env = (Aas.IEnvironment)enhancer.Wrap(env);\n\n                foreach (var shell in env.OverAssetAdministrationShellsOrEmpty())\n                {\n                    var otherShell = shellRegistry.TryGet(shell.Id);", "                foreach (var shell in env.OverAssetAdministrationShellsOrEmpty())\n                {\n                    var otherShell = shellRegistry.TryGet(shell.Id);\n                    if (otherShell != null)\n                    {\n                        stderr.WriteLine(\n                            $\"{fileInfo.FullName}: \" +\n                            \"Conflict in IDs of asset administration shells; \" +\n                            $\"the shell with the ID {shell.Id} is also defined in \" +\n                            $\"{unwrapper.MustUnwrap(otherShell).Path}\"\n                        );\n                        return 1;\n                    }\n\n                    shellRegistry.Add(shell);\n                }\n", "                foreach (var submodel in env.OverSubmodelsOrEmpty())\n                {\n                    var otherSubmodel = submodelRegistry.TryGet(submodel.Id);\n                    if (otherSubmodel != null)\n                    {\n                        stderr.WriteLine(\n                            $\"{fileInfo.FullName}: \" +\n                            \"Conflict in IDs of submodels; \" +\n                            $\"the submodel with the ID {submodel.Id} \" +\n                            \"is also defined in \" +\n                            $\"{unwrapper.MustUnwrap(otherSubmodel).Path}\"\n                        );\n                        return 1;\n                    }\n\n                    submodelRegistry.Add(submodel);\n                }\n", "                foreach (var conceptDescription in env.OverConceptDescriptionsOrEmpty())\n                {\n                    var otherConceptDescription =\n                        conceptDescriptionRegistry.TryGet(conceptDescription.Id);\n\n                    if (otherConceptDescription != null)\n                    {\n                        stderr.WriteLine(\n                            $\"{fileInfo.FullName}: \" +\n                            \"Conflict in IDs of concept descriptions; \" +\n                            \"the concept description \" +\n                            $\"with the ID {conceptDescription.Id} \" +\n                            \"is also defined in \" +\n                            $\"{unwrapper.MustUnwrap(otherConceptDescription).Path}\"\n                        );\n                        return 1;\n                    }\n\n                    conceptDescriptionRegistry.Add(conceptDescription);\n                }\n            }\n\n            var merged = new Aas.Environment();\n", "            if (shellRegistry.Items.Count > 0)\n            {\n                merged.AssetAdministrationShells = shellRegistry.Items.ToList();\n            }\n\n            if (submodelRegistry.Items.Count > 0)\n            {\n                merged.Submodels = submodelRegistry.Items.ToList();\n            }\n\n            if (conceptDescriptionRegistry.Items.Count > 0)\n            {\n                merged.ConceptDescriptions = conceptDescriptionRegistry.Items.ToList();\n            }\n\n            var errorMessage = CommonOutputting.Jsonization.Serialize(\n                merged, output, stdout\n            );", "            if (conceptDescriptionRegistry.Items.Count > 0)\n            {\n                merged.ConceptDescriptions = conceptDescriptionRegistry.Items.ToList();\n            }\n\n            var errorMessage = CommonOutputting.Jsonization.Serialize(\n                merged, output, stdout\n            );\n            if (errorMessage != null)\n            {\n                stderr.WriteLine(errorMessage);\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Merge multiple AAS environments into one.\"\n                );\n\n            var environmentsOption = new System.CommandLine.Option<\n                List<string>\n            >(\n                name: \"--environments\",\n                description:\n                \"Paths to two or more AAS environments serialized to JSON to be merged\"\n            )\n            { IsRequired = true, Arity = System.CommandLine.ArgumentArity.OneOrMore };\n            rootCommand.AddOption(environmentsOption);\n\n            var outputOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--output\",\n                description:\n                \"Path to the merged environment; \" +\n                \"if '-', the output is written to STDOUT\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(outputOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPaths,\n                    output\n                ) =>\n                {\n                    System.IO.Stream? stdout = null;", "            if (errorMessage != null)\n            {\n                stderr.WriteLine(errorMessage);\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Merge multiple AAS environments into one.\"\n                );\n\n            var environmentsOption = new System.CommandLine.Option<\n                List<string>\n            >(\n                name: \"--environments\",\n                description:\n                \"Paths to two or more AAS environments serialized to JSON to be merged\"\n            )\n            { IsRequired = true, Arity = System.CommandLine.ArgumentArity.OneOrMore };\n            rootCommand.AddOption(environmentsOption);\n\n            var outputOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--output\",\n                description:\n                \"Path to the merged environment; \" +\n                \"if '-', the output is written to STDOUT\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(outputOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPaths,\n                    output\n                ) =>\n                {\n                    System.IO.Stream? stdout = null;", "                    if (output == \"-\")\n                    {\n                        stdout = System.Console.OpenStandardInput();\n                    }\n\n                    try\n                    {\n                        return System.Threading.Tasks.Task.FromResult(\n                            Execute(\n                                environmentPaths,\n                                output,\n                                stdout,\n                                System.Console.Error\n                            )\n                        );\n                    }\n                    finally\n                    {\n                        stdout?.Close();\n                    }\n                },\n                environmentsOption,\n                outputOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/Verify/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis; // can't alias\n\n\nnamespace Verify\n{\n    public static class Program\n    {\n        public static int Execute(\n            string environmentPath,\n            System.IO.TextWriter stderr\n        )\n        {\n            var fileInfo = new System.IO.FileInfo(environmentPath);", "        public static int Execute(\n            string environmentPath,\n            System.IO.TextWriter stderr\n        )\n        {\n            var fileInfo = new System.IO.FileInfo(environmentPath);\n            if (!fileInfo.Exists)\n            {\n                stderr.WriteLine($\"{fileInfo.FullName}: File does not exist\");\n                return 1;\n            }\n\n            System.Text.Json.Nodes.JsonNode? node;\n            try\n            {\n                using var file = fileInfo.OpenRead();\n                node = System.Text.Json.Nodes.JsonNode.Parse(\n                    System.IO.File.ReadAllBytes(environmentPath)\n                );\n            }", "            catch (System.Text.Json.JsonException exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Message}\"\n                );\n                return 1;\n            }\n\n            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.Environment? environment;\n            try\n            {\n                environment = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.Environment? environment;\n            try\n            {\n                environment = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            catch (Aas.Jsonization.Exception exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Cause} at {exception.Path}\"\n                );\n                return 1;\n            }\n\n            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n\n            var gotVerificationErrors = false;", "            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n\n            var gotVerificationErrors = false;\n            foreach (var error in Aas.Verification.Verify(environment))\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"{Aas.Reporting.GenerateJsonPath(error.PathSegments)}: \" +\n                    $\"{error.Cause}\"\n                );\n                gotVerificationErrors = true;\n            }\n", "            foreach (var error in Aas.Verification.Verify(environment))\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"{Aas.Reporting.GenerateJsonPath(error.PathSegments)}: \" +\n                    $\"{error.Cause}\"\n                );\n                gotVerificationErrors = true;\n            }\n\n            if (gotVerificationErrors)\n            {\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Verify that the AAS environment satisfies the meta-model \" +\n                    \"constraints.\\n\\n\" +\n                    \"Only constraints are checked that can be enforced without \" +\n                    \"external dependencies such as registry or language models.\"\n                );\n\n            var environmentOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--environment\",\n                description:\n                \"Path to the AAS environment serialized to JSON to be verified\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(environmentOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPath\n                ) => System.Threading.Tasks.Task.FromResult(\n                    Execute(\n                        environmentPath,\n                        System.Console.Error\n                    )\n                ),\n                environmentOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}", "            if (gotVerificationErrors)\n            {\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Verify that the AAS environment satisfies the meta-model \" +\n                    \"constraints.\\n\\n\" +\n                    \"Only constraints are checked that can be enforced without \" +\n                    \"external dependencies such as registry or language models.\"\n                );\n\n            var environmentOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--environment\",\n                description:\n                \"Path to the AAS environment serialized to JSON to be verified\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(environmentOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPath\n                ) => System.Threading.Tasks.Task.FromResult(\n                    Execute(\n                        environmentPath,\n                        System.Console.Error\n                    )\n                ),\n                environmentOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/Verify.Tests/TestAgainstTestData.cs", "chunked_list": ["using Encoding = System.Text.Encoding;\nusing Path = System.IO.Path;\nusing System.Linq; // can't alias\nusing NUnit.Framework; // can't alias\n\nnamespace Verify.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"Verify\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"model.json\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"Verify\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"model.json\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "            foreach (var environmentPth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(environmentPth);\n\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n\n                using var stderr = new System.IO.StringWriter();\n                Program.Execute(\n                    environmentPth,\n                    stderr\n                );\n\n                string stderrStr = stderr.ToString();\n                stderrStr = stderrStr\n                    .Replace(\n                        new System.IO.FileInfo(\n                            environmentPth\n                        ).FullName,\n                        \"<model.json>\"\n                    )\n                    .Replace(\"\\r\", \"\");\n", "                if (recordMode)\n                {\n                    System.IO.File.WriteAllText(\n                        stderrPth, stderrStr, Encoding.UTF8\n                    );\n                }\n                else\n                {\n                    var goldenStderrStr = System.IO.File.ReadAllText(\n                        stderrPth, Encoding.UTF8\n                    ).Replace(\"\\r\", \"\");\n\n                    Assert.AreEqual(\n                        goldenStderrStr, stderrStr,\n                        $\"Content mismatch against {stderrPth}\"\n                    );\n                }\n            }\n        }\n    }\n}"]}
{"filename": "src/CsvParsing.Tests/TestCsvDictionaryReader.cs", "chunked_list": ["using System.Collections.Generic; // can't alias\nusing NUnit.Framework; // can't alias\n\nnamespace CsvParsing.Tests\n{\n    public class TestCsvDictionaryReader\n    {\n        private static (List<IReadOnlyDictionary<string, string>>?, string?) ReadTable(\n            CsvDictionaryReader csv\n        )\n        {\n            var table = new List<IReadOnlyDictionary<string, string>>();\n\n            var error = csv.ReadHeader();", "            if (error != null)\n            {\n                return (null, error);\n            }\n\n            while (true)\n            {\n                error = csv.ReadRow();\n                if (error != null)\n                {\n                    return (null, error);\n                }\n", "                if (error != null)\n                {\n                    return (null, error);\n                }\n\n                if (csv.Row == null)\n                {\n                    break;\n                }\n\n                table.Add(csv.Row);\n            }\n\n            return (table, null);\n        }\n", "        private static void AssertTablesEqual(\n            IReadOnlyList<IReadOnlyDictionary<string, string>> expected,\n            IReadOnlyList<IReadOnlyDictionary<string, string>>? got)\n        {\n            if (got == null)\n            {\n                throw new AssertionException(\n                    \"Expected a table, but got null.\"\n                );\n            }\n", "            if (expected.Count != got.Count)\n            {\n                throw new AssertionException(\n                    $\"Expected {expected.Count} row(s), but got {got.Count} row(s).\"\n                );\n            }\n\n            for (int i = 0; i < expected.Count; i++)\n            {\n                var expectedRow = expected[i];\n                var gotRow = got[i];\n\n                var expectedKeys = new List<string>(expectedRow.Keys);\n                expectedKeys.Sort();\n                var expectedKeysJoined = string.Join(\", \", expectedKeys);\n\n                var gotKeys = new List<string>(gotRow.Keys);\n                gotKeys.Sort();\n                var gotKeysJoined = string.Join(\", \", gotKeys);\n", "                if (gotKeys.Count != expectedKeys.Count)\n                {\n                    throw new AssertionException(\n                        $\"Expected keys {expectedKeysJoined}, \" +\n                        $\"but got {gotKeysJoined}\"\n                    );\n                }\n\n                for (int j = 0; j < expectedKeys.Count; j++)\n                {\n                    if (expectedKeys[j] != gotKeys[j])\n                    {\n                        throw new AssertionException(\n                            $\"Expected keys {expectedKeysJoined}, \" +\n                            $\"but got {gotKeysJoined}\"\n                        );\n                    }\n                }\n", "                for (int j = 0; j < expectedKeys.Count; j++)\n                {\n                    if (expectedKeys[j] != gotKeys[j])\n                    {\n                        throw new AssertionException(\n                            $\"Expected keys {expectedKeysJoined}, \" +\n                            $\"but got {gotKeysJoined}\"\n                        );\n                    }\n                }\n", "                foreach (var key in expectedKeys)\n                {\n                    if (gotRow[key] != expectedRow[key])\n                    {\n                        throw new AssertionException(\n                            $\"Excepted cell in column {key} \" +\n                            $\"to be {expectedRow[key]}, but got {gotRow[key]}\"\n                        );\n                    }\n                }\n            }\n        }\n\n        [Test]", "        public void Test_empty()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\"\n            );\n\n            var (_, error) = ReadTable(\n                new CsvDictionaryReader(\n                    new CsvReader(stream)\n                )\n            );\n", "            if (error == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null error\"\n                );\n            }\n\n            Assert.AreEqual(\n                \"Expected a header row, but got end-of-stream\",\n                error\n            );\n        }\n\n        [Test]", "        public void Test_more_header_columns_than_cells_in_row()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something,else\\nsome-content\"\n            );\n\n            var (_, error) = ReadTable(\n                new CsvDictionaryReader(\n                    new CsvReader(stream)\n                )\n            );\n", "            if (error == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null error\"\n                );\n            }\n\n            Assert.AreEqual(\n                \"Expected 2 cell(s), but got 1 cell(s)\",\n                error\n            );\n        }\n\n        [Test]", "        public void Test_ok()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something,else\\nsome-content,also-expected\\n\"\n            );\n\n            var (table, error) = ReadTable(\n                new CsvDictionaryReader(\n                    new CsvReader(stream)\n                )\n            );\n", "            if (error != null)\n            {\n                throw new System.InvalidOperationException(\n                    $\"Unexpected error: {error}\"\n                );\n            }\n\n            AssertTablesEqual(\n                new List<IReadOnlyDictionary<string, string>>()\n                {\n                    new Dictionary<string, string>()\n                    {\n                        {\"something\", \"some-content\"},\n                        {\"else\", \"also-expected\"}\n                    }\n                },\n                table\n            );\n        }\n    }\n}\n"]}
{"filename": "src/CsvParsing.Tests/TestCsvReader.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;  // can't alias\nusing NUnit.Framework; // can't alias\n\nnamespace CsvParsing.Tests\n{\n    public class TestCsvReader\n    {\n        private static (List<List<string>>?, string?) ReadTable(CsvReader csv)\n        {\n            var table = new List<List<string>>();\n", "            while (true)\n            {\n                var (row, error) = csv.ReadRow(0);\n\n                if (error != null)\n                {\n                    return (null, error);\n                }\n\n                if (row == null)\n                {\n                    return (table, null);\n                }\n\n                table.Add(row);\n            }\n        }\n", "                if (row == null)\n                {\n                    return (table, null);\n                }\n\n                table.Add(row);\n            }\n        }\n\n        private static void AssertTablesEqual(List<List<string>> expected, List<List<string>>? got)\n        {", "        private static void AssertTablesEqual(List<List<string>> expected, List<List<string>>? got)\n        {\n            if (got == null)\n            {\n                throw new AssertionException(\n                    \"Expected a table, but got null.\"\n                );\n            }\n\n            if (expected.Count != got.Count)\n            {\n                throw new AssertionException(\n                    $\"Expected {expected.Count} row(s), but got {got.Count} row(s).\"\n                );\n            }\n", "            if (expected.Count != got.Count)\n            {\n                throw new AssertionException(\n                    $\"Expected {expected.Count} row(s), but got {got.Count} row(s).\"\n                );\n            }\n\n            for (int i = 0; i < expected.Count; i++)\n            {\n                if (expected[i].Count != got[i].Count)\n                {\n                    throw new AssertionException(\n                        $\"Expected {expected[i].Count} cell(s) in row {i} (starting from 0), \" +\n                        $\"but got {got[i].Count} cell(s).\"\n                    );\n                }\n", "                if (expected[i].Count != got[i].Count)\n                {\n                    throw new AssertionException(\n                        $\"Expected {expected[i].Count} cell(s) in row {i} (starting from 0), \" +\n                        $\"but got {got[i].Count} cell(s).\"\n                    );\n                }\n\n                for (var j = 0; j < expected[i].Count; j++)\n                {\n                    if (expected[i][j] != got[i][j])\n                    {\n                        throw new AssertionException(\n                            $\"Expected the cell to be {expected[i][j]}, \" +\n                            $\"but got {got[i][j]}.\"\n                        );\n                    }\n                }\n            }\n        }\n\n        [Test]", "                for (var j = 0; j < expected[i].Count; j++)\n                {\n                    if (expected[i][j] != got[i][j])\n                    {\n                        throw new AssertionException(\n                            $\"Expected the cell to be {expected[i][j]}, \" +\n                            $\"but got {got[i][j]}.\"\n                        );\n                    }\n                }\n            }\n        }\n\n        [Test]", "        public void Test_empty()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(new List<List<string>>(), table);\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(new List<List<string>>(), table);\n        }\n\n        [Test]\n        public void TestSingleUnquotedCell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n", "        public void TestSingleUnquotedCell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void TestSingleQuotedCell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\\"some\\\"\\\"thing\\\"\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"some\\\"thing\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"some\\\"thing\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_unquoted_cell_followed_by_unquoted_cell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something,else\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_unquoted_cell_followed_by_quoted_cell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something,\\\"else\\\"\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_quoted_cell_followed_by_unquoted_cell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\\"something\\\",else\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_quoted_cell_followed_by_quoted_cell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\\"something\\\",\\\"else\\\"\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"something\", \"else\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_return_carrier_newline()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\r\\n\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            // The trailing new line is ignored, so we end up with a single row.\n            AssertTablesEqual(\n                new List<List<string>>() { new() },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            // The trailing new line is ignored, so we end up with a single row.\n            AssertTablesEqual(\n                new List<List<string>>() { new() },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_newline_newline()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\n\\n\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            // The trailing new line is ignored, so we end up with two rows instead of three.\n            AssertTablesEqual(\n                new List<List<string>>() { new(), new() },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            // The trailing new line is ignored, so we end up with two rows instead of three.\n            AssertTablesEqual(\n                new List<List<string>>() { new(), new() },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_open_quoted_cell_ending_in_non_double_quote()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\\"some\"\n            );\n\n            var (_, error) = ReadTable(new CsvReader(stream));\n\n            if (error == null)\n            {\n                throw new AssertionException(\"Unexpected null error\");\n            }\n\n            Assert.AreEqual(\n                \"Expected to find the closing double-quote ('\\\"'), but got an end-of-stream\",\n                error\n            );\n        }\n\n        [Test]", "            if (error == null)\n            {\n                throw new AssertionException(\"Unexpected null error\");\n            }\n\n            Assert.AreEqual(\n                \"Expected to find the closing double-quote ('\\\"'), but got an end-of-stream\",\n                error\n            );\n        }\n\n        [Test]", "        public void Test_open_quoted_cell_ending_in_double_quote()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\\"some\\\"\\\"\"\n            );\n\n            var (_, error) = ReadTable(new CsvReader(stream));\n\n            if (error == null)\n            {\n                throw new AssertionException(\"Unexpected null error\");\n            }\n\n            Assert.AreEqual(\n                \"Expected to find the closing double-quote ('\\\"'), but got an end-of-stream\",\n                error\n            );\n        }\n\n        [Test]", "            if (error == null)\n            {\n                throw new AssertionException(\"Unexpected null error\");\n            }\n\n            Assert.AreEqual(\n                \"Expected to find the closing double-quote ('\\\"'), but got an end-of-stream\",\n                error\n            );\n        }\n\n        [Test]", "        public void Test_new_line_in_quoted_cell()\n        {\n            using var stream = new System.IO.StringReader(\n                \"\\\"some\\nthing\\\"\\n\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            // The trailing new line is ignored, so we end up with a single row.\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"some\\nthing\" } },\n                table\n            );\n        }\n\n        [Test]", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            // The trailing new line is ignored, so we end up with a single row.\n            AssertTablesEqual(\n                new List<List<string>>() { new() { \"some\\nthing\" } },\n                table\n            );\n        }\n\n        [Test]", "        public void Test_more_header_columns_than_cells_in_row()\n        {\n            using var stream = new System.IO.StringReader(\n                \"something,else\\nsome-content\"\n            );\n\n            var (table, error) = ReadTable(new CsvReader(stream));\n\n            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>()\n                {\n                    new(){\"something\", \"else\"},\n                    new(){\"some-content\"}\n                },\n                table\n            );\n        }\n    }\n}", "            if (error != null)\n            {\n                throw new AssertionException($\"Unexpected error: {error}\");\n            }\n\n            AssertTablesEqual(\n                new List<List<string>>()\n                {\n                    new(){\"something\", \"else\"},\n                    new(){\"some-content\"}\n                },\n                table\n            );\n        }\n    }\n}"]}
{"filename": "src/MergeEnvironments.Tests/TestsAgainstTestData.cs", "chunked_list": ["using Encoding = System.Text.Encoding;\nusing Path = System.IO.Path;\n\nusing System.Collections.Generic;  // can't alias\nusing System.Linq;  // can't alias\n\nusing NUnit.Framework;  // can't alias\n\nnamespace MergeEnvironments.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]", "namespace MergeEnvironments.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"MergeEnvironments\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"model*.json\",\n                System.IO.SearchOption.AllDirectories\n            );\n\n            var caseDirSet = new HashSet<string>();", "            foreach (var pth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(pth);\n                if (caseDir == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null caseDir\"\n                    );\n                }\n\n                caseDirSet.Add(caseDir);\n            }\n\n            var caseDirs = caseDirSet.ToList();\n            caseDirs.Sort();\n", "            foreach (var caseDir in caseDirs)\n            {\n                var environmentPaths = System.IO.Directory.GetFiles(\n                    caseDir,\n                    \"model*.json\",\n                    System.IO.SearchOption.AllDirectories\n                ).ToList();\n                environmentPaths.Sort();\n\n                using var stdout = new System.IO.MemoryStream();\n                using var stderr = new System.IO.StringWriter();\n                Program.Execute(\n                    environmentPaths,\n                    \"-\",\n                    stdout,\n                    stderr\n                );\n\n                string stderrStr = stderr.ToString();\n                stderrStr = stderrStr.Replace(\"\\r\", \"\");\n\n                stdout.Flush();\n                string stdoutStr = Encoding.UTF8.GetString(\n                        stdout.ToArray()\n                    )\n                    .Replace(\"\\r\", \"\");\n\n", "                foreach (var environment in environmentPaths)\n                {\n                    var fileInfo = new System.IO.FileInfo(environment);\n                    stderrStr = stderrStr.Replace(\n                        fileInfo.FullName,\n                        $\"<{fileInfo.Name}>\"\n                    );\n                }\n\n                var stdoutPth = Path.Join(caseDir, \"output.json\");\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n", "                if (recordMode)\n                {\n                    System.IO.File.WriteAllText(\n                        stdoutPth, stdoutStr, Encoding.UTF8\n                    );\n                    System.IO.File.WriteAllText(\n                        stderrPth, stderrStr, Encoding.UTF8\n                    );\n                }\n                else\n                {\n                    var goldenStdout = System.IO.File.ReadAllText(stdoutPth)\n                        .Replace(\"\\r\", \"\");\n                    var goldenStderrStr = System.IO.File.ReadAllText(stderrPth)\n                        .Replace(\"\\r\", \"\");\n\n                    Assert.AreEqual(\n                        goldenStdout, stdoutStr,\n                        $\"Content mismatch against {stdoutPth}\"\n                    );\n                    Assert.AreEqual(\n                        goldenStderrStr, stderrStr,\n                        $\"Content mismatch against {stderrPth}\"\n                    );\n                }\n            }\n        }\n    }\n}"]}
{"filename": "src/EnvironmentFromCsvConceptDescriptions.Tests/TestAgainstTestData.cs", "chunked_list": ["using Encoding = System.Text.Encoding;\nusing Path = System.IO.Path;\nusing System.Collections.Generic;  // can't alias\nusing System.Linq;  // can't alias\n\nusing NUnit.Framework;  // can't alias\n\nnamespace EnvironmentFromCsvConceptDescriptions.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]", "{\n    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"EnvironmentFromCsvConceptDescriptions\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"input.csv\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "            foreach (var inputPth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(inputPth);\n\n                var stdoutPth = Path.Join(caseDir, \"output.json\");\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n\n                using var stdout = new System.IO.MemoryStream();\n                using var stderr = new System.IO.StringWriter();\n                Program.Execute(\n                    new List<string>() { inputPth },\n                    \"-\",\n                    stdout,\n                    stderr\n                );\n\n                string stderrStr = stderr.ToString();\n                stderrStr = stderrStr\n                    .Replace(\n                        new System.IO.FileInfo(\n                            inputPth\n                        ).FullName,\n                        \"<input.csv>\"\n                    )\n                    .Replace(\"\\r\", \"\");\n\n                stdout.Flush();\n                string stdoutStr = Encoding.UTF8.GetString(\n                        stdout.ToArray()\n                    )\n                    .Replace(\"\\r\", \"\");\n", "                if (recordMode)\n                {\n                    System.IO.File.WriteAllText(\n                        stdoutPth, stdoutStr, Encoding.UTF8\n                    );\n                    System.IO.File.WriteAllText(\n                        stderrPth, stderrStr, Encoding.UTF8\n                    );\n                }\n                else\n                {\n                    var goldenStdout = System.IO.File.ReadAllText(stdoutPth)\n                        .Replace(\"\\r\", \"\");\n                    var goldenStderrStr = System.IO.File.ReadAllText(stderrPth)\n                        .Replace(\"\\r\", \"\");\n\n                    Assert.AreEqual(\n                        goldenStdout, stdoutStr,\n                        $\"Content mismatch against {stdoutPth}\"\n                    );\n                    Assert.AreEqual(\n                        goldenStderrStr, stderrStr,\n                        $\"Content mismatch against {stderrPth}\"\n                    );\n                }\n            }\n        }\n    }\n}"]}
{"filename": "src/SplitEnvironmentForStaticHosting/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\n// ReSharper disable RedundantUsingDirective\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis;  // can't alias\nusing System.Linq; // can't alias\n\nnamespace SplitEnvironmentForStaticHosting\n{\n    public static class Program\n    {\n        static readonly char[] Base64Padding = { '=' };\n", "{\n    public static class Program\n    {\n        static readonly char[] Base64Padding = { '=' };\n\n        private static string? OutputRegistry(\n            string outputDir,\n            Registering.TypedRegistry<Aas.IIdentifiable> registry\n        )\n        {\n            System.IO.Directory.CreateDirectory(outputDir);\n\n            var indexArray = new System.Text.Json.Nodes.JsonArray(\n                registry.Items.Select(\n                        identifiable =>\n                        {\n                            var value =\n                                System.Text.Json.Nodes.JsonValue\n                                    .Create(identifiable.Id);\n", "                            if (value == null)\n                            {\n                                throw new System.InvalidOperationException(\n                                    \"Unexpected null value\"\n                                );\n                            }\n\n                            return value;\n                        })\n                    .ToArray<System.Text.Json.Nodes.JsonNode?>()\n            );\n", "            if (indexArray == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null indexArray\"\n                );\n            }\n\n            var writerOptions = new System.Text.Json.JsonWriterOptions\n            {\n                Indented = true\n            };\n\n            var indexArrayPath = System.IO.Path.Join(outputDir, \"index.json\");\n\n            try\n            {\n                using var outputStream = System.IO.File.OpenWrite(indexArrayPath);\n                using var writer =\n                    new System.Text.Json.Utf8JsonWriter(\n                        outputStream,\n                        writerOptions\n                    );\n                indexArray.WriteTo(writer);\n            }", "            catch (System.Exception exception)\n            {\n                return $\"Failed to write to {indexArrayPath}: {exception.Message}\";\n            }\n\n            foreach (var identifiable in registry.Items)\n            {\n                var idBytes = System.Text.Encoding.UTF8.GetBytes(identifiable.Id);\n                var idBase64 = System.Convert.ToBase64String(idBytes);\n\n                // NOTE (mristin, 2023-04-05):\n                // We use here the URL-safe Base64 encoding.\n                //\n                // See: https://stackoverflow.com/questions/26353710/how-to-achieve-base64-url-safe-encoding-in-c\n                idBase64 = idBase64\n                    .TrimEnd(Base64Padding)\n                    .Replace('+', '-')\n                    .Replace('/', '_');\n\n                var pth = System.IO.Path.Join(outputDir, idBase64);\n\n                System.Text.Json.Nodes.JsonObject? jsonable;\n\n                try\n                {\n                    jsonable = Aas.Jsonization.Serialize.ToJsonObject(identifiable);\n                }", "                catch (System.Exception exception)\n                {\n                    return\n                        $\"Failed to serialize {identifiable.GetType().Name} \" +\n                        $\"with ID {identifiable.Id} to JSON: {exception.Message}\";\n                }\n\n                if (jsonable == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null jsonable\"\n                    );\n                }\n\n                try\n                {\n                    using var outputStream = System.IO.File.OpenWrite(pth);\n                    using var writer =\n                        new System.Text.Json.Utf8JsonWriter(\n                            outputStream,\n                            writerOptions\n                        );\n                    jsonable.WriteTo(writer);\n                }", "                catch (System.Exception exception)\n                {\n                    return $\"Failed to write to {indexArrayPath}: {exception.Message}\";\n                }\n            }\n\n            return null;\n        }\n\n        public static int Execute(\n            string environmentPath,\n            string outputDir,\n            System.IO.TextWriter stderr\n        )\n        {\n            var shellRegistry =\n                new Registering.TypedRegistry<Aas.IIdentifiable>();\n\n            var submodelRegistry = new Registering.TypedRegistry<Aas.IIdentifiable>();\n\n            var conceptDescriptionRegistry =\n                new Registering.TypedRegistry<Aas.IIdentifiable>();\n\n            var fileInfo = new System.IO.FileInfo(environmentPath);\n", "        public static int Execute(\n            string environmentPath,\n            string outputDir,\n            System.IO.TextWriter stderr\n        )\n        {\n            var shellRegistry =\n                new Registering.TypedRegistry<Aas.IIdentifiable>();\n\n            var submodelRegistry = new Registering.TypedRegistry<Aas.IIdentifiable>();\n\n            var conceptDescriptionRegistry =\n                new Registering.TypedRegistry<Aas.IIdentifiable>();\n\n            var fileInfo = new System.IO.FileInfo(environmentPath);\n", "            if (!fileInfo.Exists)\n            {\n                stderr.WriteLine($\"{fileInfo.FullName}: File does not exist\");\n                return 1;\n            }\n\n            System.Text.Json.Nodes.JsonNode? node;\n            try\n            {\n                using var file = fileInfo.OpenRead();\n                node = System.Text.Json.Nodes.JsonNode.Parse(\n                    System.IO.File.ReadAllBytes(environmentPath)\n                );\n            }", "            catch (System.Text.Json.JsonException exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Message}\"\n                );\n                return 1;\n            }\n\n            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.IEnvironment? env;\n            try\n            {\n                env = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.IEnvironment? env;\n            try\n            {\n                env = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            catch (Aas.Jsonization.Exception exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Cause} at {exception.Path}\"\n                );\n                return 1;\n            }\n\n            if (env == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n", "            if (env == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n\n            foreach (var shell in env.OverAssetAdministrationShellsOrEmpty())\n            {\n                var otherShell = shellRegistry.TryGet(shell.Id);\n                if (otherShell != null)\n                {\n                    stderr.WriteLine(\n                        $\"{fileInfo.FullName}: \" +\n                        \"Conflict in IDs of asset administration shells; \" +\n                        $\"the shell with the ID {shell.Id} is defined \" +\n                        \"more than once\"\n                    );\n                    return 1;\n                }\n\n                shellRegistry.Add(shell);\n            }\n", "                if (otherShell != null)\n                {\n                    stderr.WriteLine(\n                        $\"{fileInfo.FullName}: \" +\n                        \"Conflict in IDs of asset administration shells; \" +\n                        $\"the shell with the ID {shell.Id} is defined \" +\n                        \"more than once\"\n                    );\n                    return 1;\n                }\n\n                shellRegistry.Add(shell);\n            }\n", "            foreach (var submodel in env.OverSubmodelsOrEmpty())\n            {\n                var otherSubmodel = submodelRegistry.TryGet(submodel.Id);\n                if (otherSubmodel != null)\n                {\n                    stderr.WriteLine(\n                        $\"{fileInfo.FullName}: \" +\n                        \"Conflict in IDs of submodels; \" +\n                        $\"the submodel with the ID {submodel.Id} \" +\n                        \"is defined more than once.\"\n                    );\n                    return 1;\n                }\n\n                submodelRegistry.Add(submodel);\n            }\n", "            foreach (var conceptDescription in env.OverConceptDescriptionsOrEmpty())\n            {\n                var otherConceptDescription =\n                    conceptDescriptionRegistry.TryGet(conceptDescription.Id);\n\n                if (otherConceptDescription != null)\n                {\n                    stderr.WriteLine(\n                        $\"{fileInfo.FullName}: \" +\n                        \"Conflict in IDs of concept descriptions; \" +\n                        \"the concept description \" +\n                        $\"with the ID {conceptDescription.Id} \" +\n                        \"is defined more than once.\"\n                    );\n                    return 1;\n                }\n\n                conceptDescriptionRegistry.Add(conceptDescription);\n            }\n\n            var targetDir = System.IO.Path.Join(outputDir, \"shells\");\n            var error = OutputRegistry(\n                targetDir,\n                shellRegistry\n            );", "            if (error != null)\n            {\n                stderr.WriteLine(\n                    $\"Error when outputting asset administration shells to {targetDir}: \" +\n                    $\"{error}\"\n                );\n                return 1;\n            }\n\n            targetDir = System.IO.Path.Join(outputDir, \"submodels\");\n            error = OutputRegistry(\n                targetDir,\n                submodelRegistry\n            );", "            if (error != null)\n            {\n                stderr.WriteLine(\n                    $\"Error when outputting submodels to {targetDir}: \" +\n                    $\"{error}\"\n                );\n                return 1;\n            }\n\n            targetDir = System.IO.Path.Join(outputDir, \"conceptDescriptions\");\n            error = OutputRegistry(\n                targetDir,\n                conceptDescriptionRegistry\n            );", "            if (error != null)\n            {\n                stderr.WriteLine(\n                    $\"Error when outputting concept descriptions to {targetDir}: \" +\n                    $\"{error}\"\n                );\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Split an AAS environment into multiple files \" +\n                    \"so that they can be readily served as static files.\"\n                );\n\n            var environmentOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--environments\",\n                description:\n                \"Path to the AAS environment serialized as a JSON file \" +\n                \"to be split into different files for static hosting\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(environmentOption);\n\n            var outputDirOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--output-dir\",\n                description:\n                \"Path to the output directory\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(outputDirOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPaths,\n                    outputDir\n                ) => System.Threading.Tasks.Task.FromResult(\n                    Execute(\n                        environmentPaths,\n                        outputDir,\n                        System.Console.Error\n                    )\n                ),\n                environmentOption,\n                outputDirOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/TreeShakeConceptDescriptions.Tests/TestAgainstTestData.cs", "chunked_list": ["using Encoding = System.Text.Encoding;\nusing Path = System.IO.Path;\nusing System.Linq; // can't alias\nusing NUnit.Framework; // can't alias\n\nnamespace TreeShakeConceptDescriptions.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"TreeShakeConceptDescriptions\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"model.json\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"TreeShakeConceptDescriptions\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"model.json\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "            foreach (var inputPth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(inputPth);\n\n                var stdoutPth = Path.Join(caseDir, \"output.json\");\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n\n                using var stdout = new System.IO.MemoryStream();\n                using var stderr = new System.IO.StringWriter();\n                Program.Execute(\n                    inputPth,\n                    \"-\",\n                    stdout,\n                    stderr\n                );\n\n                string stderrStr = stderr.ToString();\n                stderrStr = stderrStr\n                    .Replace(\n                        new System.IO.FileInfo(\n                            inputPth\n                        ).FullName,\n                        \"<model.json>\"\n                    )\n                    .Replace(\"\\r\", \"\");\n\n                stdout.Flush();\n                string stdoutStr = Encoding.UTF8.GetString(\n                        stdout.ToArray()\n                    )\n                    .Replace(\"\\r\", \"\");\n", "                if (recordMode)\n                {\n                    System.IO.File.WriteAllText(\n                        stdoutPth, stdoutStr, Encoding.UTF8\n                    );\n                    System.IO.File.WriteAllText(\n                        stderrPth, stderrStr, Encoding.UTF8\n                    );\n                }\n                else\n                {\n                    var goldenStdout = System.IO.File.ReadAllText(\n                            stdoutPth, Encoding.UTF8\n                        )\n                        .Replace(\"\\r\", \"\");\n                    var goldenStderrStr = System.IO.File.ReadAllText(\n                            stderrPth, Encoding.UTF8\n                        )\n                        .Replace(\"\\r\", \"\");\n\n                    Assert.AreEqual(\n                        goldenStdout, stdoutStr,\n                        $\"Content mismatch against {stdoutPth}\"\n                    );\n                    Assert.AreEqual(\n                        goldenStderrStr, stderrStr,\n                        $\"Content mismatch against {stderrPth}\"\n                    );\n                }\n            }\n        }\n    }\n}"]}
{"filename": "src/CsvParsing/Parsing.cs", "chunked_list": ["\ufeff// ReSharper disable once RedundantUsingDirective\nusing System.Collections.Generic;  // can't alias\n\nnamespace CsvParsing\n{\n    public static class Parsing\n    {\n        public static List<string>? CheckHeader(\n            IReadOnlyList<string> expectedHeader,\n            IReadOnlyList<string> gotHeader\n        )\n        {", "            if (expectedHeader.Count != gotHeader.Count)\n            {\n                var expectedHeaderJoined = string.Join(\n                    \", \", expectedHeader\n                );\n\n                var gotHeaderJoined = string.Join(\", \", gotHeader);\n\n                return new List<string>()\n                {\n                    \"The expected and obtained header do not match.\\n\" +\n                    $\"Expected the header {expectedHeaderJoined},\\n\" +\n                    $\"but got:            {gotHeaderJoined}\"\n                };\n            }\n\n            var errors = new List<string>();\n", "            for (int i = 0; i < expectedHeader.Count; i++)\n            {\n                if (expectedHeader[i] != gotHeader[i])\n                {\n                    errors.Add(\n                        $\"Expected the column {i + 1} \" +\n                        $\"to have the header {expectedHeader[i]}, \" +\n                        $\"but got {gotHeader[i]}\"\n                    );\n                }\n            }\n", "            if (errors.Count == 0)\n            {\n                return null;\n            }\n\n            return errors;\n        }\n    }\n}"]}
{"filename": "src/CsvParsing/CsvDictionaryReader.cs", "chunked_list": ["// ReSharper disable once RedundantUsingDirective\nusing System.Collections.Generic;  // can't alias\n\nnamespace CsvParsing\n{\n    public class CsvDictionaryReader\n    {\n        private readonly CsvReader _reader;\n        private List<string>? _header;\n        private Dictionary<string, string>? _dictionary;\n\n\n        public CsvDictionaryReader(CsvReader reader)\n        {\n            _reader = reader;\n        }\n\n        /**\n         * <summary>Read the header from the reader.</summary>\n         * <returns>Error, if any.</returns>\n         */\n        public string? ReadHeader()\n        {", "            if (_header != null)\n            {\n                throw new System.InvalidOperationException(\n                    \"The header has been already read\"\n                );\n            }\n\n            var (row, error) = _reader.ReadRow(10);\n\n            if (error != null)\n            {\n                return error;\n            }\n", "            if (error != null)\n            {\n                return error;\n            }\n\n            if (row == null)\n            {\n                return \"Expected a header row, but got end-of-stream\";\n            }\n\n            _header = row;\n            return null;\n        }\n\n        public IReadOnlyList<string> Header\n        {\n            get\n            {", "                if (_header == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null header; have you read it before?\"\n                    );\n                }\n\n                return _header;\n            }\n        }\n\n        /**\n         * <summary>Read a single row of the table, after the header.</summary>\n         * <remarks>Use <see cref=\"Row\" /> to access the read row.</remarks>\n         * <returns>Error, if any.</returns>\n         */\n        public string? ReadRow()\n        {", "            if (_header == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"The header has not been read yet\"\n                );\n            }\n\n            var (row, error) = _reader.ReadRow(_header.Count);\n\n            if (error != null)\n            {\n                return error;\n            }\n", "            if (error != null)\n            {\n                return error;\n            }\n\n            if (row == null)\n            {\n                _dictionary = null;\n                return null;\n            }\n", "            if (row.Count != _header.Count)\n            {\n                return $\"Expected {_header.Count} cell(s), but got {row.Count} cell(s)\";\n            }\n\n            _dictionary ??= new Dictionary<string, string>();\n\n            for (int i = 0; i < _header.Count; i++)\n            {\n                _dictionary[_header[i]] = row[i];\n            }\n\n            return null;\n        }\n\n        /**\n         * <summary>Get the current row.</summary>\n         * <returns>The row, or null if reached the end-of-stream.</returns>\n         */\n        public IReadOnlyDictionary<string, string>? Row => _dictionary;\n    }\n}"]}
{"filename": "src/CsvParsing/CsvReader.cs", "chunked_list": ["\ufeff// ReSharper disable once RedundantUsingDirective\nusing System.Collections.Generic;  // can't alias\n\nnamespace CsvParsing\n{\n    public class CsvReader\n    {\n        private readonly TextReaderWhichIgnoresReturnCarrier _reader;\n\n        public CsvReader(System.IO.TextReader reader)\n        {\n            _reader = new TextReaderWhichIgnoresReturnCarrier(reader);\n        }\n\n        private (string?, string?) ReadQuotedCell()\n        {\n            // Pre-condition", "            if (_reader.Peek() != '\"')\n            {\n                throw new System.InvalidOperationException(\n                    $\"Expected to peek a double-quote, but got: {_reader.Peek()}\"\n                );\n            }\n\n            _reader.Read();\n\n            int? current = _reader.Peek();\n            _reader.Read();\n            int? next = _reader.Peek();\n\n            var builder = new System.Text.StringBuilder();\n", "            while (true)\n            {\n                if (current == -1)\n                {\n                    return (\n                        null,\n                        \"Expected to find the closing double-quote ('\\\"'), \" +\n                        \"but got an end-of-stream\"\n                    );\n                }\n", "                if (current == '\"' && next == '\"')\n                {\n                    builder.Append('\"');\n\n                    _reader.Read();\n                    current = _reader.Peek();\n                    _reader.Read();\n                    next = _reader.Peek();\n                }\n                else if (current == '\"' && next != '\"')\n                {\n                    return (builder.ToString(), null);\n                }\n                else\n                {\n                    builder.Append((char)current);\n\n                    _reader.Read();\n                    current = next;\n                    next = _reader.Peek();\n                }\n            }\n        }\n", "                else if (current == '\"' && next != '\"')\n                {\n                    return (builder.ToString(), null);\n                }\n                else\n                {\n                    builder.Append((char)current);\n\n                    _reader.Read();\n                    current = next;\n                    next = _reader.Peek();\n                }\n            }\n        }\n", "        private string ReadUnquotedCell()\n        {\n            // Pre-condition\n            if (_reader.Peek() is -1 or ',' or '\\n')\n            {\n                throw new System.InvalidOperationException(\n                    $\"Expected the cell to start with a valid character, but got: {_reader.Peek()}; \" +\n                    \"the peek has not been handled correctly before.\"\n                );\n            }\n\n            var builder = new System.Text.StringBuilder();\n\n            int? lookahead = _reader.Peek();", "            while (lookahead is not (-1 or ',' or '\\n'))\n            {\n                builder.Append((char)lookahead);\n\n                _reader.Read();\n                lookahead = _reader.Peek();\n            }\n\n            return builder.ToString();\n        }\n\n        private (string?, string?) ReadCell()\n        {\n            var lookahead = _reader.Peek();", "            if (lookahead is -1 or ',' or '\\n')\n            {\n                return (\"\", null);\n            }\n\n            if (lookahead == '\"')\n            {\n                return ReadQuotedCell();\n            }\n\n            return (ReadUnquotedCell(), null);\n        }\n\n\n\n        public (List<string>?, string?) ReadRow(int expectedCells)\n        {", "            if (_reader.Peek() == -1)\n            {\n                return (null, null);\n            }\n\n            if (_reader.Peek() == '\\n')\n            {\n                _reader.Read();\n                return (new List<string>(), null);\n            }\n\n            var row = new List<string>(expectedCells);\n", "            while (true)\n            {\n                var (cell, error) = ReadCell();\n                if (error != null)\n                {\n                    return (null, error);\n                }\n\n                row.Add(\n                    cell ?? throw new System.InvalidOperationException(\n                        \"Unexpected cell null\"\n                    )\n                );\n\n                var lookahead = _reader.Peek();", "                if (lookahead == -1)\n                {\n                    return (row, null);\n                }\n\n                if (lookahead == '\\n')\n                {\n                    _reader.Read();\n                    return (row, null);\n                }\n", "                if (lookahead == ',')\n                {\n                    _reader.Read();\n                    continue;\n                }\n\n                return (\n                    null,\n                    \"Expected either a new line, a comma or an end-of-stream, \" +\n                    $\"but got: {(char)lookahead} (character code: {lookahead})\"\n                );\n            }\n        }\n    }\n}"]}
{"filename": "src/CsvParsing/TextReaderWhichIgnoresReturnCarrier.cs", "chunked_list": ["\ufeffnamespace CsvParsing\n{\n    internal class TextReaderWhichIgnoresReturnCarrier : System.IO.TextReader\n    {\n        private readonly System.IO.TextReader _reader;\n        private int _lookahead;\n\n        public TextReaderWhichIgnoresReturnCarrier(System.IO.TextReader reader)\n        {\n            _reader = reader;\n\n            _lookahead = '\\r';", "            while (_lookahead == '\\r')\n            {\n                _lookahead = _reader.Read();\n            }\n        }\n\n        /**\n         * <summary>\n         * Read the character from the stream while it is not a <c>'\\r'</c>.\n         * </summary>\n         * <returns>The character read, or -1 if no character on the stream.</returns>\n         */", "        public override int Read()\n        {\n            int result = _lookahead;\n\n            if (_lookahead != -1)\n            {\n                _lookahead = '\\r';\n                while (_lookahead == '\\r')\n                {\n                    _lookahead = _reader.Read();\n                }\n            }\n\n            return result;\n        }\n", "        public override int Peek()\n        {\n            return _lookahead;\n        }\n    }\n}"]}
{"filename": "src/CsvEnhancing/Enhancing.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\nnamespace CsvEnhancing\n{\n    public static class Enhancing\n    {\n        /**\n         * <summary>Enhance the instances with the source in the CSV files.</summary>\n         */\n        public class Enhancement\n        {", "        public class Enhancement\n        {\n            public readonly int RowIndex;\n            public readonly string Path;\n\n            public Enhancement(int rowIndex, string path)\n            {\n                RowIndex = rowIndex;\n                Path = path;\n            }\n        }\n", "        public static readonly Aas.Enhancing.Unwrapper<Enhancement> Unwrapper = new();\n    }\n}"]}
{"filename": "src/TreeShakeConceptDescriptions/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\n// ReSharper disable RedundantUsingDirective\nusing System.Collections.Generic;  // can't alias\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis;  // can't alias\nusing System.Linq; // can't alias\n\nnamespace TreeShakeConceptDescriptions\n{\n    public static class Program\n    {", "namespace TreeShakeConceptDescriptions\n{\n    public static class Program\n    {\n        public static int Execute(\n            string environmentPath,\n            string output,\n            System.IO.Stream? stdout,\n            System.IO.TextWriter stderr\n        )\n        {\n            var fileInfo = new System.IO.FileInfo(environmentPath);", "            if (!fileInfo.Exists)\n            {\n                stderr.WriteLine($\"{fileInfo.FullName}: File does not exist\");\n                return 1;\n            }\n\n            System.Text.Json.Nodes.JsonNode? node;\n            try\n            {\n                using var file = fileInfo.OpenRead();\n                node = System.Text.Json.Nodes.JsonNode.Parse(\n                    System.IO.File.ReadAllBytes(environmentPath)\n                );\n            }", "            catch (System.Text.Json.JsonException exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Message}\"\n                );\n                return 1;\n            }\n\n            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.Environment? environment;\n            try\n            {\n                environment = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.Environment? environment;\n            try\n            {\n                environment = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            catch (Aas.Jsonization.Exception exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Cause} at {exception.Path}\"\n                );\n                return 1;\n            }\n\n            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n", "            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n\n            if (\n                environment.ConceptDescriptions is { Count: > 0 }\n            )\n            {\n                var referencedConceptDescriptions = new HashSet<string>();\n", "                foreach (var hasSemantics in environment.Descend()\n                    .OfType<Aas.IHasSemantics>())\n                {\n                    if (\n                        hasSemantics.SemanticId is\n                        { Type: Aas.ReferenceTypes.ModelReference }\n                        && hasSemantics.SemanticId.Keys.Count > 0\n                        && hasSemantics.SemanticId.Keys[0].Type ==\n                        Aas.KeyTypes.ConceptDescription\n                    )\n                    {\n                        referencedConceptDescriptions.Add(\n                            hasSemantics.SemanticId.Keys[0].Value\n                        );\n                    }\n                }\n\n                var newConceptDescriptions =\n                    environment\n                        .ConceptDescriptions\n                        .Where(\n                            cd =>\n                                referencedConceptDescriptions.Contains(cd.Id)\n                        )\n                        .ToList();\n\n                environment.ConceptDescriptions = (newConceptDescriptions.Count > 0)\n                    ? newConceptDescriptions\n                    : null;\n            }\n\n            var errorMessage = CommonOutputting.Jsonization.Serialize(\n                environment, output, stdout\n            );", "            if (errorMessage != null)\n            {\n                stderr.WriteLine(errorMessage);\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Remove concept descriptions which are not directly \" +\n                    \"referenced as model references through semantic IDs.\"\n                );\n\n            var environmentOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--environment\",\n                description:\n                \"Path to the AAS environment serialized to JSON \" +\n                \"from which we remove the concept descriptions \" +\n                \"not referenced in any semantic ID\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(environmentOption);\n\n            var outputOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--output\",\n                description:\n                \"Path to the environment without unreferenced concept descriptions; \" +\n                \"if '-', the output is written to STDOUT\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(outputOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPath,\n                    output\n                ) =>\n                {\n                    System.IO.Stream? stdout = null;", "                    if (output == \"-\")\n                    {\n                        stdout = System.Console.OpenStandardInput();\n                    }\n\n                    try\n                    {\n                        return System.Threading.Tasks.Task.FromResult(\n                            Execute(\n                                environmentPath,\n                                output,\n                                stdout,\n                                System.Console.Error\n                            )\n                        );\n                    }\n                    finally\n                    {\n                        stdout?.Close();\n                    }\n                },\n                environmentOption,\n                outputOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/CommonTesting/TemporaryDirectory.cs", "chunked_list": ["using IDisposable = System.IDisposable;\n\nnamespace CommonTesting\n{\n    public class TemporaryDirectory : IDisposable\n    {\n        public readonly string Path;\n\n        public TemporaryDirectory()\n        {\n            this.Path = System.IO.Path.Combine(\n                System.IO.Path.GetTempPath(),\n                System.IO.Path.GetRandomFileName());\n\n            System.IO.Directory.CreateDirectory(this.Path);\n        }\n", "        public void Dispose()\n        {\n            System.IO.Directory.Delete(this.Path, true);\n        }\n    }\n}"]}
{"filename": "src/CommonTesting/TestData.cs", "chunked_list": ["namespace CommonTesting\n{\n    public static class TestData\n    {\n        public static readonly bool RecordMode = (\n            System.Environment.GetEnvironmentVariable(\n                \"AAS_CORE_3_0_CLI_SWISS_KNIFE_TESTS_RECORD_MODE\"\n            )?.ToLower() == \"true\"\n        );\n\n        public static readonly string TestDataDir = (\n            System.Environment.GetEnvironmentVariable(\n                \"AAS_CORE_3_0_CLI_SWISS_KNIFE_TESTS_TEST_DATA_DIR\"\n            ) ?? throw new System.InvalidOperationException(\n                \"The path to the test data directory is missing in the environment: \" +\n                \"AAS_CORE_3_0_CLI_SWISS_KNIFE_TESTS_TEST_DATA_DIR\")\n        );\n    }\n}", "        public static readonly string TestDataDir = (\n            System.Environment.GetEnvironmentVariable(\n                \"AAS_CORE_3_0_CLI_SWISS_KNIFE_TESTS_TEST_DATA_DIR\"\n            ) ?? throw new System.InvalidOperationException(\n                \"The path to the test data directory is missing in the environment: \" +\n                \"AAS_CORE_3_0_CLI_SWISS_KNIFE_TESTS_TEST_DATA_DIR\")\n        );\n    }\n}"]}
{"filename": "src/ListDanglingModelReferences.Tests/TestAgainstTestData.cs", "chunked_list": ["using Encoding = System.Text.Encoding;\nusing Path = System.IO.Path;\nusing System.Linq;  // can't alias\n\nusing NUnit.Framework;  // can't alias\n\nnamespace ListDanglingModelReferences.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]", "    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"ListDanglingModelReferences\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"model.json\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "            foreach (var environmentPth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(environmentPth);\n\n                var stdoutPth = Path.Join(caseDir, \"stdout.txt\");\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n\n                using var stdout = new System.IO.StringWriter();\n                using var stderr = new System.IO.StringWriter();\n                Program.Execute(\n                    environmentPth,\n                    stdout,\n                    stderr\n                );\n\n                string stderrStr = stderr.ToString();\n                stderrStr = stderrStr\n                    .Replace(\n                        new System.IO.FileInfo(\n                            environmentPth\n                        ).FullName,\n                        \"<model.json>\"\n                    )\n                    .Replace(\"\\r\", \"\");\n\n                string stdoutStr = stdout.ToString();\n                stdoutStr = stdoutStr\n                    .Replace(\n                        new System.IO.FileInfo(\n                            environmentPth\n                        ).FullName,\n                        \"<model.json>\"\n                    )\n                    .Replace(\"\\r\", \"\");\n", "                if (recordMode)\n                {\n                    System.IO.File.WriteAllText(\n                        stdoutPth, stdoutStr, Encoding.UTF8\n                    );\n                    System.IO.File.WriteAllText(\n                        stderrPth, stderrStr, Encoding.UTF8\n                    );\n                }\n                else\n                {\n                    var goldenStdoutStr = System.IO.File.ReadAllText(\n                        stdoutPth, Encoding.UTF8\n                    ).Replace(\"\\r\", \"\");\n                    Assert.AreEqual(\n                        goldenStdoutStr, stdoutStr,\n                        $\"Content mismatch against {stdoutPth}\"\n                    );\n\n                    var goldenStderrStr = System.IO.File.ReadAllText(\n                        stderrPth, Encoding.UTF8\n                    ).Replace(\"\\r\", \"\");\n                    Assert.AreEqual(\n                        goldenStderrStr, stderrStr,\n                        $\"Content mismatch against {stderrPth}\"\n                    );\n                }\n            }\n        }\n    }\n}"]}
{"filename": "src/ListDanglingModelReferences/PassThruVerifierWithJsonPaths.generated.cs", "chunked_list": ["/*\n * This code has been automatically generated by aas_core3_0_sk_codegen.\n * Do NOT edit or append.\n */\n\nusing Aas = AasCore.Aas3_0; // renamed \n\nusing System.Collections.Generic;  // can't alias\n\nnamespace ListDanglingModelReferences", "\nnamespace ListDanglingModelReferences\n{\n    public class PassThruVerifierWithJsonPaths\n        : Aas.Visitation.AbstractTransformer<IEnumerable<Aas.Reporting.Error>>\n    {\n        public override IEnumerable<Aas.Reporting.Error> TransformExtension(\n            Aas.IExtension that\n        )\n        {\n            if (that.SemanticId != null)\n            {", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.RefersTo != null)\n            {\n                int indexRefersTo  = 0;\n                foreach (\n                    var item in\n                    that.RefersTo\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.RefersTo[indexRefersTo])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexRefersTo\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"refersTo\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexRefersTo++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.RefersTo[indexRefersTo])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexRefersTo\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"refersTo\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexRefersTo++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformAdministrativeInformation(\n            Aas.IAdministrativeInformation that\n        )\n        {\n            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.Creator != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.Creator)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"creator\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformQualifier(\n            Aas.IQualifier that\n        )\n        {\n            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.ValueId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ValueId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"valueId\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformAssetAdministrationShell(\n            Aas.IAssetAdministrationShell that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.Administration != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.Administration)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"administration\"));\n                    yield return error;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.DerivedFrom != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.DerivedFrom)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"derivedFrom\"));\n                    yield return error;\n                }\n            }\n", "            foreach (\n                var error in \n                Transform(that.AssetInformation)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"assetInformation\"));\n                yield return error;\n            }\n", "            if (that.Submodels != null)\n            {\n                int indexSubmodels  = 0;\n                foreach (\n                    var item in\n                    that.Submodels\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Submodels[indexSubmodels])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSubmodels\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"submodels\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSubmodels++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.Submodels[indexSubmodels])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSubmodels\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"submodels\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSubmodels++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformAssetInformation(\n            Aas.IAssetInformation that\n        )\n        {\n            if (that.SpecificAssetIds != null)\n            {\n                int indexSpecificAssetIds  = 0;\n                foreach (\n                    var item in\n                    that.SpecificAssetIds\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.SpecificAssetIds[indexSpecificAssetIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSpecificAssetIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"specificAssetIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSpecificAssetIds++;\n                }\n            }\n", "            if (that.DefaultThumbnail != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.DefaultThumbnail)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"defaultThumbnail\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformResource(\n            Aas.IResource that\n        )\n        {\n            // Nothing defined for Resource.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformSpecificAssetId(\n            Aas.ISpecificAssetId that\n        )\n        {", "        public override IEnumerable<Aas.Reporting.Error> TransformSpecificAssetId(\n            Aas.ISpecificAssetId that\n        )\n        {\n            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.ExternalSubjectId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ExternalSubjectId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"externalSubjectId\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformSubmodel(\n            Aas.ISubmodel that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.Administration != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.Administration)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"administration\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.SubmodelElements != null)\n            {\n                int indexSubmodelElements  = 0;\n                foreach (\n                    var item in\n                    that.SubmodelElements\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SubmodelElements[indexSubmodelElements])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSubmodelElements\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"submodelElements\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSubmodelElements++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.SubmodelElements[indexSubmodelElements])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSubmodelElements\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"submodelElements\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSubmodelElements++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformRelationshipElement(\n            Aas.IRelationshipElement that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            foreach (\n                var error in \n                Transform(that.First)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"first\"));\n                yield return error;\n            }\n", "            foreach (\n                var error in \n                Transform(that.Second)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"second\"));\n                yield return error;\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformSubmodelElementList(\n            Aas.ISubmodelElementList that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.SemanticIdListElement != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticIdListElement)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticIdListElement\"));\n                    yield return error;\n                }\n            }\n", "            if (that.Value != null)\n            {\n                int indexValue  = 0;\n                foreach (\n                    var item in\n                    that.Value\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Value[indexValue])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexValue\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"value\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexValue++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.Value[indexValue])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexValue\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"value\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexValue++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformSubmodelElementCollection(\n            Aas.ISubmodelElementCollection that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.Value != null)\n            {\n                int indexValue  = 0;\n                foreach (\n                    var item in\n                    that.Value\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Value[indexValue])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexValue\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"value\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexValue++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.Value[indexValue])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexValue\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"value\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexValue++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformProperty(\n            Aas.IProperty that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.ValueId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ValueId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"valueId\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformMultiLanguageProperty(\n            Aas.IMultiLanguageProperty that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.Value != null)\n            {\n                int indexValue  = 0;\n                foreach (\n                    var item in\n                    that.Value\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Value[indexValue])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexValue\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"value\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexValue++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Value[indexValue])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexValue\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"value\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexValue++;\n                }\n            }\n", "            if (that.ValueId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ValueId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"valueId\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformRange(\n            Aas.IRange that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformReferenceElement(\n            Aas.IReferenceElement that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.Value != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.Value)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"value\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformBlob(\n            Aas.IBlob that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformFile(\n            Aas.IFile that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformAnnotatedRelationshipElement(\n            Aas.IAnnotatedRelationshipElement that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            foreach (\n                var error in \n                Transform(that.First)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"first\"));\n                yield return error;\n            }\n", "            foreach (\n                var error in \n                Transform(that.Second)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"second\"));\n                yield return error;\n            }\n", "            if (that.Annotations != null)\n            {\n                int indexAnnotations  = 0;\n                foreach (\n                    var item in\n                    that.Annotations\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Annotations[indexAnnotations])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexAnnotations\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"annotations\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexAnnotations++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.Annotations[indexAnnotations])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexAnnotations\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"annotations\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexAnnotations++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformEntity(\n            Aas.IEntity that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.Statements != null)\n            {\n                int indexStatements  = 0;\n                foreach (\n                    var item in\n                    that.Statements\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Statements[indexStatements])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexStatements\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"statements\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexStatements++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Statements[indexStatements])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexStatements\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"statements\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexStatements++;\n                }\n            }\n", "            if (that.SpecificAssetIds != null)\n            {\n                int indexSpecificAssetIds  = 0;\n                foreach (\n                    var item in\n                    that.SpecificAssetIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SpecificAssetIds[indexSpecificAssetIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSpecificAssetIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"specificAssetIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSpecificAssetIds++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.SpecificAssetIds[indexSpecificAssetIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSpecificAssetIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"specificAssetIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSpecificAssetIds++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformEventPayload(\n            Aas.IEventPayload that\n        )\n        {\n            foreach (\n                var error in \n                Transform(that.Source)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"source\"));\n                yield return error;\n            }\n", "            if (that.SourceSemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SourceSemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"sourceSemanticId\"));\n                    yield return error;\n                }\n            }\n", "            foreach (\n                var error in \n                Transform(that.ObservableReference)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"observableReference\"));\n                yield return error;\n            }\n", "            if (that.ObservableSemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ObservableSemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"observableSemanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SubjectId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SubjectId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"subjectId\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformBasicEventElement(\n            Aas.IBasicEventElement that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            foreach (\n                var error in \n                Transform(that.Observed)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"observed\"));\n                yield return error;\n            }\n", "            if (that.MessageBroker != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.MessageBroker)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"messageBroker\"));\n                    yield return error;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformOperation(\n            Aas.IOperation that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.InputVariables != null)\n            {\n                int indexInputVariables  = 0;\n                foreach (\n                    var item in\n                    that.InputVariables\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.InputVariables[indexInputVariables])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexInputVariables\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"inputVariables\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexInputVariables++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.InputVariables[indexInputVariables])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexInputVariables\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"inputVariables\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexInputVariables++;\n                }\n            }\n", "            if (that.OutputVariables != null)\n            {\n                int indexOutputVariables  = 0;\n                foreach (\n                    var item in\n                    that.OutputVariables\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.OutputVariables[indexOutputVariables])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexOutputVariables\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"outputVariables\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexOutputVariables++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.OutputVariables[indexOutputVariables])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexOutputVariables\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"outputVariables\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexOutputVariables++;\n                }\n            }\n", "            if (that.InoutputVariables != null)\n            {\n                int indexInoutputVariables  = 0;\n                foreach (\n                    var item in\n                    that.InoutputVariables\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.InoutputVariables[indexInoutputVariables])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexInoutputVariables\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"inoutputVariables\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexInoutputVariables++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.InoutputVariables[indexInoutputVariables])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexInoutputVariables\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"inoutputVariables\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexInoutputVariables++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformOperationVariable(\n            Aas.IOperationVariable that\n        )\n        {\n            foreach (\n                var error in \n                Transform(that.Value)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"value\"));\n                yield return error;\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformCapability(\n            Aas.ICapability that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.SemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.SemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"semanticId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.SupplementalSemanticIds != null)\n            {\n                int indexSupplementalSemanticIds  = 0;\n                foreach (\n                    var item in\n                    that.SupplementalSemanticIds\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.SupplementalSemanticIds[indexSupplementalSemanticIds])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSupplementalSemanticIds\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"supplementalSemanticIds\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSupplementalSemanticIds++;\n                }\n            }\n", "            if (that.Qualifiers != null)\n            {\n                int indexQualifiers  = 0;\n                foreach (\n                    var item in\n                    that.Qualifiers\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Qualifiers[indexQualifiers])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexQualifiers\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"qualifiers\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexQualifiers++;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformConceptDescription(\n            Aas.IConceptDescription that\n        )\n        {\n            if (that.Extensions != null)\n            {\n                int indexExtensions  = 0;\n                foreach (\n                    var item in\n                    that.Extensions\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.Extensions[indexExtensions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexExtensions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"extensions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexExtensions++;\n                }\n            }\n", "            if (that.DisplayName != null)\n            {\n                int indexDisplayName  = 0;\n                foreach (\n                    var item in\n                    that.DisplayName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.DisplayName[indexDisplayName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDisplayName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"displayName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDisplayName++;\n                }\n            }\n", "            if (that.Description != null)\n            {\n                int indexDescription  = 0;\n                foreach (\n                    var item in\n                    that.Description\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Description[indexDescription])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDescription\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"description\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDescription++;\n                }\n            }\n", "            if (that.Administration != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.Administration)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"administration\"));\n                    yield return error;\n                }\n            }\n", "            if (that.EmbeddedDataSpecifications != null)\n            {\n                int indexEmbeddedDataSpecifications  = 0;\n                foreach (\n                    var item in\n                    that.EmbeddedDataSpecifications\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.EmbeddedDataSpecifications[indexEmbeddedDataSpecifications])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexEmbeddedDataSpecifications\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"embeddedDataSpecifications\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexEmbeddedDataSpecifications++;\n                }\n            }\n", "            if (that.IsCaseOf != null)\n            {\n                int indexIsCaseOf  = 0;\n                foreach (\n                    var item in\n                    that.IsCaseOf\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.IsCaseOf[indexIsCaseOf])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexIsCaseOf\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"isCaseOf\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexIsCaseOf++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.IsCaseOf[indexIsCaseOf])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexIsCaseOf\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"isCaseOf\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexIsCaseOf++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformReference(\n            Aas.IReference that\n        )\n        {\n            if (that.ReferredSemanticId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ReferredSemanticId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"referredSemanticId\"));\n                    yield return error;\n                }\n            }\n\n            int indexKeys  = 0;", "            foreach (\n                var item in\n                that.Keys\n            )\n            {\n                foreach (\n                    var error in \n                    Transform(that.Keys[indexKeys])\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.IndexSegment(\n                            indexKeys\n                        )\n                    );\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"keys\"\n                        )\n                    );\n                    yield return error;\n                }\n                indexKeys++;\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformKey(\n            Aas.IKey that\n        )\n        {\n            // Nothing defined for Key.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformLangStringNameType(\n            Aas.ILangStringNameType that\n        )\n        {\n            // Nothing defined for LangStringNameType.\n            yield break;\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformLangStringNameType(\n            Aas.ILangStringNameType that\n        )\n        {\n            // Nothing defined for LangStringNameType.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformLangStringTextType(\n            Aas.ILangStringTextType that\n        )\n        {\n            // Nothing defined for LangStringTextType.\n            yield break;\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformLangStringTextType(\n            Aas.ILangStringTextType that\n        )\n        {\n            // Nothing defined for LangStringTextType.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformEnvironment(\n            Aas.IEnvironment that\n        )\n        {", "        public override IEnumerable<Aas.Reporting.Error> TransformEnvironment(\n            Aas.IEnvironment that\n        )\n        {\n            if (that.AssetAdministrationShells != null)\n            {\n                int indexAssetAdministrationShells  = 0;\n                foreach (\n                    var item in\n                    that.AssetAdministrationShells\n                )\n                {", "                    foreach (\n                        var error in \n                        Transform(that.AssetAdministrationShells[indexAssetAdministrationShells])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexAssetAdministrationShells\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"assetAdministrationShells\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexAssetAdministrationShells++;\n                }\n            }\n", "            if (that.Submodels != null)\n            {\n                int indexSubmodels  = 0;\n                foreach (\n                    var item in\n                    that.Submodels\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Submodels[indexSubmodels])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSubmodels\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"submodels\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSubmodels++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Submodels[indexSubmodels])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexSubmodels\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"submodels\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexSubmodels++;\n                }\n            }\n", "            if (that.ConceptDescriptions != null)\n            {\n                int indexConceptDescriptions  = 0;\n                foreach (\n                    var item in\n                    that.ConceptDescriptions\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.ConceptDescriptions[indexConceptDescriptions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexConceptDescriptions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"conceptDescriptions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexConceptDescriptions++;\n                }\n            }\n        }\n", "                    foreach (\n                        var error in \n                        Transform(that.ConceptDescriptions[indexConceptDescriptions])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexConceptDescriptions\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"conceptDescriptions\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexConceptDescriptions++;\n                }\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformEmbeddedDataSpecification(\n            Aas.IEmbeddedDataSpecification that\n        )\n        {\n            foreach (\n                var error in \n                Transform(that.DataSpecification)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"dataSpecification\"));\n                yield return error;\n            }\n", "            foreach (\n                var error in \n                Transform(that.DataSpecificationContent)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"dataSpecificationContent\"));\n                yield return error;\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformLevelType(\n            Aas.ILevelType that\n        )\n        {\n            // Nothing defined for LevelType.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformValueReferencePair(\n            Aas.IValueReferencePair that\n        )\n        {", "        public override IEnumerable<Aas.Reporting.Error> TransformValueReferencePair(\n            Aas.IValueReferencePair that\n        )\n        {\n            foreach (\n                var error in \n                Transform(that.ValueId)\n            )\n            {\n                error.PrependSegment(\n                    new Aas.Reporting.NameSegment(\n                        \"valueId\"));\n                yield return error;\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformValueList(\n            Aas.IValueList that\n        )\n        {\n            int indexValueReferencePairs  = 0;\n            foreach (\n                var item in\n                that.ValueReferencePairs\n            )\n            {\n                foreach (\n                    var error in \n                    Transform(that.ValueReferencePairs[indexValueReferencePairs])\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.IndexSegment(\n                            indexValueReferencePairs\n                        )\n                    );\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"valueReferencePairs\"\n                        )\n                    );\n                    yield return error;\n                }\n                indexValueReferencePairs++;\n            }\n        }\n", "                foreach (\n                    var error in \n                    Transform(that.ValueReferencePairs[indexValueReferencePairs])\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.IndexSegment(\n                            indexValueReferencePairs\n                        )\n                    );\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"valueReferencePairs\"\n                        )\n                    );\n                    yield return error;\n                }\n                indexValueReferencePairs++;\n            }\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformLangStringPreferredNameTypeIec61360(\n            Aas.ILangStringPreferredNameTypeIec61360 that\n        )\n        {\n            // Nothing defined for LangStringPreferredNameTypeIec61360.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformLangStringShortNameTypeIec61360(\n            Aas.ILangStringShortNameTypeIec61360 that\n        )\n        {\n            // Nothing defined for LangStringShortNameTypeIec61360.\n            yield break;\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformLangStringShortNameTypeIec61360(\n            Aas.ILangStringShortNameTypeIec61360 that\n        )\n        {\n            // Nothing defined for LangStringShortNameTypeIec61360.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformLangStringDefinitionTypeIec61360(\n            Aas.ILangStringDefinitionTypeIec61360 that\n        )\n        {\n            // Nothing defined for LangStringDefinitionTypeIec61360.\n            yield break;\n        }\n", "        public override IEnumerable<Aas.Reporting.Error> TransformLangStringDefinitionTypeIec61360(\n            Aas.ILangStringDefinitionTypeIec61360 that\n        )\n        {\n            // Nothing defined for LangStringDefinitionTypeIec61360.\n            yield break;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformDataSpecificationIec61360(\n            Aas.IDataSpecificationIec61360 that\n        )\n        {\n            int indexPreferredName  = 0;", "        public override IEnumerable<Aas.Reporting.Error> TransformDataSpecificationIec61360(\n            Aas.IDataSpecificationIec61360 that\n        )\n        {\n            int indexPreferredName  = 0;\n            foreach (\n                var item in\n                that.PreferredName\n            )\n            {\n                foreach (\n                    var error in \n                    Transform(that.PreferredName[indexPreferredName])\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.IndexSegment(\n                            indexPreferredName\n                        )\n                    );\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"preferredName\"\n                        )\n                    );\n                    yield return error;\n                }\n                indexPreferredName++;\n            }\n", "                foreach (\n                    var error in \n                    Transform(that.PreferredName[indexPreferredName])\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.IndexSegment(\n                            indexPreferredName\n                        )\n                    );\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"preferredName\"\n                        )\n                    );\n                    yield return error;\n                }\n                indexPreferredName++;\n            }\n", "            if (that.ShortName != null)\n            {\n                int indexShortName  = 0;\n                foreach (\n                    var item in\n                    that.ShortName\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.ShortName[indexShortName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexShortName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"shortName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexShortName++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.ShortName[indexShortName])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexShortName\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"shortName\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexShortName++;\n                }\n            }\n", "            if (that.UnitId != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.UnitId)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"unitId\"));\n                    yield return error;\n                }\n            }\n", "            if (that.Definition != null)\n            {\n                int indexDefinition  = 0;\n                foreach (\n                    var item in\n                    that.Definition\n                )\n                {\n                    foreach (\n                        var error in \n                        Transform(that.Definition[indexDefinition])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDefinition\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"definition\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDefinition++;\n                }\n            }\n", "                    foreach (\n                        var error in \n                        Transform(that.Definition[indexDefinition])\n                    )\n                    {\n                        error.PrependSegment(\n                            new Aas.Reporting.IndexSegment(\n                                indexDefinition\n                            )\n                        );\n                        error.PrependSegment(\n                            new Aas.Reporting.NameSegment(\n                                \"definition\"\n                            )\n                        );\n                        yield return error;\n                    }\n                    indexDefinition++;\n                }\n            }\n", "            if (that.ValueList != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.ValueList)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"valueList\"));\n                    yield return error;\n                }\n            }\n", "            if (that.LevelType != null)\n            {\n                foreach (\n                    var error in \n                    Transform(that.LevelType)\n                )\n                {\n                    error.PrependSegment(\n                        new Aas.Reporting.NameSegment(\n                            \"levelType\"));\n                    yield return error;\n                }\n            }\n        }", "    }  // public class PassThruVerifierWithJsonPaths\n}  // namespace ListDanglingModelReferences\n\n/*\n * This code has been automatically generated by aas_core3_0_sk_codegen.\n * Do NOT edit or append.\n */\n\n"]}
{"filename": "src/ListDanglingModelReferences/ReferableToKeyTypes.generated.cs", "chunked_list": ["/*\n * This code has been automatically generated by aas_core3_0_sk_codegen.\n * Do NOT edit or append.\n */\n\nusing Aas = AasCore.Aas3_0; // renamed\n\nnamespace ListDanglingModelReferences {\n    public static class ReferableToKeyTypes\n    {\n        public static Aas.KeyTypes Map(\n            Aas.IReferable that\n        )\n        {\n            // NOTE (mristin, 2023-04-05):\n            // We can not use type-switch here as there are concrete referable classes which inherit\n            // from other concrete referable classes, so the order of the checks does matter.\n", "    public static class ReferableToKeyTypes\n    {\n        public static Aas.KeyTypes Map(\n            Aas.IReferable that\n        )\n        {\n            // NOTE (mristin, 2023-04-05):\n            // We can not use type-switch here as there are concrete referable classes which inherit\n            // from other concrete referable classes, so the order of the checks does matter.\n\n            if (that is Aas.ISubmodelElementList)\n            {\n                return Aas.KeyTypes.SubmodelElementList;\n            }\n", "            if (that is Aas.ISubmodelElementList)\n            {\n                return Aas.KeyTypes.SubmodelElementList;\n            }\n\n            if (that is Aas.ISubmodelElementCollection)\n            {\n                return Aas.KeyTypes.SubmodelElementCollection;\n            }\n\n            if (that is Aas.ISubmodel)\n            {\n                return Aas.KeyTypes.Submodel;\n            }\n", "            if (that is Aas.ISubmodel)\n            {\n                return Aas.KeyTypes.Submodel;\n            }\n\n            if (that is Aas.IReferenceElement)\n            {\n                return Aas.KeyTypes.ReferenceElement;\n            }\n\n            if (that is Aas.IRange)\n            {\n                return Aas.KeyTypes.Range;\n            }\n", "            if (that is Aas.IRange)\n            {\n                return Aas.KeyTypes.Range;\n            }\n\n            if (that is Aas.IProperty)\n            {\n                return Aas.KeyTypes.Property;\n            }\n\n            if (that is Aas.IOperation)\n            {\n                return Aas.KeyTypes.Operation;\n            }\n", "            if (that is Aas.IOperation)\n            {\n                return Aas.KeyTypes.Operation;\n            }\n\n            if (that is Aas.IMultiLanguageProperty)\n            {\n                return Aas.KeyTypes.MultiLanguageProperty;\n            }\n\n            if (that is Aas.IFile)\n            {\n                return Aas.KeyTypes.File;\n            }\n", "            if (that is Aas.IFile)\n            {\n                return Aas.KeyTypes.File;\n            }\n\n            if (that is Aas.IEntity)\n            {\n                return Aas.KeyTypes.Entity;\n            }\n\n            if (that is Aas.IConceptDescription)\n            {\n                return Aas.KeyTypes.ConceptDescription;\n            }\n", "            if (that is Aas.IConceptDescription)\n            {\n                return Aas.KeyTypes.ConceptDescription;\n            }\n\n            if (that is Aas.ICapability)\n            {\n                return Aas.KeyTypes.Capability;\n            }\n\n            if (that is Aas.IBlob)\n            {\n                return Aas.KeyTypes.Blob;\n            }\n", "            if (that is Aas.IBlob)\n            {\n                return Aas.KeyTypes.Blob;\n            }\n\n            if (that is Aas.IBasicEventElement)\n            {\n                return Aas.KeyTypes.BasicEventElement;\n            }\n\n            if (that is Aas.IAssetAdministrationShell)\n            {\n                return Aas.KeyTypes.AssetAdministrationShell;\n            }\n", "            if (that is Aas.IAssetAdministrationShell)\n            {\n                return Aas.KeyTypes.AssetAdministrationShell;\n            }\n\n            if (that is Aas.IAnnotatedRelationshipElement)\n            {\n                return Aas.KeyTypes.AnnotatedRelationshipElement;\n            }\n\n            if (that is Aas.IRelationshipElement)\n            {\n                return Aas.KeyTypes.RelationshipElement;\n            }\n\n            throw new System.InvalidOperationException(\n                $\"Unexpected type: {that.GetType()}\"\n            );\n        }\n    } \n}\n\n/*\n * This code has been automatically generated by aas_core3_0_sk_codegen.\n * Do NOT edit or append.\n */\n", "            if (that is Aas.IRelationshipElement)\n            {\n                return Aas.KeyTypes.RelationshipElement;\n            }\n\n            throw new System.InvalidOperationException(\n                $\"Unexpected type: {that.GetType()}\"\n            );\n        }\n    } \n}\n\n/*\n * This code has been automatically generated by aas_core3_0_sk_codegen.\n * Do NOT edit or append.\n */\n"]}
{"filename": "src/ListDanglingModelReferences/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis; // can't alias\nusing System.Collections.Generic; // can't alias\nusing System.Linq; // can't alias\n\nnamespace ListDanglingModelReferences\n{\n    /**", "{\n    /**\n     * <summary>Allow reference keys to be used in a trie.</summary>\n     * <remarks>The hashable key should not be modified post-construction.</remarks>\n     */\n    class HashableKey : Aas.Key\n    {\n        public override int GetHashCode()\n        {\n            // From: https://stackoverflow.com/questions/1646807/quick-and-simple-hash-code-combinations\n            int hash = 17;\n\n            // ReSharper disable once NonReadonlyMemberInGetHashCode\n            hash = hash * 31 + (int)Type;\n\n            // ReSharper disable once NonReadonlyMemberInGetHashCode\n            hash = hash * 31 + Value.GetHashCode();\n\n            return hash;\n        }\n", "        public override bool Equals(object? obj)\n        {\n            var anotherKey = obj as HashableKey;\n            if (anotherKey == null)\n            {\n                // ReSharper disable once BaseObjectEqualsIsObjectEquals\n                return base.Equals(obj);\n            }\n\n            return anotherKey.Type == Type && anotherKey.Value == Value;\n        }\n\n        public HashableKey(Aas.KeyTypes type, string value) : base(type, value)\n        {\n            // Intentionally empty.\n        }\n    }\n", "    static class Referencing\n    {\n        class Enhancement\n        {\n            /**\n         * <summary>List children in the AAS reference system.</summary>\n         * * <remarks>\n         * Please do not confuse this to an C# object graph or JSON model.\n         * </remarks>\n         */\n            internal readonly Dictionary<HashableKey, Aas.IClass> Children = new();\n        }\n", "        private static readonly Aas.Enhancing.Enhancer<Enhancement> Enhancer = new(\n            _ => new Enhancement()\n        );\n\n        private static readonly Aas.Enhancing.Unwrapper<Enhancement> Unwrapper = new();\n\n        /**\n         * <summary>\n         * Set the children in the enhancements recursively in-place.\n         * </summary>\n         * <returns>Error message, if any</returns>\n         */", "        private static string? RecursivelyProcessSubmodelElementList(\n            Aas.ISubmodelElementList submodelElementList\n        )\n        {\n            var enh = Unwrapper.MustUnwrap(submodelElementList);\n\n            var i = 0;\n            foreach (var item in submodelElementList.OverValueOrEmpty())\n            {\n                var key = new HashableKey(\n                    ReferableToKeyTypes.Map(item),\n                    i.ToString()\n                );\n\n                enh.Children.Add(key, item);\n                i++;\n\n                var error = RecursivelyProcessSubmodelElement(item);", "                if (error != null)\n                {\n                    return $\"In submodel element list at index: {i}: {error}\";\n                }\n            }\n\n            return null;\n        }\n\n        /**\n         * <summary>\n         * Set the children in the enhancements recursively in-place.\n         * </summary>\n         * <returns>Error message, if any</returns>\n         */", "        private static string? RecursivelyProcessSubmodelElementCollection(\n            Aas.ISubmodelElementCollection submodelElementCollection\n        )\n        {\n            var enh = Unwrapper.MustUnwrap(submodelElementCollection);\n\n            var childrenIdShorts = new HashSet<string>();\n\n            foreach (var item in submodelElementCollection.OverValueOrEmpty())\n            {\n                if (item.IdShort == null)\n                {\n                    return\n                        \"Unexpected item in a submodel element collection \" +\n                        \"without an ID-short\";\n                }\n", "            foreach (var item in submodelElementCollection.OverValueOrEmpty())\n            {\n                if (item.IdShort == null)\n                {\n                    return\n                        \"Unexpected item in a submodel element collection \" +\n                        \"without an ID-short\";\n                }\n\n                if (childrenIdShorts.Contains(item.IdShort))\n                {\n                    return\n                        \"Unexpected items in a submodel element collection \" +\n                        $\"with duplicate ID-shorts: {item.IdShort}\";\n                }\n\n                childrenIdShorts.Add(item.IdShort);\n\n                var key = new HashableKey(\n                    ReferableToKeyTypes.Map(item),\n                    item.IdShort\n                );\n\n                enh.Children.Add(key, item);\n\n                var error = RecursivelyProcessSubmodelElement(item);", "                if (childrenIdShorts.Contains(item.IdShort))\n                {\n                    return\n                        \"Unexpected items in a submodel element collection \" +\n                        $\"with duplicate ID-shorts: {item.IdShort}\";\n                }\n\n                childrenIdShorts.Add(item.IdShort);\n\n                var key = new HashableKey(\n                    ReferableToKeyTypes.Map(item),\n                    item.IdShort\n                );\n\n                enh.Children.Add(key, item);\n\n                var error = RecursivelyProcessSubmodelElement(item);", "                if (error != null)\n                {\n                    return \"In submodel element collection \" +\n                           $\"at ID-short {item.IdShort}: {error}\";\n                }\n            }\n\n            return null;\n        }\n\n\n        /**\n         * <summary>\n         * Set the children in the enhancements recursively in-place.\n         * </summary>\n         * <returns>Error message, if any</returns>\n         */", "        private static string? RecursivelyProcessSubmodelElement(\n            Aas.ISubmodelElement submodelElement\n        )\n        {\n            switch (submodelElement)\n            {\n                case Aas.ISubmodelElementList submodelElementList:\n                    return RecursivelyProcessSubmodelElementList(submodelElementList);\n\n                case Aas.ISubmodelElementCollection submodelElementCollection:\n                    return RecursivelyProcessSubmodelElementCollection(\n                        submodelElementCollection\n                    );\n\n                default:\n                    return null;\n            }\n        }\n\n        /**\n         * <summary>\n         * Set the children in the enhancements recursively in-place.\n         * </summary>\n         * <returns>Error message, if any</returns>\n         */", "        private static string? RecursivelyProcessSubmodel(Aas.ISubmodel submodel)\n        {\n            var childrenIdShorts = new HashSet<string>();\n\n            var enh = Unwrapper.MustUnwrap(submodel);\n            foreach (var submodelElement in submodel.OverSubmodelElementsOrEmpty())\n            {\n                if (submodelElement.IdShort == null)\n                {\n                    return\n                        \"Unexpected submodel element \" +\n                        $\"without ID-short in submodel {submodel.Id}\";\n                }\n\n", "                if (childrenIdShorts.Contains(submodelElement.IdShort))\n                {\n                    return\n                        \"Unexpected submodel elements \" +\n                        $\"with duplicate ID-shorts: {submodelElement.IdShort}\";\n                }\n\n                childrenIdShorts.Add(submodelElement.IdShort);\n\n                var key = new HashableKey(\n                    ReferableToKeyTypes.Map(submodelElement),\n                    submodelElement.IdShort\n                );\n\n                enh.Children.Add(key, submodelElement);\n\n                var error = RecursivelyProcessSubmodelElement(\n                    submodelElement\n                );", "                if (error != null)\n                {\n                    return\n                        $\"In submodel element {submodelElement.IdShort}: {error}\";\n                }\n            }\n\n            return null;\n        }\n\n        /**\n         * <summary>Set the enhancement properties for the given environment.</summary>\n         * <returns>Enhanced environment, or error if any</returns>\n         */\n        internal static (Aas.IEnvironment?, string?) Process(\n            Aas.IEnvironment environment\n        )\n        {\n            var envWrapped = (Aas.IEnvironment)Enhancer.Wrap(environment);\n\n            var envEnh = Unwrapper.MustUnwrap(envWrapped);\n", "            foreach (var shell in envWrapped.OverAssetAdministrationShellsOrEmpty())\n            {\n                envEnh.Children.Add(\n                    new HashableKey(\n                        Aas.KeyTypes.AssetAdministrationShell,\n                        shell.Id\n                    ), shell\n                );\n            }\n\n            foreach (var submodel in envWrapped.OverSubmodelsOrEmpty())\n            {\n                envEnh.Children.Add(\n                    new HashableKey(\n                        Aas.KeyTypes.Submodel,\n                        submodel.Id\n                    ), submodel\n                );\n\n                var error = RecursivelyProcessSubmodel(submodel);", "            foreach (var submodel in envWrapped.OverSubmodelsOrEmpty())\n            {\n                envEnh.Children.Add(\n                    new HashableKey(\n                        Aas.KeyTypes.Submodel,\n                        submodel.Id\n                    ), submodel\n                );\n\n                var error = RecursivelyProcessSubmodel(submodel);\n                if (error != null)\n                {\n                    return (null, $\"In submodel {submodel.Id}: {error}\");\n                }\n            }\n", "                if (error != null)\n                {\n                    return (null, $\"In submodel {submodel.Id}: {error}\");\n                }\n            }\n\n            foreach (var conceptDescription in\n                envWrapped.OverConceptDescriptionsOrEmpty())\n            {\n                envEnh.Children.Add(\n                    new HashableKey(\n                        Aas.KeyTypes.ConceptDescription,\n                        conceptDescription.Id\n                    ), conceptDescription\n                );\n            }\n\n            return (envWrapped, null);\n        }\n\n        /**\n         * <summary>Follow the model reference from the environment.</summary>\n         */", "        public static Aas.IClass? Dereference(\n            Aas.IEnvironment environment,\n            Aas.IReference reference\n        )\n        {\n            if (reference.Type != Aas.ReferenceTypes.ModelReference)\n            {\n                var typeAsStr = Aas.Stringification.ToString(reference.Type);\n                if (typeAsStr == null)\n                {\n                    throw new System.InvalidOperationException(\n                        $\"Unexpected null typeAsStr for {reference.Type}\"\n                    );\n                }\n\n                throw new System.ArgumentException(\n                    $\"Expected a model reference, but got {typeAsStr}\"\n                );\n            }\n", "                if (typeAsStr == null)\n                {\n                    throw new System.InvalidOperationException(\n                        $\"Unexpected null typeAsStr for {reference.Type}\"\n                    );\n                }\n\n                throw new System.ArgumentException(\n                    $\"Expected a model reference, but got {typeAsStr}\"\n                );\n            }\n", "            if (reference.Keys.Count == 0)\n            {\n                throw new System.ArgumentException(\n                    \"Unexpected empty list of keys in the reference\"\n                );\n            }\n\n            Aas.IClass? cursor = environment;\n\n            foreach (var key in reference.Keys.Select(\n                    unhashableKey => new HashableKey(\n                        unhashableKey.Type, unhashableKey.Value\n                    )\n                )\n            )\n            {", "            foreach (var key in reference.Keys.Select(\n                    unhashableKey => new HashableKey(\n                        unhashableKey.Type, unhashableKey.Value\n                    )\n                )\n            )\n            {\n                if (cursor == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null cursor\"\n                    );\n                }\n\n                var enh = Unwrapper.MustUnwrap(cursor);\n\n                bool got = enh.Children.TryGetValue(key, out cursor);", "                if (!got)\n                {\n                    return null;\n                }\n            }\n\n            if (cursor == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null cursor\"\n                );\n            }\n\n            return cursor;\n        }\n", "        public static string StringifyAsJsonList(IEnumerable<Aas.IKey> keys)\n        {\n            var array = new System.Text.Json.Nodes.JsonArray(\n                keys.Select(key =>\n                {\n                    var node = System.Text.Json.Nodes.JsonValue.Create(key.Value);\n                    if (node == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected null node\"\n                        );\n                    }\n\n                    return node;\n                }).ToArray<System.Text.Json.Nodes.JsonNode>()\n            );\n\n            return array.ToJsonString();\n        }\n    }\n", "    class Verifier : PassThruVerifierWithJsonPaths\n    {\n        private readonly Aas.IEnvironment _environment;\n\n        public Verifier(Aas.IEnvironment environment)\n        {\n            _environment = environment;\n        }\n\n        public override IEnumerable<Aas.Reporting.Error> TransformReference(\n            Aas.IReference that\n        )\n        {", "        public override IEnumerable<Aas.Reporting.Error> TransformReference(\n            Aas.IReference that\n        )\n        {\n            if (that.Type == Aas.ReferenceTypes.ModelReference)\n            {\n                var dereferenced = Referencing.Dereference(\n                    _environment,\n                    that\n                );\n", "                if (dereferenced == null)\n                {\n                    yield return new Aas.Reporting.Error(\n                        $\"Dangling reference {Referencing.StringifyAsJsonList(that.Keys)}\"\n                    );\n                }\n            }\n\n\n            foreach (var error in base.TransformReference(that))\n            {\n                yield return error;\n            }\n        }\n    }\n", "            foreach (var error in base.TransformReference(that))\n            {\n                yield return error;\n            }\n        }\n    }\n\n    public static class Program\n    {\n        public static int Execute(\n            string environmentPath,\n            System.IO.TextWriter stdout,\n            System.IO.TextWriter stderr\n        )\n        {\n            var fileInfo = new System.IO.FileInfo(environmentPath);", "        public static int Execute(\n            string environmentPath,\n            System.IO.TextWriter stdout,\n            System.IO.TextWriter stderr\n        )\n        {\n            var fileInfo = new System.IO.FileInfo(environmentPath);\n            if (!fileInfo.Exists)\n            {\n                stderr.WriteLine($\"{fileInfo.FullName}: File does not exist\");\n                return 1;\n            }\n\n            System.Text.Json.Nodes.JsonNode? node;\n            try\n            {\n                using var file = fileInfo.OpenRead();\n                node = System.Text.Json.Nodes.JsonNode.Parse(\n                    System.IO.File.ReadAllBytes(environmentPath)\n                );\n            }", "            catch (System.Text.Json.JsonException exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Message}\"\n                );\n                return 1;\n            }\n\n            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.IEnvironment? environment;\n            try\n            {\n                environment = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            if (node == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null node\"\n                );\n            }\n\n            Aas.IEnvironment? environment;\n            try\n            {\n                environment = Aas.Jsonization.Deserialize.EnvironmentFrom(node);\n            }", "            catch (Aas.Jsonization.Exception exception)\n            {\n                stderr.WriteLine(\n                    $\"{fileInfo.FullName}: \" +\n                    $\"JSON parsing failed: {exception.Cause} at {exception.Path}\"\n                );\n                return 1;\n            }\n\n            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n\n            // ReSharper disable once JoinDeclarationAndInitializer\n            string? error;\n            (environment, error) = Referencing.Process(\n                environment ?? throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                )\n            );", "            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                );\n            }\n\n            // ReSharper disable once JoinDeclarationAndInitializer\n            string? error;\n            (environment, error) = Referencing.Process(\n                environment ?? throw new System.InvalidOperationException(\n                    \"Unexpected null instance\"\n                )\n            );", "            if (error != null)\n            {\n                stderr.WriteLine($\"{fileInfo.FullName}: {error}\");\n                return 1;\n            }\n\n            if (environment == null)\n            {\n                throw new System.InvalidOperationException(\n                    \"Unexpected null environment\"\n                );\n            }\n\n            var verifier = new Verifier(environment);\n", "            foreach (var verificationError in verifier.Transform(environment))\n            {\n                var jsonPath = Aas.Reporting.GenerateJsonPath(\n                    verificationError.PathSegments\n                );\n\n                stdout.WriteLine(\n                    $\"{fileInfo.FullName}#{jsonPath}: {verificationError.Cause}\"\n                );\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"List model references in the environment which are \" +\n                    \"not contained in it\"\n                );\n\n            var environmentOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--environment\",\n                description:\n                \"An AAS environment serialized as a JSON file to be searched for \" +\n                \"dangling model references\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(environmentOption);\n\n            rootCommand.SetHandler(\n                (\n                    environmentPath\n                ) => System.Threading.Tasks.Task.FromResult(\n                    Execute(\n                        environmentPath,\n                        System.Console.Out,\n                        System.Console.Error\n                    )\n                ),\n                environmentOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/SplitEnvironmentForStaticHosting.Tests/TestAgainstTestData.cs", "chunked_list": ["using Directory = System.IO.Directory;\nusing Encoding = System.Text.Encoding;\nusing File = System.IO.File;\nusing Path = System.IO.Path;\n\nusing System.Collections.Immutable; // can't alias\nusing System.Linq;  // can't alias\n\nusing NUnit.Framework;  // can't alias\n", "using NUnit.Framework;  // can't alias\n\nnamespace SplitEnvironmentForStaticHosting.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"SplitEnvironmentForStaticHosting\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = Directory.GetFiles(\n                testDataDir,\n                \"model.json\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "            foreach (var environmentPth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(environmentPth);\n\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n\n                var expectedOutputDir = Path.Join(caseDir, \"Expected_output\");\n\n                string outputDir;\n                CommonTesting.TemporaryDirectory? tempDir = null;\n", "                if (recordMode)\n                {\n                    outputDir = expectedOutputDir;\n                }\n                else\n                {\n                    tempDir = new CommonTesting.TemporaryDirectory();\n                    outputDir = tempDir.Path;\n                }\n\n                try\n                {\n                    using var stderr = new System.IO.StringWriter();\n                    Program.Execute(\n                        environmentPth,\n                        outputDir,\n                        stderr\n                    );\n\n                    string stderrStr = stderr.ToString();\n                    stderrStr = stderrStr\n                        .Replace(\n                            new System.IO.FileInfo(\n                                environmentPth\n                            ).FullName,\n                            \"<model.json>\"\n                        )\n                        .Replace(\"\\r\", \"\");\n", "                    if (recordMode)\n                    {\n                        File.WriteAllText(\n                            stderrPth, stderrStr, Encoding.UTF8\n                        );\n                    }\n                    else\n                    {\n                        var goldenStderrStr = File.ReadAllText(stderrPth);\n\n                        Assert.AreEqual(\n                            goldenStderrStr, stderrStr,\n                            $\"Content mismatch against {stderrPth}\"\n                        );\n\n                        var gotFiles = Directory.GetFiles(\n                            outputDir,\n                            \"*\",\n                            System.IO.SearchOption.AllDirectories\n                        );\n\n                        var expectedFiles = Directory.GetFiles(\n                            expectedOutputDir,\n                            \"*\",\n                            System.IO.SearchOption.AllDirectories\n                        );\n\n                        var relativeGotFileSet = gotFiles.Select(\n                            pth => Path.GetRelativePath(outputDir, pth)\n                        ).ToImmutableSortedSet();\n\n                        var relativeExpectedFileSet = expectedFiles.Select(\n                            pth => Path.GetRelativePath(expectedOutputDir, pth)\n                        ).ToImmutableSortedSet();\n", "                        if (!relativeExpectedFileSet.SetEquals(relativeExpectedFileSet))\n                        {\n                            throw new AssertionException(\n                                $\"Expected files: {relativeExpectedFileSet}, \" +\n                                $\"but got: {relativeGotFileSet}\"\n                            );\n                        }\n\n                        foreach (var relativePth in relativeExpectedFileSet)\n                        {\n                            var gotPth = Path.Join(outputDir, relativePth);\n                            var expectedPth = Path.Join(expectedOutputDir, relativePth);\n\n                            var gotText = File.ReadAllText(gotPth, Encoding.UTF8)\n                                .Replace(\"\\r\", \"\");\n\n                            var expectedText =\n                                File.ReadAllText(expectedPth, Encoding.UTF8)\n                                    .Replace(\"\\r\", \"\");\n", "                        foreach (var relativePth in relativeExpectedFileSet)\n                        {\n                            var gotPth = Path.Join(outputDir, relativePth);\n                            var expectedPth = Path.Join(expectedOutputDir, relativePth);\n\n                            var gotText = File.ReadAllText(gotPth, Encoding.UTF8)\n                                .Replace(\"\\r\", \"\");\n\n                            var expectedText =\n                                File.ReadAllText(expectedPth, Encoding.UTF8)\n                                    .Replace(\"\\r\", \"\");\n", "                            if (gotText != expectedText)\n                            {\n                                throw new AssertionException(\n                                    \"Mismatch in content between \" +\n                                    $\"{gotPth} and {expectedPth}\"\n                                );\n                            }\n                        }\n                    }\n                }\n                finally\n                {\n                    tempDir?.Dispose();\n                }\n            }\n        }\n    }\n}"]}
{"filename": "src/EnvironmentFromCsvConceptDescriptions/ParsingConceptDescriptions.cs", "chunked_list": ["\ufeffusing Aas = AasCore.Aas3_0; // renamed\nusing System.Collections.Generic; // can't alias\n\nnamespace EnvironmentFromCsvConceptDescriptions\n{\n    internal static class ParsingConceptDescriptions\n    {\n        internal static class ColumnNames\n        {\n            internal const string Id = \"ID\";\n            internal const string PreferredName = \"Preferred Name\";\n            internal const string ShortName = \"Short Name\";\n            internal const string Unit = \"Unit\";\n            internal const string Symbol = \"Symbol\";\n            internal const string Definition = \"Definition\";\n            internal const string SourceOfDefinition = \"Source of Definition\";\n        }\n\n        internal static readonly List<string> ExpectedHeader = new()\n        {\n            ColumnNames.Id,\n            ColumnNames.PreferredName,\n            ColumnNames.ShortName,\n            ColumnNames.Unit,\n            ColumnNames.Symbol,\n            ColumnNames.Definition,\n            ColumnNames.SourceOfDefinition\n        };\n\n        internal static (\n            Registering.TypedRegistry<Aas.IConceptDescription>?,\n            List<string>?\n            ) ParseTable(CsvParsing.CsvDictionaryReader csv)\n        {\n            var error = csv.ReadHeader();", "            if (error != null)\n            {\n                return (\n                    null,\n                    new List<string>() { $\"Failed to parse the header: {error}\" }\n                );\n            }\n\n            var errors = CsvParsing.Parsing.CheckHeader(\n                ExpectedHeader, csv.Header\n            );", "            if (errors != null)\n            {\n                return (null, errors);\n            }\n\n            // First row corresponds to the header.\n            var rowIndex = 1;\n\n            errors = new List<string>();\n\n            var registry = new Registering.TypedRegistry<Aas.IConceptDescription>();\n", "            while (true)\n            {\n                error = csv.ReadRow();\n                rowIndex++;\n\n                if (error != null)\n                {\n                    errors.Add($\"In row {rowIndex}: {error}\");\n                    return (null, errors);\n                }\n", "                if (csv.Row == null)\n                {\n                    break;\n                }\n\n                List<string>? rowErrors = null;\n\n                var id = csv.Row[ColumnNames.Id];\n                if (id == \"\")\n                {\n                    rowErrors ??= new List<string>();\n                    rowErrors.Add(\n                        $\"In row {rowIndex} \" +\n                        $\"and column {ColumnNames.Id}: \" +\n                        \"Unexpected empty\"\n                    );\n                }\n\n                var preferredName = csv.Row[ColumnNames.PreferredName];", "                if (id == \"\")\n                {\n                    rowErrors ??= new List<string>();\n                    rowErrors.Add(\n                        $\"In row {rowIndex} \" +\n                        $\"and column {ColumnNames.Id}: \" +\n                        \"Unexpected empty\"\n                    );\n                }\n\n                var preferredName = csv.Row[ColumnNames.PreferredName];", "                if (preferredName == \"\")\n                {\n                    rowErrors ??= new List<string>();\n                    rowErrors.Add(\n                        $\"In row {rowIndex} \" +\n                        $\"and column {ColumnNames.PreferredName}: \" +\n                        \"Unexpected empty\"\n                    );\n                }\n\n                if (rowErrors != null)\n                {\n                    errors.AddRange(rowErrors);\n                    continue;\n                }\n\n                var shortName = csv.Row[ColumnNames.ShortName];\n                var unit = csv.Row[ColumnNames.Unit];\n                var symbol = csv.Row[ColumnNames.Symbol];\n                var definition = csv.Row[ColumnNames.Definition];\n                var sourceOfDefinition = csv.Row[ColumnNames.SourceOfDefinition];\n\n                var dataSpecificationContent = new Aas.DataSpecificationIec61360(\n                    new List<Aas.ILangStringPreferredNameTypeIec61360>\n                    {\n                        new Aas.LangStringPreferredNameTypeIec61360(\n                            \"en\",\n                            preferredName\n                        )\n                    }\n                )\n                {\n                    ShortName = (shortName.Length > 0)\n                        ? new List<Aas.ILangStringShortNameTypeIec61360>\n                        {\n                            new Aas.LangStringShortNameTypeIec61360(\n                                \"en\",\n                                shortName\n                            )\n                        }\n                        : null,\n                    Unit = (unit.Length > 0)\n                        ? unit\n                        : null,\n                    Symbol = (symbol.Length > 0)\n                        ? symbol\n                        : null,\n                    Definition = (definition.Length > 0)\n                        ? new List<Aas.ILangStringDefinitionTypeIec61360>\n                        {\n                            new Aas.LangStringDefinitionTypeIec61360(\n                                \"en\",\n                                definition\n                            )\n                        }\n                        : null,\n                    SourceOfDefinition = (sourceOfDefinition.Length > 0)\n                        ? sourceOfDefinition\n                        : null,\n                };\n\n                var conceptDescription = new Aas.ConceptDescription(id)\n                {\n                    EmbeddedDataSpecifications = new()\n                    {\n                        new Aas.EmbeddedDataSpecification(\n                            new Aas.Reference(\n                                Aas.ReferenceTypes.ExternalReference,\n                                new List<Aas.IKey>\n                                {\n                                    new Aas.Key(\n                                        Aas.KeyTypes.GlobalReference,\n                                        id\n                                    )\n                                }\n                            ),\n                            dataSpecificationContent\n                        )\n                    }\n                };\n\n                registry.Add(conceptDescription);\n            }\n", "                if (rowErrors != null)\n                {\n                    errors.AddRange(rowErrors);\n                    continue;\n                }\n\n                var shortName = csv.Row[ColumnNames.ShortName];\n                var unit = csv.Row[ColumnNames.Unit];\n                var symbol = csv.Row[ColumnNames.Symbol];\n                var definition = csv.Row[ColumnNames.Definition];\n                var sourceOfDefinition = csv.Row[ColumnNames.SourceOfDefinition];\n\n                var dataSpecificationContent = new Aas.DataSpecificationIec61360(\n                    new List<Aas.ILangStringPreferredNameTypeIec61360>\n                    {\n                        new Aas.LangStringPreferredNameTypeIec61360(\n                            \"en\",\n                            preferredName\n                        )\n                    }\n                )\n                {\n                    ShortName = (shortName.Length > 0)\n                        ? new List<Aas.ILangStringShortNameTypeIec61360>\n                        {\n                            new Aas.LangStringShortNameTypeIec61360(\n                                \"en\",\n                                shortName\n                            )\n                        }\n                        : null,\n                    Unit = (unit.Length > 0)\n                        ? unit\n                        : null,\n                    Symbol = (symbol.Length > 0)\n                        ? symbol\n                        : null,\n                    Definition = (definition.Length > 0)\n                        ? new List<Aas.ILangStringDefinitionTypeIec61360>\n                        {\n                            new Aas.LangStringDefinitionTypeIec61360(\n                                \"en\",\n                                definition\n                            )\n                        }\n                        : null,\n                    SourceOfDefinition = (sourceOfDefinition.Length > 0)\n                        ? sourceOfDefinition\n                        : null,\n                };\n\n                var conceptDescription = new Aas.ConceptDescription(id)\n                {\n                    EmbeddedDataSpecifications = new()\n                    {\n                        new Aas.EmbeddedDataSpecification(\n                            new Aas.Reference(\n                                Aas.ReferenceTypes.ExternalReference,\n                                new List<Aas.IKey>\n                                {\n                                    new Aas.Key(\n                                        Aas.KeyTypes.GlobalReference,\n                                        id\n                                    )\n                                }\n                            ),\n                            dataSpecificationContent\n                        )\n                    }\n                };\n\n                registry.Add(conceptDescription);\n            }\n", "            if (errors.Count > 0)\n            {\n                return (null, errors);\n            }\n\n            return (registry, null);\n        }\n    }\n}"]}
{"filename": "src/EnvironmentFromCsvConceptDescriptions/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\nusing System.Collections.Generic; // can't alias\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis; // can't alias\n\n\nnamespace EnvironmentFromCsvConceptDescriptions\n{\n    public static class Program\n    {\n        private static (\n            Registering.TypedRegistry<Aas.IConceptDescription>?,\n            List<string>?\n            ) ReadConceptDescriptions(\n                System.IO.FileInfo conceptDescriptionsFile\n            )\n        {", "    public static class Program\n    {\n        private static (\n            Registering.TypedRegistry<Aas.IConceptDescription>?,\n            List<string>?\n            ) ReadConceptDescriptions(\n                System.IO.FileInfo conceptDescriptionsFile\n            )\n        {\n            if (!conceptDescriptionsFile.Exists)\n            {\n                return (null, new List<string>() { \"The file does not exist\" });\n            }\n\n            using var reader = conceptDescriptionsFile.OpenText();\n\n            var csv = new CsvParsing.CsvDictionaryReader(\n                new CsvParsing.CsvReader(reader)\n            );\n\n            return ParsingConceptDescriptions.ParseTable(\n                csv\n            );\n        }\n", "            if (!conceptDescriptionsFile.Exists)\n            {\n                return (null, new List<string>() { \"The file does not exist\" });\n            }\n\n            using var reader = conceptDescriptionsFile.OpenText();\n\n            var csv = new CsvParsing.CsvDictionaryReader(\n                new CsvParsing.CsvReader(reader)\n            );\n\n            return ParsingConceptDescriptions.ParseTable(\n                csv\n            );\n        }\n", "        public static int Execute(\n            List<string> conceptDescriptionPaths,\n            string output,\n            System.IO.Stream? stdout,\n            System.IO.TextWriter stderr\n        )\n        {\n            List<string> errors = new();\n\n            Registering.TypedRegistry<Aas.IConceptDescription> registry = new();\n", "            foreach (var pth in conceptDescriptionPaths)\n            {\n                var csvFile = new System.IO.FileInfo(pth);\n\n                // ReSharper disable once JoinDeclarationAndInitializer\n                Registering.TypedRegistry<Aas.IConceptDescription>? subRegistry;\n\n                // ReSharper disable once JoinDeclarationAndInitializer\n                List<string>? readErrors;\n\n                (subRegistry, readErrors) =\n                    ReadConceptDescriptions(csvFile);\n", "                if (readErrors != null)\n                {\n                    foreach (var error in readErrors)\n                    {\n                        errors.Add($\"In {csvFile.FullName}: {error}\");\n                    }\n                }\n                else\n                {\n                    if (subRegistry == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected conceptDescriptionSubRegistry null\"\n                        );\n                    }\n", "                    if (subRegistry == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected conceptDescriptionSubRegistry null\"\n                        );\n                    }\n\n                    foreach (var item in subRegistry.Items)\n                    {\n                        var existingConceptDescription =\n                            registry.TryGet(item.Id);\n", "                        if (existingConceptDescription != null)\n                        {\n                            var existingEnh =\n                                CsvEnhancing.Enhancing.Unwrapper.MustUnwrap(\n                                    existingConceptDescription\n                                );\n\n                            var itemEnh =\n                                CsvEnhancing.Enhancing.Unwrapper.MustUnwrap(\n                                    item\n                                );\n\n                            errors.Add(\n                                $\"In {csvFile.FullName} \" +\n                                $\"on row {itemEnh.RowIndex + 1}: \" +\n                                \"the concept description has been already \" +\n                                $\"defined in {existingEnh.Path} \" +\n                                $\"on row {existingEnh.RowIndex + 1}\"\n                            );\n                        }\n                        else\n                        {\n                            registry.Add(item);\n                        }\n                    }\n                }\n            }\n\n            var environment = new Aas.Environment()\n            {\n                ConceptDescriptions = registry.Items.Count > 0\n                    ? new(registry.Items)\n                    : null\n            };\n", "            if (errors.Count > 0)\n            {\n                stderr.WriteLine(\"There were one or more errors:\");\n                foreach (var error in errors)\n                {\n                    stderr.WriteLine($\"* {error}\");\n                }\n\n                return 1;\n            }\n\n            var errorMessage = CommonOutputting.Jsonization.Serialize(\n                environment, output, stdout\n            );", "            if (errorMessage != null)\n            {\n                stderr.WriteLine(errorMessage);\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var columnsJoined =\n                string.Join(\n                    \",\",\n                    ParsingConceptDescriptions.ExpectedHeader\n                );\n\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Translate concept descriptions, captured \" +\n                    \"as a pre-defined CSV file, into an AAS environment serialized \" +\n                    \"to JSON.\\n\\n\" +\n                    $\"The expected header is:\\n{columnsJoined}\"\n                );\n\n            var conceptDescriptionsOption = new System.CommandLine.Option<\n                List<string>\n            >(\n                name: \"--concept-descriptions\",\n                description:\n                \"One or more files containing the information about \" +\n                \"the concept descriptions in CSV format\"\n            )\n            { IsRequired = true, Arity = ArgumentArity.OneOrMore };\n            rootCommand.AddOption(conceptDescriptionsOption);\n\n            var outputOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--output\",\n                description: \"The JSON file containing the AAS Environment; \" +\n                             \"if '-', output to STDOUT\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(outputOption);\n\n            rootCommand.SetHandler(\n                (\n                    conceptDescriptionPaths,\n                    output\n                ) =>\n                {\n                    System.IO.Stream? stdout = null;", "                    if (output == \"-\")\n                    {\n                        stdout = System.Console.OpenStandardInput();\n                    }\n\n                    try\n                    {\n                        return System.Threading.Tasks.Task.FromResult(\n                            Execute(\n                                conceptDescriptionPaths,\n                                output,\n                                stdout,\n                                System.Console.Error\n                            )\n                        );\n                    }\n                    finally\n                    {\n                        stdout?.Close();\n                    }\n                },\n                conceptDescriptionsOption,\n                outputOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/Registering/Registering.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\n// ReSharper disable RedundantUsingDirective\nusing System.Collections.Generic;  // can't alias\n\nnamespace Registering\n{\n    public class TypedRegistry<T> where T : Aas.IIdentifiable\n    {\n        private readonly List<T> _items = new();\n        private readonly Dictionary<string, T> _map = new();\n", "        private readonly List<T> _items = new();\n        private readonly Dictionary<string, T> _map = new();\n\n        public void Add(T instance)\n        {\n            if (TryGet(instance.Id) != null)\n            {\n                throw new System.ArgumentException(\n                    \"An instance with \" +\n                    $\"the same ID already contained: {instance.Id}\"\n                );\n            }\n\n            _items.Add(instance);\n            _map[instance.Id] = instance;\n        }\n", "        public T MustGet(string identifier)\n        {\n            _map.TryGetValue(identifier, out T? result);\n            if (result == null)\n            {\n                throw new KeyNotFoundException(identifier);\n            }\n\n            return result;\n        }\n\n        public T? TryGet(string identifier)\n        {\n            _map.TryGetValue(identifier, out T? result);\n            return result;\n        }\n\n        public IReadOnlyCollection<T> Items => _items;\n    }\n}"]}
{"filename": "src/CommonOutputting/Jsonization.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\n\nnamespace CommonOutputting\n{\n    public static class Jsonization\n    {\n        /**\n         * <summary>Output the environment either to a file or to STDOUT.</summary>\n         * <returns>Error message, if any</returns>\n         */\n        public static string? Serialize(\n            Aas.IEnvironment environment,\n            string output,\n            System.IO.Stream? stdout\n        )\n        {\n            System.Text.Json.Nodes.JsonObject? jsonObject;\n\n            try\n            {\n                jsonObject = Aas.Jsonization.Serialize.ToJsonObject(environment);\n            }", "        public static string? Serialize(\n            Aas.IEnvironment environment,\n            string output,\n            System.IO.Stream? stdout\n        )\n        {\n            System.Text.Json.Nodes.JsonObject? jsonObject;\n\n            try\n            {\n                jsonObject = Aas.Jsonization.Serialize.ToJsonObject(environment);\n            }", "            catch (Aas.Jsonization.Exception exception)\n            {\n                return (\n                    $\"Failed to serialize the environment to JSON: {exception.Message}\"\n                );\n            }\n\n            var writerOptions = new System.Text.Json.JsonWriterOptions\n            {\n                Indented = true\n            };\n\n            try\n            {", "                if (output == \"-\")\n                {\n                    if (stdout == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected null stdout\"\n                        );\n                    }\n\n                    using var writer = new System.Text.Json.Utf8JsonWriter(\n                        stdout, writerOptions\n                    );\n                    jsonObject.WriteTo(writer);\n                }\n                else\n                {\n                    using var outputStream = System.IO.File.OpenWrite(output);\n                    using var writer =\n                        new System.Text.Json.Utf8JsonWriter(\n                            outputStream,\n                            writerOptions\n                        );\n                    jsonObject.WriteTo(writer);\n                }\n            }", "            catch (System.Exception exception)\n            {\n                return $\"Failed to write to {output}: {exception.Message}\";\n            }\n\n            return null;\n        }\n    }\n}\n"]}
{"filename": "src/EnvironmentFromCsvShellsAndSubmodels/ParsingAssetAdministrationShellsAndSubmodels.cs", "chunked_list": ["\ufeffusing Aas = AasCore.Aas3_0; // renamed\n\nusing System.Collections.Generic;  // can't alias\nusing System.Linq; // can't alias\n\nnamespace EnvironmentFromCsvShellsAndSubmodels\n{\n    internal static class ParsingAssetAdministrationShellsAndSubmodels\n    {\n        private static class ColumnNames\n        {\n            internal const string AssetAdministrationShellId =\n                \"Asset Administration Shell ID\";\n\n            internal const string SubmodelId = \"Submodel ID\";\n            internal const string SubmodelElement = \"Submodel Element\";\n            internal const string IdShort = \"ID-short\";\n            internal const string Value = \"Value\";\n            internal const string DataType = \"Data Type\";\n            internal const string ContentType = \"Content Type\";\n            internal const string Min = \"Min\";\n            internal const string Max = \"Max\";\n            internal const string SemanticId = \"Semantic ID\";\n        }\n", "        private static class ColumnNames\n        {\n            internal const string AssetAdministrationShellId =\n                \"Asset Administration Shell ID\";\n\n            internal const string SubmodelId = \"Submodel ID\";\n            internal const string SubmodelElement = \"Submodel Element\";\n            internal const string IdShort = \"ID-short\";\n            internal const string Value = \"Value\";\n            internal const string DataType = \"Data Type\";\n            internal const string ContentType = \"Content Type\";\n            internal const string Min = \"Min\";\n            internal const string Max = \"Max\";\n            internal const string SemanticId = \"Semantic ID\";\n        }\n", "        static class SubmodelElementTypes\n        {\n            internal const string Property = \"Property\";\n            internal const string File = \"File\";\n            internal const string Range = \"Range\";\n        }\n\n        private static readonly List<string> ExpectedEmptyColumnsInProperty =\n            new()\n            {\n                ColumnNames.Max,\n                ColumnNames.Min,\n                ColumnNames.ContentType\n            };\n\n        private static (Aas.ISubmodelElement?, List<string>?) ParseProperty(\n            IReadOnlyDictionary<string, string> row,\n            int rowIndex\n        )\n        {\n            List<string>? errors = null;\n\n            var dataType = Aas.Stringification.DataTypeDefXsdFromString(\n                row[ColumnNames.DataType]\n            );\n", "            if (row[ColumnNames.DataType].Length == 0)\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.DataType}: \" +\n                    \"Unexpected empty\"\n                );\n            }\n            else if (dataType == null)\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.DataType}: \" +\n                    $\"Invalid type {row[ColumnNames.DataType]}\"\n                );\n            }\n", "            else if (dataType == null)\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.DataType}: \" +\n                    $\"Invalid type {row[ColumnNames.DataType]}\"\n                );\n            }\n\n            foreach (var columnName in ExpectedEmptyColumnsInProperty)\n            {", "            foreach (var columnName in ExpectedEmptyColumnsInProperty)\n            {\n                if (row[columnName].Length != 0)\n                {\n                    errors ??= new();\n                    errors.Add(\n                        $\"In row {rowIndex} and column {columnName}: \" +\n                        \"Expected empty\"\n                    );\n                }\n            }\n\n            var idShort = row[ColumnNames.IdShort];", "            if (idShort == \"\")\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.IdShort}: \" +\n                    \"Unexpected empty\"\n                );\n            }\n\n            string value = row[ColumnNames.Value];\n\n            Aas.Reference? semanticId = null;\n            var semanticIdValue = row[ColumnNames.SemanticId];", "            if (semanticIdValue != \"\")\n            {\n                semanticId = new Aas.Reference(\n                    Aas.ReferenceTypes.ModelReference,\n                    new List<Aas.IKey>()\n                    {\n                        new Aas.Key(\n                            Aas.KeyTypes.ConceptDescription,\n                            semanticIdValue\n                        )\n                    }\n                );\n            }\n", "            if (errors != null)\n            {\n                return (null, errors);\n            }\n\n            var property = new Aas.Property(\n                dataType ?? throw new System.NullReferenceException()\n            )\n            {\n                IdShort = idShort != \"\" ? idShort : null,\n                Value = value != \"\" ? value : null,\n                SemanticId = semanticId\n            };\n\n            return (property, null);\n        }\n", "        private static readonly List<string> ExpectedEmptyColumnsInFile =\n            new()\n            {\n                ColumnNames.Max,\n                ColumnNames.Min,\n                ColumnNames.DataType,\n            };\n\n        private static (Aas.ISubmodelElement?, List<string>?) ParseFile(\n            IReadOnlyDictionary<string, string> row,\n            int rowIndex\n        )\n        {\n            List<string>? errors = null;\n\n            var contentType = row[ColumnNames.ContentType];\n", "            if (contentType == \"\")\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.ContentType}: \" +\n                    \"Unexpected empty\"\n                );\n            }\n\n            foreach (var columnName in ExpectedEmptyColumnsInFile)\n            {", "            foreach (var columnName in ExpectedEmptyColumnsInFile)\n            {\n                if (row[columnName].Length != 0)\n                {\n                    errors ??= new();\n                    errors.Add(\n                        $\"In row {rowIndex} and column {columnName}: \" +\n                        \"Expected empty\"\n                    );\n                }\n            }\n\n            var idShort = row[ColumnNames.IdShort];", "            if (idShort == \"\")\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.IdShort}: \" +\n                    \"Unexpected empty\"\n                );\n            }\n\n            string value = row[ColumnNames.Value];\n\n            Aas.Reference? semanticId = null;\n            var semanticIdValue = row[ColumnNames.SemanticId];", "            if (semanticIdValue != \"\")\n            {\n                semanticId = new Aas.Reference(\n                    Aas.ReferenceTypes.ModelReference,\n                    new List<Aas.IKey>()\n                    {\n                        new Aas.Key(\n                            Aas.KeyTypes.ConceptDescription,\n                            semanticIdValue\n                        )\n                    }\n                );\n            }\n", "            if (errors != null)\n            {\n                return (null, errors);\n            }\n\n            var file = new Aas.File(\n                contentType\n            )\n            {\n                IdShort = idShort != \"\" ? idShort : null,\n                Value = value != \"\" ? value : null,\n                SemanticId = semanticId\n            };\n\n            return (file, null);\n        }\n", "        private static readonly List<string> ExpectedEmptyColumnsInRange =\n            new()\n            {\n                ColumnNames.Value,\n                ColumnNames.ContentType\n            };\n\n        private static (Aas.ISubmodelElement?, List<string>?) ParseRange(\n            IReadOnlyDictionary<string, string> row,\n            int rowIndex\n        )\n        {\n            List<string>? errors = null;\n\n            var dataType = Aas.Stringification.DataTypeDefXsdFromString(\n                row[ColumnNames.DataType]\n            );\n", "            if (row[ColumnNames.DataType].Length == 0)\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.DataType}: \" +\n                    \"Unexpected empty\"\n                );\n            }\n            else if (dataType == null)\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.DataType}: \" +\n                    $\"Invalid type {row[ColumnNames.DataType]}\"\n                );\n            }\n", "            else if (dataType == null)\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.DataType}: \" +\n                    $\"Invalid type {row[ColumnNames.DataType]}\"\n                );\n            }\n\n            foreach (var columnName in ExpectedEmptyColumnsInRange)\n            {", "            foreach (var columnName in ExpectedEmptyColumnsInRange)\n            {\n                if (row[columnName].Length != 0)\n                {\n                    errors ??= new();\n                    errors.Add(\n                        $\"In row {rowIndex} and column {columnName}: \" +\n                        \"Expected empty\"\n                    );\n                }\n            }\n\n            var idShort = row[ColumnNames.IdShort];", "            if (idShort == \"\")\n            {\n                errors ??= new();\n                errors.Add(\n                    $\"In row {rowIndex} and column {ColumnNames.IdShort}: \" +\n                    \"Unexpected empty\"\n                );\n            }\n\n            Aas.Reference? semanticId = null;\n            var semanticIdValue = row[ColumnNames.SemanticId];", "            if (semanticIdValue != \"\")\n            {\n                semanticId = new Aas.Reference(\n                    Aas.ReferenceTypes.ModelReference,\n                    new List<Aas.IKey>()\n                    {\n                        new Aas.Key(\n                            Aas.KeyTypes.ConceptDescription,\n                            semanticIdValue\n                        )\n                    }\n                );\n            }\n", "            if (errors != null)\n            {\n                return (null, errors);\n            }\n\n            var min = row[ColumnNames.Min];\n            var max = row[ColumnNames.Max];\n\n            var range = new Aas.Range(\n                dataType ?? throw new System.NullReferenceException()\n            )\n            {\n                IdShort = idShort != \"\" ? idShort : null,\n                SemanticId = semanticId,\n                Min = min != \"\" ? min : null,\n                Max = max != \"\" ? max : null,\n            };\n\n            return (range, null);\n        }\n\n        internal static readonly List<string> ExpectedHeader = new()\n        {\n            ColumnNames.AssetAdministrationShellId,\n            ColumnNames.SubmodelId,\n            ColumnNames.SubmodelElement,\n            ColumnNames.IdShort,\n            ColumnNames.Value,\n            ColumnNames.DataType,\n            ColumnNames.ContentType,\n            ColumnNames.Min,\n            ColumnNames.Max,\n            ColumnNames.SemanticId,\n        };\n\n        internal static (\n            Registering.TypedRegistry<Aas.IAssetAdministrationShell>?,\n            Registering.TypedRegistry<Aas.ISubmodel>?,\n            List<string>?\n            ) ParseTable(CsvParsing.CsvDictionaryReader csv, string path)\n        {\n            var error = csv.ReadHeader();", "            if (error != null)\n            {\n                return (\n                    null,\n                    null,\n                    new List<string>() { $\"Failed to parse the header: {error}\" }\n                );\n            }\n\n            var errors = CsvParsing.Parsing.CheckHeader(\n                ExpectedHeader, csv.Header\n            );", "            if (errors != null)\n            {\n                return (null, null, errors);\n            }\n\n            var shellRegistry =\n                new Registering.TypedRegistry<Aas.IAssetAdministrationShell>();\n            var submodelRegistry = new Registering.TypedRegistry<Aas.ISubmodel>();\n\n            errors = new List<string>();\n\n            var shellIdToSubmodelIds =\n                new StrictlyIncreasingMapOfOrderedValues<string, string>();\n\n            // First row corresponds to the header.\n            var rowIndex = 1;\n\n            Aas.Enhancing.Enhancer<CsvEnhancing.Enhancing.Enhancement> enhancer =\n                new(\n                    // ReSharper disable once AccessToModifiedClosure\n                    (_) => new CsvEnhancing.Enhancing.Enhancement(\n                        rowIndex,\n                        path\n                    )\n                );\n", "            while (true)\n            {\n                error = csv.ReadRow();\n                rowIndex++;\n\n                if (error != null)\n                {\n                    errors.Add($\"In row {rowIndex}: {error}\");\n                    return (null, null, errors);\n                }\n", "                if (csv.Row == null)\n                {\n                    break;\n                }\n\n                #region Parse_shell_and_submodel\n\n                var shellId = csv.Row[ColumnNames.AssetAdministrationShellId];\n                var submodelId = csv.Row[ColumnNames.SubmodelId];\n\n                if (shellId == \"\" || submodelId == \"\")\n                {", "                if (shellId == \"\" || submodelId == \"\")\n                {\n                    if (shellId == \"\")\n                    {\n                        errors.Add(\n                            $\"In row {rowIndex} \" +\n                            $\"and column {ColumnNames.AssetAdministrationShellId}: \" +\n                            \"The ID is missing.\"\n                        );\n                    }\n", "                    if (submodelId == \"\")\n                    {\n                        errors.Add(\n                            $\"In row {rowIndex} \" +\n                            $\"and column {ColumnNames.SubmodelId}: \" +\n                            \"The ID is missing.\"\n                        );\n                    }\n\n                    continue;\n                }\n\n                var shell = shellRegistry.TryGet(shellId);", "                if (shell == null)\n                {\n                    shell = new Aas.AssetAdministrationShell(\n                        shellId,\n                        new Aas.AssetInformation(Aas.AssetKind.Instance)\n                    );\n                    shellRegistry.Add(shell);\n                }\n\n\n                var submodel = submodelRegistry.TryGet(submodelId);", "                if (submodel == null)\n                {\n                    submodel = new Aas.Submodel(submodelId);\n                    submodelRegistry.Add(submodel);\n                }\n\n                shellIdToSubmodelIds.Add(shellId, submodelId);\n\n                #endregion\n\n                #region Parse_submodel_element\n\n                var submodelElementType = csv.Row[ColumnNames.SubmodelElement];", "                if (submodelElementType == \"\")\n                {\n                    errors.Add(\n                        $\"In row {rowIndex} \" +\n                        $\"and column {ColumnNames.SubmodelElement}: \" +\n                        \"the type is missing\"\n                    );\n                    continue;\n                }\n\n                System.Func<\n                    IReadOnlyDictionary<string, string>,\n                    int,\n                    (Aas.ISubmodelElement?, List<string>?)\n                >? parsingFunc;\n\n                switch (csv.Row[ColumnNames.SubmodelElement])\n                {\n                    case SubmodelElementTypes.Property:\n                        parsingFunc = ParseProperty;\n                        break;\n                    case SubmodelElementTypes.Range:\n                        parsingFunc = ParseRange;\n                        break;\n                    case SubmodelElementTypes.File:\n                        parsingFunc = ParseFile;\n                        break;\n                    default:\n                        errors.Add(\n                            $\"In row {rowIndex} \" +\n                            $\"and column {ColumnNames.SubmodelElement}: \" +\n                            \"the type is invalid; expected either \" +\n                            $\"{SubmodelElementTypes.Property}, \" +\n                            $\"{SubmodelElementTypes.Range} or \" +\n                            $\"{SubmodelElementTypes.File}\"\n                        );\n                        continue;\n                }\n\n                var (submodelElement, parseErrors) = parsingFunc(\n                    csv.Row, rowIndex\n                );\n", "                if (parseErrors != null)\n                {\n                    errors.AddRange(parseErrors);\n                    continue;\n                }\n\n                if (submodelElement == null)\n                {\n                    throw new System.InvalidOperationException(\n                        \"Unexpected null submodelElement\"\n                    );\n                }\n\n                submodel.SubmodelElements ??=\n                    new List<Aas.ISubmodelElement>();\n\n                submodel.SubmodelElements.Add(\n                    (Aas.ISubmodelElement)enhancer.Wrap(\n                        submodelElement\n                    )\n                );\n\n                #endregion\n            }\n", "            if (errors.Count > 0)\n            {\n                return (null, null, errors);\n            }\n\n            #region Associate_submodels_and_shells\n\n            foreach (var (shellId, submodelIds) in shellIdToSubmodelIds)\n            {\n                var shell = shellRegistry.MustGet(shellId);\n                shell.Submodels = (\n                    submodelIds.Select(\n                            (id) => new Aas.Reference(\n                                Aas.ReferenceTypes.ModelReference,\n                                new List<Aas.IKey>()\n                                {\n                                    new Aas.Key(Aas.KeyTypes.Submodel, id)\n                                }\n                            )\n                        )\n                        .ToList<Aas.IReference>()\n                );\n            }\n\n            #endregion\n\n            return (shellRegistry, submodelRegistry, null);\n        }\n    }\n}"]}
{"filename": "src/EnvironmentFromCsvShellsAndSubmodels/Program.cs", "chunked_list": ["using Aas = AasCore.Aas3_0; // renamed\nusing System.Collections.Generic; // can't alias\nusing System.CommandLine; // can't alias\nusing System.Diagnostics.CodeAnalysis; // can't alias\n\n\nnamespace EnvironmentFromCsvShellsAndSubmodels\n{\n    public static class Program\n    {\n        private static (\n            Registering.TypedRegistry<Aas.IAssetAdministrationShell>?,\n            Registering.TypedRegistry<Aas.ISubmodel>?,\n            List<string>?\n            ) ReadAssetsAndSubmodels(\n                System.IO.FileInfo assetsAndSubmodels\n            )\n        {", "    public static class Program\n    {\n        private static (\n            Registering.TypedRegistry<Aas.IAssetAdministrationShell>?,\n            Registering.TypedRegistry<Aas.ISubmodel>?,\n            List<string>?\n            ) ReadAssetsAndSubmodels(\n                System.IO.FileInfo assetsAndSubmodels\n            )\n        {\n            if (!assetsAndSubmodels.Exists)\n            {\n                return (null, null, new List<string>() { \"The file does not exist\" });\n            }\n\n            using var reader = assetsAndSubmodels.OpenText();\n\n            var csv = new CsvParsing.CsvDictionaryReader(\n                new CsvParsing.CsvReader(reader)\n            );\n\n            return ParsingAssetAdministrationShellsAndSubmodels.ParseTable(\n                csv, assetsAndSubmodels.FullName\n            );\n        }\n", "            if (!assetsAndSubmodels.Exists)\n            {\n                return (null, null, new List<string>() { \"The file does not exist\" });\n            }\n\n            using var reader = assetsAndSubmodels.OpenText();\n\n            var csv = new CsvParsing.CsvDictionaryReader(\n                new CsvParsing.CsvReader(reader)\n            );\n\n            return ParsingAssetAdministrationShellsAndSubmodels.ParseTable(\n                csv, assetsAndSubmodels.FullName\n            );\n        }\n", "        public static int Execute(\n            List<string> assetAndSubmodelPaths,\n            string output,\n            System.IO.Stream? stdout,\n            System.IO.TextWriter stderr\n        )\n        {\n            List<string> errors = new();\n\n            Registering.TypedRegistry<Aas.IAssetAdministrationShell> shellRegistry =\n                new();\n            Registering.TypedRegistry<Aas.ISubmodel> submodelRegistry = new();\n", "            foreach (var pth in assetAndSubmodelPaths)\n            {\n                var csvFile = new System.IO.FileInfo(pth);\n\n                // ReSharper disable once JoinDeclarationAndInitializer\n                Registering.TypedRegistry<Aas.IAssetAdministrationShell>?\n                    shellSubRegistry;\n\n                // ReSharper disable once JoinDeclarationAndInitializer\n                Registering.TypedRegistry<Aas.ISubmodel>? submodelSubRegistry;\n\n                // ReSharper disable once JoinDeclarationAndInitializer\n                List<string>? readErrors;\n\n                (shellSubRegistry, submodelSubRegistry, readErrors) =\n                    ReadAssetsAndSubmodels(csvFile);\n", "                if (readErrors != null)\n                {\n                    foreach (var error in readErrors)\n                    {\n                        errors.Add($\"In {csvFile.FullName}: {error}\");\n                    }\n                }\n                else\n                {\n                    if (shellSubRegistry == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected shellSubRegistry null\"\n                        );\n                    }\n", "                    if (shellSubRegistry == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected shellSubRegistry null\"\n                        );\n                    }\n\n                    if (submodelSubRegistry == null)\n                    {\n                        throw new System.InvalidOperationException(\n                            \"Unexpected null submodelSubRegistry\"\n                        );\n                    }\n", "                    foreach (var item in shellSubRegistry.Items)\n                    {\n                        var existingShell = shellRegistry.TryGet(item.Id);\n                        if (existingShell != null)\n                        {\n                            var existingEnh =\n                                CsvEnhancing.Enhancing.Unwrapper.MustUnwrap(\n                                    existingShell\n                                );\n\n                            var itemEnh = CsvEnhancing.Enhancing.Unwrapper.MustUnwrap(\n                                item\n                            );\n\n                            errors.Add(\n                                $\"In {csvFile.FullName} \" +\n                                $\"on row {itemEnh.RowIndex + 1}: \" +\n                                \"the asset administration shell has been already \" +\n                                $\"defined in {existingEnh.Path} \" +\n                                $\"on row {existingEnh.RowIndex + 1}\"\n                            );\n                        }\n                        else\n                        {\n                            shellRegistry.Add(item);\n                        }\n                    }\n", "                    foreach (var item in submodelSubRegistry.Items)\n                    {\n                        var existingSubmodel = submodelRegistry.TryGet(item.Id);\n                        if (existingSubmodel != null)\n                        {\n                            var existingEnh =\n                                CsvEnhancing.Enhancing.Unwrapper.MustUnwrap(\n                                    existingSubmodel\n                                );\n\n                            var itemEnh = CsvEnhancing.Enhancing.Unwrapper.MustUnwrap(\n                                item\n                            );\n\n                            errors.Add(\n                                $\"In {csvFile.FullName} \" +\n                                $\"on row {itemEnh.RowIndex + 1}: \" +\n                                \"the submodel has been already defined in \" +\n                                $\"{existingEnh.Path} on row {existingEnh.RowIndex + 1}\"\n                            );\n                        }\n                        else\n                        {\n                            submodelRegistry.Add(item);\n                        }\n                    }\n                }\n            }\n", "            if (errors.Count > 0)\n            {\n                stderr.WriteLine(\"There were one or more errors:\");\n                foreach (var error in errors)\n                {\n                    stderr.WriteLine($\"* {error}\");\n                }\n\n                return 1;\n            }\n\n            var environment = new Aas.Environment()\n            {\n                AssetAdministrationShells = shellRegistry.Items.Count > 0\n                    ? new(shellRegistry.Items)\n                    : null,\n                Submodels = submodelRegistry.Items.Count > 0\n                    ? new(submodelRegistry.Items)\n                    : null\n            };\n\n            var errorMessage = CommonOutputting.Jsonization.Serialize(\n                environment, output, stdout\n            );", "            if (errorMessage != null)\n            {\n                stderr.WriteLine(errorMessage);\n                return 1;\n            }\n\n            return 0;\n        }\n\n        [SuppressMessage(\"ReSharper\", \"RedundantNameQualifier\")]\n        static async System.Threading.Tasks.Task<int> Main(string[] args)\n        {\n            var columnsJoined = string.Join(\n                \",\",\n                ParsingAssetAdministrationShellsAndSubmodels.ExpectedHeader\n            );\n\n            var rootCommand =\n                new System.CommandLine.RootCommand(\n                    \"Translate asset administration shells and submodels \" +\n                    \"from a pre-defined CSV table to an AAS environment serialized \" +\n                    \"to JSON.\\n\\n\" +\n                    \"The expected header is:\\n\" +\n                    $\"{columnsJoined}\"\n                );\n\n            var assetsAndSubmodelsOption = new System.CommandLine.Option<\n                List<string>\n            >(\n                name: \"--assets-and-submodels\",\n                description:\n                \"One or more files containing the information about \" +\n                \"the asset administration shells and submodels in CSV format\"\n            )\n            { IsRequired = true, Arity = ArgumentArity.OneOrMore };\n            rootCommand.AddOption(assetsAndSubmodelsOption);\n\n            var outputOption = new System.CommandLine.Option<\n                string\n            >(\n                name: \"--output\",\n                description: \"The JSON file containing the AAS Environment; \" +\n                             \"if '-', output to STDOUT\"\n            )\n            { IsRequired = true };\n            rootCommand.AddOption(outputOption);\n\n            rootCommand.SetHandler(\n                (\n                    assetAndSubmodelPaths,\n                    output\n                ) =>\n                {\n                    System.IO.Stream? stdout = null;", "                    if (output == \"-\")\n                    {\n                        stdout = System.Console.OpenStandardInput();\n                    }\n\n                    try\n                    {\n                        return System.Threading.Tasks.Task.FromResult(\n                            Execute(\n                                assetAndSubmodelPaths,\n                                output,\n                                stdout,\n                                System.Console.Error\n                            )\n                        );\n                    }\n                    finally\n                    {\n                        stdout?.Close();\n                    }\n                },\n                assetsAndSubmodelsOption,\n                outputOption\n            );\n\n            return await rootCommand.InvokeAsync(args);\n        }\n    }\n}"]}
{"filename": "src/EnvironmentFromCsvShellsAndSubmodels/StrictlyIncreasingMapOfOrderedValues.cs", "chunked_list": ["\ufeffusing System.Collections;  // can't alias\nusing System.Collections.Generic;  // can't alias\n\nnamespace EnvironmentFromCsvShellsAndSubmodels\n{\n    public class StrictlyIncreasingMapOfOrderedValues<TKey, TValue>\n        : IEnumerable<KeyValuePair<TKey, IReadOnlyList<TValue>>> where TKey : notnull\n    {\n        private readonly Dictionary<TKey, List<TValue>> _lists = new();\n\n        private readonly Dictionary<TKey, HashSet<TValue>> _sets = new();\n", "        private readonly Dictionary<TKey, List<TValue>> _lists = new();\n\n        private readonly Dictionary<TKey, HashSet<TValue>> _sets = new();\n\n        public void Add(TKey key, TValue value)\n        {\n            _lists.TryGetValue(key, out var list);\n            if (list == null)\n            {\n                list = new List<TValue>();\n                _lists.Add(key, list);\n            }\n\n            list.Add(value);\n\n            _sets.TryGetValue(key, out var set);", "            if (set == null)\n            {\n                set = new HashSet<TValue>();\n                _sets.Add(key, set);\n            }\n\n            set.Add(value);\n        }\n\n        public bool TryGetValues(TKey key, out IReadOnlyList<TValue>? values)\n        {\n            bool has = _lists.TryGetValue(key, out var mutableList);\n            values = mutableList;\n            return has;\n        }\n\n        public IEnumerator<KeyValuePair<TKey, IReadOnlyList<TValue>>> GetEnumerator()\n        {", "        public bool TryGetValues(TKey key, out IReadOnlyList<TValue>? values)\n        {\n            bool has = _lists.TryGetValue(key, out var mutableList);\n            values = mutableList;\n            return has;\n        }\n\n        public IEnumerator<KeyValuePair<TKey, IReadOnlyList<TValue>>> GetEnumerator()\n        {\n            foreach (var keyValue in _lists)\n            {\n                yield return new KeyValuePair<TKey, IReadOnlyList<TValue>>(\n                    keyValue.Key, keyValue.Value\n                );\n            }\n        }\n\n        IEnumerator IEnumerable.GetEnumerator()\n        {\n            return GetEnumerator();\n        }\n    }\n}", "            foreach (var keyValue in _lists)\n            {\n                yield return new KeyValuePair<TKey, IReadOnlyList<TValue>>(\n                    keyValue.Key, keyValue.Value\n                );\n            }\n        }\n\n        IEnumerator IEnumerable.GetEnumerator()\n        {\n            return GetEnumerator();\n        }\n    }\n}"]}
{"filename": "src/EnvironmentFromCsvShellsAndSubmodels.Tests/TestAgainstTestData.cs", "chunked_list": ["using Encoding = System.Text.Encoding;\nusing Path = System.IO.Path;\nusing System.Collections.Generic;  // can't alias\nusing System.Linq;  // can't alias\n\nusing NUnit.Framework;  // can't alias\n\nnamespace EnvironmentFromCsvShellsAndSubmodels.Tests\n{\n    public class TestsAgainstTestData\n    {\n        [Test]", "{\n    public class TestsAgainstTestData\n    {\n        [Test]\n        public void Test_against_recorded()\n        {\n            var testDataDir = Path.Join(\n                CommonTesting.TestData.TestDataDir,\n                \"EnvironmentFromCsvShellsAndSubmodels\"\n            );\n\n            var recordMode = CommonTesting.TestData.RecordMode;\n\n            var paths = System.IO.Directory.GetFiles(\n                testDataDir,\n                \"input.csv\",\n                System.IO.SearchOption.AllDirectories\n            ).ToList();\n            paths.Sort();\n", "            foreach (var inputPth in paths)\n            {\n                var caseDir = Path.GetDirectoryName(inputPth);\n\n                var stdoutPth = Path.Join(caseDir, \"output.json\");\n                var stderrPth = Path.Join(caseDir, \"stderr.txt\");\n\n                using var stdout = new System.IO.MemoryStream();\n                using var stderr = new System.IO.StringWriter();\n                Program.Execute(\n                    new List<string>() { inputPth },\n                    \"-\",\n                    stdout,\n                    stderr\n                );\n\n                string stderrStr = stderr.ToString();\n                stderrStr = stderrStr\n                    .Replace(\n                        new System.IO.FileInfo(\n                            inputPth\n                        ).FullName,\n                        \"<input.csv>\"\n                    )\n                    .Replace(\"\\r\", \"\");\n\n                stdout.Flush();\n                string stdoutStr = System.Text.Encoding.UTF8.GetString(\n                        stdout.ToArray()\n                    )\n                    .Replace(\"\\r\", \"\");\n", "                if (recordMode)\n                {\n                    stdout.Flush();\n                    System.IO.File.WriteAllText(\n                        stdoutPth, stdoutStr, Encoding.UTF8\n                    );\n                    System.IO.File.WriteAllText(\n                        stderrPth, stderrStr, Encoding.UTF8\n                    );\n                }\n                else\n                {\n                    var goldenStdout = System.IO.File.ReadAllText(\n                            stdoutPth, Encoding.UTF8\n                        )\n                        .Replace(\"\\r\", \"\");\n                    var goldenStderrStr = System.IO.File.ReadAllText(\n                            stderrPth, Encoding.UTF8\n                        )\n                        .Replace(\"\\r\", \"\");\n\n                    Assert.AreEqual(\n                        goldenStdout, stdoutStr,\n                        $\"Content mismatch against {stdoutPth}\"\n                    );\n                    Assert.AreEqual(\n                        goldenStderrStr, stderrStr,\n                        $\"Content mismatch against {stderrPth}\"\n                    );\n                }\n            }\n        }\n    }\n}"]}
