{"filename": "GenerateTestData/TestDataGenerator.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing UiPath.CodedWorkflows;\nusing UiPath.Core;\nusing UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;\nusing UiPath.Testing;\nusing UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;", "using UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;\nusing UiPath.UIAutomationNext.API.Contracts;\nusing UiPath.UIAutomationNext.API.Models;\nusing UiPath.UIAutomationNext.Enums;\nusing Microsoft.VisualBasic;\nusing System.Text;\nusing System.IO;\n", "using System.IO;\n\n// NOTICE: The Coded Automations feature is available as a preview feature and APIs may be subject to change. \n//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace GenerateTestData\n{\n    public class TestDataGenerator : CodedWorkflow\n    {\n        [Workflow]", "    public class TestDataGenerator : CodedWorkflow\n    {\n        [Workflow]\n        public void Execute()\n        {\n            string prompt = \"How many data records do you need?\";\n\t\t\tstring title = \"Test data generator\";\n\t\t\tint numberOfRecords = Int32.Parse(Interaction.InputBox(prompt, title, \"1\"));\n\t\t\t\n\t\t\t\n\t\t\t// Create a new DataTable\n\t\t\tDataTable dataTable = new DataTable(\"TestData\");\n\t\t\t\n\t\t\t// Add columns to the table\n\t\t\tdataTable.Columns.Add(\"FirstName\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"LastName\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"BirthDate\", typeof(DateTime));\n\t\t\tdataTable.Columns.Add(\"Country\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"ZipCode\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"City\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"StreetName\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"StreetNumber\", typeof(string));\n\t\t\tdataTable.Columns.Add(\"Income\", typeof(int));\n\t\t\t", "\t\t\tfor(int i =1; i<= numberOfRecords; i++){\n\t\t\t\t\n\t\t\t\tstring firstName = testing.GivenName();\n\t\t\t\tstring lastName = testing.LastName();\n\t\t\t\tDateTime birtDate = testing.RandomDate(DateTime.Now.AddYears(-100),DateTime.Now.AddYears(-18));\n\t\t\t\tvar address = testing.Address(\"<Random Country>\",\"<Random City>\");\n\t\t\t\tstring country = address[\"Country\"];\n\t\t\t\tstring zipCode = address[\"PostalCode\"];\n\t\t\t\tstring city = address[\"City\"];\n\t\t\t\tstring streetName = address[\"StreetName\"];\n\t\t\t\tstring streetNumber = address[\"StreetNumber\"];\n\t\t\t\tint income = (int)testing.RandomNumber(10000,50000);\t\t\t\n\t\t\t\t\n\t\t\t\tLog(\"Adding row: \"+i);\n\t\t\t\tdataTable.Rows.Add(firstName, lastName, birtDate, country, zipCode, city, streetName, streetNumber, income);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tSaveTestData(dataTable,\"testdata.csv\");\n\t\t\n\t\t}\n\t\t", "\t\tpublic static void SaveTestData(DataTable dataTable, string filePath)\n\t\t{\n\t\t    var sb = new StringBuilder();\n\t\t\n\t\t    // Write header row\n\t\t    for (int i = 0; i < dataTable.Columns.Count; i++)\n\t\t    {\n\t\t        sb.Append(dataTable.Columns[i].ColumnName);\n\t\t        if (i < dataTable.Columns.Count - 1)\n\t\t            sb.Append(\",\");\n\t\t    }\n\t\t    sb.AppendLine();\n\t\t\n\t\t    // Write data rows", "\t\t        if (i < dataTable.Columns.Count - 1)\n\t\t            sb.Append(\",\");\n\t\t    }\n\t\t    sb.AppendLine();\n\t\t\n\t\t    // Write data rows\n\t\t    foreach (DataRow row in dataTable.Rows)\n\t\t    {\n\t\t        for (int i = 0; i < dataTable.Columns.Count; i++)\n\t\t        {\n\t\t            sb.Append(row[i].ToString());", "\t\t        for (int i = 0; i < dataTable.Columns.Count; i++)\n\t\t        {\n\t\t            sb.Append(row[i].ToString());\n\t\t            if (i < dataTable.Columns.Count - 1)\n\t\t                sb.Append(\",\");\n\t\t        }\n\t\t        sb.AppendLine();\n\t\t    }\n\t\t\n\t\t    // Save the CSV file\n\t\t    File.WriteAllText(filePath, sb.ToString());\n\t\t}\n    }\n}"]}
{"filename": "PythonSeleniumTestsInteroperability/PythonWorkflowUtils.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing UiPath.CodedWorkflows;\n\n// NOTICE: The Coded Workflows feature is available as a Public Preview and APIs may be subject to change. \n// Additionally, no warranty or technical support is provided for this preview feature.\n// Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// For more information, please visit the documentation over at https://docs.uipath.com/studio/docs/coded-workflows.\n// Feel free to delete these comments after you've read and acknowledged them.", "// For more information, please visit the documentation over at https://docs.uipath.com/studio/docs/coded-workflows.\n// Feel free to delete these comments after you've read and acknowledged them.\nnamespace PythonSeleniumTestsInteroperability\n{\n    public class PythonWorkflowUtils\n    {\n        private readonly Action<string> invokeWorkflow;\n\t\tprivate readonly Action<string> log;\n\n        public PythonWorkflowUtils(Action<string> invokeWorkflow, Action<string> log)\n\t\t{\n            this.invokeWorkflow = invokeWorkflow;\n\t\t\tthis.log = log;\n        }\n\t\t", "\t\tpublic void RunWorkflow(string workflowPath)\n\t\t{\n\t\t\tinvokeWorkflow(workflowPath);\n\t\t}\n\t\t\n\t\tpublic void Log(string text)\n\t\t{\n\t\t\tlog(text);\n\t\t}\n    }\n}"]}
{"filename": "PythonSeleniumTestsInteroperability/PythonEngineBuilder.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.Scripting.Hosting;\n\n// NOTICE: The Coded Workflows feature is available as a Public Preview and APIs may be subject to change. \n// Additionally, no warranty or technical support is provided for this preview feature.\n// Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// For more information, please visit the documentation over at https://docs.uipath.com/studio/docs/coded-workflows.\n// Feel free to delete these comments after you've read and acknowledged them.", "// For more information, please visit the documentation over at https://docs.uipath.com/studio/docs/coded-workflows.\n// Feel free to delete these comments after you've read and acknowledged them.\nnamespace PythonSeleniumTestsInteroperability\n{\n    public static class PythonEngineBuilder\n    {\n        public static ScriptEngine Build()\n\t\t{\n\t\t\tvar pyEngine = IronPython.Hosting.Python.CreateEngine();\n\t\t\tpyEngine.SetSearchPaths(new[] { \n\t\t\t\t@\"C:\\Program Files\\IronPython 3.4\\Lib\",\n\t\t\t    @\"C:\\Program Files\\IronPython 3.4\\Lib\\site-packages\"\n\t\t\t});\n\t\t\treturn pyEngine;\n\t\t}\n    }\n}"]}
{"filename": "PythonSeleniumTestsInteroperability/TestCase_SeleniumTest.cs", "chunked_list": ["using System;\nusing System.Activities;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Threading.Tasks;\nusing UiPath.Activities.Contracts;\nusing UiPath.CodedWorkflows;\n\nnamespace PythonSeleniumTestsInteroperability", "\nnamespace PythonSeleniumTestsInteroperability\n{\n    public class TestCase_SeleniumTest : PythonCodedWorkflowWrapper\n    {\n\t\t// This is a wrapped Selenium test in Python, which we additionally augmented with some UiPath Platform services.\n\t\t// The approach showcases how you can use the coded automations framework in order to either:\n\t\t//\n\t\t// 1) Gradually transition your Selenium tests to UiPath test cases.\n\t\t// 2) Run Selenium test cases but have reporting, monitoring, parallelization and verification handled through UiPath's platform.\n\t\t// 3) Leverage UiPath activity packages within Selenium tests (e.g. UI Automation for scenarios which Selenium can't handle) \n\t\t//    or run custom UiPath workflows within them.\n        [TestCase]\n\t\t[WorkflowDependency(\"Sequence.xaml\")]", "        public void Execute(System.String UserName=\"CodedAutomations\",System.String Email=\"coded@uipath.com\",System.String VerificationText=\"CodedAutomations\")\t\t\n\t\t{\n\t\t\tvar vars = new Dictionary<string, object>()\n\t\t\t{\n\t\t\t\t{ \"userName\", UserName },\n\t\t\t\t{ \"email\", Email },\n\t\t\t\t{ \"verificationText\", VerificationText },\n\t\t\t\t\n\t\t\t\t// We can pass any of our services, e.g. system, testing or uiAutomation directly into Python when using this approach\n\t\t\t\t{ \"testingService\", testing }\n\t\t\t};\n\t\t\t\n\t\t\tvar result = RunPythonScript(\"SeleniumTest.py\", vars, new string[] { \"windowTitle\" } );\n\t\t\t\n\t\t\tLog(\"Window Title: \" + result[\"windowTitle\"].ToString());\n        }\n    }\n}"]}
{"filename": "PythonSeleniumTestsInteroperability/PythonCodedWorkflowWrapper.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing Microsoft.Scripting.Hosting;\n\n// NOTICE: The Coded Automations feature is available as a preview feature and APIs may be subject to change. \n//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace PythonSeleniumTestsInteroperability", "// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace PythonSeleniumTestsInteroperability\n{\n    public class PythonCodedWorkflowWrapper : CodedWorkflow\n    {\n\t\tprotected Lazy<PythonWorkflowUtils> _workflowUtils;\n\t\tprivate Lazy<ScriptEngine> _engine;\n\t\t\n\t\tpublic PythonCodedWorkflowWrapper()\n\t\t{\n\t\t\t_workflowUtils = new Lazy<PythonWorkflowUtils>(() => new PythonWorkflowUtils(a => RunWorkflow(a), a => Log(a)));\n\t\t\t_engine = new Lazy<ScriptEngine>(() => PythonEngineBuilder.Build());\n\t\t}\n\t\t", "\t\tprotected void Close()\n\t\t{\n\t\t\t_engine.Value.Runtime.Shutdown();\n\t\t}\n\t\t\n        protected IDictionary<string, dynamic> RunPythonScript(string filePath, IDictionary<string, object> variables, IEnumerable<string> outputVariableNames = null, bool closePythonEngine = true)\n\t\t{\n\t\t\tvar pyEngine = PythonEngineBuilder.Build();\n\t\t\t\n\t\t\tvar scope = pyEngine.CreateScope();\n\t\t\t", "\t\t\tforeach (var variable in variables)\n\t\t\t{\n\t\t\t\tscope.SetVariable(variable.Key, variable.Value);\n\t\t\t}\n\t\t\t\n\t\t\tscope.SetVariable(\"workflowUtils\", _workflowUtils.Value);\n\n\t\t\tvar outScope = pyEngine.ExecuteFile(Path.Combine(Environment.CurrentDirectory, filePath), scope);\n\t\t\t\n\t\t\tvar outputs = new Dictionary<string, object>();\n\t\t\tif (outputVariableNames != null)\n\t\t\t{", "\t\t\tif (outputVariableNames != null)\n\t\t\t{\n\t\t\t\tforeach (var outVar in outputVariableNames)\n\t\t\t\t{\n\t\t\t\t\toutputs.Add(outVar, outScope.GetVariable(outVar));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tClose();\n\t\t\t\n\t\t\treturn outputs;\n\t\t}\n    }\n}"]}
{"filename": "SAP_WinGUI_Coded_Automation_Project/SAP VA01.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing UiPath.CodedWorkflows;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing UiPath.CodedWorkflows;\nusing UiPath.Core;\nusing UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;", "using UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;\nusing UiPath.Testing;\nusing UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;\nusing UiPath.UIAutomationNext.API.Contracts;\nusing UiPath.UIAutomationNext.API.Models;\nusing UiPath.UIAutomationNext.Enums;\nusing SAP_WinGUI_Coded_Automation;", "using UiPath.UIAutomationNext.Enums;\nusing SAP_WinGUI_Coded_Automation;\n\n// NOTICE: The Coded Automations feature is available as a preview feature and APIs may be subject to change. \n//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace SAP_CodedWorkFlow\n{\n    public class SAP_VA01 : CodedWorkflow\n    {\n        [TestCase]", "{\n    public class SAP_VA01 : CodedWorkflow\n    {\n        [TestCase]\n        public void Execute()\n        {\n            // Arrange\n            //Log(\"Test run started for SAP_VA01.\");\n\t\t\t\n\t\t\t\n            // Act\n            // To invoke any workflow (XAML or coded), you can use ;helper methods in CodedWorkflow, e.g. RunWorkflow(...).\n\t\t\t\n\t\t\t// Run the existing SAP Login XAML file\n\t\t\tRunWorkflow(\"SetupEnv_LoginUser.xaml\");\t\n\t\t\n\t\t\tvar SAPEasyAccessApp = uiAutomation.Attach(\"SAP Easy Access\");\n\t\t\tSAPEasyAccessApp.TypeInto(\"OkCodeField okcd\", \"/nva01[k(Enter)]\");\n\t\t\t\n            // Create Sale Order Document\n\t\t\tvar CreateSalesDoc = uiAutomation.Attach(\"Create Sales Documents\", \"SAPWinGui\", \"1.0.0\");\n\t\t\tCreateSalesDoc.TypeInto(\"Order Type\",\"OR\");\n\t\t\tCreateSalesDoc.TypeInto(\"Distribution Channel\",\"10\");\n\t\t\tCreateSalesDoc.TypeInto(\"Division\",\"00\");\n\t\t\tCreateSalesDoc.Click(\"Continue\");\n\t\t\t\n\t\t\t// Create Sales Order\n\t\t\tvar createSalesOrder = uiAutomation.Attach(\"Create Standard Order: Overview\",\"SAPWinGui\", \"1.0.0\");\n\t\t\tcreateSalesOrder.TypeInto(\"Sold-To Party\",\"EWM17-CU01\");\n\t\t\tcreateSalesOrder.TypeInto(\"Ship-To Party\",\"EWM17-CU01\");\n\t\t\tcreateSalesOrder.TypeInto(\"Cust. Reference\",\"SAP Coded Automation Demo\");\n\t\t\tcreateSalesOrder.TypeInto(\"Cust. Ref. Date\",\"05/05/2023\");\n\t\t\tcreateSalesOrder.TypeInto(\"CTextField Material\",\"TG11\");\n\t\t\tcreateSalesOrder.TypeInto(\"TextField Order Quantity\",\"1\");\n\t\t\tcreateSalesOrder.Click(\"Save\");\n\t\t\t\n\t\t\t// Store the value from the SAP Status bar\n\t\t\tvar statusbar = createSalesOrder.GetText(\"Status Bar\");\n\t\t\t\n\t\t\tLog(statusbar);\n\n            // Assert\n            // To start using activities, use IntelliSense (CTRL + Space) to discover the available services, e.g. testing.VerifyExpression(...).\n\n\t\t\t// Assert the value in the SAP Status bar\n            testing.VerifyExpression(statusbar == \"has not been\");\n\t\t\t\n\t\t\t// Run the existing SAP Log off XAML file\n\t\t\tRunWorkflow(\"SAP_Logoff.xaml\");\n\t\t\t\t\n\t\t\t}\n    }\n}"]}
{"filename": "Form.CrossBrowser.Tests/TestCase.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Security;\nusing Form.CrossBrowser.Tests;\nusing UiPath.CodedWorkflows;\nusing UiPath.Core;\nusing UiPath.Core.Activities;\nusing UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;", "using UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;\nusing UiPath.Testing;\nusing UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;\nusing UiPath.UIAutomationNext.API.Contracts;\nusing UiPath.UIAutomationNext.API.Models;\nusing UiPath.UIAutomationNext.Enums;\n", "using UiPath.UIAutomationNext.Enums;\n\n// For more information, please visit the documentation over at https://docs.uipath.com/studio/standalone/2023.10/user-guide/coded-automations-introduction.\nnamespace Form.CrossBrowser.Tests\n{\n    public class TestCase : CodedWorkflow\n    {\n        // Pre-requisite: Create the FormCredential credential in Orchestrator\n        [TestCase]\n        public void Execute(System.String browserName = \"msedge.exe\")\n        {\n            // Arrange\n            \n            var screen = uiAutomation.Open(\"FormScreen\", Options.AppOpen().WithVariable(\"browserName\", browserName));\n            screen.TypeInto(\"Name\", \"Alvin\");\n\n            var credential = system.GetCredential(\"FormCredential\", null, out var password, CacheStrategyEnum.None, 30000);\n            screen.TypeInto(\"Email\", credential);\n\n            var actualPassword = new System.Net.NetworkCredential(string.Empty, password).Password;\n            screen.TypeInto(\"Password\", actualPassword);\n            screen.TypeInto(\"ConfirmPassword\", actualPassword);\n\n            // Act\n            screen.Click(\"Submit\");\n\n            // Assert\n            testing.VerifyExpression(screen.GetText(\"Verification\") == \"Alvin\");\n        }\n    }\n}", "        public void Execute(System.String browserName = \"msedge.exe\")\n        {\n            // Arrange\n            \n            var screen = uiAutomation.Open(\"FormScreen\", Options.AppOpen().WithVariable(\"browserName\", browserName));\n            screen.TypeInto(\"Name\", \"Alvin\");\n\n            var credential = system.GetCredential(\"FormCredential\", null, out var password, CacheStrategyEnum.None, 30000);\n            screen.TypeInto(\"Email\", credential);\n\n            var actualPassword = new System.Net.NetworkCredential(string.Empty, password).Password;\n            screen.TypeInto(\"Password\", actualPassword);\n            screen.TypeInto(\"ConfirmPassword\", actualPassword);\n\n            // Act\n            screen.Click(\"Submit\");\n\n            // Assert\n            testing.VerifyExpression(screen.GetText(\"Verification\") == \"Alvin\");\n        }\n    }\n}"]}
{"filename": "RandomQueueGenerator/GenerateQueue.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing QueueDefinitions;\nusing UiPath.CodedWorkflows;\nusing UiPath.Core;\n", "using UiPath.Core;\n\n// NOTICE: The Coded Automations feature is available as a preview feature and APIs may be subject to change. \n//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace RandomQueueGenerator\n{\n  public class GenerateQueue : CodedWorkflow\n  {\n    [Workflow]", "  public class GenerateQueue : CodedWorkflow\n  {\n    [Workflow]\n    public void Execute()\n    {\n      // Create a new queue (based on the service created from the Orchestrator's swagger.json)\n      var client = BuildClient();\n      var queueClient = new QueueDefinitionsClient(client);\n\n      var queueName = \"SampleQueue\" + Guid.NewGuid().ToString(\"N\");\n      var queue = queueClient.PostAsync(new QueueDefinitionDto() { Name = queueName }, null).Result;\n\n      Log(queue.Id.ToString());\n\n      Parallel.ForEach(Enumerable.Range(0, 100), i =>\n      {\n        var data = new Dictionary<string, object>()\n        {\n          { \"Address\", testing.Address(\"Romania\", \"Bucharest\")[\"City\"].ToString() },\n          { \"FirstName\", testing.GivenName() },\n          { \"LastName\", testing.LastName() }\n        };\n\n        system.AddQueueItem(queueName, null, DateTime.UtcNow, data, DateTime.UtcNow, QueueItemPriority.Normal, i.ToString(), 15000);\n      });\n    }\n  }\n}"]}
{"filename": "Interoperability/CodedAutomationUsingCodedAutomation.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing UiPath.CodedWorkflows;\nusing UiPath.Core;\nusing UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;\nusing UiPath.Testing;\nusing UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;", "using UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;\nusing UiPath.UIAutomationNext.API.Contracts;\nusing UiPath.UIAutomationNext.API.Models;\nusing UiPath.UIAutomationNext.Enums;\n\n// NOTICE: The Coded Automations feature is available as a preview feature and APIs may be subject to change. \n//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!", "//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace CodedWorkflowInteroperability\n{\n  public class CodedAutomationUsingCodedAutomation : CodedWorkflow\n  {\n    [Workflow]\n    public void Execute()\n    {\n      // Requirements:\n      // - Create an asset of type Text called MyAsset in the current folder.\n\n      var result = RunWorkflow(\"BusinessProcess\\\\CodedResetAssetValue.cs\", new Dictionary<string, object>()\n      {\n        {\"assetName\", \"MyAsset\"},\n        {\"assetValue\", \"hello world\"}\n      });\n", "    public void Execute()\n    {\n      // Requirements:\n      // - Create an asset of type Text called MyAsset in the current folder.\n\n      var result = RunWorkflow(\"BusinessProcess\\\\CodedResetAssetValue.cs\", new Dictionary<string, object>()\n      {\n        {\"assetName\", \"MyAsset\"},\n        {\"assetValue\", \"hello world\"}\n      });\n", "      if ((bool)result[\"assetValueWasChanged\"])\n      {\n        Log(\"Reset asset MyAsset, but it had a different value, previous value was \" + result[\"assetValue\"]);\n      }\n      else\n      {\n        Log(\"No reset was required on asset MyAsset, which had the expected value.\");\n      }\n    }\n  }\n}"]}
{"filename": "Interoperability/CodedAutomationUsingWorkflow.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing UiPath.CodedWorkflows;\nusing UiPath.Core;\nusing UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;\nusing UiPath.Testing;\nusing UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;", "using UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;\nusing UiPath.UIAutomationNext.API.Contracts;\nusing UiPath.UIAutomationNext.API.Models;\nusing UiPath.UIAutomationNext.Enums;\n\nnamespace CodedWorkflowInteroperability\n{\n  public class CodedAutomationUsingWorkflows : CodedWorkflow\n  {\n    [Workflow]", "{\n  public class CodedAutomationUsingWorkflows : CodedWorkflow\n  {\n    [Workflow]\n    public void Execute()\n    {\n      // Requirements:\n      // - Create an asset of type Text called MyAsset in the current folder.\n\n      var result = RunWorkflow(\"BusinessProcess\\\\ResetAssetValue.xaml\", new Dictionary<string, object>()\n      {\n        {\"assetName\", \"MyAsset\"},\n        {\"assetValue\", \"hello world\"}\n      });\n", "      if ((bool)result[\"assetValueWasChanged\"])\n      {\n        Log(\"Reset asset MyAsset, but it had a different value, previous value was \" + result[\"assetValue\"]);\n      }\n      else\n      {\n        Log(\"No reset was required on asset MyAsset, which had the expected value.\");\n      }\n    }\n  }\n}"]}
{"filename": "Interoperability/BusinessProcess/CodedResetAssetValue.cs", "chunked_list": ["using UiPath.CodedWorkflows;\nusing System.Collections.Generic;\n\nnamespace CodedWorkflowInteroperability\n{\n  public class CodedResetAssetValue : CodedWorkflow\n  {\n    [Workflow]\n    public (bool assetValueWasChanged, string assetValue) Execute(string assetName, string assetValue)\n    {\n      // Equivalent implementation for ResetAssetValue.xaml in code in order to highlight how parameters work in coded automations.\n      // Resets an asset to a specific value if needed. If an asset value is changed, we will also return the previous value.\n      var previousAssetValue = system.GetAsset(assetName).ToString();\n", "      if (previousAssetValue.Equals(assetValue))\n      {\n        return (assetValueWasChanged: false, assetValue: assetValue);\n      }\n      else\n      {\n        system.SetAsset(assetValue, assetName);\n        return (assetValueWasChanged: true, assetValue: previousAssetValue);\n      }\n\n    }\n  }\n}"]}
{"filename": "Interoperability/ExpressionHelpers/TimeSpanHelper.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Data;\nusing UiPath.Core;\nusing UiPath.Core.Activities.Storage;\nusing UiPath.Orchestrator.Client.Models;\nusing UiPath.Testing;\nusing UiPath.Testing.Activities.TestData;\nusing UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;", "using UiPath.Testing.Activities.TestDataQueues.Enums;\nusing UiPath.Testing.Enums;\nusing UiPath.UIAutomationNext.API.Contracts;\nusing UiPath.UIAutomationNext.API.Models;\nusing UiPath.UIAutomationNext.Enums;\n\n// NOTICE: The Coded Automations feature is available as a preview feature and APIs may be subject to change. \n//         No warranty or technical support is provided for this preview feature.\n//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.", "//         Missing features or encountering bugs? Please click the feedback button in the top-right corner and let us know!\n// Please delete these comments after you've read and acknowledged them. For more information, please visit the documentation over at https://docs.uipath.com/studio/lang-en/v2023.4/docs/coded-automations.\nnamespace CodedWorkflowInteroperability\n{\n  public class TimeSpanHelper\n  {\n    private static Random _random = new Random();\n    private static object _lockObj = new object();\n\n    public static TimeSpan GetRandomTimeSpanBetween(int lowerBoundMs, int upperBoundMs)\n    {\n      lock (_lockObj)\n      {\n        var ms = _random.Next(lowerBoundMs, upperBoundMs);\n        return TimeSpan.FromMilliseconds(ms);\n      }\n    }\n  }\n}", "    public static TimeSpan GetRandomTimeSpanBetween(int lowerBoundMs, int upperBoundMs)\n    {\n      lock (_lockObj)\n      {\n        var ms = _random.Next(lowerBoundMs, upperBoundMs);\n        return TimeSpan.FromMilliseconds(ms);\n      }\n    }\n  }\n}"]}
