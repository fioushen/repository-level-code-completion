{"filename": "AssemblyInfo.cs", "chunked_list": ["using System.Reflection;\nusing System.Windows;\n\n[assembly: ThemeInfo(\n    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located\n                                     //(used if a resource is not found in the page,\n                                     // or application resource dictionaries)\n    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located\n                                              //(used if a resource is not found in the page,\n                                              // app, or any theme specific resource dictionaries)", "                                              //(used if a resource is not found in the page,\n                                              // app, or any theme specific resource dictionaries)\n)]\n\n[assembly: AssemblyVersion(\"0.5.*\")]\n[assembly: AssemblyTitle(\"Supernote Desktop Client\")]\n[assembly: AssemblyProduct(\"Supernote Desktop Client\")]\n[assembly: AssemblyCopyright(\"Copyright  nelinory 2023\")]\n[assembly: System.Runtime.Versioning.TargetPlatformAttribute(\"Windows7.0\")]\n[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute(\"Windows7.0\")]", "[assembly: System.Runtime.Versioning.TargetPlatformAttribute(\"Windows7.0\")]\n[assembly: System.Runtime.Versioning.SupportedOSPlatformAttribute(\"Windows7.0\")]"]}
{"filename": "App.xaml.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Serilog;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Core.Win32Api;\nusing SupernoteDesktopClient.Services;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System;\nusing System.Diagnostics;\nusing System.IO;", "using System.Diagnostics;\nusing System.IO;\nusing System.Reflection;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Threading;\nusing Wpf.Ui.Mvvm.Contracts;\nusing Wpf.Ui.Mvvm.Services;\n", "using Wpf.Ui.Mvvm.Services;\n\nnamespace SupernoteDesktopClient\n{\n    /// <summary>\n    /// Interaction logic for App.xaml\n    /// </summary>\n    public partial class App\n    {\n        private static readonly Mutex _appMutex = new Mutex(true, \"C5FDA39A-40DA-4C77-842B-0C878F0D73C2\");\n        private static readonly string _logsPath = Path.Combine(FileSystemManager.GetApplicationFolder(), \"Logs\");\n\n        // The.NET Generic Host provides dependency injection, configuration, logging, and other services.\n        // https://docs.microsoft.com/dotnet/core/extensions/generic-host\n        // https://docs.microsoft.com/dotnet/core/extensions/dependency-injection\n        // https://docs.microsoft.com/dotnet/core/extensions/configuration\n        // https://docs.microsoft.com/dotnet/core/extensions/logging", "        private static readonly Mutex _appMutex = new Mutex(true, \"C5FDA39A-40DA-4C77-842B-0C878F0D73C2\");\n        private static readonly string _logsPath = Path.Combine(FileSystemManager.GetApplicationFolder(), \"Logs\");\n\n        // The.NET Generic Host provides dependency injection, configuration, logging, and other services.\n        // https://docs.microsoft.com/dotnet/core/extensions/generic-host\n        // https://docs.microsoft.com/dotnet/core/extensions/dependency-injection\n        // https://docs.microsoft.com/dotnet/core/extensions/configuration\n        // https://docs.microsoft.com/dotnet/core/extensions/logging\n        private static readonly IHost _host = Host\n            .CreateDefaultBuilder()\n            .ConfigureServices((context, services) =>\n            {\n                // App Host\n                services.AddHostedService<ApplicationHostService>();\n\n                // Framework services\n                services.AddSingleton<IPageService, PageService>();\n                services.AddSingleton<IThemeService, ThemeService>();\n                services.AddSingleton<ITaskBarService, TaskBarService>();\n                services.AddSingleton<ISnackbarService, SnackbarService>();\n\n                // Custom services\n                services.AddSingleton<IUsbHubDetector, UsbHubDetector>();\n                services.AddSingleton<IMediaDeviceService, MediaDeviceService>();\n                services.AddSingleton<ISyncService, SyncService>();\n\n                // Service containing navigation, same as INavigationWindow... but without window\n                services.AddSingleton<INavigationService, NavigationService>();\n\n                // Main window with navigation\n                services.AddScoped<INavigationWindow, Views.Windows.MainWindow>();\n                services.AddScoped<ViewModels.MainWindowViewModel>();\n\n                // Views and ViewModels\n                services.AddScoped<Views.Pages.AboutPage>();\n                services.AddScoped<ViewModels.AboutViewModel>();\n                services.AddScoped<Views.Pages.DashboardPage>();\n                services.AddScoped<ViewModels.DashboardViewModel>();\n                services.AddScoped<Views.Pages.ExplorerPage>();\n                services.AddScoped<ViewModels.ExplorerViewModel>();\n                services.AddScoped<Views.Pages.SettingsPage>();\n                services.AddScoped<ViewModels.SettingsViewModel>();\n                services.AddScoped<Views.Pages.SyncPage>();\n                services.AddScoped<ViewModels.SyncViewModel>();\n            })\n            .UseSerilog()\n            .Build();\n\n        /// <summary>\n        /// Gets registered service.\n        /// </summary>\n        /// <typeparam name=\"T\">Type of the service to get.</typeparam>\n        /// <returns>Instance of the service or <see langword=\"null\"/>.</returns>", "        private static readonly IHost _host = Host\n            .CreateDefaultBuilder()\n            .ConfigureServices((context, services) =>\n            {\n                // App Host\n                services.AddHostedService<ApplicationHostService>();\n\n                // Framework services\n                services.AddSingleton<IPageService, PageService>();\n                services.AddSingleton<IThemeService, ThemeService>();\n                services.AddSingleton<ITaskBarService, TaskBarService>();\n                services.AddSingleton<ISnackbarService, SnackbarService>();\n\n                // Custom services\n                services.AddSingleton<IUsbHubDetector, UsbHubDetector>();\n                services.AddSingleton<IMediaDeviceService, MediaDeviceService>();\n                services.AddSingleton<ISyncService, SyncService>();\n\n                // Service containing navigation, same as INavigationWindow... but without window\n                services.AddSingleton<INavigationService, NavigationService>();\n\n                // Main window with navigation\n                services.AddScoped<INavigationWindow, Views.Windows.MainWindow>();\n                services.AddScoped<ViewModels.MainWindowViewModel>();\n\n                // Views and ViewModels\n                services.AddScoped<Views.Pages.AboutPage>();\n                services.AddScoped<ViewModels.AboutViewModel>();\n                services.AddScoped<Views.Pages.DashboardPage>();\n                services.AddScoped<ViewModels.DashboardViewModel>();\n                services.AddScoped<Views.Pages.ExplorerPage>();\n                services.AddScoped<ViewModels.ExplorerViewModel>();\n                services.AddScoped<Views.Pages.SettingsPage>();\n                services.AddScoped<ViewModels.SettingsViewModel>();\n                services.AddScoped<Views.Pages.SyncPage>();\n                services.AddScoped<ViewModels.SyncViewModel>();\n            })\n            .UseSerilog()\n            .Build();\n\n        /// <summary>\n        /// Gets registered service.\n        /// </summary>\n        /// <typeparam name=\"T\">Type of the service to get.</typeparam>\n        /// <returns>Instance of the service or <see langword=\"null\"/>.</returns>", "        public static T GetService<T>()\n            where T : class\n        {\n            return _host.Services.GetService(typeof(T)) as T;\n        }\n\n        /// <summary>\n        /// Occurs when the application is loading.\n        /// </summary>\n        private async void OnStartup(object sender, StartupEventArgs e)\n        {\n            ForceSingleInstance();\n\n            ConfigureLogging();\n\n            SetupUnhandledExceptionHandling();\n\n            DiagnosticLogger.Log($\"Sdc {ApplicationManager.GetAssemblyVersion()} started...\");\n\n            await _host.StartAsync();\n        }\n\n        /// <summary>\n        /// Occurs when the application is closing.\n        /// </summary>", "        private async void OnStartup(object sender, StartupEventArgs e)\n        {\n            ForceSingleInstance();\n\n            ConfigureLogging();\n\n            SetupUnhandledExceptionHandling();\n\n            DiagnosticLogger.Log($\"Sdc {ApplicationManager.GetAssemblyVersion()} started...\");\n\n            await _host.StartAsync();\n        }\n\n        /// <summary>\n        /// Occurs when the application is closing.\n        /// </summary>", "        private async void OnExit(object sender, ExitEventArgs e)\n        {\n            DiagnosticLogger.Log($\"Sdc {ApplicationManager.GetAssemblyVersion()} exited...\");\n\n            // flush all log items before exit\n            Log.CloseAndFlush();\n\n            await _host.StopAsync();\n\n            _host.Dispose();\n        }\n", "        private static void ForceSingleInstance()\n        {\n            if (_appMutex.WaitOne(TimeSpan.Zero, true) == true)\n            {\n                _appMutex.ReleaseMutex();\n\n                // show splash window\n                SplashScreen splash = new SplashScreen(@\"assets\\spash.png\");\n                splash.Show(true, true);\n            }\n            else\n            {\n                Process[] processes = Process.GetProcessesByName(Assembly.GetEntryAssembly().GetName().Name);\n                {", "                    if (processes.Length > 0)\n                    {\n                        NativeMethods.ShowWindowEx(processes[0].MainWindowHandle, NativeMethods.SW_RESTORE_WINDOW);\n                        NativeMethods.SetForegroundWindowEx(processes[0].MainWindowHandle);\n                    }\n                }\n\n                Application.Current.Shutdown();\n            }\n        }\n", "        private static void ConfigureLogging()\n        {\n            // configure logging\n            Log.Logger = new LoggerConfiguration()\n               .MinimumLevel.Information()\n               .Enrich.FromLogContext()\n               .WriteTo.Logger(p => p\n                                .Filter.ByExcluding(p => p.Properties.ContainsKey(\"IsDiag\"))\n                                .WriteTo.File(Path.Combine(_logsPath, \"Sdc-.log\"),\n                                outputTemplate: \"{Timestamp:MM/dd/yyyy HH:mm:ss.fff} [{Level:u3}] {Message:lj}{NewLine}{Exception}\",\n                                rollingInterval: RollingInterval.Day,\n                                retainedFileCountLimit: 7))\n               .WriteTo.Logger(p => p\n                                .Filter.ByIncludingOnly(p => p.Properties.ContainsKey(\"IsDiag\"))\n                                .WriteTo.File(Path.Combine(_logsPath, \"Sdc-Diag-.log\"),\n                                outputTemplate: \"{Timestamp:MM/dd/yyyy HH:mm:ss.fff} [{Level:u3}] {Message:lj}{NewLine}\",\n                                rollingInterval: RollingInterval.Day,\n                                retainedFileCountLimit: 7))\n               .CreateLogger();\n        }\n", "        private void SetupUnhandledExceptionHandling()\n        {\n            // handler for all exceptions from all threads - can recover\n            AppDomain.CurrentDomain.UnhandledException += delegate (object sender, UnhandledExceptionEventArgs e)\n            {\n                ShowExceptionAndExit(e.ExceptionObject as Exception, \"AppDomain.CurrentDomain.UnhandledException\");\n            };\n\n            // handler for exceptions from each AppDomain that uses a task scheduler for async operations - can recover\n            TaskScheduler.UnobservedTaskException += delegate (object sender, UnobservedTaskExceptionEventArgs e)\n            {\n                ShowExceptionAndExit(e.Exception, \"TaskScheduler.UnobservedTaskException\");\n            };\n\n            // handler for all exceptions from a single dispatcher thread - cannot recover\n            Current.DispatcherUnhandledException += delegate (object sender, DispatcherUnhandledExceptionEventArgs e)\n            {\n                // If we are debugging, let Visual Studio handle the exception and take us to the code that threw it", "                if (Debugger.IsAttached == false)\n                {\n                    e.Handled = true;\n                    ShowExceptionAndExit(e.Exception, \"Current.DispatcherUnhandledException\");\n                }\n            };\n        }\n\n        private void ShowExceptionAndExit(Exception ex, string exceptionType)\n        {\n            Log.Error(\"Fatal application exception: {EX}\", ex);\n\n            string errorMessage = $\"A fatal application error occurred: {ex.Message}\\n\\nPlease, check error logs at:\\n{_logsPath} for more details.\\n\\nApplication will close now.\";\n            MessageBox.Show(errorMessage, $\"Sdc - Fatal Error: {exceptionType}\", MessageBoxButton.OK, MessageBoxImage.Error);\n\n            try\n            {\n                SettingsManager.Instance.Save();\n            }", "        private void ShowExceptionAndExit(Exception ex, string exceptionType)\n        {\n            Log.Error(\"Fatal application exception: {EX}\", ex);\n\n            string errorMessage = $\"A fatal application error occurred: {ex.Message}\\n\\nPlease, check error logs at:\\n{_logsPath} for more details.\\n\\nApplication will close now.\";\n            MessageBox.Show(errorMessage, $\"Sdc - Fatal Error: {exceptionType}\", MessageBoxButton.OK, MessageBoxImage.Error);\n\n            try\n            {\n                SettingsManager.Instance.Save();\n            }", "            catch (Exception)\n            {\n                // ignore we are exiting anyway\n            }\n\n            Application.Current.Shutdown();\n        }\n    }\n}"]}
{"filename": "ViewModels/ExplorerViewModel.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Messaging;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Messages;\nusing SupernoteDesktopClient.Models;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing Wpf.Ui.Common.Interfaces;\n", "using Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.ViewModels\n{\n    public partial class ExplorerViewModel : ObservableObject, INavigationAware\n    {\n        // services\n        private readonly IMediaDeviceService _mediaDeviceService;\n\n        [ObservableProperty]\n        private ObservableCollection<FileSystemObjectInfo> _items;\n\n        [ObservableProperty]", "        private bool _hasItems;\n\n        [ObservableProperty]\n        private bool _convertionInProgress = false;\n\n        public void OnNavigatedTo()\n        {\n            DiagnosticLogger.Log($\"{this}\");\n\n            LoadExplorer();\n        }\n", "        public void OnNavigatedFrom()\n        {\n        }\n\n        public ExplorerViewModel(IMediaDeviceService mediaDeviceService)\n        {\n            _mediaDeviceService = mediaDeviceService;\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<ProgressTrackActionMessage>(this, (r, m) =>\n            {\n                ConvertionInProgress = m.Value;\n            });\n        }\n", "        private void LoadExplorer()\n        {\n            Items = new ObservableCollection<FileSystemObjectInfo>();\n            string localPath = Path.Combine(FileSystemManager.GetApplicationDeviceFolder(), _mediaDeviceService.SupernoteInfo.SerialNumberHash);\n\n            DirectoryInfo deviceDirectory = new DirectoryInfo(localPath);\n            if (deviceDirectory.Exists == true)\n            {\n                FileSystemObjectInfo fileSystemObject = new FileSystemObjectInfo(deviceDirectory)\n                {\n                    IsExpanded = true\n                };\n\n                Items = new ObservableCollection<FileSystemObjectInfo> { fileSystemObject };\n            }\n\n            HasItems = Items.Count > 0;\n        }\n    }\n}\n"]}
{"filename": "ViewModels/SyncViewModel.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing CommunityToolkit.Mvvm.Messaging;\nusing Microsoft.Toolkit.Uwp.Notifications;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Extensions;\nusing SupernoteDesktopClient.Messages;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System;\nusing System.Collections.ObjectModel;", "using System;\nusing System.Collections.ObjectModel;\nusing System.Threading.Tasks;\nusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.ViewModels\n{\n    public partial class SyncViewModel : ObservableObject, INavigationAware\n    {\n        // services\n        private readonly IMediaDeviceService _mediaDeviceService;", "        private readonly IMediaDeviceService _mediaDeviceService;\n        private readonly ISyncService _syncService;\n\n        [ObservableProperty]\n        private bool _isDeviceConnected;\n\n        [ObservableProperty]\n        private bool _isSyncRunning;\n\n        [ObservableProperty]\n        private string _sourceFolder;\n\n        [ObservableProperty]", "        private string _sourceFolder;\n\n        [ObservableProperty]\n        private string _backupFolder;\n\n        [ObservableProperty]\n        private string _lastBackupDateTime;\n\n        [ObservableProperty]\n        private ObservableCollection<Models.ArchiveFileAttributes> _archiveFiles;\n\n        [ObservableProperty]", "        private bool _archivesVisible;\n\n        public void OnNavigatedTo()\n        {\n            DiagnosticLogger.Log($\"{this}\");\n\n            UpdateSync();\n        }\n\n        public void OnNavigatedFrom()\n        {\n        }\n\n        public SyncViewModel(IMediaDeviceService mediaDeviceService, ISyncService syncService)\n        {\n            // services\n            _mediaDeviceService = mediaDeviceService;\n            _syncService = syncService;\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<MediaDeviceChangedMessage>(this, (r, m) => { UpdateSync(m.Value); });\n        }\n\n        [RelayCommand]", "        public void OnNavigatedFrom()\n        {\n        }\n\n        public SyncViewModel(IMediaDeviceService mediaDeviceService, ISyncService syncService)\n        {\n            // services\n            _mediaDeviceService = mediaDeviceService;\n            _syncService = syncService;\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<MediaDeviceChangedMessage>(this, (r, m) => { UpdateSync(m.Value); });\n        }\n\n        [RelayCommand]", "        private async Task ExecuteSync()\n        {\n            IsSyncRunning = true;\n\n            await Task.Run(() => _syncService.Sync());\n\n            IsSyncRunning = false;\n\n            UpdateSync();\n        }\n", "        private void UpdateSync(DeviceInfo deviceInfo = null)\n        {\n            _mediaDeviceService.RefreshMediaDeviceInfo();\n\n            SourceFolder = _mediaDeviceService.SupernoteInfo.RootFolder;\n\n            // Backup\n            BackupFolder = _syncService.BackupFolder ?? \"N/A\";\n\n            // Last backup DateTime\n            DateTime? lastBackupDateTime = FileSystemManager.GetFolderCreateDateTime(BackupFolder);\n            LastBackupDateTime = (lastBackupDateTime != null) ? lastBackupDateTime.GetValueOrDefault().ToString(\"F\") : \"N/A\";\n\n            // Archive\n            ArchiveFiles = ArchiveManager.GetArchivesList(_syncService.ArchiveFolder);\n            ArchivesVisible = ArchiveFiles.Count > 0;\n\n            IsSyncRunning = _syncService.IsBusy;\n            IsDeviceConnected = _mediaDeviceService.IsDeviceConnected;\n\n            // auto sync on connect", "            if (SettingsManager.Instance.Settings.Sync.AutomaticSyncOnConnect == true && deviceInfo?.IsConnected == true)\n            {\n                ExecuteSync().Await();\n\n                new ToastContentBuilder()\n                .AddText(\"Automatic sync completed\")\n                .Show();\n            }\n        }\n    }\n}\n"]}
{"filename": "ViewModels/MainWindowViewModel.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Messaging;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Messages;\nusing SupernoteDesktopClient.Services.Contracts;\nusing SupernoteDesktopClient.Views.Pages;\nusing System.Collections.ObjectModel;\nusing System.Windows;\nusing Wpf.Ui.Appearance;\nusing Wpf.Ui.Common;", "using Wpf.Ui.Appearance;\nusing Wpf.Ui.Common;\nusing Wpf.Ui.Controls;\nusing Wpf.Ui.Controls.Interfaces;\nusing Wpf.Ui.Controls.Navigation;\nusing Wpf.Ui.Mvvm.Contracts;\n\nnamespace SupernoteDesktopClient.ViewModels\n{\n    public partial class MainWindowViewModel : ObservableObject\n    {\n        // services", "{\n    public partial class MainWindowViewModel : ObservableObject\n    {\n        // services\n        private readonly ISnackbarService _snackbarService;\n        private readonly IUsbHubDetector _usbHubDetector;\n        private readonly INavigationService _navigationService;\n        private readonly IMediaDeviceService _mediaDeviceService;\n\n        [ObservableProperty]\n        private bool _isDeviceConnected;\n\n        [ObservableProperty]\n        private ObservableCollection<INavigationControl> _navigationItems = new();\n\n        [ObservableProperty]\n        private ObservableCollection<INavigationControl> _navigationFooter = new();\n\n        [ObservableProperty]", "        private bool _isDeviceConnected;\n\n        [ObservableProperty]\n        private ObservableCollection<INavigationControl> _navigationItems = new();\n\n        [ObservableProperty]\n        private ObservableCollection<INavigationControl> _navigationFooter = new();\n\n        [ObservableProperty]\n        private bool _minimizeToTrayEnabled = SettingsManager.Instance.Settings.General.MinimizeToTrayEnabled;\n\n        public MainWindowViewModel(ISnackbarService snackbarService, IUsbHubDetector usbHubDetector, INavigationService navigationService, IMediaDeviceService mediaDeviceService)\n        {\n            // services\n            _snackbarService = snackbarService;\n            _usbHubDetector = usbHubDetector;\n            _navigationService = navigationService;\n            _mediaDeviceService = mediaDeviceService;\n\n            // event handler\n            _usbHubDetector.UsbHubStateChanged += UsbHubDetector_UsbHubStateChanged;\n\n            BuildNavigationMenu();\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<SettingsChangedMessage>(this, (r, m) =>\n            {", "        private bool _minimizeToTrayEnabled = SettingsManager.Instance.Settings.General.MinimizeToTrayEnabled;\n\n        public MainWindowViewModel(ISnackbarService snackbarService, IUsbHubDetector usbHubDetector, INavigationService navigationService, IMediaDeviceService mediaDeviceService)\n        {\n            // services\n            _snackbarService = snackbarService;\n            _usbHubDetector = usbHubDetector;\n            _navigationService = navigationService;\n            _mediaDeviceService = mediaDeviceService;\n\n            // event handler\n            _usbHubDetector.UsbHubStateChanged += UsbHubDetector_UsbHubStateChanged;\n\n            BuildNavigationMenu();\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<SettingsChangedMessage>(this, (r, m) =>\n            {", "                if (m.Value == SettingsChangedMessage.MINIMIZE_TO_TRAY_ENABLED)\n                    MinimizeToTrayEnabled = SettingsManager.Instance.Settings.General.MinimizeToTrayEnabled;\n            });\n\n            // offline mode indicator\n            IsDeviceConnected = _mediaDeviceService.IsDeviceConnected;\n        }\n\n        private void BuildNavigationMenu()\n        {\n            NavigationItems = new ObservableCollection<INavigationControl>\n            {\n                new NavigationItem()\n                {\n                    Content = \"Dashboard\",\n                    PageTag = \"dashboard\",\n                    ToolTip = \"Dashboard\",\n                    Icon = SymbolRegular.Home24,\n                    PageType = typeof(DashboardPage)\n                },\n                new NavigationSeparator(),\n                new NavigationItem()\n                {\n                    Content = \"Sync\",\n                    PageTag = \"sync\",\n                    ToolTip = \"Sync\",\n                    Icon = SymbolRegular.ArrowSyncCircle24,\n                    PageType = typeof(SyncPage)\n                },\n                new NavigationItem()\n                {\n                    Content = \"Explorer\",\n                    PageTag = \"explorer\",\n                    ToolTip = \"Explorer\",\n                    Icon = SymbolRegular.FolderOpen24,\n                    IsEnabled = true,\n                    PageType = typeof(ExplorerPage)\n                }\n            };\n\n            NavigationFooter = new ObservableCollection<INavigationControl>\n            {\n                new NavigationItem()\n                {\n                    Content = \"Theme\",\n                    ToolTip = \"Theme\",\n                    Icon = SymbolRegular.DarkTheme24,\n                    Command = new RelayCommand(ToggleTheme)\n                },\n                new NavigationItem()\n                {\n                    Content = \"Settings\",\n                    PageTag = \"settings\",\n                    ToolTip = \"Settings\",\n                    Icon = SymbolRegular.Settings24,\n                    PageType = typeof(SettingsPage)\n                },\n                new NavigationSeparator(),\n                new NavigationItem()\n                {\n                    Content = \"About\",\n                    PageTag = \"about\",\n                    ToolTip = \"About\",\n                    Icon = SymbolRegular.QuestionCircle24,\n                    PageType = typeof(AboutPage)\n                }\n            };\n        }\n", "        private void BuildNavigationMenu()\n        {\n            NavigationItems = new ObservableCollection<INavigationControl>\n            {\n                new NavigationItem()\n                {\n                    Content = \"Dashboard\",\n                    PageTag = \"dashboard\",\n                    ToolTip = \"Dashboard\",\n                    Icon = SymbolRegular.Home24,\n                    PageType = typeof(DashboardPage)\n                },\n                new NavigationSeparator(),\n                new NavigationItem()\n                {\n                    Content = \"Sync\",\n                    PageTag = \"sync\",\n                    ToolTip = \"Sync\",\n                    Icon = SymbolRegular.ArrowSyncCircle24,\n                    PageType = typeof(SyncPage)\n                },\n                new NavigationItem()\n                {\n                    Content = \"Explorer\",\n                    PageTag = \"explorer\",\n                    ToolTip = \"Explorer\",\n                    Icon = SymbolRegular.FolderOpen24,\n                    IsEnabled = true,\n                    PageType = typeof(ExplorerPage)\n                }\n            };\n\n            NavigationFooter = new ObservableCollection<INavigationControl>\n            {\n                new NavigationItem()\n                {\n                    Content = \"Theme\",\n                    ToolTip = \"Theme\",\n                    Icon = SymbolRegular.DarkTheme24,\n                    Command = new RelayCommand(ToggleTheme)\n                },\n                new NavigationItem()\n                {\n                    Content = \"Settings\",\n                    PageTag = \"settings\",\n                    ToolTip = \"Settings\",\n                    Icon = SymbolRegular.Settings24,\n                    PageType = typeof(SettingsPage)\n                },\n                new NavigationSeparator(),\n                new NavigationItem()\n                {\n                    Content = \"About\",\n                    PageTag = \"about\",\n                    ToolTip = \"About\",\n                    Icon = SymbolRegular.QuestionCircle24,\n                    PageType = typeof(AboutPage)\n                }\n            };\n        }\n", "        private void ToggleTheme()\n        {\n            Theme.Apply(Theme.GetAppTheme() == ThemeType.Light ? ThemeType.Dark : ThemeType.Light);\n\n            SettingsManager.Instance.Settings.General.CurrentTheme = Theme.GetAppTheme().ToString();\n        }\n\n        private void UsbHubDetector_UsbHubStateChanged(string deviceId, bool isConnected)\n        {\n            // events are invoked on a separate thread\n            Application.Current.Dispatcher.Invoke(() =>\n            {\n                // notification on usb connect/disconnect", "                if (SettingsManager.Instance.Settings.Sync.ShowNotificationOnDeviceStateChange == true)\n                {\n                    if (isConnected == true)\n                        _snackbarService.Show(\"Information\", $\"Device: {deviceId} connected.\", SymbolRegular.Notebook24, ControlAppearance.Success);\n                    else\n                        _snackbarService.Show(\"Information\", $\"Device disconnected.\", SymbolRegular.Notebook24, ControlAppearance.Caution);\n                }\n\n                // auto sync on connect\n                if (SettingsManager.Instance.Settings.Sync.AutomaticSyncOnConnect == true && isConnected == true)\n                    _navigationService.Navigate(typeof(SyncPage));\n\n                // Notify all subscribers\n                WeakReferenceMessenger.Default.Send(new MediaDeviceChangedMessage(new DeviceInfo(deviceId, isConnected)));\n\n                // offline mode indicator\n                IsDeviceConnected = _mediaDeviceService.IsDeviceConnected;\n            });\n        }\n    }\n}\n", "                if (SettingsManager.Instance.Settings.Sync.AutomaticSyncOnConnect == true && isConnected == true)\n                    _navigationService.Navigate(typeof(SyncPage));\n\n                // Notify all subscribers\n                WeakReferenceMessenger.Default.Send(new MediaDeviceChangedMessage(new DeviceInfo(deviceId, isConnected)));\n\n                // offline mode indicator\n                IsDeviceConnected = _mediaDeviceService.IsDeviceConnected;\n            });\n        }\n    }\n}\n"]}
{"filename": "ViewModels/DashboardViewModel.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing CommunityToolkit.Mvvm.Messaging;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Extensions;\nusing SupernoteDesktopClient.Messages;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System;\nusing System.Threading.Tasks;\nusing Wpf.Ui.Common;", "using System.Threading.Tasks;\nusing Wpf.Ui.Common;\nusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.ViewModels\n{\n    public partial class DashboardViewModel : ObservableObject, INavigationAware\n    {\n        // services\n        private readonly IMediaDeviceService _mediaDeviceService;\n", "        private readonly IMediaDeviceService _mediaDeviceService;\n\n        private const string CONNECTED_STATUS_ICON_ON = \"PlugConnected24\";\n        private const string CONNECTED_STATUS_ICON_OFF = \"PlugDisconnected24\";\n        private const string CONNECTED_STATUS_TEXT_ON = \"Connected\";\n        private const string CONNECTED_STATUS_TEXT_OFF = \"Disconnected\";\n\n        [ObservableProperty]\n        private bool _isDeviceConnected;\n\n        [ObservableProperty]", "        private bool _isDeviceConnected;\n\n        [ObservableProperty]\n        private string _connectedStatusIcon = CONNECTED_STATUS_ICON_OFF;\n\n        [ObservableProperty]\n        private string _connectedStatusText;\n\n        [ObservableProperty]\n        private string _modelNumber;\n\n        [ObservableProperty]", "        private string _modelNumber;\n\n        [ObservableProperty]\n        private string _serialNumber;\n\n        [ObservableProperty]\n        private string _serialNumberMasked;\n\n        [ObservableProperty]\n        private string _batteryPowerIcon = \"Battery124\";\n\n        [ObservableProperty]", "        private string _batteryPowerIcon = \"Battery124\";\n\n        [ObservableProperty]\n        private string _batteryPowerText;\n\n        [ObservableProperty]\n        private string _deviceUsedSpace;\n\n        [ObservableProperty]\n        private decimal _deviceUsedSpacePercentage;\n\n        [ObservableProperty]", "        private decimal _deviceUsedSpacePercentage;\n\n        [ObservableProperty]\n        private bool _isUpdateAvailable = false;\n\n        [ObservableProperty]\n        private string _updateMessage = String.Empty;\n\n        [ObservableProperty]\n        private string _updateDetails = String.Empty;\n", "        private string _updateDetails = String.Empty;\n\n        public void OnNavigatedTo()\n        {\n            DiagnosticLogger.Log($\"{this}\");\n\n            UpdateDashboard();\n            RefreshUpdateStatus(false).Await();\n        }\n\n        public void OnNavigatedFrom()\n        {\n        }\n\n        public DashboardViewModel(IMediaDeviceService mediaDeviceService)\n        {\n            // services\n            _mediaDeviceService = mediaDeviceService;\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<MediaDeviceChangedMessage>(this, (r, m) => { UpdateDashboard(); });\n\n            // check for updates on startup", "        public void OnNavigatedFrom()\n        {\n        }\n\n        public DashboardViewModel(IMediaDeviceService mediaDeviceService)\n        {\n            // services\n            _mediaDeviceService = mediaDeviceService;\n\n            // Register a message subscriber\n            WeakReferenceMessenger.Default.Register<MediaDeviceChangedMessage>(this, (r, m) => { UpdateDashboard(); });\n\n            // check for updates on startup", "            if (SettingsManager.Instance.Settings.General.AutomaticUpdateCheckEnabled == true)\n                RefreshUpdateStatus(true).Await();\n        }\n\n        [RelayCommand]\n        private void CopySerialNumberToClipboard(string serialNumber)\n        {\n            System.Windows.Clipboard.SetText(serialNumber);\n        }\n\n        private void UpdateDashboard()\n        {\n            _mediaDeviceService.RefreshMediaDeviceInfo();\n\n            ConnectedStatusIcon = (_mediaDeviceService.IsDeviceConnected == true) ? CONNECTED_STATUS_ICON_ON : CONNECTED_STATUS_ICON_OFF;\n            ConnectedStatusText = (_mediaDeviceService.IsDeviceConnected == true) ? CONNECTED_STATUS_TEXT_ON : CONNECTED_STATUS_TEXT_OFF;\n            ModelNumber = _mediaDeviceService.SupernoteInfo.Model;\n            SerialNumber = _mediaDeviceService.SupernoteInfo.SerialNumber;\n            SerialNumberMasked = SerialNumber.MaskSerialNumber();\n\n            string batteryPower;", "        private void UpdateDashboard()\n        {\n            _mediaDeviceService.RefreshMediaDeviceInfo();\n\n            ConnectedStatusIcon = (_mediaDeviceService.IsDeviceConnected == true) ? CONNECTED_STATUS_ICON_ON : CONNECTED_STATUS_ICON_OFF;\n            ConnectedStatusText = (_mediaDeviceService.IsDeviceConnected == true) ? CONNECTED_STATUS_TEXT_ON : CONNECTED_STATUS_TEXT_OFF;\n            ModelNumber = _mediaDeviceService.SupernoteInfo.Model;\n            SerialNumber = _mediaDeviceService.SupernoteInfo.SerialNumber;\n            SerialNumberMasked = SerialNumber.MaskSerialNumber();\n\n            string batteryPower;", "            if (_mediaDeviceService.SupernoteInfo.PowerLevel < 100)\n                batteryPower = _mediaDeviceService.SupernoteInfo.PowerLevel.ToString().Substring(0, 1);\n            else\n                batteryPower = _mediaDeviceService.SupernoteInfo.PowerLevel.ToString().Substring(0, 2);\n            BatteryPowerIcon = (_mediaDeviceService.IsDeviceConnected == true) ? $\"Battery{batteryPower}24\" : \"Battery124\";\n            BatteryPowerText = (_mediaDeviceService.IsDeviceConnected == true) ? _mediaDeviceService.SupernoteInfo.PowerLevel + \"%\" : \"N/A\";\n\n            long freeSpace = _mediaDeviceService.SupernoteInfo.AvailableFreeSpace;\n            long totalSpace = _mediaDeviceService.SupernoteInfo.TotalSpace;\n            DeviceUsedSpacePercentage = (_mediaDeviceService.IsDeviceConnected == true) ? ((totalSpace - freeSpace) / (decimal)totalSpace) * 100 : 0;\n            DeviceUsedSpace = (_mediaDeviceService.IsDeviceConnected == true) ? $\"{(totalSpace - freeSpace).GetDataSizeAsString()} / {totalSpace.GetDataSizeAsString()} ({DeviceUsedSpacePercentage.ToString(\"F2\")}% used space)\" : \"N/A\";\n\n            IsDeviceConnected = _mediaDeviceService.IsDeviceConnected;\n        }\n", "        private async Task RefreshUpdateStatus(bool updateRequested)\n        {\n            (bool updateAvailable, string updateMessage, string updateDetails) result;\n\n            if (updateRequested == true)\n                result = await UpdateManager.CheckForUpdate();\n            else\n                result = UpdateManager.GetUpdateDetails();\n\n            IsUpdateAvailable = result.updateAvailable;\n            UpdateMessage = result.updateMessage;\n            UpdateDetails = result.updateDetails;\n        }\n    }\n}\n"]}
{"filename": "ViewModels/SettingsViewModel.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing CommunityToolkit.Mvvm.Messaging;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Messages;\nusing System.Collections.Generic;\nusing System.Windows.Media;\nusing Wpf.Ui.Appearance;\nusing Wpf.Ui.Common.Interfaces;\n", "using Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.ViewModels\n{\n    public partial class SettingsViewModel : ObservableObject, INavigationAware\n    {\n        private const int DEFAULT_MAX_ARCHIVE_DEVICE_INDEX = 2; // 7 archives\n\n        [ObservableProperty]\n        private ThemeType _currentTheme = ThemeType.Unknown;\n\n        [ObservableProperty]", "        private ThemeType _currentTheme = ThemeType.Unknown;\n\n        [ObservableProperty]\n        private bool isThemeSwitchChecked = (Theme.GetAppTheme() == ThemeType.Dark);\n\n        [ObservableProperty]\n        private string appThemeName = Theme.GetAppTheme().ToString();\n\n        public bool RememberAppWindowPlacement\n        {\n            get { return SettingsManager.Instance.Settings.General.RememberAppWindowPlacement; }\n            set { SettingsManager.Instance.Settings.General.RememberAppWindowPlacement = value; }\n        }\n", "        public bool RememberAppWindowPlacement\n        {\n            get { return SettingsManager.Instance.Settings.General.RememberAppWindowPlacement; }\n            set { SettingsManager.Instance.Settings.General.RememberAppWindowPlacement = value; }\n        }\n\n        public bool MinimizeToTrayEnabled\n        {\n            get { return SettingsManager.Instance.Settings.General.MinimizeToTrayEnabled; }\n            set\n            {\n                SettingsManager.Instance.Settings.General.MinimizeToTrayEnabled = value;\n                NotifySettingsChangedSubscribers(SettingsChangedMessage.MINIMIZE_TO_TRAY_ENABLED);\n            }\n        }\n", "        public bool AutomaticUpdateCheckEnabled\n        {\n            get { return SettingsManager.Instance.Settings.General.AutomaticUpdateCheckEnabled; }\n            set { SettingsManager.Instance.Settings.General.AutomaticUpdateCheckEnabled = value; }\n        }\n\n        public bool DiagnosticLogEnabled\n        {\n            get { return SettingsManager.Instance.Settings.General.DiagnosticLogEnabled; }\n            set { SettingsManager.Instance.Settings.General.DiagnosticLogEnabled = value; }\n        }\n", "        public bool ShowNotificationOnDeviceStateChange\n        {\n            get { return SettingsManager.Instance.Settings.Sync.ShowNotificationOnDeviceStateChange; }\n            set { SettingsManager.Instance.Settings.Sync.ShowNotificationOnDeviceStateChange = value; }\n        }\n\n        public bool AutomaticSyncOnConnect\n        {\n            get { return SettingsManager.Instance.Settings.Sync.AutomaticSyncOnConnect; }\n            set { SettingsManager.Instance.Settings.Sync.AutomaticSyncOnConnect = value; }\n        }\n\n        public List<int> MaxDeviceArchivesItemSource { get; } = new List<int>() { 1, 5, 7, 10, 15, 20, 25, 30 };\n", "        public int MaxDeviceArchivesSelectedItem\n        {\n            get\n            {\n                int index = MaxDeviceArchivesItemSource.FindIndex(p => ((uint)p) == SettingsManager.Instance.Settings.Sync.MaxDeviceArchives);\n\n                return index == -1 ? DEFAULT_MAX_ARCHIVE_DEVICE_INDEX : index;\n            }\n            set { SettingsManager.Instance.Settings.Sync.MaxDeviceArchives = MaxDeviceArchivesItemSource[value]; }\n        }\n", "        public void OnNavigatedTo()\n        {\n            DiagnosticLogger.Log($\"{this}\");\n        }\n\n        public void OnNavigatedFrom()\n        {\n        }\n\n        public SettingsViewModel()\n        {\n            CurrentTheme = Theme.GetAppTheme();\n\n            Theme.Changed += OnThemeChanged;\n        }\n", "        private void OnThemeChanged(ThemeType currentTheme, Color systemAccent)\n        {\n            // Update the theme if it has been changed elsewhere than in the settings.\n            if (CurrentTheme != currentTheme)\n            {\n                CurrentTheme = currentTheme;\n                AppThemeName = Theme.GetAppTheme().ToString();\n                IsThemeSwitchChecked = (Theme.GetAppTheme() == ThemeType.Dark);\n            }\n        }\n\n        [RelayCommand]", "        private void OnToggleTheme()\n        {\n            Theme.Apply(Theme.GetAppTheme() == ThemeType.Light ? ThemeType.Dark : ThemeType.Light);\n            AppThemeName = Theme.GetAppTheme().ToString();\n\n            SettingsManager.Instance.Settings.General.CurrentTheme = Theme.GetAppTheme().ToString();\n        }\n\n        private void NotifySettingsChangedSubscribers(string settingName)\n        {\n            // Notify all subscribers\n            WeakReferenceMessenger.Default.Send(new SettingsChangedMessage(settingName));\n        }\n    }\n}\n", "        private void NotifySettingsChangedSubscribers(string settingName)\n        {\n            // Notify all subscribers\n            WeakReferenceMessenger.Default.Send(new SettingsChangedMessage(settingName));\n        }\n    }\n}\n"]}
{"filename": "ViewModels/AboutViewModel.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Extensions;\nusing System;\nusing System.Threading.Tasks;\nusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.ViewModels\n{\n    public partial class AboutViewModel : ObservableObject, INavigationAware\n    {\n        [ObservableProperty]", "namespace SupernoteDesktopClient.ViewModels\n{\n    public partial class AboutViewModel : ObservableObject, INavigationAware\n    {\n        [ObservableProperty]\n        private string _appVersion = String.Empty;\n\n        [ObservableProperty]\n        private bool _isUpdateCheckEnabled = true;\n\n        [ObservableProperty]", "        private bool _isUpdateCheckEnabled = true;\n\n        [ObservableProperty]\n        private bool _isUpdateAvailable = false;\n\n        [ObservableProperty]\n        private string _updateMessage = String.Empty;\n\n        [ObservableProperty]\n        private string _updateDetails = String.Empty;\n", "        private string _updateDetails = String.Empty;\n\n        public void OnNavigatedTo()\n        {\n            DiagnosticLogger.Log($\"{this}\");\n\n            RefreshUpdateStatus(false).Await();\n        }\n\n        public void OnNavigatedFrom()\n        {\n        }\n\n        public AboutViewModel()\n        {\n            AppVersion = $\"Version - {ApplicationManager.GetAssemblyVersion()}\";\n        }\n\n        [RelayCommand]", "        public void OnNavigatedFrom()\n        {\n        }\n\n        public AboutViewModel()\n        {\n            AppVersion = $\"Version - {ApplicationManager.GetAssemblyVersion()}\";\n        }\n\n        [RelayCommand]\n        private async Task ExecuteCheckForUpdate()\n        {\n            IsUpdateCheckEnabled = false;\n\n            await RefreshUpdateStatus(true);\n        }\n", "        private async Task ExecuteCheckForUpdate()\n        {\n            IsUpdateCheckEnabled = false;\n\n            await RefreshUpdateStatus(true);\n        }\n\n        private async Task RefreshUpdateStatus(bool updateRequested)\n        {\n            (bool updateAvailable, string updateMessage, string updateDetails) result;\n", "            if (updateRequested == true)\n                result = await UpdateManager.CheckForUpdate();\n            else\n                result = UpdateManager.GetUpdateDetails();\n\n            IsUpdateAvailable = result.updateAvailable;\n            UpdateMessage = result.updateMessage;\n            UpdateDetails = result.updateDetails;\n\n            if (IsUpdateAvailable == true)\n                IsUpdateCheckEnabled = false;\n            else\n                IsUpdateCheckEnabled = true;\n        }\n    }\n}\n", "            if (IsUpdateAvailable == true)\n                IsUpdateCheckEnabled = false;\n            else\n                IsUpdateCheckEnabled = true;\n        }\n    }\n}\n"]}
{"filename": "Messages/ProgressTrackActionMessage.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.Messaging.Messages;\n\nnamespace SupernoteDesktopClient.Messages\n{\n    public class ProgressTrackActionMessage : ValueChangedMessage<bool>\n    {\n        public ProgressTrackActionMessage(bool value) : base(value) { }\n    }\n}\n"]}
{"filename": "Messages/SettingsChangedMessage.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.Messaging.Messages;\n\nnamespace SupernoteDesktopClient.Messages\n{\n    public class SettingsChangedMessage : ValueChangedMessage<string>\n    {\n        public const string MINIMIZE_TO_TRAY_ENABLED = \"MinimizeToTrayEnabled\";\n\n        public SettingsChangedMessage(string value) : base(value) { }\n    }\n}\n"]}
{"filename": "Messages/MediaDeviceChangedMessage.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.Messaging.Messages;\n\nnamespace SupernoteDesktopClient.Messages\n{\n    public class MediaDeviceChangedMessage : ValueChangedMessage<DeviceInfo>\n    {\n        public MediaDeviceChangedMessage(DeviceInfo deviceInfo) : base(deviceInfo) { }\n    }\n\n    public class DeviceInfo\n    {", "    public class DeviceInfo\n    {\n        public string Deviceid { get; private set; }\n        public bool IsConnected { get; private set; }\n\n        public DeviceInfo(string deviceId, bool isConnected)\n        {\n            Deviceid = deviceId;\n            IsConnected = isConnected;\n        }\n    }\n}\n"]}
{"filename": "Extensions/StringExtensions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Linq;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace SupernoteDesktopClient.Extensions\n{\n    internal static class StringExtensions\n    {\n        public static string MaskSerialNumber(this string value)\n        {\n            int unmaskedStartCharacters = 4;\n            int unmaskedEdnCharacters = 3;\n            int totaUnmaskedCharacters = unmaskedStartCharacters + unmaskedEdnCharacters;\n", "        public static string MaskSerialNumber(this string value)\n        {\n            int unmaskedStartCharacters = 4;\n            int unmaskedEdnCharacters = 3;\n            int totaUnmaskedCharacters = unmaskedStartCharacters + unmaskedEdnCharacters;\n\n            if (value.Length > totaUnmaskedCharacters)\n            {\n                return String.Concat(value.AsSpan(0, unmaskedStartCharacters), new String('X', value.Length - totaUnmaskedCharacters), value.AsSpan(value.Length - unmaskedEdnCharacters));\n            }\n            else\n                return value;\n        }\n", "        public static string GetShortSHA1Hash(this string value)\n        {\n            string returnResult;\n\n            using (SHA1 sha1 = SHA1.Create())\n            {\n                returnResult = Convert.ToHexString(sha1.ComputeHash(Encoding.UTF8.GetBytes(value)).Take(10).ToArray());\n            }\n\n            return returnResult;\n        }\n", "        public static string ReplaceFirstOccurrence(this string source, string search, string replace)\n        {\n            int position = source.IndexOf(search);\n            if (position < 0)\n                return source;\n\n            return source.Remove(position, search.Length).Insert(position, replace);\n        }\n    }\n}\n"]}
{"filename": "Extensions/LongExtensions.cs", "chunked_list": ["\ufeffnamespace SupernoteDesktopClient.Extensions\n{\n    internal static class LongExtensions\n    {\n        private static readonly string[] DataSizes = { \"B\", \"KB\", \"MB\", \"GB\", \"TB\" };\n\n        public static string GetDataSizeAsString(this long value)\n        {\n            double bytes = value;\n            int order = 0;\n", "            while (bytes >= 1024 && order < DataSizes.Length - 1)\n            {\n                ++order;\n                bytes /= 1024;\n            }\n\n            return string.Format(\"{0:0.## }{1}\", bytes, DataSizes[order]);\n        }\n    }\n}\n"]}
{"filename": "Extensions/TaskExtension.cs", "chunked_list": ["\ufeffusing System;\nusing System.Threading.Tasks;\n\nnamespace SupernoteDesktopClient.Extensions\n{\n    public static class TaskExtension\n    {\n        // Credit: Brian Lagunas - https://www.youtube.com/watch?v=O1Tx-k4Vao0\n        public async static void Await(this Task task, Action completedCallback = null, Action<Exception> exceptionCallback = null)\n        {\n            try\n            {\n                await task;\n                completedCallback?.Invoke();\n            }", "        public async static void Await(this Task task, Action completedCallback = null, Action<Exception> exceptionCallback = null)\n        {\n            try\n            {\n                await task;\n                completedCallback?.Invoke();\n            }\n            catch (Exception ex)\n            {\n                exceptionCallback?.Invoke(ex);\n            }\n        }\n    }\n}\n"]}
{"filename": "Services/MediaDeviceService.cs", "chunked_list": ["\ufeffusing MediaDevices;\nusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Extensions;\nusing SupernoteDesktopClient.Models;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System.Linq;\n\nnamespace SupernoteDesktopClient.Services\n{\n    public class MediaDeviceService : IMediaDeviceService\n    {", "{\n    public class MediaDeviceService : IMediaDeviceService\n    {\n        private const string SUPERNOTE_DEVICE_ID = \"VID_2207&PID_0011\";\n\n        private MediaDriveInfo _driveInfo;\n\n        private bool _isDeviceConnected;\n        public bool IsDeviceConnected\n        {\n            get { return _isDeviceConnected; }\n        }\n", "        public bool IsDeviceConnected\n        {\n            get { return _isDeviceConnected; }\n        }\n\n        private SupernoteInfo _supernoteInfo;\n        public SupernoteInfo SupernoteInfo\n        {\n            get { return _supernoteInfo; }\n        }\n", "        private MediaDevice _supernoteManager;\n        public MediaDevice SupernoteManager\n        {\n            get { return _supernoteManager; }\n        }\n\n        public MediaDeviceService()\n        {\n            RefreshMediaDeviceInfo();\n        }\n", "        public void RefreshMediaDeviceInfo()\n        {\n            MediaDevice tmpDevice = MediaDevice.GetDevices().Where(p => p.DeviceId.Contains(SUPERNOTE_DEVICE_ID, System.StringComparison.InvariantCultureIgnoreCase)).FirstOrDefault();\n\n            if (_supernoteManager == null)\n                _supernoteManager = tmpDevice;\n            else\n            {\n                if (_supernoteManager != tmpDevice && _supernoteManager.IsConnected == true)\n                    _supernoteManager.Disconnect();\n\n                _supernoteManager = tmpDevice;\n            }\n", "                if (_supernoteManager != tmpDevice && _supernoteManager.IsConnected == true)\n                    _supernoteManager.Disconnect();\n\n                _supernoteManager = tmpDevice;\n            }\n\n            if (_supernoteManager != null && _supernoteManager.IsConnected == false)\n                _supernoteManager.Connect();\n\n            _driveInfo = null;\n            if (_supernoteManager != null && _supernoteManager.IsConnected == true)\n                _driveInfo = _supernoteManager.GetDrives().FirstOrDefault();\n\n            _isDeviceConnected = (_supernoteManager != null && _supernoteManager.IsConnected == true);\n\n            // load supernoteInfo object", "            if (_supernoteManager != null && _supernoteManager.IsConnected == true)\n                _driveInfo = _supernoteManager.GetDrives().FirstOrDefault();\n\n            _isDeviceConnected = (_supernoteManager != null && _supernoteManager.IsConnected == true);\n\n            // load supernoteInfo object\n            if (_isDeviceConnected == true)\n            {\n                _supernoteInfo = new SupernoteInfo\n                {\n                    Model = _supernoteManager?.Model,\n                    SerialNumber = _supernoteManager?.SerialNumber,\n                    SerialNumberHash = _supernoteManager?.SerialNumber.GetShortSHA1Hash(),\n                    PowerLevel = _supernoteManager?.PowerLevel ?? 0,\n                    AvailableFreeSpace = _driveInfo?.AvailableFreeSpace ?? 0,\n                    TotalSpace = _driveInfo?.TotalSize ?? 0,\n                    RootFolder = _driveInfo?.RootDirectory.FullName\n                };\n\n                // store/update device profile", "                if (SettingsManager.Instance.Settings.DeviceProfiles.ContainsKey(_supernoteInfo.SerialNumberHash) == true)\n                    SettingsManager.Instance.Settings.DeviceProfiles[_supernoteInfo.SerialNumberHash] = _supernoteInfo;\n                else\n                    SettingsManager.Instance.Settings.DeviceProfiles.Add(_supernoteInfo.SerialNumberHash, _supernoteInfo);\n            }\n            else\n            {\n                _supernoteInfo = new SupernoteInfo();\n                if (SettingsManager.Instance.Settings.DeviceProfiles.Count > 0)\n                    _supernoteInfo = SettingsManager.Instance.Settings.DeviceProfiles.FirstOrDefault().Value;\n            }\n\n            DiagnosticLogger.Log($\"Device: {(_supernoteManager == null ? \"N/A\" : _supernoteManager)}, DriveInfo: {(_driveInfo == null ? \"N/A\" : _driveInfo)}\");\n        }\n    }\n}\n", "                if (SettingsManager.Instance.Settings.DeviceProfiles.Count > 0)\n                    _supernoteInfo = SettingsManager.Instance.Settings.DeviceProfiles.FirstOrDefault().Value;\n            }\n\n            DiagnosticLogger.Log($\"Device: {(_supernoteManager == null ? \"N/A\" : _supernoteManager)}, DriveInfo: {(_driveInfo == null ? \"N/A\" : _driveInfo)}\");\n        }\n    }\n}\n"]}
{"filename": "Services/ApplicationHostService.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Hosting;\nusing System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing Wpf.Ui.Mvvm.Contracts;\n\nnamespace SupernoteDesktopClient.Services\n{", "namespace SupernoteDesktopClient.Services\n{\n    /// <summary>\n    /// Managed host of the application.\n    /// </summary>\n    public class ApplicationHostService : IHostedService\n    {\n        private readonly IServiceProvider _serviceProvider;\n        private INavigationWindow _navigationWindow;\n\n        public ApplicationHostService(IServiceProvider serviceProvider)\n        {\n            _serviceProvider = serviceProvider;\n        }\n\n        /// <summary>\n        /// Triggered when the application host is ready to start the service.\n        /// </summary>\n        /// <param name=\"cancellationToken\">Indicates that the start process has been aborted.</param>", "        private INavigationWindow _navigationWindow;\n\n        public ApplicationHostService(IServiceProvider serviceProvider)\n        {\n            _serviceProvider = serviceProvider;\n        }\n\n        /// <summary>\n        /// Triggered when the application host is ready to start the service.\n        /// </summary>\n        /// <param name=\"cancellationToken\">Indicates that the start process has been aborted.</param>", "        public async Task StartAsync(CancellationToken cancellationToken)\n        {\n            await HandleActivationAsync();\n        }\n\n        /// <summary>\n        /// Triggered when the application host is performing a graceful shutdown.\n        /// </summary>\n        /// <param name=\"cancellationToken\">Indicates that the shutdown process should no longer be graceful.</param>\n        public async Task StopAsync(CancellationToken cancellationToken)\n        {\n            await Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Creates main window during activation.\n        /// </summary>", "        public async Task StopAsync(CancellationToken cancellationToken)\n        {\n            await Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Creates main window during activation.\n        /// </summary>\n        private async Task HandleActivationAsync()\n        {\n            await Task.CompletedTask;\n", "        private async Task HandleActivationAsync()\n        {\n            await Task.CompletedTask;\n\n            if (!Application.Current.Windows.OfType<Views.Windows.MainWindow>().Any())\n            {\n                _navigationWindow = (_serviceProvider.GetService(typeof(INavigationWindow)) as INavigationWindow)!;\n                _navigationWindow!.ShowWindow();\n\n                _navigationWindow.Navigate(typeof(Views.Pages.DashboardPage));\n            }\n\n            await Task.CompletedTask;\n        }\n    }\n}\n"]}
{"filename": "Services/UsbHubDetector.cs", "chunked_list": ["\ufeffusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System;\nusing System.ComponentModel;\nusing System.Management;\nusing System.Threading;\n\nnamespace SupernoteDesktopClient.Services\n{\n    public delegate void UsbHubStateChangedEventHandler(string deviceId, bool isConnected);\n", "{\n    public delegate void UsbHubStateChangedEventHandler(string deviceId, bool isConnected);\n\n    public class UsbHubDetector : IUsbHubDetector, IDisposable\n    {\n        private const string WMI_QUERY = \"SELECT * FROM {0} WITHIN 2 WHERE TargetInstance ISA 'Win32_USBHub'\";\n        private const string CREATION_EVENT = \"__InstanceCreationEvent\";\n        private const string DELETION_EVENT = \"__InstanceDeletionEvent\";\n\n        private readonly ManagementEventWatcher _insertManagementEventWatcher = new ManagementEventWatcher(new WqlEventQuery(String.Format(WMI_QUERY, CREATION_EVENT)));\n        private readonly ManagementEventWatcher _removeManagementEventWatcher = new ManagementEventWatcher(new WqlEventQuery(String.Format(WMI_QUERY, DELETION_EVENT)));", "        private readonly ManagementEventWatcher _insertManagementEventWatcher = new ManagementEventWatcher(new WqlEventQuery(String.Format(WMI_QUERY, CREATION_EVENT)));\n        private readonly ManagementEventWatcher _removeManagementEventWatcher = new ManagementEventWatcher(new WqlEventQuery(String.Format(WMI_QUERY, DELETION_EVENT)));\n        private bool disposedValue;\n\n        public UsbHubDetector()\n        {\n            BackgroundWorker bwDriveDetector = new BackgroundWorker();\n            bwDriveDetector.DoWork += DoWork;\n            bwDriveDetector.RunWorkerAsync();\n        }\n", "        public event UsbHubStateChangedEventHandler UsbHubStateChanged;\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (disposedValue == false)\n            {\n                if (disposing == true)\n                {\n                    _insertManagementEventWatcher.Stop();\n                    _removeManagementEventWatcher.Stop();\n                }\n\n                disposedValue = true;\n            }\n        }\n", "        public void Dispose()\n        {\n            Dispose(true);\n\n            GC.SuppressFinalize(this);\n        }\n\n        private void DoWork(object sender, DoWorkEventArgs e)\n        {\n            _insertManagementEventWatcher.EventArrived += new EventArrivedEventHandler(MapEventArgs);\n            _insertManagementEventWatcher.Start();\n\n            _removeManagementEventWatcher.EventArrived += new EventArrivedEventHandler(MapEventArgs);\n            _removeManagementEventWatcher.Start();\n        }\n", "        private void MapEventArgs(object sender, EventArrivedEventArgs e)\n        {\n            string deviceId = ((ManagementBaseObject)e.NewEvent[\"TargetInstance\"])[\"PNPDeviceID\"].ToString();\n            bool isConnected = (e.NewEvent.ClassPath.RelativePath == CREATION_EVENT);\n\n            DiagnosticLogger.Log($\"Usb Device: {deviceId}, IsConnected: {isConnected}\");\n\n            // WMI device event seems to be triggering immediately when device is attached/detached.\n            // Adding 1s wait time before notifying all subscribers to ensure the device is available for them.\n            Thread.Sleep(1000);\n\n            UsbHubStateChanged?.Invoke(deviceId, isConnected);\n        }\n    }\n}\n"]}
{"filename": "Services/PageService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Windows;\nusing Wpf.Ui.Mvvm.Contracts;\n\nnamespace SupernoteDesktopClient.Services\n{\n    /// <summary>\n    /// Service that provides pages for navigation.\n    /// </summary>\n    public class PageService : IPageService\n    {\n        /// <summary>\n        /// Service which provides the instances of pages.\n        /// </summary>", "    /// </summary>\n    public class PageService : IPageService\n    {\n        /// <summary>\n        /// Service which provides the instances of pages.\n        /// </summary>\n        private readonly IServiceProvider _serviceProvider;\n\n        /// <summary>\n        /// Creates new instance and attaches the <see cref=\"IServiceProvider\"/>.\n        /// </summary>\n        public PageService(IServiceProvider serviceProvider)\n        {\n            _serviceProvider = serviceProvider;\n        }\n\n        /// <inheritdoc />", "        public T GetPage<T>() where T : class\n        {\n            if (!typeof(FrameworkElement).IsAssignableFrom(typeof(T)))\n                throw new InvalidOperationException(\"The page should be a WPF control.\");\n\n            return (T)_serviceProvider.GetService(typeof(T));\n        }\n\n        /// <inheritdoc />\n        public FrameworkElement GetPage(Type pageType)\n        {", "        public FrameworkElement GetPage(Type pageType)\n        {\n            if (!typeof(FrameworkElement).IsAssignableFrom(pageType))\n                throw new InvalidOperationException(\"The page should be a WPF control.\");\n\n            return _serviceProvider.GetService(pageType) as FrameworkElement;\n        }\n    }\n}\n"]}
{"filename": "Services/SyncService.cs", "chunked_list": ["\ufeffusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Extensions;\nusing SupernoteDesktopClient.Services.Contracts;\nusing System;\nusing System.Diagnostics;\nusing System.IO;\n\nnamespace SupernoteDesktopClient.Services\n{\n    public class SyncService : ISyncService\n    {\n        // services", "{\n    public class SyncService : ISyncService\n    {\n        // services\n        private readonly IMediaDeviceService _mediaDeviceService;\n\n        private const string BACKUP_FOLDER = \"Backup\";\n        private const string ARCHIVE_FOLDER = \"Archive\";\n\n        public bool IsBusy { get; private set; }\n", "        public bool IsBusy { get; private set; }\n\n        public string SourceFolder { get { return _mediaDeviceService.SupernoteInfo.RootFolder; } }\n\n        public string BackupFolder { get { return GetFolderByType(BACKUP_FOLDER); } }\n\n        public string ArchiveFolder { get { return GetFolderByType(ARCHIVE_FOLDER); } }\n\n        public SyncService(IMediaDeviceService mediaDeviceService)\n        {\n            // services\n            _mediaDeviceService = mediaDeviceService;\n\n            IsBusy = false;\n        }\n", "        public bool Sync()\n        {\n            // sync in progress\n            if (IsBusy == true)\n                return false;\n\n            bool returnResult = false;\n\n            IsBusy = true;\n\n            if (_mediaDeviceService.IsDeviceConnected == true)\n            {", "            if (_mediaDeviceService.IsDeviceConnected == true)\n            {\n                if (Directory.Exists(BackupFolder) == true)\n                {\n                    ArchiveManager.Archive(BackupFolder, ArchiveFolder, SettingsManager.Instance.Settings.Sync.MaxDeviceArchives);\n\n                    // delete existing storage folder if exists\n                    FileSystemManager.ForceDeleteDirectory(BackupFolder);\n                }\n\n                var supernoteFolder = _mediaDeviceService.SupernoteManager.GetDirectoryInfo(@\"\\\");\n                var files = supernoteFolder.EnumerateFiles(\"*.*\", SearchOption.AllDirectories);\n", "                foreach (var file in files)\n                {\n                    Debug.WriteLine(file.FullName);\n                    string destinationFileName = file.FullName.ReplaceFirstOccurrence(SourceFolder, BackupFolder);\n                    string destinationFolder = Path.GetDirectoryName(destinationFileName);\n\n                    if (Directory.Exists(destinationFolder) == false)\n                        Directory.CreateDirectory(destinationFolder);\n\n                    if (File.Exists(destinationFileName) == false)\n                    {", "                    if (File.Exists(destinationFileName) == false)\n                    {\n                        using (FileStream fs = new FileStream(destinationFileName, FileMode.Create, FileAccess.Write))\n                        {\n                            _mediaDeviceService.SupernoteManager.DownloadFile(file.FullName, fs);\n                        }\n                    }\n                }\n\n                returnResult = true;\n            }\n\n            IsBusy = false;\n\n            return returnResult;\n        }\n", "        private string GetFolderByType(string folderType)\n        {\n            string folder = FileSystemManager.GetApplicationFolder();\n            if (String.IsNullOrWhiteSpace(folder) == false && _mediaDeviceService.SupernoteInfo.SerialNumberHash.Contains(\"N/A\") == false)\n                return Path.Combine(folder, $@\"Device\\{_mediaDeviceService.SupernoteInfo.SerialNumberHash}\\{folderType}\");\n            else\n                return null;\n        }\n    }\n}\n"]}
{"filename": "Services/Contracts/ISyncService.cs", "chunked_list": ["\ufeffnamespace SupernoteDesktopClient.Services.Contracts\n{\n    public interface ISyncService\n    {\n        bool IsBusy { get; }\n\n        public string SourceFolder { get; }\n\n        public string BackupFolder { get; }\n\n        public string ArchiveFolder { get; }\n\n        bool Sync();\n    }\n}", "        public string BackupFolder { get; }\n\n        public string ArchiveFolder { get; }\n\n        bool Sync();\n    }\n}"]}
{"filename": "Services/Contracts/IUsbHubDetector.cs", "chunked_list": ["\ufeffnamespace SupernoteDesktopClient.Services.Contracts\n{\n    public interface IUsbHubDetector\n    {\n        event UsbHubStateChangedEventHandler UsbHubStateChanged;\n    }\n}"]}
{"filename": "Services/Contracts/IMediaDeviceService.cs", "chunked_list": ["\ufeffusing MediaDevices;\nusing SupernoteDesktopClient.Models;\n\nnamespace SupernoteDesktopClient.Services.Contracts\n{\n    public interface IMediaDeviceService\n    {\n        bool IsDeviceConnected { get; }\n\n        SupernoteInfo SupernoteInfo { get; }\n\n        MediaDevice SupernoteManager { get; }\n\n        void RefreshMediaDeviceInfo();\n    }\n}"]}
{"filename": "Models/FileSystemObjectInfo.cs", "chunked_list": ["\ufeffusing CommunityToolkit.Mvvm.ComponentModel;\nusing CommunityToolkit.Mvvm.Input;\nusing System;\nusing System.Collections.Generic;\nusing SupernoteDesktopClient.Core;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;", "using System.IO;\nusing System.Linq;\nusing System.Windows.Media;\nusing SupernoteSharp.Business;\nusing SupernoteSharp.Common;\nusing SupernoteSharp.Entities;\nusing CommunityToolkit.Mvvm.Messaging;\nusing SupernoteDesktopClient.Messages;\nusing System.Threading.Tasks;\n", "using System.Threading.Tasks;\n\nnamespace SupernoteDesktopClient.Models\n{\n    // Credit: https://medium.com/@mikependon/designing-a-wpf-treeview-file-explorer-565a3f13f6f2\n\n    [ObservableObject]\n    public partial class FileSystemObjectInfo : BaseObject\n    {\n        [ObservableProperty]\n        private ObservableCollection<FileSystemObjectInfo> _children;\n\n        [ObservableProperty]", "        private bool _IsExpanded;\n\n        [ObservableProperty]\n        private ImageSource _imageSource;\n\n        [ObservableProperty]\n        private FileSystemInfo _fileSystemInfo;\n\n        public FileSystemObjectInfo(FileSystemInfo info)\n        {\n            if (this is DummyFileSystemObjectInfo)\n                return;\n\n            Children = new ObservableCollection<FileSystemObjectInfo>();\n            FileSystemInfo = info;\n", "            if (this is DummyFileSystemObjectInfo)\n                return;\n\n            Children = new ObservableCollection<FileSystemObjectInfo>();\n            FileSystemInfo = info;\n\n            if (info is DirectoryInfo)\n            {\n                ImageSource = ImageManager.GetImageSource(info.FullName, ItemState.Close);\n\n                // Show expander, i.e. dummy object only if the folder have sub items", "                if (FolderHaveSubItems(info.FullName) == true)\n                    Children.Add(new DummyFileSystemObjectInfo());\n            }\n            else if (info is FileInfo)\n            {\n                ImageSource = ImageManager.GetImageSource(info.FullName);\n            }\n\n            PropertyChanged += new PropertyChangedEventHandler(FileSystemObjectInfo_PropertyChanged);\n        }\n\n        [RelayCommand]", "        private async Task OnOpenSelectedItem(object parameter)\n        {\n            await Task.Run(() => ConvertNoteDocument(parameter));\n        }\n\n        private void ConvertNoteDocument(object parameter)\n        {\n            FileSystemObjectInfo item = parameter as FileSystemObjectInfo;\n            if ((item.FileSystemInfo.Attributes & FileAttributes.Directory) == FileAttributes.Directory)\n                return;\n\n            // skip *.mark files until the application can support them", "            if ((item.FileSystemInfo.Attributes & FileAttributes.Directory) == FileAttributes.Directory)\n                return;\n\n            // skip *.mark files until the application can support them\n            if (item.FileSystemInfo.Extension == \".mark\")\n                return;\n\n            try\n            {\n                string selectedItemFullName = item.FileSystemInfo.FullName;\n", "                if (item.FileSystemInfo.Extension == \".note\" && item.FileSystemInfo.Exists == true)\n                {\n                    WeakReferenceMessenger.Default.Send(new ProgressTrackActionMessage(true)); // action started\n\n                    selectedItemFullName = Path.Combine(Path.GetTempPath(), Path.GetFileNameWithoutExtension(item.FileSystemInfo.Name) + \"_sdc.pdf\");\n\n                    using (FileStream fileStream = new FileStream(item.FileSystemInfo.FullName, FileMode.Open, FileAccess.Read))\n                    {\n                        Parser parser = new Parser();\n                        Notebook notebook = parser.LoadNotebook(fileStream, Policy.Strict);\n                        Converter.PdfConverter converter = new Converter.PdfConverter(notebook, DefaultColorPalette.Grayscale);\n\n                        // convert all pages to vector PDF and build all links\n                        byte[] allPages = converter.ConvertAll(vectorize: true, enableLinks: true);\n                        // save the result\n                        File.WriteAllBytes(selectedItemFullName, allPages);\n                    }\n                }\n\n                ProcessStartInfo psi = new ProcessStartInfo\n                {\n                    FileName = selectedItemFullName,\n                    UseShellExecute = true\n                };\n\n                Process process = Process.Start(psi);\n            }", "            catch (Exception)\n            {\n                // TODO: Error handling\n            }\n            finally\n            {\n                WeakReferenceMessenger.Default.Send(new ProgressTrackActionMessage(false)); // action completed\n            }\n        }\n\n        private void FileSystemObjectInfo_PropertyChanged(object sender, PropertyChangedEventArgs e)\n        {", "        private void FileSystemObjectInfo_PropertyChanged(object sender, PropertyChangedEventArgs e)\n        {\n            if (FileSystemInfo is DirectoryInfo && String.Equals(e.PropertyName, \"IsExpanded\", StringComparison.CurrentCultureIgnoreCase))\n            {\n                if (IsExpanded == true)\n                {\n                    ImageSource = ImageManager.GetImageSource(FileSystemInfo.FullName, ItemState.Open);\n                    DummyFileSystemObjectInfo dummyNode = Children.OfType<DummyFileSystemObjectInfo>().FirstOrDefault();\n\n                    if (dummyNode != null)\n                    {\n                        Children.Remove(dummyNode);\n                        ExploreDirectories();\n                        ExploreFiles();\n                    }\n                }\n                else\n                    ImageSource = ImageManager.GetImageSource(FileSystemInfo.FullName, ItemState.Close);\n            }\n        }\n", "                    if (dummyNode != null)\n                    {\n                        Children.Remove(dummyNode);\n                        ExploreDirectories();\n                        ExploreFiles();\n                    }\n                }\n                else\n                    ImageSource = ImageManager.GetImageSource(FileSystemInfo.FullName, ItemState.Close);\n            }\n        }\n", "        private void ExploreDirectories()\n        {\n            try\n            {\n                if (FileSystemInfo is DirectoryInfo)\n                {\n                    DirectoryInfo[] directories = ((DirectoryInfo)FileSystemInfo).GetDirectories();\n                    foreach (DirectoryInfo directory in directories.OrderBy(d => d.Name))\n                    {\n                        if ((directory.Attributes & FileAttributes.System) != FileAttributes.System &&\n                            (directory.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden)\n                        {\n                            Children.Add(new FileSystemObjectInfo(directory));\n                        }\n                    }\n                }\n            }", "                        if ((directory.Attributes & FileAttributes.System) != FileAttributes.System &&\n                            (directory.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden)\n                        {\n                            Children.Add(new FileSystemObjectInfo(directory));\n                        }\n                    }\n                }\n            }\n            catch (UnauthorizedAccessException)\n            {\n                // continue\n            }\n        }\n", "            catch (UnauthorizedAccessException)\n            {\n                // continue\n            }\n        }\n\n        private void ExploreFiles()\n        {\n            try\n            {\n                if (FileSystemInfo is DirectoryInfo)\n                {\n                    FileInfo[] files = ((DirectoryInfo)FileSystemInfo).GetFiles();", "                if (FileSystemInfo is DirectoryInfo)\n                {\n                    FileInfo[] files = ((DirectoryInfo)FileSystemInfo).GetFiles();\n                    foreach (FileInfo file in files.OrderBy(d => d.Name))\n                    {\n                        if ((file.Attributes & FileAttributes.System) != FileAttributes.System &&\n                            (file.Attributes & FileAttributes.Hidden) != FileAttributes.Hidden)\n                        {\n                            Children.Add(new FileSystemObjectInfo(file));\n                        }\n                    }\n                }\n            }", "            catch (UnauthorizedAccessException)\n            {\n                // continue\n            }\n        }\n\n        private static bool FolderHaveSubItems(string path)\n        {\n            try\n            {\n                IEnumerable<string> folders = Directory.EnumerateDirectories(path, \"*\", SearchOption.TopDirectoryOnly);\n                bool result = folders != null && folders.Any();\n", "                if (result == false)\n                {\n                    IEnumerable<string> files = Directory.EnumerateFiles(path, \"*\", SearchOption.TopDirectoryOnly);\n                    result = files != null && files.Any();\n                }\n\n                return result;\n            }\n            catch (UnauthorizedAccessException)\n            {\n                return false;\n            }\n        }\n    }\n", "            catch (UnauthorizedAccessException)\n            {\n                return false;\n            }\n        }\n    }\n\n    internal class DummyFileSystemObjectInfo : FileSystemObjectInfo\n    {\n        public DummyFileSystemObjectInfo()\n            : base(new DirectoryInfo(\"DummyFileSystemObjectInfo\"))\n        {\n        }\n    }\n}\n"]}
{"filename": "Models/Settings.cs", "chunked_list": ["\ufeffusing SupernoteDesktopClient.Core.Win32Api;\nusing System.Collections.Generic;\n\nnamespace SupernoteDesktopClient.Models\n{\n    public class Settings\n    {\n        public int LatestVersion { get { return 1; } }\n        public int CurrentVersion { get; set; } = 1;\n        public Dictionary<string, SupernoteInfo> DeviceProfiles { get; set; } = new Dictionary<string, SupernoteInfo>();\n", "        public int CurrentVersion { get; set; } = 1;\n        public Dictionary<string, SupernoteInfo> DeviceProfiles { get; set; } = new Dictionary<string, SupernoteInfo>();\n\n        public General General { get; set; }\n        public Sync Sync { get; set; }\n\n        public Settings()\n        {\n            CurrentVersion = LatestVersion;\n\n            // sections\n            General = new General();\n            Sync = new Sync();\n        }\n    }\n", "    public class General\n    {\n        public bool RememberAppWindowPlacement { get; set; } = true;\n        public WindowPlacement AppWindowPlacement { get; set; }\n        public bool MinimizeToTrayEnabled { get; set; } = false;\n        public string CurrentTheme { get; set; } = \"Light\"; // Light or Dark\n        public bool DiagnosticLogEnabled { get; set; } = false;\n        public bool AutomaticUpdateCheckEnabled { get; set; } = true;\n    }\n\n    public class Sync\n    {", "    public class Sync\n    {\n        public bool ShowNotificationOnDeviceStateChange { get; set; } = true;\n        public bool AutomaticSyncOnConnect { get; set; } = false;\n        public int MaxDeviceArchives { get; set; } = 7;\n    }\n}\n"]}
{"filename": "Models/ArchiveFileAttributes.cs", "chunked_list": ["\ufeffusing SupernoteDesktopClient.Extensions;\nusing System;\n\nnamespace SupernoteDesktopClient.Models\n{\n    public class ArchiveFileAttributes\n    {\n        public string Name { get; private set; }\n\n        public string Path { get; private set; }\n", "        public string Path { get; private set; }\n\n        public DateTime CreateDateTime { get; private set; }\n\n        public long SizeBytes { get; private set; }\n\n        public string SizeAsString { get; private set; }\n\n        public ArchiveFileAttributes(string name, string path, DateTime createDateTime, long sizeBytes)\n        {\n            Name = name;\n            Path = path;\n            CreateDateTime = createDateTime;\n            SizeBytes = sizeBytes;\n            SizeAsString = sizeBytes.GetDataSizeAsString();\n        }\n    }\n}\n"]}
{"filename": "Models/BaseObject.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace SupernoteDesktopClient.Models\n{\n    public abstract class BaseObject\n    {\n        private IDictionary<string, object> _values = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);\n\n        internal T GetValue<T>(string key)\n        {\n            var value = GetValue(key);\n\n            return (value is T) ? (T)value : default(T);\n        }\n", "        private object GetValue(string key)\n        {\n            if (String.IsNullOrEmpty(key) == true)\n                return null;\n\n            return _values.ContainsKey(key) ? _values[key] : null;\n        }\n\n        public void SetValue(string key, object value)\n        {\n            if (_values.ContainsKey(key) == false)\n                _values.Add(key, value);\n            else\n                _values[key] = value;\n        }\n    }\n}\n", "        public void SetValue(string key, object value)\n        {\n            if (_values.ContainsKey(key) == false)\n                _values.Add(key, value);\n            else\n                _values[key] = value;\n        }\n    }\n}\n"]}
{"filename": "Models/SupernoteInfo.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace SupernoteDesktopClient.Models\n{\n    public class SupernoteInfo\n    {\n        public string Model { get; set; } = \"N/A\";\n\n        [JsonIgnore]\n        public string SerialNumber { get; set; } = \"N/A\";\n", "        public string SerialNumber { get; set; } = \"N/A\";\n\n        public string SerialNumberHash { get; set; } = \"N/A\";\n\n        [JsonIgnore]\n        public int PowerLevel { get; set; } = 0;\n\n        [JsonIgnore]\n        public long AvailableFreeSpace { get; set; } = 0;\n\n        [JsonIgnore]", "        public long AvailableFreeSpace { get; set; } = 0;\n\n        [JsonIgnore]\n        public long TotalSpace { get; set; } = 0;\n\n        [JsonIgnore]\n        public string RootFolder { get; set; } = \"N/A\";\n    }\n}\n"]}
{"filename": "Converters/BoolToVisibilityInversonConverter.cs", "chunked_list": ["\ufeffusing System;\nusing System.Globalization;\nusing System.Windows;\nusing System.Windows.Data;\n\nnamespace SupernoteDesktopClient.Converters\n{\n    internal class BoolToVisibilityInversionConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            return (bool)value ? Visibility.Collapsed : Visibility.Visible;\n        }\n", "        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            return (bool)value ? Visibility.Collapsed : Visibility.Visible;\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n"]}
{"filename": "Converters/EnumToBooleanConverter.cs", "chunked_list": ["\ufeffusing System;\nusing System.Globalization;\nusing System.Windows.Data;\n\nnamespace SupernoteDesktopClient.Converters\n{\n    internal class EnumToBooleanConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            if (parameter is not String enumString)\n                throw new ArgumentException(\"Parameter must be enumeration\");\n", "        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            if (parameter is not String enumString)\n                throw new ArgumentException(\"Parameter must be enumeration\");\n\n            if (Enum.IsDefined(typeof(Wpf.Ui.Appearance.ThemeType), value) == false)\n                throw new ArgumentException(\"Parameter must be enumeration of ThemeType\");\n\n            var enumValue = Enum.Parse(typeof(Wpf.Ui.Appearance.ThemeType), enumString);\n\n            return enumValue.Equals(value);\n        }\n", "        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            if (parameter is not String enumString)\n                throw new ArgumentException(\"Parameter must be enumeration\");\n\n            return Enum.Parse(typeof(Wpf.Ui.Appearance.ThemeType), enumString);\n        }\n    }\n}\n"]}
{"filename": "Converters/BoolToVisibilityConverter.cs", "chunked_list": ["\ufeffusing System;\nusing System.Globalization;\nusing System.Windows;\nusing System.Windows.Data;\n\nnamespace SupernoteDesktopClient.Converters\n{\n    internal class BoolToVisibilityConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            return (bool)value ? Visibility.Visible : Visibility.Collapsed;\n        }\n", "        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            return (bool)value ? Visibility.Visible : Visibility.Collapsed;\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n"]}
{"filename": "Views/Windows/MainWindow.xaml.cs", "chunked_list": ["\ufeffusing SupernoteDesktopClient.Core;\nusing SupernoteDesktopClient.Core.Win32Api;\nusing SupernoteDesktopClient.Views.Pages;\nusing System;\nusing System.ComponentModel;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Interop;\nusing Wpf.Ui.Appearance;\nusing Wpf.Ui.Common;", "using Wpf.Ui.Appearance;\nusing Wpf.Ui.Common;\nusing Wpf.Ui.Controls;\nusing Wpf.Ui.Controls.Interfaces;\nusing Wpf.Ui.Mvvm.Contracts;\n\nnamespace SupernoteDesktopClient.Views.Windows\n{\n    /// <summary>\n    /// Interaction logic for MainWindow.xaml", "    /// <summary>\n    /// Interaction logic for MainWindow.xaml\n    /// </summary>\n    public partial class MainWindow : INavigationWindow\n    {\n        // main window handle\n        private IntPtr _windowHandle;\n\n        public ViewModels.MainWindowViewModel ViewModel { get; }\n\n        public MainWindow(ViewModels.MainWindowViewModel viewModel, IPageService pageService, INavigationService navigationService, ISnackbarService snackbarService)\n        {\n            ViewModel = viewModel;\n            DataContext = this;\n\n            Loaded += OnLoaded;\n            Closing += OnClosing;\n\n            InitializeComponent();\n            SetPageService(pageService);\n\n            navigationService.SetNavigationControl(RootNavigation);\n            snackbarService.SetSnackbarControl(RootSnackbar);\n\n            Theme.Apply((ThemeType)Enum.Parse(typeof(ThemeType), SettingsManager.Instance.Settings.General.CurrentTheme), BackgroundType.Mica, true);\n        }\n\n        #region INavigationWindow methods\n", "        public Frame GetFrame()\n            => RootFrame;\n\n        public INavigation GetNavigation()\n            => RootNavigation;\n\n        public bool Navigate(Type pageType)\n            => RootNavigation.Navigate(pageType);\n\n        public void SetPageService(IPageService pageService)\n            => RootNavigation.PageService = pageService;\n", "        public void SetPageService(IPageService pageService)\n            => RootNavigation.PageService = pageService;\n\n        public void ShowWindow()\n            => Show();\n\n        public void CloseWindow()\n            => Close();\n\n        #endregion INavigationWindow methods\n", "        protected override void OnClosed(EventArgs e)\n        {\n            base.OnClosed(e);\n\n            // make sure that closing this window will begin the process of closing the application\n            Application.Current.Shutdown();\n        }\n\n        protected override void OnSourceInitialized(EventArgs e)\n        {\n            base.OnSourceInitialized(e);\n\n            // restore the window position", "        protected override void OnSourceInitialized(EventArgs e)\n        {\n            base.OnSourceInitialized(e);\n\n            // restore the window position\n            if (SettingsManager.Instance.Settings.General.RememberAppWindowPlacement == true)\n            {\n                WindowPlacement windowPlacement = SettingsManager.Instance.Settings.General.AppWindowPlacement;\n                NativeMethods.SetWindowPlacementEx(_windowHandle, ref windowPlacement);\n            }\n        }\n", "        private void OnLoaded(object sender, RoutedEventArgs e)\n        {\n            // save the main window handle\n            _windowHandle = new WindowInteropHelper(this).Handle;\n        }\n\n        private void OnClosing(object sender, CancelEventArgs e)\n        {\n            // remember the window position\n            if (SettingsManager.Instance.Settings.General.RememberAppWindowPlacement == true)\n                SettingsManager.Instance.Settings.General.AppWindowPlacement = NativeMethods.GetWindowPlacementEx(_windowHandle);\n\n            // save settings before exiting\n            SettingsManager.Instance.Save();\n\n            // cleanup temp conversion files\n            FileSystemManager.CleanupTempConversionFiles();\n        }\n", "            if (SettingsManager.Instance.Settings.General.RememberAppWindowPlacement == true)\n                SettingsManager.Instance.Settings.General.AppWindowPlacement = NativeMethods.GetWindowPlacementEx(_windowHandle);\n\n            // save settings before exiting\n            SettingsManager.Instance.Save();\n\n            // cleanup temp conversion files\n            FileSystemManager.CleanupTempConversionFiles();\n        }\n\n        private void RootNavigation_Navigated(INavigation sender, RoutedNavigationEventArgs e)\n        {", "        private void RootNavigation_Navigated(INavigation sender, RoutedNavigationEventArgs e)\n        {\n            if (sender is not NavigationCompact)\n                return;\n\n            // hide breadcrumb header for target DashboardPage\n            Breadcrumb.Visibility = (e.CurrentPage.PageType == typeof(DashboardPage)) ? Visibility.Collapsed : Visibility.Visible;\n        }\n\n        #region NotifyIcon Context Menu\n\n        // This is not following MVVM, due to the inability of the RelayCommand to get data bind context for NotifyIcon context menu\n", "        private void NotifyIcon_LeftDoubleClick(NotifyIcon sender, RoutedEventArgs e)\n        {\n            ShowApplicationWindow();\n        }\n\n        private void NotifyIcon_MenuItemClick(object sender, RoutedEventArgs e)\n        {\n            switch (((FrameworkElement)sender).Tag.ToString())\n            {\n                case \"home\":\n                    Navigate(typeof(DashboardPage));\n                    ShowApplicationWindow();\n                    break;\n                case \"sync\":\n                    Navigate(typeof(SyncPage));\n                    ShowApplicationWindow();\n                    break;\n                case \"settings\":\n                    Navigate(typeof(SettingsPage));\n                    ShowApplicationWindow();\n                    break;\n                default: // exit\n                    this.CloseWindow();\n                    break;\n            }\n        }\n", "        private void ShowApplicationWindow()\n        {\n            // show the minimized to tray main window\n            if (this.Visibility == Visibility.Hidden)\n                this.ShowWindow();\n            else\n                this.Activate();\n\n            if (this.WindowState == WindowState.Minimized)\n                this.WindowState = WindowState.Normal;\n        }\n\n        #endregion\n    }\n}", "            if (this.WindowState == WindowState.Minimized)\n                this.WindowState = WindowState.Normal;\n        }\n\n        #endregion\n    }\n}"]}
{"filename": "Views/Pages/SettingsPage.xaml.cs", "chunked_list": ["\ufeffusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.Views.Pages\n{\n    /// <summary>\n    /// Interaction logic for SettingsPage.xaml\n    /// </summary>\n    public partial class SettingsPage : INavigableView<ViewModels.SettingsViewModel>\n    {\n        public ViewModels.SettingsViewModel ViewModel\n        {\n            get;\n        }\n\n        public SettingsPage(ViewModels.SettingsViewModel viewModel)\n        {\n            ViewModel = viewModel;\n\n            InitializeComponent();\n        }\n    }\n}"]}
{"filename": "Views/Pages/DashboardPage.xaml.cs", "chunked_list": ["\ufeffusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.Views.Pages\n{\n    /// <summary>\n    /// Interaction logic for DashboardPage.xaml\n    /// </summary>\n    public partial class DashboardPage : INavigableView<ViewModels.DashboardViewModel>\n    {\n        public ViewModels.DashboardViewModel ViewModel\n        {\n            get;\n        }\n\n        public DashboardPage(ViewModels.DashboardViewModel viewModel)\n        {\n            ViewModel = viewModel;\n\n            InitializeComponent();\n        }\n    }\n}"]}
{"filename": "Views/Pages/SyncPage.xaml.cs", "chunked_list": ["\ufeffusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.Views.Pages\n{\n    /// <summary>\n    /// Interaction logic for SyncPage.xaml\n    /// </summary>\n    public partial class SyncPage : INavigableView<ViewModels.SyncViewModel>\n    {\n        public ViewModels.SyncViewModel ViewModel\n        {\n            get;\n        }\n\n        public SyncPage(ViewModels.SyncViewModel viewModel)\n        {\n            ViewModel = viewModel;\n\n            InitializeComponent();\n        }\n    }\n}\n"]}
{"filename": "Views/Pages/ExplorerPage.xaml.cs", "chunked_list": ["\ufeffusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.Views.Pages\n{\n    /// <summary>\n    /// Interaction logic for ExplorerPage.xaml\n    /// </summary>\n    public partial class ExplorerPage : INavigableView<ViewModels.ExplorerViewModel>\n    {\n        public ViewModels.ExplorerViewModel ViewModel\n        {\n            get;\n        }\n\n        public ExplorerPage(ViewModels.ExplorerViewModel viewModel)\n        {\n            ViewModel = viewModel;\n\n            InitializeComponent();\n        }\n    }\n}"]}
{"filename": "Views/Pages/AboutPage.xaml.cs", "chunked_list": ["\ufeffusing Wpf.Ui.Common.Interfaces;\n\nnamespace SupernoteDesktopClient.Views.Pages\n{\n    /// <summary>\n    /// Interaction logic for AboutPage.xaml\n    /// </summary>\n    public partial class AboutPage : INavigableView<ViewModels.AboutViewModel>\n    {\n        public ViewModels.AboutViewModel ViewModel\n        {\n            get;\n        }\n\n        public AboutPage(ViewModels.AboutViewModel viewModel)\n        {\n            ViewModel = viewModel;\n\n            InitializeComponent();\n        }\n    }\n}"]}
{"filename": "Core/ImageManager.cs", "chunked_list": ["\ufeffusing SupernoteDesktopClient.Core.Win32Api;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Windows.Interop;\nusing System.Windows.Media;\nusing System.Windows.Media.Imaging;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public static class ImageManager\n    {", "{\n    public static class ImageManager\n    {\n        private static object _syncObject = new object();\n        private static Dictionary<string, ImageSource> _imageSourceCache = new Dictionary<string, ImageSource>();\n\n        public static ImageSource GetImageSource(string filename)\n        {\n            return GetImageSourceFromCache(filename, ItemType.File, ItemState.Undefined);\n        }\n", "        public static ImageSource GetImageSource(string directory, ItemState folderType)\n        {\n            return GetImageSourceFromCache(directory, ItemType.Folder, folderType);\n        }\n\n        private static ImageSource GetFileImageSource(string filename)\n        {\n            using (var icon = NativeMethods.GetIcon(Path.GetExtension(filename), ItemType.File, IconSize.Large, ItemState.Undefined))\n            {\n                return Imaging.CreateBitmapSourceFromHIcon(icon.Handle,\n                    System.Windows.Int32Rect.Empty,\n                    BitmapSizeOptions.FromEmptyOptions());\n            }\n        }\n", "        private static ImageSource GetDirectoryImageSource(string directory, ItemState folderType)\n        {\n            using (var icon = NativeMethods.GetIcon(directory, ItemType.Folder, IconSize.Large, folderType))\n            {\n                return Imaging.CreateBitmapSourceFromHIcon(icon.Handle,\n                    System.Windows.Int32Rect.Empty,\n                    BitmapSizeOptions.FromEmptyOptions());\n            }\n        }\n\n        private static ImageSource GetImageSourceFromCache(string itemName, ItemType itemType, ItemState itemState)\n        {\n            string cacheKey = $\"{(itemType is ItemType.Folder ? ItemType.Folder : Path.GetExtension(itemName))}\";\n\n            ImageSource returnValue;\n            _imageSourceCache.TryGetValue(cacheKey, out returnValue);\n", "        private static ImageSource GetImageSourceFromCache(string itemName, ItemType itemType, ItemState itemState)\n        {\n            string cacheKey = $\"{(itemType is ItemType.Folder ? ItemType.Folder : Path.GetExtension(itemName))}\";\n\n            ImageSource returnValue;\n            _imageSourceCache.TryGetValue(cacheKey, out returnValue);\n\n            if (returnValue == null)\n            {\n                lock (_syncObject)\n                {\n                    _imageSourceCache.TryGetValue(cacheKey, out returnValue);\n", "                    if (returnValue == null)\n                    {\n                        if (itemType is ItemType.Folder)\n                            returnValue = GetDirectoryImageSource(itemName, itemState);\n                        else\n                            returnValue = GetFileImageSource(itemName);\n\n                        if (returnValue != null)\n                            _imageSourceCache.Add(cacheKey, returnValue);\n                    }\n                }\n            }\n\n            return returnValue;\n        }\n    }\n}\n"]}
{"filename": "Core/SettingsManager.cs", "chunked_list": ["\ufeffusing Serilog;\nusing SupernoteDesktopClient.Models;\nusing System;\nusing System.IO;\nusing System.Text.Json;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public class SettingsManager\n    {\n        private static readonly Lazy<SettingsManager> _instance = new Lazy<SettingsManager>(() => new SettingsManager());", "    public class SettingsManager\n    {\n        private static readonly Lazy<SettingsManager> _instance = new Lazy<SettingsManager>(() => new SettingsManager());\n        private static readonly JsonSerializerOptions _jsonSerializerOptions = new JsonSerializerOptions { WriteIndented = true };\n        private static readonly string _settingsFileLocation = Path.Combine(FileSystemManager.GetApplicationFolder(), \"SupernoteDesktopClient.config\");\n\n        public static SettingsManager Instance { get { return _instance.Value; } }\n\n        public Settings Settings { get; private set; }\n\n        private SettingsManager()\n        {\n            Settings = new Settings();\n\n            Load();\n        }\n", "        public Settings Settings { get; private set; }\n\n        private SettingsManager()\n        {\n            Settings = new Settings();\n\n            Load();\n        }\n\n        public void Load()\n        {", "        public void Load()\n        {\n            if (File.Exists(_settingsFileLocation) == true)\n            {\n                try\n                {\n                    Settings = JsonSerializer.Deserialize<Settings>(File.ReadAllText(_settingsFileLocation));\n                }\n                catch (Exception ex)\n                {\n                    Log.Warning(\"Error while loading settings - will use default: {EX}\", ex);\n                }\n            }\n        }\n", "                catch (Exception ex)\n                {\n                    Log.Warning(\"Error while loading settings - will use default: {EX}\", ex);\n                }\n            }\n        }\n\n        public void Save()\n        {\n            string jsonSettings = JsonSerializer.Serialize(Settings, _jsonSerializerOptions);\n\n            File.WriteAllText(_settingsFileLocation, jsonSettings);\n        }\n    }\n}\n"]}
{"filename": "Core/Enums.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public enum FileAttribute : uint\n    {\n        Directory = 16,\n        File = 256\n    }\n\n    public enum IconSize : short\n    {\n        Small,\n        Large\n    }\n", "    public enum IconSize : short\n    {\n        Small,\n        Large\n    }\n\n    public enum ItemState : short\n    {\n        Undefined,\n        Open,\n        Close\n    }\n", "    public enum ItemType\n    {\n        Drive,\n        Folder,\n        File\n    }\n\n    [Flags]\n    public enum ShellAttribute : uint\n    {\n        LargeIcon = 0,              // 0x000000000\n        SmallIcon = 1,              // 0x000000001\n        OpenIcon = 2,               // 0x000000002\n        ShellIconSize = 4,          // 0x000000004\n        Pidl = 8,                   // 0x000000008\n        UseFileAttributes = 16,     // 0x000000010\n        AddOverlays = 32,           // 0x000000020\n        OverlayIndex = 64,          // 0x000000040\n        Others = 128,               \n        Icon = 256,                 // 0x000000100  \n        DisplayName = 512,          // 0x000000200\n        TypeName = 1024,            // 0x000000400\n        Attributes = 2048,          // 0x000000800\n        IconLocation = 4096,        // 0x000001000\n        ExeType = 8192,             // 0x000002000\n        SystemIconIndex = 16384,    // 0x000004000\n        LinkOverlay = 32768,        // 0x000008000 \n        Selected = 65536,           // 0x000010000\n        AttributeSpecified = 131072 // 0x000020000\n    }\n}\n", "    public enum ShellAttribute : uint\n    {\n        LargeIcon = 0,              // 0x000000000\n        SmallIcon = 1,              // 0x000000001\n        OpenIcon = 2,               // 0x000000002\n        ShellIconSize = 4,          // 0x000000004\n        Pidl = 8,                   // 0x000000008\n        UseFileAttributes = 16,     // 0x000000010\n        AddOverlays = 32,           // 0x000000020\n        OverlayIndex = 64,          // 0x000000040\n        Others = 128,               \n        Icon = 256,                 // 0x000000100  \n        DisplayName = 512,          // 0x000000200\n        TypeName = 1024,            // 0x000000400\n        Attributes = 2048,          // 0x000000800\n        IconLocation = 4096,        // 0x000001000\n        ExeType = 8192,             // 0x000002000\n        SystemIconIndex = 16384,    // 0x000004000\n        LinkOverlay = 32768,        // 0x000008000 \n        Selected = 65536,           // 0x000010000\n        AttributeSpecified = 131072 // 0x000020000\n    }\n}\n"]}
{"filename": "Core/UpdateManager.cs", "chunked_list": ["\ufeffusing System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public static class UpdateManager\n    {\n        private static bool _updateAvailable = false;\n        private static string _updateMessage = String.Empty;\n        private static string _updateDetails = String.Empty;\n", "        private static bool _updateAvailable = false;\n        private static string _updateMessage = String.Empty;\n        private static string _updateDetails = String.Empty;\n\n        public static async Task<(bool updateAvailable, string updateMessage, string updateDetails)> CheckForUpdate()\n        {\n            if (_updateAvailable == true)\n                return (_updateAvailable, _updateMessage, _updateDetails);\n            else\n            {\n                _updateDetails = String.Empty;\n\n                try\n                {", "                    using (HttpClient client = new HttpClient(new HttpClientHandler() { AllowAutoRedirect = false }))\n                    {\n                        // github will always redirect releases/latest to a latest version tag\n                        using (HttpResponseMessage response = await client.GetAsync(@\"https://github.com/nelinory/SupernoteDesktopClient/releases/latest\"))\n                        {\n                            string redirect = response.Headers.Location.ToString();\n                            if (String.IsNullOrWhiteSpace(redirect) == false)\n                            {\n                                string githubVersion = redirect.Substring(redirect.LastIndexOf(\"/\") + 1);\n                                string currentVersion = ApplicationManager.GetAssemblyVersion();\n", "                                if (String.CompareOrdinal(githubVersion, currentVersion) > 0)\n                                {\n                                    _updateAvailable = true;\n                                    _updateDetails = $\"View {githubVersion} release details.\";\n                                }\n                            }\n                        }\n                    }\n                }\n                catch (Exception)\n                {\n                    _updateAvailable = false;\n                }\n\n                _updateMessage = (_updateAvailable == true)\n                        ? \"There is a new release of Supernote Desktop Client available.\"\n                        : \"You already have the latest version of Supernote Desktop Client installed.\";\n\n                return (_updateAvailable, _updateMessage, _updateDetails);\n            }\n        }\n\n        public static (bool updateAvailable, string updateMessage, string updateDetails) GetUpdateDetails()\n        {\n            return (_updateAvailable, _updateMessage, _updateDetails);\n        }\n    }\n}\n", "                catch (Exception)\n                {\n                    _updateAvailable = false;\n                }\n\n                _updateMessage = (_updateAvailable == true)\n                        ? \"There is a new release of Supernote Desktop Client available.\"\n                        : \"You already have the latest version of Supernote Desktop Client installed.\";\n\n                return (_updateAvailable, _updateMessage, _updateDetails);\n            }\n        }\n\n        public static (bool updateAvailable, string updateMessage, string updateDetails) GetUpdateDetails()\n        {\n            return (_updateAvailable, _updateMessage, _updateDetails);\n        }\n    }\n}\n"]}
{"filename": "Core/ApplicationManager.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public static class ApplicationManager\n    {\n        public static string GetAssemblyVersion()\n        {\n            Version versionObject = System.Reflection.Assembly.GetEntryAssembly().GetName().Version;\n\n            return $\"v{versionObject.Major}.{versionObject.Minor}.{versionObject.Build}\";\n        }\n    }\n}\n"]}
{"filename": "Core/DiagnosticLogger.cs", "chunked_list": ["\ufeffusing Serilog.Context;\nusing System.Runtime.CompilerServices;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public static class DiagnosticLogger\n    {\n        public static void Log(string messageTemplate, [CallerMemberName] string callerName = \"\", params object[] args)\n        {\n            if (SettingsManager.Instance.Settings.General.DiagnosticLogEnabled == true)\n            {", "            if (SettingsManager.Instance.Settings.General.DiagnosticLogEnabled == true)\n            {\n                using (LogContext.PushProperty(\"IsDiag\", 1))\n                {\n                    Serilog.Log.Information($\"Caller: {callerName} - \" + messageTemplate, args);\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "Core/FileSystemManager.cs", "chunked_list": ["\ufeffusing System;\nusing System.IO;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public static class FileSystemManager\n    {\n        public static void ForceDeleteDirectory(string path)\n        {\n            var directory = new DirectoryInfo(path) { Attributes = FileAttributes.Normal };\n", "            foreach (var info in directory.GetFileSystemInfos(\"*\", SearchOption.AllDirectories))\n            {\n                info.Attributes = FileAttributes.Normal;\n            }\n\n            directory.Delete(true);\n        }\n\n        public static void EnsureFolderExists(string fileName)\n        {\n            string folderName = Path.GetDirectoryName(fileName);\n", "        public static void EnsureFolderExists(string fileName)\n        {\n            string folderName = Path.GetDirectoryName(fileName);\n\n            if (Directory.Exists(folderName) == false)\n                Directory.CreateDirectory(folderName);\n        }\n\n        public static string GetApplicationFolder()\n        {\n            return AppDomain.CurrentDomain.BaseDirectory;\n        }\n", "        public static string GetApplicationFolder()\n        {\n            return AppDomain.CurrentDomain.BaseDirectory;\n        }\n\n        public static string GetApplicationDeviceFolder()\n        {\n            return Path.Combine(GetApplicationFolder(), @\"Device\");\n        }\n\n        public static DateTime? GetFolderCreateDateTime(string folder)\n        {\n            DateTime? returnResult = null;\n", "        public static DateTime? GetFolderCreateDateTime(string folder)\n        {\n            DateTime? returnResult = null;\n\n            if (String.IsNullOrWhiteSpace(folder) == false && Directory.Exists(folder) == true)\n                returnResult = Directory.GetCreationTime(folder);\n\n            return returnResult;\n        }\n\n        public static void CleanupTempConversionFiles()\n        {\n            try\n            {\n                string[] tempFileNames = Directory.GetFiles(Path.GetTempPath(), $\"*_sdc.pdf\");", "        public static void CleanupTempConversionFiles()\n        {\n            try\n            {\n                string[] tempFileNames = Directory.GetFiles(Path.GetTempPath(), $\"*_sdc.pdf\");\n                for (int i = 0; i < tempFileNames.Length; i++)\n                {\n                    if (File.Exists(tempFileNames[i]) == true)\n                        File.Delete(tempFileNames[i]);\n                }\n            }", "            catch (Exception)\n            {\n                // errors while deleting temporary files\n            }\n        }\n    }\n}\n"]}
{"filename": "Core/ArchiveManager.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Linq;\n\nnamespace SupernoteDesktopClient.Core\n{\n    public static class ArchiveManager\n    {\n        public static void Archive(string backupFolder, string archiveFolder, int maxArchivesToKeep)\n        {\n            string currentDateTime = String.Format(\"{0:yyyyMMdd_HHmmss}\", DateTime.Now);\n            string archiveFileName = $\"{currentDateTime}_{Path.GetFileName(backupFolder)}.zip\";\n", "    public static class ArchiveManager\n    {\n        public static void Archive(string backupFolder, string archiveFolder, int maxArchivesToKeep)\n        {\n            string currentDateTime = String.Format(\"{0:yyyyMMdd_HHmmss}\", DateTime.Now);\n            string archiveFileName = $\"{currentDateTime}_{Path.GetFileName(backupFolder)}.zip\";\n\n            if (CreateArchive(backupFolder, Path.Combine(archiveFolder, archiveFileName)) == true)\n                PurgeOldArchives(archiveFolder, Path.GetFileName(backupFolder), maxArchivesToKeep);\n        }\n", "        public static ObservableCollection<Models.ArchiveFileAttributes> GetArchivesList(string archiveFolder)\n        {\n            ObservableCollection<Models.ArchiveFileAttributes> archiveFiles = new ObservableCollection<Models.ArchiveFileAttributes>();\n\n            if (String.IsNullOrWhiteSpace(archiveFolder) == false && Directory.Exists(archiveFolder) == true)\n            {\n                var directory = new DirectoryInfo(archiveFolder);\n                foreach (FileInfo fileInfo in directory.GetFiles().OrderByDescending(p => p.CreationTime))\n                {\n                    archiveFiles.Add(new Models.ArchiveFileAttributes(fileInfo.Name, fileInfo.DirectoryName, fileInfo.LastWriteTime, fileInfo.Length));\n                }\n            }\n\n            return archiveFiles;\n        }\n", "        private static bool CreateArchive(string backupFolder, string archiveFileName)\n        {\n            bool success = false;\n\n            if (Directory.Exists(backupFolder) == true && Directory.GetFiles(backupFolder, \"*\", SearchOption.AllDirectories).Length > 0)\n            {\n                FileSystemManager.EnsureFolderExists(archiveFileName);\n\n                ZipFile.CreateFromDirectory(backupFolder, archiveFileName, CompressionLevel.Fastest, false);\n\n                success = true;\n            }\n\n            return success;\n        }\n", "        private static void PurgeOldArchives(string archiveFolder, string archiveFilePattern, int maxArchivesToKeep)\n        {\n            if (Directory.Exists(archiveFolder) == true)\n            {\n                string[] archiveFileNames = Directory.GetFiles(archiveFolder, $\"*{archiveFilePattern}.zip\");\n                if (archiveFileNames.Length > maxArchivesToKeep)\n                {\n                    Array.Sort(archiveFileNames, StringComparer.InvariantCulture);\n\n                    int filesToDelete = archiveFileNames.Length - maxArchivesToKeep;\n                    for (int i = 0; i < filesToDelete; i++)\n                    {", "                    for (int i = 0; i < filesToDelete; i++)\n                    {\n                        if (File.Exists(archiveFileNames[i]) == true)\n                            File.Delete(archiveFileNames[i]);\n                    }\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "Core/Win32Api/NativeMethods.cs", "chunked_list": ["\ufeffusing System;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\n\nnamespace SupernoteDesktopClient.Core.Win32Api\n{\n    public sealed class NativeMethods\n    {\n        // imports\n        [DllImport(\"user32.dll\")]\n        internal static extern bool SetForegroundWindow(IntPtr hWnd);\n\n        [DllImport(\"user32.dll\")]\n        internal static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);\n\n        [DllImport(\"user32.dll\")]\n        internal static extern bool SetWindowPlacement(IntPtr hWnd, [In] ref WindowPlacement lpwndpl);\n\n        [DllImport(\"user32.dll\")]\n        internal static extern bool GetWindowPlacement(IntPtr hWnd, out WindowPlacement lpwndpl);\n\n        [DllImport(\"shell32.dll\", CharSet = CharSet.Auto)]", "        public static extern IntPtr SHGetFileInfo(string path, uint attributes, out ShellFileInfo fileInfo, uint size, uint flags);\n\n        [DllImport(\"user32.dll\", SetLastError = true)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        public static extern bool DestroyIcon(IntPtr pointer);\n\n        // constants\n        public const int SW_SHOW_NORMAL_WINDOW = 1;\n        public const int SW_SHOW_MINIMIZED_WINDOW = 2;\n        public const int SW_RESTORE_WINDOW = 9;\n\n        // public wrappers", "        public const int SW_SHOW_MINIMIZED_WINDOW = 2;\n        public const int SW_RESTORE_WINDOW = 9;\n\n        // public wrappers\n        public static void ShowWindowEx(IntPtr hWnd, int nCmdShow) { ShowWindow(hWnd, nCmdShow); }\n\n        public static void SetForegroundWindowEx(IntPtr hWnd) { SetForegroundWindow(hWnd); }\n\n        public static bool SetWindowPlacementEx(IntPtr hWnd, [In] ref WindowPlacement lpwndpl)\n        {\n            if (lpwndpl.Length > 0)\n            {\n                try\n                {\n                    lpwndpl.Length = Marshal.SizeOf(typeof(WindowPlacement));\n                    lpwndpl.Flags = 0;\n                    lpwndpl.ShowCmd = (lpwndpl.ShowCmd == NativeMethods.SW_SHOW_MINIMIZED_WINDOW ? NativeMethods.SW_SHOW_NORMAL_WINDOW : lpwndpl.ShowCmd);\n                }\n                catch\n                {\n                }\n\n                return SetWindowPlacement(hWnd, ref lpwndpl);\n            }\n            else\n                return true;\n        }\n", "        public static bool SetWindowPlacementEx(IntPtr hWnd, [In] ref WindowPlacement lpwndpl)\n        {\n            if (lpwndpl.Length > 0)\n            {\n                try\n                {\n                    lpwndpl.Length = Marshal.SizeOf(typeof(WindowPlacement));\n                    lpwndpl.Flags = 0;\n                    lpwndpl.ShowCmd = (lpwndpl.ShowCmd == NativeMethods.SW_SHOW_MINIMIZED_WINDOW ? NativeMethods.SW_SHOW_NORMAL_WINDOW : lpwndpl.ShowCmd);\n                }\n                catch\n                {\n                }\n\n                return SetWindowPlacement(hWnd, ref lpwndpl);\n            }\n            else\n                return true;\n        }\n", "        public static WindowPlacement GetWindowPlacementEx(IntPtr hWnd)\n        {\n            WindowPlacement lpwndpl;\n            GetWindowPlacement(hWnd, out lpwndpl);\n\n            return lpwndpl;\n        }\n\n        public static Icon GetIcon(string path, ItemType type, IconSize iconSize, ItemState state)\n        {\n            uint attributes = (uint)(type == ItemType.Folder ? FileAttribute.Directory : FileAttribute.File);\n            uint flags = (uint)(ShellAttribute.Icon | ShellAttribute.UseFileAttributes);\n", "        public static Icon GetIcon(string path, ItemType type, IconSize iconSize, ItemState state)\n        {\n            uint attributes = (uint)(type == ItemType.Folder ? FileAttribute.Directory : FileAttribute.File);\n            uint flags = (uint)(ShellAttribute.Icon | ShellAttribute.UseFileAttributes);\n\n            if (type == ItemType.Folder && state == ItemState.Open)\n                flags = flags | (uint)ShellAttribute.OpenIcon;\n\n            if (iconSize == IconSize.Small)\n                flags = flags | (uint)ShellAttribute.SmallIcon;\n            else\n                flags = flags | (uint)ShellAttribute.LargeIcon;\n\n            ShellFileInfo fileInfo = new ShellFileInfo();\n            uint size = (uint)Marshal.SizeOf(fileInfo);\n            IntPtr result = SHGetFileInfo(path, attributes, out fileInfo, size, flags);\n", "            if (iconSize == IconSize.Small)\n                flags = flags | (uint)ShellAttribute.SmallIcon;\n            else\n                flags = flags | (uint)ShellAttribute.LargeIcon;\n\n            ShellFileInfo fileInfo = new ShellFileInfo();\n            uint size = (uint)Marshal.SizeOf(fileInfo);\n            IntPtr result = SHGetFileInfo(path, attributes, out fileInfo, size, flags);\n\n            if (result == IntPtr.Zero)\n                throw Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error());\n\n            try\n            {\n                return (Icon)Icon.FromHandle(fileInfo.hIcon).Clone();\n            }\n            catch\n            {\n                throw;\n            }\n            finally\n            {\n                DestroyIcon(fileInfo.hIcon);\n            }\n        }\n    }\n}\n", "            if (result == IntPtr.Zero)\n                throw Marshal.GetExceptionForHR(Marshal.GetHRForLastWin32Error());\n\n            try\n            {\n                return (Icon)Icon.FromHandle(fileInfo.hIcon).Clone();\n            }\n            catch\n            {\n                throw;\n            }\n            finally\n            {\n                DestroyIcon(fileInfo.hIcon);\n            }\n        }\n    }\n}\n"]}
{"filename": "Core/Win32Api/Point.cs", "chunked_list": ["\ufeffusing System.Runtime.InteropServices;\nusing System.Text.Json.Serialization;\n\nnamespace SupernoteDesktopClient.Core.Win32Api\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct Point\n    {\n        public int X { get; set; }\n        public int Y { get; set; }\n\n        [JsonConstructor]\n        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n    }\n}\n", "        public int X { get; set; }\n        public int Y { get; set; }\n\n        [JsonConstructor]\n        public Point(int x, int y)\n        {\n            X = x;\n            Y = y;\n        }\n    }\n}\n"]}
{"filename": "Core/Win32Api/ShellFileInfo.cs", "chunked_list": ["\ufeffusing System;\nusing System.Runtime.InteropServices;\n\nnamespace SupernoteDesktopClient.Core.Win32Api\n{\n    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]\n    public struct ShellFileInfo\n    {\n        public IntPtr hIcon;\n\n        public int iIcon;\n", "        public IntPtr hIcon;\n\n        public int iIcon;\n\n        public uint dwAttributes;\n\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]\n        public string szDisplayName;\n\n        [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]\n        public string szTypeName;\n    }\n}\n", "        public string szTypeName;\n    }\n}\n"]}
{"filename": "Core/Win32Api/Rect.cs", "chunked_list": ["\ufeffusing System.Runtime.InteropServices;\nusing System.Text.Json.Serialization;\n\nnamespace SupernoteDesktopClient.Core.Win32Api\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct Rect\n    {\n        public int Left { get; set; }\n        public int Top { get; set; }\n        public int Right { get; set; }", "        public int Left { get; set; }\n        public int Top { get; set; }\n        public int Right { get; set; }\n        public int Bottom { get; set; }\n\n        [JsonConstructor]\n        public Rect(int left, int top, int right, int bottom)\n        {\n            Left = left;\n            Top = top;\n            Right = right;\n            Bottom = bottom;\n        }\n    }\n}\n"]}
{"filename": "Core/Win32Api/WindowPlacement.cs", "chunked_list": ["\ufeffusing System.Runtime.InteropServices;\nusing System.Text.Json.Serialization;\n\nnamespace SupernoteDesktopClient.Core.Win32Api\n{\n    [StructLayout(LayoutKind.Sequential)]\n    public struct WindowPlacement\n    {\n        public int Length { get; set; }\n        public int Flags { get; set; }\n        public int ShowCmd { get; set; }", "        public int Length { get; set; }\n        public int Flags { get; set; }\n        public int ShowCmd { get; set; }\n        public Point MinPosition { get; set; }\n        public Point MaxPosition { get; set; }\n        public Rect NormalPosition { get; set; }\n\n        [JsonConstructor]\n        public WindowPlacement(int length, int flags, int showCmd, Point minPosition, Point maxPosition, Rect normalPosition)\n        {\n            Length = length;\n            Flags = flags;\n            ShowCmd = showCmd;\n            MinPosition = minPosition;\n            MaxPosition = maxPosition;\n            NormalPosition = normalPosition;\n        }\n    }\n}\n"]}
