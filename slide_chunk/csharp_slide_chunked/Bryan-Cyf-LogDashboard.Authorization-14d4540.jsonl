{"filename": "sample/LogDashboard.Sample/Program.cs", "chunked_list": ["using LogDashboard;\nusing NLog.Web;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();", "// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\n\nbuilder.Services.AddLogDashboard(new LogdashboardAccountAuthorizeFilter(\"admin\", \"123qwe\"));\n\n//Cookie\n//builder.Services.AddLogDashboard(\n//    new LogdashboardAccountAuthorizeFilter(\"admin\", \"123qwe\",\n//        cookieOpt =>\n//        {", "//        cookieOpt =>\n//        {\n//            cookieOpt.Expire = TimeSpan.FromDays(1);//\u00bd\u02b1,\u012c1\n//            cookieOpt.Secure = (filter) => $\"{filter.UserName}&&{filter.Password}\";//Token\u0739\u0536,\u03aa\u012c\u05b5\n//        }));\n\nvar logger = NLog.Web.NLogBuilder.ConfigureNLog(\"NLog.config\").GetCurrentClassLogger();\nlogger.Debug(\"init main\");\n\nvar app = builder.Build();", "\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\n\napp.UseLogDashboard();\n\napp.MapControllers();\n\napp.Run();"]}
{"filename": "src/LogDashboard.Authorization/LogDashboardCookieOptions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Data.Common;\nusing System.Linq;\nusing System.Reflection;\nusing DapperExtensions.Sql;\nusing LogDashboard.Authorization;\nusing LogDashboard.Extensions;\nusing LogDashboard.Models;\nusing Microsoft.AspNetCore.Authorization;", "using LogDashboard.Models;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\n\nnamespace LogDashboard\n{\n    public class LogDashboardCookieOptions\n    {\n        public TimeSpan Expire { get; set; }\n\n        public string TokenKey { get; set; }\n", "        public TimeSpan Expire { get; set; }\n\n        public string TokenKey { get; set; }\n\n        public string TimestampKey { get; set; }\n\n        public Func<LogdashboardAccountAuthorizeFilter, string> Secure { get; set; }\n\n        public LogDashboardCookieOptions()\n        {\n            Expire = TimeSpan.FromDays(1);\n            TokenKey = \"LogDashboard.CookieKey\";\n            TimestampKey = \"LogDashboard.Timestamp\";\n            Secure = (filter) => $\"{filter.UserName}&&{filter.Password}\";\n        }\n    }\n}\n\n"]}
{"filename": "src/LogDashboard.Authorization/LogDashboardServiceCollectionExtensions.cs", "chunked_list": ["\ufeffusing System;\nusing LogDashboard.LogDashboardBuilder;\nusing LogDashboard.Handle;\nusing LogDashboard.Route;\nusing Microsoft.Extensions.DependencyInjection;\nusing LogDashboard.Views.Dashboard;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Builder;\nusing LogDashboard;\n", "using LogDashboard;\n\nnamespace LogDashboard\n{\n    public static class LogDashboardServiceCollectionExtensions\n    {\n        public static ILogDashboardBuilder AddLogDashboard(this IServiceCollection services, LogdashboardAccountAuthorizeFilter filter, Action<LogDashboardOptions> func = null)\n        {\n            LogDashboardRoutes.Routes.AddRoute(new LogDashboardRoute(LogDashboardAuthorizationConsts.LoginRoute, typeof(Login)));\n\n            services.AddSingleton(filter);\n            services.AddSingleton<IStartupFilter, LogDashboardLoginStartupFilter>();\n            services.AddTransient<AuthorizationHandle>();\n            services.AddTransient<Login>();\n            var options = new LogDashboardOptions();\n            func?.Invoke(options);\n            options.AddAuthorizationFilter(filter);\n\n            Action<LogDashboardOptions> config = x =>\n            {\n                func?.Invoke(x);\n                x.AddAuthorizationFilter(filter);\n            };\n\n            return services.AddLogDashboard(config);\n        }\n    }\n}\n", "internal class LogDashboardLoginStartupFilter : IStartupFilter\n{\n    public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)\n    {\n        return app =>\n        {\n            var options = app.ApplicationServices.GetRequiredService<LogDashboardOptions>();\n            app.Map($\"{options.PathMatch}{LogDashboardAuthorizationConsts.LoginRoute}\", app => { app.UseMiddleware<LogDashboardAuthorizationMiddleware>(); });\n            next(app);\n        };\n    }\n}"]}
{"filename": "src/LogDashboard.Authorization/LogDashboardAuthorizationConsts.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace LogDashboard\n{\n    public class LogDashboardAuthorizationConsts\n    {\n        public const string LoginRoute = \"/Authorization/Login\";\n    }\n}\n", "        public const string LoginRoute = \"/Authorization/Login\";\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/LogDashboardAuthorizationMiddleware.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;", "using Microsoft.AspNetCore.Http;\nusing Newtonsoft.Json;\nusing LogDashboard.Authorization;\nusing LogDashboard.EmbeddedFiles;\nusing LogDashboard.Handle;\nusing LogDashboard.Repository;\nusing LogDashboard.Route;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace LogDashboard", "\nnamespace LogDashboard\n{\n\n    public class LogDashboardAuthorizationMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public LogDashboardAuthorizationMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n", "        public async Task InvokeAsync(HttpContext httpContext)\n        {\n            using var scope = httpContext.RequestServices.CreateScope();\n            var opts = scope.ServiceProvider.GetService<LogDashboardOptions>();\n\n            var requestUrl = httpContext.Request.Path.Value;\n\n            //EmbeddedFile\n            if (requestUrl.Contains(\"css\") || requestUrl.Contains(\"js\") || requestUrl.Contains(\"woff\")|| requestUrl.Contains(\"jpg\"))\n            {\n                await LogDashboardAuthorizationEmbeddedFiles.IncludeEmbeddedFile(httpContext, requestUrl);\n                return;\n            }\n\n            // Find Router\n            var router = LogDashboardRoutes.Routes.FindRoute(LogDashboardAuthorizationConsts.LoginRoute);\n", "            if (requestUrl.Contains(\"css\") || requestUrl.Contains(\"js\") || requestUrl.Contains(\"woff\")|| requestUrl.Contains(\"jpg\"))\n            {\n                await LogDashboardAuthorizationEmbeddedFiles.IncludeEmbeddedFile(httpContext, requestUrl);\n                return;\n            }\n\n            // Find Router\n            var router = LogDashboardRoutes.Routes.FindRoute(LogDashboardAuthorizationConsts.LoginRoute);\n\n            if (router == null)\n            {\n                httpContext.Response.StatusCode = 404;\n                return;\n            }\n\n            var logDashboardContext = new LogDashboardContext(httpContext, router, opts);\n\n            //Activate Handle\n            var handleType = Assembly.GetAssembly(typeof(LogDashboardAuthorizationMiddleware))\n                .GetTypes().FirstOrDefault(x => x.Name.Contains(router.Handle + \"Handle\"));\n\n            var handle =\n                scope.ServiceProvider.GetRequiredService(handleType) as\n                    ILogDashboardHandle;\n", "            if (router == null)\n            {\n                httpContext.Response.StatusCode = 404;\n                return;\n            }\n\n            var logDashboardContext = new LogDashboardContext(httpContext, router, opts);\n\n            //Activate Handle\n            var handleType = Assembly.GetAssembly(typeof(LogDashboardAuthorizationMiddleware))\n                .GetTypes().FirstOrDefault(x => x.Name.Contains(router.Handle + \"Handle\"));\n\n            var handle =\n                scope.ServiceProvider.GetRequiredService(handleType) as\n                    ILogDashboardHandle;\n", "            if (handle == null)\n            {\n                httpContext.Response.StatusCode = 404;\n                return;\n            }\n\n\n            handle.Context = logDashboardContext;\n\n            string html;\n\n            var method = handle.GetType().GetMethod(router.Action);\n            // ReSharper disable once PossibleNullReferenceException\n            var parametersLength = method.GetParameters().Length;\n", "            if (parametersLength == 0)\n            {\n                html = await (Task<string>)method.Invoke(handle, null);\n            }\n            else\n            {\n                if (httpContext.Request.ContentLength == null && httpContext.Request.Query.Count <= 0)\n                {\n                    html = await (Task<string>)method.Invoke(handle, new Object[] { null });\n                }\n                else\n                {\n                    object args;", "                    if (httpContext.Request.Query.Count > 0)\n                    {\n                        var dict = new Dictionary<string, string>();\n                        httpContext.Request.Query.ToList().ForEach(x => dict.Add(x.Key, x.Value));\n                        args = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(dict),\n                            method.GetParameters().First().ParameterType);\n                    }\n                    else\n                    {\n\n                        using var reader = new StreamReader(httpContext.Request.Body);\n                        var requestJson = await reader.ReadToEndAsync();\n\n                        args = JsonConvert.DeserializeObject(requestJson,\n                        method.GetParameters().First().ParameterType);\n\n                    }\n\n                    html = await (Task<string>)method.Invoke(handle, new[] { args });\n\n                }\n            }\n\n            await httpContext.Response.WriteAsync(html);\n        }\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/Extensions/MD5Extensions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace LogDashboard.Extensions\n{\n\n    internal static class MD5Extensions\n    {\n        public static string ToMD5(this string input, MD5Length length = MD5Length.L32)\n        {\n            return MD5Encrypt.MD5(input, length);\n        }\n    }\n", "    internal static class MD5Extensions\n    {\n        public static string ToMD5(this string input, MD5Length length = MD5Length.L32)\n        {\n            return MD5Encrypt.MD5(input, length);\n        }\n    }\n\n    internal class MD5Encrypt\n    {\n        public static string MD5(string srcString, MD5Length length = MD5Length.L32)\n        {", "    internal class MD5Encrypt\n    {\n        public static string MD5(string srcString, MD5Length length = MD5Length.L32)\n        {\n            using (MD5 md5 = System.Security.Cryptography.MD5.Create())\n            {\n                byte[] bytes_md5_in = Encoding.UTF8.GetBytes(srcString);\n                byte[] bytes_md5_out = md5.ComputeHash(bytes_md5_in);\n\n                string str_md5_out = length == MD5Length.L32\n                    ? BitConverter.ToString(bytes_md5_out)\n                    : BitConverter.ToString(bytes_md5_out, 4, 8);\n\n                str_md5_out = str_md5_out.Replace(\"-\", \"\");\n                return str_md5_out;\n            }\n        }\n    }\n", "    internal enum MD5Length\n    {\n        L16 = 16,\n        L32 = 32\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/Extensions/DateTimeExtensions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace LogDashboard.Extensions\n{\n    internal static class DateTimeExtensions\n    {\n\n        public static double ToUnixTimestamp(this DateTime target)\n        {\n            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0);\n            return Math.Floor((target - dateTime).TotalSeconds);\n        }\n", "        public static double ToUnixTimestamp(this DateTime target)\n        {\n            DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0);\n            return Math.Floor((target - dateTime).TotalSeconds);\n        }\n\n        public static DateTime FromUnixTimestamp(this double unixTime)\n        {\n            return new DateTime(1970, 1, 1, 0, 0, 0, 0).AddSeconds(unixTime);\n        }\n", "        public static DateTime ToDayEnd(this DateTime target)\n        {\n            return target.Date.AddDays(1.0).AddMilliseconds(-1.0);\n        }\n\n        public static DateTime StartOfWeek(this DateTime dt, DayOfWeek startOfWeek)\n        {\n            int num = dt.DayOfWeek - startOfWeek;\n            if (num < 0)\n            {\n                num += 7;\n            }\n\n            return dt.AddDays(-1 * num).Date;\n        }\n", "            if (num < 0)\n            {\n                num += 7;\n            }\n\n            return dt.AddDays(-1 * num).Date;\n        }\n\n        public static IEnumerable<DateTime> DaysOfMonth(int year, int month)\n        {\n            return from day in Enumerable.Range(0, DateTime.DaysInMonth(year, month))\n                   select new DateTime(year, month, day + 1);\n        }\n", "        public static IEnumerable<DateTime> DaysOfMonth(int year, int month)\n        {\n            return from day in Enumerable.Range(0, DateTime.DaysInMonth(year, month))\n                   select new DateTime(year, month, day + 1);\n        }\n\n        public static int WeekDayInstanceOfMonth(this DateTime dateTime)\n        {\n            int y = 0;\n            return (from date in DaysOfMonth(dateTime.Year, dateTime.Month)\n                    where dateTime.DayOfWeek.Equals(date.DayOfWeek)\n                    select date into x\n                    select new\n                    {\n                        n = ++y,\n                        date = x\n                    } into x\n                    where x.date.Equals(new DateTime(dateTime.Year, dateTime.Month, dateTime.Day))\n                    select x.n).FirstOrDefault();\n        }\n", "        public static int TotalDaysInMonth(this DateTime dateTime)\n        {\n            return DaysOfMonth(dateTime.Year, dateTime.Month).Count();\n        }\n\n        public static DateTime ToDateTimeUnspecified(this DateTime date)\n        {\n            if (date.Kind == DateTimeKind.Unspecified)\n            {\n                return date;\n            }\n\n            return new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, DateTimeKind.Unspecified);\n        }\n", "        public static DateTime TrimMilliseconds(this DateTime date)\n        {\n            return new DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, date.Kind);\n        }\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/Models/LoginInput.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace LogDashboard.Models\n{\n    public class LoginInput\n    {\n        public string Name { get; set; }\n\n        public string Password { get; set; }\n    }\n}\n", "        public string Password { get; set; }\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/Handle/AuthorizationHandle.cs", "chunked_list": ["\ufeffusing LogDashboard.Models;\nusing LogDashboard.Route;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace LogDashboard.Handle\n{\n    public class AuthorizationHandle : LogDashboardHandleBase\n    {\n        private readonly LogdashboardAccountAuthorizeFilter _filter;\n\n        public AuthorizationHandle(\n            IServiceProvider serviceProvider,\n            LogdashboardAccountAuthorizeFilter filter) : base(serviceProvider)\n        {\n            _filter = filter;\n        }\n", "        private readonly LogdashboardAccountAuthorizeFilter _filter;\n\n        public AuthorizationHandle(\n            IServiceProvider serviceProvider,\n            LogdashboardAccountAuthorizeFilter filter) : base(serviceProvider)\n        {\n            _filter = filter;\n        }\n\n        public async Task<string> Login(LoginInput input)\n        {", "        public async Task<string> Login(LoginInput input)\n        {\n            if (_filter.Password == input?.Password && _filter.UserName == input?.Name)\n            {\n                _filter.SetCookieValue(Context.HttpContext);\n\n                //Redirect\n                var homeUrl = LogDashboardRoutes.Routes.FindRoute(string.Empty).Key;\n                Context.HttpContext.Response.Redirect($\"{Context.Options.PathMatch}{homeUrl}\");\n                return string.Empty;\n            }\n            return await View();\n        }\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/Authorization/LogdashboardAccountAuthorizeFilter.cs", "chunked_list": ["\ufeffusing LogDashboard.Authorization;\nusing LogDashboard.Extensions;\nusing LogDashboard.Route;\nusing Microsoft.AspNetCore.Http;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace LogDashboard", "\nnamespace LogDashboard\n{\n    public class LogdashboardAccountAuthorizeFilter : ILogDashboardAuthorizationFilter\n    {\n        public string UserName { get; set; }\n\n        public string Password { get; set; }\n\n        public LogDashboardCookieOptions CookieOptions { get; set; }\n\n        public LogdashboardAccountAuthorizeFilter(string userName, string password)\n        {\n            UserName = userName;\n            Password = password;\n            CookieOptions = new LogDashboardCookieOptions();\n        }\n\n        public LogdashboardAccountAuthorizeFilter(string userName, string password, Action<LogDashboardCookieOptions> cookieConfig)\n        {\n            UserName = userName;\n            Password = password;\n            CookieOptions = new LogDashboardCookieOptions();\n            cookieConfig.Invoke(CookieOptions);\n        }\n", "        public LogDashboardCookieOptions CookieOptions { get; set; }\n\n        public LogdashboardAccountAuthorizeFilter(string userName, string password)\n        {\n            UserName = userName;\n            Password = password;\n            CookieOptions = new LogDashboardCookieOptions();\n        }\n\n        public LogdashboardAccountAuthorizeFilter(string userName, string password, Action<LogDashboardCookieOptions> cookieConfig)\n        {\n            UserName = userName;\n            Password = password;\n            CookieOptions = new LogDashboardCookieOptions();\n            cookieConfig.Invoke(CookieOptions);\n        }\n", "        public bool Authorization(LogDashboardContext context)\n        {\n            bool isValidAuthorize = false;\n\n            if (context.HttpContext.Request != null && context.HttpContext.Request.Cookies != null)\n            {\n                var (token, timestamp) = GetCookieValue(context.HttpContext);\n\n                if (double.TryParse(timestamp, out var time) &&\n                    time <= DateTime.Now.ToUnixTimestamp() &&\n                    time > DateTime.Now.Add(-CookieOptions.Expire).ToUnixTimestamp())\n                {\n                    var vaildToken = GetToken(timestamp);\n                    isValidAuthorize = vaildToken == token;\n                }\n            }\n\n            //Rediect", "                if (double.TryParse(timestamp, out var time) &&\n                    time <= DateTime.Now.ToUnixTimestamp() &&\n                    time > DateTime.Now.Add(-CookieOptions.Expire).ToUnixTimestamp())\n                {\n                    var vaildToken = GetToken(timestamp);\n                    isValidAuthorize = vaildToken == token;\n                }\n            }\n\n            //Rediect\n            if (!isValidAuthorize)\n            {", "            if (!isValidAuthorize)\n            {\n                if (LogDashboardAuthorizationConsts.LoginRoute.ToLower() != context.HttpContext.Request?.Path.Value.ToLower())\n                {\n                    var loginPath = $\"{context.Options.PathMatch}{LogDashboardAuthorizationConsts.LoginRoute}\";\n                    context.HttpContext.Response.Redirect(loginPath);\n                }\n                else\n                {\n                    isValidAuthorize = true;\n                }\n            }\n\n            return isValidAuthorize;\n        }\n\n        public (string, string) GetCookieValue(HttpContext context)\n        {\n            context.Request.Cookies.TryGetValue(CookieOptions.TokenKey, out var token);\n            context.Request.Cookies.TryGetValue(CookieOptions.TimestampKey, out var timestamp);\n            return (token, timestamp);\n        }\n", "        public void SetCookieValue(HttpContext context)\n        {\n            var timestamp = DateTime.Now.ToUnixTimestamp().ToString();\n            var token = GetToken(timestamp);\n            context.Response.Cookies.Append(CookieOptions.TokenKey, token, new CookieOptions() { Expires = DateTime.Now.Add(CookieOptions.Expire) });\n            context.Response.Cookies.Append(CookieOptions.TimestampKey, timestamp, new CookieOptions() { Expires = DateTime.Now.Add(CookieOptions.Expire) });\n        }\n\n        private string GetToken(string timestamp)\n        {\n            return $\"{CookieOptions.Secure(this)}&&{timestamp}\".ToMD5();\n        }\n    }\n}\n", "        private string GetToken(string timestamp)\n        {\n            return $\"{CookieOptions.Secure(this)}&&{timestamp}\".ToMD5();\n        }\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/EmbeddedFiles/LogDashboardAuthorizationEmbeddedFiles.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing LogDashboard.Route;\nusing Microsoft.AspNetCore.Http;\n\n", "\n\nnamespace LogDashboard.EmbeddedFiles\n{\n    public class LogDashboardAuthorizationEmbeddedFiles\n    {\n        static readonly Dictionary<string, string> ResponseType = new Dictionary<string, string>\n        {\n            { \".css\",\"text/css\"},\n            { \".js\",\"application/javascript\"},\n            {\".woff2\",\"font/woff2\" },\n            {\".woff\",\"font/woff\" },\n            {\".jpg\",\"image/jpeg\" },\n            {\".ttf\",\"application/octet-stream\" },\n        };\n", "        private static readonly Assembly Assembly;\n\n        static LogDashboardAuthorizationEmbeddedFiles()\n        {\n            Assembly = Assembly.GetExecutingAssembly();\n        }\n\n        public static async Task IncludeEmbeddedFile(HttpContext context, string path)\n        {\n            context.Response.OnStarting(() =>\n            {", "                if (context.Response.StatusCode == (int)HttpStatusCode.OK)\n                {\n                    context.Response.ContentType = ResponseType[Path.GetExtension(path)];\n                }\n\n                return Task.CompletedTask;\n            });\n\n            try\n            {\n                using var inputStream = Assembly.GetManifestResourceStream($\"{LogDashboardConsts.Root}.{path.Substring(1)}\");", "                if (inputStream == null)\n                {\n                    throw new ArgumentException($@\"Resource with name {path.Substring(1)} not found in assembly {Assembly}.\");\n                }\n                await inputStream.CopyToAsync(context.Response.Body).ConfigureAwait(false);\n            }\n            catch (Exception e)\n            {\n                await context.Response.WriteAsync($\"{e.StackTrace}\");\n            }\n\n        }\n    }\n}\n"]}
{"filename": "src/LogDashboard.Authorization/Views/Dashboard/Login.generated.cs", "chunked_list": ["\ufeff#pragma warning disable 1591\n//------------------------------------------------------------------------------\n// <auto-generated>\n//     \u6b64\u4ee3\u7801\u7531\u5de5\u5177\u751f\u6210\u3002\n//     \u8fd0\u884c\u65f6\u7248\u672c:4.0.30319.42000\n//\n//     \u5bf9\u6b64\u6587\u4ef6\u7684\u66f4\u6539\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e0d\u6b63\u786e\u7684\u884c\u4e3a\uff0c\u5e76\u4e14\u5982\u679c\n//     \u91cd\u65b0\u751f\u6210\u4ee3\u7801\uff0c\u8fd9\u4e9b\u66f4\u6539\u5c06\u4f1a\u4e22\u5931\u3002\n// </auto-generated>\n//------------------------------------------------------------------------------", "// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace LogDashboard.Views.Dashboard\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    ", "    using System.Text;\n    \n    #line 2 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n    using LogDashboard.Extensions;\n    \n    #line default\n    #line hidden\n    \n    #line 4 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n    using LogDashboard.Models;", "    #line 4 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n    using LogDashboard.Models;\n    \n    #line default\n    #line hidden\n    \n    #line 3 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n    using LogDashboard.StackTrace;\n    \n    #line default", "    \n    #line default\n    #line hidden\n    \n    [System.CodeDom.Compiler.GeneratedCodeAttribute(\"RazorGenerator\", \"2.0.0.0\")]\n    internal partial class Login : LogDashboard.Views.RazorPage\n    {\n#line hidden\n\n        public override void Execute()\n        {\n\n\nWriteLiteral(\"\\r\\n\");\n\n\n\n\n\nWriteLiteral(@\"<!DOCTYPE html>\n<html lang=\"\"zh-CN\"\">\n\n<head>\n    <meta charset=\"\"UTF-8\"\">\n    <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n\n    <title>\u767b\u5f55\u9875</title>\n    <meta name=\"\"keywords\"\" content=\"\"\"\" />\n    <meta name=\"\"description\"\" content=\"\"\"\" />\n    <link href=\"\"\");\n\n\n            \n            #line 16 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n           Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\n\n            \n            #line 16 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                     Write(LogDashboard.LogDashboardAuthorizationConsts.LoginRoute);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/media.login.css\\\" rel=\\\"stylesheet\\\">\\r\\n    <link href=\\\"\");\n\n\n            \n            #line 17 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n           Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/css.bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\r\\n    <link href=\\\"\");\n\n\n            \n            #line 18 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n           Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/css.font-awesome.min.css\\\" rel=\\\"stylesheet\\\">\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n    <div class=\\\"\" +\n\"limiter\\\">\\r\\n        <div class=\\\"container-login\\\" style=\\\"background-image: url(\\'\");\n\n\n            \n            #line 23 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                                              Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\n\n            \n            #line 23 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                                                                        Write(LogDashboard.LogDashboardAuthorizationConsts.LoginRoute);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/media.login-bg.jpg\\');\\\">\\r\\n\\r\\n            <div class=\\\"wrap-login p-l-55 p-r-55 p-t-\" +\n\"65 p-b-54\\\">\\r\\n                <form id=\\\"login-form\\\" class=\\\"login-form validate-fo\" +\n\"rm\\\">\\r\\n                    <span class=\\\"login-form-title p-b-49\\\">\u767b\u5f55</span>\\r\\n\\r\\n   \" +\n\"                 <div class=\\\"wrap-input validate-input m-b-23\\\" data-validate=\\\"\u8bf7\u8f93\" +\n\"\u5165\u7528\u6237\u540d\\\">\\r\\n                        <span class=\\\"label-input\\\">\u7528\u6237\u540d</span>\\r\\n          \" +\n\"              <input class=\\\"input\\\" type=\\\"text\\\" name=\\\"name\\\" placeholder=\\\"\u8bf7\u8f93\u5165\u7528\u6237\u540d\\\" \" +\n\"autocomplete=\\\"off\\\">\\r\\n                        <span class=\\\"focus-input\\\" data-symb\" +\n\"ol=\\\"&#xf206;\\\"></span>\\r\\n                    </div>\\r\\n\\r\\n                    <div cl\" +\n\"ass=\\\"wrap-input validate-input\\\" data-validate=\\\"\u8bf7\u8f93\u5165\u5bc6\u7801\\\">\\r\\n                        \" +\n\"<span class=\\\"label-input\\\">\u5bc6\u7801</span>\\r\\n                        <input class=\\\"input\" +\n\"\\\" type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"\u8bf7\u8f93\u5165\u5bc6\u7801\\\">\\r\\n                        \" +\n\"<span class=\\\"focus-input\\\" data-symbol=\\\"&#xf190;\\\"></span>\\r\\n                    </\" +\n\"div>\\r\\n\\r\\n                    <div class=\\\"text-right p-t-8 p-b-31\\\">\\r\\n             \" +\n\"           <a href=\\\"javascript:\\\"></a>\\r\\n                    </div>\\r\\n\\r\\n           \" +\n\"         <div class=\\\"container-login-form-btn\\\">\\r\\n                        <div cl\" +\n\"ass=\\\"wrap-login-form-btn\\\">\\r\\n                            <div class=\\\"login-form-b\" +\n\"gbtn\\\"></div>\\r\\n                            <button class=\\\"login-form-btn\\\" onclick\" +\n\"=\\\"submitForm()\\\">\u767b \u5f55</button>\\r\\n                        </div>\\r\\n                  \" +\n\"  </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div\" +\n\">\\r\\n    <script src=\\\"\");\n\n\n            \n            #line 55 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n            Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/js.jquery.min.js\\\"></script>\\r\\n    <script src=\\\"\");\n\n\n            \n            #line 56 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n            Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\n\n            \n            #line 56 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                      Write(LogDashboard.LogDashboardAuthorizationConsts.LoginRoute);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/media.login.js\\\"></script>\\r\\n</body>\\r\\n</html>\");\n\n\n        }\n    }\n}\n#pragma warning restore 1591\n", "        public override void Execute()\n        {\n\n\nWriteLiteral(\"\\r\\n\");\n\n\n\n\n\nWriteLiteral(@\"<!DOCTYPE html>\n<html lang=\"\"zh-CN\"\">\n\n<head>\n    <meta charset=\"\"UTF-8\"\">\n    <meta name=\"\"viewport\"\" content=\"\"width=device-width, initial-scale=1\"\">\n\n    <title>\u767b\u5f55\u9875</title>\n    <meta name=\"\"keywords\"\" content=\"\"\"\" />\n    <meta name=\"\"description\"\" content=\"\"\"\" />\n    <link href=\"\"\");\n\n\n            \n            #line 16 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n           Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\n\n            \n            #line 16 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                     Write(LogDashboard.LogDashboardAuthorizationConsts.LoginRoute);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/media.login.css\\\" rel=\\\"stylesheet\\\">\\r\\n    <link href=\\\"\");\n\n\n            \n            #line 17 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n           Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/css.bootstrap.min.css\\\" rel=\\\"stylesheet\\\">\\r\\n    <link href=\\\"\");\n\n\n            \n            #line 18 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n           Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/css.font-awesome.min.css\\\" rel=\\\"stylesheet\\\">\\r\\n</head>\\r\\n\\r\\n<body>\\r\\n    <div class=\\\"\" +\n\"limiter\\\">\\r\\n        <div class=\\\"container-login\\\" style=\\\"background-image: url(\\'\");\n\n\n            \n            #line 23 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                                              Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\n\n            \n            #line 23 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                                                                        Write(LogDashboard.LogDashboardAuthorizationConsts.LoginRoute);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/media.login-bg.jpg\\');\\\">\\r\\n\\r\\n            <div class=\\\"wrap-login p-l-55 p-r-55 p-t-\" +\n\"65 p-b-54\\\">\\r\\n                <form id=\\\"login-form\\\" class=\\\"login-form validate-fo\" +\n\"rm\\\">\\r\\n                    <span class=\\\"login-form-title p-b-49\\\">\u767b\u5f55</span>\\r\\n\\r\\n   \" +\n\"                 <div class=\\\"wrap-input validate-input m-b-23\\\" data-validate=\\\"\u8bf7\u8f93\" +\n\"\u5165\u7528\u6237\u540d\\\">\\r\\n                        <span class=\\\"label-input\\\">\u7528\u6237\u540d</span>\\r\\n          \" +\n\"              <input class=\\\"input\\\" type=\\\"text\\\" name=\\\"name\\\" placeholder=\\\"\u8bf7\u8f93\u5165\u7528\u6237\u540d\\\" \" +\n\"autocomplete=\\\"off\\\">\\r\\n                        <span class=\\\"focus-input\\\" data-symb\" +\n\"ol=\\\"&#xf206;\\\"></span>\\r\\n                    </div>\\r\\n\\r\\n                    <div cl\" +\n\"ass=\\\"wrap-input validate-input\\\" data-validate=\\\"\u8bf7\u8f93\u5165\u5bc6\u7801\\\">\\r\\n                        \" +\n\"<span class=\\\"label-input\\\">\u5bc6\u7801</span>\\r\\n                        <input class=\\\"input\" +\n\"\\\" type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"\u8bf7\u8f93\u5165\u5bc6\u7801\\\">\\r\\n                        \" +\n\"<span class=\\\"focus-input\\\" data-symbol=\\\"&#xf190;\\\"></span>\\r\\n                    </\" +\n\"div>\\r\\n\\r\\n                    <div class=\\\"text-right p-t-8 p-b-31\\\">\\r\\n             \" +\n\"           <a href=\\\"javascript:\\\"></a>\\r\\n                    </div>\\r\\n\\r\\n           \" +\n\"         <div class=\\\"container-login-form-btn\\\">\\r\\n                        <div cl\" +\n\"ass=\\\"wrap-login-form-btn\\\">\\r\\n                            <div class=\\\"login-form-b\" +\n\"gbtn\\\"></div>\\r\\n                            <button class=\\\"login-form-btn\\\" onclick\" +\n\"=\\\"submitForm()\\\">\u767b \u5f55</button>\\r\\n                        </div>\\r\\n                  \" +\n\"  </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div\" +\n\">\\r\\n    <script src=\\\"\");\n\n\n            \n            #line 55 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n            Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/js.jquery.min.js\\\"></script>\\r\\n    <script src=\\\"\");\n\n\n            \n            #line 56 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n            Write(Context.Options.PathMatch);\n\n            \n            #line default\n            #line hidden\n\n            \n            #line 56 \"..\\..\\Views\\Dashboard\\Login.cshtml\"\n                                      Write(LogDashboard.LogDashboardAuthorizationConsts.LoginRoute);\n\n            \n            #line default\n            #line hidden\nWriteLiteral(\"/media.login.js\\\"></script>\\r\\n</body>\\r\\n</html>\");\n\n\n        }\n    }\n}\n#pragma warning restore 1591\n"]}
