{"filename": "src/Program.cs", "chunked_list": ["\ufeffusing Beeching;\nusing Beeching.Commands;\nusing Beeching.Commands.Interfaces;\nusing Beeching.Helpers;\nusing Beeching.Infrastructure;\nusing Microsoft.Extensions.DependencyInjection;\nusing Spectre.Console;\nusing Spectre.Console.Cli;\n\nvar registrations = new ServiceCollection();", "\nvar registrations = new ServiceCollection();\n\nregistrations\n    .AddHttpClient(\n        \"ArmApi\",\n        client =>\n        {\n            client.BaseAddress = new Uri(Constants.ArmBaseUrl);\n            client.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");", "            client.BaseAddress = new Uri(Constants.ArmBaseUrl);\n            client.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n        }\n    )\n    .AddPolicyHandler(Axe.GetRetryAfterPolicy());\n\nregistrations.AddTransient<IAxe, Axe>();\n\nvar registrar = new TypeRegistrar(registrations);\n", "var registrar = new TypeRegistrar(registrations);\n\nvar app = new CommandApp<AxeCommand>(registrar);\n\napp.Configure(config =>\n{\n    config.SetApplicationName(Constants.Beeching);\n    config.AddCommand<AxeCommand>(\"axe\").WithDescription(\"The mighty axe that culls the resources.\");\n});\n", "});\n\nstring installedVersion = VersionHelper.GetVersion();\n\nif (args.Contains(\"--version\") == true || args.Contains(\"-v\") == true)\n{\n    AnsiConsole.WriteLine(installedVersion);\n    return 0;\n}\n\nAnsiConsole.Markup($\"[green]{Constants.Header}[/]\\n\");\nAnsiConsole.Markup($\"[green]=> Version: {VersionHelper.GetVersion()}[/]\\n\");\n", "if (args.Contains(\"--ignore-update\") == false && args.Contains(\"-i\") == false)\n{\n    string? latestVersion = await VersionHelper.GetLatestVersionAsync();\n\n    if (latestVersion != null)\n    {\n        if (VersionHelper.IsUpdateAvailable(installedVersion, latestVersion))\n        {\n            AnsiConsole.Markup(\n                $\"[cyan]=> An update is available {latestVersion}. Update using: dotnet tool update -g {Constants.Beeching}[/]\\n\"\n            );\n        }\n    }\n}\n\nreturn await app.RunAsync(args);\n"]}
{"filename": "src/Constants.cs", "chunked_list": ["\ufeffnamespace Beeching\n{\n    internal static class Constants\n    {\n        public const string ArmBaseUrl = \"https://management.azure.com/\";\n\n        public const string NuGetBaseUrl = \"https://api.nuget.org/v3/index.json\";\n\n        public const string AzCliExecutable = \"az\";\n\n        public const string Beeching = \"beeching\";\n", "        public const string AzCliExecutable = \"az\";\n\n        public const string Beeching = \"beeching\";\n\n        public const string Header =\n            \"\\n _                    _     _             \\r\\n| |                  | |   (_)            \\r\\n| |__   ___  ___  ___| |__  _ _ __   __ _ \\r\\n| '_ \\\\ / _ \\\\/ _ \\\\/ __| '_ \\\\| | '_ \\\\ / _` |\\r\\n| |_) |  __/  __/ (__| | | | | | | | (_| |\\r\\n|_.__/ \\\\___|\\\\___|\\\\___|_| |_|_|_| |_|\\\\__, |\\r\\n                                     __/ |\\r\\n                                    |___/\\n \";\n    }\n}\n"]}
{"filename": "src/Helpers/VersionHelper.cs", "chunked_list": ["\ufeffusing Beeching.Commands;\nusing NuGet.Common;\nusing NuGet.Protocol;\nusing NuGet.Protocol.Core.Types;\nusing NuGet.Versioning;\n\nnamespace Beeching.Helpers\n{\n    internal class VersionHelper\n    {\n        public static string GetVersion()\n        {\n            var version = typeof(AxeCommand).Assembly.GetName().Version;", "    internal class VersionHelper\n    {\n        public static string GetVersion()\n        {\n            var version = typeof(AxeCommand).Assembly.GetName().Version;\n            if (version != null)\n            {\n                return $\"{version.Major}.{version.Minor}.{version.Build}\";\n            }\n            else\n            {\n                return \"Unknown\";\n            }\n        }\n", "        public static async Task<string?> GetLatestVersionAsync()\n        {\n            SourceCacheContext cache = new();\n            SourceRepository repository = Repository.Factory.GetCoreV3(Constants.NuGetBaseUrl);\n            FindPackageByIdResource resource = await repository.GetResourceAsync<FindPackageByIdResource>();\n            IEnumerable<NuGetVersion> versions = await resource.GetAllVersionsAsync(\n                Constants.Beeching,\n                cache,\n                NullLogger.Instance,\n                CancellationToken.None\n            );\n\n            return versions.LastOrDefault()?.ToString();\n        }\n", "        public static bool IsUpdateAvailable(string installedVersion, string latestVersion)\n        {\n            string[] parts = installedVersion.Split('.');\n            int major = int.Parse(parts[0]);\n            int minor = int.Parse(parts[1]);\n            int patch = int.Parse(parts[2]);\n            int installedVersionNumber = major * 10000 + minor * 100 + patch;\n\n            parts = latestVersion.Split('.');\n            major = int.Parse(parts[0]);\n            minor = int.Parse(parts[1]);\n            patch = int.Parse(parts[2]);\n            int latestVersionNumber = major * 10000 + minor * 100 + patch;\n\n            return latestVersionNumber > installedVersionNumber;\n        }\n    }\n}\n"]}
{"filename": "src/Helpers/AzCliHelper.cs", "chunked_list": ["\ufeffusing Beeching.Commands;\nusing Spectre.Console;\nusing System.Diagnostics;\nusing System.Text.Json;\n\nnamespace Beeching.Helpers\n{\n    internal static class AzCliHelper\n    {\n        private static string _azCliExecutable = Constants.AzCliExecutable;\n", "        private static string _azCliExecutable = Constants.AzCliExecutable;\n\n        public static string DetermineAzCliPath()\n        {\n            using Process process = CreateProcess(\n                Environment.OSVersion.Platform == PlatformID.Win32NT ? \"where\" : \"which\",\n                _azCliExecutable\n            );\n\n            process.Start();\n            string processOutput = process.StandardOutput.ReadToEnd();\n            process.WaitForExit();\n", "            if (process.ExitCode == 0)\n            {\n                _azCliExecutable = processOutput.Split(Environment.NewLine)[0].Trim();\n            }\n\n            return _azCliExecutable\n                + (\n                    Environment.OSVersion.Platform == PlatformID.Win32NT && _azCliExecutable.EndsWith(\".cmd\") == false\n                        ? \".cmd\"\n                        : string.Empty\n                );\n        }\n", "        public static Guid GetSubscriptionId(AxeSettings settings)\n        {\n            Guid subscriptionId = settings.Subscription;\n\n            if (subscriptionId == Guid.Empty)\n            {\n                try\n                {\n                    if (settings.Debug)\n                    {\n                        AnsiConsole.Markup(\n                            \"[green]=> No subscription ID specified. Trying to retrieve the default subscription ID from Azure CLI[/]\"\n                        );\n                    }\n\n                    subscriptionId = Guid.Parse(GetCurrentAzureSubscription());\n", "                    if (settings.Debug)\n                    {\n                        AnsiConsole.Markup(\n                            \"[green]=> No subscription ID specified. Trying to retrieve the default subscription ID from Azure CLI[/]\"\n                        );\n                    }\n\n                    subscriptionId = Guid.Parse(GetCurrentAzureSubscription());\n\n                    if (settings.Debug)\n                    {\n                        AnsiConsole.Markup($\"[green]=> Default subscription ID retrieved from az cli: {subscriptionId}[/]\");\n                    }\n                }", "                    if (settings.Debug)\n                    {\n                        AnsiConsole.Markup($\"[green]=> Default subscription ID retrieved from az cli: {subscriptionId}[/]\");\n                    }\n                }\n                catch (Exception ex)\n                {\n                    AnsiConsole.WriteException(\n                        new ArgumentException(\"Missing subscription ID. Please specify a subscription ID or login to Azure CLI.\", ex)\n                    );\n                }\n            }\n\n            return subscriptionId;\n        }\n", "        public static string GetCurrentAzureSubscription()\n        {\n            string azCliExecutable = DetermineAzCliPath();\n            using Process process = CreateProcess(azCliExecutable, \"account show\");\n\n            process.Start();\n            string processOuput = process.StandardOutput.ReadToEnd();\n            process.WaitForExit();\n\n            if (process.ExitCode == 0)\n            {\n                using var jsonOutput = JsonDocument.Parse(processOuput);\n                JsonElement root = jsonOutput.RootElement;", "            if (process.ExitCode == 0)\n            {\n                using var jsonOutput = JsonDocument.Parse(processOuput);\n                JsonElement root = jsonOutput.RootElement;\n                if (root.TryGetProperty(\"id\", out JsonElement idElement))\n                {\n                    return idElement.GetString() ?? string.Empty;\n                }\n                else\n                {\n                    throw new Exception(\"Unable to find the 'id' property in the JSON output.\");\n                }\n            }\n            else\n            {\n                string error = process.StandardError.ReadToEnd();\n                throw new Exception($\"Error executing '{azCliExecutable} account show': {error}\");\n            }\n        }\n", "        public static string GetSubscriptionName(string subscriptionId)\n        {\n            string output = CallAzCliRest($\"/subscriptions/{subscriptionId}?api-version=2020-01-01\");\n\n            using var jsonOutput = JsonDocument.Parse(output);\n            JsonElement root = jsonOutput.RootElement;\n            if (root.TryGetProperty(\"displayName\", out JsonElement displayNameElement))\n            {\n                return displayNameElement.GetString() ?? string.Empty;\n            }\n            else\n            {\n                return \"[Error Determining Name]\";\n            }\n        }\n", "        public static string CallAzCliRest(string uri)\n        {\n            string azCliExecutable = DetermineAzCliPath();\n\n            using Process process = CreateProcess(azCliExecutable, $\"rest --uri {Constants.ArmBaseUrl}{uri}\");\n            process.Start();\n            string output = process.StandardOutput.ReadToEnd();\n            string error = process.StandardError.ReadToEnd();\n            process.WaitForExit();\n\n            return process.ExitCode == 0 ? output : error;\n        }\n\n        public static (string, string) GetSignedInUser()\n        {\n            (string, string) result = (string.Empty, string.Empty);\n            string azCliExecutable = DetermineAzCliPath();\n            using Process process = CreateProcess(azCliExecutable, \"ad signed-in-user show\");\n\n            process.Start();\n            string processOuput = process.StandardOutput.ReadToEnd();\n            process.WaitForExit();\n", "            if (process.ExitCode == 0)\n            {\n                using var jsonOutput = JsonDocument.Parse(processOuput);\n                JsonElement root = jsonOutput.RootElement;\n                if (root.TryGetProperty(\"id\", out JsonElement idElement))\n                {\n                    result.Item1 = idElement.GetString() ?? string.Empty;\n                }\n                else\n                {\n                    result.Item1 = string.Empty;\n                }\n", "                if (root.TryGetProperty(\"displayName\", out JsonElement displayNameElement))\n                {\n                    result.Item2 = displayNameElement.GetString() ?? string.Empty;\n                }\n                else\n                {\n                    result.Item2 = string.Empty;\n                }\n\n                return result;\n            }\n            else\n            {\n                string error = process.StandardError.ReadToEnd();\n                throw new Exception($\"Error executing '{Constants.AzCliExecutable} ad signed-in-user show': {error}\");\n            }\n        }\n", "        private static Process CreateProcess(string filename, string arguments)\n        {\n            return new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = filename,\n                    Arguments = arguments,\n                    RedirectStandardOutput = true,\n                    RedirectStandardError = true,\n                    UseShellExecute = false,\n                    CreateNoWindow = true\n                }\n            };\n        }\n    }\n}\n"]}
{"filename": "src/Helpers/AuthHelper.cs", "chunked_list": ["\ufeffusing Azure.Core;\nusing Azure.Identity;\nusing Spectre.Console;\n\nnamespace Beeching.Helpers\n{\n    internal static class AuthHelper\n    {\n        public static async Task<string> GetAccessToken(bool debug)\n        {\n            var tokenCredential = new ChainedTokenCredential(new AzureCliCredential(), new DefaultAzureCredential());\n", "        public static async Task<string> GetAccessToken(bool debug)\n        {\n            var tokenCredential = new ChainedTokenCredential(new AzureCliCredential(), new DefaultAzureCredential());\n\n            if (debug)\n            {\n                AnsiConsole.WriteLine($\"=> Using token credential: {tokenCredential.GetType().Name} to fetch a token.\");\n            }\n\n            var token = await tokenCredential.GetTokenAsync(new TokenRequestContext(new[] { $\"{Constants.ArmBaseUrl}.default\" }));\n", "            if (debug)\n            {\n                AnsiConsole.WriteLine($\"=> Token retrieved and expires at: {token.ExpiresOn}\");\n            }\n\n            return token.Token;\n        }\n    }\n}\n"]}
{"filename": "src/Commands/AxeSettings.cs", "chunked_list": ["\ufeffusing Spectre.Console.Cli;\nusing System.ComponentModel;\n\nnamespace Beeching.Commands\n{\n    internal class AxeSettings : CommandSettings\n    {\n        [CommandOption(\"-s|--subscription\")]\n        [Description(\"The subscription id to use. If not specified, the active Azure CLI subscription will be used\")]\n        public Guid Subscription { get; set; }\n\n        [CommandOption(\"-n|--name\")]\n        [Description(\"The name (or partial name) of the resources to axe. Multiple values can be specified separated by :\")]\n        [DefaultValue(\"\")]", "        public Guid Subscription { get; set; }\n\n        [CommandOption(\"-n|--name\")]\n        [Description(\"The name (or partial name) of the resources to axe. Multiple values can be specified separated by :\")]\n        [DefaultValue(\"\")]\n        public string Name { get; set; }\n\n        [CommandOption(\"-t|--tag\")]\n        [Description(\"The tag key and value of the resources to axe. Values are case sensitive and must be supplied as a single string in the format key:value\")]\n        [DefaultValue(\"\")]\n        public string Tag { get; set; }\n\n        [CommandOption(\"-r|--resource-types\")]\n        [Description(\"Restrict the types of the resources to axe. Multiple values can be specified separated by :\")]\n        [DefaultValue(\"\")]", "        public string Tag { get; set; }\n\n        [CommandOption(\"-r|--resource-types\")]\n        [Description(\"Restrict the types of the resources to axe. Multiple values can be specified separated by :\")]\n        [DefaultValue(\"\")]\n        public string ResourceTypes { get; set; }\n\n        [CommandOption(\"-e|--exclude\")]\n        [Description(\"The name of resources to exclude from the axe. Multiple values can be specified separated by :\")]\n        [DefaultValue(\"\")]\n        public string Exclude { get; set; }\n\n        [CommandOption(\"-g|--resource-groups\")]\n        [Description(\"Axe resource groups and contents rather than individual resource types\")]\n        [DefaultValue(false)]", "        public string Exclude { get; set; }\n\n        [CommandOption(\"-g|--resource-groups\")]\n        [Description(\"Axe resource groups and contents rather than individual resource types\")]\n        [DefaultValue(false)]\n        public bool ResourceGroups { get; set; }\n\n        [CommandOption(\"-f|--force\")]\n        [Description(\"Force the axe to delete the resources if locked\")]\n        [DefaultValue(false)]\n        public bool Force { get; set; }\n\n        [CommandOption(\"-y|--yes\")]\n        [Description(\"Skip the confirmation prompt\")]\n        [DefaultValue(false)]", "        public bool Force { get; set; }\n\n        [CommandOption(\"-y|--yes\")]\n        [Description(\"Skip the confirmation prompt\")]\n        [DefaultValue(false)]\n        public bool SkipConfirmation { get; set; }\n\n        [CommandOption(\"-w|--what-if\")]\n        [Description(\"Show which resources would face the axe without actually culling anything\")]\n        [DefaultValue(false)]\n        public bool WhatIf { get; set; }\n\n        [CommandOption(\"-m|--max-retry\")]\n        [Description(\"Sets the maximum amount to retry attempts when axe fails\")]\n        [DefaultValue(6)]", "        public bool WhatIf { get; set; }\n\n        [CommandOption(\"-m|--max-retry\")]\n        [Description(\"Sets the maximum amount to retry attempts when axe fails\")]\n        [DefaultValue(6)]\n        public int MaxRetries { get; set; }\n\n        [CommandOption(\"-p|--retry-pause\")]\n        [Description(\"Sets the pause in seconds for the retry attempts\")]\n        [DefaultValue(10)]\n        public int RetryPause { get; set; }\n\n        [CommandOption(\"-d|--debug\")]\n        [Description(\"Increase logging verbosity to show all debug logs\")]\n        [DefaultValue(false)]", "        public int RetryPause { get; set; }\n\n        [CommandOption(\"-d|--debug\")]\n        [Description(\"Increase logging verbosity to show all debug logs\")]\n        [DefaultValue(false)]\n        public bool Debug { get; set; }\n\n        [CommandOption(\"-v|--version\")]\n        [Description(\"Reports the application version\")]\n        [DefaultValue(false)]\n        public bool Version { get; set; }\n\n        [CommandOption(\"-i|--ignore-update\")]\n        [Description(\"Do not check for update on startup\")]\n        [DefaultValue(false)]", "        public bool Version { get; set; }\n\n        [CommandOption(\"-i|--ignore-update\")]\n        [Description(\"Do not check for update on startup\")]\n        [DefaultValue(false)]\n        public bool IgnoreUpdate { get; set; }\n\n        public string UserId { get; set; }\n\n        public string SubscriptionRole { get; set; }\n", "        public string SubscriptionRole { get; set; }\n\n        public bool IsSubscriptionRolePrivileged { get; set; }\n    }\n}\n"]}
{"filename": "src/Commands/Axe.cs", "chunked_list": ["using Beeching.Commands.Interfaces;\nusing Beeching.Helpers;\nusing Beeching.Models;\nusing Newtonsoft.Json;\nusing Polly;\nusing Spectre.Console;\nusing System.Net.Http.Headers;\nusing System.Text;\n\nnamespace Beeching.Commands", "\nnamespace Beeching.Commands\n{\n    internal class Axe : IAxe\n    {\n        private readonly HttpClient _client;\n\n        public Axe(IHttpClientFactory httpClientFactory)\n        {\n            _client = httpClientFactory.CreateClient(\"ArmApi\");\n        }\n", "        public async Task<int> AxeResources(AxeSettings settings)\n        {\n            // Get the access token and add it to the request header for the http client\n            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\n                \"Bearer\",\n                await AuthHelper.GetAccessToken(settings.Debug)\n            );\n\n            AnsiConsole.Markup($\"[green]=> Determining running user details[/]\\n\");\n\n            (string, string) userInformation = AzCliHelper.GetSignedInUser();\n            settings.UserId = userInformation.Item1;\n\n            AnsiConsole.Markup($\"[green]=> Running as user [white]{userInformation.Item2}[/] // [white]{userInformation.Item1}[/][/]\\n\");\n            AnsiConsole.Markup($\"[green]=> Determining subscription details[/]\\n\");\n\n            settings.Subscription = AzCliHelper.GetSubscriptionId(settings);", "            if (settings.Subscription == Guid.Empty)\n            {\n                return -1;\n            }\n\n            string name = AzCliHelper.GetSubscriptionName(settings.Subscription.ToString());\n\n            AnsiConsole.Markup($\"[green]=> Using subscription [white]{name}[/] // [white]{settings.Subscription}[/][/]\\n\");\n\n            List<EffectiveRole> subscriptionRoles = await DetermineSubscriptionRoles(settings);\n", "            if (subscriptionRoles.Count > 0)\n            {\n                string primaryRole = subscriptionRoles.OrderBy(r => r.Priority).First().Name;\n                settings.SubscriptionRole = primaryRole;\n                settings.IsSubscriptionRolePrivileged = primaryRole == \"Owner\" || primaryRole == \"Contributor\";\n                AnsiConsole.Markup(\n                    $\"[green]=> Role [white]{settings.SubscriptionRole}[/] assigned on subscription which will be inherited by all resources[/]\\n\"\n                );\n                if (settings.IsSubscriptionRolePrivileged == false)\n                {\n                    AnsiConsole.Markup(\n                        $\"[green]=> No privileged subscription role assigned so axe may fail if resource specific role not assigned[/]\\n\"\n                    );\n                }\n            }\n            else\n            {\n                settings.SubscriptionRole = \"None\";\n                AnsiConsole.Markup($\"[green]=> No subscription roles assigned[/]\\n\");\n            }\n\n            // Get the list of resources to axe based on the supplied options\n            List<Resource> resourcesToAxe = await GetAxeResourceList(settings);\n\n            // If we are in what-if mode then just output the details of the resources to axe", "                if (settings.IsSubscriptionRolePrivileged == false)\n                {\n                    AnsiConsole.Markup(\n                        $\"[green]=> No privileged subscription role assigned so axe may fail if resource specific role not assigned[/]\\n\"\n                    );\n                }\n            }\n            else\n            {\n                settings.SubscriptionRole = \"None\";\n                AnsiConsole.Markup($\"[green]=> No subscription roles assigned[/]\\n\");\n            }\n\n            // Get the list of resources to axe based on the supplied options\n            List<Resource> resourcesToAxe = await GetAxeResourceList(settings);\n\n            // If we are in what-if mode then just output the details of the resources to axe", "            if (settings.WhatIf)\n            {\n                AnsiConsole.Markup($\"[cyan]=> +++ RUNNING WHAT-IF +++[/]\\n\");\n            }\n\n            bool showedNoResources = false;\n            int unlockedAxeCount = resourcesToAxe.Where(r => r.IsLocked == false).Count();\n            if ((unlockedAxeCount == 0 && settings.Force == false) || resourcesToAxe.Count == 0)\n            {\n                AnsiConsole.Markup($\"[cyan]=> No resources to axe[/]\\n\\n\");\n                showedNoResources = true;\n            }\n            else\n            {", "                foreach (var resource in resourcesToAxe)\n                {\n                    // Determine our primary role for the resource\n                    string primaryResourceRole = string.Empty;\n                    if (resource.Roles.Any())\n                    {\n                        primaryResourceRole = resource.Roles.OrderBy(r => r.Priority).First().Name;\n                        AnsiConsole.Markup(\n                            $\"[green]=> Role [white]{primaryResourceRole}[/] assigned on resource [white]{resource.OutputMessage}[/][/]\\n\"\n                        );\n                    }\n                    else\n                    {\n                        AnsiConsole.Markup($\"[green]=> No roles assigned on resource [white]{resource.OutputMessage}[/][/]\\n\");\n                    }\n\n                    // Determine if we're skipping this resource because it's locked\n                    resource.Skip = resource.IsLocked == true && Axe.ShouldSkipIfLocked(settings, resource);\n\n                    string skipMessage =\n                        resource.Skip == true ? \" so will not be able to remove any locks - [white]SKIPPING[/]\" : string.Empty;\n                    string lockedState = resource.IsLocked == true ? \"[red]LOCKED[/] \" : string.Empty;\n\n                    // Are we skipping this resource because it's locked?", "                    if (resource.Skip == true)\n                    {\n                        AnsiConsole.Markup(\n                            $\"[green]=> Found [red]LOCKED[/] resource [white]{resource.OutputMessage}[/] but you do not have permission to remove locks - [white]SKIPPING[/][/]\\n\"\n                        );\n                    }\n                    else if (resource.IsLocked == true && settings.Force == false)\n                    {\n                        resource.Skip = true;\n                        AnsiConsole.Markup(\n                            $\"[green]=> Found [red]LOCKED[/] resource [white]{resource.OutputMessage}[/] which cannot be axed - [white]SKIPPING[/][/]\\n\"\n                        );\n                    }\n                    else\n                    {\n                        bool axeFailWarning = settings.IsSubscriptionRolePrivileged == false && resource.Roles.Any() == false;\n                        string locked = resource.IsLocked == true ? \"LOCKED \" : string.Empty;\n                        string group = settings.ResourceGroups == true ? \" and [red]ALL[/] resources within it\" : string.Empty;\n                        string axeFail = axeFailWarning == true ? \" [red](may fail due to role)[/]\" : string.Empty;\n                        string axeAttemptMessage = axeFailWarning == true ? \"ATTEMPT TO \" : string.Empty;\n                        AnsiConsole.Markup(\n                            $\"[green]=> [red]WILL {axeAttemptMessage}AXE {locked}[/]resource [white]{resource.OutputMessage}[/]{group}{axeFail}[/]\\n\"\n                        );\n                    }\n                }\n            }\n\n            // If we're running what-if then just drop out here", "            if (settings.WhatIf)\n            {\n                AnsiConsole.Markup($\"[cyan]=> +++ WHAT-IF COMPLETE +++[/]\\n\");\n                return 0;\n            }\n\n            // If we had some resources, but now we don't because they're locked then drop out here\n            if (\n                (unlockedAxeCount == 0 && settings.Force == false)\n                || resourcesToAxe.Count == 0\n                || resourcesToAxe.Where(r => r.Skip == false).Any() == false\n            )\n            {", "                if (showedNoResources == false)\n                {\n                    AnsiConsole.Markup($\"[cyan]=> No resources to axe[/]\\n\\n\");\n                }\n                return 0;\n            }\n\n            // If you want to skip confirmation then go ahead - make my day, punk.\n            if (settings.SkipConfirmation == false)\n            {\n                string title =\n                    $\"\\nAre you sure you want to axe these {resourcesToAxe.Where(r => r.Skip == false).Count()} resources? [red](This cannot be undone)[/]\";", "            if (settings.SkipConfirmation == false)\n            {\n                string title =\n                    $\"\\nAre you sure you want to axe these {resourcesToAxe.Where(r => r.Skip == false).Count()} resources? [red](This cannot be undone)[/]\";\n                if (resourcesToAxe.Count == 1)\n                {\n                    title = \"\\nAre you sure you want to axe this resource? [red](This cannot be undone)[/]\";\n                }\n\n                var confirm = AnsiConsole.Prompt(new SelectionPrompt<string>().Title(title).AddChoices(new[] { \"Yes\", \"No\" }));\n", "                if (confirm == \"No\")\n                {\n                    AnsiConsole.Markup($\"[green]=> Resource axing abandoned[/]\\n\\n\");\n                    return 0;\n                }\n            }\n            else\n            {\n                AnsiConsole.Markup($\"[green]=> Detected --yes. Skipping confirmation[/]\\n\\n\");\n            }\n\n            int retryCount = 1;\n            AxeStatus axeStatus = new();", "            while (retryCount < (settings.MaxRetries + 1))\n            {\n                // Iterate through the list of resources to axe and make the delete requests\n                axeStatus = await SwingTheAxe(settings, resourcesToAxe);\n\n                if (axeStatus.AxeList.Count == 0)\n                {\n                    break;\n                }\n\n                AnsiConsole.Markup(\n                    $\"[green]=>[/] [red]Possibly a dependency issue. Pausing for {settings.RetryPause} seconds and will retry. Attempt {retryCount} of {settings.MaxRetries}[/]\\n\"\n                );\n                await Task.Delay(settings.RetryPause * 1000);\n                resourcesToAxe = axeStatus.AxeList;\n                retryCount++;\n            }\n", "            if (retryCount < (settings.MaxRetries + 1) && axeStatus.Status == true)\n            {\n                AnsiConsole.Markup($\"[green]=> All resources axed successfully[/]\\n\\n\");\n            }\n            else if (retryCount < (settings.MaxRetries + 1) && axeStatus.Status == false)\n            {\n                AnsiConsole.Markup($\"[green]=> Axe failed on some resources[/]\\n\\n\");\n            }\n            else\n            {\n                AnsiConsole.Markup(\n                    $\"[green]=>[/] [red]Axe failed after {settings.MaxRetries} attempts. Try running the command again with --debug flag for more information[/]\\n\\n\"\n                );\n            }\n\n            return 0;\n        }\n", "        private async Task<AxeStatus> SwingTheAxe(AxeSettings settings, List<Resource> axeUriList)\n        {\n            AxeStatus axeStatus = new();\n            foreach (var resource in axeUriList)\n            {\n                bool skipAxe = false;\n                if (resource.IsLocked && settings.Force)\n                {\n                    foreach (var resourceLock in resource.ResourceLocks)\n                    {\n                        int retryCount = 1;\n                        bool lockRemoved = false;", "                    foreach (var resourceLock in resource.ResourceLocks)\n                    {\n                        int retryCount = 1;\n                        bool lockRemoved = false;\n                        while (retryCount < (settings.MaxRetries + 1))\n                        {\n                            AnsiConsole.Markup(\n                                $\"[green]=> Attempting to remove {resourceLock.Scope} lock [white]{resourceLock.Name}[/] for [white]{resource.OutputMessage}[/][/]\\n\"\n                            );\n                            var lockResponse = await _client.DeleteAsync(\n                                new Uri($\"{resourceLock.Id}?api-version=2016-09-01\", UriKind.Relative)\n                            );\n", "                            if (lockResponse.IsSuccessStatusCode == true)\n                            {\n                                lockRemoved = true;\n                                break;\n                            }\n\n                            AnsiConsole.Markup(\n                                $\"[green]=>[/] [red]Failed to remove lock for {resource.OutputMessage}[/]. Pausing for {settings.RetryPause} seconds and will retry. Attempt {retryCount} of {settings.MaxRetries}[/]\\n\"\n                            );\n                            await Task.Delay(settings.RetryPause * 1000);\n                            retryCount++;\n                        }\n", "                        if (retryCount < (settings.MaxRetries + 1) && lockRemoved == true)\n                        {\n                            AnsiConsole.Markup($\"[green]=> Lock removed successfully[/]\\n\");\n                        }\n                        else\n                        {\n                            AnsiConsole.Markup($\"[green]=>[/] [red]Failed to remove lock for {resource.OutputMessage}[/] - SKIPPING\\n\");\n                            skipAxe = true;\n                            axeStatus.Status = false;\n                            break;\n                        }\n                    }\n                }\n\n                // If we can't remove the lock then skip the axe", "                if (skipAxe == true)\n                {\n                    continue;\n                }\n\n                string group = settings.ResourceGroups == true ? \" and [red]ALL[/] resources within it\" : string.Empty;\n\n                // Output the details of the delete request\n                AnsiConsole.Markup($\"[green]=> [red]AXING[/] [white]{resource.OutputMessage}[/]{group}[/]\\n\");\n\n                // Make the delete request\n                var response = await _client.DeleteAsync(new Uri($\"{resource.Id}?api-version={resource.ApiVersion}\", UriKind.Relative));\n", "                if (settings.Debug)\n                {\n                    AnsiConsole.Markup($\"[green]=> Response status code is {response.StatusCode}[/]\");\n                    AnsiConsole.Markup($\"[green]=> Response content: {await response.Content.ReadAsStringAsync()}[/]\");\n                }\n\n                if (!response.IsSuccessStatusCode)\n                {\n                    string responseContent = await response.Content.ReadAsStringAsync();\n                    if (responseContent.Contains(\"Please remove the lock and try again\"))\n                    {\n                        AnsiConsole.Markup(\n                            $\"[green]=>[/] [red]Axe failed because the resource is [red]LOCKED[/]. Remove the lock and try again[/]\\n\"\n                        );\n                        axeStatus.Status = false;\n                        continue;\n                    }", "                    if (responseContent.Contains(\"Please remove the lock and try again\"))\n                    {\n                        AnsiConsole.Markup(\n                            $\"[green]=>[/] [red]Axe failed because the resource is [red]LOCKED[/]. Remove the lock and try again[/]\\n\"\n                        );\n                        axeStatus.Status = false;\n                        continue;\n                    }\n                    else if (response.StatusCode.ToString() == \"Forbidden\")\n                    {\n                        AnsiConsole.Markup($\"[green]=>[/] [red]Axe failed: Permission denied - [white]SKIPPING[/][/]\\n\");\n                        axeStatus.Status = false;\n                        continue;\n                    }", "                    else if (response.StatusCode.ToString() == \"Forbidden\")\n                    {\n                        AnsiConsole.Markup($\"[green]=>[/] [red]Axe failed: Permission denied - [white]SKIPPING[/][/]\\n\");\n                        axeStatus.Status = false;\n                        continue;\n                    }\n                    else if (response.StatusCode.ToString() == \"NotFound\")\n                    {\n                        AnsiConsole.Markup($\"[green]=>[/] [red]Axe failed: Resouce already axed - [white]SKIPPING[/][/]\\n\");\n                        axeStatus.Status = false;\n                        continue;\n                    }\n                    else\n                    {\n                        AnsiConsole.Markup($\"[green]=>[/] [red]Axe failed: {response.StatusCode}[/]\\n\");\n                        axeStatus.AxeList.Add(resource);\n                        axeStatus.Status = false;\n                    }\n                }\n                else\n                {\n                    AnsiConsole.Markup($\"[green]=> Resource axed successfully[/]\\n\");\n", "                    if (resource.IsLocked && settings.Force)\n                    {\n                        foreach (var resourceLock in resource.ResourceLocks)\n                        {\n                            if (\n                                (resourceLock.Scope == \"resource group\" && settings.ResourceGroups == false)\n                                || resourceLock.Scope == \"subscription\"\n                            )\n                            {\n                                AnsiConsole.Markup(\n                                    $\"[green]=> Reapplying {resourceLock.Scope} lock [white]{resourceLock.Name}[/] for [white]{resource.OutputMessage}[/][/]\\n\"\n                                );\n\n                                var createLockResponse = await _client.PutAsync(\n                                    new Uri($\"{resourceLock.Id}?api-version=2016-09-01\", UriKind.Relative),\n                                    new StringContent(JsonConvert.SerializeObject(resourceLock), Encoding.UTF8, \"application/json\")\n                                );\n", "                                if (!createLockResponse.IsSuccessStatusCode)\n                                {\n                                    AnsiConsole.Markup($\"[green]=>[/] [red]Failed to reapply lock for {resource.OutputMessage}[/]\\n\");\n                                    skipAxe = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            return axeStatus;\n        }\n", "        private async Task<string?> GetLatestApiVersion(AxeSettings settings, string provider, string type)\n        {\n            var apiVersion = await _client.GetAsync(\n                $\"subscriptions/{settings.Subscription}/providers/{provider}/resourceTypes?api-version=2021-04-01\"\n            );\n\n            string apiJson = await apiVersion.Content.ReadAsStringAsync();\n            List<ApiVersion> allApiVersions = new();\n\n            if (apiJson.Contains(\"Microsoft.Resources' does not contain sufficient information to enforce access control policy\"))\n            {\n                AnsiConsole.Markup(\n                    $\"[green]=>[/] [red]You do not have sufficient permissions determine latest API version. Please check your subscription permissions and try again[/]\\n\"\n                );\n                return null;\n            }\n\n            allApiVersions = JsonConvert.DeserializeObject<Dictionary<string, List<ApiVersion>>>(apiJson)![\"value\"];\n", "            if (apiJson.Contains(\"Microsoft.Resources' does not contain sufficient information to enforce access control policy\"))\n            {\n                AnsiConsole.Markup(\n                    $\"[green]=>[/] [red]You do not have sufficient permissions determine latest API version. Please check your subscription permissions and try again[/]\\n\"\n                );\n                return null;\n            }\n\n            allApiVersions = JsonConvert.DeserializeObject<Dictionary<string, List<ApiVersion>>>(apiJson)![\"value\"];\n\n            if (allApiVersions == null)\n            {\n                return null;\n            }\n\n            ApiVersion apiTypeVersion = allApiVersions.Where(x => x.ResourceType == type).First();\n\n            return apiTypeVersion.DefaultApiVersion ?? apiTypeVersion.ApiVersions.First();\n        }\n", "            if (allApiVersions == null)\n            {\n                return null;\n            }\n\n            ApiVersion apiTypeVersion = allApiVersions.Where(x => x.ResourceType == type).First();\n\n            return apiTypeVersion.DefaultApiVersion ?? apiTypeVersion.ApiVersions.First();\n        }\n\n        private async Task<List<Resource>> GetAxeResourceList(AxeSettings settings)\n        {\n            bool useNameFilter = !string.IsNullOrEmpty(settings.Name);\n            List<Resource> resourcesFound = new();\n", "        private async Task<List<Resource>> GetAxeResourceList(AxeSettings settings)\n        {\n            bool useNameFilter = !string.IsNullOrEmpty(settings.Name);\n            List<Resource> resourcesFound = new();\n\n            if (settings.ResourceGroups)\n            {\n                if (useNameFilter)\n                {\n                    List<string> names = new();\n", "                    if (settings.Name.Contains(':'))\n                    {\n                        names = settings.Name.Split(':').ToList();\n                    }\n                    else\n                    {\n                        names.Add(settings.Name);\n                    }\n\n                    foreach (string name in names)\n                    {\n                        AnsiConsole.Markup($\"[green]=> Searching for resource groups where name contains [white]{name}[/][/]\\n\");\n                        HttpResponseMessage response = await _client.GetAsync(\n                            $\"subscriptions/{settings.Subscription}/resourcegroups?api-version=2021-04-01\"\n                        );\n                        string jsonResponse = await response.Content.ReadAsStringAsync();", "                    foreach (string name in names)\n                    {\n                        AnsiConsole.Markup($\"[green]=> Searching for resource groups where name contains [white]{name}[/][/]\\n\");\n                        HttpResponseMessage response = await _client.GetAsync(\n                            $\"subscriptions/{settings.Subscription}/resourcegroups?api-version=2021-04-01\"\n                        );\n                        string jsonResponse = await response.Content.ReadAsStringAsync();\n                        if (jsonResponse != null)\n                        {\n                            List<Resource> resources = JsonConvert.DeserializeObject<Dictionary<string, List<Resource>>>(jsonResponse)![\n                                \"value\"\n                            ];\n                            resourcesFound.AddRange(resources.Where(x => x.Name.Contains(name, StringComparison.OrdinalIgnoreCase)));\n                        }\n                    }\n                }\n                else\n                {\n                    List<string> tag = settings.Tag.Split(':').ToList();\n\n                    AnsiConsole.Markup(\n                        $\"[green]=> Searching for resource groups where tag [white]{tag[0]}[/] equals [white]{tag[1]}[/][/]\\n\"\n                    );\n                    HttpResponseMessage response = await _client.GetAsync(\n                        $\"subscriptions/{settings.Subscription}/resourcegroups?$filter=tagName eq '{tag[0]}' and tagValue eq '{tag[1]}'&api-version=2021-04-01\"\n                    );\n\n                    string jsonResponse = await response.Content.ReadAsStringAsync();\n", "                    if (jsonResponse != null)\n                    {\n                        resourcesFound.AddRange(JsonConvert.DeserializeObject<Dictionary<string, List<Resource>>>(jsonResponse)![\"value\"]);\n                    }\n                }\n            }\n            else\n            {\n                if (useNameFilter)\n                {\n                    List<string> names = new();\n", "                if (useNameFilter)\n                {\n                    List<string> names = new();\n\n                    if (settings.Name.Contains(':'))\n                    {\n                        names = settings.Name.Split(':').ToList();\n                    }\n                    else\n                    {\n                        names.Add(settings.Name);\n                    }\n", "                    foreach (string name in names)\n                    {\n                        AnsiConsole.Markup($\"[green]=> Searching for resources where name contains [white]{name}[/][/]\\n\");\n                        HttpResponseMessage response = await _client.GetAsync(\n                            $\"subscriptions/{settings.Subscription}/resources?$filter=substringof('{name}',name)&api-version=2021-04-01\"\n                        );\n                        string jsonResponse = await response.Content.ReadAsStringAsync();\n                        if (jsonResponse != null)\n                        {\n                            List<Resource> resources = JsonConvert.DeserializeObject<Dictionary<string, List<Resource>>>(jsonResponse)![\n                                \"value\"\n                            ];", "                            foreach (var resource in resources)\n                            {\n                                string[] sections = resource.Id.Split('/');\n                                resource.ResourceGroup = $\"/subscriptions/{settings.Subscription}/resourceGroups/{sections[4]}\";\n                                resourcesFound.Add(resource);\n                            }\n                        }\n                    }\n                }\n                else\n                {\n                    // Split the tag into a key and value\n                    List<string> tag = settings.Tag.Split(':').ToList();\n\n                    AnsiConsole.Markup($\"[green]=> Searching for resources where tag [white]{tag[0]}[/] equals [white]{tag[1]}[/][/]\\n\");\n                    HttpResponseMessage response = await _client.GetAsync(\n                        $\"subscriptions/{settings.Subscription}/resources?$filter=tagName eq '{tag[0]}' and tagValue eq '{tag[1]}'&api-version=2021-04-01\"\n                    );\n                    string jsonResponse = await response.Content.ReadAsStringAsync();\n", "                    if (jsonResponse != null)\n                    {\n                        List<Resource> resources = JsonConvert.DeserializeObject<Dictionary<string, List<Resource>>>(jsonResponse)![\n                            \"value\"\n                        ];\n                        foreach (var resource in resources)\n                        {\n                            string[] sections = resource.Id.Split('/');\n                            resource.ResourceGroup = $\"/subscriptions/{settings.Subscription}/resourceGroups/{sections[4]}\";\n                            resourcesFound.Add(resource);\n                        }\n                    }\n                }\n\n                // Do we need to filter the resource types?", "                if (!string.IsNullOrEmpty(settings.ResourceTypes))\n                {\n                    List<string> allowedTypes = settings.ResourceTypes.Split(':').ToList();\n                    AnsiConsole.Markup($\"[green]=> Restricting resource types to:[/]\\n\");\n                    foreach (string type in allowedTypes)\n                    {\n                        AnsiConsole.Markup($\"\\t- [white]{type}[/]\\n\");\n                    }\n                    resourcesFound = resourcesFound.Where(r => allowedTypes.Contains(r.Type)).ToList();\n                }\n            }\n\n            // Do we need to filter exclusions?", "            if (!string.IsNullOrEmpty(settings.Exclude))\n            {\n                List<string> exclusions = settings.Exclude.Split(':').ToList();\n                List<Resource> filteredResources = resourcesFound.Where(r => !exclusions.Contains(r.Name)).ToList();\n                foreach (var resource in resourcesFound.Except(filteredResources))\n                {\n                    AnsiConsole.Markup($\"[green]=> Excluding [white]{resource.Name}[/][/]\\n\");\n                }\n                resourcesFound = filteredResources;\n            }\n\n            // Now we have our actual list of resources to axe, let's get the latest API version for each resource type", "            foreach (var resource in resourcesFound)\n            {\n                string[] sections = resource.Id.Split('/');\n                string resourceGroup = sections[4];\n                string provider;\n                string resourceType;\n\n                if (!settings.ResourceGroups)\n                {\n                    provider = sections[6];\n                    resourceType = sections[7];\n                    resource.OutputMessage =\n                        $\"[white]{resource.Type} {resource.Name}[/] [green]in resource group[/] [white]{resourceGroup}[/]\";\n                }\n                else\n                {\n                    provider = \"Microsoft.Resources\";\n                    resourceType = \"resourceGroups\";\n                    resource.OutputMessage = $\"[green]group[/] [white]{resource.Name}[/]\";\n                }\n\n                string? apiVersion = await GetLatestApiVersion(settings, provider, resourceType);\n", "                if (apiVersion == null)\n                {\n                    AnsiConsole.Markup($\"[green]=> Unable to get latest API version for {resource.OutputMessage} so will exclude[/]\\n\");\n                }\n\n                resource.ApiVersion = apiVersion;\n            }\n\n            // Remove any resources that we couldn't get an API version for\n            resourcesFound = resourcesFound.Except(resourcesFound.Where(r => string.IsNullOrEmpty(r.ApiVersion)).ToList()).ToList();\n\n            await DetermineLocks(settings, resourcesFound);\n\n            await DetermineRoles(settings, resourcesFound);\n\n            // Return whatever is left\n            return resourcesFound;\n        }\n", "        private async Task<List<EffectiveRole>> DetermineSubscriptionRoles(AxeSettings settings)\n        {\n            List<EffectiveRole> subscriptionRoles = new();\n            string roleId =\n                $\"subscriptions/{settings.Subscription}/providers/Microsoft.Authorization/roleAssignments?$filter=principalId eq '{settings.UserId}'&api-version=2022-04-01\";\n            HttpResponseMessage response = await _client.GetAsync(roleId);\n            if (response.IsSuccessStatusCode)\n            {\n                string jsonResponse = await response.Content.ReadAsStringAsync();\n                if (jsonResponse != null)\n                {\n                    List<dynamic> roles = JsonConvert.DeserializeObject<Dictionary<string, List<dynamic>>>(jsonResponse)![\"value\"];", "                if (jsonResponse != null)\n                {\n                    List<dynamic> roles = JsonConvert.DeserializeObject<Dictionary<string, List<dynamic>>>(jsonResponse)![\"value\"];\n                    foreach (var role in roles)\n                    {\n                        RoleDefinition roleDefinition = await GetRoleDefinition(role.properties.roleDefinitionId.ToString());\n\n                        if (role.properties.scope != $\"/subscriptions/{settings.Subscription}\")\n                        {\n                            continue;\n                        }\n\n                        EffectiveRole effectiveRole =\n                            new()\n                            {\n                                RoleDefinitionId = roleDefinition.Name,\n                                Scope = role.properties.scope,\n                                ScopeType = \"subscription\",\n                                Name = roleDefinition.Properties.RoleName,\n                                Type = roleDefinition.Properties.Type\n                            };\n", "                        if (effectiveRole.Name == \"Owner\")\n                        {\n                            effectiveRole.Priority = 0;\n                        }\n                        else if (effectiveRole.Name == \"Contributor\")\n                        {\n                            effectiveRole.Priority = 1;\n                        }\n                        else\n                        {\n                            effectiveRole.Priority = 2;\n                        }\n\n                        bool hasFullPermission = roleDefinition.Properties.Permissions.Where(r => r.Actions.Contains(\"*\")).Any();\n                        bool hasFullAuthPermission = roleDefinition.Properties.Permissions\n                            .Where(r => r.Actions.Contains(\"Microsoft.Authorization/*\"))\n                            .Any();\n                        bool allAuthPermissionBlocked = roleDefinition.Properties.Permissions\n                            .Where(r => r.NotActions.Contains(\"Microsoft.Authorization/*\"))\n                            .Any();\n                        bool deleteAuthPermissionBlocked = roleDefinition.Properties.Permissions\n                            .Where(r => r.NotActions.Contains(\"Microsoft.Authorization/*/Delete\"))\n                            .Any();\n                        bool writeAuthPermissionBlocked = roleDefinition.Properties.Permissions\n                            .Where(r => r.NotActions.Contains(\"Microsoft.Authorization/*/Write\"))\n                            .Any();\n", "                        if (\n                            (hasFullPermission || hasFullAuthPermission)\n                            && (!allAuthPermissionBlocked && !deleteAuthPermissionBlocked && !writeAuthPermissionBlocked)\n                        )\n                        {\n                            effectiveRole.CanManageLocks = true;\n                        }\n\n                        subscriptionRoles.Add(effectiveRole);\n                    }\n                }\n            }\n\n            return subscriptionRoles;\n        }\n", "        private async Task DetermineRoles(AxeSettings settings, List<Resource> resources)\n        {\n            AnsiConsole.Markup($\"[green]=> Checking resources for role assignments[/]\\n\");\n\n            foreach (Resource resource in resources)\n            {\n                string roleId =\n                    $\"{resource.Id}/providers/Microsoft.Authorization/roleAssignments?$filter=principalId eq '{settings.UserId}'&api-version=2022-04-01\";\n                HttpResponseMessage response = await _client.GetAsync(roleId);\n                if (response.IsSuccessStatusCode)\n                {\n                    string jsonResponse = await response.Content.ReadAsStringAsync();", "                if (response.IsSuccessStatusCode)\n                {\n                    string jsonResponse = await response.Content.ReadAsStringAsync();\n                    if (jsonResponse != null)\n                    {\n                        List<dynamic> roles = JsonConvert.DeserializeObject<Dictionary<string, List<dynamic>>>(jsonResponse)![\"value\"];\n                        foreach (var role in roles)\n                        {\n                            RoleDefinition roleDefinition = await GetRoleDefinition(role.properties.roleDefinitionId.ToString());\n\n                            if (role.properties.scope == $\"/subscriptions/{settings.Subscription}\")\n                            {\n                                continue;\n                            }\n\n                            string[] scopeSections = role.properties.scope.ToString().Split('/');\n\n                            EffectiveRole effectiveRole =\n                                new()\n                                {\n                                    RoleDefinitionId = roleDefinition.Name,\n                                    Scope = role.properties.scope,\n                                    ScopeType = scopeSections.Length > 5 ? \"resource\" : \"resource group\",\n                                    Name = roleDefinition.Properties.RoleName,\n                                    Type = roleDefinition.Properties.Type\n                                };\n", "                            if (role.properties.scope == $\"/subscriptions/{settings.Subscription}\")\n                            {\n                                continue;\n                            }\n\n                            string[] scopeSections = role.properties.scope.ToString().Split('/');\n\n                            EffectiveRole effectiveRole =\n                                new()\n                                {\n                                    RoleDefinitionId = roleDefinition.Name,\n                                    Scope = role.properties.scope,\n                                    ScopeType = scopeSections.Length > 5 ? \"resource\" : \"resource group\",\n                                    Name = roleDefinition.Properties.RoleName,\n                                    Type = roleDefinition.Properties.Type\n                                };\n", "                            if (effectiveRole.Name == \"Owner\")\n                            {\n                                effectiveRole.Priority = 0;\n                            }\n                            else if (effectiveRole.Name == \"Contributor\")\n                            {\n                                effectiveRole.Priority = 1;\n                            }\n                            else\n                            {\n                                effectiveRole.Priority = 2;\n                            }\n\n                            bool hasFullPermission = roleDefinition.Properties.Permissions.Where(r => r.Actions.Contains(\"*\")).Any();\n                            bool hasFullAuthPermission = roleDefinition.Properties.Permissions\n                                .Where(r => r.Actions.Contains(\"Microsoft.Authorization/*\"))\n                                .Any();\n                            bool allAuthPermissionBlocked = roleDefinition.Properties.Permissions\n                                .Where(r => r.NotActions.Contains(\"Microsoft.Authorization/*\"))\n                                .Any();\n                            bool deleteAuthPermissionBlocked = roleDefinition.Properties.Permissions\n                                .Where(r => r.NotActions.Contains(\"Microsoft.Authorization/*/Delete\"))\n                                .Any();\n                            bool writeAuthPermissionBlocked = roleDefinition.Properties.Permissions\n                                .Where(r => r.NotActions.Contains(\"Microsoft.Authorization/*/Write\"))\n                                .Any();\n", "                            if (\n                                (hasFullPermission || hasFullAuthPermission)\n                                && (!allAuthPermissionBlocked && !deleteAuthPermissionBlocked && !writeAuthPermissionBlocked)\n                            )\n                            {\n                                effectiveRole.CanManageLocks = true;\n                            }\n\n                            resource.Roles.Add(effectiveRole);\n                        }\n                    }\n                }\n            }\n        }\n", "        private async Task<RoleDefinition> GetRoleDefinition(string roleDefinitionId)\n        {\n            string[] sections = roleDefinitionId.Split('/');\n            string roleId = sections[^1];\n            string roleDefinition = $\"providers/Microsoft.Authorization/roleDefinitions/{roleId}?api-version=2022-04-01\";\n            HttpResponseMessage response = await _client.GetAsync(roleDefinition);\n            if (response.IsSuccessStatusCode)\n            {\n                string jsonResponse = await response.Content.ReadAsStringAsync();\n                if (jsonResponse != null)\n                {\n                    return JsonConvert.DeserializeObject<RoleDefinition>(jsonResponse)!;\n                }\n            }\n            return new RoleDefinition();\n        }\n", "                if (jsonResponse != null)\n                {\n                    return JsonConvert.DeserializeObject<RoleDefinition>(jsonResponse)!;\n                }\n            }\n            return new RoleDefinition();\n        }\n\n        private async Task DetermineLocks(AxeSettings settings, List<Resource> resources)\n        {\n            AnsiConsole.Markup($\"[green]=> Checking resources for locks[/]\\n\");\n\n            List<ResourceLock> resourceLocks = new();\n", "        private async Task DetermineLocks(AxeSettings settings, List<Resource> resources)\n        {\n            AnsiConsole.Markup($\"[green]=> Checking resources for locks[/]\\n\");\n\n            List<ResourceLock> resourceLocks = new();\n\n            if (settings.Force == true)\n            {\n                AnsiConsole.Markup($\"[green]=> Detected --force. Resource locks will be removed and reapplied where possible[/]\\n\");\n            }\n\n            string locks = $\"/subscriptions/{settings.Subscription}/providers/Microsoft.Authorization/locks?api-version=2016-09-01\";\n\n            var response = await _client.GetAsync(locks);", "            if (response.IsSuccessStatusCode)\n            {\n                string responseContent = await response.Content.ReadAsStringAsync();\n                if (responseContent != null)\n                {\n                    resourceLocks.AddRange(\n                        JsonConvert.DeserializeObject<Dictionary<string, List<ResourceLock>>>(responseContent)![\"value\"]\n                    );\n\n                    foreach (var resource in resources)\n                    {\n                        string[] sections = resource.Id.Split('/');", "                    foreach (var resource in resources)\n                    {\n                        string[] sections = resource.Id.Split('/');\n                        foreach (var resourceLock in resourceLocks)\n                        {\n                            string lockId = resourceLock.Id.ToLower();\n                            string resourceGroupId =\n                                $\"/subscriptions/{settings.Subscription}/resourceGroups/{sections[4]}/providers/{resourceLock.Type}/{resourceLock.Name}\".ToLower();\n                            string subscriptionId =\n                                $\"/subscriptions/{settings.Subscription}/providers/{resourceLock.Type}/{resourceLock.Name}\".ToLower();\n", "                            if (lockId.StartsWith(resource.Id.ToLower()))\n                            {\n                                resourceLock.Scope =\n                                    resource.Type.ToLower() == \"microsoft.resources/resourcegroups\" ? \"resource group\" : \"resource\";\n                                resource.ResourceLocks.Add(resourceLock);\n                                resource.IsLocked = true;\n                            }\n                            else if (lockId == resourceGroupId)\n                            {\n                                resourceLock.Scope = \"resource group\";\n                                resource.ResourceLocks.Add(resourceLock);\n                                resource.IsLocked = true;\n                            }", "                            else if (lockId == subscriptionId)\n                            {\n                                resourceLock.Scope = \"subscription\";\n                                resource.ResourceLocks.Add(resourceLock);\n                                resource.IsLocked = true;\n                            }\n                        }\n                        if (settings.Force == false && resource.IsLocked == true)\n                        {\n                            AnsiConsole.Markup(\n                                $\"[green]=> Found [red]LOCKED[/] resource {resource.OutputMessage} which cannot be deleted[/] - [white]SKIPPING[/]\\n\"\n                            );\n                        }\n                    }\n                }\n            }\n        }\n", "        private static bool ShouldSkipIfLocked(AxeSettings settings, Resource resource)\n        {\n            // Find out what kind of powers we have\n            bool hasSubscriptionLockPowers = settings.SubscriptionRole == \"Owner\";\n            bool hasResourceLockPowers = resource.Roles.Where(r => r.CanManageLocks == true).Any();\n\n            // If we don't have subscription lock powers and we don't have resource lock powers then we're not good\n            if (hasSubscriptionLockPowers == false && hasResourceLockPowers == false)\n            {\n                return true;\n            }\n\n            // If we have subscription lock powers, we can remove any lock so we're good", "            if (hasSubscriptionLockPowers == true)\n            {\n                return false;\n            }\n\n            // Find out if we have subscription level locks\n            bool hasSubscriptionLocks = resource.ResourceLocks.Where(r => r.Scope == \"subscription\").Any();\n\n            // We don't have subscription lock powers so if the locks are at the subscription level then we're not good\n            if (hasSubscriptionLocks == true)\n            {\n                return true;\n            }\n\n            // We do have resource lock powers and we're dealing with resource groups so we're good", "            if (hasSubscriptionLocks == true)\n            {\n                return true;\n            }\n\n            // We do have resource lock powers and we're dealing with resource groups so we're good\n            if (settings.ResourceGroups == true)\n            {\n                return false;\n            }\n\n            // Find out what kind of locks we have at the group and resource level\n            bool hasGroupLocks = resource.ResourceLocks.Where(r => r.Scope == \"resource group\").Any();\n            bool hasResourceLocks = resource.ResourceLocks.Where(r => r.Scope == \"resource\").Any();\n\n            // We have resource lock powers and the resource is locked at the resource level so we're good", "            if (hasGroupLocks == false)\n            {\n                return false;\n            }\n\n            // Find out if the role scope is for the resource group\n            bool hasOwnerOnGroup = resource.Roles.Where(r => r.ScopeType == \"resource group\" && r.Name == \"Owner\").Any();\n\n            // We have resource lock powers and the resource is locked at the group level\n            if (hasGroupLocks == true && hasOwnerOnGroup == true)\n            {\n                return false;\n            }\n\n            // Has owner on resource but lock is on group lands here so we're not good\n            return true;\n        }\n", "            if (hasGroupLocks == true && hasOwnerOnGroup == true)\n            {\n                return false;\n            }\n\n            // Has owner on resource but lock is on group lands here so we're not good\n            return true;\n        }\n\n        public static IAsyncPolicy<HttpResponseMessage> GetRetryAfterPolicy()\n        {\n            return Policy\n                .HandleResult<HttpResponseMessage>(msg => msg.Headers.TryGetValues(\"RetryAfter\", out var _))\n                .WaitAndRetryAsync(\n                    retryCount: 3,\n                    sleepDurationProvider: (_, response, _) =>\n                        response.Result.Headers.TryGetValues(\"RetryAfter\", out var seconds)\n                            ? TimeSpan.FromSeconds(int.Parse(seconds.First()))\n                            : TimeSpan.FromSeconds(5),\n                    onRetryAsync: (msg, time, retries, context) => Task.CompletedTask\n                );\n        }\n    }\n}\n", "        public static IAsyncPolicy<HttpResponseMessage> GetRetryAfterPolicy()\n        {\n            return Policy\n                .HandleResult<HttpResponseMessage>(msg => msg.Headers.TryGetValues(\"RetryAfter\", out var _))\n                .WaitAndRetryAsync(\n                    retryCount: 3,\n                    sleepDurationProvider: (_, response, _) =>\n                        response.Result.Headers.TryGetValues(\"RetryAfter\", out var seconds)\n                            ? TimeSpan.FromSeconds(int.Parse(seconds.First()))\n                            : TimeSpan.FromSeconds(5),\n                    onRetryAsync: (msg, time, retries, context) => Task.CompletedTask\n                );\n        }\n    }\n}\n"]}
{"filename": "src/Commands/AxeCommand.cs", "chunked_list": ["using Beeching.Commands.Interfaces;\nusing Spectre.Console;\nusing Spectre.Console.Cli;\n\nnamespace Beeching.Commands\n{\n    internal class AxeCommand : AsyncCommand<AxeSettings>\n    {\n        private readonly IAxe _axe;\n\n        public AxeCommand(IAxe axe)\n        {\n            _axe = axe;\n        }\n", "        private readonly IAxe _axe;\n\n        public AxeCommand(IAxe axe)\n        {\n            _axe = axe;\n        }\n\n        public override ValidationResult Validate(CommandContext context, AxeSettings settings)\n        {\n            if (!string.IsNullOrEmpty(settings.Name) && !string.IsNullOrEmpty(settings.Tag))\n            {\n                return ValidationResult.Error(\"Only one of Name or Tag can be specified for resources to be axed.\");\n            }\n", "            if (!string.IsNullOrEmpty(settings.Name) && !string.IsNullOrEmpty(settings.Tag))\n            {\n                return ValidationResult.Error(\"Only one of Name or Tag can be specified for resources to be axed.\");\n            }\n\n            if (string.IsNullOrEmpty(settings.Name) && string.IsNullOrEmpty(settings.Tag))\n            {\n                return ValidationResult.Error(\"A Name or Tag must be specified for resources to be axed.\");\n            }\n\n            if (!string.IsNullOrEmpty(settings.Tag))\n            {", "            if (!string.IsNullOrEmpty(settings.Tag))\n            {\n                if (!settings.Tag.Contains(':'))\n                {\n                    return ValidationResult.Error(\"A tag must be specified in the format 'key:value'.\");\n                }\n                if (string.IsNullOrEmpty(settings.Tag.Split(':')[0]) || string.IsNullOrEmpty(settings.Tag.Split(':')[1]))\n                {\n                    return ValidationResult.Error(\"A tag must be specified in the format 'key:value'.\");\n                }\n            }\n", "            if (!string.IsNullOrEmpty(settings.ResourceTypes) && settings.ResourceGroups)\n            {\n                return ValidationResult.Error(\"Resource groups cannot be specified with resource types.\");\n            }\n\n            if (\n                !string.IsNullOrEmpty(settings.ResourceTypes)\n                && (!settings.ResourceTypes.Contains('/') || !settings.ResourceTypes.Contains('.'))\n            )\n            {\n                return ValidationResult.Error(\"Resource type specified is not in a valid format.\");\n            }\n", "            if (settings.MaxRetries < 1 || settings.MaxRetries > 100)\n            {\n                return ValidationResult.Error(\"Max retries must be set between 1 and 100.\");\n            }\n\n            if (settings.RetryPause < 5 || settings.RetryPause > 60)\n            {\n                return ValidationResult.Error(\"Retry pause must be set between 5 and 60 seconds.\");\n            }\n\n            return ValidationResult.Success();\n        }\n", "        public override async Task<int> ExecuteAsync(CommandContext context, AxeSettings settings)\n        {\n            return await _axe.AxeResources(settings);\n        }\n    }\n}\n"]}
{"filename": "src/Commands/Interfaces/IAxe.cs", "chunked_list": ["namespace Beeching.Commands.Interfaces\n{\n    internal interface IAxe\n    {\n        Task<int> AxeResources(AxeSettings settings);\n    }\n}\n"]}
{"filename": "src/Models/EffectiveRole.cs", "chunked_list": ["\ufeffnamespace Beeching.Models\n{\n    internal class EffectiveRole\n    {\n        public string Name { get; set; }\n\n        public string Type { get; set; }\n\n        public string Scope { get; set; }\n\n        public string ScopeType { get; set; }\n", "        public string Scope { get; set; }\n\n        public string ScopeType { get; set; }\n\n        public string RoleDefinitionId { get; set; }\n\n        public bool CanManageLocks { get; set; }\n\n        public int Priority { get; set; }\n    }\n}\n", "        public int Priority { get; set; }\n    }\n}\n"]}
{"filename": "src/Models/ResourceLockProperties.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class ResourceLockProperties\n    {\n        [JsonPropertyName (\"level\")]\n        public string Level { get; set; }\n\n        [JsonPropertyName (\"notes\")]\n        public string Notes { get; set; }\n    }\n}\n", "        public string Notes { get; set; }\n    }\n}\n"]}
{"filename": "src/Models/AxeStatus.cs", "chunked_list": ["\ufeffnamespace Beeching.Models\n{\n    internal class AxeStatus\n    {\n        public List<Resource> AxeList { get; set; }\n\n        public bool Status { get; set; }\n\n        public AxeStatus()\n        {\n            AxeList = new();\n            Status = true;\n        }\n    }\n}\n"]}
{"filename": "src/Models/ResourceLock.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class ResourceLock\n    {\n        [JsonPropertyName (\"properties\")]\n        public ResourceLockProperties Properties { get; set; }\n\n        [JsonPropertyName (\"id\")]\n        public string Id { get; set; }\n\n        [JsonPropertyName (\"type\")]", "        public string Id { get; set; }\n\n        [JsonPropertyName (\"type\")]\n        public string Type { get; set; }\n\n        [JsonPropertyName (\"name\")]\n        public string Name { get; set; }\n\n        [Newtonsoft.Json.JsonIgnore] \n        public string Scope { get; set; }\n    }\n}\n", "        public string Scope { get; set; }\n    }\n}\n"]}
{"filename": "src/Models/RoleDefinitionPermissions.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class RoleDefinitionPermission\n    {\n        [JsonPropertyName(\"actions\")]\n        public List<string> Actions { get; set; }\n\n        [JsonPropertyName(\"notActions\")]\n        public List<string> NotActions { get; set; }\n\n        [JsonPropertyName(\"dataActions\")]\n        public List<string> DataActions { get; set; }\n\n        [JsonPropertyName(\"notDataActions\")]\n        public List<string> NotDataActions { get; set; }\n\n        public RoleDefinitionPermission()\n        {\n            Actions = new();\n            NotActions = new();\n            DataActions = new();\n            NotDataActions = new();\n        }\n    }\n}\n"]}
{"filename": "src/Models/RoleDefinition.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class RoleDefinition\n    {\n        [JsonPropertyName(\"properties\")]\n        public RoleDefinitionProperties Properties { get; set; }\n\n        [JsonPropertyName(\"id\")]\n        public string Id { get; set; }\n\n        [JsonPropertyName(\"type\")]", "        public string Id { get; set; }\n\n        [JsonPropertyName(\"type\")]\n        public string Type { get; set; }\n\n        [JsonPropertyName(\"name\")]\n        public string Name { get; set; }\n    }\n}\n"]}
{"filename": "src/Models/RoleDefinitionProperties.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class RoleDefinitionProperties\n    {\n        [JsonPropertyName(\"roleName\")]\n        public string RoleName { get; set; }\n\n        [JsonPropertyName(\"type\")]\n        public string Type { get; set; }\n\n        [JsonPropertyName(\"description\")]", "        public string Type { get; set; }\n\n        [JsonPropertyName(\"description\")]\n        public string Description { get; set; }\n\n        [JsonPropertyName(\"assignableScopes\")]\n        public List<string> AssignableScopes { get; set; }\n\n        [JsonPropertyName(\"permissions\")]\n        public List<RoleDefinitionPermission> Permissions { get; set; }\n\n        [JsonPropertyName(\"createdOn\")]", "        public DateTime CreatedOn { get; set; }\n\n        [JsonPropertyName(\"updatedOn\")]\n        public DateTime UpdatedOn { get; set; }\n\n        [JsonPropertyName(\"createdBy\")]\n        public string? CreatedBy { get; set; }\n\n        [JsonPropertyName(\"updatedBy\")]\n        public string? UpdatedBy { get; set; }\n\n        public RoleDefinitionProperties()\n        {\n            AssignableScopes = new();\n            Permissions = new();\n        }\n    }\n}\n"]}
{"filename": "src/Models/Resource.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class Resource\n    {\n        [JsonPropertyName(\"id\")]\n        public string Id { get; set; }\n\n        [JsonPropertyName(\"name\")]\n        public string Name { get; set; }\n\n        [JsonPropertyName(\"type\")]", "        public string Name { get; set; }\n\n        [JsonPropertyName(\"type\")]\n        public string Type { get; set; }\n\n        [JsonPropertyName(\"location\")]\n        public string Location { get; set; }\n\n        [JsonPropertyName(\"tags\")]\n        public Dictionary<string, string> Tags { get; set; }\n", "        public string ResourceGroup { get; set; }\n\n        public string? ApiVersion { get; set; }\n\n        public string OutputMessage { get; set; }\n\n        public bool IsLocked { get; set; }\n\n        public bool Skip { get; set; }\n\n        public List<ResourceLock> ResourceLocks { get; set; }\n\n        public List<EffectiveRole> Roles { get; set; }\n\n        public Resource()\n        {\n            ResourceLocks = new();\n            Roles = new();\n        }\n    }\n}\n", "        public bool Skip { get; set; }\n\n        public List<ResourceLock> ResourceLocks { get; set; }\n\n        public List<EffectiveRole> Roles { get; set; }\n\n        public Resource()\n        {\n            ResourceLocks = new();\n            Roles = new();\n        }\n    }\n}\n"]}
{"filename": "src/Models/ApiVersion.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class ApiVersion\n    {\n        [JsonPropertyName(\"resourceType\")]\n        public string ResourceType { get; set; }\n\n        [JsonPropertyName(\"locations\")]\n        public List<string> Locations { get; set; }\n\n        [JsonPropertyName(\"apiVersions\")]\n        public List<string> ApiVersions { get; set; }\n\n        [JsonPropertyName(\"defaultApiVersion\")]", "        public string DefaultApiVersion { get; set; }\n\n        [JsonPropertyName(\"apiProfiles\")]\n        public List<ApiProfile> ApiProfiles { get; set; }\n\n        [JsonPropertyName(\"capabilities\")]\n        public string Capabilities { get; set; }\n    }\n}\n"]}
{"filename": "src/Models/ApiProfile.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace Beeching.Models\n{\n    internal class ApiProfile\n    {\n        [JsonPropertyName(\"profileVersion\")]\n        public string ProfileVersion { get; set; }\n\n        [JsonPropertyName(\"apiVersion\")]\n        public string ApiVersion { get; set; }\n    }\n}\n", "        public string ApiVersion { get; set; }\n    }\n}\n"]}
{"filename": "src/Infrastructure/TypeResolver.cs", "chunked_list": ["using Spectre.Console.Cli;\n\nnamespace Beeching.Infrastructure\n{\n    internal class TypeResolver : ITypeResolver, IDisposable\n    {\n        private readonly IServiceProvider _provider;\n\n        public TypeResolver(IServiceProvider provider)\n        {\n            _provider = provider ?? throw new ArgumentNullException(nameof(provider));\n        }\n\n        public object? Resolve(Type? type)\n        {", "            if (type == null)\n            {\n                return null;\n            }\n\n            return _provider.GetService(type);\n        }\n\n        public void Dispose()\n        {\n            if (_provider is IDisposable disposable)\n            {\n                disposable.Dispose();\n            }\n        }\n    }\n}\n", "        public void Dispose()\n        {\n            if (_provider is IDisposable disposable)\n            {\n                disposable.Dispose();\n            }\n        }\n    }\n}\n"]}
{"filename": "src/Infrastructure/TypeRegistrar.cs", "chunked_list": ["using Microsoft.Extensions.DependencyInjection;\nusing Spectre.Console.Cli;\n\nnamespace Beeching.Infrastructure\n{\n    internal class TypeRegistrar : ITypeRegistrar\n    {\n        private readonly IServiceCollection _builder;\n\n        public TypeRegistrar(IServiceCollection builder)\n        {\n            _builder = builder;\n        }\n", "        public ITypeResolver Build()\n        {\n            return new TypeResolver(_builder.BuildServiceProvider());\n        }\n\n        public void Register(Type service, Type implementation)\n        {\n            _builder.AddSingleton(service, implementation);\n        }\n\n        public void RegisterInstance(Type service, object implementation)\n        {\n            _builder.AddSingleton(service, implementation);\n        }\n", "        public void RegisterInstance(Type service, object implementation)\n        {\n            _builder.AddSingleton(service, implementation);\n        }\n\n        public void RegisterLazy(Type service, Func<object> func)\n        {\n            if (func is null)\n            {\n                throw new ArgumentNullException(nameof(func));\n            }\n\n            _builder.AddSingleton(service, (provider) => func());\n        }\n    }\n}\n"]}
