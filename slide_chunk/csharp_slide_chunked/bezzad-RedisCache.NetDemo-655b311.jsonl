{"filename": "src/RedisCache/CacheService.cs", "chunked_list": ["\ufeffusing StackExchange.Redis;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace RedisCache\n{\n    public class CacheService : ICacheService\n    {\n        private IDatabase _db;\n\n        public CacheService(IConnectionMultiplexer connection)\n        {\n            _db = connection.GetDatabase();\n        }\n", "        private IDatabase _db;\n\n        public CacheService(IConnectionMultiplexer connection)\n        {\n            _db = connection.GetDatabase();\n        }\n\n        public async Task<T> GetAsync<T>(string key, Func<Task<T>> acquire, int expireAfterSeconds)\n        {\n            if (TryGetValue(key, out T value) == false)\n            {\n                var expiryTime = TimeSpan.FromSeconds(expireAfterSeconds);\n                value = await acquire();\n                _db.StringSet(key, JsonSerializer.Serialize(value), expiryTime);\n            }\n\n            return value;\n        }\n", "            if (TryGetValue(key, out T value) == false)\n            {\n                var expiryTime = TimeSpan.FromSeconds(expireAfterSeconds);\n                value = await acquire();\n                _db.StringSet(key, JsonSerializer.Serialize(value), expiryTime);\n            }\n\n            return value;\n        }\n\n        public T Get<T>(string key, Func<T> acquire, int expireAfterSeconds)\n        {", "        public T Get<T>(string key, Func<T> acquire, int expireAfterSeconds)\n        {\n            if (TryGetValue(key, out T value) == false)\n            {\n                var expiryTime = TimeSpan.FromSeconds(expireAfterSeconds);\n                value = acquire();\n                _db.StringSet(key, JsonSerializer.Serialize(value), expiryTime);\n            }\n\n            return value;\n        }\n", "        public T Get<T>(string key)\n        {\n            TryGetValue(key, out T value);\n            return value;\n        }\n\n        public bool TryGetValue<T>(string key, out T value)\n        {\n            var cacheValue = _db.StringGet(key);\n            if (string.IsNullOrWhiteSpace(cacheValue) == false)\n            {\n                value = JsonSerializer.Deserialize<T>(cacheValue);\n                return true;\n            }\n\n            value = default;\n            return false;\n        }\n", "            if (string.IsNullOrWhiteSpace(cacheValue) == false)\n            {\n                value = JsonSerializer.Deserialize<T>(cacheValue);\n                return true;\n            }\n\n            value = default;\n            return false;\n        }\n\n        public bool AddOrUpdate<T>(string key, T value, DateTimeOffset expirationTime, bool fireAndForget = false)\n        {\n            TimeSpan expiryTime = expirationTime.DateTime.Subtract(DateTime.Now);\n            var isSet = _db.StringSet(key, JsonSerializer.Serialize(value), expiryTime, When.Always,\n                fireAndForget ? CommandFlags.FireAndForget : CommandFlags.None);\n            return isSet;\n        }\n", "        public bool AddOrUpdate<T>(string key, T value, DateTimeOffset expirationTime, bool fireAndForget = false)\n        {\n            TimeSpan expiryTime = expirationTime.DateTime.Subtract(DateTime.Now);\n            var isSet = _db.StringSet(key, JsonSerializer.Serialize(value), expiryTime, When.Always,\n                fireAndForget ? CommandFlags.FireAndForget : CommandFlags.None);\n            return isSet;\n        }\n\n        public async Task<bool> AddOrUpdateAsync<T>(string key, T value, DateTimeOffset expirationTime, bool fireAndForget = false)\n        {\n            TimeSpan expiryTime = expirationTime.DateTime.Subtract(DateTime.Now);\n            var result = await _db.StringSetAsync(key, JsonSerializer.Serialize(value), expiryTime, When.Always,\n                fireAndForget ? CommandFlags.FireAndForget : CommandFlags.None);\n            return result;\n        }\n", "        public async Task<bool> AddOrUpdateAsync<T>(string key, T value, DateTimeOffset expirationTime, bool fireAndForget = false)\n        {\n            TimeSpan expiryTime = expirationTime.DateTime.Subtract(DateTime.Now);\n            var result = await _db.StringSetAsync(key, JsonSerializer.Serialize(value), expiryTime, When.Always,\n                fireAndForget ? CommandFlags.FireAndForget : CommandFlags.None);\n            return result;\n        }\n\n        public object Remove(string key)\n        {\n            bool _isKeyExist = _db.KeyExists(key);", "        public object Remove(string key)\n        {\n            bool _isKeyExist = _db.KeyExists(key);\n            if (_isKeyExist == true)\n            {\n                return _db.KeyDelete(key);\n            }\n            return false;\n        }\n\n        public void Clear()\n        {\n            _db.Execute(\"FLUSHDB\");\n        }\n", "        public void Clear()\n        {\n            _db.Execute(\"FLUSHDB\");\n        }\n\n        public Task ClearAsync()\n        {\n            return _db.ExecuteAsync(\"FLUSHDB\");\n        }\n    }\n}\n"]}
{"filename": "src/RedisCache/ICacheService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Threading.Tasks;\n\nnamespace RedisCache\n{\n    public interface ICacheService\n    {\n        /// <summary>\n        /// Get data using a key or if it's not exist create new data and cache it\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\"></param>\n        /// <param name=\"acquire\">data generator async method</param>\n        /// <param name=\"expireAfterSeconds\">Seconds of expiration after now</param>\n        /// <returns></returns>\n        Task<T> GetAsync<T>(string key, Func<Task<T>> acquire, int expireAfterSeconds);\n\n        /// <summary>\n        /// Get data using a key or if it's not exist create new data and cache it\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\"></param>\n        /// <param name=\"acquire\">data generator method</param>\n        /// <param name=\"expireAfterSeconds\">Seconds of expiration after now</param>\n        /// <returns></returns>\n        T Get<T>(string key, Func<T> acquire, int expireAfterSeconds);\n\n        /// <summary>\n        /// Get data using a key\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\"></param>\n        /// <returns></returns>\n        T Get<T>(string key);\n\n        /// <summary>\n        /// Gets the item associated with this key if present.\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\">An object identifying the requested entry.</param>\n        /// <param name=\"value\">The located value or null.</param>\n        /// <returns>True if the key was found.</returns>\n        bool TryGetValue<T>(string key, out T value);\n\n        /// <summary> \n        /// Set data with Value and Expiration Time of Key\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\"></param>\n        /// <param name=\"value\"></param>\n        /// <param name=\"expirationTime\"></param>\n        /// <returns></returns>\n        bool AddOrUpdate<T>(string key, T value, DateTimeOffset expirationTime, bool fireAndForget = false);\n\n        /// <summary> \n        /// Set data as async with Value and Expiration Time of Key\n        /// </summary>\n        /// <typeparam name=\"T\"></typeparam>\n        /// <param name=\"key\"></param>\n        /// <param name=\"value\"></param>\n        /// <param name=\"expirationTime\"></param>\n        Task<bool> AddOrUpdateAsync<T>(string key, T value, DateTimeOffset expirationTime, bool fireAndForget = false);\n\n        /// <summary>\n        /// Remove Data \n        /// </summary>\n        /// <param name=\"key\"></param>\n        /// <returns></returns>\n        object Remove(string key);\n\n        /// <summary>\n        /// Clear all data\n        /// </summary>\n        void Clear();\n\n        /// <summary>\n        /// Clear all data\n        /// </summary>\n        Task ClearAsync();\n    }\n}\n"]}
{"filename": "src/RedisCache.Demo/WeatherForecast.cs", "chunked_list": ["using System.Text.Json.Serialization;\n\nnamespace RedisCacheDemo\n{\n    public class WeatherForecast\n    {\n        public int Id { get; set; } = DateTime.Now.GetHashCode();\n\n        public DateTime Date { get; set; }\n\n        public int TemperatureC { get; set; }\n\n        [JsonIgnore]", "        public DateTime Date { get; set; }\n\n        public int TemperatureC { get; set; }\n\n        [JsonIgnore]\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public string Summary { get; set; }\n    }\n}"]}
{"filename": "src/RedisCache.Demo/Program.cs", "chunked_list": ["using Microsoft.OpenApi.Models;\nusing RedisCache;\nusing StackExchange.Redis;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle", "builder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(c=>\n{\n    c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"RedisCacheSystem\", Version = \"v1\" });\n});\n\nbuilder.Services.AddStackExchangeRedisCache(options =>\n{", "builder.Services.AddStackExchangeRedisCache(options =>\n{\n    options.Configuration = builder.Configuration[\"Redis\"];\n    //options.InstanceName = \"\";\n});\n\nbuilder.Services.AddSingleton<IConnectionMultiplexer>(provider => ConnectionMultiplexer.Connect(builder.Configuration[\"Redis\"]));\nbuilder.Services.AddScoped<ICacheService, CacheService>();\nvar app = builder.Build();\n", "var app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n"]}
{"filename": "src/RedisCache.Demo/Controllers/WeatherForecastController.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\nusing RedisCache;\n\nnamespace RedisCacheDemo.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\",\n            \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n", "        private static readonly string[] Summaries = new[]\n        {\n            \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\",\n            \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n        };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n        private readonly ICacheService _cacheService;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger, ICacheService cacheService)\n        {\n            _logger = logger;\n            _cacheService = cacheService;\n        }\n\n        [HttpGet(Name = \"GetWeatherForecast\")]", "        public async Task<IEnumerable<WeatherForecast>> Get()\n        {\n            var cacheData = GetKeyValues();\n            if (cacheData.Any())\n            {\n                return cacheData.Values;\n            }\n\n            var newData = Enumerable.Range(1, 10).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            }).ToArray();\n\n            await Save(newData, 50).ConfigureAwait(false);\n            return newData;\n        }\n\n        [HttpGet(nameof(WeatherForecast))]", "        public WeatherForecast Get(int id)\n        {\n            var cacheData = GetKeyValues();\n            cacheData.TryGetValue(id, out var filteredData);\n\n            return filteredData;\n        }\n\n        [HttpPost(\"addWeatherForecasts/{durationMinutes}\")]\n        public async Task<WeatherForecast[]> PostList(WeatherForecast[] values, int durationMinutes)\n        {\n            var cacheData = GetKeyValues();", "        public async Task<WeatherForecast[]> PostList(WeatherForecast[] values, int durationMinutes)\n        {\n            var cacheData = GetKeyValues();\n            foreach (var value in values)\n            {\n                cacheData[value.Id] = value;\n            }\n            await Save(cacheData.Values, durationMinutes).ConfigureAwait(false);\n            return values;\n        }\n\n        [HttpPost(\"addWeatherForecast\")]", "        public async Task<WeatherForecast> Post(WeatherForecast value)\n        {\n            var cacheData = GetKeyValues();\n            cacheData[value.Id] = value;\n            await Save(cacheData.Values).ConfigureAwait(false);\n            return value;\n        }\n\n        [HttpPut(\"updateWeatherForecast\")]\n        public async void Put(WeatherForecast WeatherForecast)\n        {\n            var cacheData = GetKeyValues();\n            cacheData[WeatherForecast.Id] = WeatherForecast;\n            await Save(cacheData.Values).ConfigureAwait(false);\n        }\n\n        [HttpDelete(\"deleteWeatherForecast\")]", "        public async void Put(WeatherForecast WeatherForecast)\n        {\n            var cacheData = GetKeyValues();\n            cacheData[WeatherForecast.Id] = WeatherForecast;\n            await Save(cacheData.Values).ConfigureAwait(false);\n        }\n\n        [HttpDelete(\"deleteWeatherForecast\")]\n        public async Task Delete(int id)\n        {\n            var cacheData = GetKeyValues();\n            cacheData.Remove(id);\n            await Save(cacheData.Values).ConfigureAwait(false);\n        }\n\n        [HttpDelete(\"ClearAll\")]", "        public async Task Delete(int id)\n        {\n            var cacheData = GetKeyValues();\n            cacheData.Remove(id);\n            await Save(cacheData.Values).ConfigureAwait(false);\n        }\n\n        [HttpDelete(\"ClearAll\")]\n        public async Task Delete()\n        {\n            await _cacheService.ClearAsync();\n        }\n\n        private Task<bool> Save(IEnumerable<WeatherForecast> weatherForecasts, double expireAfterMinutes = 50)\n        {\n            var expirationTime = DateTimeOffset.Now.AddMinutes(expireAfterMinutes);\n            return _cacheService.AddOrUpdateAsync(nameof(WeatherForecast), weatherForecasts, expirationTime);\n        }\n\n        private Dictionary<int, WeatherForecast> GetKeyValues()\n        {\n            var data = _cacheService.Get<IEnumerable<WeatherForecast>>(nameof(WeatherForecast));\n            return data?.ToDictionary(key => key.Id, val => val) ?? new Dictionary<int, WeatherForecast>();\n        }\n    }\n}", "        public async Task Delete()\n        {\n            await _cacheService.ClearAsync();\n        }\n\n        private Task<bool> Save(IEnumerable<WeatherForecast> weatherForecasts, double expireAfterMinutes = 50)\n        {\n            var expirationTime = DateTimeOffset.Now.AddMinutes(expireAfterMinutes);\n            return _cacheService.AddOrUpdateAsync(nameof(WeatherForecast), weatherForecasts, expirationTime);\n        }\n\n        private Dictionary<int, WeatherForecast> GetKeyValues()\n        {\n            var data = _cacheService.Get<IEnumerable<WeatherForecast>>(nameof(WeatherForecast));\n            return data?.ToDictionary(key => key.Id, val => val) ?? new Dictionary<int, WeatherForecast>();\n        }\n    }\n}"]}
{"filename": "src/RedisCache.Benchmark/Helper.cs", "chunked_list": ["\ufeffusing System;\nusing System.Diagnostics;\nusing System.Text;\n\nnamespace RedisCache.Benchmark\n{\n    internal static class Helper\n    {\n        public static string NextString(this Random random, int? length = null, string domain = \"abcdefghijklmnopqrstuvwxyz\")\n        {\n            var result = new StringBuilder(\"\");\n            var len = random.Next(2, length ?? domain.Length);", "        public static string NextString(this Random random, int? length = null, string domain = \"abcdefghijklmnopqrstuvwxyz\")\n        {\n            var result = new StringBuilder(\"\");\n            var len = random.Next(2, length ?? domain.Length);\n            for (var i = 0; i < len; i++)\n                result.Append(domain[random.Next(domain.Length)]);\n\n            return result.ToString();\n        }\n\n        public static long TotalNanosecond(this TimeSpan time)\n        {\n            // To convert the elapsed time to nanoseconds, we multiply the Ticks\n            // property of the TimeSpan object by 1 billion and divide by the\n            // Stopwatch.Frequency property.\n            return (long)(time.Ticks * 1000000000.0 / Stopwatch.Frequency);\n        }\n    }\n}\n", "        public static long TotalNanosecond(this TimeSpan time)\n        {\n            // To convert the elapsed time to nanoseconds, we multiply the Ticks\n            // property of the TimeSpan object by 1 billion and divide by the\n            // Stopwatch.Frequency property.\n            return (long)(time.Ticks * 1000000000.0 / Stopwatch.Frequency);\n        }\n    }\n}\n"]}
{"filename": "src/RedisCache.Benchmark/SampleModel.cs", "chunked_list": ["\ufeffusing System;\nusing System.Linq;\n\nnamespace RedisCache.Benchmark\n{\n    /// <summary>\n    /// This class is a sample model to test caching\n    /// </summary>\n    internal class SampleModel\n    {\n        public long Id { get; set; }", "    internal class SampleModel\n    {\n        public long Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public double Ratio { get; set; }\n        public string[] Addresses { get; set; }\n        public string State { get; set; }\n        public bool HaveAccess { get; set; }\n\n        public static SampleModel Factory()\n        {\n            var random = new Random(DateTime.Now.GetHashCode());\n\n            return new SampleModel()\n            {\n                Id = random.NextInt64(),\n                Name = random.NextString(10),\n                Description = random.NextString(100, @\"abcdefghijklmnopqrstuvwxyz1234567890 _@#$%^&*\"),\n                Ratio = random.NextDouble() * 5,\n                Addresses = Enumerable.Range(0, 10).Select(_ => random.NextString(100, @\"abcdefghijklmnopqrstuvwxyz1234567890 _@#$%^&*\")).ToArray(),\n                HaveAccess = random.Next(2) == 1,\n                State = random.NextString()\n            };\n        }\n    }\n}\n", "        public bool HaveAccess { get; set; }\n\n        public static SampleModel Factory()\n        {\n            var random = new Random(DateTime.Now.GetHashCode());\n\n            return new SampleModel()\n            {\n                Id = random.NextInt64(),\n                Name = random.NextString(10),\n                Description = random.NextString(100, @\"abcdefghijklmnopqrstuvwxyz1234567890 _@#$%^&*\"),\n                Ratio = random.NextDouble() * 5,\n                Addresses = Enumerable.Range(0, 10).Select(_ => random.NextString(100, @\"abcdefghijklmnopqrstuvwxyz1234567890 _@#$%^&*\")).ToArray(),\n                HaveAccess = random.Next(2) == 1,\n                State = random.NextString()\n            };\n        }\n    }\n}\n"]}
{"filename": "src/RedisCache.Benchmark/EasyHybridCache.cs", "chunked_list": ["\ufeffusing EasyCaching.Core;\nusing EasyCaching.Core.Configurations;\nusing Microsoft.Extensions.DependencyInjection;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace RedisCache.Benchmark\n{\n    public class EasyHybridCache\n    {\n        private readonly IHybridCachingProvider _provider;\n\n        public EasyHybridCache(string redisIp, int redisPort)\n        {\n            IServiceCollection services = new ServiceCollection();\n            services.AddEasyCaching(option =>\n            {\n                option.WithJson(\"myjson\");\n\n                // local\n                option.UseInMemory(\"inmemory\");\n\n                // distributed\n                option.UseRedis(config =>\n                {\n                    config.DBConfig.Endpoints.Add(new ServerEndPoint(redisIp, redisPort));\n                    config.DBConfig.Database = 5;\n                    config.SerializerName = \"myjson\";\n                    config.CacheNulls = false;\n                }, \"redis\");\n\n                // combine local and distributed\n                option.UseHybrid(config =>\n                {\n                    config.TopicName = \"benchmark-topic\";\n                    config.EnableLogging = false;\n\n                    // specify the local cache provider name after v0.5.4\n                    config.LocalCacheProviderName = \"inmemory\";\n\n                    // specify the distributed cache provider name after v0.5.4\n                    config.DistributedCacheProviderName = \"redis\";\n\n                    config.ThrowIfDistributedCacheError = false;\n                });\n                // use redis bus\n                //.WithRedisBus(busConf =>\n                // {\n                //     busConf.Endpoints.Add(new ServerEndPoint(\"127.0.0.1\", 6380));\n\n                //     // do not forget to set the SerializerName for the bus here !!\n                //     busConf.SerializerName = \"myjson\";\n                // });\n            });\n\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n            _provider = serviceProvider.GetService<IHybridCachingProvider>();\n        }\n", "    public class EasyHybridCache\n    {\n        private readonly IHybridCachingProvider _provider;\n\n        public EasyHybridCache(string redisIp, int redisPort)\n        {\n            IServiceCollection services = new ServiceCollection();\n            services.AddEasyCaching(option =>\n            {\n                option.WithJson(\"myjson\");\n\n                // local\n                option.UseInMemory(\"inmemory\");\n\n                // distributed\n                option.UseRedis(config =>\n                {\n                    config.DBConfig.Endpoints.Add(new ServerEndPoint(redisIp, redisPort));\n                    config.DBConfig.Database = 5;\n                    config.SerializerName = \"myjson\";\n                    config.CacheNulls = false;\n                }, \"redis\");\n\n                // combine local and distributed\n                option.UseHybrid(config =>\n                {\n                    config.TopicName = \"benchmark-topic\";\n                    config.EnableLogging = false;\n\n                    // specify the local cache provider name after v0.5.4\n                    config.LocalCacheProviderName = \"inmemory\";\n\n                    // specify the distributed cache provider name after v0.5.4\n                    config.DistributedCacheProviderName = \"redis\";\n\n                    config.ThrowIfDistributedCacheError = false;\n                });\n                // use redis bus\n                //.WithRedisBus(busConf =>\n                // {\n                //     busConf.Endpoints.Add(new ServerEndPoint(\"127.0.0.1\", 6380));\n\n                //     // do not forget to set the SerializerName for the bus here !!\n                //     busConf.SerializerName = \"myjson\";\n                // });\n            });\n\n            IServiceProvider serviceProvider = services.BuildServiceProvider();\n            _provider = serviceProvider.GetService<IHybridCachingProvider>();\n        }\n", "        public T Get<T>(string key)\n        {\n            var result = _provider.Get<T>(key);\n            return result.Value;\n        }\n\n        public async Task<T> GetAsync<T>(string key)\n        {\n            var result = await _provider.GetAsync<T>(key);\n            return result.Value;\n        }\n", "        public void Set<T>(string key, T value, TimeSpan expiration)\n        {\n            _provider.Set(key, value, expiration);\n        }\n\n        public async Task SetAsync<T>(string key, T value, TimeSpan expiration)\n        {\n            await _provider.SetAsync(key, value, expiration);\n        }\n    }\n}\n"]}
{"filename": "src/RedisCache.Benchmark/BenchmarkManager.cs", "chunked_list": ["\ufeffusing BenchmarkDotNet.Attributes;\nusing HybridRedisCache;\nusing Microsoft.Extensions.Caching.Memory;\nusing StackExchange.Redis;\nusing System;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace RedisCache.Benchmark", "\nnamespace RedisCache.Benchmark\n{\n    //[MemoryDiagnoser]\n    [Orderer(BenchmarkDotNet.Order.SummaryOrderPolicy.FastestToSlowest)]\n    public class BenchmarkManager\n    {\n        IMemoryCache _memCache;\n        ICacheService _redisCache;\n        EasyHybridCache _easyHybridCache;\n        HybridCache _hybridCache;\n\n        const int redisPort = 6379;\n        const string redisIP = \"127.0.0.1\"; // \"172.23.44.11\"   \"127.0.0.1\" \n        const string KeyPrefix = \"test_\";\n        const string ReadKeyPrefix = \"test_x\";\n        const int ExpireDurationSecond = 3600;\n        static SampleModel[] _data;\n        static Lazy<SampleModel> _singleModel = new Lazy<SampleModel>(() => _data[0], true);\n        static Lazy<SampleModel> _singleWorseModel = new Lazy<SampleModel>(() => _data[1], true);\n\n        [Params(1, 10, 100)]", "        public int RepeatCount { get; set; }\n\n        [GlobalSetup]\n        public void GlobalSetup()\n        {\n            // Write your initialization code here\n            var connection = ConnectionMultiplexer.Connect($\"{redisIP}:{redisPort}\");\n            _redisCache = new CacheService(connection);\n            _memCache = new MemoryCache(new MemoryCacheOptions());\n            _easyHybridCache = new EasyHybridCache(redisIP, redisPort);\n            _data ??= Enumerable.Range(0, 10000).Select(_ => SampleModel.Factory()).ToArray();\n            _hybridCache = new HybridCache(new HybridCachingOptions()\n            {\n                InstanceName = nameof(BenchmarkManager),\n                DefaultDistributedExpirationTime = TimeSpan.FromDays(1),\n                DefaultLocalExpirationTime = TimeSpan.FromMinutes(10),\n                RedisCacheConnectString = $\"{redisIP}:{redisPort}\",\n                ThrowIfDistributedCacheError = false\n            });\n        }\n\n        [Benchmark(Baseline = true)]", "        public void Add_InMemory()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                _memCache.Set(KeyPrefix + i, JsonSerializer.Serialize(_data[i]), DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n        }\n\n        [Benchmark]\n        public async Task Add_InMemory_Async()\n        {\n            // write cache", "        public async Task Add_InMemory_Async()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                await _memCache.GetOrCreateAsync(KeyPrefix + i, _ => Task.FromResult(JsonSerializer.Serialize(_data[i])));\n        }\n\n        [Benchmark]\n        public void Add_Redis()\n        {\n            // write cache", "        public void Add_Redis()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                _redisCache.AddOrUpdate(KeyPrefix + i, _data[i], DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n        }\n\n        [Benchmark]\n        public async Task Add_Redis_Async()\n        {\n            // write cache", "        public async Task Add_Redis_Async()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                await _redisCache.AddOrUpdateAsync(KeyPrefix + i, _data[i], DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n        }\n\n        [Benchmark]\n        public void Add_Redis_With_FireAndForget()\n        {\n            // write cache", "        public void Add_Redis_With_FireAndForget()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                _redisCache.AddOrUpdate(KeyPrefix + i, _data[i], DateTimeOffset.Now.AddSeconds(ExpireDurationSecond), true);\n        }\n\n        [Benchmark]\n        public async Task Add_Redis_With_FireAndForget_Async()\n        {\n            // write cache", "        public async Task Add_Redis_With_FireAndForget_Async()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                await _redisCache.AddOrUpdateAsync(KeyPrefix + i, _data[i], DateTimeOffset.Now.AddSeconds(ExpireDurationSecond), true);\n        }\n\n        [Benchmark]\n        public void Add_EasyCache_Hybrid()\n        {\n            // write cache", "        public void Add_EasyCache_Hybrid()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                _easyHybridCache.Set(KeyPrefix + i, _data[i], TimeSpan.FromSeconds(ExpireDurationSecond));\n        }\n\n        [Benchmark]\n        public async Task Add_EasyCache_Hybrid_Async()\n        {\n            // write cache", "        public async Task Add_EasyCache_Hybrid_Async()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                await _easyHybridCache.SetAsync(KeyPrefix + i, _data[i], TimeSpan.FromSeconds(ExpireDurationSecond));\n        }\n\n        [Benchmark]\n        public void Add_HybridRedisCache()\n        {\n            // write cache", "        public void Add_HybridRedisCache()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                _hybridCache.Set(KeyPrefix + i, _data[i], TimeSpan.FromSeconds(ExpireDurationSecond), fireAndForget: true);\n        }\n\n        [Benchmark]\n        public async Task Add_HybridRedisCache_Async()\n        {\n            // write cache", "        public async Task Add_HybridRedisCache_Async()\n        {\n            // write cache\n            for (var i = 0; i < RepeatCount; i++)\n                await _hybridCache.SetAsync(KeyPrefix + i, _data[i], TimeSpan.FromSeconds(ExpireDurationSecond), fireAndForget: true);\n        }\n\n        [Benchmark]\n        public void Get_InMemory()\n        {\n            // write single cache\n            _memCache.Set(ReadKeyPrefix, _singleModel.Value, DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n\n            // read cache", "        public void Get_InMemory()\n        {\n            // write single cache\n            _memCache.Set(ReadKeyPrefix, _singleModel.Value, DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n\n            // read cache\n            for (var i = 0; i < RepeatCount; i++)\n                if (_memCache.TryGetValue(ReadKeyPrefix, out string value))\n                    ThrowIfIsNotMatch(JsonSerializer.Deserialize<SampleModel>(value), _singleModel.Value);\n        }\n\n        [Benchmark]", "        public async Task Get_InMemory_Async()\n        {\n            // write single cache\n            _memCache.Set(ReadKeyPrefix, JsonSerializer.Serialize(_singleModel.Value), DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n\n            // read cache\n            for (var i = 0; i < RepeatCount; i++)\n            {\n                // don't generate correct data when couldn't find, because its already wrote!\n                var value = await _memCache.GetOrCreateAsync(ReadKeyPrefix, _ => Task.FromResult(JsonSerializer.Serialize(_singleWorseModel.Value)));\n                ThrowIfIsNotMatch(JsonSerializer.Deserialize<SampleModel>(value), _singleModel.Value);\n            }\n        }\n\n        [Benchmark]", "        public void Get_Redis()\n        {\n            // write single cache\n            _redisCache.AddOrUpdate(ReadKeyPrefix, _singleModel.Value, DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n\n            // read cache\n            for (var i = 0; i < RepeatCount; i++)\n                if (_redisCache.TryGetValue(ReadKeyPrefix, out SampleModel value))\n                    ThrowIfIsNotMatch(value, _singleModel.Value);\n        }\n\n        [Benchmark]", "        public async Task Get_Redis_Async()\n        {\n            // write single cache\n            await _redisCache.AddOrUpdateAsync(ReadKeyPrefix, _singleModel.Value, DateTimeOffset.Now.AddSeconds(ExpireDurationSecond));\n\n            // read cache\n            for (var i = 0; i < RepeatCount; i++)\n            {\n                // don't generate correct data when couldn't find, because its already wrote!\n                var value = await _redisCache.GetAsync(ReadKeyPrefix, () => Task.FromResult(_singleWorseModel.Value), ExpireDurationSecond);\n                ThrowIfIsNotMatch(value, _singleModel.Value);\n            }\n        }\n\n        [Benchmark]", "        public void Get_EasyCache_Hybrid()\n        {\n            // write single cache\n            _easyHybridCache.Set(ReadKeyPrefix, _singleModel.Value, TimeSpan.FromSeconds(ExpireDurationSecond));\n\n            // read cache\n            for (var i = 0; i < RepeatCount; i++)\n            {\n                // don't generate correct data when couldn't find, because its already wrote!\n                var value = _easyHybridCache.Get<SampleModel>(ReadKeyPrefix);\n                if (value == null)\n                    throw new ArgumentNullException(nameof(value));\n            }\n        }\n\n        [Benchmark]", "                if (value == null)\n                    throw new ArgumentNullException(nameof(value));\n            }\n        }\n\n        [Benchmark]\n        public async Task Get_EasyCache_Hybrid_Async()\n        {\n            // write single cache\n            await _easyHybridCache.SetAsync(ReadKeyPrefix, _singleModel.Value, TimeSpan.FromSeconds(ExpireDurationSecond));\n\n            // read cache", "            for (var i = 0; i < RepeatCount; i++)\n            {\n                // don't generate correct data when couldn't find, because its already wrote!\n                var value = await _easyHybridCache.GetAsync<SampleModel>(ReadKeyPrefix);\n                if (value == null)\n                    throw new ArgumentNullException(nameof(value));\n            }\n        }\n\n        [Benchmark]\n        public void Get_HybridRedisCache()\n        {\n            // write single cache\n            _hybridCache.Set(ReadKeyPrefix, _singleModel.Value, TimeSpan.FromSeconds(ExpireDurationSecond), fireAndForget: true);\n\n            // read cache", "        public void Get_HybridRedisCache()\n        {\n            // write single cache\n            _hybridCache.Set(ReadKeyPrefix, _singleModel.Value, TimeSpan.FromSeconds(ExpireDurationSecond), fireAndForget: true);\n\n            // read cache\n            for (var i = 0; i < RepeatCount; i++)\n            {\n                // don't generate correct data when couldn't find, because its already wrote!\n                var value = _easyHybridCache.Get<SampleModel>(ReadKeyPrefix);\n                if (value == null)\n                    throw new ArgumentNullException(nameof(value));\n            }\n        }\n\n        [Benchmark]", "                if (value == null)\n                    throw new ArgumentNullException(nameof(value));\n            }\n        }\n\n        [Benchmark]\n        public async Task Get_HybridRedisCache_Async()\n        {\n            // write single cache\n            await _hybridCache.SetAsync(ReadKeyPrefix, _singleModel.Value, TimeSpan.FromSeconds(ExpireDurationSecond), fireAndForget: true);\n\n            // read cache", "            for (var i = 0; i < RepeatCount; i++)\n            {\n                // don't generate correct data when couldn't find, because its already wrote!\n                var value = await _hybridCache.GetAsync<SampleModel>(ReadKeyPrefix);\n                if (value == null)\n                    throw new ArgumentNullException(nameof(value));\n            }\n        }\n\n        private void ThrowIfIsNotMatch(SampleModel a, SampleModel b)\n        {", "        private void ThrowIfIsNotMatch(SampleModel a, SampleModel b)\n        {\n            if (a?.Id != b?.Id)\n                throw new ArrayTypeMismatchException($\"value.Id({a?.Id} not equal with _data[i].Id({b?.Id}\");\n        }\n    }\n}\n"]}
{"filename": "src/RedisCache.Benchmark/Program.cs", "chunked_list": ["\ufeff// See https://aka.ms/new-console-template for more information\nusing BenchmarkDotNet.Attributes;\nusing RedisCache.Benchmark;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\n\npublic class Program\n{\n    static BenchmarkManager Manager = new() { RepeatCount = 1000 };\n", "\npublic class Program\n{\n    static BenchmarkManager Manager = new() { RepeatCount = 1000 };\n\n    private static async Task Main()\n    {\n        Console.Title = \"Redis vs. Mem cache benchmark\";\n\n#if !DEBUG\n        BenchmarkDotNet.Running.BenchmarkRunner.Run<BenchmarkManager>();\n#else\n        var timesOfExecutions = new Dictionary<string, double>();\n        var sw = new System.Diagnostics.Stopwatch();\n        Manager.GlobalSetup();\n\n        Console.WriteLine($\"Repeating each test {Manager.RepeatCount} times\");\n        Console.WriteLine(\"\\n\");\n        PrintHeader();\n\n        var methods = typeof(BenchmarkManager).GetMethods(BindingFlags.Public | BindingFlags.Instance);", "        foreach (var method in methods)\n        {\n            if (method.GetCustomAttribute(typeof(BenchmarkAttribute)) != null)\n            {\n                sw.Restart();\n                if (method.ReturnType == typeof(Task))\n                {\n                    await (Task)method.Invoke(Manager, null);\n                }\n                else\n                {\n                    method.Invoke(Manager, null);\n                }\n                sw.Stop();\n                timesOfExecutions.Add(method.Name, sw.ElapsedMilliseconds);\n                PrintBenchmark(method.Name, sw.ElapsedMilliseconds);\n            }\n        }\n        PrintSortedResult(timesOfExecutions);\n#endif\n        Console.ReadLine();\n    }\n\n", "    public static void ClearConsole()\n    {\n        Console.SetCursorPosition(0, 0);\n        Console.CursorVisible = false;\n        for (int y = 0; y < Console.BufferHeight; y++)\n            Console.Write(new String(' ', Console.WindowWidth));\n        Console.SetCursorPosition(0, 0);\n        Console.CursorVisible = true;\n    }\n\n", "    private static void PrintSortedResult(Dictionary<string, double> methodDurations)\n    {\n        ClearHost();\n        PrintHeader();\n        foreach (var method in methodDurations.OrderBy(m => m.Key.Substring(0,3)).ThenBy(m => m.Value))\n        {\n            PrintBenchmark(method.Key, method.Value);\n        }\n        PrintLine();\n    }\n", "    private static void PrintHeader()\n    {\n        PrintLine();\n        var headerDesc = \"|\".PadRight(18) + \"Test Method Name\".PadRight(32) + \"|  Duration (milisecond)\".PadRight(24) + \"  |\";\n        Console.WriteLine(headerDesc);\n    }\n\n    private static void PrintBenchmark(string method, double durMs)\n    {\n        PrintLine();\n        var leftDesc = $\"| {method} \".PadRight(50);\n        var rightDesc = $\"|   {durMs:N0}ms \".PadRight(25);\n        Console.WriteLine(leftDesc + rightDesc + $\" |\");\n    }\n", "    private static void PrintLine()\n    {\n        Console.WriteLine(\" \" + new string('-', 75));\n    }\n\n    public static void ClearHost()\n    {\n        Console.Write(\"\\f\\u001bc\\x1b[3J\");\n    }\n\n}"]}
