{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/LiveChatMessagesCollector.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.Net.Http;\nusing System.Threading;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.UncertainResult;\nusing Mochineko.YouTubeLiveStreamingClient.Responses;\nusing UniRx;\nusing UnityEngine;\n", "using UnityEngine;\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    /// <summary>\n    /// Collects and provides live chat messages from YouTube Data API v3.\n    /// </summary>\n    public sealed class LiveChatMessagesCollector : IDisposable\n    {\n        private readonly HttpClient httpClient;\n        private readonly IAPIKeyProvider apiKeyProvider;", "        private readonly HttpClient httpClient;\n        private readonly IAPIKeyProvider apiKeyProvider;\n        private readonly string videoID;\n        private readonly uint maxResultsOfMessages;\n        private readonly bool dynamicInterval;\n        private readonly bool verbose;\n        private readonly CancellationTokenSource cancellationTokenSource = new();\n\n        private readonly Subject<VideosAPIResponse> onVideoInformationUpdated = new();\n        public IObservable<VideosAPIResponse> OnVideoInformationUpdated => onVideoInformationUpdated;\n", "        private readonly Subject<VideosAPIResponse> onVideoInformationUpdated = new();\n        public IObservable<VideosAPIResponse> OnVideoInformationUpdated => onVideoInformationUpdated;\n\n        private readonly Subject<LiveChatMessageItem> onMessageCollected = new();\n        public IObservable<LiveChatMessageItem> OnMessageCollected => onMessageCollected;\n\n        private bool isCollecting = false;\n        private string? liveChatID = null;\n        private string? nextPageToken = null;\n        private float intervalSeconds;\n\n        public LiveChatMessagesCollector(\n            HttpClient httpClient,\n            string apiKey,\n            string videoID,\n            uint maxResultsOfMessages = 500,\n            bool dynamicInterval = false,\n            float intervalSeconds = 5f,\n            bool verbose = true)\n        {", "        private float intervalSeconds;\n\n        public LiveChatMessagesCollector(\n            HttpClient httpClient,\n            string apiKey,\n            string videoID,\n            uint maxResultsOfMessages = 500,\n            bool dynamicInterval = false,\n            float intervalSeconds = 5f,\n            bool verbose = true)\n        {", "            if (string.IsNullOrEmpty(apiKey))\n            {\n                throw new ArgumentException($\"{nameof(apiKey)} must no be empty.\");\n            }\n\n            if (string.IsNullOrEmpty(videoID))\n            {\n                throw new ArgumentException($\"{nameof(videoID)} must no be empty.\");\n            }\n\n            this.httpClient = httpClient;\n            this.apiKeyProvider = new SingleAPIKeyProvider(apiKey);\n            this.videoID = videoID;\n            this.maxResultsOfMessages = maxResultsOfMessages;\n            this.dynamicInterval = dynamicInterval;\n            this.intervalSeconds = intervalSeconds;\n            this.verbose = verbose;\n        }\n        \n        // TODO: Check\n        private LiveChatMessagesCollector(\n            HttpClient httpClient,\n            string[] apiKeys,\n            string videoID,\n            uint maxResultsOfMessages = 500,\n            bool dynamicInterval = false,\n            float intervalSeconds = 5f,\n            bool verbose = true)\n        {", "            if (apiKeys.Length == 0)\n            {\n                throw new ArgumentException($\"{nameof(apiKeys)} must not be empty.\");\n            }\n\n            if (string.IsNullOrEmpty(videoID))\n            {\n                throw new ArgumentException($\"{nameof(videoID)} must no be empty.\");\n            }\n\n            this.httpClient = httpClient;\n            this.apiKeyProvider = new MultiAPIKeyProvider(apiKeys);\n            this.videoID = videoID;\n            this.maxResultsOfMessages = maxResultsOfMessages;\n            this.dynamicInterval = dynamicInterval;\n            this.intervalSeconds = intervalSeconds;\n            this.verbose = verbose;\n        }\n", "        public void Dispose()\n        {\n            cancellationTokenSource.Dispose();\n        }\n\n        /// <summary>\n        /// Begins collecting live chat messages.\n        /// </summary>\n        public void BeginCollection()\n        {\n            if (isCollecting)\n            {\n                return;\n            }\n\n            isCollecting = true;\n\n            BeginCollectionAsync(cancellationTokenSource.Token)\n                .Forget();\n        }\n", "        public void BeginCollection()\n        {\n            if (isCollecting)\n            {\n                return;\n            }\n\n            isCollecting = true;\n\n            BeginCollectionAsync(cancellationTokenSource.Token)\n                .Forget();\n        }\n", "        private async UniTask BeginCollectionAsync(\n            CancellationToken cancellationToken)\n        {\n            await UniTask.SwitchToThreadPool();\n\n            while (!cancellationToken.IsCancellationRequested)\n            {\n                await UpdateAsync(cancellationToken);\n\n                try\n                {\n                    await UniTask.Delay(\n                        TimeSpan.FromSeconds(intervalSeconds),\n                        cancellationToken: cancellationToken\n                    );\n                }\n                // Catch cancellation", "                catch (OperationCanceledException)\n                {\n                    return;\n                }\n            }\n        }\n\n        private async UniTask UpdateAsync(CancellationToken cancellationToken)\n        {\n            if (liveChatID == null)\n            {\n                await GetLiveChatIDAsync(cancellationToken);\n\n                // Succeeded to get live chat ID", "            if (liveChatID == null)\n            {\n                await GetLiveChatIDAsync(cancellationToken);\n\n                // Succeeded to get live chat ID\n                if (liveChatID != null)\n                {\n                    await PollLiveChatMessagesAsync(liveChatID, cancellationToken);\n                }\n            }\n            else\n            {\n                await PollLiveChatMessagesAsync(liveChatID, cancellationToken);\n            }\n        }\n", "        private async UniTask GetLiveChatIDAsync(CancellationToken cancellationToken)\n        {\n            if (verbose)\n            {\n                Debug.Log($\"[YouTubeLiveStreamingClient] Getting live chat ID from video ID:{videoID}...\");\n            }\n\n            var result = await VideosAPI.GetVideoInformationAsync(\n                httpClient,\n                apiKeyProvider.APIKey,\n                videoID,\n                cancellationToken);\n\n            VideosAPIResponse response;\n            switch (result)\n            {\n                case IUncertainSuccessResult<VideosAPIResponse> success:\n                {", "                    if (verbose)\n                    {\n                        Debug.Log($\"[YouTubeLiveStreamingClient] Succeeded to get video API response.\");\n                    }\n\n                    response = success.Result;\n                    break;\n                }\n\n                case LimitExceededResult<VideosAPIResponse> limitExceeded:\n                {", "                    if (verbose)\n                    {\n                        Debug.LogWarning(\n                            $\"[YouTubeLiveStreamingClient] Failed to get live chat ID because -> {limitExceeded.Message}.\");\n                    }\n\n                    if (apiKeyProvider.TryChangeKey())\n                    {\n                        if (verbose)\n                        {\n                            Debug.Log(\n                                $\"[YouTubeLiveStreamingClient] Change API key and continue.\");\n                        }\n                            \n                        // Use another API key from next time\n                        return;\n                    }\n                    else\n                    {\n                        Debug.LogError(\n                            $\"[YouTubeLiveStreamingClient] Failed to change API key.\");\n                        return;\n                    }\n                }\n\n                case IUncertainRetryableResult<VideosAPIResponse> retryable:\n                {", "                        if (verbose)\n                        {\n                            Debug.Log(\n                                $\"[YouTubeLiveStreamingClient] Change API key and continue.\");\n                        }\n                            \n                        // Use another API key from next time\n                        return;\n                    }\n                    else\n                    {\n                        Debug.LogError(\n                            $\"[YouTubeLiveStreamingClient] Failed to change API key.\");\n                        return;\n                    }\n                }\n\n                case IUncertainRetryableResult<VideosAPIResponse> retryable:\n                {", "                    if (verbose)\n                    {\n                        Debug.Log(\n                            $\"[YouTubeLiveStreamingClient] Retryable failed to get live chat ID because -> {retryable.Message}.\");\n                    }\n\n                    return;\n                }\n\n                case IUncertainFailureResult<VideosAPIResponse> failure:\n                {\n                    Debug.LogError(\n                        $\"[YouTubeLiveStreamingClient] Failed to get live chat ID because -> {failure.Message}\");\n                    return;\n                }\n\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(result));\n            }\n", "            if (response.Items.Count == 0)\n            {\n                if (verbose)\n                {\n                    Debug.Log($\"[YouTubeLiveStreamingClient] No items are found in response from video ID:{videoID}.\");\n                }\n\n                return;\n            }\n\n            var liveChatID = response.Items[0].LiveStreamingDetails.ActiveLiveChatId;", "            if (!string.IsNullOrEmpty(liveChatID))\n            {\n                if (verbose)\n                {\n                    Debug.Log(\n                        $\"[YouTubeLiveStreamingClient] Succeeded to get live chat ID:{liveChatID} from video ID:{videoID}.\");\n                }\n\n                this.liveChatID = liveChatID;\n                onVideoInformationUpdated.OnNext(response);\n            }\n            else\n            {\n                Debug.LogError($\"[YouTubeLiveStreamingClient] LiveChatID is null or empty from video ID:{videoID}.\");\n            }\n        }\n", "        private async UniTask PollLiveChatMessagesAsync(\n            string liveChatID,\n            CancellationToken cancellationToken)\n        {\n            if (verbose)\n            {\n                Debug.Log($\"[YouTubeLiveStreamingClient] Polling live chat messages...\");\n            }\n\n            var result = await LiveChatMessagesAPI.GetLiveChatMessagesAsync(\n                httpClient,\n                apiKeyProvider.APIKey,\n                liveChatID,\n                cancellationToken,\n                pageToken: nextPageToken,\n                maxResults: maxResultsOfMessages);\n\n            LiveChatMessagesAPIResponse response;\n            switch (result)\n            {\n                case IUncertainSuccessResult<LiveChatMessagesAPIResponse> success:\n                {", "                    if (verbose)\n                    {\n                        Debug.Log(\n                            $\"[YouTubeLiveStreamingClient] Succeeded to get live chat messages: {success.Result.Items.Count} messages with next page token:{success.Result.NextPageToken}.\");\n                    }\n\n                    response = success.Result;\n                    this.nextPageToken = response.NextPageToken;\n                    if (dynamicInterval)\n                    {\n                        this.intervalSeconds = response.PollingIntervalMillis / 1000f;\n                    }\n\n                    break;\n                }\n                \n                case LimitExceededResult<LiveChatMessagesAPIResponse> limitExceeded:\n                {", "                    if (dynamicInterval)\n                    {\n                        this.intervalSeconds = response.PollingIntervalMillis / 1000f;\n                    }\n\n                    break;\n                }\n                \n                case LimitExceededResult<LiveChatMessagesAPIResponse> limitExceeded:\n                {\n                    if (verbose)\n                    {\n                        Debug.LogWarning(\n                            $\"[YouTubeLiveStreamingClient] Failed to get live chat messages because -> {limitExceeded.Message}.\");\n                    }\n", "                    if (verbose)\n                    {\n                        Debug.LogWarning(\n                            $\"[YouTubeLiveStreamingClient] Failed to get live chat messages because -> {limitExceeded.Message}.\");\n                    }\n\n                    if (apiKeyProvider.TryChangeKey())\n                    {\n                        if (verbose)\n                        {\n                            Debug.Log(\n                                $\"[YouTubeLiveStreamingClient] Change API key and continue.\");\n                        }\n                            \n                        // Use another API key from next time\n                        return;\n                    }\n                    else\n                    {\n                        Debug.LogError(\n                            $\"[YouTubeLiveStreamingClient] Failed to change API key.\");\n                        return;\n                    }\n                }\n\n                case IUncertainRetryableResult<LiveChatMessagesAPIResponse> retryable:\n                {", "                        if (verbose)\n                        {\n                            Debug.Log(\n                                $\"[YouTubeLiveStreamingClient] Change API key and continue.\");\n                        }\n                            \n                        // Use another API key from next time\n                        return;\n                    }\n                    else\n                    {\n                        Debug.LogError(\n                            $\"[YouTubeLiveStreamingClient] Failed to change API key.\");\n                        return;\n                    }\n                }\n\n                case IUncertainRetryableResult<LiveChatMessagesAPIResponse> retryable:\n                {", "                    if (verbose)\n                    {\n                        Debug.Log(\n                            $\"[YouTubeLiveStreamingClient] Retryable failed to get live chat messages because -> {retryable.Message}.\");\n                    }\n\n                    return;\n                }\n\n                case IUncertainFailureResult<LiveChatMessagesAPIResponse> failure:\n                {\n                    Debug.LogError(\n                        $\"[YouTubeLiveStreamingClient] Failed to get live chat messages because -> {failure.Message}\");\n                    return;\n                }\n\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(result));\n            }\n\n            // NOTE: Publish event on the main thread.\n            await UniTask.SwitchToMainThread(cancellationToken);\n", "            foreach (var item in response.Items)\n            {\n                if (verbose)\n                {\n                    Debug.Log(\n                        $\"[YouTubeLiveStreamingClient] Collected live chat message: {item.Snippet.DisplayMessage} from {item.AuthorDetails.DisplayName} at {item.Snippet.PublishedAt}.\");\n                }\n\n                onMessageCollected.OnNext(item);\n            }\n\n            await UniTask.SwitchToThreadPool();\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/YouTubeVideoIDExtractor.cs", "chunked_list": ["#nullable enable\nusing System.Text.RegularExpressions;\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    /// <summary>\n    /// Provides a method to extract a video ID from a video URL.\n    /// </summary>\n    public static class YouTubeVideoIDExtractor\n    {\n        /// <summary>\n        /// Tries to extract a video ID from a raw video ID or a video URL.\n        /// </summary>\n        /// <param name=\"videoIDOrURL\"></param>\n        /// <param name=\"videoId\"></param>\n        /// <returns></returns>", "    public static class YouTubeVideoIDExtractor\n    {\n        /// <summary>\n        /// Tries to extract a video ID from a raw video ID or a video URL.\n        /// </summary>\n        /// <param name=\"videoIDOrURL\"></param>\n        /// <param name=\"videoId\"></param>\n        /// <returns></returns>\n        public static bool TryExtractVideoId(string videoIDOrURL, out string videoId)\n        {\n            var regexForRegularUrl = new Regex(@\"youtube\\.com.*(\\?v=|\\/v\\/)([^&]+)\");\n            var regexForShortUrl = new Regex(@\"youtu\\.be\\/([^?&]+)\");\n            var regexForVideoId = new Regex(@\"^[a-zA-Z0-9_-]{11}$\"); // Standard YouTube video ID format\n\n            var matchForRegularUrl = regexForRegularUrl.Match(videoIDOrURL);", "        public static bool TryExtractVideoId(string videoIDOrURL, out string videoId)\n        {\n            var regexForRegularUrl = new Regex(@\"youtube\\.com.*(\\?v=|\\/v\\/)([^&]+)\");\n            var regexForShortUrl = new Regex(@\"youtu\\.be\\/([^?&]+)\");\n            var regexForVideoId = new Regex(@\"^[a-zA-Z0-9_-]{11}$\"); // Standard YouTube video ID format\n\n            var matchForRegularUrl = regexForRegularUrl.Match(videoIDOrURL);\n            if (matchForRegularUrl.Success)\n            {\n                videoId = matchForRegularUrl.Groups[2].Value;\n                return true;\n            }\n\n            var matchForShortUrl = regexForShortUrl.Match(videoIDOrURL);", "            if (matchForShortUrl.Success)\n            {\n                videoId = matchForShortUrl.Groups[1].Value;\n                return true;\n            }\n\n            var matchForVideoId = regexForVideoId.Match(videoIDOrURL);\n            if (matchForVideoId.Success)\n            {\n                videoId = videoIDOrURL;\n                return true;\n            }\n            else\n            {\n                videoId = string.Empty;\n                return false;\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/IAPIKeyProvider.cs", "chunked_list": ["#nullable enable\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    public interface IAPIKeyProvider\n    {\n        string APIKey { get; }\n\n        bool TryChangeKey();\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/VideosAPI.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.Extensions.NewtonsoftJson;\nusing Mochineko.Relent.Result;\nusing Mochineko.Relent.UncertainResult;", "using Mochineko.Relent.Result;\nusing Mochineko.Relent.UncertainResult;\nusing Mochineko.YouTubeLiveStreamingClient.Responses;\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    /// <summary>\n    /// Videos API of YouTube Data API v3.\n    /// See also https://developers.google.com/youtube/v3/docs/videos\n    /// </summary>\n    public static class VideosAPI\n    {", "    /// See also https://developers.google.com/youtube/v3/docs/videos\n    /// </summary>\n    public static class VideosAPI\n    {\n        private const string EndPoint = \"/videos\";\n        \n        /// <summary>\n        /// Gets video information by video ID.\n        /// </summary>\n        /// <param name=\"httpClient\"></param>\n        /// <param name=\"apiKey\"></param>\n        /// <param name=\"videoID\"></param>\n        /// <param name=\"cancellationToken\"></param>\n        /// <returns></returns>\n        /// <exception cref=\"UncertainResultPatternMatchException\"></exception>\n        /// <exception cref=\"ResultPatternMatchException\"></exception>", "        public static async UniTask<IUncertainResult<VideosAPIResponse>>\n            GetVideoInformationAsync(\n                HttpClient httpClient,\n                string apiKey,\n                string videoID,\n                CancellationToken cancellationToken)\n        {\n            if (string.IsNullOrEmpty(apiKey))\n            {\n                return UncertainResults.FailWithTrace<VideosAPIResponse>(\n                    $\"Failed because {nameof(apiKey)} is null or empty.\");\n            }\n            ", "            if (string.IsNullOrEmpty(videoID))\n            {\n                return UncertainResults.FailWithTrace<VideosAPIResponse>(\n                    $\"Failed because {nameof(videoID)} is null or empty.\");\n            }\n\n            if (cancellationToken.IsCancellationRequested)\n            {\n                return UncertainResults.RetryWithTrace<VideosAPIResponse>(\n                    \"Retryable because cancellation has been already requested.\");\n            }\n\n            // Build query parameters\n            var parameters = new Dictionary<string, string>()\n            {\n                [\"part\"] = \"snippet,liveStreamingDetails\",\n                [\"id\"] = videoID,\n                [\"key\"] = apiKey,\n            };\n            var queryParameters = await new FormUrlEncodedContent(parameters)\n                .ReadAsStringAsync();\n\n            // Build request message\n            var requestMessage = new HttpRequestMessage(\n                HttpMethod.Get,\n                YouTubeAPIURL.BaseURL + EndPoint + \"?\" + queryParameters);\n\n            // Send request\n            HttpResponseMessage responseMessage;\n            var apiResult = await UncertainTryFactory\n                .TryAsync<HttpResponseMessage>(async innerCancellationToken\n                    => await httpClient.SendAsync(requestMessage, innerCancellationToken))\n                .CatchAsRetryable<HttpResponseMessage, HttpRequestException>(exception\n                    => $\"Retryable because -> {exception}.\")\n                .CatchAsRetryable<HttpResponseMessage, OperationCanceledException>(exception\n                    => $\"Retryable because -> {exception}.\")\n                .CatchAsFailure<HttpResponseMessage, Exception>(exception\n                    => $\"Failure because -> {exception}.\")\n                .ExecuteAsync(cancellationToken);\n            switch (apiResult)\n            {\n                case IUncertainSuccessResult<HttpResponseMessage> apiSuccess:\n                    responseMessage = apiSuccess.Result;\n                    break;\n\n                case IUncertainRetryableResult<HttpResponseMessage> apiRetryable:\n                    return UncertainResults.RetryWithTrace<VideosAPIResponse>(\n                        $\"Retryable because -> {apiRetryable.Message}.\");\n\n                case IUncertainFailureResult<HttpResponseMessage> apiFailure:\n                    return UncertainResults.FailWithTrace<VideosAPIResponse>(\n                        $\"Failed because -> {apiFailure.Message}.\");\n\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(apiResult));\n            }\n\n            // Succeeded", "            if (responseMessage.IsSuccessStatusCode)\n            {\n                var responseJson = await responseMessage.Content.ReadAsStringAsync();\n                if (string.IsNullOrEmpty(responseJson))\n                {\n                    return UncertainResults.FailWithTrace<VideosAPIResponse>(\n                        $\"Failed because response string was null or empty.\");\n                }\n                \n                var deserializeResult = RelentJsonSerializer\n                    .Deserialize<VideosAPIResponse>(responseJson);\n                switch (deserializeResult)\n                {\n                    case ISuccessResult<VideosAPIResponse> deserializeSuccess:\n                        return UncertainResults.Succeed(deserializeSuccess.Result);\n\n                    case IFailureResult<VideosAPIResponse> deserializeFailure:\n                        return UncertainResults.FailWithTrace<VideosAPIResponse>(\n                            $\"Failed to deserialize json to dictionary because -> {deserializeFailure.Message}, JSON:{responseJson}.\");\n\n                    default:\n                        throw new ResultPatternMatchException(nameof(deserializeResult));\n                }\n            }\n            // Quota limit exceeded error", "            else if (responseMessage.StatusCode is HttpStatusCode.TooManyRequests)\n            {\n                var errorResponse = await responseMessage.Content.ReadAsStringAsync();\n                return new LimitExceededResult<VideosAPIResponse>(\n                    $\"Failed because the API key has exceeded quota limit with status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, response:{errorResponse}.\");\n            }\n            // Retryable\n            else if ((int)responseMessage.StatusCode is >= 500 and <= 599)\n            {\n                var errorResponse = await responseMessage.Content.ReadAsStringAsync();\n                return UncertainResults.RetryWithTrace<VideosAPIResponse>(\n                    $\"Retryable because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, response:{errorResponse}.\");\n            }\n            // Response error\n            else\n            {\n                var errorResponse = await responseMessage.Content.ReadAsStringAsync();\n                return UncertainResults.FailWithTrace<VideosAPIResponse>(\n                    $\"Failed because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, response:{errorResponse}.\"\n                );\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/LiveChatMessagesAPI.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.Extensions.NewtonsoftJson;\nusing Mochineko.Relent.Result;\nusing Mochineko.Relent.UncertainResult;", "using Mochineko.Relent.Result;\nusing Mochineko.Relent.UncertainResult;\nusing Mochineko.YouTubeLiveStreamingClient.Responses;\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    /// <summary>\n    /// LiveChatMessages API of YouTube Data API v3.\n    /// See also https://developers.google.com/youtube/v3/live/docs/liveChatMessages\n    /// </summary>\n    public static class LiveChatMessagesAPI\n    {", "    /// See also https://developers.google.com/youtube/v3/live/docs/liveChatMessages\n    /// </summary>\n    public static class LiveChatMessagesAPI\n    {\n        private const string EndPoint = \"/liveChat/messages\";\n\n        /// <summary>\n        /// Gets live chat messages by live chat ID.\n        /// </summary>\n        /// <param name=\"httpClient\"></param>\n        /// <param name=\"apiKey\"></param>\n        /// <param name=\"liveChatID\"></param>\n        /// <param name=\"cancellationToken\"></param>\n        /// <param name=\"pageToken\"></param>\n        /// <param name=\"maxResults\">Default max results is 500</param>\n        /// <returns></returns>\n        /// <exception cref=\"UncertainResultPatternMatchException\"></exception>\n        /// <exception cref=\"ResultPatternMatchException\"></exception>", "        public static async UniTask<IUncertainResult<LiveChatMessagesAPIResponse>>\n            GetLiveChatMessagesAsync(\n                HttpClient httpClient,\n                string apiKey,\n                string liveChatID,\n                CancellationToken cancellationToken,\n                string? pageToken = null,\n                uint? maxResults = null)\n        {\n            if (string.IsNullOrEmpty(apiKey))\n            {\n                return UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                    $\"Failed because {nameof(apiKey)} is null or empty.\");\n            }\n", "            if (string.IsNullOrEmpty(apiKey))\n            {\n                return UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                    $\"Failed because {nameof(apiKey)} is null or empty.\");\n            }\n\n            if (string.IsNullOrEmpty(liveChatID))\n            {\n                return UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                    $\"Failed because {nameof(liveChatID)} is null or empty.\");\n            }\n", "            if (cancellationToken.IsCancellationRequested)\n            {\n                return UncertainResults.RetryWithTrace<LiveChatMessagesAPIResponse>(\n                    \"Retryable because cancellation has been already requested.\");\n            }\n\n            // Build query parameters\n            var parameters = new Dictionary<string, string>()\n            {\n                [\"part\"] = \"id,snippet,authorDetails\",\n                [\"liveChatId\"] = liveChatID,\n                [\"key\"] = apiKey,\n            };\n", "            if (!string.IsNullOrEmpty(pageToken))\n            {\n                parameters.Add(\"pageToken\", pageToken);\n            }\n\n            if (maxResults != null)\n            {\n                parameters.Add(\"maxResults\", maxResults.ToString());\n            }\n\n            var queryParameters = await new FormUrlEncodedContent(parameters)\n                .ReadAsStringAsync();\n\n            // Build request message\n            var requestMessage = new HttpRequestMessage(\n                HttpMethod.Get,\n                YouTubeAPIURL.BaseURL + EndPoint + \"?\" + queryParameters);\n\n            // Send request\n            HttpResponseMessage responseMessage;\n            var apiResult = await UncertainTryFactory\n                .TryAsync<HttpResponseMessage>(async innerCancellationToken\n                    => await httpClient.SendAsync(requestMessage, innerCancellationToken))\n                .CatchAsRetryable<HttpResponseMessage, HttpRequestException>(exception\n                    => $\"Retryable because -> {exception}.\")\n                .CatchAsRetryable<HttpResponseMessage, OperationCanceledException>(exception\n                    => $\"Retryable because -> {exception}.\")\n                .CatchAsFailure<HttpResponseMessage, Exception>(exception\n                    => $\"Failure because -> {exception}.\")\n                .ExecuteAsync(cancellationToken);\n            switch (apiResult)\n            {\n                case IUncertainSuccessResult<HttpResponseMessage> apiSuccess:\n                    responseMessage = apiSuccess.Result;\n                    break;\n\n                case IUncertainRetryableResult<HttpResponseMessage> apiRetryable:\n                    return UncertainResults.RetryWithTrace<LiveChatMessagesAPIResponse>(\n                        $\"Retryable because -> {apiRetryable.Message}.\");\n\n                case IUncertainFailureResult<HttpResponseMessage> apiFailure:\n                    return UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                        $\"Failed because -> {apiFailure.Message}.\");\n\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(apiResult));\n            }\n\n            // Succeeded", "            if (responseMessage.IsSuccessStatusCode)\n            {\n                var responseJson = await responseMessage.Content.ReadAsStringAsync();\n                if (string.IsNullOrEmpty(responseJson))\n                {\n                    return UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                        $\"Failed because response string was null or empty.\");\n                }\n                \n                var deserializeResult = RelentJsonSerializer\n                    .Deserialize<LiveChatMessagesAPIResponse>(responseJson);\n                return deserializeResult switch\n                {\n                    ISuccessResult<LiveChatMessagesAPIResponse> deserializeSuccess\n                        => UncertainResults.Succeed(deserializeSuccess.Result),\n\n                    IFailureResult<LiveChatMessagesAPIResponse> deserializeFailure\n                        => UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                            $\"Failed to deserialize json to dictionary because -> {deserializeFailure.Message}, JSON:{responseJson}.\"),\n\n                    _ => throw new ResultPatternMatchException(nameof(deserializeResult))\n                };\n            }\n            // Quota limit exceeded error", "            else if (responseMessage.StatusCode is HttpStatusCode.TooManyRequests)\n            {\n                var errorResponse = await responseMessage.Content.ReadAsStringAsync();\n                return new LimitExceededResult<LiveChatMessagesAPIResponse>(\n                    $\"Failed because the API key has exceeded quota limit with status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, response:{errorResponse}.\");\n            }\n            // Retryable\n            else if ((int)responseMessage.StatusCode is >= 500 and <= 599)\n            {\n                return UncertainResults.RetryWithTrace<LiveChatMessagesAPIResponse>(\n                    $\"Retryable because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}.\");\n            }\n            // Response error\n            else\n            {\n                var errorResponse = await responseMessage.Content.ReadAsStringAsync();\n                return UncertainResults.FailWithTrace<LiveChatMessagesAPIResponse>(\n                    $\"Failed because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, response:{errorResponse}.\"\n                );\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/LimitExceededResult.cs", "chunked_list": ["#nullable enable\nusing Mochineko.Relent.UncertainResult;\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    public sealed class LimitExceededResult<T>\n        : IUncertainFailureResult<T>\n    {\n        public bool Success => false;\n        public bool Retryable => false;\n        public bool Failure => true;", "        public bool Success => false;\n        public bool Retryable => false;\n        public bool Failure => true;\n        public string Message { get; }\n        \n        public LimitExceededResult(string message)\n        {\n            Message = message;\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/YouTubeAPIURL.cs", "chunked_list": ["#nullable enable\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    // ReSharper disable once InconsistentNaming\n    internal static class YouTubeAPIURL\n    {\n        internal const string BaseURL = \"https://www.googleapis.com/youtube/v3\";\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/MultiAPIKeyProvider.cs", "chunked_list": ["#nullable enable\nusing System;\n\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    public sealed class MultiAPIKeyProvider\n        : IAPIKeyProvider\n    {\n        public string APIKey => apiKeys[index];\n\n        private readonly string[] apiKeys;", "        public string APIKey => apiKeys[index];\n\n        private readonly string[] apiKeys;\n        private int index = 0;\n\n        public MultiAPIKeyProvider(string[] apiKeys)\n        {\n            if (apiKeys.Length == 0)\n            {\n                throw new ArgumentException($\"{nameof(apiKeys)} must not be empty.\");\n            }\n\n            this.apiKeys = apiKeys;\n        }\n", "        public bool TryChangeKey()\n        {\n            index++;\n\n            return index < apiKeys.Length;\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/SingleAPIKeyProvider.cs", "chunked_list": ["#nullable enable\nnamespace Mochineko.YouTubeLiveStreamingClient\n{\n    public sealed class SingleAPIKeyProvider\n        : IAPIKeyProvider\n    {\n        public string APIKey { get; }\n\n        public SingleAPIKeyProvider(string apiKey)\n        {\n            APIKey = apiKey;\n        }\n", "        public bool TryChangeKey()\n            => false;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/UserBannedDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class UserBannedDetails\n    {\n        [JsonProperty(\"bannedUserDetails\"), JsonRequired]\n        public BannedUserDetails BannedUserDetails { get; private set; } = new();\n        \n        [JsonProperty(\"banType\"), JsonRequired]", "        public BannedUserDetails BannedUserDetails { get; private set; } = new();\n        \n        [JsonProperty(\"banType\"), JsonRequired]\n        public string BanType { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"banDurationSeconds\"), JsonRequired]\n        public ulong BanDurationSeconds { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/LiveChatMessageType.cs", "chunked_list": ["#nullable enable\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    // ReSharper disable InconsistentNaming\n    public enum LiveChatMessageType\n    {\n        chatEndedEvent,\n        messageDeletedEvent,\n        sponsorOnlyModeEndedEvent,\n        sponsorOnlyModeStartedEvent,\n        newSponsorEvent,\n        memberMilestoneChatEvent,\n        superChatEvent,\n        superStickerEvent,\n        textMessageEvent,\n        tombstone,\n        userBannedEvent,\n        membershipGiftingEvent,\n        giftMembershipReceivedEvent,\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/Localized.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class Localized\n    {\n        [JsonProperty(\"title\"), JsonRequired]\n        public string Title { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"description\"), JsonRequired]", "        public string Title { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"description\"), JsonRequired]\n        public string Description { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/AuthorDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class AuthorDetails\n    {\n        [JsonProperty(\"channelId\"), JsonRequired]\n        public string ChannelId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"channelUrl\"), JsonRequired]", "        public string ChannelId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"channelUrl\"), JsonRequired]\n        public string ChannelUrl { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"displayName\"), JsonRequired]\n        public string DisplayName { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"profileImageUrl\"), JsonRequired]\n        public string ProfileImageUrl { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"isVerified\"), JsonRequired]", "        public string ProfileImageUrl { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"isVerified\"), JsonRequired]\n        public bool IsVerified { get; private set; }\n        \n        [JsonProperty(\"isChatOwner\"), JsonRequired]\n        public bool IsChatOwner { get; private set; }\n        \n        [JsonProperty(\"isChatSponsor\"), JsonRequired]\n        public bool IsChatSponsor { get; private set; }\n        \n        [JsonProperty(\"isChatModerator\"), JsonRequired]", "        public bool IsChatSponsor { get; private set; }\n        \n        [JsonProperty(\"isChatModerator\"), JsonRequired]\n        public bool IsChatModerator { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/LiveChatMessagesAPIResponse.cs", "chunked_list": ["#nullable enable\nusing System.Collections.Generic;\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class LiveChatMessagesAPIResponse\n    {\n        [JsonProperty(\"kind\"), JsonRequired]\n        public string Kind { get; private set; } = string.Empty;\n\n        [JsonProperty(\"etag\"), JsonRequired]", "        public string Kind { get; private set; } = string.Empty;\n\n        [JsonProperty(\"etag\"), JsonRequired]\n        public string Etag { get; private set; } = string.Empty;\n\n        [JsonProperty(\"nextPageToken\"), JsonRequired]\n        public string NextPageToken { get; private set; } = string.Empty;\n\n        [JsonProperty(\"pollingIntervalMillis\"), JsonRequired]\n        public uint PollingIntervalMillis { get; private set; }\n\n        [JsonProperty(\"pageInfo\"), JsonRequired]", "        public uint PollingIntervalMillis { get; private set; }\n\n        [JsonProperty(\"pageInfo\"), JsonRequired]\n        public PageInfo PageInfo { get; private set; } = new();\n\n        [JsonProperty(\"items\"), JsonRequired]\n        public List<LiveChatMessageItem> Items { get; private set; } = new();\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/NewSponsorDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class NewSponsorDetails\n    {\n        [JsonProperty(\"memberLevelName\"), JsonRequired]\n        public string MemberLevelName { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"isUpgrade\")]", "        public string MemberLevelName { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"isUpgrade\")]\n        public bool IsUpgrade { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/MemberMilestoneChatDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class MemberMilestoneChatDetails\n    {\n        [JsonProperty(\"userComment\"), JsonRequired]\n        public string UserComment { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"memberMonth\"), JsonRequired]", "        public string UserComment { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"memberMonth\"), JsonRequired]\n        public uint MemberMonth { get; private set; }\n\n        [JsonProperty(\"memberLevelName\"), JsonRequired]\n        public string MemberLevelName { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/LiveChatMessageItem.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class LiveChatMessageItem\n    {\n        [JsonProperty(\"kind\"), JsonRequired]\n        public string Kind { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"etag\"), JsonRequired]", "        public string Kind { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"etag\"), JsonRequired]\n        public string Etag { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"id\"), JsonRequired]\n        public string Id { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"snippet\"), JsonRequired]\n        public LiveChatMessageSnippet Snippet { get; private set; } = new();\n        \n        [JsonProperty(\"authorDetails\"), JsonRequired]", "        public LiveChatMessageSnippet Snippet { get; private set; } = new();\n        \n        [JsonProperty(\"authorDetails\"), JsonRequired]\n        public AuthorDetails AuthorDetails { get; private set; } = new();\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/SuperChatDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class SuperChatDetails\n    {\n        [JsonProperty(\"amountMicros\"), JsonRequired]\n        public string AmountMicros { get; private set; } = string.Empty;\n\n        [JsonProperty(\"currency\"), JsonRequired]", "        public string AmountMicros { get; private set; } = string.Empty;\n\n        [JsonProperty(\"currency\"), JsonRequired]\n        public string Currency { get; private set; } = string.Empty;\n\n        [JsonProperty(\"amountDisplayString\"), JsonRequired]\n        public string AmountDisplayString { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"userComment\")]\n        public string? UserComment { get; private set; }\n\n        [JsonProperty(\"tier\"), JsonRequired]", "        public uint Tier { get; private set; }\n\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/VideoItem.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class VideoItem\n    {\n        [JsonProperty(\"kind\"), JsonRequired]\n        public string Kind { get; private set; } = string.Empty;\n\n        [JsonProperty(\"etag\"), JsonRequired]", "        public string Kind { get; private set; } = string.Empty;\n\n        [JsonProperty(\"etag\"), JsonRequired]\n        public string Etag { get; private set; } = string.Empty;\n\n        [JsonProperty(\"id\"), JsonRequired]\n        public string Id { get; private set; } = string.Empty;\n\n        [JsonProperty(\"snippet\"), JsonRequired]\n        public VideoSnippet Snippet { get; private set; } = new();\n\n        [JsonProperty(\"liveStreamingDetails\"), JsonRequired]", "        public VideoSnippet Snippet { get; private set; } = new();\n\n        [JsonProperty(\"liveStreamingDetails\"), JsonRequired]\n        public LiveStreamingDetails LiveStreamingDetails { get; private set; } = new();\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/GiftMembershipReceivedDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class GiftMembershipReceivedDetails\n    {\n        [JsonProperty(\"memberLevelName\"), JsonRequired]\n        public string MemberLevelName { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"gifterChannelId\"), JsonRequired]", "        public string MemberLevelName { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"gifterChannelId\"), JsonRequired]\n        public string GifterChannelId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"associatedMembershipGiftingMessageId\"), JsonRequired]\n        public string AssociatedMembershipGiftingMessageId { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/VideosAPIResponse.cs", "chunked_list": ["#nullable enable\nusing System.Collections.Generic;\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class VideosAPIResponse\n    {\n        [JsonProperty(\"kind\"), JsonRequired]\n        public string Kind { get; private set; } = string.Empty;\n\n        [JsonProperty(\"etag\"), JsonRequired]", "        public string Kind { get; private set; } = string.Empty;\n\n        [JsonProperty(\"etag\"), JsonRequired]\n        public string Etag { get; private set; } = string.Empty;\n\n        [JsonProperty(\"items\"), JsonRequired]\n        public List<VideoItem> Items { get; private set; } = new();\n\n        [JsonProperty(\"pageInfo\"), JsonRequired]\n        public PageInfo PageInfo { get; private set; } = new();\n    }\n}", "        public PageInfo PageInfo { get; private set; } = new();\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/MessageDeletedDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class MessageDeletedDetails \n    {\n        [JsonProperty(\"deletedMessageId\"), JsonRequired]\n        public string DeletedMessageId { get; private set; } = string.Empty;\n    }\n}", "        public string DeletedMessageId { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/LiveStreamingDetails.cs", "chunked_list": ["#nullable enable\nusing System;\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class LiveStreamingDetails\n    {\n        [JsonProperty(\"actualStartTime\")]\n        public DateTime? ActualStartTime { get; private set; }\n\n        [JsonProperty(\"scheduledStartTime\")]\n        public DateTime? ScheduledStartTime { get; private set; }\n\n        [JsonProperty(\"concurrentViewers\")]\n        public uint? ConcurrentViewers { get; private set; }\n\n        [JsonProperty(\"activeLiveChatId\"), JsonRequired]", "        public string ActiveLiveChatId { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/VideoSnippet.cs", "chunked_list": ["#nullable enable\nusing System;\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class VideoSnippet\n    {\n        [JsonProperty(\"publishedAt\"), JsonRequired]\n        public DateTime PublishedAt { get; private set; }\n\n        [JsonProperty(\"channelId\"), JsonRequired]", "        public DateTime PublishedAt { get; private set; }\n\n        [JsonProperty(\"channelId\"), JsonRequired]\n        public string ChannelId { get; private set; } = string.Empty;\n\n        [JsonProperty(\"title\"), JsonRequired]\n        public string Title { get; private set; } = string.Empty;\n\n        [JsonProperty(\"description\"), JsonRequired]\n        public string Description { get; private set; } = string.Empty;\n\n        [JsonProperty(\"thumbnails\"), JsonRequired]", "        public string Description { get; private set; } = string.Empty;\n\n        [JsonProperty(\"thumbnails\"), JsonRequired]\n        public VideoThumbnails Thumbnails { get; private set; } = new();\n\n        [JsonProperty(\"channelTitle\"), JsonRequired]\n        public string ChannelTitle { get; private set; } = string.Empty;\n\n        [JsonProperty(\"tags\")]\n        public string[]? Tags { get; private set; }\n\n        [JsonProperty(\"categoryId\"), JsonRequired]", "        public string CategoryId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"liveBroadcastContent\"), JsonRequired]\n        public string LiveBroadcastContent { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"defaultLanguage\")]\n        public string? DefaultLanguage { get; private set; }\n        \n        [JsonProperty(\"localized\"), JsonRequired]\n        public Localized Localized { get; private set; } = new();\n        \n        [JsonProperty(\"defaultAudioLanguage\")]\n        public string? DefaultAudioLanguage { get; private set; }\n    }\n}", "        public Localized Localized { get; private set; } = new();\n        \n        [JsonProperty(\"defaultAudioLanguage\")]\n        public string? DefaultAudioLanguage { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/PageInfo.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class PageInfo\n    {\n        [JsonProperty(\"totalResults\"), JsonRequired]\n        public uint TotalResults { get; private set; }\n\n        [JsonProperty(\"resultsPerPage\"), JsonRequired]", "        public uint TotalResults { get; private set; }\n\n        [JsonProperty(\"resultsPerPage\"), JsonRequired]\n        public uint ResultsPerPage { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/SuperStickerMetadata.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class SuperStickerMetadata\n    {\n        [JsonProperty(\"stickerId\"), JsonRequired]\n        public string StickerId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"altText\"), JsonRequired]", "        public string StickerId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"altText\"), JsonRequired]\n        public string AltText { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"altTextLanguage\"), JsonRequired]\n        public string AltTextLanguage { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/SuperStickerDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class SuperStickerDetails\n    {\n        [JsonProperty(\"superStickerMetadata\"), JsonRequired]\n        public SuperStickerMetadata SuperStickerMetadata { get; private set; } = new();\n        \n        [JsonProperty(\"amountMicros\"), JsonRequired]", "        public SuperStickerMetadata SuperStickerMetadata { get; private set; } = new();\n        \n        [JsonProperty(\"amountMicros\"), JsonRequired]\n        public string AmountMicros { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"currency\"), JsonRequired]\n        public string Currency { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"amountDisplayString\"), JsonRequired]\n        public string AmountDisplayString { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"tier\"), JsonRequired]", "        public string AmountDisplayString { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"tier\"), JsonRequired]\n        public uint Tier { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/LiveChatMessageSnippet.cs", "chunked_list": ["#nullable enable\nusing System;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class LiveChatMessageSnippet\n    {\n        [JsonProperty(\"type\"), JsonRequired, JsonConverter(typeof(StringEnumConverter))]", "    public sealed class LiveChatMessageSnippet\n    {\n        [JsonProperty(\"type\"), JsonRequired, JsonConverter(typeof(StringEnumConverter))]\n        public LiveChatMessageType Type { get; private set; }\n\n        [JsonProperty(\"liveChatId\"), JsonRequired]\n        public string LiveChatId { get; private set; } = string.Empty;\n\n        [JsonProperty(\"authorChannelId\"), JsonRequired]\n        public string AuthorChannelId { get; private set; } = string.Empty;\n\n        [JsonProperty(\"publishedAt\"), JsonRequired]", "        public string AuthorChannelId { get; private set; } = string.Empty;\n\n        [JsonProperty(\"publishedAt\"), JsonRequired]\n        public DateTime PublishedAt { get; private set; }\n\n        [JsonProperty(\"hasDisplayContent\"), JsonRequired]\n        public bool HasDisplayContent { get; private set; }\n\n        [JsonProperty(\"displayMessage\"), JsonRequired]\n        public string DisplayMessage { get; private set; } = string.Empty;\n\n        [JsonProperty(\"textMessageDetails\")]\n        public TextMessageDetails? TextMessageDetails { get; private set; }\n\n        [JsonProperty(\"messageDeletedDetails\")]\n        public MessageDeletedDetails? MessageDeletedDetails { get; private set; }\n        \n        [JsonProperty(\"userBannedDetails\")]\n        public UserBannedDetails? UserBannedDetails { get; private set; }\n        \n        [JsonProperty(\"memberMilestoneChatDetails\")]\n        public MemberMilestoneChatDetails? MemberMilestoneChatDetails { get; private set; }\n        \n        [JsonProperty(\"newSponsorDetails\")]\n        public NewSponsorDetails? NewSponsorDetails { get; private set; }\n        \n        [JsonProperty(\"superChatDetails\")]\n        public SuperChatDetails? SuperChatDetails { get; private set; }\n\n        [JsonProperty(\"superStickerDetails\")]\n        public SuperStickerDetails? SuperStickerDetails { get; private set; }\n        \n        [JsonProperty(\"membershipGiftingDetails\")]\n        public MembershipGiftingDetails? MembershipGiftingDetails { get; private set; }\n        \n        [JsonProperty(\"giftMembershipReceivedDetails\")]\n        public GiftMembershipReceivedDetails? GiftMembershipReceivedDetails { get; private set; }\n    }\n}", "        public string DisplayMessage { get; private set; } = string.Empty;\n\n        [JsonProperty(\"textMessageDetails\")]\n        public TextMessageDetails? TextMessageDetails { get; private set; }\n\n        [JsonProperty(\"messageDeletedDetails\")]\n        public MessageDeletedDetails? MessageDeletedDetails { get; private set; }\n        \n        [JsonProperty(\"userBannedDetails\")]\n        public UserBannedDetails? UserBannedDetails { get; private set; }\n        \n        [JsonProperty(\"memberMilestoneChatDetails\")]\n        public MemberMilestoneChatDetails? MemberMilestoneChatDetails { get; private set; }\n        \n        [JsonProperty(\"newSponsorDetails\")]\n        public NewSponsorDetails? NewSponsorDetails { get; private set; }\n        \n        [JsonProperty(\"superChatDetails\")]\n        public SuperChatDetails? SuperChatDetails { get; private set; }\n\n        [JsonProperty(\"superStickerDetails\")]\n        public SuperStickerDetails? SuperStickerDetails { get; private set; }\n        \n        [JsonProperty(\"membershipGiftingDetails\")]\n        public MembershipGiftingDetails? MembershipGiftingDetails { get; private set; }\n        \n        [JsonProperty(\"giftMembershipReceivedDetails\")]\n        public GiftMembershipReceivedDetails? GiftMembershipReceivedDetails { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/VideoThumbnail.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class VideoThumbnail\n    {\n        [JsonProperty(\"url\"), JsonRequired]\n        public string Url { get; private set; } = string.Empty;\n\n        [JsonProperty(\"width\"), JsonRequired]", "        public string Url { get; private set; } = string.Empty;\n\n        [JsonProperty(\"width\"), JsonRequired]\n        public uint Width { get; private set; }\n\n        [JsonProperty(\"height\"), JsonRequired]\n        public uint Height { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/MembershipGiftingDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class MembershipGiftingDetails\n    {\n        [JsonProperty(\"giftMembershipsCount\"), JsonRequired]\n        public int GiftMembershipsCount { get; private set; }\n\n        [JsonProperty(\"giftMembershipsLevelName\"), JsonRequired]", "        public int GiftMembershipsCount { get; private set; }\n\n        [JsonProperty(\"giftMembershipsLevelName\"), JsonRequired]\n        public string GiftMembershipsLevelName { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/TextMessageDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class TextMessageDetails\n    {\n        [JsonProperty(\"messageText\"), JsonRequired]\n        public string MessageText { get; private set; } = string.Empty;\n    }\n}", "        public string MessageText { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/VideoThumbnails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class VideoThumbnails\n    {\n        [JsonProperty(\"default\"), JsonRequired]\n        public VideoThumbnail Default { get; private set; } = new();\n\n        [JsonProperty(\"medium\"), JsonRequired]", "        public VideoThumbnail Default { get; private set; } = new();\n\n        [JsonProperty(\"medium\"), JsonRequired]\n        public VideoThumbnail Medium { get; private set; } = new();\n\n        [JsonProperty(\"high\"), JsonRequired]\n        public VideoThumbnail High { get; private set; } = new();\n        \n        [JsonProperty(\"standard\"), JsonRequired]\n        public VideoThumbnail Standard { get; private set; } = new();\n        \n        [JsonProperty(\"maxres\")]\n        public VideoThumbnail? Maxres { get; private set; }\n    }\n}", "        public VideoThumbnail Standard { get; private set; } = new();\n        \n        [JsonProperty(\"maxres\")]\n        public VideoThumbnail? Maxres { get; private set; }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient/Responses/BannedUserDetails.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Responses\n{\n    [JsonObject]\n    public sealed class BannedUserDetails\n    {\n        [JsonProperty(\"channelId\"), JsonRequired]\n        public string ChannelId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"channelUrl\"), JsonRequired]", "        public string ChannelId { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"channelUrl\"), JsonRequired]\n        public string ChannelUrl { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"displayName\"), JsonRequired]\n        public string DisplayName { get; private set; } = string.Empty;\n        \n        [JsonProperty(\"profileImageUrl\"), JsonRequired]\n        public string ProfileImageUrl { get; private set; } = string.Empty;\n    }\n}", "        public string ProfileImageUrl { get; private set; } = string.Empty;\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient.Samples/LiveChatMessagesCollectionDemo.cs", "chunked_list": ["#nullable enable\nusing System.IO;\nusing System.Net.Http;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.YouTubeLiveStreamingClient.Responses;\nusing UniRx;\nusing UnityEngine;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Samples\n{\n    internal sealed class LiveChatMessagesCollectionDemo : MonoBehaviour\n    {\n        [SerializeField]", "namespace Mochineko.YouTubeLiveStreamingClient.Samples\n{\n    internal sealed class LiveChatMessagesCollectionDemo : MonoBehaviour\n    {\n        [SerializeField]\n        private string apiKeyPath = string.Empty;\n\n        [SerializeField]\n        private string videoIDOrURL = string.Empty;\n\n        [SerializeField, Range(200, 2000)]", "        private string videoIDOrURL = string.Empty;\n\n        [SerializeField, Range(200, 2000)]\n        private uint maxResultsOfMessages = 500;\n\n        [SerializeField]\n        private float intervalSeconds = 5f;\n\n        private static readonly HttpClient HttpClient = new();\n\n        private LiveChatMessagesCollector? collector;\n", "        private static readonly HttpClient HttpClient = new();\n\n        private LiveChatMessagesCollector? collector;\n\n        private async void Start()\n        {\n            // Get YouTube API key from file.\n            var apiKey = await File.ReadAllTextAsync(\n                apiKeyPath,\n                this.GetCancellationTokenOnDestroy());\n", "            if (string.IsNullOrEmpty(apiKey))\n            {\n                Debug.LogError(\"[YouTubeLiveStreamingClient.Samples] API Key is null or empty.\");\n                return;\n            }\n\n            // Extract video ID if URL.\n            var result = YouTubeVideoIDExtractor.TryExtractVideoId(videoIDOrURL, out var videoID);\n            if (result is false || string.IsNullOrEmpty(videoID))\n            {\n                Debug.LogError($\"[YouTubeLiveStreamingClient.Samples] Failed to extract video ID from:{videoIDOrURL}.\");\n                return;\n            }\n\n            // Initialize collector\n            collector = new LiveChatMessagesCollector(\n                HttpClient,\n                apiKey,\n                videoID,\n                maxResultsOfMessages: maxResultsOfMessages,\n                dynamicInterval: false,\n                intervalSeconds: intervalSeconds,\n                verbose: true);\n\n            // Register events\n            collector\n                .OnVideoInformationUpdated\n                .SubscribeOnMainThread()\n                .Subscribe(OnVideoInformationUpdated)\n                .AddTo(this);\n\n            collector\n                .OnMessageCollected\n                .SubscribeOnMainThread()\n                .Subscribe(OnMessageCollected)\n                .AddTo(this);\n\n            // Filter samples to super chats and super stickers\n            collector\n                .OnMessageCollected\n                .Where(message => message.Snippet.Type is LiveChatMessageType.superChatEvent)\n                .SubscribeOnMainThread()\n                .Subscribe(OnSuperChatMessageCollected)\n                .AddTo(this);\n\n            collector\n                .OnMessageCollected\n                .Where(message => message.Snippet.Type is LiveChatMessageType.superStickerEvent)\n                .SubscribeOnMainThread()\n                .Subscribe(OnSuperStickerMessageCollected)\n                .AddTo(this);\n\n            // Begin collection\n            collector.BeginCollection();\n        }\n", "            if (result is false || string.IsNullOrEmpty(videoID))\n            {\n                Debug.LogError($\"[YouTubeLiveStreamingClient.Samples] Failed to extract video ID from:{videoIDOrURL}.\");\n                return;\n            }\n\n            // Initialize collector\n            collector = new LiveChatMessagesCollector(\n                HttpClient,\n                apiKey,\n                videoID,\n                maxResultsOfMessages: maxResultsOfMessages,\n                dynamicInterval: false,\n                intervalSeconds: intervalSeconds,\n                verbose: true);\n\n            // Register events\n            collector\n                .OnVideoInformationUpdated\n                .SubscribeOnMainThread()\n                .Subscribe(OnVideoInformationUpdated)\n                .AddTo(this);\n\n            collector\n                .OnMessageCollected\n                .SubscribeOnMainThread()\n                .Subscribe(OnMessageCollected)\n                .AddTo(this);\n\n            // Filter samples to super chats and super stickers\n            collector\n                .OnMessageCollected\n                .Where(message => message.Snippet.Type is LiveChatMessageType.superChatEvent)\n                .SubscribeOnMainThread()\n                .Subscribe(OnSuperChatMessageCollected)\n                .AddTo(this);\n\n            collector\n                .OnMessageCollected\n                .Where(message => message.Snippet.Type is LiveChatMessageType.superStickerEvent)\n                .SubscribeOnMainThread()\n                .Subscribe(OnSuperStickerMessageCollected)\n                .AddTo(this);\n\n            // Begin collection\n            collector.BeginCollection();\n        }\n", "        private void OnDestroy()\n        {\n            collector?.Dispose();\n        }\n\n        private void OnVideoInformationUpdated(VideosAPIResponse response)\n        {\n            Debug.Log(\n                $\"[YouTubeLiveStreamingClient.Samples] Update video information, title:{response.Items[0].Snippet.Title}, live chat ID:{response.Items[0].LiveStreamingDetails.ActiveLiveChatId}.\");\n        }\n", "        private void OnMessageCollected(LiveChatMessageItem message)\n        {\n            Debug.Log(\n                $\"[YouTubeLiveStreamingClient.Samples] Collect message: [{message.Snippet.Type}] {message.Snippet.DisplayMessage} from {message.AuthorDetails.DisplayName} at {message.Snippet.PublishedAt}.\");\n        }\n\n        private void OnSuperChatMessageCollected(LiveChatMessageItem message)\n        {\n            Debug.Log(\n                $\"<color=orange>[YouTubeLiveStreamingClient.Samples] Collect super chat message: {message.Snippet.DisplayMessage}, {message.Snippet.SuperChatDetails?.AmountDisplayString} from {message.AuthorDetails.DisplayName} at {message.Snippet.PublishedAt}.</color>\");\n        }\n", "        private void OnSuperStickerMessageCollected(LiveChatMessageItem message)\n        {\n            Debug.Log(\n                $\"<color=orange>[YouTubeLiveStreamingClient.Samples] Collect super chat message: {message.Snippet.DisplayMessage}, {message.Snippet.SuperStickerDetails?.AmountDisplayString} from {message.AuthorDetails.DisplayName} at {message.Snippet.PublishedAt}.</color>\");\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient.Tests/VideosAPITest.cs", "chunked_list": ["using System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Mochineko.Relent.UncertainResult;\nusing Newtonsoft.Json;\nusing NUnit.Framework;\nusing UnityEngine;\nusing UnityEngine.TestTools;\n", "using UnityEngine.TestTools;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Tests\n{\n    [TestFixture]\n    internal sealed class VideosAPITest\n    {\n        [TestCase(\"xCyeWN6pSNc\")]\n        [RequiresPlayMode(false)]\n        public async Task GetLiveStreamingDetailsAsyncTest(string videoID)\n        {\n            var apiKeyPath = Path.Combine(\n                Application.dataPath,\n                \"Mochineko/YouTubeLiveStreamingClient.Tests/YouTubeAPIKey.txt\");\n\n            var httpClient = new HttpClient();\n            var apiKey = await File.ReadAllTextAsync(apiKeyPath, CancellationToken.None);\n\n            var result = await VideosAPI.GetVideoInformationAsync(\n                httpClient,\n                apiKey,\n                videoID,\n                CancellationToken.None);\n", "        public async Task GetLiveStreamingDetailsAsyncTest(string videoID)\n        {\n            var apiKeyPath = Path.Combine(\n                Application.dataPath,\n                \"Mochineko/YouTubeLiveStreamingClient.Tests/YouTubeAPIKey.txt\");\n\n            var httpClient = new HttpClient();\n            var apiKey = await File.ReadAllTextAsync(apiKeyPath, CancellationToken.None);\n\n            var result = await VideosAPI.GetVideoInformationAsync(\n                httpClient,\n                apiKey,\n                videoID,\n                CancellationToken.None);\n", "            if (result.Failure)\n            {\n                Debug.LogError(result.ExtractMessage());\n                Assert.Fail();\n                return;\n            }\n\n            Debug.Log($\"Success get live streaming details from video ID:{videoID} to result:{JsonConvert.SerializeObject(result.Unwrap())}.\");\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/YouTubeLiveStreamingClient.Tests/LiveChatMessagesAPITest.cs", "chunked_list": ["using System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Mochineko.Relent.UncertainResult;\nusing Newtonsoft.Json;\nusing NUnit.Framework;\nusing UnityEngine;\nusing UnityEngine.TestTools;\n", "using UnityEngine.TestTools;\n\nnamespace Mochineko.YouTubeLiveStreamingClient.Tests\n{\n    [TestFixture]\n    internal sealed class LiveChatMessagesAPITest\n    {\n        [TestCase(\"tcRvI1rSokk\")]\n        [RequiresPlayMode(false)]\n        public async Task GetLiveStreamingDetailsAsyncTest(string videoID)\n        {\n            var apiKeyPath = Path.Combine(\n                Application.dataPath,\n                \"Mochineko/YouTubeLiveStreamingClient.Tests/YouTubeAPIKey.txt\");\n\n            var httpClient = new HttpClient();\n            var apiKey = await File.ReadAllTextAsync(apiKeyPath, CancellationToken.None);\n\n            var result = await VideosAPI.GetVideoInformationAsync(\n                httpClient,\n                apiKey,\n                videoID,\n                CancellationToken.None);\n            \n            var liveChatID = result.Unwrap().Items[0].LiveStreamingDetails.ActiveLiveChatId;\n            \n            var liveChatMessagesResult = await LiveChatMessagesAPI.GetLiveChatMessagesAsync(\n                httpClient,\n                apiKey,\n                liveChatID,\n                CancellationToken.None);\n", "        public async Task GetLiveStreamingDetailsAsyncTest(string videoID)\n        {\n            var apiKeyPath = Path.Combine(\n                Application.dataPath,\n                \"Mochineko/YouTubeLiveStreamingClient.Tests/YouTubeAPIKey.txt\");\n\n            var httpClient = new HttpClient();\n            var apiKey = await File.ReadAllTextAsync(apiKeyPath, CancellationToken.None);\n\n            var result = await VideosAPI.GetVideoInformationAsync(\n                httpClient,\n                apiKey,\n                videoID,\n                CancellationToken.None);\n            \n            var liveChatID = result.Unwrap().Items[0].LiveStreamingDetails.ActiveLiveChatId;\n            \n            var liveChatMessagesResult = await LiveChatMessagesAPI.GetLiveChatMessagesAsync(\n                httpClient,\n                apiKey,\n                liveChatID,\n                CancellationToken.None);\n", "            if (liveChatMessagesResult.Failure)\n            {\n                Debug.LogError(\n                    $\"Failed get live chat messages from live chat ID:{liveChatID} because -> {liveChatMessagesResult.ExtractMessage()}.\");\n                Assert.Fail();\n            }\n            \n            var liveChatMessages = liveChatMessagesResult.Unwrap().Items;\n            foreach (var message in liveChatMessages)\n            {\n                Debug.Log($\"{message.Snippet.Type}:{message.AuthorDetails.DisplayName} -> {message.Snippet.DisplayMessage} at {message.Snippet.PublishedAt}.\");\n            }\n        }\n    }\n}", "            foreach (var message in liveChatMessages)\n            {\n                Debug.Log($\"{message.Snippet.Type}:{message.AuthorDetails.DisplayName} -> {message.Snippet.DisplayMessage} at {message.Snippet.PublishedAt}.\");\n            }\n        }\n    }\n}"]}
