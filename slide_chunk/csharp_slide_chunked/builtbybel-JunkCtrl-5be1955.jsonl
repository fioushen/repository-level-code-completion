{"filename": "Junkctrl/FeatureNode.cs", "chunked_list": ["\ufeffusing System.Windows.Forms;\n\nnamespace Features.Feature\n{\n    internal class FeatureNode : TreeNode\n    {\n        public FeatureBase Feature { get; }\n\n        public FeatureNode(FeatureBase feature)\n        {\n            Feature = feature;\n            Text = Feature.ID();\n            //ToolTipText = Feature.Info();\n            Checked = true;\n        }\n    }\n}"]}
{"filename": "Junkctrl/ITreeNode.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Windows.Forms;\n\nnamespace Junkctrl.ITreeNode\n{\n    public static class ITreeNode\n    {\n        public static IEnumerable<TreeNode> All(this TreeNodeCollection nodes)\n        {\n            if (nodes == null) throw new ArgumentNullException(nameof(nodes));\n", "        public static IEnumerable<TreeNode> All(this TreeNodeCollection nodes)\n        {\n            if (nodes == null) throw new ArgumentNullException(nameof(nodes));\n\n            foreach (TreeNode n in nodes)\n            {\n                yield return n;\n\n                foreach (TreeNode child in n.Nodes.All())\n                {\n                    yield return child;\n                }\n            }\n        }\n    }\n}", "                foreach (TreeNode child in n.Nodes.All())\n                {\n                    yield return child;\n                }\n            }\n        }\n    }\n}"]}
{"filename": "Junkctrl/MainForm.cs", "chunked_list": ["\ufeffusing Features.Feature;\nusing HelperTool;\nusing Junkctrl.ITreeNode;\nusing Junkctrl.Theming;\nusing Junkctrl.Views;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.IO;", "using System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace Junkctrl\n{\n    public partial class MainForm : Form\n    {", "{\n    public partial class MainForm : Form\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        public static List<string> recycleList = new List<string>();\n\n        public Control INavPage;\n        private PluginBase pluginBase;\n        private int progression = 0;\n        private int progressionIncrease = 0;\n\n        public MainForm()\n        {\n            InitializeComponent();\n\n            pluginBase = new PluginBase(lnkStatus, progressBar, checkResults);\n        }\n", "        private int progression = 0;\n        private int progressionIncrease = 0;\n\n        public MainForm()\n        {\n            InitializeComponent();\n\n            pluginBase = new PluginBase(lnkStatus, progressBar, checkResults);\n        }\n\n        private void MainForm_Shown(object sender, EventArgs e)\n        {\n            _Assembly.Text = \"Version \" + Program.GetCurrentVersionTostring();\n            this.AddJunkScans();\n\n            this.SetStyle();\n        }\n", "        private void MainForm_Shown(object sender, EventArgs e)\n        {\n            _Assembly.Text = \"Version \" + Program.GetCurrentVersionTostring();\n            this.AddJunkScans();\n\n            this.SetStyle();\n        }\n\n        private void SetStyle()\n        {\n            btnKebapMenu.Text = \"\\u22ee\";\n            btnBack.Text = \"\\uE72B\";\n\n            pnlForm.BackColor =\n            pnlMain.BackColor =\n            tvwFeatures.BackColor =\n            checkResults.BackColor =\n            pnlCapabilities.BackColor =\n                  Color.FromArgb(239, 239, 247);\n            pbBackground.ImageLocation = \"https://github.com/builtbybel/BloatyNosy/blob/main/assets/BackgroundImageA.png?raw=true\";\n\n            INavPage = pnlForm.Controls[0];              // Set default NavPage\n            logger.SetTarget(checkResults);               // Add results to checkedListBox\n        }\n", "        private void SetStyle()\n        {\n            btnKebapMenu.Text = \"\\u22ee\";\n            btnBack.Text = \"\\uE72B\";\n\n            pnlForm.BackColor =\n            pnlMain.BackColor =\n            tvwFeatures.BackColor =\n            checkResults.BackColor =\n            pnlCapabilities.BackColor =\n                  Color.FromArgb(239, 239, 247);\n            pbBackground.ImageLocation = \"https://github.com/builtbybel/BloatyNosy/blob/main/assets/BackgroundImageA.png?raw=true\";\n\n            INavPage = pnlForm.Controls[0];              // Set default NavPage\n            logger.SetTarget(checkResults);               // Add results to checkedListBox\n        }\n", "        public void SetView(Control View)\n        {\n            var control = View as Control;\n\n            control.Anchor = (AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom);\n            control.Dock = DockStyle.Fill;\n            INavPage.Anchor = (AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom);\n            INavPage.Dock = DockStyle.Fill;\n\n            pnlForm.Controls.Clear();\n            pnlForm.Controls.Add(View);\n        }\n", "        public void AddJunkScans()\n        {\n            tvwFeatures.Nodes.Clear();\n            tvwFeatures.BeginUpdate();\n\n            // Default auto scans\n            TreeNode root = new TreeNode(\"Windows 11 \" + OsHelper.GetVersion(), new TreeNode[] {\n                new FeatureNode(new Features.Feature.Apps.AutoJunk()),\n                new FeatureNode(new Features.Feature.Apps.PrivateJunk()),\n            })\n\n            {\n                Checked = true,\n            };\n\n            // Skip if the \"PluginsDir\" directory does not exist", "            if (!Directory.Exists(HelperTool.Utils.Data.PluginsDir))\n            {\n                tvwFeatures.Nodes.Add(root);\n                AddCopilotNode(root);\n                ExpandTreeViewNodes();\n                tvwFeatures.Nodes[0].NodeFont = new Font(tvwFeatures.Font, FontStyle.Bold);\n                tvwFeatures.EndUpdate();\n                return;\n            }\n\n            // If the \"PluginsDir\" directory exists, continue with the plugin functionality", "            if (Directory.GetFiles(HelperTool.Utils.Data.PluginsDir, \"*.txt\").Length > 0)\n            {\n                TreeNode pluginsNode = CreatePluginsNode();\n                root.Nodes.Add(pluginsNode);\n            }\n            tvwFeatures.Nodes.Add(root);\n            AddCopilotNode(root);\n            ExpandTreeViewNodes();\n            tvwFeatures.Nodes[0].NodeFont = new Font(tvwFeatures.Font, FontStyle.Bold);\n            tvwFeatures.EndUpdate();\n        }\n\n        // Use Copilot for skipping auto scans", "        private void AddCopilotNode(TreeNode root)\n        {\n            TreeNode copilotNode = new TreeNode(\"Skip and use Copilot \");\n            root.Nodes.Add(copilotNode);\n            TreeNodeTheming.RemoveCheckmarks(tvwFeatures, copilotNode);\n        }\n\n        // Add the Plugins node (if available)\n        private TreeNode CreatePluginsNode()\n        {\n            TreeNode pluginsNode = new TreeNode(\"Plugins\");\n            string pluginDirectory = HelperTool.Utils.Data.PluginsDir;", "        private TreeNode CreatePluginsNode()\n        {\n            TreeNode pluginsNode = new TreeNode(\"Plugins\");\n            string pluginDirectory = HelperTool.Utils.Data.PluginsDir;\n            foreach (string textFile in Directory.GetFiles(pluginDirectory, \"*.txt\"))\n            {\n                pluginsNode.Nodes.Add(new TreeNode(Path.GetFileNameWithoutExtension(textFile)));\n            }\n            return pluginsNode;\n        }\n", "        private void ExpandTreeViewNodes()\n        {\n            foreach (TreeNode tn in tvwFeatures.Nodes)\n            {\n                tn.ExpandAll();\n            }\n        }\n\n        private void tvwFeatures_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)\n        {\n            // Check if the clicked TreeNode is a FeatureNode", "        private void tvwFeatures_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)\n        {\n            // Check if the clicked TreeNode is a FeatureNode\n            if (e.Node is FeatureNode clickedFeatureNode)\n            {\n                // Get the FeatureNode's FeatureBase object\n                FeatureBase feature = clickedFeatureNode.Feature;\n\n                // Get the information from the Info() method\n                string info = feature.Info();\n                lnkHeader.Text = info;\n            }", "            else if (e.Node.Parent != null && e.Node.Parent.Text == \"Plugins\")\n            {\n                // Get the plugin name\n                string pluginName = e.Node.Text;\n\n                // Get the plugin info using the GetPluginInfo method\n                string info = pluginBase.GetPluginInfo(pluginName);\n\n                // Display the info\n                lnkHeader.Text = info;\n            }\n            else\n            {\n                lnkHeader.Text = \"Idle.\";\n            }\n\n            switch (e.Node.Text)\n            {\n                case \"Skip and use Copilot \":\n                    this.SetView(new CopilotPageView());  // Set Copilot view\n                    break;\n\n                default:\n                    break;\n            }\n        }\n", "        private void tvwFeatures_AfterCheck(object sender, TreeViewEventArgs e)\n        {\n            tvwFeatures.BeginUpdate();\n\n            foreach (System.Windows.Forms.TreeNode child in e.Node.Nodes)\n            {\n                child.Checked = e.Node.Checked;\n            }\n\n            // Remove checkmarks from copilot child node\n            TreeNodeTheming.RemoveCheckmarks(tvwFeatures, tvwFeatures.Nodes[0].Nodes[3]);\n            tvwFeatures.EndUpdate();\n        }\n", "        private async void btnSearch_Click(object sender, EventArgs e)\n        {\n            Reset();\n            btnBack.PerformClick();\n            pnlCapabilities.SendToBack();\n            checkResults.Items.Clear();\n            logger.GetLogList().Clear();\n            btnSearch.Enabled = false;\n            int performFeaturesCount = 0;\n\n            List<FeatureNode> selectedFeatures = CollectFeatureNodes();\n\n            lnkStatus.Text = $\"{selectedFeatures.Count} auto scans are running...\";", "            foreach (FeatureNode node in selectedFeatures)\n            {\n                var feature = node.Feature;\n                ConfiguredTaskAwaitable<bool> analyzeTask = Task<bool>.Factory.StartNew(() => feature.CheckFeature()).ConfigureAwait(true);\n\n                bool shouldPerform = await analyzeTask;\n                lnkStatus.Text = \"Check \" + feature.ID();\n\n                if (shouldPerform)\n                {\n                    performFeaturesCount += 1;\n                    // node.ForeColor = Color.Crimson;\n                }\n                else\n                {\n                    node.Checked = false;\n                    // node.ForeColor = Color.Gray;\n                }\n            }\n\n            // Pass corresponding Plugin instances", "                if (shouldPerform)\n                {\n                    performFeaturesCount += 1;\n                    // node.ForeColor = Color.Crimson;\n                }\n                else\n                {\n                    node.Checked = false;\n                    // node.ForeColor = Color.Gray;\n                }\n            }\n\n            // Pass corresponding Plugin instances", "            foreach (TreeNode node in tvwFeatures.Nodes)\n            {\n                await pluginBase.CheckNodeForSearch(node);\n            }\n\n            tvwFeatures.SelectedNode = tvwFeatures.Nodes[0];\n            DoProgress(100);\n\n            btnSearch.Enabled = true;\n            lnkStatus.Text = \"Scans completed. Click to switch view.\";\n            btnBack.Enabled = true;\n\n            int itemsInRecycleList = checkResults.Items.Count;\n            lblItemsInRecycleList.Text = itemsInRecycleList.ToString() + \" junk apps found.\";\n        }\n", "        private void SelectFeatureNodes(TreeNodeCollection trNodeCollection, bool isCheck)\n        {\n            foreach (TreeNode trNode in trNodeCollection)\n            {\n                trNode.Checked = isCheck;\n                if (trNode.Nodes.Count > 0)\n                    SelectFeatureNodes(trNode.Nodes, isCheck);\n            }\n        }\n\n        private List<FeatureNode> CollectFeatureNodes()\n        {\n            List<FeatureNode> selectedFeatures = new List<FeatureNode>();\n", "            foreach (TreeNode treeNode in tvwFeatures.Nodes.All())\n            {\n                if (treeNode.Checked && treeNode.GetType() == typeof(FeatureNode))\n                {\n                    selectedFeatures.Add((FeatureNode)treeNode);\n                }\n            }\n\n            progressionIncrease = (int)Math.Floor(100.0f / selectedFeatures.Count);\n\n            return selectedFeatures;\n        }\n", "        private void btnBin_Click(object sender, EventArgs e)\n        {\n            Reset();\n            recycleList.Clear();\n            for (int i = 0; i < checkResults.Items.Count; i++)\n            {\n                if (checkResults.GetItemChecked(i))\n                {\n                    string item = checkResults.Items[i].ToString();\n\n                    if (item.Contains(\"[!]\") || (item.Contains(\"(We recommend uninstalling this app)\")))\n                    {\n                        // Skip adding the item to the recycleList\n                        continue;\n                    }\n\n                    recycleList.Add(item);\n                    IncrementProgress();\n                }\n            }\n            DoProgress(100);\n", "                    if (item.Contains(\"[!]\") || (item.Contains(\"(We recommend uninstalling this app)\")))\n                    {\n                        // Skip adding the item to the recycleList\n                        continue;\n                    }\n\n                    recycleList.Add(item);\n                    IncrementProgress();\n                }\n            }\n            DoProgress(100);\n", "            if (recycleList.Count == 0)\n            {\n                MessageBox.Show(\"You haven't done a search yet or added anything to the bin.\\nAccordingly the recycle list is empty. Please select at least one item.\");\n            }\n            else\n            {\n                this.SetView(new CopilotPageView());\n            }\n        }\n\n        private void Reset()\n        {\n            lnkStatus.Visible = true;\n            progression = 0;\n            progressionIncrease = 0;\n\n            progressBar.Value = 0;\n            progressBar.Visible = true;\n            checkResults.Visible = true;\n            checkResults.Text = \"\";\n        }\n", "        private void Reset()\n        {\n            lnkStatus.Visible = true;\n            progression = 0;\n            progressionIncrease = 0;\n\n            progressBar.Value = 0;\n            progressBar.Visible = true;\n            checkResults.Visible = true;\n            checkResults.Text = \"\";\n        }\n", "        private void DoProgress(int value)\n        {\n            progression = value;\n            progressBar.Value = progression;\n        }\n\n        private void IncrementProgress()\n        {\n            progression += progressionIncrease;\n            progressBar.Value = progression;\n        }\n", "        public void ToggleControlVisibility()\n        {\n            pnlCapabilities.Visible = !pnlCapabilities.Visible;\n\n            if (pnlCapabilities.Visible)\n            {\n                pnlCapabilities.BringToFront();\n                checkResults.Visible = true;\n            }\n            else\n            {\n                checkResults.Visible = true;\n            }\n        }\n", "        private void btnBack_Click(object sender, EventArgs e)\n        {\n     \n            pnlForm.Controls.Add(INavPage);\n            ToggleControlVisibility();\n        }\n\n        public void ClearPanel2Controls()\n            => pnlForm.Controls.Clear();\n\n        public void AddINavPageToPanel2()\n           => pnlForm.Controls.Add(INavPage);\n", "        public void AddINavPageToPanel2()\n           => pnlForm.Controls.Add(INavPage);\n\n        private void lnkStatus_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n           => btnBack.PerformClick();\n\n        private void lnkHeader_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n          => MessageBox.Show(lnkHeader.Text, \"Info\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n        private void btnKebapMenu_Click(object sender, EventArgs e)\n             => this.contextKebapMenu.Show(Cursor.Position.X, Cursor.Position.Y);\n", "        private void btnKebapMenu_Click(object sender, EventArgs e)\n             => this.contextKebapMenu.Show(Cursor.Position.X, Cursor.Position.Y);\n\n        private void lnkAppMediaTwitter_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n             => Process.Start(HelperTool.Utils.Uri.URL_TWITTER);\n\n        private void _Assembly_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n             => HelperTool.Utils.CheckForUpdates();\n\n        private void lnkAppMediaDonate_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n             => Process.Start(HelperTool.Utils.Uri.URL_DONATE);\n", "        private void lnkAppMediaDonate_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n             => Process.Start(HelperTool.Utils.Uri.URL_DONATE);\n\n        private void lnkAppMediaGitHub_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n          => Process.Start(HelperTool.Utils.Uri.URL_GITREPO);\n\n        private void lnkHeader_Click(object sender, EventArgs e)\n         => MessageBox.Show(lnkHeader.Text, \"Info\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\n        private void menuPluginsDir_Click(object sender, EventArgs e)\n        {\n            // Open the plugins folder\n            string pluginsFolder = Path.GetDirectoryName(HelperTool.Utils.Data.PluginsDir);\n            Process.Start(pluginsFolder);\n        }\n", "        private void menuPluginsDir_Click(object sender, EventArgs e)\n        {\n            // Open the plugins folder\n            string pluginsFolder = Path.GetDirectoryName(HelperTool.Utils.Data.PluginsDir);\n            Process.Start(pluginsFolder);\n        }\n\n        private void DeleteSelectedPlugin(TreeNode selectedNode)\n        {\n            string selectedPlugin = selectedNode.Text;\n            string appFolderPath = HelperTool.Utils.Data.PluginsDir;\n\n            string pluginFile = Path.Combine(appFolderPath, $\"{selectedPlugin}.txt\");\n", "            if (File.Exists(pluginFile))\n            {\n                // Delete the plugin file\n                File.Delete(pluginFile);\n\n                selectedNode.Remove();\n            }\n        }\n\n        private void menuPluginDelete_Click(object sender, EventArgs e)\n        {", "        private void menuPluginDelete_Click(object sender, EventArgs e)\n        {\n            if (tvwFeatures.SelectedNode != null)\n            {\n                TreeNode selectedNode = tvwFeatures.SelectedNode;\n\n                DialogResult result = MessageBox.Show(\"Are you sure you want to delete the selected plugin?\", \"Confirm\", MessageBoxButtons.YesNo, MessageBoxIcon.Question);\n\n                if (result == DialogResult.Yes)\n                {\n                    DeleteSelectedPlugin(selectedNode);\n                }\n            }\n        }\n", "                if (result == DialogResult.Yes)\n                {\n                    DeleteSelectedPlugin(selectedNode);\n                }\n            }\n        }\n\n        private void menuPluginCreate_Click(object sender, EventArgs e)\n        {\n            // Get the path to the plugins folder\n            string appFolderPath = HelperTool.Utils.Data.PluginsDir;\n\n            // Construct the path to the new plugin file\n            string pluginFile = Path.Combine(appFolderPath, $\"New.txt\");\n\n            // Create an empty plugin file\n            File.Create(pluginFile).Close();\n\n            // Open the plugin file using Notepad\n            Process.Start(\"notepad.exe\", pluginFile);\n\n            // Refresh\n            tvwFeatures.Nodes.Clear();\n            AddJunkScans();\n        }\n", "        private void menuPluginEdit_Click(object sender, EventArgs e)\n        {\n            // Get the selected node from the TreeView\n            TreeNode selectedNode = tvwFeatures.SelectedNode;\n\n            // Ensure a node is selected\n            if (selectedNode != null)\n            {\n                // Get the path to the plugins folder\n                string appFolderPath = HelperTool.Utils.Data.PluginsDir;\n\n                // Construct the path to the selected plugin file\n                string selectedPlugin = selectedNode.Text;\n                string pluginFile = Path.Combine(appFolderPath, $\"{selectedPlugin}.txt\");\n", "                if (File.Exists(pluginFile))\n                {\n                    Process.Start(\"notepad.exe\", pluginFile);\n                }\n                else\n                {\n                    MessageBox.Show(\"Selected plugin file does not exist.\", \"Something went wrong\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"No plugin selected.\", \"Something went wrong\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n        }\n", "        private void lnkAddTopTenToBin_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n        {\n            var apps = JunkTopTen.GetList();\n\n            foreach (string app in apps)\n            {\n                recycleList.Add(app);\n            }\n\n            this.SetView(new CopilotPageView());\n        }\n    }\n}"]}
{"filename": "Junkctrl/TreeNodeTheming.cs", "chunked_list": ["\ufeffusing System;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\nnamespace Junkctrl.Theming\n{\n    /// <summary>\n    /// Remove checkmarks from child/nodes\n    /// </summary>\n    internal class TreeNodeTheming\n    {", "    /// </summary>\n    internal class TreeNodeTheming\n    {\n        private const int TVIF_STATE = 0x8;\n        private const int TVIS_STATEIMAGEMASK = 0xF000;\n        private const int TV_FIRST = 0x1100;\n        private const int TVM_SETITEM = TV_FIRST + 63;\n\n        [StructLayout(LayoutKind.Sequential, Pack = 8, CharSet = CharSet.Auto)]\n        private struct TVITEM\n        {", "        private struct TVITEM\n        {\n            public int mask;\n            public IntPtr hItem;\n            public int state;\n            public int stateMask;\n\n            [MarshalAs(UnmanagedType.LPTStr)]\n            public string lpszText;\n\n            public int cchTextMax;", "            public string lpszText;\n\n            public int cchTextMax;\n            public int iImage;\n            public int iSelectedImage;\n            public int cChildren;\n            public IntPtr lParam;\n        }\n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\n        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam,\n                                                 ref TVITEM lParam);\n", "        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam,\n                                                 ref TVITEM lParam);\n\n        public static void RemoveCheckmarks(TreeView tvw, System.Windows.Forms.TreeNode node)\n        {\n            TVITEM tvi = new TVITEM();\n            tvi.hItem = node.Handle;\n            tvi.mask = TVIF_STATE;\n            tvi.stateMask = TVIS_STATEIMAGEMASK;\n            tvi.state = 0;\n            SendMessage(tvw.Handle, TVM_SETITEM, IntPtr.Zero, ref tvi);\n        }\n    }\n}"]}
{"filename": "Junkctrl/PluginBase.cs", "chunked_list": ["\ufeffusing Microsoft.Win32;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Management.Automation;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;", "using System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace Junkctrl\n{\n    internal class PluginBase\n    {\n        public static readonly PowerShell powerShell = PowerShell.Create();\n\n        private LinkLabel pluginStatus;", "        public static readonly PowerShell powerShell = PowerShell.Create();\n\n        private LinkLabel pluginStatus;\n        private ProgressBar pluginProgress;\n        private CheckedListBox pluginResults;\n\n        // Initializing the variables within the class\n        public PluginBase(LinkLabel lnkStatus, ProgressBar progressBar, CheckedListBox checkResults)\n        {\n            this.pluginStatus = lnkStatus;\n            this.pluginProgress = progressBar;\n            this.pluginResults = checkResults;\n        }\n", "        public async Task CheckNodeForSearch(TreeNode node)\n        {\n            if (node.Checked && node.Nodes.Count == 0 && node.Parent != null)\n            {\n                await SearchTextPlugins(node);\n            }\n\n            foreach (TreeNode childNode in node.Nodes)\n            {\n                await CheckNodeForSearch(childNode);\n            }\n        }\n", "        public async Task SearchTextPlugins(TreeNode selectedNode)\n        {\n            string selectedPlugin = selectedNode.Text;\n            string appFolderPath = HelperTool.Utils.Data.PluginsDir;\n\n            string pluginFile = Path.Combine(appFolderPath, $\"{selectedPlugin}.txt\");\n\n            if (File.Exists(pluginFile))\n            {\n                int totalCount = File.ReadLines(pluginFile).Count();\n                pluginStatus.Text = $\"Checking {selectedPlugin}...\";\n                int processedCount = 0;\n", "                using (StreamReader reader = new StreamReader(pluginFile))\n                {\n                    string line;\n                    bool executePowerShellCode = false;\n                    while ((line = await reader.ReadLineAsync()) != null)\n                    {\n                        string trimmedLine = line.Trim();\n\n                        // Run PowerShell code in plugin marked with @copilot\n                        if (trimmedLine.StartsWith(\"@copilot\"))\n                        {\n                            DialogResult result = MessageBox.Show(\"The plugin \" + selectedPlugin + \" features PowerShell code. Do you want to run the PowerShell code for \" + selectedPlugin + \"?\",\n                                \"Confirmation\", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);\n", "                        if (trimmedLine.StartsWith(\"@copilot\"))\n                        {\n                            DialogResult result = MessageBox.Show(\"The plugin \" + selectedPlugin + \" features PowerShell code. Do you want to run the PowerShell code for \" + selectedPlugin + \"?\",\n                                \"Confirmation\", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);\n\n                            if (result == DialogResult.Yes)\n                            {\n                                executePowerShellCode = true;\n                            }\n                        }\n                        // PowerShell search with Get-AppxPackage cmdlet", "                        else if (trimmedLine.StartsWith(\"Get-AppxPackage\"))\n                        {\n                            string[] appNames = trimmedLine.Split(',');\n                            foreach (string appName in appNames)\n                            {\n                                string partialAppName = ExtractPartialAppName(appName.Trim());\n                                if (!string.IsNullOrEmpty(partialAppName))\n                                {\n                                    await CheckAppxPackage(partialAppName);\n                                }\n                            }\n                        }\n                        // Search for Win32 apps: Uninstall currently NOT implemented!\n                        // Search for Win32 apps: Uninstall currently NOT implemented!", "                        else if (trimmedLine.Contains(\"*\") || trimmedLine.Contains(\"?\"))\n                        {\n                            string[] appNames = trimmedLine.Split(',');\n                            StringBuilder uninstallApps = new StringBuilder();\n                            bool containsWin32Apps = false;\n\n                            foreach (string appName in appNames)\n                            {\n                                await CheckWin32Apps(appName.Trim());\n                            }\n\n                            // Iterate through the pluginResults list box items and add apps to uninstallApps StringBuilder", "                            foreach (string foundApp in pluginResults.Items)\n                            {\n                                if (foundApp.Contains(\"We recommend uninstalling this app\"))\n                                {\n                                    uninstallApps.AppendLine(\"+ \" + foundApp);\n                                    containsWin32Apps = true;\n                                }\n                            }\n\n                            if (containsWin32Apps)\n                            {\n                                string introText = \"The following apps should be uninstalled manually:\\nWe've opened the Windows 11 > Uninstall apps page.\\n\\n\";\n                                string filePath = Path.Combine(Path.GetTempPath(), $\"{selectedPlugin}_uninstall_apps.txt\");\n                                string settingsAppPath = Environment.ExpandEnvironmentVariables(@\"%windir%\\explorer.exe\");\n                                string uninstallAppsUri = \"ms-settings:appsfeatures-app\";\n\n                                File.WriteAllText(filePath, introText + uninstallApps.ToString());\n                                Process.Start(settingsAppPath, uninstallAppsUri);\n                                Process.Start(\"notepad.exe\", filePath);\n                            }\n                        }\n\n\n\n                        else\n                        {\n                            // Normal search: check if the trimmed line matches installed appx packages\n                            string[] appNames = trimmedLine.Split(',');", "                            if (containsWin32Apps)\n                            {\n                                string introText = \"The following apps should be uninstalled manually:\\nWe've opened the Windows 11 > Uninstall apps page.\\n\\n\";\n                                string filePath = Path.Combine(Path.GetTempPath(), $\"{selectedPlugin}_uninstall_apps.txt\");\n                                string settingsAppPath = Environment.ExpandEnvironmentVariables(@\"%windir%\\explorer.exe\");\n                                string uninstallAppsUri = \"ms-settings:appsfeatures-app\";\n\n                                File.WriteAllText(filePath, introText + uninstallApps.ToString());\n                                Process.Start(settingsAppPath, uninstallAppsUri);\n                                Process.Start(\"notepad.exe\", filePath);\n                            }\n                        }\n\n\n\n                        else\n                        {\n                            // Normal search: check if the trimmed line matches installed appx packages\n                            string[] appNames = trimmedLine.Split(',');", "                            foreach (string appName in appNames)\n                            {\n                                string trimmedAppName = appName.Trim();\n                                if (await IsAppInstalled(trimmedAppName))\n                                {\n                                    pluginResults.Items.Add(trimmedAppName, true);\n                                }\n                            }\n                        }\n\n                        processedCount++;\n                        int progress = (int)Math.Floor((double)processedCount / totalCount * 100);\n                        pluginProgress.Value = progress;\n", "                        if (executePowerShellCode)\n                        {\n                            string powerShellCode = await reader.ReadToEndAsync();\n                            await ExecutePowerShellCode(powerShellCode);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        /* Used for enhancing plugin engine with PowerShell cmdlets in format Get-AppxPackage \u2013Name *microsoft*\n         Extracts the partial app name from the line using a regex pattern */", "        private string ExtractPartialAppName(string line)\n        {\n            string pattern = @\"\\*(.*?)\\*\";\n            Match match = Regex.Match(line, pattern);\n            if (match.Success)\n            {\n                return match.Groups[1].Value;\n            }\n            return null;\n        }\n\n        /* Used for enhancing plugin engine with PowerShell cmdlets in format Get-AppxPackage \u2013Name *microsoft*\n       Use PowerShell command to filter appx packages by partial app name */", "        public async Task CheckAppxPackage(string partialAppName)\n        {\n            powerShell.Commands.Clear();\n            powerShell.AddScript($\"Get-AppxPackage | Where-Object {{ $_.Name -like '*{partialAppName}*' }}\");\n\n            var invokeTask = Task.Run(() => powerShell.Invoke());\n\n            foreach (PSObject result in await invokeTask)\n            {\n                string appName = result.Properties[\"Name\"].Value.ToString();\n                pluginResults.Items.Add(appName, true);\n            }\n        }\n", "        public bool IsPowerShellPlugin(TreeNode node)\n        {\n            string pluginName = node.Text;\n            string appFolderPath = HelperTool.Utils.Data.PluginsDir;\n            string pluginFilePath = Path.Combine(appFolderPath, $\"{pluginName}.txt\");\n\n            if (File.Exists(pluginFilePath))\n            {\n                using (StreamReader reader = new StreamReader(pluginFilePath))\n                {\n                    string firstLine = reader.ReadLine();", "                using (StreamReader reader = new StreamReader(pluginFilePath))\n                {\n                    string firstLine = reader.ReadLine();\n                    if (firstLine != null && firstLine.Trim().StartsWith(\"Get-AppxPackage\"))\n                    {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n\n        // Comment section to Gget plugin info from the plugin file", "        public string GetPluginInfo(string pluginName)\n        {\n            string appFolderPath = HelperTool.Utils.Data.PluginsDir;\n            string pluginFile = Path.Combine(appFolderPath, $\"{pluginName}.txt\");\n\n            if (File.Exists(pluginFile))\n            {\n                using (StreamReader reader = new StreamReader(pluginFile))\n                {\n                    string line;\n                    while ((line = reader.ReadLine()) != null)\n                    {\n                        string trimmedLine = line.Trim();", "                    while ((line = reader.ReadLine()) != null)\n                    {\n                        string trimmedLine = line.Trim();\n                        if (trimmedLine.StartsWith(\"#\"))\n                        {\n                            // Return the info section marked with '#'\n                            return trimmedLine.Substring(1).Trim();\n                        }\n                    }\n                }\n            }\n\n            return string.Empty;\n        }\n\n        // Check if the appx is installed", "        public static async Task<bool> IsAppInstalled(string appName)\n        {\n            powerShell.Commands.Clear();\n            powerShell.AddCommand(\"get-appxpackage\");\n            powerShell.AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n            var invokeTask = Task.Run(() => powerShell.Invoke());\n\n            foreach (PSObject result in await invokeTask)\n            {\n                string current = result.Properties[\"Name\"].Value.ToString();\n", "            foreach (PSObject result in await invokeTask)\n            {\n                string current = result.Properties[\"Name\"].Value.ToString();\n\n                if (string.Equals(current, appName, StringComparison.OrdinalIgnoreCase))\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        // Allow running PowerShell code inside the plugin file", "        public async Task ExecutePowerShellCode(string powerShellCode)\n        {\n            powerShell.Commands.Clear();\n\n            // Split the PowerShell code into lines\n            string[] codeLines = powerShellCode.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries);\n\n            // Skip the first line if it starts with \"@copilot\"\n            IEnumerable<string> filteredCodeLines = codeLines.Skip(codeLines[0].StartsWith(\"@copilot\") ? 1 : 0);\n\n            // Join the filtered code lines back into a single string\n            string filteredPowerShellCode = string.Join(Environment.NewLine, filteredCodeLines);\n\n            powerShell.AddScript(filteredPowerShellCode);\n\n            await Task.Run(() => powerShell.Invoke());\n        }\n\n        // Search for Win32 apps", "        public async Task CheckWin32Apps(string partialAppName)\n        {\n            await Task.Run(() =>\n            {\n                // Local machine hive\n                CheckRegistryUninstallKey(Registry.LocalMachine.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\"), partialAppName);\n\n                // Current user hive\n                CheckRegistryUninstallKey(Registry.CurrentUser.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\"), partialAppName);\n\n                // 32-bit apps installed onto 64-bit Operating System\n                CheckRegistryUninstallKey(Registry.LocalMachine.OpenSubKey(\"Software\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\"), partialAppName);\n            });\n        }\n\n        // Search for Win32 apps in the registry", "        private void CheckRegistryUninstallKey(RegistryKey uninstallKey, string partialAppName)\n        {\n            if (uninstallKey != null)\n            {\n                string[] subKeyNames = uninstallKey.GetSubKeyNames();\n\n                foreach (string subKeyName in subKeyNames)\n                {\n                    RegistryKey appKey = uninstallKey.OpenSubKey(subKeyName);\n\n                    if (appKey != null)\n                    {\n                        string displayName = appKey.GetValue(\"DisplayName\") as string;\n", "                    if (appKey != null)\n                    {\n                        string displayName = appKey.GetValue(\"DisplayName\") as string;\n\n                        if (!string.IsNullOrEmpty(displayName) && WildcardMatch(displayName, partialAppName))\n                        {\n                            pluginResults.BeginInvoke(new Action(() => pluginResults.Items.Add(displayName + \" (We recommend uninstalling this app)\", true)));\n                        }\n\n                        appKey.Close();\n                    }\n                }\n\n                uninstallKey.Close();\n            }\n        }\n\n        // Check if the win32 app names matches the wildcard pattern", "        private bool WildcardMatch(string input, string wildcard)\n        {\n            // Escape special characters and convert '*' to '.*' (matches any sequence of characters)\n            // and '?' to '.' (matches any single character)\n            string pattern = \"^\" + Regex.Escape(wildcard).Replace(\"\\\\*\", \".*\").Replace(\"\\\\?\", \".\") + \"$\";\n\n            // Use a regular expression with the IgnoreCase option to perform the matching\n            return Regex.IsMatch(input, pattern, RegexOptions.IgnoreCase);\n        }\n    }\n}"]}
{"filename": "Junkctrl/FeatureBase.cs", "chunked_list": ["\ufeffnamespace Features.Feature\n{\n    public abstract class FeatureBase\n    {\n\n        /// <summary>\n        /// Name of Feature\n        /// </summary>\n        /// <returns>The feature name</returns>\n        public abstract string ID();\n\n        /// <summary>\n        /// Tooltip text of sssessments\n        /// </summary>\n        /// <returns>The feature tooltip</returns>", "        public abstract string ID();\n\n        /// <summary>\n        /// Tooltip text of sssessments\n        /// </summary>\n        /// <returns>The feature tooltip</returns>\n        public abstract string Info();\n\n        /// <summary>\n        /// Checks whether Features should be applied\n        /// </summary>\n        /// <returns>Returns true if the feature should be applied, false otherwise.</returns>", "        public abstract bool CheckFeature();\n\n        /// <summary>\n        /// Do the Feature\n        /// </summary>\n        /// <returns>Returns true if the feature was successfull, false otherwise.</returns>\n        public abstract bool DoFeature();\n\n        /// <summary>\n        /// Undo the Feature\n        /// </summary>\n        /// <returns>Returns true if the feature was successfull, false otherwise.</returns>", "        public abstract bool UndoFeature();\n\n    }\n}"]}
{"filename": "Junkctrl/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Windows.Forms;\n\nnamespace Junkctrl\n{\n    internal static class Program\n    {\n        /// <summary>\n        /// Get app version\n        /// </summary>\n        internal static string GetCurrentVersionTostring() => new Version(Application.ProductVersion).ToString(3);\n\n        /// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]", "        private static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new MainForm());\n        }\n    }\n}"]}
{"filename": "Junkctrl/MainForm.Designer.cs", "chunked_list": ["\ufeffnamespace Junkctrl\n{\n    partial class MainForm\n    {\n        /// <summary>\n        /// Erforderliche Designervariable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// Verwendete Ressourcen bereinigen.\n        /// </summary>\n        /// <param name=\"disposing\">True, wenn verwaltete Ressourcen gel\u00f6scht werden sollen; andernfalls False.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Vom Windows Form-Designer generierter Code\n\n        /// <summary>\n        /// Erforderliche Methode f\u00fcr die Designerunterst\u00fctzung.\n        /// Der Inhalt der Methode darf nicht mit dem Code-Editor ge\u00e4ndert werden.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            this.components = new System.ComponentModel.Container();\n            this.textHeaderAppInfo = new System.Windows.Forms.ToolStripTextBox();\n            this.contextKebapMenu = new System.Windows.Forms.ContextMenuStrip(this.components);\n            this.menuPluginAdd = new System.Windows.Forms.ToolStripMenuItem();\n            this.menuPluginEdit = new System.Windows.Forms.ToolStripMenuItem();\n            this.menuPluginDelete = new System.Windows.Forms.ToolStripMenuItem();\n            this.menuPluginsDir = new System.Windows.Forms.ToolStripMenuItem();\n            this.sc = new System.Windows.Forms.SplitContainer();\n            this.lnkAppMediaGitHub = new System.Windows.Forms.LinkLabel();\n            this.lblAppInfo = new System.Windows.Forms.Label();\n            this.lnkAppMediaTwitter = new System.Windows.Forms.LinkLabel();\n            this._Assembly = new System.Windows.Forms.LinkLabel();\n            this.lnkAppMediaDonate = new System.Windows.Forms.LinkLabel();\n            this.pbBackground = new System.Windows.Forms.PictureBox();\n            this.btnBack = new System.Windows.Forms.Button();\n            this.pnlMain = new System.Windows.Forms.Panel();\n            this.btnKebapMenu = new System.Windows.Forms.Button();\n            this.pnlCapabilities = new System.Windows.Forms.Panel();\n            this.lnkHeader = new System.Windows.Forms.LinkLabel();\n            this.lnkAddTopTenToBin = new System.Windows.Forms.LinkLabel();\n            this.btnSearch = new System.Windows.Forms.Button();\n            this.tvwFeatures = new System.Windows.Forms.TreeView();\n            this.lblItemsInRecycleList = new System.Windows.Forms.Label();\n            this.btnBin = new System.Windows.Forms.Button();\n            this.lnkStatus = new System.Windows.Forms.LinkLabel();\n            this.progressBar = new System.Windows.Forms.ProgressBar();\n            this.checkResults = new System.Windows.Forms.CheckedListBox();\n            this.pnlForm = new System.Windows.Forms.Panel();\n            this.contextKebapMenu.SuspendLayout();\n            ((System.ComponentModel.ISupportInitialize)(this.sc)).BeginInit();\n            this.sc.Panel1.SuspendLayout();\n            this.sc.Panel2.SuspendLayout();\n            this.sc.SuspendLayout();\n            ((System.ComponentModel.ISupportInitialize)(this.pbBackground)).BeginInit();\n            this.pnlMain.SuspendLayout();\n            this.pnlCapabilities.SuspendLayout();\n            this.pnlForm.SuspendLayout();\n            this.SuspendLayout();\n            // \n            // textHeaderAppInfo\n            // \n            this.textHeaderAppInfo.BackColor = System.Drawing.Color.White;\n            this.textHeaderAppInfo.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.textHeaderAppInfo.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semibold\", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.textHeaderAppInfo.ForeColor = System.Drawing.Color.Gray;\n            this.textHeaderAppInfo.Margin = new System.Windows.Forms.Padding(5, 5, 0, 10);\n            this.textHeaderAppInfo.Name = \"textHeaderAppInfo\";\n            this.textHeaderAppInfo.ReadOnly = true;\n            this.textHeaderAppInfo.Size = new System.Drawing.Size(200, 18);\n            this.textHeaderAppInfo.Text = \"App-Settings (progress)\";\n            // \n            // contextKebapMenu\n            // \n            this.contextKebapMenu.BackColor = System.Drawing.Color.White;\n            this.contextKebapMenu.Font = new System.Drawing.Font(\"Segoe UI Variable Display Semib\", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.contextKebapMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {\n            this.textHeaderAppInfo,\n            this.menuPluginAdd,\n            this.menuPluginEdit,\n            this.menuPluginDelete,\n            this.menuPluginsDir});\n            this.contextKebapMenu.Name = \"menuMain\";\n            this.contextKebapMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;\n            this.contextKebapMenu.Size = new System.Drawing.Size(261, 141);\n            // \n            // menuPluginAdd\n            // \n            this.menuPluginAdd.Name = \"menuPluginAdd\";\n            this.menuPluginAdd.Size = new System.Drawing.Size(260, 26);\n            this.menuPluginAdd.Text = \"Create plugin\";\n            this.menuPluginAdd.Click += new System.EventHandler(this.menuPluginCreate_Click);\n            // \n            // menuPluginEdit\n            // \n            this.menuPluginEdit.Name = \"menuPluginEdit\";\n            this.menuPluginEdit.Size = new System.Drawing.Size(260, 26);\n            this.menuPluginEdit.Text = \"Edit plugin\";\n            this.menuPluginEdit.Click += new System.EventHandler(this.menuPluginEdit_Click);\n            // \n            // menuPluginDelete\n            // \n            this.menuPluginDelete.Name = \"menuPluginDelete\";\n            this.menuPluginDelete.Size = new System.Drawing.Size(260, 26);\n            this.menuPluginDelete.Text = \"Delete plugin\";\n            this.menuPluginDelete.Click += new System.EventHandler(this.menuPluginDelete_Click);\n            // \n            // menuPluginsDir\n            // \n            this.menuPluginsDir.Name = \"menuPluginsDir\";\n            this.menuPluginsDir.Size = new System.Drawing.Size(260, 26);\n            this.menuPluginsDir.Text = \"Open plugins folder\";\n            this.menuPluginsDir.Click += new System.EventHandler(this.menuPluginsDir_Click);\n            // \n            // sc\n            // \n            this.sc.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.sc.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;\n            this.sc.Location = new System.Drawing.Point(0, 0);\n            this.sc.Name = \"sc\";\n            // \n            // sc.Panel1\n            // \n            this.sc.Panel1.AutoScroll = true;\n            this.sc.Panel1.BackColor = System.Drawing.Color.Transparent;\n            this.sc.Panel1.Controls.Add(this.lnkAppMediaGitHub);\n            this.sc.Panel1.Controls.Add(this.lblAppInfo);\n            this.sc.Panel1.Controls.Add(this.lnkAppMediaTwitter);\n            this.sc.Panel1.Controls.Add(this._Assembly);\n            this.sc.Panel1.Controls.Add(this.lnkAppMediaDonate);\n            this.sc.Panel1.Controls.Add(this.pbBackground);\n            this.sc.Panel1.Controls.Add(this.btnBack);\n            // \n            // sc.Panel2\n            // \n            this.sc.Panel2.AutoScroll = true;\n            this.sc.Panel2.Controls.Add(this.pnlMain);\n            this.sc.Size = new System.Drawing.Size(1026, 663);\n            this.sc.SplitterDistance = 412;\n            this.sc.TabIndex = 220;\n            // \n            // lnkAppMediaGitHub\n            // \n            this.lnkAppMediaGitHub.ActiveLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaGitHub.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.lnkAppMediaGitHub.AutoEllipsis = true;\n            this.lnkAppMediaGitHub.AutoSize = true;\n            this.lnkAppMediaGitHub.BackColor = System.Drawing.Color.Transparent;\n            this.lnkAppMediaGitHub.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lnkAppMediaGitHub.ForeColor = System.Drawing.Color.Black;\n            this.lnkAppMediaGitHub.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;\n            this.lnkAppMediaGitHub.LinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaGitHub.Location = new System.Drawing.Point(12, 603);\n            this.lnkAppMediaGitHub.Name = \"lnkAppMediaGitHub\";\n            this.lnkAppMediaGitHub.Size = new System.Drawing.Size(39, 15);\n            this.lnkAppMediaGitHub.TabIndex = 221;\n            this.lnkAppMediaGitHub.TabStop = true;\n            this.lnkAppMediaGitHub.Text = \"GitHub\";\n            this.lnkAppMediaGitHub.VisitedLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaGitHub.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkAppMediaGitHub_LinkClicked);\n            // \n            // lblAppInfo\n            // \n            this.lblAppInfo.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.lblAppInfo.AutoSize = true;\n            this.lblAppInfo.BackColor = System.Drawing.Color.Transparent;\n            this.lblAppInfo.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lblAppInfo.ForeColor = System.Drawing.Color.Black;\n            this.lblAppInfo.Location = new System.Drawing.Point(12, 567);\n            this.lblAppInfo.Name = \"lblAppInfo\";\n            this.lblAppInfo.Size = new System.Drawing.Size(94, 17);\n            this.lblAppInfo.TabIndex = 220;\n            this.lblAppInfo.Text = \"About this app\";\n            // \n            // lnkAppMediaTwitter\n            // \n            this.lnkAppMediaTwitter.ActiveLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaTwitter.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.lnkAppMediaTwitter.AutoEllipsis = true;\n            this.lnkAppMediaTwitter.AutoSize = true;\n            this.lnkAppMediaTwitter.BackColor = System.Drawing.Color.Transparent;\n            this.lnkAppMediaTwitter.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lnkAppMediaTwitter.ForeColor = System.Drawing.Color.Black;\n            this.lnkAppMediaTwitter.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;\n            this.lnkAppMediaTwitter.LinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaTwitter.Location = new System.Drawing.Point(12, 633);\n            this.lnkAppMediaTwitter.Name = \"lnkAppMediaTwitter\";\n            this.lnkAppMediaTwitter.Size = new System.Drawing.Size(38, 15);\n            this.lnkAppMediaTwitter.TabIndex = 199;\n            this.lnkAppMediaTwitter.TabStop = true;\n            this.lnkAppMediaTwitter.Text = \"Twitter\";\n            this.lnkAppMediaTwitter.VisitedLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaTwitter.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkAppMediaTwitter_LinkClicked);\n            // \n            // _Assembly\n            // \n            this._Assembly.ActiveLinkColor = System.Drawing.Color.Fuchsia;\n            this._Assembly.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this._Assembly.AutoEllipsis = true;\n            this._Assembly.AutoSize = true;\n            this._Assembly.BackColor = System.Drawing.Color.Transparent;\n            this._Assembly.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 8.25F);\n            this._Assembly.ForeColor = System.Drawing.Color.Transparent;\n            this._Assembly.LinkBehavior = System.Windows.Forms.LinkBehavior.AlwaysUnderline;\n            this._Assembly.LinkColor = System.Drawing.Color.MediumVioletRed;\n            this._Assembly.Location = new System.Drawing.Point(12, 588);\n            this._Assembly.Name = \"_Assembly\";\n            this._Assembly.Size = new System.Drawing.Size(92, 15);\n            this._Assembly.TabIndex = 203;\n            this._Assembly.TabStop = true;\n            this._Assembly.Text = \"Builtbybel May, 23\";\n            this._Assembly.VisitedLinkColor = System.Drawing.Color.MediumVioletRed;\n            this._Assembly.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this._Assembly_LinkClicked);\n            // \n            // lnkAppMediaDonate\n            // \n            this.lnkAppMediaDonate.ActiveLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaDonate.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.lnkAppMediaDonate.AutoEllipsis = true;\n            this.lnkAppMediaDonate.AutoSize = true;\n            this.lnkAppMediaDonate.BackColor = System.Drawing.Color.Transparent;\n            this.lnkAppMediaDonate.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lnkAppMediaDonate.ForeColor = System.Drawing.Color.Black;\n            this.lnkAppMediaDonate.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;\n            this.lnkAppMediaDonate.LinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaDonate.Location = new System.Drawing.Point(12, 618);\n            this.lnkAppMediaDonate.Name = \"lnkAppMediaDonate\";\n            this.lnkAppMediaDonate.Size = new System.Drawing.Size(42, 15);\n            this.lnkAppMediaDonate.TabIndex = 200;\n            this.lnkAppMediaDonate.TabStop = true;\n            this.lnkAppMediaDonate.Text = \"Donate\";\n            this.lnkAppMediaDonate.VisitedLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lnkAppMediaDonate.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkAppMediaDonate_LinkClicked);\n            // \n            // pbBackground\n            // \n            this.pbBackground.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.pbBackground.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Zoom;\n            this.pbBackground.ErrorImage = null;\n            this.pbBackground.InitialImage = null;\n            this.pbBackground.Location = new System.Drawing.Point(3, 44);\n            this.pbBackground.Name = \"pbBackground\";\n            this.pbBackground.Size = new System.Drawing.Size(407, 604);\n            this.pbBackground.SizeMode = System.Windows.Forms.PictureBoxSizeMode.Zoom;\n            this.pbBackground.TabIndex = 223;\n            this.pbBackground.TabStop = false;\n            // \n            // btnBack\n            // \n            this.btnBack.BackColor = System.Drawing.Color.Transparent;\n            this.btnBack.FlatAppearance.BorderColor = System.Drawing.Color.DimGray;\n            this.btnBack.FlatAppearance.BorderSize = 0;\n            this.btnBack.FlatAppearance.MouseOverBackColor = System.Drawing.Color.DimGray;\n            this.btnBack.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.btnBack.Font = new System.Drawing.Font(\"Segoe Fluent Icons\", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnBack.ForeColor = System.Drawing.Color.Black;\n            this.btnBack.Location = new System.Drawing.Point(0, 0);\n            this.btnBack.Name = \"btnBack\";\n            this.btnBack.Size = new System.Drawing.Size(42, 38);\n            this.btnBack.TabIndex = 219;\n            this.btnBack.Text = \"...\";\n            this.btnBack.UseVisualStyleBackColor = false;\n            this.btnBack.Click += new System.EventHandler(this.btnBack_Click);\n            // \n            // pnlMain\n            // \n            this.pnlMain.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.pnlMain.Controls.Add(this.btnKebapMenu);\n            this.pnlMain.Controls.Add(this.pnlCapabilities);\n            this.pnlMain.Controls.Add(this.lblItemsInRecycleList);\n            this.pnlMain.Controls.Add(this.btnBin);\n            this.pnlMain.Controls.Add(this.lnkStatus);\n            this.pnlMain.Controls.Add(this.progressBar);\n            this.pnlMain.Controls.Add(this.checkResults);\n            this.pnlMain.Location = new System.Drawing.Point(0, 0);\n            this.pnlMain.Name = \"pnlMain\";\n            this.pnlMain.Size = new System.Drawing.Size(610, 663);\n            this.pnlMain.TabIndex = 216;\n            // \n            // btnKebapMenu\n            // \n            this.btnKebapMenu.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnKebapMenu.BackColor = System.Drawing.Color.Transparent;\n            this.btnKebapMenu.FlatAppearance.BorderColor = System.Drawing.Color.DimGray;\n            this.btnKebapMenu.FlatAppearance.BorderSize = 0;\n            this.btnKebapMenu.FlatAppearance.MouseOverBackColor = System.Drawing.Color.DimGray;\n            this.btnKebapMenu.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.btnKebapMenu.Font = new System.Drawing.Font(\"Segoe Fluent Icons\", 21.75F, System.Drawing.FontStyle.Bold);\n            this.btnKebapMenu.ForeColor = System.Drawing.Color.Black;\n            this.btnKebapMenu.ImageAlign = System.Drawing.ContentAlignment.BottomCenter;\n            this.btnKebapMenu.Location = new System.Drawing.Point(565, 3);\n            this.btnKebapMenu.Name = \"btnKebapMenu\";\n            this.btnKebapMenu.Size = new System.Drawing.Size(42, 47);\n            this.btnKebapMenu.TabIndex = 212;\n            this.btnKebapMenu.Text = \"...\";\n            this.btnKebapMenu.TextAlign = System.Drawing.ContentAlignment.TopCenter;\n            this.btnKebapMenu.UseVisualStyleBackColor = false;\n            this.btnKebapMenu.Click += new System.EventHandler(this.btnKebapMenu_Click);\n            // \n            // pnlCapabilities\n            // \n            this.pnlCapabilities.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.pnlCapabilities.AutoScroll = true;\n            this.pnlCapabilities.Controls.Add(this.lnkHeader);\n            this.pnlCapabilities.Controls.Add(this.lnkAddTopTenToBin);\n            this.pnlCapabilities.Controls.Add(this.btnSearch);\n            this.pnlCapabilities.Controls.Add(this.tvwFeatures);\n            this.pnlCapabilities.Location = new System.Drawing.Point(24, 12);\n            this.pnlCapabilities.Name = \"pnlCapabilities\";\n            this.pnlCapabilities.Size = new System.Drawing.Size(544, 584);\n            this.pnlCapabilities.TabIndex = 224;\n            // \n            // lnkHeader\n            // \n            this.lnkHeader.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.lnkHeader.AutoEllipsis = true;\n            this.lnkHeader.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semibold\", 9.75F, System.Drawing.FontStyle.Bold);\n            this.lnkHeader.LinkBehavior = System.Windows.Forms.LinkBehavior.NeverUnderline;\n            this.lnkHeader.LinkColor = System.Drawing.Color.DimGray;\n            this.lnkHeader.Location = new System.Drawing.Point(15, 15);\n            this.lnkHeader.Name = \"lnkHeader\";\n            this.lnkHeader.Size = new System.Drawing.Size(511, 42);\n            this.lnkHeader.TabIndex = 224;\n            this.lnkHeader.TabStop = true;\n            this.lnkHeader.Text = \"Have you just freshly installed Windows 11? I\\'m here to provide explanations on v\" +\n    \"arious cleanup actions. Click on me to get more information about an option.\";\n            this.lnkHeader.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkHeader_LinkClicked);\n            // \n            // lnkAddTopTenToBin\n            // \n            this.lnkAddTopTenToBin.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n            this.lnkAddTopTenToBin.AutoSize = true;\n            this.lnkAddTopTenToBin.BackColor = System.Drawing.Color.Transparent;\n            this.lnkAddTopTenToBin.Location = new System.Drawing.Point(25, 546);\n            this.lnkAddTopTenToBin.Name = \"lnkAddTopTenToBin\";\n            this.lnkAddTopTenToBin.Size = new System.Drawing.Size(219, 13);\n            this.lnkAddTopTenToBin.TabIndex = 222;\n            this.lnkAddTopTenToBin.TabStop = true;\n            this.lnkAddTopTenToBin.Text = \"+ Add Top 10 hated Windows 11 apps to bin\";\n            this.lnkAddTopTenToBin.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkAddTopTenToBin_LinkClicked);\n            // \n            // btnSearch\n            // \n            this.btnSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnSearch.AutoEllipsis = true;\n            this.btnSearch.BackColor = System.Drawing.Color.Transparent;\n            this.btnSearch.FlatAppearance.BorderColor = System.Drawing.Color.DimGray;\n            this.btnSearch.FlatAppearance.MouseOverBackColor = System.Drawing.Color.Gray;\n            this.btnSearch.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnSearch.ForeColor = System.Drawing.Color.Black;\n            this.btnSearch.Location = new System.Drawing.Point(326, 529);\n            this.btnSearch.Name = \"btnSearch\";\n            this.btnSearch.Size = new System.Drawing.Size(200, 39);\n            this.btnSearch.TabIndex = 27;\n            this.btnSearch.TabStop = false;\n            this.btnSearch.Text = \"+    New search\";\n            this.btnSearch.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n            this.btnSearch.UseVisualStyleBackColor = false;\n            this.btnSearch.Click += new System.EventHandler(this.btnSearch_Click);\n            // \n            // tvwFeatures\n            // \n            this.tvwFeatures.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.tvwFeatures.BackColor = System.Drawing.Color.White;\n            this.tvwFeatures.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.tvwFeatures.CheckBoxes = true;\n            this.tvwFeatures.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semibold\", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.tvwFeatures.ForeColor = System.Drawing.Color.Black;\n            this.tvwFeatures.FullRowSelect = true;\n            this.tvwFeatures.Indent = 5;\n            this.tvwFeatures.ItemHeight = 50;\n            this.tvwFeatures.Location = new System.Drawing.Point(18, 71);\n            this.tvwFeatures.Name = \"tvwFeatures\";\n            this.tvwFeatures.ShowLines = false;\n            this.tvwFeatures.ShowNodeToolTips = true;\n            this.tvwFeatures.ShowPlusMinus = false;\n            this.tvwFeatures.Size = new System.Drawing.Size(508, 445);\n            this.tvwFeatures.TabIndex = 168;\n            this.tvwFeatures.AfterCheck += new System.Windows.Forms.TreeViewEventHandler(this.tvwFeatures_AfterCheck);\n            this.tvwFeatures.NodeMouseClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.tvwFeatures_NodeMouseClick);\n            // \n            // lblItemsInRecycleList\n            // \n            this.lblItemsInRecycleList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.lblItemsInRecycleList.AutoSize = true;\n            this.lblItemsInRecycleList.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lblItemsInRecycleList.Location = new System.Drawing.Point(39, 545);\n            this.lblItemsInRecycleList.Name = \"lblItemsInRecycleList\";\n            this.lblItemsInRecycleList.Size = new System.Drawing.Size(17, 17);\n            this.lblItemsInRecycleList.TabIndex = 224;\n            this.lblItemsInRecycleList.Text = \"...\";\n            // \n            // btnBin\n            // \n            this.btnBin.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnBin.AutoEllipsis = true;\n            this.btnBin.BackColor = System.Drawing.Color.White;\n            this.btnBin.FlatAppearance.BorderColor = System.Drawing.Color.LightGray;\n            this.btnBin.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semibold\", 10F, System.Drawing.FontStyle.Bold);\n            this.btnBin.ForeColor = System.Drawing.Color.Black;\n            this.btnBin.Location = new System.Drawing.Point(285, 545);\n            this.btnBin.Name = \"btnBin\";\n            this.btnBin.Size = new System.Drawing.Size(227, 39);\n            this.btnBin.TabIndex = 215;\n            this.btnBin.TabStop = false;\n            this.btnBin.Text = \"+ Add everything selected to bin\";\n            this.btnBin.UseVisualStyleBackColor = false;\n            this.btnBin.Click += new System.EventHandler(this.btnBin_Click);\n            // \n            // lnkStatus\n            // \n            this.lnkStatus.ActiveLinkColor = System.Drawing.Color.Fuchsia;\n            this.lnkStatus.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.lnkStatus.AutoEllipsis = true;\n            this.lnkStatus.BackColor = System.Drawing.Color.Transparent;\n            this.lnkStatus.Font = new System.Drawing.Font(\"Segoe UI Variable Display Semil\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lnkStatus.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;\n            this.lnkStatus.LinkColor = System.Drawing.Color.Black;\n            this.lnkStatus.Location = new System.Drawing.Point(39, 628);\n            this.lnkStatus.Name = \"lnkStatus\";\n            this.lnkStatus.Size = new System.Drawing.Size(453, 20);\n            this.lnkStatus.TabIndex = 196;\n            this.lnkStatus.TabStop = true;\n            this.lnkStatus.Text = \"Depending on what you are going to be using your Windows 11 device for, you can l\" +\n    \"et Junkctrl declutter it.\";\n            this.lnkStatus.VisitedLinkColor = System.Drawing.Color.Fuchsia;\n            this.lnkStatus.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lnkStatus_LinkClicked);\n            // \n            // progressBar\n            // \n            this.progressBar.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.progressBar.BackColor = System.Drawing.Color.White;\n            this.progressBar.Location = new System.Drawing.Point(42, 521);\n            this.progressBar.Name = \"progressBar\";\n            this.progressBar.Size = new System.Drawing.Size(485, 5);\n            this.progressBar.TabIndex = 166;\n            this.progressBar.Visible = false;\n            // \n            // checkResults\n            // \n            this.checkResults.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.checkResults.BackColor = System.Drawing.Color.White;\n            this.checkResults.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.checkResults.CheckOnClick = true;\n            this.checkResults.Font = new System.Drawing.Font(\"Segoe UI Variable Text Light\", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.checkResults.FormattingEnabled = true;\n            this.checkResults.Location = new System.Drawing.Point(42, 53);\n            this.checkResults.Name = \"checkResults\";\n            this.checkResults.Size = new System.Drawing.Size(523, 462);\n            this.checkResults.Sorted = true;\n            this.checkResults.TabIndex = 204;\n            this.checkResults.Visible = false;\n            // \n            // pnlForm\n            // \n            this.pnlForm.Controls.Add(this.sc);\n            this.pnlForm.Dock = System.Windows.Forms.DockStyle.Fill;\n            this.pnlForm.Location = new System.Drawing.Point(0, 0);\n            this.pnlForm.Name = \"pnlForm\";\n            this.pnlForm.Size = new System.Drawing.Size(1026, 663);\n            this.pnlForm.TabIndex = 221;\n            // \n            // MainForm\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.BackColor = System.Drawing.Color.White;\n            this.ClientSize = new System.Drawing.Size(1026, 663);\n            this.Controls.Add(this.pnlForm);\n            this.MinimumSize = new System.Drawing.Size(942, 523);\n            this.Name = \"MainForm\";\n            this.ShowIcon = false;\n            this.Text = \"Junkctrl\";\n            this.Shown += new System.EventHandler(this.MainForm_Shown);\n            this.contextKebapMenu.ResumeLayout(false);\n            this.contextKebapMenu.PerformLayout();\n            this.sc.Panel1.ResumeLayout(false);\n            this.sc.Panel1.PerformLayout();\n            this.sc.Panel2.ResumeLayout(false);\n            ((System.ComponentModel.ISupportInitialize)(this.sc)).EndInit();\n            this.sc.ResumeLayout(false);\n            ((System.ComponentModel.ISupportInitialize)(this.pbBackground)).EndInit();\n            this.pnlMain.ResumeLayout(false);\n            this.pnlMain.PerformLayout();\n            this.pnlCapabilities.ResumeLayout(false);\n            this.pnlCapabilities.PerformLayout();\n            this.pnlForm.ResumeLayout(false);\n            this.ResumeLayout(false);\n\n        }\n\n        #endregion\n        private System.Windows.Forms.ToolStripTextBox textHeaderAppInfo;\n        private System.Windows.Forms.ContextMenuStrip contextKebapMenu;\n        private System.Windows.Forms.ToolStripMenuItem menuPluginsDir;\n        private System.Windows.Forms.ToolStripMenuItem menuPluginDelete;\n        private System.Windows.Forms.ToolStripMenuItem menuPluginAdd;\n        private System.Windows.Forms.ToolStripMenuItem menuPluginEdit;\n        private System.Windows.Forms.Button btnKebapMenu;\n        private System.Windows.Forms.LinkLabel lnkAppMediaTwitter;\n        private System.Windows.Forms.LinkLabel lnkAppMediaDonate;\n        private System.Windows.Forms.LinkLabel _Assembly;\n        private System.Windows.Forms.ProgressBar progressBar;\n        private System.Windows.Forms.LinkLabel lnkStatus;\n        private System.Windows.Forms.Button btnBin;\n        private System.Windows.Forms.Button btnSearch;\n        private System.Windows.Forms.CheckedListBox checkResults;\n        private System.Windows.Forms.TreeView tvwFeatures;\n        private System.Windows.Forms.Panel pnlMain;\n        private System.Windows.Forms.Button btnBack;\n        private System.Windows.Forms.Panel pnlCapabilities;\n        private System.Windows.Forms.Label lblAppInfo;\n        private System.Windows.Forms.Label lblItemsInRecycleList;\n        private System.Windows.Forms.LinkLabel lnkAppMediaGitHub;\n        private System.Windows.Forms.LinkLabel lnkAddTopTenToBin;\n        private System.Windows.Forms.PictureBox pbBackground;\n        private System.Windows.Forms.LinkLabel lnkHeader;\n        public System.Windows.Forms.SplitContainer sc;\n        public System.Windows.Forms.Panel pnlForm;\n    }\n}\n\n"]}
{"filename": "Junkctrl/Helpers/ErrorHelper.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Windows.Forms;\n\nnamespace Junkctrl\n{\n    internal class ErrorHelper\n    {\n        private static CheckedListBox target = null;\n        private static ErrorHelper instance;                // Single instance of ErrorHelper\n        private List<string> logList = new List<string>(); // Add a List<string> to store log messages\n\n        // Errorlogger to target richLog", "        private static CheckedListBox target = null;\n        private static ErrorHelper instance;                // Single instance of ErrorHelper\n        private List<string> logList = new List<string>(); // Add a List<string> to store log messages\n\n        // Errorlogger to target richLog\n        public void SetTarget(CheckedListBox listBox)\n        {\n            target = listBox;\n        }\n\n        public void Log(string format, params object[] args)\n        {\n            format += \"\\r\\n\";\n\n            try\n            {\n                target.Invoke(new Action(() =>\n                {\n                    string logMessage = string.Format(format, args);\n                    target.Items.Add(logMessage);\n                    logList.Add(logMessage); // Add the log message to the logList\n                }));\n            }\n            catch { }\n        }\n\n        // Get the single instance of ErrorHelper", "        public void Log(string format, params object[] args)\n        {\n            format += \"\\r\\n\";\n\n            try\n            {\n                target.Invoke(new Action(() =>\n                {\n                    string logMessage = string.Format(format, args);\n                    target.Items.Add(logMessage);\n                    logList.Add(logMessage); // Add the log message to the logList\n                }));\n            }\n            catch { }\n        }\n\n        // Get the single instance of ErrorHelper", "        public static ErrorHelper Instance\n        {\n            get\n            {\n                if (instance == null)\n                {\n                    instance = new ErrorHelper();\n                }\n                return instance;\n            }\n        }\n\n        public List<string> GetLogList()\n        {\n            return logList; // Return the logList\n        }\n    }\n}"]}
{"filename": "Junkctrl/Helpers/OsHelper.cs", "chunked_list": ["\ufeffusing Microsoft.Win32;\nusing System;\nusing System.Windows.Forms;\n\nnamespace HelperTool\n{\n    public static class OsHelper\n    {\n        public static readonly string thisOS = IsWin11() + \"\\x20\" + GetVersion();\n\n        public static bool IsWin11()\n        {\n            try\n            {\n                RegistryKey key = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n                int osbuild = Convert.ToInt32(key.GetValue(\"CurrentBuildNumber\"));", "        public static readonly string thisOS = IsWin11() + \"\\x20\" + GetVersion();\n\n        public static bool IsWin11()\n        {\n            try\n            {\n                RegistryKey key = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n                int osbuild = Convert.ToInt32(key.GetValue(\"CurrentBuildNumber\"));\n                if (osbuild >= 21996)\n                {\n                    return true;\n                }\n            }", "                if (osbuild >= 21996)\n                {\n                    return true;\n                }\n            }\n            catch (Exception ex)\n            { MessageBox.Show(ex.Message); }\n            return false;\n        }\n\n        public static string GetVersion()\n        {\n            RegistryKey key = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n\n            var UBR = key.GetValue(\"UBR\").ToString();\n            var CurrentBuild = key.GetValue(\"CurrentBuild\").ToString();\n\n            string version = CurrentBuild + \".\" + UBR;\n\n            return \"Build \" + version;\n        }\n    }\n}", "        public static string GetVersion()\n        {\n            RegistryKey key = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\");\n\n            var UBR = key.GetValue(\"UBR\").ToString();\n            var CurrentBuild = key.GetValue(\"CurrentBuild\").ToString();\n\n            string version = CurrentBuild + \".\" + UBR;\n\n            return \"Build \" + version;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Helpers/HelperTool.cs", "chunked_list": ["\ufeffusing Junkctrl;\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Windows.Forms;\n\nnamespace HelperTool\n{\n    internal class Utils\n\n    {", "namespace HelperTool\n{\n    internal class Utils\n\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n\n        public static class Uri\n        {\n            public const string URL_ASSEMBLY = \"https://raw.githubusercontent.com/builtbybel/JunkCtrl/main/Junkctrl/Properties/AssemblyInfo.cs\";\n            public const string URL_TWITTER = \"https://twitter.com/builtbybel\";", "            public const string URL_ASSEMBLY = \"https://raw.githubusercontent.com/builtbybel/JunkCtrl/main/Junkctrl/Properties/AssemblyInfo.cs\";\n            public const string URL_TWITTER = \"https://twitter.com/builtbybel\";\n            public const string URL_DONATE = \"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=donate@builtbybel.com&lc=US&item_name=%20Builtbybel&no_note=0&cn=&currency_code=USD&bn=PP-DonationsBF:btn_donateCC_LG.gif:NonHosted\";\n            public const string URL_GITREPO = \"https://github.com/builtbybel/Junkctrl\";\n            public const string URL_ABOUTAPP = \"https://www.builtbybel.com/blog/about-junkctrl\";\n            public const string URL_GITLATEST = URL_GITREPO + \"/releases/latest\";\n        }\n\n        public static class Data\n        {\n            public static string DataRootDir = Application.StartupPath +\n                                                @\"\\app\\\";\n", "        public static class Data\n        {\n            public static string DataRootDir = Application.StartupPath +\n                                                @\"\\app\\\";\n\n            public static string PluginsDir = Application.StartupPath +\n                                               @\"\\plugins\\\";\n        }\n\n        // Create data directory if non present\n        public static void CreateDataDir()\n        {\n            bool dirExists = Directory.Exists(@\"app\");", "        public static void CreateDataDir()\n        {\n            bool dirExists = Directory.Exists(@\"app\");\n            if (!dirExists)\n                Directory.CreateDirectory(@\"app\");\n        }\n\n        public static void CheckForUpdates()\n        {\n            if (IsInet() == true)\n            {\n                try\n                {\n                    string assemblyInfo = new WebClient().DownloadString(Utils.Uri.URL_ASSEMBLY);\n\n                    var readVersion = assemblyInfo.Split('\\n');\n                    var infoVersion = readVersion.Where(t => t.Contains(\"[assembly: AssemblyFileVersion\"));\n                    var latestVersion = \"\";", "            if (IsInet() == true)\n            {\n                try\n                {\n                    string assemblyInfo = new WebClient().DownloadString(Utils.Uri.URL_ASSEMBLY);\n\n                    var readVersion = assemblyInfo.Split('\\n');\n                    var infoVersion = readVersion.Where(t => t.Contains(\"[assembly: AssemblyFileVersion\"));\n                    var latestVersion = \"\";\n                    foreach (var item in infoVersion)\n                    {\n                        latestVersion = item.Substring(item.IndexOf('(') + 2, item.LastIndexOf(')') - item.IndexOf('(') - 3);\n                    }\n", "                    foreach (var item in infoVersion)\n                    {\n                        latestVersion = item.Substring(item.IndexOf('(') + 2, item.LastIndexOf(')') - item.IndexOf('(') - 3);\n                    }\n\n                    if (latestVersion ==\n                        Program.GetCurrentVersionTostring())                      // Up-to-date\n                    {\n                        MessageBox.Show($\"No new updates available.\");\n                    }\n", "                    if (latestVersion !=                                        // Update available\n                          Program.GetCurrentVersionTostring())\n\n                    {\n                        if (MessageBox.Show($\"App version {latestVersion} available.\\nDo you want to open the Download page?\", \"App update available\", MessageBoxButtons.YesNo, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1) == DialogResult.Yes)\n                            Process.Start(HelperTool.Utils.Uri.URL_GITLATEST);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    MessageBox.Show($\"Checking for App updates failed.\\n{ex.Message}\");\n                }\n            }", "                catch (Exception ex)\n                {\n                    MessageBox.Show($\"Checking for App updates failed.\\n{ex.Message}\");\n                }\n            }\n            else if (IsInet() == false)\n            {\n                MessageBox.Show($\"Problem on Internet connection: Checking for App updates failed\");\n            }\n        }\n\n        // Check Inet", "        public static bool IsInet()\n        {\n            try\n            {\n                using (var CheckInternet = new WebClient())\n                using (CheckInternet.OpenRead(\"http://clients3.google.com/generate_204\"))\n                {\n                    return true;\n                }\n            }\n            catch\n            {\n                return false;\n            }\n        }\n    }\n}"]}
{"filename": "Junkctrl/Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     Dieser Code wurde von einem Tool generiert.\n//     Laufzeitversion:4.0.30319.42000\n//\n//     \u00c4nderungen an dieser Datei k\u00f6nnen falsches Verhalten verursachen und gehen verloren, wenn\n//     der Code erneut generiert wird.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace Junkctrl.Properties {\n    \n    \n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"17.6.0.0\")]\n    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {\n        \n        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        ", "        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        \n        public static Settings Default {\n            get {\n                return defaultInstance;\n            }\n        }\n    }\n}\n"]}
{"filename": "Junkctrl/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     Dieser Code wurde von einem Tool generiert.\n//     Laufzeitversion:4.0.30319.42000\n//\n//     \u00c4nderungen an dieser Datei k\u00f6nnen falsches Verhalten verursachen und gehen verloren, wenn\n//     der Code erneut generiert wird.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace Junkctrl.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.\n    /// </summary>\n    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert", "    /// </summary>\n    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert\n    // -Klasse \u00fcber ein Tool wie ResGen oder Visual Studio automatisch generiert.\n    // Um einen Member hinzuzuf\u00fcgen oder zu entfernen, bearbeiten Sie die .ResX-Datei und f\u00fchren dann ResGen\n    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        ", "    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zur\u00fcck, die von dieser Klasse verwendet wird.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {", "                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"Junkctrl.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   \u00dcberschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads f\u00fcr alle\n        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n        \n        /// <summary>\n        ///   Sucht eine lokalisierte Zeichenfolge, die 1527c705-839a-4832-9118-54d4Bd6a0c89\n        ///c5e2524a-ea46-4f67-841f-6a9465d9d515\n        ///E2A4F912-2574-4A75-9BB0-0D023378592B\n        ///F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE\n        ///InputApp\n        ///Microsoft.AAD.BrokerPlugin\n        ///Microsoft.AccountsControl\n        ///Microsoft.Advertising.Xaml\n        ///Microsoft.AsyncTextService\n        ///Microsoft.BioEnrollment\n        ///Microsoft.CredDialogHost\n        ///Microsoft.ECApp\n        ///Microsoft.LockApp\n        ///Microsoft.MicrosoftEdge\n        ///Microsoft.MicrosoftEdgeDevToolsClient\n        ///Microsoft.NET\n        ///Microsoft.PPIProjection\n        ///Microsoft.Services.Store.Engagement\n        ///Microsoft.V [Rest der Zeichenfolge wurde abgeschnitten]&quot;; \u00e4hnelt.\n        /// </summary>\n        internal static string systemApps {\n            get {\n                return ResourceManager.GetString(\"systemApps\", resourceCulture);\n            }\n        }\n    }\n}\n"]}
{"filename": "Junkctrl/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n// Allgemeine Informationen \u00fcber eine Assembly werden \u00fcber die folgenden\n// Attribute gesteuert. \u00c4ndern Sie diese Attributwerte, um die Informationen zu \u00e4ndern,\n// die einer Assembly zugeordnet sind.\n[assembly: AssemblyTitle(\"Junkctrl\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"Builtbybel\")]\n[assembly: AssemblyProduct(\"Junkctrl\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"Builtbybel\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Durch Festlegen von ComVisible auf FALSE werden die Typen in dieser Assembly\n// f\u00fcr COM-Komponenten unsichtbar.  Wenn Sie auf einen Typ in dieser Assembly von", "// Durch Festlegen von ComVisible auf FALSE werden die Typen in dieser Assembly\n// f\u00fcr COM-Komponenten unsichtbar.  Wenn Sie auf einen Typ in dieser Assembly von\n// COM aus zugreifen m\u00fcssen, sollten Sie das ComVisible-Attribut f\u00fcr diesen Typ auf \"True\" festlegen.\n[assembly: ComVisible(false)]\n\n// Die folgende GUID bestimmt die ID der Typbibliothek, wenn dieses Projekt f\u00fcr COM verf\u00fcgbar gemacht wird\n[assembly: Guid(\"e538b563-dcd3-48c3-a0c1-5c83b56ccecd\")]\n\n// Versionsinformationen f\u00fcr eine Assembly bestehen aus den folgenden vier Werten:\n//", "// Versionsinformationen f\u00fcr eine Assembly bestehen aus den folgenden vier Werten:\n//\n//      Hauptversion\n//      Nebenversion\n//      Buildnummer\n//      Revision\n//\n// Sie k\u00f6nnen alle Werte angeben oder Standardwerte f\u00fcr die Build- und Revisionsnummern verwenden,\n// indem Sie \"*\" wie unten gezeigt eingeben:\n// [assembly: AssemblyVersion(\"1.0.*\")]", "// indem Sie \"*\" wie unten gezeigt eingeben:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"0.55.1\")]\n[assembly: AssemblyFileVersion(\"0.55.1\")]\n"]}
{"filename": "Junkctrl/Features/IEJunk.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace Junkctrl\n{\n    public static class BloatwareList\n    {\n        // Our Windows 11 bloatware list\n        public static IEnumerable<string> GetList()\n        {\n            var apps = new List<string>\n            {\n                \"2FE3CB00.PICSART-PHOTOSTUDIO\",\n                \"4DF9E0F8.Netflix\",\n                \"5319275A.WhatsAppDesktop\",\n                \"9E2F88E3.TWITTER\",\n                \"NAVER.LINEwin8_8ptj331gd3tyt\",\n                \"SpotifyAB.SpotifyMusic\",\n                \"king.com.CandyCrushFriends\",\n                \"king.com.CandyCrushSaga\",\n                \"king.com.FarmHeroesSaga\",\n                \"22364Disney.ESPNBetaPWA\",\n                \"5A894077.McAfeeSecurity\",\n                \"AdobeSystemsIncorporated.AdobeCreativeCloudExpress\",\n                \"AmazonVideo.PrimeVideo\",\n                \"AppUp.IntelGraphicsExperience\",\n                \"B9ECED6F.ASUSPCAssistant\",\n                \"B9ECED6F.ScreenPadMaster\",\n                \"BytedancePte.Ltd.TikTok\",\n                \"Clipchamp.Clipchamp\",\n                \"DTSInc.DTSAudioProcess\",\n                \"AdobeSystemsIncorporated.AdobeLightroom\",\n                \"AdobeSystemsIncorporated.AdobePhotoshopExpress\",\n                \"Clipchamp.Clipchamp_yxz26nhyzhsrt\",\n                \"CorelCorporation.PaintShopPro\",\n                \"FACEBOOK.317180B0BB486\",\n                \"Facebook.InstagramBeta\",\n                \"AD2F1837.HPJumpStarts\",\n                \"AD2F1837.HPPCHardwareDiagnosticsWindows\",\n                \"AD2F1837.HPPowerManager\",\n                \"AD2F1837.HPPrivacySettings\",\n                \"AD2F1837.HPSupportAssistant\",\n                \"AD2F1837.HPSureShieldAI\",\n                \"AD2F1837.HPSystemInformation\",\n                \"AD2F1837.HPQuickDrop\",\n                \"AD2F1837.HPWorkWell\",\n                \"AD2F1837.myHP\",\n                \"AD2F1837.HPDesktopSupportUtilities\",\n                \"AD2F1837.HPQuickTouch\",\n                \"AD2F1837.HPEasyClean\",\n                \"AD2F1837.HPSystemInformation\",\n                \"Microsoft.549981C3F5F10\",\n                \"Microsoft.BingNews\",\n                \"Microsoft.BingWeather\",\n                \"Microsoft.GamingApp\",\n                \"Microsoft.Getstarted\",\n                \"Microsoft.Microsoft3DViewer\",\n                \"Microsoft.MicrosoftOfficeHub\",\n                \"Microsoft.MicrosoftSolitaireCollection\",\n                \"Microsoft.MicrosoftStickyNotes\",\n                \"Microsoft.MixedReality.Portal\",\n                \"Microsoft.Office.OneNote\",\n                \"Microsoft.OneDriveSync\",\n                \"Microsoft.OneConnect\",\n                \"Microsoft.People\",\n                \"Microsoft.Print3D\",\n                \"Microsoft.SkypeApp\",\n                \"Microsoft.Wallet\",\n                \"Microsoft.WindowsSoundRecorder\"\n            };\n\n            return apps;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/AppsEngine.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace Junkctrl\n{\n    public static class BloatwareList\n    {\n        // Our Windows 11 bloatware list\n        public static IEnumerable<string> GetList()\n        {\n            var apps = new List<string>\n            {\n                \"2FE3CB00.PICSART-PHOTOSTUDIO\",\n                \"4DF9E0F8.Netflix\",\n                \"5319275A.WhatsAppDesktop\",\n                \"9E2F88E3.TWITTER\",\n                \"NAVER.LINEwin8_8ptj331gd3tyt\",\n                \"SpotifyAB.SpotifyMusic\",\n                \"king.com.CandyCrushFriends\",\n                \"king.com.CandyCrushSaga\",\n                \"king.com.FarmHeroesSaga\",\n                \"22364Disney.ESPNBetaPWA\",\n                \"5A894077.McAfeeSecurity\",\n                \"AdobeSystemsIncorporated.AdobeCreativeCloudExpress\",\n                \"AmazonVideo.PrimeVideo\",\n                \"AppUp.IntelGraphicsExperience\",\n                \"B9ECED6F.ASUSPCAssistant\",\n                \"B9ECED6F.ScreenPadMaster\",\n                \"BytedancePte.Ltd.TikTok\",\n                \"Clipchamp.Clipchamp\",\n                \"DTSInc.DTSAudioProcess\",\n                \"AdobeSystemsIncorporated.AdobeLightroom\",\n                \"AdobeSystemsIncorporated.AdobePhotoshopExpress\",\n                \"Clipchamp.Clipchamp_yxz26nhyzhsrt\",\n                \"CorelCorporation.PaintShopPro\",\n                \"FACEBOOK.317180B0BB486\",\n                \"Facebook.InstagramBeta\",\n                \"AD2F1837.HPJumpStarts\",\n                \"AD2F1837.HPPCHardwareDiagnosticsWindows\",\n                \"AD2F1837.HPPowerManager\",\n                \"AD2F1837.HPPrivacySettings\",\n                \"AD2F1837.HPSupportAssistant\",\n                \"AD2F1837.HPSureShieldAI\",\n                \"AD2F1837.HPSystemInformation\",\n                \"AD2F1837.HPQuickDrop\",\n                \"AD2F1837.HPWorkWell\",\n                \"AD2F1837.myHP\",\n                \"AD2F1837.HPDesktopSupportUtilities\",\n                \"AD2F1837.HPQuickTouch\",\n                \"AD2F1837.HPEasyClean\",\n                \"AD2F1837.HPSystemInformation\",\n                \"Microsoft.549981C3F5F10\",\n                \"Microsoft.BingNews\",\n                \"Microsoft.BingWeather\",\n                \"Microsoft.GamingApp\",\n                \"Microsoft.Getstarted\",\n                \"Microsoft.Microsoft3DViewer\",\n                \"Microsoft.MicrosoftOfficeHub\",\n                \"Microsoft.MicrosoftSolitaireCollection\",\n                \"Microsoft.MicrosoftStickyNotes\",\n                \"Microsoft.MixedReality.Portal\",\n                \"Microsoft.Office.OneNote\",\n                \"Microsoft.OneDriveSync\",\n                \"Microsoft.OneConnect\",\n                \"Microsoft.People\",\n                \"Microsoft.Print3D\",\n                \"Microsoft.SkypeApp\",\n                \"Microsoft.Wallet\",\n                \"Microsoft.WindowsSoundRecorder\"\n            };\n\n            return apps;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/AutoJunk.cs", "chunked_list": ["\ufeffusing Junkctrl;\nusing System.Linq;\nusing System.Management.Automation;\nusing System.Text.RegularExpressions;\n\nnamespace Features.Feature.Apps\n{\n    internal class AutoJunk : FeatureBase\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        private readonly PowerShell powerShell = PowerShell.Create();\n", "        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        private readonly PowerShell powerShell = PowerShell.Create();\n\n        public override string ID()\n        {\n            return \"Built-in community scan for junk apps\";\n        }\n\n        public override string Info()\n        {\n            return \"This option will scan a dynamic signature file for bloatware and compare it with your installed apps. \" +\n                \"The apps listed here are labeled as bloatware by the community. \" +\n                \"Of course, it is up to you whether you actually delete these apps.\";\n        }\n", "        public override string Info()\n        {\n            return \"This option will scan a dynamic signature file for bloatware and compare it with your installed apps. \" +\n                \"The apps listed here are labeled as bloatware by the community. \" +\n                \"Of course, it is up to you whether you actually delete these apps.\";\n        }\n\n        public override bool CheckFeature()\n        {\n            var apps = BloatwareList.GetList();\n\n            powerShell.Commands.Clear();\n            powerShell.AddCommand(\"get-appxpackage\");\n            powerShell.AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n            bool foundMatches = false; // Flag variable to track if matches are found\n", "            foreach (PSObject result in powerShell.Invoke())\n            {\n                string current = result.Properties[\"Name\"].Value.ToString();\n\n                if (apps.Contains(Regex.Replace(current, \"(@{Name=)|(})\", \"\")))\n                {\n                    logger.Log((Regex.Replace(current, \"(@{Name=)|(})\", \"\")));\n                    foundMatches = true; // Set the flag to true when a match is found\n                }\n            }\n", "            if (!foundMatches)\n            {\n                logger.Log(\"Your system is free of junk.\");\n            }\n\n            return true;\n        }\n\n        public override bool DoFeature()\n        {\n \n            return true;\n        }\n", "        public override bool DoFeature()\n        {\n \n            return true;\n        }\n\n        public override bool UndoFeature()\n        {\n            return false;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/PrivateApps.cs", "chunked_list": ["\ufeffusing Junkctrl;\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Management.Automation;\n\nnamespace Features.Feature.Apps\n{\n    internal class PrivateApps : FeatureBase\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;", "    internal class PrivateApps : FeatureBase\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        private readonly PowerShell powerShell = PowerShell.Create();\n\n        public override string ID()\n        {\n            return \"Built-in private scan for junk apps\";\n        }\n\n        public override string Info()\n        {\n            return \"This option will search a static signature file for junk \\\"badApps\\\" located in the \\\"data\\\" data directory of Junkctrl. \" +\n                \"The file is a plain text file that can be modified with any text editor. \" +\n                \"It contains the app names and corresponding PowerShell commands for removal. So you have full control.\";\n        }\n", "        public override string Info()\n        {\n            return \"This option will search a static signature file for junk \\\"badApps\\\" located in the \\\"data\\\" data directory of Junkctrl. \" +\n                \"The file is a plain text file that can be modified with any text editor. \" +\n                \"It contains the app names and corresponding PowerShell commands for removal. So you have full control.\";\n        }\n\n        public override bool CheckFeature()\n        {\n            try\n            {\n                string bloatyFilePath = Path.Combine(HelperTool.Utils.Data.DataRootDir, \"badApps.txt\");", "                if (!File.Exists(bloatyFilePath))\n                {\n                    logger.Log(\"[!] Could not find private signature file \\\"badApps.txt\\\" in \" + HelperTool.Utils.Data.DataRootDir);\n                    return false; // Indicate failure\n                }\n\n                string[] num = File.ReadAllLines(bloatyFilePath);\n\n                using (PowerShell powerShell = PowerShell.Create())\n                {\n                    powerShell.AddCommand(\"get-appxpackage\")\n                        .AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n                    bool foundMatch = false;\n", "                using (PowerShell powerShell = PowerShell.Create())\n                {\n                    powerShell.AddCommand(\"get-appxpackage\")\n                        .AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n                    bool foundMatch = false;\n\n                    foreach (string line in num)\n                    {\n                        string[] package = line.Split(':');\n                        string appx = package[0].Trim();\n\n                        //bool matchFound = false;", "                        foreach (PSObject result in powerShell.Invoke())\n                        {\n                            string current = result.ToString(); // Get the current app\n\n                            if (current.Contains(appx))\n                            {\n                                logger.Log(appx);\n                               // matchFound = true;\n                                foundMatch = true;\n                                break;\n                            }\n                        }\n", "                       /* if (!matchFound)\n                        {\n                            logger.Log(\"The appx \\\"\" + appx + \"\\\" was not found.\");\n                        }*/\n                    }\n\n                    if (!foundMatch)\n                    {\n                        logger.Log(\"[!] Your private scan is free of junk.\");\n                    }\n                }\n            }", "                        logger.Log(\"[!] Your private scan is free of junk.\");\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                logger.Log(\"[!] An error occurred: \" + ex.Message);\n                return false; // Indicate failure\n            }\n\n            return true;\n        }\n\n", "        public override bool DoFeature()\n        {\n            return true;\n        }\n\n        public override bool UndoFeature()\n        {\n            return false;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/AutoApps.cs", "chunked_list": ["\ufeffusing Junkctrl;\nusing System.Linq;\nusing System.Management.Automation;\nusing System.Text.RegularExpressions;\n\nnamespace Features.Feature.Apps\n{\n    internal class AutoApps : FeatureBase\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        private readonly PowerShell powerShell = PowerShell.Create();\n", "        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        private readonly PowerShell powerShell = PowerShell.Create();\n\n        public override string ID()\n        {\n            return \"Built-in community scan for junk apps\";\n        }\n\n        public override string Info()\n        {\n            return \"This option will scan a dynamic signature file for bloatware and compare it with your installed apps. \" +\n                \"The apps listed here are labeled as bloatware by the community. \" +\n                \"Of course, it is up to you whether you actually delete these apps.\";\n        }\n", "        public override string Info()\n        {\n            return \"This option will scan a dynamic signature file for bloatware and compare it with your installed apps. \" +\n                \"The apps listed here are labeled as bloatware by the community. \" +\n                \"Of course, it is up to you whether you actually delete these apps.\";\n        }\n\n        public override bool CheckFeature()\n        {\n            var apps = BloatwareList.GetList();\n\n            powerShell.Commands.Clear();\n            powerShell.AddCommand(\"get-appxpackage\");\n            powerShell.AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n            bool foundMatches = false; // Flag variable to track if matches are found\n", "            foreach (PSObject result in powerShell.Invoke())\n            {\n                string current = result.Properties[\"Name\"].Value.ToString();\n\n                if (apps.Contains(Regex.Replace(current, \"(@{Name=)|(})\", \"\")))\n                {\n                    logger.Log((Regex.Replace(current, \"(@{Name=)|(})\", \"\")));\n                    foundMatches = true; // Set the flag to true when a match is found\n                }\n            }\n", "            if (!foundMatches)\n            {\n                logger.Log(\"Your system is free of junk.\");\n            }\n\n            return true;\n        }\n\n        public override bool DoFeature()\n        {\n \n            return true;\n        }\n", "        public override bool DoFeature()\n        {\n \n            return true;\n        }\n\n        public override bool UndoFeature()\n        {\n            return false;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/PrivateJunk.cs", "chunked_list": ["\ufeffusing Junkctrl;\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Management.Automation;\n\nnamespace Features.Feature.Apps\n{\n    internal class PrivateJunk : FeatureBase\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;", "    internal class PrivateJunk : FeatureBase\n    {\n        private static readonly ErrorHelper logger = ErrorHelper.Instance;\n        private readonly PowerShell powerShell = PowerShell.Create();\n\n        public override string ID()\n        {\n            return \"Built-in private scan for junk apps\";\n        }\n\n        public override string Info()\n        {\n            return \"This option will search a static signature file for junk \\\"badApps\\\" located in the \\\"data\\\" data directory of Junkctrl. \" +\n                \"The file is a plain text file that can be modified with any text editor. \" +\n                \"It contains the app names and corresponding PowerShell commands for removal. So you have full control.\";\n        }\n", "        public override string Info()\n        {\n            return \"This option will search a static signature file for junk \\\"badApps\\\" located in the \\\"data\\\" data directory of Junkctrl. \" +\n                \"The file is a plain text file that can be modified with any text editor. \" +\n                \"It contains the app names and corresponding PowerShell commands for removal. So you have full control.\";\n        }\n\n        public override bool CheckFeature()\n        {\n            try\n            {\n                string bloatyFilePath = Path.Combine(HelperTool.Utils.Data.DataRootDir, \"badApps.txt\");", "                if (!File.Exists(bloatyFilePath))\n                {\n                    logger.Log(\"[!] Could not find private signature file \\\"badApps.txt\\\" in \" + HelperTool.Utils.Data.DataRootDir);\n                    return false; // Indicate failure\n                }\n\n                string[] num = File.ReadAllLines(bloatyFilePath);\n\n                using (PowerShell powerShell = PowerShell.Create())\n                {\n                    powerShell.AddCommand(\"get-appxpackage\")\n                        .AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n                 //   bool foundMatch = false;\n", "                using (PowerShell powerShell = PowerShell.Create())\n                {\n                    powerShell.AddCommand(\"get-appxpackage\")\n                        .AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n                 //   bool foundMatch = false;\n\n                    foreach (string line in num)\n                    {\n                        string[] package = line.Split(':');\n                        string appx = package[0].Trim();\n\n                        //bool matchFound = false;", "                        foreach (PSObject result in powerShell.Invoke())\n                        {\n                            string current = result.ToString(); // Get the current app\n\n                            if (current.Contains(appx))\n                            {\n                                logger.Log(appx);\n                              //  foundMatch = true;\n                                break;\n                            }\n                        }\n", "                       /* if (!matchFound)\n                        {\n                            logger.Log(\"The appx \\\"\" + appx + \"\\\" was not found.\");\n                        }*/\n                    }\n                    /*if (!foundMatch)\n                        {\n                         logger.Log(\"[!] Your private scan is free of junk.\");\n                        }\n                       }\n                        */\n                }\n            }", "            catch (Exception ex)\n            {\n                logger.Log(\"[!] An error occurred: \" + ex.Message);\n                return false; // Indicate failure\n            }\n\n            return true;\n        }\n\n\n        public override bool DoFeature()\n        {\n            return true;\n        }\n", "        public override bool DoFeature()\n        {\n            return true;\n        }\n\n        public override bool UndoFeature()\n        {\n            return false;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/TopTenApps.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace Junkctrl\n{\n    public static class BloatwareTopTen\n    {\n        // Our Windows 11 Hall Of Shame\n        public static IEnumerable<string> GetList()\n        {\n            var apps = new List<string>\n            {\n                \"BytedancePte.Ltd.TikTok\",\n                \"Facebook.InstagramBeta\",\n                \"Microsoft.MicrosoftOfficeHub\",\n                \"Microsoft.MicrosoftSolitaireCollection\",\n                \"Microsoft.ZuneVideo\",\n                \"Microsoft.MixedReality.Portal\",\n                \"Microsoft.Getstarted\",\n                \"Microsoft.Office.OneNote\",\n                \"Microsoft.Print3D\",\n                \"Microsoft.People\",\n            };\n\n            return apps;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Features/IETopJunk.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\n\nnamespace Junkctrl\n{\n    public static class JunkTopTen\n    {\n        // Our Windows 11 Hall Of Shame\n        public static IEnumerable<string> GetList()\n        {\n            var apps = new List<string>\n            {\n                \"BytedancePte.Ltd.TikTok\",\n                \"Facebook.InstagramBeta\",\n                \"Microsoft.MicrosoftOfficeHub\",\n                \"Microsoft.MicrosoftSolitaireCollection\",\n                \"Microsoft.ZuneVideo\",\n                \"Microsoft.MixedReality.Portal\",\n                \"Microsoft.Getstarted\",\n                \"Microsoft.Office.OneNote\",\n                \"Microsoft.Print3D\",\n                \"Microsoft.People\",\n            };\n\n            return apps;\n        }\n    }\n}"]}
{"filename": "Junkctrl/Views/CopilotPageView.Designer.cs", "chunked_list": ["\ufeffnamespace Junkctrl.Views\n{\n    partial class CopilotPageView\n    {\n        /// <summary> \n        /// Erforderliche Designervariable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary> \n        /// Verwendete Ressourcen bereinigen.\n        /// </summary>\n        /// <param name=\"disposing\">True, wenn verwaltete Ressourcen gel\u00f6scht werden sollen; andernfalls False.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Vom Komponenten-Designer generierter Code\n\n        /// <summary> \n        /// Erforderliche Methode f\u00fcr die Designerunterst\u00fctzung. \n        /// Der Inhalt der Methode darf nicht mit dem Code-Editor ge\u00e4ndert werden.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            this.components = new System.ComponentModel.Container();\n            System.Windows.Forms.ToolStripMenuItem menuAppsExport;\n            this.menuAppsRemoveAll = new System.Windows.Forms.ToolStripMenuItem();\n            this.menuAppsImport = new System.Windows.Forms.ToolStripMenuItem();\n            this.contextKebapMenu = new System.Windows.Forms.ContextMenuStrip(this.components);\n            this.textHeaderAppInfo = new System.Windows.Forms.ToolStripTextBox();\n            this.checkAppsSystem = new System.Windows.Forms.CheckBox();\n            this.textSearch = new System.Windows.Forms.TextBox();\n            this.lblHeader = new System.Windows.Forms.Label();\n            this.btnUninstall = new System.Windows.Forms.Button();\n            this.lblAppsBinOptions = new System.Windows.Forms.LinkLabel();\n            this.listRemove = new System.Windows.Forms.ListBox();\n            this.btnRefresh = new System.Windows.Forms.Button();\n            this.btnRestoreAll = new System.Windows.Forms.Button();\n            this.btnRestore = new System.Windows.Forms.Button();\n            this.btnMoveAll = new System.Windows.Forms.Button();\n            this.btnMove = new System.Windows.Forms.Button();\n            this.btnMeatballMenu = new System.Windows.Forms.Button();\n            this.listApps = new System.Windows.Forms.ListBox();\n            this.rtbStatus = new System.Windows.Forms.RichTextBox();\n            this.lblAppsInstalled = new System.Windows.Forms.Label();\n            this.lblAppsBin = new System.Windows.Forms.Label();\n            this.btnBack = new System.Windows.Forms.Button();\n            menuAppsExport = new System.Windows.Forms.ToolStripMenuItem();\n            this.contextKebapMenu.SuspendLayout();\n            this.SuspendLayout();\n            // \n            // menuAppsExport\n            // \n            menuAppsExport.Name = \"menuAppsExport\";\n            menuAppsExport.Size = new System.Drawing.Size(260, 22);\n            menuAppsExport.Text = \"Export junk in bin\";\n            menuAppsExport.Click += new System.EventHandler(this.menuAppsExport_Click);\n            // \n            // menuAppsRemoveAll\n            // \n            this.menuAppsRemoveAll.Name = \"menuAppsRemoveAll\";\n            this.menuAppsRemoveAll.Size = new System.Drawing.Size(260, 22);\n            this.menuAppsRemoveAll.Text = \"Uninstall all apps\";\n            this.menuAppsRemoveAll.Click += new System.EventHandler(this.menuAppsRemoveAll_Click);\n            // \n            // menuAppsImport\n            // \n            this.menuAppsImport.Name = \"menuAppsImport\";\n            this.menuAppsImport.Size = new System.Drawing.Size(260, 22);\n            this.menuAppsImport.Text = \"Import junk list\";\n            this.menuAppsImport.Click += new System.EventHandler(this.menuAppsImport_Click);\n            // \n            // contextKebapMenu\n            // \n            this.contextKebapMenu.BackColor = System.Drawing.Color.White;\n            this.contextKebapMenu.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.contextKebapMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {\n            this.textHeaderAppInfo,\n            this.menuAppsImport,\n            menuAppsExport,\n            this.menuAppsRemoveAll});\n            this.contextKebapMenu.Name = \"menuMain\";\n            this.contextKebapMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;\n            this.contextKebapMenu.Size = new System.Drawing.Size(261, 103);\n            this.contextKebapMenu.Text = \"Info\";\n            // \n            // textHeaderAppInfo\n            // \n            this.textHeaderAppInfo.BackColor = System.Drawing.Color.White;\n            this.textHeaderAppInfo.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.textHeaderAppInfo.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semibold\", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.textHeaderAppInfo.ForeColor = System.Drawing.Color.Gray;\n            this.textHeaderAppInfo.Margin = new System.Windows.Forms.Padding(5, 5, 0, 10);\n            this.textHeaderAppInfo.Name = \"textHeaderAppInfo\";\n            this.textHeaderAppInfo.ReadOnly = true;\n            this.textHeaderAppInfo.Size = new System.Drawing.Size(200, 18);\n            this.textHeaderAppInfo.Text = \"App-Settings\";\n            // \n            // checkAppsSystem\n            // \n            this.checkAppsSystem.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.checkAppsSystem.AutoSize = true;\n            this.checkAppsSystem.FlatAppearance.BorderSize = 0;\n            this.checkAppsSystem.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.checkAppsSystem.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.checkAppsSystem.ForeColor = System.Drawing.Color.Gray;\n            this.checkAppsSystem.Location = new System.Drawing.Point(36, 751);\n            this.checkAppsSystem.Name = \"checkAppsSystem\";\n            this.checkAppsSystem.Size = new System.Drawing.Size(132, 21);\n            this.checkAppsSystem.TabIndex = 185;\n            this.checkAppsSystem.Text = \"Show system apps\";\n            this.checkAppsSystem.UseVisualStyleBackColor = true;\n            this.checkAppsSystem.CheckedChanged += new System.EventHandler(this.checkAppsSystem_CheckedChanged);\n            // \n            // textSearch\n            // \n            this.textSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));\n            this.textSearch.BackColor = System.Drawing.Color.WhiteSmoke;\n            this.textSearch.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.textSearch.ForeColor = System.Drawing.Color.Gray;\n            this.textSearch.Location = new System.Drawing.Point(36, 708);\n            this.textSearch.Multiline = true;\n            this.textSearch.Name = \"textSearch\";\n            this.textSearch.Size = new System.Drawing.Size(118, 24);\n            this.textSearch.TabIndex = 196;\n            this.textSearch.Text = \"Search\";\n            this.textSearch.Click += new System.EventHandler(this.textSearch_Click);\n            this.textSearch.TextChanged += new System.EventHandler(this.textSearch_TextChanged);\n            // \n            // lblHeader\n            // \n            this.lblHeader.AutoEllipsis = true;\n            this.lblHeader.AutoSize = true;\n            this.lblHeader.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 15.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lblHeader.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))));\n            this.lblHeader.Location = new System.Drawing.Point(98, 4);\n            this.lblHeader.Name = \"lblHeader\";\n            this.lblHeader.Size = new System.Drawing.Size(127, 28);\n            this.lblHeader.TabIndex = 195;\n            this.lblHeader.Text = \"All my apps\";\n            // \n            // btnUninstall\n            // \n            this.btnUninstall.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnUninstall.BackColor = System.Drawing.Color.Transparent;\n            this.btnUninstall.FlatAppearance.BorderColor = System.Drawing.Color.LightGray;\n            this.btnUninstall.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semibold\", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnUninstall.ForeColor = System.Drawing.Color.Black;\n            this.btnUninstall.Location = new System.Drawing.Point(840, 19);\n            this.btnUninstall.Name = \"btnUninstall\";\n            this.btnUninstall.Size = new System.Drawing.Size(181, 35);\n            this.btnUninstall.TabIndex = 193;\n            this.btnUninstall.Text = \"Uninstall\";\n            this.btnUninstall.UseVisualStyleBackColor = false;\n            this.btnUninstall.Click += new System.EventHandler(this.btnUninstall_Click);\n            // \n            // lblAppsBinOptions\n            // \n            this.lblAppsBinOptions.ActiveLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lblAppsBinOptions.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.lblAppsBinOptions.AutoEllipsis = true;\n            this.lblAppsBinOptions.BackColor = System.Drawing.Color.Transparent;\n            this.lblAppsBinOptions.Font = new System.Drawing.Font(\"Segoe UI Variable Text\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lblAppsBinOptions.LinkBehavior = System.Windows.Forms.LinkBehavior.HoverUnderline;\n            this.lblAppsBinOptions.LinkColor = System.Drawing.Color.Gray;\n            this.lblAppsBinOptions.Location = new System.Drawing.Point(680, 68);\n            this.lblAppsBinOptions.Name = \"lblAppsBinOptions\";\n            this.lblAppsBinOptions.Size = new System.Drawing.Size(303, 18);\n            this.lblAppsBinOptions.TabIndex = 159;\n            this.lblAppsBinOptions.TabStop = true;\n            this.lblAppsBinOptions.Text = \"Move the apps you want to uninstall here or import via file.\";\n            this.lblAppsBinOptions.VisitedLinkColor = System.Drawing.Color.MediumVioletRed;\n            this.lblAppsBinOptions.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.lblAppsBinOptions_LinkClicked);\n            // \n            // listRemove\n            // \n            this.listRemove.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.listRemove.BackColor = System.Drawing.Color.White;\n            this.listRemove.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.listRemove.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.listRemove.FormattingEnabled = true;\n            this.listRemove.ItemHeight = 17;\n            this.listRemove.Location = new System.Drawing.Point(596, 90);\n            this.listRemove.Name = \"listRemove\";\n            this.listRemove.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;\n            this.listRemove.Size = new System.Drawing.Size(425, 612);\n            this.listRemove.Sorted = true;\n            this.listRemove.TabIndex = 13;\n            // \n            // btnRefresh\n            // \n            this.btnRefresh.BackColor = System.Drawing.Color.Transparent;\n            this.btnRefresh.FlatAppearance.BorderColor = System.Drawing.Color.White;\n            this.btnRefresh.FlatAppearance.BorderSize = 0;\n            this.btnRefresh.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.btnRefresh.Font = new System.Drawing.Font(\"Segoe Fluent Icons\", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnRefresh.ForeColor = System.Drawing.Color.Black;\n            this.btnRefresh.Location = new System.Drawing.Point(39, 0);\n            this.btnRefresh.Name = \"btnRefresh\";\n            this.btnRefresh.Size = new System.Drawing.Size(42, 38);\n            this.btnRefresh.TabIndex = 190;\n            this.btnRefresh.Text = \"...\";\n            this.btnRefresh.UseVisualStyleBackColor = false;\n            this.btnRefresh.Click += new System.EventHandler(this.btnAppOptions_Click);\n            // \n            // btnRestoreAll\n            // \n            this.btnRestoreAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnRestoreAll.BackColor = System.Drawing.Color.Transparent;\n            this.btnRestoreAll.FlatAppearance.BorderColor = System.Drawing.Color.Gainsboro;\n            this.btnRestoreAll.FlatStyle = System.Windows.Forms.FlatStyle.System;\n            this.btnRestoreAll.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnRestoreAll.ForeColor = System.Drawing.Color.Black;\n            this.btnRestoreAll.Location = new System.Drawing.Point(483, 320);\n            this.btnRestoreAll.Name = \"btnRestoreAll\";\n            this.btnRestoreAll.Size = new System.Drawing.Size(89, 23);\n            this.btnRestoreAll.TabIndex = 188;\n            this.btnRestoreAll.Text = \"<< Restore all\";\n            this.btnRestoreAll.UseVisualStyleBackColor = false;\n            this.btnRestoreAll.Click += new System.EventHandler(this.btnRestoreAll_Click);\n            // \n            // btnRestore\n            // \n            this.btnRestore.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnRestore.BackColor = System.Drawing.Color.Transparent;\n            this.btnRestore.FlatAppearance.BorderColor = System.Drawing.Color.Gainsboro;\n            this.btnRestore.FlatStyle = System.Windows.Forms.FlatStyle.System;\n            this.btnRestore.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnRestore.ForeColor = System.Drawing.Color.Black;\n            this.btnRestore.Location = new System.Drawing.Point(483, 349);\n            this.btnRestore.Name = \"btnRestore\";\n            this.btnRestore.Size = new System.Drawing.Size(89, 23);\n            this.btnRestore.TabIndex = 187;\n            this.btnRestore.Text = \"< Restore\";\n            this.btnRestore.UseVisualStyleBackColor = false;\n            this.btnRestore.Click += new System.EventHandler(this.btnRestore_Click);\n            // \n            // btnMoveAll\n            // \n            this.btnMoveAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnMoveAll.BackColor = System.Drawing.Color.Transparent;\n            this.btnMoveAll.FlatAppearance.BorderColor = System.Drawing.Color.Gainsboro;\n            this.btnMoveAll.FlatStyle = System.Windows.Forms.FlatStyle.System;\n            this.btnMoveAll.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnMoveAll.ForeColor = System.Drawing.Color.Black;\n            this.btnMoveAll.Location = new System.Drawing.Point(483, 208);\n            this.btnMoveAll.Name = \"btnMoveAll\";\n            this.btnMoveAll.Size = new System.Drawing.Size(89, 23);\n            this.btnMoveAll.TabIndex = 189;\n            this.btnMoveAll.Text = \"Move all >>\";\n            this.btnMoveAll.UseVisualStyleBackColor = false;\n            this.btnMoveAll.Click += new System.EventHandler(this.btnMoveAll_Click);\n            // \n            // btnMove\n            // \n            this.btnMove.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnMove.BackColor = System.Drawing.Color.Transparent;\n            this.btnMove.FlatAppearance.BorderColor = System.Drawing.Color.Gainsboro;\n            this.btnMove.FlatStyle = System.Windows.Forms.FlatStyle.System;\n            this.btnMove.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnMove.ForeColor = System.Drawing.Color.Black;\n            this.btnMove.Location = new System.Drawing.Point(483, 237);\n            this.btnMove.Name = \"btnMove\";\n            this.btnMove.Size = new System.Drawing.Size(89, 23);\n            this.btnMove.TabIndex = 186;\n            this.btnMove.Text = \"Move >\";\n            this.btnMove.UseVisualStyleBackColor = false;\n            this.btnMove.Click += new System.EventHandler(this.btnMove_Click);\n            // \n            // btnMeatballMenu\n            // \n            this.btnMeatballMenu.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.btnMeatballMenu.BackColor = System.Drawing.Color.Transparent;\n            this.btnMeatballMenu.FlatAppearance.BorderSize = 0;\n            this.btnMeatballMenu.FlatAppearance.MouseOverBackColor = System.Drawing.Color.WhiteSmoke;\n            this.btnMeatballMenu.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.btnMeatballMenu.Font = new System.Drawing.Font(\"Segoe Fluent Icons\", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnMeatballMenu.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(64)))), ((int)(((byte)(64)))), ((int)(((byte)(64)))));\n            this.btnMeatballMenu.Location = new System.Drawing.Point(979, 60);\n            this.btnMeatballMenu.Name = \"btnMeatballMenu\";\n            this.btnMeatballMenu.Size = new System.Drawing.Size(42, 30);\n            this.btnMeatballMenu.TabIndex = 213;\n            this.btnMeatballMenu.Text = \"...\";\n            this.btnMeatballMenu.UseVisualStyleBackColor = false;\n            this.btnMeatballMenu.Click += new System.EventHandler(this.btnMeatballMenu_Click);\n            // \n            // listApps\n            // \n            this.listApps.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Left) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.listApps.BackColor = System.Drawing.Color.White;\n            this.listApps.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.listApps.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.listApps.ForeColor = System.Drawing.Color.Black;\n            this.listApps.FormattingEnabled = true;\n            this.listApps.ItemHeight = 17;\n            this.listApps.Location = new System.Drawing.Point(36, 90);\n            this.listApps.Name = \"listApps\";\n            this.listApps.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;\n            this.listApps.Size = new System.Drawing.Size(425, 612);\n            this.listApps.Sorted = true;\n            this.listApps.TabIndex = 13;\n            // \n            // rtbStatus\n            // \n            this.rtbStatus.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) \n            | System.Windows.Forms.AnchorStyles.Right)));\n            this.rtbStatus.BackColor = System.Drawing.Color.White;\n            this.rtbStatus.BorderStyle = System.Windows.Forms.BorderStyle.None;\n            this.rtbStatus.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.rtbStatus.ForeColor = System.Drawing.Color.Black;\n            this.rtbStatus.HideSelection = false;\n            this.rtbStatus.Location = new System.Drawing.Point(596, 90);\n            this.rtbStatus.Name = \"rtbStatus\";\n            this.rtbStatus.ReadOnly = true;\n            this.rtbStatus.ScrollBars = System.Windows.Forms.RichTextBoxScrollBars.Vertical;\n            this.rtbStatus.Size = new System.Drawing.Size(425, 612);\n            this.rtbStatus.TabIndex = 139;\n            this.rtbStatus.Text = \"\";\n            this.rtbStatus.Visible = false;\n            // \n            // lblAppsInstalled\n            // \n            this.lblAppsInstalled.AutoSize = true;\n            this.lblAppsInstalled.BackColor = System.Drawing.Color.Transparent;\n            this.lblAppsInstalled.Font = new System.Drawing.Font(\"Segoe UI Variable Text Semiligh\", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lblAppsInstalled.Location = new System.Drawing.Point(36, 71);\n            this.lblAppsInstalled.Name = \"lblAppsInstalled\";\n            this.lblAppsInstalled.Size = new System.Drawing.Size(70, 15);\n            this.lblAppsInstalled.TabIndex = 214;\n            this.lblAppsInstalled.Text = \"Installed apps\";\n            // \n            // lblAppsBin\n            // \n            this.lblAppsBin.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));\n            this.lblAppsBin.AutoSize = true;\n            this.lblAppsBin.BackColor = System.Drawing.Color.Transparent;\n            this.lblAppsBin.Font = new System.Drawing.Font(\"Segoe UI\", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.lblAppsBin.Location = new System.Drawing.Point(593, 71);\n            this.lblAppsBin.Name = \"lblAppsBin\";\n            this.lblAppsBin.Size = new System.Drawing.Size(67, 13);\n            this.lblAppsBin.TabIndex = 215;\n            this.lblAppsBin.Text = \"Apps in bin\";\n            // \n            // btnBack\n            // \n            this.btnBack.BackColor = System.Drawing.Color.Transparent;\n            this.btnBack.FlatAppearance.BorderColor = System.Drawing.Color.DimGray;\n            this.btnBack.FlatAppearance.BorderSize = 0;\n            this.btnBack.FlatAppearance.MouseOverBackColor = System.Drawing.Color.DimGray;\n            this.btnBack.FlatStyle = System.Windows.Forms.FlatStyle.Flat;\n            this.btnBack.Font = new System.Drawing.Font(\"Segoe Fluent Icons\", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));\n            this.btnBack.ForeColor = System.Drawing.Color.Black;\n            this.btnBack.Location = new System.Drawing.Point(0, 0);\n            this.btnBack.Name = \"btnBack\";\n            this.btnBack.Size = new System.Drawing.Size(42, 38);\n            this.btnBack.TabIndex = 220;\n            this.btnBack.Text = \"...\";\n            this.btnBack.UseVisualStyleBackColor = false;\n            this.btnBack.Click += new System.EventHandler(this.btnBack_Click);\n            // \n            // CopilotPageView\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.BackColor = System.Drawing.Color.White;\n            this.Controls.Add(this.btnBack);\n            this.Controls.Add(this.btnMeatballMenu);\n            this.Controls.Add(this.lblAppsBin);\n            this.Controls.Add(this.lblAppsInstalled);\n            this.Controls.Add(this.lblAppsBinOptions);\n            this.Controls.Add(this.listApps);\n            this.Controls.Add(this.checkAppsSystem);\n            this.Controls.Add(this.textSearch);\n            this.Controls.Add(this.lblHeader);\n            this.Controls.Add(this.btnUninstall);\n            this.Controls.Add(this.btnRefresh);\n            this.Controls.Add(this.btnRestoreAll);\n            this.Controls.Add(this.btnRestore);\n            this.Controls.Add(this.btnMoveAll);\n            this.Controls.Add(this.btnMove);\n            this.Controls.Add(this.listRemove);\n            this.Controls.Add(this.rtbStatus);\n            this.Name = \"CopilotPageView\";\n            this.Size = new System.Drawing.Size(1054, 795);\n            this.contextKebapMenu.ResumeLayout(false);\n            this.contextKebapMenu.PerformLayout();\n            this.ResumeLayout(false);\n            this.PerformLayout();\n\n        }\n\n        #endregion\n        private System.Windows.Forms.ToolStripMenuItem menuAppsRemoveAll;\n        private System.Windows.Forms.ToolStripMenuItem menuAppsImport;\n        private System.Windows.Forms.ContextMenuStrip contextKebapMenu;\n        private System.Windows.Forms.CheckBox checkAppsSystem;\n        private System.Windows.Forms.TextBox textSearch;\n        private System.Windows.Forms.Label lblHeader;\n        private System.Windows.Forms.Button btnUninstall;\n        private System.Windows.Forms.LinkLabel lblAppsBinOptions;\n        private System.Windows.Forms.Button btnRefresh;\n        private System.Windows.Forms.Button btnRestoreAll;\n        private System.Windows.Forms.Button btnRestore;\n        private System.Windows.Forms.Button btnMoveAll;\n        private System.Windows.Forms.Button btnMove;\n        public System.Windows.Forms.ListBox listRemove;\n        private System.Windows.Forms.Button btnMeatballMenu;\n        private System.Windows.Forms.ToolStripTextBox textHeaderAppInfo;\n        private System.Windows.Forms.ListBox listApps;\n        public System.Windows.Forms.RichTextBox rtbStatus;\n        private System.Windows.Forms.Label lblAppsInstalled;\n        private System.Windows.Forms.Label lblAppsBin;\n        private System.Windows.Forms.Button btnBack;\n    }\n}\n"]}
{"filename": "Junkctrl/Views/CopilotPageView.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Management.Automation;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n", "using System.Windows.Forms;\n\nnamespace Junkctrl.Views\n{\n    public partial class CopilotPageView : UserControl\n    {\n        public List<string> removeAppsList = new List<string>();\n        public List<string> removeAppsListAutoDetected = new List<string>();\n        private List<string> removeAppsFailedList = new List<string>();\n        private List<string> removeAppsSystem = new List<string>();\n", "        private readonly PowerShell powerShell = PowerShell.Create();\n\n        public CopilotPageView()\n        {\n            InitializeComponent();\n\n            this.InitializeAppsSystem();        // Retrieve hidden systemapps from resource file\n            this.InitializeAppsAutoDetected();  // Now the auto detected in MainForm\n            this.InitializeApps();              // Yet just the normal\n\n            SetStyle();\n        }\n\n        // Some UI nicety", "        private void SetStyle()\n        {\n            btnMeatballMenu.Text = \"\\uE712\";\n            btnRefresh.Text = \"\\uE895\";\n            btnBack.Text = \"\\uE72B\";\n            BackColor =\n            listApps.BackColor =\n            listRemove.BackColor =\n            rtbStatus.BackColor =\n                  Color.FromArgb(239, 239, 247);\n        }\n", "        private void InitializeApps()\n        {\n            listApps.Items.Clear();\n            powerShell.Commands.Clear();\n            powerShell.AddCommand(\"get-appxpackage\");\n            powerShell.AddCommand(\"Select\").AddParameter(\"property\", \"name\");\n\n            foreach (PSObject result in powerShell.Invoke())\n            {\n                string current = result.ToString();\n                // Show ONLY NON-SYSTEM apps by comparing found apps with systemapps.txt", "                if (removeAppsSystem != null) if ((removeAppsSystem.Any(current.Contains)) & !checkAppsSystem.Checked) continue;\n\n                if (listApps.Items.Contains(Regex.Replace(current, \"(@{Name=)|(})\", \"\"))) continue;\n                listApps.Items.Add(Regex.Replace(current, \"(@{Name=)|(})\", \"\"));\n                removeAppsList.Add(Regex.Replace(current, \"(@{Name=)|(})\", \"\"));\n            }\n\n            // Compare left and rights apps list and remove differences\n            foreach (string itemToRemove in listRemove.Items)\n            {\n                for (int i = listApps.Items.Count - 1; i >= 0; i--)\n                {\n                    string item = listApps.Items[i].ToString().Trim();\n", "            foreach (string itemToRemove in listRemove.Items)\n            {\n                for (int i = listApps.Items.Count - 1; i >= 0; i--)\n                {\n                    string item = listApps.Items[i].ToString().Trim();\n\n                    if (itemToRemove.Trim().Contains(item))\n                    {\n                        listApps.Items.RemoveAt(i);\n                    }\n                }\n            }\n\n            RefreshApps();\n        }\n", "        private void InitializeAppsAutoDetected()\n        {\n            listRemove.Items.AddRange(MainForm.recycleList.ToArray());\n            RefreshApps();\n        }\n\n        private void InitializeAppsSystem()\n        {\n            StreamReader Database = null;\n\n            try\n            {\n                HelperTool.Utils.CreateDataDir();\n                Database = File.OpenText(HelperTool.Utils.Data.DataRootDir + \"systemApps.txt\");\n            }", "            catch (FileNotFoundException) // Create file if it doesnt exisits\n            {\n                StreamWriter sw = File.CreateText(HelperTool.Utils.Data.DataRootDir + \"systemApps.txt\");\n                sw.Write(Junkctrl.Properties.Resources.systemApps);    // Populate it with built in preset\n                sw.Close();\n\n                Database = File.OpenText(HelperTool.Utils.Data.DataRootDir + \"systemApps.txt\");\n            }\n            finally\n            {\n                if (Database.Peek() > 0) // Exists and not empty\n                {\n                    string buff;", "                if (Database.Peek() > 0) // Exists and not empty\n                {\n                    string buff;\n                    while ((buff = Database.ReadLine()) != null)\n                    {\n                        removeAppsSystem.Add(buff);\n                    }\n                };\n                Database.Close();\n            }\n        }\n", "        private void RemoveApps(string app)\n        {\n            bool error = false;\n\n            using (PowerShell script = PowerShell.Create())\n            {\n                script.AddScript(\"Get-AppxPackage | Where-Object { $_.Name -like '*\" + app.Trim() + \"*' } | Remove-AppxPackage\");\n\n                try\n                {\n                    script.Invoke();\n                    error = script.HadErrors;\n                }", "                catch (Exception ex)\n                {\n                    MessageBox.Show(ex.Message);\n                }\n            }\n\n            if (error)\n            {\n                removeAppsFailedList.Add(app);\n            }\n            else\n            {\n                removeAppsList.Add(app);\n            }\n\n            return;\n        }\n", "        private void RefreshApps()\n        {\n            int installed = listApps.Items.Count;\n            int remove = listRemove.Items.Count;\n            lblAppsInstalled.Text = installed.ToString() + \" apps installed\";\n            lblAppsBin.Text = \"Recycle bin\" + \" (\" + remove.ToString() + \")\";\n\n            if (listRemove.Items.Count == 0)\n            {\n                lblAppsBinOptions.Visible = true;\n\n                rtbStatus.Visible = true;\n                listRemove.Visible = false;\n            }\n            else\n            {\n                lblAppsBinOptions.Visible = false;\n\n                rtbStatus.Visible = false;\n                listRemove.Visible = true;\n            }\n", "            if (installed == 0)\n                btnMoveAll.Enabled =\n                btnMove.Enabled =\n                false;\n            else\n                btnMoveAll.Enabled =\n                btnMove.Enabled =\n                true;\n\n            if (remove == 0)\n                btnRestoreAll.Enabled =\n                btnRestore.Enabled =\n                false;\n            else\n                btnRestoreAll.Enabled =\n                btnRestore.Enabled =\n                true;\n        }\n", "            if (remove == 0)\n                btnRestoreAll.Enabled =\n                btnRestore.Enabled =\n                false;\n            else\n                btnRestoreAll.Enabled =\n                btnRestore.Enabled =\n                true;\n        }\n\n        private void btnRestoreAll_Click(object sender, System.EventArgs e)\n        {", "        private void btnRestoreAll_Click(object sender, System.EventArgs e)\n        {\n            foreach (var item in listRemove.Items)\n            {\n                listApps.Items.Add(item);\n            }\n            listRemove.Items.Clear();\n            RefreshApps();\n        }\n\n        private void btnRestore_Click(object sender, System.EventArgs e)\n        {", "        private void btnRestore_Click(object sender, System.EventArgs e)\n        {\n            if (listRemove.Items.Count != 0)\n            {\n                if (listRemove.SelectedItem == null) listRemove.SelectedIndex = 0;\n                while (listRemove.SelectedItem != null)\n                {\n                    listApps.Items.Add(listRemove.SelectedItem);\n                    listRemove.Items.Remove(listRemove.SelectedItem);\n                }\n                RefreshApps();\n            }\n        }\n", "        private void btnMove_Click(object sender, System.EventArgs e)\n        {\n            if (listApps.Items.Count != 0)\n            {\n                if (listApps.SelectedItem == null) listApps.SelectedIndex = 0;\n                while (listApps.SelectedItem != null)\n                {\n                    listRemove.Items.Add(listApps.SelectedItem);\n                    listApps.Items.Remove(listApps.SelectedItem);\n                }\n                RefreshApps();\n            }\n        }\n", "        private void btnMoveAll_Click(object sender, System.EventArgs e)\n        {\n            foreach (var item in listApps.Items)\n            {\n                listRemove.Items.Add(item);\n            }\n            listApps.Items.Clear();\n            RefreshApps();\n        }\n\n        private void checkAppsSystem_CheckedChanged(object sender, System.EventArgs e)\n        {", "        private void checkAppsSystem_CheckedChanged(object sender, System.EventArgs e)\n        {\n            if (checkAppsSystem.Checked)\n            {\n                MessageBox.Show(\"Be picky about which System applications to uninstall.\" +\n                \"\\n\\nYou can uninstall most of the built-in apps, even ones that don't normally offer an \\\"Uninstall\\\" option.\" +\n                \"\\n\\nNote, however, this app won't allow you to remove a few of the most important built-in apps, like Microsoft Edge, .NET framework, UI.Xaml etc. \" +\n                \"as these apps are needed for the Windows 11 \\\"Experience\\\" and for other programs. If you try, you\u2019ll see an error message saying the removal failed.\");\n\n                removeAppsList.Clear();\n                InitializeAppsSystem();\n                InitializeApps();\n            }\n            else\n            {\n                removeAppsList.Clear(); InitializeApps();\n            }\n        }\n", "        private async void btnUninstall_Click(object sender, System.EventArgs e)\n        {\n            string selectedApps = string.Empty;\n            string successList = string.Empty;\n            string failedList = string.Empty;\n\n            foreach (string app in listRemove.Items)\n            {\n                selectedApps += app + Environment.NewLine;\n            }\n            if (MessageBox.Show(\"Do you want to uninstall all apps in bin?\", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)\n            {\n                removeAppsList.Clear();\n                removeAppsListAutoDetected.Clear();\n                removeAppsFailedList.Clear();\n                rtbStatus.Visible = true;\n                rtbStatus.Clear();\n                listRemove.Visible = false;\n                btnUninstall.Enabled = false;\n", "            if (MessageBox.Show(\"Do you want to uninstall all apps in bin?\", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)\n            {\n                removeAppsList.Clear();\n                removeAppsListAutoDetected.Clear();\n                removeAppsFailedList.Clear();\n                rtbStatus.Visible = true;\n                rtbStatus.Clear();\n                listRemove.Visible = false;\n                btnUninstall.Enabled = false;\n\n                foreach (string app in listRemove.Items)\n                {\n                    rtbStatus.Text += Environment.NewLine.Trim() + \"Uninstalling \" + app.ToString();\n\n                    await Task.Run(() => RemoveApps(app));\n                }\n", "                foreach (string app in listRemove.Items)\n                {\n                    rtbStatus.Text += Environment.NewLine.Trim() + \"Uninstalling \" + app.ToString();\n\n                    await Task.Run(() => RemoveApps(app));\n                }\n\n                foreach (var str in removeAppsList)\n                {\n                    successList += \"-\" + str + Environment.NewLine;\n                }\n", "                foreach (var str in removeAppsFailedList)\n                {\n                    failedList += \"-\" + str + Environment.NewLine;\n                }\n\n                // Summary removal process\n                string message = string.Format(\"Summary:\\n{0} app(s) has been selected for removal.\\n{1} app(s) has been removed.\",\n                    removeAppsList.Count + removeAppsFailedList.Count, removeAppsList.Count) + Environment.NewLine + Environment.NewLine;\n\n                if (removeAppsList.Count != 0)\n                {\n                    message += \"The folowing app(s) have been removed successfully:\" + Environment.NewLine + successList + Environment.NewLine;\n                }\n", "                if (removeAppsList.Count != 0)\n                {\n                    message += \"The folowing app(s) have been removed successfully:\" + Environment.NewLine + successList + Environment.NewLine;\n                }\n\n                if (removeAppsFailedList.Count != 0)\n                {\n                    message += \"The following app(s) could not be removed: \" + Environment.NewLine + failedList;\n                    message += Environment.NewLine + \"Note, however, this app won't allow you to remove a few of the most important built-in apps, like Microsoft Edge, .NET framework, UI.Xaml etc. \" +\n                                                     \"as these apps are needed for the Windows 11 Experience and for other programs. If you try, you\u2019ll see an error message saying the removal failed.\";\n                }\n\n                btnRefresh.PerformClick();\n\n                btnUninstall.Enabled = true;\n                rtbStatus.Text = message + Environment.NewLine;\n                rtbStatus.Text += Environment.NewLine + listApps.Items.Count + \" apps are left.\\n\";\n            }\n        }\n", "        private void textSearch_TextChanged(object sender, EventArgs e)\n        {\n            listApps.Items.Clear();\n\n            foreach (string str in removeAppsList)\n            {\n                if (str.IndexOf(textSearch.Text, 0, StringComparison.CurrentCultureIgnoreCase) != -1)\n                {\n                    listApps.Items.Add(str);\n                }\n            }\n        }\n", "        private void btnMeatballMenu_Click(object sender, EventArgs e)\n             => this.contextKebapMenu.Show(Cursor.Position.X, Cursor.Position.Y);\n\n        private void textSearch_Click(object sender, EventArgs e)\n               => textSearch.Text = \"\";\n\n        private void btnBack_Click(object sender, EventArgs e)\n        {\n            var mainForm = Application.OpenForms.OfType<MainForm>().Single();\n            mainForm.pnlForm.Controls.Clear();\n            if (mainForm.INavPage != null) mainForm.pnlForm.Controls.Add(mainForm.INavPage);\n        }\n", "            if (mainForm.INavPage != null) mainForm.pnlForm.Controls.Add(mainForm.INavPage);\n        }\n\n        private void btnAppOptions_Click(object sender, EventArgs e)\n        {\n            listApps.Items.Clear();\n            listRemove.Items.Clear();\n            removeAppsList.Clear();\n            removeAppsListAutoDetected.Clear();\n\n            InitializeAppsSystem();\n            InitializeApps();\n        }\n", "        private void lblAppsBinOptions_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)\n            => menuAppsImport.PerformClick();\n\n        private void menuAppsImport_Click(object sender, EventArgs e)\n        {\n            OpenFileDialog f = new OpenFileDialog();\n            f.InitialDirectory = HelperTool.Utils.Data.DataRootDir;\n\n            if (f.ShowDialog() == DialogResult.OK)\n\n            {\n                List<string> lines = new List<string>();", "            if (f.ShowDialog() == DialogResult.OK)\n\n            {\n                List<string> lines = new List<string>();\n                using (StreamReader r = new StreamReader(f.OpenFile()))\n                {\n                    listRemove.Items.Clear();\n\n                    string line;\n                    while ((line = r.ReadLine()) != null)\n                    {\n                        listRemove.Items.Add(line);\n                        RefreshApps();\n                        string compare = listApps.Items.ToString();", "                    while ((line = r.ReadLine()) != null)\n                    {\n                        listRemove.Items.Add(line);\n                        RefreshApps();\n                        string compare = listApps.Items.ToString();\n                        foreach (string item in listRemove.Items) if (item.Any(compare.Contains)) listApps.Items.Remove(item);\n                    }\n\n                    RefreshApps();\n\n                    MessageBox.Show(\"We've synced your import list with the apps in Recycle bin.\\n\" +\n                        \"Please note, that some of these apps may not be installed on your system.\", this.Text, MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n        }\n", "        private void menuAppsExport_Click(object sender, EventArgs e)\n        {\n            if (listRemove.Items.Count == 0)\n            {\n                MessageBox.Show(\"No apps in Recycle bin found.\");\n                return;\n            }\n\n            SaveFileDialog s = new SaveFileDialog();\n            s.FileName = \"my-bloatware-list\";\n            s.Filter = \"Text File | *.txt\";\n", "            if (s.ShowDialog() == DialogResult.OK)\n            {\n                StreamWriter writer = new StreamWriter(s.OpenFile());\n                for (int i = 0; i < listRemove.Items.Count; i++)\n                {\n                    writer.WriteLine(listRemove.Items[i].ToString());\n                }\n\n                writer.Dispose();\n                writer.Close();\n            }\n        }\n", "        private void menuAppsRemoveAll_Click(object sender, EventArgs e)\n        {\n            if (MessageBox.Show(\"This will remove all pre-installed apps for the logged in user, except the Microsoft Store. Do you wish to continue?\", this.Text, MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) == DialogResult.Yes)\n            {\n                using (PowerShell script = PowerShell.Create())\n                {\n                    this.Enabled = false;\n                    script.AddScript(\"Get-appxprovisionedpackage \u2013online | where-object {$_.packagename \u2013notlike \u201c*store*\u201d} | Remove-AppxProvisionedPackage \u2013online\");\n                    script.AddScript(\"Get-AppxPackage | where-object {$_.name \u2013notlike \u201c*store*\u201d} | Remove-AppxPackage\");\n\n                    try\n                    {\n                        script.Invoke();\n                        this.Enabled = true;\n                        RefreshApps();\n                    }", "                    catch (Exception ex)\n                    { MessageBox.Show(ex.Message); }\n                }\n            }\n        }\n    }\n}"]}
