{"filename": "knowledge-base-manager/Program.cs", "chunked_list": ["using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing TrainingDataChatGPTApp;\nusing Microsoft.Extensions.Logging;\nusing ChatGPTInterface;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace KnowledgeBaseManager\n{\n    internal static class Program\n    {", "{\n    internal static class Program\n    {\n        private static IServiceProvider serviceProvider;\n\n        [STAThread]\n        static void Main()\n        {\n            // Set up dependency injection\n            ConfigureServices();\n", "            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                IServiceProvider services = scope.ServiceProvider;\n                MainManageForm mainForm = services.GetRequiredService<MainManageForm>();\n                Application.Run(mainForm);\n            }\n        }\n\n        private static void ConfigureServices()\n        {\n            IConfigurationBuilder configBuilder = new ConfigurationBuilder()\n                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n\n            IConfiguration configuration = configBuilder.Build();\n\n            // Set up the services and the DI container\n            ServiceCollection services = new ServiceCollection();\n\n            // Register the configuration\n            services.AddSingleton<IConfiguration>(configuration);\n\n            // Register the logging services\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            // Register the Entity Framework DbContext\n            services.AddDbContext<ApplicationDbContext>(options =>\n                options.UseSqlServer(configuration.GetConnectionString(\"DefaultConnection\")));\n\n            // Register your services and dependencies here\n            services.AddTransient<MainManageForm>();\n            services.AddScoped<IChatGPT, ChatGPT>();\n            services.AddScoped<IKnowledgeRecordManager, KnowledgeRecordManager>();\n\n            serviceProvider = services.BuildServiceProvider();\n        }\n    }\n}", "        private static void ConfigureServices()\n        {\n            IConfigurationBuilder configBuilder = new ConfigurationBuilder()\n                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n\n            IConfiguration configuration = configBuilder.Build();\n\n            // Set up the services and the DI container\n            ServiceCollection services = new ServiceCollection();\n\n            // Register the configuration\n            services.AddSingleton<IConfiguration>(configuration);\n\n            // Register the logging services\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            // Register the Entity Framework DbContext\n            services.AddDbContext<ApplicationDbContext>(options =>\n                options.UseSqlServer(configuration.GetConnectionString(\"DefaultConnection\")));\n\n            // Register your services and dependencies here\n            services.AddTransient<MainManageForm>();\n            services.AddScoped<IChatGPT, ChatGPT>();\n            services.AddScoped<IKnowledgeRecordManager, KnowledgeRecordManager>();\n\n            serviceProvider = services.BuildServiceProvider();\n        }\n    }\n}"]}
{"filename": "knowledge-base-manager/MainManageForm.Designer.cs", "chunked_list": ["\ufeffnamespace TrainingDataChatGPTApp\n{\n    partial class MainManageForm\n    {\n        /// <summary>\n        ///  Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        ///  Clean up any resources being used.\n        /// </summary>\n        /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Windows Form Designer generated code\n\n        /// <summary>\n        ///  Required method for Designer support - do not modify\n        ///  the contents of this method with the code editor.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            this.label2 = new System.Windows.Forms.Label();\n            this.contentTextBox = new System.Windows.Forms.TextBox();\n            this.addRecordButton = new System.Windows.Forms.Button();\n            this.trainingRecordDataGridView = new System.Windows.Forms.DataGridView();\n            this.ID = new System.Windows.Forms.DataGridViewTextBoxColumn();\n            this.Title = new System.Windows.Forms.DataGridViewTextBoxColumn();\n            this.idTextBox = new System.Windows.Forms.TextBox();\n            this.label3 = new System.Windows.Forms.Label();\n            this.updateRecordButton = new System.Windows.Forms.Button();\n            this.deleteRecordButton = new System.Windows.Forms.Button();\n            this.clearRecordButton = new System.Windows.Forms.Button();\n            this.label4 = new System.Windows.Forms.Label();\n            this.registrosLabel = new System.Windows.Forms.Label();\n            this.label5 = new System.Windows.Forms.Label();\n            this.searchTextBox = new System.Windows.Forms.TextBox();\n            this.searchButton = new System.Windows.Forms.Button();\n            this.label1 = new System.Windows.Forms.Label();\n            this.titleTextBox = new System.Windows.Forms.TextBox();\n            ((System.ComponentModel.ISupportInitialize)(this.trainingRecordDataGridView)).BeginInit();\n            this.SuspendLayout();\n            // \n            // label2\n            // \n            this.label2.AutoSize = true;\n            this.label2.Location = new System.Drawing.Point(492, 118);\n            this.label2.Name = \"label2\";\n            this.label2.Size = new System.Drawing.Size(50, 15);\n            this.label2.TabIndex = 3;\n            this.label2.Text = \"Content\";\n            // \n            // contentTextBox\n            // \n            this.contentTextBox.Location = new System.Drawing.Point(492, 136);\n            this.contentTextBox.Multiline = true;\n            this.contentTextBox.Name = \"contentTextBox\";\n            this.contentTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;\n            this.contentTextBox.Size = new System.Drawing.Size(604, 422);\n            this.contentTextBox.TabIndex = 4;\n            // \n            // addRecordButton\n            // \n            this.addRecordButton.Location = new System.Drawing.Point(485, 563);\n            this.addRecordButton.Name = \"addRecordButton\";\n            this.addRecordButton.Size = new System.Drawing.Size(104, 23);\n            this.addRecordButton.TabIndex = 5;\n            this.addRecordButton.Text = \"Add Record\";\n            this.addRecordButton.UseVisualStyleBackColor = true;\n            this.addRecordButton.Click += new System.EventHandler(this.addRecordButton_Click);\n            // \n            // trainingRecordDataGridView\n            // \n            this.trainingRecordDataGridView.AllowUserToAddRows = false;\n            this.trainingRecordDataGridView.AllowUserToDeleteRows = false;\n            this.trainingRecordDataGridView.AllowUserToResizeColumns = false;\n            this.trainingRecordDataGridView.AllowUserToResizeRows = false;\n            this.trainingRecordDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;\n            this.trainingRecordDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {\n            this.ID,\n            this.Title});\n            this.trainingRecordDataGridView.Location = new System.Drawing.Point(12, 31);\n            this.trainingRecordDataGridView.MultiSelect = false;\n            this.trainingRecordDataGridView.Name = \"trainingRecordDataGridView\";\n            this.trainingRecordDataGridView.ReadOnly = true;\n            this.trainingRecordDataGridView.RowHeadersWidthSizeMode = System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.DisableResizing;\n            this.trainingRecordDataGridView.RowTemplate.Height = 25;\n            this.trainingRecordDataGridView.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;\n            this.trainingRecordDataGridView.Size = new System.Drawing.Size(462, 527);\n            this.trainingRecordDataGridView.TabIndex = 6;\n            this.trainingRecordDataGridView.CellMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.trainingRecordDataGridView_CellMouseClick);\n            // \n            // ID\n            // \n            this.ID.DataPropertyName = \"Id\";\n            this.ID.HeaderText = \"ID\";\n            this.ID.Name = \"ID\";\n            this.ID.ReadOnly = true;\n            this.ID.Width = 30;\n            // \n            // Title\n            // \n            this.Title.DataPropertyName = \"Title\";\n            this.Title.HeaderText = \"Title\";\n            this.Title.Name = \"Title\";\n            this.Title.ReadOnly = true;\n            this.Title.Width = 390;\n            // \n            // idTextBox\n            // \n            this.idTextBox.Location = new System.Drawing.Point(490, 49);\n            this.idTextBox.Name = \"idTextBox\";\n            this.idTextBox.ReadOnly = true;\n            this.idTextBox.Size = new System.Drawing.Size(606, 23);\n            this.idTextBox.TabIndex = 8;\n            this.idTextBox.TabStop = false;\n            // \n            // label3\n            // \n            this.label3.AutoSize = true;\n            this.label3.Location = new System.Drawing.Point(491, 31);\n            this.label3.Name = \"label3\";\n            this.label3.Size = new System.Drawing.Size(18, 15);\n            this.label3.TabIndex = 7;\n            this.label3.Text = \"ID\";\n            // \n            // updateRecordButton\n            // \n            this.updateRecordButton.Location = new System.Drawing.Point(595, 563);\n            this.updateRecordButton.Name = \"updateRecordButton\";\n            this.updateRecordButton.Size = new System.Drawing.Size(106, 23);\n            this.updateRecordButton.TabIndex = 9;\n            this.updateRecordButton.Text = \"Update Record\";\n            this.updateRecordButton.UseVisualStyleBackColor = true;\n            this.updateRecordButton.Click += new System.EventHandler(this.updateRecordButton_Click);\n            // \n            // deleteRecordButton\n            // \n            this.deleteRecordButton.Location = new System.Drawing.Point(707, 563);\n            this.deleteRecordButton.Name = \"deleteRecordButton\";\n            this.deleteRecordButton.Size = new System.Drawing.Size(106, 23);\n            this.deleteRecordButton.TabIndex = 10;\n            this.deleteRecordButton.Text = \"Delete Record\";\n            this.deleteRecordButton.UseVisualStyleBackColor = true;\n            this.deleteRecordButton.Click += new System.EventHandler(this.deleteRecordButton_Click);\n            // \n            // clearRecordButton\n            // \n            this.clearRecordButton.Location = new System.Drawing.Point(819, 564);\n            this.clearRecordButton.Name = \"clearRecordButton\";\n            this.clearRecordButton.Size = new System.Drawing.Size(106, 23);\n            this.clearRecordButton.TabIndex = 11;\n            this.clearRecordButton.Text = \"Clear Record\";\n            this.clearRecordButton.UseVisualStyleBackColor = true;\n            this.clearRecordButton.Click += new System.EventHandler(this.clearRecordButton_Click);\n            // \n            // label4\n            // \n            this.label4.AutoSize = true;\n            this.label4.Location = new System.Drawing.Point(12, 9);\n            this.label4.Name = \"label4\";\n            this.label4.Size = new System.Drawing.Size(110, 15);\n            this.label4.TabIndex = 12;\n            this.label4.Text = \"Number of records:\";\n            // \n            // registrosLabel\n            // \n            this.registrosLabel.AutoSize = true;\n            this.registrosLabel.Font = new System.Drawing.Font(\"Segoe UI\", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point);\n            this.registrosLabel.ForeColor = System.Drawing.Color.DarkRed;\n            this.registrosLabel.Location = new System.Drawing.Point(121, 9);\n            this.registrosLabel.Name = \"registrosLabel\";\n            this.registrosLabel.Size = new System.Drawing.Size(31, 15);\n            this.registrosLabel.TabIndex = 13;\n            this.registrosLabel.Text = \"XXX\";\n            // \n            // label5\n            // \n            this.label5.AutoSize = true;\n            this.label5.Location = new System.Drawing.Point(6, 572);\n            this.label5.Name = \"label5\";\n            this.label5.Size = new System.Drawing.Size(45, 15);\n            this.label5.TabIndex = 14;\n            this.label5.Text = \"Search:\";\n            // \n            // searchTextBox\n            // \n            this.searchTextBox.Location = new System.Drawing.Point(57, 565);\n            this.searchTextBox.Name = \"searchTextBox\";\n            this.searchTextBox.Size = new System.Drawing.Size(302, 23);\n            this.searchTextBox.TabIndex = 15;\n            // \n            // searchButton\n            // \n            this.searchButton.Location = new System.Drawing.Point(365, 564);\n            this.searchButton.Name = \"searchButton\";\n            this.searchButton.Size = new System.Drawing.Size(103, 23);\n            this.searchButton.TabIndex = 16;\n            this.searchButton.Text = \"Search\";\n            this.searchButton.UseVisualStyleBackColor = true;\n            this.searchButton.Click += new System.EventHandler(this.searchButton_Click);\n            // \n            // label1\n            // \n            this.label1.AutoSize = true;\n            this.label1.Location = new System.Drawing.Point(490, 75);\n            this.label1.Name = \"label1\";\n            this.label1.RightToLeft = System.Windows.Forms.RightToLeft.Yes;\n            this.label1.Size = new System.Drawing.Size(29, 15);\n            this.label1.TabIndex = 18;\n            this.label1.Text = \"Title\";\n            // \n            // titleTextBox\n            // \n            this.titleTextBox.Location = new System.Drawing.Point(492, 92);\n            this.titleTextBox.Name = \"titleTextBox\";\n            this.titleTextBox.Size = new System.Drawing.Size(603, 23);\n            this.titleTextBox.TabIndex = 19;\n            // \n            // MainManageForm\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(1108, 600);\n            this.Controls.Add(this.titleTextBox);\n            this.Controls.Add(this.label1);\n            this.Controls.Add(this.searchButton);\n            this.Controls.Add(this.searchTextBox);\n            this.Controls.Add(this.label5);\n            this.Controls.Add(this.registrosLabel);\n            this.Controls.Add(this.label4);\n            this.Controls.Add(this.clearRecordButton);\n            this.Controls.Add(this.deleteRecordButton);\n            this.Controls.Add(this.updateRecordButton);\n            this.Controls.Add(this.idTextBox);\n            this.Controls.Add(this.label3);\n            this.Controls.Add(this.trainingRecordDataGridView);\n            this.Controls.Add(this.addRecordButton);\n            this.Controls.Add(this.contentTextBox);\n            this.Controls.Add(this.label2);\n            this.Name = \"MainManageForm\";\n            this.Text = \"Main Form\";\n            ((System.ComponentModel.ISupportInitialize)(this.trainingRecordDataGridView)).EndInit();\n            this.ResumeLayout(false);\n            this.PerformLayout();\n\n        }\n\n        #endregion", "        private Label label2;\n        private TextBox contentTextBox;\n        private Button addRecordButton;\n        private DataGridView trainingRecordDataGridView;\n        private TextBox idTextBox;\n        private Label label3;\n        private Button updateRecordButton;\n        private Button deleteRecordButton;\n        private Button clearRecordButton;\n        private Label label4;\n        private Label registrosLabel;", "        private Button clearRecordButton;\n        private Label label4;\n        private Label registrosLabel;\n        private Label label5;\n        private TextBox searchTextBox;\n        private Button searchButton;\n        private Label label1;\n        private TextBox titleTextBox;\n        private DataGridViewTextBoxColumn ID;\n        private DataGridViewTextBoxColumn Title;\n    }\n}", "        private DataGridViewTextBoxColumn ID;\n        private DataGridViewTextBoxColumn Title;\n    }\n}"]}
{"filename": "knowledge-base-manager/MainManageForm.cs", "chunked_list": ["using ChatGPTInterface;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing SemanticSearch;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Text.Json;\nusing System.Windows.Forms;\n\nnamespace TrainingDataChatGPTApp", "\nnamespace TrainingDataChatGPTApp\n{\n    public partial class MainManageForm : Form\n    {\n        private IKnowledgeRecordManager _recordManager;\n        private string searchTerm;\n        private int selectedId = 0;\n        private readonly IConfiguration _configuration;\n\n        public MainManageForm(\n            IConfiguration configuration,\n            IKnowledgeRecordManager recordManager\n            )\n        {\n            InitializeComponent();\n            _recordManager = recordManager;\n            _configuration = configuration;\n        }\n", "        private readonly IConfiguration _configuration;\n\n        public MainManageForm(\n            IConfiguration configuration,\n            IKnowledgeRecordManager recordManager\n            )\n        {\n            InitializeComponent();\n            _recordManager = recordManager;\n            _configuration = configuration;\n        }\n", "        protected override void OnLoad(EventArgs e)\n        {\n            base.OnLoad(e);\n\n            RefreshList();\n        }\n\n        protected override void OnClosing(CancelEventArgs e)\n        {\n            base.OnClosing(e);\n        }\n", "        private void addRecordButton_Click(object sender, EventArgs e)\n        {\n            if (!string.IsNullOrWhiteSpace(contentTextBox.Text))\n            {\n                KnowledgeRecord trainingRecord = new KnowledgeRecord()\n                {\n                    Id = 0,\n                    Content = contentTextBox.Text.Trim(),\n                    Title = titleTextBox.Text.Trim()\n                };\n\n                KnowledgeRecord theRecord = _recordManager.AddRecord(trainingRecord);\n                selectedId = theRecord.Id;\n\n                ClearRecord();\n                RefreshList();\n            }\n            else\n            {\n                MessageBox.Show(\"No text to add\");\n            }\n        }\n", "        private void RefreshList()\n        {\n            List<KnowledgeRecord> records;\n            if (string.IsNullOrEmpty(searchTerm))\n            {\n                records = _recordManager.GetAllRecordsNoTracking();\n            }\n            else\n            {\n                records = _recordManager.GetAllRecordsNoTracking(searchTerm);\n            }\n            registrosLabel.Text = records.Count.ToString();\n            trainingRecordDataGridView.DataSource = records;\n            trainingRecordDataGridView.CurrentCell = null;\n            RefreshControlState();\n        }\n", "        private void trainingRecordDataGridView_CellMouseClick(object sender, DataGridViewCellMouseEventArgs e)\n        {\n            int selectedRowCount = trainingRecordDataGridView.Rows.GetRowCount(DataGridViewElementStates.Selected);\n            if (selectedRowCount > 0)\n            {\n                KnowledgeRecord selectedRecord = (KnowledgeRecord)trainingRecordDataGridView.SelectedRows[0].DataBoundItem;\n                idTextBox.Text = selectedRecord.Id.ToString();\n                titleTextBox.Text = selectedRecord.Title;\n                contentTextBox.Text = selectedRecord.Content;\n                selectedId = selectedRecord.Id;\n            }\n\n            RefreshControlState();\n        }\n", "        private void RefreshControlState()\n        {\n            if (!string.IsNullOrWhiteSpace(idTextBox.Text))\n            {\n                addRecordButton.Enabled = false;\n                deleteRecordButton.Enabled = true;\n                updateRecordButton.Enabled = true;\n                clearRecordButton.Enabled = true;\n            }\n\n            if (string.IsNullOrWhiteSpace(idTextBox.Text))\n            {\n                addRecordButton.Enabled = true;\n                deleteRecordButton.Enabled = false;\n                updateRecordButton.Enabled = false;\n                clearRecordButton.Enabled = false;\n            }\n", "            if (string.IsNullOrWhiteSpace(idTextBox.Text))\n            {\n                addRecordButton.Enabled = true;\n                deleteRecordButton.Enabled = false;\n                updateRecordButton.Enabled = false;\n                clearRecordButton.Enabled = false;\n            }\n\n            if (selectedId > 0)\n            {\n                // iterate through each row in the DataGridView", "            if (selectedId > 0)\n            {\n                // iterate through each row in the DataGridView\n                foreach (DataGridViewRow row in trainingRecordDataGridView.Rows)\n                {\n                    // check if the row's \"Id\" cell value matches the desired ID\n                    if (row.Cells[\"Id\"].Value != null && (int)row.Cells[\"Id\"].Value == selectedId)\n                    {\n                        // set the row's \"Selected\" property to true\n                        row.Selected = true;\n                        break; // exit the loop once the desired row is found\n                    }\n                }\n            }\n\n        }\n", "        private void updateRecordButton_Click(object sender, EventArgs e)\n        {\n            // Set cursor as hourglass\n            Cursor.Current = Cursors.WaitCursor;\n\n            int id = Convert.ToInt32(idTextBox.Text);\n            if (id == 0)\n            {\n                RefreshList();\n                return;\n            }\n\n            KnowledgeRecord record = _recordManager.GetSingleRecord(id);\n            record.Content = contentTextBox.Text.Trim();\n            record.Title = titleTextBox.Text.Trim();\n            _recordManager.ModifyRecord(record);\n\n            selectedId = record.Id;\n            RefreshList();\n\n            // Set cursor as default arrow\n            Cursor.Current = Cursors.Default;\n        }\n", "        private void deleteRecordButton_Click(object sender, EventArgs e)\n        {\n            // Set cursor as hourglass\n            Cursor.Current = Cursors.WaitCursor;\n\n            int id = Convert.ToInt32(idTextBox.Text);\n            if (id == 0)\n            {\n                RefreshList();\n                return;\n            }\n\n            _recordManager.DeleteRecord(id);\n            ClearRecord();\n            selectedId = 0;\n            RefreshList();\n\n            // Set cursor as default arrow\n            Cursor.Current = Cursors.Default;\n        }\n", "        private void clearRecordButton_Click(object sender, EventArgs e)\n        {\n            ClearRecord();\n            RefreshControlState();\n        }\n\n        private void ClearRecord()\n        {\n            idTextBox.Text = \"\";\n            titleTextBox.Text = \"\";\n            contentTextBox.Text = \"\";\n            selectedId = 0;\n            trainingRecordDataGridView.CurrentCell = null;\n        }\n", "        private void searchButton_Click(object sender, EventArgs e)\n        {\n            searchTerm = searchTextBox.Text.Trim(); ;\n            RefreshList();\n        }\n    }\n}"]}
{"filename": "SemanticSearch/MainSearchForm.cs", "chunked_list": ["using Azure;\nusing ChatGPTInterface;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing SemanticSearch;\nusing System.ComponentModel;\nusing System.Configuration;\nusing System.Data;\nusing System.Text.Json;\nusing System.Windows.Forms;", "using System.Text.Json;\nusing System.Windows.Forms;\n\nnamespace TrainingDataChatGPTApp\n{\n    public partial class MainSearchForm : Form\n    {\n        private IKnowledgeRecordManager _recordManager;\n        private string searchTerm;\n        private int selectedId = 0;\n        private readonly IConfiguration _configuration;", "        private string searchTerm;\n        private int selectedId = 0;\n        private readonly IConfiguration _configuration;\n        private readonly IChatGPT _chatGPT;\n\n        public MainSearchForm(\n            IConfiguration configuration, \n            IChatGPT chatGPT,\n            IKnowledgeRecordManager recordManager\n            )\n        {\n            InitializeComponent();\n            _configuration = configuration;\n            _chatGPT = chatGPT;\n            _recordManager = recordManager;\n            contextPanel.Visible = false;\n        }\n", "        protected override void OnLoad(EventArgs e)\n        {\n            base.OnLoad(e);\n            RefreshControlState();\n        }\n\n        protected override void OnClosing(CancelEventArgs e)\n        {\n            base.OnClosing(e);\n        }\n", "        private void RefreshControlState()\n        {\n            if (!string.IsNullOrEmpty(askChatGPTTextBox.Text))\n            {\n                askChatGPTButton.Enabled = true;\n            }\n            else\n            {\n                askChatGPTButton.Enabled = false;\n            }\n        }\n", "        private void askChatGPTTextBox_TextChanged(object sender, EventArgs e)\n        {\n            if (!string.IsNullOrEmpty(askChatGPTTextBox.Text))\n            {\n                askChatGPTButton.Enabled = true;\n            } else\n            {\n                askChatGPTButton.Enabled = false;\n            }\n        }\n", "        private void askChatGPTButton_Click(object sender, EventArgs e)\n        {\n            // Set cursor as hourglass\n            Cursor.Current = Cursors.WaitCursor;\n            chatGPTAnswerTextBox.Text = \"\";\n            contextPanel.Visible = false;\n            contextDetailTextBox.Text = \"\";\n            contextListBox.DataSource = null;\n\n            try\n            {\n                (string response, List<KnowledgeRecordBasicContent> contextList) = \n                    _chatGPT.GetChatGPTAnswerForQuestion(askChatGPTTextBox.Text, lowDetailRadioButton.Checked);\n                  ", "                if(response.Trim().ToLower().StartsWith(\"i don't know\"))\n                {\n                    response = _configuration[\"NoResponse\"];\n                }\n\n                chatGPTAnswerTextBox.Text = response;\n                if(contextList.Count > 0)\n                {\n                    contextPanel.Visible = true;\n                    contextListBox.DataSource = contextList;\n                    contextListBox.DisplayMember = \"DisplayText\";\n                    contextListBox.SelectedIndex = -1;\n                } else\n                {\n                    contextPanel.Visible = false;\n                }\n            }", "            catch (Exception q)\n            {\n                chatGPTAnswerTextBox.Text = \"Could not get an answer from ChatGPT: \" + q.Message;\n            }\n\n            // Set cursor as default arrow\n            Cursor.Current = Cursors.Default;\n        }\n\n        private void lowDetailRadioButton_CheckedChanged(object sender, EventArgs e)\n        {\n            lotsDetailRadioButton.Checked = !lowDetailRadioButton.Checked;\n        }\n", "        private void lowDetailRadioButton_CheckedChanged(object sender, EventArgs e)\n        {\n            lotsDetailRadioButton.Checked = !lowDetailRadioButton.Checked;\n        }\n\n        private void lotsOfDetailRadioButton_CheckedChanged(object sender, EventArgs e)\n        {\n            lowDetailRadioButton.Checked = !lotsDetailRadioButton.Checked;\n        }\n\n        private void contextListBox_SelectedIndexChanged(object sender, EventArgs e)\n        {", "        private void contextListBox_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (contextListBox.SelectedItem is KnowledgeRecordBasicContent selectedRecord)\n            {\n                contextDetailTextBox.Text = selectedRecord.Title + \"\\n\" + selectedRecord.Content;\n            } else\n            {\n                contextDetailTextBox.Text = \"\";\n            }\n        }\n    }\n}"]}
{"filename": "SemanticSearch/MainSearchForm.Designer.cs", "chunked_list": ["\ufeffnamespace TrainingDataChatGPTApp\n{\n    partial class MainSearchForm\n    {\n        /// <summary>\n        ///  Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        ///  Clean up any resources being used.\n        /// </summary>\n        /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Windows Form Designer generated code\n\n        /// <summary>\n        ///  Required method for Designer support - do not modify\n        ///  the contents of this method with the code editor.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            this.label6 = new System.Windows.Forms.Label();\n            this.askChatGPTTextBox = new System.Windows.Forms.TextBox();\n            this.askChatGPTButton = new System.Windows.Forms.Button();\n            this.chatGPTAnswerTextBox = new System.Windows.Forms.TextBox();\n            this.lowDetailRadioButton = new System.Windows.Forms.RadioButton();\n            this.lotsDetailRadioButton = new System.Windows.Forms.RadioButton();\n            this.contextPanel = new System.Windows.Forms.Panel();\n            this.contextDetailTextBox = new System.Windows.Forms.TextBox();\n            this.contextListBox = new System.Windows.Forms.ListBox();\n            this.textBox1 = new System.Windows.Forms.TextBox();\n            this.contextPanel.SuspendLayout();\n            this.SuspendLayout();\n            // \n            // label6\n            // \n            this.label6.AutoSize = true;\n            this.label6.Font = new System.Drawing.Font(\"Segoe UI\", 14F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.label6.Location = new System.Drawing.Point(465, 9);\n            this.label6.Name = \"label6\";\n            this.label6.Size = new System.Drawing.Size(217, 25);\n            this.label6.TabIndex = 20;\n            this.label6.Text = \"Ask ChatGPT A Question\";\n            // \n            // askChatGPTTextBox\n            // \n            this.askChatGPTTextBox.Font = new System.Drawing.Font(\"Segoe UI\", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.askChatGPTTextBox.Location = new System.Drawing.Point(12, 51);\n            this.askChatGPTTextBox.Name = \"askChatGPTTextBox\";\n            this.askChatGPTTextBox.Size = new System.Drawing.Size(703, 29);\n            this.askChatGPTTextBox.TabIndex = 21;\n            this.askChatGPTTextBox.TextChanged += new System.EventHandler(this.askChatGPTTextBox_TextChanged);\n            // \n            // askChatGPTButton\n            // \n            this.askChatGPTButton.Font = new System.Drawing.Font(\"Segoe UI\", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.askChatGPTButton.Location = new System.Drawing.Point(955, 50);\n            this.askChatGPTButton.Name = \"askChatGPTButton\";\n            this.askChatGPTButton.Size = new System.Drawing.Size(124, 30);\n            this.askChatGPTButton.TabIndex = 22;\n            this.askChatGPTButton.Text = \"Ask ChatGPT\";\n            this.askChatGPTButton.UseVisualStyleBackColor = true;\n            this.askChatGPTButton.Click += new System.EventHandler(this.askChatGPTButton_Click);\n            // \n            // chatGPTAnswerTextBox\n            // \n            this.chatGPTAnswerTextBox.Font = new System.Drawing.Font(\"Segoe UI\", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.chatGPTAnswerTextBox.Location = new System.Drawing.Point(12, 86);\n            this.chatGPTAnswerTextBox.Multiline = true;\n            this.chatGPTAnswerTextBox.Name = \"chatGPTAnswerTextBox\";\n            this.chatGPTAnswerTextBox.ReadOnly = true;\n            this.chatGPTAnswerTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;\n            this.chatGPTAnswerTextBox.Size = new System.Drawing.Size(542, 502);\n            this.chatGPTAnswerTextBox.TabIndex = 23;\n            // \n            // lowDetailRadioButton\n            // \n            this.lowDetailRadioButton.AutoSize = true;\n            this.lowDetailRadioButton.Checked = true;\n            this.lowDetailRadioButton.Font = new System.Drawing.Font(\"Segoe UI\", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.lowDetailRadioButton.Location = new System.Drawing.Point(721, 55);\n            this.lowDetailRadioButton.Name = \"lowDetailRadioButton\";\n            this.lowDetailRadioButton.Size = new System.Drawing.Size(103, 25);\n            this.lowDetailRadioButton.TabIndex = 24;\n            this.lowDetailRadioButton.TabStop = true;\n            this.lowDetailRadioButton.Text = \"Brief Reply\";\n            this.lowDetailRadioButton.UseVisualStyleBackColor = true;\n            this.lowDetailRadioButton.CheckedChanged += new System.EventHandler(this.lowDetailRadioButton_CheckedChanged);\n            // \n            // lotsDetailRadioButton\n            // \n            this.lotsDetailRadioButton.AutoSize = true;\n            this.lotsDetailRadioButton.Font = new System.Drawing.Font(\"Segoe UI\", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);\n            this.lotsDetailRadioButton.Location = new System.Drawing.Point(830, 55);\n            this.lotsDetailRadioButton.Name = \"lotsDetailRadioButton\";\n            this.lotsDetailRadioButton.Size = new System.Drawing.Size(119, 25);\n            this.lotsDetailRadioButton.TabIndex = 25;\n            this.lotsDetailRadioButton.Text = \"Lots of Detail\";\n            this.lotsDetailRadioButton.UseVisualStyleBackColor = true;\n            this.lotsDetailRadioButton.CheckedChanged += new System.EventHandler(this.lotsOfDetailRadioButton_CheckedChanged);\n            // \n            // contextPanel\n            // \n            this.contextPanel.Controls.Add(this.contextDetailTextBox);\n            this.contextPanel.Controls.Add(this.contextListBox);\n            this.contextPanel.Controls.Add(this.textBox1);\n            this.contextPanel.Location = new System.Drawing.Point(560, 86);\n            this.contextPanel.Name = \"contextPanel\";\n            this.contextPanel.Size = new System.Drawing.Size(536, 502);\n            this.contextPanel.TabIndex = 26;\n            // \n            // contextDetailTextBox\n            // \n            this.contextDetailTextBox.Enabled = false;\n            this.contextDetailTextBox.Location = new System.Drawing.Point(5, 136);\n            this.contextDetailTextBox.Multiline = true;\n            this.contextDetailTextBox.Name = \"contextDetailTextBox\";\n            this.contextDetailTextBox.ScrollBars = System.Windows.Forms.ScrollBars.Horizontal;\n            this.contextDetailTextBox.Size = new System.Drawing.Size(529, 366);\n            this.contextDetailTextBox.TabIndex = 2;\n            // \n            // contextListBox\n            // \n            this.contextListBox.FormattingEnabled = true;\n            this.contextListBox.ItemHeight = 15;\n            this.contextListBox.Location = new System.Drawing.Point(3, 51);\n            this.contextListBox.Name = \"contextListBox\";\n            this.contextListBox.Size = new System.Drawing.Size(533, 79);\n            this.contextListBox.TabIndex = 1;\n            this.contextListBox.SelectedIndexChanged += new System.EventHandler(this.contextListBox_SelectedIndexChanged);\n            // \n            // textBox1\n            // \n            this.textBox1.Location = new System.Drawing.Point(3, 5);\n            this.textBox1.Multiline = true;\n            this.textBox1.Name = \"textBox1\";\n            this.textBox1.ReadOnly = true;\n            this.textBox1.Size = new System.Drawing.Size(530, 40);\n            this.textBox1.TabIndex = 0;\n            this.textBox1.Text = \"The following knowledge base articles are deemed to be most relevant to answer th\" +\n    \"is question.  If you would like to read these knowledge base articles, please cl\" +\n    \"ick on the titles below:\";\n            // \n            // MainSearchForm\n            // \n            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(1108, 600);\n            this.Controls.Add(this.contextPanel);\n            this.Controls.Add(this.lotsDetailRadioButton);\n            this.Controls.Add(this.lowDetailRadioButton);\n            this.Controls.Add(this.chatGPTAnswerTextBox);\n            this.Controls.Add(this.askChatGPTButton);\n            this.Controls.Add(this.askChatGPTTextBox);\n            this.Controls.Add(this.label6);\n            this.Name = \"MainSearchForm\";\n            this.Text = \"Main Form\";\n            this.contextPanel.ResumeLayout(false);\n            this.contextPanel.PerformLayout();\n            this.ResumeLayout(false);\n            this.PerformLayout();\n\n        }\n\n        #endregion", "        private Label label6;\n        private TextBox askChatGPTTextBox;\n        private Button askChatGPTButton;\n        private TextBox chatGPTAnswerTextBox;\n        private RadioButton lowDetailRadioButton;\n        private RadioButton lotsDetailRadioButton;\n        private Panel contextPanel;\n        private TextBox contextDetailTextBox;\n        private ListBox contextListBox;\n        private TextBox textBox1;\n    }\n}", "        private ListBox contextListBox;\n        private TextBox textBox1;\n    }\n}"]}
{"filename": "SemanticSearch/Program.cs", "chunked_list": ["using Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing System.Configuration;\nusing TrainingDataChatGPTApp;\nusing Microsoft.EntityFrameworkCore;\nusing System.Windows.Forms;\nusing ChatGPTInterface;\n\nnamespace SemanticSearch", "\nnamespace SemanticSearch\n{\n    internal static class Program\n    {\n        private static IServiceProvider serviceProvider;\n\n        [STAThread]\n        static void Main()\n        {\n            // Set up dependency injection\n            ConfigureServices();\n", "            using (IServiceScope scope = serviceProvider.CreateScope())\n            {\n                IServiceProvider services = scope.ServiceProvider;\n                MainSearchForm mainForm = services.GetRequiredService<MainSearchForm>();\n                Application.Run(mainForm);\n            }\n        }\n            \n        private static void ConfigureServices()\n        {\n            IConfigurationBuilder configBuilder = new ConfigurationBuilder()\n                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n\n            IConfiguration configuration = configBuilder.Build();\n\n            // Set up the services and the DI container\n            ServiceCollection services = new ServiceCollection();\n\n            // Register the configuration\n            services.AddSingleton<IConfiguration>(configuration);\n\n            // Register the logging services\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            // Register the Entity Framework DbContext\n            services.AddDbContext<ApplicationDbContext>(options =>\n                options.UseSqlServer(configuration.GetConnectionString(\"DefaultConnection\")));\n\n            // Register your services and dependencies here\n            services.AddTransient<MainSearchForm>();\n            services.AddScoped<IChatGPT, ChatGPT>();\n            services.AddScoped<IKnowledgeRecordManager, KnowledgeRecordManager>();\n\n            serviceProvider = services.BuildServiceProvider();\n        }\n\n    }\n}", "        private static void ConfigureServices()\n        {\n            IConfigurationBuilder configBuilder = new ConfigurationBuilder()\n                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)\n                .AddJsonFile(\"appsettings.json\", optional: false, reloadOnChange: true);\n\n            IConfiguration configuration = configBuilder.Build();\n\n            // Set up the services and the DI container\n            ServiceCollection services = new ServiceCollection();\n\n            // Register the configuration\n            services.AddSingleton<IConfiguration>(configuration);\n\n            // Register the logging services\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            services.AddLogging(loggingBuilder =>\n            {\n                loggingBuilder.AddConfiguration(configuration.GetSection(\"Logging\"));\n                loggingBuilder.AddConsole();\n            });\n\n            // Register the Entity Framework DbContext\n            services.AddDbContext<ApplicationDbContext>(options =>\n                options.UseSqlServer(configuration.GetConnectionString(\"DefaultConnection\")));\n\n            // Register your services and dependencies here\n            services.AddTransient<MainSearchForm>();\n            services.AddScoped<IChatGPT, ChatGPT>();\n            services.AddScoped<IKnowledgeRecordManager, KnowledgeRecordManager>();\n\n            serviceProvider = services.BuildServiceProvider();\n        }\n\n    }\n}"]}
{"filename": "ChatGPTInterface/ChatGPT.cs", "chunked_list": ["\ufeffusing AI.Dev.OpenAI.GPT;\nusing Microsoft.Data.SqlClient;\nusing Microsoft.Extensions.Configuration;\nusing SemanticSearch;\nusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;", "using System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class ChatGPT : IChatGPT\n    {\n        private readonly IConfiguration _configuration;\n        private readonly ApplicationDbContext _context;\n\n        public ChatGPT(\n            IConfiguration configuration,\n            ApplicationDbContext context\n            )\n        {\n            _configuration = configuration;\n            _context = context;\n        }\n", "        private readonly ApplicationDbContext _context;\n\n        public ChatGPT(\n            IConfiguration configuration,\n            ApplicationDbContext context\n            )\n        {\n            _configuration = configuration;\n            _context = context;\n        }\n", "        public EmbeddingResponse GetEmbedding(string embedding)\n        {\n            string apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");\n            if (apiKey == null)\n            {\n                throw new Exception(\"OPEN AI KEY not available\");\n            }\n\n            string apiUrl = _configuration.GetSection(\"Embeddings\").GetValue<string>(\"URL\");\n\n            // Create a new HttpClient instance\n            HttpClient client = new HttpClient();\n\n            // Set the API key in the Authorization header\n            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n            // Set the content type to JSON\n            client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            // Create the JSON payload\n            var payload = new\n            {\n                model = _configuration.GetSection(\"Embeddings\").GetValue<string>(\"Model\"),\n                input = embedding\n            };\n            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(payload);\n\n            // Create the request content\n            var content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\n            // Send the request\n            var response = client.PostAsync(apiUrl, content).GetAwaiter().GetResult();\n\n            // Check if the API call was successful", "            if (response.IsSuccessStatusCode)\n            {\n                // Read the response content as a string\n                string responseContent = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();\n\n                if (responseContent == null)\n                {\n                    throw new Exception($\"Error: responseContent is null\");\n                }\n\n                // Deserialize the JSON response into a C# class\n                EmbeddingResponse embeddingResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<EmbeddingResponse>(responseContent);\n\n                return embeddingResponse;\n            }\n            else\n            {\n                // Handle the error\n                throw new Exception($\"Error: {response.StatusCode} - {response.Content.ReadAsStringAsync().GetAwaiter().GetResult()}\");\n            }\n        }\n\n        double[] GetEmbeddingScores(string embedding)\n        {\n            EmbeddingResponse response = GetEmbedding(embedding);\n            return (response.Data[0].Embedding);\n        }\n\n        private List<Similarity> GetSimilarityScoreForQuestion(string question)\n        {\n            double[] questionEmbeddings = GetEmbeddingScores(question);\n            string stringVector = string.Join(\",\", questionEmbeddings);\n\n            // Set up connection string\n            string connectionString = _configuration.GetConnectionString(\"DefaultConnection\");\n\n            // Set up SQL command\n            string commandText = _configuration.GetSection(\"Similarity\").GetValue<string>(\"SimilarityScoreSPName\");\n            SqlCommand command = new SqlCommand(commandText);\n            command.CommandType = System.Data.CommandType.StoredProcedure;\n\n            // Add parameters\n            SqlParameter csvListParam = new SqlParameter(\"@csvList\", System.Data.SqlDbType.VarChar);\n            csvListParam.Value = stringVector;\n            command.Parameters.Add(csvListParam);\n\n            SqlParameter maxResultsParam = new SqlParameter(\"@maxResults\", System.Data.SqlDbType.Int);\n            maxResultsParam.Value = _configuration.GetSection(\"Similarity\").GetValue<int>(\"MaxResults\");\n            command.Parameters.Add(maxResultsParam);\n\n            // Set up connection\n            SqlConnection connection = new SqlConnection(connectionString);\n            command.Connection = connection;\n\n            // Open connection and execute command\n            connection.Open();\n            SqlDataReader reader = command.ExecuteReader();\n\n            // Read data into a list of objects\n            List<Similarity> resultList = new List<Similarity>();", "            while (reader.Read())\n            {\n                resultList.Add(new Similarity\n                {\n                    KnowledgeRecordId = Convert.ToInt32(reader[\"id\"]),\n                    SimilarityScore = Convert.ToDouble(reader[\"similarity\"])\n                }\n                );\n            }\n\n            // Close connection and reader\n            reader.Close();\n            connection.Close();\n\n            return resultList;\n        }\n\n        private (string context, List<KnowledgeRecordBasicContent> contextList) GetContextForQuestion(string question)\n        {\n            List<Similarity> resultList = GetSimilarityScoreForQuestion(question);", "            if (resultList.Count == 0)\n            {\n                return (\"\", new List<KnowledgeRecordBasicContent>());\n            }\n\n            List<KnowledgeRecordBasicContent> theContextList = new List<KnowledgeRecordBasicContent>();\n            double similarityScoreThreshold = _configuration.GetSection(\"Completions\").GetValue<double>(\"MinSimilarityThreshold\");\n            // Add the number of tokens to each result\n            foreach (var item in resultList)\n            {\n                KnowledgeRecord theRecord = _context.KnowledgeRecords.Where(p => p.Id == item.KnowledgeRecordId).AsNoTracking().FirstOrDefault();\n                item.Tokens = theRecord.Tokens;\n                item.Text = theRecord.Content;\n", "            foreach (var item in resultList)\n            {\n                KnowledgeRecord theRecord = _context.KnowledgeRecords.Where(p => p.Id == item.KnowledgeRecordId).AsNoTracking().FirstOrDefault();\n                item.Tokens = theRecord.Tokens;\n                item.Text = theRecord.Content;\n\n                if(item.SimilarityScore >= similarityScoreThreshold)\n                {\n                    theContextList.Add(new KnowledgeRecordBasicContent()\n                    {\n                        ID = item.KnowledgeRecordId,\n                        Title = theRecord.Title,\n                        Content = theRecord.Content,\n                        SimilarityScore = item.SimilarityScore\n                    });\n                }\n            }\n\n            int maxSectionLen = _configuration.GetSection(\"Completions\").GetValue<int>(\"MaxSectionLen\");\n            string separator = \"\\n* \";\n\n            List<int> tokens = GPT3Tokenizer.Encode(separator);\n            int separatorTokens = tokens.Count;\n\n            int totalLenght = 0;\n\n            StringBuilder context = new StringBuilder();", "            foreach (var item in resultList)\n            {\n                if (context.Length == 0)\n                {\n                    context.Append(item.Text);\n                }\n                else\n                {\n                    context.Append(separator);\n                    context.Append(item.Text);\n                }\n\n                totalLenght += item.Tokens;", "                if (totalLenght > maxSectionLen)\n                {\n                    break;\n                }\n            }\n\n            return (context.ToString(), theContextList);\n        }\n\n        private (string prompt, List<KnowledgeRecordBasicContent> contextList) GetPromptForQuestion(string question, bool briefDetails)\n        {\n            (string context, List<KnowledgeRecordBasicContent> contextList) = GetContextForQuestion(question);\n", "            if (String.IsNullOrEmpty(context))\n            {\n                return (\"\", new List<KnowledgeRecordBasicContent>());\n            }\n\n            // TODO:  Get this from some configuration or environment variable\n            string header = \"Answer the question as honestly as possible using the context text provided \" +\n                \"and if the answer is not included in the text below, just say \\\"I don't know\\\".  \" +\n                \"Avoid repeating the question\";\n            if (briefDetails)\n            {\n                header = header + \" and be as brief as possible.\";\n            }\n            else\n            {\n                header = header + \" and provide as much detail as possible.\";\n            }\n\n            header = header + \"  The Context ends with the string \\\">>>>>\\\"\\r\\n\\r\\nContext: <<<<< \\r\\n\";\n\n            return (header + context + \"\\r\\n>>>>>\\r\\n\\r\\n Question: \" + question + \"\\r\\n Answer:\", contextList);\n        }\n\n        public (string answer, List<KnowledgeRecordBasicContent> contextList) GetChatGPTAnswerForQuestion(string question, bool briefDetails)\n        {\n            string apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");", "            if (briefDetails)\n            {\n                header = header + \" and be as brief as possible.\";\n            }\n            else\n            {\n                header = header + \" and provide as much detail as possible.\";\n            }\n\n            header = header + \"  The Context ends with the string \\\">>>>>\\\"\\r\\n\\r\\nContext: <<<<< \\r\\n\";\n\n            return (header + context + \"\\r\\n>>>>>\\r\\n\\r\\n Question: \" + question + \"\\r\\n Answer:\", contextList);\n        }\n\n        public (string answer, List<KnowledgeRecordBasicContent> contextList) GetChatGPTAnswerForQuestion(string question, bool briefDetails)\n        {\n            string apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");", "            if (apiKey == null)\n            {\n                throw new Exception(\"OPEN AI KEY not available\");\n            }\n\n            string apiUrl = _configuration.GetSection(\"Completions\").GetValue<string>(\"URL\");\n\n            // Create a new HttpClient instance\n            HttpClient client = new HttpClient();\n\n            // Set the API key in the Authorization header\n            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n            // Set the content type to JSON\n            client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue(\"application/json\"));\n\n            // Create the JSON payload\n            (string prompt, List<KnowledgeRecordBasicContent> contextList) = GetPromptForQuestion(question, briefDetails);\n", "            if (String.IsNullOrEmpty(prompt))\n            {\n                return (\"I don't know\", new List<KnowledgeRecordBasicContent>());\n            }\n\n            var payload = new\n            {\n                model = _configuration.GetSection(\"Completions\").GetValue<string>(\"Model\"),\n                prompt = prompt,\n                max_tokens = _configuration.GetSection(\"Completions\").GetValue<int>(\"MaxTokens\"),\n                temperature = _configuration.GetSection(\"Completions\").GetValue<int>(\"Temperature\")\n            };\n\n            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(payload);\n\n            // Create the request content\n            var content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\n            // Send the request\n            var response = client.PostAsync(apiUrl, content).GetAwaiter().GetResult();\n\n            // Check if the API call was successful", "            if (response.IsSuccessStatusCode)\n            {\n                // Read the response content as a string\n                string responseContent = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();\n\n                if (responseContent == null)\n                {\n                    throw new Exception($\"Error: responseContent is null\");\n                }\n\n                // Deserialize the JSON response into a C# class\n                CompletionResponse completionResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<CompletionResponse>(responseContent);\n", "                if (completionResponse == null)\n                {\n                    throw new Exception($\"Error: completionResponse is null\");\n                }\n\n                return (completionResponse.Choices[0].Text, contextList);\n            }\n            else\n            {\n                // Handle the error\n                throw new Exception($\"Error: {response.StatusCode} - {response.Content.ReadAsStringAsync().GetAwaiter().GetResult()}\");\n            }\n        }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/ApplicationDbContext .cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing SemanticSearch;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface", "\nnamespace ChatGPTInterface\n{\n    public class ApplicationDbContext : DbContext\n    {\n\n        public ApplicationDbContext()\n        {\n        }\n\n        public ApplicationDbContext(\n            DbContextOptions<ApplicationDbContext> options\n            ) : base(options)\n        {\n        }", "        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            if (!optionsBuilder.IsConfigured)\n            {\n                IConfigurationRoot configuration = new ConfigurationBuilder()\n                   .SetBasePath(Directory.GetCurrentDirectory())\n                   .AddJsonFile(\"appsettings.json\")\n                   .Build();\n                var connectionString = configuration.GetConnectionString(\"DefaultConnection\");\n                optionsBuilder.UseSqlServer(connectionString);\n            }\n        }\n", "        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n        }\n\n        public DbSet<KnowledgeRecord> KnowledgeRecords { get; set; }\n        public DbSet<KnowledgeVectorItem> KnowledgeVectorItems { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/CompletionChoices.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class CompletionChoices\n    {\n        [JsonProperty(\"text\")]", "{\n    public class CompletionChoices\n    {\n        [JsonProperty(\"text\")]\n        public string Text { get; set; }\n        [JsonProperty(\"index\")]\n        public int Index { get; set; }\n        [JsonProperty(\"logprobs\")]\n        public int? LogProbs { get; set; }\n        [JsonProperty(\"finish_reason\")]\n        public string FinishReason { get; set; }\n    }\n}\n", "        public string FinishReason { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/EmbeddingUsage.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class EmbeddingUsage\n    {\n        [JsonProperty(\"prompt_tokens\")]", "{\n    public class EmbeddingUsage\n    {\n        [JsonProperty(\"prompt_tokens\")]\n        public int PromptTokens { get; set; }\n        [JsonProperty(\"total_tokens\")]\n        public int TotalTokens { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/KnowledgeRecordManager.cs", "chunked_list": ["\ufeffusing AI.Dev.OpenAI.GPT;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing SemanticSearch;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Transactions;", "using System.Threading.Tasks;\nusing System.Transactions;\n\nnamespace ChatGPTInterface\n{\n    public class KnowledgeRecordManager : IKnowledgeRecordManager\n    {\n        private readonly ApplicationDbContext _context;\n        private readonly IChatGPT _chatGpt;\n        private readonly IConfiguration _configuration;\n\n        public KnowledgeRecordManager(\n            IConfiguration configuration,\n            ApplicationDbContext context,\n            IChatGPT chatGpt\n            )\n        {\n            _configuration = configuration;\n            _context = context;\n            _chatGpt = chatGpt;\n            _context.Database.EnsureCreated();\n        }\n", "        private readonly IChatGPT _chatGpt;\n        private readonly IConfiguration _configuration;\n\n        public KnowledgeRecordManager(\n            IConfiguration configuration,\n            ApplicationDbContext context,\n            IChatGPT chatGpt\n            )\n        {\n            _configuration = configuration;\n            _context = context;\n            _chatGpt = chatGpt;\n            _context.Database.EnsureCreated();\n        }\n", "        public KnowledgeRecord AddRecord(KnowledgeRecord newRecord)\n        {\n            KnowledgeRecord recordAdded;\n\n            using (var transactionScope = new TransactionScope())\n            {\n                try\n                {\n                    List<int> tokens = GPT3Tokenizer.Encode(newRecord.Content);\n                    newRecord.Tokens = tokens.Count;\n\n                    // Ahora, tenemos que conseguir los encodings del text\n\n                    var embeddingResult = _chatGpt.GetEmbedding(newRecord.Content);\n", "                    if (embeddingResult == null)\n                    {\n                        throw new Exception($\"No embeddings are available\");\n                    }\n\n                    if (embeddingResult.Data[0].Embedding.Length != 1536)\n                    {\n                        throw new Exception($\"Expected 1536 values in embedding vector but got {embeddingResult.Data[0].Embedding.Length} instead\");\n                    }\n\n                    newRecord.KnowledgeVector = new List<KnowledgeVectorItem>();", "                    foreach (var item in embeddingResult.Data[0].Embedding)\n                    {\n                        newRecord.KnowledgeVector.Add(new KnowledgeVectorItem() { Id = 0, VectorValue = item });\n                    }\n\n                    recordAdded = _context.KnowledgeRecords.Add(newRecord).Entity;\n\n                    _context.SaveChanges();\n\n                    transactionScope.Complete();\n\n                }", "                catch (Exception ex)\n                {\n                    // If an exception is thrown, the transaction is rolled back.\n                    throw;\n                }\n\n                return recordAdded;\n            }\n        }\n\n        public void ModifyRecord(KnowledgeRecord record)\n        {", "        public void ModifyRecord(KnowledgeRecord record)\n        {\n            using (var transactionScope = new TransactionScope())\n            {\n                try\n                {\n                    List<int> tokens = GPT3Tokenizer.Encode(record.Content);\n                    record.Tokens = tokens.Count;\n\n                    // Primero tenemos que borrar el vector anterior\n                    if (record.KnowledgeVector != null)\n                    {", "                    if (record.KnowledgeVector != null)\n                    {\n                        foreach (var item in record.KnowledgeVector)\n                        {\n                            _context.KnowledgeVectorItems.Remove(item);\n                        }\n                    }\n\n                    // Ahora, tenemos que conseguir los encodings del text\n                    var embeddingResult = _chatGpt.GetEmbedding(record.Content);\n", "                    if (embeddingResult == null)\n                    {\n                        throw new Exception($\"No embeddings are available\");\n                    }\n\n                    if (embeddingResult.Data[0].Embedding.Length != 1536)\n                    {\n                        throw new Exception($\"Expected 1536 values in embedding vector but got {embeddingResult.Data[0].Embedding.Length} instead\");\n                    }\n\n                    record.KnowledgeVector = new List<KnowledgeVectorItem>();", "                    foreach (var item in embeddingResult.Data[0].Embedding)\n                    {\n                        record.KnowledgeVector.Add(new KnowledgeVectorItem() { Id = 0, VectorValue = item });\n                    }\n\n                    _context.KnowledgeRecords.Update(record);\n\n                    _context.SaveChanges();\n\n                    transactionScope.Complete();\n                }", "                catch (Exception ex)\n                {\n                    // If an exception is thrown, the transaction is rolled back.\n                    throw;\n                }\n            }\n        }\n\n        public void DeleteRecord(int id)\n        {\n            using (var transactionScope = new TransactionScope())\n            {\n                try\n                {\n                    KnowledgeRecord? recordToDelete = _context.KnowledgeRecords\n                        .Where(p => p.Id == id)\n                        .Include(p => p.KnowledgeVector)\n                        .AsTracking()\n                        .FirstOrDefault();\n", "        public void DeleteRecord(int id)\n        {\n            using (var transactionScope = new TransactionScope())\n            {\n                try\n                {\n                    KnowledgeRecord? recordToDelete = _context.KnowledgeRecords\n                        .Where(p => p.Id == id)\n                        .Include(p => p.KnowledgeVector)\n                        .AsTracking()\n                        .FirstOrDefault();\n", "                    if (recordToDelete != null)\n                    {\n                        if (recordToDelete.KnowledgeVector != null)\n                        {\n                            foreach (var item in recordToDelete.KnowledgeVector)\n                            {\n                                _context.KnowledgeVectorItems.Remove(item);\n                            }\n                        }\n\n                        _context.KnowledgeRecords.Remove(recordToDelete);\n\n                        _context.SaveChanges();\n                    }\n\n                    transactionScope.Complete();\n                }", "                catch (Exception ex)\n                {\n                    // If an exception is thrown, the transaction is rolled back.\n                    throw;\n                }\n            }\n        }\n\n        public List<KnowledgeRecord> GetAllRecordsNoTracking()\n        {\n            return _context.KnowledgeRecords\n                .AsNoTracking()\n                .ToList();\n        }\n", "        public KnowledgeRecord GetSingleRecord(int id)\n        {\n            return _context.KnowledgeRecords.Find(id);\n        }\n\n        public KnowledgeRecord GetSingleRecordNoTrackin(int id)\n        {\n            return _context.KnowledgeRecords.Where(p => p.Id == id).AsNoTracking().FirstOrDefault();\n        }\n\n        public List<KnowledgeRecord> GetAllRecordsNoTracking(string searchTerm)\n        {\n            return _context.KnowledgeRecords\n                .Where(r => EF.Functions.Like(r.Title, \"%\" + searchTerm + \"%\") || EF.Functions.Like(r.Content, \"%\" + searchTerm + \"%\"))\n                .AsNoTracking()\n                .ToList();\n        }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/KnowledgeRecordBasicContent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class KnowledgeRecordBasicContent\n    {\n        public int ID { get; set; }", "    public class KnowledgeRecordBasicContent\n    {\n        public int ID { get; set; }\n        public string Title { get; set; }\n        public string Content { get; set; }\n        public double SimilarityScore { get; set; }\n\n        public string DisplayText\n        {\n            get {\n                double percentageValue = SimilarityScore * 100;\n                return $\"({percentageValue:0.00}%) \" + Title; \n            }\n        }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/Similarity.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class Similarity\n    {\n        public int KnowledgeRecordId { get; set; }", "    public class Similarity\n    {\n        public int KnowledgeRecordId { get; set; }\n        public double SimilarityScore { get; set; }\n        public int Tokens { get; set; }\n        public string Text { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/IKnowledgeRecordManager.cs", "chunked_list": ["\ufeffusing SemanticSearch;\n\nnamespace ChatGPTInterface\n{\n    public interface IKnowledgeRecordManager\n    {\n        KnowledgeRecord AddRecord(KnowledgeRecord newRecord);\n        void DeleteRecord(int id);\n        List<KnowledgeRecord> GetAllRecordsNoTracking();\n        List<KnowledgeRecord> GetAllRecordsNoTracking(string searchTerm);\n        KnowledgeRecord GetSingleRecord(int id);\n        KnowledgeRecord GetSingleRecordNoTrackin(int id);\n        void ModifyRecord(KnowledgeRecord record);\n    }\n}"]}
{"filename": "ChatGPTInterface/EmbeddingData.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class EmbeddingData\n    {\n        [JsonProperty(\"object\")]", "{\n    public class EmbeddingData\n    {\n        [JsonProperty(\"object\")]\n        public string EmbeddingObject { get; set; }\n        [JsonProperty(\"index\")]\n        public int Index { get; set; }\n        [JsonProperty(\"embedding\")]\n        public double[] Embedding { get; set; }\n\n    }\n}\n"]}
{"filename": "ChatGPTInterface/IChatGPT.cs", "chunked_list": ["\ufeffnamespace ChatGPTInterface\n{\n    public interface IChatGPT\n    {\n        (string answer, List<KnowledgeRecordBasicContent> contextList) GetChatGPTAnswerForQuestion(string question, bool briefDetails);\n        EmbeddingResponse GetEmbedding(string embedding);\n    }\n}"]}
{"filename": "ChatGPTInterface/KnowledgeVectorItem.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class KnowledgeVectorItem\n    {\n        public int Id { get; set; }", "    public class KnowledgeVectorItem\n    {\n        public int Id { get; set; }\n        public double VectorValue { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/CompletionUsage.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class CompletionUsage\n    {\n        [JsonProperty(\"prompt_tokens\")]", "{\n    public class CompletionUsage\n    {\n        [JsonProperty(\"prompt_tokens\")]\n        public int Tokens { get; set; }\n\n        [JsonProperty(\"completion_tokens\")]\n        public int CompletionTokens { get; set; }\n        [JsonProperty(\"total_tokens\")]\n        public int TotalTokens { get; set; }\n    }\n}\n", "        public int TotalTokens { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/KnowledgeRecord.cs", "chunked_list": ["\ufeffusing ChatGPTInterface;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace SemanticSearch\n{\n    public class KnowledgeRecord\n    {", "{\n    public class KnowledgeRecord\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public string Content{ get; set; }\n        public int Tokens { get; set; }\n        public List<KnowledgeVectorItem> KnowledgeVector { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/EmbeddingResponse.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class EmbeddingResponse\n    {\n        [JsonProperty(\"object\")]", "{\n    public class EmbeddingResponse\n    {\n        [JsonProperty(\"object\")]\n        public string ObjectType { get; set; }\n        [JsonProperty(\"data\")]\n        public EmbeddingData[] Data { get; set; }\n        [JsonProperty(\"model\")]\n        public string Model { get; set; }\n        [JsonProperty(\"usage\")]\n        public EmbeddingUsage Usage { get; set; }\n    }\n}\n", "        public string Model { get; set; }\n        [JsonProperty(\"usage\")]\n        public EmbeddingUsage Usage { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/CompletionResponse.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ChatGPTInterface\n{\n    public class CompletionResponse\n    {\n        [JsonProperty(\"id\")]", "{\n    public class CompletionResponse\n    {\n        [JsonProperty(\"id\")]\n        public string Id { get; set; }\n        [JsonProperty(\"object\")]\n        public string ObjectType { get; set; }\n        [JsonProperty(\"created\")]\n        public int Created { get; set; }\n        [JsonProperty(\"choices\")]\n        public CompletionChoices[] Choices { get; set; }\n        [JsonProperty(\"usage\")]", "        public int Created { get; set; }\n        [JsonProperty(\"choices\")]\n        public CompletionChoices[] Choices { get; set; }\n        [JsonProperty(\"usage\")]\n        public CompletionUsage Usage { get; set; }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/Migrations/AppDBContextModelSnapshot.cs", "chunked_list": ["\ufeff// <auto-generated />\nusing System;\nusing ChatGPTInterface;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Metadata;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\n#nullable disable\n", "#nullable disable\n\nnamespace ChatGPTInterface.Migrations\n{\n    [DbContext(typeof(ApplicationDbContext))]\n    partial class AppDBContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"7.0.4\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 128);\n\n            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ChatGPTInterface.KnowledgeVectorItem\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<int?>(\"KnowledgeRecordId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<double>(\"VectorValue\")\n                        .HasColumnType(\"float\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"KnowledgeRecordId\");\n\n                    b.ToTable(\"KnowledgeVectorItems\");\n                });\n\n            modelBuilder.Entity(\"SemanticSearch.KnowledgeRecord\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"Tokens\")\n                        .HasColumnType(\"int\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"KnowledgeRecords\");\n                });\n\n            modelBuilder.Entity(\"ChatGPTInterface.KnowledgeVectorItem\", b =>\n                {\n                    b.HasOne(\"SemanticSearch.KnowledgeRecord\", null)\n                        .WithMany(\"KnowledgeVector\")\n                        .HasForeignKey(\"KnowledgeRecordId\");\n                });\n\n            modelBuilder.Entity(\"SemanticSearch.KnowledgeRecord\", b =>\n                {\n                    b.Navigation(\"KnowledgeVector\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/Migrations/20230331230202_InitialMigration.Designer.cs", "chunked_list": ["\ufeff// <auto-generated />\nusing System;\nusing ChatGPTInterface;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Metadata;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\n#nullable disable", "\n#nullable disable\n\nnamespace ChatGPTInterface.Migrations\n{\n    [DbContext(typeof(ApplicationDbContext))]\n    [Migration(\"20230331230202_InitialMigration\")]\n    partial class InitialMigration\n    {\n        /// <inheritdoc />\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"7.0.4\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 128);\n\n            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ChatGPTInterface.KnowledgeVectorItem\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<int?>(\"KnowledgeRecordId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<double>(\"VectorValue\")\n                        .HasColumnType(\"float\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"KnowledgeRecordId\");\n\n                    b.ToTable(\"KnowledgeVectorItems\");\n                });\n\n            modelBuilder.Entity(\"SemanticSearch.KnowledgeRecord\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"Tokens\")\n                        .HasColumnType(\"int\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"KnowledgeRecords\");\n                });\n\n            modelBuilder.Entity(\"ChatGPTInterface.KnowledgeVectorItem\", b =>\n                {\n                    b.HasOne(\"SemanticSearch.KnowledgeRecord\", null)\n                        .WithMany(\"KnowledgeVector\")\n                        .HasForeignKey(\"KnowledgeRecordId\");\n                });\n\n            modelBuilder.Entity(\"SemanticSearch.KnowledgeRecord\", b =>\n                {\n                    b.Navigation(\"KnowledgeVector\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n", "        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"7.0.4\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 128);\n\n            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);\n\n            modelBuilder.Entity(\"ChatGPTInterface.KnowledgeVectorItem\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<int?>(\"KnowledgeRecordId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<double>(\"VectorValue\")\n                        .HasColumnType(\"float\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"KnowledgeRecordId\");\n\n                    b.ToTable(\"KnowledgeVectorItems\");\n                });\n\n            modelBuilder.Entity(\"SemanticSearch.KnowledgeRecord\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"));\n\n                    b.Property<string>(\"Content\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"Tokens\")\n                        .HasColumnType(\"int\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"KnowledgeRecords\");\n                });\n\n            modelBuilder.Entity(\"ChatGPTInterface.KnowledgeVectorItem\", b =>\n                {\n                    b.HasOne(\"SemanticSearch.KnowledgeRecord\", null)\n                        .WithMany(\"KnowledgeVector\")\n                        .HasForeignKey(\"KnowledgeRecordId\");\n                });\n\n            modelBuilder.Entity(\"SemanticSearch.KnowledgeRecord\", b =>\n                {\n                    b.Navigation(\"KnowledgeVector\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n"]}
{"filename": "ChatGPTInterface/Migrations/20230331230202_InitialMigration.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore.Migrations;\nusing System.Text;\n\n#nullable disable\n\nnamespace ChatGPTInterface.Migrations\n{\n    /// <inheritdoc />\n    public partial class InitialMigration : Migration\n    {\n        /// <inheritdoc />", "    public partial class InitialMigration : Migration\n    {\n        /// <inheritdoc />\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.CreateTable(\n                name: \"KnowledgeRecords\",\n                columns: table => new\n                {\n                    Id = table.Column<int>(type: \"int\", nullable: false)\n                        .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                    Title = table.Column<string>(type: \"nvarchar(max)\", nullable: false),\n                    Content = table.Column<string>(type: \"nvarchar(max)\", nullable: false),\n                    Tokens = table.Column<int>(type: \"int\", nullable: false)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_KnowledgeRecords\", x => x.Id);\n                });\n\n            migrationBuilder.CreateTable(\n                name: \"KnowledgeVectorItems\",\n                columns: table => new\n                {\n                    Id = table.Column<int>(type: \"int\", nullable: false)\n                        .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n                    VectorValue = table.Column<double>(type: \"float\", nullable: false),\n                    KnowledgeRecordId = table.Column<int>(type: \"int\", nullable: true)\n                },\n                constraints: table =>\n                {\n                    table.PrimaryKey(\"PK_KnowledgeVectorItems\", x => x.Id);\n                    table.ForeignKey(\n                        name: \"FK_KnowledgeVectorItems_KnowledgeRecords_KnowledgeRecordId\",\n                        column: x => x.KnowledgeRecordId,\n                        principalTable: \"KnowledgeRecords\",\n                        principalColumn: \"Id\");\n                });\n\n            migrationBuilder.CreateIndex(\n                name: \"IX_KnowledgeVectorItems_KnowledgeRecordId\",\n                table: \"KnowledgeVectorItems\",\n                column: \"KnowledgeRecordId\");\n\n            var sqlFile = \"sql/CalculateLargestConsineSimilarities.sql\";\n            string sqlProc = File.ReadAllText(sqlFile, Encoding.UTF8);\n            migrationBuilder.Sql(sqlProc);\n        }\n\n        /// <inheritdoc />", "        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n            migrationBuilder.DropTable(\n                name: \"KnowledgeVectorItems\");\n\n            migrationBuilder.DropTable(\n                name: \"KnowledgeRecords\");\n\n            migrationBuilder.Sql(\"DROP PROCEDURE [dbo].[sp_CalculateLargestCosineSimilarities]\");\n        }\n    }\n}\n"]}
