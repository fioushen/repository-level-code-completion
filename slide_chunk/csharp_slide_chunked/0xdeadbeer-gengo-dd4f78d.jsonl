{"filename": "osu.Game.Rulesets.Gengo/GengoDifficultyCalculator.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Difficulty;\nusing osu.Game.Rulesets.Difficulty.Preprocessing;\nusing osu.Game.Rulesets.Difficulty.Skills;", "using osu.Game.Rulesets.Difficulty.Preprocessing;\nusing osu.Game.Rulesets.Difficulty.Skills;\nusing osu.Game.Rulesets.Mods;\n\nnamespace osu.Game.Rulesets.Gengo\n{\n    public class GengoDifficultyCalculator : DifficultyCalculator\n    {\n        public GengoDifficultyCalculator(IRulesetInfo ruleset, IWorkingBeatmap beatmap)\n            : base(ruleset, beatmap)\n        {\n        }\n", "        protected override DifficultyAttributes CreateDifficultyAttributes(IBeatmap beatmap, Mod[] mods, Skill[] skills, double clockRate)\n        {\n            return new DifficultyAttributes(mods, 0);\n        }\n\n        protected override IEnumerable<DifficultyHitObject> CreateDifficultyHitObjects(IBeatmap beatmap, double clockRate) => Enumerable.Empty<DifficultyHitObject>();\n\n        protected override Skill[] CreateSkills(IBeatmap beatmap, Mod[] mods, double clockRate) => Array.Empty<Skill>();\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/GengoRuleset.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System;\nusing System.Collections.Generic;\nusing osu.Framework.Graphics;\nusing osu.Framework.Allocation;\nusing osu.Framework.Input.Bindings;\nusing osu.Game.Beatmaps;\nusing osu.Game.Configuration;", "using osu.Game.Beatmaps;\nusing osu.Game.Configuration;\nusing osu.Game.Rulesets.Difficulty;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Rulesets.Gengo.Beatmaps;\nusing osu.Game.Rulesets.Gengo.Mods;\nusing osu.Game.Rulesets.Gengo.UI;\nusing osu.Game.Rulesets.UI;\nusing osu.Game.Rulesets.Gengo.Configuration;\nusing osu.Game.Rulesets.Configuration;", "using osu.Game.Rulesets.Gengo.Configuration;\nusing osu.Game.Rulesets.Configuration;\nusing osu.Game.Overlays.Settings;\nusing osu.Game.Rulesets.Gengo.Anki;\n\nnamespace osu.Game.Rulesets.Gengo\n{\n    public class GengoRuleset : Ruleset\n    {\n        public override string Description => \"osu!gengo\";\n", "        public override string Description => \"osu!gengo\";\n\n        public override DrawableRuleset CreateDrawableRulesetWith(IBeatmap beatmap, IReadOnlyList<Mod>? mods = null) =>\n            new DrawableGengoRuleset(this, beatmap, mods);\n        public override IBeatmapConverter CreateBeatmapConverter(IBeatmap beatmap) =>\n            new GengoBeatmapConverter(beatmap, this);\n\n        public override DifficultyCalculator CreateDifficultyCalculator(IWorkingBeatmap beatmap) =>\n            new GengoDifficultyCalculator(RulesetInfo, beatmap);\n\n        public override IEnumerable<Mod> GetModsFor(ModType type)\n        {\n            switch (type)\n            {\n                case ModType.Automation:\n                    return new[] { new GengoModAutoplay() };\n\n                default:\n                    return Array.Empty<Mod>();\n            }\n        }\n", "        public override IEnumerable<Mod> GetModsFor(ModType type)\n        {\n            switch (type)\n            {\n                case ModType.Automation:\n                    return new[] { new GengoModAutoplay() };\n\n                default:\n                    return Array.Empty<Mod>();\n            }\n        }\n", "        public override string ShortName => \"gengo\";\n\n        public override IEnumerable<KeyBinding> GetDefaultKeyBindings(int variant = 0) => new[]\n        {\n            new KeyBinding(InputKey.A, GengoAction.LeftButton),\n            new KeyBinding(InputKey.S, GengoAction.RightButton),\n        };\n\n        public override Drawable CreateIcon() => new GengoRulesetIcon(this);\n        public override RulesetSettingsSubsection CreateSettings() => new GengoSettingsSubsection(this);\n", "        public override Drawable CreateIcon() => new GengoRulesetIcon(this);\n        public override RulesetSettingsSubsection CreateSettings() => new GengoSettingsSubsection(this);\n\n        public override IRulesetConfigManager CreateConfig(SettingsStore? settings) => new GengoRulesetConfigManager(settings, RulesetInfo);\n\n        // Leave this line intact. It will bake the correct version into the ruleset on each build/release.\n        public override string RulesetAPIVersionSupported => CURRENT_RULESET_API_VERSION;\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/GengoRulesetIcon.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics.Rendering;\nusing osu.Framework.Graphics.Sprites;\nusing osu.Framework.Graphics.Textures;\n\nnamespace osu.Game.Rulesets.Gengo\n{\n    public partial class GengoRulesetIcon : Sprite\n    {", "namespace osu.Game.Rulesets.Gengo\n{\n    public partial class GengoRulesetIcon : Sprite\n    {\n        private readonly Ruleset ruleset;\n\n        public GengoRulesetIcon(Ruleset ruleset)\n        {\n            this.ruleset = ruleset;\n        }\n\n        [BackgroundDependencyLoader]", "        private void load(IRenderer renderer)\n        {\n            Texture = new TextureStore(renderer, new TextureLoaderStore(ruleset.CreateResourceStore()), false).Get(\"Textures/logo\");\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/GengoInputManager.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System.ComponentModel;\nusing osu.Framework.Input.Bindings;\nusing osu.Framework.Input.Events;\nusing osu.Game.Rulesets.UI;\n\nnamespace osu.Game.Rulesets.Gengo\n{\n    public partial class GengoInputManager : RulesetInputManager<GengoAction>\n    {\n        public GengoInputManager(RulesetInfo ruleset)\n            : base(ruleset, 0, SimultaneousBindingMode.Unique)\n        {\n        }", "namespace osu.Game.Rulesets.Gengo\n{\n    public partial class GengoInputManager : RulesetInputManager<GengoAction>\n    {\n        public GengoInputManager(RulesetInfo ruleset)\n            : base(ruleset, 0, SimultaneousBindingMode.Unique)\n        {\n        }\n        protected override KeyBindingContainer<GengoAction> CreateKeyBindingContainer(RulesetInfo ruleset, int variant, SimultaneousBindingMode unique)\n            => new GengoKeyBindingContainer(ruleset, variant, unique);\n        private partial class GengoKeyBindingContainer : RulesetKeyBindingContainer {", "        protected override KeyBindingContainer<GengoAction> CreateKeyBindingContainer(RulesetInfo ruleset, int variant, SimultaneousBindingMode unique)\n            => new GengoKeyBindingContainer(ruleset, variant, unique);\n        private partial class GengoKeyBindingContainer : RulesetKeyBindingContainer {\n            public bool AllowUserPresses = true;\n            public GengoKeyBindingContainer(RulesetInfo ruleset, int variant, SimultaneousBindingMode unique) \n                : base(ruleset, variant, unique) \n            {\n            }\n            protected override bool Handle(UIEvent e)\n            {\n                return base.Handle(e);\n            }\n        }\n    }\n    ", "            protected override bool Handle(UIEvent e)\n            {\n                return base.Handle(e);\n            }\n        }\n    }\n    \n    public enum GengoAction\n    {\n        [Description(\"Left Button\")]\n        LeftButton,\n\n        [Description(\"Right Button\")]\n        RightButton,\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/GengoPlayfieldAdjustmentContainer.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Graphics.Shapes;\nusing osu.Game.Rulesets.UI;\nusing osuTK;\nusing osuTK.Graphics;\n", "using osuTK.Graphics;\n\nnamespace osu.Game.Rulesets.Gengo.UI\n{\n    public partial class GengoPlayfieldAdjustmentContainer : PlayfieldAdjustmentContainer\n    {\n        protected override Container<Drawable> Content => content;\n        private readonly ScalingContainer content;\n        private const float playfield_size_adjust = 0.8f;\n        public GengoPlayfieldAdjustmentContainer()\n        {\n            Anchor = Anchor.Centre;\n            Origin = Anchor.Centre;\n\n            // Calculated from osu!stable as 512 (default gamefield size) / 640 (default window size)\n            Size = new Vector2(playfield_size_adjust);\n\n            InternalChild = new Container\n            {\n                Anchor = Anchor.Centre,\n                Origin = Anchor.Centre,\n                RelativeSizeAxes = Axes.Both,\n                FillMode = FillMode.Fit,\n                FillAspectRatio = 4f / 3,\n                Child = content = new ScalingContainer { RelativeSizeAxes = Axes.Both }\n            };\n        }\n\n        /// <summary>\n        /// A <see cref=\"Container\"/> which scales its content relative to a target width.\n        /// </summary>", "        private const float playfield_size_adjust = 0.8f;\n        public GengoPlayfieldAdjustmentContainer()\n        {\n            Anchor = Anchor.Centre;\n            Origin = Anchor.Centre;\n\n            // Calculated from osu!stable as 512 (default gamefield size) / 640 (default window size)\n            Size = new Vector2(playfield_size_adjust);\n\n            InternalChild = new Container\n            {\n                Anchor = Anchor.Centre,\n                Origin = Anchor.Centre,\n                RelativeSizeAxes = Axes.Both,\n                FillMode = FillMode.Fit,\n                FillAspectRatio = 4f / 3,\n                Child = content = new ScalingContainer { RelativeSizeAxes = Axes.Both }\n            };\n        }\n\n        /// <summary>\n        /// A <see cref=\"Container\"/> which scales its content relative to a target width.\n        /// </summary>", "        private partial class ScalingContainer : Container\n        {\n            internal bool PlayfieldShift { get; set; }\n\n            protected override void Update()\n            {\n                base.Update();\n\n                // The following calculation results in a constant of 1.6 when OsuPlayfieldAdjustmentContainer\n                // is consuming the full game_size. This matches the osu-stable \"magic ratio\".\n                //\n                // game_size = DrawSizePreservingFillContainer.TargetSize = new Vector2(1024, 768)\n                //\n                // Parent is a 4:3 aspect enforced, using height as the constricting dimension\n                // Parent.ChildSize.X = min(game_size.X, game_size.Y * (4 / 3)) * playfield_size_adjust\n                // Parent.ChildSize.X = 819.2\n                //\n                // Scale = 819.2 / 512\n                // Scale = 1.6\n                Scale = new Vector2(Parent.ChildSize.X / GengoPlayfield.BASE_SIZE.X);\n                Position = new Vector2(0, (PlayfieldShift ? 8f : 0f) * Scale.X);\n                // Size = 0.625\n                Size = Vector2.Divide(Vector2.One, Scale);\n            }\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/AnkiConfigurationDialog.cs", "chunked_list": ["using System;\nusing osu.Framework.Allocation;\nusing osu.Framework.Screens;\nusing osu.Game.Overlays;\nusing osu.Game.Overlays.Dialog;\nusing osu.Game.Screens;\nusing osu.Game.Screens.Select;\nusing osu.Game.Screens.Play;\n\nnamespace osu.Game.Rulesets.Gengo.UI {\n    public partial class AnkiConfigurationDialog : PopupDialog {\n\n        [Resolved]\n        protected IPerformFromScreenRunner? screen { get; set; }\n\n        public AnkiConfigurationDialog(string bodyText, string cancelText) {\n            HeaderText = \"Whoops..\";\n            BodyText = bodyText;\n            \n            Buttons = new PopupDialogButton[] {\n                new PopupDialogOkButton {\n                    Text = cancelText,\n                    Action = () => { \n                        screen?.PerformFromScreen(game => game.Exit(), new [] { \n                            typeof(PlayerLoader)\n                        });\n                    }\n                }\n            };\n        }\n    }\n}", "\nnamespace osu.Game.Rulesets.Gengo.UI {\n    public partial class AnkiConfigurationDialog : PopupDialog {\n\n        [Resolved]\n        protected IPerformFromScreenRunner? screen { get; set; }\n\n        public AnkiConfigurationDialog(string bodyText, string cancelText) {\n            HeaderText = \"Whoops..\";\n            BodyText = bodyText;\n            \n            Buttons = new PopupDialogButton[] {\n                new PopupDialogOkButton {\n                    Text = cancelText,\n                    Action = () => { \n                        screen?.PerformFromScreen(game => game.Exit(), new [] { \n                            typeof(PlayerLoader)\n                        });\n                    }\n                }\n            };\n        }\n    }\n}"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/GengoPlayfield.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\n\n#nullable disable\nusing osu.Framework.Allocation;\nusing osu.Framework.Logging;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Game.Overlays;", "using osu.Framework.Graphics.Containers;\nusing osu.Game.Overlays;\nusing osu.Game.Rulesets.UI;\nusing osu.Game.Rulesets.UI.Scrolling;\nusing osu.Game.Rulesets.Gengo.UI.Cursor;\nusing osu.Game.Rulesets.Gengo.UI.Translation;\nusing osu.Game.Rulesets.Gengo.Configuration;\nusing osu.Game.Rulesets.Gengo.Anki;\nusing osuTK;\n", "using osuTK;\n\nnamespace osu.Game.Rulesets.Gengo.UI\n{\n    [Cached]\n    public partial class GengoPlayfield : ScrollingPlayfield\n    {\n        protected override GameplayCursorContainer CreateCursor() => new GengoCursorContainer();\n        public static readonly Vector2 BASE_SIZE = new Vector2(512, 384);\n\n        private FillFlowContainer playfieldContainer = new FillFlowContainer {\n            RelativeSizeAxes = Axes.Both,\n            Direction = FillDirection.Vertical,\n            Spacing = new Vector2(0f, 5f),\n        };\n\n        [Cached]", "        public static readonly Vector2 BASE_SIZE = new Vector2(512, 384);\n\n        private FillFlowContainer playfieldContainer = new FillFlowContainer {\n            RelativeSizeAxes = Axes.Both,\n            Direction = FillDirection.Vertical,\n            Spacing = new Vector2(0f, 5f),\n        };\n\n        [Cached]\n        protected readonly TranslationContainer translationContainer = new TranslationContainer();\n        [Cached]", "        protected readonly TranslationContainer translationContainer = new TranslationContainer();\n        [Cached]\n        protected readonly AnkiAPI anki = new AnkiAPI();\n\n        [BackgroundDependencyLoader]\n        private void load()\n        {\n            AddInternal(anki);\n            AddInternal(playfieldContainer);\n\n            HitObjectContainer.Anchor = Anchor.TopCentre;\n            HitObjectContainer.Origin = Anchor.Centre;\n\n            playfieldContainer.Add(translationContainer);\n            playfieldContainer.Add(HitObjectContainer);\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/DrawableGengoRuleset.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System.Collections.Generic;\nusing osu.Framework.Allocation;\nusing osu.Framework.Input;\nusing osu.Game.Beatmaps;\nusing osu.Game.Input.Handlers;\nusing osu.Game.Replays;\nusing osu.Game.Rulesets.Mods;", "using osu.Game.Replays;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Rulesets.Objects.Drawables;\nusing osu.Game.Rulesets.Gengo.Objects;\nusing osu.Game.Rulesets.Gengo.Objects.Drawables;\nusing osu.Game.Rulesets.Gengo.Replays;\nusing osu.Game.Rulesets.UI;\nusing osu.Game.Rulesets.UI.Scrolling;\nusing osu.Game.Rulesets.Gengo.Anki;\nusing osu.Game.Rulesets.Gengo.Configuration;", "using osu.Game.Rulesets.Gengo.Anki;\nusing osu.Game.Rulesets.Gengo.Configuration;\n\nnamespace osu.Game.Rulesets.Gengo.UI\n{\n    [Cached]\n    public partial class DrawableGengoRuleset : DrawableScrollingRuleset<GengoHitObject>\n    {\n        public DrawableGengoRuleset(GengoRuleset ruleset, IBeatmap beatmap, IReadOnlyList<Mod>? mods = null)\n            : base(ruleset, beatmap, mods)\n        {\n        }", "        public override PlayfieldAdjustmentContainer CreatePlayfieldAdjustmentContainer() => new GengoPlayfieldAdjustmentContainer();\n\n        protected override Playfield CreatePlayfield() => new GengoPlayfield();\n\n        protected override ReplayInputHandler CreateReplayInputHandler(Replay replay) => new GengoFramedReplayInputHandler(replay);\n\n        public override DrawableHitObject<GengoHitObject> CreateDrawableRepresentation(GengoHitObject h) => new DrawableGengoHitObject(h);\n\n        protected override PassThroughInputManager CreateInputManager() => new GengoInputManager(Ruleset.RulesetInfo);\n    }\n}\n", "        protected override PassThroughInputManager CreateInputManager() => new GengoInputManager(Ruleset.RulesetInfo);\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/GengoSettingsSubsection.cs", "chunked_list": ["using osu.Framework.Allocation;\nusing osu.Framework.Localisation;\nusing osu.Framework.Graphics;\nusing osu.Game.Overlays.Settings;\nusing osu.Game.Rulesets.Gengo.Configuration;\nusing osu.Game.Rulesets.UI;\n\nnamespace osu.Game.Rulesets.Gengo.UI \n{\n    public partial class GengoSettingsSubsection : RulesetSettingsSubsection {\n        protected override LocalisableString Header => \"osu!gengo\";\n\n        public GengoSettingsSubsection(Ruleset ruleset) \n            : base(ruleset) \n        {\n        }\n\n        [BackgroundDependencyLoader]", "{\n    public partial class GengoSettingsSubsection : RulesetSettingsSubsection {\n        protected override LocalisableString Header => \"osu!gengo\";\n\n        public GengoSettingsSubsection(Ruleset ruleset) \n            : base(ruleset) \n        {\n        }\n\n        [BackgroundDependencyLoader]\n        private void load() {\n            var config = (GengoRulesetConfigManager)Config; \n\n            Children = new Drawable[] {\n                new SettingsTextBox {\n                    LabelText = \"Anki URL (API)\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.AnkiURL)\n                }, \n                new SettingsTextBox {\n                    LabelText = \"Anki Deck\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.DeckName)\n                }, \n                new SettingsTextBox {\n                    LabelText = \"Foreign Word Field\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.ForeignWord)\n                }, \n                new SettingsTextBox {\n                    LabelText = \"Translated Word Field\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.TranslatedWord)\n                }\n            };\n        }\n    }\n}", "        private void load() {\n            var config = (GengoRulesetConfigManager)Config; \n\n            Children = new Drawable[] {\n                new SettingsTextBox {\n                    LabelText = \"Anki URL (API)\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.AnkiURL)\n                }, \n                new SettingsTextBox {\n                    LabelText = \"Anki Deck\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.DeckName)\n                }, \n                new SettingsTextBox {\n                    LabelText = \"Foreign Word Field\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.ForeignWord)\n                }, \n                new SettingsTextBox {\n                    LabelText = \"Translated Word Field\",\n                    Current = config.GetBindable<string>(GengoRulesetSetting.TranslatedWord)\n                }\n            };\n        }\n    }\n}"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/Translation/TranslationContainer.cs", "chunked_list": ["#nullable disable\n\nusing System;\nusing System.Text;\nusing System.Collections.Generic;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Logging;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Graphics.Shapes;", "using osu.Framework.Graphics.Containers;\nusing osu.Framework.Graphics.Shapes;\nusing osu.Framework.Graphics.Sprites;\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Gengo.Cards;\nusing osu.Game.Graphics.Sprites;\nusing osuTK.Graphics;\n\nnamespace osu.Game.Rulesets.Gengo.UI.Translation \n{", "namespace osu.Game.Rulesets.Gengo.UI.Translation \n{\n    /// <summary>\n    /// Container responsible for showing the two translation words\n    /// </summary>\n    public partial class TranslationContainer : GridContainer {\n        private List<Card> translationsLine = new List<Card>(); \n        private List<Card> fakesLine = new List<Card>(); \n        public OsuSpriteText leftWordText;\n        public OsuSpriteText rightWordText;\n        [Resolved]", "        public OsuSpriteText leftWordText;\n        public OsuSpriteText rightWordText;\n        [Resolved]\n        protected IBeatmap beatmap { get; set; }\n\n        private Random leftRightOrderRandom;\n\n        /// <summary>\n        /// Function to update the text of the two translation words (<see cref=\"leftWordText\"/>, <see cref=\"rightWordText\"/>)\n        /// </summary>\n        public void UpdateWordTexts() {", "        public void UpdateWordTexts() {\n            if (translationsLine.Count <= 0 || fakesLine.Count <= 0)\n                return;\n\n            // Randomly (seeded by the hash of the beatmap) decide whether the left or right word will be the bait/correct translation of the current HitObject \n            if (leftRightOrderRandom.NextDouble() > 0.5) {\n                leftWordText.Text = translationsLine[0].translatedText;\n                rightWordText.Text = fakesLine[0].translatedText;\n            } else {\n                leftWordText.Text = fakesLine[0].translatedText;\n                rightWordText.Text = translationsLine[0].translatedText;\n            }\n        }\n\n        /// <summary>\n        /// Function to add a new card to record. (function takes a fake card as well)\n        /// </summary>", "        public void AddCard(Card translationCard, Card fakeCard) {\n            translationsLine.Add(translationCard);\n            fakesLine.Add(fakeCard);\n\n            if (translationsLine.Count == 1)\n                UpdateWordTexts();\n        }\n        /// <summary>\n        /// Function to remove the first card (translation + fake) from their lines\n        /// </summary>\n        public void RemoveCard() {", "        public void RemoveCard() {\n            if (translationsLine.Count <= 0)\n                return;\n\n            translationsLine.RemoveAt(0);\n            fakesLine.RemoveAt(0);\n\n            UpdateWordTexts();\n        }\n\n        [BackgroundDependencyLoader]", "        public void load() {\n            // convert from string -> bytes -> int32\n            int beatmapHash = BitConverter.ToInt32(Encoding.UTF8.GetBytes(beatmap.BeatmapInfo.Hash), 0); \n            leftRightOrderRandom = new Random(beatmapHash);\n\n            RelativeSizeAxes = Axes.X;\n            AutoSizeAxes = Axes.Y;\n            Anchor = Anchor.TopCentre; \n            Origin = Anchor.TopCentre;\n            ColumnDimensions = new[] { \n                new Dimension(GridSizeMode.Distributed),\n                new Dimension(GridSizeMode.Distributed),\n            };\n            RowDimensions = new[] { new Dimension(GridSizeMode.AutoSize) };\n\n            Content = new[] {\n                new[] {\n                    new CircularContainer {\n                        Anchor = Anchor.Centre,\n                        Origin = Anchor.Centre,\n                        AutoSizeAxes = Axes.Both,\n                        Masking = true,\n                        CornerRadius = Size.X / 2,\n                        CornerExponent = 2,\n                        BorderColour = Color4.Black,\n                        BorderThickness = 4f,\n                        Children = new Drawable[] {\n                            new Box {\n                                RelativeSizeAxes = Axes.Both,\n                                Anchor = Anchor.Centre,\n                                Origin = Anchor.Centre,\n                                Colour = Color4.Red,\n                            },\n                            leftWordText = new OsuSpriteText {\n                                Anchor = Anchor.Centre,\n                                Origin = Anchor.Centre,\n                                Colour = Color4.Black,\n                                Text = \"-\",\n                                Font = new FontUsage(size: 20f),\n                                Margin = new MarginPadding(8f),\n                            },\n                        },\n                    },\n                    new CircularContainer {\n                        Anchor = Anchor.Centre,\n                        Origin = Anchor.Centre,\n                        AutoSizeAxes = Axes.Both,\n                        Masking = true,\n                        CornerRadius = Size.X / 2,\n                        CornerExponent = 2,\n                        BorderColour = Color4.Black,\n                        BorderThickness = 4f,\n                        Children = new Drawable[] {\n                            new Box {\n                                RelativeSizeAxes = Axes.Both,\n                                Anchor = Anchor.Centre,\n                                Origin = Anchor.Centre,\n                                Colour = Color4.Red,\n                            },\n                            rightWordText = new OsuSpriteText {\n                                Anchor = Anchor.Centre,\n                                Origin = Anchor.Centre,\n                                Colour = Color4.Black,\n                                Text = \"-\",\n                                Font = new FontUsage(size: 20f),\n                                Margin = new MarginPadding(8f),\n                            },\n                        },\n                    }\n                }\n            };\n        }\n    }\n}"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/Cursor/GengoCursorContainer.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\n#nullable disable\n\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Textures;\nusing osu.Framework.Bindables;\nusing osu.Framework.Logging;", "using osu.Framework.Bindables;\nusing osu.Framework.Logging;\nusing osu.Game.Rulesets.UI;\nusing osu.Game.Configuration;\nusing osu.Game.Screens.Play;\nusing osu.Game.Beatmaps;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Gengo.UI.Cursor\n{\n    public partial class GengoCursorContainer : GameplayCursorContainer\n    {\n        public IBindable<float> CursorScale => cursorScale;", "namespace osu.Game.Rulesets.Gengo.UI.Cursor\n{\n    public partial class GengoCursorContainer : GameplayCursorContainer\n    {\n        public IBindable<float> CursorScale => cursorScale;\n        private readonly Bindable<float> cursorScale = new BindableFloat(1);\n        private Bindable<float> userCursorScale;\n        private Bindable<bool> autoCursorScale;\n\n        [Resolved(canBeNull: true)]\n        private GameplayState state { get; set; }\n\n        [Resolved]", "        private GameplayState state { get; set; }\n\n        [Resolved]\n        private OsuConfigManager config { get; set; }\n        protected override Drawable CreateCursor() => new GengoCursor();\n\n        [BackgroundDependencyLoader]\n        private void load(TextureStore textures) {\n\n        }\n", "        protected override void LoadComplete()\n        {\n            base.LoadComplete();\n\n            userCursorScale = config.GetBindable<float>(OsuSetting.GameplayCursorSize);\n            userCursorScale.ValueChanged += _ => calculateScale();\n\n            autoCursorScale = config.GetBindable<bool>(OsuSetting.AutoCursorSize);\n            autoCursorScale.ValueChanged += _ => calculateScale();\n\n            CursorScale.BindValueChanged(e => {\n                var newScale = new Vector2(e.NewValue);\n                ActiveCursor.Scale = newScale;\n            }, true);\n        \n            calculateScale();\n        }\n\n        /// <summary>\n        /// Get the scale applicable to the ActiveCursor based on a beatmap's circle size.\n        /// </summary>", "        public static float GetScaleForCircleSize(float circleSize) =>\n            1f - 0.7f * (1f + circleSize - BeatmapDifficulty.DEFAULT_DIFFICULTY) / BeatmapDifficulty.DEFAULT_DIFFICULTY;\n\n        private void calculateScale() {\n            float scale = userCursorScale.Value;\n\n            if (autoCursorScale.Value && state != null) { \n                // if we have a beatmap available, let's get its circle size to figure out an automatic cursor scale modifier.\n                scale *= GetScaleForCircleSize(state.Beatmap.Difficulty.CircleSize);\n            }\n\n            cursorScale.Value = scale;\n\n            var newScale = new Vector2(scale);\n\n            ActiveCursor.ScaleTo(newScale, 400, Easing.OutQuint);\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/UI/Cursor/GengoCursor.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\n#nullable disable\n\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Graphics.Textures;\nusing osu.Framework.Graphics.Sprites;", "using osu.Framework.Graphics.Textures;\nusing osu.Framework.Graphics.Sprites;\nusing osu.Game.Skinning;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Gengo.UI.Cursor\n{\n    public partial class GengoCursor : SkinReloadableDrawable\n    {\n        private const float size = 45;\n", "        private const float size = 45;\n\n        private Sprite cursorSprite;\n\n        public GengoCursor()\n        {\n            Origin = Anchor.Centre;\n            Size = new Vector2(size);\n        }\n\n        [BackgroundDependencyLoader]", "        private void load(TextureStore textures)\n        {\n            InternalChild = new Container\n            {\n                RelativeSizeAxes = Axes.Both,\n                Origin = Anchor.Centre,\n                Anchor = Anchor.Centre,\n                Child = cursorSprite = new Sprite\n                {\n                    RelativeSizeAxes = Axes.Both,\n                    Origin = Anchor.Centre,\n                    Anchor = Anchor.Centre,\n                    Texture = textures.Get(\"cursor\"),\n                }\n            };\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Cards/Card.cs", "chunked_list": ["using System;\n\nnamespace osu.Game.Rulesets.Gengo.Cards \n{\n    public class Card : IEquatable<Card> {\n        public string foreignText { get; set; }\n        public string translatedText { get; set; }\n        public string cardID { get; set; }\n        public Card(string foreignText, string translatedText, string cardID) {\n            this.foreignText = foreignText;\n            this.translatedText = translatedText;\n            this.cardID = cardID;\n        }\n", "        public override bool Equals(object? obj)\n        {\n            return this.Equals(obj as Card);\n        }\n\n        public override int GetHashCode()\n        {\n            int hash = 0; \n            hash += 31 * foreignText?.GetHashCode() ?? 0;\n            hash += 17 * translatedText?.GetHashCode() ?? 0;\n            hash += 11 * cardID?.GetHashCode() ?? 0;\n            return hash;\n        }\n", "        public bool Equals(Card? other) {\n            if (other is null)\n                return false;\n\n            return (other.foreignText == this.foreignText) && \n                   (other.translatedText == this.translatedText) && \n                   (other.cardID == this.cardID);\n        }\n    }\n}"]}
{"filename": "osu.Game.Rulesets.Gengo/Mods/GengoModAutoplay.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System.Collections.Generic;\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Rulesets.Gengo.Replays;\n\nnamespace osu.Game.Rulesets.Gengo.Mods\n{\n    public class GengoModAutoplay : ModAutoplay\n    {", "namespace osu.Game.Rulesets.Gengo.Mods\n{\n    public class GengoModAutoplay : ModAutoplay\n    {\n        public override ModReplayData CreateReplayData(IBeatmap beatmap, IReadOnlyList<Mod> mods)\n            => new ModReplayData(new GengoAutoGenerator(beatmap).Generate(), new ModCreatedUser { Username = \"sample\" });\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Objects/GengoHitObject.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing osu.Game.Rulesets.Judgements;\nusing osu.Game.Rulesets.Objects;\nusing osu.Game.Rulesets.Objects.Types;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Gengo.Objects\n{\n    public class GengoHitObject : HitObject, IHasPosition\n    {", "namespace osu.Game.Rulesets.Gengo.Objects\n{\n    public class GengoHitObject : HitObject, IHasPosition\n    {\n        public override Judgement CreateJudgement() => new Judgement();\n\n        public Vector2 Position { get; set; }\n\n        public float X => Position.X;\n        public float Y => Position.Y;\n    }\n}\n", "        public float X => Position.X;\n        public float Y => Position.Y;\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Objects/Drawables/DrawableGengoHitObject.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\n#nullable disable\n\nusing System;\nusing System.Collections.Generic;\nusing osu.Framework.Allocation;\nusing osu.Framework.Extensions.Color4Extensions;\nusing osu.Framework.Graphics;", "using osu.Framework.Extensions.Color4Extensions;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Textures;\nusing osu.Framework.Graphics.Sprites;\nusing osu.Framework.Graphics.Shapes;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Input.Bindings;\nusing osu.Framework.Input.Events;\nusing osu.Framework.Logging;\nusing osu.Framework.Screens;", "using osu.Framework.Logging;\nusing osu.Framework.Screens;\nusing osu.Game.Audio;\nusing osu.Game.Screens;\nusing osu.Game.Graphics.Sprites;\nusing osu.Game.Rulesets.Objects.Drawables;\nusing osu.Game.Rulesets.Scoring;\nusing osu.Game.Rulesets.Judgements;\nusing osu.Game.Rulesets.Gengo.UI.Translation;\nusing osu.Game.Rulesets.Gengo.Anki;", "using osu.Game.Rulesets.Gengo.UI.Translation;\nusing osu.Game.Rulesets.Gengo.Anki;\nusing osu.Game.Rulesets.Gengo.Cards;\nusing osuTK;\nusing osuTK.Graphics;\n\nnamespace osu.Game.Rulesets.Gengo.Objects.Drawables\n{\n    public partial class DrawableGengoHitObject : DrawableHitObject<GengoHitObject>, IKeyBindingHandler<GengoAction>\n    {\n        private const double time_preempt = 600;", "    public partial class DrawableGengoHitObject : DrawableHitObject<GengoHitObject>, IKeyBindingHandler<GengoAction>\n    {\n        private const double time_preempt = 600;\n        private const double time_fadein = 400;\n        public override bool HandlePositionalInput => true;\n        public DrawableGengoHitObject(GengoHitObject hitObject)\n            : base(hitObject)\n        {\n            Size = new Vector2(80);\n            Origin = Anchor.Centre;\n            Position = hitObject.Position;\n        }\n\n        [Resolved]", "        protected TranslationContainer translationContainer { get; set; }\n        [Resolved]\n        protected AnkiAPI anki { get; set; }\n\n        private Card assignedCard;\n        private Card baitCard;\n        \n        private Box cardDesign;\n        private OsuSpriteText cardText;\n\n        [BackgroundDependencyLoader]", "        private OsuSpriteText cardText;\n\n        [BackgroundDependencyLoader]\n        private void load(TextureStore textures)\n        {\n            assignedCard = anki.FetchRandomCard();\n            baitCard = anki.FetchRandomCard();\n\n            translationContainer.AddCard(assignedCard, baitCard);\n\n            AddInternal(new CircularContainer {\n                AutoSizeAxes = Axes.Both,\n                Anchor = Anchor.Centre,\n                Origin = Anchor.Centre,\n                Masking = true,\n                CornerRadius = 15f,\n                Children = new Drawable[] {\n                    cardDesign = new Box {\n                        RelativeSizeAxes = Axes.Both,\n                        Anchor = Anchor.Centre,\n                        Origin = Anchor.Centre,\n                        Colour = Color4.Black,\n                    }, \n                    cardText = new OsuSpriteText {\n                        Text = assignedCard.foreignText,\n                        Anchor = Anchor.Centre,\n                        Origin = Anchor.Centre,\n                        Colour = Color4.Red,\n                        Font = new FontUsage(size: 35f),\n                        Margin = new MarginPadding(8f),\n                    }\n                }\n            });\n        }\n", "        public override IEnumerable<HitSampleInfo> GetSamples() => new[]\n        {\n            new HitSampleInfo(HitSampleInfo.HIT_NORMAL)\n        };\n        protected void ApplyResult(HitResult result) {\n            void resultApplication(JudgementResult r) => r.Type = result; \n            ApplyResult(resultApplication);\n        }\n        GengoAction pressedAction;\n\n        /// <summary>", "        /// Checks whether or not the pressed button/action for the current HitObject was correct for (matching to) the assigned card.\n        /// </summary>\n        bool CorrectActionCheck() {\n            if (pressedAction == GengoAction.LeftButton) \n                return translationContainer.leftWordText.Text == assignedCard.translatedText;\n\n            else if (pressedAction == GengoAction.RightButton) \n                return translationContainer.rightWordText.Text == assignedCard.translatedText;\n\n            return false;\n        }", "        protected override void CheckForResult(bool userTriggered, double timeOffset)\n        {\n            if (!userTriggered)\n            {\n                if (!HitObject.HitWindows.CanBeHit(timeOffset)) {\n                    translationContainer.RemoveCard();\n                    ApplyResult(r => r.Type = r.Judgement.MinResult);\n                }\n                return;\n            }\n\n            var result = HitObject.HitWindows.ResultFor(timeOffset);", "            if (result == HitResult.None)\n                return;\n\n            if (!CorrectActionCheck()) {\n                translationContainer.RemoveCard();\n                ApplyResult(HitResult.Miss);\n                return;\n            }\n\n            translationContainer.RemoveCard();\n            ApplyResult(r => r.Type = result);\n        }\n", "        protected override double InitialLifetimeOffset => time_preempt;\n\n        protected override void UpdateHitStateTransforms(ArmedState state)\n        {\n            switch (state)\n            {\n                case ArmedState.Hit:\n                    cardText.FadeColour(Color4.White, 200, Easing.OutQuint);\n                    cardDesign.FadeColour(Color4.YellowGreen, 200, Easing.OutQuint);\n                    this.ScaleTo(2, 500, Easing.OutQuint).Expire();\n                    break;\n\n                default:\n                    this.ScaleTo(0.8f, 200, Easing.OutQuint);\n                    cardText.FadeColour(Color4.Black, 200, Easing.OutQuint);\n                    cardDesign.FadeColour(Color4.Red, 200, Easing.OutQuint);\n                    this.FadeOut(500, Easing.InQuint).Expire();\n                    break;\n            }\n        }", "        public bool OnPressed(KeyBindingPressEvent<GengoAction> e) {\n            if (e.Action != GengoAction.LeftButton && e.Action != GengoAction.RightButton)\n                return false; \n\n            pressedAction = e.Action; \n\n            return UpdateResult(true);\n        }\n\n        public void OnReleased(KeyBindingReleaseEvent<GengoAction> e) {\n        }\n   }\n}\n", "        public void OnReleased(KeyBindingReleaseEvent<GengoAction> e) {\n        }\n   }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Anki/Anki.cs", "chunked_list": ["#nullable disable\n\nusing System;\nusing System.Text;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Extensions;\nusing osu.Framework.Logging;", "using osu.Framework.Extensions;\nusing osu.Framework.Logging;\nusing osu.Game.Beatmaps;\nusing osu.Game.Overlays;\nusing osu.Game.Screens.Play;\nusing osu.Game.Rulesets.Gengo.Cards;\nusing osu.Game.Rulesets.Gengo.Configuration;\nusing osu.Game.Rulesets.Gengo.UI;\nusing Newtonsoft.Json;\nusing Microsoft.CSharp.RuntimeBinder;", "using Newtonsoft.Json;\nusing Microsoft.CSharp.RuntimeBinder;\n\nnamespace osu.Game.Rulesets.Gengo.Anki \n{\n    /// <summary>\n    /// Class for connecting to the anki API. \n    /// </summary>\n    public partial class AnkiAPI : Component {\n        public string URL { get; set; } \n        public string ankiDeck{ get; set; }", "    public partial class AnkiAPI : Component {\n        public string URL { get; set; } \n        public string ankiDeck{ get; set; }\n        public string foreignWordField { get; set; } \n        public string translatedWordField { get; set; }\n        private List<Card> dueCards = new List<Card>();\n        private HttpClient httpClient;\n        \n        [Resolved]\n        protected GengoRulesetConfigManager config { get; set; }\n        [Resolved]", "        protected GengoRulesetConfigManager config { get; set; }\n        [Resolved]\n        protected IBeatmap beatmap { get; set; }\n        [Resolved] \n        protected IDialogOverlay dialogOverlay { get; set; }\n\n        private Random hitObjectRandom;\n\n        /// <summary>\n        /// Function checks whether it's possible to send valid requests to the Anki API with current configurations\n        /// </summary>\n        bool CheckSettings() {\n            var requestData = new {\n                action = \"findCards\",\n                version = 6,\n                parameters = new {\n                    query = $\"deck:\\\"{ankiDeck}\\\" is:due\"\n                }\n            };\n", "            try {\n                var jsonRequestData = new StringContent(JsonConvert.SerializeObject(requestData));\n\n                var response = httpClient.PostAsync(URL, jsonRequestData).GetResultSafely();\n\n                response.EnsureSuccessStatusCode();\n\n                var responseString = response.Content.ReadAsStringAsync().GetResultSafely();\n\n                var deserializedResponse = JsonConvert.DeserializeObject<dynamic>(responseString);\n\n                return deserializedResponse.error == null;\n            } catch {\n                return false;\n            }\n       }\n\n        [BackgroundDependencyLoader]", "        public void load() {\n            URL = config?.GetBindable<string>(GengoRulesetSetting.AnkiURL).Value;\n            ankiDeck = config?.GetBindable<string>(GengoRulesetSetting.DeckName).Value;\n            foreignWordField = config?.GetBindable<string>(GengoRulesetSetting.ForeignWord).Value;\n            translatedWordField = config?.GetBindable<string>(GengoRulesetSetting.TranslatedWord).Value;\n            httpClient = new HttpClient();\n\n            // convert from string -> bytes -> int32\n            int beatmapHash = BitConverter.ToInt32(Encoding.UTF8.GetBytes(beatmap.BeatmapInfo.Hash), 0); \n            hitObjectRandom = new Random(beatmapHash);\n            ", "            if(!CheckSettings()) {\n                dialogOverlay.Push(new AnkiConfigurationDialog(\"It seems like you've misconfigured osu!gengo's settings\", \"Back to the settings I go..\"));\n            } else {\n                GetDueCardsFull();\n            }\n        }\n\n        /// <summary>\n        /// Function to fetch due cards from the Anki API\n        /// </summary>\n        public void GetDueCardsFull() {\n            // IDEA: Make the query customizable in the future (i.e. add a settings option for it)\n            var requestData = new {\n                action = \"findCardsFull\",\n                version = 6,\n                parameters = new {\n                    query = $\"deck:\\\"{ankiDeck}\\\" is:due\",\n                },\n            };\n\n            var jsonRequestData = new StringContent(JsonConvert.SerializeObject(requestData));\n\n            var response = httpClient.PostAsync(URL, jsonRequestData).GetResultSafely();\n            var responseString = response.Content.ReadAsStringAsync().GetResultSafely();\n\n            dynamic deserializedResponse = JsonConvert.DeserializeObject<dynamic>(responseString);\n\n            // If there's an error with the Anki query, create an error dialog", "        public void GetDueCardsFull() {\n            // IDEA: Make the query customizable in the future (i.e. add a settings option for it)\n            var requestData = new {\n                action = \"findCardsFull\",\n                version = 6,\n                parameters = new {\n                    query = $\"deck:\\\"{ankiDeck}\\\" is:due\",\n                },\n            };\n\n            var jsonRequestData = new StringContent(JsonConvert.SerializeObject(requestData));\n\n            var response = httpClient.PostAsync(URL, jsonRequestData).GetResultSafely();\n            var responseString = response.Content.ReadAsStringAsync().GetResultSafely();\n\n            dynamic deserializedResponse = JsonConvert.DeserializeObject<dynamic>(responseString);\n\n            // If there's an error with the Anki query, create an error dialog", "            if (deserializedResponse.error != null) {\n                dialogOverlay.Push(new AnkiConfigurationDialog($\"Error retrieved from the Anki API: {deserializedResponse.error}\", \"Go back\"));\n                return;\n            }\n\n            // Try to fill the cards array. If you get a null-reference, it means that the field names configured by the user are wrong\n            try {\n                foreach (var id in deserializedResponse.result) {\n                    string foreignWord = id.fields[foreignWordField].value;\n                    string translatedWord = id.fields[translatedWordField].value;\n                    string cardId = id.cardId;\n\n                    var newCard = new Card(foreignWord, translatedWord, cardId.ToString());\n\n                    dueCards.Add(newCard);\n                }\n            }", "            catch (RuntimeBinderException) {\n                dialogOverlay.Push(new AnkiConfigurationDialog($\"Double check if the field names ('{foreignWordField}', '{translatedWordField}') are correct for the cards used in the deck '{ankiDeck}'\", \"Go back\"));\n                return;\n            }\n\n            // If there's no cards in the array, create an error dialog\n            if (dueCards.Count == 0) {\n                dialogOverlay.Push(new AnkiConfigurationDialog($\"No due cards found in deck '{ankiDeck}' at '{URL}'\", \"Go back\"));\n                return;\n            }\n        }\n\n        /// <summary>\n        /// Return random card object from <see cref=\"dueCards\"/>\n        /// </summary>", "        public Card FetchRandomCard() {\n            if (dueCards.Count <= 0) {\n                return new Card(\"NULL\", \"NULL\", \"NULL\");\n            }\n\n            int randomIndex = hitObjectRandom.Next(0, dueCards.Count);\n            return dueCards[randomIndex];\n        }\n    }\n}"]}
{"filename": "osu.Game.Rulesets.Gengo/Replays/GengoAutoGenerator.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Gengo.Objects;\nusing osu.Game.Rulesets.Replays;\n\nnamespace osu.Game.Rulesets.Gengo.Replays\n{\n    public class GengoAutoGenerator : AutoGenerator<GengoReplayFrame>\n    {", "{\n    public class GengoAutoGenerator : AutoGenerator<GengoReplayFrame>\n    {\n        public new Beatmap<GengoHitObject> Beatmap => (Beatmap<GengoHitObject>)base.Beatmap;\n\n        public GengoAutoGenerator(IBeatmap beatmap)\n            : base(beatmap)\n        {\n        }\n\n        protected override void GenerateFrames()\n        {\n            Frames.Add(new GengoReplayFrame());\n", "        protected override void GenerateFrames()\n        {\n            Frames.Add(new GengoReplayFrame());\n\n            foreach (GengoHitObject hitObject in Beatmap.HitObjects)\n            {\n                Frames.Add(new GengoReplayFrame\n                {\n                    Time = hitObject.StartTime,\n                    Position = hitObject.Position,\n                });\n            }\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Replays/GengoReplayFrame.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing osu.Game.Rulesets.Replays;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Gengo.Replays\n{\n    public class GengoReplayFrame : ReplayFrame\n    {\n        public Vector2 Position;\n    }\n}\n", "    public class GengoReplayFrame : ReplayFrame\n    {\n        public Vector2 Position;\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Replays/GengoFramedReplayInputHandler.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System.Collections.Generic;\nusing osu.Framework.Input.StateChanges;\nusing osu.Framework.Utils;\nusing osu.Game.Replays;\nusing osu.Game.Rulesets.Replays;\n\nnamespace osu.Game.Rulesets.Gengo.Replays", "\nnamespace osu.Game.Rulesets.Gengo.Replays\n{\n    public class GengoFramedReplayInputHandler : FramedReplayInputHandler<GengoReplayFrame>\n    {\n        public GengoFramedReplayInputHandler(Replay replay)\n            : base(replay)\n        {\n        }\n\n        protected override bool IsImportant(GengoReplayFrame frame) => true;\n", "        protected override bool IsImportant(GengoReplayFrame frame) => true;\n\n        protected override void CollectReplayInputs(List<IInput> inputs)\n        {\n            var position = Interpolation.ValueAt(CurrentTime, StartFrame.Position, EndFrame.Position, StartFrame.Time, EndFrame.Time);\n\n            inputs.Add(new MousePositionAbsoluteInput\n            {\n                Position = GamefieldToScreenSpace(position)\n            });\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Beatmaps/GengoBeatmapConverter.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Objects;\nusing osu.Game.Rulesets.Objects.Types;\nusing osu.Game.Rulesets.Gengo.Objects;", "using osu.Game.Rulesets.Objects.Types;\nusing osu.Game.Rulesets.Gengo.Objects;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Gengo.Beatmaps\n{\n    public class GengoBeatmapConverter : BeatmapConverter<GengoHitObject>\n    {\n        public GengoBeatmapConverter(IBeatmap beatmap, Ruleset ruleset)\n            : base(beatmap, ruleset)\n        {\n        }\n", "        public override bool CanConvert() => Beatmap.HitObjects.All(h => h is IHasPosition);\n\n        protected override IEnumerable<GengoHitObject> ConvertHitObject(HitObject original, IBeatmap beatmap, CancellationToken cancellationToken)\n        {\n            yield return new GengoHitObject\n            {\n                Samples = original.Samples,\n                StartTime = original.StartTime,\n                Position = (original as IHasPosition)?.Position ?? Vector2.Zero,\n            };\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo/Configuration/GengoRulesetConfigManager.cs", "chunked_list": ["using osu.Game.Configuration; \nusing osu.Game.Rulesets.Configuration;\nusing osu.Game.Rulesets.UI; \n\nnamespace osu.Game.Rulesets.Gengo.Configuration \n{\n    public class GengoRulesetConfigManager : RulesetConfigManager<GengoRulesetSetting> {\n        public GengoRulesetConfigManager(SettingsStore? settings, RulesetInfo ruleset, int? variant = null)\n            : base(settings, ruleset, variant) \n        {\n        }\n", "        protected override void InitialiseDefaults()\n        {\n            base.InitialiseDefaults();\n            SetDefault(GengoRulesetSetting.AnkiURL, \"http://localhost:8766\");\n            SetDefault(GengoRulesetSetting.DeckName, \"\");\n            SetDefault(GengoRulesetSetting.ForeignWord, \"ForeignWord\");\n            SetDefault(GengoRulesetSetting.TranslatedWord, \"TranslatedWord\");\n        }\n    }\n    \n    public enum GengoRulesetSetting {\n        AnkiURL, \n        DeckName,\n        ForeignWord, \n        TranslatedWord,\n    }\n}", "    public enum GengoRulesetSetting {\n        AnkiURL, \n        DeckName,\n        ForeignWord, \n        TranslatedWord,\n    }\n}"]}
{"filename": "osu.Game.Rulesets.Gengo.Tests/TestSceneOsuGame.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Shapes;\nusing osu.Game.Tests.Visual;\nusing osuTK.Graphics;\n\nnamespace osu.Game.Rulesets.Gengo.Tests", "\nnamespace osu.Game.Rulesets.Gengo.Tests\n{\n    public partial class TestSceneOsuGame : OsuTestScene\n    {\n        [BackgroundDependencyLoader]\n        private void load()\n        {\n            Children = new Drawable[]\n            {\n                new Box\n                {\n                    RelativeSizeAxes = Axes.Both,\n                    Colour = Color4.Black,\n                },\n            };\n\n            AddGame(new OsuGame());\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo.Tests/VisualTestRunner.cs", "chunked_list": ["\ufeff// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing System;\nusing osu.Framework;\nusing osu.Framework.Platform;\nusing osu.Game.Tests;\n\nnamespace osu.Game.Rulesets.Gengo.Tests\n{\n    public static class VisualTestRunner\n    {\n        [STAThread]", "namespace osu.Game.Rulesets.Gengo.Tests\n{\n    public static class VisualTestRunner\n    {\n        [STAThread]\n        public static int Main(string[] args)\n        {\n            using (DesktopGameHost host = Host.GetSuitableDesktopHost(@\"osu\", new HostOptions { BindIPC = true }))\n            {\n                host.Run(new OsuTestBrowser());\n                return 0;\n            }\n        }\n    }\n}\n"]}
{"filename": "osu.Game.Rulesets.Gengo.Tests/TestSceneOsuPlayer.cs", "chunked_list": ["// Copyright (c) ppy Pty Ltd <contact@ppy.sh>. Licensed under the MIT Licence.\n// See the LICENCE file in the repository root for full licence text.\n\nusing NUnit.Framework;\nusing osu.Game.Tests.Visual;\n\nnamespace osu.Game.Rulesets.Gengo.Tests\n{\n    [TestFixture]\n    public partial class TestSceneOsuPlayer : PlayerTestScene\n    {", "    [TestFixture]\n    public partial class TestSceneOsuPlayer : PlayerTestScene\n    {\n        protected override Ruleset CreatePlayerRuleset() => new GengoRuleset();\n    }\n}\n"]}
