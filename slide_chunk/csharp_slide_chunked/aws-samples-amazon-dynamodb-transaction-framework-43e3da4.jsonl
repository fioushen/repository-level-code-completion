{"filename": "BootCamp.DataAccess.Contract/IProductProvider.cs", "chunked_list": ["\ufeffusing BootCamp.DataAccess.Common.AWS.DynamoDB.Transaction;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace BootCamp.DataAccess.Contract\n{\n    public interface IProductProvider\n    {\n        /// <summary>\n        /// Interface for create table.\n        /// </summary>\n        /// <param name=\"tableName\"></param>\n        /// <param name=\"partitionKey\">The table partition key.</param>\n        /// <param name=\"sortKey\">The table sort key.</param>\n        /// <returns></returns>\n        Task CreateTable(string tableName, string partitionKey, string sortKey);\n\n        /// <summary>\n        /// Interface for get product.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>\n        Task<ProductDto> GetProduct(ProductDto dto);\n\n        /// <summary>\n        /// Interface for put product.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <param name=\"scope\"></param>\n        /// <returns></returns>\n        Task PutProduct(ProductDto dto, TransactScope scope);\n\n        /// <summary>\n        /// Interface for delete product.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <param name=\"scope\"></param>\n        /// <returns></returns>\n        Task DeleteProduct(ProductDto dto, TransactScope scope);\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Contract/Dto/AlbumDto.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.DataAccess.Contract\n{\n    /// <summary>\n    /// Class for product\n    /// </summary>\n    public class AlbumDto : ProductDto\n    {\n        /// <summary>\n        /// Album artist.\n        /// </summary>", "    public class AlbumDto : ProductDto\n    {\n        /// <summary>\n        /// Album artist.\n        /// </summary>\n        public string Artist { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Contract/Dto/BookDto.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.DataAccess.Contract\n{\n    /// <summary>\n    /// Class for product\n    /// </summary>\n    public class BookDto : ProductDto\n    {\n        /// <summary>\n        /// Book author\n        /// </summary>", "    public class BookDto : ProductDto\n    {\n        /// <summary>\n        /// Book author\n        /// </summary>\n        public string Author { get; set; }\n\n        /// <summary>\n        /// Book publish date.\n        /// </summary>\n        public string PublishDate { get; set; }\n\n    }\n}\n", "        public string PublishDate { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Contract/Dto/ProductDto.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.DataAccess.Contract\n{\n    /// <summary>\n    /// Class for product\n    /// </summary>\n    public abstract class ProductDto\n    {\n        /// <summary>\n        /// Table name.\n        /// </summary>", "    public abstract class ProductDto\n    {\n        /// <summary>\n        /// Table name.\n        /// </summary>\n        public string TableName { get; set; }\n\n        /// <summary>\n        /// Producr type.\n        /// </summary>\n        public string ProductType { get; set; }\n\n        /// <summary>\n        /// Movie title.\n        /// </summary>", "        public string ProductType { get; set; }\n\n        /// <summary>\n        /// Movie title.\n        /// </summary>\n        public string Title { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Contract/Dto/MovieDto.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.DataAccess.Contract\n{\n    /// <summary>\n    /// Class for product\n    /// </summary>\n    public class MovieDto : ProductDto\n    {\n\n        /// <summary>\n        /// Movie genre\n        /// </summary>", "    public class MovieDto : ProductDto\n    {\n\n        /// <summary>\n        /// Movie genre\n        /// </summary>\n        public string Genre { get; set; }\n\n        /// <summary>\n        /// Movie director.\n        /// </summary>", "        public string Director { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCampDynamoDB/Program.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace BootCampDynamoDB\n{\n    static class Program\n    {\n        /// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n        }\n    }\n}\n", "    static class Program\n    {\n        /// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n        }\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess/ProductProvider.cs", "chunked_list": ["\ufeffusing Amazon.DynamoDBv2;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BootCamp.DataAccess.Contract;\nusing BootCamp.DataAccess.Extension;\nusing BootCamp.DataAccess.Factory;\nusing BootCamp.DataAccess.Common.AWS.DynamoDB.Transaction;\nusing System.Collections.Generic;\n\nnamespace BootCamp.DataAccess", "\nnamespace BootCamp.DataAccess\n{\n    public class ProductProvider : IProductProvider\n    {\n        private readonly IAmazonDynamoDB _client;\n\n        public ProductProvider()\n        {\n            _client = AwsServiceFactory.GetAmazonDynamoDb();\n        }\n\n        /// <summary>\n        /// Create table interface.\n        /// </summary>\n        /// <param name=\"tableName\">The table name to create.</param>\n        /// <param name=\"partitionKey\">The table partition key.</param>\n        /// <param name=\"sortKey\">The table sort key.</param>\n        /// <returns></returns>", "        public async Task CreateTable(string tableName, string partitionKey, string sortKey)\n        {\n            var createRequest = tableName.ToCreateTableRequest(partitionKey, sortKey);\n            if (createRequest is object)\n            {\n                await _client.CreateTableAsync(createRequest).ConfigureAwait(false);\n            }\n        }\n\n        /// <summary>\n        /// Get prodcut provider.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>", "        public async Task<ProductDto> GetProduct(ProductDto dto)\n        {\n            var queryRequest = dto.ToQueryRequest();\n            if (queryRequest is object)\n            {\n                var response = await _client.QueryAsync(queryRequest).ConfigureAwait(false);\n                var result = response.Items.ToProductDtoList(dto.ProductType);\n\n                if (result is object)\n                {\n                    return result.FirstOrDefault<ProductDto>();\n                }\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// Put product provider.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <param name=\"scope\"></param>\n        /// <returns></returns>", "                if (result is object)\n                {\n                    return result.FirstOrDefault<ProductDto>();\n                }\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// Put product provider.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <param name=\"scope\"></param>\n        /// <returns></returns>", "        public async Task PutProduct(ProductDto dto, TransactScope scope)\n        {\n            var putRequest = dto.ToPutItemRequest();\n            if (putRequest is null)\n            {\n                return;\n            }\n            \n            if (scope is null)\n            {\n                await _client.PutItemAsync(putRequest).ConfigureAwait(false);\n            }\n            else\n            {\n                ProductRequestExtension.SetPutItemRequestTransact(putRequest, scope);\n            }\n        }\n\n        /// <summary>\n        /// Delete product provider.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <param name=\"scope\"></param>\n        /// <returns></returns>", "            if (scope is null)\n            {\n                await _client.PutItemAsync(putRequest).ConfigureAwait(false);\n            }\n            else\n            {\n                ProductRequestExtension.SetPutItemRequestTransact(putRequest, scope);\n            }\n        }\n\n        /// <summary>\n        /// Delete product provider.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <param name=\"scope\"></param>\n        /// <returns></returns>", "        public async Task DeleteProduct(ProductDto dto, TransactScope scope)\n        {\n            var deleteRequest = dto.ToDeleteItemRequest();\n            if (deleteRequest is null)\n            {\n                return;\n            }\n\n            if (scope is null)\n            {\n                await _client.DeleteItemAsync(deleteRequest).ConfigureAwait(false);\n            }\n            else\n            {\n                ProductRequestExtension.SetDeleteItemRequestTransact(deleteRequest, scope);\n            }\n\n        }\n\n    }\n\n}\n", "            if (scope is null)\n            {\n                await _client.DeleteItemAsync(deleteRequest).ConfigureAwait(false);\n            }\n            else\n            {\n                ProductRequestExtension.SetDeleteItemRequestTransact(deleteRequest, scope);\n            }\n\n        }\n\n    }\n\n}\n"]}
{"filename": "BootCamp.DataAccess/Extension/ProductRequestExtension.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\nusing Amazon.DynamoDBv2.Model;\nusing BootCamp.DataAccess.Contract;\nusing BootCamp.DataAccess.Common.AWS.DynamoDB;\nusing BootCamp.DataAccess.Common.AWS.DynamoDB.Transaction;\nusing System.Linq;\nusing System;\n\nnamespace BootCamp.DataAccess.Extension\n{\n    public static class ProductRequestExtension\n    {\n        /// <summary>\n        /// Create the DynamoDB table request object.\n        /// </summary>\n        /// <param name=\"tableName\"></param>\n        /// <param name=\"partitionKey\">The table partition key.</param>\n        /// <param name=\"sortKey\">The table sort key.</param>\n        /// <returns></returns>", "namespace BootCamp.DataAccess.Extension\n{\n    public static class ProductRequestExtension\n    {\n        /// <summary>\n        /// Create the DynamoDB table request object.\n        /// </summary>\n        /// <param name=\"tableName\"></param>\n        /// <param name=\"partitionKey\">The table partition key.</param>\n        /// <param name=\"sortKey\">The table sort key.</param>\n        /// <returns></returns>", "        public static CreateTableRequest ToCreateTableRequest(this string tableName, string partitionKey, string sortKey)\n        {\n            var attributeDefinitionList = new List<AttributeDefinition>\n            {\n                new AttributeDefinition\n                {\n                    AttributeName = partitionKey,\n                    AttributeType = \"S\"\n                },\n                new AttributeDefinition\n                {\n                    AttributeName = sortKey,\n                    AttributeType = \"S\"\n                }\n            };\n            return new CreateTableRequest\n            {\n                TableName = tableName,\n                AttributeDefinitions = attributeDefinitionList,\n                KeySchema = new List<KeySchemaElement>()\n                {\n                    new KeySchemaElement\n                    {\n                        AttributeName = partitionKey,\n                        KeyType = \"HASH\"\n                    },\n                    new KeySchemaElement\n                    {\n                        AttributeName = sortKey,\n                        KeyType = \"RANGE\"\n                    }\n                },\n                ProvisionedThroughput = new ProvisionedThroughput\n                {\n                    ReadCapacityUnits = 5,\n                    WriteCapacityUnits = 5\n                }\n            };\n        }\n\n        /// <summary>\n        /// Create the DynamoDB query request object.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>", "        public static QueryRequest ToQueryRequest(this ProductDto dto)\n        {\n            var queryRequestAttributes = dto.ToQueryRequestAttributes();\n            return new QueryRequest\n            {\n                TableName = dto.TableName,\n                KeyConditionExpression = queryRequestAttributes.Item1,\n                ExpressionAttributeValues = queryRequestAttributes.Item2\n            };\n        }\n", "        public static Tuple<string, Dictionary<string, AttributeValue>> ToQueryRequestAttributes(this ProductDto dto)\n        {\n            string keyConditionExpression = null;\n            Dictionary<string, AttributeValue> expressionAttributeValues = null;\n\n            if (dto is BookDto bookDto)\n            {\n                keyConditionExpression = $\"{nameof(bookDto.Author)} = :v_PartitionKey and {nameof(bookDto.Title)} = :v_SortKey\";\n                expressionAttributeValues = new Dictionary<string, AttributeValue>\n                {\n                    {\":v_PartitionKey\", bookDto.Author.ToAttributeValue() },\n                    {\":v_SortKey\", bookDto.Title.ToAttributeValue() }\n                };\n            }", "            else if (dto is AlbumDto albumDto)\n            {\n                keyConditionExpression = $\"{nameof(albumDto.Artist)} = :v_PartitionKey and {nameof(albumDto.Title)} = :v_SortKey\";\n                expressionAttributeValues = new Dictionary<string, AttributeValue>\n                {\n                    {\":v_PartitionKey\", albumDto.Artist.ToAttributeValue() },\n                    {\":v_SortKey\", albumDto.Title.ToAttributeValue() }\n                };\n            }\n            else if (dto is MovieDto movieDto)\n            {\n\n                keyConditionExpression = $\"{nameof(movieDto.Director)} = :v_PartitionKey and {nameof(movieDto.Title)} = :v_SortKey\";\n                expressionAttributeValues = new Dictionary<string, AttributeValue>\n                {\n                    {\":v_PartitionKey\", movieDto.Director.ToAttributeValue() },\n                    {\":v_SortKey\", movieDto.Title.ToAttributeValue() }\n                };\n            }\n            return new Tuple<string, Dictionary<string, AttributeValue>>(keyConditionExpression, expressionAttributeValues);\n        }\n\n\n        /// <summary>\n        /// Create the DynamoDB put item request with transaction,\n        /// </summary>\n        /// <param name=\"putRequest\"></param>\n        /// <param name=\"scope\"></param>", "            else if (dto is MovieDto movieDto)\n            {\n\n                keyConditionExpression = $\"{nameof(movieDto.Director)} = :v_PartitionKey and {nameof(movieDto.Title)} = :v_SortKey\";\n                expressionAttributeValues = new Dictionary<string, AttributeValue>\n                {\n                    {\":v_PartitionKey\", movieDto.Director.ToAttributeValue() },\n                    {\":v_SortKey\", movieDto.Title.ToAttributeValue() }\n                };\n            }\n            return new Tuple<string, Dictionary<string, AttributeValue>>(keyConditionExpression, expressionAttributeValues);\n        }\n\n\n        /// <summary>\n        /// Create the DynamoDB put item request with transaction,\n        /// </summary>\n        /// <param name=\"putRequest\"></param>\n        /// <param name=\"scope\"></param>", "        public static void SetPutItemRequestTransact(PutItemRequest putRequest, TransactScope scope)\n        {\n            if ((putRequest is null) || (scope is null)) return;\n            scope.AddTransactWriteItemWithPut(putRequest);\n        }\n\n        /// <summary>\n        /// Create the DynamoDB put item request.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>", "        public static PutItemRequest ToPutItemRequest(this ProductDto dto)\n        {\n            if ((dto is null) || (dto.ProductType is null))\n            {\n                return null;\n            }\n\n            var request = new PutItemRequest\n            {\n                TableName = dto.TableName,\n            };\n            request.Item = ToPutItemRequestDetail(dto);\n\n            return request;\n        }\n\n        /// <summary>\n        /// Create the put item details object.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>", "        private static Dictionary<string, AttributeValue> ToPutItemRequestDetail(ProductDto dto)\n        {\n            var item = new Dictionary<string, AttributeValue>();\n            item.AddValue(nameof(dto.Title), dto.Title);\n            if (dto is BookDto bookDto)\n            {\n                item.AddValue(nameof(bookDto.TableName), bookDto.TableName);\n                item.AddValue(nameof(bookDto.Author), bookDto.Author);\n                item.AddValue(nameof(bookDto.PublishDate), bookDto.PublishDate);\n            }\n            else if (dto is AlbumDto albumDto)\n            {\n                item.AddValue(nameof(bookDto.TableName), albumDto.TableName);\n                item.AddValue(nameof(albumDto.Artist), albumDto.Artist);\n            }", "            else if (dto is AlbumDto albumDto)\n            {\n                item.AddValue(nameof(bookDto.TableName), albumDto.TableName);\n                item.AddValue(nameof(albumDto.Artist), albumDto.Artist);\n            }\n            else if (dto is MovieDto movieDto)\n            {\n\n                item.AddValue(nameof(bookDto.TableName), movieDto.TableName);\n                item.AddValue(nameof(movieDto.Genre), movieDto.Genre);\n                item.AddValue(nameof(movieDto.Director), movieDto.Director);\n            }\n            return item;\n        }\n\n        /// <summary>\n        /// Create the delete item request with transaction.\n        /// </summary>\n        /// <param name=\"deleteRequest\"></param>\n        /// <param name=\"scope\"></param>", "        public static void SetDeleteItemRequestTransact(DeleteItemRequest deleteRequest, TransactScope scope)\n        {\n            if ((deleteRequest is null) || (scope is null)) return;\n            scope.AddTransactWriteItemWithDelete(deleteRequest);\n        }\n\n        /// <summary>\n        /// Create the delete item request object.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>", "        public static DeleteItemRequest ToDeleteItemRequest(this ProductDto dto)\n        {\n            if ((dto is null) || (dto.ProductType is null))\n            {\n                return null;\n            }\n\n            var request = new DeleteItemRequest\n            {\n                TableName = dto.TableName,\n                Key = dto.ToDeleteItemRequestDetail()\n            };\n\n            return request;\n        }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess/Extension/ProductDtoExtension.cs", "chunked_list": ["\ufeffusing Amazon.DynamoDBv2.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Diagnostics;\n\nusing BootCamp.DataAccess.Contract;\nusing BootCamp.DataAccess.Common.AWS.DynamoDB;\n\nnamespace BootCamp.DataAccess.Extension", "\nnamespace BootCamp.DataAccess.Extension\n{\n    public static class ProductDtoExtension\n    {\n        private static readonly Type albumDtoType = typeof(AlbumDto);\n        private static readonly Type bookDtoType = typeof(BookDto);\n        private static readonly Type movieDtoType = typeof(MovieDto);\n        private static readonly Dictionary<Type, Dictionary<string, PropertyInfo>> productDtoPropertyCache = new Dictionary<Type, Dictionary<string, PropertyInfo>>();\n\n        /// <summary>\n        /// Convert to product dto list.\n        /// </summary>\n        /// <param name=\"queryResult\"></param>\n        /// <param name=\"productType\"></param>\n        /// <returns></returns>", "        private static readonly Dictionary<Type, Dictionary<string, PropertyInfo>> productDtoPropertyCache = new Dictionary<Type, Dictionary<string, PropertyInfo>>();\n\n        /// <summary>\n        /// Convert to product dto list.\n        /// </summary>\n        /// <param name=\"queryResult\"></param>\n        /// <param name=\"productType\"></param>\n        /// <returns></returns>\n        public static List<ProductDto> ToProductDtoList(this List<Dictionary<string, AttributeValue>> queryResult, string productType)\n        {\n            if ((queryResult is null) || (queryResult.Count <= 0))\n            {\n                return null;\n            }\n\n            var resultList = new List<ProductDto>();", "        public static List<ProductDto> ToProductDtoList(this List<Dictionary<string, AttributeValue>> queryResult, string productType)\n        {\n            if ((queryResult is null) || (queryResult.Count <= 0))\n            {\n                return null;\n            }\n\n            var resultList = new List<ProductDto>();\n            foreach (Dictionary<string, AttributeValue> item in queryResult)\n            {\n                var dto = item.ToProductDto(productType);\n                resultList.Add(dto);\n            }\n\n            return resultList;\n        }\n\n        /// <summary>\n        /// Converto to product dto.\n        /// </summary>\n        /// <param name=\"item\"></param>\n        /// <param name=\"productType\"></param>\n        /// <returns></returns>", "            foreach (Dictionary<string, AttributeValue> item in queryResult)\n            {\n                var dto = item.ToProductDto(productType);\n                resultList.Add(dto);\n            }\n\n            return resultList;\n        }\n\n        /// <summary>\n        /// Converto to product dto.\n        /// </summary>\n        /// <param name=\"item\"></param>\n        /// <param name=\"productType\"></param>\n        /// <returns></returns>", "        public static ProductDto ToProductDto(this Dictionary<string, AttributeValue> item, string productType)\n        {\n            if (item is null)\n            {\n                return null;\n            }\n\n            if (item.ContainsKey(nameof(AlbumDto.Artist)))\n            {\n                var productDto = new AlbumDto();\n                return productDtoPropertyCache.GetProductDto(item, albumDtoType, productDto);\n            }", "            else if (item.ContainsKey(nameof(BookDto.Author)))\n            {\n                var productDto = new BookDto();\n                return productDtoPropertyCache.GetProductDto(item, bookDtoType, productDto);\n            }\n            else if (item.ContainsKey(nameof(MovieDto.Director)))\n            {\n                var productDto = new MovieDto();\n                return productDtoPropertyCache.GetProductDto(item, movieDtoType, productDto);\n            }\n            return null;\n        }\n\n        /// <summary>\n        /// Convert to delete item  request details.\n        /// </summary>\n        /// <param name=\"dto\"></param>\n        /// <returns></returns>", "        public static Dictionary<string, AttributeValue> ToDeleteItemRequestDetail(this ProductDto dto)\n        {\n            var item = new Dictionary<string, AttributeValue>();\n            item.AddValue(nameof(dto.Title), dto.Title);\n            if (dto is BookDto bookDto)\n            {\n                item.AddValue(nameof(bookDto.Author), bookDto.Author.ToAttributeValue());\n            }\n            else if (dto is AlbumDto albumDto)\n            {\n                item.AddValue(nameof(albumDto.Artist), albumDto.Artist.ToAttributeValue());\n            }", "            else if (dto is AlbumDto albumDto)\n            {\n                item.AddValue(nameof(albumDto.Artist), albumDto.Artist.ToAttributeValue());\n            }\n            else if (dto is MovieDto movieDto)\n            {\n\n                item.AddValue(nameof(movieDto.Director), movieDto.Director.ToAttributeValue());\n            }\n            return item;\n        }\n\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess/Extension/PropertyInfoExtensions.cs", "chunked_list": ["\ufeffusing Amazon.DynamoDBv2.Model;\nusing BootCamp.DataAccess.Contract;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Reflection;\n\nnamespace BootCamp.DataAccess.Extension\n{\n    public static class PropertyInfoExtensions\n    {\n        /// <summary>\n        /// Get the cached property info.\n        /// </summary>\n        /// <param name=\"cache\"></param>\n        /// <param name=\"type\"></param>\n        /// <param name=\"attr\"></param>\n        /// <returns></returns>", "{\n    public static class PropertyInfoExtensions\n    {\n        /// <summary>\n        /// Get the cached property info.\n        /// </summary>\n        /// <param name=\"cache\"></param>\n        /// <param name=\"type\"></param>\n        /// <param name=\"attr\"></param>\n        /// <returns></returns>\n        public static PropertyInfo GetCachedProperties(this Dictionary<Type, Dictionary<string, PropertyInfo>> cache, Type type, string attr)\n        {\n            Dictionary<string, PropertyInfo> properties;", "        public static PropertyInfo GetCachedProperties(this Dictionary<Type, Dictionary<string, PropertyInfo>> cache, Type type, string attr)\n        {\n            Dictionary<string, PropertyInfo> properties;\n            if (!cache.TryGetValue(type, out properties))\n            {\n                properties = new Dictionary<string, PropertyInfo>();\n                foreach (var p in type.GetProperties())\n                {\n                    properties.Add(p.Name, p);\n                }\n                cache.Add(type, properties);\n            }\n\n            return properties[attr];\n        }\n\n        /// <summary>\n        /// Get the product dto.\n        /// </summary>\n        /// <param name=\"cache\"></param>\n        /// <param name=\"item\"></param>\n        /// <param name=\"dtoType\"></param>\n        /// <param name=\"productDto\"></param>\n        /// <returns></returns>", "        public static ProductDto GetProductDto(this Dictionary<Type, Dictionary<string, PropertyInfo>> cache, Dictionary<string, AttributeValue> item, Type dtoType, ProductDto productDto)\n        {\n            foreach (var kvp in item)\n            {\n                try\n                {\n                    cache.GetCachedProperties(dtoType, kvp.Key).SetValue(productDto, kvp.Value.S, null);\n                }\n                catch (Exception ex)\n                {\n                    Trace.TraceError(ex.ToString());\n                }\n            }\n            return productDto;\n        }\n    }\n}\n", "                catch (Exception ex)\n                {\n                    Trace.TraceError(ex.ToString());\n                }\n            }\n            return productDto;\n        }\n    }\n}\n"]}
{"filename": "BootCamp.Service.Contract/IProductService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace BootCamp.Service.Contract\n{\n    public interface IProductService\n    {\n        /// <summary>\n        /// Create table interface.\n        /// </summary>\n        /// <param name=\"tableName\">The table name to create.</param>\n        /// <param name=\"partitionKey\">The table partition key.</param>\n        /// <param name=\"sortKey\">The table sort key.</param>\n        /// <returns></returns>\n        Task CreateTable(string tableName, string partitionKey, string sortKey);\n        \n        /// <summary>\n        /// Read proruct item interface.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>\n        Task<ProductModel> ReadProduct(ProductModel model);\n\n        /// <summary>\n        /// Add product item interface.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>\n        Task AddProduct(ProductModel model);\n\n        /// <summary>\n        /// Delete product item interface.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>\n        Task DeleteProduct(ProductModel model);\n\n        /// <summary>\n        /// Begin the transaction mode.\n        /// </summary>\n        /// <returns></returns>\n        void BeginTransaction();\n\n        /// <summary>\n        /// Commit the current transaction.\n        /// </summary>\n        /// <returns></returns>\n        Task CommitTransactionAsync();\n        \n        /// <summary>\n        /// Rollback the current transaction.\n        /// </summary>\n        /// <returns></returns>\n        void RollbackTransaction();\n\n    }\n}\n"]}
{"filename": "BootCamp.Service.Contract/Model/ProductModel.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.Service.Contract\n{\n    /// <summary>\n    /// Product item model object.\n    /// </summary>\n    public abstract class ProductModel\n    {\n        /// <summary>\n        /// Table name.\n        /// </summary>", "    public abstract class ProductModel\n    {\n        /// <summary>\n        /// Table name.\n        /// </summary>\n        public string TableName { get; set; }\n\n        /// <summary>\n        /// Producr type.\n        /// </summary>\n        public string ProductType { get; set; }\n\n        /// <summary>\n        /// Book, Movie, Album product title.\n        /// </summary>", "        public string ProductType { get; set; }\n\n        /// <summary>\n        /// Book, Movie, Album product title.\n        /// </summary>\n        public string Title { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCamp.Service.Contract/Model/MovieModel.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.Service.Contract\n{\n    /// <summary>\n    /// Product item model object.\n    /// </summary>\n    public class MovieModel : ProductModel\n    {\n\n        /// <summary>\n        /// Movie director.\n        /// </summary>", "    public class MovieModel : ProductModel\n    {\n\n        /// <summary>\n        /// Movie director.\n        /// </summary>\n        public string Director { get; set; }\n\n        /// <summary>\n        /// Movie genre\n        /// </summary>", "        public string Genre { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCamp.Service.Contract/Model/BookModel.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.Service.Contract\n{\n    /// <summary>\n    /// Product item model object.\n    /// </summary>\n    public class BookModel : ProductModel\n    {\n        /// <summary>\n        /// Book author\n        /// </summary>", "    public class BookModel : ProductModel\n    {\n        /// <summary>\n        /// Book author\n        /// </summary>\n        public string Author { get; set; }\n\n        /// <summary>\n        /// Book publish date.\n        /// </summary>\n        public DateTime? PublishDate { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCamp.Service.Contract/Model/AlbumModel.cs", "chunked_list": ["\ufeff\nusing System;\n\nnamespace BootCamp.Service.Contract\n{\n    /// <summary>\n    /// Product item model object.\n    /// </summary>\n    public class AlbumModel : ProductModel\n    {\n        /// <summary>\n        /// Album artist.\n        /// </summary>", "    public class AlbumModel : ProductModel\n    {\n        /// <summary>\n        /// Album artist.\n        /// </summary>\n        public string Artist { get; set; }\n\n    }\n}\n"]}
{"filename": "BootCampDynamoDBAppCore/WindowsFormsApp1/Form1.Designer.cs", "chunked_list": ["\ufeffnamespace BootCampDynamoDB\n{\n    partial class Form1\n    {\n        /// <summary>\n        /// Required designer variable.\n        /// </summary>\n        private System.ComponentModel.IContainer components = null;\n\n        /// <summary>\n        /// Clean up any resources being used.\n        /// </summary>\n        /// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>", "        protected override void Dispose(bool disposing)\n        {\n            if (disposing && (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        #region Windows Form Designer generated code\n\n        /// <summary>\n        /// Required method for Designer support - do not modify\n        /// the contents of this method with the code editor.\n        /// </summary>", "        private void InitializeComponent()\n        {\n            productTypeLbl = new System.Windows.Forms.Label();\n            bookAuthor = new System.Windows.Forms.TextBox();\n            attribute1Lbl = new System.Windows.Forms.Label();\n            attribute2Lbl = new System.Windows.Forms.Label();\n            title = new System.Windows.Forms.TextBox();\n            attribute3Lbl = new System.Windows.Forms.Label();\n            movieGenre = new System.Windows.Forms.TextBox();\n            attribute4Lbl = new System.Windows.Forms.Label();\n            putItemBtn = new System.Windows.Forms.Button();\n            getItemBtn = new System.Windows.Forms.Button();\n            bookPublishDate = new System.Windows.Forms.DateTimePicker();\n            movieDirector = new System.Windows.Forms.TextBox();\n            label1 = new System.Windows.Forms.Label();\n            albumArtist = new System.Windows.Forms.TextBox();\n            label2 = new System.Windows.Forms.Label();\n            deleteItemBtn = new System.Windows.Forms.Button();\n            productType = new System.Windows.Forms.ComboBox();\n            errorMessage = new System.Windows.Forms.TextBox();\n            label3 = new System.Windows.Forms.Label();\n            createTableBtn = new System.Windows.Forms.Button();\n            beginTransactionBtn = new System.Windows.Forms.Button();\n            commitTransactionBtn = new System.Windows.Forms.Button();\n            cancelTransactionBtn = new System.Windows.Forms.Button();\n            SuspendLayout();\n            // \n            // productTypeLbl\n            // \n            productTypeLbl.AutoSize = true;\n            productTypeLbl.Location = new System.Drawing.Point(31, 25);\n            productTypeLbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            productTypeLbl.Name = \"productTypeLbl\";\n            productTypeLbl.Size = new System.Drawing.Size(98, 20);\n            productTypeLbl.TabIndex = 4;\n            productTypeLbl.Text = \"Product Type:\";\n            // \n            // bookAuthor\n            // \n            bookAuthor.Location = new System.Drawing.Point(173, 109);\n            bookAuthor.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            bookAuthor.Name = \"bookAuthor\";\n            bookAuthor.Size = new System.Drawing.Size(325, 27);\n            bookAuthor.TabIndex = 5;\n            // \n            // attribute1Lbl\n            // \n            attribute1Lbl.AutoSize = true;\n            attribute1Lbl.Location = new System.Drawing.Point(31, 111);\n            attribute1Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            attribute1Lbl.Name = \"attribute1Lbl\";\n            attribute1Lbl.Size = new System.Drawing.Size(95, 20);\n            attribute1Lbl.TabIndex = 6;\n            attribute1Lbl.Text = \"Book Author:\";\n            // \n            // attribute2Lbl\n            // \n            attribute2Lbl.AutoSize = true;\n            attribute2Lbl.Location = new System.Drawing.Point(31, 237);\n            attribute2Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            attribute2Lbl.Name = \"attribute2Lbl\";\n            attribute2Lbl.Size = new System.Drawing.Size(133, 20);\n            attribute2Lbl.TabIndex = 8;\n            attribute2Lbl.Text = \"Book Publish Date:\";\n            attribute2Lbl.Click += attribute2Lbl_Click;\n            // \n            // title\n            // \n            title.Location = new System.Drawing.Point(173, 193);\n            title.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            title.Name = \"title\";\n            title.Size = new System.Drawing.Size(325, 27);\n            title.TabIndex = 7;\n            // \n            // attribute3Lbl\n            // \n            attribute3Lbl.AutoSize = true;\n            attribute3Lbl.Location = new System.Drawing.Point(31, 195);\n            attribute3Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            attribute3Lbl.Name = \"attribute3Lbl\";\n            attribute3Lbl.Size = new System.Drawing.Size(41, 20);\n            attribute3Lbl.TabIndex = 10;\n            attribute3Lbl.Text = \"Title:\";\n            // \n            // movieGenre\n            // \n            movieGenre.Location = new System.Drawing.Point(173, 281);\n            movieGenre.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            movieGenre.Name = \"movieGenre\";\n            movieGenre.Size = new System.Drawing.Size(325, 27);\n            movieGenre.TabIndex = 9;\n            // \n            // attribute4Lbl\n            // \n            attribute4Lbl.AutoSize = true;\n            attribute4Lbl.Location = new System.Drawing.Point(31, 281);\n            attribute4Lbl.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            attribute4Lbl.Name = \"attribute4Lbl\";\n            attribute4Lbl.Size = new System.Drawing.Size(96, 20);\n            attribute4Lbl.TabIndex = 12;\n            attribute4Lbl.Text = \"Movie Genre:\";\n            // \n            // putItemBtn\n            // \n            putItemBtn.Location = new System.Drawing.Point(70, 519);\n            putItemBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            putItemBtn.Name = \"putItemBtn\";\n            putItemBtn.Size = new System.Drawing.Size(89, 34);\n            putItemBtn.TabIndex = 13;\n            putItemBtn.Text = \"Add Item\";\n            putItemBtn.UseVisualStyleBackColor = true;\n            putItemBtn.Click += putItemBtn_Click;\n            // \n            // getItemBtn\n            // \n            getItemBtn.Location = new System.Drawing.Point(170, 519);\n            getItemBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            getItemBtn.Name = \"getItemBtn\";\n            getItemBtn.Size = new System.Drawing.Size(113, 34);\n            getItemBtn.TabIndex = 14;\n            getItemBtn.Text = \"Retrieve Item\";\n            getItemBtn.UseVisualStyleBackColor = true;\n            getItemBtn.Click += getItemBtn_Click;\n            // \n            // bookPublishDate\n            // \n            bookPublishDate.Location = new System.Drawing.Point(173, 237);\n            bookPublishDate.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            bookPublishDate.Name = \"bookPublishDate\";\n            bookPublishDate.Size = new System.Drawing.Size(325, 27);\n            bookPublishDate.TabIndex = 8;\n            bookPublishDate.ValueChanged += bookPublishDate_ValueChanged;\n            // \n            // movieDirector\n            // \n            movieDirector.Location = new System.Drawing.Point(173, 150);\n            movieDirector.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            movieDirector.Name = \"movieDirector\";\n            movieDirector.Size = new System.Drawing.Size(325, 27);\n            movieDirector.TabIndex = 6;\n            // \n            // label1\n            // \n            label1.AutoSize = true;\n            label1.Location = new System.Drawing.Point(31, 152);\n            label1.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            label1.Name = \"label1\";\n            label1.Size = new System.Drawing.Size(111, 20);\n            label1.TabIndex = 17;\n            label1.Text = \"Movie Director:\";\n            // \n            // albumArtist\n            // \n            albumArtist.Location = new System.Drawing.Point(173, 67);\n            albumArtist.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            albumArtist.Name = \"albumArtist\";\n            albumArtist.Size = new System.Drawing.Size(325, 27);\n            albumArtist.TabIndex = 4;\n            // \n            // label2\n            // \n            label2.AutoSize = true;\n            label2.Location = new System.Drawing.Point(31, 69);\n            label2.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            label2.Name = \"label2\";\n            label2.Size = new System.Drawing.Size(95, 20);\n            label2.TabIndex = 19;\n            label2.Text = \"Album Artist:\";\n            // \n            // deleteItemBtn\n            // \n            deleteItemBtn.Location = new System.Drawing.Point(294, 519);\n            deleteItemBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            deleteItemBtn.Name = \"deleteItemBtn\";\n            deleteItemBtn.Size = new System.Drawing.Size(107, 34);\n            deleteItemBtn.TabIndex = 15;\n            deleteItemBtn.Text = \"Remove Item\";\n            deleteItemBtn.UseVisualStyleBackColor = true;\n            deleteItemBtn.Click += deleteItemBtn_Click;\n            // \n            // productType\n            // \n            productType.FormattingEnabled = true;\n            productType.Items.AddRange(new object[] { \"Album\", \"Book\", \"Movie\" });\n            productType.Location = new System.Drawing.Point(173, 26);\n            productType.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            productType.Name = \"productType\";\n            productType.Size = new System.Drawing.Size(318, 28);\n            productType.TabIndex = 3;\n            productType.SelectedIndexChanged += productType_SelectedIndexChanged;\n            // \n            // errorMessage\n            // \n            errorMessage.Location = new System.Drawing.Point(173, 325);\n            errorMessage.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            errorMessage.Multiline = true;\n            errorMessage.Name = \"errorMessage\";\n            errorMessage.Size = new System.Drawing.Size(325, 79);\n            errorMessage.TabIndex = 10;\n            // \n            // label3\n            // \n            label3.AutoSize = true;\n            label3.Location = new System.Drawing.Point(31, 325);\n            label3.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);\n            label3.Name = \"label3\";\n            label3.Size = new System.Drawing.Size(137, 20);\n            label3.TabIndex = 23;\n            label3.Text = \"Response Message:\";\n            // \n            // createTableBtn\n            // \n            createTableBtn.Location = new System.Drawing.Point(31, 426);\n            createTableBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            createTableBtn.Name = \"createTableBtn\";\n            createTableBtn.Size = new System.Drawing.Size(318, 34);\n            createTableBtn.TabIndex = 11;\n            createTableBtn.Text = \"Create Product Tables (Book, Album, Movie)\";\n            createTableBtn.UseVisualStyleBackColor = true;\n            createTableBtn.Click += createTableBtn_Click;\n            // \n            // beginTransactionBtn\n            // \n            beginTransactionBtn.Location = new System.Drawing.Point(31, 472);\n            beginTransactionBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            beginTransactionBtn.Name = \"beginTransactionBtn\";\n            beginTransactionBtn.Size = new System.Drawing.Size(186, 34);\n            beginTransactionBtn.TabIndex = 12;\n            beginTransactionBtn.Text = \"Begin Transaction (0)\";\n            beginTransactionBtn.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n            beginTransactionBtn.UseVisualStyleBackColor = true;\n            beginTransactionBtn.Click += beginTransactionBtn_Click;\n            // \n            // commitTransactionBtn\n            // \n            commitTransactionBtn.Enabled = false;\n            commitTransactionBtn.Location = new System.Drawing.Point(32, 570);\n            commitTransactionBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            commitTransactionBtn.Name = \"commitTransactionBtn\";\n            commitTransactionBtn.Size = new System.Drawing.Size(185, 34);\n            commitTransactionBtn.TabIndex = 16;\n            commitTransactionBtn.Text = \"Commit Transaction (0)\";\n            commitTransactionBtn.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n            commitTransactionBtn.UseVisualStyleBackColor = true;\n            commitTransactionBtn.Click += commitTransactionBtn_Click;\n            // \n            // cancelTransactionBtn\n            // \n            cancelTransactionBtn.Enabled = false;\n            cancelTransactionBtn.Location = new System.Drawing.Point(31, 618);\n            cancelTransactionBtn.Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            cancelTransactionBtn.Name = \"cancelTransactionBtn\";\n            cancelTransactionBtn.Size = new System.Drawing.Size(186, 34);\n            cancelTransactionBtn.TabIndex = 17;\n            cancelTransactionBtn.Text = \"Rollback Transaction (0)\";\n            cancelTransactionBtn.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;\n            cancelTransactionBtn.UseVisualStyleBackColor = true;\n            cancelTransactionBtn.Click += cancelTransactionBtn_Click;\n            // \n            // Form1\n            // \n            AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);\n            AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            ClientSize = new System.Drawing.Size(529, 672);\n            Controls.Add(cancelTransactionBtn);\n            Controls.Add(commitTransactionBtn);\n            Controls.Add(beginTransactionBtn);\n            Controls.Add(createTableBtn);\n            Controls.Add(errorMessage);\n            Controls.Add(label3);\n            Controls.Add(productType);\n            Controls.Add(deleteItemBtn);\n            Controls.Add(albumArtist);\n            Controls.Add(label2);\n            Controls.Add(movieDirector);\n            Controls.Add(label1);\n            Controls.Add(bookPublishDate);\n            Controls.Add(getItemBtn);\n            Controls.Add(putItemBtn);\n            Controls.Add(movieGenre);\n            Controls.Add(attribute4Lbl);\n            Controls.Add(title);\n            Controls.Add(attribute3Lbl);\n            Controls.Add(attribute2Lbl);\n            Controls.Add(bookAuthor);\n            Controls.Add(attribute1Lbl);\n            Controls.Add(productTypeLbl);\n            Margin = new System.Windows.Forms.Padding(2, 3, 2, 3);\n            Name = \"Form1\";\n            StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;\n            Text = \"DynamoDB Transaction Example\";\n            Load += Form1_Load;\n            ResumeLayout(false);\n            PerformLayout();\n        }\n\n        #endregion\n        private System.Windows.Forms.Label productTypeLbl;\n        private System.Windows.Forms.TextBox bookAuthor;\n        private System.Windows.Forms.Label attribute1Lbl;\n        private System.Windows.Forms.Label attribute2Lbl;\n        private System.Windows.Forms.TextBox title;\n        private System.Windows.Forms.Label attribute3Lbl;\n        private System.Windows.Forms.TextBox movieGenre;\n        private System.Windows.Forms.Label attribute4Lbl;\n        private System.Windows.Forms.Button putItemBtn;\n        private System.Windows.Forms.Button getItemBtn;\n        private System.Windows.Forms.DateTimePicker bookPublishDate;\n        private System.Windows.Forms.TextBox movieDirector;\n        private System.Windows.Forms.Label label1;\n        private System.Windows.Forms.TextBox albumArtist;\n        private System.Windows.Forms.Label label2;\n        private System.Windows.Forms.Button deleteItemBtn;\n        private System.Windows.Forms.ComboBox productType;\n        private System.Windows.Forms.TextBox errorMessage;\n        private System.Windows.Forms.Label label3;\n        private System.Windows.Forms.Button createTableBtn;\n        private System.Windows.Forms.Button beginTransactionBtn;\n        private System.Windows.Forms.Button commitTransactionBtn;\n        private System.Windows.Forms.Button cancelTransactionBtn;\n    }\n}\n\n"]}
{"filename": "BootCampDynamoDBAppCore/WindowsFormsApp1/Form1.cs", "chunked_list": ["\ufeffusing BootCamp.Service;\nusing BootCamp.Service.Contract;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Reflection;\nusing System.Windows.Forms;\n\nnamespace BootCampDynamoDB\n{\n    public partial class Form1 : Form\n    {\n", "namespace BootCampDynamoDB\n{\n    public partial class Form1 : Form\n    {\n\n        private int _transactionLevel = 0;\n        private IProductService _productService;\n\n        public Form1()\n        {\n            InitializeComponent();\n            InitializeServices();\n        }\n", "        private void InitializeServices()\n        {\n            _productService = new ProductService();\n            productType.SelectedIndex = 0;\n        }\n\n        private void clearComponent()\n        {\n            productType.SelectedIndex = 0;\n            bookAuthor.Text = string.Empty;\n            bookPublishDate.Value = DateTime.Now;\n            title.Text = string.Empty;\n            movieGenre.Text = string.Empty;\n            movieDirector.Text = string.Empty;\n            albumArtist.Text = string.Empty;\n        }\n\n", "        private ProductModel getProductModel()\n        {\n            ProductModel item = null;\n\n            if (productType.Text == \"Album\")\n            {\n                item = new AlbumModel()\n                {\n                    TableName = \"Album-Table\",\n                    ProductType = productType.Text,\n                    Title = title.Enabled ? title.Text : null,\n                    Artist = albumArtist.Enabled ? albumArtist.Text : null\n                };\n            }", "            else if (productType.Text == \"Book\")\n            {\n                item = new BookModel()\n                {\n                    TableName = \"Book-Table\",\n                    ProductType = productType.Text,\n                    Author = bookAuthor.Enabled ? bookAuthor.Text : null,\n                    Title = title.Enabled ? title.Text : null,\n                    PublishDate = bookPublishDate.Value\n                };\n            }", "            else if (productType.Text == \"Movie\")\n            {\n                item = new MovieModel()\n                {\n                    TableName = \"Movie-Table\",\n                    ProductType = productType.Text,\n                    Title = title.Enabled ? title.Text : null,\n                    Genre = movieGenre.Enabled ? movieGenre.Text : null,\n                    Director = movieDirector.Enabled ? movieDirector.Text : null,\n                };\n            }\n\n            return item;\n        }\n", "        private async void putItemBtn_Click(object sender, EventArgs e)\n        {\n            var item = getProductModel();\n            try\n            {\n                await _productService.AddProduct(item);\n                errorMessage.Text = \"item added successfully\";\n            }\n            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n", "            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n\n        private async void getItemBtn_Click(object sender, EventArgs e)\n        {\n            var item = getProductModel();\n            var model = await _productService.ReadProduct(item);\n            if (model is BookModel bookModel)\n            {\n                bookAuthor.Text = bookModel.Author;\n                bookPublishDate.Value = bookModel.PublishDate == null ? DateTime.Now : bookModel.PublishDate.Value;\n                title.Text = bookModel.Title;\n            }", "            if (model is BookModel bookModel)\n            {\n                bookAuthor.Text = bookModel.Author;\n                bookPublishDate.Value = bookModel.PublishDate == null ? DateTime.Now : bookModel.PublishDate.Value;\n                title.Text = bookModel.Title;\n            }\n            else if (model is MovieModel movieModel)\n            {\n                title.Text = movieModel.Title;\n                movieGenre.Text = movieModel.Genre;\n                movieDirector.Text = movieModel.Director;\n            }", "            else if (model is AlbumModel albumModel)\n            {\n                title.Text = albumModel.Title;\n                albumArtist.Text = albumModel.Artist;\n            }\n            else\n            {\n                errorMessage.Text = \"could not find the item\";\n            }\n        }\n", "        private async void deleteItemBtn_Click(object sender, EventArgs e)\n        {\n            var item = getProductModel();\n            await _productService.DeleteProduct(item);\n            clearComponent();\n            errorMessage.Text = \"item deleted successfully\";\n        }\n\n        private async void createTableBtn_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                await _productService.CreateTable(\"Album-Table\", nameof(AlbumModel.Artist), nameof(AlbumModel.Title));\n                await _productService.CreateTable(\"Book-Table\", nameof(BookModel.Author), nameof(BookModel.Title));\n                await _productService.CreateTable(\"Movie-Table\", nameof(MovieModel.Director), nameof(AlbumModel.Title));\n                errorMessage.Text = \"Album, Book, and Movie tables created successfully\";\n            }", "        private async void createTableBtn_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                await _productService.CreateTable(\"Album-Table\", nameof(AlbumModel.Artist), nameof(AlbumModel.Title));\n                await _productService.CreateTable(\"Book-Table\", nameof(BookModel.Author), nameof(BookModel.Title));\n                await _productService.CreateTable(\"Movie-Table\", nameof(MovieModel.Director), nameof(AlbumModel.Title));\n                errorMessage.Text = \"Album, Book, and Movie tables created successfully\";\n            }\n            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n", "            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n\n        private void productType_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            switch (productType.SelectedIndex)\n            {\n                case 0: // Album\n                    productType.Enabled = true;\n                    bookAuthor.Enabled = false;\n                    bookPublishDate.Enabled = false;\n                    title.Enabled = true;\n                    movieGenre.Enabled = false;\n                    movieDirector.Enabled = false;\n                    albumArtist.Enabled = true;\n                    break;\n                case 1: // Book\n                    productType.Enabled = true;\n                    bookAuthor.Enabled = true;\n                    bookPublishDate.Enabled = true;\n                    title.Enabled = true;\n                    movieGenre.Enabled = false;\n                    movieDirector.Enabled = false;\n                    albumArtist.Enabled = false;\n                    break;\n                case 2: // Movie\n                    productType.Enabled = true;\n                    bookAuthor.Enabled = false;\n                    bookPublishDate.Enabled = false;\n                    title.Enabled = true;\n                    movieGenre.Enabled = true;\n                    movieDirector.Enabled = true;\n                    albumArtist.Enabled = false;\n                    break;\n            }\n        }\n", "        private void Form1_Load(object sender, EventArgs e)\n        {\n        }\n\n        private void beginTransactionBtn_Click(object sender, EventArgs e)\n        {\n            _transactionLevel++;\n            _productService.BeginTransaction();\n            errorMessage.Text = $\"Transaction {_transactionLevel} started successfully.\";\n\n            updateTransactionLevelText();\n        }\n", "        private async void commitTransactionBtn_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                await _productService.CommitTransactionAsync();\n                errorMessage.Text = $\"Transaction {_transactionLevel} committed successfully.\";\n                _transactionLevel--;\n\n                updateTransactionLevelText();\n            }\n            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n", "            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n\n        private void cancelTransactionBtn_Click(object sender, EventArgs e)\n        {\n            try\n            {\n                _productService.RollbackTransaction();\n                errorMessage.Text = $\"Transaction {_transactionLevel} rolled back successfully.\";\n                _transactionLevel--;\n\n                updateTransactionLevelText();\n            }", "            catch (Exception ex)\n            {\n                errorMessage.Text = ex.Message;\n            }\n        }\n\n        private void attribute2Lbl_Click(object sender, EventArgs e)\n        {\n\n        }\n", "        private void bookPublishDate_ValueChanged(object sender, EventArgs e)\n        {\n\n        }\n\n        private void label4_Click(object sender, EventArgs e)\n        {\n\n        }\n\n        private void itemDescription_TextChanged(object sender, EventArgs e)\n        {\n\n        }\n", "        private void itemDescription_TextChanged(object sender, EventArgs e)\n        {\n\n        }\n\n        private void updateTransactionLevelText()\n        {\n            beginTransactionBtn.Text = $\"Begin Transaction ({_transactionLevel})\";\n            commitTransactionBtn.Text = $\"Commit Transaction ({_transactionLevel})\";\n            cancelTransactionBtn.Text = $\"Rollback Transaction ({_transactionLevel})\";\n", "            if (_transactionLevel <= 0)\n            {\n                commitTransactionBtn.Enabled = false;\n                cancelTransactionBtn.Enabled = false;\n            }\n            else\n            {\n                commitTransactionBtn.Enabled = true;\n                cancelTransactionBtn.Enabled = true;\n            }\n        }\n    }\n}\n"]}
{"filename": "BootCampDynamoDBAppCore/WindowsFormsApp1/Program.cs", "chunked_list": ["using BootCampDynamoDB;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\n\nnamespace WindowsFormsApp1\n{\n    static class Program\n    {\n        /// <summary>\n        ///  The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n        }\n    }\n}\n", "{\n    static class Program\n    {\n        /// <summary>\n        ///  The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            Application.SetHighDpiMode(HighDpiMode.SystemAware);\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new Form1());\n        }\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Common/AWS/DynamoDB/AttributeValueExtensions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing Amazon.DynamoDBv2.Model;\n\nnamespace BootCamp.DataAccess.Common.AWS.DynamoDB\n{\n    /// <summary>\n    /// Build DynamoDB AttributeValue object.\n    /// </summary>\n    public static class AttributeValueExtensions\n    {\n", "    /// </summary>\n    public static class AttributeValueExtensions\n    {\n\n        public static void AddValue(this Dictionary<string, AttributeValue> values, string attributeName, string value)\n        {\n            var toAdd = ToAttributeValue(value);\n            AddValue(values, attributeName, toAdd);\n        }\n\n        public static void AddValue(this Dictionary<string, AttributeValue> values, string attributeName, AttributeValue value)\n        {", "        public static void AddValue(this Dictionary<string, AttributeValue> values, string attributeName, AttributeValue value)\n        {\n            if (values is null)\n            {\n                throw new ArgumentNullException(nameof(values));\n            }\n            if (value is object)\n            {\n                values.Add(attributeName, value);\n            }\n        }\n", "        public static AttributeValue ToAttributeValue(this string value)\n        {\n            if (string.IsNullOrWhiteSpace(value))\n            {\n                return null;\n            }\n            return new AttributeValue(value);\n        }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Common/AWS/DynamoDB/Transaction/TransactScope.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Amazon.DynamoDBv2;\nusing Amazon.DynamoDBv2.Model;\nusing BootCamp.DataAccess.Factory;\n\nnamespace BootCamp.DataAccess.Common.AWS.DynamoDB.Transaction\n{\n    public class TransactScope\n    {\n", "    public class TransactScope\n    {\n\n        private readonly IAmazonDynamoDB _client;\n        private TransactWriteItemsRequest _transactRequest;\n        private TransactScope _subTransactScope;\n        public TransactScope _parentTransactScope { get; set; }\n\n        public TransactScope()\n        {\n            _client = AwsServiceFactory.GetAmazonDynamoDb();\n        }\n\n        private TransactScope(IAmazonDynamoDB client)\n        {\n            _client = client;\n        }\n\n        /// <summary>\n        /// Add the transact write item.\n        /// </summary>\n        /// <param name=\"transactWriteItem\"></param>", "        public void AddTransactWriteItem(TransactWriteItem transactWriteItem)\n        {\n            if ((_transactRequest is null) || (transactWriteItem is null)) return;\n\n            _transactRequest.TransactItems.Add(transactWriteItem);\n        }\n\n        /// <summary>\n        /// Begin transaction.\n        /// </summary>\n        public TransactScope Begin()\n        {", "        public TransactScope Begin()\n        {\n            if (_transactRequest is null)\n            {\n                _transactRequest = new TransactWriteItemsRequest\n                {\n                    TransactItems = new List<TransactWriteItem>()\n                };\n                return this;\n            } \n            else if (_subTransactScope is null)\n            {\n                _subTransactScope = new TransactScope(_client);\n                _subTransactScope._parentTransactScope = this;\n                _subTransactScope.Begin();\n                return _subTransactScope;\n            }\n            else\n            {\n                return _subTransactScope.Begin();\n            }\n        }\n\n        /// <summary>\n        /// Commit transaction.\n        /// </summary>\n        /// <returns></returns>", "            else if (_subTransactScope is null)\n            {\n                _subTransactScope = new TransactScope(_client);\n                _subTransactScope._parentTransactScope = this;\n                _subTransactScope.Begin();\n                return _subTransactScope;\n            }\n            else\n            {\n                return _subTransactScope.Begin();\n            }\n        }\n\n        /// <summary>\n        /// Commit transaction.\n        /// </summary>\n        /// <returns></returns>", "        public async Task Commit()\n        {\n            if (!(_subTransactScope is null))\n            {\n                await _subTransactScope.Commit();\n                _subTransactScope = null;\n            }\n            if ((_client is object) && (_transactRequest is object) && (_transactRequest.TransactItems.Count > 0))\n            {\n                await _client.TransactWriteItemsAsync(_transactRequest).ConfigureAwait(false);\n                _transactRequest = null;\n            }\n        }\n\n        /// <summary>\n        /// Rollback transaction.\n        /// </summary>", "        public void Rollback()\n        {\n            if (!(_subTransactScope is null))\n            {\n                _subTransactScope.Rollback();\n                _subTransactScope = null;\n            }\n            _transactRequest = null;\n        }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Common/AWS/DynamoDB/Transaction/TransactExtensions.cs", "chunked_list": ["\ufeffusing Amazon.DynamoDBv2.Model;\n\nnamespace BootCamp.DataAccess.Common.AWS.DynamoDB.Transaction\n{\n    /// <summary>\n    /// Common library for transaction item operations.\n    /// </summary>\n    public static class TransactExtensions\n    {\n        /// <summary>\n        /// Add put item into transaction scope.\n        /// </summary>\n        /// <param name=\"scope\"></param>\n        /// <param name=\"putRequest\"></param>", "        public static void AddTransactWriteItemWithPut(this TransactScope scope, PutItemRequest putRequest)\n        {\n            if ((scope is null) || (putRequest is null)) return;\n\n            var transactWriteItem = new TransactWriteItem()\n            {\n                Put = new Put()\n                {\n                    TableName = putRequest.TableName,\n                    Item = putRequest.Item\n                }\n            };\n            scope.AddTransactWriteItem(transactWriteItem);\n        }\n\n        /// <summary>\n        /// Add update item into transaction scope.\n        /// </summary>\n        /// <param name=\"scope\"></param>\n        /// <param name=\"updateRequest\"></param>", "        public static void AddTransactWriteItemWithUpdate(this TransactScope scope, UpdateItemRequest updateRequest)\n        {\n            if ((scope is null) || (updateRequest is null)) return;\n\n            var transactWriteItem = new TransactWriteItem()\n            {\n                Update = new Update()\n                {\n                    TableName = updateRequest.TableName,\n                    Key = updateRequest.Key,\n                    ExpressionAttributeValues = updateRequest.ExpressionAttributeValues,\n                    UpdateExpression = updateRequest.UpdateExpression,\n                    ConditionExpression = updateRequest.ConditionExpression\n                }\n            };\n            scope.AddTransactWriteItem(transactWriteItem);\n        }\n\n        /// <summary>\n        /// Add delete item into transaction scope.\n        /// </summary>\n        /// <param name=\"scope\"></param>\n        /// <param name=\"deleteRequest\"></param>", "        public static void AddTransactWriteItemWithDelete(this TransactScope scope, DeleteItemRequest deleteRequest)\n        {\n            if ((scope is null) || (deleteRequest is null)) return;\n\n            var transactDeleteItem = new TransactWriteItem()\n            {\n                Delete = new Delete()\n                {\n                    TableName = deleteRequest.TableName,\n                    Key = deleteRequest.Key,\n                    ExpressionAttributeValues = deleteRequest.ExpressionAttributeValues,\n                    ExpressionAttributeNames = deleteRequest.ExpressionAttributeNames,\n                    ConditionExpression = deleteRequest.ConditionExpression\n                }\n            };\n            scope.AddTransactWriteItem(transactDeleteItem);\n        }\n\n    }\n}\n"]}
{"filename": "BootCamp.DataAccess.Common/AWS/Factory/AwsServiceFactory.cs", "chunked_list": ["\ufeffusing Amazon;\nusing Amazon.DynamoDBv2;\nusing Amazon.Runtime;\n\nnamespace BootCamp.DataAccess.Factory\n{\n    public static class AwsServiceFactory\n    {\n        private static IAmazonDynamoDB _dynamoDBClient;\n\n        public static IAmazonDynamoDB GetAmazonDynamoDb()\n        {", "        private static IAmazonDynamoDB _dynamoDBClient;\n\n        public static IAmazonDynamoDB GetAmazonDynamoDb()\n        {\n            if (_dynamoDBClient is null)\n            {\n                _dynamoDBClient = new AmazonDynamoDBClient(new StoredProfileAWSCredentials(), RegionEndpoint.USEast1);\n            }\n            return _dynamoDBClient;\n        }\n\n    }\n}\n"]}
{"filename": "BootCamp.Service/ProductService.cs", "chunked_list": ["\ufeffusing BootCamp.DataAccess;\nusing BootCamp.DataAccess.Contract;\nusing BootCamp.Service.Contract;\nusing System.Threading.Tasks;\nusing BootCamp.Service.Extension;\nusing BootCamp.DataAccess.Common.AWS.DynamoDB.Transaction;\nusing System.Collections.Generic;\n\nnamespace BootCamp.Service\n{\n    public class ProductService : IProductService\n    {\n        /// <summary>\n        /// The transact scope.\n        /// </summary>", "namespace BootCamp.Service\n{\n    public class ProductService : IProductService\n    {\n        /// <summary>\n        /// The transact scope.\n        /// </summary>\n        private TransactScope _scope;\n\n        /// <summary>\n        /// Product provider.\n        /// </summary>", "        private readonly IProductProvider _productProvider;\n\n        public ProductService()\n        {\n            _productProvider = new ProductProvider();\n        }\n\n        /// <summary>\n        /// Create table service.\n        /// </summary>\n        /// <param name=\"tableName\"></param>\n        /// <param name=\"partitionKey\">The table partition key.</param>\n        /// <param name=\"sortKey\">The table sort key.</param>\n        /// <returns></returns>", "        public async Task CreateTable(string tableName, string partitionKey, string sortKey)\n        {\n            await _productProvider.CreateTable(tableName, partitionKey, sortKey);\n        }\n\n        /// <summary>\n        /// Read product service.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>\n        public async Task<ProductModel> ReadProduct(ProductModel model)\n        {\n            var dto = await _productProvider.GetProduct(model.ToProductDto());\n            return dto.ToProductModel();\n\n        }\n\n        /// <summary>\n        /// Add product service.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>", "        public async Task<ProductModel> ReadProduct(ProductModel model)\n        {\n            var dto = await _productProvider.GetProduct(model.ToProductDto());\n            return dto.ToProductModel();\n\n        }\n\n        /// <summary>\n        /// Add product service.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>", "        public async Task AddProduct(ProductModel model)\n        {\n            await _productProvider.PutProduct(model.ToProductDto(), _scope);\n        }\n\n        /// <summary>\n        /// Delete product service.\n        /// </summary>\n        /// <param name=\"model\"></param>\n        /// <returns></returns>\n        public async Task DeleteProduct(ProductModel model)\n        {\n            await _productProvider.DeleteProduct(model.ToProductDto(), _scope);\n        }\n\n        /// <summary>\n        /// Begin the transaction mode.\n        /// </summary>\n        /// <returns></returns>", "        public async Task DeleteProduct(ProductModel model)\n        {\n            await _productProvider.DeleteProduct(model.ToProductDto(), _scope);\n        }\n\n        /// <summary>\n        /// Begin the transaction mode.\n        /// </summary>\n        /// <returns></returns>\n        public void BeginTransaction()\n        {", "        public void BeginTransaction()\n        {\n            if (_scope is null)\n            {\n                _scope = new TransactScope();\n            }\n            _scope = _scope.Begin();\n        }\n\n        /// <summary>\n        /// Commit the current transaction.\n        /// </summary>\n        /// <returns></returns>", "        public async Task CommitTransactionAsync()\n        {\n            await _scope.Commit();\n            _scope = _scope._parentTransactScope;\n        }\n\n        /// <summary>\n        /// Rollback the current transaction.\n        /// </summary>\n        /// <returns></returns>\n        public void RollbackTransaction()\n        {\n            _scope.Rollback();\n            _scope = _scope._parentTransactScope;\n        }\n\n    }\n}\n", "        public void RollbackTransaction()\n        {\n            _scope.Rollback();\n            _scope = _scope._parentTransactScope;\n        }\n\n    }\n}\n"]}
{"filename": "BootCamp.Service/Extension/ProductDtoExtension.cs", "chunked_list": ["\ufeffusing BootCamp.DataAccess.Contract;\nusing BootCamp.Service.Contract;\n\nnamespace BootCamp.Service.Extension\n{\n    /// <summary>\n    /// Extension class for model to dto object translation.\n    /// </summary>\n    public static class ProductDtoExtension\n    {\n        public static ProductDto ToProductDto(this ProductModel model)\n        {", "    public static class ProductDtoExtension\n    {\n        public static ProductDto ToProductDto(this ProductModel model)\n        {\n            if (model is AlbumModel albumModel)\n            {\n                return new AlbumDto\n                {\n                    TableName= albumModel.TableName,\n                    ProductType = albumModel.ProductType,\n                    Title = albumModel.Title,\n                    Artist = albumModel.Artist\n                };\n            }", "            else if (model is BookModel bookModel)\n            {\n                return new BookDto\n                {\n                    TableName= bookModel.TableName,\n                    ProductType = bookModel.ProductType,\n                    Author = bookModel.Author,\n                    PublishDate = bookModel.PublishDate.ToString(),\n                    Title = bookModel.Title,\n                };\n            }", "            else if (model is MovieModel movieModel)\n            {\n                return new MovieDto\n                {\n                    TableName= movieModel.TableName,\n                    ProductType = movieModel.ProductType,\n                    Title = movieModel.Title,\n                    Genre = movieModel.Genre,\n                    Director = movieModel.Director,\n                };\n            }\n\n            return null;\n        }\n    }\n}\n"]}
{"filename": "BootCamp.Service/Extension/ProductModelExtension.cs", "chunked_list": ["\ufeffusing BootCamp.DataAccess.Contract;\nusing BootCamp.Service.Contract;\nusing System;\nusing System.Reflection;\n\nnamespace BootCamp.Service.Extension\n{\n    /// <summary>\n    /// Extension class for dto to model object translation.\n    /// </summary>\n    public static class ProductModelExtension\n    {", "    /// Extension class for dto to model object translation.\n    /// </summary>\n    public static class ProductModelExtension\n    {\n        public static ProductModel ToProductModel(this ProductDto dto)\n        {\n            if (dto is AlbumDto albumDto)\n            {\n                return new AlbumModel\n                {\n                    TableName = albumDto.TableName,\n                    ProductType = albumDto.ProductType,\n                    Title = albumDto.Title,\n                    Artist = albumDto.Artist\n                };\n            }", "            else if (dto is BookDto bookDto)\n            {\n                return new BookModel\n                {\n                    TableName = bookDto.TableName,\n                    ProductType = bookDto.ProductType,\n                    Author = bookDto.Author,\n                    PublishDate = bookDto.PublishDate.ToDateTimeOrNull(),\n                    Title = bookDto.Title,\n                };\n            }", "            else if (dto is MovieDto movieDto)\n            {\n                return new MovieModel\n                {\n                    TableName = movieDto.TableName,\n                    ProductType = movieDto.ProductType,\n                    Title = movieDto.Title,\n                    Genre = movieDto.Genre,\n                    Director = movieDto.Director,\n                };\n            }\n\n            return null;\n        }\n", "        public static DateTime? ToDateTimeOrNull(this string strDate)\n        {\n            if (DateTime.TryParse(strDate, out var dateTime))\n            {\n                return dateTime;\n            }\n            else\n            {\n                return null;\n            }\n        }\n    }\n\n}\n"]}
