{"filename": "src/InventoryApi/Program.cs", "chunked_list": ["using InventoryApi.Repositories;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nbuilder.Services.AddCors(options =>\n{", "builder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"CorsAllowAll\",\n        builder =>\n        {\n            builder\n            .AllowAnyOrigin()\n            .AllowAnyMethod()\n            .AllowAnyHeader();\n        });", "            .AllowAnyHeader();\n        });\n});\n\nvar app = builder.Build();\n\napp.UseCors(\"CorsAllowAll\");\n\napp.UseSwagger();\napp.UseSwaggerUI();", "app.UseSwagger();\napp.UseSwaggerUI();\n\napp.MapGet(\"/Warehouse\", () =>\n{\n    return InventoryDB.GetWarehouses();\n})\n.WithName(\"GetWarehouses\")\n.WithOpenApi();\n", ".WithOpenApi();\n\napp.MapGet(\"/Items\", () =>\n{\n    return InventoryDB.GetItems();\n})\n.WithName(\"GetItems\")\n.WithOpenApi();\n\napp.MapGet(\"/Items/{ItemId}\", (string itemId) =>", "\napp.MapGet(\"/Items/{ItemId}\", (string itemId) =>\n{\n    return InventoryDB.GetItemsOnHand(itemId);\n})\n.WithName(\"GetItemsOnHand\")\n.WithOpenApi();\n\napp.Run();", "app.Run();"]}
{"filename": "src/InventoryApi/Models/Inventories.cs", "chunked_list": ["namespace InventoryApi.Models\n{\n    public record Warehouse\n    {\n        public string? City { get; set; }\n    }\n\n    public record Item\n    {\n        public string? ItemId { get; set; }\n        public string? Name { get; set; }\n        public string? Description { get; set; }\n        public double? Price { get; set; }\n    }\n", "    public record ItemOnHand\n    {\n        public string? ItemId { get; set; }\n        public string? City { get; set; }\n        public int? NumberInStock { get; set; }\n    }\n}"]}
{"filename": "src/InventoryApi/Repositories/InventoryDB.cs", "chunked_list": ["using InventoryApi.Models;\n\nnamespace InventoryApi.Repositories\n{\n    public class InventoryDB\n    {\n        private static List<Warehouse> _warehouses = new()\n        {\n            new Warehouse { City = \"Seattle\" },\n            new Warehouse { City = \"Redmond\" },\n            new Warehouse { City = \"Tacoma\" },\n            new Warehouse { City = \"Issaquah\" },\n            new Warehouse { City = \"Everett\" }\n        };\n", "        public static List<Warehouse> GetWarehouses()\n        {\n            return _warehouses;\n        }\n\n        private static List<Item> _items = new()\n        {\n            new Item() { ItemId = \"1\", Name = \"Pumped Water Controller\", Price = 45.9900, Description = \"Water pump controller for combination boiler\" },\n            new Item() { ItemId = \"2\", Name = \"3.5 W / S Heater\", Price = 125.5000, Description = \"Small heat exchanger for domestic boiler\" },\n            new Item() { ItemId = \"3\", Name = \"Inlet Valve\", Price = 120.2000, Description = \"Water inlet valve with one - way operation\" }\n        };\n", "        public static List<Item> GetItems()\n        {\n            return _items.ToList();\n        }\n\n        private static List<ItemOnHand> _itemsOnHand = new()\n        {\n            new ItemOnHand { ItemId = \"1\", City = \"Seattle\", NumberInStock = 3 },\n            new ItemOnHand { ItemId = \"2\", City = \"Seattle\", NumberInStock = 2 },\n            new ItemOnHand { ItemId = \"3\", City = \"Seattle\", NumberInStock = 1 },\n\n            new ItemOnHand { ItemId = \"1\", City = \"Redmond\", NumberInStock = 0 },\n            new ItemOnHand { ItemId = \"2\", City = \"Redmond\", NumberInStock = 0 },\n            new ItemOnHand { ItemId = \"3\", City = \"Redmond\", NumberInStock = 3 },\n\n            new ItemOnHand { ItemId = \"1\", City = \"Tacoma\", NumberInStock = 1 },\n            new ItemOnHand { ItemId = \"2\", City = \"Tacoma\", NumberInStock = 0 },\n            new ItemOnHand { ItemId = \"3\", City = \"Tacoma\", NumberInStock = 4 },\n\n            new ItemOnHand { ItemId = \"1\", City = \"Issaquah\", NumberInStock = 8 },\n            new ItemOnHand { ItemId = \"2\", City = \"Issaquah\", NumberInStock = 7 },\n            new ItemOnHand { ItemId = \"3\", City = \"Issaquah\", NumberInStock = 0 },\n\n            new ItemOnHand { ItemId = \"1\", City = \"Everett\", NumberInStock = 0 },\n            new ItemOnHand { ItemId = \"2\", City = \"Everett\", NumberInStock = 5 },\n            new ItemOnHand { ItemId = \"3\", City = \"Everett\", NumberInStock = 2 }\n        };\n", "        public static List<ItemOnHand> GetItemsOnHand(string ItemId)\n        {\n            return _itemsOnHand.Where(i => i.ItemId == ItemId).ToList();\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Program.cs", "chunked_list": ["using Microsoft.AspNetCore.Rewrite;\nusing Microsoft.OpenApi.Models;\n\nusing WebApi.Configurations;\nusing WebApi.Helpers;\nusing WebApi.Services;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nvar authSettings = new AuthSettings();", "\nvar authSettings = new AuthSettings();\nbuilder.Configuration.GetSection(AuthSettings.Name).Bind(authSettings);\nbuilder.Services.AddSingleton(authSettings);\n\nvar openApiSettings = new OpenApiSettings();\nbuilder.Configuration.GetSection(OpenApiSettings.Name).Bind(openApiSettings);\nbuilder.Services.AddSingleton(openApiSettings);\n\nvar gitHubSettings = new GitHubSettings();", "\nvar gitHubSettings = new GitHubSettings();\nbuilder.Configuration.GetSection(GitHubSettings.Name).Bind(gitHubSettings);\nbuilder.Services.AddSingleton(gitHubSettings);\n\nvar aoaiSettings = new AzureOpenAISettings();\nbuilder.Configuration.GetSection(AzureOpenAISettings.Name).Bind(aoaiSettings);\nbuilder.Services.AddSingleton(aoaiSettings);\n\nbuilder.Services.AddScoped<IOpenAIHelper, OpenAIHelper>();", "\nbuilder.Services.AddScoped<IOpenAIHelper, OpenAIHelper>();\nbuilder.Services.AddScoped<IValidationService, ValidationService>();\nbuilder.Services.AddScoped<IGitHubService, GitHubService>();\nbuilder.Services.AddScoped<IOpenAIService, OpenAIService>();\n\n// Add services to the container.\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();", "// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(option =>\n{\n    option.SwaggerDoc(openApiSettings.Version, new OpenApiInfo { Title = openApiSettings.Title, Version = openApiSettings.Version });\n    option.AddServer(new OpenApiServer() { Url = openApiSettings.Server });\n\n    var gitHubSecuritySchemeReference = new OpenApiReference\n    {\n        Id = \"github_token\",", "    {\n        Id = \"github_token\",\n        Type = ReferenceType.SecurityScheme\n    };\n    var gitHubSecurityScheme = new OpenApiSecurityScheme\n    {\n        Name = \"x-github-token\",\n        Description = \"Please enter valid GitHub Token\",\n        Type = SecuritySchemeType.ApiKey,\n        In = ParameterLocation.Header,", "        Type = SecuritySchemeType.ApiKey,\n        In = ParameterLocation.Header,\n        Reference = gitHubSecuritySchemeReference\n    };\n    option.AddSecurityDefinition(gitHubSecuritySchemeReference.Id, gitHubSecurityScheme);\n    var gitHubSecurityRequirement = new OpenApiSecurityRequirement()\n    {\n        {\n            new OpenApiSecurityScheme\n            {", "            new OpenApiSecurityScheme\n            {\n                Reference = gitHubSecuritySchemeReference\n            },\n            new string[]{}\n        }\n    };\n    option.AddSecurityRequirement(gitHubSecurityRequirement);\n\n    // Add global API Key security requirement", "\n    // Add global API Key security requirement\n    var webApiKeySecuritySchemeReference = new OpenApiReference\n    {\n        Id = \"api_key\",\n        Type = ReferenceType.SecurityScheme\n    };\n    var webApiKeySecurityScheme = new OpenApiSecurityScheme\n    {\n        Name = \"x-webapi-key\",", "    {\n        Name = \"x-webapi-key\",\n        Description = \"Please enter valid API Key\",\n        Type = SecuritySchemeType.ApiKey,\n        In = ParameterLocation.Header,\n        Reference = webApiKeySecuritySchemeReference\n    };\n    option.AddSecurityDefinition(webApiKeySecuritySchemeReference.Id, webApiKeySecurityScheme);\n    var webApiKeySecurityRequirement = new OpenApiSecurityRequirement\n    {", "    var webApiKeySecurityRequirement = new OpenApiSecurityRequirement\n    {\n        {\n            new OpenApiSecurityScheme\n            {\n                Reference = webApiKeySecuritySchemeReference\n            },\n            new string[]{}\n        }\n    };", "        }\n    };\n    option.AddSecurityRequirement(webApiKeySecurityRequirement);\n});\n\nbuilder.Services.AddHttpClient();\n\nvar app = builder.Build();\n\n//Configure the HTTP request pipeline.\n//if (app.Environment.IsDevelopment())", "\n//Configure the HTTP request pipeline.\n//if (app.Environment.IsDevelopment())\nif (openApiSettings.IncludeOnDeployment == true)\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n\n    // add a new rewrite option to redirect the root to /swagger\n    app.UseRewriter(new RewriteOptions().AddRedirect(\"^$\", \"swagger\"));\n}\n\napp.UseHttpsRedirection();\n\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();"]}
{"filename": "src/IssueSummaryApi/Helpers/OpenAIHelper.cs", "chunked_list": ["using Azure.AI.OpenAI;\nusing Azure;\n\nusing WebApi.Configurations;\nusing WebApi.Models;\n\nnamespace WebApi.Helpers\n{\n    public interface IOpenAIHelper\n    {\n        Task<ChatCompletionResponse> GetChatCompletionAsync(string prompt);\n    }\n", "    public interface IOpenAIHelper\n    {\n        Task<ChatCompletionResponse> GetChatCompletionAsync(string prompt);\n    }\n\n    public class OpenAIHelper : IOpenAIHelper\n    {\n        private readonly AzureOpenAISettings _settings;\n\n        public OpenAIHelper(AzureOpenAISettings settings)\n        {\n            this._settings = settings ?? throw new ArgumentNullException(nameof(settings));\n        }\n", "        public async Task<ChatCompletionResponse> GetChatCompletionAsync(string prompt)\n        {\n            var client = this.GetOpenAIClient();\n\n            var chatCompletionsOptions = new ChatCompletionsOptions()\n            {\n                Messages =\n                {\n                    new ChatMessage(ChatRole.System, \"You are a helpful assistant. You are very good at summarizing the given text into 2-3 bullet points.\"),\n                    new ChatMessage(ChatRole.User, prompt)\n                },\n                MaxTokens = 800,\n                Temperature = 0.7f,\n                ChoicesPerPrompt = 1,\n            };\n\n            var deploymentId = this._settings?.DeploymentId;\n            var result = await client.GetChatCompletionsAsync(deploymentId, chatCompletionsOptions);\n            var content = result.Value.Choices[0].Message.Content;\n\n            var res = new ChatCompletionResponse() { Completion = content };\n\n            return res;\n        }\n", "        private OpenAIClient GetOpenAIClient()\n        {\n            var endpoint = new Uri(this._settings?.Endpoint);\n            var credential = new AzureKeyCredential(this._settings?.ApiKey);\n\n            var client = new OpenAIClient(endpoint, credential);\n\n            return client;\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Extensions/DictionaryExtensions.cs", "chunked_list": ["using WebApi.Models;\n\nnamespace WebApi.Extensions\n{\n    public static class DictionaryExtensions\n    {\n        public static T ToObject<T>(this IHeaderDictionary headers) where T : ApiRequestHeaders\n        {\n            var result = Activator.CreateInstance<T>();\n            foreach (var header in headers)\n            {\n                switch (header.Key)\n                {\n                    case \"x-webapi-key\":\n                        result.ApiKey = header.Value;\n                        break;\n\n                    case \"x-github-token\":\n                        (result as GitHubApiRequestHeaders).GitHubToken = header.Value;\n                        break;\n                }\n            }\n\n            return result;\n        }\n    }\n}", "            foreach (var header in headers)\n            {\n                switch (header.Key)\n                {\n                    case \"x-webapi-key\":\n                        result.ApiKey = header.Value;\n                        break;\n\n                    case \"x-github-token\":\n                        (result as GitHubApiRequestHeaders).GitHubToken = header.Value;\n                        break;\n                }\n            }\n\n            return result;\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Services/ValidationService.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nusing WebApi.Configurations;\nusing WebApi.Extensions;\nusing WebApi.Models;\n\nnamespace WebApi.Services\n{\n    public interface IValidationService\n    {\n        HeaderValidationResult<T> ValidateHeaders<T>(IHeaderDictionary requestHeaders) where T : ApiRequestHeaders;\n        QueryValidationResult<T> ValidateQueries<T>(T requestQueries) where T : ApiRequestQueries;\n        PayloadValidationResult<T> ValidatePayload<T>(T requestPayload) where T : ApiPayload;\n    }\n", "    public interface IValidationService\n    {\n        HeaderValidationResult<T> ValidateHeaders<T>(IHeaderDictionary requestHeaders) where T : ApiRequestHeaders;\n        QueryValidationResult<T> ValidateQueries<T>(T requestQueries) where T : ApiRequestQueries;\n        PayloadValidationResult<T> ValidatePayload<T>(T requestPayload) where T : ApiPayload;\n    }\n\n    public class ValidationService : IValidationService\n    {\n        private readonly AuthSettings _settings;\n\n        public ValidationService(AuthSettings settings)\n        {\n            this._settings = settings ?? throw new ArgumentNullException(nameof(settings));\n        }\n\n        public HeaderValidationResult<T> ValidateHeaders<T>(IHeaderDictionary requestHeaders) where T : ApiRequestHeaders\n        {\n            var headers = requestHeaders.ToObject<T>();\n            var result = new HeaderValidationResult<T>() { Headers = headers };\n#if !DEBUG\n            var apiKey = headers.ApiKey;", "        private readonly AuthSettings _settings;\n\n        public ValidationService(AuthSettings settings)\n        {\n            this._settings = settings ?? throw new ArgumentNullException(nameof(settings));\n        }\n\n        public HeaderValidationResult<T> ValidateHeaders<T>(IHeaderDictionary requestHeaders) where T : ApiRequestHeaders\n        {\n            var headers = requestHeaders.ToObject<T>();\n            var result = new HeaderValidationResult<T>() { Headers = headers };\n#if !DEBUG\n            var apiKey = headers.ApiKey;", "            if (string.IsNullOrWhiteSpace(apiKey) == true)\n            {\n                var error = new ErrorResponse() { Message = \"Invalid API Key\" };\n                result.ActionResult = new UnauthorizedObjectResult(error);\n\n                return result;\n            }\n            if (apiKey != this._settings.ApiKey)\n            {\n                var error = new ErrorResponse() { Message = \"Invalid API Key\" };\n                result.ActionResult = new UnauthorizedObjectResult(error);\n\n                return result;\n            }\n#endif", "            if (headers is not GitHubApiRequestHeaders)\n            {\n                result.Validated = true;\n\n                return result;\n            }\n\n            var gitHubToken = (headers as GitHubApiRequestHeaders).GitHubToken;\n\n            if (string.IsNullOrWhiteSpace(gitHubToken) == true)\n            {\n                var error = new ErrorResponse() { Message = \"Invalid GitHub Token\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status403Forbidden };\n\n                return result;\n            }\n\n            result.Validated = true;\n\n            return result;\n        }\n \n        public QueryValidationResult<T> ValidateQueries<T>(T requestQueries) where T : ApiRequestQueries\n        {\n            var result = new QueryValidationResult<T>() { Queries = requestQueries };", "            if (string.IsNullOrWhiteSpace(gitHubToken) == true)\n            {\n                var error = new ErrorResponse() { Message = \"Invalid GitHub Token\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status403Forbidden };\n\n                return result;\n            }\n\n            result.Validated = true;\n\n            return result;\n        }\n \n        public QueryValidationResult<T> ValidateQueries<T>(T requestQueries) where T : ApiRequestQueries\n        {\n            var result = new QueryValidationResult<T>() { Queries = requestQueries };", "            if (requestQueries is not GitHubApiRequestQueries)\n            {\n                result.Validated = true;\n\n                return result;\n            }\n\n            var queries = requestQueries as GitHubApiRequestQueries;\n            if (string.IsNullOrWhiteSpace(queries.User))\n            {\n                var error = new ErrorResponse() { Message = \"No GitHub details found\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status404NotFound };\n\n                return result;\n            }\n", "            if (string.IsNullOrWhiteSpace(queries.User))\n            {\n                var error = new ErrorResponse() { Message = \"No GitHub details found\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status404NotFound };\n\n                return result;\n            }\n\n            if (string.IsNullOrWhiteSpace(queries.Repository))\n            {\n                var error = new ErrorResponse() { Message = \"No GitHub details found\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status404NotFound };\n\n                return result;\n            }\n\n            result.Validated = true;\n\n            return result;\n        }\n\n        public PayloadValidationResult<T> ValidatePayload<T>(T requestPayload) where T : ApiPayload\n        {\n            var result = new PayloadValidationResult<T>() { Payload = requestPayload };", "            if (string.IsNullOrWhiteSpace(queries.Repository))\n            {\n                var error = new ErrorResponse() { Message = \"No GitHub details found\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status404NotFound };\n\n                return result;\n            }\n\n            result.Validated = true;\n\n            return result;\n        }\n\n        public PayloadValidationResult<T> ValidatePayload<T>(T requestPayload) where T : ApiPayload\n        {\n            var result = new PayloadValidationResult<T>() { Payload = requestPayload };", "            if (requestPayload is not ChatCompletionRequest)\n            {\n                result.Validated = true;\n\n                return result;\n            }\n\n            var payload = requestPayload as ChatCompletionRequest;\n            if (string.IsNullOrWhiteSpace(payload.Prompt))\n            {\n                var error = new ErrorResponse() { Message = \"No payload found\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status400BadRequest };\n\n                return result;\n            }\n\n            result.Validated = true;\n\n            return result;\n        }\n    }\n}", "            if (string.IsNullOrWhiteSpace(payload.Prompt))\n            {\n                var error = new ErrorResponse() { Message = \"No payload found\" };\n                result.ActionResult = new ObjectResult(error) { StatusCode = StatusCodes.Status400BadRequest };\n\n                return result;\n            }\n\n            result.Validated = true;\n\n            return result;\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Services/OpenAIService.cs", "chunked_list": ["using WebApi.Models;\nusing WebApi.Helpers;\n\nnamespace WebApi.Services\n{\n    public interface IOpenAIService\n    {\n        Task<ChatCompletionResponse> GetChatCompletionAsync(string prompt);\n    }\n\n    public class OpenAIService : IOpenAIService\n    {", "    public class OpenAIService : IOpenAIService\n    {\n        private readonly IOpenAIHelper _helper;\n\n        public OpenAIService(IOpenAIHelper helper)\n        {\n            this._helper = helper ?? throw new ArgumentNullException(nameof(helper));\n        }\n\n        public async Task<ChatCompletionResponse> GetChatCompletionAsync(string prompt)\n        {\n            var res = await this._helper.GetChatCompletionAsync(prompt);\n\n            return res;\n        }\n    }\n}", "        public async Task<ChatCompletionResponse> GetChatCompletionAsync(string prompt)\n        {\n            var res = await this._helper.GetChatCompletionAsync(prompt);\n\n            return res;\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Services/GitHubService.cs", "chunked_list": ["using Octokit;\n\nusing WebApi.Configurations;\nusing WebApi.Helpers;\nusing WebApi.Models;\n\nnamespace WebApi.Services\n{\n    public interface IGitHubService\n    {\n        Task<GitHubIssueCollectionResponse> GetIssuesAsync(GitHubApiRequestHeaders headers, GitHubApiRequestQueries req);\n\n        Task<GitHubIssueItemResponse> GetIssueAsync(int id, GitHubApiRequestHeaders headers, GitHubApiRequestQueries req);\n\n        Task<GitHubIssueItemSummaryResponse> GetIssueSummaryAsync(int id, GitHubApiRequestHeaders headers, GitHubApiRequestQueries req);\n    }\n", "    public interface IGitHubService\n    {\n        Task<GitHubIssueCollectionResponse> GetIssuesAsync(GitHubApiRequestHeaders headers, GitHubApiRequestQueries req);\n\n        Task<GitHubIssueItemResponse> GetIssueAsync(int id, GitHubApiRequestHeaders headers, GitHubApiRequestQueries req);\n\n        Task<GitHubIssueItemSummaryResponse> GetIssueSummaryAsync(int id, GitHubApiRequestHeaders headers, GitHubApiRequestQueries req);\n    }\n\n    public class GitHubService : IGitHubService\n    {", "    public class GitHubService : IGitHubService\n    {\n        private readonly GitHubSettings _settings;\n        private readonly IOpenAIHelper _helper;\n\n        public GitHubService(GitHubSettings settings, IOpenAIHelper helper)\n        {\n            this._settings = settings ?? throw new ArgumentNullException(nameof(settings));\n            this._helper = helper ?? throw new ArgumentNullException(nameof(helper));\n        }\n", "        public async Task<GitHubIssueCollectionResponse> GetIssuesAsync(GitHubApiRequestHeaders headers, GitHubApiRequestQueries req)\n        {\n            var user = req.User;\n            var repository = req.Repository;\n\n            var github = this.GetGitHubClient(headers);\n\n            var issues = await github.Issue.GetAllForRepository(user, repository);\n            var res = new GitHubIssueCollectionResponse()\n            {\n                Items = issues.Select(p => new GitHubIssueItemResponse()\n                {\n                    Id = p.Id,\n                    Number = p.Number,\n                    Title = p.Title,\n                    Body = p.Body,\n                })\n            };\n\n            return res;\n        }\n", "        public async Task<GitHubIssueItemResponse> GetIssueAsync(int id, GitHubApiRequestHeaders headers, GitHubApiRequestQueries req)\n        {\n            var user = req.User;\n            var repository = req.Repository;\n\n            var github = this.GetGitHubClient(headers);\n\n            var issue = await github.Issue.Get(user, repository, id);\n            var res = new GitHubIssueItemResponse()\n            {\n                Id = issue.Id,\n                Number = issue.Number,\n                Title = issue.Title,\n                Body = issue.Body,\n            };\n\n            return res;\n        }\n", "        public async Task<GitHubIssueItemSummaryResponse> GetIssueSummaryAsync(int id, GitHubApiRequestHeaders headers, GitHubApiRequestQueries req)\n        {\n            var issue = await this.GetIssueAsync(id, headers, req);\n            var prompt = issue.Body;\n            var completion = await this._helper.GetChatCompletionAsync(prompt);\n\n            var res = new GitHubIssueItemSummaryResponse()\n            {\n                Id = issue.Id,\n                Number = issue.Number,\n                Title = issue.Title,\n                Body = issue.Body,\n                Summary = completion.Completion,\n            };\n\n            return res;\n        }\n", "        private IGitHubClient GetGitHubClient(GitHubApiRequestHeaders headers)\n        {\n            var accessToken = headers.GitHubToken;\n            var credentials = new Credentials(accessToken, AuthenticationType.Bearer);\n            var agent = this._settings.Agent.Replace(\" \", \"\").Trim();\n            var github = new GitHubClient(new ProductHeaderValue(agent))\n            {\n                Credentials = credentials\n            };\n\n            return github;\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/GitHubIssueCollectionResponse.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public class GitHubIssueCollectionResponse\n    {\n        public virtual IEnumerable<GitHubIssueItemResponse>? Items { get; set; } = new List<GitHubIssueItemResponse>();\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ApiRequestQueries.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public abstract class ApiRequestQueries\n    {\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ApiPayload.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public abstract class ApiPayload\n    {\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/PayloadValidationResult.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nnamespace WebApi.Models\n{\n    public class PayloadValidationResult<T> where T : ApiPayload\n    {\n        public virtual T? Payload { get; set; }\n        public virtual bool Validated { get; set; }\n        public virtual IActionResult? ActionResult { get; set; }\n    }\n}", "        public virtual IActionResult? ActionResult { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/QueryValidationResult.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nnamespace WebApi.Models\n{\n    public class QueryValidationResult<T> where T : ApiRequestQueries\n    {\n        public virtual T? Queries { get; set; }\n        public virtual bool Validated { get; set; }\n        public virtual IActionResult? ActionResult { get; set; }\n    }\n}", "        public virtual IActionResult? ActionResult { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ChatCompletionResponse.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public class ChatCompletionResponse\n    {\n        public virtual string? Completion { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ErrorResponse.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public class ErrorResponse\n    {\n        public virtual string? Message { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/HeaderValidationResult.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nnamespace WebApi.Models\n{\n    public class HeaderValidationResult<T> where T : ApiRequestHeaders\n    {\n        public virtual T? Headers { get; set; }\n        public virtual bool Validated { get; set; }\n        public virtual IActionResult? ActionResult { get; set; }\n    }\n}", "        public virtual IActionResult? ActionResult { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/GitHubIssueItemSummaryResponse.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public class GitHubIssueItemSummaryResponse : GitHubIssueItemResponse\n    {\n        public virtual string? Summary { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ChatCompletionRequestHeaders.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public class ChatCompletionRequestHeaders : ApiRequestHeaders\n    {\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/GitHubApiRequestHeaders.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace WebApi.Models\n{\n    public class GitHubApiRequestHeaders : ApiRequestHeaders\n    {\n        [JsonPropertyName(\"x-github-token\")]\n        public virtual string? GitHubToken { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/GitHubApiRequestQueries.cs", "chunked_list": ["\ufeffusing System.ComponentModel.DataAnnotations;\n\nnamespace WebApi.Models\n{\n    public class GitHubApiRequestQueries : ApiRequestQueries\n    {\n        [Required]\n        public virtual string? User { get; set;}\n\n        [Required]\n        public virtual string? Repository { get; set; }\n    }\n}", "        public virtual string? Repository { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/GitHubIssueItemResponse.cs", "chunked_list": ["\ufeffnamespace WebApi.Models\n{\n    public class GitHubIssueItemResponse\n    {\n        public virtual int? Id { get; set; }\n        public virtual int? Number { get; set; }\n        public virtual string? Title { get; set; }\n        public virtual string? Body { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ChatCompletionRequest.cs", "chunked_list": ["\ufeffusing System.ComponentModel.DataAnnotations;\n\nnamespace WebApi.Models\n{\n    public class ChatCompletionRequest : ApiPayload\n    {\n        [Required]\n        public virtual string? Prompt { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Models/ApiRequestHeaders.cs", "chunked_list": ["using System.Text.Json.Serialization;\n\nnamespace WebApi.Models\n{\n    public abstract class ApiRequestHeaders\n    {\n        [JsonPropertyName(\"x-webapi-key\")]\n        public virtual string? ApiKey { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Controllers/GitHubController.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nusing WebApi.Models;\nusing WebApi.Services;\n\nnamespace WebApi.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class GitHubController : ControllerBase\n    {", "    [ApiController]\n    public class GitHubController : ControllerBase\n    {\n        private readonly IValidationService _validation;\n        private readonly IGitHubService _github;\n        private readonly IOpenAIService _openai;\n        private readonly ILogger<GitHubController> _logger;\n\n        public GitHubController(IValidationService validation, IGitHubService github, IOpenAIService openai, ILogger<GitHubController> logger)\n        {\n            this._validation = validation ?? throw new ArgumentNullException(nameof(validation));\n            this._github = github ?? throw new ArgumentNullException(nameof(github));\n            this._openai = openai ?? throw new ArgumentNullException(nameof(openai));\n            this._logger = logger ?? throw new ArgumentNullException(nameof(logger));\n        }\n\n        [HttpGet(\"issues\", Name = \"Issues\")]\n        [ProducesResponseType(typeof(GitHubIssueCollectionResponse), StatusCodes.Status200OK)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status401Unauthorized)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status403Forbidden)]", "        public async Task<IActionResult> GetIssues([FromQuery] GitHubApiRequestQueries req)\n        {\n            var hvr = this._validation.ValidateHeaders<GitHubApiRequestHeaders>(this.Request.Headers);\n            if (hvr.Validated != true)\n            {\n                return await Task.FromResult(hvr.ActionResult);\n            }\n\n            var qvr = this._validation.ValidateQueries(req);\n            if (qvr.Validated != true)\n            {\n                return await Task.FromResult(qvr.ActionResult);\n            }\n\n            var res = await this._github.GetIssuesAsync(hvr.Headers, qvr.Queries);\n\n            return new OkObjectResult(res);\n        }\n\n        [HttpGet(\"issues/{id}\", Name = \"IssueById\")]\n        [ProducesResponseType(typeof(GitHubIssueItemResponse), StatusCodes.Status200OK)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status401Unauthorized)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status403Forbidden)]", "            if (qvr.Validated != true)\n            {\n                return await Task.FromResult(qvr.ActionResult);\n            }\n\n            var res = await this._github.GetIssuesAsync(hvr.Headers, qvr.Queries);\n\n            return new OkObjectResult(res);\n        }\n\n        [HttpGet(\"issues/{id}\", Name = \"IssueById\")]\n        [ProducesResponseType(typeof(GitHubIssueItemResponse), StatusCodes.Status200OK)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status401Unauthorized)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status403Forbidden)]", "        public async Task<IActionResult> GetIssue(int id, [FromQuery] GitHubApiRequestQueries req)\n        {\n            var validation = this._validation.ValidateHeaders<GitHubApiRequestHeaders>(this.Request.Headers);\n            if (validation.Validated != true)\n            {\n                return await Task.FromResult(validation.ActionResult);\n            }\n\n            var qvr = this._validation.ValidateQueries(req);\n            if (qvr.Validated != true)\n            {\n                return await Task.FromResult(qvr.ActionResult);\n            }\n\n            var res = await this._github.GetIssueAsync(id, validation.Headers, qvr.Queries);\n\n            return new OkObjectResult(res);\n        }\n\n        [HttpGet(\"issues/{id}/summary\", Name = \"IssueSummaryById\")]\n        [ProducesResponseType(typeof(GitHubIssueItemSummaryResponse), StatusCodes.Status200OK)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status401Unauthorized)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status403Forbidden)]", "            if (qvr.Validated != true)\n            {\n                return await Task.FromResult(qvr.ActionResult);\n            }\n\n            var res = await this._github.GetIssueAsync(id, validation.Headers, qvr.Queries);\n\n            return new OkObjectResult(res);\n        }\n\n        [HttpGet(\"issues/{id}/summary\", Name = \"IssueSummaryById\")]\n        [ProducesResponseType(typeof(GitHubIssueItemSummaryResponse), StatusCodes.Status200OK)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status401Unauthorized)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status403Forbidden)]", "        public async Task<IActionResult> GetIssueSummary(int id, [FromQuery] GitHubApiRequestQueries req)\n        {\n            var validation = this._validation.ValidateHeaders<GitHubApiRequestHeaders>(this.Request.Headers);\n            if (validation.Validated != true)\n            {\n                return await Task.FromResult(validation.ActionResult);\n            }\n\n            var qvr = this._validation.ValidateQueries(req);\n            if (qvr.Validated != true)\n            {\n                return await Task.FromResult(qvr.ActionResult);\n            }\n\n            var res = await this._github.GetIssueSummaryAsync(id, validation.Headers, qvr.Queries);\n\n            return new OkObjectResult(res);\n        }\n    }\n}", "            if (qvr.Validated != true)\n            {\n                return await Task.FromResult(qvr.ActionResult);\n            }\n\n            var res = await this._github.GetIssueSummaryAsync(id, validation.Headers, qvr.Queries);\n\n            return new OkObjectResult(res);\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Controllers/ChatController.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nusing WebApi.Models;\nusing WebApi.Services;\n\nnamespace WebApi.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    [Consumes(\"application/json\")]", "    [ApiController]\n    [Consumes(\"application/json\")]\n    [Produces(\"application/json\")]\n    public class ChatController : ControllerBase\n    {\n        private readonly IValidationService _validation;\n        private readonly IOpenAIService _openai;\n        private readonly ILogger<ChatController> _logger;\n\n        public ChatController(IValidationService validation, IOpenAIService openai, ILogger<ChatController> logger)\n        {\n            this._validation = validation ?? throw new ArgumentNullException(nameof(validation));\n            this._openai = openai ?? throw new ArgumentNullException(nameof(openai));\n            this._logger = logger ?? throw new ArgumentNullException(nameof(logger));\n        }\n\n        [HttpPost(\"completions\", Name = \"ChatCompletions\")]\n        [ProducesResponseType(typeof(ChatCompletionResponse), StatusCodes.Status200OK)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status401Unauthorized)]\n        [ProducesResponseType(typeof(ErrorResponse), StatusCodes.Status403Forbidden)]", "        public async Task<IActionResult> Post([FromBody] ChatCompletionRequest req)\n        {\n            var validation = this._validation.ValidateHeaders<ChatCompletionRequestHeaders>(this.Request.Headers);\n            if (validation.Validated != true)\n            {\n                return await Task.FromResult(validation.ActionResult);\n            }\n\n            var pvr = this._validation.ValidatePayload(req);\n            if (pvr.Validated != true)\n            {\n                return await Task.FromResult(pvr.ActionResult);\n            }\n\n            var res = await this._openai.GetChatCompletionAsync(pvr.Payload.Prompt);\n\n            return new OkObjectResult(res);\n        }\n    }\n}", "            if (pvr.Validated != true)\n            {\n                return await Task.FromResult(pvr.ActionResult);\n            }\n\n            var res = await this._openai.GetChatCompletionAsync(pvr.Payload.Prompt);\n\n            return new OkObjectResult(res);\n        }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Configurations/OpenApiSettings.cs", "chunked_list": ["namespace WebApi.Configurations\n{\n    public class OpenApiSettings\n    {\n        public const string Name = \"OpenApi\";\n\n        public virtual string? Title { get; set; }\n        public virtual string? Version { get; set; }\n        public virtual string? Server { get; set; }\n        public virtual bool IncludeOnDeployment { get; set; }\n    }\n}", "        public virtual string? Server { get; set; }\n        public virtual bool IncludeOnDeployment { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Configurations/GitHubSettings.cs", "chunked_list": ["namespace WebApi.Configurations\n{\n    public class GitHubSettings\n    {\n        public const string Name = \"GitHub\";\n\n        public virtual string? Agent { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Configurations/AzureOpenAISettings.cs", "chunked_list": ["\ufeffnamespace WebApi.Configurations\n{\n    public class AzureOpenAISettings\n    {\n        public const string Name = \"AOAI\";\n\n        public virtual string? DeploymentId { get; set; }\n        public virtual string? Endpoint { get; set; }\n        public virtual string? ApiKey { get; set; }\n    }\n}", "        public virtual string? ApiKey { get; set; }\n    }\n}"]}
{"filename": "src/IssueSummaryApi/Configurations/AuthSettings.cs", "chunked_list": ["\ufeffnamespace WebApi.Configurations\n{\n    public class AuthSettings\n    {\n        public const string Name = \"Auth\";\n\n        public virtual string? ApiKey { get; set; }\n    }\n}"]}
{"filename": "src/DashboardApp/Program.cs", "chunked_list": ["using DashboardApp;\n\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\n\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\n\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });", "\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) });\n\nawait builder.Build().RunAsync();"]}
{"filename": "src/DashboardApp/Pages/Index.razor.cs", "chunked_list": ["using System.Net.Http.Json;\n\nusing Microsoft.AspNetCore.Components;\n\nusing Microsoft.OpenApi.Readers;\nusing Microsoft.PowerFx;\nusing Microsoft.PowerFx.Types;\n\nnamespace DashboardApp.Pages\n{\n    public partial class Index : ComponentBase\n    {\n        private Product[]? productList;\n\n        private Dictionary<string, string> powerFxColumns = new Dictionary<string, string>();\n", "namespace DashboardApp.Pages\n{\n    public partial class Index : ComponentBase\n    {\n        private Product[]? productList;\n\n        private Dictionary<string, string> powerFxColumns = new Dictionary<string, string>();\n\n        private bool showDialog = false;\n        private string? columnName;\n        private string? columnExpression;\n\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Uncomment: Power Fx interpreter and type marshaller members\n        //private RecalcEngine? engine;\n\n        //private TypeMarshallerCache? cache;\n        //private ITypeMarshaller? productType;\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Uncomment: Power Fx interpreter and type marshaller members\n", "        private bool showDialog = false;\n        private string? columnName;\n        private string? columnExpression;\n\n        // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Uncomment: Power Fx interpreter and type marshaller members\n        //private RecalcEngine? engine;\n\n        //private TypeMarshallerCache? cache;\n        //private ITypeMarshaller? productType;\n        // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Uncomment: Power Fx interpreter and type marshaller members\n", "        private string errors = string.Empty;\n\n        [Inject]\n        public HttpClient Http { get; set; } = null!;\n\n        protected override async Task OnInitializedAsync()\n        {\n            productList = await Http.GetFromJsonAsync<Product[]>(\"sample-data/products.json\");\n\n            // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Uncomment: Initialize Power Fx interpreter RecalcEngine\n            //var config = new PowerFxConfig(Features.PowerFxV1);\n            //engine = new RecalcEngine(config);\n            // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Uncomment: Initialize Power Fx interpreter RecalcEngine\n\n            // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Uncomment: Initialize out type marshaller cache\n            //cache = new TypeMarshallerCache();\n            //productType = cache.GetMarshaller(typeof(Product));\n            // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Uncomment: Initialize out type marshaller cache\n\n            // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Uncomment: Create strongly-typed Power Fx objects from the swagger\n            //var swagger = await Http.GetStringAsync(\"https://localhost:5051/swagger/v1/swagger.json\");\n            //var openAPIDoc = new OpenApiStringReader().Read(swagger, out OpenApiDiagnostic diag);\n            //var client = new HttpClient { BaseAddress = new Uri(\"https://localhost:5051\") };\n\n            //// Add the service to the Power Fx configuration as \"InventoryAPI_Connector\"\n            //config.AddService(\"InventoryAPI_Connector\", openAPIDoc, client);\n            // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Uncomment: Create strongly-typed Power Fx objects from the swagger\n\n            // Sum( InventoryAPI_Connector.GetItemsOnHand( ItemId ), numberInStock )\n        }\n", "        protected async Task AddColumn(string name, string expression)\n        {\n            errors = string.Empty;\n\n            if (!powerFxColumns.ContainsKey(name))\n            {\n                foreach (var product in productList)\n                {\n                    // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Comment: When to use PowerFx\n                    var value = string.Empty;\n                    // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Comment: When to use PowerFx\n\n                    // \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f Uncomment: Evaluate the expression for each product\n                    //var value = (await engine.EvalAsync(\n                    //    expression,\n                    //    cancellationToken: default,\n                    //    productType.Marshal(product) as RecordValue\n                    //)).ToObject().ToString();\n                    // \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f Uncomment: Evaluate the expression for each product\n\n                    product.CalculatedColumns.Add(name, value);\n                }\n\n                powerFxColumns.Add(name, expression);\n            }\n            else\n            {\n                errors = $\"Column '{name}' already exists. Choose a different name or remove the existing column.\";\n            }\n\n            CloseDialog();\n        }\n", "        protected void ShowDialog()\n        {\n            showDialog = true;\n        }\n\n        protected void CloseDialog()\n        {\n            showDialog = false;\n            errors = string.Empty;\n        }\n", "        protected void RemoveColumn(string name)\n        {\n            powerFxColumns.Remove(name);\n\n            foreach (var product in productList)\n            {\n                product.CalculatedColumns.Remove(name);\n            }\n        }\n\n        protected Task AddColumn()\n        {\n            return AddColumn(columnName, columnExpression);\n        }\n", "        protected Task AddColumn()\n        {\n            return AddColumn(columnName, columnExpression);\n        }\n\n        public class Product\n        {\n            public string? ItemId { get; set; }\n\n            public string? Name { get; set; }\n\n            public string? CategoryId { get; set; }\n", "            public Decimal Price { get; set; }\n\n            public string? Description { get; set; }\n\n            public Dictionary<string, string> CalculatedColumns { get; set; } = new Dictionary<string, string>();\n        }\n    }\n}"]}
