{"filename": "Assets/Scripts/PrefabsToEntityConverter.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing UnityEngine;\n\n/// <summary>\n/// Using struct for better visualization on inspector\n/// </summary>\n[Serializable]\npublic struct TeamUnitPrefabData\n{", "public struct TeamUnitPrefabData\n{\n\tpublic Team team;\n\tpublic GameObject unitPrefab;\n}\n\n/// <summary>\n/// Simply creates entity prefabs from game object prefabs.\n/// </summary>\npublic class PrefabsToEntityConverter : MonoBehaviour\n{", "public class PrefabsToEntityConverter : MonoBehaviour\n{\n\tpublic static event Action PrefabsConverted;\n\n\t[SerializeField] private TeamUnitPrefabData[] teamsUnitPrefab;\n\t[SerializeField] private GameObject unitHealthDisplayPrefab;\n\n\tpublic static Dictionary<Team, Entity> TeamsEntityDic { get; private set; }\n\tpublic static Entity UnitHealthDisplay { get; private set; }\n\tprivate void Awake()\n\t{\n\t\tTeamsEntityDic = new Dictionary<Team, Entity>();\n\t\t\n\t\tvar settings = GameObjectConversionSettings.FromWorld(World.DefaultGameObjectInjectionWorld, null);", "\tpublic static Entity UnitHealthDisplay { get; private set; }\n\tprivate void Awake()\n\t{\n\t\tTeamsEntityDic = new Dictionary<Team, Entity>();\n\t\t\n\t\tvar settings = GameObjectConversionSettings.FromWorld(World.DefaultGameObjectInjectionWorld, null);\n\t\tforeach (var teamUnitPrefab in teamsUnitPrefab)\n\t\t{\n\t\t\tTeamsEntityDic.Add(teamUnitPrefab.team, GameObjectConversionUtility.ConvertGameObjectHierarchy(teamUnitPrefab.unitPrefab, settings));\n\t\t}\n\t\tUnitHealthDisplay = GameObjectConversionUtility.ConvertGameObjectHierarchy(unitHealthDisplayPrefab, settings);\n\n\t\tPrefabsConverted?.Invoke();\n\t}\n", "\tprivate void OnDestroy()\n\t{\n\t\tPrefabsConverted = null;\n\t\tTeamsEntityDic = null;\n\t}\n}"]}
{"filename": "Assets/Scripts/TeamButton.cs", "chunked_list": ["\ufeffusing System;\nusing UnityEngine;\nusing UnityEngine.UI;\n\n/// <summary>\n/// Basic button class that holds data to forward when its clicked. \n/// </summary>\npublic class TeamButton : MonoBehaviour\n{\n\tpublic static event Action<TeamData> TeamButtonClicked;\n", "\tpublic static event Action<TeamData> TeamButtonClicked;\n\n\tprivate Button _button;\n\tprivate TeamData _teamData;\n\t\n\tpublic void Init(TeamData teamData)\n\t{\n\t\t_teamData = teamData;\n\t\n\t\t_button = GetComponent<Button>();\n\t\t_button.onClick.AddListener(OnClick);\n\n\t\ttransform.GetComponentInChildren<Text>().text = teamData.TeamName;\n\t}\n", "\tprivate void OnClick()\n\t{\n\t\tTeamButtonClicked?.Invoke(_teamData);\n\t}\n\n\tprivate void OnDestroy()\n\t{\n\t\tTeamButtonClicked = null;\n\t}\n}\n"]}
{"filename": "Assets/Scripts/GameManager.cs", "chunked_list": ["using System;\nusing UnityEngine;\n\n/// <summary>\n/// Simply holds game events\n/// </summary>\npublic class GameManager : MonoBehaviour\n{\n    public static event Action GameStarted;\n    public static event Action GameWon;\n    public static event Action GameLost;", "    public static event Action GameStarted;\n    public static event Action GameWon;\n    public static event Action GameLost;\n    public static event Action GameDraw;\n\n    public static event Action GameReloaded;\n\n    public static void RaiseGameStarted()\n    {\n        GameStarted?.Invoke();\n    }\n", "    public static void RaiseGameWon()\n    {\n        GameWon?.Invoke();\n    }\n\n    public static void RaiseGameLost()\n    {\n        GameLost?.Invoke();\n    }\n    \n    public static void RaiseGameDraw()\n    {\n        GameDraw?.Invoke();\n    }\n", "    public static void RaiseGameDraw()\n    {\n        GameDraw?.Invoke();\n    }\n\n    public static void RaiseGameReloaded()\n    {\n        GameReloaded?.Invoke();\n    }\n\n    private void OnDestroy()\n    {\n        GameStarted = null;\n        GameWon = null;\n        GameLost = null;\n        GameReloaded = null;\n        GameDraw = null;\n    }\n}\n", "    private void OnDestroy()\n    {\n        GameStarted = null;\n        GameWon = null;\n        GameLost = null;\n        GameReloaded = null;\n        GameDraw = null;\n    }\n}\n"]}
{"filename": "Assets/Scripts/TeamData.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing ECS.ComponentsAndTags;\nusing UnityEngine;\n\n/// <summary>\n/// This struct holds slot index and its Unit to spawn unit on right slot.\n/// </summary>\n[Serializable]\npublic struct UnitSlotData\n{", "public struct UnitSlotData\n{\n\tpublic int slotIndex;\n\tpublic UnitData unitData;\n}\n\n/// <summary>\n/// This SO is the base data holder. it holds data of a team.\n/// </summary>\n[CreateAssetMenu(fileName = \"TeamData\", menuName = \"ScriptableObjects/TeamData\", order = 1)]\npublic class TeamData : ScriptableObject\n{", "public class TeamData : ScriptableObject\n{\n\t[SerializeField] private string teamName;\n\t[SerializeField] private Team team;\n\t[SerializeField] private UnitSlotData[] unitsSlotsData;\n\n\tpublic string TeamName => teamName;\n\tpublic Team Team => team;\n\n\tpublic Dictionary<int, UnitData> GetSlotIndexUnitDic()\n\t{\n\t\tvar slotIndexUnitDic = new Dictionary<int, UnitData>();", "\t\tforeach (var unitSlotData in unitsSlotsData)\n\t\t{\n\t\t\tif (slotIndexUnitDic.ContainsKey(unitSlotData.slotIndex))\n\t\t\t{\n#if UNITY_EDITOR\n\t\t\t\tDebug.LogWarning($\"{teamName} team data has different units on same slot index!\");\n#endif\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (unitSlotData.slotIndex >= 9)\n\t\t\t{\n#if UNITY_EDITOR\n\t\t\t\tDebug.LogWarning($\"{teamName} team data has an unit that slot index is bigger than max slot index 8!\");\n#endif\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tslotIndexUnitDic.Add(unitSlotData.slotIndex, unitSlotData.unitData);\n\t\t}\n\n\t\treturn slotIndexUnitDic;\n\t}\n}", "\t\t\tif (unitSlotData.slotIndex >= 9)\n\t\t\t{\n#if UNITY_EDITOR\n\t\t\t\tDebug.LogWarning($\"{teamName} team data has an unit that slot index is bigger than max slot index 8!\");\n#endif\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tslotIndexUnitDic.Add(unitSlotData.slotIndex, unitSlotData.unitData);\n\t\t}\n\n\t\treturn slotIndexUnitDic;\n\t}\n}"]}
{"filename": "Assets/Scripts/FPSCounter.cs", "chunked_list": ["\ufeffusing UnityEngine;\n \n/// <summary>\n/// To visualize FPS at the corner of screen for debugging purposes\n/// </summary>\npublic class FPSCounter : MonoBehaviour\n{\n\tprivate float _deltaTime = 0.0f;\n\tprivate Color _color;\n\tprivate GUIStyle _style;\n\tprivate int _width, _height;", "\tprivate Color _color;\n\tprivate GUIStyle _style;\n\tprivate int _width, _height;\n\tprivate Rect _rect;\n\t\n\tprivate void Awake()\n\t{\n\t\t_color = Color.yellow;\n\t\t_width = Screen.width; \n\t\t_height = Screen.height;\n\t\t\n\t\t_style = new GUIStyle();\n\t\t_rect = new Rect(0, 0, _width, _height * 2 / 100);\n\t\t\n\t\t_style.alignment = TextAnchor.UpperLeft;\n\t\t_style.fontSize = _height * 2 / 100;\n\t\t_style.normal.textColor = _color;\n\t}\n", "\tprivate void Start()\n\t{\n\t\t// Make the game run as fast as possible\n\t\tApplication.targetFrameRate = 300;\n\t}\n \n\tprivate void Update()\n\t{\n\t\t_deltaTime += (Time.unscaledDeltaTime - _deltaTime) * 0.1f;\n\t}\n ", "\tprivate void OnGUI()\n\t{\n\t\tfloat msec = _deltaTime * 1000.0f;\n\t\tfloat fps = 1.0f / _deltaTime;\n\t\tstring text = string.Format(\"{0:0.0} ms ({1:0.} fps)\", msec, fps);\n\t\tGUI.Label(_rect, text, _style);\n\t}\n}"]}
{"filename": "Assets/Scripts/UIController.cs", "chunked_list": ["using UnityEngine;\n/// <summary>\n/// A Basic UI controller\n/// </summary>\npublic class UIController : MonoBehaviour\n{\n    [SerializeField] private GameObject preGameUI;\n    [SerializeField] private GameObject inGameUI;\n    \n    [SerializeField] private GameObject endGameUI;\n    [SerializeField] private GameObject winText;", "    [SerializeField] private GameObject endGameUI;\n    [SerializeField] private GameObject winText;\n    [SerializeField] private GameObject lostText;\n    [SerializeField] private GameObject drawText;\n\n    private void Awake()\n    {\n        Init();\n        SignUpEvents();\n    }\n", "    private void Init()\n    {\n        preGameUI.SetActive(true);\n        inGameUI.SetActive(false);\n        endGameUI.SetActive(false);\n    }\n\n    private void SignUpEvents()\n    {\n        GameManager.GameStarted += OnGameStarted;\n        GameManager.GameWon += OnGameWon;\n        GameManager.GameLost += OnGameLost;\n        GameManager.GameDraw += OnGameDraw;\n        GameManager.GameReloaded += OnGameReloaded;\n    }\n    ", "    private void OnGameDraw()\n    {\n        endGameUI.SetActive(true);\n        inGameUI.SetActive(false);\n        lostText.SetActive(false);\n        winText.SetActive(false);\n        drawText.SetActive(true);\n    }\n    \n    private void OnGameReloaded()\n    {\n        Init();\n    }\n", "    private void OnGameReloaded()\n    {\n        Init();\n    }\n\n    private void OnGameStarted()\n    {\n        preGameUI.SetActive(false);\n        inGameUI.SetActive(true);\n    }\n    ", "    private void OnGameWon()\n    {\n        endGameUI.SetActive(true);\n        inGameUI.SetActive(false);\n        lostText.SetActive(false);\n        winText.SetActive(true);\n        drawText.SetActive(false);\n    }\n\n    private void OnGameLost()\n    {\n        endGameUI.SetActive(true);\n        inGameUI.SetActive(false);\n        lostText.SetActive(true);\n        winText.SetActive(false);\n        drawText.SetActive(false);\n    }\n", "    private void OnGameLost()\n    {\n        endGameUI.SetActive(true);\n        inGameUI.SetActive(false);\n        lostText.SetActive(true);\n        winText.SetActive(false);\n        drawText.SetActive(false);\n    }\n\n    public void OnClickStartGame()\n    {\n        GameManager.RaiseGameStarted();\n    }\n", "    public void OnClickStartGame()\n    {\n        GameManager.RaiseGameStarted();\n    }\n\n    public void OnClickRestartGame()\n    {\n        GameManager.RaiseGameReloaded();\n    }\n}\n"]}
{"filename": "Assets/Scripts/ScrollViewContentInitializer.cs", "chunked_list": ["using ECS.ComponentsAndTags;\nusing UnityEngine;\n\n/// <summary>\n/// This class generates TeamButtons for ScrollViews \n/// </summary>\npublic class ScrollViewContentInitializer : MonoBehaviour\n{\n    [SerializeField] public Team team;\n    [SerializeField] public TeamButton teamButtonPrefab;\n", "    [SerializeField] public Team team;\n    [SerializeField] public TeamButton teamButtonPrefab;\n\n    private void Start()\n    {\n        var teamsData = DataManager.TeamsData[team];\n        foreach (var teamData in teamsData)\n        {\n            var newButton = Instantiate(teamButtonPrefab, transform);\n            newButton.Init(teamData);\n        }\n    }\n}\n"]}
{"filename": "Assets/Scripts/UnitData.cs", "chunked_list": ["\ufeffusing System;\nusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing UnityEngine;\n\n/// <summary>\n/// This struct holds whole Unit data for generation purposes\n/// </summary>\n[Serializable]\npublic struct UnitData\n{", "public struct UnitData\n{\n\t[SerializeField] private int health;\n\t[SerializeField] private float attackDamage;\n\t[SerializeField] private float attackRange;\n\t[SerializeField] private float attackCooldown;\n\t[SerializeField] private float movementSpeed;\n\t[SerializeField] private Team team;\n\n\tpublic int Health => health;\n\tpublic float AttackDamage => attackDamage;", "\tpublic int Health => health;\n\tpublic float AttackDamage => attackDamage;\n\tpublic float AttackRange => attackRange;\n\tpublic float AttackCooldown => attackCooldown;\n\tpublic float MovementSpeed => movementSpeed;\n\tpublic Team Team => team;\n\n\tpublic float3 Position { get; set; }\n\tpublic Entity DisplayEntity { get; set; }\n\n}", "\tpublic Entity DisplayEntity { get; set; }\n\n}"]}
{"filename": "Assets/Scripts/DataManager.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing ECS.ComponentsAndTags;\nusing UnityEngine;\n\n/// <summary>\n/// A struct to give better inputs on inspector\n/// </summary>\n[Serializable]\npublic struct TeamSpawnTransformsData\n{", "public struct TeamSpawnTransformsData\n{\n\tpublic Team team;\n\tpublic Transform[] spawnTransforms;\n}\n\n/// <summary>\n/// This Manager basically holds team and unit data for entity generation\n/// </summary>\npublic class DataManager : MonoBehaviour\n{\n\t[SerializeField] private TeamSpawnTransformsData[] teamsSpawnData;\n\t[SerializeField] private TeamData[] teamsData;\n\t", "public class DataManager : MonoBehaviour\n{\n\t[SerializeField] private TeamSpawnTransformsData[] teamsSpawnData;\n\t[SerializeField] private TeamData[] teamsData;\n\t\n\tpublic static Dictionary<Team, Vector3[]> TeamsSpawnPoints { get; private set; }\n\tpublic static Dictionary<Team, List<TeamData>> TeamsData { get; private set; }\n\n\t/// <summary>\n\t/// Clear static values on destroy\n\t/// </summary>", "\tprivate void OnDestroy()\n\t{\n\t\tTeamsSpawnPoints = null;\n\t\tTeamsData = null;\n\t}\n\n\tprivate void Awake()\n    {\n\t    Init();\n    }\n", "    private void Init()\n    {\n\t    InitSpawnPoints();\n\t    InitTeams();\n    }\n\n    /// <summary>\n    /// Storing values on dictionary first to have a better usage\n    /// </summary>\n    private void InitTeams()\n    {\n\t    TeamsData = new Dictionary<Team, List<TeamData>>();\n\t    ", "    private void InitTeams()\n    {\n\t    TeamsData = new Dictionary<Team, List<TeamData>>();\n\t    \n\t    foreach (var teamData in teamsData)\n\t    {\n\t\t    if (!TeamsData.ContainsKey(teamData.Team))\n\t\t    {\n\t\t\t    TeamsData.Add(teamData.Team, new List<TeamData>());\n\t\t    }\n\t\t    TeamsData[teamData.Team].Add(teamData);\n\t    }\n    }\n    \n    /// <summary>\n    /// Storing values on dictionary first to have a better usage\n    /// </summary>", "    private void InitSpawnPoints()\n    {\n\t    TeamsSpawnPoints = new Dictionary<Team, Vector3[]>();\n\n\t    foreach (var spawnData in teamsSpawnData)\n        {\n\t        var spawnPoints = new Vector3[9];\n\t        if (spawnData.spawnTransforms.Length != 9)\n\t        {\n#if UNITY_EDITOR\n\t\t        Debug.LogError(\"Team Spawn Transform Count Must Be 9\");\n#endif\n\t        }", "\t        for (int i = 0; i < 9; i++)\n\t        {\n\t\t        var spawnTransform = spawnData.spawnTransforms[i];\n\t\t        spawnPoints[i] = new Vector3(spawnTransform.position.x, 1f, spawnTransform.position.z);\n\t        }\n\t        TeamsSpawnPoints.Add(spawnData.team, spawnPoints);\n        }\n    }\n}\n"]}
{"filename": "Assets/Scripts/EndGameChecker.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Burst;\nusing Unity.Collections;\nusing Unity.Entities;\nusing UnityEngine;\n\n/// <summary>\n/// Basically checks for end game scenarios. \n/// It need to be MonoBehaviour not system because of the draw scenarios.\n/// When Draw scenario happens, system updates automatically shuts down", "/// It need to be MonoBehaviour not system because of the draw scenarios.\n/// When Draw scenario happens, system updates automatically shuts down\n/// And we can pre-know if there is no entity left\n/// </summary>\npublic class EndGameChecker : MonoBehaviour\n{\n\tprivate bool _checkForDraw = false;\n\tprivate void Awake()\n\t{\n\t\tSignUpEvents();\n\t}\n", "\tprivate void SignUpEvents()\n\t{\n\t\tGameManager.GameStarted += OnGameStarted;\n\t\tGameManager.GameReloaded += OnGameReloaded;\n\t\tGameManager.GameLost += OnGameLost;\n\t\tGameManager.GameWon += OnGameWon;\n\t\tGameManager.GameDraw += OnGameDraw;\n\t}\n\n\t[BurstCompile]\n\tprivate void Update()\n\t{", "\tprivate void Update()\n\t{\n\t\tif (!_checkForDraw)\n\t\t{\n\t\t\treturn;\n\t\t}\n        \n\t\tvar entityManager = World.DefaultGameObjectInjectionWorld.EntityManager;\n\t\tvar entities= entityManager.CreateEntityQuery(typeof(TeamComponent)).ToEntityArray(Allocator.Temp);\n\t\tif (entities.Length <= 0)\n\t\t{\n\t\t\tGameManager.RaiseGameDraw();\n\t\t\treturn;\n\t\t}\n\t\tint blueTeamCount = 0;\n\t\tint redTeamCount = 0;", "\t\tif (entities.Length <= 0)\n\t\t{\n\t\t\tGameManager.RaiseGameDraw();\n\t\t\treturn;\n\t\t}\n\t\tint blueTeamCount = 0;\n\t\tint redTeamCount = 0;\n\t\tforeach (var entity in entities)\n\t\t{\n\t\t\tvar teamComponent = entityManager.GetComponentData<TeamComponent>(entity);\n\t\t\tif (teamComponent.value.Equals(Team.Blue))\n\t\t\t{\n\t\t\t\tblueTeamCount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tredTeamCount++;\n\t\t\t}\n\t\t}", "\t\t\tif (teamComponent.value.Equals(Team.Blue))\n\t\t\t{\n\t\t\t\tblueTeamCount++;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tredTeamCount++;\n\t\t\t}\n\t\t}\n\t\tif (blueTeamCount == 0)\n\t\t{\n\t\t\tGameManager.RaiseGameLost();\n\t\t}", "\t\tif (blueTeamCount == 0)\n\t\t{\n\t\t\tGameManager.RaiseGameLost();\n\t\t}\n\t\telse if(redTeamCount == 0)\n\t\t{\n\t\t\tGameManager.RaiseGameWon();\n\t\t}\n\t}\n\n\tprivate void OnGameDraw()\n\t{\n\t\t_checkForDraw = false;\n\t}\n\t", "\tprivate void OnGameDraw()\n\t{\n\t\t_checkForDraw = false;\n\t}\n\t\n\tprivate void OnGameWon()\n\t{\n\t\t_checkForDraw = false;\n\t}\n\t\n\tprivate void OnGameLost()\n\t{\n\t\t_checkForDraw = false;\n\t}\n\t", "\tprivate void OnGameLost()\n\t{\n\t\t_checkForDraw = false;\n\t}\n\t\n\tprivate void OnGameReloaded()\n\t{\n\t\t_checkForDraw = false;\n\t}\n\n\tprivate void OnGameStarted()\n\t{\n\t\t_checkForDraw = true;\n\t}\n}\n", "\tprivate void OnGameStarted()\n\t{\n\t\t_checkForDraw = true;\n\t}\n}\n"]}
{"filename": "Assets/Scripts/PlatformController.cs", "chunked_list": ["using UnityEngine;\n\n/// <summary>\n/// To control starting platform of teams. Just for polish.\n/// </summary>\npublic class PlatformController : MonoBehaviour\n{\n\t[SerializeField] private GameObject[] teamsPlatforms;\n\t\n\tprivate void Awake()\n\t{\n\t\tSignUpEvents();\n\t}\n", "\tprivate void Awake()\n\t{\n\t\tSignUpEvents();\n\t}\n\n\tprivate void SignUpEvents()\n\t{\n\t\tGameManager.GameStarted += OnGameStarted;\n\t\tGameManager.GameReloaded += OnGameReloaded;\n\t}\n\t", "\tprivate void OnGameReloaded()\n\t{\n\t\tforeach (var teamsPlatform in teamsPlatforms)\n\t\t{\n\t\t\tteamsPlatform.SetActive(true);\n\t\t}\n\t}\n\n\tprivate void OnGameStarted()\n\t{\n\t\tforeach (var teamsPlatform in teamsPlatforms)\n\t\t{\n\t\t\tteamsPlatform.SetActive(false);\n\t\t}\n\t}\n}", "\tprivate void OnGameStarted()\n\t{\n\t\tforeach (var teamsPlatform in teamsPlatforms)\n\t\t{\n\t\t\tteamsPlatform.SetActive(false);\n\t\t}\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/AuthoringAndInitializers/HealthDisplayAuthoring.cs", "chunked_list": ["using Unity.Entities;\nusing UnityEngine;\nnamespace ECS.AuthoringAndInitializers\n{\n\t/// <summary>\n\t/// Converts TextMesh game objects to entities. \n\t/// </summary>\n\tpublic class HealthDisplayAuthoring : MonoBehaviour, IConvertGameObjectToEntity\n\t{\n\t\tpublic void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n\t\t{\n\t\t\tvar textMesh = gameObject.GetComponent<TextMesh>();\n\t\t\tdstManager.AddComponentObject(entity, textMesh);\n\t\t}\n\t}\n}\n", "\t\tpublic void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem)\n\t\t{\n\t\t\tvar textMesh = gameObject.GetComponent<TextMesh>();\n\t\t\tdstManager.AddComponentObject(entity, textMesh);\n\t\t}\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/AuthoringAndInitializers/UnitInitializer.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing Unity.Transforms;\nnamespace ECS.AuthoringAndInitializers\n{\n\t/// <summary>\n\t/// Inits Unit entities component data\n\t/// </summary>\n\tpublic static class UnitInitializer\n\t{\n\t\tpublic static void Init(ref Entity entity, ref EntityCommandBuffer ecb, ref UnitData data)\n\t\t{\n\t\t\tecb.AddComponent<LocalToWorld>(entity);\n\t\t\t\n\t\t\tecb.AddComponent(entity, new Translation { Value = data.Position });\n\t\t\t\n\t\t\tecb.AddComponent(entity, new DisplayComponent()\n\t\t\t{\n\t\t\t\tvalue = data.DisplayEntity\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new HealthComponent()\n\t\t\t{\n\t\t\t\tcurrentHealth = data.Health\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new AttackDamageComponent()\n\t\t\t{\n\t\t\t\tvalue = data.AttackDamage\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new AttackRangeComponent()\n\t\t\t{\n\t\t\t\tvalue = data.AttackRange\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new AttackCooldownComponent()\n\t\t\t{\n\t\t\t\tvalue = data.AttackCooldown,\n\t\t\t\tremainingTime = data.AttackCooldown\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new MovementSpeedComponent()\n\t\t\t{\n\t\t\t\tvalue = data.MovementSpeed\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new TeamComponent()\n\t\t\t{\n\t\t\t\tvalue = data.Team\n\t\t\t});\n\n\t\t\tecb.AddComponent(entity, new TargetComponent());\n\t\t}\n\t}\n}\n", "\tpublic static class UnitInitializer\n\t{\n\t\tpublic static void Init(ref Entity entity, ref EntityCommandBuffer ecb, ref UnitData data)\n\t\t{\n\t\t\tecb.AddComponent<LocalToWorld>(entity);\n\t\t\t\n\t\t\tecb.AddComponent(entity, new Translation { Value = data.Position });\n\t\t\t\n\t\t\tecb.AddComponent(entity, new DisplayComponent()\n\t\t\t{\n\t\t\t\tvalue = data.DisplayEntity\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new HealthComponent()\n\t\t\t{\n\t\t\t\tcurrentHealth = data.Health\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new AttackDamageComponent()\n\t\t\t{\n\t\t\t\tvalue = data.AttackDamage\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new AttackRangeComponent()\n\t\t\t{\n\t\t\t\tvalue = data.AttackRange\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new AttackCooldownComponent()\n\t\t\t{\n\t\t\t\tvalue = data.AttackCooldown,\n\t\t\t\tremainingTime = data.AttackCooldown\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new MovementSpeedComponent()\n\t\t\t{\n\t\t\t\tvalue = data.MovementSpeed\n\t\t\t});\n\t\t\t\n\t\t\tecb.AddComponent(entity, new TeamComponent()\n\t\t\t{\n\t\t\t\tvalue = data.Team\n\t\t\t});\n\n\t\t\tecb.AddComponent(entity, new TargetComponent());\n\t\t}\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/AuthoringAndInitializers/HealthDisplayInitializer.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nusing UnityEngine;\nnamespace ECS.AuthoringAndInitializers\n{\n\t/// <summary>\n\t/// Inits TextMesh entities component data\n\t/// </summary>\n\tpublic static class HealthDisplayInitializer\n\t{", "\t/// Inits TextMesh entities component data\n\t/// </summary>\n\tpublic static class HealthDisplayInitializer\n\t{\n\t\tpublic static void Init(ref Entity entity, ref Entity targetEntity, ref EntityCommandBuffer ecb)\n\t\t{\n\t\t\tecb.AddComponent(entity, new DisplayParentComponent() { value = targetEntity});\n\t\t\tecb.AddComponent(entity, new Parent(){Value = targetEntity});\n\t\t\tecb.AddComponent<LocalToParent>(entity);\n\t\t\tecb.AddComponent<LocalToWorld>(entity);\n\t\t\tecb.SetComponent(entity, new Translation() { Value = new float3(0f, 1.1f, 0f)});\n\t\t\tecb.AddComponent(entity, new Rotation() {Value = Quaternion.Euler(new Vector3(90f, 0f, 0f))});\n\t\t}\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/HealthComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t[Serializable]\n\tpublic struct HealthComponent : IComponentData\n\t{\n\t\tpublic int currentHealth;\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/MovementSpeedComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t[Serializable]\n\tpublic struct MovementSpeedComponent : IComponentData\n\t{\n\t\tpublic float value;\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/AttackRangeComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t[Serializable]\n\tpublic struct AttackRangeComponent : IComponentData\n\t{\n\t\tpublic float value;\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/AttackDamageComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t[Serializable]\n\tpublic struct AttackDamageComponent : IComponentData\n\t{\n\t\tpublic float value;\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/TeamComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t[Serializable]\n\tpublic enum Team\n\t{\n\t\tBlue,\n\t\tRed\n\t}\n\t\n\t[Serializable]", "\tpublic struct TeamComponent : IComponentData\n\t{\n\t\tpublic Team value;\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/AttackCooldownComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t/// <summary>\n\t/// Controls delay of the attacks \n\t/// </summary>\n\t[Serializable]\n\tpublic struct AttackCooldownComponent : IComponentData\n\t{\n\t\tpublic float value;", "\tpublic struct AttackCooldownComponent : IComponentData\n\t{\n\t\tpublic float value;\n\t\tpublic float remainingTime;\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/DisplayComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t/// <summary>\n\t/// A Unit component to hold TextMesh entity\n\t/// </summary>\n\t[Serializable]\n\tpublic struct DisplayComponent : IComponentData\n\t{\n\t\tpublic Entity value;\n\t}\n}\n", "\tpublic struct DisplayComponent : IComponentData\n\t{\n\t\tpublic Entity value;\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/TargetComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t/// <summary>\n\t/// Unit component to hold target entity\n\t/// </summary>\n\t[Serializable]\n\tpublic struct TargetComponent : IComponentData\n\t{\n\t\tpublic Entity value;\n\t}\n}", "\tpublic struct TargetComponent : IComponentData\n\t{\n\t\tpublic Entity value;\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/ComponentsAndTags/DisplayParentComponent.cs", "chunked_list": ["\ufeffusing System;\nusing Unity.Entities;\nnamespace ECS.ComponentsAndTags\n{\n\t/// <summary>\n\t/// TextMesh entity component to hold parent unit\n\t/// </summary>\n\t[Serializable]\n\tpublic struct DisplayParentComponent : IComponentData\n\t{\n\t\tpublic Entity value;\n\t}\n}\n", "\tpublic struct DisplayParentComponent : IComponentData\n\t{\n\t\tpublic Entity value;\n\t}\n}\n"]}
{"filename": "Assets/Scripts/ECS/Systems/MovementSystem.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nnamespace ECS.Systems\n{\n\t/// <summary>\n\t/// After AssignTargetSystems starts working this systems move units to their targets. \n\t/// </summary>", "\t/// After AssignTargetSystems starts working this systems move units to their targets. \n\t/// </summary>\n\t[UpdateAfter(typeof(ECS.Systems.AssignTargetSystem))]\n\tpublic partial class MovementSystem : SystemBase\n\t{\n\t\tEndSimulationEntityCommandBufferSystem _endSimulationEcbSystem;\n\n\t\tprotected override void OnCreate()\n\t\t{\n\t\t\tbase.OnCreate();\n\t\t\tEnabled = false;\n\t\t\t_endSimulationEcbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();\n\t\t\tGameManager.GameStarted += OnGameStarted;\n\t\t\tGameManager.GameReloaded += OnGameReloaded;\n\t\t}", "\t\tprivate void OnGameReloaded()\n\t\t{\n\t\t\tEnabled = false;\n\t\t}\n\n\t\tprivate void OnGameStarted()\n\t\t{\n\t\t\tEnabled = true;\n\t\t}\n\t\t\n\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tvar ecb = _endSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n\t\t\tfloat deltaTime = Time.DeltaTime;\n\n\t\t\tvar entities = EntityManager.GetAllEntities(Allocator.TempJob);\n\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, in Translation position, in MovementSpeedComponent movementSpeed, in TargetComponent target, in AttackRangeComponent attackRange) =>\n\t\t\t\t{\n\t\t\t\t\t//Check if entity exist, different way to check if target entity is valid", "\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tvar ecb = _endSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n\t\t\tfloat deltaTime = Time.DeltaTime;\n\n\t\t\tvar entities = EntityManager.GetAllEntities(Allocator.TempJob);\n\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, in Translation position, in MovementSpeedComponent movementSpeed, in TargetComponent target, in AttackRangeComponent attackRange) =>\n\t\t\t\t{\n\t\t\t\t\t//Check if entity exist, different way to check if target entity is valid", "\t\t\t\t\tif (!entities.Contains(target.value) || !HasComponent<Translation>(target.value))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//Check target units distance, if close stop\n\t\t\t\t\tfloat3 targetPosition = GetComponent<Translation>(target.value).Value;\n\t\t\t\t\ttargetPosition.y = position.Value.y;\n\t\t\t\t\tif (math.distance(targetPosition, position.Value) <= attackRange.value)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// If target unit is not in range, move to target\n\t\t\t\t\tfloat3 direction = math.normalize(targetPosition - position.Value);\n\t\t\t\t\tecb.SetComponent(entityInQueryIndex, entity, new Translation()\n\t\t\t\t\t{\n\t\t\t\t\t\tValue = position.Value +  direction * movementSpeed.value * deltaTime\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}).ScheduleParallel();\n\t\t\t_endSimulationEcbSystem.AddJobHandleForProducer(Dependency);\n\t\t}\n\t}\n}", "\t\t\t\t\tif (math.distance(targetPosition, position.Value) <= attackRange.value)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// If target unit is not in range, move to target\n\t\t\t\t\tfloat3 direction = math.normalize(targetPosition - position.Value);\n\t\t\t\t\tecb.SetComponent(entityInQueryIndex, entity, new Translation()\n\t\t\t\t\t{\n\t\t\t\t\t\tValue = position.Value +  direction * movementSpeed.value * deltaTime\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t}).ScheduleParallel();\n\t\t\t_endSimulationEcbSystem.AddJobHandleForProducer(Dependency);\n\t\t}\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/Systems/AssignTargetSystem.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Collections;\nusing Unity.Entities;\nusing Unity.Mathematics;\nnamespace ECS.Systems\n{\n\t/// <summary>\n\t/// This system matches random rival units\n\t/// </summary>\n\t[UpdateAfter(typeof(InitializeUnitsSystem))]\n\tpublic partial class AssignTargetSystem : SystemBase\n\t{", "\t/// </summary>\n\t[UpdateAfter(typeof(InitializeUnitsSystem))]\n\tpublic partial class AssignTargetSystem : SystemBase\n\t{\n\t\tprotected override void OnCreate()\n\t\t{\n\t\t\tbase.OnCreate();\n\t\t\tEnabled = false;\n\t\t\tGameManager.GameStarted += OnGameStarted;\n\t\t\tGameManager.GameReloaded += OnGameReloaded;\n\t\t}\n\t\t", "\t\tprivate void OnGameReloaded()\n\t\t{\n\t\t\tEnabled = false;\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Before the game start we don't this system to match any unit\n\t\t/// </summary>\n\t\tprivate void OnGameStarted()\n\t\t{\n\t\t\tEnabled = true;\n\t\t}\n", "\t\tprivate void OnGameStarted()\n\t\t{\n\t\t\tEnabled = true;\n\t\t}\n\n\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tvar random = new Random((uint)UnityEngine.Random.Range(1, int.MaxValue));\n\t\t\t\n\t\t\tEntityQuery query = EntityManager.CreateEntityQuery(typeof(TeamComponent));\n\t\t\tNativeArray<Entity> entities = query.ToEntityArray(Allocator.TempJob);\n\t\t\t\n\t\t\t// Create a NativeList to store entities with a specific component\n\t\t\t// This doesn't need to be parallel\n\t\t\tvar redUnits = new NativeList<Entity>(Allocator.TempJob);\n\t\t\tvar blueUnits = new NativeList<Entity>(Allocator.TempJob);\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, in TeamComponent teamComponent) =>\n\t\t\t\t{\n\t\t\t\t\tswitch (teamComponent.value)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase Team.Blue:\n\t\t\t\t\t\t\tblueUnits.Add(entity);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Team.Red:\n\t\t\t\t\t\t\tredUnits.Add(entity);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}).Run();\n\n\t\t\t// Using async programming to handle random unit match\n\t\t\tEntities\n\t\t\t\t.WithAll<TargetComponent>()\n\t\t\t\t.WithAll<TeamComponent>()\n\t\t\t\t.WithReadOnly(redUnits)\n\t\t\t\t.WithReadOnly(blueUnits)\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, ref TargetComponent target, in TeamComponent team) =>\n\t\t\t\t{", "\t\t\t\t\tif (entities.Contains(target.value))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tint targetCount;\n\t\t\t\t\tint randomIndex;\n\t\t\t\t\tswitch (team.value)\n\t\t\t\t\t{\n\t\t\t\t\t\tcase Team.Blue:\n\t\t\t\t\t\t\tif (redUnits.Length <= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttargetCount = redUnits.Length;\n\t\t\t\t\t\t\trandomIndex = random.NextInt(0, targetCount);\n\t\t\t\t\t\t\ttarget.value = redUnits[randomIndex];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Team.Red:", "\t\t\t\t\t\t\tif (redUnits.Length <= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttargetCount = redUnits.Length;\n\t\t\t\t\t\t\trandomIndex = random.NextInt(0, targetCount);\n\t\t\t\t\t\t\ttarget.value = redUnits[randomIndex];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Team.Red:\n\t\t\t\t\t\t\tif (blueUnits.Length <= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttargetCount = blueUnits.Length;\n\t\t\t\t\t\t\trandomIndex = random.NextInt(0, targetCount);\n\t\t\t\t\t\t\ttarget.value = blueUnits[randomIndex];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}).ScheduleParallel();\n\t\t}\n\t}\n}", "\t\t\t\t\t\t\tif (blueUnits.Length <= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttargetCount = blueUnits.Length;\n\t\t\t\t\t\t\trandomIndex = random.NextInt(0, targetCount);\n\t\t\t\t\t\t\ttarget.value = blueUnits[randomIndex];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}).ScheduleParallel();\n\t\t}\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/Systems/UpdateHealthDisplaySystem.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing UnityEngine;\nnamespace ECS.Systems\n{\n\t/// <summary>\n\t/// Updated health texts of units\n\t/// </summary>\n\t[UpdateAfter(typeof(InitializeUnitsSystem))]\n\tpublic partial class UpdateHealthDisplaySystem : SystemBase\n\t{", "\t[UpdateAfter(typeof(InitializeUnitsSystem))]\n\tpublic partial class UpdateHealthDisplaySystem : SystemBase\n\t{\n\t\tprivate EndSimulationEntityCommandBufferSystem _endSimulationEcbSystem;\n\n\t\tprotected override void OnCreate()\n\t\t{\n\t\t\tbase.OnCreate();\n\t\t\t_endSimulationEcbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();\n\t\t}\n\t\t", "\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\t// This is not performant,\n\t\t\t// We are not event using BursCompiler\n\t\t\t// This is simply a basic for loop but...\n\t\t\t// If you wanna use TextMesh, we can't have parallel programming\n\t\t\t// at least for this part.\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, TextMesh textMesh, in DisplayParentComponent parent) =>\n\t\t\t\t{\n\t\t\t\t\ttextMesh.text = EntityManager.GetComponentData<HealthComponent>(parent.value).currentHealth.ToString();\n\t\t\t\t})\n\t\t\t\t.WithoutBurst()\n\t\t\t\t.Run();\n\t\t}\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/Systems/InitializeUnitsSystem.cs", "chunked_list": ["\ufeffusing ECS.AuthoringAndInitializers;\nusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing UnityEngine;\nnamespace ECS.Systems\n{\n\t/// <summary>\n\t/// This is the core system. Other systems waits for this system.\n\t/// This systems generates Entities and Destroys Them.", "\t/// This is the core system. Other systems waits for this system.\n\t/// This systems generates Entities and Destroys Them.\n\t/// </summary>\n\tpublic partial class InitializeUnitsSystem : SystemBase\n\t{\n\t\tprivate EntityCommandBufferSystem _ecbSystem;\n\n\t\tprotected override void OnCreate()\n\t\t{\n\t\t\tbase.OnCreate();\n\t\t\t_ecbSystem = World.GetOrCreateSystem<EndInitializationEntityCommandBufferSystem>();\n\t\t\tPrefabsToEntityConverter.PrefabsConverted += OnPrefabsConverted;\n\t\t\tTeamButton.TeamButtonClicked += OnTeamButtonClicked;\n\t\t\tGameManager.GameReloaded += OnGameReloaded;\n\t\t}\n", "\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\t\n\t\t}\n\n\t\tprivate void OnGameReloaded()\n\t\t{\n\t\t\tDestroyUnits();\n\t\t\tOnPrefabsConverted();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Destroys All Unit entities with their health text entities\n\t\t/// </summary>", "\t\tprivate void DestroyUnits()\n\t\t{\n\t\t\tvar ecb = _ecbSystem.CreateCommandBuffer();\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, in TeamComponent team, in DisplayComponent display) =>\n\t\t\t\t{\n\t\t\t\t\tecb.DestroyEntity(entity);\n\t\t\t\t\tecb.DestroyEntity(display.value);\n\t\t\t\t}).WithoutBurst().Run();\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// Destroy specified team, I used this to change teams when I clicked team buttons\n\t\t/// </summary>", "\t\tprivate void DestroyTeam(Team targetTeam)\n\t\t{\n\t\t\tvar ecb = _ecbSystem.CreateCommandBuffer();\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, in TeamComponent team, in DisplayComponent display) =>\n\t\t\t\t{\n\t\t\t\t\tif (team.value.Equals(targetTeam))\n\t\t\t\t\t{\n\t\t\t\t\t\tecb.DestroyEntity(entity);\n\t\t\t\t\t\tecb.DestroyEntity(display.value);\n\t\t\t\t\t}\n\t\t\t\t}).WithoutBurst().Run();\n\t\t}\n\t\t", "\t\tprivate void OnTeamButtonClicked(TeamData teamData)\n\t\t{\n\t\t\tDestroyTeam(teamData.Team);\n\t\t\tInstantiateTeam(teamData);\n\t\t}\n\n\t\tprivate void InstantiateTeam(TeamData teamData)\n\t\t{\n\t\t\tvar ecb = _ecbSystem.CreateCommandBuffer();\n\n\t\t\tvar instantiationEntity = PrefabsToEntityConverter.TeamsEntityDic[teamData.Team];\n\t\t\tvar slotIndexUnitDic = teamData.GetSlotIndexUnitDic();", "\t\t\tfor (int i = 0; i < DataManager.TeamsSpawnPoints[teamData.Team].Length; i++)\n\t\t\t{\n\t\t\t\t// Check if slot acquired\n\t\t\t\tif (!slotIndexUnitDic.ContainsKey(i))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar unitData = slotIndexUnitDic[i];\n\t\t\t\tunitData.Position = DataManager.TeamsSpawnPoints[teamData.Team][i];\n\t\t\t\tEntity unit = ecb.Instantiate(instantiationEntity);\n\t\t\t\tEntity unitHealthDisplay = ecb.Instantiate(PrefabsToEntityConverter.UnitHealthDisplay);\n\t\t\t\tunitData.DisplayEntity = unitHealthDisplay;\n\t\t\t\t\n\t\t\t\tUnitInitializer.Init(ref unit, ref ecb, ref unitData);\n\t\t\t\tHealthDisplayInitializer.Init(ref unitHealthDisplay, ref unit, ref ecb);\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t/// <summary>\n\t\t/// When games starts, after prefab entities instantiated\n\t\t/// Creates default(first) teams.\n\t\t/// </summary>", "\t\tprivate void OnPrefabsConverted()\n\t\t{\n\t\t\tforeach (var tEntity in PrefabsToEntityConverter.TeamsEntityDic)\n\t\t\t{\n\t\t\t\tvar team = tEntity.Key;\n\t\t\t\tvar teamData = DataManager.TeamsData[team][0];\n\t\t\t\tInstantiateTeam(teamData);\n\t\t\t}\n\t\t}\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/Systems/AttackSystem.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nusing Unity.Mathematics;\nusing Unity.Transforms;\nnamespace ECS.Systems\n{\n\t/// <summary>\n\t/// This systems handles units attacks\n\t/// </summary>\n\t[UpdateAfter(typeof(MovementSystem))]\n\tpublic partial class AttackSystem : SystemBase\n\t{", "\t/// </summary>\n\t[UpdateAfter(typeof(MovementSystem))]\n\tpublic partial class AttackSystem : SystemBase\n\t{\n\t\tprivate EndSimulationEntityCommandBufferSystem _endSimulationEcbSystem;\n\n\t\tprotected override void OnCreate()\n\t\t{\n\t\t\tbase.OnCreate();\n\t\t\tEnabled = false;\n\t\t\t_endSimulationEcbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();\n\t\t\tGameManager.GameStarted += OnGameStarted;\n\t\t\tGameManager.GameReloaded += OnGameReloaded;\n\t\t}\n\t\t", "\t\tprivate void OnGameReloaded()\n\t\t{\n\t\t\tEnabled = false;\n\t\t}\n\t\t\n\t\tprivate void OnGameStarted()\n\t\t{\n\t\t\tEnabled = true;\n\t\t}\n\n\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tfloat deltaTime = Time.DeltaTime;\n\t\t\t//Creating a buffer to handle multi threading\n\t\t\tvar ecb = _endSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n\t\t\t\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, ref AttackCooldownComponent attackCooldown, in TargetComponent target, in AttackRangeComponent attackRange, in AttackDamageComponent attackDamage) =>\n\t\t\t\t{\n\t\t\t\t\t//Basically checking if the target entity is an active Unit,\n\t\t\t\t\t//I used different approaches through of the project.", "\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tfloat deltaTime = Time.DeltaTime;\n\t\t\t//Creating a buffer to handle multi threading\n\t\t\tvar ecb = _endSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n\t\t\t\n\t\t\tEntities\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, ref AttackCooldownComponent attackCooldown, in TargetComponent target, in AttackRangeComponent attackRange, in AttackDamageComponent attackDamage) =>\n\t\t\t\t{\n\t\t\t\t\t//Basically checking if the target entity is an active Unit,\n\t\t\t\t\t//I used different approaches through of the project.", "\t\t\t\t\tif (HasComponent<Translation>(target.value) && HasComponent<HealthComponent>(target.value))\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat3 targetPosition = GetComponent<Translation>(target.value).Value;\n\t\t\t\t\t\tfloat distanceToTarget = math.distance(GetComponent<Translation>(entity).Value, targetPosition);\n\n\t\t\t\t\t\t//Check if target in range\n\t\t\t\t\t\tif (distanceToTarget <= attackRange.value)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tattackCooldown.remainingTime-= deltaTime;\n\n\t\t\t\t\t\t\t//Check if attack cooldown is zero", "\t\t\t\t\t\t\tif (attackCooldown.remainingTime <= 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tattackCooldown.remainingTime = attackCooldown.value;\n\t\t\t\t\t\t\t\tint newHealth = (int)(GetComponent<HealthComponent>(target.value).currentHealth - attackDamage.value);\n\t\t\t\t\t\t\t\tecb.SetComponent(entityInQueryIndex, target.value, new HealthComponent { currentHealth = newHealth });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}).ScheduleParallel();\n\n\t\t\t_endSimulationEcbSystem.AddJobHandleForProducer(Dependency);\n\t\t}\n\t}\n}"]}
{"filename": "Assets/Scripts/ECS/Systems/DeathSystem.cs", "chunked_list": ["\ufeffusing ECS.ComponentsAndTags;\nusing Unity.Entities;\nnamespace ECS.Systems\n{\n\t/// <summary>\n\t/// This systems checks if an entities hp below or equal zero to destroy it.\n\t/// </summary>\n\t[UpdateAfter(typeof(ECS.Systems.AttackSystem))]\n\tpublic partial class DeathSystem : SystemBase\n\t{\n\t\tprivate EndSimulationEntityCommandBufferSystem _endSimulationEcbSystem;\n", "\tpublic partial class DeathSystem : SystemBase\n\t{\n\t\tprivate EndSimulationEntityCommandBufferSystem _endSimulationEcbSystem;\n\n\t\tprotected override void OnCreate()\n\t\t{\n\t\t\tbase.OnCreate();\n\t\t\tEnabled = false;\n\t\t\t_endSimulationEcbSystem = World.GetOrCreateSystem<EndSimulationEntityCommandBufferSystem>();\n\t\t\tGameManager.GameStarted += OnGameStarted;\n\t\t\tGameManager.GameReloaded += OnGameReloaded;\n\t\t}\n\t\t", "\t\tprivate void OnGameReloaded()\n\t\t{\n\t\t\tEnabled = false;\n\t\t}\n\t\t\n\t\tprivate void OnGameStarted()\n\t\t{\n\t\t\tEnabled = true;\n\t\t}\n\n\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tvar ecb = _endSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n\n\t\t\tEntities\n\t\t\t\t.WithAll<HealthComponent>()\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, in HealthComponent health, in DisplayComponent display) =>\n\t\t\t\t{", "\t\tprotected override void OnUpdate()\n\t\t{\n\t\t\tvar ecb = _endSimulationEcbSystem.CreateCommandBuffer().AsParallelWriter();\n\n\t\t\tEntities\n\t\t\t\t.WithAll<HealthComponent>()\n\t\t\t\t.ForEach((Entity entity, int entityInQueryIndex, in HealthComponent health, in DisplayComponent display) =>\n\t\t\t\t{\n\t\t\t\t\tif (health.currentHealth <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tecb.DestroyEntity(entityInQueryIndex, entity);\n\t\t\t\t\t\t// Destroying Health Text also\n\t\t\t\t\t\tecb.DestroyEntity(display.value.Index, display.value);\n\t\t\t\t\t}\n\t\t\t\t}).ScheduleParallel();\n\n\t\t\t_endSimulationEcbSystem.AddJobHandleForProducer(Dependency);\n\t\t}\n\t}\n}", "\t\t\t\t\tif (health.currentHealth <= 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tecb.DestroyEntity(entityInQueryIndex, entity);\n\t\t\t\t\t\t// Destroying Health Text also\n\t\t\t\t\t\tecb.DestroyEntity(display.value.Index, display.value);\n\t\t\t\t\t}\n\t\t\t\t}).ScheduleParallel();\n\n\t\t\t_endSimulationEcbSystem.AddJobHandleForProducer(Dependency);\n\t\t}\n\t}\n}"]}
