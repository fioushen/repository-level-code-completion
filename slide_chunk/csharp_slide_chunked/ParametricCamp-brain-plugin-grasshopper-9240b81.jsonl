{"filename": "src/brain_ghpluginInfo.cs", "chunked_list": ["\ufeffusing Grasshopper;\nusing Grasshopper.Kernel;\nusing System;\nusing System.Drawing;\n\nnamespace Brain\n{\n    public class brain_ghpluginInfo : GH_AssemblyInfo\n    {\n        public override string Name => \"brain_ghplugin\";\n\n        //Return a 24x24 pixel bitmap to represent this GHA library.", "        public override string Name => \"brain_ghplugin\";\n\n        //Return a 24x24 pixel bitmap to represent this GHA library.\n        public override Bitmap Icon => null;\n\n        //Return a short string describing the purpose of this GHA library.\n        public override string Description => \"\";\n\n        public override Guid Id => new Guid(\"AC0D367B-B469-4920-A3CB-3DE02C5D2170\");\n\n        //Return a string identifying you or your company.", "        public override Guid Id => new Guid(\"AC0D367B-B469-4920-A3CB-3DE02C5D2170\");\n\n        //Return a string identifying you or your company.\n        public override string AuthorName => \"\";\n\n        //Return a string representing your preferred contact details.\n        public override string AuthorContact => \"\";\n    }\n}"]}
{"filename": "src/brain_ghpluginComponent.cs", "chunked_list": ["using Grasshopper;\nusing Grasshopper.Kernel;\nusing Rhino.Geometry;\nusing System;\nusing System.Collections.Generic;\n\nnamespace Brain\n{\n    public class brain_ghpluginComponent : GH_Component\n    {\n        /// <summary>\n        /// Each implementation of GH_Component must provide a public \n        /// constructor without any arguments.\n        /// Category represents the Tab in which the component will appear, \n        /// Subcategory the panel. If you use non-existing tab or panel names, \n        /// new tabs/panels will automatically be created.\n        /// </summary>\n        public brain_ghpluginComponent()\n          : base(\"brain_ghplugin\", \"ASpi\",\n            \"Construct an Archimedean, or arithmetic, spiral given its radii and number of turns.\",\n            \"Brain\", \"Testing\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "    public class brain_ghpluginComponent : GH_Component\n    {\n        /// <summary>\n        /// Each implementation of GH_Component must provide a public \n        /// constructor without any arguments.\n        /// Category represents the Tab in which the component will appear, \n        /// Subcategory the panel. If you use non-existing tab or panel names, \n        /// new tabs/panels will automatically be created.\n        /// </summary>\n        public brain_ghpluginComponent()\n          : base(\"brain_ghplugin\", \"ASpi\",\n            \"Construct an Archimedean, or arithmetic, spiral given its radii and number of turns.\",\n            \"Brain\", \"Testing\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)\n        {\n            // Use the pManager object to register your input parameters.\n            // You can often supply default values when creating parameters.\n            // All parameters must have the correct access type. If you want \n            // to import lists or trees of values, modify the ParamAccess flag.\n            pManager.AddPlaneParameter(\"Plane\", \"P\", \"Base plane for spiral\", GH_ParamAccess.item, Plane.WorldXY);\n            pManager.AddNumberParameter(\"Inner Radius\", \"R0\", \"Inner radius for spiral\", GH_ParamAccess.item, 1.0);\n            pManager.AddNumberParameter(\"Outer Radius\", \"R1\", \"Outer radius for spiral\", GH_ParamAccess.item, 10.0);\n            pManager.AddIntegerParameter(\"Turns\", \"T\", \"Number of turns between radii\", GH_ParamAccess.item, 10);\n\n            // If you want to change properties of certain parameters, \n            // you can use the pManager instance to access them by index:\n            //pManager[0].Optional = true;\n        }\n\n        /// <summary>\n        /// Registers all the output parameters for this component.\n        /// </summary>", "        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            // Use the pManager object to register your output parameters.\n            // Output parameters do not have default values, but they too must have the correct access type.\n            pManager.AddCurveParameter(\"Spiral\", \"S\", \"Spiral curve\", GH_ParamAccess.item);\n\n            // Sometimes you want to hide a specific parameter from the Rhino preview.\n            // You can use the HideParameter() method as a quick way:\n            //pManager.HideParameter(0);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object can be used to retrieve data from input parameters and \n        /// to store data in output parameters.</param>", "        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            // First, we need to retrieve all data from the input parameters.\n            // We'll start by declaring variables and assigning them starting values.\n            Plane plane = Plane.WorldXY;\n            double radius0 = 0.0;\n            double radius1 = 0.0;\n            int turns = 0;\n\n            // Then we need to access the input parameters individually. \n            // When data cannot be extracted from a parameter, we should abort this method.", "            if (!DA.GetData(0, ref plane)) return;\n            if (!DA.GetData(1, ref radius0)) return;\n            if (!DA.GetData(2, ref radius1)) return;\n            if (!DA.GetData(3, ref turns)) return;\n\n            // We should now validate the data and warn the user if invalid data is supplied.\n            if (radius0 < 0.0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Inner radius must be bigger than or equal to zero\");\n                return;\n            }", "            if (radius1 <= radius0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Outer radius must be bigger than the inner radius\");\n                return;\n            }\n            if (turns <= 0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Spiral turn count must be bigger than or equal to one\");\n                return;\n            }\n\n            // We're set to create the spiral now. To keep the size of the SolveInstance() method small, \n            // The actual functionality will be in a different method:\n            Curve spiral = CreateSpiral(plane, radius0, radius1, turns);\n\n            // Finally assign the spiral to the output parameter.\n            DA.SetData(0, spiral);\n        }\n", "        protected override void ExpireDownStreamObjects()\n        {\n            base.ExpireDownStreamObjects();\n        }\n\n        Curve CreateSpiral(Plane plane, double r0, double r1, Int32 turns)\n        {\n            Line l0 = new Line(plane.Origin + r0 * plane.XAxis, plane.Origin + r1 * plane.XAxis);\n            Line l1 = new Line(plane.Origin - r0 * plane.XAxis, plane.Origin - r1 * plane.XAxis);\n\n            Point3d[] p0;\n            Point3d[] p1;\n\n            l0.ToNurbsCurve().DivideByCount(turns, true, out p0);\n            l1.ToNurbsCurve().DivideByCount(turns, true, out p1);\n\n            PolyCurve spiral = new PolyCurve();\n", "            for (int i = 0; i < p0.Length - 1; i++)\n            {\n                Arc arc0 = new Arc(p0[i], plane.YAxis, p1[i + 1]);\n                Arc arc1 = new Arc(p1[i + 1], -plane.YAxis, p0[i + 1]);\n\n                spiral.Append(arc0);\n                spiral.Append(arc1);\n            }\n\n            return spiral;\n        }\n\n        /// <summary>\n        /// The Exposure property controls where in the panel a component icon \n        /// will appear. There are seven possible locations (primary to septenary), \n        /// each of which can be combined with the GH_Exposure.obscure flag, which \n        /// ensures the component will only be visible on panel dropdowns.\n        /// </summary>", "        public override GH_Exposure Exposure => GH_Exposure.primary;\n\n        /// <summary>\n        /// Provides an Icon for every component that will be visible in the User Interface.\n        /// Icons need to be 24x24 pixels.\n        /// You can add image files to your project resources and access them like this:\n        /// return Resources.IconForThisComponent;\n        /// </summary>\n        protected override System.Drawing.Bitmap Icon => null;\n\n        /// <summary>\n        /// Each component must have a unique Guid to identify it. \n        /// It is vital this Guid doesn't change otherwise old ghx files \n        /// that use the old ID will partially fail during loading.\n        /// </summary>", "        protected override System.Drawing.Bitmap Icon => null;\n\n        /// <summary>\n        /// Each component must have a unique Guid to identify it. \n        /// It is vital this Guid doesn't change otherwise old ghx files \n        /// that use the old ID will partially fail during loading.\n        /// </summary>\n        public override Guid ComponentGuid => new Guid(\"3955B89B-6187-4BA7-9B5E-06CE35AAE0D5\");\n    }\n}"]}
{"filename": "src/Templates/RequestStateEnum.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Brain.Templates\n{\n    public enum RequestState\n    {\n        Off,\n        Idle,\n        Requesting,\n        Done,\n        Error\n    };\n}\n", "    public enum RequestState\n    {\n        Off,\n        Idle,\n        Requesting,\n        Done,\n        Error\n    };\n}\n"]}
{"filename": "src/Templates/GH_Component_HTTPSync.cs", "chunked_list": ["\ufeffusing Grasshopper.Kernel;\nusing Rhino;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;", "using System.Threading.Tasks;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n\nnamespace Brain.Templates\n{\n    public abstract class GH_Component_HTTPSync : GH_Component\n    {\n        public GH_Component_HTTPSync(string name, string nickname, string description, string category, string subcategory)\n            : base(name, nickname, description, category, subcategory)\n        {\n        }\n        ", "        protected string POST(\n            string url,\n            string body,\n            string contentType,\n            string authorization,\n            int timeout)\n        {\n            try\n            {\n                // Compose the request\n                byte[] data = Encoding.ASCII.GetBytes(body);\n\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                request.Method = \"POST\";\n                request.ContentType = contentType;\n                request.ContentLength = data.Length;\n                request.Timeout = timeout;\n\n                // Handle authorization", "                if (authorization != null && authorization.Length > 0)\n                {\n                    System.Net.ServicePointManager.Expect100Continue = true;\n                    System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12; //the auth type\n\n                    request.PreAuthenticate = true;\n                    request.Headers.Add(\"Authorization\", authorization);\n                }\n                else\n                {\n                    request.Credentials = CredentialCache.DefaultCredentials;\n                }\n", "                using (var stream = request.GetRequestStream())\n                {\n                    stream.Write(data, 0, data.Length);\n                }\n                var res = request.GetResponse();\n                var response = new StreamReader(res.GetResponseStream()).ReadToEnd();\n                return response;\n            }\n            catch (Exception ex)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Something went wrong: \" + ex.Message);\n                return \"\";\n            }\n        }\n", "            catch (Exception ex)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Something went wrong: \" + ex.Message);\n                return \"\";\n            }\n        }\n\n        protected string GET(\n            string url,\n            string authorization,\n            int timeout)\n        {\n            try\n            {\n                // Compose the request\n                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                request.Method = \"GET\";\n                request.Timeout = timeout;\n\n                // Handle authorization", "                if (authorization != null && authorization.Length > 0)\n                {\n                    System.Net.ServicePointManager.Expect100Continue = true;\n                    System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12; //the auth type\n\n                    request.PreAuthenticate = true;\n                    request.Headers.Add(\"Authorization\", authorization);\n                }\n                else\n                {\n                    request.Credentials = CredentialCache.DefaultCredentials;\n                }\n\n                var res = request.GetResponse();\n                var response = new StreamReader(res.GetResponseStream()).ReadToEnd();\n\n                return response;\n            }", "            catch (Exception ex)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Something went wrong: \" + ex.Message);\n                return \"\";\n            }\n        }\n    }\n}\n"]}
{"filename": "src/Templates/GH_Component_HTTPAsync.cs", "chunked_list": ["\ufeffusing Grasshopper.Kernel;\nusing Rhino;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;", "using System.Threading.Tasks;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n\nnamespace Brain.Templates\n{\n    public abstract class GH_Component_HTTPAsync : GH_Component\n    {\n        protected string _response = \"\";\n        protected bool _shouldExpire = false;\n        protected RequestState _currentState = RequestState.Off;\n\n        public GH_Component_HTTPAsync(string name, string nickname, string description, string category, string subcategory)\n    : base(name, nickname, description, category, subcategory)\n        {\n        }\n", "        protected bool _shouldExpire = false;\n        protected RequestState _currentState = RequestState.Off;\n\n        public GH_Component_HTTPAsync(string name, string nickname, string description, string category, string subcategory)\n    : base(name, nickname, description, category, subcategory)\n        {\n        }\n\n        protected override void ExpireDownStreamObjects()\n        {\n            if (_shouldExpire)\n            {\n                base.ExpireDownStreamObjects();\n            }\n        }\n", "        protected override void ExpireDownStreamObjects()\n        {\n            if (_shouldExpire)\n            {\n                base.ExpireDownStreamObjects();\n            }\n        }\n\n        protected void POSTAsync(\n            string url,\n            string body,\n            string contentType,\n            string authorization,\n            int timeout)\n        {\n            Task.Run(() =>\n            {\n                try\n                {\n                    // Compose the request\n                    byte[] data = Encoding.ASCII.GetBytes(body);\n\n                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                    request.Method = \"POST\";\n                    request.ContentType = contentType;\n                    request.ContentLength = data.Length;\n                    request.Timeout = timeout;\n\n                    // Handle authorization", "        protected void POSTAsync(\n            string url,\n            string body,\n            string contentType,\n            string authorization,\n            int timeout)\n        {\n            Task.Run(() =>\n            {\n                try\n                {\n                    // Compose the request\n                    byte[] data = Encoding.ASCII.GetBytes(body);\n\n                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                    request.Method = \"POST\";\n                    request.ContentType = contentType;\n                    request.ContentLength = data.Length;\n                    request.Timeout = timeout;\n\n                    // Handle authorization", "                    if (authorization != null && authorization.Length > 0)\n                    {\n                        System.Net.ServicePointManager.Expect100Continue = true;\n                        System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12; //the auth type\n\n                        request.PreAuthenticate = true;\n                        request.Headers.Add(\"Authorization\", authorization);\n                    }\n                    else\n                    {\n                        request.Credentials = CredentialCache.DefaultCredentials;\n                    }\n", "                    using (var stream = request.GetRequestStream())\n                    {\n                        stream.Write(data, 0, data.Length);\n                    }\n                    var res = request.GetResponse();\n                    _response = new StreamReader(res.GetResponseStream()).ReadToEnd();\n\n                    _currentState = RequestState.Done;\n\n                    _shouldExpire = true;\n                    RhinoApp.InvokeOnUiThread((Action)delegate { ExpireSolution(true); });\n                }", "                catch (Exception ex)\n                {\n                    _response = ex.Message;\n\n                    _currentState = RequestState.Error;\n\n                    _shouldExpire = true;\n                    RhinoApp.InvokeOnUiThread((Action)delegate { ExpireSolution(true); });\n\n                    return;\n                }\n            });\n        }\n\n", "        protected void GETAsync(\n            string url,\n            string authorization,\n            int timeout)\n        {\n            Task.Run(() =>\n            {\n                try\n                {\n                    // Compose the request\n                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n                    request.Method = \"GET\";\n                    request.Timeout = timeout;\n\n                    // Handle authorization", "                    if (authorization != null && authorization.Length > 0)\n                    {\n                        System.Net.ServicePointManager.Expect100Continue = true;\n                        System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12; //the auth type\n\n                        request.PreAuthenticate = true;\n                        request.Headers.Add(\"Authorization\", authorization);\n                    }\n                    else\n                    {\n                        request.Credentials = CredentialCache.DefaultCredentials;\n                    }\n\n                    var res = request.GetResponse();\n                    _response = new StreamReader(res.GetResponseStream()).ReadToEnd();\n\n                    _currentState = RequestState.Done;\n\n                    _shouldExpire = true;\n                    RhinoApp.InvokeOnUiThread((Action)delegate { ExpireSolution(true); });\n                }", "                catch (Exception ex)\n                {\n                    _response = ex.Message;\n\n                    _currentState = RequestState.Error;\n\n                    _shouldExpire = true;\n                    RhinoApp.InvokeOnUiThread((Action)delegate { ExpireSolution(true); });\n\n                    return;\n                }\n            });\n        }\n    }\n}\n"]}
{"filename": "src/UtilComps/HTTPPostRequestComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Text;\nusing Grasshopper.Kernel;\nusing Rhino.Geometry;\nusing Brain.Templates;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n", "using static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n\nnamespace Brain.UtilComps\n{\n    public class HTTPPostRequestComponent : GH_Component_HTTPSync\n    {\n        /// <summary>\n        /// Initializes a new instance of the HTTPPostRequestComponent class.\n        /// </summary>\n        public HTTPPostRequestComponent()\n          : base(\"HTTP POST\", \n                \"POST\",\n                \"Creates a generic HTTP POST request (synchronous)\",\n                \"Brain\", \n                \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)\n        {\n            // active\n            pManager.AddBooleanParameter(\"Send\", \"S\", \"Perform the request?\", GH_ParamAccess.item, false);\n            // url (endpoint)\n            pManager.AddTextParameter(\"Url\", \"U\", \"Url for the request\", GH_ParamAccess.item);\n            // body\n            pManager.AddTextParameter(\"Body\", \"B\", \"Body of the request\", GH_ParamAccess.item);\n            // context/type\n            pManager.AddTextParameter(\"Content Type\", \"T\", \"Content type for the request, such as \\\"application/json\\\", \\\"text/html\\\", etc.\", GH_ParamAccess.item, \"application/json\");\n\n            // custom headers (future)\n            // custom headers would be nice here: how to handle key-value pairs in GH? takes in a tree?\n            \n            // auth \n            int authId = pManager.AddTextParameter(\"Authorization\", \"A\", \"If this request requires authorization, input your formatted token as an Auth string, e.g. \\\"Bearer h1g23g1fdg3d1\\\"\", GH_ParamAccess.item);\n            // timeout\n            pManager.AddIntegerParameter(\"Timeout\", \"T\", \"Timeout for the request in ms. If the request takes longer that this, it will fail.\", GH_ParamAccess.item, 10000);\n\n\n            pManager[authId].Optional = true;\n        }\n\n        /// <summary>\n        /// Registers all the output parameters for this component.\n        /// </summary>", "        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Response\", \"R\", \"Request response\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object is used to retrieve from inputs and store in outputs.</param>\n        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            bool active = false;\n            string url = \"\";\n            string body = \"\";\n            string contentType = \"\";\n            string authToken = \"\";\n            int timeout = 0;\n\n            DA.GetData(\"Send\", ref active);", "        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            bool active = false;\n            string url = \"\";\n            string body = \"\";\n            string contentType = \"\";\n            string authToken = \"\";\n            int timeout = 0;\n\n            DA.GetData(\"Send\", ref active);\n            if (!active)\n            {\n                DA.SetData(\"Response\", \"\");\n                return;\n            }\n", "            if (!active)\n            {\n                DA.SetData(\"Response\", \"\");\n                return;\n            }\n\n            if (!DA.GetData(\"Url\", ref url)) return;\n            if (!DA.GetData(\"Body\", ref body)) return;\n            if (!DA.GetData(\"Content Type\", ref contentType)) return;\n            DA.GetData(\"Authorization\", ref authToken);\n            if (!DA.GetData(\"Timeout\", ref timeout)) return;\n\n            // Validity checks", "            if (!DA.GetData(\"Content Type\", ref contentType)) return;\n            DA.GetData(\"Authorization\", ref authToken);\n            if (!DA.GetData(\"Timeout\", ref timeout)) return;\n\n            // Validity checks\n            if (url == null || url.Length == 0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Empty URL\");\n                return;\n            }\n            if (contentType == null || contentType.Length == 0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Empty content type\");\n                return;\n            }\n\n            string response = POST(url, body, contentType, authToken, timeout);\n\n            // Output\n            DA.SetData(0, response);\n        }\n\n        /// <summary>\n        /// Provides an Icon for the component.\n        /// </summary>", "            if (contentType == null || contentType.Length == 0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Empty content type\");\n                return;\n            }\n\n            string response = POST(url, body, contentType, authToken, timeout);\n\n            // Output\n            DA.SetData(0, response);\n        }\n\n        /// <summary>\n        /// Provides an Icon for the component.\n        /// </summary>", "        protected override System.Drawing.Bitmap Icon\n        {\n            get\n            {\n                //You can add image files to your project resources and access them like this:\n                // return Resources.IconForThisComponent;\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Gets the unique ID for this component. Do not change this ID after release.\n        /// </summary>", "        public override Guid ComponentGuid\n        {\n            get { return new Guid(\"CC83DAAC-80BA-4880-B7E3-24D8B53C0CAD\"); }\n        }\n    }\n}"]}
{"filename": "src/UtilComps/HTTPGetRequestAsyncComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Threading.Tasks;\nusing Brain.Templates;\nusing Grasshopper.Kernel;\nusing Rhino;\nusing Rhino.Geometry;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;", "using Rhino.Geometry;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n\nnamespace Brain.UtilComps\n{\n    public class HTTPGetRequestAsyncComponent : GH_Component_HTTPAsync\n    {\n        /// <summary>\n        /// Initializes a new instance of the HTTPGetRequestAsyncComponent class.\n        /// </summary>\n        public HTTPGetRequestAsyncComponent()\n          : base(\"HTTP GET (Async)\", \"GET Async\",\n              \"Creates a generic HTTP GET request (asynchronous)\",\n              \"Brain\", \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)\n        {// active\n            pManager.AddBooleanParameter(\"Send\", \"S\", \"Perform the request?\", GH_ParamAccess.item, false);\n            // url (endpoint)\n            pManager.AddTextParameter(\"Url\", \"U\", \"Url for the request\", GH_ParamAccess.item);\n\n            // custom headers (future)\n            // custom headers would be nice here: how to handle key-value pairs in GH? takes in a tree?\n\n            // auth \n            int authId = pManager.AddTextParameter(\"Authorization\", \"A\", \"If this request requires authorization, input your formatted token as an Auth string, e.g. \\\"Bearer h1g23g1fdg3d1\\\"\", GH_ParamAccess.item);\n            // timeout\n            pManager.AddIntegerParameter(\"Timeout\", \"T\", \"Timeout for the request in ms. If the request takes longer that this, it will fail.\", GH_ParamAccess.item, 10000);\n\n            pManager[authId].Optional = true;\n        }\n\n        /// <summary>\n        /// Registers all the output parameters for this component.\n        /// </summary>", "        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Response\", \"R\", \"Request response\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object is used to retrieve from inputs and store in outputs.</param>\n        protected override void SolveInstance(IGH_DataAccess DA)\n        {", "        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            if (_shouldExpire)\n            {\n                switch (_currentState)\n                {\n                    case RequestState.Off:\n                        this.Message = \"Inactive\";\n                        _currentState = RequestState.Idle;\n                        break;\n\n                    case RequestState.Error:\n                        this.Message = \"ERROR\";\n                        AddRuntimeMessage(GH_RuntimeMessageLevel.Error, _response);\n                        _currentState = RequestState.Idle;\n                        break;\n\n                    case RequestState.Done:\n                        this.Message = \"Complete!\";\n                        _currentState = RequestState.Idle;\n                        break;\n                }\n                // Output...\n                DA.SetData(0, _response);\n                _shouldExpire = false;\n                return;\n            }\n\n            bool active = false;\n            string url = \"\";\n            string authToken = \"\";\n            int timeout = 0;\n\n            DA.GetData(\"Send\", ref active);", "            if (!active)\n            {\n                _currentState = RequestState.Off;\n                _shouldExpire = true;\n                _response = \"\";\n                ExpireSolution(true);\n                return;\n            }\n\n            if (!DA.GetData(\"Url\", ref url)) return;\n            DA.GetData(\"Authorization\", ref authToken);", "            if (!DA.GetData(\"Url\", ref url)) return;\n            DA.GetData(\"Authorization\", ref authToken);\n            if (!DA.GetData(\"Timeout\", ref timeout)) return;\n\n            // Validity checks\n            if (url == null || url.Length == 0)\n            {\n                _response = \"Empty URL\";\n                _currentState = RequestState.Error;\n                _shouldExpire = true;\n                ExpireSolution(true);\n                return;\n            }\n\n            _currentState = RequestState.Requesting;\n            this.Message = \"Requesting...\";\n\n            GETAsync(url, authToken, timeout);\n        }\n\n        /// <summary>\n        /// Provides an Icon for the component.\n        /// </summary>", "        protected override System.Drawing.Bitmap Icon\n        {\n            get\n            {\n                //You can add image files to your project resources and access them like this:\n                // return Resources.IconForThisComponent;\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Gets the unique ID for this component. Do not change this ID after release.\n        /// </summary>", "        public override Guid ComponentGuid\n        {\n            get { return new Guid(\"27F15667-131B-433C-9605-CEED238B11DD\"); }\n        }\n    }\n}"]}
{"filename": "src/UtilComps/HTTPGetRequestComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nusing Grasshopper.Kernel;\nusing Rhino.Geometry;\nusing Brain.Templates;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n\nnamespace Brain.UtilComps\n{\n    public class HTTPGetRequestComponent : GH_Component_HTTPSync\n    {\n        /// <summary>\n        /// Initializes a new instance of the HTTPGetRequestComponent class.\n        /// </summary>\n        public HTTPGetRequestComponent()\n          : base(\"HTTP GET\", \n                \"GET\",\n                \"Creates a generic HTTP GET request (synchronous)\",\n                \"Brain\", \n                \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "namespace Brain.UtilComps\n{\n    public class HTTPGetRequestComponent : GH_Component_HTTPSync\n    {\n        /// <summary>\n        /// Initializes a new instance of the HTTPGetRequestComponent class.\n        /// </summary>\n        public HTTPGetRequestComponent()\n          : base(\"HTTP GET\", \n                \"GET\",\n                \"Creates a generic HTTP GET request (synchronous)\",\n                \"Brain\", \n                \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)\n        {// active\n            pManager.AddBooleanParameter(\"Send\", \"S\", \"Perform the request?\", GH_ParamAccess.item, false);\n            // url (endpoint)\n            pManager.AddTextParameter(\"Url\", \"U\", \"Url for the request\", GH_ParamAccess.item);\n\n            // custom headers (future)\n            // custom headers would be nice here: how to handle key-value pairs in GH? takes in a tree?\n\n            // auth \n            int authId = pManager.AddTextParameter(\"Authorization\", \"A\", \"If this request requires authorization, input your formatted token as an Auth string, e.g. \\\"Bearer h1g23g1fdg3d1\\\"\", GH_ParamAccess.item);\n            // timeout\n            pManager.AddIntegerParameter(\"Timeout\", \"T\", \"Timeout for the request in ms. If the request takes longer that this, it will fail.\", GH_ParamAccess.item, 10000);\n\n            pManager[authId].Optional = true;\n        }\n\n        /// <summary>\n        /// Registers all the output parameters for this component.\n        /// </summary>", "        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Response\", \"R\", \"Request response\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object is used to retrieve from inputs and store in outputs.</param>\n        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            bool active = false;\n            string url = \"\";\n            string authToken = \"\";\n            int timeout = 0;\n\n            DA.GetData(\"Send\", ref active);", "        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            bool active = false;\n            string url = \"\";\n            string authToken = \"\";\n            int timeout = 0;\n\n            DA.GetData(\"Send\", ref active);\n            if (!active)\n            {\n                DA.SetData(\"Response\", \"\");\n                return;\n            }\n", "            if (!active)\n            {\n                DA.SetData(\"Response\", \"\");\n                return;\n            }\n\n            if (!DA.GetData(\"Url\", ref url)) return;\n            DA.GetData(\"Authorization\", ref authToken);\n            if (!DA.GetData(\"Timeout\", ref timeout)) return;\n\n            // Validity checks", "            if (!DA.GetData(\"Timeout\", ref timeout)) return;\n\n            // Validity checks\n            if (url == null || url.Length == 0)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Empty URL\");\n                return;\n            }\n\n            string response = GET(url, authToken, timeout);\n\n            // Output\n            DA.SetData(0, response);\n        }\n\n        /// <summary>\n        /// Provides an Icon for the component.\n        /// </summary>", "        protected override System.Drawing.Bitmap Icon\n        {\n            get\n            {\n                //You can add image files to your project resources and access them like this:\n                // return Resources.IconForThisComponent;\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Gets the unique ID for this component. Do not change this ID after release.\n        /// </summary>", "        public override Guid ComponentGuid\n        {\n            get { return new Guid(\"0E40A930-6427-4290-8B50-4185D500A4CF\"); }\n        }\n    }\n}"]}
{"filename": "src/UtilComps/HTTPPostRequestAsyncComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Brain.Templates;\nusing Grasshopper.GUI.Script;\nusing Grasshopper.Kernel;\nusing Rhino;", "using Grasshopper.Kernel;\nusing Rhino;\nusing Rhino.Geometry;\nusing static System.Windows.Forms.VisualStyles.VisualStyleElement.Tab;\n\nnamespace Brain.UtilComps\n{\n    public class HTTPPostRequestAsyncComponent : GH_Component_HTTPAsync\n    {\n        /// <summary>\n        /// Initializes a new instance of the HTTPPostRequestAsyncComponent class.\n        /// </summary>\n        public HTTPPostRequestAsyncComponent()\n          : base(\"HTTP POST (async)\", \"POST Async\",\n              \"Creates a generic HTTP POST request (asynchronous)\",\n              \"Brain\", \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)\n        {\n            // active\n            pManager.AddBooleanParameter(\"Send\", \"S\", \"Perform the request?\", GH_ParamAccess.item, false);\n            // url (endpoint)\n            pManager.AddTextParameter(\"Url\", \"U\", \"Url for the request\", GH_ParamAccess.item);\n            // body\n            pManager.AddTextParameter(\"Body\", \"B\", \"Body of the request\", GH_ParamAccess.item);\n            // context/type\n            pManager.AddTextParameter(\"Content Type\", \"T\", \"Content type for the request, such as \\\"application/json\\\", \\\"text/html\\\", etc.\", GH_ParamAccess.item, \"application/json\");\n\n            // custom headers (future)\n            // custom headers would be nice here: how to handle key-value pairs in GH? takes in a tree?\n\n            // auth \n            int authId = pManager.AddTextParameter(\"Authorization\", \"A\", \"If this request requires authorization, input your formatted token as an Auth string, e.g. \\\"Bearer h1g23g1fdg3d1\\\"\", GH_ParamAccess.item);\n            // timeout\n            pManager.AddIntegerParameter(\"Timeout\", \"T\", \"Timeout for the request in ms. If the request takes longer that this, it will fail.\", GH_ParamAccess.item, 10000);\n\n            pManager[authId].Optional = true;\n        }\n\n        /// <summary>\n        /// Registers all the output parameters for this component.\n        /// </summary>", "        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Response\", \"R\", \"Request response\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object is used to retrieve from inputs and store in outputs.</param>\n        protected override void SolveInstance(IGH_DataAccess DA)\n        {", "        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            if (_shouldExpire)\n            {\n                switch(_currentState)\n                {\n                    case RequestState.Off:\n                        this.Message = \"Inactive\";\n                        _currentState = RequestState.Idle;\n                        break;\n\n                    case RequestState.Error:\n                        this.Message = \"ERROR\";\n                        AddRuntimeMessage(GH_RuntimeMessageLevel.Error, _response);\n                        _currentState = RequestState.Idle;\n                        break;\n\n                    case RequestState.Done:\n                        this.Message = \"Complete!\";\n                        _currentState = RequestState.Idle;\n                        break;\n                }\n                // Output\n                DA.SetData(0, _response);\n                _shouldExpire = false;\n                return;\n            }\n\n            bool active = false;\n            string url = \"\";\n            string body = \"\";\n            string contentType = \"\";\n            string authToken = \"\";\n            int timeout = 0;\n\n            DA.GetData(\"Send\", ref active);", "            if (!active)\n            {\n                _currentState = RequestState.Off;\n                _shouldExpire = true;\n                _response = \"\";\n                ExpireSolution(true);\n                return;\n            }\n\n            if (!DA.GetData(\"Url\", ref url)) return;\n            if (!DA.GetData(\"Body\", ref body)) return;", "            if (!DA.GetData(\"Url\", ref url)) return;\n            if (!DA.GetData(\"Body\", ref body)) return;\n            if (!DA.GetData(\"Content Type\", ref contentType)) return;\n            DA.GetData(\"Authorization\", ref authToken);\n            if (!DA.GetData(\"Timeout\", ref timeout)) return;\n\n            // Validity checks\n            if (url == null || url.Length == 0)\n            {\n                _response = \"Empty URL\";\n                _currentState = RequestState.Error;\n                _shouldExpire = true;\n                ExpireSolution(true);\n                return;\n            }", "            if (contentType == null || contentType.Length == 0)\n            {\n                _response = \"Empty content type\";\n                _currentState = RequestState.Error;\n                _shouldExpire = true;\n                ExpireSolution(true);\n                return;\n            }\n\n            _currentState = RequestState.Requesting;\n            this.Message = \"Requesting...\";\n\n            POSTAsync(url, body, contentType, authToken, timeout);  \n        }\n\n\n\n        /// <summary>\n        /// Provides an Icon for the component.\n        /// </summary>", "        protected override System.Drawing.Bitmap Icon\n        {\n            get\n            {\n                //You can add image files to your project resources and access them like this:\n                // return Resources.IconForThisComponent;\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Gets the unique ID for this component. Do not change this ID after release.\n        /// </summary>", "        public override Guid ComponentGuid\n        {\n            get { return new Guid(\"97B12696-7321-423E-BCF6-56486645DE15\"); }\n        }\n    }\n}"]}
{"filename": "src/UtilComps/EnvironmentVariableComponent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nusing Grasshopper.Kernel;\nusing Rhino.Geometry;\n\nnamespace Brain.UtilComps\n{\n    public class EnvironmentVariableComponent : GH_Component\n    {\n        /// <summary>\n        /// Initializes a new instance of the EnvironmentVariableComponent class.\n        /// </summary>\n        public EnvironmentVariableComponent()\n          : base(\"Environment Variable\", \"Env Var\",\n              \"Get the value of a system environment variable\",\n              \"Brain\", \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "    public class EnvironmentVariableComponent : GH_Component\n    {\n        /// <summary>\n        /// Initializes a new instance of the EnvironmentVariableComponent class.\n        /// </summary>\n        public EnvironmentVariableComponent()\n          : base(\"Environment Variable\", \"Env Var\",\n              \"Get the value of a system environment variable\",\n              \"Brain\", \"Utils\")\n        {\n        }\n\n        /// <summary>\n        /// Registers all the input parameters for this component.\n        /// </summary>", "        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Name\", \"N\", \"Name of the variable to fetch\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// Registers all the output parameters for this component.\n        /// </summary>\n        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Value\", \"V\", \"Value of the environment variable\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object is used to retrieve from inputs and store in outputs.</param>", "        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)\n        {\n            pManager.AddTextParameter(\"Value\", \"V\", \"Value of the environment variable\", GH_ParamAccess.item);\n        }\n\n        /// <summary>\n        /// This is the method that actually does the work.\n        /// </summary>\n        /// <param name=\"DA\">The DA object is used to retrieve from inputs and store in outputs.</param>\n        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            string name = \"\";", "        protected override void SolveInstance(IGH_DataAccess DA)\n        {\n            string name = \"\";\n            if (!DA.GetData(0, ref name)) return;\n\n            // Safe-proof the env var fetch\n            try\n            {\n                var val = Environment.GetEnvironmentVariable(name);\n                DA.SetData(0, val);\n            }", "            catch (Exception ex)\n            {\n                AddRuntimeMessage(GH_RuntimeMessageLevel.Error, \"Cannot retrieve environment variable \" + name + \": \" + ex.Message);\n                return;\n            }\n        }\n\n        /// <summary>\n        /// Provides an Icon for the component.\n        /// </summary>\n        protected override System.Drawing.Bitmap Icon\n        {\n            get\n            {\n                //You can add image files to your project resources and access them like this:\n                // return Resources.IconForThisComponent;\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Gets the unique ID for this component. Do not change this ID after release.\n        /// </summary>", "        protected override System.Drawing.Bitmap Icon\n        {\n            get\n            {\n                //You can add image files to your project resources and access them like this:\n                // return Resources.IconForThisComponent;\n                return null;\n            }\n        }\n\n        /// <summary>\n        /// Gets the unique ID for this component. Do not change this ID after release.\n        /// </summary>", "        public override Guid ComponentGuid\n        {\n            get { return new Guid(\"9B9F7305-2296-4344-8545-C9CC27D865F0\"); }\n        }\n    }\n}"]}
