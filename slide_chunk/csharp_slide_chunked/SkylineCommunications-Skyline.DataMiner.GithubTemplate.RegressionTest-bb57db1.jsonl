{"filename": "RT_Customer_MyFirstRegressionTest_1/RT_Customer_MyFirstRegressionTest_1.cs", "chunked_list": ["/*\n****************************************************************************\n*  Copyright (c) 2023,  Skyline Communications NV  All Rights Reserved.    *\n****************************************************************************\n\nBy using this script, you expressly agree with the usage terms and\nconditions set out below.\nThis script and all related materials are protected by copyrights and\nother intellectual property rights that exclusively belong\nto Skyline Communications.\n\nA user license granted for this script is strictly for personal use only.\nThis script may not be used in any way by anyone without the prior\nwritten consent of Skyline Communications. Any sublicensing of this\nscript is forbidden.\n\nAny modifications to this script by the user are only allowed for\npersonal use and within the intended purpose of the script,\nand will remain the sole responsibility of the user.\nSkyline Communications will not be responsible for any damages or\nmalfunctions whatsoever of the script resulting from a modification\nor adaptation by the user.\n\nThe content of this script is confidential information.\nThe user hereby agrees to keep this confidential information strictly\nsecret and confidential and not to disclose or reveal it, in whole\nor in part, directly or indirectly to any person, entity, organization\nor administration without the prior written consent of\nSkyline Communications.\n\nAny inquiries can be addressed to:\n\n\tSkyline Communications NV\n\tAmbachtenstraat 33\n\tB-8870 Izegem\n\tBelgium\n\tTel.\t: +32 51 31 35 69\n\tFax.\t: +32 51 31 01 29\n\tE-mail\t: info@skyline.be\n\tWeb\t\t: www.skyline.be\n\tContact\t: Ben Vandenberghe\n\n****************************************************************************\nRevision History:\n\nDATE\t\tVERSION\t\tAUTHOR\t\t\tCOMMENTS\n\n13/04/2023\t1.0.0.1\t\tJLE, Skyline\tInitial version\n****************************************************************************\n*/\n\nusing System;\nusing Library.Tests;\nusing RT_Customer_MyFirstRegressionTest_1;\nusing Skyline.DataMiner.Automation;\n\n/// <summary>\n/// DataMiner Script Class.\n/// </summary>", "public class Script\n{\n\tprivate const string TestName = \"RT_Customer_MyFirstRegressionTest\";\n\tprivate const string TestDescription = \"Regression Test to validate something.\";\n\n\t/// <summary>\n\t/// The Script entry point.\n\t/// </summary>\n\t/// <param name=\"engine\">Link with SLAutomation process.</param>\n\tpublic void Run(IEngine engine)\n\t{\n\t\ttry\n\t\t{\n\t\t\tTest myTest = new Test(TestName, TestDescription);\n\t\t\tmyTest.AddTestCase(\n\t\t\t\tnew TestCaseExample(\"Test 1\"),\n\t\t\t\tnew TestCaseExample(\"Test 2\"));\n\n\t\t\tmyTest.Execute(engine);\n\t\t\tmyTest.PublishResults(engine);\n\t\t}", "\tpublic void Run(IEngine engine)\n\t{\n\t\ttry\n\t\t{\n\t\t\tTest myTest = new Test(TestName, TestDescription);\n\t\t\tmyTest.AddTestCase(\n\t\t\t\tnew TestCaseExample(\"Test 1\"),\n\t\t\t\tnew TestCaseExample(\"Test 2\"));\n\n\t\t\tmyTest.Execute(engine);\n\t\t\tmyTest.PublishResults(engine);\n\t\t}", "\t\tcatch (Exception e)\n\t\t{\n\t\t\tengine.Log($\"{TestName} failed: {e}\");\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\t// TODO: add cleanup here (if applicable)\n\t\t}\n\t}\n}"]}
{"filename": "RT_Customer_MyFirstRegressionTest_1/TestCases/TestCaseExample.cs", "chunked_list": ["\ufeffnamespace RT_Customer_MyFirstRegressionTest_1\n{\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Text;\n\tusing System.Threading.Tasks;\n\n\tusing Library.Tests.TestCases;\n", "\tusing Library.Tests.TestCases;\n\n\tusing QAPortalAPI.Models.ReportingModels;\n\n\tusing Skyline.DataMiner.Automation;\n\n\tpublic class TestCaseExample : ITestCase\n\t{\n\t\tpublic TestCaseExample(string name)\n\t\t{\n\t\t\tif (String.IsNullOrWhiteSpace(name))\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"name\");\n\t\t\t}\n\n\t\t\tName = name;\n\t\t}\n", "\t\t\tif (String.IsNullOrWhiteSpace(name))\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(\"name\");\n\t\t\t}\n\n\t\t\tName = name;\n\t\t}\n\n\t\tpublic string Name { get; set; }\n\n\t\tpublic TestCaseReport TestCaseReport { get; private set; }\n", "\t\tpublic string Name { get; set; }\n\n\t\tpublic TestCaseReport TestCaseReport { get; private set; }\n\n\t\tpublic PerformanceTestCaseReport PerformanceTestCaseReport { get; private set; }\n\n\t\tpublic void Execute(IEngine engine)\n\t\t{\n\t\t\t// TODO: Implement your test case\n\t\t\t// The below is an example.\n\t\t\tvar isSuccess = true;", "\t\t\tif (isSuccess)\n\t\t\t{\n\t\t\t\tTestCaseReport = TestCaseReport.GetSuccessTestCase(Name);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tTestCaseReport = TestCaseReport.GetFailTestCase(Name, \"Failed example\");\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "RT_Customer_MyFirstRegressionTest_1/Properties/AssemblyInfo.cs", "chunked_list": ["using System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n[assembly: AssemblyTitle(\"RT_Customer_MyFirstRegressionTest_1\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"Skyline Communications\")]\n[assembly: AssemblyProduct(\"RT_Customer_MyFirstRegressionTest_1\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9 Skyline Communications\")]", "[assembly: AssemblyProduct(\"RT_Customer_MyFirstRegressionTest_1\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9 Skyline Communications\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n[assembly: ComVisible(false)]\n[assembly: Guid(\"59C587F6-A7B5-4D29-BFB8-CF101A34780E\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n", ""]}
{"filename": "Library/Tests/ITest.cs", "chunked_list": ["\ufeffnamespace Library.Tests\n{\n    using QAPortalAPI.Models.ReportingModels;\n    using Skyline.DataMiner.Automation;\n\n    internal interface ITest\n    {\n        TestReport Execute(IEngine engine);\n    }\n}"]}
{"filename": "Library/Tests/ITestCase.cs", "chunked_list": ["\ufeffnamespace Library.Tests.TestCases\n{\n\tusing QAPortalAPI.Models.ReportingModels;\n\n\tusing Skyline.DataMiner.Automation;\n\n\tinternal interface ITestCase\n\t{\n\t\tstring Name { get; set; }\n\n\t\tTestCaseReport TestCaseReport { get; }\n\n\t\tPerformanceTestCaseReport PerformanceTestCaseReport { get; }\n\n\t\tvoid Execute(IEngine engine);\n\t}\n}"]}
{"filename": "Library/Tests/Test.cs", "chunked_list": ["\ufeffnamespace Library.Tests\n{\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Text;\n\n\tusing Library.Consts;\n\tusing Library.Tests.TestCases;\n", "\tusing Library.Tests.TestCases;\n\n\tusing QAPortalAPI.Models.ReportingModels;\n\n\tusing Skyline.DataMiner.Automation;\n\tusing Skyline.DataMiner.Net.Messages;\n\n\tinternal class Test : ITest\n\t{\n\t\tprivate readonly string name;\n\t\tprivate readonly string description;", "\t\tprivate readonly string name;\n\t\tprivate readonly string description;\n\t\tprivate readonly List<ITestCase> testCases;\n\t\tprivate TestReport report;\n\n\t\tpublic Test(string name, string description)\n\t\t{\n\t\t\tthis.name = name;\n\t\t\tthis.description = description;\n\n\t\t\tthis.testCases = new List<ITestCase>();\n\t\t}\n", "\t\tpublic void AddTestCase(params ITestCase[] newTestCases)\n\t\t{\n\t\t\tforeach (var testCase in newTestCases)\n\t\t\t{\n\t\t\t\tif (testCase == null || String.IsNullOrWhiteSpace(testCase.Name))\n\t\t\t\t{\n\t\t\t\t\t// We should not do anything\n\t\t\t\t}\n\t\t\t\telse if (this.testCases.FirstOrDefault(x => x.Name.Equals(testCase.Name)) != null)\n\t\t\t\t{\n\t\t\t\t\t// Name has to be unique\n\t\t\t\t\ttestCase.Name += \" - copy\";\n\t\t\t\t\tAddTestCase(testCase);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.testCases.Add(testCase);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "\t\t\t\telse if (this.testCases.FirstOrDefault(x => x.Name.Equals(testCase.Name)) != null)\n\t\t\t\t{\n\t\t\t\t\t// Name has to be unique\n\t\t\t\t\ttestCase.Name += \" - copy\";\n\t\t\t\t\tAddTestCase(testCase);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthis.testCases.Add(testCase);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "\t\tpublic TestReport Execute(IEngine engine)\n\t\t{\n\t\t\tthis.report = new TestReport(\n\t\t\t\tnew TestInfo(name, TestInfoConsts.Contact, TestInfoConsts.ProjectIds, description),\n\t\t\t\tnew TestSystemInfo(GetAgentWhereScriptIsRunning(engine)));\n\n\t\t\tforeach (var testCase in testCases)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\ttestCase.Execute(engine);", "\t\t\t\t\tif (testCase.TestCaseReport != null && !this.report.TryAddTestCase(testCase.TestCaseReport, out string errorMessage))\n\t\t\t\t\t{\n\t\t\t\t\t\tengine.ExitFail(errorMessage);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (testCase.PerformanceTestCaseReport != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!testCase.PerformanceTestCaseReport.IsValid(out string validationInfo))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tengine.ExitFail(validationInfo);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.report.PerformanceTestCases.Add(testCase.PerformanceTestCaseReport);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}", "\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tengine.ExitFail(e.ToString());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.report;\n\t\t}\n\n\t\tpublic void PublishResults(IEngine engine)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar portal = new QAPortal.QAPortal(engine);\n\t\t\t\tportal.PublishReport(report);\n\t\t\t}", "\t\tpublic void PublishResults(IEngine engine)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar portal = new QAPortal.QAPortal(engine);\n\t\t\t\tportal.PublishReport(report);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tengine.Log($\"Reporting results for {report.TestInfo.TestName} to QAPortal failed: {e}\");\n\t\t\t}\n\n\t\t\tvar isSuccessful = report.TestResult == QAPortalAPI.Enums.Result.Success;\n\t\t\tvar reason = GenerateReason();\n\t\t\tengine.Log($\"{report.TestInfo.TestName} {report.TestResult}: {reason}\");\n\n\t\t\tengine.AddScriptOutput(\"Success\", isSuccessful.ToString());\n\t\t\tengine.AddScriptOutput(\"Reason\", reason);\n\t\t}\n", "\t\tprivate string GetAgentWhereScriptIsRunning(IEngine engine)\n\t\t{\n\t\t\tstring agentName = null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar message = new GetInfoMessage(-1, InfoType.LocalDataMinerInfo);\n\t\t\t\tvar response = (GetDataMinerInfoResponseMessage)engine.SendSLNetSingleResponseMessage(message);\n\t\t\t\tagentName = response?.AgentName ?? throw new NullReferenceException(\"No valid agent name was returned by SLNET.\");\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tengine.ExitFail(\"RT Exception - Could not retrieve local agent name: \" + e);\n\t\t\t}\n\n\t\t\treturn agentName;\n\t\t}\n", "\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tengine.ExitFail(\"RT Exception - Could not retrieve local agent name: \" + e);\n\t\t\t}\n\n\t\t\treturn agentName;\n\t\t}\n\n\t\tprivate string GenerateReason()\n\t\t{\n\t\t\tvar reason = new StringBuilder();\n\t\t\treason.AppendLine(report.TestInfo.TestDescription);\n", "\t\tprivate string GenerateReason()\n\t\t{\n\t\t\tvar reason = new StringBuilder();\n\t\t\treason.AppendLine(report.TestInfo.TestDescription);\n\n\t\t\tforeach (var testCaseReport in report.TestCases)\n\t\t\t{\n\t\t\t\treason.AppendLine($\"{testCaseReport.TestCaseName}|{testCaseReport.TestCaseResult}|{testCaseReport.TestCaseResultInfo}\");\n\t\t\t}\n\n\t\t\treturn reason.ToString();\n\t\t}\n\t}\n}"]}
{"filename": "Library/QAPortal/QAPortal.cs", "chunked_list": ["\ufeffnamespace Library.QAPortal\n{\n\tusing System;\n\n\tusing QAPortalAPI.APIHelper;\n\tusing QAPortalAPI.Models.ReportingModels;\n\n\tusing Skyline.DataMiner.Automation;\n\n\tinternal class QAPortal\n\t{", "\n\tinternal class QAPortal\n\t{\n\t\tprivate readonly IEngine engine;\n\t\tprivate readonly QaPortalConfiguration configuration;\n\n\t\tpublic QAPortal(IEngine engine)\n\t\t{\n\t\t\tthis.engine = engine;\n\t\t\tconfiguration = QaPortalConfiguration.GetConfiguration(out var e);\n\t\t\tif (e != null)\n\t\t\t{\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n", "\t\t\tif (e != null)\n\t\t\t{\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\n\t\tpublic void PublishReport(TestReport report)\n\t\t{\n\t\t\tQaPortalApiHelper helper;\n\t\t\tif (configuration.ClientId == null)\n\t\t\t{\n\t\t\t\thelper = new QaPortalApiHelper(engine.GenerateInformation, configuration.Path, string.Empty, string.Empty);\n\t\t\t}", "\t\t\tif (configuration.ClientId == null)\n\t\t\t{\n\t\t\t\thelper = new QaPortalApiHelper(engine.GenerateInformation, configuration.Path, string.Empty, string.Empty);\n\t\t\t}\n\t\t\telse if (configuration.Path.Contains(\"@\"))\n\t\t\t{\n\t\t\t\thelper = new QaPortalApiHelper(\n\t\t\t\t  engine.GenerateInformation,\n\t\t\t\t  configuration.Path,\n\t\t\t\t  configuration.ClientId,\n\t\t\t\t  configuration.ApiKey,\n\t\t\t\t  PlainBodyEmail);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\thelper = new QaPortalApiHelper(\n\t\t\t\t  engine.GenerateInformation,\n\t\t\t\t  configuration.Path,\n\t\t\t\t  configuration.ClientId,\n\t\t\t\t  configuration.ApiKey);\n\t\t\t}\n\n\t\t\thelper.PostResult(report);\n\t\t}\n", "\t\tprivate void PlainBodyEmail(string message, string subject, string to)\n\t\t{\n\t\t\tEmailOptions emailOptions = new EmailOptions(message, subject, to)\n\t\t\t{\n\t\t\t\tSendAsPlainText = true,\n\t\t\t};\n\n\t\t\tengine.SendEmail(emailOptions);\n\t\t}\n\t}\n}"]}
{"filename": "Library/QAPortal/QaPortalConfiguration.cs", "chunked_list": ["\ufeffnamespace Library.QAPortal\n{\n    using System;\n    using System.IO;\n    using Newtonsoft.Json;\n\n    public class QaPortalConfiguration\n    {\n        private const string ConfigurationFilePath = @\"C:\\Skyline DataMiner\\QAPortal\\QaPortalConfiguration.json\";\n\n        public string Path { get; set; }\n", "        private const string ConfigurationFilePath = @\"C:\\Skyline DataMiner\\QAPortal\\QaPortalConfiguration.json\";\n\n        public string Path { get; set; }\n\n        public string ClientId { get; set; }\n\n        public string ApiKey { get; set; }\n\n        public static QaPortalConfiguration GetConfiguration(out Exception exception)\n        {\n            exception = null;\n\n            try\n            {\n                return JsonConvert.DeserializeObject<QaPortalConfiguration>(File.ReadAllText(ConfigurationFilePath));\n            }", "        public static QaPortalConfiguration GetConfiguration(out Exception exception)\n        {\n            exception = null;\n\n            try\n            {\n                return JsonConvert.DeserializeObject<QaPortalConfiguration>(File.ReadAllText(ConfigurationFilePath));\n            }\n            catch (Exception e)\n            {\n                exception = e;\n                return null;\n            }\n        }\n    }\n}", "            catch (Exception e)\n            {\n                exception = e;\n                return null;\n            }\n        }\n    }\n}"]}
{"filename": "Library/Consts/TestInfoConsts.cs", "chunked_list": ["\ufeffnamespace Library.Consts\n{\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Text;\n\n\tinternal static class TestInfoConsts\n\t{\n\t\tinternal static string Contact => \"@skyline.be\"; // TODO: The 'Contact' field must be your squad or domain e-mail. No Individual e-mails are allowed.\n\n\t\tinternal static List<int> ProjectIds => new List<int> { -1 }; // TODO: Change project ID\n\t}\n}\n"]}
{"filename": "RT_Customer_MyFirstRegressionTest_1Tests/TestCases/TestCaseExampleTests.cs", "chunked_list": ["\ufeffnamespace RT_Customer_MyFirstRegressionTest_1.Tests\n{\n\tusing System;\n\tusing System.Collections.Generic;\n\tusing System.Linq;\n\tusing System.Text;\n\tusing System.Threading.Tasks;\n\n\tusing Microsoft.VisualStudio.TestTools.UnitTesting;\n", "\tusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\n\tusing Moq;\n\n\tusing Skyline.DataMiner.Automation;\n\n\t[TestClass]\n\tpublic class TestCaseExampleTests\n\t{\n\t\t[TestMethod]\n\t\tpublic void TestCaseExampleNameNull()\n\t\t{\n\t\t\tAssert.ThrowsException<ArgumentNullException>(() => new TestCaseExample(null));\n\t\t}\n\n\t\t[TestMethod]", "\t\tpublic void TestCaseExampleNameNull()\n\t\t{\n\t\t\tAssert.ThrowsException<ArgumentNullException>(() => new TestCaseExample(null));\n\t\t}\n\n\t\t[TestMethod]\n\t\tpublic void TestCaseExampleNameEmpty()\n\t\t{\n\t\t\tAssert.ThrowsException<ArgumentNullException>(() => new TestCaseExample(String.Empty));\n\t\t}\n\n\t\t[TestMethod]", "\t\tpublic void ExecuteTest()\n\t\t{\n\t\t\t// Arrange\n\t\t\tTestCaseExample tce = new TestCaseExample(\"example\");\n\t\t\tMock<IEngine> engine = new Mock<IEngine>();\n\n\t\t\t// Act\n\t\t\ttce.Execute(engine.Object);\n\n\t\t\t// Assert\n\t\t\tAssert.IsTrue(tce.TestCaseReport != null || tce.PerformanceTestCaseReport != null, \"At least one Test Case Report should be assigned (TestCaseReport or PerformanceTestCaseReport)\");\n\t\t}\n\t}\n}"]}
{"filename": "RT_Customer_MyFirstRegressionTest_1Tests/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n[assembly: AssemblyTitle(\"RT_Customer_MyFirstRegressionTest_1Tests\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"RT_Customer_MyFirstRegressionTest_1Tests\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]", "[assembly: AssemblyProduct(\"RT_Customer_MyFirstRegressionTest_1Tests\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2023\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n[assembly: ComVisible(false)]\n\n[assembly: Guid(\"2703c9bc-3365-4274-a04d-7f74d89ae599\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]", "[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
