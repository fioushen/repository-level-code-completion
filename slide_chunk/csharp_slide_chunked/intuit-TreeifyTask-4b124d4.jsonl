{"filename": "Source/TreeifyTask.BlazorSample/Program.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nnamespace TreeifyTask.BlazorSample", "\nnamespace TreeifyTask.BlazorSample\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n", "        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                });\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.BlazorSample/Startup.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Components;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;", "using Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Blazorise;\nusing Blazorise.Bootstrap;\nusing Blazorise.Icons.FontAwesome;\n\nnamespace TreeifyTask.BlazorSample\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n", "    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        // This method gets called by the runtime. Use this method to add services to the container.\n        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940", "        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddRazorPages();\n            services.AddServerSideBlazor();\n            services.AddBlazorise(options =>\n            {\n                options.ChangeTextOnKeyPress = true;\n            })\n            .AddBootstrapProviders()\n            .AddFontAwesomeIcons();\n        }\n\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.", "        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Error\");\n            }\n\n            app.UseStaticFiles();\n\n            app.UseRouting();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapBlazorHub();\n                endpoints.MapFallbackToPage(\"/_Host\");\n            });\n        }\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.BlazorSample/TaskDataModel/code.cs", "chunked_list": ["using System;\nusing System.Threading.Tasks;\n\nnamespace TreeifyTask.BlazorSample\n{\n    delegate Task CancellableAsyncActionDelegate(Pr reporter, Tk token);\n    class Pr\n    {\n        public void report() { }\n    }\n    struct Tk\n    {\n\n    }", "        public void report() { }\n    }\n    struct Tk\n    {\n\n    }\n    class AT\n    {\n        public AT(string id,\n                  CancellableAsyncActionDelegate action,\n                  params AT[] children)\n        {\n            Id = id;\n            Action = action;\n            Children = children;\n        }\n", "        public string Id { get; }\n        public CancellableAsyncActionDelegate Action { get; }\n        public AT[] Children { get; }\n    }\n\n    public class CodeTry\n    {\n        public void SyntaxCheck()\n        {\n            var rootTask =\n                new AT(\"Root\", null,\n                    new AT(\"Task1\", Task1,\n                        new AT(\"Task1.1\", Task1_1),\n                        new AT(\"Task1.2\", Task1_2)),\n                    new AT(\"Task2\", null,\n                        new AT(\"Task2.1\", null,\n                            new AT(\"Task2.1.1\", Task2_1_1),\n                            new AT(\"Task2.1.2\", Task_2_1_2)),\n                        new AT(\"Task2.2\", Task2_2)),\n                    new AT(\"Task3\", Task3),\n                    new AT(\"Task4\", Task4),\n                    new AT(\"Task5\", Task5),\n                    new AT(\"Task6\", Task6));\n\n        }\n", "        private async Task Task6(Pr reporter, Tk token)\n        {\n            await Task.Yield();\n        }\n\n        private Task Task5(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task4(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n", "        private Task Task4(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task3(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task2_2(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n", "        private Task Task2_2(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task_2_1_2(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task2_1_1(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n", "        private Task Task2_1_1(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task1(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task1_1(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n", "        private Task Task1_1(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n\n        private Task Task1_2(Pr reporter, Tk token)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}"]}
{"filename": "Source/TreeifyTask.BlazorSample/Data/CodeBehavior.cs", "chunked_list": ["namespace TreeifyTask.BlazorSample\n{\n    public record CodeBehavior\n    {\n        public bool ShouldHangInAnInDeterminateState { get; set; }\n        public bool ShouldPerformAnInDeterminateAction { get; set; }\n        public bool ShouldHangDuringProgress { get; set; }\n        public bool ShouldThrowException { get; set; }\n        public bool ShouldThrowExceptionDuringProgress { get; set; }\n        public int IntervalDelay { get; set; } = 10;\n        public int InDeterminateActionDelay { get; set; } = 1000;\n    }\n}\n", "        public bool ShouldThrowExceptionDuringProgress { get; set; }\n        public int IntervalDelay { get; set; } = 10;\n        public int InDeterminateActionDelay { get; set; } = 1000;\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.BlazorSample/Pages/Error.cshtml.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.RazorPages;\nusing Microsoft.Extensions.Logging;\n\nnamespace TreeifyTask.BlazorSample.Pages", "\nnamespace TreeifyTask.BlazorSample.Pages\n{\n    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]\n    [IgnoreAntiforgeryToken]\n    public class ErrorModel : PageModel\n    {\n        public string RequestId { get; set; }\n\n        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);\n", "        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);\n\n        private readonly ILogger<ErrorModel> _logger;\n\n        public ErrorModel(ILogger<ErrorModel> logger)\n        {\n            _logger = logger;\n        }\n\n        public void OnGet()\n        {\n            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;\n        }\n    }\n}\n", "        public void OnGet()\n        {\n            RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;\n        }\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.WpfSample/MainWindow.xaml.cs", "chunked_list": ["\ufeffusing TreeifyTask;\nusing System;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing TaskStatus = TreeifyTask.TaskStatus;\n\nnamespace TreeifyTask.Sample", "\nnamespace TreeifyTask.Sample\n{\n    /// <summary>\n    /// Interaction logic for MainWindow.xaml\n    /// </summary>\n    public partial class MainWindow : Window\n    {\n        ITaskNode rootTask;\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            Dispatcher.UnhandledException += Dispatcher_UnhandledException;\n            CreateTasks();\n\n        }\n", "        private void CreateTasks()\n        {\n            CodeBehavior defaultCodeBehavior = new();\n\n            rootTask = new TaskNode(\"TaskNode-1\");\n            rootTask.AddChild(new TaskNode(\"TaskNode-1.1\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 20 }, \"1.1\")));\n            var subTask = new TaskNode(\"TaskNode-1.2\");\n            subTask.AddChild(new TaskNode(\"TaskNode-1.2.1\", async (reporter, token) => await SimpleTimer(reporter, token,\n                defaultCodeBehavior with { ShouldPerformAnInDeterminateAction = true, InDeterminateActionDelay = 2000 }, \"1.2.1\")));\n\n            var subTask2 = new TaskNode(\"TaskNode-1.2.2\");\n            subTask2.AddChild(new TaskNode(\"TaskNode-1.2.2.1\", async (reporter, token) => await SimpleTimer(reporter, token,\n                defaultCodeBehavior with { ShouldThrowExceptionDuringProgress = false, IntervalDelay = 65 }, \"1.2.2.1\")));\n\n            subTask.AddChild(subTask2);\n            subTask.AddChild(new TaskNode(\"TaskNode-1.2.3\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 60 }, \"1.2.3\")));\n            subTask.AddChild(new TaskNode(\"TaskNode-1.2.4\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 30 }, \"1.2.4\")));\n\n            rootTask.AddChild(subTask);\n            rootTask.AddChild(new TaskNode(\"TaskNode-1.3\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 160 }, \"1.3\")));\n            rootTask.AddChild(new TaskNode(\"TaskNode-1.4\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 50 }, \"1.4\")));\n            rootTask.AddChild(new TaskNode(\"TaskNode-1.5\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 20 }, \"1.5\")));\n            rootTask.AddChild(new TaskNode(\"TaskNode-1.6\", async (reporter, token) => await SimpleTimer(reporter, token, defaultCodeBehavior with { IntervalDelay = 250 }, \"1.6\")));\n\n            rootTask.Reporting += (sender, eArgs) =>\n            {", "                if (eArgs.TaskStatus == TaskStatus.InDeterminate)\n                {\n                    pb.IsIndeterminate = true;\n                }\n                else\n                {\n                    pb.IsIndeterminate = false;\n                    pb.Value = eArgs.ProgressValue;\n                }\n            };\n\n            tv.ItemsSource = new ObservableCollection<TaskNodeViewModel> { new TaskNodeViewModel(rootTask) };\n        }\n", "        private void Dispatcher_UnhandledException(object sender, System.Windows.Threading.DispatcherUnhandledExceptionEventArgs e)\n        {\n            txtError.Text = e.Exception.Message;\n            errorBox.Visibility = Visibility.Visible;\n            CreateTasks();\n            e.Handled = true;\n        }\n\n        private async Task SimpleTimer(IProgressReporter progressReporter, CancellationToken token, CodeBehavior behaviors = null, string progressMessage = null)\n        {\n            behaviors ??= new CodeBehavior();\n            progressMessage ??= \"In progress \";\n            progressReporter.Report(TaskStatus.InProgress, 0, $\"{progressMessage}: 0%\");\n            bool error = false;\n", "        private async Task SimpleTimer(IProgressReporter progressReporter, CancellationToken token, CodeBehavior behaviors = null, string progressMessage = null)\n        {\n            behaviors ??= new CodeBehavior();\n            progressMessage ??= \"In progress \";\n            progressReporter.Report(TaskStatus.InProgress, 0, $\"{progressMessage}: 0%\");\n            bool error = false;\n\n            if (behaviors.ShouldThrowException)\n            {\n                throw new Exception();\n            }\n\n            try\n            {", "                if (behaviors.ShouldPerformAnInDeterminateAction)\n                {\n                    progressReporter.Report(TaskStatus.InDeterminate, 0, $\"{progressMessage}: 0%\");\n                    if (behaviors.ShouldHangInAnInDeterminateState)\n                    {\n                        await Task.Delay(-1);\n                    }\n                    await Task.Delay(behaviors.InDeterminateActionDelay);\n                }\n                else\n                {", "                    foreach (int i in Enumerable.Range(1, 100))\n                    {\n                        if (behaviors.ShouldThrowExceptionDuringProgress)\n                        {\n                            throw new Exception();\n                        }\n                        if (token.IsCancellationRequested)\n                        {\n                            progressReporter.Report(TaskStatus.Cancelled, i);\n                            break;\n                        }\n                        await Task.Delay(behaviors.IntervalDelay);\n                        progressReporter.Report(TaskStatus.InProgress, i, $\"{progressMessage}: {i}%\");\n", "                        if (i > 20 && behaviors.ShouldHangDuringProgress)\n                        {\n                            await Task.Delay(-1);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                error = true;\n                progressReporter.Report(TaskStatus.Failed, 0, ex);\n                throw;\n            }", "            if (!error && !token.IsCancellationRequested)\n            {\n                progressReporter.Report(TaskStatus.Completed, 100, $\"{progressMessage}: 100%\");\n            }\n        }\n\n        CancellationTokenSource tokenSource;\n        private async void StartClick(object sender, RoutedEventArgs e)\n        {\n            grpExecutionMethod.IsEnabled = false;\n            btnStart.IsEnabled = false;\n            btnCancel.IsEnabled = true;\n            try\n            {\n                tokenSource = new CancellationTokenSource();\n                var token = tokenSource.Token;\n                await (rdConcurrent.IsChecked.HasValue && rdConcurrent.IsChecked.Value ?\n                    rootTask.ExecuteConcurrently(token, true) :\n                    rootTask.ExecuteInSeries(token, true));\n            }", "            catch (Exception ex)\n            {\n                MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButton.OK, MessageBoxImage.Error);\n            }\n            btnStart.IsEnabled = true;\n            btnCancel.IsEnabled = false;\n            grpExecutionMethod.IsEnabled = true;\n        }\n\n        private void CancelClick(object sender, RoutedEventArgs e)\n        {\n            tokenSource?.Cancel();\n        }\n", "        private void CancelClick(object sender, RoutedEventArgs e)\n        {\n            tokenSource?.Cancel();\n        }\n\n        private void Window_KeyDown(object sender, System.Windows.Input.KeyEventArgs e)\n        {\n            if (e.Key == System.Windows.Input.Key.Escape)\n            {\n                errorBox.Visibility = Visibility.Collapsed;\n                // RESET UI Controls\n                btnCancel.IsEnabled = false;\n                btnStart.IsEnabled = true;\n                pb.Value = 0;\n                rdConcurrent.IsChecked = false;\n            }\n        }\n", "        private void TreeView_SelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)\n        {\n            if (e.OldValue is TaskNodeViewModel oldTask)\n            {\n                oldTask.BaseTaskNode.Reporting -= ChildReport;\n            }\n            if (e.NewValue is TaskNodeViewModel taskVM)\n            {\n                var task = taskVM.BaseTaskNode;\n                txtId.Text = task.Id;\n                txtStatus.Text = task.TaskStatus.ToString(\"G\");\n                pbChild.Value = task.ProgressValue;\n                txtChildState.Text = task.ProgressState + \"\";\n                task.Reporting += ChildReport;\n            }\n        }\n", "        private void ChildReport(object sender, ProgressReportingEventArgs eventArgs)\n        {\n            if (sender is ITaskNode task)\n            {\n                txtId.Text = task.Id;\n                txtStatus.Text = task.TaskStatus.ToString(\"G\");\n                pbChild.Value = task.ProgressValue;\n                txtChildState.Text = task.ProgressState + \"\";\n            }\n        }\n", "        private void btnResetClick(object sender, RoutedEventArgs e)\n        {\n            CreateTasks();\n            btnCancel.IsEnabled = false;\n            btnStart.IsEnabled = true;\n            pb.Value = 0;\n            rdConcurrent.IsChecked = false;\n            rdSeries.IsChecked = true;\n        }\n    }\n}\n\n"]}
{"filename": "Source/TreeifyTask.WpfSample/CodeBehavior.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace TreeifyTask.Sample\n{\n    public record CodeBehavior\n    {\n        public bool ShouldHangInAnInDeterminateState { get; set; }\n        public bool ShouldPerformAnInDeterminateAction { get; set; }\n        public bool ShouldHangDuringProgress { get; set; }\n        public bool ShouldThrowException { get; set; }\n        public bool ShouldThrowExceptionDuringProgress { get; set; }", "        public bool ShouldHangDuringProgress { get; set; }\n        public bool ShouldThrowException { get; set; }\n        public bool ShouldThrowExceptionDuringProgress { get; set; }\n        public int IntervalDelay { get; set; } = 10;\n        public int InDeterminateActionDelay { get; set; } = 1000;\n    }\n}\n\n"]}
{"filename": "Source/TreeifyTask.WpfSample/App.xaml.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Windows;\n\nnamespace TreeifyTask.Sample\n{", "namespace TreeifyTask.Sample\n{\n    /// <summary>\n    /// Interaction logic for App.xaml\n    /// </summary>\n    public partial class App : Application\n    {\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.WpfSample/TaskNodeViewModel.cs", "chunked_list": ["\ufeffusing TreeifyTask;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\n\nnamespace TreeifyTask.Sample\n{\n    public class TaskNodeViewModel : INotifyPropertyChanged\n    {\n        private readonly ITaskNode baseTaskNode;\n        private ObservableCollection<TaskNodeViewModel> _childTasks;\n        private TaskStatus _taskStatus;\n\n        public TaskNodeViewModel(ITaskNode baseTaskNode)\n        {\n            this.baseTaskNode = baseTaskNode;\n            PopulateChild(baseTaskNode);\n            baseTaskNode.Reporting += BaseTaskNode_Reporting;\n        }\n", "        private readonly ITaskNode baseTaskNode;\n        private ObservableCollection<TaskNodeViewModel> _childTasks;\n        private TaskStatus _taskStatus;\n\n        public TaskNodeViewModel(ITaskNode baseTaskNode)\n        {\n            this.baseTaskNode = baseTaskNode;\n            PopulateChild(baseTaskNode);\n            baseTaskNode.Reporting += BaseTaskNode_Reporting;\n        }\n", "        private void PopulateChild(ITaskNode baseTaskNode)\n        {\n            this._childTasks = new ObservableCollection<TaskNodeViewModel>();\n            foreach (var ct in baseTaskNode.ChildTasks)\n            {\n                this._childTasks.Add(new TaskNodeViewModel(ct));\n            }\n        }\n\n        private void BaseTaskNode_Reporting(object sender, ProgressReportingEventArgs eventArgs)\n        {\n            this.TaskStatus = eventArgs.TaskStatus;\n        }\n\n        public ObservableCollection<TaskNodeViewModel> ChildTasks =>\n            _childTasks;\n", "        private void BaseTaskNode_Reporting(object sender, ProgressReportingEventArgs eventArgs)\n        {\n            this.TaskStatus = eventArgs.TaskStatus;\n        }\n\n        public ObservableCollection<TaskNodeViewModel> ChildTasks =>\n            _childTasks;\n\n        public string Id\n        {\n            get => baseTaskNode.Id;\n        }\n", "        public string Id\n        {\n            get => baseTaskNode.Id;\n        }\n\n        public TaskStatus TaskStatus\n        {\n            get => _taskStatus;\n            set\n            {\n                _taskStatus = value;\n                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(TaskStatus)));\n            }\n        }\n", "        public ITaskNode BaseTaskNode => baseTaskNode;\n\n        public event PropertyChangedEventHandler PropertyChanged;\n    }\n}\n\n"]}
{"filename": "Source/TreeifyTask.WpfSample/Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace TreeifyTask.WpfSample.Properties {\n    \n    \n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"17.3.0.0\")]\n    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {\n        \n        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        ", "        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        \n        public static Settings Default {\n            get {\n                return defaultInstance;\n            }\n        }\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.WpfSample/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace TreeifyTask.WpfSample.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]", "    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        ", "    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {", "                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"TreeifyTask.WpfSample.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   Overrides the current thread's CurrentUICulture property for all\n        ///   resource lookups using this strongly typed resource class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n    }\n}\n"]}
{"filename": "Source/TreeifyTask.WpfSample/Properties/AssemblyInfo.cs", "chunked_list": ["\ufeffusing System.Reflection;\nusing System.Resources;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\nusing System.Windows;\n\n// General Information about an assembly is controlled through the following\n// set of attributes. Change these attribute values to modify the information\n// associated with an assembly.\n[assembly: AssemblyTitle(\"TreeifyTask.Sample\")]", "// associated with an assembly.\n[assembly: AssemblyTitle(\"TreeifyTask.Sample\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"TreeifyTask.Sample\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2021\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n", "[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible\n// to COM components.  If you need to access a type in this assembly from\n// COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n\n//In order to begin building localizable applications, set\n//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file\n//inside a <PropertyGroup>.  For example, if you are using US english", "//<UICulture>CultureYouAreCodingWith</UICulture> in your .csproj file\n//inside a <PropertyGroup>.  For example, if you are using US english\n//in your source files, set the <UICulture> to en-US.  Then uncomment\n//the NeutralResourceLanguage attribute below.  Update the \"en-US\" in\n//the line below to match the UICulture setting in the project file.\n\n//[assembly: NeutralResourcesLanguage(\"en-US\", UltimateResourceFallbackLocation.Satellite)]\n\n\n[assembly: ThemeInfo(", "\n[assembly: ThemeInfo(\n    ResourceDictionaryLocation.None, //where theme specific resource dictionaries are located\n                                     //(used if a resource is not found in the page,\n                                     // or application resource dictionaries)\n    ResourceDictionaryLocation.SourceAssembly //where the generic resource dictionary is located\n                                              //(used if a resource is not found in the page,\n                                              // app, or any theme specific resource dictionaries)\n)]\n", ")]\n\n\n// Version information for an assembly consists of the following four values:\n//\n//      Major Version\n//      Minor Version\n//      Build Number\n//      Revision\n//", "//      Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers\n// by using the '*' as shown below:\n// [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "Source/TreeifyTask/TaskTree/ProgressReportingEventArgs.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace TreeifyTask\n{\n    public class ProgressReportingEventArgs : EventArgs\n    {\n        public TaskStatus TaskStatus { get; set; }\n        public double ProgressValue { get; set; }\n        public object ProgressState { get; set; }\n        public bool ChildTasksRunningInParallel { get; set; }\n    }\n", "        public object ProgressState { get; set; }\n        public bool ChildTasksRunningInParallel { get; set; }\n    }\n\n    public delegate void ProgressReportingEventHandler(object sender, ProgressReportingEventArgs eventArgs);\n}\n"]}
{"filename": "Source/TreeifyTask/TaskTree/TaskStatus.cs", "chunked_list": ["\ufeffnamespace TreeifyTask\n{\n    public enum TaskStatus\n    {\n        NotStarted,\n        InDeterminate,\n        InProgress,\n        Completed,\n        Failed,\n        Cancelled\n    }\n}\n"]}
{"filename": "Source/TreeifyTask/TaskTree/TaskNode.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TreeifyTask\n{\n    public class TaskNode : ITaskNode\n    {", "{\n    public class TaskNode : ITaskNode\n    {\n        private static Random rnd = new Random();\n        private readonly List<Task> taskObjects = new();\n        private readonly List<ITaskNode> childTasks = new();\n        private bool hasCustomAction;\n        private Func<IProgressReporter, CancellationToken, Task> action =\n            async (rep, tok) => await Task.Yield();\n        public event ProgressReportingEventHandler Reporting;\n        private bool seriesRunnerIsBusy;", "        public event ProgressReportingEventHandler Reporting;\n        private bool seriesRunnerIsBusy;\n        private bool concurrentRunnerIsBusy;\n\n        public TaskNode()\n        {\n            this.Id = rnd.Next() + string.Empty;\n            this.Reporting += OnSelfReporting;\n        }\n\n        public TaskNode(string Id)\n            : this()\n        {\n            this.Id = Id ?? rnd.Next() + string.Empty;\n        }\n\n        public TaskNode(string Id, Func<IProgressReporter, CancellationToken, Task> cancellableProgressReportingAsyncFunction)\n            : this(Id)\n        {\n            this.SetAction(cancellableProgressReportingAsyncFunction);\n        }\n\n        #region Props\n", "        public string Id { get; set; }\n        public double ProgressValue { get; private set; }\n        public object ProgressState { get; private set; }\n        public TaskStatus TaskStatus { get; private set; }\n        public ITaskNode Parent { get; set; }\n        public IEnumerable<ITaskNode> ChildTasks =>\n            this.childTasks;\n\n        #endregion Props\n\n        public void AddChild(ITaskNode childTask)\n        {\n            childTask = childTask ?? throw new ArgumentNullException(nameof(childTask));\n            childTask.Parent = this;\n            \n            // Ensure this after setting its parent as this\n            EnsureNoCycles(childTask);\n\n            childTask.Reporting += OnChildReporting;\n            childTasks.Add(childTask);\n        }\n", "        public void AddChild(ITaskNode childTask)\n        {\n            childTask = childTask ?? throw new ArgumentNullException(nameof(childTask));\n            childTask.Parent = this;\n            \n            // Ensure this after setting its parent as this\n            EnsureNoCycles(childTask);\n\n            childTask.Reporting += OnChildReporting;\n            childTasks.Add(childTask);\n        }\n", "        private class ActionReport\n        {\n            public ActionReport()\n            {\n                this.TaskStatus = TaskStatus.NotStarted;\n                this.ProgressValue = 0;\n                this.ProgressState = null;\n            }\n\n            public ActionReport(ITaskNode task)\n            {\n                this.Id = task.Id;\n                this.TaskStatus = task.TaskStatus;\n                this.ProgressState = task.ProgressState;\n                this.ProgressValue = task.ProgressValue;\n            }", "            public string Id { get; set; }\n            public TaskStatus TaskStatus { get; set; }\n            public double ProgressValue { get; set; }\n            public object ProgressState { get; set; }\n            public override string ToString()\n            {\n                return $\"Id={Id},({TaskStatus}, {ProgressValue}, {ProgressState})\";\n            }\n        }\n\n        private ActionReport selfActionReport = new();\n", "        private ActionReport selfActionReport = new();\n\n        private void OnSelfReporting(object sender, ProgressReportingEventArgs eventArgs)\n        {\n            TaskStatus = selfActionReport.TaskStatus = eventArgs.TaskStatus;\n            ProgressValue = selfActionReport.ProgressValue = eventArgs.ProgressValue;\n            ProgressState = selfActionReport.ProgressState = eventArgs.ProgressState;\n        }\n\n        private void OnChildReporting(object sender, ProgressReportingEventArgs eventArgs)\n        {\n            // Child task that reports \n            var cTask = sender as ITaskNode;\n\n            var allReports = childTasks.Select(t => new ActionReport(t));", "        private void OnChildReporting(object sender, ProgressReportingEventArgs eventArgs)\n        {\n            // Child task that reports \n            var cTask = sender as ITaskNode;\n\n            var allReports = childTasks.Select(t => new ActionReport(t));\n            if (hasCustomAction)\n            {\n                allReports = allReports.Append(selfActionReport);\n            }\n\n            this.TaskStatus = allReports.Any(v => v.TaskStatus == TaskStatus.InDeterminate) ? TaskStatus.InDeterminate : TaskStatus.InProgress;\n            this.TaskStatus = allReports.Any(v => v.TaskStatus == TaskStatus.Failed) ? TaskStatus.Failed : this.TaskStatus;\n", "            if (this.TaskStatus == TaskStatus.Failed)\n            {\n                this.ProgressState = new AggregateException($\"{Id}: One or more error occurred in child tasks.\",\n                    childTasks.Where(v => v.TaskStatus == TaskStatus.Failed && v.ProgressState is Exception)\n                        .Select(c => c.ProgressState as Exception));\n            }\n\n            this.ProgressValue = allReports.Select(t => t.ProgressValue).Average();\n\n            SafeRaiseReportingEvent(this, new ProgressReportingEventArgs\n            {\n                ProgressValue = this.ProgressValue,\n                TaskStatus = this.TaskStatus,\n                ChildTasksRunningInParallel = concurrentRunnerIsBusy,\n                ProgressState = seriesRunnerIsBusy ? cTask.ProgressState : this.ProgressState\n            });\n        }\n", "        public async Task ExecuteConcurrently(CancellationToken cancellationToken, bool throwOnError)\n        {\n            if (concurrentRunnerIsBusy || seriesRunnerIsBusy) return;\n            concurrentRunnerIsBusy = true;\n\n            ResetChildrenProgressValues();\n            foreach (var child in childTasks)\n            {\n                taskObjects.Add(child.ExecuteConcurrently(cancellationToken, throwOnError));\n            }\n\n            taskObjects.Add(ExceptionHandledAction(cancellationToken, throwOnError));", "            if (taskObjects.Any())\n            {\n                await Task.WhenAll(taskObjects);\n            }\n\n            if (throwOnError && taskObjects.Any(t => t.IsFaulted))\n            {\n                var exs = taskObjects.Where(t => t.IsFaulted).Select(t => t.Exception);\n                throw new AggregateException($\"Internal error occurred while executing task - {Id}.\", exs);\n            }\n            concurrentRunnerIsBusy = false;", "            if (TaskStatus != TaskStatus.Failed)\n            {\n                if (cancellationToken.IsCancellationRequested)\n                    Report(TaskStatus.Cancelled, 0);\n                else\n                    Report(TaskStatus.Completed, 100);\n            }\n        }\n\n        private async Task ExceptionHandledAction(CancellationToken cancellationToken, bool throwOnError)\n        {\n            try\n            {\n                await action(this, cancellationToken);\n            }", "        private async Task ExceptionHandledAction(CancellationToken cancellationToken, bool throwOnError)\n        {\n            try\n            {\n                await action(this, cancellationToken);\n            }\n            catch (OperationCanceledException)\n            {\n                // Don't throw this as an error as we have to come out of await.\n            }\n            catch (Exception ex)\n            {\n                this.Report(TaskStatus.Failed, this.ProgressValue, ex);", "            catch (Exception ex)\n            {\n                this.Report(TaskStatus.Failed, this.ProgressValue, ex);\n                if (throwOnError)\n                {\n                    throw new AggregateException($\"Internal error occurred while executing the action of task - {Id}.\", ex);\n                }\n            }\n        }\n\n        public async Task ExecuteInSeries(CancellationToken cancellationToken, bool throwOnError)\n        {", "        public async Task ExecuteInSeries(CancellationToken cancellationToken, bool throwOnError)\n        {\n            if (seriesRunnerIsBusy || concurrentRunnerIsBusy) return;\n            seriesRunnerIsBusy = true;\n\n            ResetChildrenProgressValues();\n            try\n            {\n                foreach (var child in childTasks)\n                {\n                    if (cancellationToken.IsCancellationRequested) break;\n                    await child.ExecuteInSeries(cancellationToken, throwOnError);\n                }\n                await ExceptionHandledAction(cancellationToken, throwOnError);\n            }", "                foreach (var child in childTasks)\n                {\n                    if (cancellationToken.IsCancellationRequested) break;\n                    await child.ExecuteInSeries(cancellationToken, throwOnError);\n                }\n                await ExceptionHandledAction(cancellationToken, throwOnError);\n            }\n            catch (Exception ex)\n            {\n                if (throwOnError)\n                {\n                    throw new AggregateException($\"Internal error occurred while executing task - {Id}.\", ex);\n                }\n            }\n            seriesRunnerIsBusy = false;", "                if (throwOnError)\n                {\n                    throw new AggregateException($\"Internal error occurred while executing task - {Id}.\", ex);\n                }\n            }\n            seriesRunnerIsBusy = false;\n            if (TaskStatus != TaskStatus.Failed)\n            {\n                if (cancellationToken.IsCancellationRequested)\n                    Report(TaskStatus.Cancelled, 0);\n                else\n                    Report(TaskStatus.Completed, 100);\n            }\n        }\n\n        public IEnumerable<ITaskNode> ToFlatList()\n        {\n            return FlatList(this);\n        }\n", "                if (cancellationToken.IsCancellationRequested)\n                    Report(TaskStatus.Cancelled, 0);\n                else\n                    Report(TaskStatus.Completed, 100);\n            }\n        }\n\n        public IEnumerable<ITaskNode> ToFlatList()\n        {\n            return FlatList(this);\n        }\n", "        private void SafeRaiseReportingEvent(object sender, ProgressReportingEventArgs args)\n        {\n            this.Reporting?.Invoke(sender, args);\n        }\n\n        private void ResetChildrenProgressValues()\n        {\n            taskObjects.Clear();\n            foreach (var task in childTasks)\n            {\n                task.ResetStatus();\n            }\n        }\n\n        /// <summary>\n        /// Throws <see cref=\"AsyncTasksCycleDetectedException\"/>\n         /// </summary>\n        /// <param name=\"newTask\"></param>", "            foreach (var task in childTasks)\n            {\n                task.ResetStatus();\n            }\n        }\n\n        /// <summary>\n        /// Throws <see cref=\"AsyncTasksCycleDetectedException\"/>\n         /// </summary>\n        /// <param name=\"newTask\"></param>\n        private void EnsureNoCycles(ITaskNode newTask)\n        {\n            var thisNode = this as ITaskNode;\n            HashSet<ITaskNode> hSet = new HashSet<ITaskNode>();", "        private void EnsureNoCycles(ITaskNode newTask)\n        {\n            var thisNode = this as ITaskNode;\n            HashSet<ITaskNode> hSet = new HashSet<ITaskNode>();\n            while (true)\n            {\n                if (thisNode.Parent is null)\n                {\n                    break;\n                }\n                if (hSet.Contains(thisNode))\n                {\n                    throw new TaskNodeCycleDetectedException(thisNode, newTask);\n                }\n                hSet.Add(thisNode);\n                thisNode = thisNode.Parent;\n            }\n            var existingTask = FlatList(thisNode).FirstOrDefault(t => t == newTask);", "                if (hSet.Contains(thisNode))\n                {\n                    throw new TaskNodeCycleDetectedException(thisNode, newTask);\n                }\n                hSet.Add(thisNode);\n                thisNode = thisNode.Parent;\n            }\n            var existingTask = FlatList(thisNode).FirstOrDefault(t => t == newTask);\n            if (existingTask != null)\n            {\n                throw new TaskNodeCycleDetectedException(newTask, existingTask.Parent);\n            }\n        }\n\n        private IEnumerable<ITaskNode> FlatList(ITaskNode root)\n        {\n            yield return root;", "            if (existingTask != null)\n            {\n                throw new TaskNodeCycleDetectedException(newTask, existingTask.Parent);\n            }\n        }\n\n        private IEnumerable<ITaskNode> FlatList(ITaskNode root)\n        {\n            yield return root;\n            foreach (var ct in root.ChildTasks)\n            {", "            foreach (var ct in root.ChildTasks)\n            {\n                foreach (var item in FlatList(ct))\n                    yield return item;\n            }\n        }\n\n        public void RemoveChild(ITaskNode childTask)\n        {\n            childTask.Reporting -= OnChildReporting;\n            childTasks.Remove(childTask);\n        }\n", "        public void Report(TaskStatus taskStatus, double progressValue, object progressState = null)\n        {\n            SafeRaiseReportingEvent(this, new ProgressReportingEventArgs\n            {\n                ChildTasksRunningInParallel = concurrentRunnerIsBusy,\n                TaskStatus = taskStatus,\n                ProgressValue = progressValue,\n                ProgressState = progressState\n            });\n        }\n", "        public void SetAction(Func<IProgressReporter, CancellationToken, Task> cancellableProgressReportingAction)\n        {\n            cancellableProgressReportingAction = cancellableProgressReportingAction ??\n                throw new ArgumentNullException(nameof(cancellableProgressReportingAction));\n            hasCustomAction = true;\n            action = cancellableProgressReportingAction;\n        }\n\n        public void ResetStatus()\n        {\n            this.TaskStatus = TaskStatus.NotStarted;\n            this.ProgressState = null;\n            this.ProgressValue = 0;\n        }\n", "        public void ResetStatus()\n        {\n            this.TaskStatus = TaskStatus.NotStarted;\n            this.ProgressState = null;\n            this.ProgressValue = 0;\n        }\n\n        public override string ToString()\n        {\n            return $\"Id={Id},({TaskStatus}, {ProgressValue}, {ProgressState})\";\n        }\n    }\n}\n"]}
{"filename": "Source/TreeifyTask/TaskTree/IProgressReporter.cs", "chunked_list": ["\ufeffnamespace TreeifyTask\n{\n    public interface IProgressReporter\n    {\n        void Report(TaskStatus taskStatus, double progressValue, object progressState = default);\n        event ProgressReportingEventHandler Reporting;\n    }\n}\n"]}
{"filename": "Source/TreeifyTask/TaskTree/TaskNodeCycleDetectedException.cs", "chunked_list": ["\ufeffusing System;\nusing System.Runtime.Serialization;\n\nnamespace TreeifyTask\n{\n    [Serializable]\n    public class TaskNodeCycleDetectedException : Exception\n    {\n        public ITaskNode NewTask { get; }\n        public ITaskNode ParentTask { get; }\n", "        public ITaskNode NewTask { get; }\n        public ITaskNode ParentTask { get; }\n\n        public string MessageStr { get; private set; }\n\n        public TaskNodeCycleDetectedException()\n            : base(\"Cycle detected in the task tree.\")\n        {\n        }\n\n        public TaskNodeCycleDetectedException(ITaskNode newTask, ITaskNode parentTask)\n            : base($\"Task '{newTask?.Id}' was already added as a child to task tree of '{parentTask?.Id}'.\")\n        {\n            this.NewTask = newTask;\n            this.ParentTask = parentTask;\n        }\n\n        public TaskNodeCycleDetectedException(string message) : base(message)\n        {\n        }\n\n        public TaskNodeCycleDetectedException(string message, Exception innerException) : base(message, innerException)\n        {\n        }\n\n        protected TaskNodeCycleDetectedException(SerializationInfo info, StreamingContext context) : base(info, context)\n        {\n        }\n    }\n}"]}
{"filename": "Source/TreeifyTask/TaskTree/ITaskNode.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TreeifyTask\n{\n    public interface ITaskNode : IProgressReporter\n    {\n        string Id { get; set; }\n        double ProgressValue { get; }\n        object ProgressState { get; }\n        ITaskNode Parent { get; set; }\n        IEnumerable<ITaskNode> ChildTasks { get; }\n        TaskStatus TaskStatus { get; }\n        void SetAction(Func<IProgressReporter, CancellationToken, Task> cancellableProgressReportingAsyncFunction);\n        Task ExecuteInSeries(CancellationToken cancellationToken, bool throwOnError);\n        Task ExecuteConcurrently(CancellationToken cancellationToken, bool throwOnError);\n        void AddChild(ITaskNode childTask);\n        void RemoveChild(ITaskNode childTask);\n        void ResetStatus();\n        IEnumerable<ITaskNode> ToFlatList();\n    }\n}\n"]}
{"filename": "Test/TreeifyTask.Test/TaskNodeTest.cs", "chunked_list": ["using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing TreeifyTask;\nusing System.Linq;\n\nnamespace TreeifyTask.Test\n{\n    [TestClass]\n    public class TaskNodeTest\n    {\n        [TestMethod]\n        [ExpectedException(typeof(TaskNodeCycleDetectedException))]", "        public void TestCycleDetection()\n        {\n            var t1 = new TaskNode(\"t1\");\n            var t2 = new TaskNode(\"t2\");\n            var t3 = new TaskNode(\"t3\");\n            var t4 = new TaskNode(\"t4\");\n            t1.AddChild(t2);\n            t2.AddChild(t3);\n            t2.AddChild(t4);\n            t3.AddChild(t4);\n        }\n\n        [TestMethod]\n        [ExpectedException(typeof(TaskNodeCycleDetectedException))]", "        public void TestCycleDetectionUsingParent()\n        {\n            var t1 = new TaskNode(\"t1\");\n            var t2 = new TaskNode(\"t2\");\n            var t3 = new TaskNode(\"t3\");\n            var t4 = new TaskNode(\"t4\");\n            t1.AddChild(t2);\n            t2.AddChild(t3);\n            t2.AddChild(t4);\n            // Create a loop by adding root as t4's child. \n            t4.AddChild(t1);\n        }\n\n        [TestMethod]", "        public void TestFlatList()\n        {\n            var t1 = new TaskNode(\"t1\");\n            var t2 = new TaskNode(\"t2\");\n            var t3 = new TaskNode(\"t3\");\n            var t4 = new TaskNode(\"t4\");\n            t2.AddChild(t1);\n            t1.AddChild(t3);\n            t3.AddChild(t4);\n\n            var fromT2 = t2.ToFlatList().ToArray();\n            Assert.IsNotNull(fromT2);\n            Assert.AreEqual(4, fromT2.Length);\n\n            var fromT1 = t1.ToFlatList().ToArray();\n            Assert.IsNotNull(fromT1);\n            Assert.AreEqual(3, fromT1.Length);\n        }\n    }\n}\n"]}
