{"filename": "ProcessManager/Program.cs", "chunked_list": ["\ufeffusing ProcessManager.Managers;\nusing ProcessManager.Providers;\nusing System.Diagnostics;\nusing System.Management;\n\nnamespace ProcessManager\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            ILogProvider logProvider = new LogProvider();\n            IConfigProvider configProvider = new ConfigProvider(logProvider);\n            using ILassoManager lassoManager = new LassoManager(configProvider, logProvider);\n\n            Console.WriteLine(\"Initializing ProcessManager...\");\n\n            lassoManager.Setup();\n\n            Console.WriteLine(\"Finished initializing.\");\n\n            Console.WriteLine(\"Type 'q' to Exit.\");\n\n            string input = Console.ReadLine();", "            while (input != \"q\")\n            {\n                input = Console.ReadLine();\n            }\n\n            Console.WriteLine(\"Exiting ProcessManager.\");\n        }\n    }\n}"]}
{"filename": "ProcessManager/Managers/LassoManager.cs", "chunked_list": ["\ufeffusing LassoProcessManager.Models.Rules;\nusing ProcessManager.Models.Configs;\nusing ProcessManager.Providers;\nusing System.Diagnostics;\nusing System.Management;\n\nnamespace ProcessManager.Managers\n{\n    public class LassoManager : ILassoManager\n    {\n        private Dictionary<string, LassoProfile> lassoProfiles;\n        private List<BaseRule> rules;", "    public class LassoManager : ILassoManager\n    {\n        private Dictionary<string, LassoProfile> lassoProfiles;\n        private List<BaseRule> rules;\n        private ManagerConfig config;\n        private ManagementEventWatcher processStartEvent;\n\n        private IConfigProvider ConfigProvider { get; set; }\n        private ILogProvider LogProvider { get; set; }\n\n        public LassoManager(IConfigProvider configProvider, ILogProvider logProvider)\n        {\n            ConfigProvider = configProvider;\n            LogProvider = logProvider;\n        }\n", "        private ILogProvider LogProvider { get; set; }\n\n        public LassoManager(IConfigProvider configProvider, ILogProvider logProvider)\n        {\n            ConfigProvider = configProvider;\n            LogProvider = logProvider;\n        }\n\n        public void Dispose()\n        {\n            if (processStartEvent != null) \n            {\n                processStartEvent.EventArrived -= ProcessStartEvent_EventArrived;\n                processStartEvent.Dispose();\n                processStartEvent = null;\n            }\n        }\n", "        public void Dispose()\n        {\n            if (processStartEvent != null) \n            {\n                processStartEvent.EventArrived -= ProcessStartEvent_EventArrived;\n                processStartEvent.Dispose();\n                processStartEvent = null;\n            }\n        }\n\n        public bool Setup()\n        {\n            try\n            {\n                LoadConfig();\n                SetupProfilesForAllProcesses();\n                SetupEventWatcher();\n            }\n            catch\n            {\n                LogProvider.Log(\"Exception with initial setup. Cannot continue. Check for errors.\");\n            }\n            return false;\n        }\n", "        public bool Setup()\n        {\n            try\n            {\n                LoadConfig();\n                SetupProfilesForAllProcesses();\n                SetupEventWatcher();\n            }\n            catch\n            {\n                LogProvider.Log(\"Exception with initial setup. Cannot continue. Check for errors.\");\n            }\n            return false;\n        }\n", "        private void LoadConfig()\n        {\n            config = ConfigProvider.GetManagerConfig();\n            rules = ConfigProvider.GetRules();\n            lassoProfiles = ConfigProvider.GetLassoProfiles();\n        }\n\n        private void SetupProfilesForAllProcesses()\n        {\n            int failCount = 0;\n            Dictionary<string, int> successCount = new Dictionary<string, int>();", "            foreach (var process in Process.GetProcesses())\n            {\n                LassoProfile lassoProfile = GetLassoProfileForProcess(process);\n                bool success = TrySetProcessProfile(process, lassoProfile, out string profileName);\n                if (success)\n                {\n                    if (!successCount.ContainsKey(profileName))\n                    {\n                        successCount[profileName] = 1;\n                    }\n                    else\n                    {\n                        successCount[profileName]++;\n                    }\n                }\n                else\n                {\n                    failCount++; \n                }\n            }\n\n            LogProvider.Log(string.Join(\". \", successCount.Select(e => $\"{e.Key}: {e.Value} processes\")));\n            LogProvider.Log($\"{failCount} processes failed to set profile.\");\n        }\n", "        private bool TrySetProcessProfile(Process process, LassoProfile lassoProfile, out string profileName)\n        {\n            if (process is null)\n            {\n                profileName = null;\n                return false;\n            }\n\n            if (lassoProfile is null)\n            {\n                LogProvider.Log($\"No profile applied on Process '{process.ProcessName}' (ID:{process.Id}).\");\n                profileName = null;\n                return false;\n            }\n\n            try\n            {   \n                process.ProcessorAffinity = (IntPtr)lassoProfile.GetAffinityMask();\n\n                LogProvider.Log($\"Applied profile '{lassoProfile.Name}' on Process '{process.ProcessName}' (ID:{process.Id}).\");\n                profileName = lassoProfile.Name;\n                return true;\n            }", "            if (lassoProfile is null)\n            {\n                LogProvider.Log($\"No profile applied on Process '{process.ProcessName}' (ID:{process.Id}).\");\n                profileName = null;\n                return false;\n            }\n\n            try\n            {   \n                process.ProcessorAffinity = (IntPtr)lassoProfile.GetAffinityMask();\n\n                LogProvider.Log($\"Applied profile '{lassoProfile.Name}' on Process '{process.ProcessName}' (ID:{process.Id}).\");\n                profileName = lassoProfile.Name;\n                return true;\n            }", "            catch (Exception ex)\n            {\n                LogProvider.Log($\"Failed to set profile for Process '{process.ProcessName}' (ID:{process.Id}).\");\n                profileName = null;\n                return false;\n            }\n        }\n\n        private LassoProfile GetLassoProfileForProcess(Process process)\n        {\n            var matchingRule = rules.Where(e => e.IsMatchForRule(process)).FirstOrDefault();\n", "        private LassoProfile GetLassoProfileForProcess(Process process)\n        {\n            var matchingRule = rules.Where(e => e.IsMatchForRule(process)).FirstOrDefault();\n\n            if (matchingRule is { })\n            {\n                string profileName = matchingRule.Profile;\n                if (lassoProfiles.ContainsKey(profileName))\n                {\n                    return lassoProfiles[profileName];\n                }\n            }\n", "            if (config.AutoApplyDefaultProfile)\n            {\n                return lassoProfiles[config.DefaultProfile];\n            }\n\n            return null;\n        }\n\n        private void SetupEventWatcher()\n        {\n            processStartEvent = new ManagementEventWatcher(\"SELECT * FROM Win32_ProcessStartTrace\");\n            processStartEvent.EventArrived += ProcessStartEvent_EventArrived;\n            processStartEvent.Start();\n        }\n", "        private void SetupEventWatcher()\n        {\n            processStartEvent = new ManagementEventWatcher(\"SELECT * FROM Win32_ProcessStartTrace\");\n            processStartEvent.EventArrived += ProcessStartEvent_EventArrived;\n            processStartEvent.Start();\n        }\n\n        private async void ProcessStartEvent_EventArrived(object sender, EventArrivedEventArgs e)\n        {\n            try\n            {\n                int processId = Convert.ToInt32(e.NewEvent.Properties[\"ProcessID\"].Value);\n                var process = Process.GetProcessById(processId);\n\n                LassoProfile lassoProfile = GetLassoProfileForProcess(process);\n\n                // Delay setting the profile if delay is defined", "                if (lassoProfile.DelayMS > 0)\n                {\n                    await Task.Delay(lassoProfile.DelayMS);\n                }\n\n                TrySetProcessProfile(process, lassoProfile, out _);\n            }\n            catch { }\n        }\n    }\n}\n"]}
{"filename": "ProcessManager/Managers/ILassoManager.cs", "chunked_list": ["\ufeffnamespace ProcessManager.Managers\n{\n    public interface ILassoManager : IDisposable\n    {\n        bool Setup();\n    }\n}\n"]}
{"filename": "ProcessManager/Models/Rules/BaseRule.cs", "chunked_list": ["\ufeffusing System.Diagnostics;\n\nnamespace LassoProcessManager.Models.Rules\n{\n    public abstract class BaseRule\n    {\n        /// <summary>\n        /// Lasso Profile name for the rule to use.\n        /// </summary>\n        public string Profile { get; set; }\n", "        public string Profile { get; set; }\n\n        public abstract bool IsMatchForRule(Process process);\n    }\n}\n"]}
{"filename": "ProcessManager/Models/Rules/FolderRule.cs", "chunked_list": ["\ufeffusing System.Diagnostics;\n\nnamespace LassoProcessManager.Models.Rules\n{\n    public class FolderRule : BaseRule\n    {\n        public string FolderPath { get; set; }\n\n        public override bool IsMatchForRule(Process process)\n        {\n            try\n            {\n                return process.MainModule.FileName.StartsWith(FolderPath);\n            }\n            catch { }\n            return false;\n        }\n    }\n}\n", "        public override bool IsMatchForRule(Process process)\n        {\n            try\n            {\n                return process.MainModule.FileName.StartsWith(FolderPath);\n            }\n            catch { }\n            return false;\n        }\n    }\n}\n"]}
{"filename": "ProcessManager/Models/Rules/ProcessRule.cs", "chunked_list": ["\ufeffusing System.Diagnostics;\n\nnamespace LassoProcessManager.Models.Rules\n{\n    public class ProcessRule : BaseRule\n    {\n        public string ProcessName { get; set; }\n\n        public override bool IsMatchForRule(Process process)\n        {\n            return process.ProcessName.Equals(ProcessName);\n        }\n    }\n}\n", "        public override bool IsMatchForRule(Process process)\n        {\n            return process.ProcessName.Equals(ProcessName);\n        }\n    }\n}\n"]}
{"filename": "ProcessManager/Models/Configs/LassoProfile.cs", "chunked_list": ["\ufeffnamespace ProcessManager.Models.Configs\n{\n    public class LassoProfile\n    {\n        private UInt64 affinityMask;\n\n        public string Name { get; set; }\n\n        public string Description { get; set; }\n\n        /// <summary>\n        /// Hex string format of processor affinity mask.\n        /// </summary>", "        public string Description { get; set; }\n\n        /// <summary>\n        /// Hex string format of processor affinity mask.\n        /// </summary>\n        public string AffinityMaskHex { get; set; }\n\n        /// <summary>\n        /// Delay in milliseconds for setting profile.\n        /// </summary>\n        public int DelayMS { get; set; }\n\n        /// <summary>\n        /// Get Parsed affinity mask in UInt64.\n        /// </summary>\n        /// <returns></returns>", "        public int DelayMS { get; set; }\n\n        /// <summary>\n        /// Get Parsed affinity mask in UInt64.\n        /// </summary>\n        /// <returns></returns>\n        public UInt64 GetAffinityMask()\n        {\n            if (affinityMask == 0)\n            {\n                affinityMask = Convert.ToUInt64(AffinityMaskHex, 16);\n            }\n\n            return affinityMask;\n        }\n    }\n}\n", "            if (affinityMask == 0)\n            {\n                affinityMask = Convert.ToUInt64(AffinityMaskHex, 16);\n            }\n\n            return affinityMask;\n        }\n    }\n}\n"]}
{"filename": "ProcessManager/Models/Configs/ManagerConfig.cs", "chunked_list": ["\ufeffusing LassoProcessManager.Models.Rules;\n\nnamespace ProcessManager.Models.Configs\n{\n    public class ManagerConfig\n    {\n        /// <summary>\n        /// Indicates to auto apply default profile for processes when no profiles are assigned.\n        /// </summary>\n        public bool AutoApplyDefaultProfile { get; set; }\n\n        /// <summary>\n        /// Default lasso profile.\n        /// </summary>", "        public bool AutoApplyDefaultProfile { get; set; }\n\n        /// <summary>\n        /// Default lasso profile.\n        /// </summary>\n        public string DefaultProfile { get; set; }\n\n        /// <summary>\n        /// Available Lasso profiles.\n        /// </summary>\n        public LassoProfile[] Profiles { get; set; }\n\n        /// <summary>\n        /// List of process rules.\n        /// </summary>\n        public ProcessRule[] ProcessRules { get; set; }\n\n        /// <summary>\n        /// List of folders rules.\n        /// </summary>\n        public FolderRule[] FolderRules { get; set; }\n    }\n}\n"]}
{"filename": "ProcessManager/Providers/IConfigProvider.cs", "chunked_list": ["\ufeffusing LassoProcessManager.Models.Rules;\nusing ProcessManager.Models.Configs;\n\nnamespace ProcessManager.Providers\n{\n    public interface IConfigProvider\n    {\n        /// <summary>\n        /// Read the config files.\n        /// </summary>\n        /// <returns></returns>\n        ManagerConfig GetManagerConfig();\n\n        /// <summary>\n        /// Geth the list of lasso rules.\n        /// </summary>\n        /// <returns></returns>\n        List<BaseRule> GetRules();\n\n        Dictionary<string, LassoProfile> GetLassoProfiles();\n    }\n}\n"]}
{"filename": "ProcessManager/Providers/LogProvider.cs", "chunked_list": ["\ufeffnamespace ProcessManager.Providers\n{\n    public class LogProvider : ILogProvider\n    {\n        public void Log(string message)\n        {\n            Console.WriteLine(message);\n        }\n    }\n}\n"]}
{"filename": "ProcessManager/Providers/ConfigProvider.cs", "chunked_list": ["\ufeffusing LassoProcessManager.Models.Rules;\nusing Newtonsoft.Json;\nusing ProcessManager.Models.Configs;\nusing System.Reflection;\n\nnamespace ProcessManager.Providers\n{\n    public class ConfigProvider : IConfigProvider\n    {\n        private const string ConfigFileName = \"Config.json\";\n        private ManagerConfig managerConfig;\n", "        private const string ConfigFileName = \"Config.json\";\n        private ManagerConfig managerConfig;\n\n        private ILogProvider LogProvider { get; set; }\n\n        public ConfigProvider(ILogProvider logProvider)\n            => this.LogProvider = logProvider;\n\n        public ManagerConfig GetManagerConfig()\n        {\n            if (managerConfig != null)\n                return managerConfig;\n\n            string configPath = GetConfigFilePath();\n            try\n            {\n                managerConfig = JsonConvert.DeserializeObject<ManagerConfig>(File.ReadAllText(GetConfigFilePath()));\n                return managerConfig;\n            }\n            catch\n            {\n                LogProvider.Log($\"Failed to load config at '{configPath}'.\");\n            }\n\n            return null;\n        }\n\n        public List<BaseRule> GetRules()\n        {\n            List<BaseRule> rules = new List<BaseRule>();\n            rules.AddRange(managerConfig.ProcessRules);\n            rules.AddRange(managerConfig.FolderRules);\n\n            return rules;\n        }\n\n        public Dictionary<string, LassoProfile> GetLassoProfiles()\n        {\n            Dictionary<string, LassoProfile> lassoProfiles = new Dictionary<string, LassoProfile>();\n\n            // Load lasso profiles", "        public ManagerConfig GetManagerConfig()\n        {\n            if (managerConfig != null)\n                return managerConfig;\n\n            string configPath = GetConfigFilePath();\n            try\n            {\n                managerConfig = JsonConvert.DeserializeObject<ManagerConfig>(File.ReadAllText(GetConfigFilePath()));\n                return managerConfig;\n            }\n            catch\n            {\n                LogProvider.Log($\"Failed to load config at '{configPath}'.\");\n            }\n\n            return null;\n        }\n\n        public List<BaseRule> GetRules()\n        {\n            List<BaseRule> rules = new List<BaseRule>();\n            rules.AddRange(managerConfig.ProcessRules);\n            rules.AddRange(managerConfig.FolderRules);\n\n            return rules;\n        }\n\n        public Dictionary<string, LassoProfile> GetLassoProfiles()\n        {\n            Dictionary<string, LassoProfile> lassoProfiles = new Dictionary<string, LassoProfile>();\n\n            // Load lasso profiles", "            foreach (var profile in managerConfig.Profiles)\n            {\n                if (!lassoProfiles.ContainsKey(profile.Name))\n                {\n                    lassoProfiles.Add(profile.Name, profile);\n                }\n            }\n\n            return lassoProfiles;\n        }\n", "        private string GetConfigFilePath()\n            => Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location), ConfigFileName);\n    }\n}\n"]}
{"filename": "ProcessManager/Providers/ILogProvider.cs", "chunked_list": ["\ufeffnamespace ProcessManager.Providers\n{\n    public interface ILogProvider\n    {\n        /// <summary>\n        /// Simple log function.\n        /// </summary>\n        /// <param name=\"message\"></param>\n        void Log(string message);\n    }\n}\n"]}
