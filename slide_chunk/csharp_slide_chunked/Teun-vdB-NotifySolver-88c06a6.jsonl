{"filename": "NativeMethods.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace it.Actions\n{\n    internal static class NativeMethods\n    {\n        [DllImport(\"User32.dll\", CharSet = CharSet.Auto)]\n        [return: MarshalAs(UnmanagedType.Bool)]", "{\n    internal static class NativeMethods\n    {\n        [DllImport(\"User32.dll\", CharSet = CharSet.Auto)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        private static extern bool ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);\n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\n        private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\n\n        [DllImport(\"User32.dll\")]", "        private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\n\n        [DllImport(\"User32.dll\")]\n        private static extern int SetClipboardViewer(int hWndNewViewer);\n    }\n}\n"]}
{"filename": "Bootstrap.cs", "chunked_list": ["using System;\n\nnamespace it\n{\n    using it.Actions;\n    using Microsoft.Extensions.DependencyInjection;\n    using Microsoft.Win32;\n    using System.Collections.Generic;\n    using System.Drawing;\n    using System.Linq;", "    using System.Drawing;\n    using System.Linq;\n    using System.Reflection;\n    using System.Web.Services.Description;\n    using System.Windows;\n    using System.Windows.Forms;\n\n    /// <summary>\n    /// The bootstrap class is provided to allow the application to run with out a form. We can use\n    /// a form however in the future by adding it to here.\n    /// </summary>", "    /// The bootstrap class is provided to allow the application to run with out a form. We can use\n    /// a form however in the future by adding it to here.\n    /// </summary>\n    internal sealed class Bootstrap : IDisposable\n    {\n        private readonly ClipboardMonitor clipboardMonitor = new ClipboardMonitor();\n\n        private readonly ControlContainer container = new ControlContainer();\n\n        private readonly NotifyIcon notifyIcon;\n", "        private readonly NotifyIcon notifyIcon;\n\n        private readonly List<Question> questionList = Questions.LoadQuestions();\n\n        private bool clipboardPaused = false;\n\n        private bool disposed = false;\n\n        private IntPtr handle;\n\n        private bool notifyPaused = false;\n\n        // Container to hold the actions", "        private IntPtr handle;\n\n        private bool notifyPaused = false;\n\n        // Container to hold the actions\n        private ServiceProvider serviceProvider;\n\n        public Bootstrap()\n        {\n            notifyIcon = new NotifyIcon(container)\n            {\n                Visible = true,\n            };\n\n            ConfigureDependancies();\n\n            clipboardMonitor.ClipboardChanged += ClipboardMonitor_ClipboardChanged;\n        }\n\n        ~Bootstrap()\n        {\n            Dispose(false);\n        }\n", "        public void Dispose()\n        {\n            Dispose(true);\n            GC.SuppressFinalize(this);\n        }\n\n        internal static void EnsureWindowStartup(bool isStartingWithWindows)\n        {\n            const string keyName = \"Clipboard Assistant\";\n            using (\n            RegistryKey key = Registry.CurrentUser.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", true))\n            {", "            using (\n            RegistryKey key = Registry.CurrentUser.OpenSubKey(@\"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\", true))\n            {\n                if (key is null)\n                {\n                    return;\n                }\n\n                string value = key.GetValue(keyName, null) as string;\n\n                if (isStartingWithWindows)\n                {\n                    // key doesn't exist, add it", "                if (isStartingWithWindows)\n                {\n                    // key doesn't exist, add it\n                    if (string.IsNullOrWhiteSpace(value) && string.Equals(value, Assembly.GetExecutingAssembly().Location, StringComparison.Ordinal))\n                    {\n                        key.SetValue(keyName, Assembly.GetExecutingAssembly().Location);\n                    }\n                }\n                else if (!string.IsNullOrWhiteSpace(value))\n                {\n                    key.DeleteValue(keyName);\n                }\n            }\n        }\n\n        internal void Startup(string clipboardText)\n        {\n        }\n\n        [System.Runtime.InteropServices.DllImport(\"Kernel32\")]", "                else if (!string.IsNullOrWhiteSpace(value))\n                {\n                    key.DeleteValue(keyName);\n                }\n            }\n        }\n\n        internal void Startup(string clipboardText)\n        {\n        }\n\n        [System.Runtime.InteropServices.DllImport(\"Kernel32\")]", "        private static extern Boolean CloseHandle(IntPtr handle);\n\n        private static string GetClipboardText(string clipboardText)\n        {\n            return clipboardText;\n        }\n\n        private void ClipboardMonitor_ClipboardChanged(object sender, ClipboardChangedEventArgs e)\n        {\n            // retrieve the text from the clipboard\n            if (e.DataObject.GetData(System.Windows.DataFormats.Text) is string clipboardText)\n            {\n                // the data is not a string. bail.", "            if (e.DataObject.GetData(System.Windows.DataFormats.Text) is string clipboardText)\n            {\n                // the data is not a string. bail.\n                if (string.IsNullOrWhiteSpace(clipboardText))\n                {\n                    return;\n                }\n                if (clipboardPaused)\n                {\n                    if (clipboardText.Equals(\"hervat\") || clipboardText.Equals(\"resume\"))\n                    {\n                        clipboardPaused = false;\n                    }\n                    return;\n                }", "                    if (clipboardText.Equals(\"hervat\") || clipboardText.Equals(\"resume\"))\n                    {\n                        clipboardPaused = false;\n                    }\n                    return;\n                }\n                if (clipboardText.Equals(\"pauze\") || clipboardText.Equals(\"pause\"))\n                {\n                    clipboardPaused = true;\n                    return;\n                }\n\n                // if we get to here, we have text\n                ProcessClipboardText(clipboardText);\n            }\n        }\n", "        private void ConfigureDependancies()\n        {\n            // Add configure services\n            Microsoft.Extensions.DependencyInjection.ServiceCollection serviceDescriptors = new Microsoft.Extensions.DependencyInjection.ServiceCollection();\n            _ = serviceDescriptors.AddSingleton<IAction, CurrencyConversion>();\n            _ = serviceDescriptors.AddSingleton<IAction, ConvertActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, TryRomanActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, CountdownActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, DeviceActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, RandomActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, StopwatchActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, TimespanActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, numberToHex>();\n            _ = serviceDescriptors.AddSingleton<IAction, desktopCleaner>();\n            _ = serviceDescriptors.AddSingleton<IAction, TimezoneActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, BmiActions>();\n            _ = serviceDescriptors.AddSingleton<IAction, tryBinary>();\n            _ = serviceDescriptors.AddSingleton<IAction, Currency>();\n            _ = serviceDescriptors.AddSingleton<IAction, Wallpaper>();\n            _ = serviceDescriptors.AddSingleton<IAction, autoClicker>();\n            _ = serviceDescriptors.AddSingleton<IAction, timeCalculations>();\n\n            //_ = serviceDescriptors.AddSingleton<IAction, Weatherforecast>();\n            _ = serviceDescriptors.AddSingleton<IAction, MathActions>();\n            (serviceProvider as IDisposable)?.Dispose();\n            serviceProvider = serviceDescriptors.BuildServiceProvider();\n        }\n", "        private void Dispose(bool disposing)\n        {\n            if (disposed)\n            {\n                return;\n            }\n            if (disposing)\n            {\n                (serviceProvider as IDisposable)?.Dispose();\n                notifyIcon?.Dispose();\n                notifyIcon.Icon?.Dispose();\n                container?.Dispose();\n                clipboardMonitor?.Dispose();\n            }\n            CloseHandle(handle);\n            handle = IntPtr.Zero;\n            disposed = true;\n        }\n", "        private IAction GetService(string clipboardText)\n        {\n            return serviceProvider.GetServices<IAction>().FirstOrDefault(s => s.Matches(GetClipboardText(clipboardText)));\n        }\n\n        private void ProcessClipboardText(string clipboardText)\n        {\n            if (clipboardText is null)\n            {\n                throw new ArgumentNullException(nameof(clipboardText));\n            }\n", "            if (notifyPaused)\n            {\n                if (clipboardText.Equals(\"show notifications\") || clipboardText.Equals(\"toon notificaties\") || clipboardText.Equals(\"toon\") || clipboardText.Equals(\"show\"))\n                {\n                    notifyPaused = false;\n                }\n                return;\n            }\n            if (clipboardText.Equals(\"hide notifications\") || clipboardText.Equals(\"verberg notificaties\") || clipboardText.Equals(\"verberg\") || clipboardText.Equals(\"hide\"))\n            {\n                notifyPaused = true;\n            }\n            try\n            {\n                IAction service = GetService(clipboardText);", "            if (clipboardText.Equals(\"hide notifications\") || clipboardText.Equals(\"verberg notificaties\") || clipboardText.Equals(\"verberg\") || clipboardText.Equals(\"hide\"))\n            {\n                notifyPaused = true;\n            }\n            try\n            {\n                IAction service = GetService(clipboardText);\n                if (service is object)\n                {\n                    clipboardMonitor.ClipboardChanged -= ClipboardMonitor_ClipboardChanged;\n                    ActionResult actionResult = service.TryExecute(clipboardText);\n                    clipboardMonitor.ClipboardChanged += ClipboardMonitor_ClipboardChanged;\n\n                    // re attach the event", "                    if (!string.IsNullOrWhiteSpace(actionResult.Title) || !string.IsNullOrWhiteSpace(actionResult.Description))\n                    {\n                        ProcessResult(actionResult, clipboardText);\n                    }\n                    return;\n                }\n                if (clipboardText.Length > 2)\n                {\n                    {\n                        for (int i = 0; i < questionList.Count; i++)\n                        {\n                            Question question = questionList[i];", "                        for (int i = 0; i < questionList.Count; i++)\n                        {\n                            Question question = questionList[i];\n                            if (question.Text.Contains(clipboardText))\n                            {\n                                ProcessResult(new ActionResult(question.Text, question.Answer), clipboardText);\n                                return;\n                            }\n                        }\n                    }\n                }\n            }", "            catch (Exception ex)\n            {\n                _ = System.Windows.Forms.MessageBox.Show(ex.ToString());\n            }\n        }\n\n        private void ProcessResult(ActionResult actionResult, string clipboardText)\n        {\n            notifyIcon.Icon = SystemIcons.Exclamation;\n            notifyIcon.BalloonTipTitle = actionResult.Title;\n            notifyIcon.BalloonTipText = actionResult.Description;\n            notifyIcon.BalloonTipIcon = ToolTipIcon.Error;", "            if (!notifyPaused)\n            {\n                notifyIcon.ShowBalloonTip(1000);\n            }\n        }\n    }\n}\n"]}
{"filename": "FastDirectoryEnumerator.cs", "chunked_list": ["\ufeffusing Microsoft.Win32.SafeHandles;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Runtime.ConstrainedExecution;\nusing System.Runtime.InteropServices;\nusing System.Security.Permissions;\n\n/// <summary>\n/// A fast enumerator of files in a directory. Use this if you need to get attributes for all files", "/// <summary>\n/// A fast enumerator of files in a directory. Use this if you need to get attributes for all files\n/// in a directory.\n/// </summary>\npublic static class FastDirectoryEnumerator\n{\n    /// <summary>\n    /// Gets <see cref=\"FileData\" /> for all the files in a directory.\n    /// </summary>\n    /// <param name=\"path\">\n    /// The path to search.\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"IEnumerable{FileData}\" />\n    /// </returns>", "    public static IEnumerable<FileData> EnumerateFiles(string path)\n    {\n        return FastDirectoryEnumerator.EnumerateFiles(path, \"*\");\n    }\n\n    /// <summary>\n    /// Gets <see cref=\"FileData\" /> for all the files in a directory that match a specific filter.\n    /// </summary>\n    /// <param name=\"path\">\n    /// The path to search.\n    /// </param>\n    /// <param name=\"searchPattern\">\n    /// The search string to match against files in the path.\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"IEnumerable{FileData}\" />\n    /// </returns>", "    public static IEnumerable<FileData> EnumerateFiles(string path, string searchPattern)\n    {\n        return FastDirectoryEnumerator.EnumerateFiles(path, searchPattern, SearchOption.TopDirectoryOnly);\n    }\n\n    /// <summary>\n    /// Gets <see cref=\"FileData\" /> for all the files in a directory that match a specific filter,\n    /// optionally including all sub directories.\n    /// </summary>\n    /// <param name=\"path\">\n    /// The path to search.\n    /// </param>\n    /// <param name=\"searchPattern\">\n    /// The search string to match against files in the path.\n    /// </param>\n    /// <param name=\"searchOption\">\n    /// The searchOption <see cref=\"SearchOption\" />\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"IEnumerable{FileData}\" />\n    /// </returns>", "    public static IEnumerable<FileData> EnumerateFiles(string path, string searchPattern, SearchOption searchOption)\n    {\n        if (path == null)\n        {\n            throw new ArgumentNullException(\"path\");\n        }\n        if (searchPattern == null)\n        {\n            throw new ArgumentNullException(\"searchPattern\");\n        }\n        if ((searchOption != SearchOption.TopDirectoryOnly) && (searchOption != SearchOption.AllDirectories))\n        {\n            throw new ArgumentOutOfRangeException(\"searchOption\");\n        }\n\n        string fullPath = Path.GetFullPath(path);\n\n        return new FileEnumerable(fullPath, searchPattern, searchOption);\n    }\n\n    /// <summary>\n    /// Gets <see cref=\"FileData\" /> for all the files in a directory that match a specific filter.\n    /// </summary>\n    /// <param name=\"path\">\n    /// The path to search.\n    /// </param>\n    /// <param name=\"searchPattern\">\n    /// The search string to match against files in the path.\n    /// </param>\n    /// <param name=\"searchOption\">\n    /// The searchOption <see cref=\"SearchOption\" />\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"FileData[]\" />\n    /// </returns>", "        if ((searchOption != SearchOption.TopDirectoryOnly) && (searchOption != SearchOption.AllDirectories))\n        {\n            throw new ArgumentOutOfRangeException(\"searchOption\");\n        }\n\n        string fullPath = Path.GetFullPath(path);\n\n        return new FileEnumerable(fullPath, searchPattern, searchOption);\n    }\n\n    /// <summary>\n    /// Gets <see cref=\"FileData\" /> for all the files in a directory that match a specific filter.\n    /// </summary>\n    /// <param name=\"path\">\n    /// The path to search.\n    /// </param>\n    /// <param name=\"searchPattern\">\n    /// The search string to match against files in the path.\n    /// </param>\n    /// <param name=\"searchOption\">\n    /// The searchOption <see cref=\"SearchOption\" />\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"FileData[]\" />\n    /// </returns>", "    public static FileData[] GetFiles(string path, string searchPattern, SearchOption searchOption)\n    {\n        IEnumerable<FileData> e = FastDirectoryEnumerator.EnumerateFiles(path, searchPattern, searchOption);\n        List<FileData> list = new List<FileData>(e);\n\n        FileData[] retval = new FileData[list.Count];\n        list.CopyTo(retval);\n\n        return retval;\n    }\n\n    /// <summary>\n    /// Provides the implementation of the <see cref=\"T:System.Collections.Generic.IEnumerable`1\" /> interface\n    /// </summary>", "    private class FileEnumerable : IEnumerable<FileData>\n    {\n        /// <summary>\n        /// Defines the m_filter\n        /// </summary>\n        private readonly string m_filter;\n\n        /// <summary>\n        /// Defines the m_path\n        /// </summary>\n        private readonly string m_path;\n\n        /// <summary>\n        /// Defines the m_searchOption\n        /// </summary>", "        private readonly string m_path;\n\n        /// <summary>\n        /// Defines the m_searchOption\n        /// </summary>\n        private readonly SearchOption m_searchOption;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"FileEnumerable\" /> class.\n        /// </summary>\n        /// <param name=\"path\">\n        /// The path to search.\n        /// </param>\n        /// <param name=\"filter\">\n        /// The search string to match against files in the path.\n        /// </param>\n        /// <param name=\"searchOption\">\n        /// The searchOption <see cref=\"SearchOption\" />\n        /// </param>\n        public FileEnumerable(string path, string filter, SearchOption searchOption)\n        {\n            m_path = path;\n            m_filter = filter;\n            m_searchOption = searchOption;\n        }\n\n        /// <summary>\n        /// Returns an enumerator that iterates through the collection.\n        /// </summary>\n        /// <returns>\n        /// The <see cref=\"IEnumerator{FileData}\" />\n        /// </returns>\n        public IEnumerator<FileData> GetEnumerator()\n        {\n            return new FileEnumerator(m_path, m_filter, m_searchOption);\n        }\n\n        /// <summary>\n        /// Returns an enumerator that iterates through a collection.\n        /// </summary>\n        /// <returns>\n        /// The <see cref=\"System.Collections.IEnumerator\" />\n        /// </returns>\n        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n        {\n            return new FileEnumerator(m_path, m_filter, m_searchOption);\n        }\n    }\n\n    /// <summary>\n    /// Provides the implementation of the <see cref=\"T:System.Collections.Generic.IEnumerator`1\" /> interface\n    /// </summary>\n    [System.Security.SuppressUnmanagedCodeSecurity]", "    private class FileEnumerator : IEnumerator<FileData>\n    {\n        /// <summary>\n        /// Defines the m_contextStack\n        /// </summary>\n        private Stack<SearchContext> m_contextStack;\n\n        /// <summary>\n        /// Defines the m_currentContext\n        /// </summary>\n        private SearchContext m_currentContext;\n\n        /// <summary>\n        /// Defines the m_filter\n        /// </summary>", "        private SearchContext m_currentContext;\n\n        /// <summary>\n        /// Defines the m_filter\n        /// </summary>\n        private string m_filter;\n\n        /// <summary>\n        /// Defines the m_hndFindFile\n        /// </summary>\n        private SafeFindHandle m_hndFindFile;\n\n        /// <summary>\n        /// Defines the m_path\n        /// </summary>", "        private SafeFindHandle m_hndFindFile;\n\n        /// <summary>\n        /// Defines the m_path\n        /// </summary>\n        private string m_path;\n\n        /// <summary>\n        /// Defines the m_searchOption\n        /// </summary>\n        private SearchOption m_searchOption;\n\n        /// <summary>\n        /// Defines the m_win_find_data\n        /// </summary>", "        private SearchOption m_searchOption;\n\n        /// <summary>\n        /// Defines the m_win_find_data\n        /// </summary>\n        private WIN32_FIND_DATA m_win_find_data = new WIN32_FIND_DATA();\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"FileEnumerator\" /> class.\n        /// </summary>\n        /// <param name=\"path\">\n        /// The path to search.\n        /// </param>\n        /// <param name=\"filter\">\n        /// The search string to match against files in the path.\n        /// </param>\n        /// <param name=\"searchOption\">\n        /// The searchOption <see cref=\"SearchOption\" />\n        /// </param>\n        public FileEnumerator(string path, string filter, SearchOption searchOption)\n        {\n            m_path = path;\n            m_filter = filter;\n            m_searchOption = searchOption;\n            m_currentContext = new SearchContext(path);\n", "            if (m_searchOption == SearchOption.AllDirectories)\n            {\n                m_contextStack = new Stack<SearchContext>();\n            }\n        }\n\n        /// <summary>\n        /// Gets the element in the collection at the current position of the enumerator.\n        /// </summary>\n        public FileData Current\n        {\n            get { return new FileData(m_path, m_win_find_data); }\n        }\n\n        /// <summary>\n        /// Gets the element in the collection at the current position of the enumerator.\n        /// </summary>\n        object System.Collections.IEnumerator.Current\n        {\n            get { return new FileData(m_path, m_win_find_data); }\n        }\n\n        /// <summary>\n        /// Performs application-defined tasks associated with freeing, releasing, or resetting\n        /// unmanaged resources.\n        /// </summary>", "        public FileData Current\n        {\n            get { return new FileData(m_path, m_win_find_data); }\n        }\n\n        /// <summary>\n        /// Gets the element in the collection at the current position of the enumerator.\n        /// </summary>\n        object System.Collections.IEnumerator.Current\n        {\n            get { return new FileData(m_path, m_win_find_data); }\n        }\n\n        /// <summary>\n        /// Performs application-defined tasks associated with freeing, releasing, or resetting\n        /// unmanaged resources.\n        /// </summary>", "        public void Dispose()\n        {\n            if (m_hndFindFile != null)\n            {\n                m_hndFindFile.Dispose();\n            }\n        }\n\n        /// <summary>\n        /// Advances the enumerator to the next element of the collection.\n        /// </summary>\n        /// <returns>\n        /// The <see cref=\"bool\" />\n        /// </returns>", "        public bool MoveNext()\n        {\n            bool retval = false;\n\n            //If the handle is null, this is first call to MoveNext in the current\n            // directory.  In that case, start a new search.\n            if (m_currentContext.SubdirectoriesToProcess == null)\n            {\n                if (m_hndFindFile == null)\n                {\n                    new FileIOPermission(FileIOPermissionAccess.PathDiscovery, m_path).Demand();\n\n                    string searchPath = Path.Combine(m_path, m_filter);\n                    m_hndFindFile = FindFirstFile(searchPath, m_win_find_data);\n                    retval = !m_hndFindFile.IsInvalid;\n                }\n                else\n                {\n                    //Otherwise, find the next item.\n                    retval = FindNextFile(m_hndFindFile, m_win_find_data);\n                }\n            }\n\n            //If the call to FindNextFile or FindFirstFile succeeded...", "                if (m_hndFindFile == null)\n                {\n                    new FileIOPermission(FileIOPermissionAccess.PathDiscovery, m_path).Demand();\n\n                    string searchPath = Path.Combine(m_path, m_filter);\n                    m_hndFindFile = FindFirstFile(searchPath, m_win_find_data);\n                    retval = !m_hndFindFile.IsInvalid;\n                }\n                else\n                {\n                    //Otherwise, find the next item.\n                    retval = FindNextFile(m_hndFindFile, m_win_find_data);\n                }\n            }\n\n            //If the call to FindNextFile or FindFirstFile succeeded...", "            if (retval)\n            {\n                if (((FileAttributes)m_win_find_data.dwFileAttributes & FileAttributes.Directory) == FileAttributes.Directory)\n                {\n                    //Ignore folders for now.   We call MoveNext recursively here to\n                    // move to the next item that FindNextFile will return.\n                    return MoveNext();\n                }\n            }\n            else if (m_searchOption == SearchOption.AllDirectories)\n            {\n                //SearchContext context = new SearchContext(m_hndFindFile, m_path);\n                //m_contextStack.Push(context);\n                //m_path = Path.Combine(m_path, m_win_find_data.cFileName);\n                //m_hndFindFile = null;\n", "            else if (m_searchOption == SearchOption.AllDirectories)\n            {\n                //SearchContext context = new SearchContext(m_hndFindFile, m_path);\n                //m_contextStack.Push(context);\n                //m_path = Path.Combine(m_path, m_win_find_data.cFileName);\n                //m_hndFindFile = null;\n\n                if (m_currentContext.SubdirectoriesToProcess == null)\n                {\n                    string[] subDirectories = Directory.GetDirectories(m_path);\n                    m_currentContext.SubdirectoriesToProcess = new Stack<string>(subDirectories);\n                }\n", "                if (m_currentContext.SubdirectoriesToProcess.Count > 0)\n                {\n                    string subDir = m_currentContext.SubdirectoriesToProcess.Pop();\n\n                    m_contextStack.Push(m_currentContext);\n                    m_path = subDir;\n                    m_hndFindFile = null;\n                    m_currentContext = new SearchContext(m_path);\n                    return MoveNext();\n                }\n\n                //If there are no more files in this directory and we are\n                // in a sub directory, pop back up to the parent directory and\n                // continue the search from there.", "                if (m_contextStack.Count > 0)\n                {\n                    m_currentContext = m_contextStack.Pop();\n                    m_path = m_currentContext.Path;\n                    if (m_hndFindFile != null)\n                    {\n                        m_hndFindFile.Close();\n                        m_hndFindFile = null;\n                    }\n\n                    return MoveNext();\n                }\n            }\n\n            return retval;\n        }\n\n        /// <summary>\n        /// Sets the enumerator to its initial position, which is before the first element in the collection.\n        /// </summary>", "        public void Reset()\n        {\n            m_hndFindFile = null;\n        }\n\n        /// <summary>\n        /// The FindFirstFile\n        /// </summary>\n        /// <param name=\"fileName\">\n        /// The fileName <see cref=\"string\" />\n        /// </param>\n        /// <param name=\"data\">\n        /// The data <see cref=\"WIN32_FIND_DATA\" />\n        /// </param>\n        /// <returns>\n        /// The <see cref=\"SafeFindHandle\" />\n        /// </returns>\n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Auto, SetLastError = true)]", "        private static extern SafeFindHandle FindFirstFile(string fileName,\n                [In, Out] WIN32_FIND_DATA data);\n\n        /// <summary>\n        /// The FindNextFile\n        /// </summary>\n        /// <param name=\"hndFindFile\">\n        /// The hndFindFile <see cref=\"SafeFindHandle\" />\n        /// </param>\n        /// <param name=\"lpFindFileData\">\n        /// The lpFindFileData <see cref=\"WIN32_FIND_DATA\" />\n        /// </param>\n        /// <returns>\n        /// The <see cref=\"bool\" />\n        /// </returns>\n        [DllImport(\"kernel32.dll\", CharSet = CharSet.Auto, SetLastError = true)]", "        private static extern bool FindNextFile(SafeFindHandle hndFindFile,\n                    [In, Out, MarshalAs(UnmanagedType.LPStruct)] WIN32_FIND_DATA lpFindFileData);\n\n        /// <summary>\n        /// Hold context information about where we current are in the directory search.\n        /// </summary>\n        private class SearchContext\n        {\n            /// <summary>\n            /// Defines the Path\n            /// </summary>", "            public readonly string Path;\n\n            /// <summary>\n            /// Defines the SubdirectoriesToProcess\n            /// </summary>\n            public Stack<string> SubdirectoriesToProcess;\n\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"SearchContext\" /> class.\n            /// </summary>\n            /// <param name=\"path\">\n            /// The path <see cref=\"string\" />\n            /// </param>\n            public SearchContext(string path)\n            {\n                this.Path = path;\n            }\n        }\n    }\n\n    /// <summary>\n    /// Wraps a FindFirstFile handle.\n    /// </summary>", "    private sealed class SafeFindHandle : SafeHandleZeroOrMinusOneIsInvalid\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"SafeFindHandle\" /> class.\n        /// </summary>\n        [SecurityPermission(SecurityAction.LinkDemand, UnmanagedCode = true)]\n        internal SafeFindHandle()\n                : base(true)\n        {\n        }\n\n        /// <summary>\n        /// When overridden in a derived class, executes the code required to free the handle.\n        /// </summary>\n        /// <returns>\n        /// The <see cref=\"bool\" />\n        /// </returns>", "        protected override bool ReleaseHandle()\n        {\n            return FindClose(base.handle);\n        }\n\n        /// <summary>\n        /// The FindClose\n        /// </summary>\n        /// <param name=\"handle\">\n        /// The handle <see cref=\"IntPtr\" />\n        /// </param>\n        /// <returns>\n        /// The <see cref=\"bool\" />\n        /// </returns>\n        [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n        [DllImport(\"kernel32.dll\")]", "        private static extern bool FindClose(IntPtr handle);\n    }\n}\n\n/// <summary>\n/// Contains information about a file returned by the <see cref=\"FastDirectoryEnumerator\" /> class.\n/// </summary>\n[Serializable]\npublic class FileData\n{\n    /// <summary>\n    /// Attributes of the file.\n    /// </summary>", "public class FileData\n{\n    /// <summary>\n    /// Attributes of the file.\n    /// </summary>\n    public readonly FileAttributes Attributes;\n\n    /// <summary>\n    /// File creation time in UTC\n    /// </summary>\n    public readonly DateTime CreationTimeUtc;\n\n    /// <summary>\n    /// File last access time in UTC\n    /// </summary>", "    public readonly DateTime CreationTimeUtc;\n\n    /// <summary>\n    /// File last access time in UTC\n    /// </summary>\n    public readonly DateTime LastAccessTimeUtc;\n\n    /// <summary>\n    /// File last write time in UTC\n    /// </summary>\n    public readonly DateTime LastWriteTimeUtc;\n\n    /// <summary>\n    /// Name of the file\n    /// </summary>", "    public readonly DateTime LastWriteTimeUtc;\n\n    /// <summary>\n    /// Name of the file\n    /// </summary>\n    public readonly string Name;\n\n    /// <summary>\n    /// Full path to the file.\n    /// </summary>\n    public readonly string Path;\n\n    /// <summary>\n    /// Size of the file in bytes\n    /// </summary>", "    public readonly string Path;\n\n    /// <summary>\n    /// Size of the file in bytes\n    /// </summary>\n    public readonly long Size;\n\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"FileData\" /> class.\n    /// </summary>\n    /// <param name=\"dir\">\n    /// The directory that the file is stored at\n    /// </param>\n    /// <param name=\"findData\">\n    /// The findData <see cref=\"WIN32_FIND_DATA\" />\n    /// </param>\n    internal FileData(string dir, WIN32_FIND_DATA findData)\n    {\n        this.Attributes = findData.dwFileAttributes;\n\n        this.CreationTimeUtc = ConvertDateTime(findData.ftCreationTime_dwHighDateTime,\n                                            findData.ftCreationTime_dwLowDateTime);\n\n        this.LastAccessTimeUtc = ConvertDateTime(findData.ftLastAccessTime_dwHighDateTime,\n                                            findData.ftLastAccessTime_dwLowDateTime);\n\n        this.LastWriteTimeUtc = ConvertDateTime(findData.ftLastWriteTime_dwHighDateTime,\n                                            findData.ftLastWriteTime_dwLowDateTime);\n\n        this.Size = CombineHighLowInts(findData.nFileSizeHigh, findData.nFileSizeLow);\n\n        this.Name = findData.cFileName;\n        this.Path = System.IO.Path.Combine(dir, findData.cFileName);\n    }\n\n    /// <summary>\n    /// Gets the CreationTime\n    /// </summary>", "    public DateTime CreationTime\n    {\n        get { return this.CreationTimeUtc.ToLocalTime(); }\n    }\n\n    /// <summary>\n    /// Gets the last access time in local time.\n    /// </summary>\n    public DateTime LastAccesTime\n    {\n        get { return this.LastAccessTimeUtc.ToLocalTime(); }\n    }\n\n    /// <summary>\n    /// Gets the last access time in local time.\n    /// </summary>", "    public DateTime LastAccesTime\n    {\n        get { return this.LastAccessTimeUtc.ToLocalTime(); }\n    }\n\n    /// <summary>\n    /// Gets the last access time in local time.\n    /// </summary>\n    public DateTime LastWriteTime\n    {\n        get { return this.LastWriteTimeUtc.ToLocalTime(); }\n    }\n", "    public DateTime LastWriteTime\n    {\n        get { return this.LastWriteTimeUtc.ToLocalTime(); }\n    }\n\n    public static implicit operator string(FileData v)\n    {\n        throw new NotImplementedException();\n    }\n\n    /// <summary>\n    /// Returns a <see cref=\"T:System.String\" /> that represents the current <see cref=\"T:System.Object\" />.\n    /// </summary>\n    /// <returns>\n    /// The <see cref=\"string\" />\n    /// </returns>", "    public override string ToString()\n    {\n        return this.Name;\n    }\n\n    /// <summary>\n    /// The CombineHighLowInts\n    /// </summary>\n    /// <param name=\"high\">\n    /// The high <see cref=\"uint\" />\n    /// </param>\n    /// <param name=\"low\">\n    /// The low <see cref=\"uint\" />\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"long\" />\n    /// </returns>", "    private static long CombineHighLowInts(uint high, uint low)\n    {\n        return (((long)high) << 0x20) | low;\n    }\n\n    /// <summary>\n    /// The ConvertDateTime\n    /// </summary>\n    /// <param name=\"high\">\n    /// The high <see cref=\"uint\" />\n    /// </param>\n    /// <param name=\"low\">\n    /// The low <see cref=\"uint\" />\n    /// </param>\n    /// <returns>\n    /// The <see cref=\"DateTime\" />\n    /// </returns>", "    private static DateTime ConvertDateTime(uint high, uint low)\n    {\n        long fileTime = CombineHighLowInts(high, low);\n        return DateTime.FromFileTimeUtc(fileTime);\n    }\n}\n\n/// <summary>\n/// Contains information about the file that is found by the FindFirstFile or FindNextFile functions.\n/// </summary>\n[Serializable, StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto), BestFitMapping(false)]", "internal class WIN32_FIND_DATA\n{\n    /// <summary>\n    /// Defines the cAlternateFileName\n    /// </summary>\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 14)]\n    public string cAlternateFileName;\n\n    /// <summary>\n    /// Defines the cFileName\n    /// </summary>\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]", "    public string cFileName;\n\n    /// <summary>\n    /// Defines the dwFileAttributes\n    /// </summary>\n    public FileAttributes dwFileAttributes;\n\n    /// <summary>\n    /// Defines the dwReserved0\n    /// </summary>\n    public int dwReserved0;\n\n    /// <summary>\n    /// Defines the dwReserved1\n    /// </summary>", "    public int dwReserved0;\n\n    /// <summary>\n    /// Defines the dwReserved1\n    /// </summary>\n    public int dwReserved1;\n\n    /// <summary>\n    /// Defines the ftCreationTime_dwHighDateTime\n    /// </summary>\n    public uint ftCreationTime_dwHighDateTime;\n\n    /// <summary>\n    /// Defines the ftCreationTime_dwLowDateTime\n    /// </summary>", "    public uint ftCreationTime_dwHighDateTime;\n\n    /// <summary>\n    /// Defines the ftCreationTime_dwLowDateTime\n    /// </summary>\n    public uint ftCreationTime_dwLowDateTime;\n\n    /// <summary>\n    /// Defines the ftLastAccessTime_dwHighDateTime\n    /// </summary>\n    public uint ftLastAccessTime_dwHighDateTime;\n\n    /// <summary>\n    /// Defines the ftLastAccessTime_dwLowDateTime\n    /// </summary>", "    public uint ftLastAccessTime_dwHighDateTime;\n\n    /// <summary>\n    /// Defines the ftLastAccessTime_dwLowDateTime\n    /// </summary>\n    public uint ftLastAccessTime_dwLowDateTime;\n\n    /// <summary>\n    /// Defines the ftLastWriteTime_dwHighDateTime\n    /// </summary>\n    public uint ftLastWriteTime_dwHighDateTime;\n\n    /// <summary>\n    /// Defines the ftLastWriteTime_dwLowDateTime\n    /// </summary>", "    public uint ftLastWriteTime_dwHighDateTime;\n\n    /// <summary>\n    /// Defines the ftLastWriteTime_dwLowDateTime\n    /// </summary>\n    public uint ftLastWriteTime_dwLowDateTime;\n\n    /// <summary>\n    /// Defines the nFileSizeHigh\n    /// </summary>\n    public uint nFileSizeHigh;\n\n    /// <summary>\n    /// Defines the nFileSizeLow\n    /// </summary>", "    public uint nFileSizeHigh;\n\n    /// <summary>\n    /// Defines the nFileSizeLow\n    /// </summary>\n    public uint nFileSizeLow;\n\n    /// <summary>\n    /// Returns a <see cref=\"T:System.String\" /> that represents the current <see cref=\"T:System.Object\" />.\n    /// </summary>\n    /// <returns>\n    /// The <see cref=\"string\" />\n    /// </returns>", "    public override string ToString()\n    {\n        return \"File name=\" + cFileName;\n    }\n}\n"]}
{"filename": "ControlContainer.cs", "chunked_list": ["\ufeffusing System.ComponentModel;\n\nnamespace it\n{\n    internal sealed partial class ControlContainer : IContainer, System.IEquatable<ControlContainer>\n    {\n        public ControlContainer(ControlContainer obj)\n        {\n            Components = obj.Components;\n        }\n", "        public ComponentCollection Components { get; private set; }\n\n        public void Add(IComponent component)\n        {\n        }\n\n        public void Add(IComponent component, string name)\n        {\n            if (component is null)\n            {\n                throw new System.ArgumentNullException(nameof(component));\n            }\n", "            if (component is null)\n            {\n                throw new System.ArgumentNullException(nameof(component));\n            }\n\n            if (string.IsNullOrEmpty(name))\n            {\n                throw new System.ArgumentException(\"message\", nameof(name));\n            }\n        }\n", "        public void Dispose()\n        {\n            Components = null;\n        }\n\n        public bool Equals(ControlContainer other)\n        {\n            throw new System.NotImplementedException();\n        }\n\n        public override int GetHashCode()\n        {\n            throw new System.NotImplementedException();\n        }\n", "        public override int GetHashCode()\n        {\n            throw new System.NotImplementedException();\n        }\n\n        public void Remove(IComponent component)\n        {\n            if (component is null)\n            {\n                throw new System.ArgumentNullException(nameof(component));\n            }\n        }\n    }\n}\n"]}
{"filename": "IAction.cs", "chunked_list": ["\ufeffusing System;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace it.Actions\n{\n    public sealed partial class ActionResult : IEquatable<ActionResult>, INotifyPropertyChanged\n    {\n        internal ActionResult(string title = null, string description = null)\n        {\n            Title = title;\n            Description = description;\n        }\n", "        public event PropertyChangedEventHandler PropertyChanged;\n\n        internal string Description { get; set; }\n\n        internal string Title { get; set; }\n\n        public bool Equals(ActionResult other)\n        {\n            throw new NotImplementedException();\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as ActionResult);\n        }\n\n        private void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n", "    internal interface IAction\n    {\n        ActionResult TryExecute(string clipboardText = null);\n        bool Matches(string clipboardText = null);\n    }\n\n    internal abstract class ActionBase : IAction, IEquatable<ActionBase>\n    {\n\n        public bool Equals(ActionBase other)\n        {\n            throw new NotImplementedException();\n        }", "        public bool Equals(ActionBase other)\n        {\n            throw new NotImplementedException();\n        }\n        public abstract bool Matches(string clipboardText = null);\n        public abstract ActionResult TryExecute(string clipboardText = null);\n    }\n}"]}
{"filename": "UtcOffset.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace it\n{\n    internal static partial class Countries\n    {\n        public enum UtcOffset\n        {\n            UtcMinusTwelve = -12 * Offset.Hours,\n\n            UtcMinusEleven = -11 * Offset.Hours,\n\n            UtcMinusTen = -10 * Offset.Hours,\n\n            UtcMinusNine = -9 * Offset.Hours,\n\n            UtcMinusEight = -8 * Offset.Hours,\n\n            UtcMinusSeven = -7 * Offset.Hours,\n\n            UtcMinusSix = -6 * Offset.Hours,\n\n            UtcMinusFive = -5 * Offset.Hours,\n\n            UtcMinusFour = -4 * Offset.Hours,\n\n            UtcMinusThree = -3 * Offset.Hours,\n\n            UtcMinusThreepoinfive = -3 * Offset.Hours + Offset.HalfHours,\n\n            UtcMinusTwo = -2 * Offset.Hours,\n\n            UtcMinusOne = -1 * Offset.Hours,\n\n            UtcZero = 0 * Offset.Hours,\n\n            UtcPlusOne = 1 * Offset.Hours,\n\n            UtcPlusTwo = 2 * Offset.Hours,\n\n            UtcPlusThree = 3 * Offset.Hours,\n\n            UtcPlusThreepoinfive = 3 * Offset.Hours + Offset.HalfHours,\n\n            UtcPlusFour = 4 * Offset.Hours,\n\n            UtcPlusFourpointfive = 4 * Offset.Hours + Offset.HalfHours,\n\n            UtcPlusFive = 5 * Offset.Hours,\n\n            UtcPlusFivepointfive = 5 * Offset.Hours + Offset.HalfHours,\n\n            UtcPlusFivepointThreeQuarters = 5 * Offse\u00adt.Hours + Offset.ThreeQuarters,\n\n            UtcPlusSix = 6 * Offset.Hours,\n\n            UtcPlusSixpointfive = 6 * Offset.Hours + Offset.HalfHours,\n\n            UtcPlusSeven = 7 * Offset.Hours,\n\n            UtcPlusEight = 8 * Offset.Hours,\n\n            UtcPlusNine = 9 * Offset.Hours,\n\n            UtcPlusTen = 10 * Offset.Hours,\n\n            UtcPlusEleven = 11 * Offset.Hours,\n\n            UtcPlusTwelve = 12 * Offset.Hours,\n\n            UtcPlusThirteen = 13 * Offset.Hours,\n        }\n    }\n}\n"]}
{"filename": "GlobalSuppressions.cs", "chunked_list": ["\ufeff// This file is used by Code Analysis to maintain SuppressMessage\n// attributes that are applied to this project.\n// Project-level suppressions either have no target or are given\n// a specific target and scoped to a namespace, type, member, etc.\n\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"MA0066:Hash table unfriendly type is used in a hash table\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~F:it.Countries.countriesByUtcOffset\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1810:Initialize all static fields in 'TryRomanActions' when those fields are declared and remove the explicit static constructor\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Actions.TryRomanActions.#cctor\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:ConvertActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.ConvertActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:CountdownActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.CountdownActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:DeviceActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.DeviceActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:RandomActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.RandomActions\")]", "[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:CountdownActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.CountdownActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:DeviceActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.DeviceActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:RandomActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.RandomActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:TimezoneActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.TimezoneActions\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"CA1812:TryRomanActions is an internal class that is apparently never instantiated. If so, remove the code from the assembly. If this class is intended to contain only static members, make it static (Shared in Visual Basic).\", Justification = \"<Pending>\", Scope = \"type\", Target = \"~T:it.Actions.TryRomanActions\")]"]}
{"filename": "Questions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace it\n{\n    internal static class Questions\n    {\n        private static readonly Dictionary<string, string> questionDict = new Dictionary<string, string>(3, StringComparer.Ordinal)\n        {\n            //3 Question examples:\n\n            [\"Test Question 1, Do you have a name?\"] = \"yes\",\n\n            [\"Test Question 2, Do you like this program?\"] = \"Very much!\",\n\n            [\"Test Question 3, Enjoy the program! \"] = \"Thanks for using the program!\"\n        };\n\n        internal static List<Question> LoadQuestions()\n        {\n            return questionDict.Select(item => new Question(item.Key, item.Value)).ToList();\n        }\n    }\n}\n", "        private static readonly Dictionary<string, string> questionDict = new Dictionary<string, string>(3, StringComparer.Ordinal)\n        {\n            //3 Question examples:\n\n            [\"Test Question 1, Do you have a name?\"] = \"yes\",\n\n            [\"Test Question 2, Do you like this program?\"] = \"Very much!\",\n\n            [\"Test Question 3, Enjoy the program! \"] = \"Thanks for using the program!\"\n        };\n\n        internal static List<Question> LoadQuestions()\n        {\n            return questionDict.Select(item => new Question(item.Key, item.Value)).ToList();\n        }\n    }\n}\n"]}
{"filename": "Countries.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace it\n{\n    internal static partial class Countries\n    {\n        private static readonly Dictionary<UtcOffset, string[]> countriesByUtcOffset = new Dictionary<UtcOffset, string[]>\n        {\n            [UtcOffset.UtcMinusTwelve] = new[]\n            {\n                \"baker\",\"howland\"\n            },\n            [UtcOffset.UtcMinusEleven] = new[]\n            {\n                \"amerikaans-Samoa\",\"midway-eilanden\",\"niue\",\n            },\n            [UtcOffset.UtcMinusTen] = new[]\n            {\n                \"cookeilanden\",\"Jonhnston-atol\",\"Hawai\",\n            },\n            [UtcOffset.UtcMinusNine] = new[]\n            {\n                \"alaska\",\"gambiereilanden\"\n            },\n            [UtcOffset.UtcMinusEight] = new[]\n            {\n                \"brits-columbia\",\"yukon\",\"neder-californie\", \"californie\",\"nevada\",\"oregon\",\"washington\",\"pitcairneilanden\"\n            },\n            [UtcOffset.UtcMinusSeven] = new[]\n            {\n                \"alberta\", \"northwest territories\", \"nunavut\",\"chihuahua\", \"sinaloa\", \"sonora\", \"nayarit\", \"zuid-neder-californi\u00eb\",\n                \"colorado\", \"idaho\", \"montana\", \"nebraska\", \"new mexico\", \"north dakota\", \"south dakota\", \"utah\", \"wyoming\"\n            },\n            [UtcOffset.UtcMinusSix] = new[]\n            {\n                \"belize\",\"costa rica\",\"el salvador\",\"guatemala\",\"honduras\",\"nicaragua\",\"alabama\", \"arkansas\", \"illinois\", \"iowa\", \"kansas\", \"louisiana\", \"minnesota\", \"mississippi\", \"missouri\", \"oklahoma\", \"texas\", \"wisconsin\"\n            },\n            [UtcOffset.UtcMinusFive] = new[]\n            {\n                \"colombia\",\"cuba\",\"ecuador\",\"haiti\",\"jamaica\",\"kaaimaneilanden\",\"panama\",\"peru\",\"turks- en caicoseilanden\",\n                \"connecticut\",\"delaware\",\"district of columbia\",\"florida\",\"georgia\",\"kentucky\",\"maine\",\"maryland\",\"massachusetts\",\"michigan\",\"new hampshire\",\"new jersey\",\"new york\",\"north carolina\",\"ohio\",\"pennsylvania\",\"rhode island\",\"south carolina\",\"tennessee\",\"vermont\",\"virginia\",\"westvirginia\"\n            },\n            [UtcOffset.UtcMinusFour] = new[]\n            {\n                \"amerikaanse maagdeneilanden\",\"anguilla\",\"antigua en barbuda\",\"aruba\",\"barbados\",\"bolivia\",\"britse maagdeneilanden\",\"curacao\",\n                \"dominica\",\"dominicaanse republiek\",\"bermuda\",\"falklandeilanden\",\"grenada\",\"guadeloupe\",\"guyana\",\"martinique\",\"montserrat\",\"caribische eilanden\",\n                \"paraguay\",\"puerto rico\",\"saint kitts en nevis\",\"saint vincent en de grenadines\",\"sint maarten\",\"trinidad en tobago\",\"venezuela\"\n            },\n            [UtcOffset.UtcMinusThreepoinfive] = new[]\n            {\n                \"newfoundland\",\n            },\n            [UtcOffset.UtcMinusThree] = new[]\n            {\n                \"argentinie\",\"brazilie\",\"chili\",\"frans-guyana\",\"saint-pierre en miquelon\",\"suriname\",\"uruguay\"\n            },\n            [UtcOffset.UtcMinusTwo] = new[]\n            {\n                 \"fernando de noronha\"\n            },\n            [UtcOffset.UtcMinusOne] = new[]\n            {\n                \"kaapverdie\",\"groenland\",\"azoren\"\n            },\n            [UtcOffset.UtcZero] = new[]\n            {\n                \"burkina faso\",\"faeroer\",\"gambia\",\"ghana\",\"guinee\",\"guinee-bissau\",\"ijsland\",\"ierland\",\n                \"ivoorkust\",\"liberia\",\"mali\",\"mauritanie\",\"marokko\",\"portugalsint-helena\",\"senegal\",\"sierra leone\",\n                \"canarische eilanden\",\"togo\",\"verenigd koninkrijk\"\n            },\n            [UtcOffset.UtcPlusOne] = new[]\n            {\n                \"albanie\", \"algerije\", \"andorra\", \"angola\", \"belgie\", \"benin\",\n                \"bosnie en herzegovina\", \"centraal-afrikaanse republiek\",\n                \"congo-brazzaville\", \"congo-kinshasa\", \"denemarken\", \"duitsland\",\n                \"equatoriaal-guinea\", \"frankrijk\", \"gabon\", \"gibraltar\", \"hongarije\",\n                \"italie\", \"kameroen\", \"kosovo\", \"kroatie\", \"liechtenstein\", \"luxemburg\",\n                \"malta\", \"monaco\", \"montenegro\", \"namibie\", \"nederland\", \"niger\", \"nigeria\",\n                \"noord-macedonie\", \"noorwegen\", \"oostenrijk\", \"polen\", \"sao tome en principe\",\n                \"san marino\", \"servie\", \"slowakije\", \"slovenie\", \"spanje\", \"spitsbergen en jan mayen\",\n                \"tsjaad\", \"tsjechie\",  \"tunesie\", \"vaticaanstad\", \"zweden\", \"zwitserland\",\n            },\n            [UtcOffset.UtcPlusTwo] = new[]\n            {\n                \"aland\",\"botswana\",\"bulgarije\",\"burundi\",\"congo\",\"cyprus\",\"egypte\"\n                ,\"estland\",\"finland\",\"griekenland\",\"israel\",\"letland\",\"libanon\",\"lesotho\",\"litouwen\",\"libie\",\"malawi\",\"moldavie\"\n                ,\"mozambique\",\"oekraine\",\"palestina\",\"roemenie\",\"rusland\",\"rwanda\",\"soedan\",\"swaziland\",\"syrie\",\"zambia\",\"zimbabwe\",\"zuid-afrika\",\"zuid-soedan\"\n            },\n            [UtcOffset.UtcPlusThree] = new[]\n            {\n                \"bahrein\",\"comoren\",\"djibouti\",\"eritrea\",\"ethiopie\",\n                \"irak\",\"jemen\",\"jordanie\",\"kenia\",\"koeweit\",\"madagaskar\",\"mayotte\",\"oeganda\",\"qatar\",\n                \"saoedi-arabie\",\"tanzania\",\"turkije\",\"wit-rusland\"\n            },\n            [UtcOffset.UtcPlusThreepoinfive] = new[]\n            {\n                \"iran\"\n            },\n            [UtcOffset.UtcPlusFour] = new[]\n            {\n                 \"armenie\",\"georgie\",\"mauritius\"\n                 ,\"oman\",\"reunion\",\"seychellen\",\"verenigdearabischeemiraten\"\n            },\n            [UtcOffset.UtcPlusFourpointfive] = new[]\n            {\n                \"afganistan\"\n            },\n            [UtcOffset.UtcPlusFive] = new[]\n            {\n                 \"azerbeidzjan\", \"kazachstan\", \"maldiven\"\n                , \"oezbekistan\", \"pakistan\",  \"jekaterinenburg\", \"perm\", \"tadzjikistan\", \"turkmenistan\"\n            },\n            [UtcOffset.UtcPlusFivepointfive] = new[]\n            {\n                \"india\", \"sri lanka\"\n            },\n            [UtcOffset.UtcPlusFivepointThreeQuarters] = new[]\n            {\n                \"nepal\" //three quarter isnt correct i think\n            },\n            [UtcOffset.UtcPlusSix] = new[]\n            {\n                 \"bangladesh\",\"bhutan\", \"kirgizie\"\n            },\n            [UtcOffset.UtcPlusSeven] = new[]\n            {\n                 \"cambodja\",\"christmaseiland\",\"indonesie\",\"laos\",\"thailand\",\"vietnam\"\n            },\n            [UtcOffset.UtcPlusEight] = new[]\n            {\n                 \"australie\",\"brunei\",\"china\",\"filipijnen\",\"hongkong\",\"macau\",\"maleisie\",\"mongolie\",\"singapore\",\"taiwan\"\n            },\n            [UtcOffset.UtcPlusNine] = new[]\n            {\n                 \"japan\",\"noord-korea\",\"zuid-korea\",\"oost-timor\",\"palau\"\n            },\n            [UtcOffset.UtcPlusTen] = new[]\n            {\n                 \"guam\",\"micronesie\",\"noordelijke marianen\",\"papoea-nieuw-guinea\"\n            },\n            [UtcOffset.UtcPlusEleven] = new[]\n            {\n                 \"nieuw-caledonie\",\"salomonseilanden\",\"vanuatu\"\n            },\n            [UtcOffset.UtcPlusTwelve] = new[]\n            {\n                 \"fijl\",\"kiribati\",\"marshalleilanden\",\"nauru\",\"nieuw-zeeland\",\"tuvalu\",\"wake-eiland\",\"wallis en futuna\"\n            },\n            [UtcOffset.UtcPlusThirteen] = new[]\n            {\n                \"tokelau\", \"tonga\"\n            },\n        };\n", "        public static Dictionary<string, UtcOffset> UtcOffsetByCountry { get; } = CountriesByUtcOffset\n               .SelectMany(x => x.Value.Select(c => (Offset: x.Key, Country: c)))\n            .ToDictionary(x => x.Country, x => x.Offset, System.StringComparer.Ordinal);\n\n        internal static Dictionary<UtcOffset, string[]> CountriesByUtcOffset => countriesByUtcOffset;\n\n        [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]\n        public readonly struct Offset\n        {\n            public const byte HalfHours = 2;\n", "            public const byte HalfHours = 2;\n\n            public const byte Hours = 4;\n\n            public const byte QuarterHours = 1;\n\n            public const byte ThreeQuarters = 3 * QuarterHours;\n        }\n    }\n}\n"]}
{"filename": "GlobalSuppressions2.cs", "chunked_list": ["\ufeff// This file is used by Code Analysis to maintain SuppressMessage attributes that are applied to\n// this project. Project-level suppressions either have no target or are given a specific target and\n// scoped to a namespace, type, member, etc.\n\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"FL0004:Use operator== or a non-ordinal StringComparison.\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Actions.DeviceActions.Matches(System.String)~System.Boolean\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"FL0004:Use operator== or a non-ordinal StringComparison.\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Actions.RandomActions.Matches(System.String)~System.Boolean\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"FL0004:Use operator== or a non-ordinal StringComparison.\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Actions.StopwatchActions.TryExecute(System.String)~it.Actions.ActionResult\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"FL0004:Use operator== or a non-ordinal StringComparison.\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Bootstrap.EnsureWindowStartup(System.Boolean)\")]\n[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"FL0004:Use operator== or a non-ordinal StringComparison.\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Bootstrap.ProcessResult(it.Actions.ActionResult,System.String)\")]\n", "[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(\"Build\", \"FL0004:Use operator== or a non-ordinal StringComparison.\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:it.Bootstrap.ProcessResult(it.Actions.ActionResult,System.String)\")]\n"]}
{"filename": "Question.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace it\n{\n    [System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Auto)]\n    public readonly struct Question\n    {\n        internal Question(string text, string answer)\n            => (Text, Answer) = (text, answer);\n\n        public readonly string Answer { get; }\n", "        public readonly string Answer { get; }\n\n        public readonly string Text { get; }\n    }\n}\n"]}
{"filename": "Benchmark.cs", "chunked_list": ["\ufeffusing System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace it.Actions\n{\n    public class Benchmark\n    {", "{\n    public class Benchmark\n    {\n        public void RunTheMethod(Action action)\n        {\n            // Create new stopwatch.\n            Stopwatch stopwatch = new Stopwatch();\n\n            // Begin timing.\n            stopwatch.Start();\n\n            // Do something.", "            for (int i = 0; i < 10000000; i++)\n            {\n                action();\n            }\n\n            // Stop timing.\n            stopwatch.Stop();\n            // Write result.\n            Console.WriteLine(\"Total time: {0}\", stopwatch.Elapsed.TotalMilliseconds);\n            Console.WriteLine(\"Avg time: {0}\", stopwatch.Elapsed.TotalMilliseconds / 10000000.0);\n        }\n    }\n}"]}
{"filename": "KnownFolders.cs", "chunked_list": ["\ufeffusing System;\nusing System.Runtime.InteropServices;\n\n/// <summary>\n/// Standard folders registered with the system. These folders are installed with Windows Vista and\n/// later operating systems, and a computer will have only folders appropriate to it installed.\n/// </summary>\npublic enum KnownFolder\n{\n    Contacts,\n\n    Desktop,\n\n    Documents,\n\n    Downloads,\n\n    Favorites,\n\n    Links,\n\n    Music,\n\n    Pictures,\n\n    SavedGames,\n\n    SavedSearches,\n\n    Videos\n}\n\n/// <summary>\n/// Class containing methods to retrieve specific file system paths.\n/// </summary>", "public static class KnownFolders\n{\n    private static string[] _knownFolderGuids = new string[]\n    {\n        \"{56784854-C6CB-462B-8169-88E350ACB882}\", // Contacts\n        \"{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}\", // Desktop\n        \"{FDD39AD0-238F-46AF-ADB4-6C85480369C7}\", // Documents\n        \"{374DE290-123F-4565-9164-39C4925E467B}\", // Downloads\n        \"{1777F761-68AD-4D8A-87BD-30B759FA33DD}\", // Favorites\n        \"{BFB9D5E0-C6A9-404C-B2B2-AE6DB6AF4968}\", // Links\n        \"{4BD8D571-6D19-48D3-BE97-422220080E43}\", // Music\n        \"{33E28130-4E1E-4676-835A-98395C3BC3BB}\", // Pictures\n        \"{4C5C32FF-BB9D-43B0-B5B4-2D72E54EAAA4}\", // SavedGames\n        \"{7D1D3A04-DEBB-4115-95CF-2F29DA2920DA}\", // SavedSearches\n        \"{18989B1D-99B5-455B-841C-AB7C74E4DDFC}\", // Videos\n    };\n\n    [Flags]", "    private enum KnownFolderFlags : uint\n    {\n        SimpleIDList = 0x00000100,\n\n        NotParentRelative = 0x00000200,\n\n        DefaultPath = 0x00000400,\n\n        Init = 0x00000800,\n\n        NoAlias = 0x00001000,\n\n        DontUnexpand = 0x00002000,\n\n        DontVerify = 0x00004000,\n\n        Create = 0x00008000,\n\n        NoAppcontainerRedirection = 0x00010000,\n\n        AliasOnly = 0x80000000\n    }\n\n    /// <summary>\n    /// Gets the current path to the specified known folder as currently configured. This does not\n    /// require the folder to be existent.\n    /// </summary>\n    /// <param name=\"knownFolder\">\n    /// The known folder which current path will be returned.\n    /// </param>\n    /// <returns>\n    /// The default path of the known folder.\n    /// </returns>\n    /// <exception cref=\"System.Runtime.InteropServices.ExternalException\">\n    /// Thrown if the path could not be retrieved.\n    /// </exception>", "    public static string GetPath(KnownFolder knownFolder)\n    {\n        return GetPath(knownFolder, false);\n    }\n\n    /// <summary>\n    /// Gets the current path to the specified known folder as currently configured. This does not\n    /// require the folder to be existent.\n    /// </summary>\n    /// <param name=\"knownFolder\">\n    /// The known folder which current path will be returned.\n    /// </param>\n    /// <param name=\"defaultUser\">\n    /// Specifies if the paths of the default user (user profile\n    /// template) will be used. This requires administrative rights.\n    /// </param>\n    /// <returns>\n    /// The default path of the known folder.\n    /// </returns>\n    /// <exception cref=\"System.Runtime.InteropServices.ExternalException\">\n    /// Thrown if the path could not be retrieved.\n    /// </exception>", "    public static string GetPath(KnownFolder knownFolder, bool defaultUser)\n    {\n        return GetPath(knownFolder, KnownFolderFlags.DontVerify, defaultUser);\n    }\n\n    private static string GetPath(KnownFolder knownFolder, KnownFolderFlags flags,\n        bool defaultUser)\n    {\n        int result = SHGetKnownFolderPath(new Guid(_knownFolderGuids[(int)knownFolder]),\n            (uint)flags, new IntPtr(defaultUser ? -1 : 0), out IntPtr outPath);\n        if (result >= 0)\n        {\n            string path = Marshal.PtrToStringUni(outPath);\n            Marshal.FreeCoTaskMem(outPath);\n            return path;\n        }\n        else\n        {\n            throw new ExternalException(\"Unable to retrieve the known folder path. It may not \"\n                + \"be available on this system.\", result);\n        }\n    }\n\n    [DllImport(\"Shell32.dll\")]", "        if (result >= 0)\n        {\n            string path = Marshal.PtrToStringUni(outPath);\n            Marshal.FreeCoTaskMem(outPath);\n            return path;\n        }\n        else\n        {\n            throw new ExternalException(\"Unable to retrieve the known folder path. It may not \"\n                + \"be available on this system.\", result);\n        }\n    }\n\n    [DllImport(\"Shell32.dll\")]", "    private static extern int SHGetKnownFolderPath(\n        [MarshalAs(UnmanagedType.LPStruct)] Guid rfid, uint dwFlags, IntPtr hToken,\n        out IntPtr ppszPath);\n}\n"]}
{"filename": "SmartPerformanceCounter.cs", "chunked_list": ["\ufeffusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nnamespace it\n{\n    public sealed partial class SmartPerformanceCounter : IDisposable\n    {\n        private readonly object @lock = new object();\n\n        private readonly Func<PerformanceCounter> factory;\n", "        private readonly object @lock = new object();\n\n        private readonly Func<PerformanceCounter> factory;\n\n        private readonly TimeSpan time;\n\n        private long cpuCounterLastAccessedTimestamp;\n\n        private bool disposed;\n\n        private PerformanceCounter value;\n\n        public SmartPerformanceCounter(Func<PerformanceCounter> factory, TimeSpan time)\n        {\n            this.factory = factory ?? throw new ArgumentNullException(nameof(factory));\n            this.time = time;\n        }\n", "        private bool disposed;\n\n        private PerformanceCounter value;\n\n        public SmartPerformanceCounter(Func<PerformanceCounter> factory, TimeSpan time)\n        {\n            this.factory = factory ?? throw new ArgumentNullException(nameof(factory));\n            this.time = time;\n        }\n\n        public bool IsValueCreated { get; private set; }\n", "        public bool IsValueCreated { get; private set; }\n\n        public PerformanceCounter Value\n        {\n            get\n            {\n                lock (@lock)\n                {\n                    if (!IsValueCreated)\n                    {\n                        value?.Dispose();\n                        value = factory();\n                        IsValueCreated = true;\n                    }\n                }\n\n                cpuCounterLastAccessedTimestamp = Stopwatch.GetTimestamp();\n                return value;\n            }\n        }\n", "                    if (!IsValueCreated)\n                    {\n                        value?.Dispose();\n                        value = factory();\n                        IsValueCreated = true;\n                    }\n                }\n\n                cpuCounterLastAccessedTimestamp = Stopwatch.GetTimestamp();\n                return value;\n            }\n        }\n", "        public void Dispose()\n        {\n            if (disposed)\n            {\n                return;\n            }\n\n            disposed = true;\n            value?.Dispose();\n        }\n", "        public async Task FunctionAsync()\n        {\n            await Task.Delay(time).ConfigureAwait(false);\n            DoCleaningCheck();\n        }\n\n        private void DoCleaningCheck()\n        {\n            if (Stopwatch.GetTimestamp() - cpuCounterLastAccessedTimestamp <= time.Ticks)\n            {\n                return;\n            }\n\n            lock (@lock)\n            {\n                IsValueCreated = false;\n                value.Close();\n                value.Dispose();\n                value = null;\n            }\n        }\n    }\n}\n", "            if (Stopwatch.GetTimestamp() - cpuCounterLastAccessedTimestamp <= time.Ticks)\n            {\n                return;\n            }\n\n            lock (@lock)\n            {\n                IsValueCreated = false;\n                value.Close();\n                value.Dispose();\n                value = null;\n            }\n        }\n    }\n}\n"]}
{"filename": "ControlContainer.RecordConstructor.cs", "chunked_list": ["\ufeffusing System.ComponentModel;\n\nnamespace it\n{\n    internal sealed partial class ControlContainer\n    {\n        /// <summary>\n        /// Record Constructor\n        /// </summary>\n        /// <param name=\"components\">\n        /// <see cref=\"Components\" />\n        /// </param>\n        public ControlContainer(ComponentCollection components = default)\n        {\n            Components = components;\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as ControlContainer);\n        }\n    }\n}\n"]}
{"filename": "Program.cs", "chunked_list": ["using System;\nusing System.Windows.Forms;\n\nnamespace it\n{\n    internal static class Program\n    {\n        private static Bootstrap bootstrap;\n\n        [STAThread]\n        private static void Main()\n        {\n            bootstrap = new Bootstrap();\n            Application.Run();\n        }\n    }\n}\n", "        private static void Main()\n        {\n            bootstrap = new Bootstrap();\n            Application.Run();\n        }\n    }\n}\n"]}
{"filename": "SmartPerformanceCounter.RecordConstructor.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace it\n{\n    public sealed partial class SmartPerformanceCounter : IEquatable<SmartPerformanceCounter>\n    {\n        /// <summary>\n        /// Record Constructor\n        /// </summary>\n        /// <param name=\"isValueCreated\">\n        /// <see cref=\"IsValueCreated\" />\n        /// </param>\n        internal SmartPerformanceCounter(bool isValueCreated = default)\n        {\n            IsValueCreated = isValueCreated;\n        }\n", "        public bool Equals(SmartPerformanceCounter other)\n        {\n            if (other is null)\n            {\n                throw new ArgumentNullException(nameof(other));\n            }\n\n            throw new NotImplementedException();\n        }\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as SmartPerformanceCounter);\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as SmartPerformanceCounter);\n        }\n\n        public override int GetHashCode()\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n"]}
{"filename": "ClipboardMonitor.cs", "chunked_list": ["\ufeffusing System;\nusing System.ComponentModel;\nusing System.Runtime.InteropServices;\nusing System.Windows.Forms;\n\nnamespace it\n{\n    internal sealed class ClipboardChangedEventArgs : EventArgs\n    {\n        public ClipboardChangedEventArgs(IDataObject dataObject)\n        {\n            DataObject = dataObject;\n        }\n", "        public IDataObject DataObject { get; }\n    }\n\n    [DefaultEvent(\"ClipboardChanged\")]\n    internal sealed class ClipboardMonitor : Control\n    {\n        private IntPtr NextViewerPtr;\n\n        public ClipboardMonitor()\n        {\n            CreateHandle();\n            try\n            {\n                NextViewerPtr = NativeMethods.SetClipboardViewer(Handle);\n            }", "            catch (EntryPointNotFoundException) { }\n        }\n\n        ~ClipboardMonitor()\n        {\n            Dispose(disposing: false);\n        }\n\n        public event EventHandler<ClipboardChangedEventArgs> ClipboardChanged;\n\n        protected override void Dispose(bool disposing)\n        {", "        public event EventHandler<ClipboardChangedEventArgs> ClipboardChanged;\n\n        protected override void Dispose(bool disposing)\n        {\n            if (NextViewerPtr != IntPtr.Zero)\n            {\n                _ = NativeMethods.ChangeClipboardChain(Handle, NextViewerPtr);\n                NextViewerPtr = IntPtr.Zero;\n            }\n\n            base.Dispose(disposing);\n        }\n", "        protected override void WndProc(ref Message m)\n        {\n            {\n                switch (m.Msg)\n                {\n                    case NativeMethods.WM_DRAWCLIPBOARD:\n                        _ = NativeMethods.SendMessage(NextViewerPtr, m.Msg, m.WParam, m.LParam);\n                        GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced);\n                        GC.WaitForPendingFinalizers();\n                        GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced);\n                        OnClipboardChanged();\n                        break;\n\n                    case NativeMethods.WM_CHANGECBCHAIN:", "                        if (m.WParam == NextViewerPtr)\n                        {\n                            NextViewerPtr = m.LParam;\n                        }\n                        else\n                        {\n                            _ = NativeMethods.SendMessage(NextViewerPtr, m.Msg, m.WParam, m.LParam);\n                        }\n                        break;\n\n                    default:\n                        base.WndProc(ref m);\n                        break;\n                }\n            }\n        }\n", "        private void OnClipboardChanged()\n        {\n            try\n            {\n                IDataObject dataObject = Clipboard.GetDataObject();\n                if (dataObject != null)\n                {\n                    ClipboardChanged?.Invoke(this, new ClipboardChangedEventArgs(dataObject));\n                }\n            }\n            catch (ExternalException) { }\n        }\n", "            catch (ExternalException) { }\n        }\n\n        private static class NativeMethods\n        {\n            internal const int WM_CHANGECBCHAIN = 0x030D;\n\n            internal const int WM_DRAWCLIPBOARD = 0x0308;\n\n            [DllImport(\"User32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n            [return: MarshalAs(UnmanagedType.Bool)]\n            internal static extern bool ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);\n\n            [DllImport(\"user32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n            internal static extern IntPtr SendMessage(IntPtr hwnd, int wMsg, IntPtr wParam, IntPtr lParam);\n\n            [DllImport(\"User32.dll\", CharSet = CharSet.Unicode, SetLastError = true)]\n            internal static extern IntPtr SetClipboardViewer(IntPtr hWndNewViewer);\n        }\n    }\n}\n"]}
{"filename": "Properties/Settings.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace it.Properties {\n    \n    \n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"16.3.0.0\")]\n    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {\n        \n        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        ", "        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));\n        \n        public static Settings Default {\n            get {\n                return defaultInstance;\n            }\n        }\n    }\n}\n"]}
{"filename": "Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace it.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]", "    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"16.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        ", "    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {", "                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"it.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   Overrides the current thread's CurrentUICulture property for all\n        ///   resource lookups using this strongly typed resource class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n    }\n}\n"]}
{"filename": "Properties/AssemblyInfo.cs", "chunked_list": ["\ufeff// General Information about an assembly is controlled through the following set of attributes.\n// Change these attribute values to modify the information associated with an assembly.\nusing System.Reflection;\nusing System.Runtime.InteropServices;\n\n[assembly: AssemblyTitle(\"it\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"it\")]", "[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"it\")]\n[assembly: AssemblyCopyright(\"Copyright \u00a9  2019\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n// Setting ComVisible to false makes the types in this assembly not visible to COM components. If\n// you need to access a type in this assembly from COM, set the ComVisible attribute to true on that type.\n[assembly: ComVisible(false)]\n", "[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"f5fb8ae0-3aff-41bd-b082-e9e2ddc90865\")]\n\n// Version information for an assembly consists of the following four values:\n//\n// Major Version Minor Version Build Number Revision\n//\n// You can specify all the values or you can default the Build and Revision Numbers by using the '*'", "//\n// You can specify all the values or you can default the Build and Revision Numbers by using the '*'\n// as shown below: [assembly: AssemblyVersion(\"1.0.*\")]\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n"]}
{"filename": "Actions/NativeMethods.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace it.Actions\n{\n    internal static class NativeMethods\n    {\n        [DllImport(\"User32.dll\", CharSet = CharSet.Auto)]\n        [return: MarshalAs(UnmanagedType.Bool)]", "{\n    internal static class NativeMethods\n    {\n        [DllImport(\"User32.dll\", CharSet = CharSet.Auto)]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        private static extern bool ChangeClipboardChain(IntPtr hWndRemove, IntPtr hWndNewNext);\n\n        [DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\n        private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\n\n        [DllImport(\"User32.dll\")]", "        private static extern IntPtr SendMessage(IntPtr hWnd, int msg, IntPtr wParam, IntPtr lParam);\n\n        [DllImport(\"User32.dll\")]\n        private static extern int SetClipboardViewer(int hWndNewViewer);\n    }\n}\n"]}
{"filename": "Actions/TryRomanActions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Windows;\n\nnamespace it.Actions\n{\n    internal sealed class TryRomanActions : IAction\n    {\n        public static readonly Dictionary<int, string> NumberRomanDictionary;\n", "        public static readonly Dictionary<int, string> NumberRomanDictionary;\n\n        public static readonly Dictionary<char, int> RomanNumberDictionary;\n\n        static TryRomanActions()\n        {\n            RomanNumberDictionary = new Dictionary<char, int>(7)\n        {\n            { 'I', 1 },\n            { 'V', 5 },\n            { 'X', 10 },\n            { 'L', 50 },\n            { 'C', 100 },\n            { 'D', 500 },\n            { 'M', 1000 },\n        };\n\n            NumberRomanDictionary = new Dictionary<int, string>(12)\n        {\n            { 1000, \"M\" },\n            { 900, \"CM\" },\n            { 500, \"D\" },\n            { 400, \"CD\" },\n            { 100, \"C\" },\n            { 90, \"XC\" },\n            { 50, \"L\" },\n            { 40, \"XL\" },\n            { 10, \"X\" },\n            { 9, \"IX\" },\n            { 5, \"V\" },\n            { 4, \"IV\" },\n            { 1, \"I\" },\n        };\n        }\n", "        public static int From(string roman)\n        {\n            if (string.IsNullOrWhiteSpace(roman))\n            {\n                throw new ArgumentException(\"message\", nameof(roman));\n            }\n\n            int total = 0;\n\n            int current, previous;\n            char currentRoman, previousRoman = '\\0';\n", "            for (int i = 0; i < roman.Length; i++)\n            {\n                currentRoman = roman[i];\n\n                previous = previousRoman != '\\0' ? RomanNumberDictionary[previousRoman] : '\\0';\n                current = RomanNumberDictionary[currentRoman];\n\n                if (previous != 0 && current > previous)\n                {\n                    total = total - (2 * previous) + current;\n                }\n                else\n                {\n                    total += current;\n                }\n\n                previousRoman = currentRoman;\n            }\n\n            return total;\n        }\n", "        public static string To(int number)\n        {\n            StringBuilder roman = new StringBuilder(1000);\n            roman.Clear();\n            foreach (KeyValuePair<int, string> item in NumberRomanDictionary)\n            {\n                while (number >= item.Key)\n                {\n                    _ = roman.Append(item.Value);\n                    number -= item.Key;\n                }\n            }\n            return roman.ToString();\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as TryRomanActions);\n        }\n\n        public bool Matches(string clipboardText = null)\n        {\n            return clipboardText.EndsWith(\" to roman\", StringComparison.Ordinal) || clipboardText.EndsWith(\" naar romeins\", StringComparison.Ordinal);\n        }\n\n        public ActionResult TryExecute(string clipboardText = null)\n        {\n            ActionResult actionResult = new ActionResult();\n\n            int index = clipboardText.IndexOf(\"to roman\", StringComparison.Ordinal);\n            string numberString = clipboardText.Substring(0, index).Trim();", "        public ActionResult TryExecute(string clipboardText = null)\n        {\n            ActionResult actionResult = new ActionResult();\n\n            int index = clipboardText.IndexOf(\"to roman\", StringComparison.Ordinal);\n            string numberString = clipboardText.Substring(0, index).Trim();\n            if (DateTime.TryParse(numberString, out DateTime dateTime))\n            {\n                (int year, int month, int day) = (dateTime.Year, dateTime.Month, dateTime.Day);\n                actionResult.Title = \"Date in roman\";\n                actionResult.Description = $\"{day}-{month}-{year} = {To(day)}-{To(month)}-{To(year)}\";\n                Clipboard.SetText($\"{day}-{month}-{year} = {To(day)}-{To(month)}-{To(year)}\");\n                return actionResult;\n            }\n            else\n            {\n                int numberToConvert = int.Parse(clipboardText.Substring(0, index).Trim());\n                actionResult.Title = \"Nummer naar romeins\";\n                actionResult.Description = $\"{numberToConvert} = {To(numberToConvert)}\";\n                Clipboard.SetText($\"{numberToConvert} = {To(numberToConvert)}\");\n            }\n\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/numberToHex.cs", "chunked_list": ["\ufeffusing System;\nusing System.Windows;\n\nnamespace it.Actions\n{\n    public sealed class numberToHex : IAction\n    {\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\" to hex\", StringComparison.Ordinal);\n        }\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            if (string.IsNullOrWhiteSpace(clipboardText))\n            {\n                throw new ArgumentException(\"message\", nameof(clipboardText));\n            }\n\n            ActionResult actionResult = new ActionResult();\n            int toHexIndex = clipboardText.IndexOf(\"to hex\", StringComparison.Ordinal);\n            clipboardText.Substring(0, toHexIndex);\n            string hex = toHexIndex.ToString(\"X\");\n            actionResult.Title = \"Calculate hex\";\n            actionResult.Description = $\"{clipboardText}, {hex}\";\n            Clipboard.SetText($\"{hex}\");\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/autoClicker.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace it.Actions\n{\n    public sealed class autoClicker : IAction\n    {", "namespace it.Actions\n{\n    public sealed class autoClicker : IAction\n    {\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.StartsWith(\"auto clicker\", StringComparison.Ordinal) && TimeSpan.TryParse(clipboardText.Replace(\"auto clicker\", string.Empty), CultureInfo.InvariantCulture, out TimeSpan _);\n        }\n\n        public ActionResult TryExecute(string clipboardText)\n        {\n            _ = TimeSpan.TryParse(clipboardText.Replace(\"auto clicker\", string.Empty), CultureInfo.InvariantCulture, out TimeSpan ts);\n            ActionResult actionResult = new ActionResult();\n            Thread.Sleep((int)ts.TotalMilliseconds);\n            actionResult.Title = \"autoclicker\";\n            actionResult.Description = \"autoclicker gestart\";\n            return actionResult;\n        }\n    }\n}\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            _ = TimeSpan.TryParse(clipboardText.Replace(\"auto clicker\", string.Empty), CultureInfo.InvariantCulture, out TimeSpan ts);\n            ActionResult actionResult = new ActionResult();\n            Thread.Sleep((int)ts.TotalMilliseconds);\n            actionResult.Title = \"autoclicker\";\n            actionResult.Description = \"autoclicker gestart\";\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/desktopCleaner.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Threading;\n\nnamespace it.Actions\n{\n    internal sealed class desktopCleaner : IAction\n    {", "namespace it.Actions\n{\n    internal sealed class desktopCleaner : IAction\n    {\n        private static readonly Dictionary<string, string> CategoryAssociations = new Dictionary<string, string>\n        (129, StringComparer.Ordinal)\n        {\n            //audio\n            {\".aif\", \"Audio\" },\n            {\".cda\", \"Audio\" },\n            {\".mid\", \"Audio\" },\n            {\".midi\", \"Audio\" },\n            {\".mp3\", \"Audio\" },\n            {\".mpa\", \"Audio\" },\n            {\".ogg\", \"Audio\" },\n            {\".wav\", \"Audio\" },\n            {\".wma\", \"Audio\" },\n            {\".wpl\", \"Audio\" },\n            {\".m3u\", \"Audio\" },\n            //text\n            {\".txt\", \"Text\" },\n            {\".doc\", \"Text\" },\n            {\".docx\", \"Text\" },\n            {\".odt\", \"Text\" },\n            {\".pdf\", \"Text\" },\n            {\".rtf\", \"Text\" },\n            {\".tex\", \"Text\" },\n            {\".wks\", \"Text\" },\n            {\".wps\", \"Text\" },\n            {\".wpd\", \"Text\" },\n            //video\n            {\".3g2\", \"Video\" },\n            {\".3gp\", \"Video\" },\n            {\".avi\", \"Video\" },\n            {\".flv\", \"Video\" },\n            {\".h264\", \"Video\" },\n            {\".m4v\", \"Video\" },\n            {\".mkv\", \"Video\" },\n            {\".mov\", \"Video\" },\n            {\".mp4\", \"Video\" },\n            {\".mpg\", \"Video\" },\n            {\".mpeg\", \"Video\" },\n            {\".rm\", \"Video\" },\n            {\".swf\", \"Video\" },\n            {\".vob\", \"Video\" },\n            {\".wmv\", \"Video\" },\n             //images\n            { \".ai\" ,\"Images\" },\n            { \".bmp\" , \"Images\" },\n            { \".gif\" ,\"Images\" },\n            { \".ico\" ,\"Images\" },\n            { \".jpg\" , \"Images\" },\n            { \".jpeg\" ,\"Images\" },\n            { \".png\" ,\"Images\" },\n            { \".ps\" , \"Images\" },\n            { \".psd\" ,\"Images\" },\n            { \".svg\" ,\"Images\" },\n            { \".tif\" , \"Images\" },\n            { \".tiff\" ,\"Images\" },\n            { \".CR2\" ,\"Images\" },\n            //internet\n            { \".asp\" ,\"Internet\" },\n            { \".aspx\" ,\"Internet\" },\n            { \".cer\" ,\"Internet\" },\n            { \".cfm\" ,\"Internet\" },\n            { \".cgi\" ,\"Internet\" },\n            { \".pl\" ,\"Internet\" },\n            { \".css\" ,\"Internet\" },\n            { \".htm\" ,\"Internet\" },\n            { \".js\" ,\"Internet\" },\n            { \".jsp\" ,\"Internet\" },\n            { \".part\" ,\"Internet\" },\n            { \".php\" ,\"Internet\" },\n            { \".rss\" ,\"Internet\" },\n            { \".xhtml\" ,\"Internet\" },\n            //compressed\n            { \".7z\",  \"Compressed\" },\n            { \".arj\" , \"Compressed\" },\n            { \".deb\" , \"Compressed\" },\n            { \".pkg\",  \"Compressed\" },\n            { \".rar\" , \"Compressed\" },\n            { \".tar.gz\" , \"Compressed\" },\n            { \".z\" , \"Compressed\" },\n            { \".zip\" , \"Compressed\" },\n            //disc\n            { \".bin\" , \"Disc\" },\n            { \".dmg\" , \"Disc\" },\n            { \".iso\" , \"Disc/Iso\" },\n            { \".toast\" , \"Disc\" },\n            { \".vcd\" , \"Disc\" },\n            //data\n            { \".csv\" , \"Data\" },\n            { \".dat\" , \"Data\" },\n            { \".db\" , \"Data\" },\n            { \".dbf\" , \"Data\" },\n            { \".log\" , \"Data\" },\n            { \".mdb\" , \"Data\" },\n            { \".sav\" , \"Data\" },\n            { \".sql\" , \"Data\" },\n            { \".tar\" , \"Data\" },\n            { \".xml\" , \"Data\" },\n            { \".json\" , \"Data\" },\n            //executables\n            { \".apk\" , \"Executables\" },\n            { \".bat\" , \"Executables\" },\n            { \".com\" , \"Executables\" },\n            { \".exe\" , \"Executables\" },\n            { \".gadget\" , \"Executables\" },\n            { \".jar\" , \"Executables\" },\n            { \".wsf\" , \"Executables\" },\n            //fonts\n            { \".fnt\" , \"Fonts\" },\n            { \".fon\" , \"Fonts\" },\n            { \".otf\" , \"Fonts\" },\n            { \".ttf\" , \"Fonts\" },\n            //presentations\n            { \".key\" , \"Presentations\" },\n            { \".odp\" , \"Presentations\" },\n            { \".pps\" , \"Presentations\" },\n            { \".ppt\" , \"Presentations\" },\n            { \".pptx\" , \"Presentations\" },\n            //programming\n            { \".c\" , \"Programming/C\" },\n            { \".class\" , \"Programming/Classes\" },\n            { \".dart\" , \"Programming/Dart\" },\n            { \".py\" , \"Programming/Python\"},\n            { \".sh\" , \"Programming/Shell\" },\n            { \".swift\" , \"Programming/Swift\" },\n            { \".html\" , \"Programming/HTML\" },\n            { \".h\" , \"Programming\" },\n            //spreadsheets\n            { \".ods\" , \"Spreadsheets\" },\n            { \".xlr\" , \"Spreadsheets\" },\n            { \".xls\" , \"Spreadsheets\" },\n            { \".xlsx\" , \"Spreadsheets\" },\n            //System\n            { \".bak\" , \"System\" },\n            { \".cab\" , \"System\" },\n            { \".cfg\" , \"System\" },\n            { \".cpl\" , \"System\" },\n            { \".cur\" , \"System\" },\n            { \".ddl\" , \"System\" },\n            { \".dmp\" , \"System\" },\n            { \".drv\" , \"System\" },\n            { \".icns\" , \"System\" },\n            { \".ini\" , \"System\" },\n            { \".lnk\" , \"System\" },\n            { \".msi\" , \"System\" },\n            { \".sys\" , \"System\" },\n            { \".tmp\" , \"System\" },\n        };\n", "        public static void yearSubMaps(string dir)\n        {\n            foreach (var fullFileName in Directory.EnumerateFiles(dir))\n            {\n                DateTime lastWriteTime = File.GetLastWriteTime(Path.Combine(dir, fullFileName));\n                dir = Path.Combine(dir, lastWriteTime.ToString(\"yyyy\"));\n                if (!Directory.Exists(dir))\n                {\n                    Directory.CreateDirectory(dir);\n                }\n                string fileName = Path.GetFileName(fullFileName);\n                System.IO.File.Move(fullFileName, Path.Combine(dir, fileName));\n            }\n        }\n", "        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\"file organizer\", StringComparison.Ordinal) || clipboardText.EndsWith(\"bestanden opruimen\", StringComparison.Ordinal);\n        }\n\n        public ActionResult TryExecute(string clipboardText)\n        {\n            if (string.IsNullOrWhiteSpace(clipboardText))\n            {\n                throw new ArgumentException(\"message\", nameof(clipboardText));\n            }\n            ActionResult actionResult = new ActionResult();\n            System.Globalization.CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n            string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\n\n            //DOWNLOADS\n            string downloadPath = (KnownFolders.GetPath(KnownFolder.Downloads));\n            MoveFolders(downloadPath);\n            CreateSubMaps(downloadPath);\n            DeleteEmptyDirs(downloadPath);\n\n            string picturesPath = (KnownFolders.GetPath(KnownFolder.Pictures));\n            MoveFolders(picturesPath);\n            CreateSubMaps(picturesPath);\n            DeleteEmptyDirs(picturesPath);\n\n            string videoPath = (KnownFolders.GetPath(KnownFolder.Videos));\n            MoveFolders(videoPath);\n            CreateSubMaps(videoPath);\n            DeleteEmptyDirs(videoPath);\n\n            string musicPath = (KnownFolders.GetPath(KnownFolder.Music));\n            MoveFolders(musicPath);\n            CreateSubMaps(musicPath);\n            DeleteEmptyDirs(musicPath);\n\n            string documentsPath = (KnownFolders.GetPath(KnownFolder.Documents));\n            MoveFolders(documentsPath);\n            CreateSubMaps(documentsPath);\n            DeleteEmptyDirs(documentsPath);\n\n            //delete empty dirs\n            DirectoryInfo directoryInfo = new DirectoryInfo(picturesPath);\n            DirectoryInfo directoryInfo1 = new DirectoryInfo(videoPath);\n            DirectoryInfo directoryInfo2 = new DirectoryInfo(musicPath);\n            DirectoryInfo directoryInfo3 = new DirectoryInfo(downloadPath);\n", "            if (Directory.Exists(picturesPath + videoPath + musicPath + downloadPath))\n            {\n                File.SetAttributes(picturesPath + videoPath + musicPath + downloadPath, FileAttributes.Normal);\n                DeleteEmptyDirs(picturesPath + videoPath + musicPath + downloadPath);\n            }\n\n            //create cleanup map on desktop\n            string cleanupPath = Path.Combine(desktopPath, \"Cleanup\");\n\n            //sub maps desktop cleaner\n            var subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Audio\")); ;\n            {\n                //Subfolders in Audio folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Text\"));\n            {\n                //Subfolders in Text folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Video\"));\n            {\n                //Subfolders in Video folder\n                var videosubmap = KnownFolders.GetPath(KnownFolder.Videos);\n                yearSubMaps(videosubmap);\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Images\"));\n            {\n                //Subfolders in Image folder\n                var imagesubmap = KnownFolders.GetPath(KnownFolder.Pictures);\n                yearSubMaps(imagesubmap);\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Internet\"));\n            {\n                //Subfolders in Internet folder\n            }\n\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Compressed\"));\n            {\n                //Subfolders in Compressed folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Disc\"));\n            {\n                //Subfolders in Disc folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Data\"));\n            {\n                //Subfolders in Data folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Executables\"));\n            {\n                //Subfolders in Executeables folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Fonts\"));\n            {\n                //Subfolders in Fonts folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Presentations\"));\n            {\n                //Subfolders in Presentations folder\n                subFolders.CreateSubdirectory(\"Powepoints\");\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Programming\"));\n            {\n                //Subfolders in Programming folder\n                subFolders.CreateSubdirectory(\"Python\");\n                subFolders.CreateSubdirectory(\"HTML\");\n                subFolders.CreateSubdirectory(\"Swift\");\n                subFolders.CreateSubdirectory(\"Dart\");\n                subFolders.CreateSubdirectory(\"C\");\n                subFolders.CreateSubdirectory(\"Classes\");\n                subFolders.CreateSubdirectory(\"Shell\");\n            }\n            Directory.CreateDirectory(Path.Combine(cleanupPath, \"Spreadsheets\"));\n            Directory.CreateDirectory(Path.Combine(cleanupPath, \"System\"));\n            string overig = Path.Combine(cleanupPath, \"Overig\");\n            Directory.CreateDirectory(overig);\n\n            //delete temp files\n            const int defaultBufferSize = 4096;\n            using var stream = new FileStream(\n                Path.GetTempFileName(),\n                FileMode.Create, FileAccess.ReadWrite, FileShare.None,\n                defaultBufferSize,\n                FileOptions.DeleteOnClose);\n\n            // move files from desktop\n            string[] array1 = Directory.GetFiles(desktopPath, \"*.*\", SearchOption.AllDirectories);", "            for (int i = 0; i < array1.Length; i++)\n            {\n                string file = array1[i];\n                if (Path.HasExtension(file))\n                {\n                    try\n                    {\n                        if (CategoryAssociations.TryGetValue(Path.GetExtension(file), out desktopPath))\n                        {\n                            File.Move(file, Path.Combine(cleanupPath, desktopPath, Path.GetFileName(file)));\n                        }\n                        else\n                        {\n                            File.Move(file, Path.Combine(cleanupPath, \"Overig\", Path.GetFileName(file)));\n                        }\n                    }", "                    catch (Exception) { }\n                }\n            }\n\n            {\n                try\n                {\n                    try\n                    {\n                        ConsoleKeyInfo cki;\n                        double totalSize = 0;\n                        var fileList = directoryInfo.EnumerateFiles(\"*.*\", SearchOption.AllDirectories).ToList();\n                        fileList.AddRange(directoryInfo1.EnumerateFiles(\"*.*\", SearchOption.AllDirectories).ToList());\n                        fileList.AddRange(directoryInfo2.EnumerateFiles(\"*.*\", SearchOption.AllDirectories).ToList());\n                        fileList.AddRange(directoryInfo3.EnumerateFiles(\"*.*\", SearchOption.AllDirectories).ToList());\n                        List<FileDetails> finalDetails = new List<FileDetails>(1000);\n                        List<string> ToDelete = new List<string>(1000);\n                        finalDetails.Clear();\n                        {\n                            {", "                                for (int i = 0; i < fileList.Count; i++)\n                                {\n                                    {\n                                        string item = fileList[i].FullName;\n                                        using (var fs = new BufferedStream(File.OpenRead(item), 1200000))\n                                        {\n                                            finalDetails.Add(new FileDetails()\n                                            {\n                                                FileName = item,\n                                                FileHash = BitConverter.ToString(MD5.Create().ComputeHash(fs)),\n                                            });\n                                        }\n                                    }\n                                }\n                            }\n                            var similarList = finalDetails.GroupBy(f => f.FileHash)\n                            .Select(g => new { FileHash = g.Key, Files = g.Select(z => z.FileName).ToList() });\n\n                            ToDelete.AddRange(similarList.SelectMany(f => f.Files.Skip(1)).ToList());", "                            if (ToDelete.Count > 0)\n                            {\n                                Console.WriteLine(\"Files being deleted- \");\n                                for (int i = 0; i < ToDelete.Count; i++)\n                                {\n                                    string item = ToDelete[i];\n                                    Console.WriteLine(item);\n                                    FileInfo fi = new FileInfo(item);\n                                    totalSize += fi.Length;\n                                }\n                            }\n                            Console.ForegroundColor = ConsoleColor.Red;\n                            Console.WriteLine(\"Total space made free-  {0}mb\", Math.Round((totalSize / 1000000), 6).ToString());\n                            {\n                                ToDelete.ForEach(File.Delete);\n                            }\n                        }\n                    }", "                    catch (Exception) { }\n                }\n                catch (Exception) { }\n            }\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        actionResult.Title = \"Desktop cleaner\";\n                        actionResult.Description = \"succes\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        actionResult.Title = \"Desktop cleaner\";\n                        actionResult.Description = \"Bestanden opgeruimt en gesorteerd in de Cleanup map\";\n                        break;\n                    }\n            }\n            return actionResult;\n        }\n", "        private static void CreateSubMaps(string dir)\n        {\n            string cleanupPath = Path.Combine(dir);\n\n            //sub maps desktop cleaner\n            var subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Audio\")); ;\n            {\n                //Subfolders in Audio folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Text\"));\n            {\n                //Subfolders in Text folder\n            }", "            foreach (var fullFileName in FastDirectoryEnumerator.EnumerateFiles(cleanupPath, \"Video\"))\n            {\n                var videosubmap = KnownFolders.GetPath(KnownFolder.Videos);\n                yearSubMaps(videosubmap);\n            }\n            foreach (var fullFileName in FastDirectoryEnumerator.EnumerateFiles(cleanupPath, \"Images\"))\n            {\n                var imagesubmap = KnownFolders.GetPath(KnownFolder.Pictures);\n                yearSubMaps(imagesubmap);\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Internet\"));\n            {\n                //Subfolders in Internet folder\n            }\n\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Compressed\"));\n            {\n                //Subfolders in Compressed folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Disc\"));\n            {\n                //Subfolders in Disc folder\n                subFolders.CreateSubdirectory(\"Iso\");\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Data\"));\n            {\n                //Subfolders in Data folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Executables\"));\n            {\n                //Subfolders in Executeables folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Fonts\"));\n            {\n                //Subfolders in Fonts folder\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Presentations\"));\n            {\n                //Subfolders in Presentations folder\n                subFolders.CreateSubdirectory(\"Powepoints\");\n            }\n            subFolders = Directory.CreateDirectory(Path.Combine(cleanupPath, \"Programming\"));\n            {\n                //Subfolders in Programming folder\n                subFolders.CreateSubdirectory(\"Python\");\n                subFolders.CreateSubdirectory(\"HTML\");\n                subFolders.CreateSubdirectory(\"Swift\");\n                subFolders.CreateSubdirectory(\"Dart\");\n                subFolders.CreateSubdirectory(\"C\");\n                subFolders.CreateSubdirectory(\"Classes\");\n                subFolders.CreateSubdirectory(\"Shell\");\n            }\n            Directory.CreateDirectory(Path.Combine(cleanupPath, \"Spreadsheets\"));\n            Directory.CreateDirectory(Path.Combine(cleanupPath, \"System\"));\n            string overig = Path.Combine(cleanupPath, \"Overig\");\n            Directory.CreateDirectory(overig);\n\n            string[] array1 = Directory.GetFiles(dir, \"*\", SearchOption.AllDirectories);", "            for (int i = 0; i < array1.Length; i++)\n            {\n                string file = array1[i];\n                if (Path.HasExtension(file))\n                {\n                    try\n                    {\n                        if (CategoryAssociations.TryGetValue(Path.GetExtension(file), out dir))\n                        {\n                            File.Move(file, Path.Combine(cleanupPath, dir, Path.GetFileName(file)));\n                        }\n                        else\n                        {\n                            File.Move(file, Path.Combine(cleanupPath, \"Overig\", Path.GetFileName(file)));\n                        }\n                    }", "                    catch (Exception) { }\n                }\n            }\n        }\n\n        private static void DeleteEmptyDirs(string dir)\n        {\n            if (string.IsNullOrEmpty(dir))\n                throw new ArgumentException(\n                    \"Starting directory is a null reference or an empty string\",\n                    \"dir\");\n\n            try\n            {", "                foreach (var d in Directory.EnumerateDirectories(dir))\n                {\n                    DeleteEmptyDirs(d);\n                }\n\n                var entries = Directory.EnumerateFileSystemEntries(dir);\n\n                if (!entries.Any())\n                {\n                    try\n                    {\n                        try\n                        {\n                            Directory.Delete(dir);", "                            if (FastDirectoryEnumerator.GetFiles(dir, \"*.*\", SearchOption.AllDirectories).Length == 0 &&\n                             Directory.GetDirectories(dir).Length == 0)\n                            {\n                                NativeMethods.DeleteFile(dir, false);\n                            }\n                        }\n                        catch (Exception)\n                        {\n                        }\n                    }\n                    catch (Exception) { }\n                }\n            }", "                    catch (Exception) { }\n                }\n            }\n            catch (UnauthorizedAccessException) { }\n        }\n\n        private static void MoveFolders(string dir)\n        {\n            try\n            {\n                string directoryName = dir;\n                DirectoryInfo dirInfo = new DirectoryInfo(directoryName);", "                if (dirInfo.Exists == false)\n                    Directory.CreateDirectory(directoryName);\n\n                List<FileData> MyFiles = FastDirectoryEnumerator\n                                   .EnumerateFiles(dir, \"*.*\", SearchOption.AllDirectories).ToList();\n\n                for (int i = 0; i < MyFiles.Count; i++)\n                {\n                    string file = MyFiles[i];\n                    FileInfo mFile = new FileInfo(file);\n\n                    // to remove name collisions", "                    if (new FileInfo(dirInfo + \"\\\\\" + mFile.Name).Exists == false)\n                    {\n                        mFile.MoveTo(dirInfo + \"\\\\\" + mFile.Name);\n                    }\n                }\n            }\n            catch (Exception) { }\n        }\n\n        public class NativeMethods\n        {\n            [DllImport(\"kernel32.dll\", SetLastError = true)]\n            [return: MarshalAs(UnmanagedType.Bool)]\n            internal static extern bool DeleteFile(string lpFileName, bool v);\n\n            [DllImport(\"kernel32.dll\", SetLastError = true)]\n            [return: MarshalAs(UnmanagedType.Bool)]\n            internal static extern bool DeleteFile(string lpFileName);\n        }\n    }\n}\n", "        public class NativeMethods\n        {\n            [DllImport(\"kernel32.dll\", SetLastError = true)]\n            [return: MarshalAs(UnmanagedType.Bool)]\n            internal static extern bool DeleteFile(string lpFileName, bool v);\n\n            [DllImport(\"kernel32.dll\", SetLastError = true)]\n            [return: MarshalAs(UnmanagedType.Bool)]\n            internal static extern bool DeleteFile(string lpFileName);\n        }\n    }\n}\n"]}
{"filename": "Actions/timeCalculations.cs", "chunked_list": ["\ufeffusing System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\nusing System.Windows;\n\nnamespace it.Actions\n{\n    internal sealed class timeCalculations : IAction\n    {\n        private readonly Regex unitRegex =\n        new Regex(\"(?<number>^[0-9]+([.,][0-9]+)?)(\\\\s*)(?<from>[a-z]+[2-3]?) (in) (?<to>[a-z]+[2-3]?)\", RegexOptions.Compiled);\n", "        private readonly Regex unitRegex =\n        new Regex(\"(?<number>^[0-9]+([.,][0-9]+)?)(\\\\s*)(?<from>[a-z]+[2-3]?) (in) (?<to>[a-z]+[2-3]?)\", RegexOptions.Compiled);\n\n        public bool Matches(string clipboardText = null)\n        {\n            if (clipboardText is null)\n            {\n                throw new System.ArgumentNullException(nameof(clipboardText));\n            }\n\n            Match matches = unitRegex.Match(clipboardText);\n            return matches.Success;\n        }\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            Match matches = unitRegex.Match(clipboardText);\n            ActionResult actionResult = new ActionResult();\n            double number = double.Parse(matches.Groups[\"number\"].Value);\n            string from = matches.Groups[\"from\"].Value;\n            string to = matches.Groups[\"to\"].Value;\n            double minuut = 0;\n            switch (from)\n            {\n                case \"min\":\n                case \"minuten\":\n                    {\n                        minuut = number;\n                        break;\n                    }\n                case \"u\":\n                case \"uur\":\n                    {\n                        minuut = number * 60;\n                        break;\n                    }\n                case \"sec\":\n                case \"seconde\":\n                    {\n                        minuut = number / 60;\n                        break;\n                    }\n            }\n\n            // oppervlakte eenheden (area units)\n            double result = 0;\n            switch (to) // naar (to)\n            {\n                // lengte eenheden\n                case \"min\":\n                case \"minuten\":\n                    {\n                        result = minuut;\n                        break;\n                    }\n                case \"u\":\n                case \"uur\":\n                    {\n                        result = minuut * 60;\n                        break;\n                    }\n                case \"sec\":\n                case \"seconde\":\n                    {\n                        minuut = number / 60;\n                        break;\n                    }\n            }\n\n            Clipboard.SetText(result.ToString(CultureInfo.CurrentCulture));\n            actionResult.Title = clipboardText;\n            actionResult.Description = result + \" \" + to;\n\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/Weatherforecast.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Text.Json;\n\nnamespace it.Actions\n{\n    public class Weatherforecast : IAction\n    {\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\"weather\", StringComparison.Ordinal);\n        }\n", "        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\"weather\", StringComparison.Ordinal);\n        }\n\n        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            string[] splits = clipboardText.Split(' ');\n            var city = splits[1];\n            string json = new WebClient().DownloadString($\"http://api.openweathermap.org/data/2.5/weather?q={splits[2]}&appid=ac7c75b9937a495021393024d0a90c44&units=metric\");\n            dynamic deserializedJson = JsonSerializer.Deserialize<dynamic>(json);\n            actionResult.Description = ($\"{clipboardText} =  {splits[2]}\");\n            return actionResult;\n        }\n", "        public class WeatherLocation\n        {\n            public Dictionary<string, string> city { get; set; }\n        }\n    }\n}\n"]}
{"filename": "Actions/BmiActions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace it.Actions\n{\n    public sealed class BmiActions : IAction\n    {\n        private readonly Dictionary<(double From, double To), string> BmiToDictionary = new Dictionary<(double From, double To), string>(8)\n        {\n            {(0, 15),\"Very severely underweight\"},\n            {(15, 16),\"Severely underweight\"},\n            {(16, 18.5),\"Underweight\"},\n            {(18.5, 25),\"Normal\"},\n            {(25, 30),\"Overweight\"},\n            {(30, 35),\"Moderately Obese\"},\n            {(35, 40),\"Severly Obese\"},\n            {(40, 99999),\"Very Severly Obese\"},\n        };\n", "        private readonly Dictionary<(double From, double To), string> BmiToDictionary = new Dictionary<(double From, double To), string>(8)\n        {\n            {(0, 15),\"Very severely underweight\"},\n            {(15, 16),\"Severely underweight\"},\n            {(16, 18.5),\"Underweight\"},\n            {(18.5, 25),\"Normal\"},\n            {(25, 30),\"Overweight\"},\n            {(30, 35),\"Moderately Obese\"},\n            {(35, 40),\"Severly Obese\"},\n            {(40, 99999),\"Very Severly Obese\"},\n        };\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as BmiActions);\n        }\n\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\" to bmi\", StringComparison.Ordinal);\n        }\n\n        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            int ageIndex = clipboardText.IndexOf(\"age\", StringComparison.Ordinal);\n            int age = (int)decimal.Parse(clipboardText.Substring(0, ageIndex).Trim());\n            int weigthIndex = clipboardText.IndexOf(\"weight\", StringComparison.Ordinal);\n            int weight = (int)decimal.Parse(clipboardText.Substring(ageIndex + 3, weigthIndex - (ageIndex + 3)).Trim());\n            int heightIndex = clipboardText.IndexOf(\"height\", StringComparison.Ordinal);\n            double height = (int)decimal.Parse(clipboardText.Substring(weigthIndex + 6, heightIndex - (weigthIndex + 6)).Trim());\n            double bmi = CalculateBMI(weight, height);\n            bmi = Math.Round(bmi, 2);\n            string bmiDescription = BmiToDictionary.First(kvp => kvp.Key.From <= bmi && bmi < kvp.Key.To).Value;\n            actionResult.Title = \"Calculate bmi\";\n            actionResult.Description = $\"{bmi}, {bmiDescription}\";\n            return actionResult;\n        }\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            int ageIndex = clipboardText.IndexOf(\"age\", StringComparison.Ordinal);\n            int age = (int)decimal.Parse(clipboardText.Substring(0, ageIndex).Trim());\n            int weigthIndex = clipboardText.IndexOf(\"weight\", StringComparison.Ordinal);\n            int weight = (int)decimal.Parse(clipboardText.Substring(ageIndex + 3, weigthIndex - (ageIndex + 3)).Trim());\n            int heightIndex = clipboardText.IndexOf(\"height\", StringComparison.Ordinal);\n            double height = (int)decimal.Parse(clipboardText.Substring(weigthIndex + 6, heightIndex - (weigthIndex + 6)).Trim());\n            double bmi = CalculateBMI(weight, height);\n            bmi = Math.Round(bmi, 2);\n            string bmiDescription = BmiToDictionary.First(kvp => kvp.Key.From <= bmi && bmi < kvp.Key.To).Value;\n            actionResult.Title = \"Calculate bmi\";\n            actionResult.Description = $\"{bmi}, {bmiDescription}\";\n            return actionResult;\n        }\n", "        private static double CalculateBMI(int weight, double height)\n        {\n            return weight / (Math.Pow(height / 100.0, 2));\n        }\n    }\n}\n"]}
{"filename": "Actions/MathActions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Globalization;\nusing System.Windows.Forms;\n\nnamespace it.Actions\n{\n    public sealed class MathActions : IAction\n    {\n        public static double EvalExpression(string expr)\n        {\n            return ParseSummands(expr.ToCharArray(), 0);\n        }\n", "        public static double EvalExpression(string expr)\n        {\n            return ParseSummands(expr.ToCharArray(), 0);\n        }\n\n        public bool Matches(string clipboardText)\n        {\n            try\n            {\n                EvalExpression(clipboardText);\n                return true;\n            }\n            catch\n            {\n                return false;\n            }\n        }\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            clipboardText = clipboardText.Replace(',', '.');\n            string answer = EvalExpression(clipboardText).ToString(CultureInfo.CurrentCulture);\n            actionResult.Title = clipboardText;\n            actionResult.Description = answer;\n            Clipboard.SetText(answer);\n            return actionResult;\n        }\n", "        private static double GetDouble(char[] expr, ref int index)\n        {\n            bool isNegative = expr[index] == '-';\n            if (isNegative) index++;\n            string dbl = string.Empty;\n            while ((int)expr[index] >= 48 && (int)expr[index] <= 57 || expr[index] == 46 || (int)expr[index] == 32)\n            {\n                dbl = dbl + expr[index];\n                index++;\n                if (index == expr.Length)\n                {\n                    index--;\n                    break;\n                }\n            }\n            var result = double.Parse(dbl, CultureInfo.InvariantCulture);", "                if (index == expr.Length)\n                {\n                    index--;\n                    break;\n                }\n            }\n            var result = double.Parse(dbl, CultureInfo.InvariantCulture);\n            if (isNegative) result = -result; return result;\n            return double.Parse(dbl, CultureInfo.InvariantCulture);\n        }\n", "        private static double parseFactors(char[] expr, ref int index)\n        {\n            double x = GetDouble(expr, ref index);\n            while (true)\n            {\n                char op = expr[index];\n                if (op != ':' && op != '*' && op != 'x' && op != '%')\n                    return x;\n                index++;\n                double y = GetDouble(expr, ref index);\n                if (op == ':')\n                    x /= y;", "                if (op == ':')\n                    x /= y;\n                else if (op == '%')\n                    x %= y;\n                else\n                    x *= y;\n            }\n        }\n\n        private static double ParseSummands(char[] expr, int index)\n        {\n            double x = parseFactors(expr, ref index);", "        private static double ParseSummands(char[] expr, int index)\n        {\n            double x = parseFactors(expr, ref index);\n            while (true)\n            {\n                char op = expr[index];\n                if (op != '+' && op != '-')\n                    return x;\n                index++;\n                double y = parseFactors(expr, ref index);\n                if (op == '+')\n                    x += y;\n                else\n                    x -= y;\n            }\n        }\n    }\n}\n", "                if (op == '+')\n                    x += y;\n                else\n                    x -= y;\n            }\n        }\n    }\n}\n"]}
{"filename": "Actions/IAction.cs", "chunked_list": ["\ufeffusing System;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace it.Actions\n{\n    internal interface IAction\n    {\n        bool Matches(string clipboardText = null);\n\n        ActionResult TryExecute(string clipboardText = null);\n    }\n", "    public sealed partial class ActionResult : IEquatable<ActionResult>, INotifyPropertyChanged\n    {\n        internal ActionResult(string title = null, string description = null)\n        {\n            Title = title;\n            Description = description;\n        }\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        internal string Description { get; set; }\n\n        internal string Title { get; set; }\n", "        public event PropertyChangedEventHandler PropertyChanged;\n\n        internal string Description { get; set; }\n\n        internal string Title { get; set; }\n\n        public bool Equals(ActionResult other)\n        {\n            throw new NotImplementedException();\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as ActionResult);\n        }\n\n        private void OnPropertyChanged([CallerMemberName] string propertyName = null)\n        {\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n        }\n    }\n", "    internal abstract class ActionBase : IAction, IEquatable<ActionBase>\n    {\n        public bool Equals(ActionBase other)\n        {\n            throw new NotImplementedException();\n        }\n\n        public abstract bool Matches(string clipboardText = null);\n\n        public abstract ActionResult TryExecute(string clipboardText = null);\n    }\n}\n", "        public abstract ActionResult TryExecute(string clipboardText = null);\n    }\n}\n"]}
{"filename": "Actions/Wallpaper.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace it.Actions\n{\n    public class Wallpaper : IAction\n    {\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\"wallpaper\", StringComparison.Ordinal);\n        }\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            {\n                actionResult.Title = \"Wallpaper\";\n                actionResult.Description = \"Nieuwe wallpaper ingesteld.\";\n            }\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/tryBinary.cs", "chunked_list": ["\ufeffusing System;\nusing System.Windows;\n\nnamespace it.Actions\n{\n    internal sealed class tryBinary : IAction\n    {\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.EndsWith(\" to binary\", StringComparison.Ordinal);\n        }\n", "        public ActionResult TryExecute(string clipboardText = null)\n        {\n            ActionResult actionResult = new ActionResult();\n            {\n                int toBinaryIndex = clipboardText.IndexOf(\"to binary\", StringComparison.Ordinal);\n                clipboardText.Substring(0, toBinaryIndex);\n                string binary = Convert.ToString(toBinaryIndex, 2);\n                actionResult.Title = \"Calculate binary\";\n                actionResult.Description = $\"{clipboardText}, {binary}\";\n                Clipboard.SetText($\"{binary}\");\n            }\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/CurrencyConversion.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Windows;\n\nnamespace it.Actions\n{\n    public class CurrencyConversion : IAction\n    {", "{\n    public class CurrencyConversion : IAction\n    {\n        private readonly Dictionary<string, string> Currency = new Dictionary<string, string>()\n        {\n                    //dollar\n                    {\"dollar\" , \"USD\" },\n                     {\"USD\" , \"USD\" },\n                    //euro\n                    {\"euro\", \"EUR\" },\n                    {\"EUR\", \"EUR\" },\n                    //turkse lira\n                    {\"lira\", \"TRY\" },\n                    {\"TRY\" , \"TRY\" },\n                    //engelse pond\n                    {\"pond\" , \"GBP\" },\n                    {\"GBP\" , \"GBP\" },\n        };\n", "        public bool Matches(string clipboardText)\n        {\n            //dollar to euro - euro to dollar\n            return clipboardText.EndsWith(\"dollar to euro\", StringComparison.Ordinal) ||\n             clipboardText.EndsWith(\"dollar naar euro\", StringComparison.Ordinal) ||\n              clipboardText.EndsWith(\"euro to dollar\", StringComparison.Ordinal) ||\n              clipboardText.EndsWith(\"euro naar dollar\", StringComparison.Ordinal) ||\n\n              //lira to euro - euro to lira\n              clipboardText.EndsWith(\"lira to euro\", StringComparison.Ordinal) ||\n             clipboardText.EndsWith(\"lira naar euro\", StringComparison.Ordinal) ||\n             clipboardText.EndsWith(\"lira naar euro\", StringComparison.Ordinal) ||\n              clipboardText.EndsWith(\"euro to lira\", StringComparison.Ordinal) ||\n              clipboardText.EndsWith(\"euro naar lira\", StringComparison.Ordinal) ||\n\n            //engelse pond to euro - pond to euro\n             clipboardText.EndsWith(\"pond to euro\", StringComparison.Ordinal) ||\n             clipboardText.EndsWith(\"pond naar euro\", StringComparison.Ordinal) ||\n             clipboardText.EndsWith(\"euro to pond\", StringComparison.Ordinal) ||\n             clipboardText.EndsWith(\"euro naar pond\", StringComparison.Ordinal);\n        }\n", "        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            clipboardText = clipboardText.Replace('.', ',');\n            string[] splits = clipboardText.Split(' '); ;\n            string from = splits[1];\n            string to = splits[3];\n            if (Currency.TryGetValue(from, out var fromCurrency) && Currency.TryGetValue(to, out var toCurrency))\n            {\n                var url = $\"https://api.exchangeratesapi.io/latest?base={fromCurrency}&symbols={toCurrency}\";\n                string json = new WebClient().DownloadString(url);\n                ExchangeRateModel deserializedJson = JsonSerializer.Deserialize<ExchangeRateModel>(json);", "                if (decimal.TryParse(splits[0], out decimal amount)) ;\n                {\n                    var rate = deserializedJson.rates[toCurrency];\n                    actionResult.Description = $\"{clipboardText} = {amount * rate:N2} {toCurrency}\";\n                    Clipboard.SetText($\"{clipboardText} = {amount * rate:N2} {toCurrency}\");\n                }\n            }\n            return actionResult;\n        }\n\n        internal class ExchangeRateModel\n        {\n            public Dictionary<string, decimal> rates { get; set; }\n        }\n    }\n}\n", "        internal class ExchangeRateModel\n        {\n            public Dictionary<string, decimal> rates { get; set; }\n        }\n    }\n}\n"]}
{"filename": "Actions/TimespanActions.cs", "chunked_list": ["using System;\nusing System.Globalization;\n\nnamespace it.Actions\n{\n    public sealed class TimespanActions : IAction\n    {\n        private readonly string[] dateFormats =\n        {\n            \"dd.MM.yyyy\",\n            \"dd-MM-yyyy\",\n\n            //american format\n            \"MM.dd.yyyy\",\n            \"MM-dd-yyyy\",\n        };\n", "        private bool isUsingTimespan;\n\n        private DateTimeOffset? prevDate;\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as TimespanActions);\n        }\n\n        public bool Matches(string clipboardText)\n        {\n            return DateTimeOffset.TryParseExact(clipboardText, dateFormats, CultureInfo.CurrentCulture, DateTimeStyles.AssumeLocal, out _);\n        }\n", "        public bool Matches(string clipboardText)\n        {\n            return DateTimeOffset.TryParseExact(clipboardText, dateFormats, CultureInfo.CurrentCulture, DateTimeStyles.AssumeLocal, out _);\n        }\n\n        public ActionResult TryExecute(string clipboardText)\n        {\n            isUsingTimespan = !isUsingTimespan;\n            ActionResult actionResult = new ActionResult();\n            if (DateTimeOffset.TryParseExact(clipboardText, dateFormats, CultureInfo.CurrentCulture, DateTimeStyles.AssumeLocal, out DateTimeOffset newDate))\n            {", "            if (DateTimeOffset.TryParseExact(clipboardText, dateFormats, CultureInfo.CurrentCulture, DateTimeStyles.AssumeLocal, out DateTimeOffset newDate))\n            {\n                if (prevDate.HasValue)\n                {\n                    TimeSpan? difference = newDate - prevDate;\n                    prevDate = null;\n                    actionResult.Title = \"Days between:\";\n                    actionResult.Description = difference.Value.Days.ToString(CultureInfo.InvariantCulture);\n                }\n                else\n                {\n                    prevDate = newDate;\n                }\n            }\n\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/ConvertActions.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.Globalization;\nusing System.Net;\nusing System.Text.Json;\nusing System.Text.RegularExpressions;\nusing System.Windows;\n\nnamespace it.Actions", "\nnamespace it.Actions\n{\n    internal sealed class ConvertActions : ActionBase\n    {\n        private readonly Regex unitRegex =\n        new Regex(\"(?<number>^[0-9]+([.,][0-9]+)?)(\\\\s*)(?<from>[a-z]+[2-3]?) (to|naar) (?<to>[a-z]+[2-3]?)\", RegexOptions.Compiled);\n\n        private NameValueCollection currencies = new NameValueCollection()\n        {\n            { \"usd\", \"usd\" },\n            { \"unites states dollar\", \"usd\" },\n            { \"euro\", \"eur\" },\n            { \"cad\", \"cad\" },\n        };\n", "        private NameValueCollection currencies = new NameValueCollection()\n        {\n            { \"usd\", \"usd\" },\n            { \"unites states dollar\", \"usd\" },\n            { \"euro\", \"eur\" },\n            { \"cad\", \"cad\" },\n        };\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as ConvertActions);\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as ConvertActions);\n        }\n\n        public override bool Matches(string clipboardText = null)\n        {\n            if (clipboardText is null)\n            {\n                throw new System.ArgumentNullException(nameof(clipboardText));\n            }\n\n            Match matches = unitRegex.Match(clipboardText);\n            return matches.Success;\n        }\n", "        public override ActionResult TryExecute(string clipboardText)\n        {\n            Match matches = unitRegex.Match(clipboardText);\n            ActionResult actionResult = new ActionResult();\n            double number = double.Parse(matches.Groups[\"number\"].Value);\n            string from = matches.Groups[\"from\"].Value;\n            string to = matches.Groups[\"to\"].Value;\n\n            // we should place the conversion of currency here\n            string fromCurrency = currencies[from];\n            string toCurrency = currencies[to];\n\n            // we have a currency, make a call and get the result.\n            return GetCurrencyActionResult(clipboardText, fromCurrency, toCurrency, (decimal)number);\n\n            double meter = 0, gram = 0, liter = 0, oppervlakte = 0, snelheid = 0;\n            switch (from)\n            {\n                case \"mm\":\n                case \"millimeter\":\n                    {\n                        meter = number / 1000;\n                        break;\n                    }\n                case \"cm\":\n                case \"centimer\":\n                    {\n                        meter = number / 100;\n                        break;\n                    }\n                case \"dm\":\n                case \"decimeter\":\n                    {\n                        meter = number / 10;\n                        break;\n                    }\n                case \"m\":\n                case \"meter\":\n                    {\n                        meter = number;\n                        break;\n                    }\n                case \"dam\":\n                case \"decameter\":\n                    {\n                        meter = number * 1;\n                        break;\n                    }\n                case \"hm\":\n                case \"hectometer\":\n                    {\n                        meter = number * 100;\n                        break;\n                    }\n                case \"km\":\n                case \"kilometer\":\n                    {\n                        meter = number * 1000;\n                        break;\n                    }\n                case \"feet\":\n                case \"ft\":\n                    {\n                        meter = number * 0.3048;\n                        break;\n                    }\n                case \"inch\":\n                    {\n                        meter = number * 0.0254;\n                        break;\n                    }\n                case \"mile\":\n                case \"miles\":\n                    {\n                        meter = number / 0.00062137;\n                        break;\n                    }\n                case \"yard\":\n                case \"yd\":\n                    {\n                        meter = number * 0.9144;\n                        break;\n                    }                    // gewicht eenheden\n                case \"mg\":\n                case \"milligram\":\n                    {\n                        gram = number / 1000;\n                        break;\n                    }\n                case \"cg\":\n                case \"centigram\":\n                    {\n                        gram = number / 100;\n                        break;\n                    }\n                case \"dg\":\n                case \"decigram\":\n                    {\n                        gram = number / 10;\n                        break;\n                    }\n                case \"gr\":\n                case \"gram\":\n                    {\n                        gram = number;\n                        break;\n                    }\n                case \"dag\":\n                case \"decagram\":\n                    {\n                        gram = number * 10;\n                        break;\n                    }\n                case \"hg\":\n                case \"hectogram\":\n                    {\n                        gram = number * 100;\n                        break;\n                    }\n                case \"kg\":\n                case \"kilogram\":\n                    {\n                        gram = number * 1000;\n                        break;\n                    }\n                case \"ml\":\n                case \"milliliter\":\n                    {\n                        liter = number / 1000;\n                        break;\n                    }\n                case \"cl\":\n                case \"centiliter\":\n                    {\n                        liter = number / 100;\n                        break;\n                    }\n                case \"dl\":\n                case \"deciliter\":\n                    {\n                        liter = number / 10;\n                        break;\n                    }\n                case \"l\":\n                case \"liter\":\n                    {\n                        liter = number;\n                        break;\n                    }\n                case \"dal\":\n                case \"decaliter\":\n                    {\n                        liter = number * 10;\n                        break;\n                    }\n                case \"hl\":\n                case \"hectoliter\":\n                    {\n                        liter = number * 100;\n                        break;\n                    }\n                case \"kl\":\n                case \"kiloliter\":\n                    {\n                        liter = number * 1000;\n                        break;\n                    }                    // oppervlakte eenheden\n                case \"mm2\":\n                    {\n                        oppervlakte = number / 1000000;\n                        break;\n                    }\n                case \"cm2\":\n                    {\n                        oppervlakte = number / 10000;\n                        break;\n                    }\n                case \"dm2\":\n                    {\n                        oppervlakte = number / 100;\n                        break;\n                    }\n                case \"m2\":\n                    {\n                        oppervlakte = number;\n                        break;\n                    }\n                case \"dam2\":\n                    {\n                        oppervlakte = number * 100;\n                        break;\n                    }\n                case \"hm2\":\n                    {\n                        oppervlakte = number * 10000;\n                        break;\n                    }\n                case \"km2\":\n                    {\n                        oppervlakte = number * 1000000;\n                        break;\n                    }\n                case \"kmh\":\n                    {\n                        snelheid = number;\n                        break;\n                    }\n                case \"ms\":\n                    {\n                        snelheid = number * 3.6;\n                        break;\n                    }\n            }\n\n            // oppervlakte eenheden (area units)\n            double result = 0;\n            switch (to) // naar (to)\n            {\n                // lengte eenheden\n                case \"mm\":\n                case \"millimeter\":\n                    {\n                        result = meter * 1000;\n                        break;\n                    }\n                case \"cm\":\n                case \"centimer\":\n                    {\n                        result = meter * 100;\n                        break;\n                    }\n                case \"dm\":\n                case \"decimeter\":\n                    {\n                        result = meter * 10;\n                        break;\n                    }\n                case \"m\":\n                case \"meter\":\n                    {\n                        result = meter;\n                        break;\n                    }\n                case \"dam\":\n                case \"decameter\":\n                    {\n                        result = meter / 1;\n                        break;\n                    }\n                case \"hm\":\n                case \"hectometer\":\n                    {\n                        result = meter / 100;\n                        break;\n                    }\n                case \"km\":\n                case \"kilometer\":\n                    {\n                        result = meter / 1000;\n                        break;\n                    }\n                case \"feet\":\n                case \"ft\":\n                    {\n                        result = meter / 0.3048;\n                        break;\n                    }\n                case \"inch\":\n                    {\n                        result = meter / 0.0254;\n                        break;\n                    }\n                case \"mile\":\n                case \"miles\":\n                    {\n                        result = meter * 0.00062137;\n                        break;\n                    }\n                case \"yard\":\n                case \"yd\":\n                    {\n                        result = meter * 0.9144;\n                        break;\n                    }                    // gewicht eenheden (Weight Units)\n                case \"mg\":\n                case \"milligram\":\n                    {\n                        result = gram * 1000;\n                        break;\n                    }\n                case \"cg\":\n                case \"centigram\":\n                    {\n                        result = gram * 100;\n                        break;\n                    }\n                case \"dg\":\n                case \"decigram\":\n                    {\n                        result = gram * 10;\n                        break;\n                    }\n                case \"gr\":\n                case \"gram\":\n                    {\n                        result = gram;\n                        break;\n                    }\n                case \"dag\":\n                case \"decagram\":\n                    {\n                        result = gram / 10;\n                        break;\n                    }\n                case \"hg\":\n                case \"hectogram\":\n                    {\n                        result = gram / 100;\n                        break;\n                    }\n                case \"kg\":\n                case \"kilogram\":\n                    {\n                        result = gram / 1000;\n                        break;\n                    }                    // inhoud (volume units)\n                case \"ml\":\n                case \"milliliter\":\n                    {\n                        result = liter * 1000;\n                        break;\n                    }\n                case \"cl\":\n                case \"centiliter\":\n                    {\n                        result = liter * 100;\n                        break;\n                    }\n                case \"dl\":\n                case \"deciliter\":\n                    {\n                        result = liter * 10;\n                        break;\n                    }\n                case \"l\":\n                case \"liter\":\n                    {\n                        result = liter;\n                        break;\n                    }\n                case \"dal\":\n                case \"decaliter\":\n                    {\n                        result = liter / 10;\n                        break;\n                    }\n                case \"hl\":\n                case \"hectoliter\":\n                    {\n                        result = liter / 100;\n                        break;\n                    }\n                case \"kl\":\n                case \"kiloliter\":\n                    {\n                        result = liter / 1000;\n                        break;\n                    }                    // oppervlakte eenheden (Area Units)\n                case \"mm2\":\n                    {\n                        result = oppervlakte * 1000000;\n                        break;\n                    }\n                case \"cm2\":\n                    {\n                        result = oppervlakte * 10000;\n                        break;\n                    }\n                case \"dm2\":\n                    {\n                        result = oppervlakte * 100;\n                        break;\n                    }\n                case \"m2\":\n                    {\n                        result = oppervlakte;\n                        break;\n                    }\n                case \"dam2\":\n                    {\n                        result = oppervlakte / 100;\n                        break;\n                    }\n                case \"hm2\":\n                    {\n                        result = oppervlakte / 10000;\n                        break;\n                    }\n                case \"km2\":\n                    {\n                        result = oppervlakte / 1000000;\n                        break;\n                    }\n                case \"kmh\":\n                    {\n                        result = snelheid;\n                        break;\n                    }\n                case \"ms\":\n                    {\n                        result = snelheid / 3.6;\n                        break;\n                    }\n            }\n\n            Clipboard.SetText(result.ToString(CultureInfo.CurrentCulture));\n            actionResult.Title = clipboardText;\n            actionResult.Description = result + to;\n\n            return actionResult;\n        }\n", "        private ActionResult GetCurrencyActionResult(string clipboardText, string fromCurrency, string toCurrency, decimal amount)\n        {\n            ActionResult actionResult = new ActionResult();\n            if (string.IsNullOrWhiteSpace(fromCurrency) | string.IsNullOrWhiteSpace(toCurrency)) return actionResult;\n\n            using (WebClient client = new WebClient())\n            {\n                try\n                {\n                    string json = client.DownloadString($\"https://api.exchangeratesapi.io/latest?base={fromCurrency.ToUpper()}&symbols={toCurrency.ToUpper()}\");\n                    ExchangeRateModel deserializedJson = JsonSerializer.Deserialize<ExchangeRateModel>(json);\n                    decimal rate = deserializedJson.rates[toCurrency];\n                    actionResult.Description = $\"{clipboardText} = {amount * rate:N2} {toCurrency}\";\n                }", "                catch (Exception ex)\n                {\n                    actionResult.Description = $\"There was an error getting the exchange rate: {ex.Message}\";\n                }\n            }\n\n            return actionResult;\n        }\n\n        internal class ExchangeRateModel\n        {\n            public Dictionary<string, decimal> rates { get; set; }\n        }\n    }\n}\n", "        internal class ExchangeRateModel\n        {\n            public Dictionary<string, decimal> rates { get; set; }\n        }\n    }\n}\n"]}
{"filename": "Actions/CountdownActions.cs", "chunked_list": ["using System;\nusing System.Globalization;\nusing System.Threading;\n\nnamespace it.Actions\n{\n    internal sealed class CountdownActions : IAction\n    {\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as CountdownActions);\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as CountdownActions);\n        }\n\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.StartsWith(\"timer\", StringComparison.Ordinal) && TimeSpan.TryParse(clipboardText.Replace(\"timer \", string.Empty), out TimeSpan _);\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            _ = TimeSpan.TryParse(clipboardText.Replace(\"timer \", string.Empty), CultureInfo.InvariantCulture, out TimeSpan ts);\n            ActionResult actionResult = new ActionResult();\n            Thread.Sleep((int)ts.TotalMilliseconds);\n            actionResult.Title = \"Countdown timer\";\n            actionResult.Description = \"time is over\";\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/Benchmark.cs", "chunked_list": ["\ufeffusing System;\nusing System.Diagnostics;\n\nnamespace it.Actions\n{\n    public class Benchmark\n    {\n        public void RunTheMethod(Action action)\n        {\n            // Create new stopwatch.\n            Stopwatch stopwatch = new Stopwatch();\n\n            // Begin timing.\n            stopwatch.Start();\n\n            // Do something.", "            for (int i = 0; i < 10000000; i++)\n            {\n                action();\n            }\n\n            // Stop timing.\n            stopwatch.Stop();\n\n            // Write result.\n            Console.WriteLine(\"Total time: {0}\", stopwatch.Elapsed.TotalMilliseconds);\n            Console.WriteLine(\"Avg time: {0}\", stopwatch.Elapsed.TotalMilliseconds / 10000000.0);\n        }\n    }\n}\n"]}
{"filename": "Actions/Currency.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Net;\nusing System.Threading;\nusing System.Text.Json;\n\n\nnamespace it.Actions\n{\n    public class Currency : IAction\n    {", "namespace it.Actions\n{\n    public class Currency : IAction\n    {\n        private readonly string[] commands = { \"bitcoin\", \"bitcoin prijs\", \"bitcoin price\", \"ethereum\", \"ethereum prijs\", \"ethereum price\" ,\n            \"litecoin\", \"litecoin price\", \"litecoin prijs\", \"euro naar lira\"};\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as DeviceActions);\n        }\n", "        public bool Matches(string clipboardText)\n        {\n            for (int i = 0; i < commands.Length; i++)\n            {\n                string command = commands[i];\n                if (command.Equals(clipboardText, StringComparison.Ordinal))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n", "        public ActionResult TryExecute(string clipboardText = null)\n        {\n            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n            ActionResult actionResult = new ActionResult(clipboardText);\n\n            switch (clipboardText)\n            {\n                case \"bitcoin\":\n                case \"bitcoin price\":\n                case \"bitcoin prijs\":\n                    {\n                        string json = new WebClient().DownloadString(\"https://api.coinmarketcap.com/v1/ticker/bitcoin/?convert=EUR\");\n                        List<Item> items = JsonSerializer.Deserialize<List<Item>>(json);", "                        for (int i = 0; i < items.Count; i++)\n                        {\n                            Item item = items[i];\n                            actionResult.Title = clipboardText;\n                            actionResult.Description = (\"\u20ac\" + (item.price_eur).ToString(\"F2\", CultureInfo.InvariantCulture));\n                        }\n                    }\n                    return actionResult;\n\n                case \"ethereum\":\n                case \"ethereum price\":\n                case \"ethereum prijs\":\n                    {\n                        string json = new WebClient().DownloadString(\"https://api.coinmarketcap.com/v1/ticker/ethereum/?convert=EUR\");\n                        List<Item> items = JsonSerializer.Deserialize<List<Item>>(json);", "                        for (int i = 0; i < items.Count; i++)\n                        {\n                            Item item = items[i];\n                            actionResult.Title = clipboardText;\n                            actionResult.Description = (\"\u20ac\" + (item.price_eur).ToString(\"F2\", CultureInfo.InvariantCulture));\n                        }\n                    }\n                    return actionResult;\n\n                case \"litecoin\":\n                case \"litecoin price\":\n                case \"litecoin prijs\":\n                    {\n                        string json = new WebClient().DownloadString(\"https://api.coinmarketcap.com/v1/ticker/litecoin/?convert=EUR\");\n                        List<Item> items = JsonSerializer.Deserialize<List<Item>>(json);", "                        for (int i = 0; i < items.Count; i++)\n                        {\n                            Item item = items[i];\n                            actionResult.Title = clipboardText;\n                            actionResult.Description = (\"\u20ac\" + (item.price_eur).ToString(\"F2\", CultureInfo.InvariantCulture));\n                        }\n                    }\n                    return actionResult;\n\n                case \"euro naar lira\":\n                    {\n                        string url = \"https://api.exchangeratesapi.io/latest?base=EUR\";\n                        string json = new WebClient().DownloadString(url);\n                        var amount = 1;\n                        var currency = JsonSerializer.Deserialize<dynamic>(json);\n                        double curAmount = amount * (double)currency.rates.TRY;\n                        {\n                            actionResult.Title = clipboardText;\n                            actionResult.Description = $\"{amount:N2} {currency.@base} = {curAmount:N2} Turkse lira\";\n                        }\n                    }\n                    return actionResult;\n            }\n\n            return actionResult;\n        }\n", "        public class Item\n        {\n            public string available_supply { get; set; }\n\n            //Coinmarketcap\n            public string id { get; set; }\n\n            public string last_updated { get; set; }\n\n            public string market_cap_usd { get; set; }\n", "            public string market_cap_usd { get; set; }\n\n            public string name { get; set; }\n\n            public string percent_change_1h { get; set; }\n\n            public string percent_change_24h { get; set; }\n\n            public string percent_change_7d { get; set; }\n\n            public decimal price_eur { get; set; }\n", "            public string percent_change_7d { get; set; }\n\n            public decimal price_eur { get; set; }\n\n            public string rank { get; set; }\n\n            public string symbol { get; set; }\n\n            public string total_supply { get; set; }\n            public string volume_usd_24h { get; set; }\n        }\n    }\n}\n", "            public string total_supply { get; set; }\n            public string volume_usd_24h { get; set; }\n        }\n    }\n}\n"]}
{"filename": "Actions/timezoneActions.cs", "chunked_list": ["using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\n\nnamespace it.Actions\n{\n    internal sealed class TimezoneActions : IAction\n    {\n        private string country;\n", "        private string country;\n\n        private string timeZoneId = string.Empty;\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as TimezoneActions);\n        }\n\n        public bool Matches(string clipboardText)\n        {\n            country = clipboardText.Trim().ToLowerInvariant();\n            KeyValuePair<string, Countries.UtcOffset> keyValuePair = TryKeypair();\n            return keyValuePair.Key != default;\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            country = clipboardText.Trim().ToLowerInvariant();\n            KeyValuePair<string, Countries.UtcOffset> keyValuePair = TryKeypair();\n\n            actionResult.Title = country;\n            switch (keyValuePair.Value)\n            {\n                case Countries.UtcOffset.UtcMinusTwelve:\n                    {\n                        timeZoneId = \"Dateline Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusEleven:\n                    {\n                        timeZoneId = \"Samoa Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusTen:\n                    {\n                        timeZoneId = \"Hawaiian Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusNine:\n                    {\n                        timeZoneId = \"Alaskan Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusEight:\n                    {\n                        timeZoneId = \"Pacific Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusSeven:\n                    {\n                        timeZoneId = \"US Mountain Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusSix:\n                    {\n                        timeZoneId = \"Central America Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusFive:\n                    {\n                        timeZoneId = \"SA Pacific Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusFour:\n                    {\n                        timeZoneId = \"Atlantic Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusThreepoinfive:\n                    {\n                        timeZoneId = \"Newfoundland Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusThree:\n                    {\n                        timeZoneId = \"E. South America Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusTwo:\n                    {\n                        timeZoneId = \"Mid-Atlantic Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusOne:\n                    {\n                        timeZoneId = \"Cape Verde Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcZero:\n                    {\n                        timeZoneId = \"GMT Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusOne:\n                    {\n                        timeZoneId = \"Central European Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusTwo:\n                    {\n                        timeZoneId = \"Jordan Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusThree:\n                    {\n                        timeZoneId = \"Arabic Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusThreepoinfive:\n                    {\n                        timeZoneId = \"Iran Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusFour:\n                    {\n                        timeZoneId = \"Mauritius Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusFourpointfive:\n                    {\n                        timeZoneId = \"Afghanistan Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusFive:\n                    {\n                        timeZoneId = \"Ekaterinburg Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusSix:\n                    {\n                        timeZoneId = \"N. Central Asia Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusSeven:\n                    {\n                        timeZoneId = \"SE Asia Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusEight:\n                    {\n                        timeZoneId = \"China Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusNine:\n                    {\n                        timeZoneId = \"Korea Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusTen:\n                    {\n                        timeZoneId = \"E. Australia Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusEleven:\n                    {\n                        timeZoneId = \"Central Pacific Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusTwelve:\n                    {\n                        timeZoneId = \"New Zealand Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusThirteen:\n                    {\n                        timeZoneId = \"Tonga Standard Time\";\n                        break;\n                    }\n                case Countries.UtcOffset.UtcPlusFivepointfive:\n                    {\n                        timeZoneId = \"India Standard Time\";\n                        break;\n                    }\n            }\n\n            TimeZoneInfo timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);\n            DateTimeOffset dateTime = TimeZoneInfo.ConvertTime(DateTimeOffset.Now, timeZoneInfo);\n            actionResult.Description = dateTime.ToString(\"HH:mm\", CultureInfo.CurrentCulture);\n            return actionResult;\n        }\n\n        private KeyValuePair<string, Countries.UtcOffset> TryKeypair()\n        {\n            bool predicate(KeyValuePair<string, Countries.UtcOffset> x)\n            {\n                return x.Key.Contains(country);\n            }\n\n            return Countries.UtcOffsetByCountry.FirstOrDefault(predicate);\n        }\n    }\n}\n", "        public bool Matches(string clipboardText)\n        {\n            country = clipboardText.Trim().ToLowerInvariant();\n            KeyValuePair<string, Countries.UtcOffset> keyValuePair = TryKeypair();\n            return keyValuePair.Key != default;\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult();\n            country = clipboardText.Trim().ToLowerInvariant();\n            KeyValuePair<string, Countries.UtcOffset> keyValuePair = TryKeypair();\n\n            actionResult.Title = country;\n            switch (keyValuePair.Value)\n            {\n                case Countries.UtcOffset.UtcMinusTwelve:\n                    {\n                        timeZoneId = \"Dateline Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusEleven:\n                    {\n                        timeZoneId = \"Samoa Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusTen:\n                    {\n                        timeZoneId = \"Hawaiian Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusNine:\n                    {\n                        timeZoneId = \"Alaskan Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusEight:\n                    {\n                        timeZoneId = \"Pacific Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusSeven:\n                    {\n                        timeZoneId = \"US Mountain Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusSix:\n                    {\n                        timeZoneId = \"Central America Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusFive:\n                    {\n                        timeZoneId = \"SA Pacific Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusFour:\n                    {\n                        timeZoneId = \"Atlantic Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusThreepoinfive:\n                    {\n                        timeZoneId = \"Newfoundland Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusThree:\n                    {\n                        timeZoneId = \"E. South America Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusTwo:\n                    {\n                        timeZoneId = \"Mid-Atlantic Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcMinusOne:\n                    {\n                        timeZoneId = \"Cape Verde Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcZero:\n                    {\n                        timeZoneId = \"GMT Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusOne:\n                    {\n                        timeZoneId = \"Central European Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusTwo:\n                    {\n                        timeZoneId = \"Jordan Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusThree:\n                    {\n                        timeZoneId = \"Arabic Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusThreepoinfive:\n                    {\n                        timeZoneId = \"Iran Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusFour:\n                    {\n                        timeZoneId = \"Mauritius Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusFourpointfive:\n                    {\n                        timeZoneId = \"Afghanistan Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusFive:\n                    {\n                        timeZoneId = \"Ekaterinburg Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusSix:\n                    {\n                        timeZoneId = \"N. Central Asia Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusSeven:\n                    {\n                        timeZoneId = \"SE Asia Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusEight:\n                    {\n                        timeZoneId = \"China Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusNine:\n                    {\n                        timeZoneId = \"Korea Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusTen:\n                    {\n                        timeZoneId = \"E. Australia Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusEleven:\n                    {\n                        timeZoneId = \"Central Pacific Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusTwelve:\n                    {\n                        timeZoneId = \"New Zealand Standard Time\";\n                        break;\n                    }\n\n                case Countries.UtcOffset.UtcPlusThirteen:\n                    {\n                        timeZoneId = \"Tonga Standard Time\";\n                        break;\n                    }\n                case Countries.UtcOffset.UtcPlusFivepointfive:\n                    {\n                        timeZoneId = \"India Standard Time\";\n                        break;\n                    }\n            }\n\n            TimeZoneInfo timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);\n            DateTimeOffset dateTime = TimeZoneInfo.ConvertTime(DateTimeOffset.Now, timeZoneInfo);\n            actionResult.Description = dateTime.ToString(\"HH:mm\", CultureInfo.CurrentCulture);\n            return actionResult;\n        }\n\n        private KeyValuePair<string, Countries.UtcOffset> TryKeypair()\n        {\n            bool predicate(KeyValuePair<string, Countries.UtcOffset> x)\n            {\n                return x.Key.Contains(country);\n            }\n\n            return Countries.UtcOffsetByCountry.FirstOrDefault(predicate);\n        }\n    }\n}\n"]}
{"filename": "Actions/DeviceActions.cs", "chunked_list": ["using Microsoft.Win32.SafeHandles;\nusing System;\nusing System.Diagnostics;\nusing System.Globalization;\nusing System.Net;\nusing System.Net.NetworkInformation;\nusing System.Net.Sockets;\nusing System.Runtime.InteropServices;\nusing System.Threading;\nusing System.Windows.Forms;", "using System.Threading;\nusing System.Windows.Forms;\nnamespace it.Actions\n{\n    internal sealed class DeviceActions : IAction, IDisposable\n    {\n        private readonly string[] commands = { \"sluit\", \"opnieuw opstarten\", \"reboot\", \"slaapstand\", \"sleep\", \"taakbeheer\",\n            \"task mananger\", \"notepad\", \"kladblok\", \"leeg prullebak\", \"prullebak\", \"empty recycle bin\", \"empty bin\",\n            \"empty recycling bin\", \"vergrendel\", \"lock\", nameof(afsluiten), \"shut down\", \"ram\", \"windows versie\", \"windows version\",\n            \"mac-adres\", \"mac\", \"mac address\", \"computer naam\", \"computer name\", \"cpu\", \"wifi check\", \"heb ik internet?\", \"count words\", \"tel woorden\", \"ip\", \"runtime\"};\n", "        private readonly SmartPerformanceCounter cpuCounter = new SmartPerformanceCounter(\n            () => new PerformanceCounter(\"Processor\", \"% Processor Time\", \"_Total\"), TimeSpan.FromMinutes(1));\n\n        private readonly SafeFileHandle handle = new SafeFileHandle(IntPtr.Zero, true);\n\n        private readonly SmartPerformanceCounter ramCounter =\n            new SmartPerformanceCounter(() => new PerformanceCounter(\"Memory\", \"Available MBytes\"),\n                TimeSpan.FromMinutes(1));\n\n        private Process afsluiten;\n", "        private Process afsluiten;\n\n        private bool isCountingWords;\n\n        private Process kladblok;\n\n        private Process reboot;\n\n        private Process taskmananger;\n\n        private Process vergrendel;\n", "        private Process taskmananger;\n\n        private Process vergrendel;\n\n        private enum Recycle : uint\n        {\n            SHRB_NOCONFIRMATION = 0x00000001,\n\n            SHRB_NOPROGRESSUI = 0x00000002,\n\n            SHRB_NOSOUND = 0x00000004,\n        }\n", "        public void Dispose()\n        {\n            handle?.Dispose();\n            afsluiten?.Dispose();\n            reboot?.Dispose();\n            taskmananger?.Dispose();\n            vergrendel?.Dispose();\n            kladblok?.Dispose();\n            cpuCounter?.Dispose();\n            ramCounter.Dispose();\n        }\n", "        public bool Equals(DeviceActions other)\n        {\n            if (other is null)\n            {\n                throw new ArgumentNullException(nameof(other));\n            }\n\n            throw new NotImplementedException();\n        }\n\n        public override bool Equals(object obj)\n        {\n            return Equals(obj as DeviceActions);\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as DeviceActions);\n        }\n\n        public bool Matches(string clipboardText = null)\n        {\n            for (int i = 0; i < commands.Length; i++)\n            {\n                string command = commands[i];\n                if (command.Equals(clipboardText, StringComparison.Ordinal))\n                {\n                    return true;\n                }\n            }\n\n            return isCountingWords;\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n            ActionResult actionResult = new ActionResult(clipboardText);\n\n            switch (clipboardText.ToLower(CultureInfo.InvariantCulture))\n            {\n                case \"sluit\":\n                    {\n                        Environment.Exit(0);\n                        return actionResult;\n                    }\n                case \"opnieuw opstarten\":\n                case nameof(reboot):\n                    {\n                        reboot?.Dispose();\n                        reboot = Process.Start(\"shutdown\", \"/r /t 0\");\n                        return actionResult;\n                    }\n\n                case \"slaapstand\":\n                case \"sleep\":\n                    {\n                        _ = Application.SetSuspendState(PowerState.Hibernate, true, true);\n                        return actionResult;\n                    }\n                case \"taakbeheer\":\n                case \"task mananger\":\n                    {\n                        taskmananger?.Dispose();\n                        taskmananger = Process.Start(\"taskmgr.exe\");\n                        return actionResult;\n                    }\n\n                case \"notepad\":\n                case \"kladblok\":\n                    {\n                        kladblok?.Dispose();\n                        kladblok = Process.Start(\"notepad.exe\");\n                        actionResult.Description = \"Kladblok geopend\";\n                        return actionResult;\n                    }\n                case \"leeg prullebak\":\n                case \"prullebak\":\n                case \"empty recycle bin\":\n                case \"empty bin\":\n                case \"empty recycling bin\":\n                    {\n                        _ = SHEmptyRecycleBin(IntPtr.Zero, null, Recycle.SHRB_NOCONFIRMATION);\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Description = \"Recycling bin emptied successfully\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Description = \"Prullebak succesvol leeg gemaakt\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n                case \"vergrendel\":\n                case \"lock\":\n                    {\n                        vergrendel?.Dispose();\n                        vergrendel = Process.Start(@\"C:\\WINDOWS\\system32\\rundll32.exe\", \"user32.dll,LockWorkStation\");\n                        break;\n                    }\n                case \"afsluiten\":\n                case \"shut down\":\n                    {\n                        afsluiten?.Dispose();\n                        afsluiten = Process.Start(\"shutdown\", \"/s /t 0\");\n                        break;\n                    }\n\n                //om je momentele ram geheugen te laten zien (To display your momentary RAM memory)\n                case \"ram\":\n                    {\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    using PerformanceCounter pc = ramCounter.Value;\n                                    actionResult.Title = \"RAM Memory\";\n                                    actionResult.Description =\n                                        pc.NextValue().ToString(CultureInfo.InvariantCulture) + \" MB of RAM in your system\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    using PerformanceCounter pc = ramCounter.Value;\n                                    actionResult.Title = \"Ram geheugen\";\n                                    actionResult.Description =\n                                        pc.NextValue().ToString(CultureInfo.InvariantCulture) +\n                                        \" MB ram-geheugen over in je systeem\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n                        return actionResult;\n                    }\n                case \"windows versie\":\n                case \"windows version\":\n                    {\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"Your Windows version\";\n                                    actionResult.Description = $\"Windows Version {Environment.OSVersion.Version}\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Je windows versie\";\n                                    actionResult.Description = $\"Windows Version {Environment.OSVersion.Version}\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n                case \"mac-adres\":\n                case \"mac\":\n                case \"mac address\":\n                    {\n                        string sMacAddress = string.Empty;\n                        NetworkInterface[] array = NetworkInterface.GetAllNetworkInterfaces();", "                if (command.Equals(clipboardText, StringComparison.Ordinal))\n                {\n                    return true;\n                }\n            }\n\n            return isCountingWords;\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n            ActionResult actionResult = new ActionResult(clipboardText);\n\n            switch (clipboardText.ToLower(CultureInfo.InvariantCulture))\n            {\n                case \"sluit\":\n                    {\n                        Environment.Exit(0);\n                        return actionResult;\n                    }\n                case \"opnieuw opstarten\":\n                case nameof(reboot):\n                    {\n                        reboot?.Dispose();\n                        reboot = Process.Start(\"shutdown\", \"/r /t 0\");\n                        return actionResult;\n                    }\n\n                case \"slaapstand\":\n                case \"sleep\":\n                    {\n                        _ = Application.SetSuspendState(PowerState.Hibernate, true, true);\n                        return actionResult;\n                    }\n                case \"taakbeheer\":\n                case \"task mananger\":\n                    {\n                        taskmananger?.Dispose();\n                        taskmananger = Process.Start(\"taskmgr.exe\");\n                        return actionResult;\n                    }\n\n                case \"notepad\":\n                case \"kladblok\":\n                    {\n                        kladblok?.Dispose();\n                        kladblok = Process.Start(\"notepad.exe\");\n                        actionResult.Description = \"Kladblok geopend\";\n                        return actionResult;\n                    }\n                case \"leeg prullebak\":\n                case \"prullebak\":\n                case \"empty recycle bin\":\n                case \"empty bin\":\n                case \"empty recycling bin\":\n                    {\n                        _ = SHEmptyRecycleBin(IntPtr.Zero, null, Recycle.SHRB_NOCONFIRMATION);\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Description = \"Recycling bin emptied successfully\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Description = \"Prullebak succesvol leeg gemaakt\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n                case \"vergrendel\":\n                case \"lock\":\n                    {\n                        vergrendel?.Dispose();\n                        vergrendel = Process.Start(@\"C:\\WINDOWS\\system32\\rundll32.exe\", \"user32.dll,LockWorkStation\");\n                        break;\n                    }\n                case \"afsluiten\":\n                case \"shut down\":\n                    {\n                        afsluiten?.Dispose();\n                        afsluiten = Process.Start(\"shutdown\", \"/s /t 0\");\n                        break;\n                    }\n\n                //om je momentele ram geheugen te laten zien (To display your momentary RAM memory)\n                case \"ram\":\n                    {\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    using PerformanceCounter pc = ramCounter.Value;\n                                    actionResult.Title = \"RAM Memory\";\n                                    actionResult.Description =\n                                        pc.NextValue().ToString(CultureInfo.InvariantCulture) + \" MB of RAM in your system\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    using PerformanceCounter pc = ramCounter.Value;\n                                    actionResult.Title = \"Ram geheugen\";\n                                    actionResult.Description =\n                                        pc.NextValue().ToString(CultureInfo.InvariantCulture) +\n                                        \" MB ram-geheugen over in je systeem\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n                        return actionResult;\n                    }\n                case \"windows versie\":\n                case \"windows version\":\n                    {\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"Your Windows version\";\n                                    actionResult.Description = $\"Windows Version {Environment.OSVersion.Version}\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Je windows versie\";\n                                    actionResult.Description = $\"Windows Version {Environment.OSVersion.Version}\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n                case \"mac-adres\":\n                case \"mac\":\n                case \"mac address\":\n                    {\n                        string sMacAddress = string.Empty;\n                        NetworkInterface[] array = NetworkInterface.GetAllNetworkInterfaces();", "                        for (int i = 0; i < array.Length; i++)\n                        {\n                            NetworkInterface adapter = array[i];\n                            if (string.IsNullOrEmpty(sMacAddress))\n                            {\n                                _ = adapter.GetPhysicalAddress().ToString();\n                                return actionResult;\n                            }\n                        }\n\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"Your MAC Address\";\n                                    actionResult.Description = sMacAddress;\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Je mac adres\";\n                                    actionResult.Description = sMacAddress;\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n                case \"computer naam\":\n                case \"computer name\":\n                    {\n                        string dnsName = Dns.GetHostName();\n                        Clipboard.SetText(dnsName);\n\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"Your computer name is\";\n                                    actionResult.Description = dnsName;\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"je computer naam is\";\n                                    actionResult.Description = dnsName;\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n\n                case \"cpu\":\n                    {\n                        // komt nu overeen met lezen van taakbeheer (Now matches read Task Manager)\n                        float secondValue = cpuCounter.Value.NextValue();\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"Processor consumption\";\n                                    actionResult.Description = secondValue.ToString(\"###\", CultureInfo.InvariantCulture) + \"%\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Processor verbruik\";\n                                    actionResult.Description = secondValue.ToString(\"###\", CultureInfo.InvariantCulture) + \"%\";\n                                    break;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n\n                        return actionResult;\n                    }\n\n                case \"wifi check\":\n                case \"heb ik internet?\":\n                    {\n                        try\n                        {", "                            using (WebClient client = new WebClient())\n                            using (System.IO.Stream stream = client.OpenRead(\"http://www.google.com\"))\n                            {\n                                switch (currentCulture.LCID)\n                                {\n                                    case 1033: // english-us\n                                        {\n                                            actionResult.Description = \"You have Internet\";\n                                            break;\n                                        }\n                                    case 1043: // dutch\n                                        {\n                                            actionResult.Description = \"Je hebt internet\";\n                                            break;\n                                        }\n                                    default:\n                                        {\n                                            return actionResult;\n                                        }\n                                }\n                            }\n\n                            return actionResult;\n                        }", "                        catch (Exception)\n                        {\n                            switch (currentCulture.LCID)\n                            {\n                                case 1033: // english-us\n                                    {\n                                        actionResult.Description = \"You do not have Internet\";\n                                        break;\n                                    }\n                                case 1043: // dutch\n                                    {\n                                        actionResult.Description = \"Je hebt geen internet\";\n                                        break;\n                                    }\n\n                                default:\n                                    break;\n                            }\n                            return actionResult;\n                        }\n                    }\n                case \"ip\":\n                    {\n                        string externalIpAddress = null;", "                        using (WebClient webClient = new WebClient())\n                        {\n                            string externalIp = webClient.DownloadString(\"http://icanhazip.com\");\n                            if (!string.IsNullOrEmpty(externalIp))\n                            {\n                                IPHostEntry iPHostEntry = Dns.GetHostEntry(Dns.GetHostName());\n                                for (int i = 0; i < iPHostEntry.AddressList.Length; i++)\n                                {\n                                    IPAddress ipAddress = iPHostEntry.AddressList[i];\n                                    if (ipAddress.AddressFamily == AddressFamily.InterNetwork)\n                                    {\n                                        externalIpAddress = externalIp;\n                                    }\n                                }\n                            }\n                        }\n\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"IPAddress Address\";", "                                    if (ipAddress.AddressFamily == AddressFamily.InterNetwork)\n                                    {\n                                        externalIpAddress = externalIp;\n                                    }\n                                }\n                            }\n                        }\n\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"IPAddress Address\";", "                                    actionResult.Description = \"Your public IP Address = \" + externalIpAddress;\n                                    return actionResult;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Ip adres\";\n                                    actionResult.Description = \"Je public ip adres = \" + externalIpAddress;\n                                    return actionResult;\n                                }\n                            default:\n                                {\n                                    return actionResult;\n                                }\n                        }\n                    }\n                case \"count words\":\n                case \"tel woorden\":\n                    {", "                        if (!isCountingWords)\n                        {\n                            actionResult.Title = \"tel woorden\";\n                            actionResult.Description = \"tel woorden\";\n                            isCountingWords = true;\n                        }\n\n                        return actionResult;\n                    }\n                default:\n                    {", "                        if (isCountingWords)\n                        {\n                            string[] words = clipboardText.Split(new char[] { ' ' });\n                            int numberOfWords = words.Length;\n                            isCountingWords = false;\n                            actionResult.Title = \"Number of words are: \";\n                            actionResult.Description = numberOfWords.ToString();\n                        }\n                        break;\n                    }\n            }\n            return actionResult;\n        }\n\n        [DllImport(\"Shell32.dll\", CharSet = CharSet.Unicode)]", "        private static extern uint SHEmptyRecycleBin(IntPtr hwnd, string pszRootPath, Recycle dwFlags);\n\n        public class Item\n        {\n            public string available_supply { get; set; }\n\n            public string id { get; set; }\n\n            public string last_updated { get; set; }\n\n            public string market_cap_usd { get; set; }\n", "            public string last_updated { get; set; }\n\n            public string market_cap_usd { get; set; }\n\n            public string name { get; set; }\n\n            public string percent_change_1h { get; set; }\n\n            public string percent_change_24h { get; set; }\n\n            public string percent_change_7d { get; set; }\n", "            public string percent_change_24h { get; set; }\n\n            public string percent_change_7d { get; set; }\n\n            public decimal price_usd { get; set; }\n\n            public string rank { get; set; }\n\n            public string symbol { get; set; }\n\n            public string total_supply { get; set; }\n", "            public string symbol { get; set; }\n\n            public string total_supply { get; set; }\n\n            public string volume_usd_24h { get; set; }\n        }\n    }\n}\n"]}
{"filename": "Actions/FileDetails.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace it.Actions\n{\n    public class FileDetails\n    {\n        public string FileHash { get; set; }\n\n        public string FileName { get; set; }\n    }\n}\n", "        public string FileName { get; set; }\n    }\n}\n"]}
{"filename": "Actions/StopwatchActions.cs", "chunked_list": ["using System;\nusing System.Diagnostics;\nusing System.Globalization;\nusing System.Threading;\n\nnamespace it.Actions\n{\n    public sealed class StopwatchActions : IAction\n    {\n        private string lastClipboard;\n", "        private string lastClipboard;\n\n        private Stopwatch stopwatch = new Stopwatch();\n\n        public StopwatchActions()\n        {\n            if (stopwatch.IsRunning)\n            {\n                stopwatch.Stop();\n            }\n        }\n", "        public override bool Equals(object obj)\n        {\n            return Equals(obj as StopwatchActions);\n        }\n\n        public bool Matches(string clipboardText)\n        {\n            return clipboardText.IndexOf(nameof(stopwatch), StringComparison.Ordinal) >= 0;\n        }\n\n        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult(\"Stopwatch\");\n            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n\n            // moved this from every case statement to up here. Not sure what to do if the clipboard\n            // text matches. I don't think this code is needed at all.", "        public ActionResult TryExecute(string clipboardText)\n        {\n            ActionResult actionResult = new ActionResult(\"Stopwatch\");\n            CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n\n            // moved this from every case statement to up here. Not sure what to do if the clipboard\n            // text matches. I don't think this code is needed at all.\n            if (!string.Equals(clipboardText, lastClipboard, StringComparison.Ordinal))\n            {\n                lastClipboard = clipboardText;\n            }\n\n            switch (clipboardText)\n            {\n                case \"start stopwatch\": //start\n                    {", "                        if (stopwatch.IsRunning)\n                        {\n                            actionResult.Description = FillStopwatchAlreadyRunning();\n                        }\n                        else\n                        {\n                            stopwatch.Start();\n                            actionResult.Description = FillStopwatchStarted();\n                        }\n\n                        break;\n                    }\n                case \"reset stopwatch\": //reset\n                    {", "                        if (stopwatch.IsRunning)\n                        {\n                            actionResult.Description = FillStopwatchAlreadyRunning();\n                        }\n                        else\n                        {\n                            stopwatch.Restart();\n                            actionResult.Description = FillStopwatchReset();\n\n                            lastClipboard = clipboardText;\n                            stopwatch.Reset();\n                            stopwatch = new Stopwatch();\n                            stopwatch.Start();\n                            TimeSpan ts = stopwatch.Elapsed;\n                            switch (currentCulture.LCID)\n                            {\n                                case 1033: // english-us\n                                    {\n                                        actionResult.Title = \"Stopwatch reset to\";\n                                        actionResult.Description =\n                                            $\"{ts.Hours} hours, {ts.Minutes} minutes,  {ts.Seconds} seconds\";\n                                        break;\n                                    }\n                                case 1043: // dutch\n                                    {\n                                        actionResult.Title = \"Stopwatch gereset naar\";\n                                        actionResult.Description =\n                                            $\"{ts.Hours} uur, {ts.Minutes} minuten,  {ts.Seconds}secondes\";\n                                        break;\n                                    }\n                            }\n                        }\n\n                        break;\n                    }\n                case \"pause stopwatch\": //  pause\n                    {", "                        if (!stopwatch.IsRunning)\n                        {\n                            actionResult.Description = FillStopwatchNotRunning();\n                        }\n                        else\n                        {\n                            stopwatch.Stop();\n                            actionResult.Description = FillStopwatchPause();\n\n                            lastClipboard = clipboardText;\n                            TimeSpan ts = stopwatch.Elapsed;\n                            stopwatch.Stop();\n\n                            switch (currentCulture.LCID)\n                            {\n                                case 1033: // english-us\n                                    {\n                                        actionResult.Title = \"Stopwatch paused on\";\n                                        actionResult.Description =\n                                            $\"{ts.Hours} hours, {ts.Minutes} minutes,  {ts.Seconds} seconds\";\n                                        break;\n                                    }\n                                case 1043: // dutch\n                                    {\n                                        actionResult.Title = \"Stopwatch gepauzeerd op\";\n                                        actionResult.Description =\n                                            $\"{ts.Hours} uur, {ts.Minutes} minuten,  {ts.Seconds}secondes\";\n                                        break;\n                                    }\n                            }\n                        }\n\n                        break;\n                    }\n                case \"resume stopwatch\":\n                    {", "                        if (stopwatch.IsRunning)\n                        {\n                            actionResult.Description = FillStopwatchAlreadyRunning();\n                        }\n                        else\n                        {\n                            stopwatch.Start();\n                            actionResult.Description = FillStopwatchResume();\n\n                            lastClipboard = clipboardText;\n                            TimeSpan ts = stopwatch.Elapsed;\n                            stopwatch.Start();\n                            switch (currentCulture.LCID)\n                            {\n                                case 1033: // english-us\n                                    {\n                                        actionResult.Title = \"Stopwatch resumed from\";\n                                        actionResult.Description =\n                                            $\"{ts.Hours} hours, {ts.Minutes} minutes,  {ts.Seconds} seconds\";\n                                        break;\n                                    }\n                                case 1043: // dutch\n                                    {\n                                        actionResult.Title = \"Stopwatch gepauzeerd op\";\n                                        actionResult.Description =\n                                            $\"{ts.Hours} uur, {ts.Minutes} minuten,  {ts.Seconds}secondes\";\n                                        break;\n                                    }\n                            }\n                        }\n                    }\n                    break;\n\n                case \"stop stopwatch\": //stop\n                    {\n                        {", "                            if (!stopwatch.IsRunning)\n                            {\n                                actionResult.Description = FillStopwatchNotRunning();\n                            }\n                            else\n                            {\n                                stopwatch.Stop();\n                                actionResult.Description = FillStopwatchStop();\n                            }\n                        }\n                        lastClipboard = null;\n                        stopwatch.Stop();\n                        TimeSpan ts = stopwatch.Elapsed;\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"Elapsed time\";\n                                    actionResult.Description =\n                                        $\"{ts.Hours} hours, {ts.Minutes} minutes,  {ts.Seconds} seconds\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Elapsed time\";\n                                    actionResult.Description =\n                                        $\"{ts.Hours} uur, {ts.Minutes} minuten,  {ts.Seconds}secondes\";\n                                    break;\n                                }\n                        }\n                        break;\n                    }\n            }\n\n            return actionResult;\n        }\n", "        private static string FillStopwatchAlreadyRunning(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = \"Stopwatch already running!\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = \"Stopwatch al actief!\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n", "        private static string FillStopwatchNotRunning(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = \"Stopwatch is not running!\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = \"Stopwatch wordt niet uitgevoerd!\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n", "        private static string FillStopwatchStarted(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = \"Stopwatch started\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = \"Stopwatch gestart\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n", "        private string FillStopwatchPause(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = $\"Stopwatch paused on: {GetElaspedTime()}\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = $\"Stopwatch gepauzeerd op: {GetElaspedTime()}\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n", "        private string FillStopwatchReset(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = $\"Stopwatch reset to: {GetElaspedTime()}\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = $\"Stopwatch resetten naar: {GetElaspedTime()}\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n", "        private string FillStopwatchResume(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = $\"Stopwatch resumed on: {GetElaspedTime()}\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = $\"Stopwatch hervat op: {GetElaspedTime()}\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n", "        private string FillStopwatchStop(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description = null;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description = $\"Stopwatch stopped on: {GetElaspedTime()}\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description = $\"Stopwatch gestopt op: {GetElaspedTime()}\";\n                        break;\n                    }\n            }\n\n            return description;\n        }\n", "        private string GetElaspedTime(CultureInfo currentCulture = null)\n        {\n            if (currentCulture is null)\n            {\n                currentCulture = Thread.CurrentThread.CurrentCulture;\n            }\n\n            string description;\n\n            switch (currentCulture.LCID)\n            {\n                case 1033: // english-us\n                    {\n                        description =\n                           $\"{stopwatch.Elapsed.Hours} hours, {stopwatch.Elapsed.Hours} minutes,  {stopwatch.Elapsed.Hours} seconds\";\n                        break;\n                    }\n                case 1043: // dutch\n                    {\n                        description =\n                           $\"{stopwatch.Elapsed.Hours} uur, {stopwatch.Elapsed.Hours} minuten,  {stopwatch.Elapsed.Hours}secondes\";\n                        break;\n                    }\n\n                default:\n                    {\n                        throw new InvalidOperationException(\"Unexpected Case\");\n                    }\n            }\n\n            return description;\n        }\n    }\n}\n"]}
{"filename": "Actions/RandomActions.cs", "chunked_list": ["using System;\nusing System.Text;\nusing System.Threading;\n\nnamespace it.Actions\n{\n    internal sealed class RandomActions : IAction\n    {\n        private readonly string[] commands = { \"kop of munt\", \"heads or tails\", \"random password\" };\n\n        private readonly Random random = new Random();\n", "        private readonly string[] commands = { \"kop of munt\", \"heads or tails\", \"random password\" };\n\n        private readonly Random random = new Random();\n\n        public bool Matches(string clipboardText)\n        {\n            for (int i = 0; i < commands.Length; i++)\n            {\n                string command = commands[i];\n                if (command.Equals(clipboardText, StringComparison.Ordinal))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            System.Globalization.CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n            ActionResult actionResult = new ActionResult();\n\n            switch (clipboardText)\n            {\n                case \"kop of munt\":\n                case \"heads or tails\":\n                    {\n                        bool isHeads = random.NextDouble() > 0.5;\n\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"heads or tails?\";\n                                    actionResult.Description = isHeads ? \"Heads\" : \"Tails\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Kop of munt?\";\n                                    actionResult.Description = isHeads ? \"Kop\" : \"Munt\";\n                                    break;\n                                }\n                        }\n\n                        break;\n                    }\n                case \"random password\":\n                    {\n                        const int minLength = 8;\n                        const int maxLength = 12;\n                        const string charAvailable = \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789-\";\n                        StringBuilder password = new StringBuilder(1000);\n                        password.Clear();\n                        int passwordLength = random.Next(minLength, maxLength + 1);", "                if (command.Equals(clipboardText, StringComparison.Ordinal))\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        ActionResult IAction.TryExecute(string clipboardText)\n        {\n            System.Globalization.CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;\n            ActionResult actionResult = new ActionResult();\n\n            switch (clipboardText)\n            {\n                case \"kop of munt\":\n                case \"heads or tails\":\n                    {\n                        bool isHeads = random.NextDouble() > 0.5;\n\n                        switch (currentCulture.LCID)\n                        {\n                            case 1033: // english-us\n                                {\n                                    actionResult.Title = \"heads or tails?\";\n                                    actionResult.Description = isHeads ? \"Heads\" : \"Tails\";\n                                    break;\n                                }\n                            case 1043: // dutch\n                                {\n                                    actionResult.Title = \"Kop of munt?\";\n                                    actionResult.Description = isHeads ? \"Kop\" : \"Munt\";\n                                    break;\n                                }\n                        }\n\n                        break;\n                    }\n                case \"random password\":\n                    {\n                        const int minLength = 8;\n                        const int maxLength = 12;\n                        const string charAvailable = \"abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789-\";\n                        StringBuilder password = new StringBuilder(1000);\n                        password.Clear();\n                        int passwordLength = random.Next(minLength, maxLength + 1);", "                        while (passwordLength-- > 0)\n                        {\n                            _ = password.Append(charAvailable[random.Next(charAvailable.Length)]);\n                        }\n\n                        actionResult.Title = \"Random password\";\n                        actionResult.Description = password.ToString();\n                    }\n                    break;\n            }\n\n            return actionResult;\n        }\n    }\n}\n"]}
{"filename": "Actions/convertUppercase.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace it.Actions\n{\n    public class convertUppercase\n    {\n    }\n}\n"]}
