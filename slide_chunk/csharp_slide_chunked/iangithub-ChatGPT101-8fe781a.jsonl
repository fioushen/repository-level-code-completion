{"filename": "GPTLinebot/WeatherForecast.cs", "chunked_list": ["namespace GPTLinebot\n{\n    public class WeatherForecast\n    {\n        public DateTime Date { get; set; }\n\n        public int TemperatureC { get; set; }\n\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public string? Summary { get; set; }\n    }\n}", "        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public string? Summary { get; set; }\n    }\n}"]}
{"filename": "GPTLinebot/Program.cs", "chunked_list": ["using GPTLinebot.Models;\nusing GPTLinebot.Models.Chatgpt;\n\nnamespace GPTLinebot\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            // Add services to the container.\n\n            builder.Services.AddControllers();\n            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\n            builder.Services.AddSingleton<UserHistoryPrompt>();\n            builder.Services.AddSingleton<ChatGptRequestModel>();\n            builder.Services.AddEndpointsApiExplorer();\n            builder.Services.AddSwaggerGen();\n\n            var app = builder.Build();\n\n            // Configure the HTTP request pipeline.", "            if (app.Environment.IsDevelopment())\n            {\n                app.UseSwagger();\n                app.UseSwaggerUI();\n            }\n\n            app.UseHttpsRedirection();\n\n            app.UseAuthorization();\n\n\n            app.MapControllers();\n\n            app.Run();\n        }\n    }\n}"]}
{"filename": "GPTLinebot/Models/Completion.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\n\nnamespace GPTLinebot.Models\n{\n\n    public class Completion\n    {\n        [JsonProperty(PropertyName = \"id\")]\n        public string Id { get; set; }\n        [JsonProperty(PropertyName = \"object\")]\n        public string AiType { get; set; }\n        [JsonProperty(PropertyName = \"created\")]", "        public string Id { get; set; }\n        [JsonProperty(PropertyName = \"object\")]\n        public string AiType { get; set; }\n        [JsonProperty(PropertyName = \"created\")]\n        public int Created { get; set; }\n        [JsonProperty(PropertyName = \"model\")]\n        public string Model { get; set; }\n        [JsonProperty(PropertyName = \"choices\")]\n        public Choice[] Choices { get; set; }\n        [JsonProperty(PropertyName = \"usage\")]\n        public Usage Usage { get; set; }\n    }\n", "        public Usage Usage { get; set; }\n    }\n\n    public class Usage\n    {\n        [JsonProperty(PropertyName = \"prompt_tokens\")]\n        public int Prompt_Tokens { get; set; }\n        [JsonProperty(PropertyName = \"completion_tokens\")]\n        public int Completion_Tokens { get; set; }\n        [JsonProperty(PropertyName = \"total_tokens\")]\n        public int Total_Tokens { get; set; }\n    }\n", "        public int Completion_Tokens { get; set; }\n        [JsonProperty(PropertyName = \"total_tokens\")]\n        public int Total_Tokens { get; set; }\n    }\n\n    public class Choice\n    {\n        [JsonProperty(PropertyName = \"text\")]\n        public string Text { get; set; }\n        [JsonProperty(PropertyName = \"index\")]\n        public int Index { get; set; }\n        [JsonProperty(PropertyName = \"logprobs\")]", "        public string Text { get; set; }\n        [JsonProperty(PropertyName = \"index\")]\n        public int Index { get; set; }\n        [JsonProperty(PropertyName = \"logprobs\")]\n        public object Logprobs { get; set; }\n        [JsonProperty(PropertyName = \"finish_reason\")]\n        public string Finish_reason { get; set; }\n    }\n\n    public class OpenAiRequestModel\n    {\n        [JsonProperty(PropertyName = \"prompt\")]", "    public class OpenAiRequestModel\n    {\n        [JsonProperty(PropertyName = \"prompt\")]\n        public string Prompt { get; set; }\n        [JsonProperty(PropertyName = \"model\")]\n        public string Model { get; set; }\n        [JsonProperty(PropertyName = \"max_tokens\")]\n        public int Max_tokens { get; set; }\n        [JsonProperty(PropertyName = \"temperature\")]\n        public double Temperature { get; set; }\n    }\n}\n", "        public double Temperature { get; set; }\n    }\n}\n"]}
{"filename": "GPTLinebot/Models/UserHistoryPrompt.cs", "chunked_list": ["\ufeffnamespace GPTLinebot.Models\n{\n    public class UserHistoryPrompt\n    {\n        public List<string> HistoryPrompt { get; set; }\n\n        public UserHistoryPrompt()\n        {\n            HistoryPrompt=new List<string>();\n        }\n    }\n}\n"]}
{"filename": "GPTLinebot/Models/ChatGptRequestModel.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\n\nnamespace GPTLinebot.Models.Chatgpt\n{\n    public class ChatGptRequestModel\n    {\n        [JsonProperty(\"model\")]\n        public string Model { get; private set; }\n        [JsonProperty(\"messages\")]\n        public List<Message> Messages { get; set; }\n        [JsonProperty(PropertyName = \"max_tokens\")]", "        public int Max_tokens { get; set; }\n        [JsonProperty(PropertyName = \"temperature\")]\n        public double Temperature { get; set; }\n\n        public ChatGptRequestModel()\n        {\n            Messages = new List<Message>();\n            Model = \"gpt-3.5-turbo\";\n        }\n    }\n    public class Completion\n    {\n        [JsonProperty(PropertyName = \"id\")]", "    public class Completion\n    {\n        [JsonProperty(PropertyName = \"id\")]\n        public string Id { get; set; }\n        [JsonProperty(PropertyName = \"object\")]\n        public string AiType { get; set; }\n        [JsonProperty(PropertyName = \"created\")]\n        public int Created { get; set; }\n        [JsonProperty(PropertyName = \"model\")]\n        public string Model { get; set; }\n        [JsonProperty(PropertyName = \"choices\")]\n        public Choice[] Choices { get; set; }\n        [JsonProperty(PropertyName = \"usage\")]", "        public string Model { get; set; }\n        [JsonProperty(PropertyName = \"choices\")]\n        public Choice[] Choices { get; set; }\n        [JsonProperty(PropertyName = \"usage\")]\n        public Usage Usage { get; set; }\n    }\n\n    public class Usage\n    {\n        [JsonProperty(PropertyName = \"prompt_tokens\")]\n        public int Prompt_Tokens { get; set; }\n        [JsonProperty(PropertyName = \"completion_tokens\")]", "        public int Prompt_Tokens { get; set; }\n        [JsonProperty(PropertyName = \"completion_tokens\")]\n        public int Completion_Tokens { get; set; }\n        [JsonProperty(PropertyName = \"total_tokens\")]\n        public int Total_Tokens { get; set; }\n    }\n\n    public class Choice\n    {\n        [JsonProperty(PropertyName = \"message\")]\n        public Message Message { get; set; }\n        [JsonProperty(PropertyName = \"index\")]", "        public Message Message { get; set; }\n        [JsonProperty(PropertyName = \"index\")]\n        public int Index { get; set; }\n        [JsonProperty(PropertyName = \"finish_reason\")]\n        public string Finish_reason { get; set; }\n    }\n\n    public class Message\n    {\n        [JsonProperty(\"role\")]\n        public string Role { get; set; }\n        [JsonProperty(\"content\")]", "        public string Role { get; set; }\n        [JsonProperty(\"content\")]\n        public string Content { get; set; }\n    }\n}\n"]}
{"filename": "GPTLinebot/Controllers/Linebot3Controller.cs", "chunked_list": ["\ufeffusing DotNetLineBotSdk.Helpers;\nusing DotNetLineBotSdk.Message;\nusing DotNetLineBotSdk.MessageEvent;\nusing GPTLinebot.Models;\nusing GPTLinebot.Models.Chatgpt;\nusing Microsoft.AspNetCore.Mvc;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace GPTLinebot.Controllers", "\nnamespace GPTLinebot.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class Linebot3Controller : ControllerBase\n    {\n        private string channel_Access_Token = \"line channel Access Token\";\n        string apiKey = \"openai api key\";\n        string endpoint = \"https://api.openai.com/v1/chat/completions\";\n\n        string userPrompt = string.Empty;\n        string historyPrompt = string.Empty;", "        private readonly ChatGptRequestModel _chatGptRequestModel;\n\n        public Linebot3Controller(ChatGptRequestModel chatGptRequestModel)\n        {\n            _chatGptRequestModel = chatGptRequestModel;\n            _chatGptRequestModel.Temperature = 0.5;\n            _chatGptRequestModel.Max_tokens = 500;\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(channel_Access_Token);\n\n            try\n            {\n                //Get Post RawData (json format)\n                var req = this.HttpContext.Request;", "        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(channel_Access_Token);\n\n            try\n            {\n                //Get Post RawData (json format)\n                var req = this.HttpContext.Request;\n                using (var bodyReader = new StreamReader(stream: req.Body,\n                    encoding: Encoding.UTF8,\n                    detectEncodingFromByteOrderMarks: false,\n                    bufferSize: 1024, leaveOpen: true))\n                {\n                    var body = await bodyReader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n", "                using (var bodyReader = new StreamReader(stream: req.Body,\n                    encoding: Encoding.UTF8,\n                    detectEncodingFromByteOrderMarks: false,\n                    bufferSize: 1024, leaveOpen: true))\n                {\n                    var body = await bodyReader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n\n                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //get user msg\n                        var userMsg = lineReceMsg.Events[0].Message.Text;\n                        _chatGptRequestModel.Messages.Add(new Message() { Role = \"user\", Content = userMsg });\n\n                        //send to openai api\n                        GPTLinebot.Models.Chatgpt.Completion completionMsg = await GenerateText(_chatGptRequestModel);\n                        _chatGptRequestModel.Messages.Add(completionMsg.Choices[0].Message);\n\n\n                        //send reply msg\n                        var txtMessage = new TextMessage(completionMsg.Choices[0].Message.Content);\n                        await replyEvent.ReplyAsync(lineReceMsg.Events[0].ReplyToken,\n                                                   new List<IMessage>() {\n                                                       txtMessage\n                                                   });\n                    }\n                }\n            }", "                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //get user msg\n                        var userMsg = lineReceMsg.Events[0].Message.Text;\n                        _chatGptRequestModel.Messages.Add(new Message() { Role = \"user\", Content = userMsg });\n\n                        //send to openai api\n                        GPTLinebot.Models.Chatgpt.Completion completionMsg = await GenerateText(_chatGptRequestModel);\n                        _chatGptRequestModel.Messages.Add(completionMsg.Choices[0].Message);\n\n\n                        //send reply msg\n                        var txtMessage = new TextMessage(completionMsg.Choices[0].Message.Content);\n                        await replyEvent.ReplyAsync(lineReceMsg.Events[0].ReplyToken,\n                                                   new List<IMessage>() {\n                                                       txtMessage\n                                                   });\n                    }\n                }\n            }", "            catch (Exception ex)\n            {\n                return Ok();\n            }\n            return Ok();\n        }\n\n        private async Task<GPTLinebot.Models.Chatgpt.Completion> GenerateText(ChatGptRequestModel chatGptRequestModel)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n                var json = JsonConvert.SerializeObject(chatGptRequestModel);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(endpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                return JsonConvert.DeserializeObject<GPTLinebot.Models.Chatgpt.Completion>(responseContent);\n            }\n        }\n    }\n}\n", "            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n                var json = JsonConvert.SerializeObject(chatGptRequestModel);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(endpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                return JsonConvert.DeserializeObject<GPTLinebot.Models.Chatgpt.Completion>(responseContent);\n            }\n        }\n    }\n}\n"]}
{"filename": "GPTLinebot/Controllers/Linebot2Controller.cs", "chunked_list": ["\ufeffusing DotNetLineBotSdk.Helpers;\nusing DotNetLineBotSdk.Message;\nusing DotNetLineBotSdk.MessageEvent;\nusing GPTLinebot.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace GPTLinebot.Controllers\n{", "namespace GPTLinebot.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class Linebot2Controller : ControllerBase\n    {\n        private string channel_Access_Token = \"line channel Access Token\";\n        string model = \"text-davinci-003\";\n        int maxTokens = 500;\n        double temperature = 0.5;\n        string apiKey = \"openai api key\";\n        string endpoint = \"https://api.openai.com/v1/completions\";\n\n        string userPrompt = string.Empty;\n        string historyPrompt = string.Empty;", "        private readonly UserHistoryPrompt _userHistoryPrompt;\n\n        public Linebot2Controller(UserHistoryPrompt userHistoryPrompt)\n        {\n            _userHistoryPrompt = userHistoryPrompt;\n        }\n\n\n        [HttpPost]\n        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(channel_Access_Token);\n\n            try\n            {\n                //Get Post RawData (json format)\n                var req = this.HttpContext.Request;", "        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(channel_Access_Token);\n\n            try\n            {\n                //Get Post RawData (json format)\n                var req = this.HttpContext.Request;\n                using (var bodyReader = new StreamReader(stream: req.Body,\n                    encoding: Encoding.UTF8,\n                    detectEncodingFromByteOrderMarks: false,\n                    bufferSize: 1024, leaveOpen: true))\n                {\n                    var body = await bodyReader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n", "                using (var bodyReader = new StreamReader(stream: req.Body,\n                    encoding: Encoding.UTF8,\n                    detectEncodingFromByteOrderMarks: false,\n                    bufferSize: 1024, leaveOpen: true))\n                {\n                    var body = await bodyReader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n\n                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //get user msg\n                        var userMsg = lineReceMsg.Events[0].Message.Text;\n\n                        //History Prompt", "                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //get user msg\n                        var userMsg = lineReceMsg.Events[0].Message.Text;\n\n                        //History Prompt\n                        foreach (var item in _userHistoryPrompt.HistoryPrompt)\n                        {\n                            historyPrompt += \" \" + item;\n                        }\n\n                        //combine Prompt\n                        userPrompt = historyPrompt + \" ME: \" + userMsg+\"/n AI:\" ;\n\n                        var promptModel = new OpenAiRequestModel() { Prompt = userPrompt, Model = model, Max_tokens = maxTokens, Temperature = temperature };\n                       \n                        //send to openai api\n                        var completionMsg = await GenerateText(promptModel);\n\n                        //keep question & ans\n                        _userHistoryPrompt.HistoryPrompt.Add(userMsg + completionMsg.Choices[0].Text);\n\n                        //send reply msg\n                        var txtMessage = new TextMessage(completionMsg.Choices[0].Text);\n                        await replyEvent.ReplyAsync(lineReceMsg.Events[0].ReplyToken,\n                                                   new List<IMessage>() {\n                                                       txtMessage\n                                                   });\n                    }\n                }\n            }", "            catch (Exception ex)\n            {\n                return Ok();\n            }\n            return Ok();\n        }\n\n        private async Task<Completion> GenerateText(OpenAiRequestModel model)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n                var json = JsonConvert.SerializeObject(model);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(endpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                return JsonConvert.DeserializeObject<Completion>(responseContent);\n            }\n        }\n    }\n}\n", "            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n                var json = JsonConvert.SerializeObject(model);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(endpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                return JsonConvert.DeserializeObject<Completion>(responseContent);\n            }\n        }\n    }\n}\n"]}
{"filename": "GPTLinebot/Controllers/LinebotController.cs", "chunked_list": ["\ufeffusing DotNetLineBotSdk.Helpers;\nusing DotNetLineBotSdk.Message;\nusing DotNetLineBotSdk.MessageEvent;\nusing GPTLinebot.Models;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Newtonsoft.Json;\nusing System.Text;\n\nnamespace GPTLinebot.Controllers", "\nnamespace GPTLinebot.Controllers\n{\n    /// <summary>\n    /// \u4e0d\u5177\u4e0a\u4e0b\u6587\u7ba1\u7406\u7684bot\n    /// </summary>\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class LinebotController : ControllerBase\n    {\n        private string channel_Access_Token = \"line channel Access Token\";\n        string model = \"text-davinci-003\";\n        int maxTokens = 500; //\u8207\u5b57\u6578\u6709\u95dc(\u554f+\u7b54\u5408\u8a08\u6578)\uff0c\u4e00\u500btoken\u4e0d\u7b49\u540c\u65bc\u4e00\u500b\u5b57\uff0c\u4e0d\u540c\u6a21\u578b\u6709\u4e0d\u540c\u7684\u4e0a\u9650\uff0c\u800c text-davinci-003 \u6700\u5927\u4e0d\u80fd\u8d85\u904e 4,000 \n        double temperature = 0.5;\u3000//\u4ecb\u65bc 0~1\uff0c\u8d8a\u63a5\u8fd10\uff0c\u6a21\u578b\u56de\u8986\u7684\u5167\u5bb9\u8b8a\u5316\u8d8a\u5c0f\uff0c\u80cc\u7b54\u6848\u7684\u6a5f\u5668\u4eba\n        string apiKey = \"openai api key\";\n        string endpoint = \"https://api.openai.com/v1/completions\";\n\n        [HttpPost]", "    public class LinebotController : ControllerBase\n    {\n        private string channel_Access_Token = \"line channel Access Token\";\n        string model = \"text-davinci-003\";\n        int maxTokens = 500; //\u8207\u5b57\u6578\u6709\u95dc(\u554f+\u7b54\u5408\u8a08\u6578)\uff0c\u4e00\u500btoken\u4e0d\u7b49\u540c\u65bc\u4e00\u500b\u5b57\uff0c\u4e0d\u540c\u6a21\u578b\u6709\u4e0d\u540c\u7684\u4e0a\u9650\uff0c\u800c text-davinci-003 \u6700\u5927\u4e0d\u80fd\u8d85\u904e 4,000 \n        double temperature = 0.5;\u3000//\u4ecb\u65bc 0~1\uff0c\u8d8a\u63a5\u8fd10\uff0c\u6a21\u578b\u56de\u8986\u7684\u5167\u5bb9\u8b8a\u5316\u8d8a\u5c0f\uff0c\u80cc\u7b54\u6848\u7684\u6a5f\u5668\u4eba\n        string apiKey = \"openai api key\";\n        string endpoint = \"https://api.openai.com/v1/completions\";\n\n        [HttpPost]\n        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(channel_Access_Token);\n           \n            try\n            {\n                //Get Post RawData (json format)\n                var req = this.HttpContext.Request;", "        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(channel_Access_Token);\n           \n            try\n            {\n                //Get Post RawData (json format)\n                var req = this.HttpContext.Request;\n                using (var bodyReader = new StreamReader(stream: req.Body,\n                    encoding: Encoding.UTF8,\n                    detectEncodingFromByteOrderMarks: false,\n                    bufferSize: 1024, leaveOpen: true))\n                {\n                    var body = await bodyReader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n", "                using (var bodyReader = new StreamReader(stream: req.Body,\n                    encoding: Encoding.UTF8,\n                    detectEncodingFromByteOrderMarks: false,\n                    bufferSize: 1024, leaveOpen: true))\n                {\n                    var body = await bodyReader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n\n                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //get user msg\n                        var userMsg = $\"user:{lineReceMsg.Events[0].Message.Text} \\n ai:\";\n\n                        var promptModel = new OpenAiRequestModel() { Prompt = userMsg, Model = model, Max_tokens = maxTokens, Temperature = temperature };\n                        //send to openai api\n                        var completionMsg = await GenerateText(promptModel);\n\n                        //send reply msg\n                        var txtMessage = new TextMessage(completionMsg.Choices[0].Text);\n                        await replyEvent.ReplyAsync(lineReceMsg.Events[0].ReplyToken,\n                                                   new List<IMessage>() {\n                                                       txtMessage\n                                                   });\n                    }\n                }\n            }", "                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //get user msg\n                        var userMsg = $\"user:{lineReceMsg.Events[0].Message.Text} \\n ai:\";\n\n                        var promptModel = new OpenAiRequestModel() { Prompt = userMsg, Model = model, Max_tokens = maxTokens, Temperature = temperature };\n                        //send to openai api\n                        var completionMsg = await GenerateText(promptModel);\n\n                        //send reply msg\n                        var txtMessage = new TextMessage(completionMsg.Choices[0].Text);\n                        await replyEvent.ReplyAsync(lineReceMsg.Events[0].ReplyToken,\n                                                   new List<IMessage>() {\n                                                       txtMessage\n                                                   });\n                    }\n                }\n            }", "            catch (Exception ex)\n            {\n                return Ok();\n            }\n            return Ok();\n        }\n\n        private async Task<Completion> GenerateText(OpenAiRequestModel model)\n        {\n            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n                var json = JsonConvert.SerializeObject(model);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(endpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                return JsonConvert.DeserializeObject<Completion>(responseContent);\n            }\n        }\n    }\n}\n", "            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", apiKey);\n\n                var json = JsonConvert.SerializeObject(model);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(endpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                return JsonConvert.DeserializeObject<Completion>(responseContent);\n            }\n        }\n    }\n}\n"]}
{"filename": "GPTLinebot/Controllers/WeatherForecastController.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nnamespace GPTLinebot.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n", "        private static readonly string[] Summaries = new[]\n        {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = \"GetWeatherForecast\")]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}"]}
{"filename": "QuestionAnsweringLinebot/WeatherForecast.cs", "chunked_list": ["namespace QuestionAnsweringLinebot\n{\n    public class WeatherForecast\n    {\n        public DateTime Date { get; set; }\n\n        public int TemperatureC { get; set; }\n\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public string? Summary { get; set; }\n    }\n}", "        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n\n        public string? Summary { get; set; }\n    }\n}"]}
{"filename": "QuestionAnsweringLinebot/Program.cs", "chunked_list": ["namespace QuestionAnsweringLinebot\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            // Add services to the container.\n\n            builder.Services.AddControllers();\n            // Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\n            builder.Services.AddEndpointsApiExplorer();\n            builder.Services.AddSwaggerGen();\n\n            var app = builder.Build();\n\n            // Configure the HTTP request pipeline.", "            if (app.Environment.IsDevelopment())\n            {\n                app.UseSwagger();\n                app.UseSwaggerUI();\n            }\n\n            app.UseHttpsRedirection();\n\n            app.UseAuthorization();\n\n\n            app.MapControllers();\n\n            app.Run();\n        }\n    }\n}"]}
{"filename": "QuestionAnsweringLinebot/Models/ChatGptResponse.cs", "chunked_list": ["\ufeff\nusing Newtonsoft.Json;\n\npublic class Completion\n{\n    [JsonProperty(PropertyName = \"id\")]\n    public string Id { get; set; }\n    [JsonProperty(PropertyName = \"object\")]\n    public string AiType { get; set; }\n    [JsonProperty(PropertyName = \"created\")]\n    public int Created { get; set; }\n    [JsonProperty(PropertyName = \"model\")]", "    public string AiType { get; set; }\n    [JsonProperty(PropertyName = \"created\")]\n    public int Created { get; set; }\n    [JsonProperty(PropertyName = \"model\")]\n    public string Model { get; set; }\n    [JsonProperty(PropertyName = \"choices\")]\n    public List<Choices> Choices { get; set; }\n    [JsonProperty(PropertyName = \"usage\")]\n    public Usage Usage { get; set; }\n}\n", "    public Usage Usage { get; set; }\n}\n\npublic class Usage\n{\n    [JsonProperty(PropertyName = \"prompt_tokens\")]\n    public int Prompt_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"completion_tokens\")]\n    public int Completion_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"total_tokens\")]\n    public int Total_Tokens { get; set; }\n}\n", "    public int Completion_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"total_tokens\")]\n    public int Total_Tokens { get; set; }\n}\n\npublic class Choices\n{\n    [JsonProperty(PropertyName = \"text\")]\n    public string Text { get; set; }\n    [JsonProperty(PropertyName = \"index\")]\n    public int Index { get; set; }\n    [JsonProperty(PropertyName = \"logprobs\")]", "    public string Text { get; set; }\n    [JsonProperty(PropertyName = \"index\")]\n    public int Index { get; set; }\n    [JsonProperty(PropertyName = \"logprobs\")]\n    public object Logprobs { get; set; }\n    [JsonProperty(PropertyName = \"finish_reason\")]\n    public string Finish_reason { get; set; }\n}\n\npublic class Completion_GPT4\n{\n    [JsonProperty(PropertyName = \"id\")]", "public class Completion_GPT4\n{\n    [JsonProperty(PropertyName = \"id\")]\n    public string Id { get; set; }\n    [JsonProperty(PropertyName = \"object\")]\n    public string AiType { get; set; }\n    [JsonProperty(PropertyName = \"created\")]\n    public int Created { get; set; }\n    [JsonProperty(PropertyName = \"model\")]\n    public string Model { get; set; }\n    [JsonProperty(PropertyName = \"choices\")]\n    public List<Choices_GPT4> Choices { get; set; }\n    [JsonProperty(PropertyName = \"usage\")]", "    public string Model { get; set; }\n    [JsonProperty(PropertyName = \"choices\")]\n    public List<Choices_GPT4> Choices { get; set; }\n    [JsonProperty(PropertyName = \"usage\")]\n    public Usage Usage { get; set; }\n}\n\npublic class Choices_GPT4\n{\n    [JsonProperty(PropertyName = \"message\")]\n    public Message_GPT4 Message { get; set; }\n    [JsonProperty(PropertyName = \"index\")]", "    public Message_GPT4 Message { get; set; }\n    [JsonProperty(PropertyName = \"index\")]\n    public int Index { get; set; }\n    [JsonProperty(PropertyName = \"logprobs\")]\n    public object Logprobs { get; set; }\n    [JsonProperty(PropertyName = \"finish_reason\")]\n    public string Finish_reason { get; set; }\n}"]}
{"filename": "QuestionAnsweringLinebot/Models/ChatGptRequest.cs", "chunked_list": ["\ufeff\nusing DotNetLineBotSdk.Message;\nusing Newtonsoft.Json;\n\npublic class OpenAiRequestModel\n{\n    [JsonProperty(PropertyName = \"prompt\")]\n    public string Prompt { get; private set; }\n    [JsonProperty(PropertyName = \"temperature\")]\n    public float Temperature { get; set; }\n    [JsonProperty(PropertyName = \"top_p\")]", "    public float Temperature { get; set; }\n    [JsonProperty(PropertyName = \"top_p\")]\n    public float Top_p { get; set; }\n    [JsonProperty(PropertyName = \"frequency_penalty\")]\n    public int Frequency_Penalty { get; set; }\n    [JsonProperty(PropertyName = \"presence_penalty\")]\n    public int Presence_Penalty { get; set; }\n    [JsonProperty(PropertyName = \"max_tokens\")]\n    public int Max_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"stop\")]\n    public List<string> Stop { get; set; }\n\n    public OpenAiRequestModel()\n    {\n        Prompt = \"<|im_start|>system\\n\u4f60\u662f\u4e00\u4f4d\u5ba2\u670d\u4eba\u54e1\uff0c\u6211\u6703\u7d66\u4f60\u6e96\u5099\u8981\u56de\u7b54\u5ba2\u6236\u7684\u7b54\u6848\uff0c\u8acb\u4f60\u9032\u884c\u5167\u5bb9\u6587\u5b57\u7684\u8abf\u6574\u4e26\u4ee5\u5ba2\u670d\u8a9e\u6c23\u7522\u751f500\u500b\u5b57\u4ee5\u5167\u7684\u56de\u7b54\\n<|im_end|>\\n\";\n        Temperature = 0.8f;\n        Top_p = 0.95f;\n        Frequency_Penalty = 0;\n        Presence_Penalty = 0;\n        Max_Tokens = 1000;\n        Stop = new List<string>() { \"<|im_end|>\" };\n    }\n", "    public int Max_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"stop\")]\n    public List<string> Stop { get; set; }\n\n    public OpenAiRequestModel()\n    {\n        Prompt = \"<|im_start|>system\\n\u4f60\u662f\u4e00\u4f4d\u5ba2\u670d\u4eba\u54e1\uff0c\u6211\u6703\u7d66\u4f60\u6e96\u5099\u8981\u56de\u7b54\u5ba2\u6236\u7684\u7b54\u6848\uff0c\u8acb\u4f60\u9032\u884c\u5167\u5bb9\u6587\u5b57\u7684\u8abf\u6574\u4e26\u4ee5\u5ba2\u670d\u8a9e\u6c23\u7522\u751f500\u500b\u5b57\u4ee5\u5167\u7684\u56de\u7b54\\n<|im_end|>\\n\";\n        Temperature = 0.8f;\n        Top_p = 0.95f;\n        Frequency_Penalty = 0;\n        Presence_Penalty = 0;\n        Max_Tokens = 1000;\n        Stop = new List<string>() { \"<|im_end|>\" };\n    }\n", "    public void AddPrompt(string prompt)\n    {\n        this.Prompt +=$\"<|im_start|>user\\n{prompt}\\n<|im_end|>\\n<|im_start|>assistant\" ;\n    }\n}\n\n\npublic class OpenAiRequestModel_GPT4\n{\n    [JsonProperty(PropertyName = \"messages\")]\n    public List<Message_GPT4> Messages { get; private set; }\n    [JsonProperty(PropertyName = \"temperature\")]", "    public float Temperature { get; set; }\n    [JsonProperty(PropertyName = \"top_p\")]\n    public float Top_p { get; set; }\n    [JsonProperty(PropertyName = \"frequency_penalty\")]\n    public int Frequency_Penalty { get; set; }\n    [JsonProperty(PropertyName = \"presence_penalty\")]\n    public int Presence_Penalty { get; set; }\n    [JsonProperty(PropertyName = \"max_tokens\")]\n    public int Max_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"stop\")]\n    public List<string> Stop { get; set; }\n\n    public OpenAiRequestModel_GPT4()\n    {\n        Messages = new List<Message_GPT4>();\n        Messages.Add(new Message_GPT4() { Role= \"system\", Content= \"\u4f60\u662f\u4e00\u4f4d\u5ba2\u670d\u4eba\u54e1\uff0c\u6211\u6703\u7d66\u4f60\u6e96\u5099\u8981\u56de\u7b54\u5ba2\u6236\u7684\u7b54\u6848\uff0c\u8acb\u4f60\u9032\u884c\u5167\u5bb9\u6587\u5b57\u7684\u8abf\u6574\u4e26\u4ee5\u5ba2\u670d\u8a9e\u6c23\u7522\u751f500\u500b\u5b57\u4ee5\u5167\u7684\u56de\u7b54\" });\n        Temperature = 0.8f;\n        Top_p = 0.95f;\n        Frequency_Penalty = 0;\n        Presence_Penalty = 0;\n        Max_Tokens = 1000;\n        Stop = new List<string>() { \"<|im_end|>\" };\n    }\n", "    public int Max_Tokens { get; set; }\n    [JsonProperty(PropertyName = \"stop\")]\n    public List<string> Stop { get; set; }\n\n    public OpenAiRequestModel_GPT4()\n    {\n        Messages = new List<Message_GPT4>();\n        Messages.Add(new Message_GPT4() { Role= \"system\", Content= \"\u4f60\u662f\u4e00\u4f4d\u5ba2\u670d\u4eba\u54e1\uff0c\u6211\u6703\u7d66\u4f60\u6e96\u5099\u8981\u56de\u7b54\u5ba2\u6236\u7684\u7b54\u6848\uff0c\u8acb\u4f60\u9032\u884c\u5167\u5bb9\u6587\u5b57\u7684\u8abf\u6574\u4e26\u4ee5\u5ba2\u670d\u8a9e\u6c23\u7522\u751f500\u500b\u5b57\u4ee5\u5167\u7684\u56de\u7b54\" });\n        Temperature = 0.8f;\n        Top_p = 0.95f;\n        Frequency_Penalty = 0;\n        Presence_Penalty = 0;\n        Max_Tokens = 1000;\n        Stop = new List<string>() { \"<|im_end|>\" };\n    }\n", "    public void AddUserMessages(string message)\n    {\n        this.Messages.Add(new Message_GPT4() { Role = \"user\", Content = message });\n    }\n    public void AddGptMessages(string message)\n    {\n        this.Messages.Add(new Message_GPT4() { Role = \"assistant\", Content = message });\n    }\n}\n\npublic class Message_GPT4\n{\n    [JsonProperty(PropertyName = \"role\")]", "public class Message_GPT4\n{\n    [JsonProperty(PropertyName = \"role\")]\n    public string Role { get; set; }\n    [JsonProperty(PropertyName = \"content\")]\n    public string Content { get; set; }\n}\n"]}
{"filename": "QuestionAnsweringLinebot/Controllers/LinebotController.cs", "chunked_list": ["\ufeffusing DotNetLineBotSdk.Helpers;\nusing DotNetLineBotSdk.Message;\nusing DotNetLineBotSdk.MessageAction;\nusing DotNetLineBotSdk.MessageEvent;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Text;\nusing Azure.Core;\nusing Azure.AI.Language.QuestionAnswering;\nusing Azure;", "using Azure.AI.Language.QuestionAnswering;\nusing Azure;\nusing Microsoft.AspNetCore.DataProtection.KeyManagement;\nusing Newtonsoft.Json;\nusing System.Net;\n\nnamespace QuestionAnsweringLinebot.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class LinebotController : ControllerBase\n    {", "    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class LinebotController : ControllerBase\n    {\n        private string line_Channel_Access_Token = \"XXXX\";\n        \n        private string az_QuestionAnsering_Endpoint = \"https://XXXXX.cognitiveservices.azure.com\";\n        private string az_QuestionAnsering_Credential = \"XXXXXX\";\n        private string az_QuestionAnsering_ProjectName = \"XXXXX\";\n        private string az_QuestionAnsering_DeploymentName = \"XXXXX\";\n        ", "        private string az_QuestionAnsering_ProjectName = \"XXXXX\";\n        private string az_QuestionAnsering_DeploymentName = \"XXXXX\";\n        \n        private string az_OpenAi_Endpoint = \"https://XXXX.openai.azure.com/openai/deployments\";\n        private string az_OpenAi_DeploymentName = \"XXX\";\n        private string az_OpenAi_Key = \"XXXX\";\n        private string az_OpenAi_Api_Version = \"XXXXX\";\n        private string az_OpenAi_DeploymentName_Gpt4 = \"XXXXXX\";\n\n        [HttpPost]\n        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(line_Channel_Access_Token);\n\n            try\n            {\n\n                // Get the http request body\n                var body = string.Empty;", "        public async Task<IActionResult> Post()\n        {\n            var replyEvent = new ReplyEvent(line_Channel_Access_Token);\n\n            try\n            {\n\n                // Get the http request body\n                var body = string.Empty;\n                using (var reader = new StreamReader(Request.Body))\n                {\n                    body = await reader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n", "                using (var reader = new StreamReader(Request.Body))\n                {\n                    body = await reader.ReadToEndAsync();\n                    var lineReceMsg = ReceivedMessageConvert.ReceivedMessage(body);\n\n                    if (lineReceMsg != null && lineReceMsg.Events[0].Type == WebhookEventType.message.ToString())\n                    {\n                        //\u5ba2\u6236\u554f\u984c\n                        var userMsg = lineReceMsg.Events[0].Message.Text;\n\n                        //\u627e\u51fa\u5ba2\u6236\u554f\u984c\u7684\u5c0d\u61c9\u89e3\u7b54\n                        var ansMsg = await AzureQuestionAnsweringServiceAsync(userMsg);\n\n                        ////\u4ea4\u7531GPT\u6a21\u578b\u9032\u884c\u6587\u5b57\u6f64\u98fe\n                        var chatgptMsg = await AzureOpenAi_GPT3_5(ansMsg);\n\n                        //GPT4\n                        //var chatgptMsg = await AzureOpenAi_GPT4(ansMsg);\n\n                        //\u81ea\u52d5\u56de\u8986\n                        var txtMessage = new TextMessage(chatgptMsg);\n                        await replyEvent.ReplyAsync(lineReceMsg.Events[0].ReplyToken,\n                                                   new List<IMessage>() {\n                                                       txtMessage\n                                                   });\n                    }\n                }\n            }", "            catch (Exception ex)\n            {\n                return Ok();\n            }\n            return Ok();\n        }\n\n        private async Task<string> AzureQuestionAnsweringServiceAsync(string msg)\n        {\n            Uri endpoint = new Uri(az_QuestionAnsering_Endpoint);\n            AzureKeyCredential credential = new AzureKeyCredential(az_QuestionAnsering_Credential);\n            QuestionAnsweringClient client = new QuestionAnsweringClient(endpoint, credential);\n\n            QuestionAnsweringProject project = new QuestionAnsweringProject(az_QuestionAnsering_ProjectName, az_QuestionAnsering_DeploymentName);\n            Response<AnswersResult> response = await client.GetAnswersAsync(msg, project);\n", "            foreach (KnowledgeBaseAnswer answer in response.Value.Answers)\n            {\n                Console.WriteLine($\"({answer.Confidence:P2}) {answer.Answer}\");\n                Console.WriteLine($\"Source: {answer.Source}\");\n                Console.WriteLine();\n            }\n\n            var x = response.Value.Answers[0];\n\n            return response.Value.Answers[0] != null ? response.Value.Answers[0].Answer : \"\u5f88\u62b1\u6b49,\u7121\u6cd5\u56de\u7b54\u60a8\u7684\u554f\u984c\";\n\n        }\n", "        private async Task<string> AzureOpenAi_GPT3_5(string ans)\n        {\n            string azureOpenApiEndpoint = $\"{az_OpenAi_Endpoint}/{az_OpenAi_DeploymentName}/completions?api-version={az_OpenAi_Api_Version}\";\n\n            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Add(\"api-key\", az_OpenAi_Key);\n                var requestModel = new OpenAiRequestModel();\n                requestModel.AddPrompt(ans);\n\n                var json = JsonConvert.SerializeObject(requestModel);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(azureOpenApiEndpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                var completion = JsonConvert.DeserializeObject<Completion>(responseContent);\n\n                return completion.Choices[0].Text;\n            }\n        }\n", "        private async Task<string> AzureOpenAi_GPT4(string ans)\n        {\n            string azureOpenApiEndpoint = $\"{az_OpenAi_Endpoint}/{az_OpenAi_DeploymentName_Gpt4}/chat/completions?api-version={az_OpenAi_Api_Version}\";\n\n            using (HttpClient client = new HttpClient())\n            {\n                client.DefaultRequestHeaders.Add(\"api-key\", az_OpenAi_Key);\n                var requestModel = new OpenAiRequestModel_GPT4();\n                requestModel.AddUserMessages(ans);\n\n                var json = JsonConvert.SerializeObject(requestModel);\n                var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n\n                var response = await client.PostAsync(azureOpenApiEndpoint, data);\n                var responseContent = await response.Content.ReadAsStringAsync();\n\n                var completion = JsonConvert.DeserializeObject<Completion_GPT4>(responseContent);\n\n                return completion.Choices[0].Message.Content;\n            }\n        }\n    }\n}\n"]}
{"filename": "QuestionAnsweringLinebot/Controllers/WeatherForecastController.cs", "chunked_list": ["using Microsoft.AspNetCore.Mvc;\n\nnamespace QuestionAnsweringLinebot.Controllers\n{\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private static readonly string[] Summaries = new[]\n        {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n", "        private static readonly string[] Summaries = new[]\n        {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n\n        private readonly ILogger<WeatherForecastController> _logger;\n\n        public WeatherForecastController(ILogger<WeatherForecastController> logger)\n        {\n            _logger = logger;\n        }\n\n        [HttpGet(Name = \"GetWeatherForecast\")]\n        public IEnumerable<WeatherForecast> Get()\n        {\n            return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n            {\n                Date = DateTime.Now.AddDays(index),\n                TemperatureC = Random.Shared.Next(-20, 55),\n                Summary = Summaries[Random.Shared.Next(Summaries.Length)]\n            })\n            .ToArray();\n        }\n    }\n}"]}
