{"filename": "Standard.REST.RESTFulSense.Infrastructure.Build/Program.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing Standard.REST.RESTFulSense.Infrastructure.Build.Services;\n\nnamespace Standard.REST.RESTFulSense.Infrastructure.Build\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            var scriptGenerationService = new ScriptGenerationService();\n            scriptGenerationService.GenerateBuildScript();\n        }\n    }\n}", "    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            var scriptGenerationService = new ScriptGenerationService();\n            scriptGenerationService.GenerateBuildScript();\n        }\n    }\n}"]}
{"filename": "Standard.REST.RESTFulSense.Infrastructure.Build/Services/ScriptGenerationService.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing ADotNet.Clients;\nusing ADotNet.Models.Pipelines.GithubPipelines.DotNets;\nusing ADotNet.Models.Pipelines.GithubPipelines.DotNets.Tasks;\nusing ADotNet.Models.Pipelines.GithubPipelines.DotNets.Tasks.SetupDotNetTaskV1s;\n\nnamespace Standard.REST.RESTFulSense.Infrastructure.Build.Services", "\nnamespace Standard.REST.RESTFulSense.Infrastructure.Build.Services\n{\n    internal class ScriptGenerationService\n    {\n        private readonly ADotNetClient adotNetClient;\n\n        public ScriptGenerationService() =>\n            adotNetClient = new ADotNetClient();\n\n        public void GenerateBuildScript()\n        {\n            var githubPipeline = new GithubPipeline\n            {\n                Name = \"Standard.REST.RESTFulSense Build\",\n\n                OnEvents = new Events\n                {\n                    Push = new PushEvent\n                    {\n                        Branches = new string[] { \"main\" }\n                    },\n\n                    PullRequest = new PullRequestEvent\n                    {\n                        Branches = new string[] { \"main\" }\n                    }\n                },\n\n                Jobs = new Jobs\n                {\n                    Build = new BuildJob\n                    {\n                        RunsOn = BuildMachines.WindowsLatest,\n\n                        Steps = new List<GithubTask>\n                        {\n                            new CheckoutTaskV2\n                            {\n                                Name = \"Pulling Code\"\n                            },\n\n                            new SetupDotNetTaskV1\n                            {\n                                Name = \"Installing .NET\",\n\n                                TargetDotNetVersion = new TargetDotNetVersion\n                                {\n                                    DotNetVersion = \"7.0.201\",\n                                    IncludePrerelease = true\n                                }\n                            },\n\n                            new RestoreTask\n                            {\n                                Name = \"Restoring Packages\"\n                            },\n\n                            new DotNetBuildTask\n                            {\n                                Name = \"Building Solution\"\n                            },\n\n                            new TestTask\n                            {\n                                Name = \"Running Tests\"\n                            }\n                        }\n                    }\n                }\n            };\n\n            string yamlRelativeFilePath = \"../../../../.github/workflows/build.yml\";\n            string yamlFullPath = Path.GetFullPath(yamlRelativeFilePath);\n            FileInfo yamlDefinition = new FileInfo(yamlFullPath);\n", "        public void GenerateBuildScript()\n        {\n            var githubPipeline = new GithubPipeline\n            {\n                Name = \"Standard.REST.RESTFulSense Build\",\n\n                OnEvents = new Events\n                {\n                    Push = new PushEvent\n                    {\n                        Branches = new string[] { \"main\" }\n                    },\n\n                    PullRequest = new PullRequestEvent\n                    {\n                        Branches = new string[] { \"main\" }\n                    }\n                },\n\n                Jobs = new Jobs\n                {\n                    Build = new BuildJob\n                    {\n                        RunsOn = BuildMachines.WindowsLatest,\n\n                        Steps = new List<GithubTask>\n                        {\n                            new CheckoutTaskV2\n                            {\n                                Name = \"Pulling Code\"\n                            },\n\n                            new SetupDotNetTaskV1\n                            {\n                                Name = \"Installing .NET\",\n\n                                TargetDotNetVersion = new TargetDotNetVersion\n                                {\n                                    DotNetVersion = \"7.0.201\",\n                                    IncludePrerelease = true\n                                }\n                            },\n\n                            new RestoreTask\n                            {\n                                Name = \"Restoring Packages\"\n                            },\n\n                            new DotNetBuildTask\n                            {\n                                Name = \"Building Solution\"\n                            },\n\n                            new TestTask\n                            {\n                                Name = \"Running Tests\"\n                            }\n                        }\n                    }\n                }\n            };\n\n            string yamlRelativeFilePath = \"../../../../.github/workflows/build.yml\";\n            string yamlFullPath = Path.GetFullPath(yamlRelativeFilePath);\n            FileInfo yamlDefinition = new FileInfo(yamlFullPath);\n", "            if (!yamlDefinition.Directory.Exists)\n            {\n                yamlDefinition.Directory.Create();\n            }\n\n            adotNetClient.SerializeAndWriteToFile(\n                adoPipeline: githubPipeline,\n                path: yamlRelativeFilePath);\n        }\n    }\n}\n\n"]}
{"filename": "Standard.REST.RESTFulSense.Tests.Unit/Services/Foundations/StatusDetails/StatusDetailServiceTests.Exceptions.RetrieveAll.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing FluentAssertions;\nusing Moq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;\nusing Xunit;\n", "using Xunit;\n\nnamespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {\n        [Theory]\n        [MemberData(nameof(DependencyExceptions))]\n        public void ShouldThrowDependencyExceptionOnRetrieveAllWhenExceptionOccurs(\n            Exception dependancyException)\n        {\n            // given\n            var failedStorageException =\n                new FailedStatusDetailStorageException(dependancyException);\n\n            var expectedStatusDetailDependencyException =\n                new StatusDetailDependencyException(failedStorageException);\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Throws(dependancyException);\n\n            // when\n            Action retrieveAllStatusDetailsAction = () =>\n                this.statusDetailService.RetrieveAllStatusDetails();\n\n            StatusDetailDependencyException actualStatusDetailDependencyException =\n                Assert.Throws<StatusDetailDependencyException>(retrieveAllStatusDetailsAction);\n\n            // then\n            actualStatusDetailDependencyException.Should()\n                .BeEquivalentTo(expectedStatusDetailDependencyException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n\n        [Fact]", "        public void ShouldThrowDependencyExceptionOnRetrieveAllWhenExceptionOccurs(\n            Exception dependancyException)\n        {\n            // given\n            var failedStorageException =\n                new FailedStatusDetailStorageException(dependancyException);\n\n            var expectedStatusDetailDependencyException =\n                new StatusDetailDependencyException(failedStorageException);\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Throws(dependancyException);\n\n            // when\n            Action retrieveAllStatusDetailsAction = () =>\n                this.statusDetailService.RetrieveAllStatusDetails();\n\n            StatusDetailDependencyException actualStatusDetailDependencyException =\n                Assert.Throws<StatusDetailDependencyException>(retrieveAllStatusDetailsAction);\n\n            // then\n            actualStatusDetailDependencyException.Should()\n                .BeEquivalentTo(expectedStatusDetailDependencyException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n\n        [Fact]", "        public void ShouldThrowServiceExceptionOnRetrieveAllIfServiceErrorOccurs()\n        {\n            // given\n            string exceptionMessage = GetRandomString();\n            var serviceException = new Exception(exceptionMessage);\n\n            var failedStatusDetailServiceException =\n                new FailedStatusDetailServiceException(serviceException);\n\n            var expectedStatusDetailServiceException =\n                new StatusDetailServiceException(failedStatusDetailServiceException);\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Throws(serviceException);\n\n            // when\n            Action retrieveAllStatusDetailsAction = () =>\n                this.statusDetailService.RetrieveAllStatusDetails();\n\n            StatusDetailServiceException actualStatusDetailServiceException =\n                Assert.Throws<StatusDetailServiceException>(retrieveAllStatusDetailsAction);\n\n            // then\n            actualStatusDetailServiceException.Should()\n                .BeEquivalentTo(expectedStatusDetailServiceException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense.Tests.Unit/Services/Foundations/StatusDetails/StatusDetailServiceTests.Logic.RetrieveAll.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System.Linq;\nusing FluentAssertions;\nusing Moq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Xunit;\n", "using Xunit;\n\nnamespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {\n        [Fact]\n        public void ShouldReturnStatusDetails()\n        {\n            // given\n            IQueryable<StatusDetail> randomStatusDetails = CreateRandomStatusDetails(GetRandomNumber());\n            IQueryable<StatusDetail> storageStatusDetails = randomStatusDetails;\n            IQueryable<StatusDetail> expectedStatusDetails = storageStatusDetails;\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Returns(storageStatusDetails);\n\n            // when\n            IQueryable<StatusDetail> actualStatusDetails =\n                this.statusDetailService.RetrieveAllStatusDetails();\n\n            // then\n            actualStatusDetails.Should().BeEquivalentTo(expectedStatusDetails);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense.Tests.Unit/Services/Foundations/StatusDetails/StatusDetailServiceTests.Exceptions.RetrieveStatusDetailByStatusCode.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing FluentAssertions;\nusing Moq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;\nusing Xunit;\n", "using Xunit;\n\nnamespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {\n        [Theory]\n        [MemberData(nameof(DependencyExceptions))]\n        public void ShouldThrowDependencyExceptionOnRetrieveStatusDetailByCodeIfErrorOccurs(\n            Exception dependancyException)\n        {\n            // given\n            int someCode = GetRandomNumber();\n\n            var failedStorageException =\n                new FailedStatusDetailStorageException(dependancyException);\n\n            var expectedStatusDetailDependencyException =\n                new StatusDetailDependencyException(failedStorageException);\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Throws(dependancyException);\n\n            // when\n            Action retrieveStatusDetailByCodeAction = () =>\n                this.statusDetailService.RetrieveStatusDetailByCode(someCode);\n\n            StatusDetailDependencyException actualStatusDetailDependencyException =\n                Assert.Throws<StatusDetailDependencyException>(retrieveStatusDetailByCodeAction);\n\n            // then\n            actualStatusDetailDependencyException.Should()\n                .BeEquivalentTo(expectedStatusDetailDependencyException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n\n        [Fact]", "        public void ShouldThrowDependencyExceptionOnRetrieveStatusDetailByCodeIfErrorOccurs(\n            Exception dependancyException)\n        {\n            // given\n            int someCode = GetRandomNumber();\n\n            var failedStorageException =\n                new FailedStatusDetailStorageException(dependancyException);\n\n            var expectedStatusDetailDependencyException =\n                new StatusDetailDependencyException(failedStorageException);\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Throws(dependancyException);\n\n            // when\n            Action retrieveStatusDetailByCodeAction = () =>\n                this.statusDetailService.RetrieveStatusDetailByCode(someCode);\n\n            StatusDetailDependencyException actualStatusDetailDependencyException =\n                Assert.Throws<StatusDetailDependencyException>(retrieveStatusDetailByCodeAction);\n\n            // then\n            actualStatusDetailDependencyException.Should()\n                .BeEquivalentTo(expectedStatusDetailDependencyException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n\n        [Fact]", "        public void ShouldThrowServiceExceptionOnRetrieveStatusDetailByCodeIfServiceErrorOccurs()\n        {\n            // given\n            int someCode = GetRandomNumber();\n            string exceptionMessage = GetRandomString();\n            var serviceException = new Exception(exceptionMessage);\n\n            var failedStatusDetailServiceException =\n                new FailedStatusDetailServiceException(serviceException);\n\n            var expectedStatusDetailServiceException =\n                new StatusDetailServiceException(failedStatusDetailServiceException);\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Throws(serviceException);\n\n            // when\n            Action retrieveStatusDetailByCodeAction = () =>\n                this.statusDetailService.RetrieveStatusDetailByCode(someCode);\n\n            StatusDetailServiceException actualStatusDetailServiceException =\n                Assert.Throws<StatusDetailServiceException>(retrieveStatusDetailByCodeAction);\n\n            // then\n            actualStatusDetailServiceException.Should()\n                .BeEquivalentTo(expectedStatusDetailServiceException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense.Tests.Unit/Services/Foundations/StatusDetails/StatusDetailServiceTests.Validations.RetrieveStatusDetailByStatusCode.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing System.Linq;\nusing FluentAssertions;\nusing Moq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;", "using Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;\nusing Xunit;\n\nnamespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {\n        [Fact]\n        public void ShouldThrowNotFoundExceptionOnRetrieveByIdIfStatusDetailIsNotFound()\n        {\n            // given\n            int randomNumber = GetRandomNumber();\n            int randomStatusCode = randomNumber;\n            int someStatusDetailId = randomStatusCode;\n            IQueryable<StatusDetail> randomStatusDetails = CreateRandomStatusDetails(randomNumber);\n            IQueryable<StatusDetail> storageStatusDetails = randomStatusDetails;\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Returns(storageStatusDetails);\n\n            var notFoundStatusDetailException =\n                new NotFoundStatusDetailException(someStatusDetailId);\n\n            var expectedStatusDetailValidationException =\n                new StatusDetailValidationException(notFoundStatusDetailException);\n\n            // when\n            Action retrieveStatusDetailByIdAction = () =>\n                this.statusDetailService.RetrieveStatusDetailByCode(someStatusDetailId);\n\n            StatusDetailValidationException actualStatusDetailValidationException =\n                Assert.Throws<StatusDetailValidationException>(retrieveStatusDetailByIdAction);\n\n            // then\n            actualStatusDetailValidationException.Should().BeEquivalentTo(expectedStatusDetailValidationException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n", "        public void ShouldThrowNotFoundExceptionOnRetrieveByIdIfStatusDetailIsNotFound()\n        {\n            // given\n            int randomNumber = GetRandomNumber();\n            int randomStatusCode = randomNumber;\n            int someStatusDetailId = randomStatusCode;\n            IQueryable<StatusDetail> randomStatusDetails = CreateRandomStatusDetails(randomNumber);\n            IQueryable<StatusDetail> storageStatusDetails = randomStatusDetails;\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Returns(storageStatusDetails);\n\n            var notFoundStatusDetailException =\n                new NotFoundStatusDetailException(someStatusDetailId);\n\n            var expectedStatusDetailValidationException =\n                new StatusDetailValidationException(notFoundStatusDetailException);\n\n            // when\n            Action retrieveStatusDetailByIdAction = () =>\n                this.statusDetailService.RetrieveStatusDetailByCode(someStatusDetailId);\n\n            StatusDetailValidationException actualStatusDetailValidationException =\n                Assert.Throws<StatusDetailValidationException>(retrieveStatusDetailByIdAction);\n\n            // then\n            actualStatusDetailValidationException.Should().BeEquivalentTo(expectedStatusDetailValidationException);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense.Tests.Unit/Services/Foundations/StatusDetails/StatusDetailServiceTests.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Moq;\nusing Newtonsoft.Json;", "using Moq;\nusing Newtonsoft.Json;\nusing Standard.REST.RESTFulSense.Brokers.Storages;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Standard.REST.RESTFulSense.Services.Foundations.StatusDetails;\nusing Tynamix.ObjectFiller;\nusing Xunit;\n\nnamespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {", "namespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {\n        private readonly Mock<IStorageBroker> storageBrokerMock;\n        private readonly IStatusDetailService statusDetailService;\n\n        public StatusDetailServiceTests()\n        {\n            this.storageBrokerMock = new Mock<IStorageBroker>();\n            this.statusDetailService = new StatusDetailService(storageBroker: this.storageBrokerMock.Object);\n        }\n", "        public static TheoryData DependencyExceptions()\n        {\n            string randomMessage = GetRandomString();\n            string exceptionMessage = randomMessage;\n\n            return new TheoryData<Exception>\n            {\n                new JsonReaderException(exceptionMessage),\n                new JsonSerializationException(exceptionMessage),\n                new JsonException(exceptionMessage),\n                new ArgumentNullException(exceptionMessage),\n                new ArgumentException(exceptionMessage),\n                new PathTooLongException(exceptionMessage),\n                new DirectoryNotFoundException(exceptionMessage),\n                new FileNotFoundException(exceptionMessage),\n                new UnauthorizedAccessException(exceptionMessage),\n                new NotSupportedException(exceptionMessage),\n                new IOException(exceptionMessage),\n            };\n        }\n", "        private static string GetRandomString() =>\n            new MnemonicString(wordCount: GetRandomNumber()).GetValue();\n\n        private static int GetRandomNumber(int min = 2, int max = 10) =>\n            new IntRange(min, max).GetValue();\n\n        private static IQueryable<StatusDetail> CreateRandomStatusDetails(int randomNumber)\n        {\n            List<StatusDetail> statusDetails = new List<StatusDetail>();\n\n            for (int i = 0; i < randomNumber; i++)\n            {\n                int statusCode = 400 + i;\n                statusDetails.Add(CreateStatusDetailFiller(statusCode).Create());\n            }\n\n            return statusDetails.AsQueryable();\n        }\n", "            for (int i = 0; i < randomNumber; i++)\n            {\n                int statusCode = 400 + i;\n                statusDetails.Add(CreateStatusDetailFiller(statusCode).Create());\n            }\n\n            return statusDetails.AsQueryable();\n        }\n\n        private static Filler<StatusDetail> CreateStatusDetailFiller(int statusCode)\n        {\n            var filler = new Filler<StatusDetail>();\n            filler.Setup();\n\n            return filler;\n        }\n    }\n}\n", "        private static Filler<StatusDetail> CreateStatusDetailFiller(int statusCode)\n        {\n            var filler = new Filler<StatusDetail>();\n            filler.Setup();\n\n            return filler;\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense.Tests.Unit/Services/Foundations/StatusDetails/StatusDetailServiceTests.Logic.RetrieveStatusDetailByStatusCode.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing System.Linq;\nusing FluentAssertions;\nusing Force.DeepCloner;\nusing Moq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;", "using Moq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Xunit;\n\nnamespace Standard.REST.RESTFulSense.Tests.Unit.Services.Foundations.StatusDetails\n{\n    public partial class StatusDetailServiceTests\n    {\n        [Fact]\n        public void ShouldReturnStatusDetailByStatusCode()\n        {\n            // given\n            int randomNumber = GetRandomNumber();\n            int randomStatusCode = 400 + randomNumber;\n            IQueryable<StatusDetail> randomStatusDetails = CreateRandomStatusDetails(randomNumber);\n            IQueryable<StatusDetail> storageStatusDetails = randomStatusDetails;\n            Random random = new Random();\n\n            StatusDetail randomStatusDetail = storageStatusDetails\n                .OrderBy(statusDetail => random.Next())\n                    .Take(1)\n                        .SingleOrDefault();\n\n            StatusDetail inputStatusDetail = randomStatusDetail;\n            StatusDetail expectedStatusDetail = inputStatusDetail.DeepClone();\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Returns(storageStatusDetails);\n\n            // when\n            StatusDetail actualStatusDetail =\n                this.statusDetailService.RetrieveStatusDetailByCode(inputStatusDetail.Code);\n\n            // then\n            actualStatusDetail.Should().BeEquivalentTo(expectedStatusDetail);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n", "        public void ShouldReturnStatusDetailByStatusCode()\n        {\n            // given\n            int randomNumber = GetRandomNumber();\n            int randomStatusCode = 400 + randomNumber;\n            IQueryable<StatusDetail> randomStatusDetails = CreateRandomStatusDetails(randomNumber);\n            IQueryable<StatusDetail> storageStatusDetails = randomStatusDetails;\n            Random random = new Random();\n\n            StatusDetail randomStatusDetail = storageStatusDetails\n                .OrderBy(statusDetail => random.Next())\n                    .Take(1)\n                        .SingleOrDefault();\n\n            StatusDetail inputStatusDetail = randomStatusDetail;\n            StatusDetail expectedStatusDetail = inputStatusDetail.DeepClone();\n\n            this.storageBrokerMock.Setup(broker =>\n                broker.SelectAllStatusDetails())\n                    .Returns(storageStatusDetails);\n\n            // when\n            StatusDetail actualStatusDetail =\n                this.statusDetailService.RetrieveStatusDetailByCode(inputStatusDetail.Code);\n\n            // then\n            actualStatusDetail.Should().BeEquivalentTo(expectedStatusDetail);\n\n            this.storageBrokerMock.Verify(broker =>\n                broker.SelectAllStatusDetails(),\n                    Times.Once);\n\n            this.storageBrokerMock.VerifyNoOtherCalls();\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Brokers/Storages/StorageBroker.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\n", "using Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\n\nnamespace Standard.REST.RESTFulSense.Brokers.Storages\n{\n    internal partial class StorageBroker : IStorageBroker\n    {\n        public StorageBroker() =>\n            statusDetails = InitialiseStatusCodes();\n\n        private static IQueryable<StatusDetail> InitialiseStatusCodes()\n        {\n            string path = Path.Combine(Directory.GetCurrentDirectory(), \"Data\\\\StatusCodes.json\");\n            string json = File.ReadAllText(path);\n\n            return JsonConvert.DeserializeObject<List<StatusDetail>>(json).AsQueryable();\n        }\n    }\n}\n", "        private static IQueryable<StatusDetail> InitialiseStatusCodes()\n        {\n            string path = Path.Combine(Directory.GetCurrentDirectory(), \"Data\\\\StatusCodes.json\");\n            string json = File.ReadAllText(path);\n\n            return JsonConvert.DeserializeObject<List<StatusDetail>>(json).AsQueryable();\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Brokers/Storages/IStorageBroker.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nnamespace Standard.REST.RESTFulSense.Brokers.Storages\n{\n    internal partial interface IStorageBroker\n    { }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Brokers/Storages/StorageBroker.StatusDetails.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System.Linq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\n\nnamespace Standard.REST.RESTFulSense.Brokers.Storages\n{\n    internal partial class StorageBroker\n    {\n        private IQueryable<StatusDetail> statusDetails { get; set; }\n\n        public IQueryable<StatusDetail> SelectAllStatusDetails() =>\n            statusDetails;\n    }\n}\n", "{\n    internal partial class StorageBroker\n    {\n        private IQueryable<StatusDetail> statusDetails { get; set; }\n\n        public IQueryable<StatusDetail> SelectAllStatusDetails() =>\n            statusDetails;\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Brokers/Storages/IStorageBroker.StatusDetails.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System.Linq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\n\nnamespace Standard.REST.RESTFulSense.Brokers.Storages\n{\n    internal partial interface IStorageBroker\n    {\n        IQueryable<StatusDetail> SelectAllStatusDetails();\n    }\n}\n", "{\n    internal partial interface IStorageBroker\n    {\n        IQueryable<StatusDetail> SelectAllStatusDetails();\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Services/Foundations/StatusDetails/StatusDetailService.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System.Linq;\nusing Standard.REST.RESTFulSense.Brokers.Storages;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\n\nnamespace Standard.REST.RESTFulSense.Services.Foundations.StatusDetails\n{\n    internal partial class StatusDetailService : IStatusDetailService\n    {", "namespace Standard.REST.RESTFulSense.Services.Foundations.StatusDetails\n{\n    internal partial class StatusDetailService : IStatusDetailService\n    {\n        private readonly IStorageBroker storageBroker;\n\n        public StatusDetailService(IStorageBroker storageBroker) =>\n            this.storageBroker = storageBroker;\n\n        public IQueryable<StatusDetail> RetrieveAllStatusDetails() =>\n            TryCatch(() => this.storageBroker.SelectAllStatusDetails());\n", "        public StatusDetail RetrieveStatusDetailByCode(int statusCode) =>\n            TryCatch(() =>\n            {\n                StatusDetail maybeStatusDetail = this.storageBroker.SelectAllStatusDetails()\n                    .FirstOrDefault(statusDetail => statusDetail.Code == statusCode);\n\n                ValidateStorageStatusDetail(maybeStatusDetail, statusCode);\n\n                return maybeStatusDetail;\n            });\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Services/Foundations/StatusDetails/StatusDetailService.Validations.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;\n\nnamespace Standard.REST.RESTFulSense.Services.Foundations.StatusDetails\n{\n    internal partial class StatusDetailService\n    {", "{\n    internal partial class StatusDetailService\n    {\n        private static void ValidateStorageStatusDetail(StatusDetail maybeStatusDetail, int statusCode)\n        {\n            if (maybeStatusDetail is null)\n            {\n                throw new NotFoundStatusDetailException(statusCode);\n            }\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Services/Foundations/StatusDetails/StatusDetailService.Exceptions.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;", "using Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions;\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Services.Foundations.StatusDetails\n{\n    internal partial class StatusDetailService\n    {\n        private delegate IQueryable<StatusDetail> ReturningStatusDetailsFunction();\n        private delegate StatusDetail ReturningStatusDetailFunction();\n\n        private IQueryable<StatusDetail> TryCatch(ReturningStatusDetailsFunction returningStatusDetailsFunction)\n        {\n            try\n            {\n                return returningStatusDetailsFunction();\n            }", "        private delegate IQueryable<StatusDetail> ReturningStatusDetailsFunction();\n        private delegate StatusDetail ReturningStatusDetailFunction();\n\n        private IQueryable<StatusDetail> TryCatch(ReturningStatusDetailsFunction returningStatusDetailsFunction)\n        {\n            try\n            {\n                return returningStatusDetailsFunction();\n            }\n            catch (JsonReaderException jsonReaderException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonReaderException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (JsonReaderException jsonReaderException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonReaderException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (JsonSerializationException jsonSerializationException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonSerializationException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (JsonException jsonException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (ArgumentNullException argumentNullException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(argumentNullException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (ArgumentException argumentException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(argumentException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (PathTooLongException pathTooLongException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(pathTooLongException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (DirectoryNotFoundException directoryNotFoundException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(directoryNotFoundException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (FileNotFoundException fileNotFoundException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(fileNotFoundException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (UnauthorizedAccessException unauthorizedAccessException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(unauthorizedAccessException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (NotSupportedException notSupportedException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(notSupportedException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (IOException iOException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(iOException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (Exception exception)\n            {\n                var failedStatusDetailServiceException =\n                    new FailedStatusDetailServiceException(exception);\n\n                throw CreateAndLogServiceException(failedStatusDetailServiceException);\n            }\n        }\n", "        private StatusDetail TryCatch(ReturningStatusDetailFunction returningStatusDetailFunction)\n        {\n            try\n            {\n                return returningStatusDetailFunction();\n            }\n            catch (NotFoundStatusDetailException notFoundStatusDetailException)\n            {\n                throw CreateAndLogValidationException(notFoundStatusDetailException);\n            }\n            catch (JsonReaderException jsonReaderException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonReaderException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (JsonReaderException jsonReaderException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonReaderException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (JsonSerializationException jsonSerializationException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonSerializationException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (JsonException jsonException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(jsonException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (ArgumentNullException argumentNullException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(argumentNullException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (ArgumentException argumentException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(argumentException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (PathTooLongException pathTooLongException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(pathTooLongException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (DirectoryNotFoundException directoryNotFoundException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(directoryNotFoundException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (FileNotFoundException fileNotFoundException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(fileNotFoundException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (UnauthorizedAccessException unauthorizedAccessException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(unauthorizedAccessException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (NotSupportedException notSupportedException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(notSupportedException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }", "            catch (IOException iOException)\n            {\n                var failedStatusDetailStorageException =\n                    new FailedStatusDetailStorageException(iOException);\n\n                throw CreateAndLogDependencyException(failedStatusDetailStorageException);\n            }\n            catch (Exception exception)\n            {\n                var failedStatusDetailServiceException =\n                    new FailedStatusDetailServiceException(exception);\n\n                throw CreateAndLogServiceException(failedStatusDetailServiceException);\n            }\n        }\n", "        private StatusDetailDependencyException CreateAndLogDependencyException(Xeption exception)\n        {\n            var statusDetailDependencyException =\n                new StatusDetailDependencyException(exception);\n\n            return statusDetailDependencyException;\n        }\n\n        private StatusDetailValidationException CreateAndLogValidationException(Xeption exception)\n        {\n            var statusDetailValidationException =\n                new StatusDetailValidationException(exception);\n\n            return statusDetailValidationException;\n        }\n", "        private StatusDetailValidationException CreateAndLogValidationException(Xeption exception)\n        {\n            var statusDetailValidationException =\n                new StatusDetailValidationException(exception);\n\n            return statusDetailValidationException;\n        }\n\n        private StatusDetailServiceException CreateAndLogServiceException(Xeption exception)\n        {\n            var statusDetailServiceException =\n                new StatusDetailServiceException(exception);\n\n            return statusDetailServiceException;\n        }\n    }\n}\n", "        private StatusDetailServiceException CreateAndLogServiceException(Xeption exception)\n        {\n            var statusDetailServiceException =\n                new StatusDetailServiceException(exception);\n\n            return statusDetailServiceException;\n        }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Services/Foundations/StatusDetails/IStatusDetailService.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System.Linq;\nusing Standard.REST.RESTFulSense.Models.Foundations.StatusDetails;\n\ninternal interface IStatusDetailService\n{\n    IQueryable<StatusDetail> RetrieveAllStatusDetails();\n    StatusDetail RetrieveStatusDetailByCode(int statusCode);\n}"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/HttpStatusCode.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails\n{\n    internal enum HttpStatusCode\n    {\n        Status100Continue = 100,\n        Status101SwitchingProtocols = 101,\n        Status102Processing = 102,\n        Status200OK = 200,\n        Status201Created = 201,\n        Status202Accepted = 202,\n        Status203NonAuthoritativeInformation = 203,\n        Status204NoContent = 204,\n        Status205ResetContent = 205,\n        Status206PartialContent = 206,\n        Status207MultiStatus = 207,\n        Status208AlreadyReported = 208,\n        Status226IMUsed = 226,\n        Status300MultipleChoices = 300,\n        Status301MovedPermanently = 301,\n        Status302Found = 302,\n        Status303SeeOther = 303,\n        Status304NotModified = 304,\n        Status305UseProxy = 305,\n        Status306SwitchProxy = 306,\n        Status307TemporaryRedirect = 307,\n        Status308PermanentRedirect = 308,\n        Status400BadRequest = 400,\n        Status401Unauthorized = 401,\n        Status402PaymentRequired = 402,\n        Status403Forbidden = 403,\n        Status404NotFound = 404,\n        Status405MethodNotAllowed = 405,\n        Status406NotAcceptable = 406,\n        Status407ProxyAuthenticationRequired = 407,\n        Status408RequestTimeout = 408,\n        Status409Conflict = 409,\n        Status410Gone = 410,\n        Status411LengthRequired = 411,\n        Status412PreconditionFailed = 412,\n        Status413PayloadTooLarge = 413,\n        Status414URITooLong = 414,\n        Status415UnsupportedMediaType = 415,\n        Status416RangeNotSatisfiable = 416,\n        Status417ExpectationFailed = 417,\n        Status418ImATeapot = 418,\n        Status421MisdirectedRequest = 421,\n        Status422UnprocessableEntity = 422,\n        Status423Locked = 423,\n        Status424FailedDependency = 424,\n        Status426UpgradeRequired = 426,\n        Status428PreconditionRequired = 428,\n        Status429TooManyRequests = 429,\n        Status431RequestHeaderFieldsTooLarge = 431,\n        Status451UnavailableForLegalReasons = 451,\n        Status499ClientClosedRequest = 499,\n        Status500InternalServerError = 500,\n        Status501NotImplemented = 501,\n        Status502BadGateway = 502,\n        Status503ServiceUnavailable = 503,\n        Status504GatewayTimeout = 504,\n        Status505HTTPVersionNotSupported = 505,\n        Status506VariantAlsoNegotiates = 506,\n        Status507InsufficientStorage = 507,\n        Status508LoopDetected = 508,\n        Status510NotExtended = 510,\n        Status511NetworkAuthenticationRequired = 511\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/StatusDetail.cs", "chunked_list": ["\ufeff// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing Newtonsoft.Json;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails\n{\n    internal class StatusDetail\n    {\n        [JsonProperty(\"statusCode\")]", "    internal class StatusDetail\n    {\n        [JsonProperty(\"statusCode\")]\n        public int Code { get; set; }\n\n        [JsonProperty(\"reason\")]\n        public string Reason { get; set; }\n\n        [JsonProperty(\"description\")]\n        public string Description { get; set; }\n\n        [JsonProperty(\"type\")]", "        public string Description { get; set; }\n\n        [JsonProperty(\"type\")]\n        public string Type { get; set; }\n    }\n}\n"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/Exceptions/FailedStatusDetailServiceException.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions\n{\n    public class FailedStatusDetailServiceException : Xeption\n    {\n        public FailedStatusDetailServiceException(Exception innerException)\n            : base(message: \"Failed status detail service occurred, please contact support\", innerException)\n        { }\n    }\n}", "{\n    public class FailedStatusDetailServiceException : Xeption\n    {\n        public FailedStatusDetailServiceException(Exception innerException)\n            : base(message: \"Failed status detail service occurred, please contact support\", innerException)\n        { }\n    }\n}"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/Exceptions/FailedStatusDetailStorageException.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions\n{\n    public class FailedStatusDetailStorageException : Xeption\n    {\n        public FailedStatusDetailStorageException(Exception innerException)\n            : base(message: \"Failed status detail storage error occurred, contact support.\", innerException)\n        { }\n    }\n}", "{\n    public class FailedStatusDetailStorageException : Xeption\n    {\n        public FailedStatusDetailStorageException(Exception innerException)\n            : base(message: \"Failed status detail storage error occurred, contact support.\", innerException)\n        { }\n    }\n}"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/Exceptions/StatusDetailServiceException.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing System;\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions\n{\n    public class StatusDetailServiceException : Xeption\n    {\n        public StatusDetailServiceException(Exception innerException)\n            : base(message: \"Status detail service error occurred, contact support.\", innerException)\n        { }\n    }\n}", "{\n    public class StatusDetailServiceException : Xeption\n    {\n        public StatusDetailServiceException(Exception innerException)\n            : base(message: \"Status detail service error occurred, contact support.\", innerException)\n        { }\n    }\n}"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/Exceptions/StatusDetailValidationException.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions\n{\n    public class StatusDetailValidationException : Xeption\n    {\n        public StatusDetailValidationException(Xeption innerException)\n            : base(message: \"Status detail validation errors occurred, please try again.\",\n                  innerException)\n        { }\n    }\n}", "    public class StatusDetailValidationException : Xeption\n    {\n        public StatusDetailValidationException(Xeption innerException)\n            : base(message: \"Status detail validation errors occurred, please try again.\",\n                  innerException)\n        { }\n    }\n}"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/Exceptions/StatusDetailDependencyException.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions\n{\n    internal class StatusDetailDependencyException : Xeption\n    {\n        public StatusDetailDependencyException(Xeption innerException) :\n            base(message: \"Status detail dependency error occurred, contact support.\", innerException)\n        { }\n    }\n}", "    internal class StatusDetailDependencyException : Xeption\n    {\n        public StatusDetailDependencyException(Xeption innerException) :\n            base(message: \"Status detail dependency error occurred, contact support.\", innerException)\n        { }\n    }\n}"]}
{"filename": "Standard.REST.RESTFulSense/Models/Foundations/StatusDetails/Exceptions/NotFoundStatusDetailException.cs", "chunked_list": ["// -------------------------------------------------------------\n// Copyright (c) - The Standard Community - All rights reserved.\n// -------------------------------------------------------------\n\nusing Xeptions;\n\nnamespace Standard.REST.RESTFulSense.Models.Foundations.StatusDetails.Exceptions\n{\n    public class NotFoundStatusDetailException : Xeption\n    {\n        public NotFoundStatusDetailException(int statusCode)\n            : base(message: $\"Couldn't find a status detail with code: {statusCode}.\")\n        { }\n    }\n}", "    public class NotFoundStatusDetailException : Xeption\n    {\n        public NotFoundStatusDetailException(int statusCode)\n            : base(message: $\"Couldn't find a status detail with code: {statusCode}.\")\n        { }\n    }\n}"]}
