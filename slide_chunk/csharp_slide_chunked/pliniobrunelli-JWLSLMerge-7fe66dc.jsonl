{"filename": "JWLSLMerge.Data/JWDal.cs", "chunked_list": ["\ufeffusing Dapper;\nusing JWLSLMerge.Data.Attributes;\nusing System.Data;\nusing System.Data.SQLite;\n\nnamespace JWLSLMerge.Data\n{\n    public class JWDal\n    {\n        private string connectionString;\n\n        public JWDal(string dbPath)\n        {\n            connectionString = $\"Data Source={dbPath}\";\n        }\n\n        public IEnumerable<T> TableList<T>()\n        {", "        private string connectionString;\n\n        public JWDal(string dbPath)\n        {\n            connectionString = $\"Data Source={dbPath}\";\n        }\n\n        public IEnumerable<T> TableList<T>()\n        {\n            using (IDbConnection cnn = new SQLiteConnection(connectionString))\n            {\n                return cnn.Query<T>($\"SELECT * FROM {typeof(T).Name}\");\n            }\n        }\n\n        public T? GetFirst<T>(T item, string[] FieldNames, bool SetEmptyWhenNull = false)\n        {", "            using (IDbConnection cnn = new SQLiteConnection(connectionString))\n            {\n                return cnn.Query<T>($\"SELECT * FROM {typeof(T).Name}\");\n            }\n        }\n\n        public T? GetFirst<T>(T item, string[] FieldNames, bool SetEmptyWhenNull = false)\n        {\n            using (IDbConnection con = new SQLiteConnection(connectionString))\n            {\n                string sql = $\"SELECT * FROM {typeof(T).Name} WHERE {getWhereClause(FieldNames)}\";\n\n                return con.Query<T>(sql, getParameters<T>(item, FieldNames, SetEmptyWhenNull)).FirstOrDefault();\n            }\n        }\n", "            using (IDbConnection con = new SQLiteConnection(connectionString))\n            {\n                string sql = $\"SELECT * FROM {typeof(T).Name} WHERE {getWhereClause(FieldNames)}\";\n\n                return con.Query<T>(sql, getParameters<T>(item, FieldNames, SetEmptyWhenNull)).FirstOrDefault();\n            }\n        }\n\n        public bool ItemExists<T>(T item, string[] FieldNames, bool SetEmptyWhenNull = false)\n        {\n            using (IDbConnection con = new SQLiteConnection(connectionString))\n            {\n                string sql = $\"SELECT 1 FROM {typeof(T).Name} WHERE {getWhereClause(FieldNames)}\";\n\n                return con.ExecuteScalar<int>(sql, getParameters<T>(item, FieldNames, SetEmptyWhenNull)) > 0;\n            }\n        }\n", "        public bool ItemExists<T>(T item, string[] FieldNames, bool SetEmptyWhenNull = false)\n        {\n            using (IDbConnection con = new SQLiteConnection(connectionString))\n            {\n                string sql = $\"SELECT 1 FROM {typeof(T).Name} WHERE {getWhereClause(FieldNames)}\";\n\n                return con.ExecuteScalar<int>(sql, getParameters<T>(item, FieldNames, SetEmptyWhenNull)) > 0;\n            }\n        }\n\n        public int ItemInsert<T>(T item)\n        {", "        public int ItemInsert<T>(T item)\n        {\n            using (IDbConnection con = new SQLiteConnection(connectionString))\n            {\n                string sql =\n                    $\"INSERT INTO {typeof(T).Name} ({getFieldNames<T>()}) \" +\n                    $\"VALUES ({getFieldNames<T>(true)});\" +\n                    \"SELECT last_insert_rowid();\";\n\n                return con.ExecuteScalar<int>(sql, getParameters<T>(item));\n            }\n        }\n", "        public string SetLastModification()\n        {\n            string dt = DateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ssZ\");\n\n            using (IDbConnection con = new SQLiteConnection(connectionString))\n            {\n                string sql = $\"UPDATE LastModified SET LastModified = '{dt}'\";\n\n                con.Execute(sql);\n            }\n\n            return dt;\n        }\n", "        private DynamicParameters getParameters<T>(T objeto, string[]? FieldNames = null, bool SetEmptyWhenNull = false)\n        {\n            FieldNames = FieldNames?.Select(p => p.ToLower()).ToArray() ?? new string[0];\n            var parameters = new DynamicParameters();\n\n            foreach (var propertyInfo in typeof(T).GetProperties())\n            {\n                if (!propertyInfo.GetCustomAttributes(true).Any(a => a is IgnoreAttribute) &&\n                    (FieldNames.Length == 0 || FieldNames.Contains(propertyInfo.Name.ToLower())))\n                {\n                    object? value = propertyInfo.GetValue(objeto);", "                    if (value == null && SetEmptyWhenNull) value = \"\";\n\n                    parameters.Add(propertyInfo.Name, value);\n                }\n            }\n\n            return parameters;\n        }\n\n        private string getWhereClause(string[] FieldNames)\n        {\n            return string.Join(\" AND \", FieldNames.Select(p => $\"IFNULL({p}, '') = @{p}\").ToArray());\n        }\n", "        private string getWhereClause(string[] FieldNames)\n        {\n            return string.Join(\" AND \", FieldNames.Select(p => $\"IFNULL({p}, '') = @{p}\").ToArray());\n        }\n\n        private string getFieldNames<T>(bool includeAtSymbol = false)\n        {\n            List<string> names = new List<string>();\n\n            foreach (var propriedade in typeof(T).GetProperties())\n            {", "            foreach (var propriedade in typeof(T).GetProperties())\n            {\n                if (!propriedade.GetCustomAttributes(true).Any(a => a is IgnoreAttribute))\n                {\n                    names.Add((includeAtSymbol ? \"@\" : \"\") + propriedade.Name);\n                }\n            }\n\n            return string.Join(\",\", names.ToArray());\n        }\n    }\n}\n\n"]}
{"filename": "JWLSLMerge.Data/Attributes/Ignore.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Attributes\n{\n    [AttributeUsage(AttributeTargets.Property)]\n    public class IgnoreAttribute : Attribute { }\n\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlaylistItemIndependentMediaMap.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Models\n{\n    public class PlaylistItemIndependentMediaMap\n    {\n        public int PlaylistItemId { get; set; }\n        public int IndependentMediaId { get; set; }\n        public long DurationTicks { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/BlockRange.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class BlockRange\n    {\n        [Ignore]\n        public int BlockRangeId { get; set; }\n        public int BlockType { get; set; }\n        public int Identifier { get; set; }\n        public int? StartToken { get; set; }\n        public int? EndToken { get; set; }", "        public int BlockType { get; set; }\n        public int Identifier { get; set; }\n        public int? StartToken { get; set; }\n        public int? EndToken { get; set; }\n        public int UserMarkId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlaylistItemMarker.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class PlaylistItemMarker\n    {\n        [Ignore]\n        public int PlaylistItemMarkerId { get; set; }\n        public int PlaylistItemId { get; set; }\n        public string Label { get; set; } = null!;\n        public long StartTimeTicks { get; set; }", "        public int PlaylistItemId { get; set; }\n        public string Label { get; set; } = null!;\n        public long StartTimeTicks { get; set; }\n        public long DurationTicks { get; set; }\n        public long EndTransitionDurationTicks { get; set; }\n\n        [Ignore]\n        public int NewPlaylistItemMarkerId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/Note.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class Note\n    {\n        [Ignore]\n        public int NoteId { get; set; }\n        public string Guid { get; set; } = null!;\n        public int? UserMarkId { get; set; }\n        public int? LocationId { get; set; }\n        public string? Title { get; set; }\n        public string? Content { get; set; }", "        public string Guid { get; set; } = null!;\n        public int? UserMarkId { get; set; }\n        public int? LocationId { get; set; }\n        public string? Title { get; set; }\n        public string? Content { get; set; }\n        public string LastModified { get; set; } = null!;\n        public string Created { get; set; } = null!;\n        public int BlockType { get; set; }\n        public int? BlockIdentifier { get; set; }\n\n        [Ignore]", "        public int NewNoteId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlaylistItemAccuracy.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Models\n{\n    public class PlaylistItemAccuracy\n    {\n        public int PlaylistItemAccuracyId { get; set; }\n        public string Description { get; set; } = null!;\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/TagMap.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class TagMap\n    {\n        [Ignore]\n        public int TagMapId { get; set; }\n        public int? PlaylistItemId { get; set; }\n        public int? LocationId { get; set; }\n        public int? NoteId { get; set; }", "        public int TagId { get; set; }\n        public int Position { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/UserMark.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class UserMark\n    {\n        [Ignore]\n        public int UserMarkId { get; set; }\n        public int ColorIndex { get; set; }\n        public int LocationId { get; set; }\n        public int StyleIndex { get; set; }", "        public int ColorIndex { get; set; }\n        public int LocationId { get; set; }\n        public int StyleIndex { get; set; }\n        public string UserMarkGuid { get; set; } = null!;\n        public int Version { get; set; }\n\n        [Ignore]\n        public int NewUserMarkId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlaylistItemMarkerBibleVerseMap.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Models\n{\n    public class PlaylistItemMarkerBibleVerseMap\n    {\n        public int PlaylistItemMarkerId { get; set; }\n        public int VerseId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/IndependentMedia.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class IndependentMedia\n    {\n        [Ignore]\n        public int IndependentMediaId { get; set; }\n        public string OriginalFilename { get; set; } = null!;\n        public string FilePath { get; set; } = null!;\n        public string MimeType { get; set; } = null!;", "        public string OriginalFilename { get; set; } = null!;\n        public string FilePath { get; set; } = null!;\n        public string MimeType { get; set; } = null!;\n        public string Hash { get; set; } = null!;\n\n        [Ignore]\n        public int NewIndependentMediaId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlayListItem.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class PlayListItem\n    {\n        [Ignore]\n        public int PlaylistItemId { get; set; }\n        public string Label { get; set; } = null!;\n        public int StartTrimOffsetTicks { get; set; }\n        public int EndTrimOffsetTicks { get; set; }", "        public string Label { get; set; } = null!;\n        public int StartTrimOffsetTicks { get; set; }\n        public int EndTrimOffsetTicks { get; set; }\n        public int Accuracy { get; set; }\n        public int EndAction { get; set; }\n        public string ThumbnailFilePath { get; set; } = null!;\n\n        [Ignore]\n        public int NewPlaylistItemId { get; set; }\n    }\n}\n", "        public int NewPlaylistItemId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/Manifest.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Models\n{\n    public class Manifest\n    {\n        public string Name { get; set; } = null!;\n        public string CreationDate { get; set; } = null!;\n        public int Version { get; set; } = 1;\n        public int Type { get; set; } = 0;\n        public UserDataBackup UserDataBackup { get; set; } = null!;\n    }\n", "        public UserDataBackup UserDataBackup { get; set; } = null!;\n    }\n\n    public class UserDataBackup\n    {\n        public string LastModifiedDate { get; set; } = null!;\n        public string DeviceName { get; set; } = null!;\n        public string DatabaseName { get; set; } = null!;\n        public string Hash { get; set; } = null!;\n        public int SchemaVersion { get; set; }\n    }\n}\n", "        public string Hash { get; set; } = null!;\n        public int SchemaVersion { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlaylistItemMarkerParagraphMap.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Models\n{\n    public class PlaylistItemMarkerParagraphMap\n    {\n        public int PlaylistItemMarkerId { get; set; }\n        public int MepsDocumentId { get; set; }\n        public int ParagraphIndex { get; set; }\n        public int MarkerIndexWithinParagraph { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/Bookmark.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class Bookmark\n    {\n        [Ignore]\n        public int BookmarkId { get; set; }\n        public int LocationId { get; set; }\n        public int PublicationLocationId { get; set; }\n        public int Slot { get; set; }", "        public int LocationId { get; set; }\n        public int PublicationLocationId { get; set; }\n        public int Slot { get; set; }\n        public string Title { get; set; } = null!;\n        public string? Snippet { get; set; }\n        public int BlockType { get; set; }\n        public int? BlockIdentifier { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/PlaylistItemLocationMap.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge.Data.Models\n{\n    public class PlaylistItemLocationMap\n    {\n        public int PlaylistItemId { get; set; }\n        public int LocationId { get; set; }\n        public int MajorMultimediaType { get; set; }\n        public long? BaseDurationTicks { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/Tag.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class Tag\n    {\n        [Ignore]\n        public int TagId { get; set; }\n        public int Type { get; set; }\n        public string Name { get; set; } = null!;\n\n        [Ignore]", "        public int Type { get; set; }\n        public string Name { get; set; } = null!;\n\n        [Ignore]\n        public int NewTagId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/InputField.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class InputField\n    {\n        public int LocationId { get; set; }\n        public string TextTag { get; set; } = null!;\n        public string Value { get; set; } = null!;\n    }\n}\n", "        public string Value { get; set; } = null!;\n    }\n}\n"]}
{"filename": "JWLSLMerge.Data/Models/Location.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data.Attributes;\n\nnamespace JWLSLMerge.Data.Models\n{\n    public class Location\n    {\n        [Ignore]\n        public int LocationId { get; set; }\n        public int? BookNumber { get; set; }\n        public int? ChapterNumber { get; set; }\n        public int? DocumentId { get; set; }\n        public int? Track { get; set; }", "        public int IssueTagNumber { get; set; }\n        public string? KeySymbol { get; set; }\n        public int? MepsLanguage { get; set; }\n        public int Type { get; set; }\n        public string? Title { get; set; }\n\n        [Ignore]\n        public int NewLocationId { get; set; }\n    }\n}\n"]}
{"filename": "JWLSLMerge/MergeService.cs", "chunked_list": ["\ufeffusing JWLSLMerge.Data;\nusing JWLSLMerge.Data.Models;\nusing Newtonsoft.Json;\nusing System.IO.Compression;\nusing System.Security.Cryptography;\n\nnamespace JWLSLMerge\n{\n    public class MergeService\n    {\n        public event EventHandler<string>? Message;", "    public class MergeService\n    {\n        public event EventHandler<string>? Message;\n        private readonly string targetPath = null!;\n        private readonly string targetDbFile = null!;\n        private string lastModified = null!;\n\n        public MergeService()\n        {\n            targetPath = Environment.GetTargetDirectory();\n            targetDbFile = Environment.GetDbFile();\n        }\n", "        public void Run(string[] jwlibraryFiles)\n        {\n            try\n            {\n                //get userData.db\n                sendMessage(\"Preparing database file.\");\n\n                JWDal dbMerged = new JWDal(targetDbFile);\n\n                foreach (string file in jwlibraryFiles.Where(p => File.Exists(p)))\n                {\n                    sendMessage($\"Reading {Path.GetFileName(file)} file.\");\n\n                    //unzip\n                    string tempDir = Environment.GetTempDirectory();\n                    ZipFile.ExtractToDirectory(file, tempDir, true);\n\n                    string? dbFile = Directory.GetFiles(tempDir, \"userData.db\").FirstOrDefault();\n", "                foreach (string file in jwlibraryFiles.Where(p => File.Exists(p)))\n                {\n                    sendMessage($\"Reading {Path.GetFileName(file)} file.\");\n\n                    //unzip\n                    string tempDir = Environment.GetTempDirectory();\n                    ZipFile.ExtractToDirectory(file, tempDir, true);\n\n                    string? dbFile = Directory.GetFiles(tempDir, \"userData.db\").FirstOrDefault();\n\n                    if (!string.IsNullOrEmpty(dbFile))\n                    {\n                        JWDal dbSource = new JWDal(dbFile);\n                        merge(dbMerged, dbSource);\n\n                        //delete the source db\n                        File.Delete(dbFile);\n                    }\n\n                    //copy source files to target directory\n                    string[] files = Directory.GetFiles(tempDir, \"*.*\");\n", "                    if (!string.IsNullOrEmpty(dbFile))\n                    {\n                        JWDal dbSource = new JWDal(dbFile);\n                        merge(dbMerged, dbSource);\n\n                        //delete the source db\n                        File.Delete(dbFile);\n                    }\n\n                    //copy source files to target directory\n                    string[] files = Directory.GetFiles(tempDir, \"*.*\");\n", "                    foreach (var item in files)\n                    {\n                        File.Move(item, Path.Combine(targetPath, Path.GetFileName(item)), true);\n                    }\n                }\n\n                lastModified = dbMerged.SetLastModification();\n\n                createManifestFile();\n\n                createJWLibraryFile();\n            }", "            catch (Exception ex)\n            {\n                sendMessage($\"An error occurred while processing. Detail: {ex.Message}\");\n            }\n        }\n\n        private void createJWLibraryFile()\n        {\n            //create a jwlibrary file\n            sendMessage($\"Creating jwlibrary file.\");\n\n            string jwFile = Path.Combine(Environment.GetMergedDirectory(), \"merged.jwlibrary\");", "            if (File.Exists(jwFile)) File.Delete(jwFile);\n\n            ZipFile.CreateFromDirectory(targetPath, jwFile);\n\n            sendMessage($\"Done. The file has been created in {jwFile}.\");\n        }\n\n        private void createManifestFile()\n        {\n            //create a manifest.json\n            sendMessage($\"Creating manifest file.\");\n\n            Manifest manifest = new Manifest()\n            {\n                CreationDate = lastModified,\n                Name = $\"JWSLMerge_{lastModified}\",\n                UserDataBackup = new UserDataBackup()\n                {\n                    DatabaseName = \"userData.db\",\n                    DeviceName = System.Environment.MachineName,\n                    LastModifiedDate = lastModified,\n                    SchemaVersion = 11,\n                    Hash = GenerateDatabaseHash(targetDbFile)\n                }\n            };\n\n            string jsonManifest = JsonConvert.SerializeObject(manifest, Newtonsoft.Json.Formatting.None);\n\n            string pathManifest = Path.Combine(targetPath, \"manifest.json\");", "            if (File.Exists(pathManifest)) File.Delete(pathManifest);\n\n            using (var sw = new StreamWriter(Path.Combine(targetPath, \"manifest.json\"), false))\n            {\n                sw.Write(jsonManifest);\n            };\n        }\n\n        private void sendMessage(string message)\n        {\n            if (Message != null)\n            {\n                Message(this, message);\n            }\n        }\n", "        private void sendMessage(string message)\n        {\n            if (Message != null)\n            {\n                Message(this, message);\n            }\n        }\n\n        private void merge(JWDal dbMerged, JWDal dbSource)\n        {\n            /* Location\n             * InputField (depend on Location)\n             * BookMark (depend on Location)\n             * UserMark (depend on Location)\n             * BlockRange (depend on UserMark)\n             * Note (depends on Location and UserMark)\n             * IndependentMedia\n             * PlayListItem (depends on IndependentMedia)\n             * PlayListItemIndependentMediaMap (depends on IndependentMedia and PlayListItem)\n             * PlayListItemLocationMap (depends on Location and PlayListItem)\n             * Tag\n             * TagMap (depends on Tag, Location, PlaylistItem and Note)\n             * PlaylistItemMarker (depends on PlayListItem)\n             * PlaylistItemMarkerBibleVerseMap (depends on PlaylistItemMarker)\n             * PlaylistItemMarkerParagraphMap (depends on PlaylistItemMarker)\n             */\n\n            //merge Location\n            var t_Location = dbSource.TableList<Location>();\n", "        private void merge(JWDal dbMerged, JWDal dbSource)\n        {\n            /* Location\n             * InputField (depend on Location)\n             * BookMark (depend on Location)\n             * UserMark (depend on Location)\n             * BlockRange (depend on UserMark)\n             * Note (depends on Location and UserMark)\n             * IndependentMedia\n             * PlayListItem (depends on IndependentMedia)\n             * PlayListItemIndependentMediaMap (depends on IndependentMedia and PlayListItem)\n             * PlayListItemLocationMap (depends on Location and PlayListItem)\n             * Tag\n             * TagMap (depends on Tag, Location, PlaylistItem and Note)\n             * PlaylistItemMarker (depends on PlayListItem)\n             * PlaylistItemMarkerBibleVerseMap (depends on PlaylistItemMarker)\n             * PlaylistItemMarkerParagraphMap (depends on PlaylistItemMarker)\n             */\n\n            //merge Location\n            var t_Location = dbSource.TableList<Location>();\n", "            foreach (var item in t_Location)\n            {\n                try\n                {\n                    var location1 = dbMerged.GetFirst<Location>(item, new string[] { \"KeySymbol\", \"IssueTagNumber\", \"MepsLanguage\", \"BookNumber\", \"DocumentId\", \"Track\", \"Type\" });\n                    var location2 = dbMerged.GetFirst<Location>(item, new string[] { \"BookNumber\", \"ChapterNumber\", \"KeySymbol\", \"MepsLanguage\", \"Type\" }, false);\n                    var location3 = dbMerged.GetFirst<Location>(item, new string[] { \"KeySymbol\", \"IssueTagNumber\", \"MepsLanguage\", \"DocumentId\", \"Track\", \"Type\" });\n\n                    if (location1 == null && location2 == null && location3 == null)\n                    {\n                        //update with new id. necessary for new foreign keys\n                        item.NewLocationId = dbMerged.ItemInsert<Location>(item);\n                    }\n                    else\n                    {\n                        item.NewLocationId = (location1?.LocationId ?? location2?.LocationId ?? location3?.LocationId) ?? 0;\n                    }\n                }", "                    if (location1 == null && location2 == null && location3 == null)\n                    {\n                        //update with new id. necessary for new foreign keys\n                        item.NewLocationId = dbMerged.ItemInsert<Location>(item);\n                    }\n                    else\n                    {\n                        item.NewLocationId = (location1?.LocationId ?? location2?.LocationId ?? location3?.LocationId) ?? 0;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            //merge InputField\n            var t_InputField_old = dbSource.TableList<InputField>();\n            var t_InputField_new = t_InputField_old.Join(t_Location, i => i.LocationId, l => l.LocationId,\n                (i, l) =>\n                {\n                    i.LocationId = l.NewLocationId;\n                    return i;\n                });\n", "                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            //merge InputField\n            var t_InputField_old = dbSource.TableList<InputField>();\n            var t_InputField_new = t_InputField_old.Join(t_Location, i => i.LocationId, l => l.LocationId,\n                (i, l) =>\n                {\n                    i.LocationId = l.NewLocationId;\n                    return i;\n                });\n", "            foreach (var item in t_InputField_new)\n            {\n                dbMerged.ItemInsert<InputField>(item);\n            }\n\n            //merge BookMark\n            var t_Bookmark_old = dbSource.TableList<Bookmark>();\n            var t_Bookmark_new = t_Bookmark_old.Join(t_Location, b => b.LocationId, l => l.LocationId,\n                (b, l) =>\n                {\n                    b.LocationId = l.NewLocationId;\n                    return b;\n                });\n", "            foreach (var item in t_Bookmark_new)\n            {\n                dbMerged.ItemInsert<Bookmark>(item);\n            }\n\n            //merge Usermark\n            var t_UserMark_old = dbSource.TableList<UserMark>();\n            var t_UserMark_new = t_UserMark_old.Join(t_Location, u => u.LocationId, l => l.LocationId,\n                (b, l) =>\n                {\n                    b.LocationId = l.NewLocationId;\n                    return b;\n                });\n", "            foreach (var item in t_UserMark_new)\n            {\n                item.NewUserMarkId = dbMerged.ItemInsert<UserMark>(item);\n            }\n\n            //merge BlockRange\n            var t_BlockRange_old = dbSource.TableList<BlockRange>();\n            var t_BlockRange_new = t_BlockRange_old.Join(t_UserMark_new, b => b.UserMarkId, u => u.UserMarkId,\n                (b, u) =>\n                {\n                    b.UserMarkId = u.NewUserMarkId;\n                    return b;\n                });\n", "            foreach (var item in t_BlockRange_new)\n            {\n                dbMerged.ItemInsert<BlockRange>(item);\n            }\n\n            //merge Note\n            var t_Note_old = dbSource.TableList<Note>();\n            var t_Note_new = t_Note_old.Join(t_Location, n => n.LocationId, l => l.LocationId,\n                (n, l) =>\n                {\n                    n.LocationId = l.NewLocationId;\n                    return n;\n                })\n                .Join(t_UserMark_new, n => n.UserMarkId, u => u.UserMarkId,\n                (n, u) =>\n                {\n                    n.UserMarkId = u.NewUserMarkId;\n                    return n;\n                });\n", "            foreach (var item in t_Note_new)\n            {\n                item.NewNoteId = dbMerged.ItemInsert<Note>(item);\n            }\n\n            //merge IndependentMedia\n            var t_IndependentMedia = dbSource.TableList<IndependentMedia>();\n\n            foreach (var item in t_IndependentMedia)\n            {\n                item.NewIndependentMediaId = dbMerged.ItemInsert<IndependentMedia>(item);\n            }\n\n            //merge PlayListItem\n            var t_PlayListItem = dbSource.TableList<PlayListItem>();\n", "            foreach (var item in t_IndependentMedia)\n            {\n                item.NewIndependentMediaId = dbMerged.ItemInsert<IndependentMedia>(item);\n            }\n\n            //merge PlayListItem\n            var t_PlayListItem = dbSource.TableList<PlayListItem>();\n\n            foreach (var item in t_PlayListItem)\n            {\n                //update with new id. necessary for new foreign keys\n                item.NewPlaylistItemId = dbMerged.ItemInsert<PlayListItem>(item);\n            }\n\n            //merge PlayListItemIndependentMediaMap\n            var t_PlayListItemIndependentMediaMap_old = dbSource.TableList<PlaylistItemIndependentMediaMap>();\n            var t_PlayListItemIndependentMediaMap_new = t_PlayListItemIndependentMediaMap_old.Join(t_IndependentMedia, m => m.IndependentMediaId, i => i.IndependentMediaId,\n                (m, i) =>\n                {\n                    m.IndependentMediaId = i.NewIndependentMediaId;\n                    return m;\n                })\n                .Join(t_PlayListItem, m => m.PlaylistItemId, p => p.PlaylistItemId,\n                (m, p) =>\n                {\n                    m.PlaylistItemId = p.NewPlaylistItemId;\n                    return m;\n                });\n", "            foreach (var item in t_PlayListItem)\n            {\n                //update with new id. necessary for new foreign keys\n                item.NewPlaylistItemId = dbMerged.ItemInsert<PlayListItem>(item);\n            }\n\n            //merge PlayListItemIndependentMediaMap\n            var t_PlayListItemIndependentMediaMap_old = dbSource.TableList<PlaylistItemIndependentMediaMap>();\n            var t_PlayListItemIndependentMediaMap_new = t_PlayListItemIndependentMediaMap_old.Join(t_IndependentMedia, m => m.IndependentMediaId, i => i.IndependentMediaId,\n                (m, i) =>\n                {\n                    m.IndependentMediaId = i.NewIndependentMediaId;\n                    return m;\n                })\n                .Join(t_PlayListItem, m => m.PlaylistItemId, p => p.PlaylistItemId,\n                (m, p) =>\n                {\n                    m.PlaylistItemId = p.NewPlaylistItemId;\n                    return m;\n                });\n", "            foreach (var item in t_PlayListItemIndependentMediaMap_new)\n            {\n                dbMerged.ItemInsert<PlaylistItemIndependentMediaMap>(item);\n            }\n\n            //merge PlaylistItemLocationMap\n            var t_PlaylistItemLocationMap_old = dbSource.TableList<PlaylistItemLocationMap>();\n            var t_PlaylistItemLocationMap_new = t_PlaylistItemLocationMap_old.Join(t_Location, m => m.LocationId, l => l.LocationId,\n                (m, l) =>\n                {\n                    m.LocationId = l.NewLocationId;\n                    return m;\n                })\n                .Join(t_PlayListItem, m => m.PlaylistItemId, p => p.PlaylistItemId,\n                (m, p) =>\n                {\n                    m.PlaylistItemId = p.NewPlaylistItemId;\n                    return m;\n                });\n", "            foreach (var item in t_PlaylistItemLocationMap_new)\n            {\n                dbMerged.ItemInsert<PlaylistItemLocationMap>(item);\n            }\n\n            //merge Tag\n            var t_Tag = dbSource.TableList<Tag>();\n\n            foreach (var item in t_Tag)\n            {\n                try\n                {\n                    var tag1 = dbMerged.GetFirst<Tag>(item, new string[] { \"Type\", \"Name\" });\n", "            foreach (var item in t_Tag)\n            {\n                try\n                {\n                    var tag1 = dbMerged.GetFirst<Tag>(item, new string[] { \"Type\", \"Name\" });\n\n                    if (tag1 == null)\n                    {\n                        //update with new id. necessary for new foreign keys\n                        item.NewTagId = dbMerged.ItemInsert<Tag>(item);\n                    }\n                    else\n                    {\n                        item.NewTagId = tag1.TagId;\n                    }\n                }", "                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n            }\n\n            //merge TagMap\n            var t_TagMap_old = dbSource.TableList<TagMap>();\n            var t_TagMap_new = t_TagMap_old.Join(t_Tag, m => m.TagId, t => t.TagId,\n                (m, t) =>\n                {\n                    m.TagId = t.NewTagId;\n                    return m;\n                })\n                //.Join(t_Location, m => m.LocationId, l => l.LocationId,\n                //(m, l) =>\n                //{\n                //    m.LocationId = l.NewLocationId;\n                //    return m;\n                //})\n                //.Join(t_Note_new, m => m.NoteId, n => n.NoteId,\n                //(m, n) =>\n                //{\n                //    m.NoteId = n.NewNoteId;\n                //    return m;\n                //})\n                .Join(t_PlayListItem, m => m.PlaylistItemId, p => p.PlaylistItemId,\n                (m, p) =>\n                {\n                    m.PlaylistItemId = p.NewPlaylistItemId;\n                    return m;\n                });\n", "            foreach (var item in t_TagMap_new)\n            {\n                dbMerged.ItemInsert<TagMap>(item);\n            }\n\n            //merge PlaylistItemMarker\n            var t_PlaylistItemMarker_old = dbSource.TableList<PlaylistItemMarker>();\n            var t_PlaylistItemMarker_new = t_PlaylistItemMarker_old.Join(t_PlayListItem, m => m.PlaylistItemId, p => p.PlaylistItemId,\n                (m, p) =>\n                {\n                    m.PlaylistItemId = p.NewPlaylistItemId;\n                    return m;\n                });\n", "            foreach (var item in t_PlaylistItemMarker_new)\n            {\n                item.NewPlaylistItemMarkerId = dbMerged.ItemInsert<PlaylistItemMarker>(item);\n            }\n\n            //merge PlaylistItemMarkerBibleVerseMap\n            var t_PlaylistItemMarkerBibleVerseMap_old = dbSource.TableList<PlaylistItemMarkerBibleVerseMap>();\n            var t_PlaylistItemMarkerBibleVerseMap_new = t_PlaylistItemMarkerBibleVerseMap_old.Join(t_PlaylistItemMarker_new, b => b.PlaylistItemMarkerId, m => m.PlaylistItemMarkerId,\n                (b, m) =>\n                {\n                    b.PlaylistItemMarkerId = m.NewPlaylistItemMarkerId;\n                    return b;\n                });\n", "            foreach (var item in t_PlaylistItemMarkerBibleVerseMap_new)\n            {\n                dbMerged.ItemInsert<PlaylistItemMarkerBibleVerseMap>(item);\n            }\n\n            //merge PlaylistItemMarkerParagraphMap\n            var t_PlaylistItemMarkerParagraphMap_old = dbSource.TableList<PlaylistItemMarkerParagraphMap>();\n            var t_PlaylistItemMarkerParagraphMap_new = t_PlaylistItemMarkerParagraphMap_old.Join(t_PlaylistItemMarker_new, p => p.PlaylistItemMarkerId, m => m.PlaylistItemMarkerId,\n                (p, m) =>\n                {\n                    p.PlaylistItemMarkerId = m.NewPlaylistItemMarkerId;\n                    return p;\n                });\n", "            foreach (var item in t_PlaylistItemMarkerParagraphMap_new)\n            {\n                dbMerged.ItemInsert<PlaylistItemMarkerParagraphMap>(item);\n            }\n\n            /*\n             * sys tables?\n             * Tag\n             * PlaylistItemAccuracy\n             */\n        }\n", "        private string GenerateDatabaseHash(string dbFile)\n        {\n            SHA256 sha256 = SHA256.Create();\n\n\n            using var fs = new FileStream(dbFile, FileMode.Open);\n            using var bs = new BufferedStream(fs);\n\n            var hash = sha256.ComputeHash(bs);\n            return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n            //return string.Join(\"\", hash.Select(b => $\"{b:x2}\").ToArray());\n        }\n    }\n}"]}
{"filename": "JWLSLMerge/Program.cs", "chunked_list": ["namespace JWLSLMerge\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            // Obt\u00e9m todos os arquivos .jwlibrary na pasta do execut\u00e1vel\n            string[] jwlibraryFiles = null;\n\n            if (args.Length == 0)\n            {\n                jwlibraryFiles = Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory, \"*.jwlibrary\");\n            }\n            else\n            {\n                switch (args[0].ToLower().Trim())\n                {\n                    case \"-help\":\n                        ShowHelp();\n                        return;\n\n                    case \"-folder\":\n                    case \"-files\":\n                        jwlibraryFiles = GetFiles(args);\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n", "            if (args.Length == 0)\n            {\n                jwlibraryFiles = Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory, \"*.jwlibrary\");\n            }\n            else\n            {\n                switch (args[0].ToLower().Trim())\n                {\n                    case \"-help\":\n                        ShowHelp();\n                        return;\n\n                    case \"-folder\":\n                    case \"-files\":\n                        jwlibraryFiles = GetFiles(args);\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n", "            if (jwlibraryFiles == null || jwlibraryFiles.Length < 2)\n            {\n                Console.WriteLine(\"Please make sure there are at least two .jwlibrary files in the executable folder.\");\n                Console.WriteLine(\"Type -help for more information.\");\n                return;\n            }\n\n            MergeService mergeService = new MergeService();\n            mergeService.Message += MergeService_Message;\n            mergeService.Run(jwlibraryFiles);\n        }\n", "        private static string[] GetFiles(string[] args)\n        {\n            if (args.Length == 1)\n                Console.WriteLine(\"Invalid arguments. Type -help for more information.\");\n\n            if (args[0].ToLower().Equals(\"-folder\"))\n            {\n                return Directory.GetFiles(args[1], \"*.jwlibrary\");\n            }\n            else\n            {\n                return args\n                    .Skip(1)\n                    .Where(p => File.Exists(p) && Path.GetExtension(p.ToLower()) == \".jwlibrary\")\n                    .ToArray();\n            }\n        }\n", "        private static void ShowHelp()\n        {\n            //help\n            Console.WriteLine(\"To merge all the .jwlibrary files, just place them in this same directory and run the command: JWLSLMerge.exe\");\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"If you wish, you can define the location of the files through the -folder parameter followed by the directory where the files are located.\");\n            Console.WriteLine(\"Example: JWLSLMerge.exe -folder \\\"c:\\\\my backups\\\"\");\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"If you want to specify the files you want to merge, use the -files parameter followed by the full path of each file.\");\n            Console.WriteLine(\"Example: JWLSLMerge.exe -files \\\"c:\\\\my backups\\\\theme_003.jwlibrary\\\" \\\"c:\\\\my backups\\\\theme_157.jwlibrary\\\"\");\n        }\n", "        private static void MergeService_Message(object? sender, string e)\n        {\n            Console.WriteLine(e);\n        }\n    }\n}"]}
{"filename": "JWLSLMerge/Environment.cs", "chunked_list": ["\ufeffnamespace JWLSLMerge\n{\n    public class Environment\n    {\n        public static String ApplicationPath\n        {\n            get\n            {\n                return AppDomain.CurrentDomain.BaseDirectory;\n            }\n        }\n", "        public static string GetDbFile()\n        {\n            string dboriginal = Path.Combine(Environment.ApplicationPath, \"DB\", \"userData.db\");\n            string dbcopy = Path.Combine(GetTargetDirectory(false), Path.GetFileName(dboriginal));\n\n            if (File.Exists(dboriginal))\n            {\n                File.Copy(dboriginal, dbcopy, true);\n            }\n\n            return dbcopy;\n        }\n", "        public static string GetTempDirectory(bool recreate = true)\n        {\n            return GetDirectory(\"temp\", recreate);\n        }\n\n        public static string GetTargetDirectory(bool recreate = true)\n        {\n            return GetDirectory(\"target\", recreate);\n        }\n\n        public static string GetMergedDirectory()\n        {\n            return GetDirectory(\"merged\", true);\n        }\n", "        public static string GetMergedDirectory()\n        {\n            return GetDirectory(\"merged\", true);\n        }\n\n        public static string GetDirectory(string folderName, bool recreate = true)\n        {\n            string tempdir = Path.Combine(Environment.ApplicationPath, folderName);\n\n            if (recreate)\n            {", "            if (recreate)\n            {\n                if (Directory.Exists(tempdir))\n                {\n                    Directory.Delete(tempdir, true);\n                }\n\n                Directory.CreateDirectory(tempdir);\n            }\n\n            return tempdir;\n        }\n    }\n}\n"]}
