{"filename": "QuizGenerator.Core/ILogger.cs", "chunked_list": ["\ufeffnamespace QuizGenerator.Core\n{\n\tpublic interface ILogger\n\t{\n\t\tvoid Log(string msg, int indentTabs = 0);\n\t\tvoid LogError(string errMsg, string errTitle = \"Error\", int indentTabs = 0);\n\t\tvoid LogException(Exception ex);\n\t\tvoid LogNewLine();\t\t\n\t}\n}\n"]}
{"filename": "QuizGenerator.Core/QuestionAnswer.cs", "chunked_list": ["\ufeffusing Word = Microsoft.Office.Interop.Word;\n\nnamespace QuizGenerator.Core\n{\n\tclass QuestionAnswer\n\t{\n\t\tpublic Word.Range Content { get; set; }\n        public bool IsCorrect { get; set; }\n    }\n}\n"]}
{"filename": "QuizGenerator.Core/QuizQuestion.cs", "chunked_list": ["\ufeffusing Word = Microsoft.Office.Interop.Word;\n\nnamespace QuizGenerator.Core\n{\n\tclass QuizQuestion\n\t{\n\t\tpublic Word.Range HeaderContent { get; set; }\n\n\t\tpublic List<QuestionAnswer> Answers { get; set; }\n\n\t\tpublic IEnumerable<QuestionAnswer> CorrectAnswers =>\n\t\t\tthis.Answers.Where(a => a.IsCorrect);\n\n\t\tpublic IEnumerable<QuestionAnswer> WrongAnswers =>\n\t\t\tthis.Answers.Where(a => !a.IsCorrect);\n\n\t\tpublic Word.Range FooterContent { get; set; }\n\t}\n}"]}
{"filename": "QuizGenerator.Core/RandomizedQuiz.cs", "chunked_list": ["\ufeffusing Word = Microsoft.Office.Interop.Word;\n\nnamespace QuizGenerator.Core\n{\n\tclass RandomizedQuiz\n\t{\n\t\tpublic Word.Range HeaderContent { get; set; }\n\n\t\tpublic List<QuizQuestionGroup> QuestionGroups { get; set; }\n\n\t\tpublic Word.Range FooterContent { get; set; }\n\n\t\tpublic IEnumerable<QuizQuestion> AllQuestions\n\t\t\t=> QuestionGroups.SelectMany(g => g.Questions);\n", "\t\tpublic static RandomizedQuiz GenerateFromQuizData(QuizDocument quizData)\n\t\t{\n\t\t\t// Clone the quiz header, question groups and footer\n\t\t\tRandomizedQuiz randQuiz = new RandomizedQuiz();\n\t\t\trandQuiz.HeaderContent = quizData.HeaderContent;\n\t\t\trandQuiz.FooterContent = quizData.FooterContent;\n\t\t\trandQuiz.QuestionGroups = new List<QuizQuestionGroup>();\n\n\t\t\tint questionGroupIndex = 1;\n\t\t\tforeach (var questionGroupData in quizData.QuestionGroups)\n\t\t\t{\n\t\t\t\t// Copy question groups from quiz data to randQuiz\n\t\t\t\tquestionGroupIndex++;\n\t\t\t\tvar randQuestionGroup = new QuizQuestionGroup();\n\t\t\t\trandQuiz.QuestionGroups.Add(randQuestionGroup);\n\t\t\t\trandQuestionGroup.HeaderContent = questionGroupData.HeaderContent;\n\t\t\t\trandQuestionGroup.SkipHeader = questionGroupData.SkipHeader;\n\t\t\t\trandQuestionGroup.Questions = new List<QuizQuestion>();\n\n\t\t\t\t// Check if QuestionsToGenerate is valid number", "\t\t\tforeach (var questionGroupData in quizData.QuestionGroups)\n\t\t\t{\n\t\t\t\t// Copy question groups from quiz data to randQuiz\n\t\t\t\tquestionGroupIndex++;\n\t\t\t\tvar randQuestionGroup = new QuizQuestionGroup();\n\t\t\t\trandQuiz.QuestionGroups.Add(randQuestionGroup);\n\t\t\t\trandQuestionGroup.HeaderContent = questionGroupData.HeaderContent;\n\t\t\t\trandQuestionGroup.SkipHeader = questionGroupData.SkipHeader;\n\t\t\t\trandQuestionGroup.Questions = new List<QuizQuestion>();\n\n\t\t\t\t// Check if QuestionsToGenerate is valid number", "\t\t\t\tif (questionGroupData.QuestionsToGenerate > questionGroupData.Questions.Count)\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"QuestionsToGenerate > questions in group \" +\n\t\t\t\t\t\t$\"#{questionGroupIndex}` - {questionGroupData.HeaderContent?.Text}`\");\n\t\t\t\t}\n\n\t\t\t\t// Generate a randomized subset of questions from the current group\n\t\t\t\tList<int> randomQuestionIndexes = \n\t\t\t\t\tEnumerable.Range(0, questionGroupData.Questions.Count).ToList();\n\t\t\t\trandomQuestionIndexes = RandomizeList(randomQuestionIndexes);\n\t\t\t\trandomQuestionIndexes = randomQuestionIndexes.Take(\n\t\t\t\t\tquestionGroupData.QuestionsToGenerate).ToList();", "\t\t\t\tforeach (int randQuestionIndex in randomQuestionIndexes)\n\t\t\t\t{\n\t\t\t\t\tvar questionData = questionGroupData.Questions[randQuestionIndex];\n\t\t\t\t\tQuizQuestion randQuestion = new QuizQuestion();\n\t\t\t\t\trandQuestionGroup.Questions.Add(randQuestion);\n\t\t\t\t\trandQuestion.HeaderContent = questionData.HeaderContent;\n\t\t\t\t\trandQuestion.FooterContent = questionData.FooterContent;\n\n\t\t\t\t\t// Generate a randomized subset of answers (1 correct + several wrong)\n\t\t\t\t\tvar correctAnswers = RandomizeList(questionData.CorrectAnswers);\n\t\t\t\t\tvar wrongAnswers = RandomizeList(questionData.WrongAnswers);\n\n\t\t\t\t\t// Check if CorrectAnswers is valid number", "\t\t\t\t\tif (correctAnswers.Count == 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new Exception($\"Question `{randQuestion.HeaderContent.Text}` --> \" +\n\t\t\t\t\t\t\t$\"at least 1 correct answer is required!\");\n\t\t\t\t\t}\n\n\t\t\t\t\t// Check if WrongAnswers is valid number\n\t\t\t\t\tif (wrongAnswers.Count() == 0 ||\n\t\t\t\t\t\twrongAnswers.Count() + 1 < questionGroupData.AnswersPerQuestion)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new Exception($\"Question `{randQuestion.HeaderContent.Text}` --> \" +\n\t\t\t\t\t\t\t$\"wrong answers are less than required!\");\n\t\t\t\t\t}\n\n\t\t\t\t\tList<QuestionAnswer> randAnswers =\n\t\t\t\t\t\twrongAnswers.Take(questionGroupData.AnswersPerQuestion - 1)\n\t\t\t\t\t\t.Append(correctAnswers.First())\n\t\t\t\t\t\t.ToList();\n\t\t\t\t\trandQuestion.Answers = RandomizeList(randAnswers);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn randQuiz;\n\t\t}\n", "\t\tprivate static List<T> RandomizeList<T>(IEnumerable<T> inputList)\n\t\t{\n\t\t\t// Randomize the list using Fisher-Yates shuffle algorithm\n\t\t\tList<T> list = new List<T>(inputList);\n\t\t\tRandom rand = new Random();\n\t\t\tint lastIndex = list.Count;\n\t\t\twhile (lastIndex > 1)\n\t\t\t{\n\t\t\t\tlastIndex--;\n\t\t\t\tint randIndex = rand.Next(lastIndex + 1);\n\t\t\t\tT value = list[randIndex];\n\t\t\t\tlist[randIndex] = list[lastIndex];\n\t\t\t\tlist[lastIndex] = value;\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\t}\n}\n"]}
{"filename": "QuizGenerator.Core/QuizParser.cs", "chunked_list": ["\ufeffusing static QuizGenerator.Core.StringUtils;\nusing Word = Microsoft.Office.Interop.Word;\nusing Newtonsoft.Json;\n\nnamespace QuizGenerator.Core\n{\n\tclass QuizParser\n\t{\n\t\tprivate const string QuizStartTag = \"~~~ Quiz:\";\n\t\tprivate const string QuizEndTag = \"~~~ Quiz End ~~~\";\n\t\tprivate const string QuestionGroupTag = \"~~~ Question Group:\";", "\t\tprivate const string QuizStartTag = \"~~~ Quiz:\";\n\t\tprivate const string QuizEndTag = \"~~~ Quiz End ~~~\";\n\t\tprivate const string QuestionGroupTag = \"~~~ Question Group:\";\n\t\tprivate const string QuestionTag = \"~~~ Question ~~~\";\n\t\tprivate const string CorrectAnswerTag = \"Correct.\";\n\t\tprivate const string WrongAnswerTag = \"Wrong.\";\n\n\t\tprivate ILogger logger;\n\n\t\tpublic QuizParser(ILogger logger)\n\t\t{ \n\t\t\tthis.logger = logger;\n\t\t}\n", "\t\tpublic QuizDocument Parse(Word.Document doc)\n\t\t{\n\t\t\tvar quiz = new QuizDocument();\n\t\t\tquiz.QuestionGroups = new List<QuizQuestionGroup>();\n\t\t\tQuizQuestionGroup? group = null;\n\t\t\tQuizQuestion? question = null;\n\t\t\tint quizHeaderStartPos = 0;\n\t\t\tint groupHeaderStartPos = 0;\n\t\t\tint questionHeaderStartPos = 0;\n\t\t\tint questionFooterStartPos = 0;\n\t\t\tWord.Paragraph paragraph;\n", "\t\t\tfor (int paragraphIndex = 1; paragraphIndex <= doc.Paragraphs.Count; paragraphIndex++)\n\t\t\t{\n\t\t\t\tparagraph = doc.Paragraphs[paragraphIndex];\n\t\t\t\tvar text = paragraph.Range.Text.Trim();\n\n\t\t\t\tif (text.StartsWith(QuizStartTag))\n\t\t\t\t{\n\t\t\t\t\t// ~~~ Quiz: {\"VariantsToGenerate\":5, \"AnswersPerQuestion\":4, \"Lang\":\"BG\"} ~~~\n\t\t\t\t\tthis.logger.Log(\"Parsing: \" + text, 1);\n\t\t\t\t\tvar settings = ParseSettings(text, QuizStartTag);\n\t\t\t\t\tquiz.VariantsToGenerate = settings.VariantsToGenerate;\n\t\t\t\t\tquiz.AnswersPerQuestion = settings.AnswersPerQuestion;\n\t\t\t\t\tquiz.LangCode = settings.Lang;\n\t\t\t\t\tquizHeaderStartPos = paragraph.Range.End;\n\t\t\t\t}", "\t\t\t\telse if (text.StartsWith(QuestionGroupTag))\n\t\t\t\t{\n\t\t\t\t\t// ~~~ Question Group: { \"QuestionsToGenerate\": 1, \"SkipHeader\": true } ~~~\n\t\t\t\t\tthis.logger.Log(\"Parsing: \" + text, 1);\n\t\t\t\t\tSaveQuizHeader();\n\t\t\t\t\tSaveGroupHeader();\n\t\t\t\t\tSaveQuestionFooter();\n\t\t\t\t\tgroup = new QuizQuestionGroup();\n\t\t\t\t\tgroup.Questions = new List<QuizQuestion>();\n\t\t\t\t\tvar settings = ParseSettings(text, QuestionGroupTag);\n\t\t\t\t\tgroup.QuestionsToGenerate = settings.QuestionsToGenerate;\n\t\t\t\t\tgroup.SkipHeader = settings.SkipHeader;\n\t\t\t\t\tgroup.AnswersPerQuestion = settings.AnswersPerQuestion;", "\t\t\t\t\tif (group.AnswersPerQuestion == 0)\n\t\t\t\t\t\tgroup.AnswersPerQuestion = quiz.AnswersPerQuestion;\n\t\t\t\t\tquiz.QuestionGroups.Add(group);\n\t\t\t\t\tgroupHeaderStartPos = paragraph.Range.End;\n\t\t\t\t}\n\t\t\t\telse if (text.StartsWith(QuestionTag))\n\t\t\t\t{\n\t\t\t\t\t// ~~~ Question ~~~\n\t\t\t\t\tthis.logger.Log(\"Parsing: \" + text, 1);\n\t\t\t\t\tSaveGroupHeader();\n\t\t\t\t\tSaveQuestionFooter();\n\t\t\t\t\tquestion = new QuizQuestion();\n\t\t\t\t\tquestion.Answers = new List<QuestionAnswer>();\n\t\t\t\t\tgroup.Questions.Add(question);\n\t\t\t\t\tquestionHeaderStartPos = paragraph.Range.End;\n\t\t\t\t}", "\t\t\t\telse if (text.StartsWith(CorrectAnswerTag) || text.StartsWith(WrongAnswerTag))\n\t\t\t\t{\n\t\t\t\t\t// Wrong. Some wrong answer\n\t\t\t\t\t// Correct. Some correct answer\n\t\t\t\t\tSaveQuestionHeader();\n\t\t\t\t\tint answerStartRange;\n\t\t\t\t\tif (text.StartsWith(CorrectAnswerTag))\n\t\t\t\t\t\tanswerStartRange = CorrectAnswerTag.Length;\n\t\t\t\t\telse\n\t\t\t\t\t\tanswerStartRange = WrongAnswerTag.Length;\n\t\t\t\t\tif (text.Length > answerStartRange && text[answerStartRange] == ' ')\n\t\t\t\t\t\tanswerStartRange++;\n\t\t\t\t\tquestion.Answers.Add(new QuestionAnswer\n\t\t\t\t\t{\n\t\t\t\t\t\tContent = doc.Range(\n\t\t\t\t\t\t\tparagraph.Range.Start + answerStartRange, \n\t\t\t\t\t\t\tparagraph.Range.End),\n\t\t\t\t\t\tIsCorrect = text.StartsWith(CorrectAnswerTag)\n\t\t\t\t\t});\n\t\t\t\t\tquestionFooterStartPos = paragraph.Range.End;\n\t\t\t\t}", "\t\t\t\t\tif (text.Length > answerStartRange && text[answerStartRange] == ' ')\n\t\t\t\t\t\tanswerStartRange++;\n\t\t\t\t\tquestion.Answers.Add(new QuestionAnswer\n\t\t\t\t\t{\n\t\t\t\t\t\tContent = doc.Range(\n\t\t\t\t\t\t\tparagraph.Range.Start + answerStartRange, \n\t\t\t\t\t\t\tparagraph.Range.End),\n\t\t\t\t\t\tIsCorrect = text.StartsWith(CorrectAnswerTag)\n\t\t\t\t\t});\n\t\t\t\t\tquestionFooterStartPos = paragraph.Range.End;\n\t\t\t\t}", "\t\t\t\telse if (text.StartsWith(QuizEndTag))\n\t\t\t\t{\n\t\t\t\t\tSaveGroupHeader();\n\t\t\t\t\tSaveQuestionFooter();\n\n\t\t\t\t\t// Take all following paragraphs to the end of the document\n\t\t\t\t\tvar start = paragraph.Range.End;\n\t\t\t\t\tvar end = doc.Content.End;\n\t\t\t\t\tquiz.FooterContent = doc.Range(start, end);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn quiz;\n\n\t\t\tvoid SaveQuizHeader()\n\t\t\t{", "\t\t\t\tif (quiz != null && \n\t\t\t\t\tquiz.HeaderContent == null && \n\t\t\t\t\tquizHeaderStartPos != 0)\n\t\t\t\t{\n\t\t\t\t\tquiz.HeaderContent =\n\t\t\t\t\t\tdoc.Range(quizHeaderStartPos, paragraph.Range.Start);\n\t\t\t\t}\n\t\t\t\tquizHeaderStartPos = 0;\n\t\t\t}\n\n\t\t\tvoid SaveGroupHeader()\n\t\t\t{", "\t\t\t\tif (group != null && \n\t\t\t\t\tgroup.HeaderContent == null &&\n\t\t\t\t\tgroupHeaderStartPos != 0)\n\t\t\t\t{\n\t\t\t\t\tgroup.HeaderContent =\n\t\t\t\t\t\tdoc.Range(groupHeaderStartPos, paragraph.Range.Start);\n\t\t\t\t}\n\t\t\t\tgroupHeaderStartPos = 0;\n\t\t\t}\n\n\t\t\tvoid SaveQuestionHeader()\n\t\t\t{", "\t\t\t\tif (question != null && \n\t\t\t\t\tquestion.HeaderContent == null &&\n\t\t\t\t\tquestionHeaderStartPos != 0)\n\t\t\t\t{\n\t\t\t\t\tquestion.HeaderContent =\n\t\t\t\t\t\tdoc.Range(questionHeaderStartPos, paragraph.Range.Start);\n\t\t\t\t}\n\t\t\t\tquestionHeaderStartPos = 0;\n\t\t\t}\n\n\t\t\tvoid SaveQuestionFooter()\n\t\t\t{", "\t\t\t\tif (question != null && \n\t\t\t\t\tquestion.FooterContent == null &&\n\t\t\t\t\tquestionFooterStartPos != 0 &&\n\t\t\t\t\tquestionFooterStartPos < paragraph.Range.Start)\n\t\t\t\t{\n\t\t\t\t\tquestion.FooterContent =\n\t\t\t\t\t\tdoc.Range(questionFooterStartPos, paragraph.Range.Start);\n\t\t\t\t}\n\t\t\t\tquestionFooterStartPos = 0;\n\t\t\t}\n\t\t}\n", "\t\tprivate static QuizSettings ParseSettings(string text, string tag)\n\t\t{\n\t\t\tvar json = text.Substring(tag.Length).Trim();\n\t\t\tjson = json.Replace(\"~~~\", \"\").Trim();\n\t\t\tif (string.IsNullOrEmpty(json))\n\t\t\t\tjson = \"{}\";\n\t\t\tQuizSettings settings = JsonConvert.DeserializeObject<QuizSettings>(json);\n\t\t\treturn settings;\n\t\t}\n\n\t\tpublic void LogQuiz(QuizDocument quiz)\n\t\t{\n\t\t\tthis.logger.LogNewLine();\n\t\t\tthis.logger.Log($\"Parsed quiz document (from the input MS Word file):\");\n\t\t\tthis.logger.Log($\" - LangCode: {quiz.LangCode}\");\n\t\t\tthis.logger.Log($\" - VariantsToGenerate: {quiz.VariantsToGenerate}\");\n\t\t\tthis.logger.Log($\" - TotalAvailableQuestions: {quiz.TotalAvailableQuestions}\");\n\t\t\tthis.logger.Log($\" - AnswersPerQuestion: {quiz.AnswersPerQuestion}\");\n\t\t\tstring quizHeaderText = TruncateString(quiz.HeaderContent.Text);\n\t\t\tthis.logger.Log($\"Quiz header: {quizHeaderText}\", 1);\n\t\t\tthis.logger.Log($\"Question groups = {quiz.QuestionGroups.Count}\", 1);", "\t\tpublic void LogQuiz(QuizDocument quiz)\n\t\t{\n\t\t\tthis.logger.LogNewLine();\n\t\t\tthis.logger.Log($\"Parsed quiz document (from the input MS Word file):\");\n\t\t\tthis.logger.Log($\" - LangCode: {quiz.LangCode}\");\n\t\t\tthis.logger.Log($\" - VariantsToGenerate: {quiz.VariantsToGenerate}\");\n\t\t\tthis.logger.Log($\" - TotalAvailableQuestions: {quiz.TotalAvailableQuestions}\");\n\t\t\tthis.logger.Log($\" - AnswersPerQuestion: {quiz.AnswersPerQuestion}\");\n\t\t\tstring quizHeaderText = TruncateString(quiz.HeaderContent.Text);\n\t\t\tthis.logger.Log($\"Quiz header: {quizHeaderText}\", 1);\n\t\t\tthis.logger.Log($\"Question groups = {quiz.QuestionGroups.Count}\", 1);", "\t\t\tfor (int groupIndex = 0; groupIndex < quiz.QuestionGroups.Count; groupIndex++)\n\t\t\t{\n\t\t\t\tthis.logger.Log($\"[Question Group #{groupIndex+1}]\", 1);\n\t\t\t\tQuizQuestionGroup group = quiz.QuestionGroups[groupIndex];\n\t\t\t\tstring groupHeaderText = TruncateString(group.HeaderContent?.Text);\n\t\t\t\tthis.logger.Log($\"Group header: {groupHeaderText}\", 2);\n\t\t\t\tthis.logger.Log($\"Questions = {group.Questions.Count}\", 2);\n\t\t\t\tfor (int questionIndex = 0; questionIndex < group.Questions.Count; questionIndex++)\n\t\t\t\t{\n\t\t\t\t\tthis.logger.Log($\"[Question #{questionIndex+1}]\", 2);\n\t\t\t\t\tQuizQuestion question = group.Questions[questionIndex];\n\t\t\t\t\tstring questionContent = TruncateString(question.HeaderContent?.Text);\n\t\t\t\t\tthis.logger.Log($\"Question content: {questionContent}\", 3);\n\t\t\t\t\tthis.logger.Log($\"Answers = {question.Answers.Count}\", 3);", "\t\t\t\t\tforeach (var answer in question.Answers)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring prefix = answer.IsCorrect ? \"Correct answer\" : \"Wrong answer\";\n\t\t\t\t\t\tstring answerText = TruncateString(answer.Content.Text);\n\t\t\t\t\t\tthis.logger.Log($\"{prefix}: {answerText}\", 4);\n\t\t\t\t\t}\n\t\t\t\t\tstring questionFooterText = TruncateString(question.FooterContent?.Text);\n\t\t\t\t\tif (questionFooterText == \"\")\n\t\t\t\t\t\tquestionFooterText = \"(empty)\";\n\t\t\t\t\tthis.logger.Log($\"Question footer: {questionFooterText}\", 3);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstring quizFooterText = TruncateString(quiz.FooterContent?.Text);\n\t\t\tthis.logger.Log($\"Quiz footer: {quizFooterText}\", 1);\n\t\t}\n\t}\n}\n"]}
{"filename": "QuizGenerator.Core/QuizDocument.cs", "chunked_list": ["\ufeffusing Word = Microsoft.Office.Interop.Word;\n\nnamespace QuizGenerator.Core\n{\n\tclass QuizDocument\n\t{\n\t\tpublic int VariantsToGenerate { get; set; }\n\n\t\tpublic string LangCode { get; set; } = \"EN\";\n\n        public int AnswersPerQuestion { get; set; }\n", "\t\tpublic string LangCode { get; set; } = \"EN\";\n\n        public int AnswersPerQuestion { get; set; }\n\n\t\tpublic int TotalAvailableQuestions\n\t\t\t=> QuestionGroups.Sum(g => g.Questions.Count);\n\n\t\tpublic int TotalQuestionsToGenerate\n\t\t\t=> QuestionGroups.Sum(g => g.QuestionsToGenerate);\n\n\t\tpublic Word.Range HeaderContent { get; set; }\n\n        public List<QuizQuestionGroup> QuestionGroups { get; set; }\n\n        public Word.Range FooterContent { get; set; }\n    }\n}\n"]}
{"filename": "QuizGenerator.Core/StringUtils.cs", "chunked_list": ["\ufeffnamespace QuizGenerator.Core\n{\n\tpublic static class StringUtils\n\t{\n\t\tpublic static string TruncateString(string? input, int maxLength = 150)\n\t\t{\n\t\t\tif (input == null)\n\t\t\t\tinput = string.Empty;\n\t\t\tinput = input.Replace(\"\\r\", \" \").Trim();\n\t\t\tif (input.Length <= maxLength)\n\t\t\t{\n\t\t\t\treturn input;\n\t\t\t}", "\t\t\tif (input.Length <= maxLength)\n\t\t\t{\n\t\t\t\treturn input;\n\t\t\t}\n\t\t\telse if (maxLength <= 3)\n\t\t\t{\n\t\t\t\treturn input.Substring(0, maxLength);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint midLength = maxLength - 3;\n\t\t\t\tint halfLength = midLength / 2;\n\t\t\t\tstring start = input.Substring(0, halfLength);\n\t\t\t\tstring end = input.Substring(input.Length - halfLength);\n\t\t\t\treturn $\"{start}...{end}\";\n\t\t\t}\n\t\t}\n\t}\n}\n"]}
{"filename": "QuizGenerator.Core/QuizQuestionGroup.cs", "chunked_list": ["\ufeffusing Word = Microsoft.Office.Interop.Word;\n\nnamespace QuizGenerator.Core\n{\n\tclass QuizQuestionGroup\n\t{\n\t\tpublic int QuestionsToGenerate { get; set; }\n\t\tpublic int AnswersPerQuestion { get; set; }\n\t\tpublic bool SkipHeader { get; set; }\n\t\tpublic Word.Range HeaderContent { get; set; }\n\t\tpublic List<QuizQuestion> Questions { get; set; }\n\t}\n}", "\t\tpublic bool SkipHeader { get; set; }\n\t\tpublic Word.Range HeaderContent { get; set; }\n\t\tpublic List<QuizQuestion> Questions { get; set; }\n\t}\n}"]}
{"filename": "QuizGenerator.Core/QuizGenerator.cs", "chunked_list": ["\ufeffusing static QuizGenerator.Core.StringUtils;\nusing Word = Microsoft.Office.Interop.Word;\nusing System.Diagnostics;\nusing Microsoft.Office.Interop.Word;\n\nnamespace QuizGenerator.Core\n{\n\tpublic class RandomizedQuizGenerator\n\t{\n\t\tprivate ILogger logger;\n\t\tprivate Word.Application wordApp;\n\n\t\tpublic RandomizedQuizGenerator(ILogger logger)\n\t\t{\n\t\t\tthis.logger = logger;\n\t\t}\n", "\t\tprivate ILogger logger;\n\t\tprivate Word.Application wordApp;\n\n\t\tpublic RandomizedQuizGenerator(ILogger logger)\n\t\t{\n\t\t\tthis.logger = logger;\n\t\t}\n\n\t\tpublic void GenerateQuiz(string inputFilePath, string outputFolderPath)\n\t\t{\n\t\t\tthis.logger.Log(\"Quiz generation started.\");\n\t\t\tthis.logger.LogNewLine();\n", "\t\tpublic void GenerateQuiz(string inputFilePath, string outputFolderPath)\n\t\t{\n\t\t\tthis.logger.Log(\"Quiz generation started.\");\n\t\t\tthis.logger.LogNewLine();\n\n\t\t\tif (KillAllProcesses(\"WINWORD\"))\n\t\t\t\tConsole.WriteLine(\"MS Word (WINWORD.EXE) is still running -> process terminated.\");\n\n\t\t\t// Start MS Word and open the input file\n\t\t\tthis.wordApp = new Word.Application();\n\t\t\tthis.wordApp.Visible = false; // Show / hide MS Word app window\n\t\t\tthis.wordApp.ScreenUpdating = false; // Enable / disable screen updates after each change\n\t\t\tvar inputDoc = this.wordApp.Documents.Open(inputFilePath);\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Parse the input MS Word document\n\t\t\t\tthis.logger.Log(\"Parsing the input document: \" + inputFilePath);\n\t\t\t\tQuizParser quizParser = new QuizParser(this.logger);\n\t\t\t\tQuizDocument quiz = quizParser.Parse(inputDoc);\n\t\t\t\tthis.logger.Log(\"Input document parsed successfully.\");\n\n\t\t\t\t// Display the quiz content (question groups + questions + answers)\n\t\t\t\tquizParser.LogQuiz(quiz);\n\n\t\t\t\t// Generate the randomized quiz variants\n\t\t\t\tthis.logger.LogNewLine();\n\t\t\t\tthis.logger.Log(\"Generating quizes...\");\n\t\t\t\tthis.logger.Log($\"  (output path = {outputFolderPath})\");\n\t\t\t\tGenerateRandomizedQuizVariants(quiz, inputFilePath, outputFolderPath);\n\t\t\t\t\n\t\t\t\tthis.logger.LogNewLine();\n\t\t\t\tthis.logger.Log(\"Quiz generation completed.\");\n\t\t\t\tthis.logger.LogNewLine();\n\t\t\t}", "\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tthis.logger.LogException(ex);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tinputDoc.Close();\n\t\t\t\tthis.wordApp.Quit();\n\t\t\t}\n\t\t}\n", "\t\tprivate void GenerateRandomizedQuizVariants(\n\t\t\tQuizDocument quiz, string inputFilePath, string outputFolderPath)\n\t\t{\n\t\t\t// Initialize the output folder (create it and ensure it is empty)\n\t\t\tthis.logger.Log($\"Initializing output folder: {outputFolderPath}\");\n\t\t\tif (Directory.Exists(outputFolderPath))\n\t\t\t{\n\t\t\t\tDirectory.Delete(outputFolderPath, true);\n\t\t\t}\n\t\t\tDirectory.CreateDirectory(outputFolderPath);\n\n\t\t\t// Prepare the answer sheet for all variants\n\t\t\tList<List<char>> quizAnswerSheet = new List<List<char>>();\t\n\n\t\t\t// Generate the requested randomized quiz variants, one by one", "\t\t\tfor (int quizVariant = 1; quizVariant <= quiz.VariantsToGenerate; quizVariant++)\n\t\t\t{\n\t\t\t\tthis.logger.LogNewLine();\n\t\t\t\tthis.logger.Log($\"Generating randomized quiz: variant #{quizVariant} out of {quiz.VariantsToGenerate} ...\");\n\t\t\t\tstring outputFilePath = outputFolderPath + Path.DirectorySeparatorChar +\n\t\t\t\t\t\"quiz\" + quizVariant.ToString(\"000\") + \".docx\";\n\t\t\t\tRandomizedQuiz randQuiz = RandomizedQuiz.GenerateFromQuizData(quiz);\n\t\t\t\tWriteRandomizedQuizToFile(\n\t\t\t\t\trandQuiz, quizVariant, inputFilePath, outputFilePath, quiz.LangCode);\n\t\t\t\tList<char> answers = ExtractAnswersAsLetters(randQuiz, quiz.LangCode);\n\t\t\t\tquizAnswerSheet.Add(answers);\n\t\t\t\tthis.logger.Log($\"Randomized quiz: variant #{quizVariant} out of {quiz.VariantsToGenerate} generated successfully.\");\n\t\t\t}\n\n\t\t\tWriteAnswerSheetToHTMLFile(quizAnswerSheet, outputFolderPath);\n\t\t}\n", "\t\tprivate void WriteRandomizedQuizToFile(RandomizedQuiz randQuiz, \n\t\t\tint quizVariant, string inputFilePath, string outputFilePath, string langCode)\n\t\t{\n\t\t\tFile.Copy(inputFilePath, outputFilePath, true);\n\n\t\t\t// Open the output file in MS Word\n\t\t\tvar outputDoc = this.wordApp.Documents.Open(outputFilePath);\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Select all content in outputDoc and delete the seletion\n\t\t\t\tthis.wordApp.Selection.WholeStory();\n\t\t\t\tthis.wordApp.Selection.Delete();\n\n\t\t\t\t// Write the randomized quiz as MS Word document\n\t\t\t\tthis.logger.Log($\"Creating randomized quiz document: \" + outputFilePath);\n\t\t\t\tWriteRandomizedQuizToWordDoc(randQuiz, quizVariant, langCode, outputDoc);\n\t\t\t}", "\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tthis.logger.LogException(ex);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\toutputDoc.Save();\n\t\t\t\toutputDoc.Close();\n\t\t\t}\n\t\t}\n", "\t\tprivate void WriteRandomizedQuizToWordDoc(RandomizedQuiz quiz, int quizVariant,\n\t\t\tstring langCode, Word.Document outputDoc)\n\t\t{\n\t\t\t// Print the quiz header in the output MS Word document\n\t\t\tstring quizHeaderText = TruncateString(quiz.HeaderContent.Text);\n\t\t\tthis.logger.Log($\"Quiz header: {quizHeaderText}\", 1);\n\t\t\tAppendRange(outputDoc, quiz.HeaderContent);\n\n\t\t\t// Replace all occurences of \"# # #\" with the variant number (page headers + body)\n\t\t\tstring variantFormatted = quizVariant.ToString(\"000\");\n\t\t\tforeach (Word.Section section in outputDoc.Sections)\n\t\t\t{", "\t\t\tforeach (Word.Section section in outputDoc.Sections)\n\t\t\t{\n\t\t\t\tforeach (Word.HeaderFooter headerFooter in section.Headers)\n\t\t\t\t{\n\t\t\t\t\tReplaceTextInRange(headerFooter.Range, \"# # #\", variantFormatted);\n\t\t\t\t}\n\t\t\t}\n\t\t\tReplaceTextInRange(outputDoc.Content, \"# # #\", variantFormatted);\n\n\t\t\tint questionNumber = 0;\n\t\t\tthis.logger.Log($\"Question groups = {quiz.QuestionGroups.Count}\", 1);", "\t\t\tfor (int groupIndex = 0; groupIndex < quiz.QuestionGroups.Count; groupIndex++)\n\t\t\t{\n\t\t\t\tthis.logger.Log($\"[Question Group #{groupIndex + 1}]\", 1);\n\t\t\t\tQuizQuestionGroup group = quiz.QuestionGroups[groupIndex];\n\t\t\t\tstring groupHeaderText = TruncateString(group.HeaderContent?.Text);\n\t\t\t\tthis.logger.Log($\"Group header: {groupHeaderText}\", 2);\n\t\t\t\tif (!group.SkipHeader)\n\t\t\t\t{\n\t\t\t\t\tAppendRange(outputDoc, group.HeaderContent);\n\t\t\t\t}\n\t\t\t\tthis.logger.Log($\"Questions = {group.Questions.Count}\", 2);", "\t\t\t\tfor (int questionIndex = 0; questionIndex < group.Questions.Count; questionIndex++)\n\t\t\t\t{\n\t\t\t\t\tthis.logger.Log($\"[Question #{questionIndex + 1}]\", 2);\n\t\t\t\t\tQuizQuestion question = group.Questions[questionIndex];\n\t\t\t\t\tstring questionContent = TruncateString(question.HeaderContent?.Text);\n\t\t\t\t\tthis.logger.Log($\"Question content: {questionContent}\", 3);\n\t\t\t\t\tquestionNumber++;\n\t\t\t\t\tAppendText(outputDoc, $\"{questionNumber}. \");\n\t\t\t\t\tAppendRange(outputDoc, question.HeaderContent);\n\t\t\t\t\tthis.logger.Log($\"Answers = {question.Answers.Count}\", 3);\n\t\t\t\t\tchar letter = GetStartLetter(langCode);", "\t\t\t\t\tforeach (var answer in question.Answers)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring prefix = answer.IsCorrect ? \"Correct answer\" : \"Wrong answer\";\n\t\t\t\t\t\tstring answerText = TruncateString(answer.Content.Text);\n\t\t\t\t\t\tthis.logger.Log($\"{prefix}: {letter}) {answerText}\", 4);\n\t\t\t\t\t\tAppendText(outputDoc, $\"{letter}) \");\n\t\t\t\t\t\tAppendRange(outputDoc, answer.Content);\n\t\t\t\t\t\tletter++;\n\t\t\t\t\t}\n\t\t\t\t\tstring questionFooterText = TruncateString(question.FooterContent?.Text);\n\t\t\t\t\tif (questionFooterText == \"\")\n\t\t\t\t\t\tquestionFooterText = \"(empty)\";\n\t\t\t\t\tthis.logger.Log($\"Question footer: {questionFooterText}\", 3);\n\t\t\t\t\tAppendRange(outputDoc, question.FooterContent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstring quizFooterText = TruncateString(quiz.FooterContent?.Text);\n\t\t\tthis.logger.Log($\"Quiz footer: {quizFooterText}\", 1);\n\t\t\tAppendRange(outputDoc, quiz.FooterContent);\n\t\t}\n", "\t\t\t\t\tif (questionFooterText == \"\")\n\t\t\t\t\t\tquestionFooterText = \"(empty)\";\n\t\t\t\t\tthis.logger.Log($\"Question footer: {questionFooterText}\", 3);\n\t\t\t\t\tAppendRange(outputDoc, question.FooterContent);\n\t\t\t\t}\n\t\t\t}\n\t\t\tstring quizFooterText = TruncateString(quiz.FooterContent?.Text);\n\t\t\tthis.logger.Log($\"Quiz footer: {quizFooterText}\", 1);\n\t\t\tAppendRange(outputDoc, quiz.FooterContent);\n\t\t}\n", "\t\tprivate void ReplaceTextInRange(Word.Range range, string srcText, string replaceText)\n\t\t{\n\t\t\tWord.Find find = range.Find;\n\t\t\tfind.Text = srcText;\n\t\t\tfind.Replacement.Text = replaceText;\n\t\t\tfind.Forward = true;\n\t\t\tfind.Wrap = Word.WdFindWrap.wdFindContinue;\n\t\t\tobject replaceAll = Word.WdReplace.wdReplaceAll;\n\t\t\tfind.Execute(Replace: ref replaceAll);\n\t\t}\n", "\t\tpublic void AppendRange(Word.Document targetDocument, Word.Range sourceRange)\n\t\t{\n\t\t\tif (sourceRange != null)\n\t\t\t{\n\t\t\t\t// Get the range at the end of the target document\n\t\t\t\tWord.Range targetRange = targetDocument.Content;\n\t\t\t\tobject wdColapseEnd = Word.WdCollapseDirection.wdCollapseEnd;\n\t\t\t\ttargetRange.Collapse(ref wdColapseEnd);\n\n\t\t\t\t// Insert the source range of formatted text to the target range\n\t\t\t\ttargetRange.FormattedText = sourceRange.FormattedText;\n\t\t\t}\n\t\t}\n", "\t\tpublic void AppendText(Word.Document targetDocument, string text)\n\t\t{\n\t\t\t// Get the range at the end of the target document\n\t\t\tWord.Range targetRange = targetDocument.Content;\n\t\t\tobject wdColapseEnd = Word.WdCollapseDirection.wdCollapseEnd;\n\t\t\ttargetRange.Collapse(ref wdColapseEnd);\n\n\t\t\t// Insert the source range of formatted text to the target range\n\t\t\ttargetRange.Text = text;\n\t\t}\n\n\t\tprivate List<char> ExtractAnswersAsLetters(RandomizedQuiz randQuiz, string langCode)\n\t\t{\n\t\t\tchar startLetter = GetStartLetter(langCode);\n\n\t\t\tList<char> answers = new List<char>();", "\t\t\tforeach (var question in randQuiz.AllQuestions)\n\t\t\t{\n\t\t\t\tint correctAnswerIndex = FindCorrectAnswerIndex(question.Answers);\n\t\t\t\tchar answer = (char)(startLetter + correctAnswerIndex);\n\t\t\t\tanswers.Add(answer);\n\t\t\t}\n\n\t\t\treturn answers;\n\t\t}\n\n\t\tprivate static char GetStartLetter(string langCode)\n\t\t{\n\t\t\tchar startLetter;", "\t\tprivate static char GetStartLetter(string langCode)\n\t\t{\n\t\t\tchar startLetter;\n\t\t\tif (langCode == \"EN\")\n\t\t\t\tstartLetter = 'a'; // Latin letter 'a'\n\t\t\telse if (langCode == \"BG\")\n\t\t\t\tstartLetter = '\u0430'; // Cyrillyc letter '\u0430'\n\t\t\telse\n\t\t\t\tthrow new Exception(\"Unsupported language: \" + langCode);\n\t\t\treturn startLetter;\n\t\t}\n", "\t\tprivate int FindCorrectAnswerIndex(List<QuestionAnswer> answers)\n\t\t{\n\t\t\tfor (int index = 0; index < answers.Count; index++)\n\t\t\t{\n\t\t\t\tif (answers[index].IsCorrect)\n\t\t\t\t\treturn index;\n\t\t\t}\n\n\t\t\t// No correct answer found in the list of answers\n\t\t\treturn -1;\n\t\t}\n", "\t\tprivate void WriteAnswerSheetToHTMLFile(\n\t\t\tList<List<char>> quizAnswerSheet, string outputFilePath)\n\t\t{\n\t\t\tstring outputFileName = outputFilePath + Path.DirectorySeparatorChar + \"answers.html\";\n\n\t\t\tthis.logger.LogNewLine();\n\t\t\tthis.logger.Log($\"Writing answers sheet: {outputFileName}\");\n\t\t\tfor (int quizIndex = 0; quizIndex < quizAnswerSheet.Count; quizIndex++)\n\t\t\t{\n\t\t\t\tList<char> answers = quizAnswerSheet[quizIndex];\n\t\t\t\tstring answersAsString = $\"Variant #{quizIndex + 1}: {string.Join(\" \", answers)}\";\n\t\t\t\tthis.logger.Log(answersAsString, 1);\n\t\t\t}\n\n\t\t\tList<string> html = new List<string>();\n\t\t\thtml.Add(\"<table border='1'>\");\n\t\t\thtml.Add(\"  <tr>\");\n\t\t\thtml.Add(\"    <td>Var</td>\");", "\t\t\tfor (int questionIndex = 0; questionIndex < quizAnswerSheet[0].Count; questionIndex++)\n\t\t\t{\n\t\t\t\thtml.Add($\"    <td>{questionIndex + 1}</td>\");\n\t\t\t}\n\t\t\thtml.Add(\"  </tr>\");\n\t\t\tfor (int quizIndex = 0; quizIndex < quizAnswerSheet.Count; quizIndex++)\n\t\t\t{\n\t\t\t\thtml.Add(\"  <tr>\");\n\t\t\t\thtml.Add($\"    <td>{(quizIndex + 1).ToString(\"000\")}</td>\");\n\t\t\t\tforeach (var answer in quizAnswerSheet[quizIndex])\n\t\t\t\t{\n\t\t\t\t\thtml.Add($\"    <td>{answer}</td>\");\n\t\t\t\t}\n\t\t\t\thtml.Add(\"  </tr>\");\n\t\t\t}\n\t\t\thtml.Add(\"</table>\");\n\n\t\t\tFile.WriteAllLines(outputFileName, html);\n\t\t}\n", "\t\t\t\tforeach (var answer in quizAnswerSheet[quizIndex])\n\t\t\t\t{\n\t\t\t\t\thtml.Add($\"    <td>{answer}</td>\");\n\t\t\t\t}\n\t\t\t\thtml.Add(\"  </tr>\");\n\t\t\t}\n\t\t\thtml.Add(\"</table>\");\n\n\t\t\tFile.WriteAllLines(outputFileName, html);\n\t\t}\n", "\t\tpublic bool KillAllProcesses(string processName)\n\t\t{\n\t\t\tProcess[] processes = Process.GetProcessesByName(processName);\n\t\t\tint killedProcessesCount = 0;\n\t\t\tforeach (Process process in processes)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tprocess.Kill();\n\t\t\t\t\tkilledProcessesCount++;\n\t\t\t\t\tthis.logger.Log($\"Process {processName} ({process.Id}) stopped.\");\n\t\t\t\t}\n\t\t\t\tcatch\n\t\t\t\t{\n\t\t\t\t\tthis.logger.LogError($\"Process {processName} ({process.Id}) is running, but cannot be stopped!\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn (killedProcessesCount > 0);\n\t\t}\n\t}\n}\n"]}
{"filename": "QuizGenerator.Core/QuizSettings.cs", "chunked_list": ["\ufeffnamespace QuizGenerator.Core\n{\n\tclass QuizSettings\n\t{\n\t\tpublic int VariantsToGenerate { get; set; }\n        public string Lang { get; set; }\n        public int AnswersPerQuestion { get; set; }\n\t\tpublic int QuestionsToGenerate { get; set; }\n        public bool SkipHeader { get; set; }\n    }\n}\n", "        public bool SkipHeader { get; set; }\n    }\n}\n"]}
{"filename": "QuizGenerator.UI/FormQuizGenerator.cs", "chunked_list": ["using QuizGenerator.Core;\n\nnamespace QuizGenerator.UI\n{\n\tpublic partial class FormQuizGenerator : Form, ILogger\n\t{\n\t\tpublic FormQuizGenerator()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t}\n", "\t\tpublic void Log(string msg, int indentTabs = 0)\n\t\t{\n\t\t\tif (this.Disposing || this.IsDisposed)\n\t\t\t\treturn;\n\n\t\t\tmsg = $\"{new string(' ', indentTabs * 2)}{msg}\";\n\n\t\t\t// Update the UI through the main UI thread (thread safe)\n\t\t\tthis.Invoke((MethodInvoker)delegate\n\t\t\t{\n\t\t\t\t// Append indent tabs\n\t\t\t\tthis.richTextBoxLogs.AppendText(new string(' ', indentTabs * 2));\n\n\t\t\t\t// Append the message to the logs (with formatting)\n\t\t\t\trichTextBoxLogs.SelectionStart = richTextBoxLogs.Text.Length;\n\t\t\t\trichTextBoxLogs.SelectionLength = 0;\n\t\t\t\tthis.richTextBoxLogs.SelectionColor = ColorTranslator.FromHtml(\"#333\");\n\t\t\t\tthis.richTextBoxLogs.SelectionFont = new Font(richTextBoxLogs.Font, FontStyle.Regular);\n\t\t\t\tthis.richTextBoxLogs.AppendText(msg);\n\n\t\t\t\t// Append a new line\n\t\t\t\tLogNewLine();\n\t\t\t});\n\t\t}\n", "\t\tpublic void LogError(string errMsg, string errTitle = \"Error\", int indentTabs = 0)\n\t\t{\n\t\t\tif (this.Disposing || this.IsDisposed)\n\t\t\t\treturn;\n\n\t\t\t// Update the UI through the main UI thread (thread safe)\n\t\t\tthis.Invoke((MethodInvoker)delegate\n\t\t\t{\n\t\t\t\t// Append indent tabs\n\t\t\t\tthis.richTextBoxLogs.AppendText(new string(' ', indentTabs * 2));\n\n\t\t\t\t// Append the error title to the logs\n\t\t\t\trichTextBoxLogs.SelectionStart = richTextBoxLogs.Text.Length;\n\t\t\t\trichTextBoxLogs.SelectionLength = 0;\n\t\t\t\tthis.richTextBoxLogs.SelectionColor = ColorTranslator.FromHtml(\"#922\");\n\t\t\t\tthis.richTextBoxLogs.SelectionFont = new Font(richTextBoxLogs.Font, FontStyle.Bold);\n\t\t\t\tthis.richTextBoxLogs.AppendText(errTitle + \": \");\n\n\t\t\t\t// Append the error message to the logs\n\t\t\t\trichTextBoxLogs.SelectionStart = richTextBoxLogs.Text.Length;\n\t\t\t\trichTextBoxLogs.SelectionLength = 0;\n\t\t\t\tthis.richTextBoxLogs.SelectionFont = new Font(richTextBoxLogs.Font, FontStyle.Regular);\n\t\t\t\tthis.richTextBoxLogs.AppendText(errMsg);\n\n\t\t\t\t// Append a new line\n\t\t\t\tthis.LogNewLine();\n\t\t\t});\n\t\t}\n", "\t\tpublic void LogNewLine()\n\t\t{\n\t\t\tthis.richTextBoxLogs.AppendText(\"\\n\");\n\t\t\trichTextBoxLogs.SelectionStart = richTextBoxLogs.Text.Length;\n\t\t\trichTextBoxLogs.SelectionLength = 0;\n\t\t\trichTextBoxLogs.ScrollToCaret();\n\t\t}\n\t\tpublic void LogException(Exception ex)\n\t\t{\n\t\t\tthis.LogError(ex.Message);\n\t\t\tthis.LogError(ex.StackTrace, \"Exception\", 1);\n\t\t}\n", "\t\tprivate void FormQuizGenerator_Load(object sender, EventArgs e)\n\t\t{\n\t\t\tstring startupFolder = Application.StartupPath;\n\t\t\tstring inputFolder = Path.Combine(startupFolder, @\"../../../../input\");\n\t\t\tthis.textBoxInputFile.Text = Path.GetFullPath(inputFolder + @\"/questions.docx\");\n\n\t\t\tstring outputFolder = Path.Combine(startupFolder, @\"../../../../output\");\n\t\t\tthis.textBoxOutputFolder.Text = Path.GetFullPath(outputFolder);\n\n\t\t\tthis.ActiveControl = this.buttonGenerate;\n\t\t}\n", "\t\tprivate void buttonGenerate_Click(object sender, EventArgs e)\n\t\t{\n\t\t\tstring inputFilePath = this.textBoxInputFile.Text;\n\t\t\tstring outputFolderPath = this.textBoxOutputFolder.Text;\n\t\t\tRandomizedQuizGenerator quizGenerator = new RandomizedQuizGenerator(this);\n\t\t\tquizGenerator.GenerateQuiz(inputFilePath, outputFolderPath);\n\t\t}\n\n\t\tprivate void buttonChooseInputFile_Click(object sender, EventArgs e)\n\t\t{\n\t\t\tOpenFileDialog openFileDialog = new OpenFileDialog\n\t\t\t{\n\t\t\t\tInitialDirectory = Path.GetDirectoryName(this.textBoxInputFile.Text),\n\t\t\t\tFileName = this.textBoxInputFile.Text,\n\t\t\t\tFilter = \"MS Word files (*.docx)|*.docx|All files (*.*)|*.*\",\n\t\t\t\tCheckFileExists = true,\n\t\t\t\tFilterIndex = 1,\n\t\t\t\tRestoreDirectory = true\n\t\t\t};\n", "\t\tprivate void buttonChooseInputFile_Click(object sender, EventArgs e)\n\t\t{\n\t\t\tOpenFileDialog openFileDialog = new OpenFileDialog\n\t\t\t{\n\t\t\t\tInitialDirectory = Path.GetDirectoryName(this.textBoxInputFile.Text),\n\t\t\t\tFileName = this.textBoxInputFile.Text,\n\t\t\t\tFilter = \"MS Word files (*.docx)|*.docx|All files (*.*)|*.*\",\n\t\t\t\tCheckFileExists = true,\n\t\t\t\tFilterIndex = 1,\n\t\t\t\tRestoreDirectory = true\n\t\t\t};\n", "\t\t\tif (openFileDialog.ShowDialog() == DialogResult.OK)\n\t\t\t{\n\t\t\t\tthis.textBoxInputFile.Text = openFileDialog.FileName;\n\t\t\t}\n\t\t}\n\n\t\tprivate void buttonChooseFolder_Click(object sender, EventArgs e)\n\t\t{\n\t\t\tFolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog()\n\t\t\t{\n\t\t\t\tInitialDirectory = this.textBoxOutputFolder.Text\n\t\t\t};\n", "\t\t\tif (folderBrowserDialog.ShowDialog() == DialogResult.OK)\n\t\t\t{\n\t\t\t\tthis.textBoxOutputFolder.Text = folderBrowserDialog.SelectedPath;\n\t\t\t}\n\t\t}\n\t}\n}"]}
{"filename": "QuizGenerator.UI/FormQuizGenerator.Designer.cs", "chunked_list": ["\ufeffnamespace QuizGenerator.UI\n{\n\tpartial class FormQuizGenerator\n\t{\n\t\t/// <summary>\n\t\t///  Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\n\t\t/// <summary>\n\t\t///  Clean up any resources being used.\n\t\t/// </summary>\n\t\t/// <param name=\"disposing\">true if managed resources should be disposed; otherwise, false.</param>", "\t\tprotected override void Dispose(bool disposing)\n\t\t{\n\t\t\tif (disposing && (components != null))\n\t\t\t{\n\t\t\t\tcomponents.Dispose();\n\t\t\t}\n\t\t\tbase.Dispose(disposing);\n\t\t}\n\n\t\t#region Windows Form Designer generated code\n\n\t\t/// <summary>\n\t\t///  Required method for Designer support - do not modify\n\t\t///  the contents of this method with the code editor.\n\t\t/// </summary>", "\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tlabelInputFile = new Label();\n\t\t\ttextBoxInputFile = new TextBox();\n\t\t\tbuttonChooseInputFile = new Button();\n\t\t\tlabelOutputFolder = new Label();\n\t\t\ttextBoxOutputFolder = new TextBox();\n\t\t\tbuttonChooseFolder = new Button();\n\t\t\tbuttonGenerate = new Button();\n\t\t\trichTextBoxLogs = new RichTextBox();\n\t\t\tSuspendLayout();\n\t\t\t// \n\t\t\t// labelInputFile\n\t\t\t// \n\t\t\tlabelInputFile.AutoSize = true;\n\t\t\tlabelInputFile.Location = new Point(10, 10);\n\t\t\tlabelInputFile.Margin = new Padding(4, 0, 4, 0);\n\t\t\tlabelInputFile.Name = \"labelInputFile\";\n\t\t\tlabelInputFile.Size = new Size(291, 25);\n\t\t\tlabelInputFile.TabIndex = 0;\n\t\t\tlabelInputFile.Text = \"Quiz content (input) file (MS Word):\";\n\t\t\t// \n\t\t\t// textBoxInputFile\n\t\t\t// \n\t\t\ttextBoxInputFile.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;\n\t\t\ttextBoxInputFile.BorderStyle = BorderStyle.FixedSingle;\n\t\t\ttextBoxInputFile.Location = new Point(15, 39);\n\t\t\ttextBoxInputFile.Margin = new Padding(4);\n\t\t\ttextBoxInputFile.Name = \"textBoxInputFile\";\n\t\t\ttextBoxInputFile.Size = new Size(871, 31);\n\t\t\ttextBoxInputFile.TabIndex = 1;\n\t\t\t// \n\t\t\t// buttonChooseInputFile\n\t\t\t// \n\t\t\tbuttonChooseInputFile.Anchor = AnchorStyles.Top | AnchorStyles.Right;\n\t\t\tbuttonChooseInputFile.Location = new Point(895, 37);\n\t\t\tbuttonChooseInputFile.Margin = new Padding(4);\n\t\t\tbuttonChooseInputFile.Name = \"buttonChooseInputFile\";\n\t\t\tbuttonChooseInputFile.Size = new Size(149, 36);\n\t\t\tbuttonChooseInputFile.TabIndex = 2;\n\t\t\tbuttonChooseInputFile.Text = \"Choose File\";\n\t\t\tbuttonChooseInputFile.UseVisualStyleBackColor = true;\n\t\t\tbuttonChooseInputFile.Click += buttonChooseInputFile_Click;\n\t\t\t// \n\t\t\t// labelOutputFolder\n\t\t\t// \n\t\t\tlabelOutputFolder.AutoSize = true;\n\t\t\tlabelOutputFolder.Location = new Point(10, 74);\n\t\t\tlabelOutputFolder.Name = \"labelOutputFolder\";\n\t\t\tlabelOutputFolder.Size = new Size(163, 25);\n\t\t\tlabelOutputFolder.TabIndex = 3;\n\t\t\tlabelOutputFolder.Text = \"Quiz output folder:\";\n\t\t\t// \n\t\t\t// textBoxOutputFolder\n\t\t\t// \n\t\t\ttextBoxOutputFolder.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;\n\t\t\ttextBoxOutputFolder.BorderStyle = BorderStyle.FixedSingle;\n\t\t\ttextBoxOutputFolder.Location = new Point(15, 103);\n\t\t\ttextBoxOutputFolder.Margin = new Padding(4);\n\t\t\ttextBoxOutputFolder.Name = \"textBoxOutputFolder\";\n\t\t\ttextBoxOutputFolder.Size = new Size(872, 31);\n\t\t\ttextBoxOutputFolder.TabIndex = 4;\n\t\t\t// \n\t\t\t// buttonChooseFolder\n\t\t\t// \n\t\t\tbuttonChooseFolder.Anchor = AnchorStyles.Top | AnchorStyles.Right;\n\t\t\tbuttonChooseFolder.Location = new Point(895, 99);\n\t\t\tbuttonChooseFolder.Margin = new Padding(4);\n\t\t\tbuttonChooseFolder.Name = \"buttonChooseFolder\";\n\t\t\tbuttonChooseFolder.Size = new Size(149, 36);\n\t\t\tbuttonChooseFolder.TabIndex = 5;\n\t\t\tbuttonChooseFolder.Text = \"Choose Folder\";\n\t\t\tbuttonChooseFolder.UseVisualStyleBackColor = true;\n\t\t\tbuttonChooseFolder.Click += buttonChooseFolder_Click;\n\t\t\t// \n\t\t\t// buttonGenerate\n\t\t\t// \n\t\t\tbuttonGenerate.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;\n\t\t\tbuttonGenerate.Font = new Font(\"Segoe UI\", 13.8F, FontStyle.Regular, GraphicsUnit.Point);\n\t\t\tbuttonGenerate.Location = new Point(15, 152);\n\t\t\tbuttonGenerate.Margin = new Padding(4);\n\t\t\tbuttonGenerate.Name = \"buttonGenerate\";\n\t\t\tbuttonGenerate.Size = new Size(1029, 47);\n\t\t\tbuttonGenerate.TabIndex = 6;\n\t\t\tbuttonGenerate.Text = \"Generate Quiz\";\n\t\t\tbuttonGenerate.UseVisualStyleBackColor = true;\n\t\t\tbuttonGenerate.Click += buttonGenerate_Click;\n\t\t\t// \n\t\t\t// richTextBoxLogs\n\t\t\t// \n\t\t\trichTextBoxLogs.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;\n\t\t\trichTextBoxLogs.Location = new Point(15, 216);\n\t\t\trichTextBoxLogs.Name = \"richTextBoxLogs\";\n\t\t\trichTextBoxLogs.ReadOnly = true;\n\t\t\trichTextBoxLogs.Size = new Size(1026, 413);\n\t\t\trichTextBoxLogs.TabIndex = 7;\n\t\t\trichTextBoxLogs.Text = \"\";\n\t\t\t// \n\t\t\t// FormQuizGenerator\n\t\t\t// \n\t\t\tAutoScaleDimensions = new SizeF(10F, 25F);\n\t\t\tAutoScaleMode = AutoScaleMode.Font;\n\t\t\tClientSize = new Size(1053, 641);\n\t\t\tControls.Add(richTextBoxLogs);\n\t\t\tControls.Add(buttonGenerate);\n\t\t\tControls.Add(buttonChooseFolder);\n\t\t\tControls.Add(textBoxOutputFolder);\n\t\t\tControls.Add(labelOutputFolder);\n\t\t\tControls.Add(buttonChooseInputFile);\n\t\t\tControls.Add(textBoxInputFile);\n\t\t\tControls.Add(labelInputFile);\n\t\t\tFont = new Font(\"Segoe UI\", 10.8F, FontStyle.Regular, GraphicsUnit.Point);\n\t\t\tMargin = new Padding(4);\n\t\t\tName = \"FormQuizGenerator\";\n\t\t\tStartPosition = FormStartPosition.CenterScreen;\n\t\t\tText = \"SoftUni Quiz Generator\";\n\t\t\tLoad += FormQuizGenerator_Load;\n\t\t\tResumeLayout(false);\n\t\t\tPerformLayout();\n\t\t}\n\n\t\t#endregion\n", "\t\tprivate Label labelInputFile;\n\t\tprivate TextBox textBoxInputFile;\n\t\tprivate Button buttonChooseInputFile;\n\t\tprivate Label labelOutputFolder;\n\t\tprivate TextBox textBoxOutputFolder;\n\t\tprivate Button buttonChooseFolder;\n\t\tprivate Button buttonGenerate;\n\t\tprivate RichTextBox richTextBoxLogs;\n\t}\n}"]}
{"filename": "QuizGenerator.UI/Program.cs", "chunked_list": ["namespace QuizGenerator.UI\n{\n\tpublic static class Program\n\t{\n\t\t/// <summary>\n\t\t///  The main entry point for the application.\n\t\t/// </summary>\n\t\t[STAThread]\n\t\tstatic void Main()\n\t\t{\n\t\t\tApplicationConfiguration.Initialize();\n\t\t\tApplication.Run(new FormQuizGenerator());\n\t\t}\n\t}\n}"]}
