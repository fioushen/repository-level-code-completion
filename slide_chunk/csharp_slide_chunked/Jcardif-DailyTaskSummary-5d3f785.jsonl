{"filename": "src/TasksSummarizer/TaskSummarizer.Shared/Helpers/OpenAiHelpers.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing TaskSummarizer.Shared.Models;\n\nnamespace TaskSummarizer.Shared.Helpers\n{\n    public static class OpenAiHelpers\n    {\n        /// <summary>\n        ///     Get the system message\n        /// </summary>\n        /// <param name=\"baseSystemMessage\"></param>\n        /// <returns></returns>", "        private static string GetSystemMessage(string baseSystemMessage)\n        {\n            var systemMessage = $\"<|im_start|>system\\n{baseSystemMessage.Trim()}\\n<|im_end|>\";\n            return systemMessage;\n        }\n\n        /// <summary>\n        ///     Create a prompt from the system message and messages.\n        /// </summary>\n        /// <param name=\"systemMessage\">The system message.</param>\n        /// <param name=\"message\">\n        ///     The list of messages, each represented as a dynamic object with \"sender\" and \"text\" keys.\n        ///     Example: messages = [{\"sender\": \"user\", \"text\": \"I want to write a blog post about my company.\"}]\n        ///</param>\n        /// <returns>The prompt string.</returns>", "        private static string CreatePrompt(dynamic message, string systemMessage)\n        {\n            var prompt = systemMessage;\n\n            prompt += $\"\\n<|im_start|>{message[\"sender\"]}\\n{message[\"text\"]}<|im_end|>\";\n            prompt += \"\\n<|im_start|>assistant\\n\";\n\n            return prompt;\n        }\n\n", "        public static string GetPromptFromTasks(List<TaskItem> taskItems, string baseSystemMessage)\n        {\n            var tasks = JsonConvert.SerializeObject(taskItems, Formatting.Indented);\n\n            var systemMessage = GetSystemMessage(baseSystemMessage);\n\n            const string intro = \"Here are the tasks done, generate the summary in 2-4 bullet points, in prose format:\";\n            var serializedTasks = JsonConvert.SerializeObject(taskItems, Formatting.Indented);\n\n            var userMessage = new Dictionary<string, string>()\n            {\n                { \"sender\", \"user\" },\n                { \"text\", $\"{intro}\\n\\n{serializedTasks}\" }\n            };\n\n            var prompt = CreatePrompt(userMessage, systemMessage);\n\n            return prompt;\n        }\n", "        public static string GetAdaptiveCardPrompt(string tasksSummary, string baseSystemMessage)\n        {\n            var systemMessage = GetSystemMessage(baseSystemMessage);\n\n            const string intro = \"Here is the summary of the work done\";\n\n            var userMessage = new Dictionary<string, string>()\n            {\n                { \"sender\", \"user\" },\n                { \"text\", $\"{intro}\\n\\n{tasksSummary}\" }\n            };\n\n            var prompt = CreatePrompt(userMessage, systemMessage);\n\n            return prompt;\n        }\n\n        // Todo: Estimate number of tokens in a prompt\n\n    }\n}\n"]}
{"filename": "src/TasksSummarizer/TaskSummarizer.Shared/Services/OpenAiChatService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing TaskSummarizer.Shared.Models;\nusing Newtonsoft.Json;\nusing static TaskSummarizer.Shared.Helpers.OpenAiHelpers;\n\nnamespace TaskSummarizer.Shared.Services\n{\n    public class OpenAiChatService\n\n    {", "{\n    public class OpenAiChatService\n\n    {\n        private string ApiKey { get; }\n        private string BaseUrl { get; }\n        private string DeploymentId { get; }\n        private HttpDataService HttpDataService { get; }\n        \n        \n        public OpenAiChatService(string apiKey, string baseUrl, string deploymentId)\n        {\n            ApiKey = apiKey;\n            BaseUrl = baseUrl;\n            DeploymentId = deploymentId;\n\n            var endpointUrl = $\"{baseUrl}/openai/deployments/{DeploymentId}/completions?api-version=2022-12-01\";\n            HttpDataService = new HttpDataService(endpointUrl);\n        }\n", "        public async Task<OpenAiResponse?> CreateCompletionAsync(string prompt)\n        {\n            var completion = new OpenAiCompletion()\n            {\n                Prompt = prompt,\n                Temperature = 1,\n                FrequencyPenalty = 0,\n                PresencePenalty = 0,\n                MaxTokens = 1000,\n                TopP = 0.95\n            };\n\n            var content = await HttpDataService.PostAsJsonAsync<OpenAiCompletion>(\"\", completion, ApiKey);", "            if (content == null) return null;\n            var response = JsonConvert.DeserializeObject<OpenAiResponse>(content);\n\n            return response;\n\n        }\n    }\n}\n"]}
{"filename": "src/TasksSummarizer/TaskSummarizer.Shared/Services/HttpDataService.cs", "chunked_list": ["\ufeffusing System.Net.Http.Headers;\nusing System.Text;\nusing Newtonsoft.Json;\n\nnamespace TaskSummarizer.Shared.Services\n{\n    public class HttpDataService\n    {\n        private readonly HttpClient _client;\n\n        public HttpDataService(string defaultBaseUrl)\n        {\n\n            _client = new HttpClient();\n            _client.BaseAddress = new Uri(defaultBaseUrl);\n\n        }\n\n        \n", "        private readonly HttpClient _client;\n\n        public HttpDataService(string defaultBaseUrl)\n        {\n\n            _client = new HttpClient();\n            _client.BaseAddress = new Uri(defaultBaseUrl);\n\n        }\n\n        \n", "        public async Task<T?> GetAsync<T>(string uri)\n        {\n            var request = new HttpRequestMessage(HttpMethod.Get, uri);\n\n\n            var response = await _client.SendAsync(request);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var content = await response.Content.ReadAsStringAsync();\n                return JsonConvert.DeserializeObject<T>(content);\n            }\n\n            throw new HttpRequestException($\"Error calling {uri} - {response.StatusCode}\");\n        }\n", "        public async Task<string?> PostAsJsonAsync<T>(string uri, T item, string apiKey)\n        {\n\n            var jsonBody = JsonConvert.SerializeObject(item);\n            var httpContent = new StringContent(jsonBody, Encoding.UTF8, \"application/json\");\n\n            httpContent.Headers.Add(\"api-key\", apiKey);\n\n            var response = await _client.PostAsync(\"\", httpContent);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var content = await response.Content.ReadAsStringAsync();\n                return content;\n            }\n\n            throw new HttpRequestException($\"Error calling {uri} - {response.StatusCode}\");\n        }\n    }\n\n}\n", "            if (response.IsSuccessStatusCode)\n            {\n                var content = await response.Content.ReadAsStringAsync();\n                return content;\n            }\n\n            throw new HttpRequestException($\"Error calling {uri} - {response.StatusCode}\");\n        }\n    }\n\n}\n"]}
{"filename": "src/TasksSummarizer/TaskSummarizer.Shared/Models/OpenAiCompletion.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\n\nnamespace TaskSummarizer.Shared.Models\n{\n    public class OpenAiCompletion\n    {\n        [JsonProperty(\"prompt\")]\n        public string? Prompt { get; set; }\n\n        [JsonProperty(\"temperature\")]\n        public long Temperature { get; set; }\n\n        [JsonProperty(\"top_p\")]", "        public long Temperature { get; set; }\n\n        [JsonProperty(\"top_p\")]\n        public double TopP { get; set; }\n\n        [JsonProperty(\"frequency_penalty\")]\n        public long FrequencyPenalty { get; set; }\n\n        [JsonProperty(\"presence_penalty\")]\n        public long PresencePenalty { get; set; }\n\n        [JsonProperty(\"max_tokens\")]", "        public long PresencePenalty { get; set; }\n\n        [JsonProperty(\"max_tokens\")]\n        public long MaxTokens { get; set; }\n\n        [JsonProperty(\"stop\")]\n        public List<string> Stop { get; set; } = new()\n        {\n            \"<|im_end|>\"\n        };\n    }\n}\n"]}
{"filename": "src/TasksSummarizer/TaskSummarizer.Shared/Models/TaskItem.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace TaskSummarizer.Shared.Models\n{\n    public class TaskItem\n    {\n        public string? Description { get; set; }\n        public string? Importance { get; set; }\n        public string? Status { get; set; }\n        public List<TaskItemSubTask>? SubTasks { get; set; } \n        public string? TaskTitle { get; set; }\n        public string? OtherPeopleHelping {get; set;}\n    }\n", "    public class TaskItemSubTask\n    {\n        public string? DisplayName { get; set; }\n        public string? SubTaskStatus { get; set; }\n    }\n}\n"]}
{"filename": "src/TasksSummarizer/TaskSummarizer.Shared/Models/OpenAiResponse.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\n\nnamespace TaskSummarizer.Shared.Models\n{\n\n    public class OpenAiResponse\n    {\n        [JsonProperty(\"id\")]\n        public string? Id { get; set; }\n\n        [JsonProperty(\"object\")]\n        public string? Object { get; set; }\n\n        [JsonProperty(\"created\")]", "        public long Created { get; set; }\n\n        [JsonProperty(\"model\")]\n        public string? Model { get; set; }\n\n        [JsonProperty(\"choices\")]\n        public List<Choice>? Choices { get; set; }\n\n        [JsonProperty(\"usage\")]\n        public Usage? Usage { get; set; }\n    }\n", "    public class Choice\n    {\n        [JsonProperty(\"text\")]\n        public string? Text { get; set; }\n\n        [JsonProperty(\"index\")]\n        public long Index { get; set; }\n\n        [JsonProperty(\"finish_reason\")]\n        public string? FinishReason { get; set; }\n\n        [JsonProperty(\"logprobs\")]\n        public object? Logprobs { get; set; }\n    }\n", "    public class Usage\n    {\n        [JsonProperty(\"completion_tokens\")]\n        public long CompletionTokens { get; set; }\n\n        [JsonProperty(\"prompt_tokens\")]\n        public long PromptTokens { get; set; }\n\n        [JsonProperty(\"total_tokens\")]\n        public long TotalTokens { get; set; }\n    }\n}", "        public long TotalTokens { get; set; }\n    }\n}"]}
{"filename": "src/TasksSummarizer/TasksSummarizer.Functions/Program.cs", "chunked_list": ["using Microsoft.Extensions.Hosting;\n\nvar host = new HostBuilder()\n    .ConfigureFunctionsWorkerDefaults()\n    .Build();\n\nhost.Run();\n"]}
{"filename": "src/TasksSummarizer/TasksSummarizer.Functions/Functions/GetCollaboratorsHttpTrigger.cs", "chunked_list": ["using System.Net;\nusing System.Text.RegularExpressions;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\n\nnamespace TasksSummarizer.Functions.Functions\n{\n    public class GetCollaboratorsHttpTrigger\n    {", "{\n    public class GetCollaboratorsHttpTrigger\n    {\n        private readonly ILogger _logger;\n\n        public GetCollaboratorsHttpTrigger(ILoggerFactory loggerFactory)\n        {\n            _logger = loggerFactory.CreateLogger<GetCollaboratorsHttpTrigger>();\n        }\n\n        [Function(\"GetCollaboratorsHttpTrigger\")]", "        public async Task<HttpResponseData> Run([HttpTrigger(AuthorizationLevel.Anonymous, \"post\")] HttpRequestData req)\n        {\n            var requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            var data = JsonConvert.DeserializeObject<dynamic>(requestBody);\n\n            string? collaborators = data?[\"collaborators\"];\n            HttpResponseData? response;\n\n            if (string.IsNullOrEmpty(collaborators))\n            {\n                var error = new { collaborators = \"\" };\n\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n\n                return response;\n            }\n\n            string pattern = @\"(?<=@)\\w+\\s\\w+\";\n            var matches = Regex.Matches(collaborators, pattern);\n\n            var colLaboratorsValues = \"\";\n", "            if (string.IsNullOrEmpty(collaborators))\n            {\n                var error = new { collaborators = \"\" };\n\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n\n                return response;\n            }\n\n            string pattern = @\"(?<=@)\\w+\\s\\w+\";\n            var matches = Regex.Matches(collaborators, pattern);\n\n            var colLaboratorsValues = \"\";\n", "            foreach (Match match in matches)\n            {\n                colLaboratorsValues += $\"{match.Value};\";\n            }\n            colLaboratorsValues = colLaboratorsValues.TrimEnd(';');\n\n            var result = new { collaborators = colLaboratorsValues };\n            response = req.CreateResponse(HttpStatusCode.OK);\n            await response.WriteAsJsonAsync(result);\n\n            return response;\n        }\n    }\n}\n"]}
{"filename": "src/TasksSummarizer/TasksSummarizer.Functions/Functions/GenerateAdaptiveCardHttpTrigger.cs", "chunked_list": ["using System.Net;\nusing System.Text;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing TaskSummarizer.Shared.Services;\nusing static TaskSummarizer.Shared.Helpers.OpenAiHelpers;\n", "using static TaskSummarizer.Shared.Helpers.OpenAiHelpers;\n\n\nnamespace TasksSummarizer.Functions.Functions\n{\n    public class GenerateAdaptiveCardHttpTrigger\n    {\n        private readonly ILogger _logger;\n\n        public GenerateAdaptiveCardHttpTrigger(ILoggerFactory loggerFactory)\n        {\n            _logger = loggerFactory.CreateLogger<GenerateAdaptiveCardHttpTrigger>();\n        }\n\n        [Function(\"GenerateAdaptiveCardHttpTrigger\")]", "        public async Task<HttpResponseData> Run([HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequestData req)\n        {\n            // get tasksSummary from json body\n            var requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            var data = JsonConvert.DeserializeObject<dynamic>(requestBody);\n\n            string? taskSummary = data?[\"taskSummary\"];\n            HttpResponseData? response;\n            \n            if (string.IsNullOrEmpty(taskSummary))\n            {\n                var error = new { error = \"Please pass a taskSummary in the request body\" };\n                \n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n\n                return response;\n            }\n\n            // Get settings from local.setting\n            var config = new ConfigurationBuilder()\n                .SetBasePath(Environment.CurrentDirectory)\n                .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n                .AddEnvironmentVariables()\n                .Build();\n\n            var apiKey = config.GetValue<string>(\"AzureOpenAI:APIKey\");\n            var deploymentId = config.GetValue<string>(\"AzureOpenAI:DeploymentId\");\n            var baseUrl = config.GetValue<string>(\"AzureOpenAI:BaseUrl\");\n\n            var filePath = Path.Combine(Environment.CurrentDirectory, \"Prompts\", \"GenerateAdaptiveCard.txt\");\n            var baseSystemMessage = await File.ReadAllTextAsync(filePath);\n\n            var chatService = new OpenAiChatService(apiKey, baseUrl, deploymentId);\n            var prompt = GetAdaptiveCardPrompt(taskSummary, baseSystemMessage);\n            var openAiResponse = await chatService.CreateCompletionAsync(prompt);\n\n            var text = openAiResponse?.Choices?.FirstOrDefault()?.Text;\n            var card = EnsureBraces(text ?? \"{}\");\n\n            response = req.CreateResponse(HttpStatusCode.OK);\n            await response.WriteAsJsonAsync(card);\n\n            return response;\n        }\n", "            if (string.IsNullOrEmpty(taskSummary))\n            {\n                var error = new { error = \"Please pass a taskSummary in the request body\" };\n                \n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n\n                return response;\n            }\n\n            // Get settings from local.setting\n            var config = new ConfigurationBuilder()\n                .SetBasePath(Environment.CurrentDirectory)\n                .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n                .AddEnvironmentVariables()\n                .Build();\n\n            var apiKey = config.GetValue<string>(\"AzureOpenAI:APIKey\");\n            var deploymentId = config.GetValue<string>(\"AzureOpenAI:DeploymentId\");\n            var baseUrl = config.GetValue<string>(\"AzureOpenAI:BaseUrl\");\n\n            var filePath = Path.Combine(Environment.CurrentDirectory, \"Prompts\", \"GenerateAdaptiveCard.txt\");\n            var baseSystemMessage = await File.ReadAllTextAsync(filePath);\n\n            var chatService = new OpenAiChatService(apiKey, baseUrl, deploymentId);\n            var prompt = GetAdaptiveCardPrompt(taskSummary, baseSystemMessage);\n            var openAiResponse = await chatService.CreateCompletionAsync(prompt);\n\n            var text = openAiResponse?.Choices?.FirstOrDefault()?.Text;\n            var card = EnsureBraces(text ?? \"{}\");\n\n            response = req.CreateResponse(HttpStatusCode.OK);\n            await response.WriteAsJsonAsync(card);\n\n            return response;\n        }\n", "        public static string EnsureBraces(string input)\n        {\n            int startIndex = input.IndexOf(\"{\");\n            int endIndex = input.LastIndexOf(\"}\");\n\n            if (startIndex == -1 || endIndex == -1)\n            {\n                return string.Empty; // or throw an exception, depending on your requirements\n            }\n            else\n            {\n                return input.Substring(startIndex, endIndex - startIndex + 1);\n            }\n        }\n\n\n    }\n}\n"]}
{"filename": "src/TasksSummarizer/TasksSummarizer.Functions/Functions/SummarizeTasksHttpTrigger.cs", "chunked_list": ["using System.Collections.Generic;\nusing System.Net;\nusing System.Text;\nusing Microsoft.AspNetCore.WebUtilities;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing TaskSummarizer.Shared.Models;", "using Newtonsoft.Json;\nusing TaskSummarizer.Shared.Models;\nusing TaskSummarizer.Shared.Services;\nusing static TaskSummarizer.Shared.Helpers.OpenAiHelpers;\n\nnamespace TasksSummarizer.Functions.Functions\n{\n    public class SummarizeTasksHttpTrigger\n    {\n        private readonly ILogger _logger;\n\n        public SummarizeTasksHttpTrigger(ILoggerFactory loggerFactory)\n        {\n            _logger = loggerFactory.CreateLogger<SummarizeTasksHttpTrigger>();\n        }\n\n        [Function(\"SummarizeTasksHttpTrigger\")]", "        private readonly ILogger _logger;\n\n        public SummarizeTasksHttpTrigger(ILoggerFactory loggerFactory)\n        {\n            _logger = loggerFactory.CreateLogger<SummarizeTasksHttpTrigger>();\n        }\n\n        [Function(\"SummarizeTasksHttpTrigger\")]\n        public async Task<HttpResponseData> Run([HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequestData req)\n        {\n            HttpResponseData? response;\n\n            // get name of the user sending tasks\n            var uri = new Uri(req.Url.ToString());\n            var query = QueryHelpers.ParseQuery(uri.Query);\n", "        public async Task<HttpResponseData> Run([HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequestData req)\n        {\n            HttpResponseData? response;\n\n            // get name of the user sending tasks\n            var uri = new Uri(req.Url.ToString());\n            var query = QueryHelpers.ParseQuery(uri.Query);\n\n            if (!query.ContainsKey(\"name\") || string.IsNullOrEmpty(query[\"name\"]))\n            {\n                var error = new { error = \"Please pass name in the query string\" };\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n\n                return response;\n            }\n\n            var name = query[\"name\"];\n\n            // get tasksSummary from json body\n            var requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            var items = JsonConvert.DeserializeObject<List<TaskItem>>(requestBody);\n", "            if (!query.ContainsKey(\"name\") || string.IsNullOrEmpty(query[\"name\"]))\n            {\n                var error = new { error = \"Please pass name in the query string\" };\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n\n                return response;\n            }\n\n            var name = query[\"name\"];\n\n            // get tasksSummary from json body\n            var requestBody = await new StreamReader(req.Body).ReadToEndAsync();\n            var items = JsonConvert.DeserializeObject<List<TaskItem>>(requestBody);\n", "            if (items is null || items.Count == 0)\n            {\n                var error = new { error = \"Please pass valid tasks in  the request body\" };\n                \n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                await response.WriteAsJsonAsync(error);\n                \n                return response;\n            }\n\n\n\n            // Get settings from local.setting\n            var config = new ConfigurationBuilder()\n                .SetBasePath(Environment.CurrentDirectory)\n                .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n                .AddEnvironmentVariables()\n                .Build();\n\n            var apiKey = config.GetValue<string>(\"AzureOpenAI:APIKey\");\n            var deploymentId = config.GetValue<string>(\"AzureOpenAI:DeploymentId\");\n            var baseUrl = config.GetValue<string>(\"AzureOpenAI:BaseUrl\");\n\n            var filePath = Path.Combine(Environment.CurrentDirectory, \"Prompts\", \"SummarizeText.txt\");\n            var baseSystemMessage = await File.ReadAllTextAsync(filePath);\n\n            baseSystemMessage = baseSystemMessage.Replace(\"Peter Parker\", name);\n\n            var chatService = new OpenAiChatService(apiKey, baseUrl, deploymentId);\n            var prompt = GetPromptFromTasks(items, baseSystemMessage);\n            var openAiResponse = await chatService.CreateCompletionAsync(prompt);\n\n            var summary = new { taskSummary = openAiResponse?.Choices?.FirstOrDefault()?.Text ?? \"\" };\n\n           response = req.CreateResponse(HttpStatusCode.OK);\n           await response.WriteAsJsonAsync(summary);   \n\n            return response;\n        }\n    }\n}\n"]}
