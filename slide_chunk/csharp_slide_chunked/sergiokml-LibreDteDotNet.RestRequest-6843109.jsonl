{"filename": "LibreDteDotNet.RestRequest/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     Este c\u00f3digo fue generado por una herramienta.\n//     Versi\u00f3n de runtime:4.0.30319.42000\n//\n//     Los cambios en este archivo podr\u00edan causar un comportamiento incorrecto y se perder\u00e1n si\n//     se vuelve a generar el c\u00f3digo.\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace LibreDteDotNet.RestRequest.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   Clase de recurso fuertemente tipado, para buscar cadenas traducidas, etc.\n    /// </summary>\n    // StronglyTypedResourceBuilder gener\u00f3 autom\u00e1ticamente esta clase", "    /// </summary>\n    // StronglyTypedResourceBuilder gener\u00f3 autom\u00e1ticamente esta clase\n    // a trav\u00e9s de una herramienta como ResGen o Visual Studio.\n    // Para agregar o quitar un miembro, edite el archivo .ResX y, a continuaci\u00f3n, vuelva a ejecutar ResGen\n    // con la opci\u00f3n /str o recompile su proyecto de VS.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        ", "    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   Devuelve la instancia de ResourceManager almacenada en cach\u00e9 utilizada por esta clase.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {", "                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"LibreDteDotNet.RestRequest.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las\n        ///   b\u00fasquedas de recursos mediante esta clase de recurso fuertemente tipado.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a &lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n        ///&lt;xs:schema targetNamespace=&quot;http://www.sii.cl/SiiDte&quot; xmlns:SiiDte=&quot;http://www.sii.cl/SiiDte&quot; xmlns:ds=&quot;http://www.w3.org/2000/09/xmldsig#&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; elementFormDefault=&quot;qualified&quot; attributeFormDefault=&quot;unqualified&quot;&gt;\n        ///\t&lt;xs:include schemaLocation=&quot;SiiTypes_v10.xsd&quot;/&gt;\n        ///\t&lt;xs:import namespace=&quot;http://www.w3.org/2000/09/xmldsig#&quot; schemaLocation=&quot;xmldsignature_v10.xsd&quot;/&gt;\n        ///\t&lt;xs:element name=&quot;DTE&quot; type=&quot;SiiDte:DTEDefType&quot;/&gt;\n        ///\t&lt;xs:complexType  [resto de la cadena truncado]&quot;;.\n        /// </summary>\n        internal static string DTE_v10 {\n            get {\n                return ResourceManager.GetString(\"DTE_v10\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a &lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n        ///&lt;!-- El presente documento define el esquema XML que debe ser utilizado\n        ///para realizar los envios de Documentos Tributarios Electronicos (DTE)\n        ///hacia el Servicio de Impuestos Internos.\n        ///\n        ///Fecha Actualizacion:  30/07/10 15:00\n        ///\n        ///Se incorporan dos nuevos Tipos de datos :\n        ///FechaType\t\t:  Fecha entre 2000-01-01 y 2050-12-31\n        ///FechaHoraType :  FechaType + hora entre 00:00 y 23:59\n        ///\n        ///Se limita a 2.000 documentos el m\u00e1ximo por envio o sobre (de acuerdo a publicaci\u00f3n)\n        /// -- [resto de la cadena truncado]&quot;;.\n        /// </summary>\n        internal static string EnvioDTE_v10 {\n            get {\n                return ResourceManager.GetString(\"EnvioDTE_v10\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a --{0}\n        ///Content-Disposition: form-data; name=&quot;rutSender&quot;\n        ///\n        ///{1}\n        ///--{2}\n        ///Content-Disposition: form-data; name=&quot;dvSender&quot;\n        ///\n        ///{3}\n        ///--{4}\n        ///Content-Disposition: form-data; name=&quot;rutCompany&quot;\n        ///\n        ///{5}\n        ///--{6}\n        ///Content-Disposition: form-data; name=&quot;dvCompany&quot;\n        ///\n        ///{7}\n        ///--{8}\n        ///Content-Disposition: form-data; name=&quot;archivo&quot;; filename=&quot;{9}&quot;\n        ///Content-Type: text/xml;\n        ///\n        ///{10}\n        ///--{11}--{12}.\n        /// </summary>\n        internal static string RequestDte {\n            get {\n                return ResourceManager.GetString(\"RequestDte\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a &lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n        ///&lt;!--Esquema para tipos de datos generales.\n        ///Fecha Actualizacion:  19/02/2018\n        ///--&gt;\n        ///&lt;xs:schema targetNamespace=&quot;http://www.sii.cl/SiiDte&quot; xmlns:ns1=&quot;http://www.sii.cl/SiiDte&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; elementFormDefault=&quot;qualified&quot; attributeFormDefault=&quot;unqualified&quot;&gt;\n        ///\t&lt;xs:simpleType name=&quot;DOCType&quot;&gt;\n        ///\t\t&lt;xs:annotation&gt;\n        ///\t\t\t&lt;xs:documentation&gt;Todos los tipos de Documentos Tributarios Electronicos&lt;/xs:documentation&gt;\n        ///\t\t&lt;/xs:annotation&gt;\n        ///\t\t&lt;xs:restriction base [resto de la cadena truncado]&quot;;.\n        /// </summary>\n        internal static string SiiTypes_v10 {\n            get {\n                return ResourceManager.GetString(\"SiiTypes_v10\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/.\n        /// </summary>\n        internal static string UrlBasePalena {\n            get {\n                return ResourceManager.GetString(\"UrlBasePalena\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cgi_dte/UPL/QEstCOFcont.sh.\n        /// </summary>\n        internal static string UrlBoletas {\n            get {\n                return ResourceManager.GetString(\"UrlBoletas\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/of_confirma_folio.\n        /// </summary>\n        internal static string UrlCafConfirma {\n            get {\n                return ResourceManager.GetString(\"UrlCafConfirma\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/of_genera_folio.\n        /// </summary>\n        internal static string UrlCafConfirmaFile {\n            get {\n                return ResourceManager.GetString(\"UrlCafConfirmaFile\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/rf_genera_archivo.\n        /// </summary>\n        internal static string UrlCafGeneraFile {\n            get {\n                return ResourceManager.GetString(\"UrlCafGeneraFile\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/rf_genera_folio.\n        /// </summary>\n        internal static string UrlCafGneraFolio {\n            get {\n                return ResourceManager.GetString(\"UrlCafGneraFolio\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/rf_reobtencion2_folios.\n        /// </summary>\n        internal static string UrlCafHistorial {\n            get {\n                return ResourceManager.GetString(\"UrlCafHistorial\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/of_solicita_folios_dcto.\n        /// </summary>\n        internal static string UrlCafMaxRango {\n            get {\n                return ResourceManager.GetString(\"UrlCafMaxRango\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/rf_reobtencion3_folios.\n        /// </summary>\n        internal static string UrlCafReobtiene {\n            get {\n                return ResourceManager.GetString(\"UrlCafReobtiene\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cvc_cgi/dte/ce_consulta_e.\n        /// </summary>\n        internal static string UrlConsultaRut {\n            get {\n                return ResourceManager.GetString(\"UrlConsultaRut\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cgi_dte/UPL/QEstadoDTE.\n        /// </summary>\n        internal static string UrlEstadoDte {\n            get {\n                return ResourceManager.GetString(\"UrlEstadoDte\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://www4.sii.cl/consemitidosinternetui/services/data/facadeService/.\n        /// </summary>\n        internal static string UrlLibroDetalle {\n            get {\n                return ResourceManager.GetString(\"UrlLibroDetalle\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://www4.sii.cl/consemitidosinternetui/services/data/facadeService/getResumen.\n        /// </summary>\n        internal static string UrlLibroResumen {\n            get {\n                return ResourceManager.GetString(\"UrlLibroResumen\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://hercules.sii.cl/cgi_AUT2000/autInicio.cgi?referencia={0}.\n        /// </summary>\n        internal static string UrlTokenSeed {\n            get {\n                return ResourceManager.GetString(\"UrlTokenSeed\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cgi_dte/UPL/DTEUpload.\n        /// </summary>\n        internal static string UrlUploadDTE {\n            get {\n                return ResourceManager.GetString(\"UrlUploadDTE\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a https://palena.sii.cl/cgi_dte/UPL/QValidaDTE.\n        /// </summary>\n        internal static string UrlValidaDte {\n            get {\n                return ResourceManager.GetString(\"UrlValidaDte\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n        ///&lt;!DOCTYPE schema\n        ///  PUBLIC &quot;-//W3C//DTD XMLSchema 200102//EN&quot; &quot;http://www.w3.org/2001/XMLSchema.dtd&quot;\n        /// [\n        ///   &lt;!ATTLIST schema \n        ///     xmlns:ds CDATA #FIXED &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;\n        ///   &lt;!ENTITY dsig &apos;http://www.w3.org/2000/09/xmldsig#&apos;&gt;\n        ///   &lt;!ENTITY % p &apos;&apos;&gt;\n        ///   &lt;!ENTITY % s &apos;&apos;&gt;\n        ///  ]&gt;\n        ///\n        ///&lt;!-- Schema for XML Signatures\n        ///    http://www.w3.org/2000/09/xmldsig#\n        ///    $Revision: 1.2 $ on $Date: 2013-04-16 12:48:49 $ by $Author: denis $\n        ///\n        ///    Copyright 2001 The Internet Society [resto de la cadena truncado]&quot;;.\n        /// </summary>\n        internal static string xmldsig_core_schema {\n            get {\n                return ResourceManager.GetString(\"xmldsig-core-schema\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Busca una cadena traducida similar a &lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n        ///&lt;!-- Schema for XML Signatures\n        ///    http://www.w3.org/2000/09/xmldsig#\n        ///    $Revision: 1.1 $ on $Date: 2002/02/08 20:32:26 $ by $Author: reagle $\n        ///\n        ///    Copyright 2001 The Internet Society and W3C (Massachusetts Institute\n        ///    of Technology, Institut National de Recherche en Informatique et en\n        ///    Automatique, Keio University). All Rights Reserved.\n        ///    http://www.w3.org/Consortium/Legal/\n        ///\n        ///    This document is governed by the W3C Software License [1] as descri [resto de la cadena truncado]&quot;;.\n        /// </summary>\n        internal static string xmldsignature_v10 {\n            get {\n                return ResourceManager.GetString(\"xmldsignature_v10\", resourceCulture);\n            }\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Extensions/DTEExtension.cs", "chunked_list": ["\ufeffusing LibreDteDotNet.Common.Models;\nusing LibreDteDotNet.RestRequest.Interfaces;\n\nnamespace LibreDteDotNet.RestRequest.Extensions\n{\n    public static class DTEExtension\n    {\n        public static IDTE Conectar(this IDTE folioService)\n        {\n            IDTE instance = folioService;\n            return instance.SetCookieCertificado().ConfigureAwait(false).GetAwaiter().GetResult();\n        }\n", "        public static async Task<IDTE> Validar(this IDTE folioService, string pathfile)\n        {\n            if (!File.Exists(pathfile))\n            {\n                throw new Exception($\"El Documento no existe en la ruta {pathfile}\");\n            }\n            IDTE instance = folioService;\n            return await instance.Validar<EnvioDTE>(pathfile);\n        }\n\n        public static async Task<string> Enviar(\n            this Task<IDTE> folioService,\n            string rutCompany,\n            string DvCompany\n        )\n        {\n            IDTE instance = await folioService;\n            return await instance.Enviar(rutCompany, DvCompany);\n        }\n    }\n}\n", "        public static async Task<string> Enviar(\n            this Task<IDTE> folioService,\n            string rutCompany,\n            string DvCompany\n        )\n        {\n            IDTE instance = await folioService;\n            return await instance.Enviar(rutCompany, DvCompany);\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Extensions/BoletaExtension.cs", "chunked_list": ["\ufeffusing LibreDteDotNet.RestRequest.Interfaces;\n\nnamespace LibreDteDotNet.RestRequest.Extensions\n{\n    public static class BoletaExtension\n    {\n        public static IBoleta Conectar(this IBoleta folioService)\n        {\n            IBoleta instance = folioService;\n            return instance.SetCookieCertificado().Result;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Extensions/ContribuyenteExtension.cs", "chunked_list": ["\ufeffusing LibreDteDotNet.RestRequest.Interfaces;\n\nnamespace LibreDteDotNet.RestRequest.Extensions\n{\n    public static class ContribuyenteExtension\n    {\n        public static IContribuyente Conectar(this IContribuyente folioService)\n        {\n            IContribuyente instance = folioService;\n            return instance.SetCookieCertificado().Result;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Extensions/FolioCafExtension.cs", "chunked_list": ["\ufeffusing System.Xml.Linq;\n\nusing LibreDteDotNet.RestRequest.Interfaces;\n\nnamespace LibreDteDotNet.RestRequest.Extensions\n{\n    public static class FolioCafExtension\n    {\n        private static CancellationToken CancellationToken { get; set; }\n\n        public static IFolioCaf Conectar(this IFolioCaf instance)\n        {\n            return instance.SetCookieCertificado().Result;\n        }\n", "        private static CancellationToken CancellationToken { get; set; }\n\n        public static IFolioCaf Conectar(this IFolioCaf instance)\n        {\n            return instance.SetCookieCertificado().Result;\n        }\n\n        public static async Task<XDocument> Descargar(this Task<IFolioCaf> instance)\n        {\n            return await (await instance).Descargar();\n        }\n", "        public static async Task<IFolioCaf> Confirmar(this Task<IFolioCaf> instance)\n        {\n            return await (await instance).Confirmar();\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Services/BoletaService.cs", "chunked_list": ["\ufeffusing System.Net;\n\nusing LibreDteDotNet.Common;\nusing LibreDteDotNet.RestRequest.Infraestructure;\nusing LibreDteDotNet.RestRequest.Interfaces;\n\nusing Microsoft.Extensions.Configuration;\n\nnamespace LibreDteDotNet.RestRequest.Services\n{\n    internal class BoletaService : ComunEnum, IBoleta\n    {", "namespace LibreDteDotNet.RestRequest.Services\n{\n    internal class BoletaService : ComunEnum, IBoleta\n    {\n        private readonly IConfiguration configuration;\n        private readonly IRepositoryWeb repositoryWeb;\n\n        public BoletaService(IRepositoryWeb repositoryWeb, IConfiguration configuration)\n        {\n            this.repositoryWeb = repositoryWeb;\n            this.configuration = configuration;\n        }\n", "        public async Task<string> GetConsumoByFecha(\n            string anoIni,\n            string mesIni,\n            string anoFin,\n            string mesFin,\n            string rutCons,\n            string dvCons\n        )\n        {\n            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            string rut = configuration.GetSection(\"Rut\").Value!;\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlBoletas)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"anoIni\", anoIni),\n                            new KeyValuePair<string, string>(\"mesIni\", mesIni),\n                            new KeyValuePair<string, string>(\"anoFin\", anoFin),\n                            new KeyValuePair<string, string>(\"mesFin\", mesFin),\n                            new KeyValuePair<string, string>(\"rutCons\", rutCons),\n                            new KeyValuePair<string, string>(\"dvCons\", dvCons),\n                            new KeyValuePair<string, string>(\n                                \"rutConsulta\",\n                                rut.Split('-').GetValue(0)!.ToString()!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"dvConsulta\",\n                                rut.Split('-').GetValue(1)!.ToString()!\n                            ),\n                            new KeyValuePair<string, string>(\"AREA\", \"P\")\n                        }\n                    )\n                }\n            )!;\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            string rut = configuration.GetSection(\"Rut\").Value!;\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlBoletas)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"anoIni\", anoIni),\n                            new KeyValuePair<string, string>(\"mesIni\", mesIni),\n                            new KeyValuePair<string, string>(\"anoFin\", anoFin),\n                            new KeyValuePair<string, string>(\"mesFin\", mesFin),\n                            new KeyValuePair<string, string>(\"rutCons\", rutCons),\n                            new KeyValuePair<string, string>(\"dvCons\", dvCons),\n                            new KeyValuePair<string, string>(\n                                \"rutConsulta\",\n                                rut.Split('-').GetValue(0)!.ToString()!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"dvConsulta\",\n                                rut.Split('-').GetValue(1)!.ToString()!\n                            ),\n                            new KeyValuePair<string, string>(\"AREA\", \"P\")\n                        }\n                    )\n                }\n            )!;\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "        public async Task<IBoleta> SetCookieCertificado()\n        {\n            HttpStatCode = await repositoryWeb.Conectar(Properties.Resources.UrlBasePalena);\n            return this;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Services/FolioCafService.cs", "chunked_list": ["\ufeffusing System.Xml.Linq;\n\nusing EnumsNET;\n\nusing LibreDteDotNet.Common;\nusing LibreDteDotNet.RestRequest.Help;\nusing LibreDteDotNet.RestRequest.Infraestructure;\nusing LibreDteDotNet.RestRequest.Interfaces;\n\nnamespace LibreDteDotNet.RestRequest.Services", "\nnamespace LibreDteDotNet.RestRequest.Services\n{\n    internal class FolioCafService : ComunEnum, IFolioCaf\n    {\n        public Dictionary<string, string> InputsText { get; set; } =\n            new Dictionary<string, string>();\n\n        private readonly IRepositoryWeb repositoryWeb;\n        private const string input = \"input[type='text'],input[type='hidden']\";\n\n        public FolioCafService(IRepositoryWeb repositoryWeb)\n        {\n            this.repositoryWeb = repositoryWeb;\n        }\n", "        private readonly IRepositoryWeb repositoryWeb;\n        private const string input = \"input[type='text'],input[type='hidden']\";\n\n        public FolioCafService(IRepositoryWeb repositoryWeb)\n        {\n            this.repositoryWeb = repositoryWeb;\n        }\n\n        public async Task<string> GetHistorial(string rut, string dv, TipoDoc tipodoc)\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafHistorial)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"RUT_EMP\", rut),\n                            new KeyValuePair<string, string>(\"DV_EMP\", dv),\n                            new KeyValuePair<string, string>(\"PAGINA\", \"1\"), // P\u00c1G. 2,3 ETC.\n                            new KeyValuePair<string, string>(\n                                \"COD_DOCTO\",\n                                ((int)tipodoc).ToString()\n                            ),\n                        }\n                    )\n                }\n            )!;\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "        public async Task<string> GetHistorial(string rut, string dv, TipoDoc tipodoc)\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafHistorial)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"RUT_EMP\", rut),\n                            new KeyValuePair<string, string>(\"DV_EMP\", dv),\n                            new KeyValuePair<string, string>(\"PAGINA\", \"1\"), // P\u00c1G. 2,3 ETC.\n                            new KeyValuePair<string, string>(\n                                \"COD_DOCTO\",\n                                ((int)tipodoc).ToString()\n                            ),\n                        }\n                    )\n                }\n            )!;\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "        public async Task<IFolioCaf> ReObtener(\n            string rut,\n            string dv,\n            string cant,\n            string dia,\n            string mes,\n            string year,\n            string folioini,\n            string foliofin,\n            TipoDoc tipodoc\n        )\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafReobtiene)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"RUT_EMP\", rut),\n                            new KeyValuePair<string, string>(\"DV_EMP\", dv),\n                            new KeyValuePair<string, string>(\n                                \"COD_DOCTO\",\n                                ((int)tipodoc).ToString()\n                            ),\n                            new KeyValuePair<string, string>(\"FOLIO_INI\", folioini),\n                            new KeyValuePair<string, string>(\"FOLIO_FIN\", foliofin),\n                            new KeyValuePair<string, string>(\"CANT_DOCTOS\", cant),\n                            new KeyValuePair<string, string>(\"DIA\", dia),\n                            new KeyValuePair<string, string>(\"MES\", mes),\n                            new KeyValuePair<string, string>(\"ANO\", year),\n                        }\n                    )\n                }\n            )!;\n            InputsText = await HtmlParse.GetValuesFromTag(input, msg, CancellationToken.None);\n            return this;\n        }\n", "        public async Task<IFolioCaf> Obtener(\n            string rut,\n            string dv,\n            string cant,\n            string cantmax,\n            TipoDoc tipodoc\n        )\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafConfirma)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"RUT_EMP\", rut),\n                            new KeyValuePair<string, string>(\"DV_EMP\", dv),\n                            new KeyValuePair<string, string>(\"FOLIO_INICIAL\", \"0\"),\n                            new KeyValuePair<string, string>(\n                                \"COD_DOCTO\",\n                                ((int)tipodoc).ToString()\n                            ),\n                            new KeyValuePair<string, string>(\"AFECTO_IVA\", \"S\"),\n                            new KeyValuePair<string, string>(\"ANOTACION\", \"N\"),\n                            new KeyValuePair<string, string>(\"CON_CREDITO\", \"1\"),\n                            new KeyValuePair<string, string>(\"CON_AJUSTE\", \"0\"),\n                            new KeyValuePair<string, string>(\"FACTOR\", \"1.00\"),\n                            new KeyValuePair<string, string>(\"MAX_AUTOR\", cantmax),\n                            new KeyValuePair<string, string>(\"ULT_TIMBRAJE\", \"1\"),\n                            new KeyValuePair<string, string>(\"CON_HISTORIA\", \"0\"),\n                            new KeyValuePair<string, string>(\"FOLIO_INICRE\", \"\"),\n                            new KeyValuePair<string, string>(\"FOLIO_FINCRE\", \"\"),\n                            new KeyValuePair<string, string>(\"FECHA_ANT\", \"\"),\n                            new KeyValuePair<string, string>(\"ESTADO_TIMBRAJE\", \"\"),\n                            new KeyValuePair<string, string>(\"CONTROL\", \"\"),\n                            new KeyValuePair<string, string>(\"CANT_TIMBRAJES\", \"\"),\n                            new KeyValuePair<string, string>(\"CANT_DOCTOS\", cant),\n                            new KeyValuePair<string, string>(\"FOLIOS_DISP\", \"21\")\n                        }\n                    )\n                }\n            )!;\n            InputsText = await HtmlParse.GetValuesFromTag(input, msg, CancellationToken.None);\n            return this;\n        }\n", "        public async Task<XDocument> Descargar()\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafGeneraFile)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\n                                \"RUT_EMP\",\n                                InputsText.GetValueOrDefault(\"RUT_EMP\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"DV_EMP\",\n                                InputsText.GetValueOrDefault(\"DV_EMP\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"COD_DOCTO\",\n                                InputsText.GetValueOrDefault(\"COD_DOCTO\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIO_INI\",\n                                InputsText.GetValueOrDefault(\"FOLIO_INI\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIO_FIN\",\n                                InputsText.GetValueOrDefault(\"FOLIO_FIN\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FECHA\",\n                                $\"{InputsText.GetValueOrDefault(\"FECHA\")!}\"\n                            )\n                        }\n                    )\n                }\n            )!;\n            using StreamReader reader = new(await msg.Content.ReadAsStreamAsync());\n            return XDocument.Load(reader);\n        }\n", "        public async Task<IFolioCaf> SetCookieCertificado()\n        {\n            HttpStatCode = await repositoryWeb.Conectar(Properties.Resources.UrlBasePalena);\n            return this;\n        }\n\n        public async Task<Dictionary<string, string>> GetRangoMax(\n            string rut,\n            string dv,\n            TipoDoc tipodoc\n        )\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafMaxRango)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\n                                \"AFECTO_IVA\",\n                                tipodoc.AsString(EnumFormat.Description)!\n                            ),\n                            new KeyValuePair<string, string>(\"RUT_EMP\", rut),\n                            new KeyValuePair<string, string>(\"DV_EMP\", dv),\n                            new KeyValuePair<string, string>(\"COD_DOCTO\", ((int)tipodoc).ToString())\n                        }\n                    )\n                }\n            )!;\n            InputsText = await HtmlParse.GetValuesFromTag(input, msg, CancellationToken.None);\n            return InputsText;\n        }\n", "        public async Task<IFolioCaf> Confirmar()\n        {\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlCafConfirmaFile)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\n                                \"NOMUSU\",\n                                InputsText.GetValueOrDefault(\"NOMUSU\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CON_CREDITO\",\n                                InputsText.GetValueOrDefault(\"CON_CREDITO\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CON_AJUSTE\",\n                                InputsText.GetValueOrDefault(\"CON_AJUSTE\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIOS_DISP\",\n                                InputsText.GetValueOrDefault(\"FOLIOS_DISP\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"MAX_AUTOR\",\n                                InputsText.GetValueOrDefault(\"MAX_AUTOR\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"ULT_TIMBRAJE\",\n                                InputsText.GetValueOrDefault(\"ULT_TIMBRAJE\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CON_HISTORIA\",\n                                InputsText.GetValueOrDefault(\"CON_HISTORIA\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CANT_TIMBRAJES\",\n                                InputsText.GetValueOrDefault(\"CANT_TIMBRAJES\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CON_AJUSTE\",\n                                InputsText.GetValueOrDefault(\"CON_AJUSTE\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIO_INICRE\",\n                                InputsText.GetValueOrDefault(\"FOLIO_INICRE\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIO_FINCRE\",\n                                InputsText.GetValueOrDefault(\"FOLIO_FINCRE\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FECHA_ANT\",\n                                InputsText.GetValueOrDefault(\"FECHA_ANT\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"ESTADO_TIMBRAJE\",\n                                InputsText.GetValueOrDefault(\"ESTADO_TIMBRAJE\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CONTROL\",\n                                InputsText.GetValueOrDefault(\"CONTROL\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIO_INI\",\n                                InputsText.GetValueOrDefault(\"FOLIO_INI\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"FOLIO_FIN\",\n                                InputsText.GetValueOrDefault(\"FOLIO_FIN\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"DIA\",\n                                InputsText.GetValueOrDefault(\"DIA\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"MES\",\n                                InputsText.GetValueOrDefault(\"MES\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"ANO\",\n                                InputsText.GetValueOrDefault(\"ANO\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"HORA\",\n                                InputsText.GetValueOrDefault(\"HORA\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"MINUTO\",\n                                InputsText.GetValueOrDefault(\"MINUTO\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"RUT_EMP\",\n                                InputsText.GetValueOrDefault(\"RUT_EMP\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"DV_EMP\",\n                                InputsText.GetValueOrDefault(\"DV_EMP\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"COD_DOCTO\",\n                                InputsText.GetValueOrDefault(\"COD_DOCTO\")!\n                            ),\n                            new KeyValuePair<string, string>(\n                                \"CANT_DOCTOS\",\n                                InputsText.GetValueOrDefault(\"CANT_DOCTOS\")!\n                            )\n                        }\n                    )\n                }\n            )!;\n            InputsText = await HtmlParse.GetValuesFromTag(input, msg, CancellationToken.None);\n            return this;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Services/ContribuyenteService.cs", "chunked_list": ["\ufeffusing System.Net;\n\nusing LibreDteDotNet.Common;\nusing LibreDteDotNet.RestRequest.Infraestructure;\nusing LibreDteDotNet.RestRequest.Interfaces;\n\nusing Microsoft.Extensions.Configuration;\n\nnamespace LibreDteDotNet.RestRequest.Services\n{\n    internal class ContribuyenteService : ComunEnum, IContribuyente\n    {", "namespace LibreDteDotNet.RestRequest.Services\n{\n    internal class ContribuyenteService : ComunEnum, IContribuyente\n    {\n        private readonly IRepositoryWeb repositoryWeb;\n        public string Rut { get; }\n\n        public ContribuyenteService(IRepositoryWeb repositoryWeb, IConfiguration configuration)\n        {\n            this.repositoryWeb = repositoryWeb;\n            Rut = configuration.GetSection(\"Rut\").Value!;\n        }\n", "        public async Task<string> GetInfo(string rutEmp, string dvEmp, string token)\n        {\n            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(HttpMethod.Post, Properties.Resources.UrlConsultaRut)\n                {\n                    Content = new FormUrlEncodedContent(\n                        new List<KeyValuePair<string, string>>()\n                        {\n                            new KeyValuePair<string, string>(\"RUT_EMP\", rutEmp),\n                            new KeyValuePair<string, string>(\"DV_EMP\", dvEmp)\n                        }\n                    )\n                }\n            )!;\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "        public async Task<IContribuyente> SetCookieCertificado()\n        {\n            HttpStatCode = await repositoryWeb.Conectar(Properties.Resources.UrlConsultaRut);\n            return this;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Services/DTEService.cs", "chunked_list": ["\ufeffusing System.Collections.Specialized;\nusing System.ComponentModel.DataAnnotations;\nusing System.Net;\nusing System.Net.Http.Headers;\nusing System.Net.Mime;\nusing System.Text;\nusing System.Web;\nusing System.Xml;\nusing System.Xml.Linq;\nusing System.Xml.Schema;", "using System.Xml.Linq;\nusing System.Xml.Schema;\n\nusing LibreDteDotNet.Common;\nusing LibreDteDotNet.Common.Models;\nusing LibreDteDotNet.RestRequest.Infraestructure;\nusing LibreDteDotNet.RestRequest.Interfaces;\n\nusing Microsoft.Extensions.Configuration;\n", "using Microsoft.Extensions.Configuration;\n\nnamespace LibreDteDotNet.RestRequest.Services\n{\n    internal class DTEService : ComunEnum, IDTE\n    {\n        private readonly IRepositoryWeb repositoryWeb;\n        private List<string> MensajeError { get; set; } = new List<string>();\n        private List<string> MensajeWarning { get; set; } = new List<string>();\n        private string Rut { get; }\n        private string PathFile { get; set; } = string.Empty;\n\n        public DTEService(IRepositoryWeb repositoryWeb, IConfiguration configuration)\n        {\n            this.repositoryWeb = repositoryWeb;\n            Rut = configuration.GetSection(\"Rut\").Value!;\n        }\n", "        private string Rut { get; }\n        private string PathFile { get; set; } = string.Empty;\n\n        public DTEService(IRepositoryWeb repositoryWeb, IConfiguration configuration)\n        {\n            this.repositoryWeb = repositoryWeb;\n            Rut = configuration.GetSection(\"Rut\").Value!;\n        }\n\n        public async Task<string> Enviar(string rutCompany, string DvCompany)\n        {\n            _ = await SetCookieCertificado(Properties.Resources.UrlUploadDTE);", "        public async Task<string> Enviar(string rutCompany, string DvCompany)\n        {\n            _ = await SetCookieCertificado(Properties.Resources.UrlUploadDTE);\n            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            else if (MensajeError.Any())\n            {\n                throw new ValidationException(string.Join(Environment.NewLine, MensajeError));\n            }", "            else if (MensajeWarning.Any())\n            {\n                throw new ValidationException(string.Join(Environment.NewLine, MensajeWarning));\n            }\n            byte[] xmlData = File.ReadAllBytes(PathFile);\n            string xmlStr = Encoding.GetEncoding(\"iso-8859-1\").GetString(xmlData);\n            Guid b = Guid.NewGuid();\n            using HttpRequestMessage request =\n                new(HttpMethod.Post, Properties.Resources.UrlUploadDTE);\n            request.Content = new StringContent(\n                string.Format(\n                    Properties.Resources.RequestDte,\n                    b,\n                    Rut.Split('-').GetValue(0)!.ToString(),\n                    b,\n                    Rut.Split('-').GetValue(1)!.ToString(),\n                    b,\n                    rutCompany,\n                    b,\n                    DvCompany,\n                    b,\n                    PathFile,\n                    xmlStr,\n                    b,\n                    Environment.NewLine\n                ),\n                Encoding.GetEncoding(\"ISO-8859-1\")\n            );\n            request.Content.Headers.ContentType = MediaTypeHeaderValue.Parse(\n                $\"multipart/form-data; boundary={b}\"\n            );\n            HttpResponseMessage response = await repositoryWeb.Send(request)!;\n            using StreamReader reader =\n                new(await response.EnsureSuccessStatusCode().Content.ReadAsStreamAsync());\n            return EnvioDTEStatus(XDocument.Load(reader));\n        }\n", "        public async Task<string> Enviar2(string pathfile, string rutCompany, string DvCompany)\n        {\n            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            else if (MensajeError.Any())\n            {\n                throw new ValidationException(string.Join(Environment.NewLine, MensajeError));\n            }\n            else if (MensajeWarning.Any())\n            {\n                throw new ValidationException(string.Join(Environment.NewLine, MensajeWarning));\n            }\n            //!!!!!!!!!!!!!!!!!!! NO FUNCIONA!!!!!!!!!!!!!!!!!!!!\n            using HttpRequestMessage request =\n                new(HttpMethod.Post, Properties.Resources.UrlUploadDTE);\n            MultipartFormDataContent form =\n                new()\n                {\n                    { new StringContent(Rut.Split('-').GetValue(0)!.ToString()!), \"\\\"rutSender\\\"\" },\n                    { new StringContent(Rut.Split('-').GetValue(1)!.ToString()!), \"\\\"dvSender\\\"\" },\n                    { new StringContent(rutCompany), \"\\\"rutCompany\\\"\" },\n                    { new StringContent(DvCompany), \"\\\"dvCompany\\\"\" }\n                };\n            await using FileStream stream = File.OpenRead(pathfile);\n            StreamContent streamContent = new(stream);\n            streamContent.Headers.ContentType = MediaTypeHeaderValue.Parse(MediaTypeNames.Text.Xml);\n            form.Add(streamContent, \"\\\"archivo\\\"\", Path.GetFileName(pathfile));\n            request.Content = form;\n            HttpResponseMessage response = await repositoryWeb.Send(request)!;\n            using StreamReader reader =\n                new(await response.EnsureSuccessStatusCode().Content.ReadAsStreamAsync());\n            return EnvioDTEStatus(XDocument.Load(reader));\n        }\n", "            else if (MensajeWarning.Any())\n            {\n                throw new ValidationException(string.Join(Environment.NewLine, MensajeWarning));\n            }\n            //!!!!!!!!!!!!!!!!!!! NO FUNCIONA!!!!!!!!!!!!!!!!!!!!\n            using HttpRequestMessage request =\n                new(HttpMethod.Post, Properties.Resources.UrlUploadDTE);\n            MultipartFormDataContent form =\n                new()\n                {\n                    { new StringContent(Rut.Split('-').GetValue(0)!.ToString()!), \"\\\"rutSender\\\"\" },\n                    { new StringContent(Rut.Split('-').GetValue(1)!.ToString()!), \"\\\"dvSender\\\"\" },\n                    { new StringContent(rutCompany), \"\\\"rutCompany\\\"\" },\n                    { new StringContent(DvCompany), \"\\\"dvCompany\\\"\" }\n                };\n            await using FileStream stream = File.OpenRead(pathfile);\n            StreamContent streamContent = new(stream);\n            streamContent.Headers.ContentType = MediaTypeHeaderValue.Parse(MediaTypeNames.Text.Xml);\n            form.Add(streamContent, \"\\\"archivo\\\"\", Path.GetFileName(pathfile));\n            request.Content = form;\n            HttpResponseMessage response = await repositoryWeb.Send(request)!;\n            using StreamReader reader =\n                new(await response.EnsureSuccessStatusCode().Content.ReadAsStreamAsync());\n            return EnvioDTEStatus(XDocument.Load(reader));\n        }\n", "        public async Task<string> GetInfoDte(\n            string rutCompany,\n            string dvCompany,\n            TipoDoc tipoDTE,\n            string folioDTE\n        )\n        {\n            _ = await SetCookieCertificado(Properties.Resources.UrlValidaDte);\n            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            NameValueCollection query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"rutConsulta\"] = Rut.Split('-').GetValue(0)!.ToString()!;\n            query[\"dvConsulta\"] = Rut.Split('-').GetValue(1)!.ToString()!;\n            query[\"rutQuery\"] = rutCompany;\n            query[\"dvQuery\"] = dvCompany;\n            query[\"rutReceiver\"] = dvCompany;\n            query[\"dvReceiver\"] = dvCompany;\n            query[\"tipoDTE\"] = ((int)tipoDTE).ToString();\n            query[\"folioDTE\"] = folioDTE;\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(\n                    HttpMethod.Get,\n                    $\"{Properties.Resources.UrlValidaDte}?{query}\"\n                )\n            )!;\n            Dispose();\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            NameValueCollection query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"rutConsulta\"] = Rut.Split('-').GetValue(0)!.ToString()!;\n            query[\"dvConsulta\"] = Rut.Split('-').GetValue(1)!.ToString()!;\n            query[\"rutQuery\"] = rutCompany;\n            query[\"dvQuery\"] = dvCompany;\n            query[\"rutReceiver\"] = dvCompany;\n            query[\"dvReceiver\"] = dvCompany;\n            query[\"tipoDTE\"] = ((int)tipoDTE).ToString();\n            query[\"folioDTE\"] = folioDTE;\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(\n                    HttpMethod.Get,\n                    $\"{Properties.Resources.UrlValidaDte}?{query}\"\n                )\n            )!;\n            Dispose();\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "        public async Task<string> GetInfoDte(\n            string rutCompany,\n            string dvCompany,\n            string rutReceiver,\n            string dvReceiver,\n            TipoDoc tipoDTE,\n            string folioDTE,\n            string fechaDTE,\n            string montoDTE\n        )\n        {\n            _ = await SetCookieCertificado(Properties.Resources.UrlEstadoDte);", "            if (HttpStatCode != HttpStatusCode.OK)\n            {\n                throw new Exception(\"Debe conectarse primero.\");\n            }\n            NameValueCollection query = HttpUtility.ParseQueryString(string.Empty);\n            query[\"rutQuery\"] = Rut.Split('-').GetValue(0)!.ToString()!;\n            query[\"dvQuery\"] = Rut.Split('-').GetValue(1)!.ToString()!;\n            query[\"rutCompany\"] = rutCompany;\n            query[\"dvCompany\"] = dvCompany;\n            query[\"rutReceiver\"] = dvCompany;\n            query[\"dvReceiver\"] = dvCompany;\n            query[\"tipoDTE\"] = ((int)tipoDTE).ToString();\n            query[\"folioDTE\"] = folioDTE;\n            query[\"fechaDTE\"] = fechaDTE;\n            query[\"montoDTE\"] = montoDTE;\n            using HttpResponseMessage? msg = await repositoryWeb.Send(\n                new HttpRequestMessage(\n                    HttpMethod.Get,\n                    $\"{Properties.Resources.UrlEstadoDte}?{query}\"\n                )\n            )!;\n            Dispose();\n            return await msg.Content.ReadAsStringAsync();\n        }\n", "        public async Task<IDTE> SetCookieCertificado(string url)\n        {\n            HttpStatCode = await repositoryWeb.Conectar(url);\n            return this;\n        }\n\n        private void ValidationEventHandler(object sender, ValidationEventArgs e)\n        {\n            if (e.Severity == XmlSeverityType.Warning)\n            {\n                MensajeWarning!.Add(e.Message);\n            }", "            if (e.Severity == XmlSeverityType.Warning)\n            {\n                MensajeWarning!.Add(e.Message);\n            }\n            else if (e.Severity == XmlSeverityType.Error)\n            {\n                MensajeError!.Add(e.Message);\n            }\n        }\n\n        public async Task<IDTE> Validar<T>(string path)\n        {\n            PathFile = path;\n            using FileStream stream = File.OpenRead(path);\n            XDocument r = await XDocument.LoadAsync(\n                stream,\n                LoadOptions.None,\n                CancellationToken.None\n            );\n            XName first = r.Root!.Name;\n            XmlReaderSettings settings = new() { ValidationType = ValidationType.Schema };\n            switch (first.LocalName)\n            {\n                case \"EnvioDTE\":\n                    settings.ValidationEventHandler += ValidationEventHandler!;\n                    _ = settings.Schemas.Add(\n                        \"http://www.sii.cl/SiiDte\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\EnvioDTE_v10.xsd\"\n                    );\n                    _ = settings.Schemas.Add(\n                        \"http://www.sii.cl/SiiDte\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\DTE_v10.xsd\"\n                    );\n                    _ = settings.Schemas.Add(\n                        \"http://www.sii.cl/SiiDte\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\SiiTypes_v10.xsd\"\n                    );\n                    _ = settings.Schemas.Add(\n                        \"http://www.w3.org/2000/09/xmldsig#\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\xmldsignature_v10.xsd\"\n                    );\n                    EnvioDTE set = Deserializa<EnvioDTE>(settings, path);\n                    return this;\n                // return (T)Convert.ChangeType(set, typeof(T))!;\n                case \"RespuestaDTE\":\n                    break;\n                case \"EnvioRecibos\":\n                    break;\n                case \"DTE\":\n                    break;\n                default:\n                    break;\n            }\n            // return (T)Convert.ChangeType(null, typeof(T))!;\n            return this;\n        }\n", "        public async Task<IDTE> Validar<T>(string path)\n        {\n            PathFile = path;\n            using FileStream stream = File.OpenRead(path);\n            XDocument r = await XDocument.LoadAsync(\n                stream,\n                LoadOptions.None,\n                CancellationToken.None\n            );\n            XName first = r.Root!.Name;\n            XmlReaderSettings settings = new() { ValidationType = ValidationType.Schema };\n            switch (first.LocalName)\n            {\n                case \"EnvioDTE\":\n                    settings.ValidationEventHandler += ValidationEventHandler!;\n                    _ = settings.Schemas.Add(\n                        \"http://www.sii.cl/SiiDte\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\EnvioDTE_v10.xsd\"\n                    );\n                    _ = settings.Schemas.Add(\n                        \"http://www.sii.cl/SiiDte\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\DTE_v10.xsd\"\n                    );\n                    _ = settings.Schemas.Add(\n                        \"http://www.sii.cl/SiiDte\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\SiiTypes_v10.xsd\"\n                    );\n                    _ = settings.Schemas.Add(\n                        \"http://www.w3.org/2000/09/xmldsig#\",\n                        @$\"{Environment.CurrentDirectory}\\Resources\\xmldsignature_v10.xsd\"\n                    );\n                    EnvioDTE set = Deserializa<EnvioDTE>(settings, path);\n                    return this;\n                // return (T)Convert.ChangeType(set, typeof(T))!;\n                case \"RespuestaDTE\":\n                    break;\n                case \"EnvioRecibos\":\n                    break;\n                case \"DTE\":\n                    break;\n                default:\n                    break;\n            }\n            // return (T)Convert.ChangeType(null, typeof(T))!;\n            return this;\n        }\n", "        public async void Dispose()\n        {\n            _ = await repositoryWeb!.Send(\n                new HttpRequestMessage(\n                    HttpMethod.Get,\n                    \"https://zeusr.sii.cl/cgi_AUT2000/autTermino.cgi\"\n                )!\n            )!;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Services/LibroService.cs", "chunked_list": ["\ufeffusing System.Net.Http.Json;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nusing EnumsNET;\n\nusing LibreDteDotNet.Common;\nusing LibreDteDotNet.RestRequest.Infraestructure;\nusing LibreDteDotNet.RestRequest.Interfaces;\nusing LibreDteDotNet.RestRequest.Models.Request;", "using LibreDteDotNet.RestRequest.Interfaces;\nusing LibreDteDotNet.RestRequest.Models.Request;\nusing LibreDteDotNet.RestRequest.Models.Response;\n\nnamespace LibreDteDotNet.RestRequest.Services\n{\n    internal class LibroService : ComunEnum, ILibro\n    {\n        private readonly IRepositoryRest repositoryRest;\n        private readonly JsonSerializerOptions options =\n            new() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };", "        private readonly IRepositoryRest repositoryRest;\n        private readonly JsonSerializerOptions options =\n            new() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };\n        private const string namesspace =\n            \"cl.sii.sdi.lob.diii.consemitidos.data.api.interfaces.FacadeService/\";\n\n        public LibroService(IRepositoryRest repositoryRest)\n        {\n            this.repositoryRest = repositoryRest;\n        }\n", "        public async Task<ResLibroResumen?> GetResumen(\n            string token,\n            string rut,\n            string dv,\n            string period,\n            TipoOperacion op\n        )\n        {\n            ReqLibroResumen libro =\n                new(\n                    new ReqMetaDataLibroResumen()\n                    {\n                        ConversationId = token,\n                        Namespace = $\"{namesspace}getResumen\",\n                        TransactionId = Guid.NewGuid().ToString()\n                    },\n                    new ReqDataLibroResumen()\n                    {\n                        DvContribuyente = dv,\n                        Operacion = (int)op,\n                        Periodo = period,\n                        RutContribuyente = rut\n                    }\n                );\n            string json = JsonSerializer.Serialize(libro);\n            try\n            {\n                HttpResponseMessage msg = await repositoryRest.PostJson(\n                    json,\n                    Properties.Resources.UrlLibroResumen,\n                    token\n                )!;\n                return await msg.EnsureSuccessStatusCode()\n                    .Content.ReadFromJsonAsync<ResLibroResumen>(options);\n            }", "            catch (Exception)\n            {\n                throw;\n            }\n        }\n\n        public async Task<ResLibroDetalle?> GetDetalle(\n            string token,\n            string rut,\n            string dv,\n            string period,\n            TipoDoc tipodoc,\n            TipoOperacion op\n        )\n        {\n            ReqLibroDetalle libro =\n                new(\n                    new ReqMetaDataLibroDetalle()\n                    {\n                        ConversationId = token,\n                        Namespace = $\"{namesspace}{op.AsString(EnumFormat.Description)}\",\n                        TransactionId = Guid.NewGuid().ToString()\n                    },\n                    new ReqDataLibroDetalle()\n                    {\n                        DerrCodigo = ((int)tipodoc).ToString(),\n                        Dv = dv,\n                        Operacion = (int)op,\n                        Periodo = period,\n                        RefNCD = \"0\",\n                        Rut = rut,\n                        TipoDoc = ((int)tipodoc).ToString()\n                    }\n                );\n            string json = JsonSerializer.Serialize(libro);\n            try\n            {\n                HttpResponseMessage msg = await repositoryRest.PostJson(\n                    json,\n                    $\"{Properties.Resources.UrlLibroDetalle}{op.AsString(EnumFormat.Description)}\",\n                    token\n                )!;\n                return await msg.EnsureSuccessStatusCode()\n                    .Content.ReadFromJsonAsync<ResLibroDetalle>(options);\n            }", "            catch (Exception)\n            {\n                throw;\n            }\n        }\n\n        public async Task<ReqLibroResumenCsv?> GetCsvFile(\n            string token,\n            string rut,\n            string dv,\n            string period,\n            TipoDoc tipodoc,\n            TipoOperacion op\n        )\n        {\n            string nspace = string.Empty;\n            string url = string.Empty;", "            if (op == TipoOperacion.Emitido)\n            {\n                nspace = $\"{namesspace}/getDetalleExporta\";\n                url =\n                    \"https://www4.sii.cl/consemitidosinternetui/services/data/facadeService/getDetalleExportar\";\n            }\n            else if (op == TipoOperacion.Recibido)\n            {\n                nspace = $\"{namesspace}getDetalleExportarRecibidos\";\n                url =\n                    \"https://www4.sii.cl/consemitidosinternetui/services/data/facadeService/getDetalleExportarRecibidos\";\n            }\n            ReqLibroDetalle libro =\n                new(\n                    new ReqMetaDataLibroDetalle()\n                    {\n                        ConversationId = token,\n                        Namespace = nspace,\n                        TransactionId = Guid.NewGuid().ToString()\n                    },\n                    new ReqDataLibroDetalle()\n                    {\n                        DerrCodigo = ((int)tipodoc).ToString(),\n                        Dv = dv,\n                        Operacion = (int)op,\n                        Periodo = period,\n                        RefNCD = \"0\",\n                        Rut = rut,\n                        TipoDoc = ((int)tipodoc).ToString()\n                    }\n                );\n            string json = JsonSerializer.Serialize(libro);\n            try\n            {\n                HttpResponseMessage msg = await repositoryRest.PostJson(json, url, token)!;\n                return await msg.EnsureSuccessStatusCode()\n                    .Content.ReadFromJsonAsync<ReqLibroResumenCsv>(options);\n            }", "            catch (Exception)\n            {\n                throw;\n            }\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/ResDataLibroResumen.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class ResDataLibroResumen\n    {\n        [JsonPropertyName(\"resumenDte\")]\n        public List<ResResumenDte>? ResumenDte { get; set; }\n\n        [JsonPropertyName(\"datosAsync\")]\n        public object? DatosAsync { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/ResLibroResumen.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class ResLibroResumen\n    {\n        [JsonPropertyName(\"data\")]\n        public ResDataLibroResumen? Data { get; set; }\n\n        [JsonPropertyName(\"metaData\")]\n        public ResMetaDataLibroResumen? MetaData { get; set; }\n\n        [JsonPropertyName(\"respEstado\")]\n        public RespEstado? RespEstado { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/RespEstado.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class RespEstado\n    {\n        [JsonPropertyName(\"codRespuesta\")]\n        public int CodRespuesta { get; set; }\n\n        [JsonPropertyName(\"msgeRespuesta\")]\n        public string? MsgeRespuesta { get; set; }\n\n        [JsonPropertyName(\"codError\")]\n        public string? CodError { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/Detalle.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class Detalle\n    {\n        [JsonPropertyName(\"rutEmisor\")]\n        public string? RutEmisor { get; set; }\n\n        [JsonPropertyName(\"dvEmisor\")]\n        public string? DvEmisor { get; set; }\n\n        [JsonPropertyName(\"rznSocEmisor\")]\n        public object? RznSocEmisor { get; set; }\n\n        [JsonPropertyName(\"codigoTipoDoc\")]\n        public string? CodigoTipoDoc { get; set; }\n\n        [JsonPropertyName(\"descTipoDoc\")]\n        public string? DescTipoDoc { get; set; }\n\n        [JsonPropertyName(\"periodo\")]\n        public string? Periodo { get; set; }\n\n        [JsonPropertyName(\"rutReceptor\")]", "        public int RutReceptor { get; set; }\n\n        [JsonPropertyName(\"dvReceptor\")]\n        public string? DvReceptor { get; set; }\n\n        [JsonPropertyName(\"rznSocRecep\")]\n        public string? RznSocRecep { get; set; }\n\n        [JsonPropertyName(\"folio\")]\n        public int Folio { get; set; }\n\n        [JsonPropertyName(\"fechaEmision\")]\n        public string? FechaEmision { get; set; }\n\n        [JsonPropertyName(\"fechaEmisionA\")]\n        public string? FechaEmisionA { get; set; }\n\n        [JsonPropertyName(\"fechaRecepcion\")]\n        public string? FechaRecepcion { get; set; }\n\n        [JsonPropertyName(\"totalReparos\")]\n        public string? TotalReparos { get; set; }\n\n        [JsonPropertyName(\"mntNeto\")]", "        public int Folio { get; set; }\n\n        [JsonPropertyName(\"fechaEmision\")]\n        public string? FechaEmision { get; set; }\n\n        [JsonPropertyName(\"fechaEmisionA\")]\n        public string? FechaEmisionA { get; set; }\n\n        [JsonPropertyName(\"fechaRecepcion\")]\n        public string? FechaRecepcion { get; set; }\n\n        [JsonPropertyName(\"totalReparos\")]\n        public string? TotalReparos { get; set; }\n\n        [JsonPropertyName(\"mntNeto\")]", "        public long MntNeto { get; set; }\n\n        [JsonPropertyName(\"mntExento\")]\n        public long MntExento { get; set; }\n\n        [JsonPropertyName(\"mntIva\")]\n        public long MntIva { get; set; }\n\n        [JsonPropertyName(\"mntTotal\")]\n        public long MntTotal { get; set; }\n\n        [JsonPropertyName(\"tasaImptoIVA\")]", "        public long MntTotal { get; set; }\n\n        [JsonPropertyName(\"tasaImptoIVA\")]\n        public double TasaImptoIVA { get; set; }\n\n        [JsonPropertyName(\"dehOrdenEvento\")]\n        public string? DehOrdenEvento { get; set; }\n\n        [JsonPropertyName(\"dehDescripcion\")]\n        public string? DehDescripcion { get; set; }\n\n        [JsonPropertyName(\"totOtrosImp\")]\n        public string? TotOtrosImp { get; set; }\n\n        [JsonPropertyName(\"dhdrCodigo\")]", "        public long DhdrCodigo { get; set; }\n\n        [JsonPropertyName(\"rutFirmante\")]\n        public string? RutFirmante { get; set; }\n\n        [JsonPropertyName(\"dvFirmante\")]\n        public string? DvFirmante { get; set; }\n\n        [JsonPropertyName(\"idEnvio\")]\n        public string? IdEnvio { get; set; }\n\n        [JsonPropertyName(\"dhdrEmiCorreo\")]\n        public string? DhdrEmiCorreo { get; set; }\n\n        [JsonPropertyName(\"dhdrEmiTelefono1\")]\n        public string? DhdrEmiTelefono1 { get; set; }\n\n        [JsonPropertyName(\"dehOrdenEventoPublicar\")]\n        public string? DehOrdenEventoPublicar { get; set; }\n\n        [JsonPropertyName(\"diasDiferenciaFchVencimiento\")]\n        public string? DiasDiferenciaFchVencimiento { get; set; }\n\n        [JsonPropertyName(\"esPublicable\")]\n        public string? EsPublicable { get; set; }\n\n        [JsonPropertyName(\"leyendaNoPub\")]\n        public string? LeyendaNoPub { get; set; }\n\n        [JsonPropertyName(\"diasDifFchRecep\")]\n        public string? DiasDifFchRecep { get; set; }\n\n        [JsonPropertyName(\"fechaVencimiento\")]\n        public string? FechaVencimiento { get; set; }\n\n        [JsonPropertyName(\"fechaRecepcionMas9Dias\")]\n        public string? FechaRecepcionMas9Dias { get; set; }\n\n        [JsonPropertyName(\"dpuEliminacion\")]\n        public string? DpuEliminacion { get; set; }\n\n        [JsonPropertyName(\"difFchPublicacion\")]\n        public string? DifFchPublicacion { get; set; }\n\n        [JsonPropertyName(\"difFchEliminacion\")]\n        public string? DifFchEliminacion { get; set; }\n\n        [JsonPropertyName(\"pub\")]\n        public string? Pub { get; set; }\n\n        [JsonPropertyName(\"despub\")]\n        public string? Despub { get; set; }\n\n        [JsonPropertyName(\"estadoPub\")]\n        public string? EstadoPub { get; set; }\n\n        [JsonPropertyName(\"dpuFchPublicacion\")]\n        public string? DpuFchPublicacion { get; set; }\n\n        [JsonPropertyName(\"derrCodigo\")]\n        public string? DerrCodigo { get; set; }\n\n        [JsonPropertyName(\"derrDescripcion\")]\n        public string? DerrDescripcion { get; set; }\n\n        [JsonPropertyName(\"datosExpA\")]\n        public string? DatosExpA { get; set; }\n\n        [JsonPropertyName(\"datosExpB1\")]\n        public string? DatosExpB1 { get; set; }\n\n        [JsonPropertyName(\"datosExpB\")]\n        public string? DatosExpB { get; set; }\n\n        [JsonPropertyName(\"dtimCodigo\")]\n        public string? DtimCodigo { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/ResResumenDte.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class ResResumenDte\n    {\n        [JsonPropertyName(\"tipoDoc\")]\n        public int? TipoDoc { get; set; }\n\n        [JsonPropertyName(\"tipoDocDesc\")]\n        public string? TipoDocDesc { get; set; }\n\n        [JsonPropertyName(\"totalDoc\")]", "        public long TotalDoc { get; set; }\n\n        [JsonPropertyName(\"mntExento\")]\n        public long MntExento { get; set; }\n\n        [JsonPropertyName(\"mntNeto\")]\n        public long MntNeto { get; set; }\n\n        [JsonPropertyName(\"mntIVA\")]\n        public long MntIVA { get; set; }\n\n        [JsonPropertyName(\"mntTotal\")]", "        public long MntIVA { get; set; }\n\n        [JsonPropertyName(\"mntTotal\")]\n        public long MntTotal { get; set; }\n\n        [JsonPropertyName(\"seccion\")]\n        public string? Seccion { get; set; }\n\n        [JsonPropertyName(\"periodo\")]\n        public string? Periodo { get; set; }\n\n        [JsonPropertyName(\"rut\")]", "        public int Rut { get; set; }\n\n        [JsonPropertyName(\"dv\")]\n        public string? Dv { get; set; }\n\n        [JsonPropertyName(\"refNCD\")]\n        public int RefNCD { get; set; }\n\n        [JsonPropertyName(\"totalDocNCD\")]\n        public int TotalDocNCD { get; set; }\n    }\n}\n", "        public int TotalDocNCD { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/ResMetaDataLibroDetalle.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class ResMetaDataLibroDetalle\n    {\n        [JsonPropertyName(\"namespace\")]\n        public string? Namespace { get; set; }\n\n        [JsonPropertyName(\"conversationId\")]\n        public string? ConversationId { get; set; }\n\n        [JsonPropertyName(\"transactionId\")]\n        public string? TransactionId { get; set; }\n\n        [JsonPropertyName(\"page\")]\n        public object? Page { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/ResLibroDetalle.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class ResLibroDetalle\n    {\n        [JsonPropertyName(\"data\")]\n        public object Data { get; set; }\n\n        [JsonPropertyName(\"dataResp\")]\n        public DataResp DataResp { get; set; }\n\n        [JsonPropertyName(\"dataReferencias\")]", "        public DataResp DataResp { get; set; }\n\n        [JsonPropertyName(\"dataReferencias\")]\n        public object DataReferencias { get; set; }\n\n        [JsonPropertyName(\"dataReferenciados\")]\n        public object DataReferenciados { get; set; }\n\n        [JsonPropertyName(\"reparos\")]\n        public object Reparos { get; set; }\n\n        [JsonPropertyName(\"metaData\")]\n        public ResMetaDataLibroDetalle? MetaData { get; set; }\n\n        [JsonPropertyName(\"detalleDte\")]\n        public object? DetalleDte { get; set; }\n\n        [JsonPropertyName(\"impuestoAdicional\")]\n        public object? ImpuestoAdicional { get; set; }\n\n        [JsonPropertyName(\"respEstado\")]\n        public RespEstado? RespEstado { get; set; }\n    }\n}\n", "        public object Reparos { get; set; }\n\n        [JsonPropertyName(\"metaData\")]\n        public ResMetaDataLibroDetalle? MetaData { get; set; }\n\n        [JsonPropertyName(\"detalleDte\")]\n        public object? DetalleDte { get; set; }\n\n        [JsonPropertyName(\"impuestoAdicional\")]\n        public object? ImpuestoAdicional { get; set; }\n\n        [JsonPropertyName(\"respEstado\")]\n        public RespEstado? RespEstado { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/ResMetaDataLibroResumen.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class ResMetaDataLibroResumen\n    {\n        [JsonPropertyName(\"conversationId\")]\n        public string? ConversationId { get; set; }\n\n        [JsonPropertyName(\"transactionId\")]\n        public string? TransactionId { get; set; }\n\n        [JsonPropertyName(\"namespace\")]\n        public string? Namespace { get; set; }\n\n        [JsonPropertyName(\"info\")]\n        public object? Info { get; set; }\n\n        [JsonPropertyName(\"errors\")]\n        public object? Errors { get; set; }\n\n        [JsonPropertyName(\"page\")]\n        public object? Page { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Response/DataResp.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Response\n{\n    public class DataResp\n    {\n        [JsonPropertyName(\"detalles\")]\n        public List<Detalle>? Detalles { get; set; }\n\n        [JsonPropertyName(\"totMntExe\")]\n        public long TotMntExe { get; set; }\n\n        [JsonPropertyName(\"totMntNeto\")]", "        public long TotMntExe { get; set; }\n\n        [JsonPropertyName(\"totMntNeto\")]\n        public long TotMntNeto { get; set; }\n\n        [JsonPropertyName(\"totMntIVA\")]\n        public long TotMntIVA { get; set; }\n\n        [JsonPropertyName(\"totMntTotal\")]\n        public long TotMntTotal { get; set; }\n    }\n}\n", "        public long TotMntTotal { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqLibroResumenCsv.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nusing LibreDteDotNet.RestRequest.Models.Response;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    public class ReqLibroResumenCsv\n    {\n        [JsonPropertyName(\"data\")]\n        public List<string>? Data { get; set; }\n\n        [JsonPropertyName(\"metaData\")]\n        public ResMetaDataLibroResumen? MetaData { get; set; }\n\n        [JsonPropertyName(\"respEstado\")]\n        public RespEstado? RespEstado { get; set; }\n\n        [JsonPropertyName(\"nombreArchivo\")]\n        public string? NombreArchivo { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqLibroResumen.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    internal class ReqLibroResumen\n    {\n        // Root myDeserializedClass = JsonSerializer.Deserialize<Root>(myJsonResponse);\n\n        [JsonPropertyName(\"metaData\")]\n        public ReqMetaDataLibroResumen? MetaData { get; set; }\n\n        [JsonPropertyName(\"data\")]\n        public ReqDataLibroResumen? Data { get; set; }\n\n        public ReqLibroResumen(ReqMetaDataLibroResumen? metaData, ReqDataLibroResumen? data)\n        {\n            MetaData = metaData;\n            Data = data;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqLibroDetalle.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    public class ReqLibroDetalle\n    {\n        [JsonPropertyName(\"metaData\")]\n        public ReqMetaDataLibroDetalle? MetaData { get; set; }\n\n        [JsonPropertyName(\"data\")]\n        public ReqDataLibroDetalle? Data { get; set; }\n\n        public ReqLibroDetalle(ReqMetaDataLibroDetalle? metaData, ReqDataLibroDetalle? data)\n        {\n            MetaData = metaData;\n            Data = data;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqDataLibroResumen.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    public class ReqDataLibroResumen\n    {\n        [JsonPropertyName(\"periodo\")]\n        public string? Periodo { get; set; }\n\n        [JsonPropertyName(\"rutContribuyente\")]\n        public string? RutContribuyente { get; set; }\n\n        [JsonPropertyName(\"dvContribuyente\")]\n        public string? DvContribuyente { get; set; }\n\n        [JsonPropertyName(\"operacion\")]\n        public int? Operacion { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqMetaDataLibroResumen.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    public class ReqMetaDataLibroResumen\n    {\n        [JsonPropertyName(\"conversationId\")]\n        public string? ConversationId { get; set; }\n\n        [JsonPropertyName(\"transactionId\")]\n        public string? TransactionId { get; set; }\n\n        [JsonPropertyName(\"namespace\")]\n        public string? Namespace { get; set; }\n\n        [JsonPropertyName(\"page\")]\n        public object? Page { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqMetaDataLibroDetalle.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    public class ReqMetaDataLibroDetalle\n    {\n        [JsonPropertyName(\"namespace\")]\n        public string? Namespace { get; set; }\n\n        [JsonPropertyName(\"conversationId\")]\n        public string? ConversationId { get; set; }\n\n        [JsonPropertyName(\"transactionId\")]\n        public string? TransactionId { get; set; }\n\n        [JsonPropertyName(\"page\")]\n        public string? Page { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Models/Request/ReqDataLibroDetalle.cs", "chunked_list": ["\ufeffusing System.Text.Json.Serialization;\n\nnamespace LibreDteDotNet.RestRequest.Models.Request\n{\n    public class ReqDataLibroDetalle\n    {\n        [JsonPropertyName(\"tipoDoc\")]\n        public string? TipoDoc { get; set; }\n\n        [JsonPropertyName(\"rut\")]\n        public string? Rut { get; set; }\n\n        [JsonPropertyName(\"dv\")]\n        public string? Dv { get; set; }\n\n        [JsonPropertyName(\"periodo\")]\n        public string? Periodo { get; set; }\n\n        [JsonPropertyName(\"operacion\")]", "        public int Operacion { get; set; }\n\n        [JsonPropertyName(\"derrCodigo\")]\n        public string? DerrCodigo { get; set; }\n\n        [JsonPropertyName(\"refNCD\")]\n        public string? RefNCD { get; set; }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Interfaces/IFolioCaf.cs", "chunked_list": ["\ufeffusing System.Xml.Linq;\n\nusing static LibreDteDotNet.Common.ComunEnum;\n\nnamespace LibreDteDotNet.RestRequest.Interfaces\n{\n    public interface IFolioCaf\n    {\n        public Dictionary<string, string> InputsText { get; set; }\n        Task<string> GetHistorial(string rut, string dv, TipoDoc tipodoc);\n        Task<IFolioCaf> ReObtener(\n            string rut,\n            string dv,\n            string cant,\n            string dia,\n            string mes,\n            string year,\n            string folioini,\n            string foliofin,\n            TipoDoc tipodoc\n        );\n        Task<IFolioCaf> Obtener(\n            string rut,\n            string dv,\n            string cant,\n            string cantmax,\n            TipoDoc tipodoc\n        );\n        Task<XDocument> Descargar();\n        Task<IFolioCaf> SetCookieCertificado();\n        Task<Dictionary<string, string>> GetRangoMax(string rut, string dv, TipoDoc tipodoc);\n        Task<IFolioCaf> Confirmar();\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Interfaces/IDTE.cs", "chunked_list": ["\ufeffusing static LibreDteDotNet.Common.ComunEnum;\n\nnamespace LibreDteDotNet.RestRequest.Interfaces\n{\n    public interface IDTE : IDisposable\n    {\n        Task<IDTE> SetCookieCertificado(string url = default!);\n        Task<string> Enviar(string rutCompany, string DvCompany);\n        Task<string> Enviar2(string pathfile, string rutCompany, string DvCompany);\n        Task<string> GetInfoDte(\n            string rutCompany,\n            string dvCompany,\n            string rutReceiver,\n            string dvReceiver,\n            TipoDoc tipoDTE,\n            string folioDTE,\n            string fechaDTE,\n            string montoDTE\n        );\n        Task<string> GetInfoDte(\n            string rutCompany,\n            string dvCompany,\n            TipoDoc tipoDTE,\n            string folioDTE\n        );\n        Task<IDTE> Validar<T>(string path);\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Interfaces/IBoleta.cs", "chunked_list": ["\ufeffnamespace LibreDteDotNet.RestRequest.Interfaces\n{\n    public interface IBoleta\n    {\n        Task<IBoleta> SetCookieCertificado();\n        Task<string> GetConsumoByFecha(\n            string anoIni,\n            string mesIni,\n            string anoFin,\n            string mesFin,\n            string rutCons,\n            string dvCons\n        );\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Interfaces/IContribuyente.cs", "chunked_list": ["\ufeffnamespace LibreDteDotNet.RestRequest.Interfaces\n{\n    public interface IContribuyente\n    {\n        Task<string> GetInfo(string rutEmp, string dvEmp, string token);\n\n        Task<IContribuyente> SetCookieCertificado();\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Interfaces/ILibro.cs", "chunked_list": ["\ufeffusing LibreDteDotNet.RestRequest.Models.Request;\nusing LibreDteDotNet.RestRequest.Models.Response;\n\nusing static LibreDteDotNet.Common.ComunEnum;\n\nnamespace LibreDteDotNet.RestRequest.Interfaces\n{\n    public interface ILibro\n    {\n        Task<ResLibroResumen?> GetResumen(\n            string token,\n            string rut,\n            string dv,\n            string period,\n            TipoOperacion op\n        );\n        Task<ResLibroDetalle?> GetDetalle(\n            string token,\n            string rut,\n            string dv,\n            string period,\n            TipoDoc tipodoc,\n            TipoOperacion op\n        );\n        Task<ReqLibroResumenCsv?> GetCsvFile(\n            string token,\n            string rut,\n            string dv,\n            string period,\n            TipoDoc tipodoc,\n            TipoOperacion op\n        );\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Serializadores/RespRegistroReclamo.cs", "chunked_list": ["\ufeff//using System.Xml.Serialization;\n\n//namespace LibreDteDotNet.RestRequest.Serializadores\n//{\n//    public class RespConsultarFechaRecepcionSii\n//    {\n//        // NOTA: El c\u00f3digo generado puede requerir, como m\u00ednimo, .NET Framework 4.5 o .NET Core/Standard 2.0.\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]\n//        [XmlRoot(Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\", IsNullable = false)]", "//        public partial class Envelope\n//        {\n//            private EnvelopeBody? bodyField;\n\n//            /// <remarks/>\n//            public EnvelopeBody? Body\n//            {\n//                get => bodyField;\n//                set => bodyField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]", "//        public partial class EnvelopeBody\n//        {\n//            private consultarFechaRecepcionSiiResponse? consultarFechaRecepcionSiiResponseField;\n\n//            /// <remarks/>\n//            [XmlElement(Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\")]\n//            public consultarFechaRecepcionSiiResponse? consultarFechaRecepcionSiiResponse\n//            {\n//                get => consultarFechaRecepcionSiiResponseField;\n//                set => consultarFechaRecepcionSiiResponseField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\")]\n//        [XmlRoot(Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\", IsNullable = false)]", "//        public partial class consultarFechaRecepcionSiiResponse\n//        {\n//            private string? returnField;\n\n//            /// <remarks/>\n//            [XmlElement(Namespace = \"\")]\n//            public string? @return\n//            {\n//                get => returnField;\n//                set => returnField = value;\n//            }\n//        }\n//    }\n", "//    public class RespListarEventosHistDoc\n//    {\n//        // NOTA: El c\u00f3digo generado puede requerir, como m\u00ednimo, .NET Framework 4.5 o .NET Core/Standard 2.0.\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]\n//        [XmlRoot(Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\", IsNullable = false)]\n//        public partial class Envelope\n//        {\n//            private EnvelopeBody? bodyField;\n\n//            /// <remarks/>\n//            public EnvelopeBody? Body\n//            {\n//                get => bodyField;\n//                set => bodyField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]", "//        public partial class Envelope\n//        {\n//            private EnvelopeBody? bodyField;\n\n//            /// <remarks/>\n//            public EnvelopeBody? Body\n//            {\n//                get => bodyField;\n//                set => bodyField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]", "//        public partial class EnvelopeBody\n//        {\n//            private listarEventosHistDocResponse? listarEventosHistDocResponseField;\n\n//            /// <remarks/>\n//            [XmlElement(Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\")]\n//            public listarEventosHistDocResponse? listarEventosHistDocResponse\n//            {\n//                get => listarEventosHistDocResponseField;\n//                set => listarEventosHistDocResponseField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\")]\n//        [XmlRoot(Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\", IsNullable = false)]", "//        public partial class listarEventosHistDocResponse\n//        {\n//            private @return? returnField;\n\n//            /// <remarks/>\n//            [XmlElement(Namespace = \"\")]\n//            public @return? @return\n//            {\n//                get => returnField;\n//                set => returnField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true)]\n//        [XmlRoot(Namespace = \"\", IsNullable = false)]", "//        public partial class @return\n//        {\n//            private byte codRespField;\n\n//            private string? descRespField;\n\n//            private returnListaEventosDoc? listaEventosDocField;\n\n//            /// <remarks/>\n//            public byte codResp\n//            {\n//                get => codRespField;\n//                set => codRespField = value;\n//            }\n\n//            /// <remarks/>\n//            public string? descResp\n//            {\n//                get => descRespField;\n//                set => descRespField = value;\n//            }\n\n//            /// <remarks/>\n//            public returnListaEventosDoc? listaEventosDoc\n//            {\n//                get => listaEventosDocField;\n//                set => listaEventosDocField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true)]", "//            public byte codResp\n//            {\n//                get => codRespField;\n//                set => codRespField = value;\n//            }\n\n//            /// <remarks/>\n//            public string? descResp\n//            {\n//                get => descRespField;\n//                set => descRespField = value;\n//            }\n\n//            /// <remarks/>\n//            public returnListaEventosDoc? listaEventosDoc\n//            {\n//                get => listaEventosDocField;\n//                set => listaEventosDocField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true)]", "//        public partial class returnListaEventosDoc\n//        {\n//            private string? codEventoField;\n\n//            private string? descEventoField;\n\n//            private uint rutResponsableField;\n\n//            private string? dvResponsableField;\n\n//            private string? fechaEventoField;\n\n//            /// <remarks/>\n//            public string? codEvento\n//            {\n//                get => codEventoField;\n//                set => codEventoField = value;\n//            }\n\n//            /// <remarks/>\n//            public string? descEvento\n//            {\n//                get => descEventoField;\n//                set => descEventoField = value;\n//            }\n\n//            /// <remarks/>", "//            public uint rutResponsable\n//            {\n//                get => rutResponsableField;\n//                set => rutResponsableField = value;\n//            }\n\n//            /// <remarks/>\n//            public string? dvResponsable\n//            {\n//                get => dvResponsableField;\n//                set => dvResponsableField = value;\n//            }\n\n//            /// <remarks/>\n//            public string? fechaEvento\n//            {\n//                get => fechaEventoField;\n//                set => fechaEventoField = value;\n//            }\n//        }\n//    }\n", "//    public class RespIngresarAceptacionReclamoDoc\n//    {\n//        // NOTA: El c\u00f3digo generado puede requerir, como m\u00ednimo, .NET Framework 4.5 o .NET Core/Standard 2.0.\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]\n//        [XmlRoot(Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\", IsNullable = false)]\n//        public partial class Envelope\n//        {\n//            private EnvelopeBody? bodyField;\n\n//            /// <remarks/>", "//        public partial class Envelope\n//        {\n//            private EnvelopeBody? bodyField;\n\n//            /// <remarks/>\n//            public EnvelopeBody Body\n//            {\n//                get => bodyField!;\n//                set => bodyField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://schemas.xmlsoap.org/soap/envelope/\")]", "//        public partial class EnvelopeBody\n//        {\n//            private ingresarAceptacionReclamoDocResponse? ingresarAceptacionReclamoDocResponseField;\n\n//            /// <remarks/>\n//            [XmlElement(Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\")]\n//            public ingresarAceptacionReclamoDocResponse? ingresarAceptacionReclamoDocResponse\n//            {\n//                get => ingresarAceptacionReclamoDocResponseField;\n//                set => ingresarAceptacionReclamoDocResponseField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true, Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\")]\n//        [XmlRoot(Namespace = \"http://ws.registroreclamodte.diii.sdi.sii.cl\", IsNullable = false)]", "//        public partial class ingresarAceptacionReclamoDocResponse\n//        {\n//            private @return? returnField;\n\n//            /// <remarks/>\n//            [XmlElement(Namespace = \"\")]\n//            public @return @return\n//            {\n//                get => returnField!;\n//                set => returnField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [XmlType(AnonymousType = true)]\n//        [XmlRoot(Namespace = \"\", IsNullable = false)]", "//        public partial class @return\n//        {\n//            private byte codRespField;\n\n//            private string? descRespField;\n\n//            /// <remarks/>\n//            public byte codResp\n//            {\n//                get => codRespField;\n//                set => codRespField = value;\n//            }\n\n//            /// <remarks/>\n//            public string? descResp\n//            {\n//                get => descRespField;\n//                set => descRespField = value;\n//            }\n//        }\n//    }\n//}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Serializadores/RESPUESTA.cs", "chunked_list": ["\ufeff//namespace LibreDteDotNet.RestRequest.Serializadores\n//{\n//    // NOTA: El c\u00f3digo generado puede requerir, como m\u00ednimo, .NET Framework 4.5 o .NET Core/Standard 2.0.\n//    /// <remarks/>\n//    [Serializable()]\n//    [System.ComponentModel.DesignerCategory(\"code\")]\n//    [System.Xml.Serialization.XmlType(\n//        AnonymousType = true,\n//        Namespace = \"http://www.sii.cl/XMLSchema\"\n//    )]", "//        Namespace = \"http://www.sii.cl/XMLSchema\"\n//    )]\n//    [System.Xml.Serialization.XmlRoot(\n//        Namespace = \"http://www.sii.cl/XMLSchema\",\n//        IsNullable = false\n//    )]\n//    public class RESPUESTA\n//    {\n//        private RESPUESTARESP_BODY? rESP_BODYField;\n\n//        private RESPUESTARESP_HDR? rESP_HDRField;\n\n//        /// <remarks/>", "//        public RESPUESTARESP_BODY RESP_BODY\n//        {\n//            get => rESP_BODYField!;\n//            set => rESP_BODYField = value;\n//        }\n\n//        /// <remarks/>\n//        public RESPUESTARESP_HDR RESP_HDR\n//        {\n//            get => rESP_HDRField!;\n//            set => rESP_HDRField = value;\n//        }\n//    }\n\n//    /// <remarks/>\n//    [Serializable()]\n//    [System.ComponentModel.DesignerCategory(\"code\")]\n//    [System.Xml.Serialization.XmlType(\n//        AnonymousType = true,\n//        Namespace = \"http://www.sii.cl/XMLSchema\"\n//    )]", "//    public partial class RESPUESTARESP_BODY\n//    {\n//        private ulong sEMILLAField;\n//        private string? rECIBIDOField;\n\n//        private string? eSTADOField;\n\n//        private string? gLOSAField;\n\n//        private ulong tRACKIDField;\n\n//        private string? nUMATENCIONField;\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        private ulong tRACKIDField;\n\n//        private string? nUMATENCIONField;\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string RECIBIDO\n//        {\n//            get => rECIBIDOField!;\n//            set => rECIBIDOField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        public string ESTADO\n//        {\n//            get => eSTADOField!;\n//            set => eSTADOField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string GLOSA\n//        {\n//            get => gLOSAField!;\n//            set => gLOSAField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        public string GLOSA\n//        {\n//            get => gLOSAField!;\n//            set => gLOSAField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public ulong TRACKID\n//        {\n//            get => tRACKIDField;\n//            set => tRACKIDField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        public ulong TRACKID\n//        {\n//            get => tRACKIDField;\n//            set => tRACKIDField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string NUMATENCION\n//        {\n//            get => nUMATENCIONField!;\n//            set => nUMATENCIONField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        public string NUMATENCION\n//        {\n//            get => nUMATENCIONField!;\n//            set => nUMATENCIONField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public ulong SEMILLA\n//        {\n//            get => sEMILLAField;\n//            set => sEMILLAField = value;\n//        }\n//        private string? tOKENField;\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        public ulong SEMILLA\n//        {\n//            get => sEMILLAField;\n//            set => sEMILLAField = value;\n//        }\n//        private string? tOKENField;\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string TOKEN\n//        {\n//            get => tOKENField!;\n//            set => tOKENField = value;\n//        }\n//    }\n\n//    /// <remarks/>\n//    [Serializable()]\n//    [System.ComponentModel.DesignerCategory(\"code\")]\n//    [System.Xml.Serialization.XmlType(\n//        AnonymousType = true,\n//        Namespace = \"http://www.sii.cl/XMLSchema\"\n//    )]", "//        public string TOKEN\n//        {\n//            get => tOKENField!;\n//            set => tOKENField = value;\n//        }\n//    }\n\n//    /// <remarks/>\n//    [Serializable()]\n//    [System.ComponentModel.DesignerCategory(\"code\")]\n//    [System.Xml.Serialization.XmlType(\n//        AnonymousType = true,\n//        Namespace = \"http://www.sii.cl/XMLSchema\"\n//    )]", "//    public partial class RESPUESTARESP_HDR\n//    {\n//        private string? eSTADOField;\n\n//        private string? gLOSA_ESTADOField;\n\n//        private byte eRR_CODEField;\n\n//        private string? gLOSA_ERRField;\n\n//        private object? nUM_ATENCIONField;\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string? ESTADO\n//        {\n//            get => eSTADOField;\n//            set => eSTADOField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string? GLOSA_ESTADO\n//        {\n//            get => gLOSA_ESTADOField;\n//            set => gLOSA_ESTADOField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]", "//        public byte ERR_CODE\n//        {\n//            get => eRR_CODEField;\n//            set => eRR_CODEField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public string? GLOSA_ERR\n//        {\n//            get => gLOSA_ERRField;\n//            set => gLOSA_ERRField = value;\n//        }\n\n//        /// <remarks/>\n//        [System.Xml.Serialization.XmlElement(Namespace = \"\")]\n//        public object? NUM_ATENCION\n//        {\n//            get => nUM_ATENCIONField;\n//            set => nUM_ATENCIONField = value;\n//        }\n//    }\n//}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Serializadores/TimbrajeCaf.cs", "chunked_list": ["\ufeff//namespace LibreDteDotNet.RestRequest.Serializadores\n//{\n//    public class TimbrajeCaf\n//    {\n//        // NOTA: El c\u00f3digo generado puede requerir, como m\u00ednimo, .NET Framework 4.5 o .NET Core/Standard 2.0.\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [System.Xml.Serialization.XmlType(AnonymousType = true)]\n//        [System.Xml.Serialization.XmlRoot(Namespace = \"\", IsNullable = false)]\n//        public partial class AUTORIZACION\n//        {\n//            private AUTORIZACIONCAF? cAFField;\n\n//            private string? rSASKField;\n\n//            private string? rSAPUBKField;\n\n//            /// <remarks/>", "//        public partial class AUTORIZACION\n//        {\n//            private AUTORIZACIONCAF? cAFField;\n\n//            private string? rSASKField;\n\n//            private string? rSAPUBKField;\n\n//            /// <remarks/>\n//            public AUTORIZACIONCAF CAF\n//            {\n//                get => cAFField!;\n//                set => cAFField = value;\n//            }\n\n//            /// <remarks/>", "//            public AUTORIZACIONCAF CAF\n//            {\n//                get => cAFField!;\n//                set => cAFField = value;\n//            }\n\n//            /// <remarks/>\n//            public string RSASK\n//            {\n//                get => rSASKField!;\n//                set => rSASKField = value;\n//            }\n\n//            /// <remarks/>", "//            public string RSAPUBK\n//            {\n//                get => rSAPUBKField!;\n//                set => rSAPUBKField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [System.Xml.Serialization.XmlType(AnonymousType = true)]", "//        public partial class AUTORIZACIONCAF\n//        {\n//            private AUTORIZACIONCAFDA? daField;\n\n//            private AUTORIZACIONCAFFRMA? fRMAField;\n\n//            private decimal versionField;\n\n//            /// <remarks/>\n//            public AUTORIZACIONCAFDA DA\n//            {\n//                get => daField!;\n//                set => daField = value;\n//            }\n\n//            /// <remarks/>", "//            public AUTORIZACIONCAFDA DA\n//            {\n//                get => daField!;\n//                set => daField = value;\n//            }\n\n//            /// <remarks/>\n//            public AUTORIZACIONCAFFRMA FRMA\n//            {\n//                get => fRMAField!;\n//                set => fRMAField = value;\n//            }\n\n//            /// <remarks/>\n//            [System.Xml.Serialization.XmlAttribute()]", "//            public decimal version\n//            {\n//                get => versionField;\n//                set => versionField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [System.Xml.Serialization.XmlType(AnonymousType = true)]", "//        public partial class AUTORIZACIONCAFDA\n//        {\n//            private string? reField;\n\n//            private string? rsField;\n\n//            private byte tdField;\n\n//            private AUTORIZACIONCAFDARNG? rNGField;\n\n//            private string? faField;\n\n//            private AUTORIZACIONCAFDARSAPK? rSAPKField;\n", "//            private ushort iDKField;\n\n//            /// <remarks/>\n//            public string RE\n//            {\n//                get => reField!;\n//                set => reField = value;\n//            }\n\n//            /// <remarks/>\n//            public string RS\n//            {\n//                get => rsField!;\n//                set => rsField = value;\n//            }\n\n//            /// <remarks/>", "//            public string RS\n//            {\n//                get => rsField!;\n//                set => rsField = value;\n//            }\n\n//            /// <remarks/>\n//            public byte TD\n//            {\n//                get => tdField;\n//                set => tdField = value;\n//            }\n\n//            /// <remarks/>", "//            public AUTORIZACIONCAFDARNG RNG\n//            {\n//                get => rNGField!;\n//                set => rNGField = value;\n//            }\n\n//            /// <remarks/>\n//            //[System.Xml.Serialization.XmlElement(DataType = \"date\")]\n//            public string? FA\n//            {\n//                get => faField;\n//                set => faField = value;\n//            }\n\n//            /// <remarks/>", "//            public AUTORIZACIONCAFDARSAPK RSAPK\n//            {\n//                get => rSAPKField!;\n//                set => rSAPKField = value;\n//            }\n\n//            /// <remarks/>\n//            public ushort IDK\n//            {\n//                get => iDKField;\n//                set => iDKField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [System.Xml.Serialization.XmlType(AnonymousType = true)]", "//        public partial class AUTORIZACIONCAFDARNG\n//        {\n//            private ushort dField;\n\n//            private ushort hField;\n\n//            /// <remarks/>\n//            public ushort D\n//            {\n//                get => dField;\n//                set => dField = value;\n//            }\n\n//            /// <remarks/>", "//            public ushort H\n//            {\n//                get => hField;\n//                set => hField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [System.Xml.Serialization.XmlType(AnonymousType = true)]", "//        public partial class AUTORIZACIONCAFDARSAPK\n//        {\n//            private string? mField;\n\n//            private string? eField;\n\n//            /// <remarks/>\n//            public string M\n//            {\n//                get => mField!;\n//                set => mField = value;\n//            }\n\n//            /// <remarks/>", "//            public string E\n//            {\n//                get => eField!;\n//                set => eField = value;\n//            }\n//        }\n\n//        /// <remarks/>\n//        [Serializable()]\n//        [System.ComponentModel.DesignerCategory(\"code\")]\n//        [System.Xml.Serialization.XmlType(AnonymousType = true)]", "//        public partial class AUTORIZACIONCAFFRMA\n//        {\n//            private string? algoritmoField;\n\n//            private string? valueField;\n\n//            /// <remarks/>\n//            [System.Xml.Serialization.XmlAttribute()]\n//            public string algoritmo\n//            {\n//                get => algoritmoField!;\n//                set => algoritmoField = value;\n//            }\n\n//            /// <remarks/>\n//            [System.Xml.Serialization.XmlText()]", "//            public string algoritmo\n//            {\n//                get => algoritmoField!;\n//                set => algoritmoField = value;\n//            }\n\n//            /// <remarks/>\n//            [System.Xml.Serialization.XmlText()]\n//            public string Value\n//            {\n//                get => valueField!;\n//                set => valueField = value;\n//            }\n//        }\n//    }\n//}\n", "//            public string Value\n//            {\n//                get => valueField!;\n//                set => valueField = value;\n//            }\n//        }\n//    }\n//}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Help/HtmlParse.cs", "chunked_list": ["\ufeffusing AngleSharp.Dom;\nusing AngleSharp.Html.Dom;\nusing AngleSharp.Html.Parser;\n\nnamespace LibreDteDotNet.RestRequest.Help\n{\n    internal class HtmlParse\n    {\n        // No se puede usar Tuple, porque debo usar las claves de los Dictionary.\n        public static async Task<Dictionary<string, string>> GetValuesFromTabla(\n            string tablepath,\n            HttpResponseMessage msg,\n            CancellationToken token\n        )\n        {", "        public static async Task<Dictionary<string, string>> GetValuesFromTabla(\n            string tablepath,\n            HttpResponseMessage msg,\n            CancellationToken token\n        )\n        {\n            if (msg is null)\n            {\n                return null!;\n            }\n\n            Dictionary<string, string> dics = new();\n            HtmlParser? parser = new();\n            IHtmlDocument? document = await parser.ParseDocumentAsync(\n                await msg.Content.ReadAsStreamAsync(),\n                token\n            );\n            try\n            {\n                await GuardarHtml(msg);\n                IElement? tbody = document.DocumentElement.QuerySelector(tablepath);", "                if (tbody != null)\n                {\n                    IHtmlCollection<IElement>? tr = tbody!.QuerySelectorAll(\"tr\");\n                    foreach (IElement? item in tr)\n                    {\n                        IHtmlCollection<IElement>? td = item.QuerySelectorAll(\"td\");\n                        dics.Add(td[0].TextContent.Trim(), td[1].TextContent.Trim());\n                    }\n                    return dics;\n                }\n                return null!;\n            }", "            catch (Exception)\n            {\n                return null!;\n            }\n        }\n\n        public static async Task<Dictionary<string, string>> GetValuesFromTag(\n            string tablepath,\n            HttpResponseMessage? msg,\n            CancellationToken token\n        )\n        {\n            Dictionary<string, string> dics = new();\n            HtmlParser? parser = new();\n            IHtmlDocument? document = await parser.ParseDocumentAsync(\n                await msg!.Content.ReadAsStreamAsync(),\n                token\n            );\n            try\n            {\n                await GuardarHtml(msg);\n                IHtmlCollection<IElement>? res = document.QuerySelectorAll(tablepath);", "                if (res.Any())\n                {\n                    foreach (IHtmlInputElement? item in res)\n                    {\n                        _ = dics.TryAdd(item!.Name!, item.Value);\n                    }\n                }\n                else\n                {\n                    IHtmlCollection<IElement> childs = document\n                        .DocumentElement\n                        .LastElementChild!\n                        .Children;", "                    foreach (IElement child in childs)\n                    {\n                        // EXTRAER ERRORES DEL HTML\n                        foreach (IElement item in child.Children)\n                        {\n                            if (item.NodeName == \"TABLE\")\n                            {\n                                dics.Add(item.TagName, item.TextContent.Trim());\n                            }\n                        }\n                    }\n                }\n                return dics;\n            }", "            catch (Exception)\n            {\n                return null!;\n            }\n        }\n\n        private static async Task GuardarHtml(HttpResponseMessage? msg)\n        {\n            await File.WriteAllBytesAsync(\n                $\"{Path.GetTempPath()}Html_resultado_{DateTime.Now:dd-MM-HH-mm-ss}.html\",\n                await msg!.Content.ReadAsByteArrayAsync()\n            );\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Infraestructure/RepositoryWeb.cs", "chunked_list": ["\ufeffusing System.Net;\n\nnamespace LibreDteDotNet.RestRequest.Infraestructure\n{\n    internal interface IRepositoryWeb\n    {\n        // REPO PARA LLAMADAS HACIA WEB CON CERTIFICADO DIGITAL\n        Task<HttpStatusCode> Conectar(string url);\n\n        Task<HttpResponseMessage>? Send(HttpRequestMessage message);\n        Task<HttpResponseMessage>? Send(HttpRequestMessage message, string token);\n    }\n", "    internal class RepositoryWeb : IRepositoryWeb\n    {\n        private const string clientName = \"SII_WEB\";\n        private readonly IHttpClientFactory clientFactory;\n\n        public RepositoryWeb(IHttpClientFactory clientFactory)\n        {\n            this.clientFactory = clientFactory;\n        }\n\n        public async Task<HttpStatusCode> Conectar(string url)\n        {\n            HttpClient httpclient = clientFactory.CreateClient(clientName);\n            HttpResponseMessage res = await httpclient!.GetAsync(\n                Path.Combine(string.Format(Properties.Resources.UrlTokenSeed, url))\n            );\n            try\n            {\n                return res.EnsureSuccessStatusCode().StatusCode;\n            }", "        public async Task<HttpStatusCode> Conectar(string url)\n        {\n            HttpClient httpclient = clientFactory.CreateClient(clientName);\n            HttpResponseMessage res = await httpclient!.GetAsync(\n                Path.Combine(string.Format(Properties.Resources.UrlTokenSeed, url))\n            );\n            try\n            {\n                return res.EnsureSuccessStatusCode().StatusCode;\n            }\n            catch (Exception)\n            {\n                return res.StatusCode;\n            }\n        }\n", "            catch (Exception)\n            {\n                return res.StatusCode;\n            }\n        }\n\n        public async Task<HttpResponseMessage>? Send(HttpRequestMessage message)\n        {\n            HttpClient httpclient = clientFactory.CreateClient(clientName);\n            HttpResponseMessage? res = await httpclient!.SendAsync(message);\n            try\n            {\n                return res.EnsureSuccessStatusCode();\n            }", "            catch (Exception)\n            {\n                throw;\n            }\n        }\n\n        public async Task<HttpResponseMessage>? Send(HttpRequestMessage message, string token)\n        {\n            HttpClient httpclient = clientFactory.CreateClient(clientName);\n            httpclient.DefaultRequestHeaders.Add(\"Cookie\", $\"TOKEN={token}\");\n            HttpResponseMessage? response = await httpclient!.SendAsync(message);\n            return response.EnsureSuccessStatusCode();\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Infraestructure/RestRequest.cs", "chunked_list": ["\ufeffusing LibreDteDotNet.RestRequest.Interfaces;\n\nnamespace LibreDteDotNet.RestRequest.Infraestructure\n{\n    public class RestRequest\n    {\n        public ILibro Libro { get; }\n        public IContribuyente Contribuyente { get; }\n        public IFolioCaf FolioCaf { get; }\n        public IBoleta Boleta { get; }\n        public IDTE DocumentoTributario { get; }\n\n        public RestRequest(\n            ILibro libroService,\n            IContribuyente contribuyenteService,\n            IFolioCaf folioCafService,\n            IBoleta boletaService,\n            IDTE dTEService\n        )\n        {\n            Libro = libroService;\n            Contribuyente = contribuyenteService;\n            FolioCaf = folioCafService;\n            Boleta = boletaService;\n            DocumentoTributario = dTEService;\n        }\n    }\n}\n", "        public IFolioCaf FolioCaf { get; }\n        public IBoleta Boleta { get; }\n        public IDTE DocumentoTributario { get; }\n\n        public RestRequest(\n            ILibro libroService,\n            IContribuyente contribuyenteService,\n            IFolioCaf folioCafService,\n            IBoleta boletaService,\n            IDTE dTEService\n        )\n        {\n            Libro = libroService;\n            Contribuyente = contribuyenteService;\n            FolioCaf = folioCafService;\n            Boleta = boletaService;\n            DocumentoTributario = dTEService;\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Infraestructure/ContainerBuild.cs", "chunked_list": ["\ufeffusing System.Net;\nusing System.Reflection;\nusing System.Security.Cryptography.X509Certificates;\n\nusing Autofac;\nusing Autofac.Extensions.DependencyInjection;\n\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n", "using Microsoft.Extensions.Hosting;\n\nnamespace LibreDteDotNet.RestRequest.Infraestructure\n{\n    public static class ContainerBuild\n    {\n        public static IHostBuilder RestRequestBuild(this IHostBuilder host)\n        {\n            _ = host.UseServiceProviderFactory(new AutofacServiceProviderFactory());\n            _ = host.ConfigureContainer<ContainerBuilder>(\n                (config, builder) =>\n                {\n                    _ = builder.RegisterModule(new Container());\n                }\n            );\n            _ = host.ConfigureServices(\n                (config, services) =>\n                {\n                    _ = services\n                        .AddHttpClient(\n                            \"SII_WEB\",\n                            client =>\n                            {\n                                //client.DefaultRequestHeaders.UserAgent.ParseAdd(\n                                //    \"Mozilla/5.0 (Windows NT 10.0; PROG 1.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\"\n                                //);\n                            }\n                        )\n                        .ConfigurePrimaryHttpMessageHandler(() =>\n                        {\n                            X509Certificate2 x509 = GetCertFromPc(\n                                config.Configuration.GetSection(\"Rut\").Value!\n                            );\n                            CookieContainer? cookieContainer = new();\n                            HttpClientHandler? handler =\n                                new() { CookieContainer = cookieContainer };\n                            _ = handler.ClientCertificates.Add(x509);\n                            //handler.SslProtocols = System\n                            //    .Security\n                            //    .Authentication\n                            //    .SslProtocols\n                            //    .Tls12;\n\n                            return handler;\n                        });\n                    _ = services.AddHttpClient(\"SII_REST\");\n                    _ = services.AddTransient<IRepositoryRest, RepositoryRest>();\n                    _ = services.AddTransient<IRepositoryWeb, RepositoryWeb>();\n                    _ = services.AddScoped<RestRequest>();\n                }\n            );\n            return host;\n        }\n", "        public static HttpClientHandler Handlerx509(string rut)\n        {\n            X509Certificate2 x509 = GetCertFromPc(rut);\n            CookieContainer? cookieContainer = new();\n            HttpClientHandler? handler = new() { CookieContainer = cookieContainer };\n            _ = handler.ClientCertificates.Add(x509);\n            return handler;\n        }\n\n        public static X509Certificate2 GetCertFromPc(string rut)\n        {\n            X509Store store = new(StoreName.My, StoreLocation.CurrentUser);\n            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n            X509Certificate2? cert = store.Certificates\n                .Where(c => c.Subject.Contains(rut) && c.NotAfter > DateTime.Now)\n                .FirstOrDefault();\n            store.Close();\n            return cert\n                ?? throw new Exception($\"No existe certificado v\u00e1lido para este rut: {rut}.\");\n        }\n    }\n", "        public static X509Certificate2 GetCertFromPc(string rut)\n        {\n            X509Store store = new(StoreName.My, StoreLocation.CurrentUser);\n            store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n            X509Certificate2? cert = store.Certificates\n                .Where(c => c.Subject.Contains(rut) && c.NotAfter > DateTime.Now)\n                .FirstOrDefault();\n            store.Close();\n            return cert\n                ?? throw new Exception($\"No existe certificado v\u00e1lido para este rut: {rut}.\");\n        }\n    }\n", "    internal sealed class Container : Autofac.Module\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            Assembly? assembly = Assembly.GetExecutingAssembly();\n            _ = builder\n                .RegisterAssemblyTypes(assembly)\n                .Where(t => t.Name.EndsWith(\"Service\"))\n                .AsImplementedInterfaces();\n        }\n    }\n}\n"]}
{"filename": "LibreDteDotNet.RestRequest/Infraestructure/RepositoryRest.cs", "chunked_list": ["\ufeffusing System.Text;\n\nusing static System.Net.Mime.MediaTypeNames;\n\nnamespace LibreDteDotNet.RestRequest.Infraestructure\n{\n    // REPO PARA LLAMADAS HACIA API REST\n    internal interface IRepositoryRest\n    {\n        Task<HttpResponseMessage>? PostJson(string json, string url, string token);\n    }\n", "    internal class RepositoryRest : IRepositoryRest\n    {\n        private const string clientName = \"SII_REST\";\n        private readonly IHttpClientFactory clientFactory;\n\n        public RepositoryRest(IHttpClientFactory clientFactory)\n        {\n            this.clientFactory = clientFactory;\n        }\n\n        public async Task<HttpResponseMessage>? PostJson(string json, string url, string token)\n        {\n            HttpClient httpclient = clientFactory.CreateClient(clientName);\n            httpclient.DefaultRequestHeaders.Add(\"Cookie\", $\"TOKEN={token}\");\n            using StringContent? content = new(json, Encoding.UTF8, Application.Json);\n            HttpResponseMessage response = await httpclient!.PostAsync(\n                url,\n                content,\n                CancellationToken.None\n            );\n            return response.EnsureSuccessStatusCode();\n        }\n    }\n}\n", "        public async Task<HttpResponseMessage>? PostJson(string json, string url, string token)\n        {\n            HttpClient httpclient = clientFactory.CreateClient(clientName);\n            httpclient.DefaultRequestHeaders.Add(\"Cookie\", $\"TOKEN={token}\");\n            using StringContent? content = new(json, Encoding.UTF8, Application.Json);\n            HttpResponseMessage response = await httpclient!.PostAsync(\n                url,\n                content,\n                CancellationToken.None\n            );\n            return response.EnsureSuccessStatusCode();\n        }\n    }\n}\n"]}
