{"filename": "HikariEditor/MainWindow.xaml.cs", "chunked_list": ["\ufeffusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing System.Diagnostics;\nusing Windows.ApplicationModel.DataTransfer;\nusing Windows.Storage;\n\nnamespace HikariEditor\n{\n    public sealed partial class MainWindow : Window\n    {\n        public Editor? editor;\n        public Terminal? terminal;\n        public StackPanel? logTabPanel;\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            /* \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u306e\u8a2d\u5b9a */\n            ExtendsContentIntoTitleBar = true;\n            SetTitleBar(AppTitleBar);\n\n            /* \u30a8\u30c7\u30a3\u30bf\u306e\u8a2d\u5b9a */\n            editorFrame.Navigate(typeof(Editor), this);\n            EditorSetup();\n\n            /* \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3092\u975e\u8868\u793a\u306b */\n            OpenExplorer.IsEnabled = false;\n\n            /* \u81ea\u52d5\u4fdd\u5b58\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f */\n            LoadConfig();\n        }\n\n        //void SetWindowSize(int width, int height)\n        //{\n        //    IntPtr hWnd = WindowNative.GetWindowHandle(this);\n        //    WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);\n        //    AppWindow appWindow = AppWindow.GetFromWindowId(myWndId);\n        //    appWindow.Resize(new SizeInt32(width, height));\n        //}\n\n        async void EditorSetup()\n        {\n            StatusBar.Text = \"\u30a8\u30c7\u30a3\u30bf\u306e\u521d\u671f\u8a2d\u5b9a\u4e2d...\";\n            await EditorSetupAsync();\n            _ = CopyEditorFile();\n            StatusBar.Text = \"\u30a8\u30c7\u30a3\u30bf\u306e\u521d\u671f\u8a2d\u5b9a\u3001\u5b8c\u4e86\";\n            await Task.Delay(2000);\n            StatusBar.Text = \"\";\n        }\n\n        static async Task EditorSetupAsync()\n        {\n            // \u30a8\u30c7\u30a3\u30bf\u306e\u521d\u671f\u8a2d\u5b9a\n            string tempDirectory = Path.GetTempPath();\n            string editorDir = $\"{tempDirectory}HikariEditor\";\n            bool exists = Directory.Exists(editorDir);", "    public sealed partial class MainWindow : Window\n    {\n        public Editor? editor;\n        public Terminal? terminal;\n        public StackPanel? logTabPanel;\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            /* \u30bf\u30a4\u30c8\u30eb\u30d0\u30fc\u306e\u8a2d\u5b9a */\n            ExtendsContentIntoTitleBar = true;\n            SetTitleBar(AppTitleBar);\n\n            /* \u30a8\u30c7\u30a3\u30bf\u306e\u8a2d\u5b9a */\n            editorFrame.Navigate(typeof(Editor), this);\n            EditorSetup();\n\n            /* \u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u3092\u975e\u8868\u793a\u306b */\n            OpenExplorer.IsEnabled = false;\n\n            /* \u81ea\u52d5\u4fdd\u5b58\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f */\n            LoadConfig();\n        }\n\n        //void SetWindowSize(int width, int height)\n        //{\n        //    IntPtr hWnd = WindowNative.GetWindowHandle(this);\n        //    WindowId myWndId = Win32Interop.GetWindowIdFromWindow(hWnd);\n        //    AppWindow appWindow = AppWindow.GetFromWindowId(myWndId);\n        //    appWindow.Resize(new SizeInt32(width, height));\n        //}\n\n        async void EditorSetup()\n        {\n            StatusBar.Text = \"\u30a8\u30c7\u30a3\u30bf\u306e\u521d\u671f\u8a2d\u5b9a\u4e2d...\";\n            await EditorSetupAsync();\n            _ = CopyEditorFile();\n            StatusBar.Text = \"\u30a8\u30c7\u30a3\u30bf\u306e\u521d\u671f\u8a2d\u5b9a\u3001\u5b8c\u4e86\";\n            await Task.Delay(2000);\n            StatusBar.Text = \"\";\n        }\n\n        static async Task EditorSetupAsync()\n        {\n            // \u30a8\u30c7\u30a3\u30bf\u306e\u521d\u671f\u8a2d\u5b9a\n            string tempDirectory = Path.GetTempPath();\n            string editorDir = $\"{tempDirectory}HikariEditor\";\n            bool exists = Directory.Exists(editorDir);", "            if (!exists)\n            {\n                Directory.CreateDirectory(editorDir);\n            }\n\n            string editorUri = @\"https://registry.npmjs.org/monaco-editor/-/monaco-editor-0.38.0.tgz\";\n            string downloadFile = editorDir + @\"\\\" + Path.GetFileName(editorUri);\n            if (!File.Exists(downloadFile))\n            {\n                HttpClient client = new();\n                HttpResponseMessage response = await client.GetAsync(editorUri);", "                if (response.StatusCode != System.Net.HttpStatusCode.OK)\n                    return;\n                using Stream stream = await response.Content.ReadAsStreamAsync();\n                using FileStream dst = File.Create(downloadFile);\n                stream.CopyTo(dst);\n            }\n\n            if (!Directory.Exists($\"{editorDir}\\\\editor\"))\n            {\n                FileItem editorCp = new(downloadFile);\n                editorCp.Extract();\n                Directory.Move($\"{editorDir}\\\\package\", $\"{editorDir}\\\\editor\");\n            }\n        }\n\n        static async Task CopyEditorFile()\n        {\n            StorageFile htmlFile = await StorageFile.GetFileFromApplicationUriAsync(new Uri(\"ms-appx:///Assets/Editor.html\"));\n            string tempDirectory = Path.GetTempPath();\n            string editorDir = $\"{tempDirectory}HikariEditor\";", "            if (File.Exists(htmlFile.Path))\n            {\n                if (Directory.Exists($\"{editorDir}\\\\editor\"))\n                    File.Copy(htmlFile.Path, $\"{editorDir}\\\\editor\\\\index.html\", true);\n            }\n        }\n\n        // \u958b\u304f\u3092\u30af\u30ea\u30c3\u30af\n        void OpenClick(object sender, RoutedEventArgs e)\n        {\n            editorFrame.Navigate(typeof(Open), this);\n            editorFrame.Height = double.NaN;\n        }\n\n        // \u30bf\u30fc\u30df\u30ca\u30eb\u3092\u958b\u304f\n        void ClickOpenTerminal(object sender, RoutedEventArgs e)\n        {\n            Terminal.ClickOpenTerminal(this);\n            terminal!.AddNewTab(terminal.terminalTabs);\n        }\n\n        void LoadConfig()\n        {\n            Settings settings = new();\n            settings.LoadSetting();\n            AutoSave.IsChecked = settings.AutoSave;\n            ToggleStyle(AutoSave.IsChecked);\n        }\n\n        void ToggleStyle(bool isOn)\n        {", "            if (isOn)\n            {\n                AutoSaveToggleSwitchText.Text = \"\u30aa\u30f3\";\n                //AutoSaveToggleSwitchText.Foreground = new SolidColorBrush(Colors.Black);\n                AutoSaveToggleSwitchText.Margin = new Thickness(5, 12.5, 0, 0);\n            }\n            else\n            {\n                AutoSaveToggleSwitchText.Text = \"\u30aa\u30d5\";\n                AutoSaveToggleSwitchText.Margin = new Thickness(19, 12.5, 0, 0);\n                //AutoSaveToggleSwitchText.Foreground = AppTitleBar.ActualTheme == ElementTheme.Light ? new SolidColorBrush(Colors.Black) : (Brush)new SolidColorBrush(Colors.White);\n            }\n        }\n", "        private void ToggleSwitch_Toggled(object sender, RoutedEventArgs e)\n        {\n            Settings settings = new();\n            settings.LoadSetting();\n            settings.AutoSave = AutoSaveToggleSwitch.IsOn;\n            ToggleStyle(AutoSaveToggleSwitch.IsOn);\n            settings.SaveSetting();\n        }\n\n        void ExitClick(object sender, RoutedEventArgs e)\n        {\n            Close();\n        }\n", "        private void ClickNLBtn(object sender, RoutedEventArgs e)\n        {\n            NLBtn.Content = (string)NLBtn.Content == \"LF\" ? \"CRLF\" : \"LF\";\n        }\n\n        private void MenuChanged(NavigationView sender, NavigationViewItemInvokedEventArgs args)\n        {\n            NavigationViewItem? selectedItem = (NavigationViewItem)sender.SelectedItem;\n            if (selectedItem == null) return;\n            if ((string)selectedItem.Tag == \"Explorer\")\n            {", "            if (selectedItem == null) return;\n            if ((string)selectedItem.Tag == \"Explorer\")\n            {\n                if (SideMenuEditorArea.ColumnDefinitions[0].Width.ToString() == \"360\")\n                {\n                    SideMenuEditorArea.ColumnDefinitions[0].Width = new GridLength(48);\n                    ItemExplorer.IsSelected = false;\n                    OpenExplorer.IsEnabled = false;\n                }\n                else\n                {\n                    SideMenuEditorArea.ColumnDefinitions[0].Width = new GridLength(360);\n                    ItemExplorer.IsSelected = true;\n                    OpenExplorer.IsEnabled = true;\n                }\n\n                contentFrame.Navigate(typeof(Explorer), this);\n            }", "            else if ((string)selectedItem.Tag == \"Search\")\n            {\n                contentFrame.Navigate(typeof(Search), this);\n            }\n        }\n\n        public void ClickOpenExplorer(object sender, RoutedEventArgs e)\n        {\n            Settings settings = new();\n            settings.LoadSetting();\n", "            if (settings.ExplorerDir != \"\")\n                Process.Start(\"explorer.exe\", settings.ExplorerDir);\n        }\n\n        async void ClickPasteText(object sender, RoutedEventArgs e)\n        {\n            DataPackageView dataPackageView = Clipboard.GetContent();\n            if (dataPackageView.Contains(StandardDataFormats.Text))\n            {\n                string text = await dataPackageView.GetTextAsync();\n                editor!.CallPasteFunction(text);\n            }\n        }\n", "        private void ClickCopyText(object sender, RoutedEventArgs e)\n        {\n            editor!.CallCopyFunction();\n        }\n\n        async private void ClickAboutDialog(object sender, RoutedEventArgs e)\n        {\n            ContentDialog dialog = new()\n            {\n                XamlRoot = Content.XamlRoot,\n                Title = \"\u3072\u304b\u308a\u30a8\u30c7\u30a3\u30bf\",\n                PrimaryButtonText = \"OK\",\n                DefaultButton = ContentDialogButton.Primary,\n                Content = new About()\n            };\n            await dialog.ShowAsync();\n        }\n", "        private void ClickOpenLog(object sender, RoutedEventArgs e)\n        {\n            LogPage.ClickOpenLog(this);\n        }\n\n    }\n}\n"]}
{"filename": "HikariEditor/Error.xaml.cs", "chunked_list": ["// Copyright (c) Microsoft Corporation and Contributors.\n// Licensed under the MIT License.\n\nusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing System;\n\nnamespace HikariEditor\n{\n    public sealed partial class Error : Page\n    {\n        public Error()\n        {\n            this.InitializeComponent();\n        }\n", "{\n    public sealed partial class Error : Page\n    {\n        public Error()\n        {\n            this.InitializeComponent();\n        }\n\n        async public static void Dialog(string title, string text, XamlRoot XamlRoot)\n        {\n            ContentDialog dialog = new();\n            dialog.XamlRoot = XamlRoot;\n            dialog.Title = title;\n            dialog.PrimaryButtonText = \"\ud0a9!\";\n            dialog.DefaultButton = ContentDialogButton.Primary;\n            Error content = new();\n            dialog.Content = content;\n            content.errorText.Text = text;\n            await dialog.ShowAsync();\n        }\n    }\n}\n", "        async public static void Dialog(string title, string text, XamlRoot XamlRoot)\n        {\n            ContentDialog dialog = new();\n            dialog.XamlRoot = XamlRoot;\n            dialog.Title = title;\n            dialog.PrimaryButtonText = \"\ud0a9!\";\n            dialog.DefaultButton = ContentDialogButton.Primary;\n            Error content = new();\n            dialog.Content = content;\n            content.errorText.Text = text;\n            await dialog.ShowAsync();\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Settings.cs", "chunked_list": ["\ufeffusing System.Text.Json;\n\nnamespace HikariEditor\n{\n    internal class Settings\n    {\n        public string ExplorerDir { get; set; } = string.Empty;\n        public bool AutoSave { get; set; } = false;\n        public string OpenDirPath { get; set; } = string.Empty;\n\n        public Settings()\n        {\n            /* \u518d\u5e30\u3068\u306a\u308b\u3088\u3046\u306a\u95a2\u6570\u7981\u6b62 */\n        }\n", "        public string OpenDirPath { get; set; } = string.Empty;\n\n        public Settings()\n        {\n            /* \u518d\u5e30\u3068\u306a\u308b\u3088\u3046\u306a\u95a2\u6570\u7981\u6b62 */\n        }\n\n        public void SaveSetting()\n        {\n            string SettingPath = $\"{Path.GetTempPath()}\\\\HikariEditor-settings.json\";\n            string jsonString = JsonSerializer.Serialize(this);\n            FileItem fileItem = new(SettingPath);\n            fileItem.Save(jsonString, \"LF\");\n        }\n", "        public void LoadSetting()\n        {\n            string SettingPath = $\"{Path.GetTempPath()}\\\\HikariEditor-settings.json\";\n            if (!File.Exists(SettingPath))\n            {\n                SaveSetting();\n                return;\n            }\n            string jsonString = File.ReadAllText(SettingPath);\n            Settings? settings = JsonSerializer.Deserialize<Settings>(jsonString);\n            ExplorerDir = settings!.ExplorerDir;\n            AutoSave = settings.AutoSave;\n            OpenDirPath = settings.OpenDirPath;\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Text.cs", "chunked_list": ["\ufeffusing System;\nusing System.Text;\n\nnamespace HikariEditor\n{\n    public class Text\n    {\n        public string text { get; set; }\n\n        public Text(string text)\n        {\n            this.text = text;\n        }\n", "        public string EncodeBase64()\n        {\n            return Convert.ToBase64String(Encoding.UTF8.GetBytes(text));\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/About.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\n\nnamespace HikariEditor\n{\n    public sealed partial class About : Page\n    {\n        public About()\n        {\n            InitializeComponent();\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Search.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\n\n\nnamespace HikariEditor\n{\n    public sealed partial class Search : Page\n    {\n        public Search()\n        {\n            this.InitializeComponent();\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/FileItem.cs", "chunked_list": ["\ufeffusing Microsoft.UI.Xaml.Controls;\nusing SharpCompress.Common;\nusing SharpCompress.Readers;\nusing System.IO;\n\nnamespace HikariEditor\n{\n    class FileItem : TreeViewNode\n    {\n#nullable disable\n        public string Path { get; set; }", "        public string Path { get; set; }\n        public string Name { get; set; }\n        public string Dirname { get; set; }\n        public string Extension { get; set; }\n        public string WithoutName { get; set; }\n        public string Icon1 { get; set; }\n        public string Icon2 { get; set; }\n        public string Color1 { get; set; }\n        public string Color2 { get; set; }\n        public bool Flag { get; set; }\n\n        void InitFileItem()\n        {", "        public string Color2 { get; set; }\n        public bool Flag { get; set; }\n\n        void InitFileItem()\n        {\n            if (Path == null || Path == \"\") return;\n            Dirname = System.IO.Path.GetDirectoryName(Path) ?? \"\";\n            if (File.Exists(Dirname))\n            {\n                Dirname = System.IO.Path.GetDirectoryName(Dirname + \"\\\\temp.dat\") ?? \"\";\n            }\n            Name = System.IO.Path.GetFileName(Path);\n            Extension = System.IO.Path.GetExtension(Path);\n            WithoutName = System.IO.Path.GetFileNameWithoutExtension(Path);\n            Path = $\"{Dirname}\\\\{WithoutName}{Extension}\";\n            Flag = false;\n        }\n\n        public FileItem(string dirName, string fileName)\n        {\n            (Name, Dirname, Extension, WithoutName) = (\"\", \"\", \"\", \"\");\n            Path = $\"{dirName}\\\\{fileName}\";\n            InitFileItem();\n        }\n\n        public FileItem(string fileName)\n        {\n            (Name, Dirname, Extension, WithoutName) = (\"\", \"\", \"\", \"\");\n            Path = fileName;\n            InitFileItem();\n        }\n", "        public bool CreateFile(MainWindow mainWindow)\n        {\n            if (!File.Exists(Path))\n            {\n                if (Directory.Exists(Dirname))\n                {\n                    if (!Directory.Exists(Path))\n                        using (File.Create(Path))\n                        {\n                            ;\n                        }\n                    else\n                    {\n                        Error.Dialog(\"\u4f5c\u6210\u5931\u6557\", \"\u540c\u540d\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", mainWindow.Content.XamlRoot);\n                        return false;\n                    }\n                }\n                else\n                {\n                    Error.Dialog(\"\u4f5c\u6210\u5931\u6557\", \"\u9078\u629e\u3057\u3066\u3044\u308b\u9805\u76ee\u306f\u30d5\u30a9\u30eb\u30c0\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\", mainWindow.Content.XamlRoot);\n                    return false;\n                }\n\n            }\n            else\n            {\n                Error.Dialog(\"\u4f5c\u6210\u5931\u6557\", \"\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", mainWindow.Content.XamlRoot);\n                return false;\n            }\n            return true;\n        }\n", "        public bool CreateDirectory(MainWindow mainWindow)\n        {\n            if (!Directory.Exists(Path))\n            {\n                if (File.Exists(Path))\n                {\n                    Error.Dialog(\"\u4f5c\u6210\u5931\u6557\", \"\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", mainWindow.Content.XamlRoot);\n                    return false;\n                }\n                else\n                {\n                    Directory.CreateDirectory(Path);\n                }\n            }\n            else\n            {\n                Error.Dialog(\"\u4f5c\u6210\u5931\u6557\", \"\u540c\u540d\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", mainWindow.Content.XamlRoot);\n                return false;\n            }\n            return true;\n        }\n", "        public void Save(string src, string NL)\n        {\n            if (NL == \"LF\")\n            {\n                src = ToLF(src);\n            }\n            else if (NL == \"CRLF\")\n            {\n                src = ToCRLF(src);\n            }\n            File.WriteAllText(this.Path, src);\n        }\n\n        string ToLF(string src)\n        {\n            return src.Replace(\"\\r\\n\", \"\\n\");\n        }\n\n        string ToCRLF(string src)\n        {\n            src = ToLF(src);\n            return src.Replace(\"\\n\", \"\\r\\n\");\n        }\n", "        public void Extract()\n        {\n            string ext = System.IO.Path.GetExtension(Path).Trim();\n            string extDir = System.IO.Path.GetDirectoryName(Path);\n            if (ext == \".tgz\")\n            {\n                using Stream stream = File.OpenRead(Path);\n                IReader reader = ReaderFactory.Open(stream);\n                while (reader.MoveToNextEntry())\n                {\n                    if (!reader.Entry.IsDirectory)\n                    {\n                        reader.WriteEntryToDirectory(extDir, new ExtractionOptions()\n                        {\n                            ExtractFullPath = true,\n                            Overwrite = true\n                        });\n                    }\n                }\n            }\n            else return;\n        }\n    }\n}\n", "                while (reader.MoveToNextEntry())\n                {\n                    if (!reader.Entry.IsDirectory)\n                    {\n                        reader.WriteEntryToDirectory(extDir, new ExtractionOptions()\n                        {\n                            ExtractFullPath = true,\n                            Overwrite = true\n                        });\n                    }\n                }\n            }\n            else return;\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/LaTeX.cs", "chunked_list": ["\ufeffusing System.Diagnostics;\n\nnamespace HikariEditor\n{\n    internal class LaTeX\n    {\n        async public static Task<bool> Compile(MainWindow mainWindow, FileItem fileItem, Editor editor)\n        {\n            bool tex_compile_error = false;\n            try\n            {", "                using (Process process = new())\n                {\n                    process.StartInfo.UseShellExecute = false;\n                    process.StartInfo.FileName = \"C:\\\\texlive\\\\2022\\\\bin\\\\win32\\\\ptex2pdf.exe\";\n                    process.StartInfo.CreateNoWindow = true;\n                    process.StartInfo.Arguments = $\"-l -ot -interaction=nonstopmode -halt-on-error -kanji=utf8 -output-directory=\\\"{fileItem.Dirname}\\\" \\\"{fileItem.Path}\\\"\";\n                    process.StartInfo.RedirectStandardOutput = true;\n                    process.Start();\n                    string stdout = process.StandardOutput.ReadToEnd();\n                    await process.WaitForExitAsync();\n\n                    //Debug.WriteLine(stdout);", "                    if (process.ExitCode == 0)\n                    {\n                        mainWindow.StatusBar.Text = $\"{fileItem.Name} \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\";\n                        LogPage.AddLog(mainWindow, $\"{fileItem.Name} \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\");\n                    }\n                    else\n                    {\n                        mainWindow.StatusBar.Text = $\"{fileItem.Name} \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\";\n                        LogPage.AddLog(mainWindow, $\"{fileItem.Name} \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\");\n                        Error.Dialog(\"LaTeX \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\", stdout, mainWindow.Content.XamlRoot);\n                        tex_compile_error = true;\n                    }\n                    editor.Counter++;\n                    editor.DelayResetStatusBar(1000);\n                }\n", "                if (!tex_compile_error)\n                {\n                    FileItem pdfFileItem = new(fileItem.Dirname, $\"{fileItem.WithoutName}.pdf\");\n                    PDFPageInfo pdfPageInfo = new()\n                    {\n                        mainWindow = mainWindow,\n                        fileItem = pdfFileItem\n                    };\n                    mainWindow.previewFrame.Navigate(typeof(PDF), pdfPageInfo);\n                }\n\n            }", "            catch (Exception e)\n            {\n                Debug.WriteLine(e.Message);\n            }\n            return !tex_compile_error;\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/LogPage.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\n\nnamespace HikariEditor\n{\n    public sealed partial class LogPage : Page\n    {\n        //MainWindow mainWindow;\n        static public void ClickOpenLog(MainWindow mainWindow)\n        {\n            mainWindow.terminalFrame.Navigate(typeof(Terminal), mainWindow);\n            mainWindow.terminalFrame.Height = 300;\n            mainWindow.OpenLog.IsEnabled = false;\n            mainWindow.terminal!.AddNewLogPage(mainWindow.terminal.terminalTabs);\n        }", "        static public void AddLog(MainWindow mainWindow, string text)\n        {\n            if (mainWindow.logTabPanel != null)\n            {\n                ListViewItem listViewItem = new();\n                TextBlock block = new();\n                DateTime now = DateTime.Now;\n                block.Text = $\"{now} {text}\";\n                listViewItem.Content = block;\n                mainWindow.logTabPanel.Children.Add(block);\n                ScrollViewer scrollViewer = (ScrollViewer)mainWindow.logTabPanel.Parent;\n                double maxVerticalOffset = scrollViewer.ScrollableHeight + 16;\n                scrollViewer.ScrollToVerticalOffset(maxVerticalOffset);\n            }\n        }\n\n        public LogPage()\n        {\n            InitializeComponent();\n        }\n\n        // ^u\u0312\u01c9\n    }\n}\n"]}
{"filename": "HikariEditor/Directories.cs", "chunked_list": ["\ufeffnamespace HikariEditor\n{\n    class Directories\n    {\n        public string? Path { get; set; }\n        public string? Name { get; set; }\n    }\n}\n"]}
{"filename": "HikariEditor/App.xaml.cs", "chunked_list": ["\ufeffusing Microsoft.UI.Xaml;\n\nnamespace HikariEditor\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n        }\n", "        protected override void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)\n        {\n            m_window = new MainWindow();\n            m_window.Activate();\n        }\n\n        private Window? m_window;\n    }\n}\n"]}
{"filename": "HikariEditor/Open.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml.Input;\nusing Microsoft.UI.Xaml.Navigation;\n\n\nnamespace HikariEditor\n{\n    public sealed partial class Open : Page\n    {\n        List<Directories>? items;\n        Frame? explorerFrame;\n        MainWindow? mainWindow;\n        string? currentDir;\n", "    public sealed partial class Open : Page\n    {\n        List<Directories>? items;\n        Frame? explorerFrame;\n        MainWindow? mainWindow;\n        string? currentDir;\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            if (e != null && e.Parameter != null)\n                mainWindow = (MainWindow)e.Parameter;\n", "            if (e != null && e.Parameter != null)\n                mainWindow = (MainWindow)e.Parameter;\n\n            if (mainWindow != null)\n                explorerFrame = mainWindow.contentFrame;\n\n            base.OnNavigatedTo(e);\n        }\n\n        public Open()\n        {\n            InitializeComponent();\n            DirOpenHome();\n        }\n", "        private void Directories_DoubleTapped(object sender, DoubleTappedRoutedEventArgs e)\n        {\n            if ((Directories)Directories.SelectedValue == null)\n                return;\n            DirOpenParentBtn.IsEnabled = true;\n            string? dir = ((Directories)Directories.SelectedValue).Path;\n            currentDir = dir;\n            DirPath.Text = dir;\n            string[] dirs = Directory.GetDirectories(dir!);\n            items = new();\n            foreach (string d in dirs)\n            {\n                items.Add(new Directories { Path = d, Name = Path.GetFileName(d) });\n            }\n            Directories.ItemsSource = items;\n            OpenBtn.IsEnabled = true;\n        }\n", "            foreach (string d in dirs)\n            {\n                items.Add(new Directories { Path = d, Name = Path.GetFileName(d) });\n            }\n            Directories.ItemsSource = items;\n            OpenBtn.IsEnabled = true;\n        }\n\n        private void DirOpenHomeBtnClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            DirOpenHome();\n        }\n\n        void DirOpenHome()\n        {\n            DirOpenParentBtn.IsEnabled = true;\n            items = new();\n            string? homeDir = Environment.GetEnvironmentVariable(\"userprofile\");\n            currentDir = homeDir;", "        private void DirOpenHomeBtnClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            DirOpenHome();\n        }\n\n        void DirOpenHome()\n        {\n            DirOpenParentBtn.IsEnabled = true;\n            items = new();\n            string? homeDir = Environment.GetEnvironmentVariable(\"userprofile\");\n            currentDir = homeDir;", "            if (homeDir == null)\n            {\n                Error.Dialog(\"\u008b\u03d0`G[\", \"\u008b\u03d0`\u0142B\", mainWindow!.Content.XamlRoot);\n                return;\n            };\n            string[] homeDirs = Directory.GetDirectories(homeDir);\n            foreach (string dir in homeDirs)\n            {\n                items.Add(new Directories { Path = dir, Name = Path.GetFileName(dir) });\n            }\n            DirPath.Text = homeDir;\n            Directories.ItemsSource = items;\n            OpenBtn.IsEnabled = true;\n        }\n\n        void DirOpenComputer()\n        {\n            DirOpenParentBtn.IsEnabled = false;\n            items = new();", "            foreach (string drive in Directory.GetLogicalDrives())\n            {\n                items.Add(new Directories { Path = drive, Name = drive });\n            }\n            DirPath.Text = \"\";\n            currentDir = \"\";\n            Directories.ItemsSource = items;\n            OpenBtn.IsEnabled = true;\n        }\n\n        void DirOpenComputerClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            DirOpenComputer();\n        }\n\n        void DirOpenParentClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            items = new();\n            string dir = DirPath.Text;", "            if (string.IsNullOrEmpty(dir))\n                return;\n            if (currentDir == null)\n            {\n                Error.Dialog(\"\u03d0`G[\", \"\u0742\u0303fBNg`\u0142B\", mainWindow!.Content.XamlRoot);\n                return;\n            }\n            DirectoryInfo? parentDirInfo = Directory.GetParent(currentDir);\n            if (parentDirInfo == null)\n            {\n                DirOpenComputer();\n                return;\n            }\n            string parentDir = parentDirInfo.FullName;\n            string[] parentDirs = Directory.GetDirectories(parentDir);", "            if (parentDirInfo == null)\n            {\n                DirOpenComputer();\n                return;\n            }\n            string parentDir = parentDirInfo.FullName;\n            string[] parentDirs = Directory.GetDirectories(parentDir);\n            foreach (string d in parentDirs)\n            {\n                items.Add(new Directories { Path = d, Name = Path.GetFileName(d) });\n            }\n            DirPath.Text = parentDir;\n            currentDir = parentDir;\n            Directories.ItemsSource = items;", "            if (currentDir == \"\")\n                OpenBtn.IsEnabled = false;\n        }\n\n        // J{^\u0303NbN\n        private void OpenBtn_Click(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            Settings settings = new();\n            string openDirPath = DirPath.Text;\n            settings.OpenDirPath = openDirPath;\n            settings.SaveSetting();\n            explorerFrame!.Navigate(typeof(Explorer), mainWindow);\n            mainWindow!.Menu.SelectedItem = mainWindow.ItemExplorer;\n            mainWindow.editorFrame.Navigate(typeof(Editor), mainWindow);\n            mainWindow.OpenExplorer.IsEnabled = true;\n            mainWindow.SideMenuEditorArea.ColumnDefinitions[0].Width = new GridLength(360);\n        }\n", "        private void Directories_Tapped(object sender, TappedRoutedEventArgs e)\n        {\n            if ((Directories)Directories.SelectedValue == null)\n                return;\n            DirPath.Text = ((Directories)Directories.SelectedValue).Path;\n        }\n\n        private void OpenCloseButtonClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            mainWindow!.editorFrame.Navigate(typeof(Editor), mainWindow);\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Properties/Resources.Designer.cs", "chunked_list": ["\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     \u3053\u306e\u30b3\u30fc\u30c9\u306f\u30c4\u30fc\u30eb\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n//     \u30e9\u30f3\u30bf\u30a4\u30e0 \u30d0\u30fc\u30b8\u30e7\u30f3:4.0.30319.42000\n//\n//     \u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u5909\u66f4\u306f\u3001\u4ee5\u4e0b\u306e\u72b6\u6cc1\u4e0b\u3067\u4e0d\u6b63\u306a\u52d5\u4f5c\u306e\u539f\u56e0\u306b\u306a\u3063\u305f\u308a\u3001\n//     \u30b3\u30fc\u30c9\u304c\u518d\u751f\u6210\u3055\u308c\u308b\u3068\u304d\u306b\u640d\u5931\u3057\u305f\u308a\u3057\u307e\u3059\u3002\n// </auto-generated>\n//------------------------------------------------------------------------------\n", "//------------------------------------------------------------------------------\n\nnamespace HikariEditor.Properties {\n    using System;\n    \n    \n    /// <summary>\n    ///   \u30ed\u30fc\u30ab\u30e9\u30a4\u30ba\u3055\u308c\u305f\u6587\u5b57\u5217\u306a\u3069\u3092\u691c\u7d22\u3059\u308b\u305f\u3081\u306e\u3001\u53b3\u5bc6\u306b\u578b\u6307\u5b9a\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9 \u30af\u30e9\u30b9\u3067\u3059\u3002\n    /// </summary>\n    // \u3053\u306e\u30af\u30e9\u30b9\u306f StronglyTypedResourceBuilder \u30af\u30e9\u30b9\u304c ResGen", "    /// </summary>\n    // \u3053\u306e\u30af\u30e9\u30b9\u306f StronglyTypedResourceBuilder \u30af\u30e9\u30b9\u304c ResGen\n    // \u307e\u305f\u306f Visual Studio \u306e\u3088\u3046\u306a\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u3066\u81ea\u52d5\u751f\u6210\u3055\u308c\u307e\u3057\u305f\u3002\n    // \u30e1\u30f3\u30d0\u30fc\u3092\u8ffd\u52a0\u307e\u305f\u306f\u524a\u9664\u3059\u308b\u306b\u306f\u3001.ResX \u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u3066\u3001/str \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u5171\u306b\n    // ResGen \u3092\u5b9f\u884c\u3057\u76f4\u3059\u304b\u3001\u307e\u305f\u306f VS \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3057\u76f4\u3057\u307e\u3059\u3002\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        ", "    internal class Resources {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal Resources() {\n        }\n        \n        /// <summary>\n        ///   \u3053\u306e\u30af\u30e9\u30b9\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f ResourceManager \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Resources.ResourceManager ResourceManager {\n            get {", "                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"HikariEditor.Properties.Resources\", typeof(Resources).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   \u3059\u3079\u3066\u306b\u3064\u3044\u3066\u3001\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e CurrentUICulture \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\n        ///   \u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u306e CurrentUICulture \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        internal static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Terminal/TerminalUnit.xaml.cs", "chunked_list": ["// Copyright (c) Microsoft Corporation and Contributors.\n// Licensed under the MIT License.\n\nusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing System;\nusing Windows.Storage;\n\nnamespace HikariEditor\n{\n    public sealed partial class TerminalUnit : Page\n    {\n        public TerminalUnit()\n        {\n            InitializeComponent();\n\n            ViewWebView();\n        }\n\n\n        async void ViewWebView()\n        {\n            string theme = \"light\";", "namespace HikariEditor\n{\n    public sealed partial class TerminalUnit : Page\n    {\n        public TerminalUnit()\n        {\n            InitializeComponent();\n\n            ViewWebView();\n        }\n\n\n        async void ViewWebView()\n        {\n            string theme = \"light\";", "            if (ActualTheme == ElementTheme.Dark)\n            {\n                theme = \"dark\";\n            }\n            StorageFile htmlFile = await StorageFile.GetFileFromApplicationUriAsync(new Uri($\"ms-appx:///Terminal/index.html?theme={theme}\"));\n            WebViewTerminal.Source = new Uri(htmlFile.Path + $\"?theme={theme}\");\n        }\n    }\n}"]}
{"filename": "HikariEditor/Terminal/Terminal.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml.Navigation;\n\nnamespace HikariEditor\n{\n    public sealed partial class Terminal : Page\n    {\n        MainWindow? mainWindow;\n\n        static public void ClickOpenTerminal(MainWindow mainWindow)\n        {\n            mainWindow.terminalFrame.Navigate(typeof(Terminal), mainWindow);\n            mainWindow.terminalFrame.Height = 300;\n            mainWindow.OpenTerminal.IsEnabled = false;\n        }\n", "        static public void ClickOpenTerminal(MainWindow mainWindow)\n        {\n            mainWindow.terminalFrame.Navigate(typeof(Terminal), mainWindow);\n            mainWindow.terminalFrame.Height = 300;\n            mainWindow.OpenTerminal.IsEnabled = false;\n        }\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            mainWindow = (MainWindow)e.Parameter;\n            mainWindow.terminal = this;\n            base.OnNavigatedTo(e);\n        }\n\n        public Terminal()\n        {\n            InitializeComponent();\n        }\n", "        public void AddNewLogPage(TabView tabs)\n        {\n            LogPage frame = new();\n            TabViewItem newTab = new()\n            {\n                Header = \"Oo\",\n                Content = frame,\n                IsSelected = true\n            };\n            mainWindow!.logTabPanel = frame.LogTabPanel;\n            tabs.TabItems.Add(newTab);\n        }\n\n        // ^u\u0312\u01c9", "        public void AddNewTab(TabView tabs)\n        {\n            TerminalUnit frame = new();\n            TabViewItem newTab = new()\n            {\n                Header = \"^[~i\",\n                Content = frame,\n                IsSelected = true\n            };\n            tabs.TabItems.Add(newTab);\n        }\n\n        // ^u\u0312\u01c9{^NbN", "        private void TabViewAddTabButtonClick(TabView sender, object args)\n        {\n            AddNewTab(sender);\n        }\n\n        // ^[~iEOo\u0343^u\u0082\n        private void TabViewTabCloseRequested(TabView sender, TabViewTabCloseRequestedEventArgs args)\n        {\n            /* Oo\u0342\u0082\ua347\u0241Aj[{^L\u0242 */\n            if (((TabViewItem)sender.SelectedItem).Content.ToString() == \"HikariEditor.LogPage\")\n                mainWindow!.OpenLog.IsEnabled = true;\n\n            /* Y^u\ud3dc */\n            sender.TabItems.Remove(args.Tab);\n\n            /* ^u\u0202\ua347\u0241Aj[{^L\u0242 */", "            if (((TabViewItem)sender.SelectedItem).Content.ToString() == \"HikariEditor.LogPage\")\n                mainWindow!.OpenLog.IsEnabled = true;\n\n            /* Y^u\ud3dc */\n            sender.TabItems.Remove(args.Tab);\n\n            /* ^u\u0202\ua347\u0241Aj[{^L\u0242 */\n            if (sender.TabItems.Count == 0)\n            {\n                mainWindow!.OpenTerminal.IsEnabled = true;\n                mainWindow.OpenLog.IsEnabled = true;\n                mainWindow.terminalFrame.Height = 0;\n            };\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Preview/PDF.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml.Navigation;\n\nnamespace HikariEditor\n{\n    public sealed partial class PDF : Page\n    {\n        MainWindow? mainWindow;\n        FileItem? fileItem;\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            PDFPageInfo? pdfPageInfo = e.Parameter as PDFPageInfo;\n            mainWindow = pdfPageInfo!.mainWindow;\n            fileItem = pdfPageInfo!.fileItem;\n\n            WebView.Source = new Uri(fileItem!.Path);\n\n            base.OnNavigatedTo(e);\n        }\n\n        public PDF()\n        {\n            InitializeComponent();\n        }\n\n\n    }\n}\n", "        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            PDFPageInfo? pdfPageInfo = e.Parameter as PDFPageInfo;\n            mainWindow = pdfPageInfo!.mainWindow;\n            fileItem = pdfPageInfo!.fileItem;\n\n            WebView.Source = new Uri(fileItem!.Path);\n\n            base.OnNavigatedTo(e);\n        }\n\n        public PDF()\n        {\n            InitializeComponent();\n        }\n\n\n    }\n}\n"]}
{"filename": "HikariEditor/Preview/PDFPageInfo.cs", "chunked_list": ["\ufeffnamespace HikariEditor\n{\n    internal class PDFPageInfo\n    {\n        public MainWindow? mainWindow;\n        public FileItem? fileItem;\n    }\n}\n"]}
{"filename": "HikariEditor/Editor/Editor.xaml.cs", "chunked_list": ["\ufeffusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml.Navigation;\nusing System.Diagnostics;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing Windows.ApplicationModel.DataTransfer;\n", "using Windows.ApplicationModel.DataTransfer;\n\nnamespace HikariEditor\n{\n    public sealed partial class Editor : Page\n    {\n        readonly List<string> tabs = new() { };\n        MainWindow? mainWindow;\n        private int counter = 0;\n\n        public List<string> Tabs1 => tabs;\n\n        public MainWindow? MainWindow { get => mainWindow; set => mainWindow = value; }", "        private int counter = 0;\n\n        public List<string> Tabs1 => tabs;\n\n        public MainWindow? MainWindow { get => mainWindow; set => mainWindow = value; }\n        public int Counter { get => counter; set => counter = value; }\n\n        struct PostInfo\n        {\n            private string top;\n            private string body;\n", "            private string top;\n            private string body;\n\n            public string Top { readonly get => top; set => top = value; }\n            public string Body { readonly get => body; set => body = value; }\n        }\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            MainWindow = e.Parameter as MainWindow;\n            MainWindow!.editor = this;\n            base.OnNavigatedTo(e);\n        }\n\n        public Editor()\n        {\n            InitializeComponent();\n            WaitServer();\n        }\n", "        async public void CallPasteFunction(string text)\n        {\n            // \u8cbc\u4ed8\u6a5f\u80fd\n            TabViewItem tab = (TabViewItem)Tabs.SelectedItem;\n            if (tab == null) return;\n            EditorUnit? editorUnit = tab.Content as EditorUnit;\n            //if (editorUnit == null) return;\n            WebView2 webView = editorUnit!.WebView;\n            //if (webView == null) return;\n            string encText = new Text(text).EncodeBase64();\n            await webView.ExecuteScriptAsync($\"paste_text('{encText}')\");\n        }\n", "            //if (webView == null) return;\n            string encText = new Text(text).EncodeBase64();\n            await webView.ExecuteScriptAsync($\"paste_text('{encText}')\");\n        }\n\n        async public void CallCopyFunction()\n        {\n            // \u30b3\u30d4\u30fc\u6a5f\u80fd\n            TabViewItem tab = (TabViewItem)Tabs.SelectedItem;\n            EditorUnit? editorUnit = tab.Content as EditorUnit;\n            WebView2 webView = editorUnit!.WebView;", "            if (webView == null) return;\n            await webView.ExecuteScriptAsync($\"copy_text()\");\n        }\n\n        static string Str2Base64(string str)\n        {\n            byte[] bytesToEncode = System.Text.Encoding.UTF8.GetBytes(str);\n            string base64EncodedString = Convert.ToBase64String(bytesToEncode);\n            return base64EncodedString;\n        }\n\n        static string Base642Str(string b64str)\n        {\n            byte[] b64bytes;\n            int mod4 = b64str.Length % 4;", "            if (mod4 > 0)\n                b64str += new string('=', 4 - mod4);\n\n            try\n            {\n                b64bytes = Convert.FromBase64String(b64str);\n            }\n            catch (Exception e)\n            {\n                Debug.WriteLine(\"Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u304c\u3067\u304d\u307e\u305b\u3093\");\n                Debug.WriteLine(e);\n                return \"\";\n            }\n\n            return Encoding.UTF8.GetString(b64bytes);\n        }\n\n        //static void TabViewAddTabButtonClick(TabView sender, object args)\n        //{\n        //    TabViewItem newTab = new();\n        //    newTab.IconSource = new SymbolIconSource() { Symbol = Symbol.Document };\n        //    newTab.Header = \"Untitled\";\n        //    Frame frame = new();\n        //    newTab.Content = frame;\n        //    newTab.IsSelected = true;\n        //    sender.TabItems.Add(newTab);\n        //}\n", "        private void TabViewCloseTab(TabView sender, TabViewTabCloseRequestedEventArgs args)\n        {\n            Tabs1.Remove(args.Tab.Name);\n            sender.TabItems.Remove(args.Tab);\n            if (Tabs1.Count == 0)\n            {\n                MainWindow!.editorFrame.Height = 0;\n                MainWindow.previewFrame.Height = 0;\n            }\n        }\n\n        async void WaitServer()\n        {", "            while (true)\n            {\n                await Server();\n            }\n        }\n\n        public void AddTab(string fileName, string shortFileName)\n        {\n            // \u30bf\u30d6\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\n            if (Tabs1.Contains(fileName))\n            {\n                TabViewItem tab = (TabViewItem)Tabs.FindName(fileName);", "            if (Tabs1.Contains(fileName))\n            {\n                TabViewItem tab = (TabViewItem)Tabs.FindName(fileName);\n                if (tab != null)\n                    tab.IsSelected = true;\n                return;\n            }\n            TabListAdd(fileName);\n            if (!File.Exists(fileName)) return;\n            EditorUnit frame = new(fileName);\n            TabViewItem newTab = new()\n            {\n                IconSource = new SymbolIconSource() { Symbol = Symbol.Document },\n                Header = shortFileName,\n                Content = frame,\n                Name = fileName,\n                IsSelected = true\n            };\n            Tabs.TabItems.Add(newTab);\n        }\n\n        void TabListAdd(string fileName)\n        {", "            if (!File.Exists(fileName)) return;\n            EditorUnit frame = new(fileName);\n            TabViewItem newTab = new()\n            {\n                IconSource = new SymbolIconSource() { Symbol = Symbol.Document },\n                Header = shortFileName,\n                Content = frame,\n                Name = fileName,\n                IsSelected = true\n            };\n            Tabs.TabItems.Add(newTab);\n        }\n\n        void TabListAdd(string fileName)\n        {", "            if (Tabs1.Contains(fileName)) return;\n            Tabs1.Add(fileName);\n        }\n\n        //static string Str2MD5(string src)\n        //{\n        //    byte[] srcBytes = Encoding.UTF8.GetBytes(src);\n        //    string MD5src;\n        //    byte[] MD5srcBytes = MD5.HashData(srcBytes);\n        //    StringBuilder sb = new();\n        //    for (int i = 0; i < MD5srcBytes.Length; i++)\n        //        sb.Append(MD5srcBytes[i].ToString(\"x2\"));\n        //    MD5src = sb.ToString();\n        //    return MD5src;\n        //}\n\n        async Task Server()\n        {\n            IPAddress ipaddr = IPAddress.Parse(\"127.0.0.1\");\n            IPEndPoint ipEndPoint = new(ipaddr, 8086);\n            TcpListener listener = new(ipEndPoint);\n\n            try\n            {\n                listener.Start();\n                using TcpClient handler = await listener.AcceptTcpClientAsync();\n                using NetworkStream stream = handler.GetStream();\n                stream.Socket.ReceiveBufferSize = 67108864;\n                byte[] buffer = new byte[stream.Socket.ReceiveBufferSize];\n                stream.Read(buffer, 0, buffer.Length);\n\n                string commands = Encoding.UTF8.GetString(buffer, 0, buffer.Length);\n\n                // HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408", "        //    for (int i = 0; i < MD5srcBytes.Length; i++)\n        //        sb.Append(MD5srcBytes[i].ToString(\"x2\"));\n        //    MD5src = sb.ToString();\n        //    return MD5src;\n        //}\n\n        async Task Server()\n        {\n            IPAddress ipaddr = IPAddress.Parse(\"127.0.0.1\");\n            IPEndPoint ipEndPoint = new(ipaddr, 8086);\n            TcpListener listener = new(ipEndPoint);\n\n            try\n            {\n                listener.Start();\n                using TcpClient handler = await listener.AcceptTcpClientAsync();\n                using NetworkStream stream = handler.GetStream();\n                stream.Socket.ReceiveBufferSize = 67108864;\n                byte[] buffer = new byte[stream.Socket.ReceiveBufferSize];\n                stream.Read(buffer, 0, buffer.Length);\n\n                string commands = Encoding.UTF8.GetString(buffer, 0, buffer.Length);\n\n                // HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5834\u5408", "                if (commands[0..4] == \"POST\")\n                {\n                    //PostInfo postInfo = new PostInfo();\n                    PostInfo postInfo = ReadPost(commands);\n                    string top = postInfo.Top;\n                    string body = postInfo.Body;\n\n                    Debug.WriteLine(body);\n                    string[] data = top.Split(' ');\n\n                    /* \u4fdd\u5b58\u51e6\u7406 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97 */\n                    string parameter = data[1];\n                    string pattern = @\"^/\\?data=(.*)$\";\n                    Match match = Regex.Match(parameter, pattern);", "                    if (match.Success)\n                    {\n                        string b64Command = match.Groups[1].Value;\n                        /* \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c9 */\n                        string httpCommand = Base642Str(b64Command);\n\n                        FileSave(body, httpCommand);\n                        AutoSave(body, httpCommand);\n                        CopyClipboard(httpCommand);\n                    }\n\n                    // \u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u51e6\u7406\n                    FileOpen(parameter, stream);\n                }\n            }\n            finally\n            {\n                listener.Stop();\n            }\n        }\n\n        static PostInfo ReadPost(string commands)\n        {\n            PostInfo postInfo = new();\n            string? top;\n            string? body;", "            using (StringReader? stringReader = new(commands))\n            {\n                top = stringReader.ReadLine();\n                int nLine = 0;\n                string? line = stringReader.ReadLine();\n                while (line != string.Empty)\n                {\n                    line = stringReader.ReadLine();\n                    nLine++;\n                    if (nLine == 64) break;\n                }\n                body = stringReader.ReadLine()!.TrimEnd('\\0');\n            }\n            postInfo.Top = top!;\n            postInfo.Body = body;\n            return postInfo;\n        }\n\n        static void FileOpen(string parameter, NetworkStream stream)\n        {\n            string pattern = @\"^/\\?open=(.*)$\";\n            Match match = Regex.Match(parameter, pattern);", "                    if (nLine == 64) break;\n                }\n                body = stringReader.ReadLine()!.TrimEnd('\\0');\n            }\n            postInfo.Top = top!;\n            postInfo.Body = body;\n            return postInfo;\n        }\n\n        static void FileOpen(string parameter, NetworkStream stream)\n        {\n            string pattern = @\"^/\\?open=(.*)$\";\n            Match match = Regex.Match(parameter, pattern);", "            if (match.Success)\n            {\n                string b64file = match.Groups[1].Value;\n                string fileName = Base642Str(b64file);\n                string src;\n                try\n                {\n                    src = File.ReadAllText(fileName);\n                }\n                catch (Exception e)\n                {\n                    Debug.WriteLine(fileName);\n                    Debug.WriteLine(\"\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002\");\n                    Debug.WriteLine(e.Message);\n                    return;\n                }\n                string log = $\"=== \u8aad\u307f\u8fbc\u307f: {fileName} ===\\n\";\n                log += src;\n                log += \"\\n======\";\n                Debug.WriteLine(log);\n                string b64src = Str2Base64(src);\n\n                byte[] responseBytes = Encoding.UTF8.GetBytes($\"HTTP/1.1 200 OK\\r\\nContent-Length: {b64src.Length}\\r\\nAccess-Control-Allow-Origin: *\\r\\n\\r\\n{b64src}\");\n                stream.Write(responseBytes, 0, responseBytes.Length);\n                byte[] bufferB64src = Encoding.UTF8.GetBytes(b64src);\n                stream.Write(bufferB64src, 0, bufferB64src.Length);\n            }\n        }\n\n        void FileSave(string body, string httpCommand)\n        {", "                catch (Exception e)\n                {\n                    Debug.WriteLine(fileName);\n                    Debug.WriteLine(\"\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3081\u307e\u305b\u3093\u3067\u3057\u305f\u3002\");\n                    Debug.WriteLine(e.Message);\n                    return;\n                }\n                string log = $\"=== \u8aad\u307f\u8fbc\u307f: {fileName} ===\\n\";\n                log += src;\n                log += \"\\n======\";\n                Debug.WriteLine(log);\n                string b64src = Str2Base64(src);\n\n                byte[] responseBytes = Encoding.UTF8.GetBytes($\"HTTP/1.1 200 OK\\r\\nContent-Length: {b64src.Length}\\r\\nAccess-Control-Allow-Origin: *\\r\\n\\r\\n{b64src}\");\n                stream.Write(responseBytes, 0, responseBytes.Length);\n                byte[] bufferB64src = Encoding.UTF8.GetBytes(b64src);\n                stream.Write(bufferB64src, 0, bufferB64src.Length);\n            }\n        }\n\n        void FileSave(string body, string httpCommand)\n        {", "            if (httpCommand.Length >= 4 && httpCommand[0..4] == \"save\")\n            {\n                string[] srcs = httpCommand[5..^0].Split('\\n');\n                string fileName = Base642Str(srcs[0]); /* \u30d5\u30a1\u30a4\u30eb\u540d */\n                FileItem fileItem = new(fileName);\n                string srcCode = Base642Str(body);\n                Debug.WriteLine($\"=== {fileItem.Name} ===\\n{srcCode}\\n===\");\n                fileItem.Save(srcCode, MainWindow!.NLBtn.Content.ToString());\n                MainWindow.StatusBar.Text = $\"{fileItem.Name} \u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\";\n                LogPage.AddLog(MainWindow, $\"{fileItem.Name} \u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\");\n                Counter++;\n                DelayResetStatusBar(1000);", "                if (fileItem.Extension == \".tex\")\n                {\n                    MainWindow.StatusBar.Text = $\"{fileItem.Name} \u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002TeX \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059...\";\n                    LogPage.AddLog(MainWindow, \"LaTeX \u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059...\");\n                    Counter++;\n                    DelayResetStatusBar(1000);\n                    _ = LaTeX.Compile(MainWindow, fileItem, this);\n                }\n            }\n        }\n\n        void AutoSave(string body, string httpCommand)\n        {", "            if (httpCommand.Length >= 8 && httpCommand[0..8] == \"autosave\")\n            {\n                //string src = httpCommand[0..8];\n                string[] srcs = httpCommand[9..^0].Split('\\n');\n                string fileName = Base642Str(srcs[0]);\n                FileItem fileItem = new(fileName);\n                string srcCode = Base642Str(body);\n                if (!MainWindow!.AutoSave.IsChecked)\n                    return;\n                Debug.WriteLine($\"=== \u81ea\u52d5\u4fdd\u5b58: {fileItem.Name} ===\\n{srcCode}\\n===\");\n                fileItem.Save(srcCode, MainWindow.NLBtn.Content.ToString());\n                MainWindow.StatusBar.Text = $\"{fileItem.Name} \u3092\u81ea\u52d5\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\";\n                LogPage.AddLog(MainWindow, $\"{fileItem.Name} \u3092\u81ea\u52d5\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\");\n                Counter++;\n                DelayResetStatusBar(1000);\n            }\n        }\n\n        static void CopyClipboard(string httpCommand)\n        {", "            if (httpCommand.Length >= 14 && httpCommand[0..14] == \"copy-clipboard\")\n            {\n                //string src = httpCommand[0..14];\n                string[] srcs = httpCommand[15..^0].Split('\\n');\n                string fileName = Base642Str(srcs[0]);\n                FileItem fileItem = new(fileName);\n                string srcCode = string.Join(Environment.NewLine, srcs[1..^0]);\n                Debug.WriteLine($\"=== \u30b3\u30d4\u30fc: {fileItem.Name} ===\\n{srcCode}\\n===\");\n                DataPackage dataPackage = new();\n                dataPackage.SetText(srcCode);\n                Clipboard.SetContent(dataPackage);\n            }\n        }\n", "        public async void DelayResetStatusBar(int sec)\n        {\n            int count = Counter;\n            await Task.Delay(TimeSpan.FromMilliseconds(sec));\n            if (count >= Counter)\n            {\n                MainWindow!.StatusBar.Text = \"\";\n            }\n        }\n\n        private void EditorTabChange(object sender, SelectionChangedEventArgs e)\n        {\n            FrameworkElement selectedItem = (FrameworkElement)((TabView)sender).SelectedItem;", "        private void EditorTabChange(object sender, SelectionChangedEventArgs e)\n        {\n            FrameworkElement selectedItem = (FrameworkElement)((TabView)sender).SelectedItem;\n            if (selectedItem == null) return;\n            string fileName = ((FrameworkElement)((TabView)sender).SelectedItem).Name;\n            string extension = System.IO.Path.GetExtension(fileName);\n            if (extension == \".tex\")\n            {\n                MainWindow!.rightArea.ColumnDefinitions[1].Width = new GridLength(1, GridUnitType.Star);\n            }\n            else\n            {\n                MainWindow!.rightArea.ColumnDefinitions[1].Width = new GridLength(0);\n            }\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Editor/EditorUnit.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing System;\nusing System.IO;\n\nnamespace HikariEditor\n{\n    public sealed partial class EditorUnit : UserControl\n    {\n        static string Str2Base64(string str)\n        {\n            byte[] bytesToEncode = System.Text.Encoding.UTF8.GetBytes(str);\n            string base64EncodedString = Convert.ToBase64String(bytesToEncode);\n            return base64EncodedString;\n        }\n\n        public EditorUnit(string fileName)\n        {\n            InitializeComponent();\n\n            /* ^uJ */", "            if (File.Exists(fileName))\n            {\n                string extension = Path.GetExtension(fileName);\n                string tempDirectory = Path.GetTempPath();\n                string editorDir = $\"{tempDirectory}HikariEditor\";\n                string uri = $\"{editorDir}\\\\editor\\\\index.html\";\n                uri += $\"?extension={extension}\";\n                uri += $\"&file={Str2Base64(fileName)}\";\n                if (ActualTheme == ElementTheme.Light)\n                {\n                    uri += \"&theme=vs-light\";\n                }\n                WebView.Source = new Uri(uri);\n            }\n        }\n    }\n}\n", "                if (ActualTheme == ElementTheme.Light)\n                {\n                    uri += \"&theme=vs-light\";\n                }\n                WebView.Source = new Uri(uri);\n            }\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Explorer/NewFile.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\n\nnamespace HikariEditor\n{\n    public sealed partial class NewFile : Page\n    {\n        public NewFile()\n        {\n            this.InitializeComponent();\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Explorer/NewFolder.xaml.cs", "chunked_list": ["using Microsoft.UI.Xaml.Controls;\n\nnamespace HikariEditor\n{\n    public sealed partial class NewFolder : Page\n    {\n        public NewFolder()\n        {\n            InitializeComponent();\n        }\n    }\n}\n"]}
{"filename": "HikariEditor/Explorer/Explorer.xaml.cs", "chunked_list": ["\ufeffusing Microsoft.UI.Xaml;\nusing Microsoft.UI.Xaml.Controls;\nusing Microsoft.UI.Xaml.Navigation;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Runtime.InteropServices;\n\nnamespace HikariEditor\n{\n    public sealed partial class Explorer : Page\n    {\n        string fullFile;\n        MainWindow? mainWindow;\n", "{\n    public sealed partial class Explorer : Page\n    {\n        string fullFile;\n        MainWindow? mainWindow;\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            mainWindow = (MainWindow)e.Parameter;\n            base.OnNavigatedTo(e);\n        }\n\n        public Explorer()\n        {\n            InitializeComponent();\n\n            Settings settings = new();\n            settings.LoadSetting();\n", "            if (settings.OpenDirPath == string.Empty)\n            {\n                fullFile = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);\n                settings.ExplorerDir = fullFile;\n            }\n            else\n            {\n                fullFile = settings.OpenDirPath;\n            }\n            settings.SaveSetting();\n\n            SetIcon(@\"C:\\Windows\\System32\\imageres.dll\", 265, ExplorerIcon);\n            SetIcon(@\"C:\\Windows\\System32\\imageres.dll\", 229, ReloadIcon);\n            SetIcon(@\"C:\\Windows\\System32\\imageres.dll\", 50, DeleteIcon);\n\n            AddTreeViewFiles(fullFile);\n            ExplorerTree.ItemInvoked += FileClick;\n        }\n\n        // \u30c4\u30ea\u30fc\u3092\u9078\u629e\u3057\u305f\u3068\u304d\n        void FileClick(TreeView sender, TreeViewItemInvokedEventArgs args)\n        {\n            FileItem file = (FileItem)args.InvokedItem;", "            if (file == null) return;\n            Settings settings = new();\n            settings.LoadSetting();\n            if (Directory.Exists(file.Path))\n            {\n                settings.ExplorerDir = file.Path;\n                return;\n            }\n            else if (File.Exists(file.Path))\n            {\n                settings.ExplorerDir = Path.GetDirectoryName(file.Path)!;\n            }\n            settings.SaveSetting();\n            mainWindow!.editor!.AddTab(file.Path, file.Name);\n            mainWindow.editorFrame.Height = double.NaN;\n\n            mainWindow.rightArea.ColumnDefinitions[1].Width =\n                file.Extension == \".tex\" ? new GridLength(1, GridUnitType.Star) : new GridLength(0);\n        }\n\n        static void AddChildNode(FileItem file)\n        {", "            else if (File.Exists(file.Path))\n            {\n                settings.ExplorerDir = Path.GetDirectoryName(file.Path)!;\n            }\n            settings.SaveSetting();\n            mainWindow!.editor!.AddTab(file.Path, file.Name);\n            mainWindow.editorFrame.Height = double.NaN;\n\n            mainWindow.rightArea.ColumnDefinitions[1].Width =\n                file.Extension == \".tex\" ? new GridLength(1, GridUnitType.Star) : new GridLength(0);\n        }\n\n        static void AddChildNode(FileItem file)\n        {", "            if (!Directory.Exists(file.Path)) return;\n            string[] fileList = Array.Empty<string>();\n            try\n            {\n                fileList = Directory.GetDirectories(file.Path, \"*\").Concat(Directory.GetFiles(file.Path, \"*\")).ToArray();\n            }\n            catch { }\n\n            foreach (string f in fileList)\n            {\n                FileItem chfile = Directory.Exists(f)\n                    ? new FileItem(f) { Icon1 = \"\\xE188\", Icon2 = \"\\xF12B\", Color1 = \"#FFCF48\", Color2 = \"#FFE0B2\", Flag = true }\n                    : new FileItem(f) { Icon1 = \"\\xE132\", Icon2 = \"\\xE130\", Color1 = \"#9E9E9E\", Color2 = \"#F5F5F5\", Flag = false };\n                file.Children.Add(chfile);\n            }\n        }\n\n        void AddTreeViewFiles(string filePath)\n        {\n            // \u5b50\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\n            string[] fileList = Array.Empty<string>();\n            try\n            {\n                fileList = Directory.GetDirectories(filePath, \"*\").Concat(Directory.GetFiles(filePath, \"*\")).ToArray();\n            }\n            catch\n            {\n            }\n", "            foreach (string f in fileList)\n            {\n                FileItem chfile = Directory.Exists(f)\n                    ? new FileItem(f) { Icon1 = \"\\xE188\", Icon2 = \"\\xF12B\", Color1 = \"#FFCF48\", Color2 = \"#FFE0B2\", Flag = true }\n                    : new FileItem(f) { Icon1 = \"\\xE132\", Icon2 = \"\\xE130\", Color1 = \"#9E9E9E\", Color2 = \"#F5F5F5\", Flag = false };\n                file.Children.Add(chfile);\n            }\n        }\n\n        void AddTreeViewFiles(string filePath)\n        {\n            // \u5b50\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\n            string[] fileList = Array.Empty<string>();\n            try\n            {\n                fileList = Directory.GetDirectories(filePath, \"*\").Concat(Directory.GetFiles(filePath, \"*\")).ToArray();\n            }\n            catch\n            {\n            }\n", "            foreach (string f in fileList)\n            {\n                FileItem file = Directory.Exists(f)\n                    ? new FileItem(f) { Icon1 = \"\\xE188\", Icon2 = \"\\xF12B\", Color1 = \"#FFCF48\", Color2 = \"#FFE0B2\", Flag = true }\n                    : new FileItem(f) { Icon1 = \"\\xE132\", Icon2 = \"\\xE130\", Color1 = \"#9E9E9E\", Color2 = \"#F5F5F5\", Flag = true };\n                ExplorerTree.RootNodes.Add(file);\n                AddChildNode(file);\n            }\n        }\n\n        private void ExplorerTreeExpanding(TreeView sender, TreeViewExpandingEventArgs args)\n        {\n            FileItem file = (FileItem)args.Node;", "        private void ExplorerTreeExpanding(TreeView sender, TreeViewExpandingEventArgs args)\n        {\n            FileItem file = (FileItem)args.Node;\n            foreach (FileItem f in file.Children.Cast<FileItem>())\n            {\n                if (!f.Flag) continue;\n                f.Flag = false;\n                AddChildNode(f);\n            }\n        }\n", "        private void ReloadButtonClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            mainWindow!.contentFrame.Navigate(typeof(Explorer), mainWindow);\n            mainWindow.OpenExplorer.IsEnabled = true;\n        }\n\n        [DllImport(\"shell32.dll\")]\n        public static extern int ExtractIconEx(\n            string file,\n            int index,\n            out IntPtr largeIconHandle,\n            out IntPtr smallIconHandle,\n            int icons\n        );\n\n        void SetIcon(string iconPath, int iconIndex, BitmapIcon img)\n        {\n            Icon icon;\n            IntPtr largeIconHandle = IntPtr.Zero;\n            IntPtr smallIconHandle = IntPtr.Zero;\n            ExtractIconEx(iconPath, iconIndex, out largeIconHandle, out smallIconHandle, 1);\n            icon = (Icon)Icon.FromHandle(largeIconHandle).Clone();\n            string tmpDir = $\"{Path.GetTempPath()}HikariEditor\\\\\";", "            if (!Directory.Exists(tmpDir))\n                Directory.CreateDirectory(tmpDir);\n            string iconFileName = Path.GetFileNameWithoutExtension(iconPath);\n            string iconResource = $\"{tmpDir}{iconFileName}-{iconIndex}.png\";\n            if (!File.Exists(iconResource))\n            {\n                using Bitmap bmp = icon.ToBitmap();\n                bmp.Save(iconResource);\n            }\n            //BitmapImage bmpImage = new();\n            Uri uri = new(iconResource);\n            img.UriSource = uri;\n        }\n", "        private void ClickOpenExplorer(object sender, RoutedEventArgs e)\n        {\n            mainWindow!.ClickOpenExplorer(sender, e);\n        }\n\n        async void ClickAddNewFile(object sender, RoutedEventArgs e)\n        {\n            ContentDialog dialog = new();\n            NewFile content = new();\n            dialog.XamlRoot = Content.XamlRoot;\n            dialog.Title = \"\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\";\n            dialog.PrimaryButtonText = \"OK\";\n            dialog.DefaultButton = ContentDialogButton.Primary;\n            dialog.Content = content;\n            await dialog.ShowAsync();\n\n            string addFileDir = ((FileItem)ExplorerTree.SelectedItem) == null ? fullFile : ((FileItem)ExplorerTree.SelectedItem).Path;\n            string fileName = content.fileName.Text;\n\n            FileItem addFile = new(addFileDir, fileName);", "            if (!addFile.CreateFile(mainWindow))\n            {\n                return;\n            }\n\n            FileItem fileItem = new(addFile.Path) { Icon1 = \"\\xE132\", Icon2 = \"\\xE130\", Color1 = \"#9E9E9E\", Color2 = \"#F5F5F5\", Flag = false };\n            if (((FileItem)ExplorerTree.SelectedItem) == null)\n                ExplorerTree.RootNodes.Add(fileItem);\n            else\n                ((FileItem)ExplorerTree.SelectedItem).Children.Add(fileItem);\n        }\n\n        async void ClickAddNewFolder(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            ContentDialog dialog = new();\n            NewFolder content = new();\n            dialog.XamlRoot = this.Content.XamlRoot;\n            dialog.Title = \"\u30d5\u30a9\u30eb\u30c0\u30fc\u4f5c\u6210\";\n            dialog.PrimaryButtonText = \"OK\";\n            dialog.DefaultButton = ContentDialogButton.Primary;\n            dialog.Content = content;\n            await dialog.ShowAsync();\n\n            string addFileDir = ((FileItem)ExplorerTree.SelectedItem) == null ? fullFile : ((FileItem)ExplorerTree.SelectedItem).Path;\n            FileItem folder = new(addFileDir, content.folderName.Text);", "            if (!folder.CreateDirectory(mainWindow))\n            {\n                return;\n            }\n\n            FileItem fileItem = new(folder.Path) { Icon1 = \"\\xE188\", Icon2 = \"\\xF12B\", Color1 = \"#FFCF48\", Color2 = \"#FFE0B2\", Flag = true };\n            if (((FileItem)ExplorerTree.SelectedItem) == null)\n                ExplorerTree.RootNodes.Add(fileItem);\n            else\n                ((FileItem)ExplorerTree.SelectedItem).Children.Add(fileItem);\n        }\n", "        private void DeleteFileButtonClick(object sender, Microsoft.UI.Xaml.RoutedEventArgs e)\n        {\n            FileItem? fileItem = ExplorerTree.SelectedItem as FileItem;\n            string file = fileItem == null ? fullFile : ((FileItem)ExplorerTree.SelectedItem).Path;\n            if (File.Exists(file))\n            {\n                try\n                {\n                    File.Delete(file);\n                    fileItem!.Parent.Children.Remove(fileItem);\n                }", "                catch (IOException err)\n                {\n                    Debug.WriteLine(err.Message);\n                    Error.Dialog(\"\u30a8\u30e9\u30fc\", err.Message, Content.XamlRoot);\n                    return;\n                }\n            }\n            else if (Directory.Exists(file))\n            {\n                try\n                {\n                    Directory.Delete(file);\n                }", "                catch (IOException err)\n                {\n                    Error.Dialog(\"\u4f8b\u5916: \u5165\u51fa\u529b\u30a8\u30e9\u30fc\", err.Message, mainWindow!.Content.XamlRoot);\n                }\n            }\n            else\n            {\n\n            }\n        }\n    }\n}"]}
