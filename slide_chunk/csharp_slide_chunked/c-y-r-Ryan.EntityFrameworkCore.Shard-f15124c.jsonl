{"filename": "test/Ryan.EntityFrameworkCore.Shard.Tests/SqlServerShardDbContextTests.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\nusing Ryan.EntityFrameworkCore;\nusing Ryan.EntityFrameworkCore.Builder;\nusing Ryan.EntityFrameworkCore.ModelBuilders;\nusing Ryan.Models;\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Xunit;", "using System.Threading.Tasks;\nusing Xunit;\n\nnamespace Ryan\n{\n    public class SqlServerShardDbContextTests : IDisposable\n    {\n        public ServiceProvider ServiceProvider { get; set; }\n\n        public SqlServerShardDbContextTests()\n        {\n            var collection = new ServiceCollection();\n            collection.AddShard();\n            collection.AddSingleton<EntityModelBuilder<M>, MEntityModelBuilder>();\n            collection.AddScoped<SqlServerShardDbContext>();\n\n            ServiceProvider = collection.BuildServiceProvider();\n\n            // \u83b7\u53d6\u5206\u8868\u914d\u7f6e\n            var entityShardConfiguration = ServiceProvider.GetRequiredService<IEntityShardConfiguration>();\n            entityShardConfiguration.AddShard<M>(\"M_2022\");\n            entityShardConfiguration.AddShard<M>(\"M_2023\");\n        }\n\n        [Fact]", "        public async Task Query()\n        {\n            var context = ServiceProvider.GetRequiredService<SqlServerShardDbContext>();\n\n            var years = new[] { 2022, 2023 };\n            var collection = context.AsQueryable<M>(x => years.Contains(x.Year), x => x.Id < 10);\n\n            Assert.True(collection.Any());\n        }\n\n        public void Dispose()\n        {\n            ServiceProvider.Dispose();\n        }\n    }\n}\n", "        public void Dispose()\n        {\n            ServiceProvider.Dispose();\n        }\n    }\n}\n"]}
{"filename": "test/Ryan.EntityFrameworkCore.Shard.Tests/EntityFrameworkCore/SqlServerShardDbContext.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Ryan.DependencyInjection;\nusing Ryan.Models;\n\nnamespace Ryan.EntityFrameworkCore\n{\n    [Shard(typeof(M))]\n    public class SqlServerShardDbContext : ShardDbContext\n    {\n        public SqlServerShardDbContext(IShardDependency shardDependency) : base(shardDependency)\n        {\n        }\n", "        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            optionsBuilder.UseSqlServer(\"Server=(local);Database=M;User Id=sa;Password=sa;\");\n        }\n    }\n}\n"]}
{"filename": "test/Ryan.EntityFrameworkCore.Shard.Tests/EntityFrameworkCore/ModelBuilders/MEntityModelBuilder.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Ryan.EntityFrameworkCore.Builder;\nusing Ryan.Models;\nusing System.Collections.Generic;\n\nnamespace Ryan.EntityFrameworkCore.ModelBuilders\n{\n    public class MEntityModelBuilder : EntityModelBuilder<M>\n    {\n        public override void Build<TImplementation>(ModelBuilder modelBuilder, string tableName)\n        {\n            modelBuilder.Entity<TImplementation>(b => \n            {\n                b.ToTable(tableName).HasKey(x => x.Id).IsClustered(false);\n\n                b.Property(x => x.Id).ValueGeneratedOnAdd();\n                b.Property(x => x.Year).IsRequired();\n                b.Property(x => x.Name).IsRequired().HasMaxLength(50);\n            });\n        }\n", "        public override void Build<TImplementation>(ModelBuilder modelBuilder, string tableName)\n        {\n            modelBuilder.Entity<TImplementation>(b => \n            {\n                b.ToTable(tableName).HasKey(x => x.Id).IsClustered(false);\n\n                b.Property(x => x.Id).ValueGeneratedOnAdd();\n                b.Property(x => x.Year).IsRequired();\n                b.Property(x => x.Name).IsRequired().HasMaxLength(50);\n            });\n        }\n", "        public override string GetTableName(Dictionary<string, string> value)\n        {\n            return $\"M_{value[\"Year\"]}\";\n        }\n\n        protected override void EntityConfiguration()\n        {\n            Apply(x => x.Year);\n        }\n    }\n}\n"]}
{"filename": "test/Ryan.EntityFrameworkCore.Shard.Tests/Models/M.cs", "chunked_list": ["\ufeffnamespace Ryan.Models\n{\n    public class M\n    {\n        public int Id { get; set; }\n\n        public int Year { get; set; }\n\n        public string Name { get; set; }\n    }\n}\n", "        public string Name { get; set; }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/ShardDbContext.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.ChangeTracking;\nusing Ryan.DependencyInjection;\nusing Ryan.EntityFrameworkCore.Builder;\nusing Ryan.EntityFrameworkCore.Proxy;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;", "using System.Linq.Expressions;\nusing System.Reflection;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Ryan.EntityFrameworkCore\n{\n    /// <summary>\n    /// \u5206\u8868\u4e0a\u4e0b\u6587\n    /// </summary>\n    public class ShardDbContext : DbContext\n    {\n        /// <summary>\n        /// \u5206\u8868\u5b9e\u4f53\n        /// </summary>\n        private List<Type> ShardEntityTypes { get; set; } = new List<Type>();\n\n        /// <summary>\n        /// \u5206\u8868\u4f9d\u8d56\n        /// </summary>", "    /// \u5206\u8868\u4e0a\u4e0b\u6587\n    /// </summary>\n    public class ShardDbContext : DbContext\n    {\n        /// <summary>\n        /// \u5206\u8868\u5b9e\u4f53\n        /// </summary>\n        private List<Type> ShardEntityTypes { get; set; } = new List<Type>();\n\n        /// <summary>\n        /// \u5206\u8868\u4f9d\u8d56\n        /// </summary>", "        public IShardDependency Dependencies { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5206\u8868\u4e0a\u4e0b\u6587\n        /// </summary>\n        public ShardDbContext(IShardDependency shardDependency)\n        {\n\n            InitShardConfiguration();\n            Dependencies = shardDependency;\n        }\n\n        /// <summary>\n        /// \u521d\u59cb\u5316\u5206\u8868\u914d\u7f6e\n        /// </summary>", "        private void InitShardConfiguration()\n        {\n            // \u83b7\u53d6\u5206\u8868\u7c7b\u578b\n            var shardAttribute = GetType().GetCustomAttribute<ShardAttribute>();\n            if (shardAttribute == null)\n            {\n                return;\n            }\n\n            ShardEntityTypes.AddRange(shardAttribute.GetShardEntities());\n        }\n\n        /// <summary>\n        /// \u914d\u7f6e\n        /// </summary>", "        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n        }\n\n        /// <summary>\n        /// \u6784\u5efa\u5b9e\u4f53\n        /// </summary>\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            // \u6784\u5efa ModelBuilder\n            foreach (var shardEntity in ShardEntityTypes)\n            {\n                Dependencies.EntityModelBuilderAccessorGenerator.Create(shardEntity).Accessor(shardEntity, modelBuilder);\n            }\n        }\n\n        /// <summary>\n        /// \u521b\u5efa\u975e\u67e5\u8be2\u4ee3\u7406\n        /// </summary>\n        internal EntityProxy CreateEntityProxy(object entity, EntityProxyType type)\n        {\n            // \u4e0a\u4e0b\u6587\u4ee3\u7406\n            var dbContextProxy = Dependencies.DbContextEntityProxyLookupGenerator\n                .Create(this)\n                .GetOrDefault(entity.GetType().BaseType!, this);\n\n            // \u521b\u5efa\u4ee3\u7406\n            var proxy = dbContextProxy.EntityProxies.FirstOrDefault(x => x.Entity == entity);", "            foreach (var shardEntity in ShardEntityTypes)\n            {\n                Dependencies.EntityModelBuilderAccessorGenerator.Create(shardEntity).Accessor(shardEntity, modelBuilder);\n            }\n        }\n\n        /// <summary>\n        /// \u521b\u5efa\u975e\u67e5\u8be2\u4ee3\u7406\n        /// </summary>\n        internal EntityProxy CreateEntityProxy(object entity, EntityProxyType type)\n        {\n            // \u4e0a\u4e0b\u6587\u4ee3\u7406\n            var dbContextProxy = Dependencies.DbContextEntityProxyLookupGenerator\n                .Create(this)\n                .GetOrDefault(entity.GetType().BaseType!, this);\n\n            // \u521b\u5efa\u4ee3\u7406\n            var proxy = dbContextProxy.EntityProxies.FirstOrDefault(x => x.Entity == entity);", "            if (proxy != null)\n            {\n                return proxy;\n            }\n\n            // \u521b\u5efa\u4ee3\u7406\n            dbContextProxy.EntityProxies.Add(\n                proxy = Dependencies.EntityProxyGenerator.Create(entity, EntityProxyType.NonQuery, this));\n\n            return proxy;\n        }\n\n        /// <summary>\n        /// \u5206\u8868\u67e5\u8be2\n        /// </summary>", "        public virtual IQueryable<TEntity> AsQueryable<TEntity>(Expression<Func<TEntity, bool>> expression) where TEntity : class\n        {\n            if (!ShardEntityTypes.Contains(typeof(TEntity)))\n            {\n                throw new InvalidOperationException();\n            }\n\n            // \u83b7\u53d6\u5b9e\u73b0\n            var queryables = Dependencies.ExpressionImplementationFinder\n                .Find<TEntity>(expression)\n                .Select(x => Dependencies.QueryableFinder.Find<TEntity>(this, x));\n            \n            // \u7ec4\u5408\u67e5\u8be2\n            var queryable = queryables.FirstOrDefault();", "            foreach (var nextQueryable in queryables.Skip(1))\n            {\n                queryable = queryable.Union(nextQueryable);\n            }\n\n            return queryable;\n        }\n\n        /// <summary>\n        /// \u5206\u8868\u67e5\u8be2\n        /// </summary>", "        public virtual IEnumerable<TEntity> AsQueryable<TEntity>(Expression<Func<TEntity, bool>> expression, Expression<Func<TEntity, bool>> predicate) where TEntity : class\n        {\n            if (!ShardEntityTypes.Contains(typeof(TEntity)))\n            {\n                throw new InvalidOperationException();\n            }\n\n            // \u83b7\u53d6\u5b9e\u73b0\n            var queryables = Dependencies.ExpressionImplementationFinder\n                .Find<TEntity>(expression)\n                .Select(x => Dependencies.QueryableFinder.Find<TEntity>(this, x));\n\n            // \u7ec4\u5408\u67e5\u8be2\n            return queryables.SelectMany(x => x.Where(predicate).ToList());\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry Add(object entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Add(entity);\n            }\n\n            // \u5c06\u5b9e\u73b0\u6dfb\u52a0\u5165\u72b6\u6001\u7ba1\u7406\n            return base.Add(CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.AddAsync(entity, cancellationToken);\n            }\n\n            // \u5c06\u5b9e\u73b0\u6dfb\u52a0\u5165\u72b6\u6001\u7ba1\u7406\n            return base.AddAsync(CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation, cancellationToken);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry<TEntity> Add<TEntity>(TEntity entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Add(entity);\n            }\n\n            // \u5c06\u5b9e\u73b0\u6dfb\u52a0\u5165\u72b6\u6001\u7ba1\u7406\n            return base.Add((TEntity)CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.AddAsync(entity, cancellationToken);\n            }\n\n            // \u5c06\u5b9e\u73b0\u6dfb\u52a0\u5165\u72b6\u6001\u7ba1\u7406\n            return base.AddAsync((TEntity)CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation, cancellationToken);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry Attach(object entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Attach(entity);\n            }\n\n            return base.Attach(CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry<TEntity> Attach<TEntity>(TEntity entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Attach(entity);\n            }\n\n            return base.Attach((TEntity)CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry Entry(object entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Entry(entity);\n            }\n\n            return base.Entry(CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry<TEntity> Entry<TEntity>(TEntity entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Entry(entity);\n            }\n\n            return base.Entry((TEntity)CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry Remove(object entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Remove(entity);\n            }\n\n            return base.Remove(CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry<TEntity> Remove<TEntity>(TEntity entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Remove(entity);\n            }\n\n            return base.Remove((TEntity)CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry Update(object entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Update(entity);\n            }\n\n            return base.Update(CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override EntityEntry<TEntity> Update<TEntity>(TEntity entity)\n        {\n            if (!ShardEntityTypes.Contains(entity.GetType()))\n            {\n                return base.Update(entity);\n            }\n\n            return base.Update((TEntity)CreateEntityProxy(entity, EntityProxyType.NonQuery).Implementation);\n        }\n\n        /// <inheritdoc/>", "        public override int SaveChanges(bool acceptAllChangesOnSuccess)\n        {\n            var lookup = Dependencies.DbContextEntityProxyLookupGenerator.Create(this);\n\n            lookup.Changes();\n\n            var result = base.SaveChanges(acceptAllChangesOnSuccess);\n\n            lookup.Changed();\n\n            return result;\n        }\n\n        /// <inheritdoc/>", "        public override Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)\n        {\n            var lookup = Dependencies.DbContextEntityProxyLookupGenerator.Create(this);\n\n            lookup.Changes();\n\n            var result = base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);\n\n            lookup.Changed();\n\n            return result;\n        }\n", "        public override void Dispose()\n        {\n            Dependencies.DbContextEntityProxyLookupGenerator.Delete(this);\n            base.Dispose();\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/ShardAttribute.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore\n{\n    /// <summary>\n    /// \u5206\u8868\u7279\u6027\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Class, AllowMultiple = false)]\n    public class ShardAttribute : Attribute\n    {\n        private readonly Type[] _shardEntities;\n\n        /// <summary>\n        /// \u521b\u5efa\u5206\u8868\u7279\u6027\n        /// </summary>\n        public ShardAttribute(params Type[] shardEntities)\n        {\n            _shardEntities = shardEntities;\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6\u5206\u8868\u5b9e\u4f53\n        /// </summary>", "    public class ShardAttribute : Attribute\n    {\n        private readonly Type[] _shardEntities;\n\n        /// <summary>\n        /// \u521b\u5efa\u5206\u8868\u7279\u6027\n        /// </summary>\n        public ShardAttribute(params Type[] shardEntities)\n        {\n            _shardEntities = shardEntities;\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6\u5206\u8868\u5b9e\u4f53\n        /// </summary>", "        public virtual Type[] GetShardEntities() => _shardEntities;\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/IEntityProxyGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u4ee3\u7406\u751f\u6210\u5668\n    /// </summary>\n    public interface IEntityProxyGenerator\n    {\n        /// <summary>\n        /// \u751f\u6210\u5b9e\u4f53\u4ee3\u7406\n        /// </summary>\n        EntityProxy Create(object entity, EntityProxyType type, DbContext dbContext);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/IDbContextEntityProxyLookupGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\u5b57\u5178\u751f\u6210\u5668\n    /// </summary>\n    public interface IDbContextEntityProxyLookupGenerator\n    {\n        /// <summary>\n        /// \u521b\u5efa\u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\u5b57\u5178\n        /// </summary>", "        public DbContextEntityProxyLookup Create(DbContext dbContext);\n\n        /// <summary>\n        /// \u5220\u9664\n        /// </summary>\n        void Delete(DbContext dbContext);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/IDbContextEntityProxyGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u6570\u636e\u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\u751f\u6210\u5668\n    /// </summary>\n    public interface IDbContextEntityProxyGenerator\n    {\n        /// <summary>\n        /// \u521b\u5efa\u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\n        /// </summary>\n        DbContextEntityProxy Create(DbContext context);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/DbContextEntityProxy.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing System.Collections.Generic;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\n    /// </summary>\n    public class DbContextEntityProxy\n    {\n        /// <summary>\n        /// \u4e0a\u4e0b\u6587\n        /// </summary>", "    public class DbContextEntityProxy\n    {\n        /// <summary>\n        /// \u4e0a\u4e0b\u6587\n        /// </summary>\n        public DbContext Context { get; }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u4ee3\u7406\n        /// </summary>\n        public List<EntityProxy> EntityProxies { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\n        /// </summary>\n        public DbContextEntityProxy(DbContext context)\n        {\n            Context = context;\n            EntityProxies = new List<EntityProxy>();\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/EntityProxy.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u4ee3\u7406\n    /// </summary>\n    public class EntityProxy\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\n        /// </summary>", "        public object Entity { get; }\n\n        /// <summary>\n        /// \u5b9e\u73b0\n        /// </summary>\n        public object Implementation { get; }\n\n        /// <summary>\n        /// \u4ee3\u7406\u7c7b\u578b\n        /// </summary>\n        public EntityProxyType Type { get; }\n\n        /// <summary>\n        /// \u4e0a\u4e0b\u6587\n        /// </summary>", "        public EntityProxyType Type { get; }\n\n        /// <summary>\n        /// \u4e0a\u4e0b\u6587\n        /// </summary>\n        public DbContext DbContext { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u4ee3\u7406\n        /// </summary>\n        public EntityProxy(object entity, object implementation, EntityProxyType type, DbContext dbContext)\n        {\n            Entity = entity;\n            Implementation = implementation;\n            Type = type;\n            DbContext = dbContext;\n        }\n\n        /// <summary>\n        /// \u662f\u5426\u5df2\u88ab\u72b6\u6001\u7ba1\u7406\n        /// </summary>", "        public bool IsStated()\n        {\n            return DbContext.Entry(Implementation).State != EntityState.Detached;\n        }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u6620\u5c04\n        /// </summary>\n        public void Changes()\n        {\n            if (Type == EntityProxyType.NonQuery)\n            {\n                EntityFromImplementation();\n            }\n        }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u53cd\u5411\u6620\u5c04\n        /// </summary>", "        public void Changes()\n        {\n            if (Type == EntityProxyType.NonQuery)\n            {\n                EntityFromImplementation();\n            }\n        }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u53cd\u5411\u6620\u5c04\n        /// </summary>", "        public void Changed()\n        {\n            if (Type == EntityProxyType.NonQuery)\n            {\n                EntityFromImplementationReverse();\n            }\n        }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u4ece\u5b9e\u73b0\u6620\u5c04\n        /// </summary>", "        public void EntityFromImplementation()\n        {\n            foreach (var propertyInfo in Implementation.GetType().BaseType!.GetProperties())\n            {\n                var val = propertyInfo.GetValue(Entity, null);\n                propertyInfo.SetValue(Implementation, val, null);\n            }\n        }\n\n        /// <summary>\n        /// \u5b9e\u73b0\u53cd\u5411\u6620\u5c04\n        /// </summary>", "        public void EntityFromImplementationReverse()\n        {\n            foreach (var propertyInfo in Implementation.GetType().BaseType!.GetProperties())\n            {\n                var val = propertyInfo.GetValue(Implementation, null);\n                propertyInfo.SetValue(Entity, val, null);\n            }\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/EntityProxyType.cs", "chunked_list": ["\ufeffnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u4ee3\u7406\u7c7b\u578b\n    /// </summary>\n    public enum EntityProxyType\n    {\n        NonQuery = 0,\n        Query = 1,\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/DbContextEntityProxyGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <inheritdoc cref=\"IDbContextEntityProxyGenerator\"/>\n    public class DbContextEntityProxyGenerator : IDbContextEntityProxyGenerator\n    {\n        /// <inheritdoc/>\n        public DbContextEntityProxy Create(DbContext context)\n        {\n            return new DbContextEntityProxy(context);\n        }\n    }\n}\n", "        public DbContextEntityProxy Create(DbContext context)\n        {\n            return new DbContextEntityProxy(context);\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/EntityProxyGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Ryan.EntityFrameworkCore.Builder;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <inheritdoc cref=\"IEntityProxyGenerator\"/>\n    public class EntityProxyGenerator : IEntityProxyGenerator\n    {\n        /// <inheritdoc cref=\"IEntityModelBuilderGenerator\"/>", "    /// <inheritdoc cref=\"IEntityProxyGenerator\"/>\n    public class EntityProxyGenerator : IEntityProxyGenerator\n    {\n        /// <inheritdoc cref=\"IEntityModelBuilderGenerator\"/>\n        public IEntityModelBuilderGenerator EntityModelBuilderGenerator { get; }\n\n        /// <inheritdoc cref=\"IEntityImplementationDictionaryGenerator\"/>\n        public IEntityImplementationDictionaryGenerator EntityImplementationDictionaryGenerator { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u4ee3\u7406\n        /// </summary>\n        public EntityProxyGenerator(\n            IEntityModelBuilderGenerator entityModelBuilderGenerator\n            , IEntityImplementationDictionaryGenerator entityImplementationDictionaryGenerator)\n        {\n            EntityModelBuilderGenerator = entityModelBuilderGenerator;\n            EntityImplementationDictionaryGenerator = entityImplementationDictionaryGenerator;\n        }\n\n        /// <inheritdoc/>", "        public EntityProxy Create(object entity, EntityProxyType type, DbContext dbContext)\n        {\n            if (type == EntityProxyType.NonQuery)\n            {\n                var builder = (EntityModelBuilderGenerator.Create(entity.GetType()) as IEntityModelBuilder)!;\n                var visitors = builder.GetExpressionVisitors().ToList();\n                foreach (var visitor in visitors)\n                {\n                    visitor.Visit(entity);\n                }\n\n                var pairs = visitors.Select(x => new KeyValuePair<string, string?>(x.MemberExpression.Member.Name, x.Values.FirstOrDefault()));\n                var dictionary = new Dictionary<string, string>(pairs!);\n                var tableName = builder.GetTableName(dictionary);\n\n                var ei = EntityImplementationDictionaryGenerator.Create(entity.GetType())[tableName];\n                var entityImplementation = Activator.CreateInstance(ei.ImplementationType)!;\n                return new EntityProxy(entity, entityImplementation, type, dbContext);\n            }\n\n            return new EntityProxy(entity, null, type, dbContext);\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/DbContextEntityProxyLookup.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Collections.Concurrent;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <summary>\n    /// \u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\u5b57\u5178\n    /// </summary>\n    public class DbContextEntityProxyLookup : ConcurrentDictionary<Type, DbContextEntityProxy>\n    {", "    /// </summary>\n    public class DbContextEntityProxyLookup : ConcurrentDictionary<Type, DbContextEntityProxy>\n    {\n        private readonly IDbContextEntityProxyGenerator _dbContextEntityProxyGenerator;\n\n        public DbContextEntityProxyLookup(IDbContextEntityProxyGenerator dbContextEntityProxyGenerator)\n        {\n            _dbContextEntityProxyGenerator = dbContextEntityProxyGenerator;\n        }\n\n        public DbContextEntityProxy GetOrDefault(Type entityType, DbContext context)\n        {\n            return GetOrAdd(entityType, _dbContextEntityProxyGenerator.Create(context));\n        }\n", "        public DbContextEntityProxy GetOrDefault(Type entityType, DbContext context)\n        {\n            return GetOrAdd(entityType, _dbContextEntityProxyGenerator.Create(context));\n        }\n\n        public void Changes()\n        {\n            foreach (var context in Values)\n            {\n                for (int i = context.EntityProxies.Count - 1; i >= 0; i--)\n                {", "                for (int i = context.EntityProxies.Count - 1; i >= 0; i--)\n                {\n                    if (!context.EntityProxies[i].IsStated())\n                    {\n                        context.EntityProxies.RemoveAt(i);\n                        continue;\n                    }\n\n                    context.EntityProxies[i].Changes();\n                }\n            }\n        }\n", "        public void Changed()\n        {\n            foreach (var context in Values)\n            {\n                for (int i = context.EntityProxies.Count - 1; i >= 0; i--)\n                {\n                    context.EntityProxies[i].Changed();\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Proxy/DbContextEntityProxyLookupGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Caching.Memory;\nusing Ryan.EntityFrameworkCore.Infrastructure;\n\nnamespace Ryan.EntityFrameworkCore.Proxy\n{\n    /// <inheritdoc cref=\"IDbContextEntityProxyLookupGenerator\"/>\n    public class DbContextEntityProxyLookupGenerator : IDbContextEntityProxyLookupGenerator\n    {\n        /// <summary>\n        /// \u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\u751f\u6210\u5668\n        /// </summary>", "        public IDbContextEntityProxyGenerator DbContextEntityProxyGenerator { get; }\n\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>\n        public IMemoryCache MemoryCache { get; set; }\n\n        /// <summary>\n        /// \u521b\u5efa\u4e0a\u4e0b\u6587\u5b9e\u4f53\u4ee3\u7406\u5b57\u5178\n        /// </summary>\n        public DbContextEntityProxyLookupGenerator(IDbContextEntityProxyGenerator dbContextEntityProxyGenerator)\n        {\n            DbContextEntityProxyGenerator = dbContextEntityProxyGenerator;\n            MemoryCache = new InternalMemoryCache();\n        }\n\n        /// <inheritdoc/>", "        public DbContextEntityProxyLookup Create(DbContext dbContext)\n        {\n            return (MemoryCache.GetOrCreate(dbContext.ContextId, (entry) =>\n            {\n                return entry.SetSize(1).SetValue(\n                    new DbContextEntityProxyLookup(DbContextEntityProxyGenerator)\n                );\n            }).Value as DbContextEntityProxyLookup)!;\n        }\n\n        /// <inheritdoc/>", "        public void Delete(DbContext dbContext)\n        {\n            MemoryCache.Remove(dbContext.ContextId);\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Expressions/EntityExpressionVisitor.cs", "chunked_list": ["\ufeffusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\nnamespace Ryan.EntityFrameworkCore.Expressions\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u8868\u8fbe\u5f0f\u8bbf\u95ee\u5668\n    /// </summary>\n    public class EntityExpressionVisitor : ExpressionVisitor\n    {\n        /// <summary>\n        /// Lambda \u8868\u8fbe\u5f0f\n        /// </summary>", "    public class EntityExpressionVisitor : ExpressionVisitor\n    {\n        /// <summary>\n        /// Lambda \u8868\u8fbe\u5f0f\n        /// </summary>\n        public LambdaExpression LambdaExpression { get; }\n\n        /// <summary>\n        /// \u5206\u8868\u5c5e\u6027\n        /// </summary>\n        public MemberExpression MemberExpression { get; }\n\n        /// <summary>\n        /// \u5206\u8868\u53c2\u6570\n        /// </summary>\n        public HashSet<string> Values { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5206\u8868\u8868\u8fbe\u5f0f\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityExpressionVisitor(LambdaExpression lambdaExpression)\n        {\n            Values = new HashSet<string>();\n            LambdaExpression = lambdaExpression;\n            MemberExpression = (lambdaExpression.Body as MemberExpression)!;\n        }\n\n        /// <inheritdoc/>", "        public MemberExpression MemberExpression { get; }\n\n        /// <summary>\n        /// \u5206\u8868\u53c2\u6570\n        /// </summary>\n        public HashSet<string> Values { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5206\u8868\u8868\u8fbe\u5f0f\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityExpressionVisitor(LambdaExpression lambdaExpression)\n        {\n            Values = new HashSet<string>();\n            LambdaExpression = lambdaExpression;\n            MemberExpression = (lambdaExpression.Body as MemberExpression)!;\n        }\n\n        /// <inheritdoc/>", "        public override Expression Visit(Expression node)\n        {\n            return base.Visit(node);\n        }\n\n        /// <summary>\n        /// \u8bbf\u95ee\u5b9e\u4f53\n        /// </summary>\n        /// <param name=\"entity\">\u5b9e\u4f53</param>\n        public virtual void Visit(object entity)\n        {\n        }\n\n        /// <inheritdoc/>", "        public virtual void Visit(object entity)\n        {\n        }\n\n        /// <inheritdoc/>\n        protected override Expression VisitBinary(BinaryExpression node)\n        {\n            if (node.NodeType != ExpressionType.Equal)\n            {\n                return base.VisitBinary(node);\n            }\n\n            // x =>\n            // x.Member == Something", "            if (node.Left is MemberExpression && node.Right is ConstantExpression)\n            {\n                VisitBinaryMemberEqualConstant((node.Left as MemberExpression)!, (node.Right as ConstantExpression)!);\n            }\n            // Something == x.Member\n            else if (node.Left is ConstantExpression && node.Right is MemberExpression)\n            {\n                VisitBinaryMemberEqualConstant((node.Right as MemberExpression)!, (node.Left as ConstantExpression)!);\n            }\n\n            // var other = new Something();\n            // x =>\n            // x.Member == other.Something", "            else if (node.Left is MemberExpression && node.Right is MemberExpression)\n            {\n                VisitBinaryMemberEqualMember((node.Left as MemberExpression)!, (node.Right as MemberExpression)!);\n            }\n\n            return base.VisitBinary(node);\n        }\n\n        /// <summary>\n        /// \u5bf9 BinaryExpression \u4e2d Left \u548c Right \u8fdb\u884c\u53d6\u503c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u6ee1\u8db3\u5219\u83b7\u53d6\u5bf9\u5e94\u503c\n        /// </summary>\n        /// <param name=\"memberExpression\">\u6210\u5458\u8868\u8fbe\u5f0f</param>\n        /// <param name=\"constantExpression\">\u5e38\u91cf\u8868\u8fbe\u5f0f</param>\n        /// <returns>\u5224\u65ad\u662f\u5426\u53d6\u503c</returns>", "        protected virtual bool VisitBinaryMemberEqualConstant(MemberExpression memberExpression, ConstantExpression constantExpression)\n        {\n            return false;\n        }\n\n        /// <summary>\n        /// \u5bf9 BinaryExpression \u4e2d Left \u548c Right \u8fdb\u884c\u53d6\u503c\u5224\u65ad\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\uff0c\u6ee1\u8db3\u5219\u83b7\u53d6\u5bf9\u5e94\u503c\n        /// </summary>\n        /// <param name=\"leftMemberExpression\">\u5de6\u4fa7\u6210\u5458\u8868\u8fbe\u5f0f</param>\n        /// <param name=\"rightMemberExpression\">\u53f3\u4fa7\u6210\u5458\u8868\u8fbe\u5f0f</param>\n        /// <returns>\u5224\u65ad\u662f\u5426\u53d6\u503c</returns>", "        protected virtual bool VisitBinaryMemberEqualMember(MemberExpression leftMemberExpression, MemberExpression rightMemberExpression)\n        {\n            return false;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Expressions/IExpressionImplementationFinder.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\nnamespace Ryan.EntityFrameworkCore.Expressions\n{\n    /// <summary>\n    /// \u67e5\u627e\u5b9e\u73b0\n    /// </summary>\n    public interface IExpressionImplementationFinder\n    {\n        /// <summary>\n        /// \u67e5\u627e\u5b9e\u73b0\n        /// </summary>\n        public IEnumerable<Type> Find<TEntity>(Expression expression);\n    }\n}\n", "    /// </summary>\n    public interface IExpressionImplementationFinder\n    {\n        /// <summary>\n        /// \u67e5\u627e\u5b9e\u73b0\n        /// </summary>\n        public IEnumerable<Type> Find<TEntity>(Expression expression);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Expressions/ExpressionImplementationFinder.cs", "chunked_list": ["\ufeffusing Ryan.EntityFrameworkCore.Builder;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\n\nnamespace Ryan.EntityFrameworkCore.Expressions\n{\n    /// <inheritdoc cref=\"IExpressionImplementationFinder\"/>\n    public class ExpressionImplementationFinder : IExpressionImplementationFinder\n    {\n        /// <summary>\n        /// \u8bbf\u95ee\u5668\u751f\u6210\u5668\n        /// </summary>", "    /// <inheritdoc cref=\"IExpressionImplementationFinder\"/>\n    public class ExpressionImplementationFinder : IExpressionImplementationFinder\n    {\n        /// <summary>\n        /// \u8bbf\u95ee\u5668\u751f\u6210\u5668\n        /// </summary>\n        public IEntityModelBuilderAccessorGenerator EntityModelBuilderAccessorGenerator { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u8868\u8fbe\u5f0f\u5b9e\u73b0\u67e5\u8be2\u5668\n        /// </summary>\n        public ExpressionImplementationFinder(IEntityModelBuilderAccessorGenerator entityModelBuilderAccessorGenerator)\n        {\n            EntityModelBuilderAccessorGenerator = entityModelBuilderAccessorGenerator;\n        }\n\n        /// <inheritdoc/>\n        public IEnumerable<Type> Find<TEntity>(Expression expression)\n        {\n            // \u8bbf\u95ee\u5668\n            var accessor = EntityModelBuilderAccessorGenerator.Create(typeof(TEntity));\n            var builder = (IEntityModelBuilder)accessor.EntityModelBuilder;\n            var visitors = builder.GetExpressionVisitors().ToList();\n            visitors.ForEach(x => x.Visit(node: expression));\n\n            // \u83b7\u53d6\u7ed3\u679c\n            var pairs = visitors.Select(x => new KeyValuePair<string, HashSet<string>>(x.MemberExpression.Member.Name, x.Values));\n            var result = GetCombinations(new Dictionary<string, HashSet<string>>(pairs));\n\n            // \u83b7\u53d6\u5b9e\u73b0\n            var tableNames = result.Select(x => builder.GetTableName(new Dictionary<string, string>(x)));\n            return tableNames.Select(x => accessor.Dictionary[x].ImplementationType);\n        }\n\n        List<List<KeyValuePair<string, string>>> GetCombinations(Dictionary<string, HashSet<string>> dictionary)\n        {\n            List<List<KeyValuePair<string, string>>> combinations = new List<List<KeyValuePair<string, string>>>();\n            GetCombinationsHelper(dictionary, new List<KeyValuePair<string, string>>(), combinations);\n            return combinations;\n        }\n\n        void GetCombinationsHelper(Dictionary<string, HashSet<string>> dictionary, List<KeyValuePair<string, string>> currentCombination, List<List<KeyValuePair<string, string>>> combinations)\n        {", "            if (dictionary.Count == 0)\n            {\n                combinations.Add(currentCombination);\n                return;\n            }\n\n            string key = dictionary.Keys.First();\n            HashSet<string> values = dictionary[key];\n            dictionary.Remove(key);\n\n            foreach (string value in values)\n            {\n                List<KeyValuePair<string, string>> newCombination = new List<KeyValuePair<string, string>>(currentCombination);\n                newCombination.Add(new KeyValuePair<string, string>(key, value));\n                GetCombinationsHelper(dictionary, newCombination, combinations);\n            }\n\n            dictionary.Add(key, values);\n        }\n    }\n}\n", "            foreach (string value in values)\n            {\n                List<KeyValuePair<string, string>> newCombination = new List<KeyValuePair<string, string>>(currentCombination);\n                newCombination.Add(new KeyValuePair<string, string>(key, value));\n                GetCombinationsHelper(dictionary, newCombination, combinations);\n            }\n\n            dictionary.Add(key, values);\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Expressions/MemberCache.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\nnamespace Ryan.EntityFrameworkCore.Expressions\n{\n    /// <summary>\n    /// Member \u7f13\u5b58\n    /// </summary>\n    internal class MemberCache<T>\n    {\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>", "    /// </summary>\n    internal class MemberCache<T>\n    {\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>\n        public static Dictionary<MemberExpression, Func<T>> CACHE = new Dictionary<MemberExpression, Func<T>>();\n\n        /// <summary>\n        /// \u83b7\u53d6\u59d4\u6258\n        /// </summary>\n        /// <param name=\"memberExpression\">\u6210\u5458\u8868\u8fbe\u5f0f</param>\n        /// <returns>\u59d4\u6258</returns>", "        public static Func<T> GetFunc(MemberExpression memberExpression)\n        {\n            if (!CACHE.TryGetValue(memberExpression, out var func))\n            {\n                CACHE[memberExpression] = func = Expression.Lambda<Func<T>>(memberExpression).Compile();\n            }\n\n            return func;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Expressions/EntityExpressionVisitor`.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\nusing System.Reflection;\n\nnamespace Ryan.EntityFrameworkCore.Expressions\n{\n    /// <inheritdoc/>\n    public class EntityExpressionVisitor<TValue> : EntityExpressionVisitor\n    {\n        /// <summary>\n        /// \u683c\u5f0f\u5316\n        /// </summary>\n        public Func<TValue, string> Converter { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityExpressionVisitor(LambdaExpression lambdaExpression, Func<TValue, string> converter) : base(lambdaExpression)\n        {\n            Converter = converter;\n        }\n\n        /// <inheritdoc/>", "    public class EntityExpressionVisitor<TValue> : EntityExpressionVisitor\n    {\n        /// <summary>\n        /// \u683c\u5f0f\u5316\n        /// </summary>\n        public Func<TValue, string> Converter { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityExpressionVisitor(LambdaExpression lambdaExpression, Func<TValue, string> converter) : base(lambdaExpression)\n        {\n            Converter = converter;\n        }\n\n        /// <inheritdoc/>", "        public override void Visit(object entity)\n        {\n            var func = LambdaCache<TValue>.GetFunc(LambdaExpression);\n            AddExpressionValue(func(entity));\n        }\n\n        /// <inheritdoc/>\n        protected override bool VisitBinaryMemberEqualConstant(MemberExpression memberExpression, ConstantExpression constantExpression)\n        {\n            if (memberExpression.Member != MemberExpression.Member)\n            {\n                return false;\n            }\n\n            return AddExpressionValue((TValue)constantExpression.Value!);\n        }\n\n        /// <inheritdoc/>", "            if (memberExpression.Member != MemberExpression.Member)\n            {\n                return false;\n            }\n\n            return AddExpressionValue((TValue)constantExpression.Value!);\n        }\n\n        /// <inheritdoc/>\n        protected override bool VisitBinaryMemberEqualMember(MemberExpression leftMemberExpression, MemberExpression rightMemberExpression)\n        {", "        protected override bool VisitBinaryMemberEqualMember(MemberExpression leftMemberExpression, MemberExpression rightMemberExpression)\n        {\n            if (leftMemberExpression.Member == rightMemberExpression.Member)\n            {\n                return false;\n            }\n\n            var expressionOrdered = leftMemberExpression.Member == MemberExpression.Member\n                ? (leftMemberExpression, rightMemberExpression)\n                : (rightMemberExpression, leftMemberExpression);\n\n            // var other == new Something();\n            // x =>\n            // x.Member == other.Something\n            var value = MemberCache<TValue>.GetFunc(expressionOrdered.Item2)();\n            return AddExpressionValue(value);\n        }\n\n        /// <inheritdoc/>", "        protected override Expression VisitMethodCall(MethodCallExpression node)\n        {\n            if (node.Method.Name == \"Contains\" && node.Arguments.Count == 2)\n            {\n                if (node.Arguments[1] is MemberExpression { Member: MemberInfo member } && member == MemberExpression.Member)\n                {\n                    MemberExpression memberExpression = (MemberExpression)node.Arguments[0];\n                    foreach (var value in (IEnumerable<TValue>)Expression.Lambda(memberExpression).Compile().DynamicInvoke())\n                    {\n                        AddExpressionValue(value);\n                    }\n                }\n            }\n\n            return base.VisitMethodCall(node);\n        }\n\n        /// <summary>\n        /// \u589e\u52a0\u8868\u8fbe\u5f0f\u503c\n        /// </summary>\n        /// <param name=\"value\">\u8868\u8fbe\u5f0f\u503c</param>\n        /// <returns>\u662f\u5426\u6dfb\u52a0\u6210\u529f</returns>", "        protected virtual bool AddExpressionValue(TValue value)\n        {\n            return Values.Add(value.ToString());\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Expressions/LambdaCache.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\nnamespace Ryan.EntityFrameworkCore.Expressions\n{\n    /// <summary>\n    /// Lambda \u7f13\u5b58\n    /// </summary>\n    internal class LambdaCache<T>\n    {\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>", "    /// </summary>\n    internal class LambdaCache<T>\n    {\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>\n        public static Dictionary<LambdaExpression, Func<object, T>> CACHE = new Dictionary<LambdaExpression, Func<object, T>>();\n\n        /// <summary>\n        /// \u83b7\u53d6\u59d4\u6258\n        /// </summary>\n        /// <param name=\"lambdaExpression\">\u6210\u5458\u8868\u8fbe\u5f0f</param>\n        /// <returns>\u59d4\u6258</returns>", "        public static Func<object, T> GetFunc(LambdaExpression lambdaExpression)\n        {\n            if (!CACHE.TryGetValue(lambdaExpression, out var func))\n            {\n                ParameterExpression newParam = Expression.Parameter(typeof(object), \"x\");\n                Expression<Func<object, T>> newLambda = Expression.Lambda<Func<object, T>>(\n                    Expression.Convert(Expression.Invoke(lambdaExpression, Expression.Convert(newParam, lambdaExpression.Parameters[0].Type)), typeof(T)),\n                    newParam\n                );\n\n                CACHE[lambdaExpression] = func = newLambda.Compile();\n            }\n\n            return func;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Dynamic/IDynamicSourceCodeGenerator.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Dynamic\n{\n    /// <summary>\n    /// \u6e90\u7801\u751f\u6210\u5668\n    /// </summary>\n    public interface IDynamicSourceCodeGenerator\n    {\n        /// <summary>\n        /// \u751f\u6210\u6307\u5b9a\u7c7b\u578b\u52a8\u6001\u6e90\u7801\n        /// </summary>", "        public string Create(Type type);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Dynamic/DynamicSourceCodeGenerator.cs", "chunked_list": ["\ufeffusing System;\nusing System.Text;\n\nnamespace Ryan.EntityFrameworkCore.Dynamic\n{\n    /// <inheritdoc cref=\"IDynamicSourceCodeGenerator\"/>\n    public class DynamicSourceCodeGenerator : IDynamicSourceCodeGenerator\n    {\n        /// <inheritdoc/>\n        public virtual string Create(Type entityType)\n        {\n            var sourceCodeBuilder = new StringBuilder();\n            sourceCodeBuilder.Append($\"using {typeof(object).Namespace};\");\n\n            BuildNamespaceType(sourceCodeBuilder, entityType);\n\n            return sourceCodeBuilder.ToString();\n        }\n\n        /// <summary>\n        /// \u6784\u5efa\u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u578b\n        /// </summary>", "        public virtual string Create(Type entityType)\n        {\n            var sourceCodeBuilder = new StringBuilder();\n            sourceCodeBuilder.Append($\"using {typeof(object).Namespace};\");\n\n            BuildNamespaceType(sourceCodeBuilder, entityType);\n\n            return sourceCodeBuilder.ToString();\n        }\n\n        /// <summary>\n        /// \u6784\u5efa\u547d\u540d\u7a7a\u95f4\u4ee5\u53ca\u7c7b\u578b\n        /// </summary>", "        public virtual void BuildNamespaceType(StringBuilder sourceCodeBuilder, Type entityType)\n        {\n            sourceCodeBuilder.Append($\"namespace {entityType.Namespace} {{\");\n\n            var rd = Guid.NewGuid().ToString(\"N\");\n            var className = $\"{entityType.Name}_{rd}\";\n            sourceCodeBuilder.Append($\"public class {className}:{entityType.Name}{{public {className}():base(){{}}}}\");\n\n            sourceCodeBuilder.Append('}');\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Dynamic/DynamicTypeGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\n\nnamespace Ryan.EntityFrameworkCore.Dynamic\n{", "namespace Ryan.EntityFrameworkCore.Dynamic\n{\n    /// <inheritdoc cref=\"IDynamicTypeGenerator\"/>\n    public class DynamicTypeGenerator : IDynamicTypeGenerator\n    {\n        /// <summary>\n        /// \u52a8\u6001\u6e90\u7801\u751f\u6210\u5668\n        /// </summary>\n        public IDynamicSourceCodeGenerator DynamicSourceCodeGenerator { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u52a8\u6001\u7c7b\u578b\u751f\u6210\u5668\n        /// </summary>\n        public DynamicTypeGenerator(IDynamicSourceCodeGenerator dynamicSourceCodeGenerator)\n        {\n            DynamicSourceCodeGenerator = dynamicSourceCodeGenerator;\n        }\n\n        /// <inheritdoc/>", "        public IDynamicSourceCodeGenerator DynamicSourceCodeGenerator { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u52a8\u6001\u7c7b\u578b\u751f\u6210\u5668\n        /// </summary>\n        public DynamicTypeGenerator(IDynamicSourceCodeGenerator dynamicSourceCodeGenerator)\n        {\n            DynamicSourceCodeGenerator = dynamicSourceCodeGenerator;\n        }\n\n        /// <inheritdoc/>", "        public virtual Type Create(Type entityType)\n        {\n            // \u521b\u5efa\u7f16\u8bd1\u9009\u9879\n            var options = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n            // \u521b\u5efa\u8bed\u6cd5\u6811\n            var syntaxTree = CSharpSyntaxTree.ParseText(DynamicSourceCodeGenerator.Create(entityType));\n\n            // \u521b\u5efa\u7f16\u8bd1\u4e0a\u4e0b\u6587\n            var assemblyName = Guid.NewGuid().ToString();\n            var references = GetReferencedAssemblies(entityType).Select(x => MetadataReference.CreateFromFile(x.Location));\n\n            // \u7f16\u8bd1\n            var compilation = CSharpCompilation.Create(assemblyName)\n                .WithOptions(options)\n                .AddReferences(references)\n                .AddSyntaxTrees(syntaxTree);\n\n            // \u83b7\u53d6\u7f16\u8bd1\u7ed3\u679c\n            using var ms = new MemoryStream();\n\n            // \u7f16\u8bd1\n            var result = compilation.Emit(ms);", "            if (!result.Success)\n            {\n                throw new InvalidOperationException(string.Join(Environment.NewLine, result.Diagnostics));\n            }\n\n            // \u52a0\u8f7d\u7a0b\u5e8f\u96c6\n            ms.Seek(0, SeekOrigin.Begin);\n            var assembly = Assembly.Load(ms.ToArray());\n\n            // \u8fd4\u56de\u5b9e\u4f53\u7c7b\u578b\n            return assembly.GetTypes().First(x => x.BaseType == entityType);\n        }\n\n        /// <summary>\n        /// \u83b7\u53d6 <paramref name=\"entityType\"/> \u6240\u6709\u5f15\u7528\u7684\u7a0b\u5e8f\u96c6\n        /// </summary>", "        protected virtual IEnumerable<Assembly> GetReferencedAssemblies(Type entityType)\n        {\n            var assemblies = new HashSet<Assembly>();\n\n            // \u83b7\u53d6\u7c7b\u578b\u6240\u5728\u7684\u7a0b\u5e8f\u96c6\n            var typeAssembly = Assembly.GetAssembly(entityType)!;\n            if (!assemblies.Contains(typeAssembly))\n            {\n                GetReferencedAssembliesRecursive(typeAssembly, assemblies);\n            }\n\n            return assemblies;\n        }\n\n        /// <summary>\n        /// \u9012\u5f52\u83b7\u53d6\u6240\u6709\u5f15\u7528\u7a0b\u5e8f\u96c6\n        /// </summary>", "        private void GetReferencedAssembliesRecursive(Assembly assembly, HashSet<Assembly> assemblies)\n        {\n            if (!assemblies.Contains(assembly))\n            {\n                assemblies.Add(assembly);\n\n                // \u83b7\u53d6\u7a0b\u5e8f\u96c6\u5f15\u7528\u7684\u5176\u4ed6\u7a0b\u5e8f\u96c6\n                var referencedAssemblyNames = assembly.GetReferencedAssemblies();\n\n                foreach (AssemblyName referencedAssemblyName in referencedAssemblyNames)\n                {\n                    // \u52a0\u8f7d\u88ab\u5f15\u7528\u7684\u7a0b\u5e8f\u96c6\n                    var referencedAssembly = Assembly.Load(referencedAssemblyName);\n\n                    // \u9012\u5f52\u83b7\u53d6\u88ab\u5f15\u7528\u7a0b\u5e8f\u96c6\u7684\u5f15\u7528\n                    GetReferencedAssembliesRecursive(referencedAssembly, assemblies);\n                }\n            }\n        }\n    }\n}\n", "                foreach (AssemblyName referencedAssemblyName in referencedAssemblyNames)\n                {\n                    // \u52a0\u8f7d\u88ab\u5f15\u7528\u7684\u7a0b\u5e8f\u96c6\n                    var referencedAssembly = Assembly.Load(referencedAssemblyName);\n\n                    // \u9012\u5f52\u83b7\u53d6\u88ab\u5f15\u7528\u7a0b\u5e8f\u96c6\u7684\u5f15\u7528\n                    GetReferencedAssembliesRecursive(referencedAssembly, assemblies);\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Dynamic/IDynamicTypeGenerator.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Dynamic\n{\n    /// <summary>\n    /// \u52a8\u6001\u7c7b\u578b\u751f\u6210\u5668\n    /// </summary>\n    public interface IDynamicTypeGenerator\n    {\n        /// <summary>\n        /// \u521b\u5efa\u52a8\u6001\u7c7b\u578b\n        /// </summary>\n        Type Create(Type type);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityImplementationDictionaryGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Caching.Memory;\nusing Ryan.EntityFrameworkCore.Infrastructure;\nusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <inheritdoc cref=\"IEntityImplementationDictionaryGenerator\" />\n    public class EntityImplementationDictionaryGenerator : IEntityImplementationDictionaryGenerator\n    {\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>", "        public IMemoryCache MemoryCache { get; }\n\n        /// <inheritdoc/>\n        public EntityImplementationDictionaryGenerator()\n        {\n            MemoryCache = new InternalMemoryCache();\n        }\n\n        /// <inheritdoc/>\n        public virtual EntityImplementationDictionary Create(Type entityType)\n        {\n            return (MemoryCache.GetOrCreate(entityType, (entry) =>\n            {\n                return entry.SetSize(1).SetValue(\n                    new EntityImplementationDictionary(entityType)\n                ).Value;\n            }) as EntityImplementationDictionary)!;\n        }\n    }\n}\n", "        public virtual EntityImplementationDictionary Create(Type entityType)\n        {\n            return (MemoryCache.GetOrCreate(entityType, (entry) =>\n            {\n                return entry.SetSize(1).SetValue(\n                    new EntityImplementationDictionary(entityType)\n                ).Value;\n            }) as EntityImplementationDictionary)!;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/IEntityShardConfiguration.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u5206\u914d\u914d\u7f6e\n    /// </summary>\n    public interface IEntityShardConfiguration\n    {\n        /// <summary>\n        /// \u6dfb\u52a0\u5206\u8868\n        /// </summary>\n        Type AddShard<TEntity>(string tableName) where TEntity : class;\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityImplementationDictionary.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u5b9e\u73b0\u5b57\u5178\n    /// </summary>\n    public class EntityImplementationDictionary : Dictionary<string, EntityImplementation>\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\u7c7b\u578b\n        /// </summary>", "    public class EntityImplementationDictionary : Dictionary<string, EntityImplementation>\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\u7c7b\u578b\n        /// </summary>\n        public Type EntityType { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u5b9e\u73b0\u5b57\u5178\n        /// </summary>\n        public EntityImplementationDictionary(Type entityType)\n        {\n            EntityType = entityType;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityModelBuilder.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Ryan.EntityFrameworkCore.Expressions;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>", "{\n    /// <summary>\n    /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5668\u63a5\u53e3\n    /// </summary>\n    public interface IEntityModelBuilder\n    {\n        /// <summary>\n        /// \u83b7\u53d6\u8bbf\u95ee\u5668\n        /// </summary>\n        /// <returns></returns>\n        IEnumerable<EntityExpressionVisitor> GetExpressionVisitors();\n\n        /// <summary>\n        /// \u83b7\u53d6\u8868\u540d\n        /// </summary>\n        string GetTableName(Dictionary<string, string> value);\n    }\n\n    /// <summary>\n    /// \u5b9e\u4f53\u6a21\u578b\u6784\u9020\u5668\n    /// </summary>", "    public abstract class EntityModelBuilder<TEntity> : IEntityModelBuilder where TEntity : class\n    {\n        /// <summary>\n        /// \u8bbf\u95ee\u5668\n        /// </summary>\n        private List<Func<EntityExpressionVisitor>> Visitors { get; } = new List<Func<EntityExpressionVisitor>>();\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5668\n        /// </summary>\n        public EntityModelBuilder()\n        {\n            EntityConfiguration();\n        }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u914d\u7f6e\n        /// </summary>", "        protected abstract void EntityConfiguration();\n\n        /// <summary>\n        /// \u5e94\u7528\u5206\u8868\n        /// </summary>\n        protected void Apply<TMember>(Expression<Func<TEntity, TMember>> expression, Func<TMember, string> converter = null)\n        {\n            Visitors.Add(() => new EntityExpressionVisitor<TMember>(expression, converter));\n        }\n\n        /// <inheritdoc/>", "        public virtual IEnumerable<EntityExpressionVisitor> GetExpressionVisitors()\n        {\n            return Visitors.Select(x => x());\n        }\n\n        /// <inheritdoc/>\n        public abstract string GetTableName(Dictionary<string, string> value);\n\n        /// <summary>\n        /// \u6784\u5efa <typeparamref name=\"TImplementation\"/> \u7c7b\u578b Model\n        /// </summary>", "        public abstract void Build<TImplementation>(ModelBuilder modelBuilder, string tableName) where TImplementation : TEntity;\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/IEntityModelBuilderAccessorGenerator.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u8bbf\u95ee\u5668\n    /// </summary>\n    public interface IEntityModelBuilderAccessorGenerator\n    {\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u8bbf\u95ee\u5668\n        /// </summary>\n        EntityModelBuilderAccessor Create(Type entityType);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/IEntityImplementationDictionaryGenerator.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u5b9e\u73b0\u5b57\u5178\u751f\u6210\u5668\n    /// </summary>\n    public interface IEntityImplementationDictionaryGenerator\n    {\n        /// <summary>\n        /// \u521b\u5efa \u5b9e\u4f53\u5b9e\u73b0\u5b57\u5178\n        /// </summary>\n        EntityImplementationDictionary Create(Type entityType);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityShardConfiguration.cs", "chunked_list": ["\ufeffusing Ryan.EntityFrameworkCore.Dynamic;\nusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <inheritdoc cref=\"IEntityShardConfiguration\"/>\n    public class EntityShardConfiguration : IEntityShardConfiguration\n    {\n        /// <inheritdoc cref=\"IEntityImplementationDictionaryGenerator\"/>\n        public IEntityImplementationDictionaryGenerator EntityImplementationDictionaryGenerator { get; }\n\n        /// <summary>\n        /// \u52a8\u6001\u7c7b\u578b\u521b\u5efa\n        /// </summary>", "        public IEntityImplementationDictionaryGenerator EntityImplementationDictionaryGenerator { get; }\n\n        /// <summary>\n        /// \u52a8\u6001\u7c7b\u578b\u521b\u5efa\n        /// </summary>\n        public IDynamicTypeGenerator DynamicTypeGenerator { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u5206\u8868\u914d\u7f6e\n        /// </summary>\n        public EntityShardConfiguration(\n            IEntityImplementationDictionaryGenerator entityImplementationDictionaryGenerator\n            , IDynamicTypeGenerator dynamicTypeGenerator)\n        {\n            EntityImplementationDictionaryGenerator = entityImplementationDictionaryGenerator;\n            DynamicTypeGenerator = dynamicTypeGenerator;\n        }\n\n        /// <inheritdoc/>", "        public Type AddShard<TEntity>(string tableName) where TEntity : class\n        {\n            var implementationType = DynamicTypeGenerator.Create(typeof(TEntity));\n            EntityImplementationDictionaryGenerator\n                .Create(typeof(TEntity))\n                .Add(tableName, new EntityImplementation(typeof(TEntity), implementationType, tableName));\n            return implementationType;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityModelBuilderAccessorGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Caching.Memory;\nusing Ryan.EntityFrameworkCore.Infrastructure;\nusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <inheritdoc cref=\"IEntityModelBuilderAccessorGenerator\"/>\n    public class EntityModelBuilderAccessorGenerator : IEntityModelBuilderAccessorGenerator\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u751f\u6210\u5668\n        /// </summary>", "        public IEntityModelBuilderGenerator EntityModelBuilderGenerator { get; }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u5b9e\u73b0\u5b57\u5178\u751f\u6210\u5668\n        /// </summary>\n        public IEntityImplementationDictionaryGenerator ImplementationDictionaryGenerator { get; }\n\n        /// <summary>\n        /// \u7f13\u5b58\n        /// </summary>\n        public IMemoryCache MemoryCache { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityModelBuilderAccessorGenerator(\n            IEntityModelBuilderGenerator entityModelBuilderGenerator\n            , IEntityImplementationDictionaryGenerator implementationDictionaryGenerator)\n        {\n            EntityModelBuilderGenerator = entityModelBuilderGenerator;\n            ImplementationDictionaryGenerator = implementationDictionaryGenerator;\n            MemoryCache = new InternalMemoryCache();\n        }\n\n        /// <inheritdoc/>", "        public IMemoryCache MemoryCache { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityModelBuilderAccessorGenerator(\n            IEntityModelBuilderGenerator entityModelBuilderGenerator\n            , IEntityImplementationDictionaryGenerator implementationDictionaryGenerator)\n        {\n            EntityModelBuilderGenerator = entityModelBuilderGenerator;\n            ImplementationDictionaryGenerator = implementationDictionaryGenerator;\n            MemoryCache = new InternalMemoryCache();\n        }\n\n        /// <inheritdoc/>", "        public EntityModelBuilderAccessor Create(Type entityType)\n        {\n            return (MemoryCache.GetOrCreate(entityType, (entry) =>\n            {\n                var entityModelBulder = EntityModelBuilderGenerator.Create(entityType)!;\n                var entityImplementationDictionary = ImplementationDictionaryGenerator.Create(entityType)!;\n                return entry.SetSize(1).SetValue(\n                    new EntityModelBuilderAccessor(entityType, entityImplementationDictionary, entityModelBulder)\n                ).Value;\n            }) as EntityModelBuilderAccessor)!;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityModelBuilderGenerator.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.DependencyInjection;\nusing Ryan.EntityFrameworkCore.Infrastructure;\nusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5bf9\u8c61\u751f\u6210\u5668\n    /// </summary>\n    public class EntityModelBuilderGenerator : IEntityModelBuilderGenerator\n    {\n        /// <summary>\n        /// \u5bb9\u5668\n        /// </summary>", "    /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5bf9\u8c61\u751f\u6210\u5668\n    /// </summary>\n    public class EntityModelBuilderGenerator : IEntityModelBuilderGenerator\n    {\n        /// <summary>\n        /// \u5bb9\u5668\n        /// </summary>\n        public IServiceProvider ServiceProvider { get; }\n\n        /// <summary>\n        /// \u5185\u5b58\u7f13\u5b58\n        /// </summary>", "        public IMemoryCache MemoryCache { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5bf9\u8c61\u751f\u6210\u5668\n        /// </summary>\n        public EntityModelBuilderGenerator(IServiceProvider serviceProvider)\n        {\n            ServiceProvider = serviceProvider;\n            MemoryCache = new InternalMemoryCache();\n        }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u5757\u6784\u5efa\u5668\n        /// </summary>", "        public virtual object CreateEntityModelBuilder(Type entityType)\n        {\n            var entityModelBuilderType = typeof(EntityModelBuilder<>).MakeGenericType(entityType);\n            return ServiceProvider.GetRequiredService(entityModelBuilderType);\n        }\n\n        /// <inheritdoc/>\n        public virtual object Create(Type entityType)\n        {\n            return MemoryCache.GetOrCreate(entityType, (entry) => \n            {\n                return entry.SetSize(1).SetValue(\n                    CreateEntityModelBuilder(entityType)\n                ).Value;\n            });\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/IEntityModelBuilderGenerator.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5bf9\u8c61\u751f\u6210\u5668\n    /// </summary>\n    public interface IEntityModelBuilderGenerator\n    {\n        /// <summary>\n        /// \u521b\u5efa <paramref name=\"entityType\"/> \u7c7b\u578b\u7684\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u5bf9\u8c61\n        /// </summary>", "        public object Create(Type entityType);\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityImplementation.cs", "chunked_list": ["\ufeffusing System;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u5b9e\u73b0\n    /// </summary>\n    public class EntityImplementation\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\u7c7b\u578b\n        /// </summary>", "        public Type EntityType { get; }\n\n        /// <summary>\n        /// \u5b9e\u73b0\u7c7b\u578b\n        /// </summary>\n        public Type ImplementationType { get; }\n\n        /// <summary>\n        /// \u8868\u540d\n        /// </summary>\n        public string TableName { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u5b9e\u73b0\n        /// </summary>\n        public EntityImplementation(Type entityType, Type implementationType, string tableName)\n        {\n            EntityType = entityType;\n            ImplementationType = implementationType;\n            TableName = tableName;\n        }\n    }\n}\n", "        public string TableName { get; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u5b9e\u73b0\n        /// </summary>\n        public EntityImplementation(Type entityType, Type implementationType, string tableName)\n        {\n            EntityType = entityType;\n            ImplementationType = implementationType;\n            TableName = tableName;\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Builder/EntityModelBuilderAccessor.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Linq;\n\nnamespace Ryan.EntityFrameworkCore.Builder\n{\n    /// <summary>\n    /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u8bbf\u95ee\u5668\n    /// </summary>\n    public class EntityModelBuilderAccessor\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\u7c7b\u578b\n        /// </summary>", "    /// </summary>\n    public class EntityModelBuilderAccessor\n    {\n        /// <summary>\n        /// \u5b9e\u4f53\u7c7b\u578b\n        /// </summary>\n        public Type EntityType { get; }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u5b9e\u73b0\u5b57\u5178\n        /// </summary>", "        public EntityImplementationDictionary Dictionary { get; }\n\n        /// <summary>\n        /// \u5b9e\u4f53\u6a21\u578b\u6784\u5efa\n        /// </summary>\n        public object EntityModelBuilder { get; }\n\n        /// <summary>\n        /// \u8bbf\u95ee\u5668\n        /// </summary>\n        public Action<Type, ModelBuilder> Accessor { get; protected set; }\n\n        /// <summary>\n        /// \u521b\u5efa\u5b9e\u4f53\u6a21\u578b\u6784\u5efa\u8bbf\u95ee\u5668\n        /// </summary>\n        public EntityModelBuilderAccessor(Type entityType, EntityImplementationDictionary dictionary, object entityModelBuilder)\n        {\n            EntityType = entityType;\n            Dictionary = dictionary;\n            EntityModelBuilder = entityModelBuilder;\n\n            // \u83b7\u53d6\u6784\u5efa\u65b9\u6cd5\n            var buildMethodInfo = EntityModelBuilder.GetType().GetMethod(\"Build\")!;\n\n            // \u521b\u5efa\u59d4\u6258 (\u5982\u679c\u4e0d\u5927\u91cf\u52a8\u6001\u5efa\u8868\uff0c\u6548\u7387\u4e0d\u4f1a\u592a\u4f4e)\n            Accessor = (t, m) =>\n            {", "                foreach (var entityImplementation in Dictionary.Values.Where(x => x.EntityType == t))\n                {\n                    buildMethodInfo\n                        .MakeGenericMethod(entityImplementation.ImplementationType)\n                        .Invoke(entityModelBuilder, new object[] { m, entityImplementation.TableName });\n                }\n            };\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Infrastructure/InternalMemoryCache.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.Caching.Memory;\nusing Microsoft.Extensions.Options;\n\nnamespace Ryan.EntityFrameworkCore.Infrastructure\n{\n    /// <summary>\n    /// \u5185\u90e8\u7f13\u5b58\n    /// </summary>\n    public class InternalMemoryCache : MemoryCache, IMemoryCache\n    {\n        public InternalMemoryCache() : base(new MemoryCacheOptions() \n        {\n            SizeLimit = 300\n        })\n        {\n        }\n    }\n}\n", "    public class InternalMemoryCache : MemoryCache, IMemoryCache\n    {\n        public InternalMemoryCache() : base(new MemoryCacheOptions() \n        {\n            SizeLimit = 300\n        })\n        {\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Query/QueryableFinder.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing Ryan.EntityFrameworkCore.Builder;\nusing System;\nusing System.Linq;\nusing System.Reflection;\n\nnamespace Ryan.EntityFrameworkCore.Query\n{\n    public class QueryableFinder : IQueryableFinder\n    {\n        public IEntityModelBuilderAccessorGenerator EntityModelBuilderAccessorGenerator { get; }", "    public class QueryableFinder : IQueryableFinder\n    {\n        public IEntityModelBuilderAccessorGenerator EntityModelBuilderAccessorGenerator { get; }\n        public MethodInfo MethodInfoSet { get; }\n        public MethodInfo MethodInfoOfType { get; }\n\n        public QueryableFinder(IEntityModelBuilderAccessorGenerator entityModelBuilderAccessorGenerator)\n        {\n            EntityModelBuilderAccessorGenerator = entityModelBuilderAccessorGenerator;\n            MethodInfoSet = typeof(DbContext).GetMethods().FirstOrDefault(x => x.Name == \"Set\"); // Set()\n            MethodInfoOfType = typeof(Queryable).GetMethods().FirstOrDefault(x => x.Name == \"OfType\"); // OfType\n        }\n", "        public virtual object DbSet(DbContext context, Type implementationType)\n        {\n            var methodInfo = MethodInfoSet.MakeGenericMethod(implementationType)!;\n\n            return methodInfo.Invoke(context, null)!;\n        }\n\n        private IQueryable<TEntity> OfType<TEntity>(object set) where TEntity : class\n        {\n            return (IQueryable<TEntity>)MethodInfoOfType.MakeGenericMethod(typeof(TEntity)).Invoke(null, new object[] { set })!;\n        }\n\n        public IQueryable<TEntity> Find<TEntity>(DbContext context, Type implementationType) where TEntity : class\n        {\n            var set = DbSet(context, implementationType);\n            return OfType<TEntity>(set);\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/EntityFrameworkCore/Query/IQueryableFinder.cs", "chunked_list": ["\ufeffusing Microsoft.EntityFrameworkCore;\nusing System;\nusing System.Linq;\n\nnamespace Ryan.EntityFrameworkCore.Query\n{\n    /// <summary>\n    /// \u67e5\u8be2\u641c\u7d22\u5668\n    /// </summary>\n    public interface IQueryableFinder\n    {\n        /// <summary>\n        /// \u67e5\u8be2\n        /// </summary>\n        IQueryable<TEntity> Find<TEntity>(DbContext context, Type implementationType) where TEntity : class;\n    }\n}\n", "    /// </summary>\n    public interface IQueryableFinder\n    {\n        /// <summary>\n        /// \u67e5\u8be2\n        /// </summary>\n        IQueryable<TEntity> Find<TEntity>(DbContext context, Type implementationType) where TEntity : class;\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/DependencyInjection/IShardDependency.cs", "chunked_list": ["\ufeffusing Ryan.EntityFrameworkCore.Builder;\nusing Ryan.EntityFrameworkCore.Dynamic;\nusing Ryan.EntityFrameworkCore.Expressions;\nusing Ryan.EntityFrameworkCore.Proxy;\nusing Ryan.EntityFrameworkCore.Query;\n\nnamespace Ryan.DependencyInjection\n{\n    /// <summary>\n    /// \u5206\u8868\u4f9d\u8d56", "    /// <summary>\n    /// \u5206\u8868\u4f9d\u8d56\n    /// </summary>\n    public interface IShardDependency\n    {\n        IDynamicSourceCodeGenerator DynamicSourceCodeGenerator { get; }\n        IDynamicTypeGenerator DynamicTypeGenerator { get; }\n        IEntityModelBuilderGenerator EntityModelBuilderGenerator { get; }\n        IEntityImplementationDictionaryGenerator EntityImplementationDictionaryGenerator { get; }\n        IEntityModelBuilderAccessorGenerator EntityModelBuilderAccessorGenerator { get; }\n        IEntityShardConfiguration EntityShardConfiguration { get; }\n        IEntityProxyGenerator EntityProxyGenerator { get; }\n        IDbContextEntityProxyLookupGenerator DbContextEntityProxyLookupGenerator { get; }\n        IDbContextEntityProxyGenerator DbContextEntityProxyGenerator { get; }\n        IQueryableFinder QueryableFinder { get; }\n        IExpressionImplementationFinder ExpressionImplementationFinder { get; }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/DependencyInjection/ServiceCollectionExtensions.cs", "chunked_list": ["\ufeffusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Ryan.DependencyInjection;\nusing Ryan.EntityFrameworkCore.Builder;\nusing Ryan.EntityFrameworkCore.Dynamic;\nusing Ryan.EntityFrameworkCore.Expressions;\nusing Ryan.EntityFrameworkCore.Proxy;\nusing Ryan.EntityFrameworkCore.Query;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{", "namespace Microsoft.Extensions.DependencyInjection\n{\n    /// <summary>\n    /// \u5206\u8868\u6269\u5c55\n    /// </summary>\n    public static class ServiceCollectionExtensions\n    {\n        /// <summary>\n        /// \u589e\u52a0\u5206\u8868\n        /// </summary>\n        public static void AddShard(this ServiceCollection services)\n        {\n            services.TryAddSingleton<IDynamicSourceCodeGenerator, DynamicSourceCodeGenerator>();\n            services.TryAddSingleton<IDynamicTypeGenerator, DynamicTypeGenerator>();\n            services.TryAddSingleton<IEntityModelBuilderGenerator, EntityModelBuilderGenerator>();\n            services.TryAddSingleton<IEntityImplementationDictionaryGenerator, EntityImplementationDictionaryGenerator>();\n            services.TryAddSingleton<IEntityModelBuilderAccessorGenerator, EntityModelBuilderAccessorGenerator>();\n            services.TryAddSingleton<IEntityShardConfiguration, EntityShardConfiguration>();\n            services.TryAddSingleton<IEntityProxyGenerator, EntityProxyGenerator>();\n            services.TryAddSingleton<IDbContextEntityProxyLookupGenerator, DbContextEntityProxyLookupGenerator>();\n            services.TryAddSingleton<IDbContextEntityProxyGenerator, DbContextEntityProxyGenerator>();\n            services.TryAddSingleton<IExpressionImplementationFinder, ExpressionImplementationFinder>();\n            services.TryAddSingleton<IQueryableFinder, QueryableFinder>();\n            services.TryAddSingleton<IShardDependency, ShardDependency>();\n        }\n    }\n}\n", "        public static void AddShard(this ServiceCollection services)\n        {\n            services.TryAddSingleton<IDynamicSourceCodeGenerator, DynamicSourceCodeGenerator>();\n            services.TryAddSingleton<IDynamicTypeGenerator, DynamicTypeGenerator>();\n            services.TryAddSingleton<IEntityModelBuilderGenerator, EntityModelBuilderGenerator>();\n            services.TryAddSingleton<IEntityImplementationDictionaryGenerator, EntityImplementationDictionaryGenerator>();\n            services.TryAddSingleton<IEntityModelBuilderAccessorGenerator, EntityModelBuilderAccessorGenerator>();\n            services.TryAddSingleton<IEntityShardConfiguration, EntityShardConfiguration>();\n            services.TryAddSingleton<IEntityProxyGenerator, EntityProxyGenerator>();\n            services.TryAddSingleton<IDbContextEntityProxyLookupGenerator, DbContextEntityProxyLookupGenerator>();\n            services.TryAddSingleton<IDbContextEntityProxyGenerator, DbContextEntityProxyGenerator>();\n            services.TryAddSingleton<IExpressionImplementationFinder, ExpressionImplementationFinder>();\n            services.TryAddSingleton<IQueryableFinder, QueryableFinder>();\n            services.TryAddSingleton<IShardDependency, ShardDependency>();\n        }\n    }\n}\n"]}
{"filename": "src/Ryan.EntityFrameworkCore.Shard/DependencyInjection/ShardDependency.cs", "chunked_list": ["\ufeffusing Ryan.EntityFrameworkCore.Builder;\nusing Ryan.EntityFrameworkCore.Dynamic;\nusing Ryan.EntityFrameworkCore.Expressions;\nusing Ryan.EntityFrameworkCore.Proxy;\nusing Ryan.EntityFrameworkCore.Query;\n\nnamespace Ryan.DependencyInjection\n{\n    /// <inheritdoc cref=\"IShardDependency\"/>\n    public class ShardDependency : IShardDependency\n    {\n        public ShardDependency(\n            IDynamicSourceCodeGenerator dynamicSourceCodeGenerator\n            , IDynamicTypeGenerator dynamicTypeGenerator\n            , IEntityModelBuilderGenerator entityModelBuilderGenerator\n            , IEntityImplementationDictionaryGenerator entityImplementationDictionaryGenerator\n            , IEntityModelBuilderAccessorGenerator entityModelBuilderAccessorGenerator\n            , IEntityShardConfiguration entityShardConfiguration\n            , IEntityProxyGenerator entityProxyGenerator\n            , IDbContextEntityProxyLookupGenerator dbContextEntityProxyLookupGenerator\n            , IDbContextEntityProxyGenerator dbContextEntityProxyGenerator\n            , IQueryableFinder queryableFinder\n            , IExpressionImplementationFinder expressionImplementationFinder)\n        {\n\n            DynamicSourceCodeGenerator = dynamicSourceCodeGenerator;\n            DynamicTypeGenerator = dynamicTypeGenerator;\n            EntityModelBuilderGenerator = entityModelBuilderGenerator;\n            EntityImplementationDictionaryGenerator = entityImplementationDictionaryGenerator;\n            EntityModelBuilderAccessorGenerator = entityModelBuilderAccessorGenerator;\n            EntityShardConfiguration = entityShardConfiguration;\n            EntityProxyGenerator = entityProxyGenerator;\n            DbContextEntityProxyLookupGenerator = dbContextEntityProxyLookupGenerator;\n            DbContextEntityProxyGenerator = dbContextEntityProxyGenerator;\n            QueryableFinder = queryableFinder;\n            ExpressionImplementationFinder = expressionImplementationFinder;\n        }\n", "    /// <inheritdoc cref=\"IShardDependency\"/>\n    public class ShardDependency : IShardDependency\n    {\n        public ShardDependency(\n            IDynamicSourceCodeGenerator dynamicSourceCodeGenerator\n            , IDynamicTypeGenerator dynamicTypeGenerator\n            , IEntityModelBuilderGenerator entityModelBuilderGenerator\n            , IEntityImplementationDictionaryGenerator entityImplementationDictionaryGenerator\n            , IEntityModelBuilderAccessorGenerator entityModelBuilderAccessorGenerator\n            , IEntityShardConfiguration entityShardConfiguration\n            , IEntityProxyGenerator entityProxyGenerator\n            , IDbContextEntityProxyLookupGenerator dbContextEntityProxyLookupGenerator\n            , IDbContextEntityProxyGenerator dbContextEntityProxyGenerator\n            , IQueryableFinder queryableFinder\n            , IExpressionImplementationFinder expressionImplementationFinder)\n        {\n\n            DynamicSourceCodeGenerator = dynamicSourceCodeGenerator;\n            DynamicTypeGenerator = dynamicTypeGenerator;\n            EntityModelBuilderGenerator = entityModelBuilderGenerator;\n            EntityImplementationDictionaryGenerator = entityImplementationDictionaryGenerator;\n            EntityModelBuilderAccessorGenerator = entityModelBuilderAccessorGenerator;\n            EntityShardConfiguration = entityShardConfiguration;\n            EntityProxyGenerator = entityProxyGenerator;\n            DbContextEntityProxyLookupGenerator = dbContextEntityProxyLookupGenerator;\n            DbContextEntityProxyGenerator = dbContextEntityProxyGenerator;\n            QueryableFinder = queryableFinder;\n            ExpressionImplementationFinder = expressionImplementationFinder;\n        }\n", "        public IDynamicSourceCodeGenerator DynamicSourceCodeGenerator { get; }\n        public IDynamicTypeGenerator DynamicTypeGenerator { get; }\n        public IEntityModelBuilderGenerator EntityModelBuilderGenerator { get; }\n        public IEntityImplementationDictionaryGenerator EntityImplementationDictionaryGenerator { get; }\n        public IEntityModelBuilderAccessorGenerator EntityModelBuilderAccessorGenerator { get; }\n        public IEntityShardConfiguration EntityShardConfiguration { get; }\n        public IEntityProxyGenerator EntityProxyGenerator { get; }\n        public IDbContextEntityProxyLookupGenerator DbContextEntityProxyLookupGenerator { get; }\n        public IDbContextEntityProxyGenerator DbContextEntityProxyGenerator { get; }\n        public IQueryableFinder QueryableFinder { get; }\n        public IExpressionImplementationFinder ExpressionImplementationFinder { get; }\n    }\n}\n", "        public IDbContextEntityProxyGenerator DbContextEntityProxyGenerator { get; }\n        public IQueryableFinder QueryableFinder { get; }\n        public IExpressionImplementationFinder ExpressionImplementationFinder { get; }\n    }\n}\n"]}
