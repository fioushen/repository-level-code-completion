{"filename": "Editor/EditorGUILayoutExtensions.cs", "chunked_list": ["\ufeffusing UnityEditor;\nusing UnityEngine;\n\nnamespace NAK.AASEmulator.Editor\n{\n    public static class EditorExtensions\n    {\n        public static void HandlePopupScroll(ref int newIndex, int minIndex, int maxIndex)\n        {\n            if (Event.current.type == EventType.ScrollWheel &&\n                GUILayoutUtility.GetLastRect().Contains(Event.current.mousePosition))\n            {", "            if (Event.current.type == EventType.ScrollWheel &&\n                GUILayoutUtility.GetLastRect().Contains(Event.current.mousePosition))\n            {\n                if (Event.current.delta.y < 0)\n                {\n                    newIndex = Mathf.Clamp(newIndex + 1, minIndex, maxIndex);\n                    Event.current.Use();\n                }\n                else if (Event.current.delta.y > 0)\n                {\n                    newIndex = Mathf.Clamp(newIndex - 1, minIndex, maxIndex);\n                    Event.current.Use();\n                }\n            }\n        }\n        ", "                else if (Event.current.delta.y > 0)\n                {\n                    newIndex = Mathf.Clamp(newIndex - 1, minIndex, maxIndex);\n                    Event.current.Use();\n                }\n            }\n        }\n        \n        private static float _joystickClickTime;\n\n        public static Vector2 Joystick2DField(Rect position, Vector2 value, bool shouldNormalize = false)\n        {\n            int controlID = GUIUtility.GetControlID(FocusType.Passive);\n            Event currentEvent = Event.current;\n\n            // Joystick area\n            Rect joystickArea = new Rect(position.x, position.y, position.width, position.height);\n\n            // Draw the background\n            EditorGUI.DrawRect(joystickArea, Color.grey);\n\n            // Draw the handle\n            Vector2 handlePosition =\n                new Vector2(value.x * (joystickArea.width / 2), -value.y * (joystickArea.height / 2));\n            Vector2 screenHandlePosition = joystickArea.center + handlePosition;\n            Handles.color = Color.white;\n            Handles.DrawSolidDisc(screenHandlePosition, Vector3.forward, 6);\n\n            // Handle input", "        private static float _joystickClickTime;\n\n        public static Vector2 Joystick2DField(Rect position, Vector2 value, bool shouldNormalize = false)\n        {\n            int controlID = GUIUtility.GetControlID(FocusType.Passive);\n            Event currentEvent = Event.current;\n\n            // Joystick area\n            Rect joystickArea = new Rect(position.x, position.y, position.width, position.height);\n\n            // Draw the background\n            EditorGUI.DrawRect(joystickArea, Color.grey);\n\n            // Draw the handle\n            Vector2 handlePosition =\n                new Vector2(value.x * (joystickArea.width / 2), -value.y * (joystickArea.height / 2));\n            Vector2 screenHandlePosition = joystickArea.center + handlePosition;\n            Handles.color = Color.white;\n            Handles.DrawSolidDisc(screenHandlePosition, Vector3.forward, 6);\n\n            // Handle input", "            if (currentEvent.type == EventType.MouseDown && joystickArea.Contains(currentEvent.mousePosition))\n            {\n                GUIUtility.hotControl = controlID;\n                currentEvent.Use();\n\n                // Double-click reset\n                if ((Time.realtimeSinceStartup - _joystickClickTime) < 0.5f)\n                    value = Vector2.zero;\n\n                _joystickClickTime = Time.realtimeSinceStartup;\n            }", "            else if (currentEvent.type == EventType.MouseUp && GUIUtility.hotControl == controlID)\n            {\n                GUIUtility.hotControl = 0;\n                currentEvent.Use();\n            }\n            else if (currentEvent.type == EventType.MouseDrag && GUIUtility.hotControl == controlID)\n            {\n                Vector2 newJoystickPosition = currentEvent.mousePosition - joystickArea.center;\n                newJoystickPosition.x /= joystickArea.width / 2;\n                newJoystickPosition.y /= -joystickArea.height / 2;\n                value = new Vector2(Mathf.Clamp(newJoystickPosition.x, -1, 1),\n                    Mathf.Clamp(newJoystickPosition.y, -1, 1));\n                currentEvent.Use();\n            }\n            ", "            if (shouldNormalize && value.magnitude > value.normalized.magnitude)\n                value.Normalize();\n\n            return value;\n        }\n    }\n}"]}
{"filename": "Editor/AASEmulatorRuntimeEditor.cs", "chunked_list": ["\ufeffusing System;\nusing NAK.AASEmulator.Runtime;\nusing UnityEditor;\nusing UnityEngine;\nusing static NAK.AASEmulator.Editor.EditorExtensions;\nusing static NAK.AASEmulator.Runtime.AASEmulatorRuntime;\n\nnamespace NAK.AASEmulator.Editor\n{\n    [CustomEditor(typeof(AASEmulatorRuntime))]\n    public class AASEmulatorRuntimeEditor : UnityEditor.Editor\n    {\n        #region Variables\n", "{\n    [CustomEditor(typeof(AASEmulatorRuntime))]\n    public class AASEmulatorRuntimeEditor : UnityEditor.Editor\n    {\n        #region Variables\n\n        private GUIStyle _boldFoldoutStyle;\n        private AASEmulatorRuntime _targetScript;\n\n        #endregion\n\n        #region Unity / GUI Methods\n", "        private void OnEnable()\n        {\n            OnRequestRepaint -= Repaint;\n            OnRequestRepaint += Repaint;\n            _boldFoldoutStyle = new GUIStyle(EditorStyles.foldout) { fontStyle = FontStyle.Bold };\n            \n            // Initialize on select\n            _targetScript = (AASEmulatorRuntime)target;\n            if (!_targetScript.IsInitialized())\n                _targetScript.Initialize();\n        }", "            if (!_targetScript.IsInitialized())\n                _targetScript.Initialize();\n        }\n        private void OnDisable() => OnRequestRepaint -= Repaint;\n        \n        public override void OnInspectorGUI()\n        {\n            if (_targetScript == null)\n                return;\n\n            Draw_ScriptWarning();\n\n            Draw_AvatarInfo();\n            \n            Draw_LipSync();\n            Draw_BuiltInGestures();\n            Draw_BuiltInLocomotion();\n            Draw_BuiltInEmotes();\n\n            Draw_AdditionalParameters();\n        }\n\n        #endregion Unity / GUI Methods\n        \n        #region Drawing Methods\n", "        private void Draw_ScriptWarning()\n        {\n            if (_targetScript.isInitializedExternally) \n                return;\n\n            EditorGUILayout.HelpBox(\"Warning: Do not upload this script with your avatar!\\nThis script is prevented from saving to scenes & prefabs.\", MessageType.Warning);\n            EditorGUILayout.HelpBox(\"This script will automatically be added if you enable AASEmulator from the Tools menu (Tools > Enable AAS Emulator).\", MessageType.Info);\n        }\n\n        private void Draw_AvatarInfo()\n        {\n            EditorGUILayout.Space();\n            _targetScript.avatarInfoFoldout = EditorGUILayout.Foldout(_targetScript.avatarInfoFoldout, \"Avatar Info\", true, _boldFoldoutStyle);\n", "        private void Draw_AvatarInfo()\n        {\n            EditorGUILayout.Space();\n            _targetScript.avatarInfoFoldout = EditorGUILayout.Foldout(_targetScript.avatarInfoFoldout, \"Avatar Info\", true, _boldFoldoutStyle);\n\n            if (_targetScript.avatarInfoFoldout)\n            {\n                EditorGUI.indentLevel++;\n\n                // Add label to show if an emote is currently playing or not\n                string emoteStatus = _targetScript.IsEmotePlaying ? \"Playing an Emote - Tracking Disabled\" : \"Not Playing an Emote - Tracking Enabled\";\n                EditorGUILayout.LabelField(\"Emote Status:\", emoteStatus);\n                \n                // Add label to show the eye movement status\n                string eyeMovementStatus = _targetScript.UseEyeMovement ? \"Enabled - Eye Look On\" : \"Disabled - Eye Look Off\";\n                EditorGUILayout.LabelField(\"Eye Movement:\", eyeMovementStatus);\n\n                // Add label to show the blink blendshapes status\n                string blinkBlendshapesStatus = _targetScript.UseBlinkBlendshapes ? \"Enabled - Eye Blink On\" : \"Disabled - Eye Blink Off\";\n                EditorGUILayout.LabelField(\"Blink Blendshapes:\", blinkBlendshapesStatus);\n\n                // Add label to show the lipsync status\n                string lipsyncStatus = _targetScript.UseLipsync ? \"Enabled - Lipsync On\" : \"Disabled - Lipsync Off\";\n                EditorGUILayout.LabelField(\"Lipsync:\", lipsyncStatus);\n\n                EditorGUI.indentLevel--;\n            }\n        }\n", "        private void Draw_LipSync()\n        {\n            EditorGUILayout.Space();\n            \n            string foldoutLabel = $\"Lip Sync / {_targetScript.VisemeMode.ToString().Replace('_', ' ')}\";\n            _targetScript.lipSyncFoldout = EditorGUILayout.Foldout(_targetScript.lipSyncFoldout, foldoutLabel, true, _boldFoldoutStyle);\n\n            if (_targetScript.lipSyncFoldout)\n            {\n                EditorGUI.indentLevel++;\n\n                switch (_targetScript.VisemeMode)\n                {\n                    case VisemeModeIndex.Visemes:\n                        int newVisemeIndex = (int)_targetScript.VisemeIdx;\n                        newVisemeIndex = EditorGUILayout.Popup(\"Viseme Index\", newVisemeIndex, Enum.GetNames(typeof(VisemeIndex)));\n                        HandlePopupScroll(ref newVisemeIndex, 0, Enum.GetNames(typeof(VisemeIndex)).Length - 1);\n                        _targetScript.VisemeIdx = (VisemeIndex)newVisemeIndex;\n                        _targetScript.Viseme = EditorGUILayout.IntSlider(\"Viseme\", _targetScript.Viseme, 0, 14);\n                        break;\n                    case VisemeModeIndex.Single_Blendshape:\n                    case VisemeModeIndex.Jaw_Bone:\n                        _targetScript.VisemeLoudness = EditorGUILayout.Slider(\"Viseme Loudness\", _targetScript.VisemeLoudness, 0f, 1f);\n                        break;\n                }\n\n                EditorGUI.indentLevel--;\n            }\n        }\n", "        private void Draw_BuiltInGestures()\n        {\n            EditorGUILayout.Space();\n            _targetScript.builtInGesturesFoldout = EditorGUILayout.Foldout(_targetScript.builtInGesturesFoldout, \"Built-in inputs / Hand Gestures\", true, _boldFoldoutStyle);\n\n            if (_targetScript.builtInGesturesFoldout)\n            {\n                EditorGUI.indentLevel++;\n\n                int newLeftGestureIndex = EditorGUILayout.Popup(\"Gesture Left Index\", (int)_targetScript.GestureLeftIdx, Enum.GetNames(typeof(GestureIndex)));\n                HandlePopupScroll(ref newLeftGestureIndex, 0, Enum.GetNames(typeof(GestureIndex)).Length - 1);", "                if ((GestureIndex)newLeftGestureIndex != _targetScript.GestureLeftIdx)\n                {\n                    _targetScript.GestureLeftIdx = (GestureIndex)newLeftGestureIndex;\n                }\n                float newLeftGestureValue = EditorGUILayout.Slider(\"Gesture Left\", _targetScript.GestureLeft, -1, 6);\n                if (!Mathf.Approximately(newLeftGestureValue, _targetScript.GestureLeft))\n                {\n                    _targetScript.GestureLeft = newLeftGestureValue;\n                }\n\n                int newRightGestureIndex = EditorGUILayout.Popup(\"Gesture Right Index\", (int)_targetScript.GestureRightIdx, Enum.GetNames(typeof(GestureIndex)));\n                HandlePopupScroll(ref newRightGestureIndex, 0, Enum.GetNames(typeof(GestureIndex)).Length - 1);", "                if ((GestureIndex)newRightGestureIndex != _targetScript.GestureRightIdx)\n                {\n                    _targetScript.GestureRightIdx = (GestureIndex)newRightGestureIndex;\n                }\n                float newRightGestureValue = EditorGUILayout.Slider(\"Gesture Right\", _targetScript.GestureRight, -1, 6);\n                if (!Mathf.Approximately(newRightGestureValue, _targetScript.GestureRight))\n                {\n                    _targetScript.GestureRight = newRightGestureValue;\n                }\n\n                EditorGUI.indentLevel--;\n            }\n        }\n", "        private void Draw_BuiltInLocomotion()\n        {\n            EditorGUILayout.Space();\n            _targetScript.builtInLocomotionFoldout = EditorGUILayout.Foldout(_targetScript.builtInLocomotionFoldout, \"Built-in inputs / Locomotion\", true, _boldFoldoutStyle);\n\n            if (_targetScript.builtInLocomotionFoldout)\n            {\n                EditorGUI.indentLevel++;\n\n                // Custom joystick GUI\n                _targetScript.joystickFoldout = EditorGUILayout.Foldout(_targetScript.joystickFoldout, \"Joystick\", true, _boldFoldoutStyle);", "                if (_targetScript.joystickFoldout)\n                {\n                    EditorGUILayout.BeginHorizontal();\n\n                    Rect joystickRect = GUILayoutUtility.GetRect(100, 100, GUILayout.MaxWidth(100), GUILayout.MaxHeight(100));\n                    Vector2 newMovementValue = Joystick2DField(joystickRect, _targetScript.Movement, true);\n                    if (newMovementValue != _targetScript.Movement)\n                        _targetScript.Movement = newMovementValue;\n\n                    EditorGUILayout.BeginVertical();\n                    GUILayout.FlexibleSpace();\n                    EditorGUILayout.HelpBox(\"Double Click to Reset\", MessageType.Info);\n                    EditorGUILayout.EndVertical();\n\n                    EditorGUILayout.EndHorizontal();\n                }\n\n                // Movement field\n                Vector2 newMovementValue2 = EditorGUILayout.Vector2Field(\"Movement\", _targetScript.Movement);", "                if (newMovementValue2 != _targetScript.Movement)\n                    _targetScript.Movement = newMovementValue2;\n\n                _targetScript.Crouching = EditorGUILayout.Toggle(\"Crouching\", _targetScript.Crouching);\n                _targetScript.Prone = EditorGUILayout.Toggle(\"Prone\", _targetScript.Prone);\n                _targetScript.Flying = EditorGUILayout.Toggle(\"Flying\", _targetScript.Flying);\n                _targetScript.Sitting = EditorGUILayout.Toggle(\"Sitting\", _targetScript.Sitting);\n                _targetScript.Grounded = EditorGUILayout.Toggle(\"Grounded\", _targetScript.Grounded);\n\n                EditorGUI.indentLevel--;\n            }\n        }\n", "        private void Draw_BuiltInEmotes()\n        {\n            EditorGUILayout.Space();\n            _targetScript.builtInEmotesFoldout = EditorGUILayout.Foldout(_targetScript.builtInEmotesFoldout, \"Built-in inputs / Emotes\", true, _boldFoldoutStyle);\n\n            if (_targetScript.builtInEmotesFoldout)\n            {\n                EditorGUI.indentLevel++;\n\n                EditorGUILayout.BeginHorizontal();\n                EditorGUILayout.LabelField(\"Emote\", GUILayout.Width(60));", "                for (int i = 0; i <= 8; i++)\n                {\n                    bool emote = EditorGUILayout.Toggle(_targetScript.Emote == i, GUILayout.Width(30));\n                    if (emote) _targetScript.Emote = i;\n                }\n                EditorGUILayout.EndHorizontal();\n\n                EditorGUILayout.BeginHorizontal();\n                EditorGUILayout.LabelField(\"Toggle\", GUILayout.Width(60));\n                for (int i = 0; i <= 8; i++)\n                {\n                    bool toggle = EditorGUILayout.Toggle(_targetScript.Toggle == i, GUILayout.Width(30));", "                for (int i = 0; i <= 8; i++)\n                {\n                    bool toggle = EditorGUILayout.Toggle(_targetScript.Toggle == i, GUILayout.Width(30));\n                    if (toggle) _targetScript.Toggle = i;\n                }\n                EditorGUILayout.EndHorizontal();\n\n                _targetScript.CancelEmote = EditorGUILayout.Toggle(\"Cancel Emote\", _targetScript.CancelEmote);\n\n                EditorGUI.indentLevel--;\n            }\n        }\n", "        private void Draw_AdditionalParameters()\n        {\n            EditorGUILayout.Space();\n\n            if (_targetScript.AnimatorManager == null)\n                return;\n            \n            _targetScript.floatsFoldout = EditorGUILayout.Foldout(_targetScript.floatsFoldout, \"Additional inputs / Floats\", true, _boldFoldoutStyle);\n            if (_targetScript.floatsFoldout)\n            {\n                EditorGUI.indentLevel++;", "            if (_targetScript.floatsFoldout)\n            {\n                EditorGUI.indentLevel++;\n                foreach (var floatParam in _targetScript.AnimatorManager.FloatParameters)\n                {\n                    EditorGUILayout.BeginHorizontal();\n                    EditorGUILayout.LabelField(floatParam.name, GUILayout.MaxWidth(150));\n                    EditorGUILayout.LabelField(floatParam.isLocal ? \"Local\" : \"Synced\", GUILayout.MaxWidth(75));\n                    EditorGUI.BeginDisabledGroup(floatParam.isControlledByCurve);\n                    float newFloatValue = EditorGUILayout.FloatField(floatParam.value);\n                    EditorGUI.EndDisabledGroup();", "                    if (floatParam.value != newFloatValue)\n                        _targetScript.AnimatorManager.SetParameter(floatParam.name, newFloatValue);\n                    EditorGUILayout.EndHorizontal();\n                }\n                EditorGUI.indentLevel--;\n            }\n\n            _targetScript.intsFoldout = EditorGUILayout.Foldout(_targetScript.intsFoldout, \"Additional inputs / Ints\", true, _boldFoldoutStyle);\n            if (_targetScript.intsFoldout)\n            {\n                EditorGUI.indentLevel++;", "            if (_targetScript.intsFoldout)\n            {\n                EditorGUI.indentLevel++;\n                foreach (var intParam in _targetScript.AnimatorManager.IntParameters)\n                {\n                    EditorGUILayout.BeginHorizontal();\n                    EditorGUILayout.LabelField(intParam.name, GUILayout.MaxWidth(150));\n                    EditorGUILayout.LabelField(intParam.isLocal ? \"Local\" : \"Synced\", GUILayout.MaxWidth(75));\n                    EditorGUI.BeginDisabledGroup(intParam.isControlledByCurve);\n                    int newIntValue = EditorGUILayout.IntField(intParam.value);\n                    EditorGUI.EndDisabledGroup();", "                    if (intParam.value != newIntValue)\n                        _targetScript.AnimatorManager.SetParameter(intParam.name, newIntValue);\n                    EditorGUILayout.EndHorizontal();\n                }\n                EditorGUI.indentLevel--;\n            }\n            \n            _targetScript.boolsFoldout = EditorGUILayout.Foldout(_targetScript.boolsFoldout, \"Additional inputs / Bools\", true, _boldFoldoutStyle);\n            if (_targetScript.boolsFoldout)\n            {\n                EditorGUI.indentLevel++;", "            if (_targetScript.boolsFoldout)\n            {\n                EditorGUI.indentLevel++;\n                foreach (var boolParam in _targetScript.AnimatorManager.BoolParameters)\n                {\n                    EditorGUILayout.BeginHorizontal();\n                    EditorGUILayout.LabelField(boolParam.name, GUILayout.MaxWidth(150));\n                    EditorGUILayout.LabelField(boolParam.isLocal ? \"Local\" : \"Synced\", GUILayout.MaxWidth(75));\n                    EditorGUI.BeginDisabledGroup(boolParam.isControlledByCurve);\n                    bool newBoolValue = EditorGUILayout.Toggle(boolParam.value);\n                    EditorGUI.EndDisabledGroup();", "                    if (boolParam.value != newBoolValue)\n                        _targetScript.AnimatorManager.SetParameter(boolParam.name, newBoolValue);\n                    EditorGUILayout.EndHorizontal();\n                }\n                EditorGUI.indentLevel--;\n            }\n        }\n\n        #endregion Drawing Methods\n    }\n}"]}
{"filename": "Editor/AASEmulatorSupport.cs", "chunked_list": ["\ufeffusing System.Linq;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace NAK.AASEmulator.Support\n{\n    [InitializeOnLoad]\n    public static class AASEmulatorSupport\n    {\n        static AASEmulatorSupport()\n        {\n            InitDefaults();\n        }\n        ", "    public static class AASEmulatorSupport\n    {\n        static AASEmulatorSupport()\n        {\n            InitDefaults();\n        }\n        \n        private static void InitDefaults()\n        {\n            Runtime.AASEmulator.addTopComponentDelegate = MoveComponentToTop;\n        }\n", "        private static void MoveComponentToTop(Component c)\n        {\n            GameObject go = c.gameObject;\n            Component[] components = go.GetComponents<Component>();\n            try\n            {\n                if (PrefabUtility.IsPartOfAnyPrefab(go))\n                    PrefabUtility.UnpackPrefabInstance(go, PrefabUnpackMode.Completely, InteractionMode.AutomatedAction);\n            }\n            catch (System.Exception)\n            {\n                // ignored\n            }\n", "            catch (System.Exception)\n            {\n                // ignored\n            }\n\n            if (PrefabUtility.IsPartOfAnyPrefab(go.GetComponents<Component>()[1])) \n                return;\n\n            int moveUpCalls = components.Length - 2;\n            for (int i = 0; i < moveUpCalls; i++)\n                UnityEditorInternal.ComponentUtility.MoveComponentUp(c);\n        }\n\n        [MenuItem(\"Tools/Enable AAS Emulator\")]", "            for (int i = 0; i < moveUpCalls; i++)\n                UnityEditorInternal.ComponentUtility.MoveComponentUp(c);\n        }\n\n        [MenuItem(\"Tools/Enable AAS Emulator\")]\n        public static void EnableAASTesting()\n        {\n            Runtime.AASEmulator control = Runtime.AASEmulator.Instance ?? AddComponentIfMissing<Runtime.AASEmulator>(\n                SceneManager.GetActiveScene()\n                    .GetRootGameObjects()\n                    .SelectMany(root => root.GetComponentsInChildren<Transform>(true))\n                    .FirstOrDefault(t => t.name == \"AAS Emulator Control\")?.gameObject ?? new GameObject(\"AAS Emulator Control\"));\n            \n            control.enabled = true;\n            control.gameObject.SetActive(true);\n            GameObjectUtility.RemoveMonoBehavioursWithMissingScript(control.gameObject);\n            Selection.SetActiveObjectWithContext(control.gameObject, control.gameObject);\n            EditorGUIUtility.PingObject(control.gameObject);\n        }\n", "        public static T AddComponentIfMissing<T>(this GameObject go) where T : Component\n        {\n            return go.GetComponent<T>() ?? go.AddComponent<T>();\n        }\n        \n        public static T AddComponentIfMissing<T>(this Component component) where T : Component\n        {\n            return component.gameObject.AddComponentIfMissing<T>();\n        }\n    }\n}"]}
{"filename": "Editor/AASMenuEditor.cs", "chunked_list": ["\ufeffusing NAK.AASEmulator.Runtime;\nusing UnityEditor;\nusing UnityEngine;\nusing static ABI.CCK.Scripts.CVRAdvancedSettingsEntry;\nusing static NAK.AASEmulator.Runtime.AASEmulatorRuntime;\nusing static NAK.AASEmulator.Runtime.AASMenu;\n\nnamespace NAK.AASEmulator.Editor\n{\n    [CustomEditor(typeof(AASMenu))]\n    public class AASMenuEditor : UnityEditor.Editor\n    {\n        #region Variables\n", "{\n    [CustomEditor(typeof(AASMenu))]\n    public class AASMenuEditor : UnityEditor.Editor\n    {\n        #region Variables\n\n        private AASMenu _targetScript;\n\n        #endregion\n\n        #region Unity / GUI Methods\n", "        private void OnEnable()\n        {\n            OnRequestRepaint -= Repaint;\n            OnRequestRepaint += Repaint;\n            _targetScript = (AASMenu)target;\n        }\n        private void OnDisable() => OnRequestRepaint -= Repaint;\n\n        public override void OnInspectorGUI()\n        {\n            if (_targetScript == null)\n                return;\n\n            Draw_ScriptWarning();\n\n            Draw_AASMenus();\n        }\n\n        #endregion Unity / GUI Methods\n\n        #region Drawing Methods\n", "        public override void OnInspectorGUI()\n        {\n            if (_targetScript == null)\n                return;\n\n            Draw_ScriptWarning();\n\n            Draw_AASMenus();\n        }\n\n        #endregion Unity / GUI Methods\n\n        #region Drawing Methods\n", "        private void Draw_ScriptWarning()\n        {\n            if (_targetScript.isInitializedExternally)\n                return;\n\n            EditorGUILayout.HelpBox(\"Warning: Do not upload this script with your avatar!\\nThis script is prevented from saving to scenes & prefabs.\", MessageType.Warning);\n            EditorGUILayout.HelpBox(\"This script will automatically be added if you enable AASEmulator from the Tools menu (Tools > Enable AAS Emulator).\", MessageType.Info);\n        }\n\n        private void Draw_AASMenus()\n        {", "        private void Draw_AASMenus()\n        {\n            foreach (AASMenuEntry t in _targetScript.entries)\n                DisplayMenuEntry(t);\n        }\n        \n        private void DisplayMenuEntry(AASMenuEntry entry)\n        {\n            GUILayout.BeginVertical(\"box\");\n\n            EditorGUILayout.LabelField(\"Menu Name\", entry.menuName);\n            EditorGUILayout.LabelField(\"Machine Name\", entry.machineName);\n            EditorGUILayout.LabelField(\"Settings Type\", entry.settingType.ToString());\n            \n            switch (entry.settingType)\n            {\n                case SettingsType.GameObjectDropdown:\n                    int oldIndex = (int)entry.valueX;\n                    int newIndex = EditorGUILayout.Popup(\"Value\", oldIndex, entry.menuOptions);", "                    if (newIndex != oldIndex)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newIndex);\n                        entry.valueX = newIndex;\n                    }\n                    break;\n                case SettingsType.GameObjectToggle:\n                    bool oldValue = entry.valueX >= 0.5f;\n                    bool newValue = EditorGUILayout.Toggle(\"Value\", oldValue);\n                    if (newValue != oldValue)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newValue);\n                        entry.valueX = newValue ? 1f : 0f;\n                    }\n                    break;\n                case SettingsType.Slider:\n                    float oldSliderValue = entry.valueX;\n                    float newSliderValue = EditorGUILayout.Slider(\"Value\", oldSliderValue, 0f, 1f);", "                    if (newValue != oldValue)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newValue);\n                        entry.valueX = newValue ? 1f : 0f;\n                    }\n                    break;\n                case SettingsType.Slider:\n                    float oldSliderValue = entry.valueX;\n                    float newSliderValue = EditorGUILayout.Slider(\"Value\", oldSliderValue, 0f, 1f);\n                    if (newSliderValue != oldSliderValue)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newSliderValue);\n                        entry.valueX = newSliderValue;\n                    }\n                    break;\n                case SettingsType.InputSingle:\n                    float oldSingleValue = entry.valueX;\n                    float newSingleValue = EditorGUILayout.FloatField(\"Value\", oldSingleValue);", "                    if (newSliderValue != oldSliderValue)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newSliderValue);\n                        entry.valueX = newSliderValue;\n                    }\n                    break;\n                case SettingsType.InputSingle:\n                    float oldSingleValue = entry.valueX;\n                    float newSingleValue = EditorGUILayout.FloatField(\"Value\", oldSingleValue);\n                    if (newSingleValue != oldSingleValue)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newSingleValue);\n                        entry.valueX = newSingleValue;\n                    }\n                    break;\n                case SettingsType.InputVector2:\n                    Vector2 oldVector2Value = new Vector2(entry.valueX, entry.valueY);\n                    Vector2 newVector2Value = EditorGUILayout.Vector2Field(\"Value\", oldVector2Value);", "                    if (newSingleValue != oldSingleValue)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newSingleValue);\n                        entry.valueX = newSingleValue;\n                    }\n                    break;\n                case SettingsType.InputVector2:\n                    Vector2 oldVector2Value = new Vector2(entry.valueX, entry.valueY);\n                    Vector2 newVector2Value = EditorGUILayout.Vector2Field(\"Value\", oldVector2Value);\n                    if (newVector2Value != oldVector2Value)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newVector2Value);\n                        entry.valueX = newVector2Value.x;\n                        entry.valueY = newVector2Value.y;\n                    }\n                    break;\n                case SettingsType.InputVector3:\n                    Vector3 oldVector3Value = new Vector3(entry.valueX, entry.valueY, entry.valueZ);\n                    Vector3 newVector3Value = EditorGUILayout.Vector3Field(\"Value\", oldVector3Value);", "                    if (newVector2Value != oldVector2Value)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newVector2Value);\n                        entry.valueX = newVector2Value.x;\n                        entry.valueY = newVector2Value.y;\n                    }\n                    break;\n                case SettingsType.InputVector3:\n                    Vector3 oldVector3Value = new Vector3(entry.valueX, entry.valueY, entry.valueZ);\n                    Vector3 newVector3Value = EditorGUILayout.Vector3Field(\"Value\", oldVector3Value);\n                    if (newVector3Value != oldVector3Value)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newVector3Value);\n                        entry.valueX = newVector3Value.x;\n                        entry.valueY = newVector3Value.y;\n                        entry.valueZ = newVector3Value.z;\n                    }\n                    break;\n                // TODO: AAAAAAAAAAAA\n                case SettingsType.MaterialColor:\n                case SettingsType.Joystick2D:\n                case SettingsType.Joystick3D:\n                default:\n                    break;\n            }\n\n            GUILayout.EndVertical();\n        }\n\n        #endregion\n    }\n}", "                    if (newVector3Value != oldVector3Value)\n                    {\n                        _targetScript.AnimatorManager.SetParameter(entry.machineName, newVector3Value);\n                        entry.valueX = newVector3Value.x;\n                        entry.valueY = newVector3Value.y;\n                        entry.valueZ = newVector3Value.z;\n                    }\n                    break;\n                // TODO: AAAAAAAAAAAA\n                case SettingsType.MaterialColor:\n                case SettingsType.Joystick2D:\n                case SettingsType.Joystick3D:\n                default:\n                    break;\n            }\n\n            GUILayout.EndVertical();\n        }\n\n        #endregion\n    }\n}"]}
{"filename": "Runtime/Scripts/AASEmulatorRuntime.cs", "chunked_list": ["\ufeffusing ABI.CCK.Components;\nusing NAK.AASEmulator.Runtime.SubSystems;\nusing System;\nusing UnityEngine;\n\nnamespace NAK.AASEmulator.Runtime\n{\n    [AddComponentMenu(\"\")]\n    [HelpURL(\"https://github.com/NotAKidOnSteam/AASEmulator\")]\n    public class AASEmulatorRuntime : EditorOnlyMonoBehaviour\n    {\n        #region EditorGUI\n", "    [HelpURL(\"https://github.com/NotAKidOnSteam/AASEmulator\")]\n    public class AASEmulatorRuntime : EditorOnlyMonoBehaviour\n    {\n        #region EditorGUI\n\n        public delegate void RepaintRequestHandler();\n\n        public static event RepaintRequestHandler OnRequestRepaint;\n\n        [HideInInspector] public bool avatarInfoFoldout = true;\n        [HideInInspector] public bool lipSyncFoldout = true;", "        [HideInInspector] public bool avatarInfoFoldout = true;\n        [HideInInspector] public bool lipSyncFoldout = true;\n        [HideInInspector] public bool builtInLocomotionFoldout = true;\n        [HideInInspector] public bool builtInEmotesFoldout = true;\n        [HideInInspector] public bool builtInGesturesFoldout = true;\n        [HideInInspector] public bool joystickFoldout = false;\n        [HideInInspector] public bool floatsFoldout = false;\n        [HideInInspector] public bool intsFoldout = false;\n        [HideInInspector] public bool boolsFoldout = false;\n\n        private bool m_shouldRepaintEditor = false;\n\n        #endregion EditorGUI\n\n        #region CVR_VISEME_GESTURE_INDEX\n\n        // Oculus Lipsync", "        [HideInInspector] public bool boolsFoldout = false;\n\n        private bool m_shouldRepaintEditor = false;\n\n        #endregion EditorGUI\n\n        #region CVR_VISEME_GESTURE_INDEX\n\n        // Oculus Lipsync\n        public enum VisemeIndex\n        {\n            sil,\n            PP,\n            FF,\n            TH,\n            DD,\n            kk,\n            CH,\n            SS,\n            nn,\n            RR,\n            aa,\n            E,\n            I,\n            O,\n            U\n        }\n\n        // -1f to 6f, 0-1f is Fist weight", "        public enum VisemeIndex\n        {\n            sil,\n            PP,\n            FF,\n            TH,\n            DD,\n            kk,\n            CH,\n            SS,\n            nn,\n            RR,\n            aa,\n            E,\n            I,\n            O,\n            U\n        }\n\n        // -1f to 6f, 0-1f is Fist weight", "        public enum GestureIndex\n        {\n            HandOpen,\n            Neutral,\n            Fist,\n            ThumbsUp,\n            HandGun,\n            Fingerpoint,\n            Victory,\n            RockNRoll\n        }\n\n        // Oculus Lipsync, Loudness, Loudness", "        public enum VisemeModeIndex\n        {\n            Visemes = 0,\n            Single_Blendshape,\n            Jaw_Bone,\n        }\n\n        #endregion CVR_VISEME_GESTURE_INDEX\n\n        #region Lip Sync / Visemes\n\n        [Header(\"Lip Sync / Visemes\")]", "        [SerializeField][Range(0, 14)] private int _viseme;\n\n        private VisemeIndex _visemeIdx;\n\n        public VisemeIndex VisemeIdx\n        {\n            get => _visemeIdx;\n            set\n            {\n                _visemeIdx = value;\n                _viseme = (int)value;\n            }\n        }\n", "        public int Viseme\n        {\n            get => _viseme;\n            set\n            {\n                _viseme = value;\n                _visemeIdx = (VisemeIndex)value;\n            }\n        }\n\n        private int _visemeSmoothing = 50;", "        private int _visemeSmoothing = 50;\n        private float _visemeSmoothingFactor = 0.5f;\n\n        // Single Blendshape & Jaw Bone\n        public float VisemeLoudness { get; set; }\n\n        #endregion Lip Sync / Visemes\n\n        #region Built-in inputs / Hand Gestures\n\n        [Header(\"Built-in inputs / Hand Gestures\")]", "        [SerializeField][Range(-1, 6)] private float _gestureLeft;\n\n        [SerializeField][Range(-1, 6)] private float _gestureRight;\n        private GestureIndex _gestureLeftIdx;\n        private GestureIndex _gestureRightIdx;\n\n        public GestureIndex GestureLeftIdx\n        {\n            get => _gestureLeftIdx;\n            set\n            {\n                _gestureLeftIdx = value;\n                _gestureLeft = (float)value - 1;\n            }\n        }\n", "        public float GestureLeft\n        {\n            get => _gestureLeft;\n            set\n            {\n                _gestureLeft = value;\n                if (_gestureLeft > 0 && _gestureLeft <= 1)\n                {\n                    _gestureLeftIdx = GestureIndex.Fist;\n                    return;\n                }\n\n                _gestureLeftIdx = (GestureIndex)Mathf.FloorToInt(value + 1);\n            }\n        }\n", "        public GestureIndex GestureRightIdx\n        {\n            get => _gestureRightIdx;\n            set\n            {\n                _gestureRightIdx = value;\n                _gestureRight = (float)value - 1;\n            }\n        }\n\n        public float GestureRight\n        {\n            get => _gestureRight;\n            set\n            {\n                _gestureRight = value;", "        public float GestureRight\n        {\n            get => _gestureRight;\n            set\n            {\n                _gestureRight = value;\n                if (_gestureRight > 0 && _gestureRight <= 1)\n                {\n                    _gestureRightIdx = GestureIndex.Fist;\n                    return;\n                }\n\n                _gestureRightIdx = (GestureIndex)Mathf.FloorToInt(value + 1);\n            }\n        }\n\n        #endregion Built-in inputs / Hand Gestures\n\n        #region Built-in inputs / Locomotion\n\n        [Header(\"Built-in inputs / Locomotion\")]", "        [SerializeField] private Vector2 _movement;\n\n        public Vector2 Movement\n        {\n            get => _movement;\n            set => _movement = new Vector2(Mathf.Clamp(value.x, -1f, 1f), Mathf.Clamp(value.y, -1f, 1f));\n        }\n\n        public bool Crouching;\n        public bool Prone;\n        public bool Flying;", "        public bool Crouching;\n        public bool Prone;\n        public bool Flying;\n        public bool Sitting;\n        public bool Grounded = true;\n\n        #endregion Built-in inputs / Locomotion\n\n        #region Built-in inputs / Emotes\n\n        [Header(\"Built-in inputs / Toggles & Emotes\")]", "        [SerializeField][Range(0, 8)] private float _toggle;\n\n        public int Toggle\n        {\n            get => Mathf.RoundToInt(_toggle);\n            set => _toggle = value;\n        }\n\n        [SerializeField][Range(0, 8)] private float _emote;\n\n        public int Emote\n        {\n            get => Mathf.RoundToInt(_emote);\n            set => _emote = value;\n        }\n", "        [SerializeField][Range(0, 8)] private float _emote;\n\n        public int Emote\n        {\n            get => Mathf.RoundToInt(_emote);\n            set => _emote = value;\n        }\n\n        public bool CancelEmote;\n\n        #endregion Built-in inputs / Emotes\n\n        #region Public Properties\n", "        public bool CancelEmote;\n\n        #endregion Built-in inputs / Emotes\n\n        #region Public Properties\n\n        public bool UseLipsync => m_avatar?.useVisemeLipsync ?? false;\n        public VisemeModeIndex VisemeMode => m_avatar != null ? (VisemeModeIndex)m_avatar.visemeMode : VisemeModeIndex.Visemes;\n        public bool UseEyeMovement => m_avatar?.useEyeMovement ?? false;\n        public bool UseBlinkBlendshapes => m_avatar?.useBlinkBlendshapes ?? false;\n        public bool IsEmotePlaying => m_emotePlaying;\n\n        #endregion Public Properties\n\n        #region Variables\n", "        public bool UseEyeMovement => m_avatar?.useEyeMovement ?? false;\n        public bool UseBlinkBlendshapes => m_avatar?.useBlinkBlendshapes ?? false;\n        public bool IsEmotePlaying => m_emotePlaying;\n\n        #endregion Public Properties\n\n        #region Variables\n\n        public AnimatorManager AnimatorManager { get; private set; }\n\n        public CVRAvatar m_avatar;", "        public AnimatorManager AnimatorManager { get; private set; }\n\n        public CVRAvatar m_avatar;\n        public Animator m_animator;\n\n        public bool m_isExternalControl = false;\n\n        // Emotes\n        private bool m_emotePlayed;\n        private bool m_emotePlaying;\n        private bool m_emoteCanceled;\n\n        // Visemes\n        private float[] m_visemeCurrentBlendShapeWeights;\n        private int[] m_visemeBlendShapeIndicies;\n\n        // Jaw Bone handling", "        private bool m_emotePlayed;\n        private bool m_emotePlaying;\n        private bool m_emoteCanceled;\n\n        // Visemes\n        private float[] m_visemeCurrentBlendShapeWeights;\n        private int[] m_visemeBlendShapeIndicies;\n\n        // Jaw Bone handling\n        private HumanPoseHandler m_humanPoseHandler;\n        private HumanPose m_humanPose;", "        private HumanPoseHandler m_humanPoseHandler;\n        private HumanPose m_humanPose;\n        private static int _jawBoneMuscleIndex = -1;\n\n        private bool m_isInitialized = false;\n\n        #endregion Variables\n\n        #region Initialization\n\n        private void Start()\n        {", "        private void Start()\n        {\n            if (AASEmulator.Instance == null)\n            {\n                SimpleLogger.LogWarning(\"AAS Emulator Control is missing from the scene. Emulator will not run!\", gameObject);\n                return;\n            }\n\n            if (AASEmulator.Instance.OnlyInitializeOnSelect)\n                return;\n\n            Initialize();\n        }\n", "            if (AASEmulator.Instance.OnlyInitializeOnSelect)\n                return;\n\n            Initialize();\n        }\n\n        public bool IsInitialized() => m_isInitialized;\n        \n        public void Initialize()\n        {\n            if (m_isInitialized)\n                return;\n", "        public void Initialize()\n        {\n            if (m_isInitialized)\n                return;\n\n            if (AASEmulator.Instance == null)\n            {\n                SimpleLogger.LogWarning(\"AAS Emulator Control is missing from the scene. Emulator will not run!\", gameObject);\n                return;\n            }\n\n            m_avatar = gameObject.GetComponent<CVRAvatar>();", "            if (m_avatar == null)\n            {\n                SimpleLogger.LogError(\"The CVRAvatar component is missing on the attached gameObject. Destroying...\", gameObject);\n                DestroyImmediate(this);\n                return;\n            }\n\n            // CVR will ensure this on initialization\n            if (!gameObject.TryGetComponent<Animator>(out m_animator))\n                m_animator = gameObject.AddComponent<Animator>();\n\n            // CVR replaces old CCK animation clips, but we won't even bother trying", "            if (!gameObject.TryGetComponent<Animator>(out m_animator))\n                m_animator = gameObject.AddComponent<Animator>();\n\n            // CVR replaces old CCK animation clips, but we won't even bother trying\n            if (m_avatar.overrides != null)\n                m_animator.runtimeAnimatorController = m_avatar.overrides;\n            else\n                m_animator.runtimeAnimatorController = AASEmulator.Instance.defaultRuntimeController;\n\n            m_animator.applyRootMotion = false;\n            m_animator.enabled = true;\n", "            if (m_animator.isHuman)\n            {\n                m_humanPoseHandler?.Dispose();\n                m_humanPoseHandler = new HumanPoseHandler(m_animator.avatar, m_animator.transform);\n                m_humanPoseHandler.GetHumanPose(ref m_humanPose);\n            }\n\n            AnimatorManager = new AnimatorManager(m_animator);\n\n            AASEmulator.addTopComponentDelegate?.Invoke(this);\n            AASEmulator.runtimeInitializedDelegate?.Invoke(this);\n            m_isInitialized = true;\n\n            SetValuesToDefault();\n            InitializeLipSync();\n        }\n", "        private void SetValuesToDefault()\n        {\n            _viseme = 0;\n            _visemeIdx = 0;\n\n            _gestureLeft = 0f;\n            _gestureLeftIdx = GestureIndex.Neutral;\n\n            _gestureRight = 0f;\n            _gestureRightIdx = GestureIndex.Neutral;\n\n            Grounded = true;\n        }\n", "        private void InitializeLipSync()\n        {\n            // Get jaw bone index\n            if (_jawBoneMuscleIndex == -1)\n                _jawBoneMuscleIndex = Array.FindIndex(HumanTrait.MuscleName, muscle => muscle.Contains(\"Jaw\"));\n\n            if (m_avatar.bodyMesh != null && m_avatar.visemeBlendshapes != null)\n            {\n                // Rough replication of games iffy viseme smoothing... OVRLipSync only wants 1-100!\n                _visemeSmoothing = m_avatar.visemeSmoothing;\n                _visemeSmoothingFactor = Mathf.Clamp(100 - _visemeSmoothing, 1f, 100f) / 100f;\n\n                m_visemeBlendShapeIndicies =\n                    new int[m_avatar.visemeBlendshapes?.Length ?? 0];\n", "                if (m_avatar.visemeBlendshapes == null)\n                    return;\n\n                for (var i = 0; i < m_avatar.visemeBlendshapes.Length; i++)\n                    m_visemeBlendShapeIndicies[i] =\n                        m_avatar.bodyMesh.sharedMesh.GetBlendShapeIndex(m_avatar.visemeBlendshapes[i]);\n            }\n            else\n            {\n                m_visemeBlendShapeIndicies = Array.Empty<int>();\n            }\n        }\n\n        #endregion Initialization\n\n        #region Unity Methods\n", "        private void Update()\n        {\n            if (!m_isInitialized)\n                return;\n\n            Update_EmoteValues_Update();\n            Update_CachedParametersFromAnimator();\n\n            Apply_CoreParameters();\n\n            if (m_shouldRepaintEditor)\n            {\n                OnRequestRepaint?.Invoke();\n                m_shouldRepaintEditor = false;\n            }\n        }\n", "            if (m_shouldRepaintEditor)\n            {\n                OnRequestRepaint?.Invoke();\n                m_shouldRepaintEditor = false;\n            }\n        }\n\n        private void LateUpdate()\n        {\n            if (!m_isInitialized)\n                return;\n\n            Apply_LipSync();\n        }\n\n        // fixedDeltaTime is wack in ChilloutVR... Needs proper handling.\n        // Desktop = 0.02 : OpenXR = 0.02 : OpenVR = Headset Refresh Rate", "            if (!m_isInitialized)\n                return;\n\n            Apply_LipSync();\n        }\n\n        // fixedDeltaTime is wack in ChilloutVR... Needs proper handling.\n        // Desktop = 0.02 : OpenXR = 0.02 : OpenVR = Headset Refresh Rate\n        private void FixedUpdate()\n        {\n            if (!m_isInitialized)\n                return;\n\n            Update_EmoteValues_FixedUpdate();\n        }\n\n        #endregion Unity Methods\n\n        #region Private Methods\n", "        private void FixedUpdate()\n        {\n            if (!m_isInitialized)\n                return;\n\n            Update_EmoteValues_FixedUpdate();\n        }\n\n        #endregion Unity Methods\n\n        #region Private Methods\n", "        private void Apply_LipSync()\n        {\n            if (m_avatar.bodyMesh == null)\n                return;\n\n            float useVisemeLipsync = m_avatar.useVisemeLipsync ? 1f : 0f;\n\n            switch (m_avatar.visemeMode)\n            {\n                case CVRAvatar.CVRAvatarVisemeMode.Visemes:\n                    {", "                        if (_visemeSmoothing != m_avatar.visemeSmoothing)\n                            _visemeSmoothingFactor = Mathf.Clamp(100 - m_avatar.visemeSmoothing, 1f, 100f) / 100f;\n                        _visemeSmoothing = m_avatar.visemeSmoothing;\n\n                        if (m_visemeCurrentBlendShapeWeights == null || m_visemeCurrentBlendShapeWeights.Length != m_visemeBlendShapeIndicies.Length)\n                            m_visemeCurrentBlendShapeWeights = new float[m_visemeBlendShapeIndicies.Length];\n\n                        for (var i = 0; i < m_visemeBlendShapeIndicies.Length; i++)\n                            if (m_visemeBlendShapeIndicies[i] != -1)\n                                m_avatar.bodyMesh.SetBlendShapeWeight(m_visemeBlendShapeIndicies[i],\n                                    m_visemeCurrentBlendShapeWeights[i] = Mathf.Lerp(m_visemeCurrentBlendShapeWeights[i],\n                                        i == _viseme ? 100.0f : 0.0f, _visemeSmoothingFactor) * useVisemeLipsync);\n                        break;\n                    }\n                case CVRAvatar.CVRAvatarVisemeMode.SingleBlendshape:\n                    {", "                            if (m_visemeBlendShapeIndicies[i] != -1)\n                                m_avatar.bodyMesh.SetBlendShapeWeight(m_visemeBlendShapeIndicies[i],\n                                    m_visemeCurrentBlendShapeWeights[i] = Mathf.Lerp(m_visemeCurrentBlendShapeWeights[i],\n                                        i == _viseme ? 100.0f : 0.0f, _visemeSmoothingFactor) * useVisemeLipsync);\n                        break;\n                    }\n                case CVRAvatar.CVRAvatarVisemeMode.SingleBlendshape:\n                    {\n                        if (m_visemeBlendShapeIndicies.Length > 0 && m_visemeBlendShapeIndicies[0] != -1)\n                            m_avatar.bodyMesh.SetBlendShapeWeight(m_visemeBlendShapeIndicies[0],\n                                VisemeLoudness * 100.0f * useVisemeLipsync);\n                        break;\n                    }\n                case CVRAvatar.CVRAvatarVisemeMode.JawBone when m_animator.isHuman:\n                    {\n                        m_humanPoseHandler.GetHumanPose(ref m_humanPose);", "                        if (m_visemeBlendShapeIndicies.Length > 0 && m_visemeBlendShapeIndicies[0] != -1)\n                            m_avatar.bodyMesh.SetBlendShapeWeight(m_visemeBlendShapeIndicies[0],\n                                VisemeLoudness * 100.0f * useVisemeLipsync);\n                        break;\n                    }\n                case CVRAvatar.CVRAvatarVisemeMode.JawBone when m_animator.isHuman:\n                    {\n                        m_humanPoseHandler.GetHumanPose(ref m_humanPose);\n                        if (_jawBoneMuscleIndex < m_humanPose.muscles.Length)\n                        {\n                            m_humanPose.muscles[_jawBoneMuscleIndex] = VisemeLoudness * useVisemeLipsync;\n                            m_humanPoseHandler.SetHumanPose(ref m_humanPose);\n                        }\n                        break;\n                    }\n            }\n        }\n        ", "                        if (_jawBoneMuscleIndex < m_humanPose.muscles.Length)\n                        {\n                            m_humanPose.muscles[_jawBoneMuscleIndex] = VisemeLoudness * useVisemeLipsync;\n                            m_humanPoseHandler.SetHumanPose(ref m_humanPose);\n                        }\n                        break;\n                    }\n            }\n        }\n        \n        private void Update_EmoteValues_Update()\n        {", "        private void Update_EmoteValues_Update()\n        {\n            if (m_emotePlayed)\n            {\n                m_emotePlayed = false;\n                Emote = 0;\n                m_shouldRepaintEditor = true;\n            }\n\n            if (m_emoteCanceled)\n            {\n                m_emoteCanceled = false;\n                CancelEmote = false;\n                m_shouldRepaintEditor = true;\n            }\n\n            var emotePlaying = AnimatorManager.IsEmotePlaying();", "            if (m_emoteCanceled)\n            {\n                m_emoteCanceled = false;\n                CancelEmote = false;\n                m_shouldRepaintEditor = true;\n            }\n\n            var emotePlaying = AnimatorManager.IsEmotePlaying();\n            if (emotePlaying != m_emotePlaying)\n            {\n                m_emotePlaying = emotePlaying;\n                m_shouldRepaintEditor = true;\n            }\n\n            // TODO: Emote should return to 0 after 0.1s\n            m_emotePlayed = Emote != 0;\n            m_emoteCanceled = CancelEmote;\n        }\n", "            if (emotePlaying != m_emotePlaying)\n            {\n                m_emotePlaying = emotePlaying;\n                m_shouldRepaintEditor = true;\n            }\n\n            // TODO: Emote should return to 0 after 0.1s\n            m_emotePlayed = Emote != 0;\n            m_emoteCanceled = CancelEmote;\n        }\n", "        private void Update_EmoteValues_FixedUpdate()\n        {\n            // Cannot play an emote while running\n            if (Movement.magnitude > 0 && m_emotePlaying)\n            {\n                CancelEmote = true;\n                m_shouldRepaintEditor = true;\n            }\n        }\n\n        private void Update_CachedParametersFromAnimator()\n        {\n            // Will not support Animator -> Core Parameter\n            // It is bloat...\n\n            // Additional Parameters", "        private void Update_CachedParametersFromAnimator()\n        {\n            // Will not support Animator -> Core Parameter\n            // It is bloat...\n\n            // Additional Parameters\n            foreach (AnimatorManager.BaseParam baseParam in AnimatorManager.Parameters.Values)\n            {\n                switch (baseParam)\n                {\n                    case AnimatorManager.FloatParam floatParam when floatParam.value != m_animator.GetFloat(baseParam.name):\n                        floatParam.value = m_animator.GetFloat(baseParam.name);\n                        m_shouldRepaintEditor = true;\n                        break;\n\n                    case AnimatorManager.IntParam intParam when intParam.value != m_animator.GetInteger(baseParam.name):\n                        intParam.value = m_animator.GetInteger(baseParam.name);\n                        m_shouldRepaintEditor = true;\n                        break;\n\n                    case AnimatorManager.BoolParam boolParam when boolParam.value != m_animator.GetBool(baseParam.name):\n                        boolParam.value = m_animator.GetBool(baseParam.name);\n                        m_shouldRepaintEditor = true;\n                        break;\n\n                    case AnimatorManager.TriggerParam triggerParam when triggerParam.value != m_animator.GetBool(baseParam.name):\n                        triggerParam.value = m_animator.GetBool(baseParam.name);\n                        m_shouldRepaintEditor = true;\n                        break;\n                }\n            }\n        }\n\n        // TODO: Rework this so multiple streams of input can set Core Parameters!", "        private void Apply_CoreParameters()\n        {\n            AnimatorManager.SetCoreParameter(\"GestureLeft\", _gestureLeft);\n            AnimatorManager.SetCoreParameter(\"GestureRight\", _gestureRight);\n            AnimatorManager.SetCoreParameter(\"Grounded\", Grounded);\n            AnimatorManager.SetCoreParameter(\"Crouching\", Crouching);\n            AnimatorManager.SetCoreParameter(\"Prone\", Prone);\n            AnimatorManager.SetCoreParameter(\"Flying\", Flying);\n            AnimatorManager.SetCoreParameter(\"Sitting\", Sitting);\n            AnimatorManager.SetCoreParameter(\"MovementX\", _movement.x);\n            AnimatorManager.SetCoreParameter(\"MovementY\", _movement.y);\n            AnimatorManager.SetCoreParameter(\"Emote\", _emote);\n            AnimatorManager.SetCoreParameter(\"Toggle\", _toggle);\n\n            AnimatorManager.SetLayerWeight(AnimatorManager.HAND_LEFT_LAYER_NAME, m_emotePlaying ? 0f : 1f);\n            AnimatorManager.SetLayerWeight(AnimatorManager.HAND_RIGHT_LAYER_NAME, m_emotePlaying ? 0f : 1f);\n", "            if (CancelEmote)\n            {\n                CancelEmote = false;\n                AnimatorManager.SetCoreParameter(\"CancelEmote\", null);\n            }\n        }\n\n        #endregion Private Methods\n    }\n}"]}
{"filename": "Runtime/Scripts/AASMenu.cs", "chunked_list": ["using ABI.CCK.Scripts;\nusing NAK.AASEmulator.Runtime.SubSystems;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing static ABI.CCK.Scripts.CVRAdvancedSettingsEntry;\n\nnamespace NAK.AASEmulator.Runtime\n{\n    [AddComponentMenu(\"\")]\n    public class AASMenu : EditorOnlyMonoBehaviour\n    {\n        #region Static Initialization\n\n        [RuntimeInitializeOnLoadMethod]", "    [AddComponentMenu(\"\")]\n    public class AASMenu : EditorOnlyMonoBehaviour\n    {\n        #region Static Initialization\n\n        [RuntimeInitializeOnLoadMethod]\n        private static void Initialize()\n        {\n            AASEmulator.runtimeInitializedDelegate = runtime =>\n            {\n                if (AASEmulator.Instance != null && !AASEmulator.Instance.EmulateAASMenu)\n                    return;\n\n                AASMenu menu = runtime.gameObject.AddComponent<AASMenu>();\n                menu.isInitializedExternally = true;\n                menu.runtime = runtime;\n                AASEmulator.addTopComponentDelegate?.Invoke(menu);\n            };\n        }\n\n        #endregion Static Initialization\n\n        #region Variables\n\n        public List<AASMenuEntry> entries = new List<AASMenuEntry>();", "                if (AASEmulator.Instance != null && !AASEmulator.Instance.EmulateAASMenu)\n                    return;\n\n                AASMenu menu = runtime.gameObject.AddComponent<AASMenu>();\n                menu.isInitializedExternally = true;\n                menu.runtime = runtime;\n                AASEmulator.addTopComponentDelegate?.Invoke(menu);\n            };\n        }\n\n        #endregion Static Initialization\n\n        #region Variables\n\n        public List<AASMenuEntry> entries = new List<AASMenuEntry>();", "        public AnimatorManager AnimatorManager => runtime.AnimatorManager;\n        private AASEmulatorRuntime runtime;\n\n        #endregion Variables\n\n        #region Menu Setup\n\n        private void Start() => SetupAASMenus();\n\n        private void SetupAASMenus()\n        {\n            entries.Clear();\n", "        private void SetupAASMenus()\n        {\n            entries.Clear();\n\n            if (runtime == null)\n            {\n                SimpleLogger.LogError(\"Unable to setup AAS Menus: AASEmulatorRuntime is missing\", this);\n                return;\n            }\n\n            if (runtime.m_avatar == null)\n            {\n                SimpleLogger.LogError(\"Unable to setup AAS Menus: CVRAvatar is missing\", this);\n                return;\n            }\n", "            if (runtime.m_avatar == null)\n            {\n                SimpleLogger.LogError(\"Unable to setup AAS Menus: CVRAvatar is missing\", this);\n                return;\n            }\n\n            if (runtime.m_avatar.avatarSettings?.settings == null)\n            {\n                SimpleLogger.LogError(\"Unable to setup AAS Menus: AvatarAdvancedSettings is missing\", this);\n                return;\n            }\n\n            var avatarSettings = runtime.m_avatar.avatarSettings.settings;\n", "            foreach (CVRAdvancedSettingsEntry setting in avatarSettings)\n            {\n                string[] postfixes;\n                switch (setting.type)\n                {\n                    case SettingsType.Joystick2D:\n                    case SettingsType.InputVector2:\n                        postfixes = new[] { \"-x\", \"-y\" };\n                        break;\n\n                    case SettingsType.Joystick3D:\n                    case SettingsType.InputVector3:\n                        postfixes = new[] { \"-x\", \"-y\", \"-z\" };\n                        break;\n\n                    case SettingsType.MaterialColor:\n                        postfixes = new[] { \"-r\", \"-g\", \"-b\" };\n                        break;\n\n                    case SettingsType.GameObjectDropdown:\n                    case SettingsType.GameObjectToggle:\n                    case SettingsType.Slider:\n                    case SettingsType.InputSingle:\n                    default:\n                        postfixes = new[] { \"\" };\n                        break;\n                }\n\n                AASMenuEntry menuEntry = new AASMenuEntry\n                {\n                    menuName = setting.name,\n                    machineName = setting.machineName,\n                    settingType = setting.type,\n                };\n", "                if (setting.setting is CVRAdvancesAvatarSettingGameObjectDropdown dropdown)\n                    menuEntry.menuOptions = dropdown.getOptionsList();\n\n                for (int i = 0; i < postfixes.Length; i++)\n                {\n                    if (AnimatorManager.Parameters.TryGetValue(setting.machineName + postfixes[i],\n                            out AnimatorManager.BaseParam param))\n                    {\n                        float value;\n                        switch (param)\n                        {\n                            case AnimatorManager.FloatParam floatParam:\n                                value = floatParam.defaultValue;\n                                break;\n\n                            case AnimatorManager.IntParam intParam:\n                                value = intParam.defaultValue;\n                                break;\n\n                            case AnimatorManager.BoolParam boolParam:\n                                value = boolParam.defaultValue ? 1f : 0f;\n                                break;\n\n                            default:\n                                value = 0f;\n                                break;\n                        }\n\n                        switch (i)\n                        {\n                            case 0:\n                                menuEntry.valueX = value;\n                                break;\n\n                            case 1:\n                                menuEntry.valueY = value;\n                                break;\n\n                            case 2:\n                                menuEntry.valueZ = value;\n                                break;\n                        }\n                    }\n                }\n\n                entries.Add(menuEntry);\n            }\n\n            SimpleLogger.Log($\"Successfully created {entries.Count} menu entries for {runtime.m_avatar.name}!\", this);\n        }\n\n        #endregion Menu Setup\n\n        #region Menu Entry Class\n", "        public class AASMenuEntry\n        {\n            public string menuName;\n            public string machineName;\n            public SettingsType settingType;\n            public float valueX, valueY, valueZ;\n            public string[] menuOptions;\n        }\n\n        #endregion Menu Entry Class\n    }\n}"]}
{"filename": "Runtime/Scripts/AASEmulator.cs", "chunked_list": ["\ufeffusing ABI.CCK.Components;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace NAK.AASEmulator.Runtime\n{\n    public class AASEmulator : MonoBehaviour\n    {\n        #region Support Delegates\n", "    public class AASEmulator : MonoBehaviour\n    {\n        #region Support Delegates\n\n        public delegate void AddTopComponent(Component component);\n\n        public static AddTopComponent addTopComponentDelegate;\n\n        public delegate void RuntimeInitialized(AASEmulatorRuntime runtime);\n\n        public static RuntimeInitialized runtimeInitializedDelegate;\n\n        #endregion Support Delegates\n", "        public delegate void RuntimeInitialized(AASEmulatorRuntime runtime);\n\n        public static RuntimeInitialized runtimeInitializedDelegate;\n\n        #endregion Support Delegates\n\n        public static AASEmulator Instance;\n        private readonly List<AASEmulatorRuntime> m_runtimes = new List<AASEmulatorRuntime>();\n        private readonly HashSet<CVRAvatar> m_scannedAvatars = new HashSet<CVRAvatar>();\n\n        public bool OnlyInitializeOnSelect = false;", "        private readonly HashSet<CVRAvatar> m_scannedAvatars = new HashSet<CVRAvatar>();\n\n        public bool OnlyInitializeOnSelect = false;\n        public bool EmulateAASMenu = false;\n\n        [HideInInspector]\n        public RuntimeAnimatorController defaultRuntimeController;\n        private string controllerGUID = \"ff926e022d914b84e8975ba6188a26f0\";\n        private string controllerPath = \"Assets/ABI.CCK/Animations/AvatarAnimator.controller\";\n        \n        #region Unity Methods\n", "        private string controllerPath = \"Assets/ABI.CCK/Animations/AvatarAnimator.controller\";\n        \n        #region Unity Methods\n\n        private void Start()\n        {\n            if (Instance != null)\n            {\n                DestroyImmediate(this);\n                return;\n            }\n\n            Instance = this;\n\n            LoadDefaultCCKController();\n            StartEmulator();\n        }\n", "        private void OnDestroy()\n        {\n            StopEmulator();\n        }\n\n        #endregion Unity Methods\n\n        #region Public Methods\n\n        public void StartEmulator()\n        {\n            SceneManager.sceneLoaded -= OnSceneLoaded;\n            SceneManager.sceneLoaded += OnSceneLoaded;\n            ScanForAvatars(gameObject.scene);\n        }\n", "        public void StartEmulator()\n        {\n            SceneManager.sceneLoaded -= OnSceneLoaded;\n            SceneManager.sceneLoaded += OnSceneLoaded;\n            ScanForAvatars(gameObject.scene);\n        }\n\n        public void StopEmulator()\n        {\n            foreach (AASEmulatorRuntime runtime in m_runtimes)\n                Destroy(runtime);\n\n            m_runtimes.Clear();\n            m_scannedAvatars.Clear();\n            SceneManager.sceneLoaded -= OnSceneLoaded;\n        }\n\n        #endregion Public Methods\n\n        #region Private Methods\n", "            foreach (AASEmulatorRuntime runtime in m_runtimes)\n                Destroy(runtime);\n\n            m_runtimes.Clear();\n            m_scannedAvatars.Clear();\n            SceneManager.sceneLoaded -= OnSceneLoaded;\n        }\n\n        #endregion Public Methods\n\n        #region Private Methods\n", "        private void LoadDefaultCCKController()\n        {\n#if UNITY_EDITOR\n            string path = UnityEditor.AssetDatabase.GUIDToAssetPath(controllerGUID);\n            Object controllerObject = UnityEditor.AssetDatabase.LoadAssetAtPath<Object>(path) \n                ?? UnityEditor.AssetDatabase.LoadAssetAtPath<Object>(controllerPath);\n            \n            defaultRuntimeController = controllerObject as RuntimeAnimatorController;\n#endif\n            if (defaultRuntimeController == null)\n                SimpleLogger.LogError(\"Failed to load default avatar controller. Did you move the ABI.CCK folder?\", gameObject);\n        }\n", "            if (defaultRuntimeController == null)\n                SimpleLogger.LogError(\"Failed to load default avatar controller. Did you move the ABI.CCK folder?\", gameObject);\n        }\n\n        private void ScanForAvatars(Scene scene)\n        {\n            var newAvatars = scene.GetRootGameObjects()\n                .SelectMany(x => x.GetComponentsInChildren<CVRAvatar>(true))\n                .Where(avatar => !m_scannedAvatars.Contains(avatar))\n                .ToList();\n", "            foreach (CVRAvatar avatar in newAvatars)\n            {\n                if (avatar.GetComponent<AASEmulatorRuntime>() == null)\n                {\n                    var runtime = avatar.gameObject.AddComponent<AASEmulatorRuntime>();\n                    runtime.isInitializedExternally = true;\n                    m_runtimes.Add(runtime);\n                }\n                m_scannedAvatars.Add(avatar);\n            }\n            ", "            if (newAvatars.Count > 0)\n                SimpleLogger.Log(\"Setting up AASEmulator on \" + newAvatars.Count + \" new avatars.\", gameObject);\n        }\n\n        private void OnSceneLoaded(Scene scene, LoadSceneMode mode) => ScanForAvatars(scene);\n\n        #endregion Private Methods\n    }\n}"]}
{"filename": "Runtime/Scripts/Helpers/EditorOnlyMonoBehaviour.cs", "chunked_list": ["\ufeffusing UnityEngine;\n\nnamespace NAK.AASEmulator.Runtime\n{\n    [AddComponentMenu(\"\")] // Hide from Inspector search\n    public class EditorOnlyMonoBehaviour : MonoBehaviour\n    {\n        [HideInInspector]\n        public bool isInitializedExternally = false;\n\n        // Created via Inspector in Edit Mode\n        internal virtual void Reset() => SetHideFlags();\n        \n        // Created via script in Play Mode\n        internal virtual void Awake() => SetHideFlags();\n\n        // Prevent from being saved to prefab or scene", "        public bool isInitializedExternally = false;\n\n        // Created via Inspector in Edit Mode\n        internal virtual void Reset() => SetHideFlags();\n        \n        // Created via script in Play Mode\n        internal virtual void Awake() => SetHideFlags();\n\n        // Prevent from being saved to prefab or scene\n        private void SetHideFlags()\n        {\n#if UNITY_EDITOR", "        private void SetHideFlags()\n        {\n#if UNITY_EDITOR\n            if ((this.hideFlags & HideFlags.DontSaveInEditor) != HideFlags.DontSaveInEditor)\n                this.hideFlags |= HideFlags.DontSaveInEditor;\n#endif\n        }\n    }\n}"]}
{"filename": "Runtime/Scripts/Helpers/SimpleLogger.cs", "chunked_list": ["\ufeffusing UnityEngine;\n\nnamespace NAK.AASEmulator.Runtime\n{\n    public static class SimpleLogger\n    {\n        // NOTE: Pass gameobject instead of component, as context is lost if component is removed.\n\n        private const string projectName = nameof(AASEmulator);\n        private const string messageColor = \"orange\";\n", "        private const string projectName = nameof(AASEmulator);\n        private const string messageColor = \"orange\";\n\n        public static void Log(string message, Object context = null)\n        {\n            Debug.Log($\"<color={messageColor}>[{projectName}]</color> : {message}\", context);\n        }\n\n        public static void LogWarning(string message, Object context = null)\n        {\n            Debug.LogWarning($\"<color={messageColor}>[{projectName}]</color> : {message}\", context);\n        }\n", "        public static void LogWarning(string message, Object context = null)\n        {\n            Debug.LogWarning($\"<color={messageColor}>[{projectName}]</color> : {message}\", context);\n        }\n\n        public static void LogError(string message, Object context = null)\n        {\n            Debug.LogError($\"<color={messageColor}>[{projectName}]</color> : {message}\", context);\n        }\n    }\n}"]}
{"filename": "Runtime/Scripts/SubSystems/AnimatorManager.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace NAK.AASEmulator.Runtime.SubSystems\n{\n    public class AnimatorManager\n    {\n        #region CVR_DEFAULT_CONSTANTS\n", "        public const string LOCAL_PARAMETER_PREFIX = \"#\";\n\n        public const string LOCOMOTION_EMOTES_LAYER_NAME = \"Locomotion/Emotes\";\n        public const string HAND_LEFT_LAYER_NAME = \"LeftHand\";\n        public const string HAND_RIGHT_LAYER_NAME = \"RightHand\";\n        public const string TOGGLES_LAYER_NAME = \"Toggles\";\n\n        public static Dictionary<string, AnimatorControllerParameterType> CVR_DEFAULT_PARAMETERS = new Dictionary<string, AnimatorControllerParameterType>\n        {\n            // Floats\n            { \"GestureLeft\", AnimatorControllerParameterType.Float },\n            { \"GestureRight\", AnimatorControllerParameterType.Float },\n            { \"MovementX\", AnimatorControllerParameterType.Float },\n            { \"MovementY\", AnimatorControllerParameterType.Float },\n            { \"Toggle\", AnimatorControllerParameterType.Float },\n            { \"Emote\", AnimatorControllerParameterType.Float },\n            // Bools\n            { \"Grounded\", AnimatorControllerParameterType.Bool },\n            { \"Crouching\", AnimatorControllerParameterType.Bool },\n            { \"Prone\", AnimatorControllerParameterType.Bool },\n            { \"Sitting\", AnimatorControllerParameterType.Bool },\n            { \"Flying\", AnimatorControllerParameterType.Bool },\n            // Triggers\n            { \"CancelEmote\", AnimatorControllerParameterType.Trigger },\n        };\n\n        #endregion CVR_DEFAULT_CONSTANTS\n\n        #region Parameter Definitions\n\n        [Serializable]", "        public class CoreParam\n        {\n            public string name;\n            public AnimatorControllerParameterType type;\n            public int nameHash;\n            public bool hasParameter;\n\n            // TODO: dont be lazy?\n            public float valueFloat;\n\n            public int valueInt;", "            public float valueFloat;\n\n            public int valueInt;\n            public bool valueBool;\n\n            public CoreParam(string name, AnimatorControllerParameterType type, bool hasParameter)\n            {\n                this.name = name;\n                this.type = type;\n                this.hasParameter = hasParameter;\n                this.nameHash = Animator.StringToHash(name);\n            }\n        }\n\n        [Serializable]", "        public abstract class BaseParam\n        {\n            public string name;\n            public int nameHash;\n            public bool isLocal;\n            public bool isControlledByCurve;\n\n            protected BaseParam(string name, int nameHash, bool isLocal, bool isControlledByCurve)\n            {\n                this.name = name;\n                this.nameHash = nameHash;\n                this.isLocal = isLocal;\n                this.isControlledByCurve = isControlledByCurve;\n            }\n        }\n\n        [Serializable]", "        public class FloatParam : BaseParam\n        {\n            public float value;\n            public float defaultValue;\n\n            public FloatParam(string name, int nameHash, bool isLocal, bool isControlledByCurve, float value)\n                : base(name, nameHash, isLocal, isControlledByCurve)\n            {\n                this.value = value;\n                this.defaultValue = value;\n            }\n        }\n\n        [Serializable]", "        public class IntParam : BaseParam\n        {\n            public int value;\n            public int defaultValue;\n\n            public IntParam(string name, int nameHash, bool isLocal, bool isControlledByCurve, int value)\n                : base(name, nameHash, isLocal, isControlledByCurve)\n            {\n                this.value = value;\n                this.defaultValue = value;\n            }\n        }\n\n        [Serializable]", "        public class BoolParam : BaseParam\n        {\n            public bool value;\n            public bool defaultValue;\n\n            public BoolParam(string name, int nameHash, bool isLocal, bool isControlledByCurve, bool value)\n                : base(name, nameHash, isLocal, isControlledByCurve)\n            {\n                this.value = value;\n                this.defaultValue = value;\n            }\n        }\n\n        [Serializable]", "        public class TriggerParam : BaseParam\n        {\n            public bool value;\n            public bool defaultValue;\n\n            public TriggerParam(string name, int nameHash, bool isLocal, bool isControlledByCurve, bool value)\n                : base(name, nameHash, isLocal, isControlledByCurve)\n            {\n                this.value = value;\n                this.defaultValue = value;\n            }\n        }\n\n        #endregion Parameter Definitions\n\n        #region Animator Info\n", "        public Animator animator;\n\n        public readonly Dictionary<string, CoreParam> CoreParameters = new Dictionary<string, CoreParam>();\n\n        // TODO: Figure this shit out\n        public readonly Dictionary<string, BaseParam> Parameters = new Dictionary<string, BaseParam>();\n\n        // Temp- only used for GUI\n        public readonly List<FloatParam> FloatParameters = new List<FloatParam>();\n\n        public readonly List<IntParam> IntParameters = new List<IntParam>();", "        public readonly List<FloatParam> FloatParameters = new List<FloatParam>();\n\n        public readonly List<IntParam> IntParameters = new List<IntParam>();\n        public readonly List<BoolParam> BoolParameters = new List<BoolParam>();\n        public readonly List<TriggerParam> TriggerParameters = new List<TriggerParam>();\n\n        public readonly Dictionary<string, int> LayerIndices = new Dictionary<string, int>();\n\n        private int _locomotionEmotesLayerIdx = -1;\n        private int _gestureLeftLayerIdx = -1;\n        private int _gestureRightLayerIdx = -1;", "        private int _locomotionEmotesLayerIdx = -1;\n        private int _gestureLeftLayerIdx = -1;\n        private int _gestureRightLayerIdx = -1;\n        private int _toggleLayerIdx = -1;\n\n        #endregion Animator Info\n\n        public AnimatorManager(Animator animator)\n        {\n            this.animator = animator;\n            AnalyzeAnimator();\n        }\n\n        #region Public Methods\n", "        public void SetLayerWeight(string layerName, float weight)\n        {\n            if (string.IsNullOrEmpty(layerName))\n                return;\n\n            if (!LayerIndices.TryGetValue(layerName, out var layerIndex))\n                return;\n\n            animator.SetLayerWeight(layerIndex, weight);\n        }\n", "        public bool SetParameter(string name, object value)\n        {\n            if (string.IsNullOrEmpty(name))\n                return false;\n\n            if (!Parameters.TryGetValue(name, out BaseParam param))\n                return false;\n\n            switch (param)\n            {\n                case BoolParam boolParam:\n                    boolParam.value = Convert.ToBoolean(value);\n                    animator.SetBool(name, boolParam.value);\n                    break;\n\n                case IntParam intParam:\n                    intParam.value = Convert.ToInt32(value);\n                    animator.SetInteger(name, intParam.value);\n                    break;\n\n                case FloatParam floatParam:\n                    floatParam.value = Convert.ToSingle(value);\n                    animator.SetFloat(name, floatParam.value);\n                    break;\n\n                case TriggerParam triggerParam:\n                    animator.SetTrigger(name);\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        }\n", "        public bool SetCoreParameter(string name, object value)\n        {\n            if (string.IsNullOrEmpty(name))\n                return false;\n\n            if (!CoreParameters.TryGetValue(name, out CoreParam param))\n                return false;\n\n            switch (param.type)\n            {\n                case AnimatorControllerParameterType.Bool:\n                    param.valueBool = Convert.ToBoolean(value);", "                    if (param.hasParameter)\n                        animator.SetBool(param.nameHash, param.valueBool);\n                    break;\n\n                case AnimatorControllerParameterType.Int:\n                    param.valueInt = Convert.ToInt32(value);\n                    if (param.hasParameter)\n                        animator.SetInteger(param.nameHash, param.valueInt);\n                    break;\n\n                case AnimatorControllerParameterType.Float:\n                    param.valueFloat = Convert.ToSingle(value);", "                    if (param.hasParameter)\n                        animator.SetFloat(param.nameHash, param.valueFloat);\n                    break;\n\n                case AnimatorControllerParameterType.Trigger:\n                    param.valueBool = Convert.ToBoolean(value);\n                    if (param.hasParameter)\n                        animator.SetTrigger(param.nameHash); // TODO: uhhh x2\n                    break;\n\n                default:\n                    return false;\n            }\n\n            return true;\n        }\n", "        public object GetParameter(string name)\n        {\n            if (string.IsNullOrEmpty(name))\n                return null;\n\n            if (!Parameters.TryGetValue(name, out BaseParam param))\n                return null;\n\n            switch (param)\n            {\n                case BoolParam boolParam:\n                    return boolParam.value;\n\n                case IntParam intParam:\n                    return intParam.value;\n\n                case FloatParam floatParam:\n                    return floatParam.value;\n\n                case TriggerParam triggerParam:\n                    return triggerParam.value; // UH\n\n                default:\n                    return null;\n            }\n        }\n", "        public object GetParameterFromAnimator(string name)\n        {\n            if (string.IsNullOrEmpty(name))\n                return null;\n\n            if (!Parameters.TryGetValue(name, out BaseParam param))\n                return null;\n\n            switch (param)\n            {\n                case TriggerParam triggerParam:\n                case BoolParam boolParam:\n                    return animator.GetBool(param.nameHash);\n\n                case IntParam intParam:\n                    return animator.GetInteger(param.nameHash);\n\n                case FloatParam floatParam:\n                    return animator.GetFloat(param.nameHash);\n\n                default:\n                    return null;\n            }\n        }\n", "        public object GetCoreParameter(string name)\n        {\n            if (string.IsNullOrEmpty(name))\n                return null;\n\n            if (!CoreParameters.TryGetValue(name, out CoreParam param))\n                return null;\n\n            //if (!param.hasParameter)\n            //    return null;\n\n            switch (param.type)\n            {\n                case AnimatorControllerParameterType.Bool:\n                    return param.valueBool;\n\n                case AnimatorControllerParameterType.Int:\n                    return param.valueInt;\n\n                case AnimatorControllerParameterType.Float:\n                    return param.valueFloat;\n\n                case AnimatorControllerParameterType.Trigger:\n                    return param.valueBool; // TODO: uhhhh\n                default:\n                    return null;\n            }\n        }\n", "            //if (!param.hasParameter)\n            //    return null;\n\n            switch (param.type)\n            {\n                case AnimatorControllerParameterType.Bool:\n                    return param.valueBool;\n\n                case AnimatorControllerParameterType.Int:\n                    return param.valueInt;\n\n                case AnimatorControllerParameterType.Float:\n                    return param.valueFloat;\n\n                case AnimatorControllerParameterType.Trigger:\n                    return param.valueBool; // TODO: uhhhh\n                default:\n                    return null;\n            }\n        }\n", "        public object GetCoreParameterFromAnimator(string name)\n        {\n            if (string.IsNullOrEmpty(name))\n                return null;\n\n            if (!CoreParameters.TryGetValue(name, out CoreParam param))\n                return null;\n\n            if (!param.hasParameter)\n                return null;\n\n            switch (param.type)\n            {\n                case AnimatorControllerParameterType.Bool:\n                    return animator.GetBool(param.nameHash);\n\n                case AnimatorControllerParameterType.Int:\n                    return animator.GetInteger(param.nameHash);\n\n                case AnimatorControllerParameterType.Float:\n                    return animator.GetFloat(param.nameHash);\n\n                case AnimatorControllerParameterType.Trigger:\n                    return animator.GetBool(param.nameHash);\n\n                default:\n                    return null;\n            }\n        }\n", "            if (!param.hasParameter)\n                return null;\n\n            switch (param.type)\n            {\n                case AnimatorControllerParameterType.Bool:\n                    return animator.GetBool(param.nameHash);\n\n                case AnimatorControllerParameterType.Int:\n                    return animator.GetInteger(param.nameHash);\n\n                case AnimatorControllerParameterType.Float:\n                    return animator.GetFloat(param.nameHash);\n\n                case AnimatorControllerParameterType.Trigger:\n                    return animator.GetBool(param.nameHash);\n\n                default:\n                    return null;\n            }\n        }\n", "        public bool IsEmotePlaying()\n        {\n            if (_locomotionEmotesLayerIdx != -1)\n            {\n                var clipInfo = animator.GetCurrentAnimatorClipInfo(_locomotionEmotesLayerIdx);\n                return clipInfo.Any(clip => clip.clip.name.Contains(\"Emote\"));\n            }\n\n            return false;\n        }\n\n        #endregion Public Methods\n\n        #region Private Methods\n", "        private void AnalyzeAnimator()\n        {\n            if (animator == null)\n                return;\n\n            if (animator.runtimeAnimatorController == null)\n            {\n                Debug.Log(\"No runtime animator controller found.\");\n                return;\n            }\n\n            int layerCount = animator.layerCount;", "            for (int i = 0; i < layerCount; i++)\n            {\n                string layerName = animator.GetLayerName(i);\n                LayerIndices[layerName] = i;\n            }\n\n            // Check for default CVR layers\n            _locomotionEmotesLayerIdx = animator.GetLayerIndex(LOCOMOTION_EMOTES_LAYER_NAME);\n            _gestureLeftLayerIdx = animator.GetLayerIndex(HAND_LEFT_LAYER_NAME);\n            _gestureRightLayerIdx = animator.GetLayerIndex(HAND_RIGHT_LAYER_NAME);\n            _toggleLayerIdx = animator.GetLayerIndex(TOGGLES_LAYER_NAME);\n\n            AnimatorControllerParameter[] parameters = animator.parameters;\n\n            Parameters.Clear();\n            CoreParameters.Clear();", "            foreach (var parameter in CVR_DEFAULT_PARAMETERS)\n                CoreParameters[parameter.Key] = new CoreParam(parameter.Key, parameter.Value, false);\n\n            foreach (AnimatorControllerParameter param in parameters)\n            {\n                string paramName = param.name;\n                bool isLocal = paramName.StartsWith(LOCAL_PARAMETER_PREFIX);\n                bool isControlledByCurve = animator.IsParameterControlledByCurve(paramName);\n\n                // Core Parameters sadly do not support type-mismatch...\n                if (CoreParameters.TryGetValue(paramName, out CoreParam coreParam))\n                {", "                if (CoreParameters.TryGetValue(paramName, out CoreParam coreParam))\n                {\n                    if (coreParam.type == param.type)\n                        coreParam.hasParameter = true;\n                    continue;\n                }\n\n                switch (param.type)\n                {\n                    case AnimatorControllerParameterType.Bool:\n                        BoolParam boolParam = new BoolParam(paramName, param.nameHash, isLocal, isControlledByCurve, param.defaultBool);\n                        Parameters[paramName] = boolParam;\n                        BoolParameters.Add(boolParam);\n                        break;\n\n                    case AnimatorControllerParameterType.Int:\n                        IntParam intParam = new IntParam(paramName, param.nameHash, isLocal, isControlledByCurve, param.defaultInt);\n                        Parameters[paramName] = intParam;\n                        IntParameters.Add(intParam);\n                        break;\n\n                    case AnimatorControllerParameterType.Float:\n                        FloatParam floatParam = new FloatParam(paramName, param.nameHash, isLocal, isControlledByCurve, param.defaultFloat);\n                        Parameters[paramName] = floatParam;\n                        FloatParameters.Add(floatParam);\n                        break;\n\n                    case AnimatorControllerParameterType.Trigger:\n                        TriggerParam triggerParam = new TriggerParam(paramName, param.nameHash, isLocal, isControlledByCurve, param.defaultBool);\n                        Parameters[paramName] = triggerParam;\n                        TriggerParameters.Add(triggerParam);\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n        }\n\n        #endregion Private Methods\n    }\n}"]}
