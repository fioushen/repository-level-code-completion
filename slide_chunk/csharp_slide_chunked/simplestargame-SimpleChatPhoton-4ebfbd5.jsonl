{"filename": "Assets/SimplestarGame/Network/Scripts/Runner/NetworkGameManager.cs", "chunked_list": ["using Fusion;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace SimplestarGame\n{\n    [RequireComponent(typeof(NetworkRunner))]\n    public class NetworkGameManager : SimulationBehaviour, IPlayerJoined, IPlayerLeft\n    {\n        [SerializeField] NetworkGame networkGame;\n        [SerializeField] NetworkPlayer networkPlayer;\n\n        Dictionary<PlayerRef, NetworkPlayer> NetworkPlayers { get; set; } = new Dictionary<PlayerRef, NetworkPlayer>(200);\n\n        void IPlayerJoined.PlayerJoined(PlayerRef playerRef)\n        {", "            if (!Runner.IsServer)\n            {\n                return;\n            }\n            if (0 == FindObjectsOfType<NetworkGame>().Length)\n            {\n                Runner.Spawn(this.networkGame);\n            }\n            var networkPlayer = Runner.Spawn(this.networkPlayer, inputAuthority: playerRef);\n            this.NetworkPlayers.Add(playerRef, networkPlayer);\n            Runner.SetPlayerObject(playerRef, networkPlayer.Object);\n        }\n\n        void IPlayerLeft.PlayerLeft(PlayerRef playerRef)\n        {", "            if (!Runner.IsServer)\n            {\n                return;\n            }\n            if (this.NetworkPlayers.TryGetValue(playerRef, out NetworkPlayer player))\n            {\n                Runner.Despawn(player.Object);\n            }\n        }\n    }\n}\n"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Runner/Game/NetworkGame.cs", "chunked_list": ["using Fusion;\nusing System;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace SimplestarGame\n{\n    public class NetworkGame : NetworkBehaviour\n    {\n        [SerializeField] Vector3[] spawnPoints;\n        [SerializeField] Color[] playerColors;\n\n        [SerializeField] PlayerAgent agentPrefab;\n        [Networked] int TotalPlayerCount { get; set; }\n", "        public void Join(NetworkPlayer player)\n        {\n            if (!HasStateAuthority)\n            {\n                return;\n            }\n            var playerRef = player.Object.InputAuthority;\n\n            int token = new Guid(Runner.GetPlayerConnectionToken(playerRef)).GetHashCode();\n            var agentList = FindObjectsOfType<PlayerAgent>();\n            var sceneAgent = agentList.FirstOrDefault(agent => agent.Token == token);", "            if (sceneAgent != null)\n            {\n                sceneAgent.Object.AssignInputAuthority(playerRef);\n                player.ActiveAgent = sceneAgent;\n            }\n            else\n            {\n                this.SpawnPlayerAgent(player, token);\n            }\n        }\n", "        public void Leave(NetworkPlayer player)\n        {\n            if (!HasStateAuthority)\n            {\n                return;\n            }\n            this.DespawnPlayerAgent(player);\n        }\n\n        public override void Spawned()\n        {\n            this.name = \"[Network]Game\";\n            SceneContext.Instance.Game = this;", "        public override void Spawned()\n        {\n            this.name = \"[Network]Game\";\n            SceneContext.Instance.Game = this;\n            if (SceneContext.Instance.PlayerInput != null)\n            {\n                Runner.AddCallbacks(SceneContext.Instance.PlayerInput);\n            }\n            if (SceneContext.Instance.hostClientText != null)\n            {\n                SceneContext.Instance.hostClientText.text = HasStateAuthority ? \"Host\" : \"Client\";\n            }\n        }\n", "            if (SceneContext.Instance.hostClientText != null)\n            {\n                SceneContext.Instance.hostClientText.text = HasStateAuthority ? \"Host\" : \"Client\";\n            }\n        }\n\n        public override void Despawned(NetworkRunner runner, bool hasState)\n        {\n            SceneContext.Instance.Game = null;\n        }\n\n        void SpawnPlayerAgent(NetworkPlayer player, int token)\n        {\n            this.DespawnPlayerAgent(player);\n            int pointIndex = this.TotalPlayerCount % this.spawnPoints.Length;\n            int colorIndex = this.TotalPlayerCount % this.playerColors.Length;\n            player.ActiveAgent = Runner.Spawn(this.agentPrefab, this.spawnPoints[pointIndex], Quaternion.identity, \n                inputAuthority: player.Object.InputAuthority, onBeforeSpawned: (runner, newNO) =>\n            {", "                if (newNO.TryGetBehaviour(out PlayerAgent agent))\n                {\n                    agent.SetPlayerColor(this.playerColors[colorIndex]);\n                    agent.Token = token;\n                    this.TotalPlayerCount++;\n                }\n            });\n        }\n\n        void DespawnPlayerAgent(NetworkPlayer player)\n        {", "            if (player.ActiveAgent != null)\n            {\n                Runner.Despawn(player.ActiveAgent.Object);\n                player.ActiveAgent = null;\n            }\n        }\n    }\n}\n"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Runner/Player/PlayerAgent.cs", "chunked_list": ["\ufeffusing Fusion;\nusing UnityEngine;\n\nnamespace SimplestarGame\n{\n    public class PlayerAgent : NetworkBehaviour\n    {\n        [SerializeField] TMPro.TextMeshPro textMeshPro;\n\n        [Networked] internal int Token { get; set; }\n        [Networked(OnChanged = nameof(OnChangedMessage), OnChangedTargets = OnChangedTargets.Proxies)] NetworkString<_64> Message { get; set; }\n        [Networked(OnChanged = nameof(OnChangedColor), OnChangedTargets = OnChangedTargets.All)] Color Color { get; set; }\n\n        [Rpc(sources: RpcSources.InputAuthority, targets: RpcTargets.StateAuthority)]", "        public void RPC_SendMessage(string message)\n        {\n            if (this.textMeshPro != null)\n            {\n                this.textMeshPro.text = message;\n            }\n            this.Message = message;\n        }\n\n        public static void OnChangedMessage(Changed<PlayerAgent> changed)\n        {\n            changed.Behaviour.ChangeMessage();\n        }\n\n        void ChangeMessage()\n        {", "        public static void OnChangedMessage(Changed<PlayerAgent> changed)\n        {\n            changed.Behaviour.ChangeMessage();\n        }\n\n        void ChangeMessage()\n        {\n            if (this.textMeshPro != null)\n            {\n                this.textMeshPro.text = this.Message.Value;\n            }\n        }\n", "        public static void OnChangedColor(Changed<PlayerAgent> changed)\n        {\n            changed.Behaviour.ChangedColor();\n        }\n\n        void ChangedColor()\n        {\n            if (this.textMeshPro != null)\n            {\n                this.textMeshPro.color = this.Color;\n            }\n        }\n\n        internal void SetPlayerColor(Color color)\n        {\n            this.Color = color;\n            this.Message = \"Hi.\";", "            if (this.textMeshPro != null)\n            {\n                this.textMeshPro.text = this.Message.Value;\n            }\n        }\n\n        public override void Spawned()\n        {\n            this.name = \"[Network]PlayerAgent\";\n            if (this.mainCamera == null)\n            {\n                this.mainCamera = GameObject.FindGameObjectWithTag(\"MainCamera\").transform;\n            }", "            if (this.mainCamera == null)\n            {\n                this.mainCamera = GameObject.FindGameObjectWithTag(\"MainCamera\").transform;\n            }\n            if (this.textMeshPro != null)\n            {\n                this.textMeshPro.text = this.Message.Value;\n            }\n            if (SceneContext.Instance.buttonSend != null)\n            {\n                SceneContext.Instance.buttonSend.onPressed += this.OnSend;\n            }\n        }\n\n        void OnSend()\n        {", "            if (SceneContext.Instance.buttonSend != null)\n            {\n                SceneContext.Instance.buttonSend.onPressed += this.OnSend;\n            }\n        }\n\n        void OnSend()\n        {\n            if (!HasInputAuthority)\n            {\n                return;\n            }", "            if (!HasInputAuthority)\n            {\n                return;\n            }\n            if (SceneContext.Instance.inputField != null)\n            {\n                if (this.textMeshPro != null)\n                {\n                    this.textMeshPro.text = SceneContext.Instance.inputField.text;\n                }\n                this.RPC_SendMessage(SceneContext.Instance.inputField.text);\n            }\n        }\n\n        internal void ApplyInput(PlayerInput input)\n        {\n            this.transform.position += input.move * this.moveSpeed;\n        }\n\n        float moveSpeed = 0.1f;\n        Transform mainCamera;\n    }\n}\n"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Runner/Player/NetworkPlayer.cs", "chunked_list": ["using Fusion;\n\nnamespace SimplestarGame\n{\n    public class NetworkPlayer : NetworkBehaviour, IBeforeTick\n    {\n        [Networked] internal PlayerAgent ActiveAgent { get; set; }\n\n        public override void Spawned()\n        {\n            this.name = \"[Network]Player:\" + this.Object.InputAuthority;\n            SceneContext.Instance.Game?.Join(this);\n        }\n\n        void IBeforeTick.BeforeTick()\n        {", "        public override void Spawned()\n        {\n            this.name = \"[Network]Player:\" + this.Object.InputAuthority;\n            SceneContext.Instance.Game?.Join(this);\n        }\n\n        void IBeforeTick.BeforeTick()\n        {\n            if (this.GetInput(out PlayerInput input))\n            {\n                this.ActiveAgent?.ApplyInput(input);\n            }\n        }\n", "            if (this.GetInput(out PlayerInput input))\n            {\n                this.ActiveAgent?.ApplyInput(input);\n            }\n        }\n\n        public override void Despawned(NetworkRunner runner, bool hasState)\n        {\n            if (!hasState)\n            {\n                return;\n            }\n\n            SceneContext.Instance.Game?.Leave(this);\n        }\n    }\n}\n", "            if (!hasState)\n            {\n                return;\n            }\n\n            SceneContext.Instance.Game?.Leave(this);\n        }\n    }\n}\n"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Sample/TemplateTexts.cs", "chunked_list": ["using UnityEngine;\n\nnamespace SimplestarGame\n{\n    public class TemplateTexts : MonoBehaviour\n    {\n        [SerializeField] ButtonPressDetection buttonHi;\n        [SerializeField] ButtonPressDetection buttonHello;\n        [SerializeField] ButtonPressDetection buttonGood;\n        [SerializeField] ButtonPressDetection buttonOK;\n        [SerializeField] TMPro.TMP_InputField inputField;\n\n        void Start()\n        {\n            this.buttonHi.onReleased += this.OnClickHi;\n            this.buttonHello.onReleased += this.OnClickHello;\n            this.buttonGood.onReleased += this.OnClickGood;\n            this.buttonOK.onReleased += this.OnClickOK;\n        }\n\n        void OnClickOK()\n        {\n            this.inputField.text = \"OK!\";\n        }\n\n        void OnClickGood()\n        {\n            this.inputField.text = \"Good!\";\n        }\n\n        void OnClickHello()\n        {\n            this.inputField.text = \"Hello.\";\n        }\n\n        void OnClickHi()\n        {\n            this.inputField.text = \"Hi.\";\n        }\n    }\n}"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Tools/FPSCounter.cs", "chunked_list": ["using UnityEngine;\n\nnamespace SimplestarGame\n{\n    public class FPSCounter : MonoBehaviour\n    {\n        void Update()\n        {\n            if (SceneContext.Instance.fpsText == null)\n            {\n                return;\n            }\n            this.deltaTime += (Time.unscaledDeltaTime - this.deltaTime) * 0.1f;\n            float fps = 1.0f / deltaTime;\n            SceneContext.Instance.fpsText.text = \"FPS: \" + fps.ToString(\"00\");\n        }\n\n        float deltaTime = 0.0f;\n    }\n}", "            if (SceneContext.Instance.fpsText == null)\n            {\n                return;\n            }\n            this.deltaTime += (Time.unscaledDeltaTime - this.deltaTime) * 0.1f;\n            float fps = 1.0f / deltaTime;\n            SceneContext.Instance.fpsText.text = \"FPS: \" + fps.ToString(\"00\");\n        }\n\n        float deltaTime = 0.0f;\n    }\n}"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Tools/ButtonPressDetection.cs", "chunked_list": ["using UnityEngine;\nusing UnityEngine.EventSystems;\nusing System;\n\nnamespace SimplestarGame\n{\n    public class ButtonPressDetection : MonoBehaviour, IPointerDownHandler, IPointerUpHandler\n    {\n        internal Action onPressed;\n        internal Action onReleased;\n        internal bool IsPressed { get; private set; } = false;\n", "        public void OnPointerDown(PointerEventData eventData)\n        {\n            this.IsPressed = true;\n            this.onPressed?.Invoke();\n        }\n\n        public void OnPointerUp(PointerEventData eventData)\n        {\n            this.IsPressed = false;\n            this.onReleased?.Invoke();\n        }\n    }\n}"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Tools/SimpleCameraController.cs", "chunked_list": ["#if ENABLE_INPUT_SYSTEM\nusing UnityEngine.InputSystem;\n#endif\n\nusing UnityEngine;\n\nnamespace UnityTemplateProjects\n{\n    public class SimpleCameraController : MonoBehaviour\n    {\n        [SerializeField] TMPro.TMP_InputField inputField;\n", "    public class SimpleCameraController : MonoBehaviour\n    {\n        [SerializeField] TMPro.TMP_InputField inputField;\n\n        class CameraState\n        {\n            public float yaw;\n            public float pitch;\n            public float roll;\n            public float x;\n            public float y;", "            public float roll;\n            public float x;\n            public float y;\n            public float z;\n\n            public void SetFromTransform(Transform t)\n            {\n                pitch = t.eulerAngles.x;\n                yaw = t.eulerAngles.y;\n                roll = t.eulerAngles.z;\n                x = t.position.x;\n                y = t.position.y;\n                z = t.position.z;\n            }\n", "            public void Translate(Vector3 translation)\n            {\n                Vector3 rotatedTranslation = Quaternion.Euler(pitch, yaw, roll) * translation;\n\n                x += rotatedTranslation.x;\n                y += rotatedTranslation.y;\n                z += rotatedTranslation.z;\n            }\n\n            public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)\n            {\n                yaw = Mathf.Lerp(yaw, target.yaw, rotationLerpPct);\n                pitch = Mathf.Lerp(pitch, target.pitch, rotationLerpPct);\n                roll = Mathf.Lerp(roll, target.roll, rotationLerpPct);\n\n                x = Mathf.Lerp(x, target.x, positionLerpPct);\n                y = Mathf.Lerp(y, target.y, positionLerpPct);\n                z = Mathf.Lerp(z, target.z, positionLerpPct);\n            }\n", "            public void LerpTowards(CameraState target, float positionLerpPct, float rotationLerpPct)\n            {\n                yaw = Mathf.Lerp(yaw, target.yaw, rotationLerpPct);\n                pitch = Mathf.Lerp(pitch, target.pitch, rotationLerpPct);\n                roll = Mathf.Lerp(roll, target.roll, rotationLerpPct);\n\n                x = Mathf.Lerp(x, target.x, positionLerpPct);\n                y = Mathf.Lerp(y, target.y, positionLerpPct);\n                z = Mathf.Lerp(z, target.z, positionLerpPct);\n            }\n", "            public void UpdateTransform(Transform t)\n            {\n                t.eulerAngles = new Vector3(pitch, yaw, roll);\n                t.position = new Vector3(x, y, z);\n            }\n        }\n\n        const float k_MouseSensitivityMultiplier = 0.01f;\n\n        CameraState m_TargetCameraState = new CameraState();\n        CameraState m_InterpolatingCameraState = new CameraState();\n\n        [Header(\"Movement Settings\")]\n        [Tooltip(\"Exponential boost factor on translation, controllable by mouse wheel.\")]", "        public float boost = 3.5f;\n\n        [Tooltip(\"Time it takes to interpolate camera position 99% of the way to the target.\"), Range(0.001f, 1f)]\n        public float positionLerpTime = 0.2f;\n\n        [Header(\"Rotation Settings\")]\n        [Tooltip(\"Multiplier for the sensitivity of the rotation.\")]\n        public float mouseSensitivity = 60.0f;\n\n        [Tooltip(\"X = Change in mouse position.\\nY = Multiplicative factor for camera rotation.\")]\n        public AnimationCurve mouseSensitivityCurve = new AnimationCurve(new Keyframe(0f, 0.5f, 0f, 5f), new Keyframe(1f, 2.5f, 0f, 0f));\n\n        [Tooltip(\"Time it takes to interpolate camera rotation 99% of the way to the target.\"), Range(0.001f, 1f)]", "        public AnimationCurve mouseSensitivityCurve = new AnimationCurve(new Keyframe(0f, 0.5f, 0f, 5f), new Keyframe(1f, 2.5f, 0f, 0f));\n\n        [Tooltip(\"Time it takes to interpolate camera rotation 99% of the way to the target.\"), Range(0.001f, 1f)]\n        public float rotationLerpTime = 0.01f;\n\n        [Tooltip(\"Whether or not to invert our Y axis for mouse input to rotation.\")]\n        public bool invertY = false;\n\n#if ENABLE_INPUT_SYSTEM\n        InputAction movementAction;\n        InputAction verticalMovementAction;\n        InputAction lookAction;\n        InputAction boostFactorAction;\n        bool        mouseRightButtonPressed;\n\n        void Start()\n        {\n            var map = new InputActionMap(\"Simple Camera Controller\");\n\n            lookAction = map.AddAction(\"look\", binding: \"<Mouse>/delta\");\n            movementAction = map.AddAction(\"move\", binding: \"<Gamepad>/leftStick\");\n            verticalMovementAction = map.AddAction(\"Vertical Movement\");\n            boostFactorAction = map.AddAction(\"Boost Factor\", binding: \"<Mouse>/scroll\");\n\n            lookAction.AddBinding(\"<Gamepad>/rightStick\").WithProcessor(\"scaleVector2(x=15, y=15)\");\n            movementAction.AddCompositeBinding(\"Dpad\")\n                .With(\"Up\", \"<Keyboard>/w\")\n                .With(\"Up\", \"<Keyboard>/upArrow\")\n                .With(\"Down\", \"<Keyboard>/s\")\n                .With(\"Down\", \"<Keyboard>/downArrow\")\n                .With(\"Left\", \"<Keyboard>/a\")\n                .With(\"Left\", \"<Keyboard>/leftArrow\")\n                .With(\"Right\", \"<Keyboard>/d\")\n                .With(\"Right\", \"<Keyboard>/rightArrow\");\n            verticalMovementAction.AddCompositeBinding(\"Dpad\")\n                .With(\"Up\", \"<Keyboard>/pageUp\")\n                .With(\"Down\", \"<Keyboard>/pageDown\")\n                .With(\"Up\", \"<Keyboard>/e\")\n                .With(\"Down\", \"<Keyboard>/q\")\n                .With(\"Up\", \"<Gamepad>/rightshoulder\")\n                .With(\"Down\", \"<Gamepad>/leftshoulder\");\n            boostFactorAction.AddBinding(\"<Gamepad>/Dpad\").WithProcessor(\"scaleVector2(x=1, y=4)\");\n\n            movementAction.Enable();\n            lookAction.Enable();\n            verticalMovementAction.Enable();\n            boostFactorAction.Enable();\n        }\n\n#endif\n\n        void OnEnable()\n        {\n            m_TargetCameraState.SetFromTransform(transform);\n            m_InterpolatingCameraState.SetFromTransform(transform);\n        }\n\n        Vector3 GetInputTranslationDirection()\n        {\n            Vector3 direction = Vector3.zero;\n#if ENABLE_INPUT_SYSTEM\n            var moveDelta = movementAction.ReadValue<Vector2>();\n            direction.x = moveDelta.x;\n            direction.z = moveDelta.y;\n            direction.y = verticalMovementAction.ReadValue<Vector2>().y;\n#else", "            if (Input.GetKey(KeyCode.W))\n            {\n                direction += Vector3.forward;\n            }\n            if (Input.GetKey(KeyCode.S))\n            {\n                direction += Vector3.back;\n            }\n            if (Input.GetKey(KeyCode.A))\n            {\n                direction += Vector3.left;\n            }", "            if (Input.GetKey(KeyCode.A))\n            {\n                direction += Vector3.left;\n            }\n            if (Input.GetKey(KeyCode.D))\n            {\n                direction += Vector3.right;\n            }\n            if (Input.GetKey(KeyCode.Q))\n            {\n                direction += Vector3.down;\n            }", "            if (Input.GetKey(KeyCode.Q))\n            {\n                direction += Vector3.down;\n            }\n            if (Input.GetKey(KeyCode.E))\n            {\n                direction += Vector3.up;\n            }\n#endif\n            return direction;\n        }\n\n        void Update()\n        {\n            // Exit Sample", "            if (this.inputField.isFocused)\n            {\n                return;\n            }\n\n            if (IsEscapePressed())\n            {\n                Application.Quit();\n#if UNITY_EDITOR\n                UnityEditor.EditorApplication.isPlaying = false;\n#endif\n            }\n\n            // Hide and lock cursor when right mouse button pressed", "            if (IsRightMouseButtonDown())\n            {\n                Cursor.lockState = CursorLockMode.Locked;\n            }\n\n            // Unlock and show cursor when right mouse button released\n            if (IsRightMouseButtonUp())\n            {\n                Cursor.visible = true;\n                Cursor.lockState = CursorLockMode.None;\n            }\n\n            // Rotation", "            if (IsCameraRotationAllowed())\n            {\n                var mouseMovement = GetInputLookRotation() * k_MouseSensitivityMultiplier * mouseSensitivity;\n                if (invertY)\n                    mouseMovement.y = -mouseMovement.y;\n\n                var mouseSensitivityFactor = mouseSensitivityCurve.Evaluate(mouseMovement.magnitude);\n\n                m_TargetCameraState.yaw += mouseMovement.x * mouseSensitivityFactor;\n                m_TargetCameraState.pitch += mouseMovement.y * mouseSensitivityFactor;\n            }\n\n            // Translation\n            var translation = GetInputTranslationDirection() * Time.deltaTime;\n\n            // Speed up movement when shift key held", "            if (IsBoostPressed())\n            {\n                translation *= 10.0f;\n            }\n\n            // Modify movement by a boost factor (defined in Inspector and modified in play mode through the mouse scroll wheel)\n            boost += GetBoostFactor();\n            translation *= Mathf.Pow(2.0f, boost);\n\n            m_TargetCameraState.Translate(translation);\n\n            // Framerate-independent interpolation\n            // Calculate the lerp amount, such that we get 99% of the way to our target in the specified time\n            var positionLerpPct = 1f - Mathf.Exp((Mathf.Log(1f - 0.99f) / positionLerpTime) * Time.deltaTime);\n            var rotationLerpPct = 1f - Mathf.Exp((Mathf.Log(1f - 0.99f) / rotationLerpTime) * Time.deltaTime);\n            m_InterpolatingCameraState.LerpTowards(m_TargetCameraState, positionLerpPct, rotationLerpPct);\n\n            m_InterpolatingCameraState.UpdateTransform(transform);\n        }\n\n        float GetBoostFactor()\n        {\n#if ENABLE_INPUT_SYSTEM\n            return boostFactorAction.ReadValue<Vector2>().y * 0.01f;\n#else\n            return Input.mouseScrollDelta.y * 0.01f;\n#endif\n        }\n\n        Vector2 GetInputLookRotation()\n        {\n            // try to compensate the diff between the two input systems by multiplying with empirical values\n#if ENABLE_INPUT_SYSTEM\n            var delta = lookAction.ReadValue<Vector2>();\n            delta *= 0.5f; // Account for scaling applied directly in Windows code by old input system.\n            delta *= 0.1f; // Account for sensitivity setting on old Mouse X and Y axes.\n            return delta;\n#else\n            return new Vector2(Input.GetAxis(\"Mouse X\"), Input.GetAxis(\"Mouse Y\"));\n#endif\n        }\n\n        bool IsBoostPressed()\n        {\n#if ENABLE_INPUT_SYSTEM\n            bool boost = Keyboard.current != null ? Keyboard.current.leftShiftKey.isPressed : false;\n            boost |= Gamepad.current != null ? Gamepad.current.xButton.isPressed : false;\n            return boost;\n#else\n            return Input.GetKey(KeyCode.LeftShift);\n#endif\n        }\n\n        bool IsEscapePressed()\n        {\n#if ENABLE_INPUT_SYSTEM\n            return Keyboard.current != null ? Keyboard.current.escapeKey.isPressed : false;\n#else\n            return Input.GetKey(KeyCode.Escape);\n#endif\n        }\n\n        bool IsCameraRotationAllowed()\n        {\n#if ENABLE_INPUT_SYSTEM\n            bool canRotate = Mouse.current != null ? Mouse.current.rightButton.isPressed : false;\n            canRotate |= Gamepad.current != null ? Gamepad.current.rightStick.ReadValue().magnitude > 0 : false;\n            return canRotate;\n#else\n            return Input.GetMouseButton(1);\n#endif\n        }\n\n        bool IsRightMouseButtonDown()\n        {\n#if ENABLE_INPUT_SYSTEM\n            return Mouse.current != null ? Mouse.current.rightButton.isPressed : false;\n#else\n            return Input.GetMouseButtonDown(1);\n#endif\n        }\n\n        bool IsRightMouseButtonUp()\n        {\n#if ENABLE_INPUT_SYSTEM\n            return Mouse.current != null ? !Mouse.current.rightButton.isPressed : false;\n#else\n            return Input.GetMouseButtonUp(1);\n#endif\n        }\n    }\n}\n"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Tools/FaceCamera.cs", "chunked_list": ["using UnityEngine;\n\nnamespace SimplestarGame\n{\n    public class FaceCamera : MonoBehaviour\n    {\n        void Start()\n        {\n            this.mainCameraTransform = Camera.main.transform;\n        }\n\n        void LateUpdate()\n        {\n            this.transform.LookAt(this.transform.position + this.mainCameraTransform.rotation * Vector3.forward, this.mainCameraTransform.rotation * Vector3.up);\n        }\n\n        Transform mainCameraTransform;\n    }\n}"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Scene/NetworkPlayerInput.cs", "chunked_list": ["using Fusion;\nusing Fusion.Sockets;\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace SimplestarGame\n{\n    public struct PlayerInput : INetworkInput\n    {\n        public Vector3 move;\n    }", "    public struct PlayerInput : INetworkInput\n    {\n        public Vector3 move;\n    }\n    public class NetworkPlayerInput : MonoBehaviour, INetworkRunnerCallbacks\n    {\n        [SerializeField] SceneContext sceneContext;\n        [SerializeField] Transform mainCamera;\n\n        void INetworkRunnerCallbacks.OnInput(NetworkRunner runner, NetworkInput input)\n        {\n            input.Set(new PlayerInput\n            {\n                move = this.MoveInput(),\n            });\n        }\n\n        Vector3 MoveInput()\n        {\n            Vector2 move = Vector2.zero;", "            if (this.sceneContext.buttonLeft.IsPressed)\n            {\n                move += new Vector2(-1f, 0);\n            }\n            if (this.sceneContext.buttonRight.IsPressed)\n            {\n                move += new Vector2(+1f, 0);\n            }\n            if (this.sceneContext.buttonUp.IsPressed)\n            {\n                move += new Vector2(0, +1f);\n            }", "            if (this.sceneContext.buttonUp.IsPressed)\n            {\n                move += new Vector2(0, +1f);\n            }\n            if (this.sceneContext.buttonDown.IsPressed)\n            {\n                move += new Vector2(0, -1f);\n            }\n            Vector3 moveDirection = (this.mainCamera.forward * move.y + this.mainCamera.right * move.x).normalized;\n            Vector3 localMoveDirection = this.transform.InverseTransformDirection(moveDirection);\n            localMoveDirection.y = 0f;\n            return localMoveDirection;\n        }\n\n        #region INetworkRunnerCallbacks\n        void INetworkRunnerCallbacks.OnConnectedToServer(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnConnectFailed(NetworkRunner runner, NetAddress remoteAddress, NetConnectFailedReason reason)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnConnectRequest(NetworkRunner runner, NetworkRunnerCallbackArgs.ConnectRequest request, byte[] token)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnCustomAuthenticationResponse(NetworkRunner runner, Dictionary<string, object> data)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnDisconnectedFromServer(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnHostMigration(NetworkRunner runner, HostMigrationToken hostMigrationToken)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnInputMissing(NetworkRunner runner, PlayerRef player, NetworkInput input)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnPlayerJoined(NetworkRunner runner, PlayerRef player)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnPlayerLeft(NetworkRunner runner, PlayerRef player)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnReliableDataReceived(NetworkRunner runner, PlayerRef player, ArraySegment<byte> data)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnSceneLoadDone(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnSceneLoadStart(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnSessionListUpdated(NetworkRunner runner, List<SessionInfo> sessionList)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnShutdown(NetworkRunner runner, ShutdownReason shutdownReason)\n        {", "            if (shutdownReason != ShutdownReason.HostMigration)\n            {\n            }\n        }\n\n        void INetworkRunnerCallbacks.OnUserSimulationMessage(NetworkRunner runner, SimulationMessagePtr message)\n        {\n        }\n        #endregion\n    }\n}"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Scene/NetworkConnectionManager.cs", "chunked_list": ["using Fusion;\nusing Fusion.Sockets;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace SimplestarGame\n{", "namespace SimplestarGame\n{\n    [DisallowMultipleComponent]\n    public class NetworkConnectionManager : MonoBehaviour, INetworkRunnerCallbacks\n    {\n        [SerializeField, Tooltip(\"Flag to start connection on Awake\")]\n        bool connectOnAwake = true;\n        [SerializeField, Tooltip(\"Network runner prefab\")]\n        NetworkRunner networkRunnerPrefab;\n        [SerializeField, Tooltip(\"Blank means you will enter a random room\")]\n        string sessionName = \"\";\n        [SerializeField, Tooltip(\"Default server port\")]\n        ushort serverPort = 27015;\n\n        void Awake()\n        {", "            if (this.connectOnAwake)\n            {\n                StartCoroutine(this.CoConnect());\n            }\n        }\n\n        IEnumerator CoConnect()\n        {\n            if (!this.networkRunnerPrefab)\n            {\n                Debug.LogError($\"{nameof(this.networkRunnerPrefab)} not set, can't perform network start.\");\n                yield break;\n            }\n            var runner = this.InstantiateRunner(out INetworkSceneManager sceneManager);\n            this.serverPort += (ushort)UnityEngine.Random.Range(0, 100);", "            if (!this.networkRunnerPrefab)\n            {\n                Debug.LogError($\"{nameof(this.networkRunnerPrefab)} not set, can't perform network start.\");\n                yield break;\n            }\n            var runner = this.InstantiateRunner(out INetworkSceneManager sceneManager);\n            this.serverPort += (ushort)UnityEngine.Random.Range(0, 100);\n            if (this.gameObject.transform.parent)\n            {\n                Debug.LogWarning($\"{nameof(NetworkConnectionManager)} can't be a child game object, un-parenting.\");\n                this.gameObject.transform.parent = null;\n            }\n            DontDestroyOnLoad(this.gameObject);\n            this.connectionToken = Guid.NewGuid().ToByteArray();\n            runner.StartGame(new StartGameArgs\n            {\n                GameMode = GameMode.AutoHostOrClient,\n                Address = NetAddress.Any(this.serverPort),\n                SessionName = this.sessionName,\n                SceneManager = sceneManager,\n                ConnectionToken = this.connectionToken,\n            });\n        }\n\n        async void INetworkRunnerCallbacks.OnHostMigration(NetworkRunner runner, HostMigrationToken hostMigrationToken)\n        {\n            await runner.Shutdown(true, ShutdownReason.HostMigration);\n\n            runner = this.InstantiateRunner(out INetworkSceneManager sceneManager);\n            await runner.StartGame(new StartGameArgs\n            {\n                HostMigrationToken = hostMigrationToken,\n                HostMigrationResume = this.HostMigrationResume,\n                SceneManager = sceneManager,\n                ConnectionToken = this.connectionToken,\n            });\n        }\n\n        NetworkRunner InstantiateRunner(out INetworkSceneManager sceneManager)\n        {\n            NetworkRunner runner = Instantiate(this.networkRunnerPrefab);\n            runner.AddCallbacks(this);\n            DontDestroyOnLoad(runner);\n            runner.name = \"[Network]Runner\";\n            sceneManager = runner.GetComponents(typeof(MonoBehaviour)).OfType<INetworkSceneManager>().FirstOrDefault();", "            if (sceneManager == null)\n            {\n                Debug.Log($\"NetworkRunner does not have any component implementing {nameof(INetworkSceneManager)} interface, adding {nameof(NetworkSceneManagerDefault)}.\", runner);\n                sceneManager = runner.gameObject.AddComponent<NetworkSceneManagerDefault>();\n            }\n            return runner;\n        }\n\n        void HostMigrationResume(NetworkRunner runner)\n        {\n            PlayerRef oldHost = PlayerRef.None;", "            foreach (var resumeNO in runner.GetResumeSnapshotNetworkObjects())\n            {\n                if (resumeNO.TryGetBehaviour(out NetworkPlayer _))\n                {\n                    continue;\n                }\n                if (resumeNO.TryGetBehaviour(out PlayerAgent agent))\n                {\n                    int hostId = runner.SessionInfo.MaxPlayers - 1;\n                    if (resumeNO.InputAuthority.PlayerId == hostId) {\n                        continue; \n                    }\n                }\n                Vector3 pos = Vector3.zero;\n                Quaternion rot = Quaternion.identity;", "                    if (resumeNO.InputAuthority.PlayerId == hostId) {\n                        continue; \n                    }\n                }\n                Vector3 pos = Vector3.zero;\n                Quaternion rot = Quaternion.identity;\n                if (resumeNO.TryGetBehaviour(out NetworkPositionRotation posRot))\n                {\n                    pos = posRot.ReadPosition();\n                    rot = posRot.ReadRotation();\n                }\n                runner.Spawn(resumeNO, position: pos, rotation: rot, onBeforeSpawned: (runner, newNO) =>\n                {\n                    newNO.CopyStateFrom(resumeNO);", "                    if (resumeNO.TryGetBehaviour(out NetworkBehaviour src))\n                    {\n                        newNO.GetComponent<NetworkBehaviour>().CopyStateFrom(src);   \n                    }\n                });\n            }\n        }\n\n        #region INetworkRunnerCallbacks\n        void INetworkRunnerCallbacks.OnInput(NetworkRunner runner, NetworkInput input)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnConnectedToServer(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnConnectFailed(NetworkRunner runner, NetAddress remoteAddress, NetConnectFailedReason reason)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnConnectRequest(NetworkRunner runner, NetworkRunnerCallbackArgs.ConnectRequest request, byte[] token)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnCustomAuthenticationResponse(NetworkRunner runner, Dictionary<string, object> data)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnDisconnectedFromServer(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnInputMissing(NetworkRunner runner, PlayerRef player, NetworkInput input)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnPlayerJoined(NetworkRunner runner, PlayerRef player)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnPlayerLeft(NetworkRunner runner, PlayerRef player)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnReliableDataReceived(NetworkRunner runner, PlayerRef player, ArraySegment<byte> data)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnSceneLoadDone(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnSceneLoadStart(NetworkRunner runner)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnSessionListUpdated(NetworkRunner runner, List<SessionInfo> sessionList)\n        {\n        }\n\n        void INetworkRunnerCallbacks.OnShutdown(NetworkRunner runner, ShutdownReason shutdownReason)\n        {", "            if (shutdownReason != ShutdownReason.HostMigration)\n            {\n            }\n        }\n\n        void INetworkRunnerCallbacks.OnUserSimulationMessage(NetworkRunner runner, SimulationMessagePtr message)\n        {\n        }\n        #endregion\n\n        byte[] connectionToken;\n    }\n}"]}
{"filename": "Assets/SimplestarGame/Network/Scripts/Scene/SceneContext.cs", "chunked_list": ["using UnityEngine;\n\nnamespace SimplestarGame\n{\n    public class SceneContext : MonoBehaviour\n    {\n        [SerializeField] internal NetworkPlayerInput PlayerInput;\n        [SerializeField] internal TMPro.TextMeshProUGUI fpsText;\n        [SerializeField] internal TMPro.TextMeshProUGUI hostClientText;\n        [SerializeField] internal ButtonPressDetection buttonUp;\n        [SerializeField] internal ButtonPressDetection buttonDown;\n        [SerializeField] internal ButtonPressDetection buttonLeft;\n        [SerializeField] internal ButtonPressDetection buttonRight;\n        [SerializeField] internal TMPro.TMP_InputField inputField;\n        [SerializeField] internal ButtonPressDetection buttonSend;\n\n        internal static SceneContext Instance => SceneContext.instance;\n\n        internal NetworkGame Game;\n\n        void Awake()\n        {\n            SceneContext.instance = this;\n        }\n\n        static SceneContext instance;\n    }\n}"]}
