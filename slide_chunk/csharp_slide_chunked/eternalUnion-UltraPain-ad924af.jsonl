{"filename": "Ultrapain/ILUtils.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Collections.Generic;\nusing System.Reflection.Emit;\nusing System.Text;\nusing UnityEngine;\n\nnamespace Ultrapain\n{\n    public static class ILUtils\n    {", "{\n    public static class ILUtils\n    {\n        public static string TurnInstToString(CodeInstruction inst)\n        {\n            return $\"{inst.opcode}{(inst.operand == null ? \"\" : $\" : ({inst.operand.GetType()}){inst.operand}\")}\";\n        }\n\n        public static OpCode LoadLocalOpcode(int localIndex)\n        {\n            if (localIndex == 0)\n                return OpCodes.Ldloc_0;", "        public static OpCode LoadLocalOpcode(int localIndex)\n        {\n            if (localIndex == 0)\n                return OpCodes.Ldloc_0;\n            if (localIndex == 1)\n                return OpCodes.Ldloc_1;\n            if (localIndex == 2)\n                return OpCodes.Ldloc_2;\n            if (localIndex == 3)\n                return OpCodes.Ldloc_3;\n            if (localIndex <= byte.MaxValue)\n                return OpCodes.Ldloc_S;\n            return OpCodes.Ldloc;\n        }\n", "            if (localIndex == 3)\n                return OpCodes.Ldloc_3;\n            if (localIndex <= byte.MaxValue)\n                return OpCodes.Ldloc_S;\n            return OpCodes.Ldloc;\n        }\n\n        public static CodeInstruction LoadLocalInstruction(int localIndex)\n        {\n            if (localIndex == 0)\n                return new CodeInstruction(OpCodes.Ldloc_0);", "            if (localIndex == 0)\n                return new CodeInstruction(OpCodes.Ldloc_0);\n            if (localIndex == 1)\n                return new CodeInstruction(OpCodes.Ldloc_1);\n            if (localIndex == 2)\n                return new CodeInstruction(OpCodes.Ldloc_2);\n            if (localIndex == 3)\n                return new CodeInstruction(OpCodes.Ldloc_3);\n            if (localIndex <= byte.MaxValue)\n                return new CodeInstruction(OpCodes.Ldloc_S, (byte) localIndex);\n            return new CodeInstruction(OpCodes.Ldloc, localIndex);\n        }\n", "            if (localIndex <= byte.MaxValue)\n                return new CodeInstruction(OpCodes.Ldloc_S, (byte) localIndex);\n            return new CodeInstruction(OpCodes.Ldloc, localIndex);\n        }\n\n        public static CodeInstruction LoadLocalInstruction(object localIndex)\n        {\n            if (localIndex is int intIndex)\n                return LoadLocalInstruction(intIndex);\n\n            // Wish I could access LocalBuilder, this is just a logic bomb\n            // I hope they don't use more than 255 local variables\n            return new CodeInstruction(OpCodes.Ldloc_S, localIndex);\n        }\n", "        public static OpCode StoreLocalOpcode(int localIndex)\n        {\n            if (localIndex == 0)\n                return OpCodes.Stloc_0;\n            if (localIndex == 1)\n                return OpCodes.Stloc_1;\n            if (localIndex == 2)\n                return OpCodes.Stloc_2;\n            if (localIndex == 3)\n                return OpCodes.Stloc_3;\n            if (localIndex <= byte.MaxValue)\n                return OpCodes.Stloc_S;\n            return OpCodes.Stloc;\n        }\n", "            if (localIndex == 3)\n                return OpCodes.Stloc_3;\n            if (localIndex <= byte.MaxValue)\n                return OpCodes.Stloc_S;\n            return OpCodes.Stloc;\n        }\n\n        public static CodeInstruction StoreLocalInstruction(int localIndex)\n        {\n            if (localIndex <= 3)\n                return new CodeInstruction(StoreLocalOpcode(localIndex));\n            return new CodeInstruction(StoreLocalOpcode(localIndex), localIndex);\n        }\n", "            if (localIndex <= 3)\n                return new CodeInstruction(StoreLocalOpcode(localIndex));\n            return new CodeInstruction(StoreLocalOpcode(localIndex), localIndex);\n        }\n\n        public static CodeInstruction StoreLocalInstruction(object localIndex)\n        {\n            if (localIndex is int integerIndex)\n                return StoreLocalInstruction(integerIndex);\n\n            // Another logic bomb\n            return new CodeInstruction(OpCodes.Stloc_S, localIndex);\n        }\n", "        public static object GetLocalIndex(CodeInstruction inst)\n        {\n            if (inst.opcode == OpCodes.Ldloc_0 || inst.opcode == OpCodes.Stloc_0)\n                return 0;\n            if (inst.opcode == OpCodes.Ldloc_1 || inst.opcode == OpCodes.Stloc_1)\n                return 1;\n            if (inst.opcode == OpCodes.Ldloc_2 || inst.opcode == OpCodes.Stloc_2)\n                return 2;\n            if (inst.opcode == OpCodes.Ldloc_3 || inst.opcode == OpCodes.Stloc_3)\n                return 3;\n\n            // Return the local builder object (which is not defined in mscorlib for some reason, so cannot access members)", "            if (inst.opcode == OpCodes.Ldloc_3 || inst.opcode == OpCodes.Stloc_3)\n                return 3;\n\n            // Return the local builder object (which is not defined in mscorlib for some reason, so cannot access members)\n            if (inst.opcode == OpCodes.Ldloc_S || inst.opcode == OpCodes.Stloc_S || inst.opcode == OpCodes.Ldloc || inst.opcode == OpCodes.Stloc)\n                return inst.operand;\n\n            return null;\n        }\n\n        public static bool IsConstI4LoadWithOperand(OpCode code)\n        {\n            return code == OpCodes.Ldc_I4_S || code == OpCodes.Ldc_I4 || code == OpCodes.Ldc_I8;\n        }\n", "        public static bool IsConstI4LoadWithOperand(OpCode code)\n        {\n            return code == OpCodes.Ldc_I4_S || code == OpCodes.Ldc_I4 || code == OpCodes.Ldc_I8;\n        }\n\n        public static bool IsStoreLocalOpcode(OpCode code)\n        {\n            return code == OpCodes.Stloc || code == OpCodes.Stloc_S || code == OpCodes.Stloc_0 || code == OpCodes.Stloc_1 || code == OpCodes.Stloc_2 || code == OpCodes.Stloc_3;\n        }\n\n        public static OpCode GetLoadLocalFromStoreLocal(OpCode code)\n        {", "        public static OpCode GetLoadLocalFromStoreLocal(OpCode code)\n        {\n            if (code == OpCodes.Stloc_0)\n                return OpCodes.Ldloc_0;\n            if (code == OpCodes.Stloc_1)\n                return OpCodes.Ldloc_1;\n            if (code == OpCodes.Stloc_2)\n                return OpCodes.Ldloc_2;\n            if (code == OpCodes.Stloc_3)\n                return OpCodes.Ldloc_3;\n", "            if (code == OpCodes.Stloc_3)\n                return OpCodes.Ldloc_3;\n\n            if (code == OpCodes.Stloc_S)\n                return OpCodes.Ldloc_S;\n            if (code == OpCodes.Stloc)\n                return OpCodes.Ldloc;\n\n            throw new ArgumentException($\"{code} is not a valid store local opcode\");\n        }\n", "        public static int GetI4LoadOperand(CodeInstruction code)\n        {\n            if (code.opcode == OpCodes.Ldc_I4_S)\n                return (sbyte)code.operand;\n            if (code.opcode == OpCodes.Ldc_I4)\n                return (int)code.operand;\n\n            if (code.opcode == OpCodes.Ldc_I4_0)\n                return 0;\n            if (code.opcode == OpCodes.Ldc_I4_1)\n                return 1;", "            if (code.opcode == OpCodes.Ldc_I4_1)\n                return 1;\n            if (code.opcode == OpCodes.Ldc_I4_2)\n                return 2;\n            if (code.opcode == OpCodes.Ldc_I4_3)\n                return 3;\n            if (code.opcode == OpCodes.Ldc_I4_4)\n                return 4;\n            if (code.opcode == OpCodes.Ldc_I4_5)\n                return 5;\n            if (code.opcode == OpCodes.Ldc_I4_6)\n                return 6;", "            if (code.opcode == OpCodes.Ldc_I4_5)\n                return 5;\n            if (code.opcode == OpCodes.Ldc_I4_6)\n                return 6;\n            if (code.opcode == OpCodes.Ldc_I4_7)\n                return 7;\n            if (code.opcode == OpCodes.Ldc_I4_8)\n                return 8;\n            if (code.opcode == OpCodes.Ldc_I4_M1)\n                return -1;\n\n            throw new ArgumentException($\"{code.opcode} is not a valid i4 load constant opcode\");\n        }\n", "            if (code.opcode == OpCodes.Ldc_I4_M1)\n                return -1;\n\n            throw new ArgumentException($\"{code.opcode} is not a valid i4 load constant opcode\");\n        }\n\n        private static OpCode[] efficientI4 = new OpCode[] { OpCodes.Ldc_I4_M1, OpCodes.Ldc_I4_0, OpCodes.Ldc_I4_1, OpCodes.Ldc_I4_2, OpCodes.Ldc_I4_3, OpCodes.Ldc_I4_4, OpCodes.Ldc_I4_5, OpCodes.Ldc_I4_6, OpCodes.Ldc_I4_7, OpCodes.Ldc_I4_8 };\n        // Get an efficient version of constant i4 load opcode which does not require an operand\n        public static bool TryEfficientLoadI4(int value, out OpCode efficientOpcode)\n        {\n            if (value <= 8 && value >= -1)\n            {\n                efficientOpcode = efficientI4[value + 1];\n                return true;\n            }\n\n            efficientOpcode = OpCodes.Ldc_I4;\n            return false;\n        }\n", "        public static bool TryEfficientLoadI4(int value, out OpCode efficientOpcode)\n        {\n            if (value <= 8 && value >= -1)\n            {\n                efficientOpcode = efficientI4[value + 1];\n                return true;\n            }\n\n            efficientOpcode = OpCodes.Ldc_I4;\n            return false;\n        }\n", "        public static bool IsCodeSequence(List<CodeInstruction> code, int index, List<CodeInstruction> seq)\n        {\n            if (index + seq.Count > code.Count)\n                return false;\n\n            for (int i = 0; i < seq.Count; i++)\n            {\n                if (seq[i].opcode != code[i + index].opcode)\n                    return false;\n                else if (code[i + index].operand != null && !code[i + index].OperandIs(seq[i].operand))\n                    return false;\n            }\n\n            return true;\n        }\n    }\n}\n", "                else if (code[i + index].operand != null && !code[i + index].OperandIs(seq[i].operand))\n                    return false;\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/UnityUtils.cs", "chunked_list": ["using HarmonyLib;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System;\nusing System.Linq;\nusing System.Xml.Linq;\nusing UnityEngine;\n\nnamespace Ultrapain\n{\n    public static class UnityUtils\n    {", "namespace Ultrapain\n{\n    public static class UnityUtils\n    {\n        public static LayerMask envLayer = new LayerMask() { value = (1 << 8) | (1 << 24) };\n\n        public static List<T> InsertFill<T>(this List<T> list, int index, T obj)\n        {\n            if (index > list.Count)\n            {\n                int itemsToAdd = index - list.Count;", "            if (index > list.Count)\n            {\n                int itemsToAdd = index - list.Count;\n                for (int i = 0; i < itemsToAdd; i++)\n                    list.Add(default(T));\n                list.Add(obj);\n            }\n            else\n                list.Insert(index, obj);\n\n            return list;\n        }\n", "        public static void PrintGameobject(GameObject o, int iters = 0)\n        {\n            string logMessage = \"\";\n            for (int i = 0; i < iters; i++)\n                logMessage += '|';\n            logMessage += o.name;\n\n            Debug.Log(logMessage);\n            foreach (Transform t in o.transform)\n                PrintGameobject(t.gameObject, iters + 1);\n        }\n", "            foreach (Transform t in o.transform)\n                PrintGameobject(t.gameObject, iters + 1);\n        }\n\n        public static IEnumerable<T> GetComponentsInChildrenRecursively<T>(Transform obj)\n        {\n            T component;\n            foreach (Transform child in obj)\n            {\n                component = child.gameObject.GetComponent<T>();\n                if (component != null)\n                    yield return component;", "                if (component != null)\n                    yield return component;\n                foreach (T childComp in GetComponentsInChildrenRecursively<T>(child))\n                    yield return childComp;\n            }\n\n            yield break;\n        }\n\n        public static T GetComponentInChildrenRecursively<T>(Transform obj)\n        {\n            T component;", "        public static T GetComponentInChildrenRecursively<T>(Transform obj)\n        {\n            T component;\n            foreach (Transform child in obj)\n            {\n                component = child.gameObject.GetComponent<T>();\n                if (component != null)\n                    return component;\n                component = GetComponentInChildrenRecursively<T>(child);\n                if (component != null)\n                    return component;\n            }\n\n            return default(T);\n        }\n", "                if (component != null)\n                    return component;\n            }\n\n            return default(T);\n        }\n\n        public static Transform GetChildByNameRecursively(Transform parent, string name)\n        {\n            foreach(Transform t in parent)\n            {", "            foreach(Transform t in parent)\n            {\n                if (t.name == name)\n                    return t;\n                Transform child = GetChildByNameRecursively(t, name);\n                if (child != null)\n                    return child;\n            }\n\n            return null;\n        }\n", "        public static Transform GetChildByTagRecursively(Transform parent, string tag)\n        {\n            foreach (Transform t in parent)\n            {\n                if (t.tag == tag)\n                    return t;\n                Transform child = GetChildByTagRecursively(t, tag);\n                if (child != null)\n                    return child;\n            }\n\n            return null;\n        }\n", "        public const BindingFlags instanceFlag = BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance;\n        public const BindingFlags staticFlag = BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static;\n\n        public static readonly Func<Vector3, EnemyIdentifier, bool> doNotCollideWithPlayerValidator = (sourcePosition, enemy) => NewMovement.Instance.playerCollider.Raycast(new Ray(sourcePosition, enemy.transform.position - sourcePosition), out RaycastHit hit2, float.MaxValue);\n\t\t    public static List<Tuple<EnemyIdentifier, float>> GetClosestEnemies(Vector3 sourcePosition, int enemyCount, Func<Vector3, EnemyIdentifier, bool> validator)\n        {\n            List<Tuple<EnemyIdentifier, float>> targetEnemies = new List<Tuple<EnemyIdentifier, float>>();\n\n            foreach (GameObject enemy in GameObject.FindGameObjectsWithTag(\"Enemy\"))\n            {\n                float sqrMagnitude = (enemy.transform.position - sourcePosition).sqrMagnitude;", "            foreach (GameObject enemy in GameObject.FindGameObjectsWithTag(\"Enemy\"))\n            {\n                float sqrMagnitude = (enemy.transform.position - sourcePosition).sqrMagnitude;\n                if (targetEnemies.Count < enemyCount || sqrMagnitude < targetEnemies.Last().Item2)\n                {\n                    EnemyIdentifier eid = enemy.GetComponent<EnemyIdentifier>();\n                    if (eid == null || eid.dead || eid.blessed)\n                        continue;\n\n                    if (Physics.Raycast(sourcePosition, enemy.transform.position - sourcePosition, out RaycastHit hit, Vector3.Distance(sourcePosition, enemy.transform.position) - 0.5f, envLayer))\n                        continue;\n", "                    if (Physics.Raycast(sourcePosition, enemy.transform.position - sourcePosition, out RaycastHit hit, Vector3.Distance(sourcePosition, enemy.transform.position) - 0.5f, envLayer))\n                        continue;\n\n                    if (!validator(sourcePosition, eid))\n                        continue;\n\n                    if (targetEnemies.Count == 0)\n                    {\n                        targetEnemies.Add(new Tuple<EnemyIdentifier, float>(eid, sqrMagnitude));\n                        continue;\n                    }\n\n                    int insertionPoint = targetEnemies.Count;", "                    while (insertionPoint != 0 && targetEnemies[insertionPoint - 1].Item2 > sqrMagnitude)\n                        insertionPoint -= 1;\n\n                    targetEnemies.Insert(insertionPoint, new Tuple<EnemyIdentifier, float>(eid, sqrMagnitude));\n                    if (targetEnemies.Count > enemyCount)\n                        targetEnemies.RemoveAt(enemyCount);\n                }\n            }\n\n            return targetEnemies;\n        }\n        ", "        public static T GetRandomIntWeightedItem<T>(IEnumerable<T> itemsEnumerable, Func<T, int> weightKey)\n        {\n            var items = itemsEnumerable.ToList();\n\n            var totalWeight = items.Sum(x => weightKey(x));\n            var randomWeightedIndex = UnityEngine.Random.RandomRangeInt(0, totalWeight);\n            var itemWeightedIndex = 0;\n            foreach (var item in items)\n            {\n                itemWeightedIndex += weightKey(item);\n                if (randomWeightedIndex < itemWeightedIndex)\n                    return item;\n            }\n            throw new ArgumentException(\"Collection count and weights must be greater than 0\");\n        }\n", "                if (randomWeightedIndex < itemWeightedIndex)\n                    return item;\n            }\n            throw new ArgumentException(\"Collection count and weights must be greater than 0\");\n        }\n\n        public static T GetRandomFloatWeightedItem<T>(IEnumerable<T> itemsEnumerable, Func<T, float> weightKey)\n        {\n            var items = itemsEnumerable.ToList();\n\n            var totalWeight = items.Sum(x => weightKey(x));\n            var randomWeightedIndex = UnityEngine.Random.Range(0, totalWeight);\n            var itemWeightedIndex = 0f;", "            foreach (var item in items)\n            {\n                itemWeightedIndex += weightKey(item);\n                if (randomWeightedIndex < itemWeightedIndex)\n                    return item;\n            }\n            throw new ArgumentException(\"Collection count and weights must be greater than 0\");\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/ConfigManager.cs", "chunked_list": ["\ufeffusing PluginConfig.API;\nusing PluginConfig.API.Fields;\nusing PluginConfig.API.Decorators;\nusing UnityEngine.UI;\nusing Ultrapain.Patches;\nusing UnityEngine;\nusing System.Runtime.InteropServices;\nusing System.Collections.Generic;\nusing System;\nusing BepInEx.Configuration;", "using System;\nusing BepInEx.Configuration;\nusing System.IO;\nusing PluginConfig.API.Functionals;\nusing System.Reflection;\nusing System.Text;\nusing static Ultrapain.ConfigManager;\n\nnamespace Ultrapain\n{", "namespace Ultrapain\n{\n    // Adds an image next to the given input field\n    public class ImageInputField : CustomConfigField\n    {\n        public Sprite sprite;\n        public Color color;\n        public ConfigField field;\n        private GameObject currentUI;\n        private Image currentImage;\n", "        private GameObject currentUI;\n        private Image currentImage;\n\n        private static FieldInfo f_IntField_currentUi = typeof(IntField).GetField(\"currentUi\", UnityUtils.instanceFlag);\n        private static FieldInfo f_FloatField_currentUi = typeof(FloatField).GetField(\"currentUi\", UnityUtils.instanceFlag);\n        private static FieldInfo f_StringField_currentUi = typeof(StringField).GetField(\"currentUi\", UnityUtils.instanceFlag);\n\n        private const float textAnchorX = 40f;\n        private const float fieldAnchorX = 230f;\n        private const float fieldAnchorY = -30f;\n        private const float fieldSizeX = 270f;\n\n        public ImageInputField(ConfigField field, Sprite sprite, Color color) : base(field.parentPanel, 0, 0)\n        {\n            this.field = field;\n            this.sprite = sprite;\n            this.color = color;\n", "        private const float fieldAnchorX = 230f;\n        private const float fieldAnchorY = -30f;\n        private const float fieldSizeX = 270f;\n\n        public ImageInputField(ConfigField field, Sprite sprite, Color color) : base(field.parentPanel, 0, 0)\n        {\n            this.field = field;\n            this.sprite = sprite;\n            this.color = color;\n\n            if (currentImage != null)\n            {\n                currentImage.sprite = sprite;\n                currentImage.color = color;\n\n                SetSize();\n            }\n        }\n", "            if (currentImage != null)\n            {\n                currentImage.sprite = sprite;\n                currentImage.color = color;\n\n                SetSize();\n            }\n        }\n\n        private void SetSize()\n        {\n            RectTransform imgRect = currentImage.GetComponent<RectTransform>();\n\n            float horizontalLength = sprite == null ? 100f : sprite.rect.width * (40f / sprite.rect.height);\n            imgRect.sizeDelta = new Vector2(horizontalLength, 40f);\n            imgRect.anchoredPosition = new Vector2(10f, 0f);\n\n            Text txt = currentUI.GetComponentInChildren<Text>();\n            InputField input = currentUI.GetComponentInChildren<InputField>();\n            RectTransform inputRect = input.GetComponent<RectTransform>();\n\n            float deltaPos = horizontalLength - 20f;", "        private void SetSize()\n        {\n            RectTransform imgRect = currentImage.GetComponent<RectTransform>();\n\n            float horizontalLength = sprite == null ? 100f : sprite.rect.width * (40f / sprite.rect.height);\n            imgRect.sizeDelta = new Vector2(horizontalLength, 40f);\n            imgRect.anchoredPosition = new Vector2(10f, 0f);\n\n            Text txt = currentUI.GetComponentInChildren<Text>();\n            InputField input = currentUI.GetComponentInChildren<InputField>();\n            RectTransform inputRect = input.GetComponent<RectTransform>();\n\n            float deltaPos = horizontalLength - 20f;", "            if (deltaPos > 0)\n            {\n                txt.GetComponent<RectTransform>().anchoredPosition = new Vector2(textAnchorX + deltaPos, 0);\n                inputRect.anchoredPosition = new Vector2(fieldAnchorX + deltaPos, fieldAnchorY);\n                inputRect.sizeDelta = new Vector2(fieldSizeX - deltaPos, inputRect.sizeDelta.y);\n            }\n            else\n            {\n                txt.GetComponent<RectTransform>().anchoredPosition = new Vector2(textAnchorX, 0);\n                inputRect.anchoredPosition = new Vector2(fieldAnchorX, fieldAnchorY);\n                inputRect.sizeDelta = new Vector2(fieldSizeX, inputRect.sizeDelta.y);\n            }\n        }\n", "        protected override void OnCreateUI(RectTransform fieldUI)\n        {\n            GameObject.Destroy(fieldUI.gameObject);\n\n            GameObject ui = null;\n            if (field is IntField intField)\n                ui = (GameObject)f_IntField_currentUi.GetValue(intField);\n            else if (field is FloatField floatField)\n                ui = (GameObject)f_FloatField_currentUi.GetValue(floatField);\n            else if (field is StringField stringField)\n                ui = (GameObject)f_StringField_currentUi.GetValue(stringField);\n            else\n                throw new Exception(\"Image field expected given field to be int, float or string field\");\n\n            currentUI = ui;\n", "            else if (field is StringField stringField)\n                ui = (GameObject)f_StringField_currentUi.GetValue(stringField);\n            else\n                throw new Exception(\"Image field expected given field to be int, float or string field\");\n\n            currentUI = ui;\n\n            if (ui == null)\n            {\n                Debug.LogWarning(\"Could not find float field ui\");\n                return;\n            }\n\n            GameObject img = new GameObject();\n            RectTransform imgRect = img.AddComponent<RectTransform>();\n            imgRect.SetParent(ui.transform);\n            imgRect.localScale = Vector3.one;\n            imgRect.pivot = new Vector2(0f, 0.5f);\n            imgRect.anchorMax = imgRect.anchorMin = new Vector2(0f, 0.5f);\n            \n            Image imgComp = currentImage = img.AddComponent<Image>();\n            imgComp.sprite = sprite;\n            imgComp.color = color;\n\n            SetSize();\n        }\n    }\n\n    // Separates fields by a small space", "    public class SpaceField : CustomConfigField\n    {\n        public const float defaultSpace = 10f;\n\n        public float space = defaultSpace;\n        public RectTransform currentUI;\n\n        public SpaceField(ConfigPanel panel, float space) : base(panel)\n        {\n            this.space = space;\n", "            if (currentUI != null)\n                currentUI.sizeDelta = new Vector2(currentUI.sizeDelta.x, space);\n        }\n\n        public SpaceField(ConfigPanel panel) : this(panel, defaultSpace) { }\n\n        protected override void OnCreateUI(RectTransform fieldUI)\n        {\n            currentUI = fieldUI;\n\n            fieldUI.sizeDelta = new Vector2(fieldUI.sizeDelta.x, space);\n        }\n    }\n", "    public static class ConfigManager\n    {\n        public static PluginConfigurator config = null;\n\n        public static void AddMissingPresets()\n        {\n            string presetFolder = Path.Combine(Plugin.workingDir, \"defaultpresets\");\n            if (!Directory.Exists(presetFolder))\n            {\n                Debug.LogWarning(\"UltraPain misses the default preset folder at \" + presetFolder);\n                return;\n            }\n", "            foreach (string filePath in Directory.GetFiles(presetFolder))\n            {\n                if (!filePath.EndsWith(\".config\"))\n                {\n                    Debug.LogWarning($\"Incorrect file format at {filePath}. Extension must be .config\");\n                    continue;\n                }\n\n                string fileName = Path.GetFileName(filePath);\n                fileName = fileName.Substring(0, fileName.Length - 7);\n                if (string.IsNullOrWhiteSpace(fileName))\n                    continue;\n\n                config.TryAddPreset(fileName, fileName, filePath);\n            }\n        }\n\n        // ROOT PANEL", "                if (string.IsNullOrWhiteSpace(fileName))\n                    continue;\n\n                config.TryAddPreset(fileName, fileName, filePath);\n            }\n        }\n\n        // ROOT PANEL\n        public static BoolField enemyTweakToggle;\n        private static ConfigPanel enemyPanel;\n        public static BoolField playerTweakToggle;", "        public static BoolField enemyTweakToggle;\n        private static ConfigPanel enemyPanel;\n        public static BoolField playerTweakToggle;\n        private static ConfigPanel playerPanel;\n        public static BoolField discordRichPresenceToggle;\n        public static BoolField steamRichPresenceToggle;\n        public static StringField pluginName;\n        public static StringMultilineField pluginInfo;\n        public static BoolField globalDifficultySwitch;\n        public static ConfigPanel memePanel;\n\n        // MEME PANEL", "        public static BoolField globalDifficultySwitch;\n        public static ConfigPanel memePanel;\n\n        // MEME PANEL\n        public static BoolField enrageSfxToggle;\n        public static BoolField funnyDruidKnightSFXToggle;\n        public static BoolField fleshObamiumToggle;\n        public static StringField fleshObamiumName;\n        public static BoolField obamapticonToggle;\n        public static StringField obamapticonName;\n\n        // PLAYER PANEL\n        \n        // PLAYER STAT EDITOR\n        // MOVEMENT", "        public static BoolField obamapticonToggle;\n        public static StringField obamapticonName;\n\n        // PLAYER PANEL\n        \n        // PLAYER STAT EDITOR\n        // MOVEMENT\n        public static ConfigPanel playerStatEditorPanel;\n        public static FloatField staminaRegSpeedMulti;\n\n        // REVOLVER", "        public static FloatField staminaRegSpeedMulti;\n\n        // REVOLVER\n        public static FloatField revolverDamage;\n        public static FloatField revolverAltDamage;\n        public static FloatField revolverFireRate;\n        public static FloatField revolverAltFireRate;\n\n        public static FloatField coinRegSpeedMulti;\n\n        public static FloatField chargedRevRegSpeedMulti;", "        public static FloatField coinRegSpeedMulti;\n\n        public static FloatField chargedRevRegSpeedMulti;\n        public static FloatField chargedRevDamage;\n        public static FloatField chargedAltRevDamage;\n        public static IntField chargedRevTotalHits;\n        public static IntField chargedAltRevTotalHits;\n        public static IntField chargedRevMaxHitsPerTarget;\n        public static IntField chargedAltRevMaxHitsPerTarget;\n\n        public static FloatField sharpshooterRegSpeedMulti;", "        public static IntField chargedAltRevMaxHitsPerTarget;\n\n        public static FloatField sharpshooterRegSpeedMulti;\n        public static FloatField sharpshooterDamage;\n        public static FloatField sharpshooterAltDamage;\n        public static IntField sharpshooterMaxHitsPerTarget;\n        public static IntField sharpshooterAltMaxHitsPerTarget;\n\n        // SHOTGUN\n        public static IntField shotgunBluePelletCount;\n        public static FloatField shotgunBlueDamagePerPellet;", "        public static IntField shotgunBluePelletCount;\n        public static FloatField shotgunBlueDamagePerPellet;\n        public static FloatField shotgunBlueSpreadAngle;\n\n        public static FloatField shotgunCoreExplosionSize;\n        public static FloatField shotgunCoreExplosionSpeed;\n        public static IntField shotgunCoreExplosionDamage;\n        public static IntField shotgunCoreExplosionPlayerDamage;\n\n        public static IntField shotgunGreenPump1Count;\n        public static FloatField shotgunGreenPump1Damage;", "        public static IntField shotgunGreenPump1Count;\n        public static FloatField shotgunGreenPump1Damage;\n        public static FloatField shotgunGreenPump1Spread;\n        public static IntField shotgunGreenPump2Count;\n        public static FloatField shotgunGreenPump2Damage;\n        public static FloatField shotgunGreenPump2Spread;\n        public static IntField shotgunGreenPump3Count;\n        public static FloatField shotgunGreenPump3Damage;\n        public static FloatField shotgunGreenPump3Spread;\n\n        public static FloatField shotgunGreenExplosionSize;", "        public static FloatField shotgunGreenPump3Spread;\n\n        public static FloatField shotgunGreenExplosionSize;\n        public static FloatField shotgunGreenExplosionSpeed;\n        public static IntField shotgunGreenExplosionDamage;\n        public static IntField shotgunGreenExplosionPlayerDamage;\n\n        // NAILGUN/SAW LAUNCHER\n        public static FloatField nailgunBlueDamage;\n        public static FloatField nailgunGreenDamage;\n        public static FloatField nailgunGreenBurningDamage;\n", "        public static FloatField nailgunBlueDamage;\n        public static FloatField nailgunGreenDamage;\n        public static FloatField nailgunGreenBurningDamage;\n\n        public static FloatField sawBlueDamage;\n        public static FloatField sawBlueHitAmount;\n        public static FloatField sawGreenDamage;\n        public static FloatField sawGreenHitAmount;\n        public static FloatField sawGreenBurningDamage;\n        public static FloatField sawGreenBurningHitAmount;\n", "        public static FloatField sawGreenBurningDamage;\n        public static FloatField sawGreenBurningHitAmount;\n\n        public static FloatField nailgunAmmoRegSpeedMulti;\n        public static FloatField sawAmmoRegSpeedMulti;\n        public static FloatField nailgunHeatsinkRegSpeedMulti;\n        public static FloatField sawHeatsinkRegSpeedMulti;\n\n        // RAILCANNON\n        public static FloatField railcannonRegSpeedMulti;\n        public static FloatField electricCannonDamageMulti;", "        public static FloatField railcannonRegSpeedMulti;\n        public static FloatField electricCannonDamageMulti;\n        public static FloatField malCannonExpSizeMulti;\n        public static FloatField malCannonExpDamageMulti;\n        public static FloatField screwdriverDamageMulti;\n        public static FloatField screwdriverLengthMulti;\n\n        // ROCKET LAUNCHER\n        public static FloatField rocketExpSizeMulti;\n        public static FloatField rocketExpDamageMulti;\n        public static FloatField rocketExpSuperSizeMulti;", "        public static FloatField rocketExpSizeMulti;\n        public static FloatField rocketExpDamageMulti;\n        public static FloatField rocketExpSuperSizeMulti;\n        public static FloatField rocketExpSuperDamageMulti;\n\n        public static FloatField rocketFreezeRegSpeedMulti;\n        public static FloatField rocketCannonballRegSpeedMulti;\n\n        // PLAYER HEALTH\n        public static IntField maxPlayerHp;\n        public static IntField playerHpSupercharge;", "        public static IntField maxPlayerHp;\n        public static IntField playerHpSupercharge;\n        public static FloatSliderField hardDamagePercent;\n        public static IntField whiplashHardDamageCap;\n        public static FloatField whiplashHardDamageSpeed;\n        public static BoolField playerHpDeltaToggle;\n        public static IntField playerHpDeltaAmount;\n        public static IntField playerHpDeltaLimit;\n        public static FloatField playerHpDeltaDelay;\n        public static BoolField playerHpDeltaHurtAudio;\n        public static BoolField playerHpDeltaCalm;", "        public static FloatField playerHpDeltaDelay;\n        public static BoolField playerHpDeltaHurtAudio;\n        public static BoolField playerHpDeltaCalm;\n        public static BoolField playerHpDeltaCombat;\n        public static BoolField playerHpDeltaCybergrind;\n        public static BoolField playerHpDeltaSandbox;\n      \n        public static BoolField rocketBoostToggle;\n        public static BoolField rocketBoostAlwaysExplodesToggle;\n        public static FloatField rocketBoostDamageMultiplierPerHit;\n        public static FloatField rocketBoostSizeMultiplierPerHit;", "        public static BoolField rocketBoostAlwaysExplodesToggle;\n        public static FloatField rocketBoostDamageMultiplierPerHit;\n        public static FloatField rocketBoostSizeMultiplierPerHit;\n        public static FloatField rocketBoostSpeedMultiplierPerHit;\n        public static FormattedStringField rocketBoostStyleText;\n        public static IntField rocketBoostStylePoints;\n\n        public static BoolField rocketGrabbingToggle;\n\n        public static BoolField grenadeBoostToggle;\n        public static FloatField grenadeBoostDamageMultiplier;", "        public static BoolField grenadeBoostToggle;\n        public static FloatField grenadeBoostDamageMultiplier;\n        public static FloatField grenadeBoostSizeMultiplier;\n        public static FormattedStringField grenadeBoostStyleText;\n        public static IntField grenadeBoostStylePoints;\n\n        public static BoolField orbStrikeToggle;\n        public static FloatField orbStrikeMinDistance;\n\n        // REVOLVER BEAM ORBITAL\n        public static FormattedStringField orbStrikeRevolverStyleText;", "        public static FormattedStringField orbStrikeRevolverStyleText;\n        public static IntField orbStrikeRevolverStylePoint;\n        public static BoolField orbStrikeRevolverGrenade;\n        public static FloatField orbStrikeRevolverGrenadeExtraSize;\n        public static FloatField orbStrikeRevolverGrenadeExtraDamage;\n        public static BoolField orbStrikeRevolverExplosion;\n        public static FloatField orbStrikeRevolverExplosionDamage;\n        public static FloatField orbStrikeRevolverExplosionSize;\n\n        // CHARGED BEAM ORBITAL\n        public static FormattedStringField orbStrikeRevolverChargedStyleText;", "        public static FormattedStringField orbStrikeRevolverChargedStyleText;\n        public static IntField orbStrikeRevolverChargedStylePoint;\n        public static BoolField orbStrikeRevolverChargedGrenade;\n        public static FloatField orbStrikeRevolverChargedGrenadeExtraSize;\n        public static FloatField orbStrikeRevolverChargedGrenadeExtraDamage;\n        public static BoolField orbStrikeRevolverChargedInsignia;\n        public static FloatField orbStrikeRevolverChargedInsigniaDelayBoost;\n        public static IntField orbStrikeRevolverChargedInsigniaDamage;\n        public static FloatField orbStrikeRevolverChargedInsigniaSize;\n\n        // ELECTRIC RAIL CANNON", "        public static FloatField orbStrikeRevolverChargedInsigniaSize;\n\n        // ELECTRIC RAIL CANNON\n        public static FormattedStringField orbStrikeElectricCannonStyleText;\n        public static IntField orbStrikeElectricCannonStylePoint;\n        public static BoolField orbStrikeElectricCannonGrenade;\n        public static FloatField orbStrikeElectricCannonGrenadeExtraSize;\n        public static FloatField orbStrikeElectricCannonGrenadeExtraDamage;\n        public static BoolField orbStrikeElectricCannonExplosion;\n        public static FloatField orbStrikeElectricCannonExplosionDamage;\n        public static FloatField orbStrikeElectricCannonExplosionSize;\n\n        // MALICIOUS CANNON", "        public static BoolField orbStrikeElectricCannonExplosion;\n        public static FloatField orbStrikeElectricCannonExplosionDamage;\n        public static FloatField orbStrikeElectricCannonExplosionSize;\n\n        // MALICIOUS CANNON\n        public static FormattedStringField orbStrikeMaliciousCannonStyleText;\n        public static IntField orbStrikeMaliciousCannonStylePoint;\n        public static BoolField orbStrikeMaliciousCannonGrenade;\n        public static FloatField orbStrikeMaliciousCannonGrenadeExtraSize;\n        public static FloatField orbStrikeMaliciousCannonGrenadeExtraDamage;\n        public static BoolField orbStrikeMaliciousCannonExplosion;", "        public static FloatField orbStrikeMaliciousCannonGrenadeExtraSize;\n        public static FloatField orbStrikeMaliciousCannonGrenadeExtraDamage;\n        public static BoolField orbStrikeMaliciousCannonExplosion;\n        public static FloatField orbStrikeMaliciousCannonExplosionDamageMultiplier;\n        public static FloatField orbStrikeMaliciousCannonExplosionSizeMultiplier;\n        \n        // MALICIOUS CHARGEBACK\n        public static FormattedStringField maliciousChargebackStyleText;\n        public static IntField maliciousChargebackStylePoint;\n        public static BoolField maliciousChargebackExplosionToggle;\n        public static FloatField maliciousChargebackExplosionSizeMultiplier;", "        public static IntField maliciousChargebackStylePoint;\n        public static BoolField maliciousChargebackExplosionToggle;\n        public static FloatField maliciousChargebackExplosionSizeMultiplier;\n        public static FloatField maliciousChargebackExplosionDamageMultiplier;\n\n        // SENTRY CHARGEBACK\n        public static FormattedStringField sentryChargebackStyleText;\n        public static IntField sentryChargebackStylePoint;\n        public static IntField sentryChargebackExtraBeamCount;\n\n        // ENEMY PANEL", "        public static IntField sentryChargebackExtraBeamCount;\n\n        // ENEMY PANEL\n        public static ConfigPanel globalEnemyPanel;\n        public static ConfigPanel cerberusPanel;\n        public static ConfigPanel dronePanel;\n        public static ConfigPanel filthPanel;\n        public static ConfigPanel hideousMassPanel;\n        public static ConfigPanel maliciousFacePanel;\n        public static ConfigPanel mindflayerPanel;\n        public static ConfigPanel schismPanel;", "        public static ConfigPanel maliciousFacePanel;\n        public static ConfigPanel mindflayerPanel;\n        public static ConfigPanel schismPanel;\n        public static ConfigPanel soliderPanel;\n        public static ConfigPanel stalkerPanel;\n        public static ConfigPanel strayPanel;\n        public static ConfigPanel streetCleanerPanel;\n        public static ConfigPanel swordsMachinePanel;\n        public static ConfigPanel virtuePanel;\n        public static ConfigPanel ferrymanPanel;\n        public static ConfigPanel turretPanel;", "        public static ConfigPanel virtuePanel;\n        public static ConfigPanel ferrymanPanel;\n        public static ConfigPanel turretPanel;\n        public static ConfigPanel fleshPrisonPanel;\n        public static ConfigPanel minosPrimePanel;\n        public static ConfigPanel v2FirstPanel;\n        public static ConfigPanel v2SecondPanel;\n        public static ConfigPanel sisyInstPanel;\n        public static ConfigPanel leviathanPanel;\n        public static ConfigPanel somethingWickedPanel;\n        public static ConfigPanel panopticonPanel;", "        public static ConfigPanel leviathanPanel;\n        public static ConfigPanel somethingWickedPanel;\n        public static ConfigPanel panopticonPanel;\n        public static ConfigPanel idolPanel;\n\n        // GLOBAL ENEMY CONFIG\n        public static BoolField friendlyFireDamageOverrideToggle;\n        public static FloatSliderField friendlyFireDamageOverrideExplosion;\n        public static FloatSliderField friendlyFireDamageOverrideProjectile;\n        public static FloatSliderField friendlyFireDamageOverrideFire;\n        public static FloatSliderField friendlyFireDamageOverrideMelee;\n\n        // ENEMY STAT CONFIG", "        public static FloatSliderField friendlyFireDamageOverrideProjectile;\n        public static FloatSliderField friendlyFireDamageOverrideFire;\n        public static FloatSliderField friendlyFireDamageOverrideMelee;\n\n        // ENEMY STAT CONFIG\n        public static char resistanceSeparator = (char)1;\n        public struct EidStatContainer\n        {\n            public FloatField health;\n            public FloatField damage;\n            public FloatField speed;", "            public FloatField health;\n            public FloatField damage;\n            public FloatField speed;\n            public StringField resistanceStr;\n            public Dictionary<string, float> resistanceDict;\n\n            public void SetHidden(bool hidden)\n            {\n                health.hidden = damage.hidden = speed.hidden = hidden;\n            }\n        }\n        ", "        public static Dictionary<EnemyType, float> defaultEnemyHealth = new Dictionary<EnemyType, float>()\n        {\n            { EnemyType.MinosPrime, 2f },\n            { EnemyType.V2, 2f },\n            { EnemyType.V2Second, 2f },\n        };\n        public static Dictionary<EnemyType, float> defaultEnemySpeed = new Dictionary<EnemyType, float>()\n        {\n            { EnemyType.MinosPrime, 1.2f },\n            { EnemyType.V2, 1.25f },\n            { EnemyType.V2Second, 1.25f },\n            { EnemyType.Schism, 1.2f }\n        };", "        public static Dictionary<EnemyType, float> defaultEnemyDamage = new Dictionary<EnemyType, float>()\n        {\n\n        };\n        \n        public enum HitterType\n        {\n            revolver,\n            coin,\n            shotgun,\n            shotgunzone,\n            nail,\n            harpoon,\n            sawblade,\n            railcannon,\n            drill,\n            cannonball,\n            punch,\n            heavypunch,\n            hook,\n            ground_slam,\n\n            explosion,\n            fire,\n            acid,\n            environment,\n            projectile\n        }", "        public static Dictionary<HitterType, string> hitterDisplayNames = new Dictionary<HitterType, string>()\n        {\n            { HitterType.revolver, \"Revolver\" },\n            { HitterType.coin, \"Fistful of dollar\" },\n            { HitterType.shotgun, \"Shotgun pellet\" },\n            { HitterType.shotgunzone, \"Shotgun close\" },\n            { HitterType.nail, \"Nail\" },\n            { HitterType.harpoon, \"Magnet\" },\n            { HitterType.sawblade, \"Sawblade\" },\n            { HitterType.railcannon, \"Electric railcannon\" },\n            { HitterType.drill, \"Drill\" },\n            { HitterType.cannonball, \"Cannonball\" },\n            { HitterType.punch, \"Feedbacker\" },\n            { HitterType.heavypunch, \"Knuckleblaster\" },\n            { HitterType.hook, \"Whiplash hook\" },\n            { HitterType.ground_slam, \"Ground slam\" },\n            { HitterType.explosion, \"Explosion\" },\n            { HitterType.fire, \"Fire\" },\n            { HitterType.acid, \"Acid\" },\n            { HitterType.environment, \"Environment\" },\n            { HitterType.projectile, \"Projectile\" },\n        };\n", "        public static ConfigPanel eidStatEditorPanel;\n        public static EnumField<EnemyType> eidStatEditorSelector;\n        public static Dictionary<EnemyType, EidStatContainer> enemyStats = new Dictionary<EnemyType, EidStatContainer>();\n        public static EnumField<HitterType> eidResistanceSelector;\n        public static BoolField eidResistanceEnabled;\n        public static FloatField eidResistanceField;\n        public static ConfigHeader eidResistanceInfo;\n\n        // SCREWDRIVER\n        public static BoolField screwDriverSplitToggle;\n        public static IntField screwDriverCoinSplitCount;", "        public static BoolField screwDriverSplitToggle;\n        public static IntField screwDriverCoinSplitCount;\n        public static IntField screwDriverGrenadeSplitCount;\n\n        public static BoolField screwDriverHomeToggle;\n        public static BoolField screwDriverHomeDestroyMagnets;\n        public static FloatField screwDriverHomePierceDamage;\n\n        // CERBERUS\n        public static BoolField cerberusDashToggle;\n        public static IntField cerberusTotalDashCount;", "        public static BoolField cerberusDashToggle;\n        public static IntField cerberusTotalDashCount;\n        public static BoolField cerberusParryable;\n        public static FloatField cerberusParryableDuration;\n        public static IntField cerberusParryDamage;\n\n        // DRONE\n        public static BoolField droneProjectileToggle;\n        public static FloatField droneProjectileDelay;\n        public static FloatSliderField droneProjectileChance;\n        public static BoolField droneExplosionBeamToggle;", "        public static FloatField droneProjectileDelay;\n        public static FloatSliderField droneProjectileChance;\n        public static BoolField droneExplosionBeamToggle;\n        public static FloatField droneExplosionBeamDelay;\n        public static FloatSliderField droneExplosionBeamChance;\n        public static BoolField droneSentryBeamToggle;\n        public static FloatField droneSentryBeamDelay;\n        public static FloatSliderField droneSentryBeamChance;\n        public static FloatField droneSentryBeamDamage;\n        public static BoolField droneDrawSentryBeamLine;\n        public static ColorField droneSentryBeamLineNormalColor;", "        public static FloatField droneSentryBeamDamage;\n        public static BoolField droneDrawSentryBeamLine;\n        public static ColorField droneSentryBeamLineNormalColor;\n        public static ColorField droneSentryBeamLineWarningColor;\n        public static FloatField droneSentryBeamLineIndicatorDelay;\n        public static BoolField droneHomeToggle;\n        public static FloatField droneHomeTurnSpeed;\n\n        // FILTH\n        public static BoolField filthExplodeToggle;\n        public static BoolField filthExplodeKills;", "        public static BoolField filthExplodeToggle;\n        public static BoolField filthExplodeKills;\n        public static IntField filthExplosionDamage;\n        public static FloatField filthExplosionSize;\n\n        // HIDEOUS MASS\n        public static BoolField hideousMassInsigniaToggle;\n        public static FloatField hideousMassInsigniaSpeed;\n        public static BoolField hideousMassInsigniaYtoggle;\n        public static FloatField hideousMassInsigniaYsize;\n        public static IntField hideousMassInsigniaYdamage;", "        public static BoolField hideousMassInsigniaYtoggle;\n        public static FloatField hideousMassInsigniaYsize;\n        public static IntField hideousMassInsigniaYdamage;\n        public static BoolField hideousMassInsigniaZtoggle;\n        public static FloatField hideousMassInsigniaZsize;\n        public static IntField hideousMassInsigniaZdamage;\n        public static BoolField hideousMassInsigniaXtoggle;\n        public static FloatField hideousMassInsigniaXsize;\n        public static IntField hideousMassInsigniaXdamage;\n\n        // VIRTUE", "        public static IntField hideousMassInsigniaXdamage;\n\n        // VIRTUE\n        public enum VirtueAttackType\n        {\n            Insignia,\n            LighningBolt\n        }\n        public static BoolField virtueTweakNormalAttackToggle;\n        public static EnumField<VirtueAttackType> virtueNormalAttackType;\n", "        public static BoolField virtueTweakNormalAttackToggle;\n        public static EnumField<VirtueAttackType> virtueNormalAttackType;\n\n        public static FloatField virtueNormalInsigniaLastMulti;\n        public static BoolField virtueNormalInsigniaXtoggle;\n        public static FloatField virtueNormalInsigniaXsize;\n        public static IntField virtueNormalInsigniaXdamage;\n        public static BoolField virtueNormalInsigniaYtoggle;\n        public static FloatField virtueNormalInsigniaYsize;\n        public static IntField virtueNormalInsigniaYdamage;\n        public static BoolField virtueNormalInsigniaZtoggle;", "        public static FloatField virtueNormalInsigniaYsize;\n        public static IntField virtueNormalInsigniaYdamage;\n        public static BoolField virtueNormalInsigniaZtoggle;\n        public static FloatField virtueNormalInsigniaZsize;\n        public static IntField virtueNormalInsigniaZdamage;\n\n        public static FloatField virtueNormalLightningDamage;\n        public static FloatField virtueNormalLightningDelay;\n\n        public static BoolField virtueTweakEnragedAttackToggle;\n        public static EnumField<VirtueAttackType> virtueEnragedAttackType;\n", "        public static BoolField virtueTweakEnragedAttackToggle;\n        public static EnumField<VirtueAttackType> virtueEnragedAttackType;\n\n        public static FloatField virtueEnragedInsigniaLastMulti;\n        public static BoolField virtueEnragedInsigniaXtoggle;\n        public static FloatField virtueEnragedInsigniaXsize;\n        public static IntField virtueEnragedInsigniaXdamage;\n        public static BoolField virtueEnragedInsigniaYtoggle;\n        public static FloatField virtueEnragedInsigniaYsize;\n        public static IntField virtueEnragedInsigniaYdamage;\n        public static BoolField virtueEnragedInsigniaZtoggle;", "        public static FloatField virtueEnragedInsigniaYsize;\n        public static IntField virtueEnragedInsigniaYdamage;\n        public static BoolField virtueEnragedInsigniaZtoggle;\n        public static FloatField virtueEnragedInsigniaZsize;\n        public static IntField virtueEnragedInsigniaZdamage;\n\n        public static FloatField virtueEnragedLightningDamage;\n        public static FloatField virtueEnragedLightningDelay;\n\n        // MALICIOUS FACE\n        public static BoolField maliciousFaceRadianceOnEnrage;", "        public static BoolField maliciousFaceRadianceOnEnrage;\n        public static IntField maliciousFaceRadianceAmount;\n        public static BoolField maliciousFaceHomingProjectileToggle;\n        public static IntField maliciousFaceHomingProjectileCount;\n        public static IntField maliciousFaceHomingProjectileDamage;\n        public static FloatField maliciousFaceHomingProjectileTurnSpeed;\n        public static FloatField maliciousFaceHomingProjectileSpeed;\n        public static IntField maliciousFaceBeamCountNormal;\n        public static IntField maliciousFaceBeamCountEnraged;\n\n        // MINDFLAYER", "        public static IntField maliciousFaceBeamCountEnraged;\n\n        // MINDFLAYER\n        public static BoolField mindflayerShootTweakToggle;\n        public static IntField mindflayerShootAmount;\n        public static FloatField mindflayerShootDelay;\n        public static FloatField mindflayerShootInitialSpeed;\n        public static FloatField mindflayerShootTurnSpeed;\n        public static FloatSliderField mindflayerProjectileSelfDamageMultiplier;\n        public static BoolField mindflayerTeleportComboToggle;\n\n        // SCHISM", "        public static FloatSliderField mindflayerProjectileSelfDamageMultiplier;\n        public static BoolField mindflayerTeleportComboToggle;\n\n        // SCHISM\n        public static BoolField schismSpreadAttackToggle;\n        public static FloatSliderField schismSpreadAttackAngle;\n        public static IntField schismSpreadAttackCount;\n\n        // SOLIDER\n        public static BoolField soliderCoinsIgnoreWeakPointToggle;\n        public static BoolField soliderShootTweakToggle;", "        public static BoolField soliderCoinsIgnoreWeakPointToggle;\n        public static BoolField soliderShootTweakToggle;\n        public static IntField soliderShootCount;\n        public static BoolField soliderShootGrenadeToggle;\n        public static IntField soliderGrenadeDamage;\n        public static FloatField soliderGrenadeSize;\n\n        // STALKER\n        public static BoolField stalkerSurviveExplosion;\n        public static BoolField stalkerSpreadHealthRad;\n        public static IntField stalkerSpreadHealthAddition;", "        public static BoolField stalkerSurviveExplosion;\n        public static BoolField stalkerSpreadHealthRad;\n        public static IntField stalkerSpreadHealthAddition;\n        public static BoolField stalkerSpreadDamageRad;\n        public static IntField stalkerSpreadDamageAddition;\n        public static BoolField stalkerSpreadSpeedRad;\n        public static IntField stalkerSpreadSpeedAddition;\n\n        // STRAY\n        public static BoolField strayShootToggle;\n        public static IntField strayShootCount;", "        public static BoolField strayShootToggle;\n        public static IntField strayShootCount;\n        public static FloatField strayShootSpeed;\n        public static BoolField strayCoinsIgnoreWeakPointToggle;\n\n        // STREET CLEANER\n        public static BoolField streetCleanerPredictiveDodgeToggle;\n        public static BoolField streetCleanerCoinsIgnoreWeakPointToggle;\n\n        // SWORDS MACHINE\n        public enum SwordsMachineSecondPhase\n        {\n            None,\n            SpeedUp,\n            Skip\n        }", "        public enum SwordsMachineSecondPhase\n        {\n            None,\n            SpeedUp,\n            Skip\n        }\n        public static BoolField swordsMachineNoLightKnockbackToggle;\n        public static EnumField<SwordsMachineSecondPhase> swordsMachineSecondPhaseMode;\n        public static FloatField swordsMachineSecondPhaseSpeed;\n        public static BoolField swordsMachineExplosiveSwordToggle;\n        public static IntField swordsMachineExplosiveSwordDamage;", "        public static FloatField swordsMachineSecondPhaseSpeed;\n        public static BoolField swordsMachineExplosiveSwordToggle;\n        public static IntField swordsMachineExplosiveSwordDamage;\n        public static FloatField swordsMachineExplosiveSwordSize;\n\n        // FERRYMAN\n        public static BoolField ferrymanComboToggle;\n        public static IntField ferrymanComboCount;\n        public static FloatField ferrymanAttackDelay;\n\n        // TURRET", "        public static FloatField ferrymanAttackDelay;\n\n        // TURRET\n        public static BoolField turretBurstFireToggle;\n        public static IntField turretBurstFireCount;\n        public static FloatField turretBurstFireDelay;\n\n        // FLESH PRISON\n        public static BoolField fleshPrisonSpinAttackToggle;\n        public static IntField fleshPrisonSpinAttackCount;\n        public static FloatField fleshPrisonSpinAttackTurnSpeed;", "        public static BoolField fleshPrisonSpinAttackToggle;\n        public static IntField fleshPrisonSpinAttackCount;\n        public static FloatField fleshPrisonSpinAttackTurnSpeed;\n        public static FloatField fleshPrisonSpinAttackActivateSpeed;\n        public static FloatField fleshPrisonSpinAttackSize;\n        public static IntField fleshPrisonSpinAttackDamage;\n        public static FloatField fleshPrisonSpinAttackDistance;\n\n        // MINOS PRIME\n        public static BoolField minosPrimeEarlyPhaseToggle;\n        public static BoolField minosPrimeComboToggle;", "        public static BoolField minosPrimeEarlyPhaseToggle;\n        public static BoolField minosPrimeComboToggle;\n        public static BoolField minosPrimeRandomTeleportToggle;\n        public static FloatField minosPrimeRandomTeleportMinDistance;\n        public static FloatField minosPrimeRandomTeleportMaxDistance;\n        public static BoolField minosPrimeTeleportTrail;\n        public static FloatField minosPrimeTeleportTrailDuration;\n\n        public static BoolField minosPrimeExplosionToggle;\n        public static FloatSliderField minosPrimeExplosionChance;\n        public static FloatField minosPrimeExplosionWindupSpeed;", "        public static BoolField minosPrimeExplosionToggle;\n        public static FloatSliderField minosPrimeExplosionChance;\n        public static FloatField minosPrimeExplosionWindupSpeed;\n        public static FloatField minosPrimeExplosionSize;\n        public static FloatField minosPrimeExplosionDamage;\n\n        public static BoolField minosPrimeCrushAttackToggle;\n        public static FloatSliderField minosPrimeCrushAttackChance;\n\n        public static BoolField minosPrimeComboExplosiveEndToggle;\n        public static FloatSliderField minosPrimeComboExplosiveEndChance;\n", "        public static BoolField minosPrimeComboExplosiveEndToggle;\n        public static FloatSliderField minosPrimeComboExplosiveEndChance;\n\n        public static BoolField minosPrimeComboExplosionToggle;\n        public static FloatField minosPrimeComboExplosionSize;\n        public static FloatField minosPrimeComboExplosionDamage;\n\n        // V2 - FIRST\n        public static BoolField v2FirstKnuckleBlasterToggle;\n        public static BoolField v2FirstKnuckleBlasterHitPlayerToggle;\n        public static FloatField v2FirstKnuckleBlasterHitPlayerMinDistance;", "        public static BoolField v2FirstKnuckleBlasterToggle;\n        public static BoolField v2FirstKnuckleBlasterHitPlayerToggle;\n        public static FloatField v2FirstKnuckleBlasterHitPlayerMinDistance;\n        public static IntField v2FirstKnuckleBlasterHitDamage;\n        public static BoolField v2FirstKnuckleBlasterDeflectShotgunToggle;\n        public static FloatField v2FirstKnuckleBlasterCooldown;\n        public static IntField v2FirstKnuckleBlasterExplosionDamage;\n        public static FloatField v2FirstKnuckleBlasterSize;\n        public static FloatField v2FirstKnuckleBlasterSpeed;\n\n        public static BoolField v2FirstCoreSnipeToggle;", "        public static FloatField v2FirstKnuckleBlasterSpeed;\n\n        public static BoolField v2FirstCoreSnipeToggle;\n        public static FloatField v2FirstCoreSnipeMaxDistanceToPlayer;\n        public static FloatField v2FirstCoreSnipeMinDistanceToV2;\n        public static FloatField v2FirstCoreSnipeReactionTime;\n\n        public static BoolField v2FirstSharpshooterToggle;\n        public static FloatSliderField v2FirstSharpshooterChance;\n        public static FloatSliderField v2FirstSharpshooterAutoaimAngle;\n        public static IntField v2FirstSharpshooterReflections;", "        public static FloatSliderField v2FirstSharpshooterChance;\n        public static FloatSliderField v2FirstSharpshooterAutoaimAngle;\n        public static IntField v2FirstSharpshooterReflections;\n        public static FloatField v2FirstSharpshooterDamage;\n        public static FloatField v2FirstSharpshooterSpeed;\n\n        // V2 - SECOND\n        public static BoolField v2SecondStartEnraged;\n        public static BoolField v2SecondRocketLauncherToggle;\n        public static BoolField v2SecondFastCoinToggle;\n        public static FloatField v2SecondFastCoinShootDelay;", "        public static BoolField v2SecondRocketLauncherToggle;\n        public static BoolField v2SecondFastCoinToggle;\n        public static FloatField v2SecondFastCoinShootDelay;\n        public static FloatField v2SecondFastCoinThrowDelay;\n        public static BoolField v2SecondCoinRailcannon;\n        public static FloatField v2SecondCoinRailcannonCooldown;\n\n        public static BoolField v2SecondMalCannonSnipeToggle;\n        public static FloatField v2SecondMalCannonSnipeCooldown;\n        public static FloatField v2SecondMalCannonSnipeReactTime;\n        public static FloatField v2SecondMalCannonSnipeMaxDistanceToPlayer;", "        public static FloatField v2SecondMalCannonSnipeCooldown;\n        public static FloatField v2SecondMalCannonSnipeReactTime;\n        public static FloatField v2SecondMalCannonSnipeMaxDistanceToPlayer;\n        public static FloatField v2SecondMalCannonSnipeMinDistanceToV2;\n\n        public static BoolField v2SecondCoreSnipeToggle;\n        public static FloatField v2SecondCoreSnipeMaxDistanceToPlayer;\n        public static FloatField v2SecondCoreSnipeMinDistanceToV2;\n        public static FloatField v2SecondCoreSnipeReactionTime;\n\n        public static BoolField v2SecondSharpshooterToggle;", "        public static FloatField v2SecondCoreSnipeReactionTime;\n\n        public static BoolField v2SecondSharpshooterToggle;\n        public static FloatSliderField v2SecondSharpshooterChance;\n        public static FloatSliderField v2SecondSharpshooterAutoaimAngle;\n        public static IntField v2SecondSharpshooterReflections;\n        public static FloatField v2SecondSharpshooterDamage;\n        public static FloatField v2SecondSharpshooterSpeed;\n\n        // SISYPHIUS INSTRUCTIONIST\n        public static BoolField sisyInstBoulderShockwave;", "        public static BoolField sisyInstBoulderShockwave;\n        public static FloatField sisyInstBoulderShockwaveSize;\n        public static FloatField sisyInstBoulderShockwaveSpeed;\n        public static IntField sisyInstBoulderShockwaveDamage;\n\n        public static BoolField sisyInstJumpShockwave;\n        public static FloatField sisyInstJumpShockwaveSize;\n        public static FloatField sisyInstJumpShockwaveSpeed;\n        public static IntField sisyInstJumpShockwaveDamage;\n\n        public static BoolField sisyInstStrongerExplosion;", "        public static IntField sisyInstJumpShockwaveDamage;\n\n        public static BoolField sisyInstStrongerExplosion;\n        public static FloatField sisyInstStrongerExplosionSizeMulti;\n        public static FloatField sisyInstStrongerExplosionDamageMulti;\n\n        // ADD ME\n        // LEVIATHAN\n        public static BoolField leviathanSecondPhaseBegin;\n\n        public static BoolField leviathanProjectileMixToggle;", "        public static BoolField leviathanSecondPhaseBegin;\n\n        public static BoolField leviathanProjectileMixToggle;\n        public static FloatSliderField leviathanProjectileBlueChance;\n        public static FloatSliderField leviathanProjectileYellowChance;\n\n        public static IntField leviathanProjectileCount;\n        public static FloatField leviathanProjectileDensity;\n        public static FloatSliderField leviathanProjectileFriendlyFireDamageMultiplier;\n\n        public static BoolField leviathanChargeAttack;", "        public static FloatSliderField leviathanProjectileFriendlyFireDamageMultiplier;\n\n        public static BoolField leviathanChargeAttack;\n        public static FloatSliderField leviathanChargeChance;\n        public static FloatField leviathanChargeSizeMulti;\n        public static FloatField leviathanChargeDamageMulti;\n        public static IntField leviathanChargeCount;\n        public static FloatField leviathanChargeDelay;\n        public static BoolField leviathanChargeHauntRocketRiding;\n\n        public static IntField leviathanTailComboCount;\n\n        // SOMETHING WICKED", "        public static BoolField leviathanChargeHauntRocketRiding;\n\n        public static IntField leviathanTailComboCount;\n\n        // SOMETHING WICKED\n        public static BoolField somethingWickedSpear;\n        public static BoolField somethingWickedSpawnOn43;\n\n        // PANOPTICON\n        public static BoolField panopticonFullPhase;\n        public static BoolField panopticonBalanceEyes;", "        public static BoolField panopticonFullPhase;\n        public static BoolField panopticonBalanceEyes;\n        public static BoolField panopticonBlackholeProj;\n        public static BoolField panopticonAxisBeam;\n        public static FloatField panopticonAxisBeamSizeMulti;\n\n        public static BoolField panopticonSpinAttackToggle;\n        public static IntField panopticonSpinAttackCount;\n        public static FloatField panopticonSpinAttackTurnSpeed;\n        public static FloatField panopticonSpinAttackActivateSpeed;\n        public static FloatField panopticonSpinAttackSize;", "        public static FloatField panopticonSpinAttackTurnSpeed;\n        public static FloatField panopticonSpinAttackActivateSpeed;\n        public static FloatField panopticonSpinAttackSize;\n        public static IntField panopticonSpinAttackDamage;\n        public static FloatField panopticonSpinAttackDistance;\n\n        public static BoolField panopticonBlueProjToggle;\n        public static IntField panopticonBlueProjCount;\n        public static FloatField panopticonBlueProjDamage;\n        public static FloatField panopticonBlueProjTurnSpeed;\n        public static FloatField panopticonBlueProjInitialSpeed;\n      \n        // IDOL", "        public static FloatField panopticonBlueProjDamage;\n        public static FloatField panopticonBlueProjTurnSpeed;\n        public static FloatField panopticonBlueProjInitialSpeed;\n      \n        // IDOL\n        public static BoolField idolExplosionToggle;\n        public enum IdolExplosionType\n        {\n            Normal,\n            Big,\n            Ligthning,\n            Sisyphean,\n            Sand\n        }", "        public static EnumField<IdolExplosionType> idolExplodionType;\n        public static FloatField idolExplosionSizeMultiplier;\n        public static FloatField idolExplosionDamageMultiplier;\n        public static FloatSliderField idolExplosionEnemyDamagePercent;\n\n        /////////// ADD MEEEE\n        // GABRIEL SECOND\n        public static BoolField gabriSecondP1Chaos;\n        public static IntField gabriSecondP1ChaosCount;\n\n        private static bool dirtyField = false;", "        public static IntField gabriSecondP1ChaosCount;\n\n        private static bool dirtyField = false;\n        public static void Initialize()\n        {\n            if (config != null)\n                return;\n\n            config = PluginConfigurator.Create(\"ULTRAPAIN\", Plugin.PLUGIN_GUID);\n            string iconPath = Path.Combine(Plugin.workingDir, \"icon.png\");\n            if (File.Exists(iconPath))\n                config.SetIconWithURL(iconPath);\n            config.postConfigChange += () =>\n            {", "            if (File.Exists(iconPath))\n                config.SetIconWithURL(iconPath);\n            config.postConfigChange += () =>\n            {\n                if (dirtyField)\n                {\n                    Plugin.PatchAll();\n                    dirtyField = false;\n                }\n            };\n\n            // ROOT PANEL\n            ButtonArrayField buttons = new ButtonArrayField(config.rootPanel, \"buttons\", 2, new float[] { 0.5f, 0.5f }, new string[] { \"Bug Report\", \"Feature Request\" });\n            buttons.OnClickEventHandler(0).onClick += () => Application.OpenURL(\"https://github.com/eternalUnion/UltraPain/issues/new?assignees=eternalUnion&labels=bug&projects=&template=bug-report.md&title=%5BBUG%5D+Bug+name+here\");\n            buttons.OnClickEventHandler(1).onClick += () => Application.OpenURL(\"https://github.com/eternalUnion/UltraPain/issues/new?assignees=eternalUnion&labels=feature+request&projects=&template=feature-request.md&title=%5BFEATURE%5D+Your+idea+goes+here\");\n\n            new ConfigHeader(config.rootPanel, \"Enemy Tweaks\");\n            enemyTweakToggle = new BoolField(config.rootPanel, \"Enabled\", \"enemyTweakToggle\", true);\n            enemyTweakToggle.presetLoadPriority = 1;\n            enemyPanel = new ConfigPanel(config.rootPanel, \"Enemy Tweaks\", \"enemyTweakPanel\");\n            enemyTweakToggle.onValueChange += (BoolField.BoolValueChangeEvent data) =>\n            {\n                enemyPanel.interactable = data.value;\n                dirtyField = true;\n            };\n            enemyTweakToggle.TriggerValueChangeEvent();\n\n            new ConfigHeader(config.rootPanel, \"Player Tweaks\");\n            playerTweakToggle = new BoolField(config.rootPanel, \"Enabled\", \"playerTweakToggle\", true);\n            playerTweakToggle.presetLoadPriority = 1;\n            playerPanel = new ConfigPanel(config.rootPanel, \"Player Tweaks\", \"enemyTweakPanel\");\n            playerTweakToggle.onValueChange += (BoolField.BoolValueChangeEvent data) =>\n            {\n                playerPanel.interactable = data.value;\n                dirtyField = true;\n            };\n            playerTweakToggle.TriggerValueChangeEvent();\n\n            new ConfigHeader(config.rootPanel, \"Difficulty Rich Presence Override\", 20);\n            discordRichPresenceToggle = new BoolField(config.rootPanel, \"Discord rich presence\", \"discordRichPresenceToggle\", false);\n            discordRichPresenceToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            steamRichPresenceToggle = new BoolField(config.rootPanel, \"Steam rich presence\", \"steamRichPresenceToggle\", false);\n            steamRichPresenceToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n\n            new ConfigHeader(config.rootPanel, \"Plugin Difficulty Info\");\n            pluginName = new StringField(config.rootPanel, \"Difficulty name\", \"pluginName\", \"ULTRAPAIN\");\n            pluginName.onValueChange += (StringField.StringValueChangeEvent data) =>\n            {", "                if (Plugin.currentDifficultyButton != null)\n                    Plugin.currentDifficultyButton.transform.Find(\"Name\").GetComponent<Text>().text = data.value;\n\n                if (Plugin.currentDifficultyPanel != null)\n                    Plugin.currentDifficultyPanel.transform.Find(\"Title (1)\").GetComponent<Text>().text = $\"--{data.value}--\";\n            };\n            pluginInfo = new StringMultilineField(config.rootPanel, \"Difficulty info\", \"pluginInfo\",\n                \"\"\"\n                    Fast and aggressive enemies with unique attack patterns.\n\n                    Quick thinking, mobility options, and a decent understanding of the vanilla game are essential.\n\n                    <color=red>Recommended for players who have gotten used to VIOLENT's changes and are looking to freshen up their gameplay with unique enemy mechanics.</color>\n                    \n                    <color=orange>This difficulty uses UKMD difficulty and slot. To use the mod on another difficulty, enable global difficulty from settings.</color>\n                    \"\"\");\n            pluginInfo.onValueChange += (StringMultilineField.StringValueChangeEvent e) =>\n            {", "                if (Plugin.currentDifficultyInfoText != null)\n                    Plugin.currentDifficultyInfoText.text = e.value;\n            };\n            \n\n            // GLOBAL STATE\n            new ConfigHeader(config.rootPanel, \"Global Difficulty\");\n            new ConfigHeader(config.rootPanel, \"(Enable tweaks on all difficulties)\", 12);\n            globalDifficultySwitch = new BoolField(config.rootPanel, \"Enabled\", \"globalDifficultySwitch\", false);\n            globalDifficultySwitch.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n\n            new ConfigHeader(config.rootPanel, \"Extras\");\n            memePanel = new ConfigPanel(config.rootPanel, \"Memes\", \"memePanel\");\n\n            new ConfigHeader(config.rootPanel, \"Danger Zone\");\n            ButtonField addMissingDefaultPresets = new ButtonField(config.rootPanel, \"Add missing default presets\", \"addMissingDefaultPresets\");\n            addMissingDefaultPresets.onClick += AddMissingPresets;\n\n            // MEME PANEL\n            enrageSfxToggle = new BoolField(memePanel, \"Enrage SFX\\n(volume warning)\", \"enrageSfxToggle\", false);\n            enrageSfxToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            funnyDruidKnightSFXToggle = new BoolField(memePanel, \"Funny druid knight sfx\", \"funnyDruidKnightSFXToggle\", false);\n            funnyDruidKnightSFXToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            fleshObamiumToggle = new BoolField(memePanel, \"FLESH OBAMIUM\", \"fleshObamiumToggle\", false);\n            fleshObamiumToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            fleshObamiumName = new StringField(memePanel, \"FLESH OBAMIUM name\", \"fleshObamiumName\", \"FLESH OBAMIUM\");\n            obamapticonToggle = new BoolField(memePanel, \"OBAMAPTICON\", \"obamapticonToggle\", false);\n            obamapticonToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            obamapticonName = new StringField(memePanel, \"OBAMAPTICON name\", \"obamapticonName\", \"OBAMAPTICON\");\n\n            // PLAYER PANEL\n\n            // PLAYER STAT EDITOR\n            playerStatEditorPanel = new ConfigPanel(playerPanel, \"Player stat editor\", \"playerStatEditorPanel\");\n            \n            // MOVEMENT\n            new ConfigHeader(playerStatEditorPanel, \"Movement\");\n            staminaRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Stamina regen speed\", \"staminaRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n            \n            // HEALTH\n            new ConfigHeader(playerStatEditorPanel, \"Health\");\n            maxPlayerHp = new IntField(playerStatEditorPanel, \"Max HP\", \"maxPlayerHp\", 100, 1, int.MaxValue);\n            playerHpSupercharge = new IntField(playerStatEditorPanel, \"Max overcharge HP\", \"playerHpSupercharge\", 200, 1, int.MaxValue);\n\n            new SpaceField(playerStatEditorPanel);\n            \n            hardDamagePercent = new FloatSliderField(playerStatEditorPanel, \"Hard damage taken percent\", \"hardDamagePercent\", new Tuple<float, float>(0, 100), 100);\n            whiplashHardDamageCap = new IntField(playerStatEditorPanel, \"Whiplash hard damage cap\", \"whiplashHardDamageCap\", 50, 0, int.MaxValue);\n            whiplashHardDamageSpeed = new FloatField(playerStatEditorPanel, \"Whiplash hard damage speed multiplier\", \"whiplashHardDamageSpeed\", 1f, 0.01f, float.MaxValue);\n\n            new SpaceField(playerStatEditorPanel);\n\n            playerHpDeltaToggle = new BoolField(playerStatEditorPanel, \"HP regen/decay\", \"playerHpDeltaToggle\", false);\n            ConfigDivision deltaHpDiv = new ConfigDivision(playerStatEditorPanel, \"deltaHpDiv\");\n            playerHpDeltaToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {", "                if (NewMovement_DeltaHpComp.instance != null)\n                    NewMovement_DeltaHpComp.instance.UpdateEnabled();\n\n                deltaHpDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            playerHpDeltaToggle.TriggerValueChangeEvent();\n            playerHpDeltaAmount = new IntField(deltaHpDiv, \"HP regen/decay amount\", \"playerHpDeltaAmount\", -1);\n            playerHpDeltaDelay = new FloatField(deltaHpDiv, \"Delay\", \"playerHpDeltaDelay\", 2f, 0.01f, float.MaxValue);\n            playerHpDeltaLimit = new IntField(deltaHpDiv, \"Max regen/min decay limit\", \"playerHpDeltaLimit\", 50);\n            playerHpDeltaHurtAudio = new BoolField(deltaHpDiv, \"Hurt audio on decay\", \"playerHpDeltaHurtAudio\", false);\n            playerHpDeltaCalm = new BoolField(deltaHpDiv, \"Active during calm phase\", \"playerHpDeltaCalm\", false);\n            playerHpDeltaCombat = new BoolField(deltaHpDiv, \"Active during combat\", \"playerHpDeltaCombat\", true);\n            playerHpDeltaCybergrind = new BoolField(deltaHpDiv, \"Active in cybergrind\", \"playerHpDeltaCybergrind\", true);\n            playerHpDeltaCybergrind.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {", "                if (NewMovement_DeltaHpComp.instance != null)\n                    NewMovement_DeltaHpComp.instance.UpdateEnabled();\n            };\n            playerHpDeltaSandbox = new BoolField(deltaHpDiv, \"Active in sandbox\", \"playerHpDeltaSandbox\", false);\n            playerHpDeltaSandbox.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                if (NewMovement_DeltaHpComp.instance != null)\n                    NewMovement_DeltaHpComp.instance.UpdateEnabled();\n            };\n\n            // REVOLVER\n            new ConfigHeader(playerStatEditorPanel, \"Revolver\");\n            revolverDamage = new FloatField(playerStatEditorPanel, \"Revolver damage\", \"revolverDamageMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(revolverDamage, Plugin.blueRevolverSprite, Color.white);\n            revolverAltDamage = new FloatField(playerStatEditorPanel, \"Alt revolver damage\", \"revolverAltDamageMulti\", 1.25f, 0.01f, float.MaxValue);\n                new ImageInputField(revolverAltDamage, Plugin.blueRevolverSprite, Color.white);\n            \n            chargedRevDamage = new FloatField(playerStatEditorPanel, \"Charged revolver damage\", \"chargedRevDamage\", 1f, 0f, float.MaxValue);\n                new ImageInputField(chargedRevDamage, Plugin.blueRevolverSprite, Color.cyan);\n            chargedAltRevDamage = new FloatField(playerStatEditorPanel, \"Charged alt revolver damage\", \"chargedAltRevDamage\", 1.25f, 0f, float.MaxValue);\n                new ImageInputField(chargedAltRevDamage, Plugin.blueRevolverSprite, Color.cyan);\n            chargedRevTotalHits = new IntField(playerStatEditorPanel, \"Charged revolver total hits\", \"chargedRevTotalHits\", 3, 1, int.MaxValue);\n                new ImageInputField(chargedRevTotalHits, Plugin.blueRevolverSprite, Color.cyan);\n            chargedAltRevTotalHits = new IntField(playerStatEditorPanel, \"Charged alt revolver total hits\", \"chargedAltRevTotalHits\", 6, 1, int.MaxValue);\n                new ImageInputField(chargedAltRevTotalHits, Plugin.blueRevolverSprite, Color.cyan);\n            chargedRevMaxHitsPerTarget = new IntField(playerStatEditorPanel, \"Charged revolver max hits per target\", \"chargedRevMaxHitsPerTarget\", 3, 1, int.MaxValue);\n                new ImageInputField(chargedRevMaxHitsPerTarget, Plugin.blueRevolverSprite, Color.cyan);\n            chargedAltRevMaxHitsPerTarget = new IntField(playerStatEditorPanel, \"Charged alt revolver max hits per target\", \"chargedAltRevMaxHitsPerTarget\", 4, 1, int.MaxValue);\n                new ImageInputField(chargedAltRevMaxHitsPerTarget, Plugin.blueRevolverSprite, Color.cyan);\n            \n            sharpshooterDamage = new FloatField(playerStatEditorPanel, \"Sharpshooter damage\", \"sharpshooterDamage\", 1f, 0f, float.MaxValue);\n                new ImageInputField(sharpshooterDamage, Plugin.redRevolverSprite, Color.red);\n            sharpshooterAltDamage = new FloatField(playerStatEditorPanel, \"Sharpshooter alt damage\", \"sharpshooterAltDamage\", 1.25f, 0f, float.MaxValue);\n                new ImageInputField(sharpshooterAltDamage, Plugin.redRevolverSprite, Color.red);\n            sharpshooterMaxHitsPerTarget = new IntField(playerStatEditorPanel, \"Sharpshooter max hits per target\", \"sharpshooterMaxHitsPerTarget\", 1, 1, int.MaxValue);\n                new ImageInputField(sharpshooterMaxHitsPerTarget, Plugin.redRevolverSprite, Color.red);\n            sharpshooterAltMaxHitsPerTarget = new IntField(playerStatEditorPanel, \"Sharpshooter alt max hits per target\", \"sharpshooterAltMaxHitsPerTarget\", 2, 1, int.MaxValue);\n                new ImageInputField(sharpshooterAltMaxHitsPerTarget, Plugin.redRevolverSprite, Color.red);\n            \n            chargedRevRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Charged revolver regen speed\", \"chargedRevRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(chargedRevRegSpeedMulti, Plugin.blueRevolverSprite, Color.cyan);\n            coinRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Coin regen speed\", \"coinRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(coinRegSpeedMulti, Plugin.greenRevolverSprite, Color.green);\n            sharpshooterRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Sharpshooter regen speed\", \"sharpshooterRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(sharpshooterRegSpeedMulti, Plugin.redRevolverSprite, Color.red);\n\n            // SHOTGUN\n            new ConfigHeader(playerStatEditorPanel, \"Shotgun\");\n            shotgunBluePelletCount = new IntField(playerStatEditorPanel, \"Pellet count\", \"shotgunBluePelletCount\", 12, 1, int.MaxValue);\n                new ImageInputField(shotgunBluePelletCount, Plugin.blueShotgunSprite, Color.cyan);\n            shotgunBlueSpreadAngle = new FloatField(playerStatEditorPanel, \"Pellet spread angle\", \"shotgunBlueSpreadAngle\", 10f, 0f, 180f);\n                new ImageInputField(shotgunBlueSpreadAngle, Plugin.blueShotgunSprite, Color.cyan);\n            shotgunBlueDamagePerPellet = new FloatField(playerStatEditorPanel, \"Damage per pellet\", \"shotgunBlueDamagePerPellet\", 1, 0, float.MaxValue);\n                new ImageInputField(shotgunBlueDamagePerPellet, Plugin.blueShotgunSprite, Color.cyan);\n\n            new SpaceField(playerStatEditorPanel);\n\n            shotgunCoreExplosionSize = new FloatField(playerStatEditorPanel, \"Core explosion size\", \"shotgunCoreExplosionSize\", 6, 0, float.MaxValue);\n                new ImageInputField(shotgunCoreExplosionSize, Plugin.blueShotgunSprite, Color.cyan);\n            shotgunCoreExplosionSpeed = new FloatField(playerStatEditorPanel, \"Core explosion fade speed\", \"shotgunCoreExplosionSpeed\", 1, 0.01f, float.MaxValue);\n                new ImageInputField(shotgunCoreExplosionSpeed, Plugin.blueShotgunSprite, Color.cyan);\n            shotgunCoreExplosionDamage = new IntField(playerStatEditorPanel, \"Core explosion enemy damage\", \"shotgunCoreExplosionDamage\", 35, 0, int.MaxValue);\n                new ImageInputField(shotgunCoreExplosionDamage, Plugin.blueShotgunSprite, Color.cyan);\n            shotgunCoreExplosionPlayerDamage = new IntField(playerStatEditorPanel, \"Core explosion player damage\", \"shotgunCoreExplosionPlayerDamage\", 35, 0, int.MaxValue);\n                new ImageInputField(shotgunCoreExplosionPlayerDamage, Plugin.blueShotgunSprite, Color.cyan);\n\n            new SpaceField(playerStatEditorPanel);\n\n            shotgunGreenPump1Count = new IntField(playerStatEditorPanel, \"Pump 1 pellet count\", \"shotgunGreenPump1Count\", 10, 1, int.MaxValue);\n                new ImageInputField(shotgunGreenPump1Count, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenPump1Spread = new FloatField(playerStatEditorPanel, \"Pump 1 spread angle\", \"shotgunGreenPump1Spread\", 10f / 1.5f, 0f, 180f);\n                new ImageInputField(shotgunGreenPump1Spread, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenPump1Damage = new FloatField(playerStatEditorPanel, \"Pump 1 damage per pellet\", \"shotgunGreenPump1Damage\", 1f, 0f, float.MaxValue);\n                new ImageInputField(shotgunGreenPump1Damage, Plugin.greenShotgunSprite, Color.green);\n\n            new SpaceField(playerStatEditorPanel);\n\n            shotgunGreenPump2Count = new IntField(playerStatEditorPanel, \"Pump 2 pellet count\", \"shotgunGreenPump2Count\", 16, 1, int.MaxValue);\n                new ImageInputField(shotgunGreenPump2Count, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenPump2Spread = new FloatField(playerStatEditorPanel, \"Pump 2 spread angle\", \"shotgunGreenPump2Spread\", 10f, 0f, 180f);\n                new ImageInputField(shotgunGreenPump2Spread, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenPump2Damage = new FloatField(playerStatEditorPanel, \"Pump 2 damage per pellet\", \"shotgunGreenPump2Damage\", 1f, 0f, float.MaxValue);\n                new ImageInputField(shotgunGreenPump2Damage, Plugin.greenShotgunSprite, Color.green);\n\n            new SpaceField(playerStatEditorPanel);\n\n            shotgunGreenPump3Count = new IntField(playerStatEditorPanel, \"Pump 3 pellet count\", \"shotgunGreenPump3Count\", 24, 1, int.MaxValue);\n                new ImageInputField(shotgunGreenPump3Count, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenPump3Spread = new FloatField(playerStatEditorPanel, \"Pump 3 spread angle\", \"shotgunGreenPump3Spread\", 20f, 0f, 180f);\n                new ImageInputField(shotgunGreenPump3Spread, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenPump3Damage = new FloatField(playerStatEditorPanel, \"Pump 3 damage per pellet\", \"shotgunGreenPump3Damage\", 1f, 0f, float.MaxValue);\n                new ImageInputField(shotgunGreenPump3Damage, Plugin.greenShotgunSprite, Color.green);\n\n            new SpaceField(playerStatEditorPanel);\n\n            shotgunGreenExplosionSize = new FloatField(playerStatEditorPanel, \"Explosion size\", \"shotgunGreenExplosionSize\", 9, 0, float.MaxValue);\n                new ImageInputField(shotgunGreenExplosionSize, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenExplosionSpeed = new FloatField(playerStatEditorPanel, \"Explosion fade speed\", \"shotgunGreenExplosionSpeed\", 1, 0.01f, float.MaxValue);\n                new ImageInputField(shotgunGreenExplosionSpeed, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenExplosionDamage = new IntField(playerStatEditorPanel, \"Explosion enemy damage\", \"shotgunGreenExplosionDamage\", 50, 0, int.MaxValue);\n                new ImageInputField(shotgunGreenExplosionDamage, Plugin.greenShotgunSprite, Color.green);\n            shotgunGreenExplosionPlayerDamage = new IntField(playerStatEditorPanel, \"Explosion player damage\", \"shotgunGreenExplosionPlayerDamage\", 50, 0, int.MaxValue);\n                new ImageInputField(shotgunGreenExplosionPlayerDamage, Plugin.greenShotgunSprite, Color.green);\n\n            // NAILGUN/SAW LAUNCHER\n            new ConfigHeader(playerStatEditorPanel, \"Nailgun/Saw Launcher\");\n            nailgunBlueDamage = new FloatField(playerStatEditorPanel, \"Bullet damage\", \"nailgunBlueDamage\", 0.205f, 0f, float.MaxValue);\n                new ImageInputField(nailgunBlueDamage, Plugin.blueNailgunSprite, Color.cyan);\n            nailgunGreenDamage = new FloatField(playerStatEditorPanel, \"Bullet damage\", \"nailgunGreenDamage\", 0.185f, 0f, float.MaxValue);\n                new ImageInputField(nailgunGreenDamage, Plugin.greenNailgunSprite, Color.green);\n            nailgunGreenBurningDamage = new FloatField(playerStatEditorPanel, \"Burning bullet damage\", \"nailgunGreenBurningDamage\", 0.185f, 0f, float.MaxValue);\n                new ImageInputField(nailgunGreenBurningDamage, Plugin.greenNailgunSprite, Color.green);\n\n            new SpaceField(playerStatEditorPanel);\n\n            sawBlueDamage = new FloatField(playerStatEditorPanel, \"Saw damage\", \"sawBlueDamage\", 0.75f, 0f, float.MaxValue);\n                new ImageInputField(sawBlueDamage, Plugin.blueSawLauncherSprite, Color.cyan);\n            sawBlueHitAmount = new FloatField(playerStatEditorPanel, \"Saw durability\", \"sawBlueHitAmount\", 3.9f, 0f, float.MaxValue);\n                new ImageInputField(sawBlueHitAmount, Plugin.blueSawLauncherSprite, Color.cyan);\n            sawGreenDamage = new FloatField(playerStatEditorPanel, \"Weak saw damage\", \"sawGreenDamage\", 0.6f, 0f, float.MaxValue);\n                new ImageInputField(sawGreenDamage, Plugin.greenSawLauncherSprite, Color.green);\n            sawGreenHitAmount = new FloatField(playerStatEditorPanel, \"Weak saw durability\", \"sawGreenHitAmount\", 3f, 0f, float.MaxValue);\n                new ImageInputField(sawGreenHitAmount, Plugin.greenSawLauncherSprite, Color.green);\n            sawGreenBurningDamage = new FloatField(playerStatEditorPanel, \"Super saw damage\", \"sawGreenBurningDamage\", 1f, 0f, float.MaxValue);\n                new ImageInputField(sawGreenBurningDamage, Plugin.greenSawLauncherSprite, Color.green);\n            sawGreenBurningHitAmount = new FloatField(playerStatEditorPanel, \"Super saw durability\", \"sawGreenBurningHitAmount\", 20.9f, 0f, float.MaxValue);\n                new ImageInputField(sawGreenBurningHitAmount, Plugin.greenSawLauncherSprite, Color.green);\n\n            new SpaceField(playerStatEditorPanel);\n\n            nailgunAmmoRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Nailgun ammo regen speed\", \"nailgunAmmoRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(nailgunAmmoRegSpeedMulti, Plugin.blueNailgunSprite, Color.cyan);\n            nailgunHeatsinkRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Nailgun heatsink regen speed\", \"nailgunHeatsinkRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(nailgunHeatsinkRegSpeedMulti, Plugin.greenNailgunSprite, Color.green);\n            sawAmmoRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Saw ammo regen speed\", \"sawAmmoRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(sawAmmoRegSpeedMulti, Plugin.blueSawLauncherSprite, Color.cyan);\n            sawHeatsinkRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Saw heatsink regen speed\", \"sawHeatsinkRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n                new ImageInputField(sawHeatsinkRegSpeedMulti, Plugin.greenSawLauncherSprite, Color.green);\n            \n            // RAILCANNON\n            new ConfigHeader(playerStatEditorPanel, \"Railcannon\");\n            railcannonRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Railcannon charge speed\", \"railcannonRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n            new ConfigHeader(playerStatEditorPanel, \"Rocket Freeze/Cannonball\");\n            rocketFreezeRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Rocket freeze regen speed\", \"rocketFreezeRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n            rocketCannonballRegSpeedMulti = new FloatField(playerStatEditorPanel, \"Cannonball regen speed\", \"rocketCannonballRegSpeedMulti\", 1f, 0.01f, float.MaxValue);\n\n            void AddDirtyFlagToFloatFieldValueChange(FloatField field)\n            {\n                field.onValueChange += (FloatField.FloatValueChangeEvent e) =>\n                {\n                    dirtyField = true;\n                };\n            }\n            void AddDirtyFlagToFloatSliderFieldValueChange(FloatSliderField field)\n            {\n                field.onValueChange += (FloatSliderField.FloatSliderValueChangeEvent e) =>\n                {\n                    dirtyField = true;\n                };\n            }\n            void AddDirtyFlagToIntFieldValueChange(IntField field)\n            {\n                field.onValueChange += (IntField.IntValueChangeEvent e) =>\n                {\n                    dirtyField = true;\n                };\n            }\n\n            AddDirtyFlagToFloatFieldValueChange(staminaRegSpeedMulti);\n\n            AddDirtyFlagToIntFieldValueChange(maxPlayerHp);\n            AddDirtyFlagToIntFieldValueChange(playerHpSupercharge);\n            AddDirtyFlagToFloatSliderFieldValueChange(hardDamagePercent);\n            AddDirtyFlagToIntFieldValueChange(whiplashHardDamageCap);\n            AddDirtyFlagToFloatFieldValueChange(whiplashHardDamageSpeed);\n\n            AddDirtyFlagToFloatFieldValueChange(revolverDamage);\n            AddDirtyFlagToFloatFieldValueChange(revolverAltDamage);\n\n            AddDirtyFlagToFloatFieldValueChange(chargedRevDamage);\n            AddDirtyFlagToFloatFieldValueChange(chargedAltRevDamage);\n            AddDirtyFlagToIntFieldValueChange(chargedRevTotalHits);\n            AddDirtyFlagToIntFieldValueChange(chargedAltRevTotalHits);\n            AddDirtyFlagToIntFieldValueChange(chargedRevMaxHitsPerTarget);\n            AddDirtyFlagToIntFieldValueChange(chargedAltRevMaxHitsPerTarget);\n\n            AddDirtyFlagToFloatFieldValueChange(sharpshooterDamage);\n            AddDirtyFlagToFloatFieldValueChange(sharpshooterAltDamage);\n            AddDirtyFlagToIntFieldValueChange(sharpshooterMaxHitsPerTarget);\n            AddDirtyFlagToIntFieldValueChange(sharpshooterAltMaxHitsPerTarget);\n\n            AddDirtyFlagToFloatFieldValueChange(chargedRevRegSpeedMulti);\n            AddDirtyFlagToFloatFieldValueChange(coinRegSpeedMulti);\n            AddDirtyFlagToFloatFieldValueChange(sharpshooterRegSpeedMulti);\n\n            AddDirtyFlagToIntFieldValueChange(shotgunBluePelletCount);\n            AddDirtyFlagToFloatFieldValueChange(shotgunBlueSpreadAngle);\n            AddDirtyFlagToFloatFieldValueChange(shotgunBlueDamagePerPellet);\n\n            AddDirtyFlagToFloatFieldValueChange(shotgunCoreExplosionSize);\n            AddDirtyFlagToFloatFieldValueChange(shotgunCoreExplosionSpeed);\n            AddDirtyFlagToIntFieldValueChange(shotgunCoreExplosionDamage);\n            AddDirtyFlagToIntFieldValueChange(shotgunCoreExplosionPlayerDamage);\n\n            AddDirtyFlagToIntFieldValueChange(shotgunGreenPump1Count);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenPump1Spread);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenPump1Damage);\n\n            AddDirtyFlagToIntFieldValueChange(shotgunGreenPump2Count);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenPump2Spread);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenPump2Damage);\n\n            AddDirtyFlagToIntFieldValueChange(shotgunGreenPump3Count);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenPump3Spread);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenPump3Damage);\n\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenExplosionSize);\n            AddDirtyFlagToFloatFieldValueChange(shotgunGreenExplosionSpeed);\n            AddDirtyFlagToIntFieldValueChange(shotgunGreenExplosionDamage);\n            AddDirtyFlagToIntFieldValueChange(shotgunGreenExplosionPlayerDamage);\n\n            AddDirtyFlagToFloatFieldValueChange(nailgunBlueDamage);\n            AddDirtyFlagToFloatFieldValueChange(nailgunGreenDamage);\n            AddDirtyFlagToFloatFieldValueChange(nailgunGreenBurningDamage);\n\n            AddDirtyFlagToFloatFieldValueChange(sawBlueDamage);\n            AddDirtyFlagToFloatFieldValueChange(sawBlueHitAmount);\n            AddDirtyFlagToFloatFieldValueChange(sawGreenDamage);\n            AddDirtyFlagToFloatFieldValueChange(sawGreenHitAmount);\n            AddDirtyFlagToFloatFieldValueChange(sawGreenBurningDamage);\n            AddDirtyFlagToFloatFieldValueChange(sawGreenBurningHitAmount);\n\n            AddDirtyFlagToFloatFieldValueChange(nailgunAmmoRegSpeedMulti);\n            AddDirtyFlagToFloatFieldValueChange(nailgunHeatsinkRegSpeedMulti);\n\n            AddDirtyFlagToFloatFieldValueChange(sawAmmoRegSpeedMulti);\n            AddDirtyFlagToFloatFieldValueChange(sawHeatsinkRegSpeedMulti);\n\n            AddDirtyFlagToFloatFieldValueChange(railcannonRegSpeedMulti);\n\n            AddDirtyFlagToFloatFieldValueChange(rocketFreezeRegSpeedMulti);\n            AddDirtyFlagToFloatFieldValueChange(rocketCannonballRegSpeedMulti);\n\n            new ConfigHeader(playerPanel, \"Rocket Boosting\");\n            rocketBoostToggle = new BoolField(playerPanel, \"Enabled\", \"rocketBoostToggle\", true);\n            rocketBoostToggle.presetLoadPriority = 1;\n            ConfigDivision rocketBoostDiv = new ConfigDivision(playerPanel, \"rocketBoostDiv\");\n            rocketBoostToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                rocketBoostDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            rocketBoostToggle.TriggerValueChangeEvent();\n            rocketBoostAlwaysExplodesToggle = new BoolField(rocketBoostDiv, \"Always explode\", \"rocketBoostAlwaysExplodes\", true);\n            rocketBoostDamageMultiplierPerHit = new FloatField(rocketBoostDiv, \"Damage multiplier per hit\", \"rocketBoostDamageMultiplier\", 0.35f, 0f, float.MaxValue);\n            rocketBoostSizeMultiplierPerHit = new FloatField(rocketBoostDiv, \"Size multiplier per hit\", \"rocketBoostSizeMultiplier\", 0.35f, 0f, float.MaxValue);\n            rocketBoostSpeedMultiplierPerHit = new FloatField(rocketBoostDiv, \"Speed multiplier per hit\", \"rocketBoostSpeedMultiplierPerHit\", 0.35f, 0f, float.MaxValue);\n            FormattedStringBuilder rocketBoostStyleBuilder = new FormattedStringBuilder();\n            rocketBoostStyleBuilder.currentFormat = new PluginConfig.API.Fields.CharacterInfo() { color = Color.green };\n            rocketBoostStyleBuilder += \"ROCKET BOOST\";\n            rocketBoostStyleText = new FormattedStringField(rocketBoostDiv, \"Style text\", \"rocketBoostStyleText\", rocketBoostStyleBuilder.Build());\n            rocketBoostStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(rocketBoostStyleText.guid, e.formattedString.formattedString);\n            };\n            rocketBoostStylePoints = new IntField(rocketBoostDiv, \"Style points\", \"rocketBoostStylePoints\", 10, 0, int.MaxValue);\n\n            new ConfigHeader(playerPanel, \"Rocket Grabbing\\r\\n<size=16>(Can pull yourself to frozen rockets)</size>\");\n            rocketGrabbingToggle = new BoolField(playerPanel, \"Enabled\", \"rocketGrabbingTabble\", true);\n            rocketGrabbingToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n\n            new ConfigHeader(playerPanel, \"Grenade Boosting\");\n            grenadeBoostToggle = new BoolField(playerPanel, \"Enabled\", \"grenadeBoostToggle\", true);\n            grenadeBoostToggle.presetLoadPriority = 1;\n            ConfigDivision grenadeBoostDiv = new ConfigDivision(playerPanel, \"grenadeBoostDiv\");\n            grenadeBoostToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                grenadeBoostDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            grenadeBoostToggle.TriggerValueChangeEvent();\n            grenadeBoostDamageMultiplier = new FloatField(grenadeBoostDiv, \"Damage multiplier\", \"grenadeBoostDamageMultiplier\", 1f, 0f, float.MaxValue);\n            grenadeBoostSizeMultiplier = new FloatField(grenadeBoostDiv, \"Size multiplier\", \"grenadeBoostSizeMultiplier\", 1f, 0f, float.MaxValue);\n            FormattedStringBuilder grenadeBoostStyleBuilder = new FormattedStringBuilder();\n            grenadeBoostStyleBuilder.currentFormat = new PluginConfig.API.Fields.CharacterInfo() { color = Color.cyan };\n            grenadeBoostStyleBuilder += \"FISTFUL OF 'NADE\";\n            grenadeBoostStyleText = new FormattedStringField(grenadeBoostDiv, \"Style text\", \"grenadeBoostStyleText\", grenadeBoostStyleBuilder.Build());\n            grenadeBoostStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(grenadeBoostStyleText.guid, e.formattedString.formattedString);\n            };\n            grenadeBoostStylePoints = new IntField(grenadeBoostDiv, \"Style points\", \"grenadeBoostStylePoints\", 10, 0, int.MaxValue);\n\n            // SCREWDRIVER\n            new ConfigHeader(playerPanel, \"Screw Driver Splitting\");\n            screwDriverSplitToggle = new BoolField(playerPanel, \"Enabled\", \"screwDriverSplitToggle\", true);\n            ConfigDivision screwDriverSplitDiv = new ConfigDivision(playerPanel, \"screwDriverSplitDiv\");\n            screwDriverSplitToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                screwDriverSplitDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            screwDriverSplitToggle.TriggerValueChangeEvent();\n            screwDriverCoinSplitCount = new IntField(screwDriverSplitDiv, \"Coin split count\", \"screwDriverCoinSplitCount\", 5, 2, int.MaxValue);\n            screwDriverGrenadeSplitCount = new IntField(screwDriverSplitDiv, \"Grenade split count\", \"screwDriverGrenadeSplitCount\", 5);\n\n            new ConfigHeader(playerPanel, \"Screw Driver Home To Magnet Enemies\");\n            screwDriverHomeToggle = new BoolField(playerPanel, \"Enabled\", \"screwDriverHomeToggle\", true);\n            ConfigDivision screwDriverHomeDiv = new ConfigDivision(playerPanel, \"screwDriverHomeDiv\");\n            screwDriverHomeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                screwDriverHomeDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            screwDriverHomeToggle.TriggerValueChangeEvent();\n            screwDriverHomeDestroyMagnets = new BoolField(screwDriverHomeDiv, \"Destroy magnets on attach\", \"screwDriverHomeDestroyMagnets\", true);\n            screwDriverHomePierceDamage = new FloatField(screwDriverHomeDiv, \"Pierce damage\", \"screwDriverHomePierceDamage\", 2f, 0f, float.MaxValue);\n                                                  \n            new ConfigHeader(playerPanel, \"Orbital Strike\", 26);\n            new ConfigHeader(playerPanel, \"(Tweaks for coin-knuckleblaster)\", 16);\n            orbStrikeToggle = new BoolField(playerPanel, \"Enabled\", \"orbStrikeToggle\", true);\n            orbStrikeToggle.presetLoadPriority = 1;\n            ConfigDivision orbStrikeDiv = new ConfigDivision(playerPanel, \"orbStrikeDiv\");\n            orbStrikeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            orbStrikeToggle.TriggerValueChangeEvent();\n            orbStrikeMinDistance = new FloatField(orbStrikeDiv, \"Min trigger distance\", \"orbStrikeMinDistance\", 30f, 0f, float.MaxValue);\n            \n            new ConfigHeader(orbStrikeDiv, \"Revolver Beam\", 22);\n            FormattedStringBuilder orbStrikeRevolverBuilder = new FormattedStringBuilder();\n            orbStrikeRevolverBuilder.currentFormat = new PluginConfig.API.Fields.CharacterInfo() { color = Color.red };\n            orbStrikeRevolverBuilder += \"ORBITALSTRIKE\";\n            orbStrikeRevolverStyleText = new FormattedStringField(orbStrikeDiv, \"Style text\", \"orbStrikeRevolverStyleText\", orbStrikeRevolverBuilder.Build());\n            orbStrikeRevolverStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(orbStrikeRevolverStyleText.guid, e.formattedString.formattedString);\n            };\n            orbStrikeRevolverStylePoint = new IntField(orbStrikeDiv, \"Style point\", \"orbStrikeRevolverStylePoint\", 20, 0, int.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Grenade Explosion Boost--\", 12);\n            orbStrikeRevolverGrenade = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeRevolverGrenade\", true);\n            orbStrikeRevolverGrenade.presetLoadPriority = 1;\n            ConfigDivision orbStrikeRevolverGrenadeDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeRevolverGrenadeDiv\");\n            orbStrikeRevolverGrenade.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeRevolverGrenadeDiv.interactable = e.value;\n            };\n            orbStrikeRevolverGrenade.TriggerValueChangeEvent();\n            orbStrikeRevolverGrenadeExtraSize = new FloatField(orbStrikeRevolverGrenadeDiv, \"Size bonus percent\", \"orbStrikeRevolverExtraSize\", 0.2f, 0f, float.MaxValue);\n            orbStrikeRevolverGrenadeExtraDamage = new FloatField(orbStrikeRevolverGrenadeDiv, \"Damage bonus percent\", \"orbStrikeRevolverGrenadeExtraDamage\", 0f, 0f, float.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Explosion On Enemy Hit--\", 12);\n            orbStrikeRevolverExplosion = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeRevolverExplosion\", true);\n            orbStrikeRevolverExplosion.presetLoadPriority = 1;\n            ConfigDivision orbStrikeRevolverExplosionDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeRevolverExplosionDiv\");\n            orbStrikeRevolverExplosion.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeRevolverExplosionDiv.interactable = e.value;\n            };\n            orbStrikeRevolverExplosion.TriggerValueChangeEvent();\n            orbStrikeRevolverExplosionDamage = new FloatField(orbStrikeRevolverExplosionDiv, \"Damage multiplier\", \"orbStrikeRevolverExplosionDamage\", 1f, 0f, float.MaxValue);\n            orbStrikeRevolverExplosionSize = new FloatField(orbStrikeRevolverExplosionDiv, \"Size multiplier\", \"orbStrikeRevolverExplosionSize\", 1f, 0f, float.MaxValue);\n\n            new ConfigHeader(orbStrikeDiv, \"Charged Revolver Beam\", 22);\n            FormattedStringBuilder orbStrikeRevolverChargedBuilder = new FormattedStringBuilder();\n            orbStrikeRevolverChargedBuilder.currentFormat = new PluginConfig.API.Fields.CharacterInfo() { color = Color.red };\n            orbStrikeRevolverChargedBuilder += \"ORBITAL\";\n            orbStrikeRevolverChargedBuilder.currentFormat.color = Color.cyan;\n            orbStrikeRevolverChargedBuilder += \"ZAP\";\n            orbStrikeRevolverChargedStyleText = new FormattedStringField(orbStrikeDiv, \"Style text\", \"orbStrikeRevolverChargedStyleText\", orbStrikeRevolverChargedBuilder.Build());\n            orbStrikeRevolverChargedStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(orbStrikeRevolverChargedStyleText.guid, e.formattedString.formattedString);\n            };\n            orbStrikeRevolverChargedStylePoint = new IntField(orbStrikeDiv, \"Style point\", \"orbStrikeRevolverChargedStylePoint\", 30, 0, int.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Grenade Explosion Boost--\", 12);\n            orbStrikeRevolverChargedGrenade = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeRevolverChargedGrenade\", true);\n            orbStrikeRevolverChargedGrenade.presetLoadPriority = 1;\n            ConfigDivision orbStrikeRevolverChargedGrenadeDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeRevolverGrenadeDiv\");\n            orbStrikeRevolverChargedGrenade.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeRevolverChargedGrenadeDiv.interactable = e.value;\n            };\n            orbStrikeRevolverChargedGrenade.TriggerValueChangeEvent();\n            orbStrikeRevolverChargedGrenadeExtraSize = new FloatField(orbStrikeRevolverChargedGrenadeDiv, \"Size bonus percent\", \"orbStrikeRevolverChargedGrenadeExtraSize\", 0.25f, 0f, float.MaxValue);\n            orbStrikeRevolverChargedGrenadeExtraDamage = new FloatField(orbStrikeRevolverChargedGrenadeDiv, \"Damage bonus percent\", \"orbStrikeRevolverChargedGrenadeExtraDamage\", 0f, 0f, float.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Insignia On Enemy Hit--\", 12);\n            orbStrikeRevolverChargedInsignia = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeRevolverChargedInsignia\", true);\n            orbStrikeRevolverChargedInsignia.presetLoadPriority = 1;\n            ConfigDivision orbStrikeRevolverChargedInsigniaDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeRevolverChargedInsigniaDiv\");\n            orbStrikeRevolverChargedInsignia.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeRevolverChargedInsigniaDiv.interactable = e.value;\n            };\n            orbStrikeRevolverChargedInsignia.TriggerValueChangeEvent();\n            orbStrikeRevolverChargedInsigniaDamage = new IntField(orbStrikeRevolverChargedInsigniaDiv, \"Damage\", \"orbStrikeRevolverChargedInsigniaDamage\", 10, 0, int.MaxValue);\n            orbStrikeRevolverChargedInsigniaSize = new FloatField(orbStrikeRevolverChargedInsigniaDiv, \"Size\", \"orbStrikeRevolverChargedInsigniaSize\", 2f, 0f, float.MaxValue);\n            orbStrikeRevolverChargedInsigniaDelayBoost = new FloatField(orbStrikeRevolverChargedInsigniaDiv, \"Windup speed multiplier\", \"orbStrikeRevolverChargedInsigniaDelayBoost\", 2f, 0f, float.MaxValue);\n\n            new ConfigHeader(orbStrikeDiv, \"Electric Cannon\", 22);\n            FormattedStringBuilder orbStrikeElectricCannonBuilder = new FormattedStringBuilder();\n            orbStrikeElectricCannonBuilder.currentFormat.color = new Color(0xff / 255f, 0xa5 / 255f, 0);\n            orbStrikeElectricCannonBuilder += \"ULTRA\";\n            orbStrikeElectricCannonBuilder.currentFormat.color = Color.red;\n            orbStrikeElectricCannonBuilder += \"ORBITAL\";\n            orbStrikeElectricCannonBuilder.currentFormat.color = Color.cyan;\n            orbStrikeElectricCannonBuilder += \"ZAP\";\n            orbStrikeElectricCannonStyleText = new FormattedStringField(orbStrikeDiv, \"Style text\", \"orbStrikeElectricCannonStyleText\", orbStrikeElectricCannonBuilder.Build());\n            orbStrikeElectricCannonStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(orbStrikeElectricCannonStyleText.guid, e.formattedString.formattedString);\n            };\n            orbStrikeElectricCannonStylePoint = new IntField(orbStrikeDiv, \"Style point\", \"orbStrikeElectricCannonStylePoint\", 50, 0, int.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Grenade Explosion Boost--\", 12);\n            orbStrikeElectricCannonGrenade = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeElectricCannonGrenade\", true);\n            orbStrikeElectricCannonGrenade.presetLoadPriority = 1;\n            ConfigDivision orbStrikeElectricCannonGrenadeDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeRevolverGrenadeDiv\");\n            orbStrikeElectricCannonGrenade.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeElectricCannonGrenadeDiv.interactable = e.value;\n            };\n            orbStrikeElectricCannonGrenade.TriggerValueChangeEvent();\n            orbStrikeElectricCannonGrenadeExtraSize = new FloatField(orbStrikeElectricCannonGrenadeDiv, \"Size bonus percent\", \"orbStrikeElectricCannonGrenadeExtraSize\", 0.3f, 0f, float.MaxValue);\n            orbStrikeElectricCannonGrenadeExtraDamage = new FloatField(orbStrikeElectricCannonGrenadeDiv, \"Damage bonus percent\", \"orbStrikeElectricCannonGrenadeExtraDamage\", 0f, 0f, float.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Lightning Bolt On Enemy Hit--\", 12);\n            orbStrikeElectricCannonExplosion = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeElectricCannonExplosion\", true);\n            orbStrikeElectricCannonExplosion.presetLoadPriority = 1;\n            ConfigDivision orbStrikeElectricCannonExplosionDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeRevolverGrenadeDiv\");\n            orbStrikeElectricCannonExplosion.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeElectricCannonExplosionDiv.interactable = e.value;\n            };\n            orbStrikeElectricCannonExplosion.TriggerValueChangeEvent();\n            orbStrikeElectricCannonExplosionDamage = new FloatField(orbStrikeElectricCannonExplosionDiv, \"Damage multiplier\", \"orbStrikeElectricCannonExplosionDamage\", 1f, 0f, float.MaxValue);\n            orbStrikeElectricCannonExplosionSize = new FloatField(orbStrikeElectricCannonExplosionDiv, \"Size multiplier\", \"orbStrikeElectricCannonExplosionSize\", 1f, 0f, float.MaxValue);\n\n\n            new ConfigHeader(orbStrikeDiv, \"Malicious Cannon\", 22);\n            FormattedStringBuilder orbStrikeMaliciousBuilder = new FormattedStringBuilder();\n            orbStrikeMaliciousBuilder.currentFormat.color = Color.red;\n            orbStrikeMaliciousBuilder += \"ORBITAL\";\n            orbStrikeMaliciousBuilder.currentFormat.color = new Color(0x80 / 255f, 0, 0);\n            orbStrikeMaliciousBuilder += \"NUKE\";\n            orbStrikeMaliciousCannonStyleText = new FormattedStringField(orbStrikeDiv, \"Style text\", \"orbStrikeMaliciousCannonStyleText\", orbStrikeMaliciousBuilder.Build());\n            orbStrikeMaliciousCannonStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(orbStrikeMaliciousCannonStyleText.guid, e.formattedString.formattedString);\n            };\n            orbStrikeMaliciousCannonStylePoint = new IntField(orbStrikeDiv, \"Style point\", \"orbStrikeMaliciousCannonStylePoint\", 70, 0, int.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Grenade Explosion Boost--\", 12);\n            orbStrikeMaliciousCannonGrenade = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeMaliciousCannonGrenade\", true);\n            orbStrikeMaliciousCannonGrenade.presetLoadPriority = 1;\n            ConfigDivision orbStrikeMaliciousCannonGrenadeDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeMaliciousCannonGrenadeDiv\");\n            orbStrikeMaliciousCannonGrenade.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeMaliciousCannonGrenadeDiv.interactable = e.value;\n            };\n            orbStrikeMaliciousCannonGrenade.TriggerValueChangeEvent();\n            orbStrikeMaliciousCannonGrenadeExtraSize = new FloatField(orbStrikeMaliciousCannonGrenadeDiv, \"Size bonus percent\", \"orbStrikeMaliciousCannonGrenadeExtraSize\", 0.4f, 0f, float.MaxValue);\n            orbStrikeMaliciousCannonGrenadeExtraDamage = new FloatField(orbStrikeMaliciousCannonGrenadeDiv, \"Damage bonus percent\", \"orbStrikeMaliciousCannonGrenadeExtraDamage\", 0f, 0f, float.MaxValue);\n            new ConfigHeader(orbStrikeDiv, \"--Stronger Malicious Explosion--\", 12);\n            orbStrikeMaliciousCannonExplosion = new BoolField(orbStrikeDiv, \"Enabled\", \"orbStrikeMaliciousCannonExplosion\", true);\n            orbStrikeMaliciousCannonExplosion.presetLoadPriority = 1;\n            ConfigDivision orbStrikeMaliciousCannonExplosionDiv = new ConfigDivision(orbStrikeDiv, \"orbStrikeMaliciousCannonExplosionDiv\");\n            orbStrikeMaliciousCannonExplosion.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                orbStrikeMaliciousCannonExplosionDiv.interactable = e.value;\n            };\n            orbStrikeMaliciousCannonExplosion.TriggerValueChangeEvent();\n            orbStrikeMaliciousCannonExplosionSizeMultiplier = new FloatField(orbStrikeMaliciousCannonExplosionDiv, \"Size multiplier\", \"orbStrikeMaliciousCannonExplosionSizeMultiplier\", 1.3f, 0f, float.MaxValue);\n            orbStrikeMaliciousCannonExplosionDamageMultiplier = new FloatField(orbStrikeMaliciousCannonExplosionDiv, \"Damage multiplier\", \"orbStrikeMaliciousCannonExplosionDamageMultiplier\", 1f, 0f, float.MaxValue);\n            \n            new ConfigHeader(orbStrikeDiv, \"Malicious Beam Chargeback\");\n            FormattedStringBuilder maliciousChargebackBuilder = new FormattedStringBuilder();\n            maliciousChargebackBuilder.currentFormat.color = new Color(0xff / 255f, 0xa5 / 255f, 0);\n            maliciousChargebackBuilder += \"ULTRA\";\n            maliciousChargebackBuilder.currentFormat.color = Color.red;\n            maliciousChargebackBuilder += \"ORBITAL\";\n            maliciousChargebackBuilder.currentFormat.color = Color.cyan;\n            maliciousChargebackBuilder += \"CHARGEBACK\";\n            maliciousChargebackStyleText = new FormattedStringField(orbStrikeDiv, \"Style text\", \"maliciousChargebackStyleText\", maliciousChargebackBuilder.Build());\n            maliciousChargebackStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(maliciousChargebackStyleText.guid, e.formattedString.formattedString);\n            };\n            maliciousChargebackStylePoint = new IntField(orbStrikeDiv, \"Style point\", \"maliciousChargebackStylePoint\", 100, 0, int.MaxValue);\n            maliciousChargebackExplosionToggle = new BoolField(orbStrikeDiv, \"Explosion on hit\", \"maliciousChargebackExplosionToggle\", true);\n            ConfigDivision maliciousChargebackExplosionDiv = new ConfigDivision(orbStrikeDiv, \"maliciousChargebackExplosionDiv\");\n            maliciousChargebackExplosionToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                maliciousChargebackExplosionDiv.interactable = e.value;\n            };\n            maliciousChargebackExplosionToggle.TriggerValueChangeEvent();\n            maliciousChargebackExplosionSizeMultiplier = new FloatField(maliciousChargebackExplosionDiv, \"Explosion size multiplier\", \"maliciousChargebackExplosionSizeMultiplier\", 0.6f, 0.1f, float.MaxValue);\n            maliciousChargebackExplosionDamageMultiplier = new FloatField(maliciousChargebackExplosionDiv, \"Explosion damage multiplier\", \"maliciousChargebackExplosionDamageMultiplier\", 0.5f, 0.1f, float.MaxValue);\n\n            // SENTRY CHARGEBACK\n            new ConfigHeader(orbStrikeDiv, \"Sentry Beam Chargeback\");\n            sentryChargebackStyleText = new FormattedStringField(orbStrikeDiv, \"Style text\", \"sentryChargebackStyleText\", maliciousChargebackBuilder.Build());\n            sentryChargebackStyleText.onValueChange += (FormattedStringField.FormattedStringValueChangeEvent e) =>\n            {\n                Plugin.StyleIDs.UpdateID(sentryChargebackStyleText.guid, e.formattedString.formattedString);\n            };\n            sentryChargebackStylePoint = new IntField(orbStrikeDiv, \"Style point\", \"sentryChargebackStylePoint\", 100, 0, int.MaxValue);\n            sentryChargebackExtraBeamCount = new IntField(orbStrikeDiv, \"Beam split count\", \"sentryChargebackExtraBeamCount\", 5, 0, int.MaxValue);\n            \n            // ENEMY PANEL\n            globalEnemyPanel = new ConfigPanel(enemyPanel, \"Global enemy tweaks\", \"globalEnemyPanel\");\n            new ConfigHeader(enemyPanel, \"Common Enemies\");\n            filthPanel = new ConfigPanel(enemyPanel, \"Filth\", \"filthPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            filthPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Filth.png\");\n\t\t\tsomethingWickedPanel = new ConfigPanel(enemyPanel, \"Something Wicked\", \"somethingWickedPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n\t\t\tsomethingWickedPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Something_Wicked.png\");\n\t\t\tstrayPanel = new ConfigPanel(enemyPanel, \"Stray\", \"strayPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            strayPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Tall_Husk.png\");\n\t\t\tschismPanel = new ConfigPanel(enemyPanel, \"Schism\", \"schismPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            schismPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Schism.png\");\n\t\t\tsoliderPanel = new ConfigPanel(enemyPanel, \"Soldier\", \"soliderPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            soliderPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Shotgun_Husk.png\");\n\t\t\tdronePanel = new ConfigPanel(enemyPanel, \"Drone\", \"dronePanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            dronePanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Drone.png\");\n\t\t\tidolPanel = new ConfigPanel(enemyPanel, \"Idol\", \"idolPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            idolPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Idol.png\");\n\t\t\tstreetCleanerPanel = new ConfigPanel(enemyPanel, \"Streetcleaner\", \"streetCleanerPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            streetCleanerPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Streetcleaner.png\");\n\t\t\tvirtuePanel = new ConfigPanel(enemyPanel, \"Virtue\", \"virtuePanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            virtuePanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Virtue.png\");\n\t\t\tstalkerPanel = new ConfigPanel(enemyPanel, \"Stalker\", \"stalkerPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            stalkerPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Stalker.png\");\n\t\t\tnew ConfigHeader(enemyPanel, \"Mini Bosses\");\n            cerberusPanel = new ConfigPanel(enemyPanel, \"Cerberus\", \"cerberusPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            cerberusPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Cerberus.png\");\n\t\t\tferrymanPanel = new ConfigPanel(enemyPanel, \"Ferryman\", \"ferrymanPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            ferrymanPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Ferryman.png\");\n\t\t\thideousMassPanel = new ConfigPanel(enemyPanel, \"Hideous Mass\", \"hideousMassPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            hideousMassPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Hideous_Mass.png\");\n\t\t\tmaliciousFacePanel = new ConfigPanel(enemyPanel, \"Malicious Face\", \"maliciousFacePanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            maliciousFacePanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Malicious_Face.png\");\n\t\t\tmindflayerPanel = new ConfigPanel(enemyPanel, \"Mindflayer\", \"mindflayerPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            mindflayerPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Mindflayer.png\");\n\t\t\tturretPanel = new ConfigPanel(enemyPanel, \"Sentry\", \"turretPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            turretPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Turret.png\");\n\t\t\tsisyInstPanel = new ConfigPanel(enemyPanel, \"Sisyphean Insurrectionist\", \"sisyInstPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            sisyInstPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Sisyphus.png\");\n\t\t\tswordsMachinePanel = new ConfigPanel(enemyPanel, \"Swordsmachine\", \"swordsMachinePanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            swordsMachinePanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Swordsmachine.png\");\n\t\t\tnew ConfigHeader(enemyPanel, \"Bosses\");\n            v2FirstPanel = new ConfigPanel(enemyPanel, \"V2 - First\", \"v2FirstPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            v2FirstPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/V2.png\");\n\t\t\tv2SecondPanel = new ConfigPanel(enemyPanel, \"V2 - Second\", \"v2SecondPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            v2SecondPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/V2 2nd.png\");\n\t\t\tleviathanPanel = new ConfigPanel(enemyPanel, \"Leviathan\", \"leviathanPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            leviathanPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/Leviathan.png\");\n\t\t\tnew ConfigHeader(enemyPanel, \"Prime Bosses\");\n            fleshPrisonPanel = new ConfigPanel(enemyPanel, \"Flesh Prison\", \"fleshPrisonPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            fleshPrisonPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/FleshPrison.png\");\n\t\t\tminosPrimePanel = new ConfigPanel(enemyPanel, \"Minos Prime\", \"minosPrimePanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            minosPrimePanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/MinosPrime.png\");\n\t\t\tpanopticonPanel = new ConfigPanel(enemyPanel, \"Flesh Panopticon\", \"panopticonPanel\", ConfigPanel.PanelFieldType.StandardWithIcon);\n            panopticonPanel.icon = Plugin.LoadObject<Sprite>(\"Assets/Textures/UI/Spawn Menu/FleshPanopticon.png\");\n\n\t\t\t// GLOBAL ENEMY TWEAKS\n\t\t\teidStatEditorPanel = new ConfigPanel(globalEnemyPanel, \"Enemy stat editor\", \"eidStatEditorPanel\");\n\n            eidStatEditorSelector = new EnumField<EnemyType>(eidStatEditorPanel, \"Selected enemy\", \"eidStatEditorSelector\", EnemyType.Filth);\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.V2Second, \"V2 Second\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.Sisyphus, \"Sisyphean Ins.\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.SisyphusPrime, \"Sisyphus Prime\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.CancerousRodent, \"Cancerous Rodent\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.FleshPanopticon, \"Flesh Panopticon\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.FleshPrison, \"Flesh Prison\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.GabrielSecond, \"Gabriel Second\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.HideousMass, \"Hideous Mass\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.MaliciousFace, \"Malicious Face\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.Mandalore, \"Druid Knight\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.Minos, \"Minos Corpse\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.MinosPrime, \"Minos Prime\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.VeryCancerousRodent, \"Very Cancerous Rodent\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.Wicked, \"Something Wicked\");\n            eidStatEditorSelector.SetEnumDisplayName(EnemyType.Turret, \"Sentry\");\n            \n            new ConfigHeader(eidStatEditorPanel, \"Base Stat Editor\");\n            ", "            foreach(EnemyType eid in Enum.GetValues(typeof(EnemyType)))\n            {\n                EidStatContainer container = new EidStatContainer();\n                \n                container.health = new FloatField(eidStatEditorPanel, \"Health multiplier\", $\"eid_{eid}_health\", defaultEnemyHealth.ContainsKey(eid) ? defaultEnemyHealth[eid] : 1f , 0.01f, float.MaxValue);\n                container.damage = new FloatField(eidStatEditorPanel, \"Damage multiplier\", $\"eid_{eid}_damage\", defaultEnemyDamage.ContainsKey(eid) ? defaultEnemyDamage[eid] : 1f, 0.01f, float.MaxValue);\n                container.speed = new FloatField(eidStatEditorPanel, \"Speed multiplier\", $\"eid_{eid}_speed\", defaultEnemySpeed.ContainsKey(eid) ? defaultEnemySpeed[eid] : 1f, 0.01f, float.MaxValue);\n                \n                container.resistanceStr = new StringField(eidStatEditorPanel, \"Resistance string\", $\"eid_{eid}_resistance\", \"\", true);\n                container.resistanceStr.interactable = false;\n                container.resistanceStr.hidden = true;\n                container.resistanceDict = new Dictionary<string, float>();\n\n                string[] resistanceArr = container.resistanceStr.value.Split(resistanceSeparator);", "                if(resistanceArr.Length > 0 && !string.IsNullOrEmpty(resistanceArr[0]))\n                for(int i = 0; i < resistanceArr.Length; i++)\n                {\n                    string resistance = resistanceArr[i];\n                    i += 1;\n                    if(i >= resistanceArr.Length)\n                    {\n                        Debug.LogWarning($\"Missing value for resistance {resistance} for enemy {eid}\");\n                        break;\n                    }\n                    float resistanceCoefficiance = 1f;", "                    if (!float.TryParse(resistanceArr[i], out resistanceCoefficiance))\n                    {\n                        Debug.LogWarning($\"Invalid value for resistance {resistance} for enemy {eid}\");\n                        continue;\n                    }\n\n                    container.resistanceDict[resistance] = resistanceCoefficiance;\n                }\n                \n                enemyStats.Add(eid, container);\n            }\n\n            new ConfigHeader(eidStatEditorPanel, \"Resistance Editor\");\n            eidResistanceSelector = new EnumField<HitterType>(eidStatEditorPanel, \"Damage type\", \"eidResistanceSelector\", HitterType.revolver);", "            foreach(KeyValuePair<HitterType, string> pair in hitterDisplayNames)\n            {\n                eidResistanceSelector.SetEnumDisplayName(pair.Key, pair.Value);\n            }\n            eidResistanceEnabled = new BoolField(eidStatEditorPanel, \"Enable resistance\", \"eidResistanceEnabler\", false);\n            eidResistanceField = new FloatField(eidStatEditorPanel, \"Resistance multiplier\", \"eidResistanceMultiplier\", 1f, 0.1f, float.MaxValue);\n            eidResistanceInfo = new ConfigHeader(eidStatEditorPanel, \"Current resistance:\", 24, TextAnchor.UpperLeft);\n            \n            ButtonField statResetButton = new ButtonField(eidStatEditorPanel, \"Reset All Stats\", \"statResetButton\");\n            statResetButton.onClick += () =>\n            {", "                foreach (EidStatContainer stat in enemyStats.Values)\n                {\n                    stat.health.value = stat.damage.value = stat.speed.value = 1f;\n                    stat.resistanceDict.Clear();\n                    stat.resistanceStr.value = \"\";\n                }\n                eidResistanceEnabled.value = false;\n                eidResistanceField.interactable = false;\n                eidResistanceField.value = 1f;\n                SetResistanceInfoText(enemyStats[eidStatEditorSelector.value]);\n            };\n\n            void SetResistanceInfoText(EidStatContainer container)\n            {\n                string header = \"Current resistance:\";", "                foreach (KeyValuePair<string, float> pair in container.resistanceDict)\n                {\n                    if (Enum.TryParse(pair.Key.Replace(' ', '_'), out HitterType type))\n                    {\n                        header += $\"\\n{hitterDisplayNames[type]}: {pair.Value}\";\n                    }\n                    else\n                    {\n                        header += $\"\\n{pair.Key}: {pair.Value}\";\n                    }\n                }\n                eidResistanceInfo.text = header;\n            }\n\n            void SetResistanceString(EidStatContainer container)\n            {\n                StringBuilder str = new StringBuilder();", "                foreach(KeyValuePair<string, float> pair in container.resistanceDict)\n                {\n                    if (str.Length != 0)\n                        str.Append(resistanceSeparator);\n                    str.Append(pair.Key);\n                    str.Append(resistanceSeparator);\n                    str.Append(pair.Value.ToString());\n                }\n                container.resistanceStr.value = str.ToString();\n            }\n\n            eidStatEditorSelector.presetLoadPriority = 3;\n            eidStatEditorSelector.onValueChange += (EnumField<EnemyType>.EnumValueChangeEvent e) =>\n            {", "                foreach (KeyValuePair<EnemyType, EidStatContainer> stats in enemyStats)\n                    stats.Value.SetHidden(stats.Key != e.value);\n                EidStatContainer container = enemyStats[e.value];\n\n                if (container.resistanceDict.TryGetValue(eidResistanceSelector.value.ToString().Replace('_', ' '), out float val))\n                {\n                    eidResistanceEnabled.value = true;\n                    eidResistanceField.interactable = true;\n                    eidResistanceField.value = val;\n                }\n                else\n                {\n                    eidResistanceEnabled.value = false;\n                    eidResistanceField.value = 1f;\n                    eidResistanceField.interactable = false;\n                }\n\n                SetResistanceInfoText(container);\n            };\n            eidStatEditorSelector.TriggerValueChangeEvent();\n            eidResistanceSelector.presetLoadPriority = 2;\n            eidResistanceSelector.onValueChange += (EnumField<HitterType>.EnumValueChangeEvent e) =>\n            {\n                EidStatContainer container = enemyStats[eidStatEditorSelector.value];", "                if (container.resistanceDict.TryGetValue(e.value.ToString().Replace('_', ' '), out float val))\n                {\n                    eidResistanceEnabled.value = true;\n                    eidResistanceField.interactable = true;\n                    eidResistanceField.value = val;\n                }\n                else\n                {\n                    eidResistanceEnabled.value = false;\n                    eidResistanceField.interactable = false;\n                    eidResistanceField.value = 1f;\n                }\n            };\n            eidResistanceSelector.TriggerValueChangeEvent();\n            eidResistanceEnabled.presetLoadPriority = 1;\n            eidResistanceEnabled.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                EidStatContainer container = enemyStats[eidStatEditorSelector.value];\n                string currentHitter = eidResistanceSelector.value.ToString().Replace('_', ' ');\n", "                if (e.value)\n                {\n                    container.resistanceDict[currentHitter] = 1f;\n                    eidResistanceField.interactable = true;\n                    eidResistanceField.value = 1f;\n                }\n                else\n                {\n                    if (container.resistanceDict.ContainsKey(currentHitter))\n                        container.resistanceDict.Remove(currentHitter);\n                    eidResistanceField.interactable = false;\n                    eidResistanceField.value = 1f;\n                }\n\n                SetResistanceInfoText(container);\n                SetResistanceString(container);\n            };\n            eidResistanceField.onValueChange += (FloatField.FloatValueChangeEvent e) =>\n            {", "                    if (container.resistanceDict.ContainsKey(currentHitter))\n                        container.resistanceDict.Remove(currentHitter);\n                    eidResistanceField.interactable = false;\n                    eidResistanceField.value = 1f;\n                }\n\n                SetResistanceInfoText(container);\n                SetResistanceString(container);\n            };\n            eidResistanceField.onValueChange += (FloatField.FloatValueChangeEvent e) =>\n            {", "                if (!eidResistanceEnabled.value)\n                    return;\n\n                EidStatContainer container = enemyStats[eidStatEditorSelector.value];\n                string currentHitter = eidResistanceSelector.value.ToString().Replace('_', ' ');\n\n                container.resistanceDict[currentHitter] = e.value;\n                SetResistanceInfoText(container);\n                SetResistanceString(container);\n            };\n\n            new ConfigHeader(globalEnemyPanel, \"Friendly Fire Damage Override\");\n            friendlyFireDamageOverrideToggle = new BoolField(globalEnemyPanel, \"Enabled\", \"friendlyFireDamageOverrideToggle\", true);\n            friendlyFireDamageOverrideToggle.presetLoadPriority = 1;\n            ConfigDivision ffDiv = new ConfigDivision(globalEnemyPanel, \"ffDiv\");\n            friendlyFireDamageOverrideToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                ffDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            friendlyFireDamageOverrideToggle.TriggerValueChangeEvent();\n            friendlyFireDamageOverrideExplosion = new FloatSliderField(ffDiv, \"Friendly-fire:\\nExplosion damage %\", \"friendlyFireDamageOverrideExplosion\", new System.Tuple<float, float>(0, 100), 50, 1);\n            friendlyFireDamageOverrideProjectile = new FloatSliderField(ffDiv, \"Friendly-fire:\\nProjectile damage %\", \"friendlyFireDamageOverrideProjectile\", new System.Tuple<float, float>(0, 100), 50, 1);\n            friendlyFireDamageOverrideFire = new FloatSliderField(ffDiv, \"Friendly-fire:\\nFire damage %\", \"friendlyFireDamageOverrideFire\", new System.Tuple<float, float>(0, 100), 50, 1);\n            friendlyFireDamageOverrideMelee = new FloatSliderField(ffDiv, \"Friendly-fire:\\nMelee damage %\", \"friendlyFireDamageOverrideMelee\", new System.Tuple<float, float>(0, 100), 50, 1);\n            \n            // CERBERUS\n            new ConfigHeader(cerberusPanel, \"Extra Dashes\");\n            cerberusDashToggle = new BoolField(cerberusPanel, \"Enabled\", \"cerberusDashToggle\", true);\n            cerberusDashToggle.presetLoadPriority = 1;\n            ConfigDivision cerebusExtraDashDiv = new ConfigDivision(cerberusPanel, \"cerberusExtraDashDiv\");\n            cerberusDashToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                cerebusExtraDashDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            cerberusDashToggle.TriggerValueChangeEvent();\n            cerberusTotalDashCount = new IntField(cerebusExtraDashDiv, \"Total dash count\", \"cerberusTotalDashCount\", 3, 1, int.MaxValue);\n            new ConfigHeader(cerberusPanel, \"Parryable\");\n            cerberusParryable = new BoolField(cerberusPanel, \"Enabled\", \"cerberusParryable\", true);\n            ConfigDivision cerberusParryableDiv = new ConfigDivision(cerberusPanel, \"cerberusParryableDiv\");\n            cerberusParryable.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                cerberusParryableDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            cerberusParryable.TriggerValueChangeEvent();\n            cerberusParryableDuration = new FloatField(cerberusParryableDiv, \"Duration\", \"cerberusParryableDuration\", 0.5f, 0f, float.MaxValue);\n            cerberusParryDamage = new IntField(cerberusParryableDiv, \"Parry damage\", \"cerberusParryDamage\", 5, 0, int.MaxValue);\n\n            // DRONE\n            droneProjectileToggle = new BoolField(dronePanel, \"Can shoot projectiles\", \"droneProjectileToggle\", true);\n            ConfigDivision droneProjectileDiv = new ConfigDivision(dronePanel, \"droneProjectileDiv\");\n            droneProjectileToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n                droneProjectileDiv.interactable = e.value;\n            };\n            droneProjectileToggle.TriggerValueChangeEvent();\n            droneProjectileDelay = new FloatField(droneProjectileDiv, \"Projectile shoot delay\", \"droneProjectileDelay\", 0.75f, 0f, float.MaxValue);\n            droneProjectileChance = new FloatSliderField(droneProjectileDiv, \"Projectile shoot chance\", \"droneProjectileChance\", new Tuple<float, float>(0, 100), 30f, 1);\n\n            new ConfigHeader(dronePanel, \"-------\");\n            droneExplosionBeamToggle = new BoolField(dronePanel, \"Can shoot explosions\", \"droneExplosionBeamToggle\", true);\n            ConfigDivision droneExplosionBeamDiv = new ConfigDivision(dronePanel, \"droneExplosionBeamDiv\");\n            droneExplosionBeamToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n                droneExplosionBeamDiv.interactable = e.value;\n            };\n            droneExplosionBeamToggle.TriggerValueChangeEvent();\n            droneExplosionBeamDelay = new FloatField(droneExplosionBeamDiv, \"Explosion beam delay\", \"droneExplosionBeamDelay\", 0.75f, 0f, float.MaxValue);\n            droneExplosionBeamChance = new FloatSliderField(droneExplosionBeamDiv, \"Explosion beam chance\", \"droneExplosionBeamChance\", new Tuple<float, float>(0, 100), 35f, 1);\n\n            new ConfigHeader(dronePanel, \"-------\");\n            droneSentryBeamToggle = new BoolField(dronePanel, \"Can shoot sentry beam\", \"droneSentryBeamToggle\", true);\n            droneSentryBeamToggle.presetLoadPriority = 1;\n            ConfigDivision droneSentryBeamDiv = new ConfigDivision(dronePanel, \"droneSentryBeamDiv\");\n            droneSentryBeamToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                droneSentryBeamDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            droneSentryBeamToggle.TriggerValueChangeEvent();\n            droneSentryBeamDamage = new FloatField(droneSentryBeamDiv, \"Sentry beam damage\", \"droneSentryBeamDamage\", 2f, 0f, float.MaxValue);\n            droneSentryBeamDelay = new FloatField(droneSentryBeamDiv, \"Sentry beam delay\", \"droneSentryBeamDelay\", 0.75f, 0f, float.MaxValue);\n            droneSentryBeamChance = new FloatSliderField(droneSentryBeamDiv, \"Sentry beam chance\", \"droneSentryBeamChance\", new Tuple<float, float>(0, 100), 35f, 1);\n            droneDrawSentryBeamLine = new BoolField(droneSentryBeamDiv, \"Draw sentry beam line\", \"droneDrawSentryBeamLine\", true);\n            ConfigDivision droneSentryBeamLineDiv = new ConfigDivision(droneSentryBeamDiv, \"droneSentryBeamLineDiv\");\n            droneDrawSentryBeamLine.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                droneSentryBeamLineDiv.interactable = e.value;\n            };\n            droneSentryBeamLineNormalColor = new ColorField(droneSentryBeamLineDiv, \"Normal color\", \"droneSentryBeamLineNormalColor\", Drone_PlaySound_Patch.defaultLineColor);\n            droneSentryBeamLineWarningColor = new ColorField(droneSentryBeamLineDiv, \"Warning color\", \"droneSentryBeamLineWarningColor\", new Color(1, 1, 1));\n            droneSentryBeamLineIndicatorDelay = new FloatField(droneSentryBeamLineDiv, \"Sentry beam warning delay\", \"droneSentryBeamLineIndicatorDelay\", 0.5f, 0f, float.MaxValue);\n            \n            new ConfigHeader(dronePanel, \"Homing Drone After Death\");\n            droneHomeToggle = new BoolField(dronePanel, \"Enabled\", \"droneHomeToggle\", true);\n            droneHomeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                droneHomeTurnSpeed.interactable = e.value;\n                dirtyField = true;\n            };\n            droneHomeTurnSpeed = new FloatField(dronePanel, \"Turn speed\", \"droneHomeTurnSpeed\", 150f, 0f, float.MaxValue);\n            droneHomeToggle.TriggerValueChangeEvent();\n            \n            // FILTH\n            new ConfigHeader(filthPanel, \"Explode On Hit\");\n            filthExplodeToggle = new BoolField(filthPanel, \"Enabled\", \"filthExplodeOnHit\", true);\n            filthExplodeToggle.presetLoadPriority = 1;\n            ConfigDivision filthExplosionDiv = new ConfigDivision(filthPanel, \"filthExplosionDiv\");\n            filthExplodeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                filthExplosionDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            filthExplodeToggle.TriggerValueChangeEvent();\n            filthExplodeKills = new BoolField(filthExplosionDiv, \"Explosion kills the filth\", \"filthExplosionKills\", false);\n            filthExplosionDamage = new IntField(filthExplosionDiv, \"Explosion damage\", \"filthExplosionDamage\", 30, 0, int.MaxValue);\n            filthExplosionSize = new FloatField(filthExplosionDiv, \"Explosion size\", \"filthExplosionSize\", 0.5f, 0f, float.MaxValue);\n\n            // HIDEOUS MASS\n            new ConfigHeader(hideousMassPanel, \"Insignia On Projectile Hit\");\n            hideousMassInsigniaToggle = new BoolField(hideousMassPanel, \"Enabled\", \"hideousMassInsigniaToggle\", true);\n            hideousMassInsigniaToggle.presetLoadPriority = 1;\n            ConfigDivision hideousMassInsigniaDiv = new ConfigDivision(hideousMassPanel, \"hideousMassInsigniaDiv\");\n            hideousMassInsigniaToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                hideousMassInsigniaDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            hideousMassInsigniaToggle.TriggerValueChangeEvent();\n            hideousMassInsigniaSpeed = new FloatField(hideousMassInsigniaDiv, \"Insignia speed multiplier\", \"hideousMassInsigniaSpeed\", 2.5f, 0f, float.MaxValue);\n            new ConfigHeader(hideousMassInsigniaDiv, \"Vertical Insignia\", 12);\n            hideousMassInsigniaYtoggle = new BoolField(hideousMassInsigniaDiv, \"Enabled\", \"hideousMassInsigniaYtoggle\", true);\n            hideousMassInsigniaYtoggle.presetLoadPriority = 1;\n            ConfigDivision hideousMassInsigniaYdiv = new ConfigDivision(hideousMassInsigniaDiv, \"hideousMassInsigniaYdiv\");\n            hideousMassInsigniaYtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                hideousMassInsigniaYdiv.interactable = e.value;\n            };\n            hideousMassInsigniaYtoggle.TriggerValueChangeEvent();\n            hideousMassInsigniaYdamage = new IntField(hideousMassInsigniaYdiv, \"Damage\", \"hideousMassInsigniaYdamage\", 20, 0, int.MaxValue);\n            hideousMassInsigniaYsize = new FloatField(hideousMassInsigniaYdiv, \"Size\", \"hideousMassInsigniaYsize\", 2f, 0f, float.MaxValue);\n            new ConfigHeader(hideousMassInsigniaDiv, \"Forward Insignia\", 12);\n            hideousMassInsigniaZtoggle = new BoolField(hideousMassInsigniaDiv, \"Enabled\", \"hideousMassInsigniaZtoggle\", false);\n            hideousMassInsigniaZtoggle.presetLoadPriority = 1;\n            ConfigDivision hideousMassInsigniaZdiv = new ConfigDivision(hideousMassInsigniaDiv, \"hideousMassInsigniaZdiv\");\n            hideousMassInsigniaZtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                hideousMassInsigniaZdiv.interactable = e.value;\n            };\n            hideousMassInsigniaZtoggle.TriggerValueChangeEvent();\n            hideousMassInsigniaZdamage = new IntField(hideousMassInsigniaZdiv, \"Damage\", \"hideousMassInsigniaZdamage\", 20, 0, int.MaxValue);\n            hideousMassInsigniaZsize = new FloatField(hideousMassInsigniaZdiv, \"Size\", \"hideousMassInsigniaZsize\", 2f, 0f, float.MaxValue);\n            new ConfigHeader(hideousMassInsigniaDiv, \"Side Insignia\", 12);\n            hideousMassInsigniaXtoggle = new BoolField(hideousMassInsigniaDiv, \"Enabled\", \"hideousMassInsigniaXtoggle\", false);\n            hideousMassInsigniaXtoggle.presetLoadPriority = 1;\n            ConfigDivision hideousMassInsigniaXdiv = new ConfigDivision(hideousMassInsigniaDiv, \"hideousMassInsigniaXdiv\");\n            hideousMassInsigniaXtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                hideousMassInsigniaXdiv.interactable = e.value;\n            };\n            hideousMassInsigniaXtoggle.TriggerValueChangeEvent();\n            hideousMassInsigniaXdamage = new IntField(hideousMassInsigniaXdiv, \"Damage\", \"hideousMassInsigniaXdamage\", 20, 0, int.MaxValue);\n            hideousMassInsigniaXsize = new FloatField(hideousMassInsigniaXdiv, \"Size\", \"hideousMassInsigniaXsize\", 2f, 0f, float.MaxValue);\n\n            // MALICIOUS FACE\n            new ConfigHeader(maliciousFacePanel, \"Radiance When Enraged\");\n            maliciousFaceRadianceOnEnrage = new BoolField(maliciousFacePanel, \"Enabled\", \"maliciousFaceRadianceWhenEnraged\", true);\n            maliciousFaceRadianceOnEnrage.presetLoadPriority = 1;\n            ConfigDivision maliciousFaceRadianceOnEnrageDiv = new ConfigDivision(maliciousFacePanel, \"maliciousFaceRadianceOnEnrageDiv\");\n            maliciousFaceRadianceOnEnrage.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                maliciousFaceRadianceOnEnrageDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            maliciousFaceRadianceOnEnrage.TriggerValueChangeEvent();\n            maliciousFaceRadianceAmount = new IntField(maliciousFaceRadianceOnEnrageDiv, \"Radiance level\", \"maliciousFaceRadianceAmount\", 1, 0, int.MaxValue);\n            new ConfigHeader(maliciousFacePanel, \"Homing Projectile\");\n            maliciousFaceHomingProjectileToggle = new BoolField(maliciousFacePanel, \"Enabled\", \"maliciousFaceHomingProjectileToggle\", true);\n            maliciousFaceHomingProjectileToggle.presetLoadPriority = 1;\n            ConfigDivision maliciousFaceHomingProjecileDiv = new ConfigDivision(maliciousFacePanel, \"maliciousFaceHomingProjecileDiv\");\n            maliciousFaceHomingProjectileToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                maliciousFaceHomingProjecileDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            maliciousFaceHomingProjectileToggle.TriggerValueChangeEvent();\n            maliciousFaceHomingProjectileCount = new IntField(maliciousFaceHomingProjecileDiv, \"Projectile count\", \"maliciousFaceHomingProjectileCount\", 5, 0, int.MaxValue);\n            maliciousFaceHomingProjectileDamage = new IntField(maliciousFaceHomingProjecileDiv, \"Projectile damage\", \"maliciousFaceHomingProjectileDamage\", 25, 0, int.MaxValue);\n            maliciousFaceHomingProjectileSpeed = new FloatField(maliciousFaceHomingProjecileDiv, \"Projectile speed\", \"maliciousFaceHomingProjectileSpeed\", 20f, 0f, float.MaxValue);\n            maliciousFaceHomingProjectileTurnSpeed = new FloatField(maliciousFaceHomingProjecileDiv, \"Projectile turn speed\", \"maliciousFaceHomingProjectileTurnSpeed\", 0.7f, 0f, float.MaxValue);\n            new ConfigHeader(maliciousFacePanel, \"Beam Count\");\n            maliciousFaceBeamCountNormal = new IntField(maliciousFacePanel, \"Normal state\", \"maliciousFaceBeamCountNormal\", 1, 0, int.MaxValue);\n            maliciousFaceBeamCountEnraged = new IntField(maliciousFacePanel, \"Enraged state\", \"maliciousFaceBeamCountEnraged\", 2, 0, int.MaxValue);\n\n            // MINDFLAYER\n            new ConfigHeader(mindflayerPanel, \"Shoot Tweak\");\n            mindflayerShootTweakToggle = new BoolField(mindflayerPanel, \"Enabled\", \"mindflayerShootTweakToggle\", true);\n            mindflayerShootTweakToggle.presetLoadPriority = 1;\n            ConfigDivision mindflayerShootTweakDiv = new ConfigDivision(mindflayerPanel, \"mindflayerShootTweakDiv\");\n            mindflayerShootTweakToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                mindflayerShootTweakDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            mindflayerShootTweakToggle.TriggerValueChangeEvent();\n            mindflayerShootAmount = new IntField(mindflayerShootTweakDiv, \"Projectile amount\", \"mindflayerShootProjectileAmount\", 20, 0, int.MaxValue);\n            mindflayerShootDelay = new FloatField(mindflayerShootTweakDiv, \"Delay between shots\", \"mindflayerShootProjectileDelay\", 0.02f, 0f, float.MaxValue);\n            mindflayerShootInitialSpeed = new FloatField(mindflayerShootTweakDiv, \"Initial speed\", \"mindflayerShootInitialSpeed\", 10f, 0f, float.MaxValue);\n            mindflayerShootTurnSpeed = new FloatField(mindflayerShootTweakDiv, \"Turn speed\", \"mindflayerShootTurnSpeed\", 1f, 0f, float.MaxValue);\n            mindflayerProjectileSelfDamageMultiplier = new FloatSliderField(mindflayerShootTweakDiv, \"Friendly fire damage percent\", \"mindflayerProjectileSelfDamageMultiplier\", new Tuple<float, float>(0f, 100f), 25f, 1);\n            new ConfigHeader(mindflayerPanel, \"Melee Combo\");\n            mindflayerTeleportComboToggle = new BoolField(mindflayerPanel, \"Enabled\", \"mindflayerMeleeCombo\", true);\n            ConfigDivision mindflayerMeleeDiv = new ConfigDivision(mindflayerPanel, \"mindflayerMeleeDiv\");\n            mindflayerTeleportComboToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n\n            // SHCISM\n            new ConfigHeader(schismPanel, \"Spread Attack\");\n            schismSpreadAttackToggle = new BoolField(schismPanel, \"Enabled\", \"schismSpreadAttackToggle\", true);\n            schismSpreadAttackToggle.presetLoadPriority = 1;\n            ConfigDivision schismSpreadAttackDiv = new ConfigDivision(schismPanel, \"schismSpreadAttackDiv\");\n            schismSpreadAttackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                schismSpreadAttackDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            schismSpreadAttackToggle.TriggerValueChangeEvent();\n            schismSpreadAttackAngle = new FloatSliderField(schismSpreadAttackDiv, \"Angular spread\", \"schismSpreadAttackAngle\", new System.Tuple<float, float>(0, 360), 30, 1);\n            schismSpreadAttackCount = new IntField(schismSpreadAttackDiv, \"Projectile count per side\", \"schismSpreadAttackCount\", 2, 0, int.MaxValue);\n\n            // SOLIDER\n            new ConfigHeader(soliderPanel, \"Coins Ignore Weak Point\");\n            soliderCoinsIgnoreWeakPointToggle = new BoolField(soliderPanel, \"Enabled\", \"soliderCoinsIgnoreWeakPoint\", true);\n            soliderCoinsIgnoreWeakPointToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            new ConfigHeader(soliderPanel, \"Shoot Tweak\");\n            soliderShootTweakToggle = new BoolField(soliderPanel, \"Enabled\", \"soliderShootTweakToggle\", true);\n            soliderShootTweakToggle.presetLoadPriority = 1;\n            ConfigDivision soliderShootTweakDiv = new ConfigDivision(soliderPanel, \"soliderShootTweakDiv\");\n            soliderShootTweakToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                soliderShootTweakDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            soliderShootTweakToggle.TriggerValueChangeEvent();\n            soliderShootCount = new IntField(soliderShootTweakDiv, \"Shoot count\", \"soliderShootCount\", 3, 1, int.MaxValue);\n            new ConfigHeader(soliderPanel, \"Shoot Grenade\");\n            soliderShootGrenadeToggle = new BoolField(soliderPanel, \"Enabled\", \"soliderShootGrenade\", true);\n            soliderShootGrenadeToggle.presetLoadPriority = 1;\n            ConfigDivision soliderShootGrenadeDiv = new ConfigDivision(soliderPanel, \"soliderShootGrenadeDiv\");\n            soliderShootGrenadeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                soliderShootGrenadeDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            soliderGrenadeDamage = new IntField(soliderShootGrenadeDiv, \"Explosion damage\", \"soliderGrenadeDamage\", 10, 0, int.MaxValue);\n            soliderGrenadeSize = new FloatField(soliderShootGrenadeDiv, \"Explosion size multiplier\", \"soliderGrenadeSize\", 0.75f, 0f, float.MaxValue);\n\n            // STALKER\n            new ConfigHeader(stalkerPanel, \"Survive Explosion\");\n            stalkerSurviveExplosion = new BoolField(stalkerPanel, \"Enabled\", \"stalkerSurviveExplosion\", true);\n            new ConfigHeader(stalkerPanel, \"Spread Radiance\");\n            stalkerSpreadHealthRad = new BoolField(stalkerPanel, \"Spread health buff\", \"stalkerSpreadHealthRad\", true);\n            stalkerSpreadHealthAddition = new IntField(stalkerPanel, \"Spread health additional level\", \"stalkerSpreadHealthAddition\", 1, 0, int.MaxValue);\n            stalkerSpreadDamageRad = new BoolField(stalkerPanel, \"Spread damage buff\", \"stalkerSpreadDamageRad\", true);\n            stalkerSpreadDamageAddition = new IntField(stalkerPanel, \"Spread damage additional level\", \"stalkerSpreadDamageAddition\", 1, 0, int.MaxValue);\n            stalkerSpreadSpeedRad = new BoolField(stalkerPanel, \"Spread health buff\", \"stalkerSpreadSpeedRad\", true);\n            stalkerSpreadSpeedAddition = new IntField(stalkerPanel, \"Spread health additional level\", \"stalkerSpreadSpeedAddition\", 1, 0, int.MaxValue);\n\n            // STRAY\n            new ConfigHeader(strayPanel, \"Shoot Tweak\");\n            strayShootToggle = new BoolField(strayPanel, \"Enabled\", \"strayShootToggle\", true);\n            strayShootToggle.presetLoadPriority = 1;\n            ConfigDivision strayShootDiv = new ConfigDivision(strayPanel, \"strayShootDiv\");\n            strayShootToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                strayShootDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            strayShootToggle.TriggerValueChangeEvent();\n            strayShootCount = new IntField(strayShootDiv, \"Extra projectile count\", \"strayShootCount\", 5, 1, int.MaxValue);\n            strayShootSpeed = new FloatField(strayShootDiv, \"Shoot speed\", \"strayShootSpeed\", 20f, 0f, float.MaxValue);\n            new ConfigHeader(strayPanel, \"Coins Ignore Weak Point\");\n            strayCoinsIgnoreWeakPointToggle = new BoolField(strayPanel, \"Enabled\", \"strayCoinsIgnoreWeakPointToggle\", true);\n            strayCoinsIgnoreWeakPointToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n\n            // STREET CLEANER\n            new ConfigHeader(streetCleanerPanel, \"Predictive Parry\");\n            streetCleanerPredictiveDodgeToggle = new BoolField(streetCleanerPanel, \"Enabled\", \"streetCleanerPredictiveDodgeToggle\", true);\n            streetCleanerPredictiveDodgeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            new ConfigHeader(streetCleanerPanel, \"Coins Ignore Weak Point\");\n            streetCleanerCoinsIgnoreWeakPointToggle = new BoolField(streetCleanerPanel, \"Enabled\", \"streetCleanerCoinsIgnoreWeakPointToggle\", true);\n            streetCleanerCoinsIgnoreWeakPointToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n\n            // SWORDS MACHINE\n            new ConfigHeader(swordsMachinePanel, \"Knockback Modifier\");\n            swordsMachineNoLightKnockbackToggle = new BoolField(swordsMachinePanel, \"No light knockback\", \"swordsMachineNoLightKnockbackToggle\", true);\n            swordsMachineNoLightKnockbackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            swordsMachineSecondPhaseMode = new EnumField<SwordsMachineSecondPhase>(swordsMachinePanel, \"Second phase\", \"swordsMachineSecondPhaseMode\", SwordsMachineSecondPhase.SpeedUp);\n            swordsMachineSecondPhaseSpeed = new FloatField(swordsMachinePanel, \"Speed multiplier\", \"swordsMachineSecondPhaseSpeed\", 2.5f, 1f, float.MaxValue);\n            swordsMachineSecondPhaseMode.onValueChange += (EnumField<SwordsMachineSecondPhase>.EnumValueChangeEvent e) =>\n            {\n                dirtyField = true;\n                swordsMachineSecondPhaseSpeed.hidden = e.value != SwordsMachineSecondPhase.SpeedUp;\n            };\n            swordsMachineSecondPhaseMode.TriggerValueChangeEvent();\n\n            new ConfigHeader(swordsMachinePanel, \"Explosive Sword Throw\");\n            swordsMachineExplosiveSwordToggle = new BoolField(swordsMachinePanel, \"Enabled\", \"swordsMachineExplosiveSwordToggle\", true);\n            swordsMachineExplosiveSwordToggle.presetLoadPriority = 1;\n            ConfigDivision swordsMachineExplosiveSwordDiv = new ConfigDivision(swordsMachinePanel, \"swordsMachineExplosiveSwordDiv\");\n            swordsMachineExplosiveSwordToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                swordsMachineExplosiveSwordDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            swordsMachineExplosiveSwordToggle.TriggerValueChangeEvent();\n            swordsMachineExplosiveSwordDamage = new IntField(swordsMachineExplosiveSwordDiv, \"Explosion damage\", \"swordsMachineExplosiveSwordDamage\", 20, 0, int.MaxValue);\n            swordsMachineExplosiveSwordSize = new FloatField(swordsMachineExplosiveSwordDiv, \"Explosion size multiplier\", \"swordsMachineExplosiveSwordSize\", 0.5f, 0f, float.MaxValue);\n\n            // VIRTUE\n            new ConfigHeader(virtuePanel, \"Tweak Normal Attack\");\n            virtueTweakNormalAttackToggle = new BoolField(virtuePanel, \"Enabled\", \"virtueTweakNormalAttackToggle\", true);\n            virtueTweakNormalAttackToggle.presetLoadPriority = 1;\n            ConfigDivision virtueTweakNormalAttackDiv = new ConfigDivision(virtuePanel, \"virtueTweakNormalAttackDiv\");\n            virtueTweakNormalAttackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueTweakNormalAttackDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            virtueTweakNormalAttackToggle.TriggerValueChangeEvent();\n            virtueNormalAttackType = new EnumField<VirtueAttackType>(virtueTweakNormalAttackDiv, \"Attack type\", \"virtueNormalAttackType\", VirtueAttackType.Insignia);\n\n            ConfigDivision virtueNormalInsigniaDiv = new ConfigDivision(virtueTweakNormalAttackDiv, \"virtueNormalInsigniaDiv\");\n            virtueNormalInsigniaLastMulti = new FloatField(virtueNormalInsigniaDiv, \"Insignia last multiplier\", \"virtueNormalInsigniaLastMulti\", 1f, 0.1f, float.MaxValue);\n            new ConfigHeader(virtueNormalInsigniaDiv, \"Vertical Insignia\", 12);\n            virtueNormalInsigniaYtoggle = new BoolField(virtueNormalInsigniaDiv, \"Enabled\", \"virtueNormalInsigniaYtoggle\", true);\n            virtueNormalInsigniaYtoggle.presetLoadPriority = 1;\n            ConfigDivision virtueNormalYInsigniaDiv = new ConfigDivision(virtueNormalInsigniaDiv, \"virtueNormalYInsigniaDiv\");\n            virtueNormalInsigniaYtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueNormalYInsigniaDiv.interactable = e.value;\n            };\n            virtueNormalInsigniaYtoggle.TriggerValueChangeEvent();\n            virtueNormalInsigniaYdamage = new IntField(virtueNormalYInsigniaDiv, \"Damage\", \"virtueNormalInsigniaYdamage\", 30, 0, int.MaxValue);\n            virtueNormalInsigniaYsize = new FloatField(virtueNormalYInsigniaDiv, \"Size\", \"virtueNormalInsigniaYsize\", 2f, 0f, float.MaxValue);\n\n            new ConfigHeader(virtueNormalInsigniaDiv, \"Forward Insignia\", 12);\n            virtueNormalInsigniaZtoggle = new BoolField(virtueNormalInsigniaDiv, \"Enabled\", \"virtueNormalInsigniaZtoggle\", false);\n            virtueNormalInsigniaZtoggle.presetLoadPriority = 1;\n            ConfigDivision virtueNormalZInsigniaDiv = new ConfigDivision(virtueNormalInsigniaDiv, \"virtueNormalZInsigniaDiv\");\n            virtueNormalInsigniaZtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueNormalZInsigniaDiv.interactable = e.value;\n            };\n            virtueNormalInsigniaZtoggle.TriggerValueChangeEvent();\n            virtueNormalInsigniaZdamage = new IntField(virtueNormalZInsigniaDiv, \"Damage\", \"virtueNormalInsigniaZdamage\", 15, 0, int.MaxValue);\n            virtueNormalInsigniaZsize = new FloatField(virtueNormalZInsigniaDiv, \"Size\", \"virtueNormalInsigniaZsize\", 2f, 0f, float.MaxValue);\n\n            new ConfigHeader(virtueNormalInsigniaDiv, \"Side Insignia\", 12);\n            virtueNormalInsigniaXtoggle = new BoolField(virtueNormalInsigniaDiv, \"Enabled\", \"virtueNormalInsigniaXtoggle\", false);\n            virtueNormalInsigniaXtoggle.presetLoadPriority = 1;\n            ConfigDivision virtueNormalXInsigniaDiv = new ConfigDivision(virtueNormalInsigniaDiv, \"virtueNormalXInsigniaDiv\");\n            virtueNormalInsigniaXtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueNormalXInsigniaDiv.interactable = e.value;\n            };\n            virtueNormalInsigniaXtoggle.TriggerValueChangeEvent();\n            virtueNormalInsigniaXdamage = new IntField(virtueNormalXInsigniaDiv, \"Damage\", \"virtueNormalInsigniaXdamage\", 15, 0, int.MaxValue);\n            virtueNormalInsigniaXsize = new FloatField(virtueNormalXInsigniaDiv, \"Size\", \"virtueNormalInsigniaXsize\", 2f, 0f, float.MaxValue);\n\n            ConfigDivision virtueNormalLigthningDiv = new ConfigDivision(virtueTweakNormalAttackDiv, \"virtueNormalLigthningDiv\");\n            virtueNormalLightningDamage = new FloatField(virtueNormalLigthningDiv, \"Damage multiplier\", \"virtueNormalLightningDamage\", 1f, 0f, float.MaxValue);\n            //virtueNormalLightningSize = new FloatField(virtuePanel, \"Size multiplier\", \"virtueNormalLightningSize\", 1f);\n            virtueNormalLightningDelay = new FloatField(virtueNormalLigthningDiv, \"Lighning delay\", \"virtueNormalLightningDelay\", 3f, 0f, float.MaxValue);\n\n            virtueNormalAttackType.presetLoadPriority = 1;\n            virtueNormalAttackType.onValueChange += (EnumField<VirtueAttackType>.EnumValueChangeEvent newType) =>\n            {", "                if (newType.value == VirtueAttackType.Insignia)\n                {\n                    virtueNormalInsigniaDiv.hidden = false;\n                    virtueNormalLigthningDiv.hidden = true;\n                }\n                else\n                {\n                    virtueNormalInsigniaDiv.hidden = true;\n                    virtueNormalLigthningDiv.hidden = false;\n                }\n            };\n            virtueNormalAttackType.TriggerValueChangeEvent();\n\n            new ConfigHeader(virtuePanel, \"Tweak Enraged Attack\");\n            virtueTweakEnragedAttackToggle = new BoolField(virtuePanel, \"Enabled\", \"virtueTweakEnragedAttackToggle\", true);\n            virtueTweakEnragedAttackToggle.presetLoadPriority = 1;\n            ConfigDivision virtueTweakEnragedAttackDiv = new ConfigDivision(virtuePanel, \"virtueTweakEnragedAttackDiv\");\n            virtueTweakEnragedAttackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueTweakEnragedAttackDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            virtueTweakEnragedAttackToggle.TriggerValueChangeEvent();\n            virtueEnragedAttackType = new EnumField<VirtueAttackType>(virtueTweakEnragedAttackDiv, \"Attack type\", \"virtueEnragedAttackType\", VirtueAttackType.Insignia);\n\n            ConfigDivision virtueEnragedInsigniaDiv = new ConfigDivision(virtueTweakEnragedAttackDiv, \"virtueEnragedInsigniaDiv\");\n            virtueEnragedInsigniaLastMulti = new FloatField(virtueEnragedInsigniaDiv, \"Insignia last multiplier\", \"virtueEnragedInsigniaLastMulti\", 1f, 0.1f, float.MaxValue);\n            ConfigHeader virtueEnragedYInsigniaHeader = new ConfigHeader(virtueEnragedInsigniaDiv, \"Vertical Insignia\", 12);\n            virtueEnragedInsigniaYtoggle = new BoolField(virtueEnragedInsigniaDiv, \"Enabled\", \"virtueEnragedInsigniaYtoggle\", true);\n            virtueEnragedInsigniaYtoggle.presetLoadPriority = 1;\n            ConfigDivision virtueEnragedYInsigniaDiv = new ConfigDivision(virtueEnragedInsigniaDiv, \"virtueEnragedYInsigniaDiv\");\n            virtueEnragedInsigniaYtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueEnragedYInsigniaDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            virtueEnragedInsigniaYtoggle.TriggerValueChangeEvent();\n            virtueEnragedInsigniaYdamage = new IntField(virtueEnragedYInsigniaDiv, \"Damage\", \"virtueEnragedInsigniaYdamage\", 30, 0, int.MaxValue);\n            virtueEnragedInsigniaYsize = new FloatField(virtueEnragedYInsigniaDiv, \"Size\", \"virtueEnragedInsigniaYsize\", 2f, 0f, float.MaxValue);\n\n            ConfigHeader virtueEnragedZInsigniaHeader = new ConfigHeader(virtueEnragedInsigniaDiv, \"Forward Insignia\", 12);\n            virtueEnragedInsigniaZtoggle = new BoolField(virtueEnragedInsigniaDiv, \"Enabled\", \"virtueEnragedInsigniaZtoggle\", true);\n            virtueEnragedInsigniaZtoggle.presetLoadPriority = 1;\n            ConfigDivision virtueEnragedZInsigniaDiv = new ConfigDivision(virtueEnragedInsigniaDiv, \"virtueEnragedZInsigniaDiv\");\n            virtueEnragedInsigniaZtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueEnragedZInsigniaDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            virtueEnragedInsigniaZtoggle.TriggerValueChangeEvent();\n            virtueEnragedInsigniaZdamage = new IntField(virtueEnragedZInsigniaDiv, \"Damage\", \"virtueEnragedInsigniaZdamage\", 15, 0, int.MaxValue);\n            virtueEnragedInsigniaZsize = new FloatField(virtueEnragedZInsigniaDiv, \"Size\", \"virtueEnragedInsigniaZsize\", 2f, 0f, float.MaxValue);\n\n            ConfigHeader virtueEnragedXInsigniaHeader = new ConfigHeader(virtueEnragedInsigniaDiv, \"Side Insignia\", 12);\n            virtueEnragedInsigniaXtoggle = new BoolField(virtueEnragedInsigniaDiv, \"Enabled\", \"virtueEnragedInsigniaXtoggle\", true);\n            virtueEnragedInsigniaXtoggle.presetLoadPriority = 1;\n            ConfigDivision virtueEnragedXInsigniaDiv = new ConfigDivision(virtueEnragedInsigniaDiv, \"virtueEnragedXInsigniaDiv\");\n            virtueEnragedInsigniaXtoggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                virtueEnragedXInsigniaDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            virtueEnragedInsigniaXtoggle.TriggerValueChangeEvent();\n            virtueEnragedInsigniaXdamage = new IntField(virtueEnragedXInsigniaDiv, \"Damage\", \"virtueEnragedInsigniaXdamage\", 15, 0, int.MaxValue);\n            virtueEnragedInsigniaXsize = new FloatField(virtueEnragedXInsigniaDiv, \"Size\", \"virtueEnragedInsigniaXsize\", 2f, 0f, float.MaxValue);\n\n            ConfigDivision virtueEnragedLigthningDiv = new ConfigDivision(virtueTweakEnragedAttackDiv, \"virtueEnragedLigthningDiv\");\n            virtueEnragedLightningDamage = new FloatField(virtueEnragedLigthningDiv, \"Damage multiplier\", \"virtueEnragedLightningDamage\", 1f, 0f, float.MaxValue);\n            //virtueEnragedLightningSize = new FloatField(virtuePanel, \"Size multiplier\", \"virtueEnragedLightningSize\", 1f);\n            virtueEnragedLightningDelay = new FloatField(virtueEnragedLigthningDiv, \"Lighning delay\", \"virtueEnragedLightningDelay\", 2f, 0f, float.MaxValue);\n\n            virtueEnragedAttackType.presetLoadPriority = 1;\n            virtueEnragedAttackType.onValueChange += (EnumField<VirtueAttackType>.EnumValueChangeEvent newType) =>\n            {", "                if (newType.value == VirtueAttackType.Insignia)\n                {\n                    virtueEnragedInsigniaDiv.hidden = false;\n                    virtueEnragedLigthningDiv.hidden = true;\n                }\n                else\n                {\n                    virtueEnragedInsigniaDiv.hidden = true;\n                    virtueEnragedLigthningDiv.hidden = false;\n                }\n            };\n            virtueEnragedAttackType.TriggerValueChangeEvent();\n\n            // FERRYMAN\n            new ConfigHeader(ferrymanPanel, \"Melee Combo\");\n            ferrymanComboToggle = new BoolField(ferrymanPanel, \"Enabled\", \"ferrymanComboToggle\", true);\n            ferrymanComboToggle.presetLoadPriority = 1;\n            ConfigDivision ferrymanComboDiv = new ConfigDivision(ferrymanPanel, \"ferrymanComboDiv\");\n            ferrymanComboToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                ferrymanComboDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            ferrymanComboToggle.TriggerValueChangeEvent();\n            ferrymanComboCount = new IntField(ferrymanComboDiv, \"Count\", \"ferrymanComboCount\", 3, 1, int.MaxValue);\n            ferrymanAttackDelay = new FloatField(ferrymanComboDiv, \"Delay (0-1)\", \"ferrymanAttackDelay\", 0.1f, 0f, float.MaxValue);\n\n            // SENTRY\n            new ConfigHeader(turretPanel, \"Burst Fire\");\n            turretBurstFireToggle = new BoolField(turretPanel, \"Enabled\", \"turretBurstFireToggle\", true);\n            turretBurstFireToggle.presetLoadPriority = 1;\n            ConfigDivision turretBurstFireDiv = new ConfigDivision(turretPanel, \"turretBurstFireDiv\");\n            turretBurstFireToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                turretBurstFireDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            turretBurstFireToggle.TriggerValueChangeEvent();\n            turretBurstFireCount = new IntField(turretBurstFireDiv, \"Extra shots\", \"turretBurstFireCount\", 2, 0, int.MaxValue);\n            turretBurstFireDelay = new FloatField(turretBurstFireDiv, \"Delay between shots\", \"turretBurstFireDelay\", 1f, 0f, float.MaxValue);\n\n            // FLESH PRISON\n            new ConfigHeader(fleshPrisonPanel, \"Spin Insignia\");\n            fleshPrisonSpinAttackToggle = new BoolField(fleshPrisonPanel, \"Enabled\", \"fleshPrisonSpinAttackToggle\", true);\n            fleshPrisonSpinAttackToggle.presetLoadPriority = 1;\n            ConfigDivision fleshPrionSpinAttackDiv = new ConfigDivision(fleshPrisonPanel, \"fleshPrionSpinAttackDiv\");\n            fleshPrisonSpinAttackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                fleshPrionSpinAttackDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            fleshPrisonSpinAttackToggle.TriggerValueChangeEvent();\n            fleshPrisonSpinAttackCount = new IntField(fleshPrionSpinAttackDiv, \"Insignia count\", \"fleshPrisonSpinAttackCount\", 5, 1, int.MaxValue);\n            fleshPrisonSpinAttackDamage = new IntField(fleshPrionSpinAttackDiv, \"Insignia damage\", \"fleshPrisonSpinAttackDamage\", 10, 0, int.MaxValue);\n            fleshPrisonSpinAttackSize = new FloatField(fleshPrionSpinAttackDiv, \"Insignia size\", \"fleshPrisonSpinAttackSize\", 2f, 0f, float.MaxValue);\n            fleshPrisonSpinAttackDistance = new FloatField(fleshPrionSpinAttackDiv, \"Circle radius\", \"fleshPrisonSpinAttackDistance\", 30f, 0f, float.MaxValue);\n            fleshPrisonSpinAttackTurnSpeed = new FloatField(fleshPrionSpinAttackDiv, \"Turn speed\", \"fleshPrisonSpinAttackTurnSpeed\", 30f, 0f, float.MaxValue);\n            fleshPrisonSpinAttackActivateSpeed = new FloatField(fleshPrionSpinAttackDiv, \"Activasion speed\", \"fleshPrisonSpinAttackActivateSpeed\", 0.5f, 0f, float.MaxValue);\n\n            // MINOS PRIME\n            minosPrimeEarlyPhaseToggle = new BoolField(minosPrimePanel, \"Start with phase 2\", \"minosPrimeEarlyPhaseToggle\", true);\n            minosPrimeComboToggle = new BoolField(minosPrimePanel, \"Faster combos\", \"minosPrimeComboToggle\", true);\n            new ConfigHeader(minosPrimePanel, \"Random Teleport Before Shoot\");\n            minosPrimeRandomTeleportToggle = new BoolField(minosPrimePanel, \"Enabled\", \"minosPrimeRandomTeleportToggle\", true);\n            minosPrimeRandomTeleportToggle.presetLoadPriority = 1;\n            ConfigDivision minosPrimeRandomTeleportDiv = new ConfigDivision(minosPrimePanel, \"minosPrimeRandomTeleportDiv\");\n            minosPrimeRandomTeleportToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                minosPrimeRandomTeleportDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            minosPrimeRandomTeleportToggle.TriggerValueChangeEvent();\n            minosPrimeRandomTeleportMinDistance = new FloatField(minosPrimeRandomTeleportDiv, \"Minimum distance\", \"minosPrimeRandomTeleportMinDistance\", 20f, 0f, float.MaxValue);\n            minosPrimeRandomTeleportMaxDistance = new FloatField(minosPrimeRandomTeleportDiv, \"Maximum distance\", \"minosPrimeRandomTeleportMaxDistance\", 50f, 0f, float.MaxValue);\n            new ConfigHeader(minosPrimePanel, \"Teleport Trail\");\n            minosPrimeTeleportTrail = new BoolField(minosPrimePanel, \"Enabled\", \"minosPrimeTeleportTrail\", true);\n            minosPrimeTeleportTrail.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                minosPrimeTeleportTrailDuration.hidden = e.value;\n                dirtyField = true;\n            };\n            minosPrimeTeleportTrailDuration = new FloatField(minosPrimePanel, \"Duration\", \"minosPrimeTeleportTrailDuration\", 1f, 0, float.PositiveInfinity);\n\n            new ConfigHeader(minosPrimePanel, \"Combo Explosive Finish\");\n            minosPrimeComboExplosionToggle = new BoolField(minosPrimePanel, \"Enabled\", \"minosPrimeComboExplosionToggle\", true);\n            minosPrimeComboExplosionSize = new FloatField(minosPrimePanel, \"Explosion size multiplier\", \"minosPrimeComboExplosionSize\", 0.9f, 0f, float.MaxValue);\n            minosPrimeComboExplosionDamage = new FloatField(minosPrimePanel, \"Explosion damage multiplier\", \"minosPrimeComboExplosionDamage\", 1f, 0f, float.MaxValue);\n            minosPrimeComboExplosionToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                minosPrimeComboExplosionSize.interactable = e.value;\n                minosPrimeComboExplosionDamage.interactable = e.value;\n            };\n            minosPrimeComboExplosionToggle.TriggerValueChangeEvent();\n\n            new ConfigHeader(minosPrimePanel, \"Big Explosion Attack\");\n            minosPrimeExplosionToggle = new BoolField(minosPrimePanel, \"Enabled\", \"minosPrimeExplosionToggle\", true);\n            minosPrimeExplosionChance = new FloatSliderField(minosPrimePanel, \"Percent chance\", \"minosPrimeExplosionChance\", new Tuple<float, float>(0, 100), 50, 1);\n            minosPrimeExplosionWindupSpeed = new FloatField(minosPrimePanel, \"Windup speed\", \"minosPrimeExplosionWindupSpeed\", 5f, 1f, float.MaxValue);\n            minosPrimeExplosionSize = new FloatField(minosPrimePanel, \"Explosion size multiplier\", \"minosPrimeExplosionSize\", 1.6f, 0f, float.MaxValue);\n            minosPrimeExplosionDamage = new FloatField(minosPrimePanel, \"Explosion damage multiplier\", \"minosPrimeExplosionDamage\", 1f, 0f, float.MaxValue);\n            minosPrimeExplosionToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                minosPrimeExplosionChance.interactable = e.value;\n                minosPrimeExplosionSize.interactable = e.value;\n                minosPrimeExplosionDamage.interactable = e.value;\n            };\n            minosPrimeExplosionToggle.TriggerValueChangeEvent();\n\n            new ConfigHeader(minosPrimePanel, \"Crush Attack\");\n            minosPrimeCrushAttackToggle = new BoolField(minosPrimePanel, \"Enabled\", \"minosPrimeCrushAttackToggle\", true);\n            minosPrimeCrushAttackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n                minosPrimeCrushAttackChance.interactable = e.value;\n            };\n            minosPrimeCrushAttackChance = new FloatSliderField(minosPrimePanel, \"Chance\", \"minosPrimeCrushAttackChance\", new Tuple<float, float>(0, 100), 50);\n            minosPrimeCrushAttackToggle.TriggerValueChangeEvent();\n\n            new ConfigHeader(minosPrimePanel, \"End Combo With Dropkick\");\n            minosPrimeComboExplosiveEndToggle = new BoolField(minosPrimePanel, \"Enabled\", \"minosPrimeComboExplosiveEndToggle\", true);\n            minosPrimeComboExplosiveEndToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n                minosPrimeComboExplosiveEndChance.interactable = e.value;\n            };\n            minosPrimeComboExplosiveEndChance = new FloatSliderField(minosPrimePanel, \"Chance\", \"minosPrimeComboExplosiveEndChance\", new Tuple<float, float>(0, 100), 80);\n            minosPrimeComboExplosiveEndToggle.TriggerValueChangeEvent();\n\n            // V2 - FIRST\n            new ConfigHeader(v2FirstPanel, \"Knuckleblaster\");\n            v2FirstKnuckleBlasterToggle = new BoolField(v2FirstPanel, \"Enabled\", \"v2FirstKnuckleBlasterToggle\", true);\n            v2FirstKnuckleBlasterToggle.presetLoadPriority = 1;\n            ConfigDivision v2FirstKnuckleBlasterDiv = new ConfigDivision(v2FirstPanel, \"v2FirstKnuckleBlasterDiv\");\n            v2FirstKnuckleBlasterToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2FirstKnuckleBlasterDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            v2FirstKnuckleBlasterToggle.TriggerValueChangeEvent();\n            v2FirstKnuckleBlasterCooldown = new FloatField(v2FirstKnuckleBlasterDiv, \"Cooldown\", \"v2FirstKnuckleBlasterCooldown\", 3f, 0f, float.MaxValue);\n            v2FirstKnuckleBlasterHitPlayerToggle = new BoolField(v2FirstKnuckleBlasterDiv, \"Hit player\", \"v2FirstKnuckleBlasterHitPlayerToggle\", true);\n            v2FirstKnuckleBlasterHitPlayerToggle.presetLoadPriority = 1;\n            ConfigDivision v2FirstKnuckleBlasterHitPlayerDiv = new ConfigDivision(v2FirstKnuckleBlasterDiv, \"v2FirstKnuckleBlasterHitPlayerDiv\");\n            v2FirstKnuckleBlasterHitPlayerToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2FirstKnuckleBlasterHitPlayerDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            v2FirstKnuckleBlasterHitPlayerToggle.TriggerValueChangeEvent();\n            v2FirstKnuckleBlasterHitPlayerMinDistance = new FloatField(v2FirstKnuckleBlasterHitPlayerDiv, \"Minimum distance to player\", \"v2FirstKnuckleBlasterHitPlayerMinDistance\", 5f, 0f, float.MaxValue);\n            v2FirstKnuckleBlasterHitDamage = new IntField(v2FirstKnuckleBlasterHitPlayerDiv, \"Hit damage\", \"v2FirstKnuckleBlasterHitDamage\", 5, 0, int.MaxValue);\n            v2FirstKnuckleBlasterDeflectShotgunToggle = new BoolField(v2FirstKnuckleBlasterDiv, \"Deflect shotgun pellets\", \"v2FirstKnuckleBlasterDeflectShotgunToggle\", false);\n            v2FirstKnuckleBlasterDeflectShotgunToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            v2FirstKnuckleBlasterExplosionDamage = new IntField(v2FirstKnuckleBlasterDiv, \"Explosion damage\", \"v2FirstKnuckleBlasterExplosionDamage\", 10, 0, int.MaxValue);\n            v2FirstKnuckleBlasterSize = new FloatField(v2FirstKnuckleBlasterDiv, \"Explosion size\", \"v2FirstKnuckleBlasterSize\", 15, 0f, float.MaxValue);\n            v2FirstKnuckleBlasterSpeed = new FloatField(v2FirstKnuckleBlasterDiv, \"Explosion speed\", \"v2FirstKnuckleBlasterSpeed\", 15f / 2, 0f, float.MaxValue);\n\n            new ConfigHeader(v2FirstPanel, \"Grenade Snipe\");\n            v2FirstCoreSnipeToggle = new BoolField(v2FirstPanel, \"Enabled\", \"v2FirstCoreSnipeToggle\", true);\n            v2FirstCoreSnipeToggle.presetLoadPriority = 1;\n            ConfigDivision v2FirstCoreSnipeDiv = new ConfigDivision(v2FirstPanel, \"v2FirstCoreSnipeDiv\");\n            v2FirstCoreSnipeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2FirstCoreSnipeDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            v2FirstCoreSnipeToggle.TriggerValueChangeEvent();\n            v2FirstCoreSnipeMaxDistanceToPlayer = new FloatField(v2FirstCoreSnipeDiv, \"Max distance to player\", \"v2FirstCoreSnipeMaxDistanceToPlayer\", 15f, 0f, float.MaxValue);\n            v2FirstCoreSnipeMinDistanceToV2 = new FloatField(v2FirstCoreSnipeDiv, \"Min distance to V2\", \"v2FirstCoreSnipeMinDistanceToV2\", 0f, 0f, float.MaxValue);\n            v2FirstCoreSnipeReactionTime = new FloatField(v2FirstCoreSnipeDiv, \"Reaction time\", \"v2FirstCoreSnipeReactionTime\", 0.2f, 0f, 5f);\n\n            new ConfigHeader(v2FirstPanel, \"Sharpshooter\");\n            v2FirstSharpshooterToggle = new BoolField(v2FirstPanel, \"Enabled\", \"v2FirstSharpshooterToggle\", true);\n            v2FirstSharpshooterToggle.presetLoadPriority = 1;\n            ConfigDivision v2FirstSharpShooterDiv = new ConfigDivision(v2FirstPanel, \"v2FirstSharpShooterDiv\");\n            v2FirstSharpshooterToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2FirstSharpShooterDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            v2FirstSharpshooterChance = new FloatSliderField(v2FirstSharpShooterDiv, \"Chance\", \"v2FirstSharpshooterChance\", new System.Tuple<float, float>(0, 100), 80, 1);\n            v2FirstSharpshooterAutoaimAngle = new FloatSliderField(v2FirstSharpShooterDiv, \"Autoaim angle maximum\", \"v2FirstSharpshooterAutoaimAngle\", new System.Tuple<float, float>(0, 180), 45, 1);\n            v2FirstSharpshooterReflections = new IntField(v2FirstSharpShooterDiv, \"Ricochet count\", \"v2FirstSharpshooterReflections\", 2, 0, int.MaxValue);\n            v2FirstSharpshooterDamage = new FloatField(v2FirstSharpShooterDiv, \"Damage multiplier\", \"v2FirstSharpshooterDamage\", 1f, 0f, float.MaxValue);\n            v2FirstSharpshooterSpeed = new FloatField(v2FirstSharpShooterDiv, \"Speed multiplier\", \"v2FirstSharpshooterSpeed\", 1f, 0f, float.MaxValue);\n            v2FirstSharpshooterToggle.TriggerValueChangeEvent();\n\n            // V2 - SECOND\n            /*v2SecondStartEnraged = new BoolField(v2SecondPanel, \"Start enraged\", \"v2SecondStartEnraged\", true);\n            v2SecondStartEnraged.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };*/\n            v2SecondRocketLauncherToggle = new BoolField(v2SecondPanel, \"Use rocket launcher\", \"v2SecondRocketLauncherToggle\", true);\n            \n            /*v2SecondCoinRailcannon = new BoolField(v2SecondPanel, \"Electric railcannon chargeback\", \"v2SecondCoinRailcannon\", true);\n            v2SecondCoinRailcannon.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2SecondCoinRailcannonCooldown.interactable = e.value;\n            };\n            v2SecondCoinRailcannonCooldown = new FloatField(v2SecondPanel, \"Electric railcannon cooldown\", \"v2SecondCoinRailcannonCooldown\", 15f);\n            v2SecondCoinRailcannon.TriggerValueChangeEvent();*/\n\n            new ConfigHeader(v2SecondPanel, \"Shoot Coins Separately\");\n            v2SecondFastCoinToggle = new BoolField(v2SecondPanel, \"Enabled\", \"v2SecondFastCoin\", true);\n            ConfigDivision v2SecondFastCoinDiv = new ConfigDivision(v2SecondPanel, \"v2SecondFastCoinDiv\");\n            v2SecondFastCoinToggle.presetLoadPriority = 1;\n            v2SecondFastCoinToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2SecondFastCoinDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            v2SecondFastCoinToggle.TriggerValueChangeEvent();\n            v2SecondFastCoinThrowDelay = new FloatField(v2SecondFastCoinDiv, \"Throw next coin delay\", \"v2SecondFastCoinThrowDelay\", 0.6f, 0f, float.MaxValue);\n            v2SecondFastCoinShootDelay = new FloatField(v2SecondFastCoinDiv, \"Shoot coin delay\", \"v2SecondFastCoinShootDelay\", 0.3f, 0f, float.MaxValue);\n\n            new ConfigHeader(v2SecondPanel, \"Malicious Cannon Snipe\");\n            v2SecondMalCannonSnipeToggle = new BoolField(v2SecondPanel, \"Enabled\", \"v2SecondMalCannonSnipeToggle\", true);\n            v2SecondMalCannonSnipeToggle.presetLoadPriority = 1;\n            ConfigDivision v2SecondMalCannonDiv = new ConfigDivision(v2SecondPanel, \"v2SecondMalCannonDiv\");\n            v2SecondMalCannonSnipeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2SecondMalCannonDiv.interactable = e.value;\n            };\n            v2SecondMalCannonSnipeToggle.TriggerValueChangeEvent();\n            v2SecondMalCannonSnipeCooldown = new FloatField(v2SecondMalCannonDiv, \"Cooldown\", \"v2SecondMalCannonSnipeCooldown\", 15f, 0f, float.MaxValue);\n            v2SecondMalCannonSnipeReactTime = new FloatField(v2SecondMalCannonDiv, \"React time\", \"v2SecondMalCannonSnipeReactTime\", 0.2f, 0f, float.MaxValue);\n            v2SecondMalCannonSnipeMaxDistanceToPlayer = new FloatField(v2SecondMalCannonDiv, \"Max distance to player\", \"v2SecondMalCannonSnipeMaxDistanceToPlayer\", 20f, 0f, float.MaxValue);\n            v2SecondMalCannonSnipeMinDistanceToV2 = new FloatField(v2SecondMalCannonDiv, \"Min distance to V2\", \"v2SecondMalCannonSnipeMinDistanceToV2\", 0f, 0f, float.MaxValue);\n            new ConfigHeader(v2SecondPanel, \"Grenade Snipe\");\n            v2SecondCoreSnipeToggle = new BoolField(v2SecondPanel, \"Enabled\", \"v2SecondCoreSnipeToggle\", true);\n            v2SecondCoreSnipeToggle.presetLoadPriority = 1;\n            ConfigDivision v2SecondSnipeDiv = new ConfigDivision(v2SecondPanel, \"v2SecondSnipeDiv\");\n            v2SecondCoreSnipeToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2SecondSnipeDiv.interactable = e.value;\n            };\n            v2SecondCoreSnipeToggle.TriggerValueChangeEvent();\n            v2SecondCoreSnipeMaxDistanceToPlayer = new FloatField(v2SecondSnipeDiv, \"Max distance to player\", \"v2SecondCoreSnipeMaxDistanceToPlayer\", 15f, 0f, float.MaxValue);\n            v2SecondCoreSnipeMinDistanceToV2 = new FloatField(v2SecondSnipeDiv, \"Min distance to V2\", \"v2SecondCoreSnipeMinDistanceToV2\", 0f, 0f, float.MaxValue);\n            v2SecondCoreSnipeReactionTime = new FloatField(v2SecondSnipeDiv, \"Reaction time\", \"v2SecondCoreSnipeReactionTime\", 0.2f, 0f, 5f);\n\n            new ConfigHeader(v2SecondPanel, \"Sharpshooter\");\n            v2SecondSharpshooterToggle = new BoolField(v2SecondPanel, \"Enabled\", \"v2SecondSharpshooterToggle\", true);\n            v2SecondSharpshooterToggle.presetLoadPriority = 1;\n            ConfigDivision v2SecondSharpShooterDiv = new ConfigDivision(v2SecondPanel, \"v2SecondSharpShooterDiv\");\n            v2SecondSharpshooterToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                v2SecondSharpShooterDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            v2SecondSharpshooterChance = new FloatSliderField(v2SecondSharpShooterDiv, \"Chance\", \"v2SecondSharpshooterChance\", new System.Tuple<float, float>(0, 100), 50, 1);\n            v2SecondSharpshooterAutoaimAngle = new FloatSliderField(v2SecondSharpShooterDiv, \"Autoaim angle maximum\", \"v2SecondSharpshooterAutoaimAngle\", new System.Tuple<float, float>(0, 180), 30, 1);\n            v2SecondSharpshooterReflections = new IntField(v2SecondSharpShooterDiv, \"Ricochet count\", \"v2SecondSharpshooterReflections\", 2, 0, int.MaxValue);\n            v2SecondSharpshooterDamage = new FloatField(v2SecondSharpShooterDiv, \"Damage multiplier\", \"v2SecondSharpshooterDamage\", 1f, 0f, float.MaxValue);\n            v2SecondSharpshooterSpeed = new FloatField(v2SecondSharpShooterDiv, \"Speed multiplier\", \"v2SecondSharpshooterSpeed\", 1f, 0f, float.MaxValue);\n            v2SecondSharpshooterToggle.TriggerValueChangeEvent();\n\n            // Sisyphean Insurrectionist (yeah don't judge)\n            new ConfigHeader(sisyInstPanel, \"Boulder Creates Shockwaves\");\n            sisyInstBoulderShockwave = new BoolField(sisyInstPanel, \"Enabled\", \"sisyInstBoulderShockwave\", true);\n            sisyInstBoulderShockwave.presetLoadPriority = 1;\n            ConfigDivision sisyInstShockwaveDiv = new ConfigDivision(sisyInstPanel, \"sisyInstShockwaveDiv\");\n            sisyInstBoulderShockwave.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                sisyInstShockwaveDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            sisyInstBoulderShockwave.TriggerValueChangeEvent();\n            sisyInstBoulderShockwaveSize = new FloatField(sisyInstShockwaveDiv, \"Shockwave size\", \"sisyInstBoulderShockwaveSize\", 1f, 0f, float.MaxValue);\n            sisyInstBoulderShockwaveSpeed = new FloatField(sisyInstShockwaveDiv, \"Shockwave speed\", \"sisyInstBoulderShockwaveSpeed\", 35f, 0f, float.MaxValue);\n            sisyInstBoulderShockwaveDamage = new IntField(sisyInstShockwaveDiv, \"Shockwave damage\", \"sisyInstBoulderShockwaveDamage\", 10, 0, int.MaxValue);\n            new ConfigHeader(sisyInstPanel, \"Jump Shockwave Tweak\");\n            sisyInstJumpShockwave = new BoolField(sisyInstPanel, \"Enabled\", \"sisyInstJumpShockwave\", true);\n            sisyInstJumpShockwave.presetLoadPriority = 1;\n            ConfigDivision sisyInstJumpShockwaveDiv = new ConfigDivision(sisyInstPanel, \"sisyInstJumpShockwaveDiv\");\n            sisyInstJumpShockwave.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                sisyInstJumpShockwaveDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            sisyInstJumpShockwave.TriggerValueChangeEvent();\n            sisyInstJumpShockwaveSize = new FloatField(sisyInstJumpShockwaveDiv, \"Shockwave size\", \"sisyInstJumpShockwaveSize\", 2f, 0f, float.MaxValue);\n            sisyInstJumpShockwaveSize.presetLoadPriority = 1;\n            sisyInstJumpShockwaveSize.onValueChange += (FloatField.FloatValueChangeEvent e) =>\n            {\n                GameObject shockwave = SisyphusInstructionist_Start.shockwave;\n                shockwave.transform.localScale = new Vector3(shockwave.transform.localScale.x, 20 * ConfigManager.sisyInstBoulderShockwaveSize.value, shockwave.transform.localScale.z);\n            };\n            sisyInstJumpShockwaveSpeed = new FloatField(sisyInstJumpShockwaveDiv, \"Shockwave speed\", \"sisyInstJumpShockwaveSpeed\", 35f, 0f, float.MaxValue);\n            sisyInstJumpShockwaveSpeed.presetLoadPriority = 1;\n            sisyInstJumpShockwaveSpeed.onValueChange += (FloatField.FloatValueChangeEvent e) =>\n            {\n                GameObject shockwave = SisyphusInstructionist_Start.shockwave;\n                PhysicalShockwave comp = shockwave.GetComponent<PhysicalShockwave>();\n                comp.speed = e.value;\n            };\n            sisyInstJumpShockwaveDamage = new IntField(sisyInstJumpShockwaveDiv, \"Shockwave damage\", \"sisyInstJumpShockwaveDamage\", 15, 0, int.MaxValue);\n            sisyInstJumpShockwaveDamage.presetLoadPriority = 1;\n            sisyInstJumpShockwaveDamage.onValueChange += (IntField.IntValueChangeEvent e) =>\n            {\n                GameObject shockwave = SisyphusInstructionist_Start.shockwave;\n                PhysicalShockwave comp = shockwave.GetComponent<PhysicalShockwave>();\n                comp.damage = e.value;\n            };\n            new ConfigHeader(sisyInstPanel, \"Stronger Stomp\");\n            sisyInstStrongerExplosion = new BoolField(sisyInstPanel, \"Enabled\", \"sisyInstStrongerExplosion\", true);\n            sisyInstStrongerExplosion.presetLoadPriority = 1;\n            ConfigDivision sisyInstExplosionDiv = new ConfigDivision(sisyInstPanel, \"sisyInstExplosionDiv\");\n            sisyInstStrongerExplosion.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                sisyInstExplosionDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            sisyInstStrongerExplosion.TriggerValueChangeEvent();\n            sisyInstStrongerExplosionSizeMulti = new FloatField(sisyInstExplosionDiv, \"Size multiplier\", \"sisyInstStrongerExplosionSizeMulti\", 0.5f, 0f, float.MaxValue);\n            sisyInstStrongerExplosionDamageMulti = new FloatField(sisyInstExplosionDiv, \"Damage multiplier\", \"sisyInstStrongerExplosionDamageMulti\", 0.5f, 0f, float.MaxValue);\n\n            leviathanSecondPhaseBegin = new BoolField(leviathanPanel, \"Start at the second phase\", \"leviathanSecondPhaseBegin\", true); ;\n            new ConfigHeader(leviathanPanel, \"Mixed Projectile Burst\");\n            leviathanProjectileMixToggle = new BoolField(leviathanPanel, \"Enabled\", \"leviathanProjectileMixToggle\", true);\n            leviathanProjectileMixToggle.presetLoadPriority = 1;\n            ConfigDivision leviathanMixProjectileDiv = new ConfigDivision(leviathanPanel, \"leviathanMixProjectileDiv\");\n            leviathanProjectileMixToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                leviathanMixProjectileDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            leviathanProjectileMixToggle.TriggerValueChangeEvent();\n            leviathanProjectileBlueChance = new FloatSliderField(leviathanMixProjectileDiv, \"Blue projectile\", \"leviathanProjectileBlueChance\", new System.Tuple<float, float>(0, 100), 40f);\n            leviathanProjectileYellowChance = new FloatSliderField(leviathanMixProjectileDiv, \"Yellow projectile\", \"leviathanProjectileYellowChance\", new System.Tuple<float, float>(0, 100), 10f);\n            new ConfigHeader(leviathanPanel, \"Projectile Burst Tweaker\");\n            leviathanProjectileCount = new IntField(leviathanPanel, \"Projectile count\", \"leviathanProjectileCount\", 80, 1, int.MaxValue);\n            leviathanProjectileDensity = new FloatField(leviathanPanel, \"Projectiles per second\", \"leviathanProjectileDensity\", 25, 1f, float.MaxValue);\n            leviathanProjectileFriendlyFireDamageMultiplier = new FloatSliderField(leviathanPanel, \"Projectile friendly fire damage%\", \"leviathanProjectileFriendlyFireDamageMultiplier\", new System.Tuple<float, float>(0, 100), 5f);\n            new ConfigHeader(leviathanPanel, \"Charged Attack\");\n            leviathanChargeAttack = new BoolField(leviathanPanel, \"Enabled\", \"leviathanChargeAttack\", true);\n            ConfigDivision leviathanChargedDiv = new ConfigDivision(leviathanPanel, \"leviathanChargedDiv\");\n            leviathanChargeAttack.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                leviathanChargedDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            leviathanChargeAttack.TriggerValueChangeEvent();\n            leviathanChargeChance = new FloatSliderField(leviathanChargedDiv, \"Chance\", \"leviathanChargeChance\", new System.Tuple<float, float>(0, 100), 25);\n            leviathanChargeCount = new IntField(leviathanChargedDiv, \"Number of charges shot\", \"leviathanChargeCount\", 3, 1, int.MaxValue);\n            leviathanChargeDelay = new FloatField(leviathanChargedDiv, \"Delay between shots\", \"leviathanChargeDelay\", 0.75f, 0f, float.MaxValue);\n            leviathanChargeSizeMulti = new FloatField(leviathanChargedDiv, \"Explosion size multiplier\", \"leviathanChargeSizeMulti\", 1.5f, 0f, float.MaxValue);\n            leviathanChargeDamageMulti = new FloatField(leviathanChargedDiv, \"Explosion damage multiplier\", \"leviathanChargeDamageMulti\", 1f, 0f, float.MaxValue);\n            leviathanChargeHauntRocketRiding = new BoolField(leviathanChargedDiv, \"Target ridden rockets\", \"leviathanChargeHauntRocketRiding\", true);\n            new ConfigHeader(leviathanPanel, \"Tail Swing Combo\");\n            leviathanTailComboCount = new IntField(leviathanPanel, \"Tail swing count\", \"leviathanTailComboCount\", 3, 1, int.MaxValue);\n\n            // SOMETHING WICKED\n            somethingWickedSpear = new BoolField(somethingWickedPanel, \"Throw hook\", \"somethingWickedSpear\", true);\n            somethingWickedSpear.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            somethingWickedSpawnOn43 = new BoolField(somethingWickedPanel, \"Spawn on 4-3\", \"somethingWickedSpawnOn43\", true);\n            somethingWickedSpawnOn43.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            // hehe\n            somethingWickedSpawnOn43.hidden = true;\n\n            // PANOPTICON\n            panopticonFullPhase = new BoolField(panopticonPanel, \"Full fight\", \"panopticonFullPhase\", true);\n            panopticonFullPhase.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            panopticonBalanceEyes = new BoolField(panopticonPanel, \"Balance eyes\", \"panopticonBalanceEyes\", true);\n            panopticonBalanceEyes.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            panopticonBlackholeProj = new BoolField(panopticonPanel, \"Throw projectile after blackhole\", \"panopticonBlackholeProj\", true);\n            panopticonBlackholeProj.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n            };\n            panopticonAxisBeam = new BoolField(panopticonPanel, \"3 axis insignia\", \"panopticonAxisBeam\", true);\n            panopticonAxisBeam.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                dirtyField = true;\n                panopticonAxisBeamSizeMulti.interactable = e.value;\n            };\n            panopticonAxisBeamSizeMulti = new FloatField(panopticonPanel, \"Axis beam size multiplier\", \"panopticonAxisBeamSizeMulti\", 0.5f, 0.1f, float.MaxValue);\n            panopticonAxisBeam.TriggerValueChangeEvent();\n\n            new ConfigHeader(panopticonPanel, \"Spin Insignia\");\n            panopticonSpinAttackToggle = new BoolField(panopticonPanel, \"Enabled\", \"panopticonSpinAttackToggle\", true);\n            panopticonSpinAttackToggle.presetLoadPriority = 1;\n            ConfigDivision panopticonSpinInsigniaDiv = new ConfigDivision(panopticonPanel, \"panopticonSpinInsigniaDiv\");\n            panopticonSpinAttackToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                panopticonSpinInsigniaDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            panopticonSpinAttackToggle.TriggerValueChangeEvent();\n            panopticonSpinAttackCount = new IntField(panopticonSpinInsigniaDiv, \"Insignia count\", \"panopticonSpinAttackCount\", 5, 1, int.MaxValue);\n            panopticonSpinAttackDamage = new IntField(panopticonSpinInsigniaDiv, \"Insignia damage\", \"panopticonSpinAttackDamage\", 10, 0, int.MaxValue);\n            panopticonSpinAttackSize = new FloatField(panopticonSpinInsigniaDiv, \"Insignia size\", \"panopticonSpinAttackSize\", 5f, 0f, float.MaxValue);\n            panopticonSpinAttackDistance = new FloatField(panopticonSpinInsigniaDiv, \"Circle radius\", \"panopticonSpinAttackDistance\", 60f, 0f, float.MaxValue);\n            panopticonSpinAttackTurnSpeed = new FloatField(panopticonSpinInsigniaDiv, \"Turn speed\", \"panopticonSpinAttackTurnSpeed\", 60f, 0f, float.MaxValue);\n            panopticonSpinAttackActivateSpeed = new FloatField(panopticonSpinInsigniaDiv, \"Activasion speed\", \"panopticonSpinAttackActivateSpeed\", 0.5f, 0f, float.MaxValue);\n\n            new ConfigHeader(panopticonPanel, \"Blue Orb Attack\");\n            panopticonBlueProjToggle = new BoolField(panopticonPanel, \"Enabled\", \"panopticonBlueProjToggle\", true);\n            ConfigDivision panopticonBlueProjDiv = new ConfigDivision(panopticonPanel, \"panopticonBlueProjDiv\");\n            panopticonBlueProjToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                panopticonBlueProjDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            panopticonBlueProjToggle.TriggerValueChangeEvent();\n            panopticonBlueProjCount = new IntField(panopticonBlueProjDiv, \"Projectile count\", \"panopticonBlueProjCount\", 3, 1, int.MaxValue);\n            panopticonBlueProjDamage = new FloatField(panopticonBlueProjDiv, \"Projectile damage\", \"panopticonBlueProjDiv\", 5, 0, float.MaxValue);\n            panopticonBlueProjTurnSpeed = new FloatField(panopticonBlueProjDiv, \"Projectile turn speed multiplier\", \"panopticonBlueProjTurnSpeed\", 1f, 0f, float.MaxValue);\n            panopticonBlueProjInitialSpeed = new FloatField(panopticonBlueProjDiv, \"Projectile initial speed\", \"panopticonBlueProjInitialSpeed\", 0f, 0f, float.MaxValue);\n\n            // IDOL\n            new ConfigHeader(idolPanel, \"Explode on break\");\n            idolExplosionToggle = new BoolField(idolPanel, \"Enabled\", \"idolExplosionToggle\", true);\n            ConfigDivision idolExplosionDiv = new ConfigDivision(idolPanel, \"idolExplosionDiv\");\n            idolExplosionToggle.onValueChange += (BoolField.BoolValueChangeEvent e) =>\n            {\n                idolExplosionDiv.interactable = e.value;\n                dirtyField = true;\n            };\n            idolExplosionToggle.TriggerValueChangeEvent();\n            idolExplodionType = new EnumField<IdolExplosionType>(idolExplosionDiv, \"Explosion type\", \"idolExplosionType\", IdolExplosionType.Ligthning);\n            idolExplodionType.SetEnumDisplayName(IdolExplosionType.Normal, \"Normal explosion\");\n            idolExplodionType.SetEnumDisplayName(IdolExplosionType.Big, \"Big explosion\");\n            idolExplodionType.SetEnumDisplayName(IdolExplosionType.Ligthning, \"Lightning bolt\");\n            idolExplodionType.SetEnumDisplayName(IdolExplosionType.Sisyphean, \"Sisyphus prime explosion\");\n            idolExplodionType.SetEnumDisplayName(IdolExplosionType.Sand, \"Sand explosion\");\n            idolExplosionSizeMultiplier = new FloatField(idolExplosionDiv, \"Explosion size multiplier\", \"idolExplosionSizeMultiplier\", 1f, 0f, float.MaxValue);\n            idolExplosionDamageMultiplier = new FloatField(idolExplosionDiv, \"Explosion damage multiplier\", \"idolExplosionDamageMultiplier\", 1f, 0f, float.MaxValue);\n            idolExplodionType.onValueChange += (EnumField<IdolExplosionType>.EnumValueChangeEvent e) =>\n            {\n                idolExplosionSizeMultiplier.interactable = e.value != IdolExplosionType.Sand;\n                idolExplosionDamageMultiplier.interactable = e.value != IdolExplosionType.Sand;\n            };\n            idolExplodionType.TriggerValueChangeEvent();\n            idolExplosionEnemyDamagePercent = new FloatSliderField(idolExplosionDiv, \"Enemy damage percent\", \"idolExplosionEnemyDamagePercent\", new Tuple<float, float>(0f, 100f), 0f, 1);\n\n            config.Flush();\n            //config.LogDuplicateGUID();\n            Plugin.PatchAll();\n            dirtyField = false;\n", "            if (config.firstTime)\n                AddMissingPresets();\n        }\n\n        private static void SwordsMachineSecondPhaseMode_onValueChange(EnumField<SwordsMachineSecondPhase>.EnumValueChangeEvent data)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/DifficultySelectPatch.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine.UI;\n\nnamespace Ultrapain\n{\n    class DifficultySelectPatch\n    {\n        static void Postfix(DifficultySelectButton __instance)\n        {\n            string difficultyName = __instance.transform.Find(\"Name\").GetComponent<Text>().text;\n            Plugin.ultrapainDifficulty = difficultyName == ConfigManager.pluginName.value || ConfigManager.globalDifficultySwitch.value;\n            Plugin.realUltrapainDifficulty = difficultyName == ConfigManager.pluginName.value;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Plugin.cs", "chunked_list": ["\ufeffusing BepInEx;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing System;\nusing HarmonyLib;\nusing System.IO;\nusing Ultrapain.Patches;\nusing System.Linq;\nusing UnityEngine.UI;\nusing UnityEngine.EventSystems;", "using UnityEngine.UI;\nusing UnityEngine.EventSystems;\nusing System.Reflection;\nusing Steamworks;\nusing Unity.Audio;\nusing System.Text;\nusing System.Collections.Generic;\nusing UnityEngine.AddressableAssets;\nusing UnityEngine.AddressableAssets.ResourceLocators;\nusing UnityEngine.ResourceManagement.ResourceLocations;", "using UnityEngine.AddressableAssets.ResourceLocators;\nusing UnityEngine.ResourceManagement.ResourceLocations;\nusing UnityEngine.UIElements;\nusing PluginConfig.API;\n\nnamespace Ultrapain\n{\n    [BepInPlugin(PLUGIN_GUID, PLUGIN_NAME, PLUGIN_VERSION)]\n    [BepInDependency(\"com.eternalUnion.pluginConfigurator\", \"1.6.0\")]\n    public class Plugin : BaseUnityPlugin\n    {", "    [BepInDependency(\"com.eternalUnion.pluginConfigurator\", \"1.6.0\")]\n    public class Plugin : BaseUnityPlugin\n    {\n        public const string PLUGIN_GUID = \"com.eternalUnion.ultraPain\";\n        public const string PLUGIN_NAME = \"Ultra Pain\";\n        public const string PLUGIN_VERSION = \"1.1.0\";\n\n        public static Plugin instance;\n\n        private static bool addressableInit = false;\n        public static T LoadObject<T>(string path)\n        {", "        private static bool addressableInit = false;\n        public static T LoadObject<T>(string path)\n        {\n            if (!addressableInit)\n            {\n                Addressables.InitializeAsync().WaitForCompletion();\n                addressableInit = true;\n\n\t\t\t}\n            return Addressables.LoadAssetAsync<T>(path).WaitForCompletion();\n        }\n", "        public static Vector3 PredictPlayerPosition(Collider safeCollider, float speedMod)\n        {   \n            Transform target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n            if (MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude == 0f)\n                return target.position;\n            RaycastHit raycastHit;\n            if (Physics.Raycast(target.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity(), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.35f / speedMod, 4096, QueryTriggerInteraction.Collide) && raycastHit.collider == safeCollider)\n                return target.position;\n            else if (Physics.Raycast(target.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity(), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.35f / speedMod, LayerMaskDefaults.Get(LMD.EnvironmentAndBigEnemies), QueryTriggerInteraction.Collide))\n            {\n                return raycastHit.point;\n            }\n            else {\n                Vector3 projectedPlayerPos = target.position + MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity() * 0.35f / speedMod;\n                return new Vector3(projectedPlayerPos.x, target.transform.position.y + (target.transform.position.y - projectedPlayerPos.y) * 0.5f, projectedPlayerPos.z);\n            }\n        }\n", "            else if (Physics.Raycast(target.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity(), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.35f / speedMod, LayerMaskDefaults.Get(LMD.EnvironmentAndBigEnemies), QueryTriggerInteraction.Collide))\n            {\n                return raycastHit.point;\n            }\n            else {\n                Vector3 projectedPlayerPos = target.position + MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity() * 0.35f / speedMod;\n                return new Vector3(projectedPlayerPos.x, target.transform.position.y + (target.transform.position.y - projectedPlayerPos.y) * 0.5f, projectedPlayerPos.z);\n            }\n        }\n\n        public static GameObject projectileSpread;", "        public static GameObject projectileSpread;\n        public static GameObject homingProjectile;\n        public static GameObject hideousMassProjectile;\n        public static GameObject decorativeProjectile2;\n        public static GameObject shotgunGrenade;\n        public static GameObject beam;\n        public static GameObject turretBeam;\n        public static GameObject lightningStrikeExplosiveSetup;\n        public static GameObject lightningStrikeExplosive;\n        public static GameObject lighningStrikeWindup;\n        public static GameObject explosion;", "        public static GameObject lightningStrikeExplosive;\n        public static GameObject lighningStrikeWindup;\n        public static GameObject explosion;\n        public static GameObject bigExplosion;\n        public static GameObject sandExplosion;\n        public static GameObject virtueInsignia;\n        public static GameObject rocket;\n        public static GameObject revolverBullet;\n        public static GameObject maliciousCannonBeam;\n        public static GameObject lightningBoltSFX;\n        public static GameObject revolverBeam;", "        public static GameObject maliciousCannonBeam;\n        public static GameObject lightningBoltSFX;\n        public static GameObject revolverBeam;\n        public static GameObject blastwave;\n        public static GameObject cannonBall;\n        public static GameObject shockwave;\n        public static GameObject sisyphiusExplosion;\n        public static GameObject sisyphiusPrimeExplosion;\n        public static GameObject explosionWaveKnuckleblaster;\n        public static GameObject chargeEffect;\n        public static GameObject maliciousFaceProjectile;", "        public static GameObject explosionWaveKnuckleblaster;\n        public static GameObject chargeEffect;\n        public static GameObject maliciousFaceProjectile;\n        public static GameObject hideousMassSpear;\n        public static GameObject coin;\n        public static GameObject sisyphusDestroyExplosion;\n\n        //public static GameObject idol;\n        public static GameObject ferryman;\n        public static GameObject minosPrime;\n        //public static GameObject maliciousFace;", "        public static GameObject ferryman;\n        public static GameObject minosPrime;\n        //public static GameObject maliciousFace;\n        public static GameObject somethingWicked;\n        public static Turret turret;\n\n        public static GameObject turretFinalFlash;\n        public static GameObject enrageEffect;\n        public static GameObject v2flashUnparryable;\n        public static GameObject ricochetSfx;\n        public static GameObject parryableFlash;\n", "        public static GameObject v2flashUnparryable;\n        public static GameObject ricochetSfx;\n        public static GameObject parryableFlash;\n\n        public static AudioClip cannonBallChargeAudio;\n        public static Material gabrielFakeMat;\n\n        public static Sprite blueRevolverSprite;\n        public static Sprite greenRevolverSprite;\n        public static Sprite redRevolverSprite;\n        public static Sprite blueShotgunSprite;", "        public static Sprite greenRevolverSprite;\n        public static Sprite redRevolverSprite;\n        public static Sprite blueShotgunSprite;\n        public static Sprite greenShotgunSprite;\n        public static Sprite blueNailgunSprite;\n        public static Sprite greenNailgunSprite;\n        public static Sprite blueSawLauncherSprite;\n        public static Sprite greenSawLauncherSprite;\n\n        public static GameObject rocketLauncherAlt;\n        public static GameObject maliciousRailcannon;\n\n        // Variables", "        public static GameObject rocketLauncherAlt;\n        public static GameObject maliciousRailcannon;\n\n        // Variables\n        public static float SoliderShootAnimationStart = 1.2f;\n        public static float SoliderGrenadeForce = 10000f;\n\n        public static float SwordsMachineKnockdownTimeNormalized = 0.8f;\n        public static float SwordsMachineCoreSpeed = 80f;\n\n        public static float MinGrenadeParryVelocity = 40f;\n", "        public static float SwordsMachineCoreSpeed = 80f;\n\n        public static float MinGrenadeParryVelocity = 40f;\n\n        public static GameObject _lighningBoltSFX;\n        public static GameObject lighningBoltSFX\n        {\n            get\n            {\n                if (_lighningBoltSFX == null)\n                    _lighningBoltSFX = ferryman.gameObject.transform.Find(\"LightningBoltChimes\").gameObject;\n\n                return _lighningBoltSFX;\n            }\n        }\n", "                if (_lighningBoltSFX == null)\n                    _lighningBoltSFX = ferryman.gameObject.transform.Find(\"LightningBoltChimes\").gameObject;\n\n                return _lighningBoltSFX;\n            }\n        }\n\n        private static bool loadedPrefabs = false;\n        public void LoadPrefabs()\n        {\n            if (loadedPrefabs)\n                return;\n            loadedPrefabs = true;\n\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Spread.prefab\n            projectileSpread = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Spread.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Homing.prefab\n            homingProjectile = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Homing.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Decorative 2.prefab\n            decorativeProjectile2 = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Decorative 2.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Grenade.prefab\n            shotgunGrenade = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Grenade.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Turret Beam.prefab\n            turretBeam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Turret Beam.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\n            beam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Lightning Strike Explosive.prefab\n            lightningStrikeExplosiveSetup = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Lightning Strike Explosive.prefab\");\n            // Assets/Particles/Environment/LightningBoltWindupFollow Variant.prefab\n            lighningStrikeWindup = LoadObject<GameObject>(\"Assets/Particles/Environment/LightningBoltWindupFollow Variant.prefab\");\n            //[bundle-0][assets/prefabs/enemies/idol.prefab]\n            //idol = LoadObject<GameObject>(\"assets/prefabs/enemies/idol.prefab\");\n            // Assets/Prefabs/Enemies/Ferryman.prefab\n            ferryman = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/Ferryman.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion.prefab\n            explosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Super.prefab\n            bigExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Super.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sand.prefab\n            sandExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sand.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Virtue Insignia.prefab\n            virtueInsignia = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Virtue Insignia.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Explosive HH.prefab\n            hideousMassProjectile = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Explosive HH.prefab\");\n            // Assets/Particles/Enemies/RageEffect.prefab\n            enrageEffect = LoadObject<GameObject>(\"Assets/Particles/Enemies/RageEffect.prefab\");\n            // Assets/Particles/Flashes/V2FlashUnparriable.prefab\n            v2flashUnparryable = LoadObject<GameObject>(\"Assets/Particles/Flashes/V2FlashUnparriable.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Rocket.prefab\n            rocket = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Rocket.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/RevolverBullet.prefab\n            revolverBullet = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/RevolverBullet.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Railcannon Beam Malicious.prefab\n            maliciousCannonBeam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Railcannon Beam Malicious.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Revolver Beam.prefab\n            revolverBeam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Revolver Beam.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Enemy.prefab\n            blastwave = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Enemy.prefab\");\n            // Assets/Prefabs/Enemies/MinosPrime.prefab\n            minosPrime = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/MinosPrime.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Cannonball.prefab\n            cannonBall = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Cannonball.prefab\");\n            // get from Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\n            cannonBallChargeAudio = LoadObject<GameObject>(\"Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\").transform.Find(\"RocketLauncher/Armature/Body_Bone/HologramDisplay\").GetComponent<AudioSource>().clip;\n            // Assets/Prefabs/Attacks and Projectiles/PhysicalShockwave.prefab\n            shockwave = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/PhysicalShockwave.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Sisyphus.prefab\n            sisyphiusExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Sisyphus.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime.prefab\n            sisyphiusPrimeExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave.prefab\n            explosionWaveKnuckleblaster = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Lightning.prefab - [bundle-0][assets/prefabs/explosionlightning variant.prefab]\n            lightningStrikeExplosive = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Lightning.prefab\");\n            // Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\n            rocketLauncherAlt = LoadObject<GameObject>(\"Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\");\n            // Assets/Prefabs/Weapons/Railcannon Malicious.prefab\n            maliciousRailcannon = LoadObject<GameObject>(\"Assets/Prefabs/Weapons/Railcannon Malicious.prefab\");\n            //Assets/Particles/SoundBubbles/Ricochet.prefab\n            ricochetSfx = LoadObject<GameObject>(\"Assets/Particles/SoundBubbles/Ricochet.prefab\");\n            //Assets/Particles/Flashes/Flash.prefab\n            parryableFlash = LoadObject<GameObject>(\"Assets/Particles/Flashes/Flash.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Spear.prefab\n            hideousMassSpear = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Spear.prefab\");\n            //Assets/Prefabs/Enemies/Wicked.prefab\n            somethingWicked = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/Wicked.prefab\");\n            //Assets/Textures/UI/SingleRevolver.png\n            blueRevolverSprite = LoadObject<Sprite>(\"Assets/Textures/UI/SingleRevolver.png\");\n            //Assets/Textures/UI/RevolverSpecial.png\n            greenRevolverSprite = LoadObject<Sprite>(\"Assets/Textures/UI/RevolverSpecial.png\");\n            //Assets/Textures/UI/RevolverSharp.png\n            redRevolverSprite = LoadObject<Sprite>(\"Assets/Textures/UI/RevolverSharp.png\");\n            //Assets/Textures/UI/Shotgun.png\n            blueShotgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/Shotgun.png\");\n            //Assets/Textures/UI/Shotgun1.png\n            greenShotgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/Shotgun1.png\");\n            //Assets/Textures/UI/Nailgun2.png\n            blueNailgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/Nailgun2.png\");\n            //Assets/Textures/UI/NailgunOverheat.png\n            greenNailgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/NailgunOverheat.png\");\n            //Assets/Textures/UI/SawbladeLauncher.png\n            blueSawLauncherSprite = LoadObject<Sprite>(\"Assets/Textures/UI/SawbladeLauncher.png\");\n            //Assets/Textures/UI/SawbladeLauncherOverheat.png\n            greenSawLauncherSprite = LoadObject<Sprite>(\"Assets/Textures/UI/SawbladeLauncherOverheat.png\");\n            //Assets/Prefabs/Attacks and Projectiles/Coin.prefab\n            coin = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Coin.prefab\");\n            //Assets/Materials/GabrielFake.mat\n            gabrielFakeMat = LoadObject<Material>(\"Assets/Materials/GabrielFake.mat\");\n            //Assets/Prefabs/Enemies/Turret.prefab\n            turret = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/Turret.prefab\").GetComponent<Turret>();\n            //Assets/Particles/Flashes/GunFlashDistant.prefab\n            turretFinalFlash = LoadObject<GameObject>(\"Assets/Particles/Flashes/GunFlashDistant.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime Charged.prefab\n            sisyphusDestroyExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime Charged.prefab\");\n            //Assets/Prefabs/Effects/Charge Effect.prefab\n            chargeEffect = LoadObject<GameObject>(\"Assets/Prefabs/Effects/Charge Effect.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\n            maliciousFaceProjectile = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\");\n        }\n", "        public void LoadPrefabs()\n        {\n            if (loadedPrefabs)\n                return;\n            loadedPrefabs = true;\n\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Spread.prefab\n            projectileSpread = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Spread.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Homing.prefab\n            homingProjectile = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Homing.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Decorative 2.prefab\n            decorativeProjectile2 = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Decorative 2.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Grenade.prefab\n            shotgunGrenade = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Grenade.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Turret Beam.prefab\n            turretBeam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Turret Beam.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\n            beam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Lightning Strike Explosive.prefab\n            lightningStrikeExplosiveSetup = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Lightning Strike Explosive.prefab\");\n            // Assets/Particles/Environment/LightningBoltWindupFollow Variant.prefab\n            lighningStrikeWindup = LoadObject<GameObject>(\"Assets/Particles/Environment/LightningBoltWindupFollow Variant.prefab\");\n            //[bundle-0][assets/prefabs/enemies/idol.prefab]\n            //idol = LoadObject<GameObject>(\"assets/prefabs/enemies/idol.prefab\");\n            // Assets/Prefabs/Enemies/Ferryman.prefab\n            ferryman = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/Ferryman.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion.prefab\n            explosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Super.prefab\n            bigExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Super.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sand.prefab\n            sandExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sand.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Virtue Insignia.prefab\n            virtueInsignia = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Virtue Insignia.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Projectile Explosive HH.prefab\n            hideousMassProjectile = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Projectile Explosive HH.prefab\");\n            // Assets/Particles/Enemies/RageEffect.prefab\n            enrageEffect = LoadObject<GameObject>(\"Assets/Particles/Enemies/RageEffect.prefab\");\n            // Assets/Particles/Flashes/V2FlashUnparriable.prefab\n            v2flashUnparryable = LoadObject<GameObject>(\"Assets/Particles/Flashes/V2FlashUnparriable.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Rocket.prefab\n            rocket = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Rocket.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/RevolverBullet.prefab\n            revolverBullet = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/RevolverBullet.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Railcannon Beam Malicious.prefab\n            maliciousCannonBeam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Railcannon Beam Malicious.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Revolver Beam.prefab\n            revolverBeam = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Revolver Beam.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Enemy.prefab\n            blastwave = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Enemy.prefab\");\n            // Assets/Prefabs/Enemies/MinosPrime.prefab\n            minosPrime = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/MinosPrime.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Cannonball.prefab\n            cannonBall = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Cannonball.prefab\");\n            // get from Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\n            cannonBallChargeAudio = LoadObject<GameObject>(\"Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\").transform.Find(\"RocketLauncher/Armature/Body_Bone/HologramDisplay\").GetComponent<AudioSource>().clip;\n            // Assets/Prefabs/Attacks and Projectiles/PhysicalShockwave.prefab\n            shockwave = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/PhysicalShockwave.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Sisyphus.prefab\n            sisyphiusExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave Sisyphus.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime.prefab\n            sisyphiusPrimeExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave.prefab\n            explosionWaveKnuckleblaster = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Wave.prefab\");\n            // Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Lightning.prefab - [bundle-0][assets/prefabs/explosionlightning variant.prefab]\n            lightningStrikeExplosive = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Lightning.prefab\");\n            // Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\n            rocketLauncherAlt = LoadObject<GameObject>(\"Assets/Prefabs/Weapons/Rocket Launcher Cannonball.prefab\");\n            // Assets/Prefabs/Weapons/Railcannon Malicious.prefab\n            maliciousRailcannon = LoadObject<GameObject>(\"Assets/Prefabs/Weapons/Railcannon Malicious.prefab\");\n            //Assets/Particles/SoundBubbles/Ricochet.prefab\n            ricochetSfx = LoadObject<GameObject>(\"Assets/Particles/SoundBubbles/Ricochet.prefab\");\n            //Assets/Particles/Flashes/Flash.prefab\n            parryableFlash = LoadObject<GameObject>(\"Assets/Particles/Flashes/Flash.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Spear.prefab\n            hideousMassSpear = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Spear.prefab\");\n            //Assets/Prefabs/Enemies/Wicked.prefab\n            somethingWicked = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/Wicked.prefab\");\n            //Assets/Textures/UI/SingleRevolver.png\n            blueRevolverSprite = LoadObject<Sprite>(\"Assets/Textures/UI/SingleRevolver.png\");\n            //Assets/Textures/UI/RevolverSpecial.png\n            greenRevolverSprite = LoadObject<Sprite>(\"Assets/Textures/UI/RevolverSpecial.png\");\n            //Assets/Textures/UI/RevolverSharp.png\n            redRevolverSprite = LoadObject<Sprite>(\"Assets/Textures/UI/RevolverSharp.png\");\n            //Assets/Textures/UI/Shotgun.png\n            blueShotgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/Shotgun.png\");\n            //Assets/Textures/UI/Shotgun1.png\n            greenShotgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/Shotgun1.png\");\n            //Assets/Textures/UI/Nailgun2.png\n            blueNailgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/Nailgun2.png\");\n            //Assets/Textures/UI/NailgunOverheat.png\n            greenNailgunSprite = LoadObject<Sprite>(\"Assets/Textures/UI/NailgunOverheat.png\");\n            //Assets/Textures/UI/SawbladeLauncher.png\n            blueSawLauncherSprite = LoadObject<Sprite>(\"Assets/Textures/UI/SawbladeLauncher.png\");\n            //Assets/Textures/UI/SawbladeLauncherOverheat.png\n            greenSawLauncherSprite = LoadObject<Sprite>(\"Assets/Textures/UI/SawbladeLauncherOverheat.png\");\n            //Assets/Prefabs/Attacks and Projectiles/Coin.prefab\n            coin = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Coin.prefab\");\n            //Assets/Materials/GabrielFake.mat\n            gabrielFakeMat = LoadObject<Material>(\"Assets/Materials/GabrielFake.mat\");\n            //Assets/Prefabs/Enemies/Turret.prefab\n            turret = LoadObject<GameObject>(\"Assets/Prefabs/Enemies/Turret.prefab\").GetComponent<Turret>();\n            //Assets/Particles/Flashes/GunFlashDistant.prefab\n            turretFinalFlash = LoadObject<GameObject>(\"Assets/Particles/Flashes/GunFlashDistant.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime Charged.prefab\n            sisyphusDestroyExplosion = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Explosions/Explosion Sisyphus Prime Charged.prefab\");\n            //Assets/Prefabs/Effects/Charge Effect.prefab\n            chargeEffect = LoadObject<GameObject>(\"Assets/Prefabs/Effects/Charge Effect.prefab\");\n            //Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\n            maliciousFaceProjectile = LoadObject<GameObject>(\"Assets/Prefabs/Attacks and Projectiles/Hitscan Beams/Malicious Beam.prefab\");\n        }\n", "        public static bool ultrapainDifficulty = false;\n        public static bool realUltrapainDifficulty = false;\n        public static GameObject currentDifficultyButton;\n        public static GameObject currentDifficultyPanel;\n        public static Text currentDifficultyInfoText;\n        public void OnSceneChange(Scene before, Scene after)\n        {\n            StyleIDs.RegisterIDs();\n            ScenePatchCheck();\n\n            string mainMenuSceneName = \"b3e7f2f8052488a45b35549efb98d902\";\n            string bootSequenceSceneName = \"4f8ecffaa98c2614f89922daf31fa22d\";\n            string currentSceneName = SceneManager.GetActiveScene().name;", "            if (currentSceneName == mainMenuSceneName)\n            {\n                LoadPrefabs();\n\n                //Canvas/Difficulty Select (1)/Violent\n                Transform difficultySelect = SceneManager.GetActiveScene().GetRootGameObjects().Where(obj => obj.name == \"Canvas\").First().transform.Find(\"Difficulty Select (1)\");\n                GameObject ultrapainButton = GameObject.Instantiate(difficultySelect.Find(\"Violent\").gameObject, difficultySelect);\n                currentDifficultyButton = ultrapainButton;\n\n                ultrapainButton.transform.Find(\"Name\").GetComponent<Text>().text = ConfigManager.pluginName.value;\n                ultrapainButton.GetComponent<DifficultySelectButton>().difficulty = 5;\n                RectTransform ultrapainTrans = ultrapainButton.GetComponent<RectTransform>();\n                ultrapainTrans.anchoredPosition = new Vector2(20f, -104f);\n\n                //Canvas/Difficulty Select (1)/Violent Info\n                GameObject info = GameObject.Instantiate(difficultySelect.Find(\"Violent Info\").gameObject, difficultySelect);\n                currentDifficultyPanel = info;\n                currentDifficultyInfoText = info.transform.Find(\"Text\").GetComponent<Text>();\n                currentDifficultyInfoText.text = ConfigManager.pluginInfo.value;\n                Text currentDifficultyHeaderText = info.transform.Find(\"Title (1)\").GetComponent<Text>();\n                currentDifficultyHeaderText.text = $\"--{ConfigManager.pluginName.value}--\";\n                currentDifficultyHeaderText.resizeTextForBestFit = true;\n                currentDifficultyHeaderText.horizontalOverflow = HorizontalWrapMode.Wrap;\n                currentDifficultyHeaderText.verticalOverflow = VerticalWrapMode.Truncate;\n                info.SetActive(false);\n\n                EventTrigger evt = ultrapainButton.GetComponent<EventTrigger>();\n                evt.triggers.Clear();\n\n                /*EventTrigger.TriggerEvent activate = new EventTrigger.TriggerEvent();\n                activate.AddListener((BaseEventData data) => info.SetActive(true));\n                EventTrigger.TriggerEvent deactivate = new EventTrigger.TriggerEvent();\n                activate.AddListener((BaseEventData data) => info.SetActive(false));*/\n\n                EventTrigger.Entry trigger1 = new EventTrigger.Entry() { eventID = EventTriggerType.PointerEnter };\n                trigger1.callback.AddListener((BaseEventData data) => info.SetActive(true));\n                EventTrigger.Entry trigger2 = new EventTrigger.Entry() { eventID = EventTriggerType.PointerExit };\n                trigger2.callback.AddListener((BaseEventData data) => info.SetActive(false));\n\n                evt.triggers.Add(trigger1);\n                evt.triggers.Add(trigger2);\n", "                foreach(EventTrigger trigger in difficultySelect.GetComponentsInChildren<EventTrigger>())\n                {\n                    if (trigger.gameObject == ultrapainButton)\n                        continue;\n\n                    EventTrigger.Entry closeTrigger = new EventTrigger.Entry() { eventID = EventTriggerType.PointerEnter };\n                    closeTrigger.callback.AddListener((BaseEventData data) => info.SetActive(false));\n                    trigger.triggers.Add(closeTrigger);\n                }\n            }\n            else if(currentSceneName == bootSequenceSceneName)\n            {\n                LoadPrefabs();\n\n                //Canvas/Difficulty Select (1)/Violent\n                Transform difficultySelect = SceneManager.GetActiveScene().GetRootGameObjects().Where(obj => obj.name == \"Canvas\").First().transform.Find(\"Intro/Difficulty Select\");\n                GameObject ultrapainButton = GameObject.Instantiate(difficultySelect.Find(\"Violent\").gameObject, difficultySelect);\n                currentDifficultyButton = ultrapainButton;\n\n                ultrapainButton.transform.Find(\"Name\").GetComponent<Text>().text = ConfigManager.pluginName.value;\n                ultrapainButton.GetComponent<DifficultySelectButton>().difficulty = 5;\n                RectTransform ultrapainTrans = ultrapainButton.GetComponent<RectTransform>();\n                ultrapainTrans.anchoredPosition = new Vector2(20f, -104f);\n\n                //Canvas/Difficulty Select (1)/Violent Info\n                GameObject info = GameObject.Instantiate(difficultySelect.Find(\"Violent Info\").gameObject, difficultySelect);\n                currentDifficultyPanel = info;\n                currentDifficultyInfoText = info.transform.Find(\"Text\").GetComponent<Text>();\n                currentDifficultyInfoText.text = ConfigManager.pluginInfo.value;\n                Text currentDifficultyHeaderText = info.transform.Find(\"Title (1)\").GetComponent<Text>();\n                currentDifficultyHeaderText.text = $\"--{ConfigManager.pluginName.value}--\";\n                currentDifficultyHeaderText.resizeTextForBestFit = true;\n                currentDifficultyHeaderText.horizontalOverflow = HorizontalWrapMode.Wrap;\n                currentDifficultyHeaderText.verticalOverflow = VerticalWrapMode.Truncate;\n                info.SetActive(false);\n\n                EventTrigger evt = ultrapainButton.GetComponent<EventTrigger>();\n                evt.triggers.Clear();\n\n                /*EventTrigger.TriggerEvent activate = new EventTrigger.TriggerEvent();\n                activate.AddListener((BaseEventData data) => info.SetActive(true));\n                EventTrigger.TriggerEvent deactivate = new EventTrigger.TriggerEvent();\n                activate.AddListener((BaseEventData data) => info.SetActive(false));*/\n\n                EventTrigger.Entry trigger1 = new EventTrigger.Entry() { eventID = EventTriggerType.PointerEnter };\n                trigger1.callback.AddListener((BaseEventData data) => info.SetActive(true));\n                EventTrigger.Entry trigger2 = new EventTrigger.Entry() { eventID = EventTriggerType.PointerExit };\n                trigger2.callback.AddListener((BaseEventData data) => info.SetActive(false));\n\n                evt.triggers.Add(trigger1);\n                evt.triggers.Add(trigger2);\n", "            else if(currentSceneName == bootSequenceSceneName)\n            {\n                LoadPrefabs();\n\n                //Canvas/Difficulty Select (1)/Violent\n                Transform difficultySelect = SceneManager.GetActiveScene().GetRootGameObjects().Where(obj => obj.name == \"Canvas\").First().transform.Find(\"Intro/Difficulty Select\");\n                GameObject ultrapainButton = GameObject.Instantiate(difficultySelect.Find(\"Violent\").gameObject, difficultySelect);\n                currentDifficultyButton = ultrapainButton;\n\n                ultrapainButton.transform.Find(\"Name\").GetComponent<Text>().text = ConfigManager.pluginName.value;\n                ultrapainButton.GetComponent<DifficultySelectButton>().difficulty = 5;\n                RectTransform ultrapainTrans = ultrapainButton.GetComponent<RectTransform>();\n                ultrapainTrans.anchoredPosition = new Vector2(20f, -104f);\n\n                //Canvas/Difficulty Select (1)/Violent Info\n                GameObject info = GameObject.Instantiate(difficultySelect.Find(\"Violent Info\").gameObject, difficultySelect);\n                currentDifficultyPanel = info;\n                currentDifficultyInfoText = info.transform.Find(\"Text\").GetComponent<Text>();\n                currentDifficultyInfoText.text = ConfigManager.pluginInfo.value;\n                Text currentDifficultyHeaderText = info.transform.Find(\"Title (1)\").GetComponent<Text>();\n                currentDifficultyHeaderText.text = $\"--{ConfigManager.pluginName.value}--\";\n                currentDifficultyHeaderText.resizeTextForBestFit = true;\n                currentDifficultyHeaderText.horizontalOverflow = HorizontalWrapMode.Wrap;\n                currentDifficultyHeaderText.verticalOverflow = VerticalWrapMode.Truncate;\n                info.SetActive(false);\n\n                EventTrigger evt = ultrapainButton.GetComponent<EventTrigger>();\n                evt.triggers.Clear();\n\n                /*EventTrigger.TriggerEvent activate = new EventTrigger.TriggerEvent();\n                activate.AddListener((BaseEventData data) => info.SetActive(true));\n                EventTrigger.TriggerEvent deactivate = new EventTrigger.TriggerEvent();\n                activate.AddListener((BaseEventData data) => info.SetActive(false));*/\n\n                EventTrigger.Entry trigger1 = new EventTrigger.Entry() { eventID = EventTriggerType.PointerEnter };\n                trigger1.callback.AddListener((BaseEventData data) => info.SetActive(true));\n                EventTrigger.Entry trigger2 = new EventTrigger.Entry() { eventID = EventTriggerType.PointerExit };\n                trigger2.callback.AddListener((BaseEventData data) => info.SetActive(false));\n\n                evt.triggers.Add(trigger1);\n                evt.triggers.Add(trigger2);\n", "                foreach (EventTrigger trigger in difficultySelect.GetComponentsInChildren<EventTrigger>())\n                {\n                    if (trigger.gameObject == ultrapainButton)\n                        continue;\n\n                    EventTrigger.Entry closeTrigger = new EventTrigger.Entry() { eventID = EventTriggerType.PointerEnter };\n                    closeTrigger.callback.AddListener((BaseEventData data) => info.SetActive(false));\n                    trigger.triggers.Add(closeTrigger);\n                }\n            }\n\n            // LOAD CUSTOM PREFABS HERE TO AVOID MID GAME LAG\n            MinosPrimeCharge.CreateDecoy();\n            GameObject shockwaveSisyphus = SisyphusInstructionist_Start.shockwave;\n        }\n", "        public static class StyleIDs\n        {\n            private static bool registered = false;\n            public static void RegisterIDs()\n            {\n                registered = false;\n                if (MonoSingleton<StyleHUD>.Instance == null)\n                    return;\n\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.grenadeBoostStyleText.guid, ConfigManager.grenadeBoostStyleText.formattedString);\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.rocketBoostStyleText.guid, ConfigManager.rocketBoostStyleText.formattedString);\n\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.orbStrikeRevolverStyleText.guid, ConfigManager.orbStrikeRevolverStyleText.formattedString);\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.orbStrikeRevolverChargedStyleText.guid, ConfigManager.orbStrikeRevolverChargedStyleText.formattedString);\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.orbStrikeElectricCannonStyleText.guid, ConfigManager.orbStrikeElectricCannonStyleText.formattedString);\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.orbStrikeMaliciousCannonStyleText.guid, ConfigManager.orbStrikeMaliciousCannonStyleText.formattedString);\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.maliciousChargebackStyleText.guid, ConfigManager.maliciousChargebackStyleText.formattedString);\n                MonoSingleton<StyleHUD>.Instance.RegisterStyleItem(ConfigManager.sentryChargebackStyleText.guid, ConfigManager.sentryChargebackStyleText.formattedString);\n\n                registered = true;\n                Debug.Log(\"Registered all style ids\");\n            }\n", "            private static FieldInfo idNameDict = typeof(StyleHUD).GetField(\"idNameDict\", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);\n            public static void UpdateID(string id, string newName)\n            {\n                if (!registered || StyleHUD.Instance == null)\n                    return;\n                (idNameDict.GetValue(StyleHUD.Instance) as Dictionary<string, string>)[id] = newName;\n            }\n        }\n\n        public static Harmony harmonyTweaks;\n        public static Harmony harmonyBase;", "        public static Harmony harmonyTweaks;\n        public static Harmony harmonyBase;\n        private static MethodInfo GetMethod<T>(string name)\n        {\n            return typeof(T).GetMethod(name, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);\n        }\n\n        private static Dictionary<MethodInfo, HarmonyMethod> methodCache = new Dictionary<MethodInfo, HarmonyMethod>();\n        private static HarmonyMethod GetHarmonyMethod(MethodInfo method)\n        {\n            if (methodCache.TryGetValue(method, out HarmonyMethod harmonyMethod))\n                return harmonyMethod;\n            else\n            {\n                harmonyMethod = new HarmonyMethod(method);\n                methodCache.Add(method, harmonyMethod);\n                return harmonyMethod;\n            }\n        }\n", "        private static HarmonyMethod GetHarmonyMethod(MethodInfo method)\n        {\n            if (methodCache.TryGetValue(method, out HarmonyMethod harmonyMethod))\n                return harmonyMethod;\n            else\n            {\n                harmonyMethod = new HarmonyMethod(method);\n                methodCache.Add(method, harmonyMethod);\n                return harmonyMethod;\n            }\n        }\n", "        private static void PatchAllEnemies()\n        {\n            if (!ConfigManager.enemyTweakToggle.value)\n                return;\n\n            if (ConfigManager.friendlyFireDamageOverrideToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Explosion>(\"Collide\"), prefix: GetHarmonyMethod(GetMethod<Explosion_Collide_FF>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Explosion_Collide_FF>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<PhysicalShockwave>(\"CheckCollision\"), prefix: GetHarmonyMethod(GetMethod<PhysicalShockwave_CheckCollision_FF>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<PhysicalShockwave_CheckCollision_FF>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<VirtueInsignia>(\"OnTriggerEnter\"), prefix: GetHarmonyMethod(GetMethod<VirtueInsignia_OnTriggerEnter_FF>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<VirtueInsignia_OnTriggerEnter_FF>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<SwingCheck2>(\"CheckCollision\"), prefix: GetHarmonyMethod(GetMethod<SwingCheck2_CheckCollision_FF>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<SwingCheck2_CheckCollision_FF>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Projectile>(\"Collided\"), prefix: GetHarmonyMethod(GetMethod<Projectile_Collided_FF>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Projectile_Collided_FF>(\"Postfix\")));\n\n                harmonyTweaks.Patch(GetMethod<EnemyIdentifier>(\"DeliverDamage\"), prefix: GetHarmonyMethod(GetMethod<EnemyIdentifier_DeliverDamage_FF>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Flammable>(\"Burn\"), prefix: GetHarmonyMethod(GetMethod<Flammable_Burn_FF>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<FireZone>(\"OnTriggerStay\"), prefix: GetHarmonyMethod(GetMethod<StreetCleaner_Fire_FF>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<StreetCleaner_Fire_FF>(\"Postfix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<EnemyIdentifier>(\"UpdateModifiers\"), postfix: GetHarmonyMethod(GetMethod<EnemyIdentifier_UpdateModifiers>(\"Postfix\")));\n\n            harmonyTweaks.Patch(GetMethod<StatueBoss>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<StatueBoss_Start_Patch>(\"Postfix\")));", "            if (ConfigManager.cerberusDashToggle.value)\n                harmonyTweaks.Patch(GetMethod<StatueBoss>(\"StopDash\"), postfix: GetHarmonyMethod(GetMethod<StatueBoss_StopDash_Patch>(\"Postfix\")));\n            if(ConfigManager.cerberusParryable.value)\n            {\n                harmonyTweaks.Patch(GetMethod<StatueBoss>(\"StopTracking\"), postfix: GetHarmonyMethod(GetMethod<StatueBoss_StopTracking_Patch>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<StatueBoss>(\"Stomp\"), postfix: GetHarmonyMethod(GetMethod<StatueBoss_Stomp_Patch>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Statue>(\"GetHurt\"), prefix: GetHarmonyMethod(GetMethod<Statue_GetHurt_Patch>(\"Prefix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Drone_Start_Patch>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Shoot\"), prefix: GetHarmonyMethod(GetMethod<Drone_Shoot_Patch>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"PlaySound\"), prefix: GetHarmonyMethod(GetMethod<Drone_PlaySound_Patch>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Update\"), postfix: GetHarmonyMethod(GetMethod<Drone_Update>(\"Postfix\")));", "            if(ConfigManager.droneHomeToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Drone>(\"Death\"), prefix: GetHarmonyMethod(GetMethod<Drone_Death_Patch>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Drone>(\"GetHurt\"), prefix: GetHarmonyMethod(GetMethod<Drone_GetHurt_Patch>(\"Prefix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Ferryman>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<FerrymanStart>(\"Postfix\")));\n            if(ConfigManager.ferrymanComboToggle.value)\n                harmonyTweaks.Patch(GetMethod<Ferryman>(\"StopMoving\"), postfix: GetHarmonyMethod(GetMethod<FerrymanStopMoving>(\"Postfix\")));\n\n            if(ConfigManager.filthExplodeToggle.value)\n                harmonyTweaks.Patch(GetMethod<SwingCheck2>(\"CheckCollision\"), prefix: GetHarmonyMethod(GetMethod<SwingCheck2_CheckCollision_Patch2>(\"Prefix\")));\n", "            if(ConfigManager.filthExplodeToggle.value)\n                harmonyTweaks.Patch(GetMethod<SwingCheck2>(\"CheckCollision\"), prefix: GetHarmonyMethod(GetMethod<SwingCheck2_CheckCollision_Patch2>(\"Prefix\")));\n\n            if(ConfigManager.fleshPrisonSpinAttackToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"HomingProjectileAttack\"), postfix: GetHarmonyMethod(GetMethod<FleshPrisonShoot>(\"Postfix\")));\n\n            if (ConfigManager.hideousMassInsigniaToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Projectile>(\"Explode\"), postfix: GetHarmonyMethod(GetMethod<Projectile_Explode_Patch>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Mass>(\"ShootExplosive\"), postfix: GetHarmonyMethod(GetMethod<HideousMassHoming>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<HideousMassHoming>(\"Prefix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<SpiderBody>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<MaliciousFace_Start_Patch>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<SpiderBody>(\"ChargeBeam\"), postfix: GetHarmonyMethod(GetMethod<MaliciousFace_ChargeBeam>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<SpiderBody>(\"BeamChargeEnd\"), prefix: GetHarmonyMethod(GetMethod<MaliciousFace_BeamChargeEnd>(\"Prefix\")));", "            if (ConfigManager.maliciousFaceHomingProjectileToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<SpiderBody>(\"ShootProj\"), postfix: GetHarmonyMethod(GetMethod<MaliciousFace_ShootProj_Patch>(\"Postfix\")));\n            }\n            if (ConfigManager.maliciousFaceRadianceOnEnrage.value)\n                harmonyTweaks.Patch(GetMethod<SpiderBody>(\"Enrage\"), postfix: GetHarmonyMethod(GetMethod<MaliciousFace_Enrage_Patch>(\"Postfix\")));\n\n            harmonyTweaks.Patch(GetMethod<Mindflayer>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Mindflayer_Start_Patch>(\"Postfix\")));\n            if (ConfigManager.mindflayerShootTweakToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Mindflayer>(\"ShootProjectiles\"), prefix: GetHarmonyMethod(GetMethod<Mindflayer_ShootProjectiles_Patch>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<EnemyIdentifier>(\"DeliverDamage\"), prefix: GetHarmonyMethod(GetMethod<EnemyIdentifier_DeliverDamage_MF>(\"Prefix\")));\n            }", "            if (ConfigManager.mindflayerShootTweakToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Mindflayer>(\"ShootProjectiles\"), prefix: GetHarmonyMethod(GetMethod<Mindflayer_ShootProjectiles_Patch>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<EnemyIdentifier>(\"DeliverDamage\"), prefix: GetHarmonyMethod(GetMethod<EnemyIdentifier_DeliverDamage_MF>(\"Prefix\")));\n            }\n            if (ConfigManager.mindflayerTeleportComboToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<SwingCheck2>(\"CheckCollision\"), postfix: GetHarmonyMethod(GetMethod<SwingCheck2_CheckCollision_Patch>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<SwingCheck2_CheckCollision_Patch>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Mindflayer>(\"MeleeTeleport\"), prefix: GetHarmonyMethod(GetMethod<Mindflayer_MeleeTeleport_Patch>(\"Prefix\")));\n                //harmonyTweaks.Patch(GetMethod<SwingCheck2>(\"DamageStop\"), postfix: GetHarmonyMethod(GetMethod<SwingCheck2_DamageStop_Patch>(\"Postfix\")));\n            }\n", "            if (ConfigManager.minosPrimeRandomTeleportToggle.value)\n                harmonyTweaks.Patch(GetMethod<MinosPrime>(\"ProjectileCharge\"), postfix: GetHarmonyMethod(GetMethod<MinosPrimeCharge>(\"Postfix\")));\n            if (ConfigManager.minosPrimeTeleportTrail.value)\n                harmonyTweaks.Patch(GetMethod<MinosPrime>(\"Teleport\"), postfix: GetHarmonyMethod(GetMethod<MinosPrimeCharge>(\"TeleportPostfix\")));\n            harmonyTweaks.Patch(GetMethod<MinosPrime>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<MinosPrime_Start>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<MinosPrime>(\"Dropkick\"), prefix: GetHarmonyMethod(GetMethod<MinosPrime_Dropkick>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<MinosPrime>(\"Combo\"), postfix: GetHarmonyMethod(GetMethod<MinosPrime_Combo>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<MinosPrime>(\"StopAction\"), postfix: GetHarmonyMethod(GetMethod<MinosPrime_StopAction>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<MinosPrime>(\"Ascend\"), prefix: GetHarmonyMethod(GetMethod<MinosPrime_Ascend>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<MinosPrime>(\"Death\"), prefix: GetHarmonyMethod(GetMethod<MinosPrime_Death>(\"Prefix\")));\n            if (ConfigManager.minosPrimeCrushAttackToggle.value)\n                harmonyTweaks.Patch(GetMethod<MinosPrime>(\"RiderKick\"), prefix: GetHarmonyMethod(GetMethod<MinosPrime_RiderKick>(\"Prefix\")));", "            if (ConfigManager.minosPrimeCrushAttackToggle.value)\n                harmonyTweaks.Patch(GetMethod<MinosPrime>(\"RiderKick\"), prefix: GetHarmonyMethod(GetMethod<MinosPrime_RiderKick>(\"Prefix\")));\n            if (ConfigManager.minosPrimeComboExplosiveEndToggle.value)\n                harmonyTweaks.Patch(GetMethod<MinosPrime>(\"ProjectileCharge\"), prefix: GetHarmonyMethod(GetMethod<MinosPrime_ProjectileCharge>(\"Prefix\")));\n\n            if (ConfigManager.schismSpreadAttackToggle.value)\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"ShootProjectile\"), postfix: GetHarmonyMethod(GetMethod<ZombieProjectile_ShootProjectile_Patch>(\"Postfix\")));\n\n            if (ConfigManager.soliderShootTweakToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Solider_Start_Patch>(\"Postfix\")));\n            }", "            if (ConfigManager.soliderShootTweakToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Solider_Start_Patch>(\"Postfix\")));\n            }\n            if(ConfigManager.soliderCoinsIgnoreWeakPointToggle.value)\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"SpawnProjectile\"), postfix: GetHarmonyMethod(GetMethod<Solider_SpawnProjectile_Patch>(\"Postfix\")));\n            if (ConfigManager.soliderShootGrenadeToggle.value || ConfigManager.soliderShootTweakToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"ThrowProjectile\"), postfix: GetHarmonyMethod(GetMethod<Solider_ThrowProjectile_Patch>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Grenade>(\"Explode\"), postfix: GetHarmonyMethod(GetMethod<Grenade_Explode_Patch>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<Grenade_Explode_Patch>(\"Prefix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Stalker>(\"SandExplode\"), prefix: GetHarmonyMethod(GetMethod<Stalker_SandExplode_Patch>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<SandificationZone>(\"Enter\"), postfix: GetHarmonyMethod(GetMethod<SandificationZone_Enter_Patch>(\"Postfix\")));\n", "            if (ConfigManager.strayCoinsIgnoreWeakPointToggle.value)\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"SpawnProjectile\"), postfix: GetHarmonyMethod(GetMethod<Swing>(\"Postfix\")));\n            if (ConfigManager.strayShootToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<ZombieProjectile_Start_Patch1>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"ThrowProjectile\"), postfix: GetHarmonyMethod(GetMethod<ZombieProjectile_ThrowProjectile_Patch>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"SwingEnd\"), prefix: GetHarmonyMethod(GetMethod<SwingEnd>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<ZombieProjectiles>(\"DamageEnd\"), prefix: GetHarmonyMethod(GetMethod<DamageEnd>(\"Prefix\")));\n            }\n\n            if(ConfigManager.streetCleanerCoinsIgnoreWeakPointToggle.value)\n                harmonyTweaks.Patch(GetMethod<Streetcleaner>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<StreetCleaner_Start_Patch>(\"Postfix\")));", "            if(ConfigManager.streetCleanerCoinsIgnoreWeakPointToggle.value)\n                harmonyTweaks.Patch(GetMethod<Streetcleaner>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<StreetCleaner_Start_Patch>(\"Postfix\")));\n            if(ConfigManager.streetCleanerPredictiveDodgeToggle.value)\n                harmonyTweaks.Patch(GetMethod<BulletCheck>(\"OnTriggerEnter\"), postfix: GetHarmonyMethod(GetMethod<BulletCheck_OnTriggerEnter_Patch>(\"Postfix\")));\n\n            harmonyTweaks.Patch(GetMethod<SwordsMachine>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<SwordsMachine_Start>(\"Postfix\")));\n            if (ConfigManager.swordsMachineNoLightKnockbackToggle.value || ConfigManager.swordsMachineSecondPhaseMode.value != ConfigManager.SwordsMachineSecondPhase.None)\n            {\n                harmonyTweaks.Patch(GetMethod<SwordsMachine>(\"Knockdown\"), prefix: GetHarmonyMethod(GetMethod<SwordsMachine_Knockdown_Patch>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<SwordsMachine>(\"Down\"), postfix: GetHarmonyMethod(GetMethod<SwordsMachine_Down_Patch>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<SwordsMachine_Down_Patch>(\"Prefix\")));\n                //harmonyTweaks.Patch(GetMethod<SwordsMachine>(\"SetSpeed\"), prefix: GetHarmonyMethod(GetMethod<SwordsMachine_SetSpeed_Patch>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<SwordsMachine>(\"EndFirstPhase\"), postfix: GetHarmonyMethod(GetMethod<SwordsMachine_EndFirstPhase_Patch>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<SwordsMachine_EndFirstPhase_Patch>(\"Prefix\")));\n            }", "            if (ConfigManager.swordsMachineExplosiveSwordToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<ThrownSword>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<ThrownSword_Start_Patch>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<ThrownSword>(\"OnTriggerEnter\"), postfix: GetHarmonyMethod(GetMethod<ThrownSword_OnTriggerEnter_Patch>(\"Postfix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Turret>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<TurretStart>(\"Postfix\")));\n            if(ConfigManager.turretBurstFireToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Turret>(\"Shoot\"), prefix: GetHarmonyMethod(GetMethod<TurretShoot>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Turret>(\"StartAiming\"), postfix: GetHarmonyMethod(GetMethod<TurretAim>(\"Postfix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Explosion>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<V2CommonExplosion>(\"Postfix\")));\n\n            harmonyTweaks.Patch(GetMethod<V2>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<V2FirstStart>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<V2>(\"Update\"), prefix: GetHarmonyMethod(GetMethod<V2FirstUpdate>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<V2>(\"ShootWeapon\"), prefix: GetHarmonyMethod(GetMethod<V2FirstShootWeapon>(\"Prefix\")));\n\n            harmonyTweaks.Patch(GetMethod<V2>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<V2SecondStart>(\"Postfix\")));", "            //if(ConfigManager.v2SecondStartEnraged.value)\n            //    harmonyTweaks.Patch(GetMethod<BossHealthBar>(\"OnEnable\"), postfix: GetHarmonyMethod(GetMethod<V2SecondEnrage>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<V2>(\"Update\"), prefix: GetHarmonyMethod(GetMethod<V2SecondUpdate>(\"Prefix\")));\n            //harmonyTweaks.Patch(GetMethod<V2>(\"AltShootWeapon\"), postfix: GetHarmonyMethod(GetMethod<V2AltShootWeapon>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<V2>(\"SwitchWeapon\"), prefix: GetHarmonyMethod(GetMethod<V2SecondSwitchWeapon>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<V2>(\"ShootWeapon\"), prefix: GetHarmonyMethod(GetMethod<V2SecondShootWeapon>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<V2SecondShootWeapon>(\"Postfix\")));\n            if(ConfigManager.v2SecondFastCoinToggle.value)\n                harmonyTweaks.Patch(GetMethod<V2>(\"ThrowCoins\"), prefix: GetHarmonyMethod(GetMethod<V2SecondFastCoin>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Cannonball>(\"OnTriggerEnter\"), prefix: GetHarmonyMethod(GetMethod<V2RocketLauncher>(\"CannonBallTriggerPrefix\")));\n\n            if (ConfigManager.v2FirstSharpshooterToggle.value || ConfigManager.v2SecondSharpshooterToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<EnemyRevolver>(\"PrepareAltFire\"), prefix: GetHarmonyMethod(GetMethod<V2CommonRevolverPrepareAltFire>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Projectile>(\"Collided\"), prefix: GetHarmonyMethod(GetMethod<V2CommonRevolverBullet>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<EnemyRevolver>(\"AltFire\"), prefix: GetHarmonyMethod(GetMethod<V2CommonRevolverAltShoot>(\"Prefix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Virtue_Start_Patch>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"SpawnInsignia\"), prefix: GetHarmonyMethod(GetMethod<Virtue_SpawnInsignia_Patch>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Death\"), prefix: GetHarmonyMethod(GetMethod<Virtue_Death_Patch>(\"Prefix\")));\n", "            if (ConfigManager.v2FirstSharpshooterToggle.value || ConfigManager.v2SecondSharpshooterToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<EnemyRevolver>(\"PrepareAltFire\"), prefix: GetHarmonyMethod(GetMethod<V2CommonRevolverPrepareAltFire>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Projectile>(\"Collided\"), prefix: GetHarmonyMethod(GetMethod<V2CommonRevolverBullet>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<EnemyRevolver>(\"AltFire\"), prefix: GetHarmonyMethod(GetMethod<V2CommonRevolverAltShoot>(\"Prefix\")));\n            }\n\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Virtue_Start_Patch>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"SpawnInsignia\"), prefix: GetHarmonyMethod(GetMethod<Virtue_SpawnInsignia_Patch>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Drone>(\"Death\"), prefix: GetHarmonyMethod(GetMethod<Virtue_Death_Patch>(\"Prefix\")));\n", "            if (ConfigManager.sisyInstJumpShockwave.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Sisyphus>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<SisyphusInstructionist_Start>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Sisyphus>(\"Update\"), postfix: GetHarmonyMethod(GetMethod<SisyphusInstructionist_Update>(\"Postfix\")));\n            }\n            if(ConfigManager.sisyInstBoulderShockwave.value)\n                harmonyTweaks.Patch(GetMethod<Sisyphus>(\"SetupExplosion\"), postfix: GetHarmonyMethod(GetMethod<SisyphusInstructionist_SetupExplosion>(\"Postfix\")));\n            if(ConfigManager.sisyInstStrongerExplosion.value)\n                harmonyTweaks.Patch(GetMethod<Sisyphus>(\"StompExplosion\"), prefix: GetHarmonyMethod(GetMethod<SisyphusInstructionist_StompExplosion>(\"Prefix\")));\n\n            harmonyTweaks.Patch(GetMethod<LeviathanTail>(\"Awake\"), postfix: GetHarmonyMethod(GetMethod<LeviathanTail_Start>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<LeviathanTail>(\"BigSplash\"), prefix: GetHarmonyMethod(GetMethod<LeviathanTail_BigSplash>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<LeviathanTail>(\"SwingEnd\"), prefix: GetHarmonyMethod(GetMethod<LeviathanTail_SwingEnd>(\"Prefix\")));\n\n            harmonyTweaks.Patch(GetMethod<LeviathanHead>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Leviathan_Start>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<LeviathanHead>(\"ProjectileBurst\"), prefix: GetHarmonyMethod(GetMethod<Leviathan_ProjectileBurst>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<LeviathanHead>(\"ProjectileBurstStart\"), prefix: GetHarmonyMethod(GetMethod<Leviathan_ProjectileBurstStart>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<LeviathanHead>(\"FixedUpdate\"), prefix: GetHarmonyMethod(GetMethod<Leviathan_FixedUpdate>(\"Prefix\")));\n", "            if (ConfigManager.somethingWickedSpear.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Wicked>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<SomethingWicked_Start>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Wicked>(\"GetHit\"), postfix: GetHarmonyMethod(GetMethod<SomethingWicked_GetHit>(\"Postfix\")));\n            }\n            if(ConfigManager.somethingWickedSpawnOn43.value)\n            {\n                harmonyTweaks.Patch(GetMethod<ObjectActivator>(\"Activate\"), prefix: GetHarmonyMethod(GetMethod<ObjectActivator_Activate>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Wicked>(\"GetHit\"), postfix: GetHarmonyMethod(GetMethod<JokeWicked_GetHit>(\"Postfix\")));\n            }\n", "            if (ConfigManager.panopticonFullPhase.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Panopticon_Start>(\"Postfix\")));\n            if (ConfigManager.panopticonAxisBeam.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"SpawnInsignia\"), prefix: GetHarmonyMethod(GetMethod<Panopticon_SpawnInsignia>(\"Prefix\")));\n            if (ConfigManager.panopticonSpinAttackToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"HomingProjectileAttack\"), postfix: GetHarmonyMethod(GetMethod<Panopticon_HomingProjectileAttack>(\"Postfix\")));\n            if (ConfigManager.panopticonBlackholeProj.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"SpawnBlackHole\"), postfix: GetHarmonyMethod(GetMethod<Panopticon_SpawnBlackHole>(\"Postfix\")));\n            if (ConfigManager.panopticonBalanceEyes.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"SpawnFleshDrones\"), prefix: GetHarmonyMethod(GetMethod<Panopticon_SpawnFleshDrones>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Panopticon_SpawnFleshDrones>(\"Postfix\")));\n            if (ConfigManager.panopticonBlueProjToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"Update\"), transpiler: GetHarmonyMethod(GetMethod<Panopticon_BlueProjectile>(\"Transpiler\")));\n", "            if (ConfigManager.panopticonBalanceEyes.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"SpawnFleshDrones\"), prefix: GetHarmonyMethod(GetMethod<Panopticon_SpawnFleshDrones>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Panopticon_SpawnFleshDrones>(\"Postfix\")));\n            if (ConfigManager.panopticonBlueProjToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"Update\"), transpiler: GetHarmonyMethod(GetMethod<Panopticon_BlueProjectile>(\"Transpiler\")));\n\n            if (ConfigManager.idolExplosionToggle.value)\n                harmonyTweaks.Patch(GetMethod<Idol>(\"Death\"), postfix: GetHarmonyMethod(GetMethod<Idol_Death_Patch>(\"Postfix\")));\n\n            // ADDME\n            /*\n            harmonyTweaks.Patch(GetMethod<GabrielSecond>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<GabrielSecond_Start>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<GabrielSecond>(\"BasicCombo\"), postfix: GetHarmonyMethod(GetMethod<GabrielSecond_BasicCombo>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<GabrielSecond>(\"FastCombo\"), postfix: GetHarmonyMethod(GetMethod<GabrielSecond_FastCombo>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<GabrielSecond>(\"CombineSwords\"), postfix: GetHarmonyMethod(GetMethod<GabrielSecond_CombineSwords>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<GabrielSecond>(\"ThrowCombo\"), postfix: GetHarmonyMethod(GetMethod<GabrielSecond_ThrowCombo>(\"Postfix\")));\n            */\n        }\n", "        private static void PatchAllPlayers()\n        {\n            if (!ConfigManager.playerTweakToggle.value)\n                return;\n\n            harmonyTweaks.Patch(GetMethod<Punch>(\"CheckForProjectile\"), prefix: GetHarmonyMethod(GetMethod<Punch_CheckForProjectile_Patch>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Grenade>(\"Explode\"), prefix: GetHarmonyMethod(GetMethod<Grenade_Explode_Patch1>(\"Prefix\")));\n            harmonyTweaks.Patch(GetMethod<Grenade>(\"Collision\"), prefix: GetHarmonyMethod(GetMethod<Grenade_Collision_Patch>(\"Prefix\")));\n            if (ConfigManager.rocketBoostToggle.value)\n                harmonyTweaks.Patch(GetMethod<Explosion>(\"Collide\"), prefix: GetHarmonyMethod(GetMethod<Explosion_Collide_Patch>(\"Prefix\")));\n", "            if (ConfigManager.rocketBoostToggle.value)\n                harmonyTweaks.Patch(GetMethod<Explosion>(\"Collide\"), prefix: GetHarmonyMethod(GetMethod<Explosion_Collide_Patch>(\"Prefix\")));\n\n            if (ConfigManager.rocketGrabbingToggle.value)\n                harmonyTweaks.Patch(GetMethod<HookArm>(\"FixedUpdate\"), prefix: GetHarmonyMethod(GetMethod<HookArm_FixedUpdate_Patch>(\"Prefix\")));\n\n            if (ConfigManager.orbStrikeToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Coin>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Coin_Start>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Punch>(\"BlastCheck\"), prefix: GetHarmonyMethod(GetMethod<Punch_BlastCheck>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Punch_BlastCheck>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Explosion>(\"Collide\"), prefix: GetHarmonyMethod(GetMethod<Explosion_Collide>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Coin>(\"DelayedReflectRevolver\"), postfix: GetHarmonyMethod(GetMethod<Coin_DelayedReflectRevolver>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<Coin>(\"ReflectRevolver\"), postfix: GetHarmonyMethod(GetMethod<Coin_ReflectRevolver>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<Coin_ReflectRevolver>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Grenade>(\"Explode\"), prefix: GetHarmonyMethod(GetMethod<Grenade_Explode>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Grenade_Explode>(\"Postfix\")));\n                \n                harmonyTweaks.Patch(GetMethod<EnemyIdentifier>(\"DeliverDamage\"), prefix: GetHarmonyMethod(GetMethod<EnemyIdentifier_DeliverDamage>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<EnemyIdentifier_DeliverDamage>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<RevolverBeam>(\"ExecuteHits\"), postfix: GetHarmonyMethod(GetMethod<RevolverBeam_ExecuteHits>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<RevolverBeam_ExecuteHits>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<RevolverBeam>(\"HitSomething\"), postfix: GetHarmonyMethod(GetMethod<RevolverBeam_HitSomething>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<RevolverBeam_HitSomething>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<RevolverBeam>(\"Start\"), prefix: GetHarmonyMethod(GetMethod<RevolverBeam_Start>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Cannonball>(\"Explode\"), prefix: GetHarmonyMethod(GetMethod<Cannonball_Explode>(\"Prefix\")));\n\n                harmonyTweaks.Patch(GetMethod<Explosion>(\"Collide\"), prefix: GetHarmonyMethod(GetMethod<Explosion_CollideOrbital>(\"Prefix\")));\n            }\n            ", "            if(ConfigManager.chargedRevRegSpeedMulti.value != 1)\n                harmonyTweaks.Patch(GetMethod<Revolver>(\"Update\"), prefix: GetHarmonyMethod(GetMethod<Revolver_Update>(\"Prefix\")));\n            if(ConfigManager.coinRegSpeedMulti.value != 1 || ConfigManager.sharpshooterRegSpeedMulti.value != 1\n                || ConfigManager.railcannonRegSpeedMulti.value != 1 || ConfigManager.rocketFreezeRegSpeedMulti.value != 1\n                || ConfigManager.rocketCannonballRegSpeedMulti.value != 1 || ConfigManager.nailgunAmmoRegSpeedMulti.value != 1\n                || ConfigManager.sawAmmoRegSpeedMulti.value != 1)\n                harmonyTweaks.Patch(GetMethod<WeaponCharges>(\"Charge\"), prefix: GetHarmonyMethod(GetMethod<WeaponCharges_Charge>(\"Prefix\")));\n            if(ConfigManager.nailgunHeatsinkRegSpeedMulti.value != 1 || ConfigManager.sawHeatsinkRegSpeedMulti.value != 1)\n                harmonyTweaks.Patch(GetMethod<Nailgun>(\"Update\"), prefix: GetHarmonyMethod(GetMethod<NailGun_Update>(\"Prefix\")));\n            if(ConfigManager.staminaRegSpeedMulti.value != 1)\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"Update\"), prefix: GetHarmonyMethod(GetMethod<NewMovement_Update>(\"Prefix\")));\n            ", "            if(ConfigManager.staminaRegSpeedMulti.value != 1)\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"Update\"), prefix: GetHarmonyMethod(GetMethod<NewMovement_Update>(\"Prefix\")));\n            \n            if(ConfigManager.playerHpDeltaToggle.value || ConfigManager.maxPlayerHp.value != 100 || ConfigManager.playerHpSupercharge.value != 200 || ConfigManager.whiplashHardDamageCap.value != 50 || ConfigManager.whiplashHardDamageSpeed.value != 1)\n            {\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"GetHealth\"), prefix: GetHarmonyMethod(GetMethod<NewMovement_GetHealth>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"SuperCharge\"), prefix: GetHarmonyMethod(GetMethod<NewMovement_SuperCharge>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"Respawn\"), postfix: GetHarmonyMethod(GetMethod<NewMovement_Respawn>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<NewMovement_Start>(\"Postfix\")));\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"GetHurt\"), transpiler: GetHarmonyMethod(GetMethod<NewMovement_GetHurt>(\"Transpiler\")));\n                harmonyTweaks.Patch(GetMethod<HookArm>(\"FixedUpdate\"), transpiler: GetHarmonyMethod(GetMethod<HookArm_FixedUpdate>(\"Transpiler\")));\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"ForceAntiHP\"), transpiler: GetHarmonyMethod(GetMethod<NewMovement_ForceAntiHP>(\"Transpiler\")));\n            }\n\n            // ADDME\n            harmonyTweaks.Patch(GetMethod<Revolver>(\"Shoot\"), transpiler: GetHarmonyMethod(GetMethod<Revolver_Shoot>(\"Transpiler\")));\n            harmonyTweaks.Patch(GetMethod<Shotgun>(\"Shoot\"), transpiler: GetHarmonyMethod(GetMethod<Shotgun_Shoot>(\"Transpiler\")), prefix: GetHarmonyMethod(GetMethod<Shotgun_Shoot>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Shotgun_Shoot>(\"Postfix\")));\n            harmonyTweaks.Patch(GetMethod<Shotgun>(\"ShootSinks\"), transpiler: GetHarmonyMethod(GetMethod<Shotgun_ShootSinks>(\"Transpiler\")));\n            harmonyTweaks.Patch(GetMethod<Nailgun>(\"Shoot\"), transpiler: GetHarmonyMethod(GetMethod<Nailgun_Shoot>(\"Transpiler\")));\n            harmonyTweaks.Patch(GetMethod<Nailgun>(\"SuperSaw\"), transpiler: GetHarmonyMethod(GetMethod<Nailgun_SuperSaw>(\"Transpiler\")));\n            ", "            if (ConfigManager.hardDamagePercent.normalizedValue != 1)\n                harmonyTweaks.Patch(GetMethod<NewMovement>(\"GetHurt\"), prefix: GetHarmonyMethod(GetMethod<NewMovement_GetHurt>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<NewMovement_GetHurt>(\"Postfix\")));\n\n            harmonyTweaks.Patch(GetMethod<HealthBar>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<HealthBar_Start>(\"Postfix\")));\n\t\t\tharmonyTweaks.Patch(GetMethod<HealthBar>(\"Update\"), transpiler: GetHarmonyMethod(GetMethod<HealthBar_Update>(\"Transpiler\")));\n\t\t\tforeach (HealthBarTracker hb in HealthBarTracker.instances)\n            {\n                if (hb != null)\n                    hb.SetSliderRange();\n            }\n            \n            harmonyTweaks.Patch(GetMethod<Harpoon>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Harpoon_Start>(\"Postfix\")));", "            if(ConfigManager.screwDriverHomeToggle.value)\n                harmonyTweaks.Patch(GetMethod<Harpoon>(\"Punched\"), postfix: GetHarmonyMethod(GetMethod<Harpoon_Punched>(\"Postfix\")));\n            if(ConfigManager.screwDriverSplitToggle.value)\n                harmonyTweaks.Patch(GetMethod<Harpoon>(\"OnTriggerEnter\"), prefix: GetHarmonyMethod(GetMethod<Harpoon_OnTriggerEnter_Patch>(\"Prefix\")));\n        }\n\n        private static void PatchAllMemes()\n        {\n            if (ConfigManager.enrageSfxToggle.value)\n                harmonyTweaks.Patch(GetMethod<EnrageEffect>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<EnrageEffect_Start>(\"Postfix\")));\n            ", "            if (ConfigManager.enrageSfxToggle.value)\n                harmonyTweaks.Patch(GetMethod<EnrageEffect>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<EnrageEffect_Start>(\"Postfix\")));\n            \n            if(ConfigManager.funnyDruidKnightSFXToggle.value)\n            {\n                harmonyTweaks.Patch(GetMethod<Mandalore>(\"FullBurst\"), postfix: GetHarmonyMethod(GetMethod<DruidKnight_FullBurst>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<DruidKnight_FullBurst>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Mandalore>(\"FullerBurst\"), prefix: GetHarmonyMethod(GetMethod<DruidKnight_FullerBurst>(\"Prefix\")));\n                harmonyTweaks.Patch(GetMethod<Drone>(\"Explode\"), prefix: GetHarmonyMethod(GetMethod<Drone_Explode>(\"Prefix\")), postfix: GetHarmonyMethod(GetMethod<Drone_Explode>(\"Postfix\")));\n            }\n\n            if (ConfigManager.fleshObamiumToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<FleshObamium_Start>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<FleshObamium_Start>(\"Prefix\")));", "            if (ConfigManager.fleshObamiumToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<FleshObamium_Start>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<FleshObamium_Start>(\"Prefix\")));\n            if (ConfigManager.obamapticonToggle.value)\n                harmonyTweaks.Patch(GetMethod<FleshPrison>(\"Start\"), postfix: GetHarmonyMethod(GetMethod<Obamapticon_Start>(\"Postfix\")), prefix: GetHarmonyMethod(GetMethod<Obamapticon_Start>(\"Prefix\")));\n        }\n\n        public static bool methodsPatched = false;\n        \n        public static void ScenePatchCheck()\n        {\n            if(methodsPatched && !ultrapainDifficulty)\n            {\n                harmonyTweaks.UnpatchSelf();\n                methodsPatched = false;\n            }", "        public static void ScenePatchCheck()\n        {\n            if(methodsPatched && !ultrapainDifficulty)\n            {\n                harmonyTweaks.UnpatchSelf();\n                methodsPatched = false;\n            }\n            else if(!methodsPatched && ultrapainDifficulty)\n            {\n                PatchAll();\n            }\n        }\n        ", "        public static void PatchAll()\n        {\n            harmonyTweaks.UnpatchSelf();\n            methodsPatched = false;\n\n            if (!ultrapainDifficulty)\n                return;\n\n            if(realUltrapainDifficulty && ConfigManager.discordRichPresenceToggle.value)\n                harmonyTweaks.Patch(GetMethod<DiscordController>(\"SendActivity\"), prefix: GetHarmonyMethod(GetMethod<DiscordController_SendActivity_Patch>(\"Prefix\")));\n            if (realUltrapainDifficulty && ConfigManager.steamRichPresenceToggle.value)\n                harmonyTweaks.Patch(GetMethod<SteamFriends>(\"SetRichPresence\"), prefix: GetHarmonyMethod(GetMethod<SteamFriends_SetRichPresence_Patch>(\"Prefix\")));\n\n            PatchAllEnemies();\n            PatchAllPlayers();\n            PatchAllMemes();\n            methodsPatched = true;\n        }\n", "            if(realUltrapainDifficulty && ConfigManager.discordRichPresenceToggle.value)\n                harmonyTweaks.Patch(GetMethod<DiscordController>(\"SendActivity\"), prefix: GetHarmonyMethod(GetMethod<DiscordController_SendActivity_Patch>(\"Prefix\")));\n            if (realUltrapainDifficulty && ConfigManager.steamRichPresenceToggle.value)\n                harmonyTweaks.Patch(GetMethod<SteamFriends>(\"SetRichPresence\"), prefix: GetHarmonyMethod(GetMethod<SteamFriends_SetRichPresence_Patch>(\"Prefix\")));\n\n            PatchAllEnemies();\n            PatchAllPlayers();\n            PatchAllMemes();\n            methodsPatched = true;\n        }\n", "        public static string workingPath;\n        public static string workingDir;\n\n        public static AssetBundle bundle;\n        public static AudioClip druidKnightFullAutoAud;\n        public static AudioClip druidKnightFullerAutoAud;\n        public static AudioClip druidKnightDeathAud;\n        public static AudioClip enrageAudioCustom;\n        public static GameObject fleshObamium;\n        public static GameObject obamapticon;\n", "        public static GameObject fleshObamium;\n        public static GameObject obamapticon;\n\n        public void Awake()\n        {\n            instance = this;\n            workingPath = Assembly.GetExecutingAssembly().Location;\n            workingDir = Path.GetDirectoryName(workingPath);\n\n            Logger.LogInfo($\"Working path: {workingPath}, Working dir: {workingDir}\");\n            try\n            {\n                bundle = AssetBundle.LoadFromFile(Path.Combine(workingDir, \"ultrapain\"));\n                druidKnightFullAutoAud = bundle.LoadAsset<AudioClip>(\"assets/ultrapain/druidknight/fullauto.wav\");\n                druidKnightFullerAutoAud = bundle.LoadAsset<AudioClip>(\"assets/ultrapain/druidknight/fullerauto.wav\");\n                druidKnightDeathAud = bundle.LoadAsset<AudioClip>(\"assets/ultrapain/druidknight/death.wav\");\n                enrageAudioCustom = bundle.LoadAsset<AudioClip>(\"assets/ultrapain/sfx/enraged.wav\");\n                fleshObamium = bundle.LoadAsset<GameObject>(\"assets/ultrapain/fleshprison/fleshobamium.prefab\");\n                obamapticon = bundle.LoadAsset<GameObject>(\"assets/ultrapain/panopticon/obamapticon.prefab\");\n            }", "            catch (Exception e)\n            {\n                Logger.LogError($\"Could not load the asset bundle:\\n{e}\");\n            }\n\n            // DEBUG\n            /*string logPath = Path.Combine(Environment.CurrentDirectory, \"log.txt\");\n            Logger.LogInfo($\"Saving to {logPath}\");\n            List<string> assetPaths = new List<string>()\n            {\n                \"fonts.bundle\",\n                \"videos.bundle\",\n                \"shaders.bundle\",\n                \"particles.bundle\",\n                \"materials.bundle\",\n                \"animations.bundle\",\n                \"prefabs.bundle\",\n                \"physicsmaterials.bundle\",\n                \"models.bundle\",\n                \"textures.bundle\",\n            };\n", "            //using (FileStream log = File.Open(logPath, FileMode.OpenOrCreate, FileAccess.Write))\n            //{\n                foreach(string assetPath in assetPaths)\n                {\n                    Logger.LogInfo($\"Attempting to load {assetPath}\");\n                    AssetBundle bundle = AssetBundle.LoadFromFile(Path.Combine(bundlePath, assetPath));\n                    bundles.Add(bundle);\n                    //foreach (string name in bundle.GetAllAssetNames())\n                    //{\n                    //    string line = $\"[{bundle.name}][{name}]\\n\";\n                    //    log.Write(Encoding.ASCII.GetBytes(line), 0, line.Length);\n                    //}\n                    bundle.LoadAllAssets();\n                }\n            //}\n            */\n\n            // Plugin startup logic \n            Logger.LogInfo($\"Plugin {PluginInfo.PLUGIN_GUID} is loaded!\");\n\n            harmonyTweaks = new Harmony(PLUGIN_GUID + \"_tweaks\");\n            harmonyBase = new Harmony(PLUGIN_GUID + \"_base\");\n            harmonyBase.Patch(GetMethod<DifficultySelectButton>(\"SetDifficulty\"), postfix: GetHarmonyMethod(GetMethod<DifficultySelectPatch>(\"Postfix\")));\n            harmonyBase.Patch(GetMethod<DifficultyTitle>(\"Check\"), postfix: GetHarmonyMethod(GetMethod<DifficultyTitle_Check_Patch>(\"Postfix\")));\n            harmonyBase.Patch(typeof(PrefsManager).GetConstructor(new Type[0]), postfix: GetHarmonyMethod(GetMethod<PrefsManager_Ctor>(\"Postfix\")));\n            harmonyBase.Patch(GetMethod<PrefsManager>(\"EnsureValid\"), prefix: GetHarmonyMethod(GetMethod<PrefsManager_EnsureValid>(\"Prefix\")));\n            harmonyBase.Patch(GetMethod<Grenade>(\"Explode\"), prefix: new HarmonyMethod(GetMethod<GrenadeExplosionOverride>(\"Prefix\")), postfix: new HarmonyMethod(GetMethod<GrenadeExplosionOverride>(\"Postfix\")));\n            LoadPrefabs();\n            ConfigManager.Initialize();\n\n            SceneManager.activeSceneChanged += OnSceneChange;\n        }\n    }\n", "    public static class Tools\n    {\n        private static Transform _target;\n        private static Transform target { get\n            {\n                if(_target == null)\n                    _target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n                return _target;\n            }\n        }\n", "        public static Vector3 PredictPlayerPosition(float speedMod, Collider enemyCol = null)\n        {\n            Vector3 projectedPlayerPos;\n\n            if (MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude == 0f)\n            {\n                return target.position;\n            }\n            RaycastHit raycastHit;\n            if (enemyCol != null && Physics.Raycast(target.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity(), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.35f / speedMod, 4096, QueryTriggerInteraction.Collide) && raycastHit.collider == enemyCol)\n            {\n                projectedPlayerPos = target.position;\n            }", "            if (enemyCol != null && Physics.Raycast(target.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity(), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.35f / speedMod, 4096, QueryTriggerInteraction.Collide) && raycastHit.collider == enemyCol)\n            {\n                projectedPlayerPos = target.position;\n            }\n            else if (Physics.Raycast(target.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity(), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.35f / speedMod, LayerMaskDefaults.Get(LMD.EnvironmentAndBigEnemies), QueryTriggerInteraction.Collide))\n            {\n                projectedPlayerPos = raycastHit.point;\n            }\n            else\n            {\n                projectedPlayerPos = target.position + MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity() * 0.35f / speedMod;\n                projectedPlayerPos = new Vector3(projectedPlayerPos.x, target.transform.position.y + (target.transform.position.y - projectedPlayerPos.y) * 0.5f, projectedPlayerPos.z);\n            }\n\n            return projectedPlayerPos;\n        }\n    }\n\n    // Asset destroyer tracker\n    /*[HarmonyPatch(typeof(UnityEngine.Object), nameof(UnityEngine.Object.Destroy), new Type[] { typeof(UnityEngine.Object) })]", "    public class TempClass1\n    {\n        static void Postfix(UnityEngine.Object __0)\n        {\n            if (__0 != null && __0 == Plugin.homingProjectile)\n            {\n                System.Diagnostics.StackTrace t = new System.Diagnostics.StackTrace();\n                Debug.LogError(\"Projectile destroyed\");\n                Debug.LogError(t.ToString());\n                throw new Exception(\"Attempted to destroy proj\");\n            }\n        }\n    }\n\n    [HarmonyPatch(typeof(UnityEngine.Object), nameof(UnityEngine.Object.Destroy), new Type[] { typeof(UnityEngine.Object), typeof(float) })]", "    public class TempClass2\n    {\n        static void Postfix(UnityEngine.Object __0)\n        {\n            if (__0 != null && __0 == Plugin.homingProjectile)\n            {\n                System.Diagnostics.StackTrace t = new System.Diagnostics.StackTrace();\n                Debug.LogError(\"Projectile destroyed\");\n                Debug.LogError(t.ToString());\n                throw new Exception(\"Attempted to destroy proj\");\n            }\n        }\n    }\n\n    [HarmonyPatch(typeof(UnityEngine.Object), nameof(UnityEngine.Object.DestroyImmediate), new Type[] { typeof(UnityEngine.Object) })]", "    public class TempClass3\n    {\n        static void Postfix(UnityEngine.Object __0)\n        {\n            if (__0 != null && __0 == Plugin.homingProjectile)\n            {\n                System.Diagnostics.StackTrace t = new System.Diagnostics.StackTrace();\n                Debug.LogError(\"Projectile destroyed\");\n                Debug.LogError(t.ToString());\n                throw new Exception(\"Attempted to destroy proj\");\n            }\n        }\n    }\n\n    [HarmonyPatch(typeof(UnityEngine.Object), nameof(UnityEngine.Object.DestroyImmediate), new Type[] { typeof(UnityEngine.Object), typeof(bool) })]", "    public class TempClass4\n    {\n        static void Postfix(UnityEngine.Object __0)\n        {\n            if (__0 != null && __0 == Plugin.homingProjectile)\n            {\n                System.Diagnostics.StackTrace t = new System.Diagnostics.StackTrace();\n                Debug.LogError(\"Projectile destroyed\");\n                Debug.LogError(t.ToString());\n                throw new Exception(\"Attempted to destroy proj\");\n            }\n        }\n    }*/\n}\n"]}
{"filename": "Ultrapain/Patches/StreetCleaner.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class StreetCleaner_Start_Patch\n    {\n        static void Postfix(Streetcleaner __instance, ref EnemyIdentifier ___eid)\n        {\n            ___eid.weakPoint = null;\n        }\n    }\n\n    /*[HarmonyPatch(typeof(Streetcleaner))]\n    [HarmonyPatch(\"StartFire\")]", "    class StreetCleaner_StartFire_Patch\n    {\n        static void Postfix(Streetcleaner __instance, ref EnemyIdentifier ___eid)\n        {\n            __instance.CancelInvoke(\"StartDamaging\");\n            __instance.CancelInvoke(\"StopFire\");\n            __instance.Invoke(\"StartDamaging\", 0.1f);\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(Streetcleaner))]\n    [HarmonyPatch(\"Update\")]", "    class StreetCleaner_Update_Patch\n    {\n        static bool cancelStartFireInvoke = false;\n\n        static bool Prefix(Streetcleaner __instance, ref bool ___attacking)\n        {\n            cancelStartFireInvoke = !___attacking;\n            return true;\n        }\n\n        static void Postfix(Streetcleaner __instance, ref EnemyIdentifier ___eid)\n        {", "            if(__instance.IsInvoking(\"StartFire\") && cancelStartFireInvoke)\n            {\n                __instance.CancelInvoke(\"StartFire\");\n                __instance.Invoke(\"StartFire\", 0.1f);\n            }\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(Streetcleaner))]\n    [HarmonyPatch(\"Dodge\")]\n    class StreetCleaner_Dodge_Patch\n    {\n        static bool didDodge = false;\n\n        static bool Prefix(Streetcleaner __instance, ref float ___dodgeCooldown)\n        {\n            didDodge = !__instance.dead && ___dodgeCooldown == 0;\n            return true;\n        }\n\n        static void Postfix(Streetcleaner __instance, ref float ___dodgeCooldown)\n        {", "    class StreetCleaner_Dodge_Patch\n    {\n        static bool didDodge = false;\n\n        static bool Prefix(Streetcleaner __instance, ref float ___dodgeCooldown)\n        {\n            didDodge = !__instance.dead && ___dodgeCooldown == 0;\n            return true;\n        }\n\n        static void Postfix(Streetcleaner __instance, ref float ___dodgeCooldown)\n        {", "            if(didDodge)\n                ___dodgeCooldown = UnityEngine.Random.Range(0f, 1f);\n        }\n    }*/\n\n    class BulletCheck_OnTriggerEnter_Patch\n    {\n        static void Postfix(BulletCheck __instance, Collider __0/*, EnemyIdentifier ___eid*/)\n        {\n            if (!(__instance.type == CheckerType.Streetcleaner && __0.gameObject.layer == 14))\n                return;\n\n            Grenade grn = __0.GetComponent<Grenade>();", "            if (!(__instance.type == CheckerType.Streetcleaner && __0.gameObject.layer == 14))\n                return;\n\n            Grenade grn = __0.GetComponent<Grenade>();\n            if (grn != null)\n            {\n                grn.enemy = true;\n                grn.CanCollideWithPlayer(true);\n\n                // OLD PREDICTION\n                /*Rigidbody rb = __0.GetComponent<Rigidbody>();\n                float magnitude = rb.velocity.magnitude;\n\n                //float distance = Vector3.Distance(MonoSingleton<PlayerTracker>.Instance.gameObject.transform.position, __0.transform.position);\n                float distance = Vector3.Distance(MonoSingleton<PlayerTracker>.Instance.gameObject.transform.position, __0.transform.position);\n                Vector3 predictedPosition = MonoSingleton<PlayerTracker>.Instance.PredictPlayerPosition(1.0f);\n\n                float velocity = Mathf.Clamp(distance, Mathf.Max(magnitude - 5.0f, 0), magnitude + 5);\n\n                __0.transform.LookAt(predictedPosition);\n                rb.velocity = __0.transform.forward * velocity;*/\n\n                // NEW PREDICTION\n                Vector3 predictedPosition = Tools.PredictPlayerPosition(1);\n                __0.transform.LookAt(predictedPosition);\n                Rigidbody rb = __0.GetComponent<Rigidbody>();\n                rb.velocity = Vector3.zero;\n                rb.AddForce(__0.transform.forward * 20000f /* * ___eid.totalSpeedModifier */);\n            }\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/DruidKnight.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.Audio;\n\nnamespace Ultrapain.Patches\n{\n    class DruidKnight_FullBurst\n    {\n        public static AudioMixer mixer;", "    class DruidKnight_FullBurst\n    {\n        public static AudioMixer mixer;\n        public static float offset = 0.205f;\n\n        class StateInfo\n        {\n            public GameObject oldProj;\n            public GameObject tempProj;\n        }\n\n        static bool Prefix(Mandalore __instance, out StateInfo __state)\n        {\n            __state = new StateInfo() { oldProj = __instance.fullAutoProjectile };\n\n            GameObject obj = new GameObject();\n            obj.transform.position = __instance.transform.position;\n            AudioSource aud = obj.AddComponent<AudioSource>();\n            aud.playOnAwake = false;\n            aud.clip = Plugin.druidKnightFullAutoAud;\n            aud.time = offset;\n            aud.Play();\n\n            GameObject proj = GameObject.Instantiate(__instance.fullAutoProjectile, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n            proj.GetComponent<AudioSource>().enabled = false;\n            __state.tempProj = __instance.fullAutoProjectile = proj;\n\n            return true;\n        }\n\n        static void Postfix(Mandalore __instance, StateInfo __state)\n        {\n            __instance.fullAutoProjectile = __state.oldProj;", "            public GameObject tempProj;\n        }\n\n        static bool Prefix(Mandalore __instance, out StateInfo __state)\n        {\n            __state = new StateInfo() { oldProj = __instance.fullAutoProjectile };\n\n            GameObject obj = new GameObject();\n            obj.transform.position = __instance.transform.position;\n            AudioSource aud = obj.AddComponent<AudioSource>();\n            aud.playOnAwake = false;\n            aud.clip = Plugin.druidKnightFullAutoAud;\n            aud.time = offset;\n            aud.Play();\n\n            GameObject proj = GameObject.Instantiate(__instance.fullAutoProjectile, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n            proj.GetComponent<AudioSource>().enabled = false;\n            __state.tempProj = __instance.fullAutoProjectile = proj;\n\n            return true;\n        }\n\n        static void Postfix(Mandalore __instance, StateInfo __state)\n        {\n            __instance.fullAutoProjectile = __state.oldProj;", "            if (__state.tempProj != null)\n                GameObject.Destroy(__state.tempProj);\n        }\n    }\n\n    class DruidKnight_FullerBurst\n    {\n        public static float offset = 0.5f;\n\n        static bool Prefix(Mandalore __instance, int ___shotsLeft)\n        {", "            if (___shotsLeft != 40)\n                return true;\n\n            GameObject obj = new GameObject();\n            obj.transform.position = __instance.transform.position;\n            AudioSource aud = obj.AddComponent<AudioSource>();\n            aud.playOnAwake = false;\n            aud.clip = Plugin.druidKnightFullerAutoAud;\n            aud.time = offset;\n            aud.Play();\n            return true;\n        }\n    }\n", "    class Drone_Explode\n    {\n        static bool Prefix(bool ___exploded, out bool __state)\n        {\n            __state = ___exploded;\n            return true;\n        }\n\n        public static float offset = 0.2f;\n        static void Postfix(Drone __instance, bool ___exploded, bool __state)\n        {", "        public static float offset = 0.2f;\n        static void Postfix(Drone __instance, bool ___exploded, bool __state)\n        {\n            if (__state)\n                return;\n\n            if (!___exploded || __instance.gameObject.GetComponent<Mandalore>() == null)\n                return;\n\n            GameObject obj = new GameObject();\n            obj.transform.position = __instance.transform.position;\n            AudioSource aud = obj.AddComponent<AudioSource>();\n            aud.playOnAwake = false;\n            aud.clip = Plugin.druidKnightDeathAud;\n            aud.time = offset;\n            aud.Play();\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Schism.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.ComponentModel;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class ZombieProjectile_ShootProjectile_Patch\n    {\n        static void Postfix(ZombieProjectiles __instance, ref GameObject ___currentProjectile, Animator ___anim, EnemyIdentifier ___eid)\n        {\n            /*Projectile proj = ___currentProjectile.GetComponent<Projectile>();\n            proj.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n            proj.speed *= speedMultiplier;\n            proj.turningSpeedMultiplier = turningSpeedMultiplier;\n            proj.damage = damage;*/\n\n            bool horizontal = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name == \"ShootHorizontal\";\n            void AddProperties(GameObject obj)\n            {\n                Projectile component = obj.GetComponent<Projectile>();\n                component.safeEnemyType = EnemyType.Schism;\n                component.speed *= 1.25f;\n                component.speed *= ___eid.totalSpeedModifier;\n                component.damage *= ___eid.totalDamageModifier;\n            }\n", "            if (horizontal)\n            {\n                float degreePerIteration = ConfigManager.schismSpreadAttackAngle.value / ConfigManager.schismSpreadAttackCount.value;\n                float currentDegree = degreePerIteration;\n                for (int i = 0; i < ConfigManager.schismSpreadAttackCount.value; i++)\n                {\n                    GameObject downProj = GameObject.Instantiate(___currentProjectile);\n                    downProj.transform.position += -downProj.transform.up;\n                    downProj.transform.Rotate(new Vector3(-currentDegree, 0, 0), Space.Self);\n\n                    GameObject upProj = GameObject.Instantiate(___currentProjectile);\n                    upProj.transform.position += upProj.transform.up;\n                    upProj.transform.Rotate(new Vector3(currentDegree, 0, 0), Space.Self);\n\n                    currentDegree += degreePerIteration;\n                    AddProperties(downProj);\n                    AddProperties(upProj);\n                }\n            }\n            else\n            {\n                float degreePerIteration = ConfigManager.schismSpreadAttackAngle.value / ConfigManager.schismSpreadAttackCount.value;\n                float currentDegree = degreePerIteration;", "                for (int i = 0; i < ConfigManager.schismSpreadAttackCount.value; i++)\n                {\n                    GameObject leftProj = GameObject.Instantiate(___currentProjectile);\n                    leftProj.transform.position += -leftProj.transform.right;\n                    leftProj.transform.Rotate(new Vector3(0, -currentDegree, 0), Space.Self);\n\n                    GameObject rightProj = GameObject.Instantiate(___currentProjectile);\n                    rightProj.transform.position += rightProj.transform.right;\n                    rightProj.transform.Rotate(new Vector3(0, currentDegree, 0), Space.Self);\n\n                    currentDegree += degreePerIteration;\n                    AddProperties(leftProj);\n                    AddProperties(rightProj);\n                }\n            }\n        }\n    }\n\n    /*[HarmonyPatch(typeof(ZombieProjectiles), \"Start\")]", "    class ZombieProjectile_Start_Patch\n    {\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Schism)\n                return;\n\n            __instance.projectile = Plugin.homingProjectile;\n            __instance.decProjectile = Plugin.decorativeProjectile2;\n        }\n    }*/\n}\n"]}
{"filename": "Ultrapain/Patches/Panopticon.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.UI;", "using UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.UIElements;\n\nnamespace Ultrapain.Patches\n{\n    class Panopticon_Start\n    {\n        static void Postfix(FleshPrison __instance)\n        {\n            if (__instance.altVersion)\n                __instance.onFirstHeal = new UltrakillEvent();\n        }\n    }\n", "            if (__instance.altVersion)\n                __instance.onFirstHeal = new UltrakillEvent();\n        }\n    }\n\n    class Obamapticon_Start\n    {\n        static bool Prefix(FleshPrison __instance)\n        {\n            if (!__instance.altVersion)\n                return true;\n", "            if (!__instance.altVersion)\n                return true;\n\n            if (__instance.eid == null)\n                __instance.eid = __instance.GetComponent<EnemyIdentifier>();\n            __instance.eid.overrideFullName = ConfigManager.obamapticonName.value;\n            return true;\n        }\n\n        static void Postfix(FleshPrison __instance)\n        {", "            if (!__instance.altVersion)\n                return;\n\n            GameObject obamapticon = GameObject.Instantiate(Plugin.obamapticon, __instance.transform);\n            obamapticon.transform.parent = __instance.transform.Find(\"FleshPrison2/Armature/FP2_Root/Head_Root\");\n            obamapticon.transform.localScale = new Vector3(15.4f, 15.4f, 15.4f);\n            obamapticon.transform.localPosition = Vector3.zero;\n            obamapticon.transform.localRotation = Quaternion.identity;\n\n            obamapticon.layer = 24;\n\n            __instance.transform.Find(\"FleshPrison2/FleshPrison2_Head\").GetComponent<SkinnedMeshRenderer>().enabled = false;\n", "            if (__instance.bossHealth != null)\n            {\n                __instance.bossHealth.bossName = ConfigManager.obamapticonName.value;\n                if (__instance.bossHealth.bossBar != null)\n                {\n                    BossHealthBarTemplate temp = __instance.bossHealth.bossBar.GetComponent<BossHealthBarTemplate>();\n                    temp.bossNameText.text = ConfigManager.obamapticonName.value;\n                    foreach (Text t in temp.textInstances)\n                        t.text = ConfigManager.obamapticonName.value;\n                }\n            }\n        }\n    }\n", "    class Panopticon_SpawnInsignia\n    {\n        static bool Prefix(FleshPrison __instance, ref bool ___inAction, Statue ___stat, float ___maxHealth, int ___difficulty,\n            ref float ___fleshDroneCooldown, EnemyIdentifier ___eid)\n        {\n            if (!__instance.altVersion)\n                return true;\n\n            ___inAction = false;\n            GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.insignia, MonoSingleton<PlayerTracker>.Instance.GetPlayer().position, Quaternion.identity);\n            Vector3 playerVelocity = MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity();\n            playerVelocity.y = 0f;", "            if (playerVelocity.magnitude > 0f)\n            {\n                gameObject.transform.LookAt(MonoSingleton<PlayerTracker>.Instance.GetPlayer().position + playerVelocity);\n            }\n            else\n            {\n                gameObject.transform.Rotate(Vector3.up * UnityEngine.Random.Range(0f, 360f), Space.Self);\n            }\n            gameObject.transform.Rotate(Vector3.right * 90f, Space.Self);\n            VirtueInsignia virtueInsignia;\n            if (gameObject.TryGetComponent<VirtueInsignia>(out virtueInsignia))\n            {\n                virtueInsignia.predictive = true;\n                virtueInsignia.noTracking = true;\n                virtueInsignia.otherParent = __instance.transform;", "            if (gameObject.TryGetComponent<VirtueInsignia>(out virtueInsignia))\n            {\n                virtueInsignia.predictive = true;\n                virtueInsignia.noTracking = true;\n                virtueInsignia.otherParent = __instance.transform;\n                if (___stat.health > ___maxHealth / 2f)\n                {\n                    virtueInsignia.charges = 2;\n                }\n                else\n                {\n                    virtueInsignia.charges = 3;\n                }", "                if (___difficulty == 3)\n                {\n                    virtueInsignia.charges++;\n                }\n                virtueInsignia.windUpSpeedMultiplier = 0.5f;\n                virtueInsignia.windUpSpeedMultiplier *= ___eid.totalSpeedModifier;\n                virtueInsignia.damage = Mathf.RoundToInt((float)virtueInsignia.damage * ___eid.totalDamageModifier);\n                virtueInsignia.target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n                virtueInsignia.predictiveVersion = null;\n                Light light = gameObject.AddComponent<Light>();\n                light.range = 30f;\n                light.intensity = 50f;\n            }", "            if (___difficulty >= 2)\n            {\n                gameObject.transform.localScale = new Vector3(8f, 2f, 8f);\n            }\n            else if (___difficulty == 1)\n            {\n                gameObject.transform.localScale = new Vector3(7f, 2f, 7f);\n            }\n            else\n            {\n                gameObject.transform.localScale = new Vector3(5f, 2f, 5f);\n            }\n            GoreZone componentInParent = __instance.GetComponentInParent<GoreZone>();", "            if (componentInParent)\n            {\n                gameObject.transform.SetParent(componentInParent.transform, true);\n            }\n            else\n            {\n                gameObject.transform.SetParent(__instance.transform, true);\n            }\n\n            // CUSTOM CODE HERE\n            GameObject xInsignia = GameObject.Instantiate(gameObject, gameObject.transform.position, gameObject.transform.rotation, gameObject.transform.parent);\n            GameObject zInsignia = GameObject.Instantiate(gameObject, gameObject.transform.position, gameObject.transform.rotation, gameObject.transform.parent);\n            \n            xInsignia.transform.Rotate(xInsignia.transform.right, 90f, Space.World);\n            zInsignia.transform.Rotate(zInsignia.transform.forward, 90f, Space.World);\n\n            Quaternion xRot = xInsignia.transform.rotation;\n            Quaternion yRot = gameObject.transform.rotation;\n            Quaternion zRot = zInsignia.transform.rotation;\n\n            RotateOnSpawn xInsigniaRotation = xInsignia.AddComponent<RotateOnSpawn>();\n            RotateOnSpawn zInsigniaRotation = zInsignia.AddComponent<RotateOnSpawn>();\n            RotateOnSpawn yInsigniaRotation = gameObject.AddComponent<RotateOnSpawn>();\n\n            xInsignia.transform.rotation = xInsigniaRotation.targetRotation = xRot;\n            gameObject.transform.rotation = yInsigniaRotation.targetRotation = yRot;\n            zInsignia.transform.rotation = zInsigniaRotation.targetRotation = zRot;\n\n            xInsignia.transform.localScale = new Vector3(xInsignia.transform.localScale.x * ConfigManager.panopticonAxisBeamSizeMulti.value, xInsignia.transform.localScale.y, xInsignia.transform.localScale.z * ConfigManager.panopticonAxisBeamSizeMulti.value);\n            zInsignia.transform.localScale = new Vector3(zInsignia.transform.localScale.x * ConfigManager.panopticonAxisBeamSizeMulti.value, zInsignia.transform.localScale.y, zInsignia.transform.localScale.z * ConfigManager.panopticonAxisBeamSizeMulti.value);\n", "            if (___fleshDroneCooldown < 1f)\n            {\n                ___fleshDroneCooldown = 1f;\n            }\n\n            return false;\n        }\n    }\n\n    class Panopticon_HomingProjectileAttack\n    {\n        static void Postfix(FleshPrison __instance, EnemyIdentifier ___eid)\n        {", "    class Panopticon_HomingProjectileAttack\n    {\n        static void Postfix(FleshPrison __instance, EnemyIdentifier ___eid)\n        {\n            if (!__instance.altVersion)\n                return;\n\n            GameObject obj = new GameObject();\n            obj.transform.position = __instance.transform.position + Vector3.up;\n            FleshPrisonRotatingInsignia flag = obj.AddComponent<FleshPrisonRotatingInsignia>();\n            flag.prison = __instance;\n            flag.damageMod = ___eid.totalDamageModifier;\n            flag.speedMod = ___eid.totalSpeedModifier;\n        }\n    }\n", "    class Panopticon_SpawnBlackHole\n    {\n        static void Postfix(FleshPrison __instance, EnemyIdentifier ___eid)\n        {\n            if (!__instance.altVersion)\n                return;\n\n            Vector3 vector = MonoSingleton<PlayerTracker>.Instance.PredictPlayerPosition(0.5f / ___eid.totalSpeedModifier);\n            GameObject gameObject = GameObject.Instantiate(Plugin.sisyphusDestroyExplosion, vector, Quaternion.identity);\n            GoreZone gz = __instance.GetComponentInParent<GoreZone>();\n            gameObject.transform.SetParent(gz == null ? __instance.transform : gz.transform);\n            LineRenderer componentInChildren = gameObject.GetComponentInChildren<LineRenderer>();", "            if (componentInChildren)\n            {\n                componentInChildren.SetPosition(0, vector);\n                componentInChildren.SetPosition(1, __instance.transform.position);\n            }\n            foreach (Explosion explosion in gameObject.GetComponentsInChildren<Explosion>())\n            {\n                explosion.speed *= ___eid.totalSpeedModifier;\n                explosion.damage = Mathf.RoundToInt((float)explosion.damage * ___eid.totalDamageModifier);\n                explosion.maxSize *= ___eid.totalDamageModifier;\n            }\n        }\n    }\n", "    class Panopticon_SpawnFleshDrones\n    {\n        struct StateInfo\n        {\n            public GameObject template;\n            public bool changedToEye;\n        }\n\n        static bool Prefix(FleshPrison __instance, int ___difficulty, int ___currentDrone, out StateInfo __state)\n        {\n            __state = new StateInfo();", "            if (!__instance.altVersion)\n                return true;\n\n            if (___currentDrone % 2 == 0)\n            {\n                __state.template = __instance.skullDrone;\n                __state.changedToEye = true;\n                __instance.skullDrone = __instance.fleshDrone;\n            }\n            else\n            {\n                __state.template = __instance.fleshDrone;\n                __state.changedToEye = false;\n                __instance.fleshDrone = __instance.skullDrone;\n            }\n\n            return true;\n        }\n\n        static void Postfix(FleshPrison __instance, StateInfo __state)\n        {", "            if (!__instance.altVersion)\n                return;\n\n            if (__state.changedToEye)\n                __instance.skullDrone = __state.template;\n            else\n                __instance.fleshDrone = __state.template;\n        }\n    }\n\n    class Panopticon_BlueProjectile\n    {", "    class Panopticon_BlueProjectile\n    {\n        public static void BlueProjectileSpawn(FleshPrison instance)\n        {\n            if (!instance.altVersion || !ConfigManager.panopticonBlueProjToggle.value)\n                return;\n\n            int count = ConfigManager.panopticonBlueProjCount.value;\n            float deltaAngle = 360f / (count + 1);\n            float currentAngle = deltaAngle;\n", "            for (int i = 0; i < count; i++)\n            {\n                GameObject proj = GameObject.Instantiate(Plugin.homingProjectile, instance.rotationBone.position + instance.rotationBone.up * 16f, instance.rotationBone.rotation);\n                proj.transform.position += proj.transform.forward * 5f;\n                proj.transform.RotateAround(instance.transform.position, Vector3.up, currentAngle);\n                currentAngle += deltaAngle;\n                Projectile comp = proj.GetComponent<Projectile>();\n                comp.safeEnemyType = EnemyType.FleshPanopticon;\n                comp.target = instance.target;\n                comp.damage = ConfigManager.panopticonBlueProjDamage.value * instance.eid.totalDamageModifier;\n                comp.turningSpeedMultiplier *= ConfigManager.panopticonBlueProjTurnSpeed.value;\n                comp.speed = ConfigManager.panopticonBlueProjInitialSpeed.value;\n            }\n        }\n\n        static MethodInfo m_Panopticon_BlueProjectile_BlueProjectileSpawn = typeof(Panopticon_BlueProjectile).GetMethod(\"BlueProjectileSpawn\", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static);\n        static MethodInfo m_GameObject_GetComponent_Projectile = typeof(GameObject).GetMethod(\"GetComponent\", new Type[0]).MakeGenericMethod(new Type[1] { typeof(Projectile) });\n\n        static IEnumerable Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Callvirt && code[i].OperandIs(m_GameObject_GetComponent_Projectile))\n                {\n                    i += 2;\n\n                    // Push instance reference\n                    code.Insert(i, new CodeInstruction(OpCodes.Ldarg_0));\n                    i += 1;\n                    // Call the method\n                    code.Insert(i, new CodeInstruction(OpCodes.Call, m_Panopticon_BlueProjectile_BlueProjectileSpawn));\n\n                    break;\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/DiscordController.cs", "chunked_list": ["\ufeffusing Discord;\nusing HarmonyLib;\nusing System.Text.RegularExpressions;\n\n\nnamespace Ultrapain.Patches\n{\n    class DiscordController_SendActivity_Patch\n    {\n        static bool Prefix(DiscordController __instance, ref Activity ___cachedActivity)\n        {", "            if (___cachedActivity.State != null && ___cachedActivity.State == \"DIFFICULTY: UKMD\")\n            {\n                Regex rich = new Regex(@\"<[^>]*>\");\n                string text = $\"DIFFICULTY: {ConfigManager.pluginName.value}\";\n                if (rich.IsMatch(text))\n                {\n                    ___cachedActivity.State = rich.Replace(text, string.Empty);\n                }\n                else\n                {\n                    ___cachedActivity.State = text;\n                }\n            }\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Virtue.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class Virtue_Start_Patch\n    {\n        static void Postfix(Drone __instance, ref EnemyIdentifier ___eid)\n        {\n            VirtueFlag flag = __instance.gameObject.AddComponent<VirtueFlag>();\n            flag.virtue = __instance;\n        }\n    }\n", "    class Virtue_Death_Patch\n    {\n        static bool Prefix(Drone __instance, ref EnemyIdentifier ___eid)\n        {\n            if(___eid.enemyType != EnemyType.Virtue)\n                return true;\n\n            __instance.GetComponent<VirtueFlag>().DestroyProjectiles();\n            return true;\n        }\n    }\n", "    class VirtueFlag : MonoBehaviour\n    {\n        public AudioSource lighningBoltSFX;\n        public GameObject ligtningBoltAud;\n        public Transform windupObj;\n        private EnemyIdentifier eid;\n        public Drone virtue;\n\n        public void Awake()\n        {\n            eid = GetComponent<EnemyIdentifier>();\n            ligtningBoltAud = Instantiate(Plugin.lighningBoltSFX, transform);\n            lighningBoltSFX = ligtningBoltAud.GetComponent<AudioSource>();\n        }\n", "        public void Awake()\n        {\n            eid = GetComponent<EnemyIdentifier>();\n            ligtningBoltAud = Instantiate(Plugin.lighningBoltSFX, transform);\n            lighningBoltSFX = ligtningBoltAud.GetComponent<AudioSource>();\n        }\n\n        public void SpawnLightningBolt()\n        {\n            LightningStrikeExplosive lightningStrikeExplosive = Instantiate(Plugin.lightningStrikeExplosiveSetup.gameObject, windupObj.transform.position, Quaternion.identity).GetComponent<LightningStrikeExplosive>();\n            lightningStrikeExplosive.safeForPlayer = false;\n            lightningStrikeExplosive.damageMultiplier = eid.totalDamageModifier * ((virtue.enraged)? ConfigManager.virtueEnragedLightningDamage.value : ConfigManager.virtueNormalLightningDamage.value);\n            ", "            if(windupObj != null)\n                Destroy(windupObj.gameObject);\n        }\n\n        public void DestroyProjectiles()\n        {\n            CancelInvoke(\"SpawnLightningBolt\");\n\n            if (windupObj != null)\n                Destroy(windupObj.gameObject);\n        }\n    }\n", "            if (windupObj != null)\n                Destroy(windupObj.gameObject);\n        }\n    }\n\n    class Virtue_SpawnInsignia_Patch\n    {\n        static bool Prefix(Drone __instance, ref EnemyIdentifier ___eid, ref int ___difficulty, ref Transform ___target, ref int ___usedAttacks)\n        {\n            if (___eid.enemyType != EnemyType.Virtue)\n                return true;\n\n            GameObject createInsignia(Drone __instance, ref EnemyIdentifier ___eid, ref int ___difficulty, ref Transform ___target, int damage, float lastMultiplier)\n            {\n                GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.projectile, ___target.transform.position, Quaternion.identity);\n                VirtueInsignia component = gameObject.GetComponent<VirtueInsignia>();\n                component.target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n                component.parentDrone = __instance;\n                component.hadParent = true;\n                component.damage = damage;\n                component.explosionLength *= lastMultiplier;\n                __instance.chargeParticle.Stop(false, ParticleSystemStopBehavior.StopEmittingAndClear);", "            if (___eid.enemyType != EnemyType.Virtue)\n                return true;\n\n            GameObject createInsignia(Drone __instance, ref EnemyIdentifier ___eid, ref int ___difficulty, ref Transform ___target, int damage, float lastMultiplier)\n            {\n                GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.projectile, ___target.transform.position, Quaternion.identity);\n                VirtueInsignia component = gameObject.GetComponent<VirtueInsignia>();\n                component.target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n                component.parentDrone = __instance;\n                component.hadParent = true;\n                component.damage = damage;\n                component.explosionLength *= lastMultiplier;\n                __instance.chargeParticle.Stop(false, ParticleSystemStopBehavior.StopEmittingAndClear);", "                if (__instance.enraged)\n                {\n                    component.predictive = true;\n                }\n                \n                /*if (___difficulty == 1)\n                {\n                    component.windUpSpeedMultiplier = 0.875f;\n                }\n                else if (___difficulty == 0)\n                {\n                    component.windUpSpeedMultiplier = 0.75f;\n                }*/\n", "                else if (___difficulty == 0)\n                {\n                    component.windUpSpeedMultiplier = 0.75f;\n                }*/\n\n                if (MonoSingleton<PlayerTracker>.Instance.playerType == PlayerType.Platformer)\n                {\n                    gameObject.transform.localScale *= 0.75f;\n                    component.windUpSpeedMultiplier *= 0.875f;\n                }\n                component.windUpSpeedMultiplier *= ___eid.totalSpeedModifier;\n                component.damage = Mathf.RoundToInt((float)component.damage * ___eid.totalDamageModifier);\n\n                return gameObject;\n            }\n", "            if (__instance.enraged && !ConfigManager.virtueTweakEnragedAttackToggle.value)\n                return true;\n            if (!__instance.enraged && !ConfigManager.virtueTweakNormalAttackToggle.value)\n                return true;\n\n            bool insignia = (__instance.enraged) ? ConfigManager.virtueEnragedAttackType.value == ConfigManager.VirtueAttackType.Insignia\n                : ConfigManager.virtueNormalAttackType.value == ConfigManager.VirtueAttackType.Insignia;\n\n            if (insignia)\n            {\n                bool xAxis = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaXtoggle.value : ConfigManager.virtueNormalInsigniaXtoggle.value;\n                bool yAxis = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaYtoggle.value : ConfigManager.virtueNormalInsigniaYtoggle.value;\n                bool zAxis = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaZtoggle.value : ConfigManager.virtueNormalInsigniaZtoggle.value;\n", "            if (insignia)\n            {\n                bool xAxis = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaXtoggle.value : ConfigManager.virtueNormalInsigniaXtoggle.value;\n                bool yAxis = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaYtoggle.value : ConfigManager.virtueNormalInsigniaYtoggle.value;\n                bool zAxis = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaZtoggle.value : ConfigManager.virtueNormalInsigniaZtoggle.value;\n\n                if (xAxis)\n                {\n                    GameObject obj = createInsignia(__instance, ref ___eid, ref ___difficulty, ref ___target,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaXdamage.value : ConfigManager.virtueNormalInsigniaXdamage.value,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaLastMulti.value : ConfigManager.virtueNormalInsigniaLastMulti.value);\n                    float size = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaXsize.value : ConfigManager.virtueNormalInsigniaXsize.value;\n                    obj.transform.localScale = new Vector3(size, obj.transform.localScale.y, size);\n                    obj.transform.Rotate(new Vector3(90f, 0, 0));\n                }", "                if (yAxis)\n                {\n                    GameObject obj = createInsignia(__instance, ref ___eid, ref ___difficulty, ref ___target,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaYdamage.value : ConfigManager.virtueNormalInsigniaYdamage.value,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaLastMulti.value : ConfigManager.virtueNormalInsigniaLastMulti.value);\n                    float size = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaYsize.value : ConfigManager.virtueNormalInsigniaYsize.value;\n                    obj.transform.localScale = new Vector3(size, obj.transform.localScale.y, size);\n                }\n                if (zAxis)\n                {\n                    GameObject obj = createInsignia(__instance, ref ___eid, ref ___difficulty, ref ___target,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaZdamage.value : ConfigManager.virtueNormalInsigniaZdamage.value,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaLastMulti.value : ConfigManager.virtueNormalInsigniaLastMulti.value);\n                    float size = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaZsize.value : ConfigManager.virtueNormalInsigniaZsize.value;\n                    obj.transform.localScale = new Vector3(size, obj.transform.localScale.y, size);\n                    obj.transform.Rotate(new Vector3(0, 0, 90f));\n                }\n            }\n            else\n            {\n                Vector3 predictedPos;", "                if (zAxis)\n                {\n                    GameObject obj = createInsignia(__instance, ref ___eid, ref ___difficulty, ref ___target,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaZdamage.value : ConfigManager.virtueNormalInsigniaZdamage.value,\n                        (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaLastMulti.value : ConfigManager.virtueNormalInsigniaLastMulti.value);\n                    float size = (__instance.enraged) ? ConfigManager.virtueEnragedInsigniaZsize.value : ConfigManager.virtueNormalInsigniaZsize.value;\n                    obj.transform.localScale = new Vector3(size, obj.transform.localScale.y, size);\n                    obj.transform.Rotate(new Vector3(0, 0, 90f));\n                }\n            }\n            else\n            {\n                Vector3 predictedPos;", "                if (___difficulty <= 1)\n                    predictedPos = MonoSingleton<PlayerTracker>.Instance.GetPlayer().position;\n                else\n                {\n                    Vector3 vector = new Vector3(MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().x, 0f, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().z);\n                    predictedPos = MonoSingleton<PlayerTracker>.Instance.GetPlayer().position + vector.normalized * Mathf.Min(vector.magnitude, 5.0f);\n                }\n\n                GameObject currentWindup = GameObject.Instantiate<GameObject>(Plugin.lighningStrikeWindup.gameObject, predictedPos, Quaternion.identity);\n                foreach (Follow follow in currentWindup.GetComponents<Follow>())\n                {", "                foreach (Follow follow in currentWindup.GetComponents<Follow>())\n                {\n                    if (follow.speed != 0f)\n                    {\n                        if (___difficulty >= 2)\n                        {\n                            follow.speed *= (float)___difficulty;\n                        }\n                        else if (___difficulty == 1)\n                        {\n                            follow.speed /= 2f;\n                        }\n                        else\n                        {\n                            follow.enabled = false;\n                        }\n                        follow.speed *= ___eid.totalSpeedModifier;\n                    }\n                }\n\n                VirtueFlag flag = __instance.GetComponent<VirtueFlag>();\n                flag.lighningBoltSFX.Play();\n                flag.windupObj = currentWindup.transform;\n                flag.Invoke(\"SpawnLightningBolt\", (__instance.enraged)? ConfigManager.virtueEnragedLightningDelay.value : ConfigManager.virtueNormalLightningDelay.value);\n            }\n\n            ___usedAttacks += 1;", "                        else if (___difficulty == 1)\n                        {\n                            follow.speed /= 2f;\n                        }\n                        else\n                        {\n                            follow.enabled = false;\n                        }\n                        follow.speed *= ___eid.totalSpeedModifier;\n                    }\n                }\n\n                VirtueFlag flag = __instance.GetComponent<VirtueFlag>();\n                flag.lighningBoltSFX.Play();\n                flag.windupObj = currentWindup.transform;\n                flag.Invoke(\"SpawnLightningBolt\", (__instance.enraged)? ConfigManager.virtueEnragedLightningDelay.value : ConfigManager.virtueNormalLightningDelay.value);\n            }\n\n            ___usedAttacks += 1;", "            if(___usedAttacks == 3)\n            {\n                __instance.Invoke(\"Enrage\", 3f / ___eid.totalSpeedModifier);\n            }\n\n            return false;\n        }\n\n        /*static void Postfix(Drone __instance, ref EnemyIdentifier ___eid, ref int ___difficulty, ref Transform ___target, bool __state)\n        {\n            if (!__state)\n                return;\n\n            GameObject createInsignia(Drone __instance, ref EnemyIdentifier ___eid, ref int ___difficulty, ref Transform ___target)\n            {\n                GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.projectile, ___target.transform.position, Quaternion.identity);\n                VirtueInsignia component = gameObject.GetComponent<VirtueInsignia>();\n                component.target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n                component.parentDrone = __instance;\n                component.hadParent = true;\n                __instance.chargeParticle.Stop(false, ParticleSystemStopBehavior.StopEmittingAndClear);", "            if (!__state)\n                return;\n\n            GameObject createInsignia(Drone __instance, ref EnemyIdentifier ___eid, ref int ___difficulty, ref Transform ___target)\n            {\n                GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.projectile, ___target.transform.position, Quaternion.identity);\n                VirtueInsignia component = gameObject.GetComponent<VirtueInsignia>();\n                component.target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n                component.parentDrone = __instance;\n                component.hadParent = true;\n                __instance.chargeParticle.Stop(false, ParticleSystemStopBehavior.StopEmittingAndClear);", "                if (__instance.enraged)\n                {\n                    component.predictive = true;\n                }\n                if (___difficulty == 1)\n                {\n                    component.windUpSpeedMultiplier = 0.875f;\n                }\n                else if (___difficulty == 0)\n                {\n                    component.windUpSpeedMultiplier = 0.75f;\n                }", "                else if (___difficulty == 0)\n                {\n                    component.windUpSpeedMultiplier = 0.75f;\n                }\n                if (MonoSingleton<PlayerTracker>.Instance.playerType == PlayerType.Platformer)\n                {\n                    gameObject.transform.localScale *= 0.75f;\n                    component.windUpSpeedMultiplier *= 0.875f;\n                }\n                component.windUpSpeedMultiplier *= ___eid.totalSpeedModifier;\n                component.damage = Mathf.RoundToInt((float)component.damage * ___eid.totalDamageModifier);\n\n                return gameObject;\n            }\n\n            GameObject xAxisInsignia = createInsignia(__instance, ref ___eid, ref ___difficulty, ref ___target);\n            xAxisInsignia.transform.Rotate(new Vector3(90, 0, 0));\n            xAxisInsignia.transform.localScale = new Vector3(xAxisInsignia.transform.localScale.x * horizontalInsigniaScale, xAxisInsignia.transform.localScale.y, xAxisInsignia.transform.localScale.z * horizontalInsigniaScale);\n            GameObject zAxisInsignia = createInsignia(__instance, ref ___eid, ref ___difficulty, ref ___target);\n            zAxisInsignia.transform.Rotate(new Vector3(0, 0, 90));\n            zAxisInsignia.transform.localScale = new Vector3(zAxisInsignia.transform.localScale.x * horizontalInsigniaScale, zAxisInsignia.transform.localScale.y, zAxisInsignia.transform.localScale.z * horizontalInsigniaScale);\n        }*/\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/HideousMass.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    public class HideousMassProjectile : MonoBehaviour\n    {\n        public float damageBuf = 1f;\n        public float speedBuf = 1f;\n    }\n", "        public float speedBuf = 1f;\n    }\n\n    public class Projectile_Explode_Patch \n    {\n        static void Postfix(Projectile __instance)\n        {\n            HideousMassProjectile flag = __instance.gameObject.GetComponent<HideousMassProjectile>();\n            if (flag == null)\n                return;\n\n            GameObject createInsignia(float size, int damage)\n            {\n                GameObject insignia = GameObject.Instantiate(Plugin.virtueInsignia, __instance.transform.position, Quaternion.identity);\n                insignia.transform.localScale = new Vector3(size, 1f, size);\n                VirtueInsignia comp = insignia.GetComponent<VirtueInsignia>();\n                comp.windUpSpeedMultiplier = ConfigManager.hideousMassInsigniaSpeed.value * flag.speedBuf;\n                comp.damage = (int)(damage * flag.damageBuf);\n                comp.predictive = false;\n                comp.hadParent = false;\n                comp.noTracking = true;\n\n                return insignia;\n            }\n", "            if (flag == null)\n                return;\n\n            GameObject createInsignia(float size, int damage)\n            {\n                GameObject insignia = GameObject.Instantiate(Plugin.virtueInsignia, __instance.transform.position, Quaternion.identity);\n                insignia.transform.localScale = new Vector3(size, 1f, size);\n                VirtueInsignia comp = insignia.GetComponent<VirtueInsignia>();\n                comp.windUpSpeedMultiplier = ConfigManager.hideousMassInsigniaSpeed.value * flag.speedBuf;\n                comp.damage = (int)(damage * flag.damageBuf);\n                comp.predictive = false;\n                comp.hadParent = false;\n                comp.noTracking = true;\n\n                return insignia;\n            }\n", "            if (ConfigManager.hideousMassInsigniaXtoggle.value)\n            {\n                GameObject insignia = createInsignia(ConfigManager.hideousMassInsigniaXsize.value, ConfigManager.hideousMassInsigniaXdamage.value);\n                insignia.transform.Rotate(new Vector3(0, 0, 90f));\n            }\n            if (ConfigManager.hideousMassInsigniaYtoggle.value)\n            {\n                GameObject insignia = createInsignia(ConfigManager.hideousMassInsigniaYsize.value, ConfigManager.hideousMassInsigniaYdamage.value);\n            }\n            if (ConfigManager.hideousMassInsigniaZtoggle.value)\n            {\n                GameObject insignia = createInsignia(ConfigManager.hideousMassInsigniaZsize.value, ConfigManager.hideousMassInsigniaZdamage.value);\n                insignia.transform.Rotate(new Vector3(90f, 0, 0));\n            }\n        }\n    }\n", "            if (ConfigManager.hideousMassInsigniaZtoggle.value)\n            {\n                GameObject insignia = createInsignia(ConfigManager.hideousMassInsigniaZsize.value, ConfigManager.hideousMassInsigniaZdamage.value);\n                insignia.transform.Rotate(new Vector3(90f, 0, 0));\n            }\n        }\n    }\n\n    public class HideousMassHoming\n    {\n        static bool Prefix(Mass __instance, EnemyIdentifier ___eid)\n        {\n            __instance.explosiveProjectile = GameObject.Instantiate(Plugin.hideousMassProjectile);\n            HideousMassProjectile flag = __instance.explosiveProjectile.AddComponent<HideousMassProjectile>();\n            flag.damageBuf = ___eid.totalDamageModifier;\n            flag.speedBuf = ___eid.totalSpeedModifier;\n            return true;\n        }\n\n        static void Postfix(Mass __instance)\n        {\n            GameObject.Destroy(__instance.explosiveProjectile);\n            __instance.explosiveProjectile = Plugin.hideousMassProjectile;\n        }\n    }\n}\n", "    public class HideousMassHoming\n    {\n        static bool Prefix(Mass __instance, EnemyIdentifier ___eid)\n        {\n            __instance.explosiveProjectile = GameObject.Instantiate(Plugin.hideousMassProjectile);\n            HideousMassProjectile flag = __instance.explosiveProjectile.AddComponent<HideousMassProjectile>();\n            flag.damageBuf = ___eid.totalDamageModifier;\n            flag.speedBuf = ___eid.totalSpeedModifier;\n            return true;\n        }\n\n        static void Postfix(Mass __instance)\n        {\n            GameObject.Destroy(__instance.explosiveProjectile);\n            __instance.explosiveProjectile = Plugin.hideousMassProjectile;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/V2First.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Linq;\nusing System.Reflection;\nusing ULTRAKILL.Cheats;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class V2FirstFlag : MonoBehaviour\n    {", "{\n    class V2FirstFlag : MonoBehaviour\n    {\n        public Collider v2collider;\n        public float punchCooldown = 0f;\n        public Transform targetGrenade;\n\n        void Update()\n        {\n            if (punchCooldown > 0)\n                punchCooldown = Mathf.MoveTowards(punchCooldown, 0f, Time.deltaTime);\n        }\n", "            if (punchCooldown > 0)\n                punchCooldown = Mathf.MoveTowards(punchCooldown, 0f, Time.deltaTime);\n        }\n\n        public void PunchShockwave()\n        {\n            GameObject blast = Instantiate(Plugin.blastwave, v2collider.bounds.center, Quaternion.identity);\n            blast.transform.LookAt(PlayerTracker.Instance.GetTarget());\n            blast.transform.position += blast.transform.forward * 2f;\n\n            Explosion exp = blast.GetComponentInChildren<Explosion>();", "            if (exp != null)\n            {\n                exp.enemy = true;\n                exp.damage = ConfigManager.v2FirstKnuckleBlasterExplosionDamage.value;\n                exp.maxSize = ConfigManager.v2FirstKnuckleBlasterSize.value;\n                exp.speed = ConfigManager.v2FirstKnuckleBlasterSpeed.value;\n                exp.hitterWeapon = \"\";\n                exp.harmless = false;\n                exp.playerDamageOverride = -1;\n                exp.canHit = AffectedSubjects.All;\n                exp.toIgnore.Add(EnemyType.V2);\n            }\n        }\n    }\n", "    class V2FirstUpdate\n    {\n        static MethodInfo ShootWeapon = typeof(V2).GetMethod(\"ShootWeapon\", BindingFlags.Instance | BindingFlags.NonPublic);\n        static MethodInfo SwitchWeapon = typeof(V2).GetMethod(\"SwitchWeapon\", BindingFlags.Instance | BindingFlags.NonPublic);\n        public static Transform targetGrenade;\n\n        static bool Prefix(V2 __instance, ref int ___currentWeapon, ref Transform ___overrideTarget, ref Rigidbody ___overrideTargetRb, ref float ___shootCooldown,\n            ref bool ___aboutToShoot, ref EnemyIdentifier ___eid, bool ___escaping)\n        {\n            if (__instance.secondEncounter)\n                return true;\n", "            if (__instance.secondEncounter)\n                return true;\n\n            if (!__instance.active || ___escaping || BlindEnemies.Blind)\n                return true;\n\n            V2FirstFlag flag = __instance.GetComponent<V2FirstFlag>();\n            if (flag == null)\n                return true;\n\n            float distanceToPlayer = Vector3.Distance(__instance.transform.position, PlayerTracker.Instance.GetTarget().transform.position);", "            if (ConfigManager.v2FirstKnuckleBlasterHitPlayerToggle.value && distanceToPlayer <= ConfigManager.v2FirstKnuckleBlasterHitPlayerMinDistance.value && flag.punchCooldown == 0)\n            {\n                Debug.Log(\"V2: Trying to punch\");\n                flag.punchCooldown = ConfigManager.v2FirstKnuckleBlasterCooldown.value;\n                NewMovement.Instance.GetHurt(ConfigManager.v2FirstKnuckleBlasterHitDamage.value, true, 1, false, false);\n                flag.Invoke(\"PunchShockwave\", 0.5f);\n            }\n\n            if (ConfigManager.v2FirstKnuckleBlasterDeflectShotgunToggle.value && flag.punchCooldown == 0)\n            {\n                Collider[] valid = Physics.OverlapSphere(flag.v2collider.bounds.center, 60f, 1 << 14, QueryTriggerInteraction.Collide);\n                Collider[] invalid = Physics.OverlapSphere(flag.v2collider.bounds.center, 50f, 1 << 14, QueryTriggerInteraction.Collide);", "            if (ConfigManager.v2FirstKnuckleBlasterDeflectShotgunToggle.value && flag.punchCooldown == 0)\n            {\n                Collider[] valid = Physics.OverlapSphere(flag.v2collider.bounds.center, 60f, 1 << 14, QueryTriggerInteraction.Collide);\n                Collider[] invalid = Physics.OverlapSphere(flag.v2collider.bounds.center, 50f, 1 << 14, QueryTriggerInteraction.Collide);\n                foreach (Collider col in valid.Where(col => Array.IndexOf(invalid, col) == -1))\n                {\n                    Projectile proj = col.gameObject.GetComponent<Projectile>();\n                    if (proj == null)\n                        continue;\n\n                    if (proj.playerBullet)\n                    {\n                        Vector3 v1 = flag.v2collider.bounds.center - proj.transform.position;\n                        Vector3 v2 = proj.transform.forward;", "                    if (proj.playerBullet)\n                    {\n                        Vector3 v1 = flag.v2collider.bounds.center - proj.transform.position;\n                        Vector3 v2 = proj.transform.forward;\n                        if (Vector3.Angle(v1, v2) <= 45f)\n                        {\n                            Debug.Log(\"V2: Trying to deflect projectiles\");\n                            flag.Invoke(\"PunchShockwave\", 0.5f);\n                            flag.punchCooldown = ConfigManager.v2FirstKnuckleBlasterCooldown.value;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // Core shooting", "            if (flag.targetGrenade == null && ConfigManager.v2FirstCoreSnipeToggle.value)\n            {\n                Transform closestGrenade = V2Utils.GetClosestGrenade();\n\n                if (closestGrenade != null)\n                {\n                    distanceToPlayer = Vector3.Distance(closestGrenade.position, PlayerTracker.Instance.GetTarget().position);\n                    float distanceToV2 = Vector3.Distance(closestGrenade.position, flag.v2collider.bounds.center);\n                    if (distanceToPlayer <= ConfigManager.v2FirstCoreSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2FirstCoreSnipeMinDistanceToV2.value)\n                    {\n                        flag.targetGrenade = closestGrenade;\n                        __instance.weapons[___currentWeapon].transform.GetChild(0).SendMessage(\"CancelAltCharge\", SendMessageOptions.DontRequireReceiver);", "                    if (distanceToPlayer <= ConfigManager.v2FirstCoreSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2FirstCoreSnipeMinDistanceToV2.value)\n                    {\n                        flag.targetGrenade = closestGrenade;\n                        __instance.weapons[___currentWeapon].transform.GetChild(0).SendMessage(\"CancelAltCharge\", SendMessageOptions.DontRequireReceiver);\n                        if (___currentWeapon != 0)\n                        {\n                            SwitchWeapon.Invoke(__instance, new object[1] { 0 });\n                        }\n                        __instance.CancelInvoke(\"ShootWeapon\");\n                        __instance.CancelInvoke(\"AltShootWeapon\");\n                        __instance.Invoke(\"ShootWeapon\", ConfigManager.v2FirstCoreSnipeReactionTime.value / ___eid.totalSpeedModifier);\n\n                        ___shootCooldown = 1f;\n                        ___aboutToShoot = true;\n\n                        Debug.Log(\"Preparing to fire for grenade\");\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class V2FirstShootWeapon\n    {\n        static MethodInfo RevolverBeamStart = typeof(RevolverBeam).GetMethod(\"Start\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n        static bool Prefix(V2 __instance, ref int ___currentWeapon)\n        {\n            if (__instance.secondEncounter)\n                return true;\n\n            V2FirstFlag flag = __instance.GetComponent<V2FirstFlag>();\n            if (flag == null)\n                return true;\n\n            // PISTOL", "            if (flag == null)\n                return true;\n\n            // PISTOL\n            if (___currentWeapon == 0 && ConfigManager.v2FirstCoreSnipeToggle.value)\n            {\n                Transform closestGrenade = (flag.targetGrenade == null)? V2Utils.GetClosestGrenade() : flag.targetGrenade;\n                if (closestGrenade != null)\n                {\n                    float distanceToPlayer = Vector3.Distance(closestGrenade.position, PlayerTracker.Instance.GetTarget().position);\n                    float distanceToV2 = Vector3.Distance(closestGrenade.position, flag.v2collider.bounds.center);", "                    if (distanceToPlayer <= ConfigManager.v2FirstCoreSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2FirstCoreSnipeMinDistanceToV2.value)\n                    {\n                        Debug.Log(\"Attempting to shoot the grenade\");\n                        GameObject revolverBeam = GameObject.Instantiate(Plugin.revolverBeam, __instance.transform.position + __instance.transform.forward, Quaternion.identity);\n                        revolverBeam.transform.LookAt(closestGrenade.position);\n                        if (revolverBeam.TryGetComponent<RevolverBeam>(out RevolverBeam comp))\n                        {\n                            comp.beamType = BeamType.Enemy;\n                            RevolverBeamStart.Invoke(comp, new object[0]);\n                        }\n\n                        __instance.ForceDodge(V2Utils.GetDirectionAwayFromTarget(flag.v2collider.bounds.center, closestGrenade.transform.position));\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class V2FirstStart\n    {\n        static void Postfix(V2 __instance, GameObject[] ___weapons)\n        {\n            if (__instance.secondEncounter)\n                return;\n\n            V2FirstFlag flag = __instance.gameObject.AddComponent<V2FirstFlag>();\n            flag.v2collider = __instance.GetComponent<Collider>();\n\n            EnemyRevolver rev = UnityUtils.GetComponentInChildrenRecursively<EnemyRevolver>(___weapons[0].transform);\n            V2CommonRevolverComp revComp;", "            if (ConfigManager.v2FirstSharpshooterToggle.value)\n                revComp = rev.gameObject.AddComponent<V2CommonRevolverComp>();\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/SwordsMachine.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.Security.Cryptography;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class SwordsMachineFlag : MonoBehaviour\n    {\n        public SwordsMachine sm;\n        public Animator anim;\n        public EnemyIdentifier eid;", "        public SwordsMachine sm;\n        public Animator anim;\n        public EnemyIdentifier eid;\n        public bool speedingUp = false;\n\n        private void ResetAnimSpeed()\n        {\n            if(anim.GetCurrentAnimatorStateInfo(0).IsName(\"Knockdown\"))\n            {\n                Invoke(\"ResetAnimSpeed\", 0.01f);\n                return;\n            }\n\n            Debug.Log(\"Resetting speed\");\n            speedingUp = false;\n            sm.SendMessage(\"SetSpeed\");\n        }\n", "        private void Awake()\n        {\n            anim = GetComponent<Animator>();\n            eid = GetComponent<EnemyIdentifier>();\n        }\n\n        public float speed = 1f;\n        private void Update()\n        {\n            if (speedingUp)\n            {", "            if (speedingUp)\n            {\n                if (anim == null)\n                {\n                    anim = sm.GetComponent<Animator>();\n                    if (anim == null)\n                    {\n                        Destroy(this);\n                        return;\n                    }\n                }\n                anim.speed = speed;\n            }\n        }\n    }\n", "    class SwordsMachine_Start\n    {\n        static void Postfix(SwordsMachine __instance)\n        {\n            SwordsMachineFlag flag = __instance.gameObject.AddComponent<SwordsMachineFlag>();\n            flag.sm = __instance;\n        }\n    }\n\n    class SwordsMachine_Knockdown_Patch\n    {\n        static bool Prefix(SwordsMachine __instance, bool __0)\n        {\n            __instance.Enrage();", "    class SwordsMachine_Knockdown_Patch\n    {\n        static bool Prefix(SwordsMachine __instance, bool __0)\n        {\n            __instance.Enrage();\n            if (!__0)\n                __instance.SwordCatch();\n\n            return false;\n        }\n    }\n", "    class SwordsMachine_Down_Patch\n    {\n        static bool Prefix(SwordsMachine __instance)\n        {\n            if (ConfigManager.swordsMachineSecondPhaseMode.value == ConfigManager.SwordsMachineSecondPhase.Skip && __instance.secondPhasePosTarget == null)\n                return false;\n            return true;\n        }\n\n        static void Postfix(SwordsMachine __instance, Animator ___anim, EnemyIdentifier ___eid)\n        {", "            if (ConfigManager.swordsMachineSecondPhaseMode.value != ConfigManager.SwordsMachineSecondPhase.SpeedUp || __instance.secondPhasePosTarget != null)\n                return;\n\n            SwordsMachineFlag flag = __instance.GetComponent<SwordsMachineFlag>();\n            if (flag == null)\n            {\n                flag = __instance.gameObject.AddComponent<SwordsMachineFlag>();\n                flag.sm = __instance;\n            }\n            flag.speedingUp = true;\n            flag.speed = (1f * ___eid.totalSpeedModifier) * ConfigManager.swordsMachineSecondPhaseSpeed.value;\n            ___anim.speed = flag.speed;\n\n            AnimatorClipInfo clipInfo = ___anim.GetCurrentAnimatorClipInfo(0)[0];\n            flag.Invoke(\"ResetAnimSpeed\", clipInfo.clip.length / flag.speed);\n        }\n    }\n", "    class SwordsMachine_EndFirstPhase_Patch\n    {\n        static bool Prefix(SwordsMachine __instance)\n        {\n            if (ConfigManager.swordsMachineSecondPhaseMode.value == ConfigManager.SwordsMachineSecondPhase.Skip && __instance.secondPhasePosTarget == null)\n                return false;\n            return true;\n        }\n\n        static void Postfix(SwordsMachine __instance, Animator ___anim, EnemyIdentifier ___eid)\n        {", "            if (ConfigManager.swordsMachineSecondPhaseMode.value != ConfigManager.SwordsMachineSecondPhase.SpeedUp || __instance.secondPhasePosTarget != null)\n                return;\n\n            SwordsMachineFlag flag = __instance.GetComponent<SwordsMachineFlag>();\n            if (flag == null)\n            {\n                flag = __instance.gameObject.AddComponent<SwordsMachineFlag>();\n                flag.sm = __instance;\n            }\n            flag.speedingUp = true;\n            flag.speed = (1f * ___eid.totalSpeedModifier) * ConfigManager.swordsMachineSecondPhaseSpeed.value;\n            ___anim.speed = flag.speed;\n\n            AnimatorClipInfo clipInfo = ___anim.GetCurrentAnimatorClipInfo(0)[0];\n            flag.Invoke(\"ResetAnimSpeed\", clipInfo.clip.length / flag.speed);\n        }\n    }\n", "    /*class SwordsMachine_SetSpeed_Patch\n    {\n        static bool Prefix(SwordsMachine __instance, ref Animator ___anim)\n        {\n            if (___anim == null)\n                ___anim = __instance.GetComponent<Animator>();\n\n            SwordsMachineFlag flag = __instance.GetComponent<SwordsMachineFlag>();\n            if (flag == null || !flag.speedingUp)\n                return true;\n\n            return false;\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(SwordsMachine))]\n    [HarmonyPatch(\"Down\")]", "            if (flag == null || !flag.speedingUp)\n                return true;\n\n            return false;\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(SwordsMachine))]\n    [HarmonyPatch(\"Down\")]\n    class SwordsMachine_Down_Patch\n    {\n        static void Postfix(SwordsMachine __instance, ref Animator ___anim, ref Machine ___mach)\n        {\n            ___anim.Play(\"Knockdown\", 0, Plugin.SwordsMachineKnockdownTimeNormalized);\n\n            __instance.CancelInvoke(\"CheckLoop\");\n            ___mach.health = ___mach.symbiote.health;\n            __instance.downed = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(SwordsMachine))]\n    [HarmonyPatch(\"CheckLoop\")]", "    class SwordsMachine_Down_Patch\n    {\n        static void Postfix(SwordsMachine __instance, ref Animator ___anim, ref Machine ___mach)\n        {\n            ___anim.Play(\"Knockdown\", 0, Plugin.SwordsMachineKnockdownTimeNormalized);\n\n            __instance.CancelInvoke(\"CheckLoop\");\n            ___mach.health = ___mach.symbiote.health;\n            __instance.downed = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(SwordsMachine))]\n    [HarmonyPatch(\"CheckLoop\")]", "    class SwordsMachine_CheckLoop_Patch\n    {\n        static bool Prefix(SwordsMachine __instance)\n        {\n            return false;\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(SwordsMachine))]\n    [HarmonyPatch(\"ShootGun\")]\n    class SwordsMachine_ShootGun_Patch\n    {\n        static bool Prefix(SwordsMachine __instance)\n        {", "    class SwordsMachine_ShootGun_Patch\n    {\n        static bool Prefix(SwordsMachine __instance)\n        {\n            if(UnityEngine.Random.RandomRangeInt(0, 2) == 1)\n            {\n                GameObject grn = GameObject.Instantiate(Plugin.shotgunGrenade.gameObject, __instance.transform.position, __instance.transform.rotation);\n                grn.transform.position += grn.transform.forward * 0.5f + grn.transform.up * 0.5f;\n\n                Grenade grnComp = grn.GetComponent<Grenade>();\n                grnComp.enemy = true;\n                grnComp.CanCollideWithPlayer(true);\n\n                Vector3 playerPosition = MonoSingleton<PlayerTracker>.Instance.gameObject.transform.position;\n                float distanceFromPlayer = Vector3.Distance(playerPosition, grn.transform.position);\n                Vector3 predictedPosition = MonoSingleton<PlayerTracker>.Instance.PredictPlayerPosition(distanceFromPlayer / 40);\n\n                grn.transform.LookAt(predictedPosition);\n                grn.GetComponent<Rigidbody>().maxAngularVelocity = 40;\n                grn.GetComponent<Rigidbody>().velocity = grn.transform.forward * 40;\n\n                return false;\n            }\n\n            return true;\n        }\n    }*/\n", "    class ThrownSword_Start_Patch\n    {\n        static void Postfix(ThrownSword __instance)\n        {\n            __instance.gameObject.AddComponent<ThrownSwordCollisionDetector>();\n        }\n    }\n\n    class ThrownSword_OnTriggerEnter_Patch\n    {\n        static void Postfix(ThrownSword __instance, Collider __0)\n        {", "    class ThrownSword_OnTriggerEnter_Patch\n    {\n        static void Postfix(ThrownSword __instance, Collider __0)\n        {\n            if (__0.gameObject.tag == \"Player\")\n            {\n                GameObject explosionObj = GameObject.Instantiate(Plugin.shotgunGrenade.gameObject.GetComponent<Grenade>().explosion, __0.gameObject.transform.position, __0.gameObject.transform.rotation);\n                foreach (Explosion explosion in explosionObj.GetComponentsInChildren<Explosion>())\n                {\n                    explosion.enemy = true;\n                }\n            }\n        }\n    }\n", "    class ThrownSwordCollisionDetector : MonoBehaviour\n    {\n        public bool exploded = false;\n\n        public void OnCollisionEnter(Collision other)\n        {\n            if (exploded)\n                return;\n\n            if (other.gameObject.layer != 24)\n            {\n                Debug.Log($\"Hit layer {other.gameObject.layer}\");\n                return;\n            }\n\n            exploded = true;\n\n            GameObject explosionObj = GameObject.Instantiate(Plugin.shotgunGrenade.gameObject.GetComponent<Grenade>().explosion, transform.position, transform.rotation);", "            if (other.gameObject.layer != 24)\n            {\n                Debug.Log($\"Hit layer {other.gameObject.layer}\");\n                return;\n            }\n\n            exploded = true;\n\n            GameObject explosionObj = GameObject.Instantiate(Plugin.shotgunGrenade.gameObject.GetComponent<Grenade>().explosion, transform.position, transform.rotation);\n            foreach (Explosion explosion in explosionObj.GetComponentsInChildren<Explosion>())\n            {\n                explosion.enemy = true;\n                explosion.damage = ConfigManager.swordsMachineExplosiveSwordDamage.value;\n                explosion.maxSize *= ConfigManager.swordsMachineExplosiveSwordSize.value;\n                explosion.speed *= ConfigManager.swordsMachineExplosiveSwordSize.value;\n            }\n\n            gameObject.GetComponent<ThrownSword>().Invoke(\"Return\", 0.1f);\n        }\n    }\n}\n", "            foreach (Explosion explosion in explosionObj.GetComponentsInChildren<Explosion>())\n            {\n                explosion.enemy = true;\n                explosion.damage = ConfigManager.swordsMachineExplosiveSwordDamage.value;\n                explosion.maxSize *= ConfigManager.swordsMachineExplosiveSwordSize.value;\n                explosion.speed *= ConfigManager.swordsMachineExplosiveSwordSize.value;\n            }\n\n            gameObject.GetComponent<ThrownSword>().Invoke(\"Return\", 0.1f);\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/PlayerStatTweaks.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing Mono.Cecil;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Text;\nusing UnityEngine;\n", "using UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    /*\n    u = initial, f = final, d = delta, s = speed multiplier\n\n    u = 40f * Time.deltaTime\n    f = 40f * S * Time.deltaTime\n    d = 40f * Time.deltaTime * (S - 1)", "    f = 40f * S * Time.deltaTime\n    d = 40f * Time.deltaTime * (S - 1)\n    revCharge += 40f * Time.deltaTime * (S - 1f) * (alt ? 0.5f : 1f)\n     */\n\n    class Revolver_Update\n    {\n        static bool Prefix(Revolver __instance)\n        {\n            if(__instance.gunVariation == 0 && __instance.pierceCharge < 100f)\n            {\n                __instance.pierceCharge = Mathf.Min(100f, __instance.pierceCharge + 40f * Time.deltaTime * (ConfigManager.chargedRevRegSpeedMulti.value - 1f) * (__instance.altVersion ? 0.5f : 1f));\n            }\n\n            return true;\n        }\n    }\n", "            if(__instance.gunVariation == 0 && __instance.pierceCharge < 100f)\n            {\n                __instance.pierceCharge = Mathf.Min(100f, __instance.pierceCharge + 40f * Time.deltaTime * (ConfigManager.chargedRevRegSpeedMulti.value - 1f) * (__instance.altVersion ? 0.5f : 1f));\n            }\n\n            return true;\n        }\n    }\n\n    public class Revolver_Shoot\n    {", "    public class Revolver_Shoot\n    {\n        public static void RevolverBeamEdit(RevolverBeam beam)\n        {\n            beam.damage -= beam.strongAlt ? 1.25f : 1f;\n            beam.damage += beam.strongAlt ? ConfigManager.revolverAltDamage.value : ConfigManager.revolverDamage.value;\n        }\n\n        public static void RevolverBeamSuperEdit(RevolverBeam beam)\n        {\n            if (beam.gunVariation == 0)\n            {\n                beam.damage -= beam.strongAlt ? 1.25f : 1f;\n                beam.damage += beam.strongAlt ? ConfigManager.chargedAltRevDamage.value : ConfigManager.chargedRevDamage.value;\n                beam.hitAmount = beam.strongAlt ? ConfigManager.chargedAltRevTotalHits.value : ConfigManager.chargedRevTotalHits.value;\n                beam.maxHitsPerTarget = beam.strongAlt ? ConfigManager.chargedAltRevMaxHitsPerTarget.value : ConfigManager.chargedRevMaxHitsPerTarget.value;\n            }", "        public static void RevolverBeamSuperEdit(RevolverBeam beam)\n        {\n            if (beam.gunVariation == 0)\n            {\n                beam.damage -= beam.strongAlt ? 1.25f : 1f;\n                beam.damage += beam.strongAlt ? ConfigManager.chargedAltRevDamage.value : ConfigManager.chargedRevDamage.value;\n                beam.hitAmount = beam.strongAlt ? ConfigManager.chargedAltRevTotalHits.value : ConfigManager.chargedRevTotalHits.value;\n                beam.maxHitsPerTarget = beam.strongAlt ? ConfigManager.chargedAltRevMaxHitsPerTarget.value : ConfigManager.chargedRevMaxHitsPerTarget.value;\n            }\n            else if (beam.gunVariation == 2)\n            {\n                beam.damage -= beam.strongAlt ? 1.25f : 1f;\n                beam.damage += beam.strongAlt ? ConfigManager.sharpshooterAltDamage.value : ConfigManager.sharpshooterDamage.value;\n                beam.maxHitsPerTarget = beam.strongAlt ? ConfigManager.sharpshooterAltMaxHitsPerTarget.value : ConfigManager.sharpshooterMaxHitsPerTarget.value;\n            }\n        }\n\n        static FieldInfo f_RevolverBeam_gunVariation = typeof(RevolverBeam).GetField(\"gunVariation\", UnityUtils.instanceFlag);\n        static MethodInfo m_Revolver_Shoot_RevolverBeamEdit = typeof(Revolver_Shoot).GetMethod(\"RevolverBeamEdit\", UnityUtils.staticFlag);\n        static MethodInfo m_Revolver_Shoot_RevolverBeamSuperEdit = typeof(Revolver_Shoot).GetMethod(\"RevolverBeamSuperEdit\", UnityUtils.staticFlag);\n        static MethodInfo m_GameObject_GetComponent_RevolverBeam = typeof(GameObject).GetMethod(\"GetComponent\", new Type[0], new ParameterModifier[0]).MakeGenericMethod(new Type[1] { typeof(RevolverBeam) });\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            object normalBeamLocalIndex = null;\n            object superBeamLocalIndex = null;\n\n            // Get local indexes of components for RevolverBeam references", "            else if (beam.gunVariation == 2)\n            {\n                beam.damage -= beam.strongAlt ? 1.25f : 1f;\n                beam.damage += beam.strongAlt ? ConfigManager.sharpshooterAltDamage.value : ConfigManager.sharpshooterDamage.value;\n                beam.maxHitsPerTarget = beam.strongAlt ? ConfigManager.sharpshooterAltMaxHitsPerTarget.value : ConfigManager.sharpshooterMaxHitsPerTarget.value;\n            }\n        }\n\n        static FieldInfo f_RevolverBeam_gunVariation = typeof(RevolverBeam).GetField(\"gunVariation\", UnityUtils.instanceFlag);\n        static MethodInfo m_Revolver_Shoot_RevolverBeamEdit = typeof(Revolver_Shoot).GetMethod(\"RevolverBeamEdit\", UnityUtils.staticFlag);\n        static MethodInfo m_Revolver_Shoot_RevolverBeamSuperEdit = typeof(Revolver_Shoot).GetMethod(\"RevolverBeamSuperEdit\", UnityUtils.staticFlag);\n        static MethodInfo m_GameObject_GetComponent_RevolverBeam = typeof(GameObject).GetMethod(\"GetComponent\", new Type[0], new ParameterModifier[0]).MakeGenericMethod(new Type[1] { typeof(RevolverBeam) });\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            object normalBeamLocalIndex = null;\n            object superBeamLocalIndex = null;\n\n            // Get local indexes of components for RevolverBeam references", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Callvirt && code[i].OperandIs(m_GameObject_GetComponent_RevolverBeam))\n                {\n                    object localIndex = ILUtils.GetLocalIndex(code[i + 1]);\n                    if (localIndex == null)\n                        continue;\n\n                    if (normalBeamLocalIndex == null)\n                    {\n                        normalBeamLocalIndex = localIndex;\n                    }\n                    else\n                    {\n                        superBeamLocalIndex = localIndex;\n                        break;\n                    }\n                }\n            }\n\n            Debug.Log($\"Normal beam index: {normalBeamLocalIndex}\");\n            Debug.Log($\"Super beam index: {superBeamLocalIndex}\");\n\n            // Modify normal beam", "                    if (normalBeamLocalIndex == null)\n                    {\n                        normalBeamLocalIndex = localIndex;\n                    }\n                    else\n                    {\n                        superBeamLocalIndex = localIndex;\n                        break;\n                    }\n                }\n            }\n\n            Debug.Log($\"Normal beam index: {normalBeamLocalIndex}\");\n            Debug.Log($\"Super beam index: {superBeamLocalIndex}\");\n\n            // Modify normal beam", "            for (int i = 3; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Stfld && code[i].OperandIs(f_RevolverBeam_gunVariation))\n                {\n                    object localIndex = ILUtils.GetLocalIndex(code[i - 3]);\n                    if (localIndex == null)\n                        continue;\n\n                    if (localIndex.Equals(normalBeamLocalIndex))\n                    {\n                        Debug.Log($\"Patching normal beam\");\n\n                        i += 1;\n                        code.Insert(i, ILUtils.LoadLocalInstruction(localIndex));\n                        i += 1;\n                        code.Insert(i, new CodeInstruction(OpCodes.Call, m_Revolver_Shoot_RevolverBeamEdit));\n                        break;\n                    }\n                }\n            }\n\n            // Modify super beam", "                    if (localIndex.Equals(normalBeamLocalIndex))\n                    {\n                        Debug.Log($\"Patching normal beam\");\n\n                        i += 1;\n                        code.Insert(i, ILUtils.LoadLocalInstruction(localIndex));\n                        i += 1;\n                        code.Insert(i, new CodeInstruction(OpCodes.Call, m_Revolver_Shoot_RevolverBeamEdit));\n                        break;\n                    }\n                }\n            }\n\n            // Modify super beam", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Stfld && code[i].OperandIs(f_RevolverBeam_gunVariation))\n                {\n                    object localIndex = ILUtils.GetLocalIndex(code[i - 3]);\n                    if (localIndex == null)\n                        continue;\n\n                    if (localIndex.Equals(superBeamLocalIndex))\n                    {\n                        Debug.Log($\"Patching super beam\");\n\n                        i += 1;\n                        code.Insert(i, ILUtils.LoadLocalInstruction(localIndex));\n                        i += 1;\n                        code.Insert(i, new CodeInstruction(OpCodes.Call, m_Revolver_Shoot_RevolverBeamSuperEdit));\n                        break;\n                    }\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n", "                    if (localIndex.Equals(superBeamLocalIndex))\n                    {\n                        Debug.Log($\"Patching super beam\");\n\n                        i += 1;\n                        code.Insert(i, ILUtils.LoadLocalInstruction(localIndex));\n                        i += 1;\n                        code.Insert(i, new CodeInstruction(OpCodes.Call, m_Revolver_Shoot_RevolverBeamSuperEdit));\n                        break;\n                    }\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n", "    public class Shotgun_Shoot\n    {\n        public static void ModifyShotgunPellet(Projectile proj, Shotgun shotgun, int primaryCharge)\n        {\n            if (shotgun.variation == 0)\n            {\n                proj.damage = ConfigManager.shotgunBlueDamagePerPellet.value;\n            }\n            else\n            {\n                if (primaryCharge == 0)\n                    proj.damage = ConfigManager.shotgunGreenPump1Damage.value;", "                if (primaryCharge == 0)\n                    proj.damage = ConfigManager.shotgunGreenPump1Damage.value;\n                else if (primaryCharge == 1)\n                    proj.damage = ConfigManager.shotgunGreenPump2Damage.value;\n                else if (primaryCharge == 2)\n                    proj.damage = ConfigManager.shotgunGreenPump3Damage.value;\n            }\n        }\n\n        public static void ModifyPumpExplosion(Explosion exp)\n        {\n            exp.damage = ConfigManager.shotgunGreenExplosionDamage.value;\n            exp.playerDamageOverride = ConfigManager.shotgunGreenExplosionPlayerDamage.value;\n            float sizeMulti = ConfigManager.shotgunGreenExplosionSize.value / 9f;\n            exp.maxSize *= sizeMulti;\n            exp.speed *= sizeMulti;\n            exp.speed *= ConfigManager.shotgunGreenExplosionSpeed.value;\n        }\n\n        static MethodInfo m_GameObject_GetComponent_Projectile = typeof(GameObject).GetMethod(\"GetComponent\", new Type[0], new ParameterModifier[0]).MakeGenericMethod(new Type[1] { typeof(Projectile) });\n        static MethodInfo m_GameObject_GetComponentsInChildren_Explosion = typeof(GameObject).GetMethod(\"GetComponentsInChildren\", new Type[0], new ParameterModifier[0]).MakeGenericMethod(new Type[1] { typeof(Explosion) });\n        static MethodInfo m_Shotgun_Shoot_ModifyShotgunPellet = typeof(Shotgun_Shoot).GetMethod(\"ModifyShotgunPellet\", UnityUtils.staticFlag);\n        static MethodInfo m_Shotgun_Shoot_ModifyPumpExplosion = typeof(Shotgun_Shoot).GetMethod(\"ModifyPumpExplosion\", UnityUtils.staticFlag);\n        static FieldInfo f_Shotgun_primaryCharge = typeof(Shotgun).GetField(\"primaryCharge\", UnityUtils.instanceFlag);\n        static FieldInfo f_Explosion_damage = typeof(Explosion).GetField(\"damage\", UnityUtils.instanceFlag);\n        \n        static bool Prefix(Shotgun __instance, int ___primaryCharge)\n        {", "        public static void ModifyPumpExplosion(Explosion exp)\n        {\n            exp.damage = ConfigManager.shotgunGreenExplosionDamage.value;\n            exp.playerDamageOverride = ConfigManager.shotgunGreenExplosionPlayerDamage.value;\n            float sizeMulti = ConfigManager.shotgunGreenExplosionSize.value / 9f;\n            exp.maxSize *= sizeMulti;\n            exp.speed *= sizeMulti;\n            exp.speed *= ConfigManager.shotgunGreenExplosionSpeed.value;\n        }\n\n        static MethodInfo m_GameObject_GetComponent_Projectile = typeof(GameObject).GetMethod(\"GetComponent\", new Type[0], new ParameterModifier[0]).MakeGenericMethod(new Type[1] { typeof(Projectile) });\n        static MethodInfo m_GameObject_GetComponentsInChildren_Explosion = typeof(GameObject).GetMethod(\"GetComponentsInChildren\", new Type[0], new ParameterModifier[0]).MakeGenericMethod(new Type[1] { typeof(Explosion) });\n        static MethodInfo m_Shotgun_Shoot_ModifyShotgunPellet = typeof(Shotgun_Shoot).GetMethod(\"ModifyShotgunPellet\", UnityUtils.staticFlag);\n        static MethodInfo m_Shotgun_Shoot_ModifyPumpExplosion = typeof(Shotgun_Shoot).GetMethod(\"ModifyPumpExplosion\", UnityUtils.staticFlag);\n        static FieldInfo f_Shotgun_primaryCharge = typeof(Shotgun).GetField(\"primaryCharge\", UnityUtils.instanceFlag);\n        static FieldInfo f_Explosion_damage = typeof(Explosion).GetField(\"damage\", UnityUtils.instanceFlag);\n        \n        static bool Prefix(Shotgun __instance, int ___primaryCharge)\n        {", "            if (__instance.variation == 0)\n            {\n                __instance.spread = ConfigManager.shotgunBlueSpreadAngle.value;\n            }\n            else\n            {\n                if (___primaryCharge == 0)\n                    __instance.spread = ConfigManager.shotgunGreenPump1Spread.value * 1.5f;\n                else if (___primaryCharge == 1)\n                    __instance.spread = ConfigManager.shotgunGreenPump2Spread.value;\n                else if (___primaryCharge == 2)\n                    __instance.spread = ConfigManager.shotgunGreenPump3Spread.value / 2f;\n            }\n\n            return true;\n        }\n\n        static void Postfix(Shotgun __instance)\n        {\n            __instance.spread = 10f;\n        }\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            CodeInstruction pelletStoreInst = new CodeInstruction(OpCodes.Stloc_0);\n            int pelletCodeIndex = 0;\n\n            // Find pellet local variable index", "                else if (___primaryCharge == 1)\n                    __instance.spread = ConfigManager.shotgunGreenPump2Spread.value;\n                else if (___primaryCharge == 2)\n                    __instance.spread = ConfigManager.shotgunGreenPump3Spread.value / 2f;\n            }\n\n            return true;\n        }\n\n        static void Postfix(Shotgun __instance)\n        {\n            __instance.spread = 10f;\n        }\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            CodeInstruction pelletStoreInst = new CodeInstruction(OpCodes.Stloc_0);\n            int pelletCodeIndex = 0;\n\n            // Find pellet local variable index", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldc_I4_S && code[i].OperandIs(12))\n                {\n                    if (ConfigManager.shotgunBluePelletCount.value > sbyte.MaxValue)\n                        code[i].opcode = OpCodes.Ldc_I4;\n                    code[i].operand = ConfigManager.shotgunBluePelletCount.value;\n                    i += 1;\n                    pelletCodeIndex = i;\n                    pelletStoreInst = code[i];\n                    break;\n                }\n            }\n\n            // Debug.Log($\"Pellet store instruction: {ILUtils.TurnInstToString(pelletStoreInst)}\");\n\n            // Modify pellet counts", "            for (int i = pelletCodeIndex + 1; i < code.Count; i++)\n            {\n                if (code[i].opcode == pelletStoreInst.opcode\n                    && (pelletStoreInst.operand == null ? true : pelletStoreInst.operand.Equals(code[i].operand))\n                    && ILUtils.IsConstI4LoadWithOperand(code[i - 1].opcode))\n                {\n                    int constIndex = i - 1;\n                    int pelletCount = ILUtils.GetI4LoadOperand(code[constIndex]);\n\n                    if (pelletCount == 10)\n                        pelletCount = ConfigManager.shotgunGreenPump1Count.value;", "                    if (pelletCount == 10)\n                        pelletCount = ConfigManager.shotgunGreenPump1Count.value;\n                    else if (pelletCount == 16)\n                        pelletCount = ConfigManager.shotgunGreenPump2Count.value;\n                    else if (pelletCount == 24)\n                        pelletCount = ConfigManager.shotgunGreenPump3Count.value;\n\n                    if (ILUtils.TryEfficientLoadI4(pelletCount, out OpCode efficientOpcode))\n                    {\n                        code[constIndex].operand = null;\n                        code[constIndex].opcode = efficientOpcode;\n                    }\n                    else\n                    {", "                        if (pelletCount > sbyte.MaxValue)\n                            code[constIndex].opcode = OpCodes.Ldc_I4;\n                        else\n                            code[constIndex].opcode = OpCodes.Ldc_I4_S;\n                        code[constIndex].operand = pelletCount;\n                    }\n                }\n            }\n\n            // Modify projectile damage\n            for (int i = 0; i < code.Count; i++)\n            {", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Callvirt && code[i].OperandIs(m_GameObject_GetComponent_Projectile))\n                {\n                    i += 1;\n                    // Duplicate component (arg 0)\n                    code.Insert(i, new CodeInstruction(OpCodes.Dup));\n                    i += 1;\n                    // Add instance to stack (arg 1)\n                    code.Insert(i, new CodeInstruction(OpCodes.Ldarg_0));\n                    i += 1;\n                    // Load instance then get primary field (arg 2)\n                    code.Insert(i, new CodeInstruction(OpCodes.Ldarg_0));\n                    i += 1;\n                    code.Insert(i, new CodeInstruction(OpCodes.Ldfld, f_Shotgun_primaryCharge));\n                    i += 1;\n                    // Call the static method\n                    code.Insert(i, new CodeInstruction(OpCodes.Call, m_Shotgun_Shoot_ModifyShotgunPellet));\n\n                    break;\n                }\n            }\n\n            // Modify pump explosion\n            int pumpExplosionIndex = 0;", "            while (code[pumpExplosionIndex].opcode != OpCodes.Callvirt && !code[pumpExplosionIndex].OperandIs(m_GameObject_GetComponentsInChildren_Explosion))\n                pumpExplosionIndex += 1;\n\n            for (int i = pumpExplosionIndex; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Stfld)\n                {\n                    if (code[i].OperandIs(f_Explosion_damage))\n                    {\n                        // Duplicate before damage assignment\n                        code.Insert(i - 1, new CodeInstruction(OpCodes.Dup));\n                        i += 2;\n\n                        // Argument 0 already loaded, call the method\n                        code.Insert(i, new CodeInstruction(OpCodes.Call, m_Shotgun_Shoot_ModifyPumpExplosion));\n\n                        // Stack is now clear\n\n                        break;\n                    }\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n\n    // Core eject", "    class Shotgun_ShootSinks\n    {\n        public static void ModifyCoreEject(GameObject core)\n        {\n            GrenadeExplosionOverride ovr = core.AddComponent<GrenadeExplosionOverride>();\n\n            ovr.normalMod = true;\n            ovr.normalDamage = (float)ConfigManager.shotgunCoreExplosionDamage.value / 35f;\n            ovr.normalSize = (float)ConfigManager.shotgunCoreExplosionSize.value / 6f * ConfigManager.shotgunCoreExplosionSpeed.value;\n            ovr.normalPlayerDamageOverride = ConfigManager.shotgunCoreExplosionPlayerDamage.value;\n\n            ovr.superMod = true;\n            ovr.superDamage = (float)ConfigManager.shotgunCoreExplosionDamage.value / 35f;\n            ovr.superSize = (float)ConfigManager.shotgunCoreExplosionSize.value / 6f * ConfigManager.shotgunCoreExplosionSpeed.value;\n            ovr.superPlayerDamageOverride = ConfigManager.shotgunCoreExplosionPlayerDamage.value;\n        }\n\n        static FieldInfo f_Grenade_sourceWeapon = typeof(Grenade).GetField(\"sourceWeapon\", UnityUtils.instanceFlag);\n        static MethodInfo m_Shotgun_ShootSinks_ModifyCoreEject = typeof(Shotgun_ShootSinks).GetMethod(\"ModifyCoreEject\", UnityUtils.staticFlag);\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Stfld && code[i].OperandIs(f_Grenade_sourceWeapon))\n                {\n                    i += 1;\n\n                    // Add arg 0\n                    code.Insert(i, new CodeInstruction(OpCodes.Dup));\n                    i += 1;\n                    // Call mod method\n                    code.Insert(i, new CodeInstruction(OpCodes.Call, m_Shotgun_ShootSinks_ModifyCoreEject));\n\n                    break;\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n", "    class Nailgun_Shoot\n    {\n        static FieldInfo f_Nailgun_heatSinks = typeof(Nailgun).GetField(\"heatSinks\", UnityUtils.instanceFlag);\n        static FieldInfo f_Nailgun_heatUp = typeof(Nailgun).GetField(\"heatUp\", UnityUtils.instanceFlag);\n        \n        public static void ModifyNail(Nailgun inst, GameObject nail)\n        {\n            Nail comp = nail.GetComponent<Nail>();\n\n            if (inst.altVersion)\n            {\n                // Blue saw launcher", "            if (inst.altVersion)\n            {\n                // Blue saw launcher\n                if (inst.variation == 1)\n                {\n                    comp.damage = ConfigManager.sawBlueDamage.value;\n                    comp.hitAmount = ConfigManager.sawBlueHitAmount.value;\n                }\n                // Green saw launcher\n                else\n                {\n                    comp.damage = ConfigManager.sawGreenDamage.value;\n                    float maxHit = ConfigManager.sawGreenHitAmount.value;\n                    float heatSinks = (float)f_Nailgun_heatSinks.GetValue(inst);\n                    float heatUp = (float)f_Nailgun_heatUp.GetValue(inst);\n", "                    if (heatSinks >= 1)\n                        comp.hitAmount = Mathf.Lerp(maxHit, Mathf.Max(1f, maxHit), (maxHit - 2f) * heatUp);\n                    else\n                        comp.hitAmount = 1f;\n                }\n            }\n            else\n            {\n                // Blue nailgun\n                if (inst.variation == 1)\n                {\n                    comp.damage = ConfigManager.nailgunBlueDamage.value;\n                }\n                else\n                {", "                if (inst.variation == 1)\n                {\n                    comp.damage = ConfigManager.nailgunBlueDamage.value;\n                }\n                else\n                {\n                    if (comp.heated)\n                        comp.damage = ConfigManager.nailgunGreenBurningDamage.value;\n                    else\n                        comp.damage = ConfigManager.nailgunGreenDamage.value;\n                }\n            }\n        }\n\n        static FieldInfo f_Nailgun_nail = typeof(Nailgun).GetField(\"nail\", UnityUtils.instanceFlag);\n        static MethodInfo m_Nailgun_Shoot_ModifyNail = typeof(Nailgun_Shoot).GetMethod(\"ModifyNail\", UnityUtils.staticFlag);\n        static MethodInfo m_Transform_set_forward = typeof(Transform).GetProperty(\"forward\", UnityUtils.instanceFlag).GetSetMethod();\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            CodeInstruction localObjectStoreInst = null;\n", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldfld && code[i].OperandIs(f_Nailgun_nail))\n                {\n                    for (; i < code.Count; i++)\n                        if (ILUtils.IsStoreLocalOpcode(code[i].opcode))\n                            break;\n\n                    localObjectStoreInst = code[i];\n                }\n            }\n\n            Debug.Log($\"Nail local reference: {ILUtils.TurnInstToString(localObjectStoreInst)}\");\n\n            int insertIndex = 0;", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Callvirt && code[i].OperandIs(m_Transform_set_forward))\n                {\n                    insertIndex = i + 1;\n                    break;\n                }\n            }\n\n            // Push instance reference\n            code.Insert(insertIndex, new CodeInstruction(OpCodes.Ldarg_0));\n            insertIndex += 1;\n            // Push local nail object\n            code.Insert(insertIndex, new CodeInstruction(ILUtils.GetLoadLocalFromStoreLocal(localObjectStoreInst.opcode), localObjectStoreInst.operand));\n            insertIndex += 1;\n            // Call the method\n            code.Insert(insertIndex, new CodeInstruction(OpCodes.Call, m_Nailgun_Shoot_ModifyNail));\n\n            return code.AsEnumerable();\n        }\n    }\n", "    class Nailgun_SuperSaw\n    {\n        public static void ModifySupersaw(GameObject supersaw)\n        {\n            Nail saw = supersaw.GetComponent<Nail>();\n\n            saw.damage = ConfigManager.sawGreenBurningDamage.value;\n            saw.hitAmount = ConfigManager.sawGreenBurningHitAmount.value;\n        }\n\n        static FieldInfo f_Nailgun_heatedNail = typeof(Nailgun).GetField(\"heatedNail\", UnityUtils.instanceFlag);\n        static MethodInfo m_Nailgun_SuperSaw_ModifySupersaw = typeof(Nailgun_SuperSaw).GetMethod(\"ModifySupersaw\", UnityUtils.staticFlag);\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            CodeInstruction localObjectStoreInst = null;\n", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldfld && code[i].OperandIs(f_Nailgun_heatedNail))\n                {\n                    for (; i < code.Count; i++)\n                        if (ILUtils.IsStoreLocalOpcode(code[i].opcode))\n                            break;\n\n                    localObjectStoreInst = code[i];\n                }\n            }\n\n            Debug.Log($\"Supersaw local reference: {ILUtils.TurnInstToString(localObjectStoreInst)}\");\n\n            int insertIndex = code.Count - 1;\n\n            // Push local nail object\n            code.Insert(insertIndex, new CodeInstruction(ILUtils.GetLoadLocalFromStoreLocal(localObjectStoreInst.opcode), localObjectStoreInst.operand));\n            insertIndex += 1;\n            // Call the method\n            code.Insert(insertIndex, new CodeInstruction(OpCodes.Call, m_Nailgun_SuperSaw_ModifySupersaw));\n\n            return code.AsEnumerable();\n        }\n    }\n", "    class NailGun_Update\n    {\n        static bool Prefix(Nailgun __instance, ref float ___heatSinks)\n        {\n            if(__instance.variation == 0)\n            {\n                float maxSinks = (__instance.altVersion ? 1f : 2f);\n                float multi = (__instance.altVersion ? ConfigManager.sawHeatsinkRegSpeedMulti.value : ConfigManager.nailgunHeatsinkRegSpeedMulti.value);\n                float rate = 0.125f;\n\n                if (___heatSinks < maxSinks && multi != 1)\n                    ___heatSinks = Mathf.Min(maxSinks, ___heatSinks + Time.deltaTime * rate * (multi - 1f));\n            }\n\n            return true;\n        }\n    }\n", "                if (___heatSinks < maxSinks && multi != 1)\n                    ___heatSinks = Mathf.Min(maxSinks, ___heatSinks + Time.deltaTime * rate * (multi - 1f));\n            }\n\n            return true;\n        }\n    }\n\n    class NewMovement_Update\n    {\n        static bool Prefix(NewMovement __instance, int ___difficulty)\n        {", "    class NewMovement_Update\n    {\n        static bool Prefix(NewMovement __instance, int ___difficulty)\n        {\n            if (__instance.boostCharge < 300f && !__instance.sliding && !__instance.slowMode)\n            {\n                float multi = 1f;\n                if (___difficulty == 1)\n                    multi = 1.5f;\n                else if (___difficulty == 0f)\n                    multi = 2f;\n\n                __instance.boostCharge = Mathf.Min(300f, __instance.boostCharge + Time.deltaTime * 70f * multi * (ConfigManager.staminaRegSpeedMulti.value - 1f));\n            }\n\n            return true;\n        }\n    }\n", "                else if (___difficulty == 0f)\n                    multi = 2f;\n\n                __instance.boostCharge = Mathf.Min(300f, __instance.boostCharge + Time.deltaTime * 70f * multi * (ConfigManager.staminaRegSpeedMulti.value - 1f));\n            }\n\n            return true;\n        }\n    }\n\n    class WeaponCharges_Charge\n    {\n        static bool Prefix(WeaponCharges __instance, float __0)\n        {", "    class WeaponCharges_Charge\n    {\n        static bool Prefix(WeaponCharges __instance, float __0)\n        {\n            if (__instance.rev1charge < 400f)\n                __instance.rev1charge = Mathf.Min(400f, __instance.rev1charge + 25f * __0 * (ConfigManager.coinRegSpeedMulti.value - 1f));\n            if (__instance.rev2charge < 300f)\n                __instance.rev2charge = Mathf.Min(300f, __instance.rev2charge + (__instance.rev2alt ? 35f : 15f) * __0 * (ConfigManager.sharpshooterRegSpeedMulti.value - 1f));\n\n            if(!__instance.naiAmmoDontCharge)\n            {", "            if(!__instance.naiAmmoDontCharge)\n            {\n                if (__instance.naiAmmo < 100f)\n                    __instance.naiAmmo = Mathf.Min(100f, __instance.naiAmmo + __0 * 3.5f * (ConfigManager.nailgunAmmoRegSpeedMulti.value - 1f)); ;\n                if (__instance.naiSaws < 10f)\n                    __instance.naiSaws = Mathf.Min(10f, __instance.naiSaws + __0 * 0.5f * (ConfigManager.sawAmmoRegSpeedMulti.value - 1f));\n            }\n\n            if (__instance.raicharge < 5f)\n                __instance.raicharge = Mathf.Min(5f, __instance.raicharge + __0 * 0.25f * (ConfigManager.railcannonRegSpeedMulti.value - 1f));\n            if (!__instance.rocketFrozen && __instance.rocketFreezeTime < 5f)\n                __instance.rocketFreezeTime = Mathf.Min(5f, __instance.rocketFreezeTime + __0 * 0.5f * (ConfigManager.rocketFreezeRegSpeedMulti.value - 1f));", "            if (__instance.raicharge < 5f)\n                __instance.raicharge = Mathf.Min(5f, __instance.raicharge + __0 * 0.25f * (ConfigManager.railcannonRegSpeedMulti.value - 1f));\n            if (!__instance.rocketFrozen && __instance.rocketFreezeTime < 5f)\n                __instance.rocketFreezeTime = Mathf.Min(5f, __instance.rocketFreezeTime + __0 * 0.5f * (ConfigManager.rocketFreezeRegSpeedMulti.value - 1f));\n            if (__instance.rocketCannonballCharge < 1f)\n                __instance.rocketCannonballCharge = Mathf.Min(1f, __instance.rocketCannonballCharge + __0 * 0.125f * (ConfigManager.rocketCannonballRegSpeedMulti.value - 1f));\n\n            return true;\n        }\n    }\n", "    class NewMovement_GetHurt\n    {\n        static bool Prefix(NewMovement __instance, out float __state)\n        {\n            __state = __instance.antiHp;\n            return true;\n        }\n\n        static void Postfix(NewMovement __instance, float __state)\n        {\n            float deltaAnti = __instance.antiHp - __state;", "            if (deltaAnti <= 0)\n                return;\n\n            deltaAnti *= ConfigManager.hardDamagePercent.normalizedValue;\n            __instance.antiHp = __state + deltaAnti;\n        }\n\n        static FieldInfo hpField = typeof(NewMovement).GetField(\"hp\");\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldfld && (FieldInfo)code[i].operand == hpField)\n                {\n                    i += 1;\n                    if (code[i].opcode == OpCodes.Ldc_I4_S)\n                    {\n                        code[i] = new CodeInstruction(OpCodes.Ldc_I4, (Int32)ConfigManager.maxPlayerHp.value);\n                    }\n                }\n                else if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == (Single)99f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)(ConfigManager.maxPlayerHp.value - 1));\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n", "                else if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == (Single)99f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)(ConfigManager.maxPlayerHp.value - 1));\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n\n    class HookArm_FixedUpdate\n    {\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n", "    class HookArm_FixedUpdate\n    {\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 66f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)(66f * (ConfigManager.maxPlayerHp.value / 100f) * ConfigManager.whiplashHardDamageSpeed.value));\n                }", "                if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 66f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)(66f * (ConfigManager.maxPlayerHp.value / 100f) * ConfigManager.whiplashHardDamageSpeed.value));\n                }\n                else if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 50f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)(ConfigManager.whiplashHardDamageCap.value));\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n", "    class NewMovement_ForceAntiHP\n    {\n        static FieldInfo hpField = typeof(NewMovement).GetField(\"hp\");\n\n        static IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n        {\n            List<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldfld && (FieldInfo)code[i].operand == hpField)\n                {\n                    i += 1;", "            for (int i = 0; i < code.Count; i++)\n            {\n                if (code[i].opcode == OpCodes.Ldfld && (FieldInfo)code[i].operand == hpField)\n                {\n                    i += 1;\n                    if (i < code.Count && code[i].opcode == OpCodes.Ldc_I4_S && (SByte)code[i].operand == (SByte)100)\n                    {\n                        code[i] = new CodeInstruction(OpCodes.Ldc_I4, (Int32)ConfigManager.maxPlayerHp.value);\n                    }\n                }\n                else if (code[i].opcode == OpCodes.Ldarg_1)\n                {\n                    i += 2;", "                else if (code[i].opcode == OpCodes.Ldarg_1)\n                {\n                    i += 2;\n                    if (i < code.Count && code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 99f)\n                    {\n                        code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)(ConfigManager.maxPlayerHp.value - 1));\n                    }\n                }\n                else if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 100f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)ConfigManager.maxPlayerHp.value);\n                }", "                else if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 100f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)ConfigManager.maxPlayerHp.value);\n                }\n                else if (code[i].opcode == OpCodes.Ldc_R4 && (Single)code[i].operand == 50f)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_R4, (Single)ConfigManager.maxPlayerHp.value / 2);\n                }\n                else if (code[i].opcode == OpCodes.Ldc_I4_S && (SByte)code[i].operand == (SByte)100)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_I4, (Int32)ConfigManager.maxPlayerHp.value);\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n", "                else if (code[i].opcode == OpCodes.Ldc_I4_S && (SByte)code[i].operand == (SByte)100)\n                {\n                    code[i] = new CodeInstruction(OpCodes.Ldc_I4, (Int32)ConfigManager.maxPlayerHp.value);\n                }\n            }\n\n            return code.AsEnumerable();\n        }\n    }\n\n    class NewMovement_GetHealth\n    {\n        static bool Prefix(NewMovement __instance, int __0, bool __1, ref AudioSource ___greenHpAud, Canvas ___fullHud)\n        {", "    class NewMovement_GetHealth\n    {\n        static bool Prefix(NewMovement __instance, int __0, bool __1, ref AudioSource ___greenHpAud, Canvas ___fullHud)\n        {\n            if (__instance.dead || __instance.exploded)\n                return false;\n\n            int maxHp = Mathf.RoundToInt(ConfigManager.maxPlayerHp.value - __instance.antiHp);\n            int maxDelta = maxHp - __instance.hp;\n            if (maxDelta <= 0)\n                return true;\n", "            if (maxDelta <= 0)\n                return true;\n\n            if (!__1 && __0 > 5 && MonoSingleton<PrefsManager>.Instance.GetBoolLocal(\"bloodEnabled\", false))\n            {\n                GameObject.Instantiate<GameObject>(__instance.scrnBlood, ___fullHud.transform);\n            }\n\n            __instance.hp = Mathf.Min(maxHp, __instance.hp + __0);\n            __instance.hpFlash.Flash(1f);\n", "            if (!__1 && __0 > 5)\n            {\n                if (___greenHpAud == null)\n                {\n                    ___greenHpAud = __instance.hpFlash.GetComponent<AudioSource>();\n                }\n                ___greenHpAud.Play();\n            }\n\n            return false;\n        }\n    }\n", "    class NewMovement_SuperCharge\n    {\n        static bool Prefix(NewMovement __instance)\n        {\n            __instance.hp = Mathf.Max(ConfigManager.maxPlayerHp.value, ConfigManager.playerHpSupercharge.value);\n            return false;\n        }\n    }\n\n    class NewMovement_Respawn\n    {\n        static void Postfix(NewMovement __instance)\n        {\n            __instance.hp = ConfigManager.maxPlayerHp.value;\n        }\n    }\n", "    class NewMovement_Respawn\n    {\n        static void Postfix(NewMovement __instance)\n        {\n            __instance.hp = ConfigManager.maxPlayerHp.value;\n        }\n    }\n\n    class NewMovement_DeltaHpComp : MonoBehaviour\n    {\n        public static NewMovement_DeltaHpComp instance;", "    class NewMovement_DeltaHpComp : MonoBehaviour\n    {\n        public static NewMovement_DeltaHpComp instance;\n        private NewMovement player;\n        private AudioSource hurtAud;\n\n        private bool levelMap = false;\n\n        private void Awake()\n        {\n            instance = this;\n            player = NewMovement.Instance;\n            hurtAud = player.hurtScreen.GetComponent<AudioSource>();\n            levelMap = SceneHelper.CurrentLevelNumber > 0;\n\n            UpdateEnabled();\n        }\n", "        private void Awake()\n        {\n            instance = this;\n            player = NewMovement.Instance;\n            hurtAud = player.hurtScreen.GetComponent<AudioSource>();\n            levelMap = SceneHelper.CurrentLevelNumber > 0;\n\n            UpdateEnabled();\n        }\n\n        public void UpdateEnabled()\n        {", "        public void UpdateEnabled()\n        {\n            if (!ConfigManager.playerHpDeltaToggle.value)\n                enabled = false;\n\n            if (SceneHelper.CurrentScene == \"uk_construct\")\n                enabled = ConfigManager.playerHpDeltaSandbox.value;\n            else if (SceneHelper.CurrentScene == \"Endless\")\n                enabled = ConfigManager.playerHpDeltaCybergrind.value;\n            else\n            {\n                enabled = SceneHelper.CurrentLevelNumber > 0;\n            }\n        }\n", "        public void ResetCooldown()\n        {\n            deltaCooldown = ConfigManager.playerHpDeltaDelay.value;\n        }\n\n        public float deltaCooldown = ConfigManager.playerHpDeltaDelay.value;\n        public void Update()\n        {\n            if (player.dead || !ConfigManager.playerHpDeltaToggle.value || !StatsManager.Instance.timer)\n            {\n                ResetCooldown();\n                return;\n            }\n", "            if (player.dead || !ConfigManager.playerHpDeltaToggle.value || !StatsManager.Instance.timer)\n            {\n                ResetCooldown();\n                return;\n            }\n\n            if (levelMap)\n            {\n                // Calm\n                if (MusicManager.Instance.requestedThemes == 0)\n                {", "                if (MusicManager.Instance.requestedThemes == 0)\n                {\n                    if (!ConfigManager.playerHpDeltaCalm.value)\n                    {\n                        ResetCooldown();\n                        return;\n                    }\n                }\n                // Combat\n                else\n                {", "                    if (!ConfigManager.playerHpDeltaCombat.value)\n                    {\n                        ResetCooldown();\n                        return;\n                    }\n\n                }\n            }\n\n            deltaCooldown = Mathf.MoveTowards(deltaCooldown, 0f, Time.deltaTime);\n            if (deltaCooldown == 0f)\n            {\n                ResetCooldown();\n                int deltaHp = ConfigManager.playerHpDeltaAmount.value;\n                int limit = ConfigManager.playerHpDeltaLimit.value;\n", "            if (deltaCooldown == 0f)\n            {\n                ResetCooldown();\n                int deltaHp = ConfigManager.playerHpDeltaAmount.value;\n                int limit = ConfigManager.playerHpDeltaLimit.value;\n\n                if (deltaHp == 0)\n                    return;\n\n                if (deltaHp > 0)\n                {", "                if (deltaHp > 0)\n                {\n                    if (player.hp > limit)\n                        return;\n\n                    player.GetHealth(deltaHp, true);\n                }\n                else\n                {\n                    if (player.hp < limit)\n                        return;\n", "                    if (player.hp < limit)\n                        return;\n\n                    if (player.hp - deltaHp <= 0)\n                        player.GetHurt(-deltaHp, false, 0, false, false);\n                    else\n                    {\n                        player.hp += deltaHp;\n                        if (ConfigManager.playerHpDeltaHurtAudio.value)\n                        {\n                            hurtAud.pitch = UnityEngine.Random.Range(0.8f, 1f);\n                            hurtAud.PlayOneShot(hurtAud.clip);\n                        }\n                    }\n                }\n            }\n        }\n    }\n", "                        if (ConfigManager.playerHpDeltaHurtAudio.value)\n                        {\n                            hurtAud.pitch = UnityEngine.Random.Range(0.8f, 1f);\n                            hurtAud.PlayOneShot(hurtAud.clip);\n                        }\n                    }\n                }\n            }\n        }\n    }\n", "    class NewMovement_Start\n    {\n        static void Postfix(NewMovement __instance)\n        {\n            __instance.gameObject.AddComponent<NewMovement_DeltaHpComp>();\n            __instance.hp = ConfigManager.maxPlayerHp.value;\n        }\n    }\n\n    class HealthBarTracker : MonoBehaviour\n    {", "    class HealthBarTracker : MonoBehaviour\n    {\n        public static List<HealthBarTracker> instances = new List<HealthBarTracker>();\n        private HealthBar hb;\n\n        private void Awake()\n        {\n            if (hb == null)\n                hb = GetComponent<HealthBar>();\n\n            instances.Add(this);\n", "            for (int i = instances.Count - 1; i >= 0; i--)\n            {\n                if (instances[i] == null)\n                    instances.RemoveAt(i);\n            }\n        }\n\n        private void OnDestroy()\n        {\n            if (instances.Contains(this))\n                instances.Remove(this);\n        }\n", "            if (instances.Contains(this))\n                instances.Remove(this);\n        }\n\n        public void SetSliderRange()\n        {\n            if (hb == null)\n                hb = GetComponent<HealthBar>();\n\n            if (hb.hpSliders.Length != 0)\n            {\n                hb.hpSliders[0].maxValue = hb.afterImageSliders[0].maxValue = ConfigManager.maxPlayerHp.value;\n                hb.hpSliders[1].minValue = hb.afterImageSliders[1].minValue = ConfigManager.maxPlayerHp.value;\n                hb.hpSliders[1].maxValue = hb.afterImageSliders[1].maxValue = Mathf.Max(ConfigManager.maxPlayerHp.value, ConfigManager.playerHpSupercharge.value);\n                hb.antiHpSlider.maxValue = ConfigManager.maxPlayerHp.value;\n            }\n        }\n    }\n", "            if (hb.hpSliders.Length != 0)\n            {\n                hb.hpSliders[0].maxValue = hb.afterImageSliders[0].maxValue = ConfigManager.maxPlayerHp.value;\n                hb.hpSliders[1].minValue = hb.afterImageSliders[1].minValue = ConfigManager.maxPlayerHp.value;\n                hb.hpSliders[1].maxValue = hb.afterImageSliders[1].maxValue = Mathf.Max(ConfigManager.maxPlayerHp.value, ConfigManager.playerHpSupercharge.value);\n                hb.antiHpSlider.maxValue = ConfigManager.maxPlayerHp.value;\n            }\n        }\n    }\n\n    class HealthBar_Start\n    {\n        static void Postfix(HealthBar __instance)\n        {\n            __instance.gameObject.AddComponent<HealthBarTracker>().SetSliderRange();\n        }\n    }\n", "    class HealthBar_Start\n    {\n        static void Postfix(HealthBar __instance)\n        {\n            __instance.gameObject.AddComponent<HealthBarTracker>().SetSliderRange();\n        }\n    }\n\n\tclass HealthBar_Update\n\t{\n\t\tstatic FieldInfo f_HealthBar_hp = typeof(HealthBar).GetField(\"hp\", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);\n\t\tstatic FieldInfo f_HealthBar_antiHp = typeof(HealthBar).GetField(\"antiHp\", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);\n\n\t\tstatic IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n\t\t{\n\t\t\tList<CodeInstruction> code = new List<CodeInstruction>(instructions);\n", "\tclass HealthBar_Update\n\t{\n\t\tstatic FieldInfo f_HealthBar_hp = typeof(HealthBar).GetField(\"hp\", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);\n\t\tstatic FieldInfo f_HealthBar_antiHp = typeof(HealthBar).GetField(\"antiHp\", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);\n\n\t\tstatic IEnumerable<CodeInstruction> Transpiler(IEnumerable<CodeInstruction> instructions)\n\t\t{\n\t\t\tList<CodeInstruction> code = new List<CodeInstruction>(instructions);\n\n\t\t\tfor (int i = 0; i < code.Count; i++)\n\t\t\t{\n\t\t\t\tCodeInstruction inst = code[i];\n", "\t\t\tfor (int i = 0; i < code.Count; i++)\n\t\t\t{\n\t\t\t\tCodeInstruction inst = code[i];\n\n\t\t\t\tif (inst.opcode == OpCodes.Ldc_R4 && code[i - 1].OperandIs(f_HealthBar_hp))\n\t\t\t\t{\n\t\t\t\t\tfloat operand = (Single)inst.operand;\n\t\t\t\t\tif (operand == 30f)\n\t\t\t\t\t\tcode[i].operand = (Single)(ConfigManager.maxPlayerHp.value * 0.3f);\n\t\t\t\t\telse if (operand == 50f)\n\t\t\t\t\t\tcode[i].operand = (Single)(ConfigManager.maxPlayerHp.value * 0.5f);\n\t\t\t\t}", "\t\t\t\t\telse if (operand == 50f)\n\t\t\t\t\t\tcode[i].operand = (Single)(ConfigManager.maxPlayerHp.value * 0.5f);\n\t\t\t\t}\n\t\t\t\telse if (inst.opcode == OpCodes.Ldstr)\n\t\t\t\t{\n\t\t\t\t\tstring operand = (string)inst.operand;\n\t\t\t\t\tif (operand == \"/200\")\n\t\t\t\t\t\tcode[i].operand = $\"/{ConfigManager.playerHpSupercharge}\";\n\t\t\t\t}\n\t\t\t\telse if (inst.opcode == OpCodes.Ldc_R4 && i + 2 < code.Count && code[i + 2].OperandIs(f_HealthBar_antiHp))\n\t\t\t\t{\n\t\t\t\t\tcode[i].operand = (Single)ConfigManager.maxPlayerHp.value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn code.AsEnumerable();\n\t\t}\n\t}\n}\n", "\t\t\t\telse if (inst.opcode == OpCodes.Ldc_R4 && i + 2 < code.Count && code[i + 2].OperandIs(f_HealthBar_antiHp))\n\t\t\t\t{\n\t\t\t\t\tcode[i].operand = (Single)ConfigManager.maxPlayerHp.value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn code.AsEnumerable();\n\t\t}\n\t}\n}\n"]}
{"filename": "Ultrapain/Patches/Stray.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\nusing UnityEngine.AI;\n\nnamespace Ultrapain.Patches\n{\n    public class StrayFlag : MonoBehaviour\n    {\n        //public int extraShotsRemaining = 6;\n        private Animator anim;\n        private EnemyIdentifier eid;\n", "        //public int extraShotsRemaining = 6;\n        private Animator anim;\n        private EnemyIdentifier eid;\n\n        public GameObject standardProjectile;\n        public GameObject standardDecorativeProjectile;\n\n        public int comboRemaining = ConfigManager.strayShootCount.value;\n        public bool inCombo = false;\n\n        public float lastSpeed = 1f;\n", "        public bool inCombo = false;\n\n        public float lastSpeed = 1f;\n\n        public enum AttackMode\n        {\n            ProjectileCombo,\n            FastHoming\n        }\n\n        public AttackMode currentMode = AttackMode.ProjectileCombo;\n", "        public AttackMode currentMode = AttackMode.ProjectileCombo;\n\n        public void Awake()\n        {\n            anim = GetComponent<Animator>();\n            eid = GetComponent<EnemyIdentifier>();\n        }\n\n        public void Update()\n        {\n            if(eid.dead)\n            {\n                Destroy(this);\n                return;\n            }\n", "        public void Update()\n        {\n            if(eid.dead)\n            {\n                Destroy(this);\n                return;\n            }\n\n            if (inCombo)\n            {\n                anim.speed = ZombieProjectile_ThrowProjectile_Patch.animSpeed;\n                anim.SetFloat(\"Speed\", ZombieProjectile_ThrowProjectile_Patch.animSpeed);\n            }\n        }\n    }\n", "            if (inCombo)\n            {\n                anim.speed = ZombieProjectile_ThrowProjectile_Patch.animSpeed;\n                anim.SetFloat(\"Speed\", ZombieProjectile_ThrowProjectile_Patch.animSpeed);\n            }\n        }\n    }\n\n    public class ZombieProjectile_Start_Patch1\n    {\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {", "    public class ZombieProjectile_Start_Patch1\n    {\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Stray)\n                return;\n\n            StrayFlag flag = __instance.gameObject.AddComponent<StrayFlag>();\n            flag.standardProjectile = __instance.projectile;\n            flag.standardDecorativeProjectile = __instance.decProjectile;\n            flag.currentMode = StrayFlag.AttackMode.ProjectileCombo;\n            /*__instance.projectile = Plugin.homingProjectile;\n            __instance.decProjectile = Plugin.decorativeProjectile2;*/\n        }\n    }\n", "    public class ZombieProjectile_ThrowProjectile_Patch\n    {\n        public static float normalizedTime = 0f;\n        public static float animSpeed = 20f;\n\n        public static float projectileSpeed = 75;\n        public static float turnSpeedMultiplier = 0.45f;\n        public static int projectileDamage = 10;\n\n        public static int explosionDamage = 20;\n        public static float coreSpeed = 110f;\n\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid, ref Animator ___anim, ref GameObject ___currentProjectile\n            , ref NavMeshAgent ___nma, ref Zombie ___zmb)\n        {", "        public static int explosionDamage = 20;\n        public static float coreSpeed = 110f;\n\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid, ref Animator ___anim, ref GameObject ___currentProjectile\n            , ref NavMeshAgent ___nma, ref Zombie ___zmb)\n        {\n            if (___eid.enemyType != EnemyType.Stray)\n                return;\n\n            StrayFlag flag = __instance.gameObject.GetComponent<StrayFlag>();\n            if (flag == null)\n                return;\n", "            if (flag == null)\n                return;\n\n            if (flag.currentMode == StrayFlag.AttackMode.FastHoming)\n            {\n                Projectile proj = ___currentProjectile.GetComponent<Projectile>();\n                if (proj != null)\n                {\n                    proj.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n                    proj.speed = projectileSpeed * ___eid.totalSpeedModifier;\n                    proj.turningSpeedMultiplier = turnSpeedMultiplier;\n                    proj.safeEnemyType = EnemyType.Stray;\n                    proj.damage = projectileDamage * ___eid.totalDamageModifier;\n                }\n\n                flag.currentMode = StrayFlag.AttackMode.ProjectileCombo;\n                __instance.projectile = flag.standardProjectile;\n                __instance.decProjectile = flag.standardDecorativeProjectile;\n            }", "            else if(flag.currentMode == StrayFlag.AttackMode.ProjectileCombo)\n            {\n                flag.comboRemaining -= 1;\n\n                if (flag.comboRemaining == 0)\n                {\n                    flag.comboRemaining = ConfigManager.strayShootCount.value;\n                    //flag.currentMode = StrayFlag.AttackMode.FastHoming;\n                    flag.inCombo = false;\n                    ___anim.speed = flag.lastSpeed;\n                    ___anim.SetFloat(\"Speed\", flag.lastSpeed);\n                    //__instance.projectile = Plugin.homingProjectile;\n                    //__instance.decProjectile = Plugin.decorativeProjectile2;\n                }\n                else\n                {\n                    flag.inCombo = true;\n                    __instance.swinging = true;\n                    __instance.seekingPlayer = false;\n                    ___nma.updateRotation = false;\n                    __instance.transform.LookAt(new Vector3(___zmb.target.position.x, __instance.transform.position.y, ___zmb.target.position.z));\n                    flag.lastSpeed = ___anim.speed;\n                    //___anim.Play(\"ThrowProjectile\", 0, ZombieProjectile_ThrowProjectile_Patch.normalizedTime);\n                    ___anim.speed = ConfigManager.strayShootSpeed.value;\n                    ___anim.SetFloat(\"Speed\", ConfigManager.strayShootSpeed.value);\n                    ___anim.SetTrigger(\"Swing\");\n                    //___anim.SetFloat(\"AttackType\", 0f);\n                    //___anim.StopPlayback();\n                    //flag.Invoke(\"LateCombo\", 0.01f);\n                    //___anim.runtimeAnimatorController.animationClips.Where(clip => clip.name == \"ThrowProjectile\").First().\n                    //___anim.fireEvents = true;\n                }\n            }\n        }\n    }\n", "    class Swing\n    {\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Stray)\n                return;\n\n            ___eid.weakPoint = null;\n        }\n    }\n\n    /*[HarmonyPatch(typeof(ZombieProjectiles), \"Swing\")]", "    class Swing\n    {\n        static void Postfix()\n        {\n            Debug.Log(\"Swing()\");\n        }\n    }*/\n\n    class SwingEnd\n    {\n        static bool Prefix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {", "    class SwingEnd\n    {\n        static bool Prefix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Stray)\n                return true;\n\n            StrayFlag flag = __instance.gameObject.GetComponent<StrayFlag>();\n            if (flag == null)\n                return true;\n", "            if (flag == null)\n                return true;\n\n            if (flag.inCombo)\n                return false;\n\n            return true;\n        }\n    }\n\n    /*[HarmonyPatch(typeof(ZombieProjectiles), \"DamageStart\")]", "    class DamageStart\n    {\n        static void Postfix()\n        {\n            Debug.Log(\"DamageStart()\");\n        }\n    }*/\n\n    class DamageEnd\n    {\n        static bool Prefix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {", "    class DamageEnd\n    {\n        static bool Prefix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Stray)\n                return true;\n\n            StrayFlag flag = __instance.gameObject.GetComponent<StrayFlag>();\n            if (flag == null)\n                return true;\n", "            if (flag == null)\n                return true;\n\n            if (flag.inCombo)\n                return false;\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/GlobalEnemyTweaks.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\nusing static Ultrapain.ConfigManager;\n\nnamespace Ultrapain.Patches\n{\n    // EID\n    class EnemyIdentifier_UpdateModifiers\n    {\n        static void Postfix(EnemyIdentifier __instance)\n        {\n            EidStatContainer container = ConfigManager.enemyStats[__instance.enemyType];\n            ", "{\n    // EID\n    class EnemyIdentifier_UpdateModifiers\n    {\n        static void Postfix(EnemyIdentifier __instance)\n        {\n            EidStatContainer container = ConfigManager.enemyStats[__instance.enemyType];\n            \n            if(__instance.enemyType == EnemyType.V2)\n            {\n                V2 comp = __instance.GetComponent<V2>();", "            if(__instance.enemyType == EnemyType.V2)\n            {\n                V2 comp = __instance.GetComponent<V2>();\n                if(comp != null && comp.secondEncounter)\n                {\n                    container = ConfigManager.enemyStats[EnemyType.V2Second];\n                }\n            }\n\n            __instance.totalHealthModifier *= container.health.value;\n            __instance.totalDamageModifier *= container.damage.value;\n            __instance.totalSpeedModifier *= container.speed.value;\n\n            List<string> weakness = new List<string>();\n            List<float> weaknessMulti = new List<float>();", "            foreach(KeyValuePair<string, float> weaknessPair in container.resistanceDict)\n            {\n                weakness.Add(weaknessPair.Key);\n\n                int index = Array.IndexOf(__instance.weaknesses, weaknessPair.Key);\n                if(index >= 0)\n                {\n                    float defaultResistance = 1f / __instance.weaknessMultipliers[index];\n                    if (defaultResistance > weaknessPair.Value)\n                        weaknessMulti.Add(1f / defaultResistance);\n                    else\n                        weaknessMulti.Add(1f / weaknessPair.Value);\n                }\n                else\n                    weaknessMulti.Add(1f / weaknessPair.Value);\n            }", "                    if (defaultResistance > weaknessPair.Value)\n                        weaknessMulti.Add(1f / defaultResistance);\n                    else\n                        weaknessMulti.Add(1f / weaknessPair.Value);\n                }\n                else\n                    weaknessMulti.Add(1f / weaknessPair.Value);\n            }\n            for(int i = 0; i < __instance.weaknessMultipliers.Length; i++)\n            {\n                if (container.resistanceDict.ContainsKey(__instance.weaknesses[i]))\n                    continue;\n                weakness.Add(__instance.weaknesses[i]);\n                weaknessMulti.Add(__instance.weaknessMultipliers[i]);\n            }\n\n            __instance.weaknesses = weakness.ToArray();\n            __instance.weaknessMultipliers = weaknessMulti.ToArray();\n        }\n    }\n\n    // DETECT DAMAGE TYPE", "            for(int i = 0; i < __instance.weaknessMultipliers.Length; i++)\n            {\n                if (container.resistanceDict.ContainsKey(__instance.weaknesses[i]))\n                    continue;\n                weakness.Add(__instance.weaknesses[i]);\n                weaknessMulti.Add(__instance.weaknessMultipliers[i]);\n            }\n\n            __instance.weaknesses = weakness.ToArray();\n            __instance.weaknessMultipliers = weaknessMulti.ToArray();\n        }\n    }\n\n    // DETECT DAMAGE TYPE", "    class Explosion_Collide_FF\n    {\n        static bool Prefix(Explosion __instance)\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Explosion;\n            if ((__instance.enemy || __instance.friendlyFire) && __instance.canHit != AffectedSubjects.PlayerOnly)\n                EnemyIdentifier_DeliverDamage_FF.friendlyBurn = true;\n            return true;\n        }\n\n        static void Postfix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Unknown;\n            EnemyIdentifier_DeliverDamage_FF.friendlyBurn = false;\n        }\n    }\n", "    class PhysicalShockwave_CheckCollision_FF\n    {\n        static bool Prefix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Explosion;\n            return true;\n        }\n\n        static void Postfix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Unknown;\n        }\n    }\n", "    class VirtueInsignia_OnTriggerEnter_FF\n    {\n        static bool Prefix(VirtueInsignia __instance)\n        {\n            if (__instance.gameObject.name == \"PlayerSpawned\")\n                return true;\n\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Fire;\n            EnemyIdentifier_DeliverDamage_FF.friendlyBurn = true;\n            return true;\n        }\n\n        static void Postfix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Unknown;\n            EnemyIdentifier_DeliverDamage_FF.friendlyBurn = false;\n        }\n    }\n", "    class SwingCheck2_CheckCollision_FF\n    {\n        static bool Prefix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Melee;\n            return true;\n        }\n\n        static void Postfix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Unknown;\n        }\n    }\n", "    class Projectile_Collided_FF\n    {\n        static bool Prefix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Projectile;\n            return true;\n        }\n\n        static void Postfix()\n        {\n            EnemyIdentifier_DeliverDamage_FF.currentCause = EnemyIdentifier_DeliverDamage_FF.DamageCause.Unknown;\n        }\n    }\n", "    class EnemyIdentifier_DeliverDamage_FF\n    {\n        public enum DamageCause\n        {\n            Explosion,\n            Projectile,\n            Fire,\n            Melee,\n            Unknown\n        }\n", "        public static DamageCause currentCause = DamageCause.Unknown;\n        public static bool friendlyBurn = false;\n\n        [HarmonyBefore]\n        static bool Prefix(EnemyIdentifier __instance, ref float __3)\n        {\n            if (currentCause != DamageCause.Unknown && (__instance.hitter == \"enemy\" || __instance.hitter == \"ffexplosion\"))\n            {\n                switch(currentCause)\n                {\n                    case DamageCause.Projectile:", "                        //if (ConfigManager.friendlyFireDamageOverrideProjectile.normalizedValue == 0)\n                        //    return false;\n                        __3 *= ConfigManager.friendlyFireDamageOverrideProjectile.normalizedValue;\n                        break;\n                    case DamageCause.Explosion:\n                        //if (ConfigManager.friendlyFireDamageOverrideProjectile.normalizedValue == 0)\n                        //    return false;\n                        __3 *= ConfigManager.friendlyFireDamageOverrideExplosion.normalizedValue;\n                        break;\n                    case DamageCause.Melee:\n                        //if (ConfigManager.friendlyFireDamageOverrideProjectile.normalizedValue == 0)\n                        //    return false;\n                        __3 *= ConfigManager.friendlyFireDamageOverrideMelee.normalizedValue;\n                        break;\n                }\n            }\n\n            return true;\n        }\n    }\n", "                        //if (ConfigManager.friendlyFireDamageOverrideProjectile.normalizedValue == 0)\n                        //    return false;\n                        __3 *= ConfigManager.friendlyFireDamageOverrideMelee.normalizedValue;\n                        break;\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class Flammable_Burn_FF\n    {\n        static bool Prefix(Flammable __instance, ref float __0)\n        {\n            if (EnemyIdentifier_DeliverDamage_FF.friendlyBurn)\n            {\n                if (ConfigManager.friendlyFireDamageOverrideFire.normalizedValue == 0)\n                    return false;\n                __0 *= ConfigManager.friendlyFireDamageOverrideFire.normalizedValue;\n            }\n            return true;\n        }\n    }\n", "    class StreetCleaner_Fire_FF\n    {\n        static bool Prefix(FireZone __instance)\n        {\n            if (__instance.source != FlameSource.Streetcleaner)\n                return true;\n\n            EnemyIdentifier_DeliverDamage_FF.friendlyBurn = true;\n            return true;\n        }\n\n        static void Postfix(FireZone __instance)\n        {", "            if (__instance.source == FlameSource.Streetcleaner)\n                EnemyIdentifier_DeliverDamage_FF.friendlyBurn = false;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/CommonComponents.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    /*public class ObjectActivator : MonoBehaviour\n    {\n        public int originalInstanceID = 0;", "    /*public class ObjectActivator : MonoBehaviour\n    {\n        public int originalInstanceID = 0;\n        public MonoBehaviour activator;\n\n        void Start()\n        {\n            if (gameObject.GetInstanceID() == originalInstanceID)\n                return;\n            activator?.Invoke(\"OnClone\", 0f);\n        }\n    }*/\n", "    public class CommonLinearScaler : MonoBehaviour\n    {\n        public Transform targetTransform;\n        public float scaleSpeed = 1f;\n\n        void Update()\n        {\n            float deltaSize = Time.deltaTime * scaleSpeed;\n            targetTransform.localScale = new Vector3(targetTransform.localScale.x + deltaSize, targetTransform.localScale.y + deltaSize, targetTransform.localScale.y + deltaSize);\n        }\n    }\n", "    public class CommonAudioPitchScaler : MonoBehaviour\n    {\n        public AudioSource targetAud;\n        public float scaleSpeed = 1f;\n\n        void Update()\n        {\n            float deltaPitch = Time.deltaTime * scaleSpeed;\n            targetAud.pitch += deltaPitch;\n        }\n    }\n    ", "    public class RotateOnSpawn : MonoBehaviour\n    {\n        public Quaternion targetRotation;\n\n        private void Awake()\n        {\n            transform.rotation = targetRotation;\n        }\n    }\n\n    public class CommonActivator : MonoBehaviour\n    {", "    public class CommonActivator : MonoBehaviour\n    {\n        public int originalId;\n        public Renderer rend;\n\n        public Rigidbody rb;\n        public bool kinematic;\n        public bool colDetect;\n\n        public Collider col;\n", "        public Collider col;\n\n        public AudioSource aud;\n\n        public List<MonoBehaviour> comps = new List<MonoBehaviour>();\n\n        void Awake()\n        {\n            if (originalId == gameObject.GetInstanceID())\n                return;\n", "            if (originalId == gameObject.GetInstanceID())\n                return;\n\n            if (rend != null)\n                rend.enabled = true;\n\n            if (rb != null)\n            {\n                rb.isKinematic = kinematic;\n                rb.detectCollisions = colDetect;\n            }\n", "            if (col != null)\n                col.enabled = true;\n\n            if (aud != null)\n                aud.enabled = true;\n\n            foreach (MonoBehaviour comp in comps)\n                comp.enabled = true;\n\n            foreach (Transform child in gameObject.transform)\n                child.gameObject.SetActive(true);\n        }\n    }\n", "            foreach (Transform child in gameObject.transform)\n                child.gameObject.SetActive(true);\n        }\n    }\n\n    public class GrenadeExplosionOverride : MonoBehaviour\n    {\n        public bool harmlessMod = false;\n        public float harmlessSize = 1f;\n        public float harmlessSpeed = 1f;\n        public float harmlessDamage = 1f;", "        public float harmlessSize = 1f;\n        public float harmlessSpeed = 1f;\n        public float harmlessDamage = 1f;\n        public int harmlessPlayerDamageOverride = -1;\n\n        public bool normalMod = false;\n        public float normalSize = 1f;\n        public float normalSpeed = 1f;\n        public float normalDamage = 1f;\n        public int normalPlayerDamageOverride = -1;\n", "        public float normalDamage = 1f;\n        public int normalPlayerDamageOverride = -1;\n\n        public bool superMod = false;\n        public float superSize = 1f;\n        public float superSpeed = 1f;\n        public float superDamage = 1f;\n        public int superPlayerDamageOverride = -1;\n\n        struct StateInfo\n        {", "        struct StateInfo\n        {\n            public GameObject tempHarmless;\n            public GameObject tempNormal;\n            public GameObject tempSuper;\n\n            public StateInfo()\n            {\n                tempHarmless = tempNormal = tempSuper = null;\n            }\n        }\n\n        [HarmonyBefore]\n        static bool Prefix(Grenade __instance, out StateInfo __state)\n        {\n            __state = new StateInfo();\n\n            GrenadeExplosionOverride flag = __instance.GetComponent<GrenadeExplosionOverride>();", "            if (flag == null)\n                return true;\n\n            if (flag.harmlessMod)\n            {\n                __state.tempHarmless = __instance.harmlessExplosion = GameObject.Instantiate(__instance.harmlessExplosion);\n                foreach (Explosion exp in __instance.harmlessExplosion.GetComponentsInChildren<Explosion>())\n                {\n                    exp.damage = (int)(exp.damage * flag.harmlessDamage);\n                    exp.maxSize *= flag.harmlessSize;\n                    exp.speed *= flag.harmlessSize * flag.harmlessSpeed;\n                    exp.playerDamageOverride = flag.harmlessPlayerDamageOverride;\n                }\n            }\n", "            if (flag.normalMod)\n            {\n                __state.tempNormal = __instance.explosion = GameObject.Instantiate(__instance.explosion);\n                foreach (Explosion exp in __instance.explosion.GetComponentsInChildren<Explosion>())\n                {\n                    exp.damage = (int)(exp.damage * flag.normalDamage);\n                    exp.maxSize *= flag.normalSize;\n                    exp.speed *= flag.normalSize * flag.normalSpeed;\n                    exp.playerDamageOverride = flag.normalPlayerDamageOverride;\n                }\n            }\n", "            if (flag.superMod)\n            {\n                __state.tempSuper = __instance.superExplosion = GameObject.Instantiate(__instance.superExplosion);\n                foreach (Explosion exp in __instance.superExplosion.GetComponentsInChildren<Explosion>())\n                {\n                    exp.damage = (int)(exp.damage * flag.superDamage);\n                    exp.maxSize *= flag.superSize;\n                    exp.speed *= flag.superSize * flag.superSpeed;\n                    exp.playerDamageOverride = flag.superPlayerDamageOverride;\n                }\n            }\n\n            return true;\n        }\n\n        static void Postfix(StateInfo __state)\n        {", "            if (__state.tempHarmless != null)\n                GameObject.Destroy(__state.tempHarmless);\n            if (__state.tempNormal != null)\n                GameObject.Destroy(__state.tempNormal);\n            if (__state.tempSuper != null)\n                GameObject.Destroy(__state.tempSuper);\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/SteamFriends.cs", "chunked_list": ["using HarmonyLib;\nusing Steamworks;\nusing System.Text.RegularExpressions;\n\nnamespace Ultrapain.Patches\n{\n    class SteamFriends_SetRichPresence_Patch\n    {\n        static bool Prefix(string __0, ref string __1)\n        {\n            if (__1.ToLower() != \"ukmd\")\n                return true;\n\n            Regex rich = new Regex(@\"<[^>]*>\");\n            string text = ConfigManager.pluginName.value;", "            if (__1.ToLower() != \"ukmd\")\n                return true;\n\n            Regex rich = new Regex(@\"<[^>]*>\");\n            string text = ConfigManager.pluginName.value;\n            if (rich.IsMatch(text))\n            {\n                __1 = rich.Replace(text, string.Empty);\n            }\n            else\n            {\n                __1 = text;\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/OrbitalStrike.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    public class OrbitalStrikeFlag : MonoBehaviour\n    {", "namespace Ultrapain.Patches\n{\n    public class OrbitalStrikeFlag : MonoBehaviour\n    {\n        public CoinChainList chainList;\n        public bool isOrbitalRay = false;\n        public bool exploded = false;\n        public float activasionDistance;\n    }\n\n    public class Coin_Start\n    {\n        static void Postfix(Coin __instance)\n        {\n            __instance.gameObject.AddComponent<OrbitalStrikeFlag>();\n        }\n    }\n", "    public class Coin_Start\n    {\n        static void Postfix(Coin __instance)\n        {\n            __instance.gameObject.AddComponent<OrbitalStrikeFlag>();\n        }\n    }\n\n    public class CoinChainList : MonoBehaviour\n    {\n        public List<Coin> chainList = new List<Coin>();", "    public class CoinChainList : MonoBehaviour\n    {\n        public List<Coin> chainList = new List<Coin>();\n        public bool isOrbitalStrike = false;\n        public float activasionDistance;\n    }\n\n    class Punch_BlastCheck\n    {\n        [HarmonyBefore(new string[] { \"tempy.fastpunch\" })]\n        static bool Prefix(Punch __instance)\n        {\n            __instance.blastWave = GameObject.Instantiate(Plugin.explosionWaveKnuckleblaster, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n            __instance.blastWave.AddComponent<OrbitalStrikeFlag>();\n            return true;\n        }\n\n        [HarmonyBefore(new string[] { \"tempy.fastpunch\" })]\n        static void Postfix(Punch __instance)\n        {\n            GameObject.Destroy(__instance.blastWave);\n            __instance.blastWave = Plugin.explosionWaveKnuckleblaster;\n        }\n    }\n", "    class Explosion_Collide\n    {\n        static bool Prefix(Explosion __instance, Collider __0, List<Collider> ___hitColliders)\n        {\n            if (___hitColliders.Contains(__0)/* || __instance.transform.parent.GetComponent<OrbitalStrikeFlag>() == null*/)\n                return true;\n\n            Coin coin = __0.GetComponent<Coin>();\n            if (coin != null)\n            {\n                OrbitalStrikeFlag flag = coin.GetComponent<OrbitalStrikeFlag>();", "            if (coin != null)\n            {\n                OrbitalStrikeFlag flag = coin.GetComponent<OrbitalStrikeFlag>();\n                if(flag == null)\n                {\n                    coin.gameObject.AddComponent<OrbitalStrikeFlag>();\n                    Debug.Log(\"Added orbital strike flag\");\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class Coin_DelayedReflectRevolver\n    {\n        static void Postfix(Coin __instance, GameObject ___altBeam)\n        {\n            CoinChainList flag = null;\n            OrbitalStrikeFlag orbitalBeamFlag = null;\n\n            if (___altBeam != null)\n            {\n                orbitalBeamFlag = ___altBeam.GetComponent<OrbitalStrikeFlag>();\n                if (orbitalBeamFlag == null)\n                {\n                    orbitalBeamFlag = ___altBeam.AddComponent<OrbitalStrikeFlag>();\n                    GameObject obj = new GameObject();\n                    obj.AddComponent<RemoveOnTime>().time = 5f;\n                    flag = obj.AddComponent<CoinChainList>();\n                    orbitalBeamFlag.chainList = flag;\n                }\n                else\n                    flag = orbitalBeamFlag.chainList;\n            }\n            else\n            {", "                if (orbitalBeamFlag == null)\n                {\n                    orbitalBeamFlag = ___altBeam.AddComponent<OrbitalStrikeFlag>();\n                    GameObject obj = new GameObject();\n                    obj.AddComponent<RemoveOnTime>().time = 5f;\n                    flag = obj.AddComponent<CoinChainList>();\n                    orbitalBeamFlag.chainList = flag;\n                }\n                else\n                    flag = orbitalBeamFlag.chainList;\n            }\n            else\n            {", "                if (__instance.ccc == null)\n                {\n                    GameObject obj = new GameObject();\n                    __instance.ccc = obj.AddComponent<CoinChainCache>();\n                    obj.AddComponent<RemoveOnTime>().time = 5f;\n                }\n\n                flag = __instance.ccc.gameObject.GetComponent<CoinChainList>();\n                if(flag == null)\n                    flag = __instance.ccc.gameObject.AddComponent<CoinChainList>();\n            }\n", "                if(flag == null)\n                    flag = __instance.ccc.gameObject.AddComponent<CoinChainList>();\n            }\n\n            if (flag == null)\n                return;\n\n            if (!flag.isOrbitalStrike && flag.chainList.Count != 0 && __instance.GetComponent<OrbitalStrikeFlag>() != null)\n            {\n                Coin lastCoin = flag.chainList.LastOrDefault();\n                float distance = Vector3.Distance(__instance.transform.position, lastCoin.transform.position);", "                if (distance >= ConfigManager.orbStrikeMinDistance.value)\n                {\n                    flag.isOrbitalStrike = true;\n                    flag.activasionDistance = distance;\n                    if (orbitalBeamFlag != null)\n                    {\n                        orbitalBeamFlag.isOrbitalRay = true;\n                        orbitalBeamFlag.activasionDistance = distance;\n                    }\n                    Debug.Log(\"Coin valid for orbital strike\");\n                }\n            }\n", "            if (flag.chainList.Count == 0 || flag.chainList.LastOrDefault() != __instance)\n                flag.chainList.Add(__instance);\n        }\n    }\n\n    class Coin_ReflectRevolver\n    {\n        public static bool coinIsShooting = false;\n        public static Coin shootingCoin = null;\n        public static GameObject shootingAltBeam;\n        public static float lastCoinTime = 0;\n\n        static bool Prefix(Coin __instance, GameObject ___altBeam)\n        {\n            coinIsShooting = true;\n            shootingCoin = __instance;\n            lastCoinTime = Time.time;\n            shootingAltBeam = ___altBeam;\n\n            return true;\n        }\n\n        static void Postfix(Coin __instance)\n        {\n            coinIsShooting = false;\n        }\n    }\n", "        public static Coin shootingCoin = null;\n        public static GameObject shootingAltBeam;\n        public static float lastCoinTime = 0;\n\n        static bool Prefix(Coin __instance, GameObject ___altBeam)\n        {\n            coinIsShooting = true;\n            shootingCoin = __instance;\n            lastCoinTime = Time.time;\n            shootingAltBeam = ___altBeam;\n\n            return true;\n        }\n\n        static void Postfix(Coin __instance)\n        {\n            coinIsShooting = false;\n        }\n    }\n", "    class RevolverBeam_Start\n    {\n        static bool Prefix(RevolverBeam __instance)\n        {\n            OrbitalStrikeFlag flag = __instance.GetComponent<OrbitalStrikeFlag>();\n            if (flag != null && flag.isOrbitalRay)\n            {\n                RevolverBeam_ExecuteHits.orbitalBeam = __instance;\n                RevolverBeam_ExecuteHits.orbitalBeamFlag = flag;\n            }\n\n            return true;\n        }\n    }\n", "    class RevolverBeam_ExecuteHits\n    {\n        public static bool isOrbitalRay = false;\n        public static RevolverBeam orbitalBeam = null;\n        public static OrbitalStrikeFlag orbitalBeamFlag = null;\n\n        static bool Prefix(RevolverBeam __instance)\n        {\n            OrbitalStrikeFlag flag = __instance.GetComponent<OrbitalStrikeFlag>();\n            if (flag != null && flag.isOrbitalRay)\n            {\n                isOrbitalRay = true;\n                orbitalBeam = __instance;\n                orbitalBeamFlag = flag;\n            }\n\n            return true;\n        }\n\n        static void Postfix()\n        {\n            isOrbitalRay = false;\n        }\n    }\n", "            if (flag != null && flag.isOrbitalRay)\n            {\n                isOrbitalRay = true;\n                orbitalBeam = __instance;\n                orbitalBeamFlag = flag;\n            }\n\n            return true;\n        }\n\n        static void Postfix()\n        {\n            isOrbitalRay = false;\n        }\n    }\n", "    class OrbitalExplosionInfo : MonoBehaviour\n    {\n        public bool active = true;\n        public string id;\n        public int points;\n    }\n\n    class Grenade_Explode\n    {\n        class StateInfo\n        {", "        class StateInfo\n        {\n            public bool state = false;\n\n            public string id;\n            public int points;\n            public GameObject templateExplosion;\n        }\n\n        static bool Prefix(Grenade __instance, ref float __3, out StateInfo __state,\n            bool __1, bool __2)\n        {\n            __state = new StateInfo();\n", "            if((Coin_ReflectRevolver.coinIsShooting && Coin_ReflectRevolver.shootingCoin != null) || (Time.time - Coin_ReflectRevolver.lastCoinTime <= 0.1f))\n            {\n                CoinChainList list = null;\n                if (Coin_ReflectRevolver.shootingAltBeam != null)\n                {\n                    OrbitalStrikeFlag orbitalFlag = Coin_ReflectRevolver.shootingAltBeam.GetComponent<OrbitalStrikeFlag>();\n                    if (orbitalFlag != null)\n                        list = orbitalFlag.chainList;\n                }\n                else if (Coin_ReflectRevolver.shootingCoin != null && Coin_ReflectRevolver.shootingCoin.ccc != null)\n                    list = Coin_ReflectRevolver.shootingCoin.ccc.GetComponent<CoinChainList>();\n", "                else if (Coin_ReflectRevolver.shootingCoin != null && Coin_ReflectRevolver.shootingCoin.ccc != null)\n                    list = Coin_ReflectRevolver.shootingCoin.ccc.GetComponent<CoinChainList>();\n\n                if (list != null && list.isOrbitalStrike)\n                {\n                    if (__1)\n                    {\n                        __state.templateExplosion = GameObject.Instantiate(__instance.harmlessExplosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                        __instance.harmlessExplosion = __state.templateExplosion;\n                    }\n                    else if (__2)\n                    {\n                        __state.templateExplosion = GameObject.Instantiate(__instance.superExplosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                        __instance.superExplosion = __state.templateExplosion;\n                    }\n                    else\n                    {\n                        __state.templateExplosion = GameObject.Instantiate(__instance.explosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                        __instance.explosion = __state.templateExplosion;\n                    }\n                    OrbitalExplosionInfo info = __state.templateExplosion.AddComponent<OrbitalExplosionInfo>();\n                    info.id = \"\";\n\n                    __state.state = true;\n                    float damageMulti = 1f;\n                    float sizeMulti = 1f;\n                    \n                    // REVOLVER NORMAL", "                    else if (__2)\n                    {\n                        __state.templateExplosion = GameObject.Instantiate(__instance.superExplosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                        __instance.superExplosion = __state.templateExplosion;\n                    }\n                    else\n                    {\n                        __state.templateExplosion = GameObject.Instantiate(__instance.explosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                        __instance.explosion = __state.templateExplosion;\n                    }\n                    OrbitalExplosionInfo info = __state.templateExplosion.AddComponent<OrbitalExplosionInfo>();\n                    info.id = \"\";\n\n                    __state.state = true;\n                    float damageMulti = 1f;\n                    float sizeMulti = 1f;\n                    \n                    // REVOLVER NORMAL", "                    if (Coin_ReflectRevolver.shootingAltBeam == null)\n                    {\n                        if (ConfigManager.orbStrikeRevolverGrenade.value)\n                        {\n                            damageMulti += ConfigManager.orbStrikeRevolverGrenadeExtraDamage.value;\n                            sizeMulti += ConfigManager.orbStrikeRevolverGrenadeExtraSize.value;\n                            info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                            info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                        }\n                    }\n                    else if (Coin_ReflectRevolver.shootingAltBeam.TryGetComponent(out RevolverBeam beam))\n                    {", "                    else if (Coin_ReflectRevolver.shootingAltBeam.TryGetComponent(out RevolverBeam beam))\n                    {\n                        if (beam.beamType == BeamType.Revolver)\n                        {\n                            // REVOLVER CHARGED (NORMAL + ALT. IF DISTINCTION IS NEEDED, USE beam.strongAlt FOR ALT)\n                            if (beam.ultraRicocheter)\n                            {\n                                if (ConfigManager.orbStrikeRevolverChargedGrenade.value)\n                                {\n                                    damageMulti += ConfigManager.orbStrikeRevolverChargedGrenadeExtraDamage.value;\n                                    sizeMulti += ConfigManager.orbStrikeRevolverChargedGrenadeExtraSize.value;\n                                    info.id = ConfigManager.orbStrikeRevolverChargedStyleText.guid;\n                                    info.points = ConfigManager.orbStrikeRevolverChargedStylePoint.value;\n                                }\n                            }\n                            // REVOLVER ALT\n                            else\n                            {", "                                if (ConfigManager.orbStrikeRevolverGrenade.value)\n                                {\n                                    damageMulti += ConfigManager.orbStrikeRevolverGrenadeExtraDamage.value;\n                                    sizeMulti += ConfigManager.orbStrikeRevolverGrenadeExtraSize.value;\n                                    info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                                    info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                                }\n                            }\n                        }\n                        // ELECTRIC RAILCANNON\n                        else if (beam.beamType == BeamType.Railgun && beam.hitAmount > 500)\n                        {", "                        else if (beam.beamType == BeamType.Railgun && beam.hitAmount > 500)\n                        {\n                            if (ConfigManager.orbStrikeElectricCannonGrenade.value)\n                            {\n                                damageMulti += ConfigManager.orbStrikeElectricCannonExplosionDamage.value;\n                                sizeMulti += ConfigManager.orbStrikeElectricCannonExplosionSize.value;\n                                info.id = ConfigManager.orbStrikeElectricCannonStyleText.guid;\n                                info.points = ConfigManager.orbStrikeElectricCannonStylePoint.value;\n                            }\n                        }\n                        // MALICIOUS RAILCANNON", "                        else if (beam.beamType == BeamType.Railgun)\n                        {\n                            if (ConfigManager.orbStrikeMaliciousCannonGrenade.value)\n                            {\n                                damageMulti += ConfigManager.orbStrikeMaliciousCannonGrenadeExtraDamage.value;\n                                sizeMulti += ConfigManager.orbStrikeMaliciousCannonGrenadeExtraSize.value;\n                                info.id = ConfigManager.orbStrikeMaliciousCannonStyleText.guid;\n                                info.points = ConfigManager.orbStrikeMaliciousCannonStylePoint.value;\n                            }\n                        }\n                        else\n                            __state.state = false;\n                    }\n                    else\n                        __state.state = false;\n", "                    if(sizeMulti != 1 || damageMulti != 1)\n                        foreach(Explosion exp in __state.templateExplosion.GetComponentsInChildren<Explosion>())\n                        {\n                            exp.maxSize *= sizeMulti;\n                            exp.speed *= sizeMulti;\n                            exp.damage = (int)(exp.damage * damageMulti);\n                        }\n\n                    Debug.Log(\"Applied orbital strike bonus\");\n                }\n            }\n\n            return true;\n        }\n\n        static void Postfix(Grenade __instance, StateInfo __state)\n        {", "            if (__state.templateExplosion != null)\n                GameObject.Destroy(__state.templateExplosion);\n\n            if (!__state.state)\n                return;\n        }\n    }\n\n    class Cannonball_Explode\n    {\n        static bool Prefix(Cannonball __instance, GameObject ___interruptionExplosion, ref GameObject ___breakEffect)\n        {", "    class Cannonball_Explode\n    {\n        static bool Prefix(Cannonball __instance, GameObject ___interruptionExplosion, ref GameObject ___breakEffect)\n        {\n            if ((Coin_ReflectRevolver.coinIsShooting && Coin_ReflectRevolver.shootingCoin != null) || (Time.time - Coin_ReflectRevolver.lastCoinTime <= 0.1f))\n            {\n                CoinChainList list = null;\n                if (Coin_ReflectRevolver.shootingAltBeam != null)\n                {\n                    OrbitalStrikeFlag orbitalFlag = Coin_ReflectRevolver.shootingAltBeam.GetComponent<OrbitalStrikeFlag>();\n                    if (orbitalFlag != null)\n                        list = orbitalFlag.chainList;\n                }", "                    if (orbitalFlag != null)\n                        list = orbitalFlag.chainList;\n                }\n                else if (Coin_ReflectRevolver.shootingCoin != null && Coin_ReflectRevolver.shootingCoin.ccc != null)\n                    list = Coin_ReflectRevolver.shootingCoin.ccc.GetComponent<CoinChainList>();\n\n                if (list != null && list.isOrbitalStrike && ___interruptionExplosion != null)\n                {\n                    float damageMulti = 1f;\n                    float sizeMulti = 1f;\n                    GameObject explosion = GameObject.Instantiate<GameObject>(___interruptionExplosion, __instance.transform.position, Quaternion.identity);\n                    OrbitalExplosionInfo info = explosion.AddComponent<OrbitalExplosionInfo>();\n                    info.id = \"\";\n\n                    // REVOLVER NORMAL", "                    if (Coin_ReflectRevolver.shootingAltBeam == null)\n                    {\n                        if (ConfigManager.orbStrikeRevolverGrenade.value)\n                        {\n                            damageMulti += ConfigManager.orbStrikeRevolverGrenadeExtraDamage.value;\n                            sizeMulti += ConfigManager.orbStrikeRevolverGrenadeExtraSize.value;\n                            info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                            info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                        }\n                    }\n                    else if (Coin_ReflectRevolver.shootingAltBeam.TryGetComponent(out RevolverBeam beam))\n                    {", "                    else if (Coin_ReflectRevolver.shootingAltBeam.TryGetComponent(out RevolverBeam beam))\n                    {\n                        if (beam.beamType == BeamType.Revolver)\n                        {\n                            // REVOLVER CHARGED (NORMAL + ALT. IF DISTINCTION IS NEEDED, USE beam.strongAlt FOR ALT)\n                            if (beam.ultraRicocheter)\n                            {\n                                if (ConfigManager.orbStrikeRevolverChargedGrenade.value)\n                                {\n                                    damageMulti += ConfigManager.orbStrikeRevolverChargedGrenadeExtraDamage.value;\n                                    sizeMulti += ConfigManager.orbStrikeRevolverChargedGrenadeExtraSize.value;\n                                    info.id = ConfigManager.orbStrikeRevolverChargedStyleText.guid;\n                                    info.points = ConfigManager.orbStrikeRevolverChargedStylePoint.value;\n                                }\n                            }\n                            // REVOLVER ALT\n                            else\n                            {", "                                if (ConfigManager.orbStrikeRevolverGrenade.value)\n                                {\n                                    damageMulti += ConfigManager.orbStrikeRevolverGrenadeExtraDamage.value;\n                                    sizeMulti += ConfigManager.orbStrikeRevolverGrenadeExtraSize.value;\n                                    info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                                    info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                                }\n                            }\n                        }\n                        // ELECTRIC RAILCANNON\n                        else if (beam.beamType == BeamType.Railgun && beam.hitAmount > 500)\n                        {", "                        else if (beam.beamType == BeamType.Railgun && beam.hitAmount > 500)\n                        {\n                            if (ConfigManager.orbStrikeElectricCannonGrenade.value)\n                            {\n                                damageMulti += ConfigManager.orbStrikeElectricCannonExplosionDamage.value;\n                                sizeMulti += ConfigManager.orbStrikeElectricCannonExplosionSize.value;\n                                info.id = ConfigManager.orbStrikeElectricCannonStyleText.guid;\n                                info.points = ConfigManager.orbStrikeElectricCannonStylePoint.value;\n                            }\n                        }\n                        // MALICIOUS RAILCANNON", "                        else if (beam.beamType == BeamType.Railgun)\n                        {\n                            if (ConfigManager.orbStrikeMaliciousCannonGrenade.value)\n                            {\n                                damageMulti += ConfigManager.orbStrikeMaliciousCannonGrenadeExtraDamage.value;\n                                sizeMulti += ConfigManager.orbStrikeMaliciousCannonGrenadeExtraSize.value;\n                                info.id = ConfigManager.orbStrikeMaliciousCannonStyleText.guid;\n                                info.points = ConfigManager.orbStrikeMaliciousCannonStylePoint.value;\n                            }\n                        }\n                    }\n", "                    if (sizeMulti != 1 || damageMulti != 1)\n                        foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                        {\n                            exp.maxSize *= sizeMulti;\n                            exp.speed *= sizeMulti;\n                            exp.damage = (int)(exp.damage * damageMulti);\n                        }\n\n                    if (MonoSingleton<PrefsManager>.Instance.GetBoolLocal(\"simpleExplosions\", false))\n                    {\n                        ___breakEffect = null;\n                    }\n                    __instance.Break();\n\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n", "                    if (MonoSingleton<PrefsManager>.Instance.GetBoolLocal(\"simpleExplosions\", false))\n                    {\n                        ___breakEffect = null;\n                    }\n                    __instance.Break();\n\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class Explosion_CollideOrbital\n    {\n        static bool Prefix(Explosion __instance, Collider __0)\n        {\n            OrbitalExplosionInfo flag = __instance.transform.parent.GetComponent<OrbitalExplosionInfo>();\n            if (flag == null || !flag.active)\n                return true;\n\n            if ( __0.gameObject.tag != \"Player\" && (__0.gameObject.layer == 10 || __0.gameObject.layer == 11)\n                && __instance.canHit != AffectedSubjects.PlayerOnly)\n            {\n                EnemyIdentifierIdentifier componentInParent = __0.GetComponentInParent<EnemyIdentifierIdentifier>();", "            if ( __0.gameObject.tag != \"Player\" && (__0.gameObject.layer == 10 || __0.gameObject.layer == 11)\n                && __instance.canHit != AffectedSubjects.PlayerOnly)\n            {\n                EnemyIdentifierIdentifier componentInParent = __0.GetComponentInParent<EnemyIdentifierIdentifier>();\n                if (componentInParent != null && componentInParent.eid != null && !componentInParent.eid.blessed/* && !componentInParent.eid.dead*/)\n                {\n                    flag.active = false;\n                    if(flag.id != \"\")\n                        StyleHUD.Instance.AddPoints(flag.points, flag.id);\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class EnemyIdentifier_DeliverDamage\n    {\n        static Coin lastExplosiveCoin = null;\n\n        class StateInfo\n        {\n            public bool canPostStyle = false;\n            public OrbitalExplosionInfo info = null;\n        }\n\n        static bool Prefix(EnemyIdentifier __instance, out StateInfo __state, Vector3 __2, ref float __3)\n        {", "            //if (Coin_ReflectRevolver.shootingCoin == lastExplosiveCoin)\n            //    return true;\n\n            __state = new StateInfo();\n            bool causeExplosion = false;\n\n            if (__instance.dead)\n                return true;\n\n            if ((Coin_ReflectRevolver.coinIsShooting && Coin_ReflectRevolver.shootingCoin != null)/* || (Time.time - Coin_ReflectRevolver.lastCoinTime <= 0.1f)*/)\n            {\n                CoinChainList list = null;", "            if ((Coin_ReflectRevolver.coinIsShooting && Coin_ReflectRevolver.shootingCoin != null)/* || (Time.time - Coin_ReflectRevolver.lastCoinTime <= 0.1f)*/)\n            {\n                CoinChainList list = null;\n                if (Coin_ReflectRevolver.shootingAltBeam != null)\n                {\n                    OrbitalStrikeFlag orbitalFlag = Coin_ReflectRevolver.shootingAltBeam.GetComponent<OrbitalStrikeFlag>();\n                    if (orbitalFlag != null)\n                        list = orbitalFlag.chainList;\n                }\n                else if (Coin_ReflectRevolver.shootingCoin != null && Coin_ReflectRevolver.shootingCoin.ccc != null)\n                    list = Coin_ReflectRevolver.shootingCoin.ccc.GetComponent<CoinChainList>();\n", "                else if (Coin_ReflectRevolver.shootingCoin != null && Coin_ReflectRevolver.shootingCoin.ccc != null)\n                    list = Coin_ReflectRevolver.shootingCoin.ccc.GetComponent<CoinChainList>();\n\n                if (list != null && list.isOrbitalStrike)\n                {\n                    causeExplosion = true;\n                }\n            }\n            else if (RevolverBeam_ExecuteHits.isOrbitalRay && RevolverBeam_ExecuteHits.orbitalBeam != null)\n            {\n                if (RevolverBeam_ExecuteHits.orbitalBeamFlag != null && !RevolverBeam_ExecuteHits.orbitalBeamFlag.exploded)\n                {\n                    causeExplosion = true;\n                }\n            }\n", "            else if (RevolverBeam_ExecuteHits.isOrbitalRay && RevolverBeam_ExecuteHits.orbitalBeam != null)\n            {\n                if (RevolverBeam_ExecuteHits.orbitalBeamFlag != null && !RevolverBeam_ExecuteHits.orbitalBeamFlag.exploded)\n                {\n                    causeExplosion = true;\n                }\n            }\n\n            if(causeExplosion)\n            {\n                __state.canPostStyle = true;\n\n                // REVOLVER NORMAL", "            if(causeExplosion)\n            {\n                __state.canPostStyle = true;\n\n                // REVOLVER NORMAL\n                if (Coin_ReflectRevolver.shootingAltBeam == null)\n                {\n                    if(ConfigManager.orbStrikeRevolverExplosion.value)\n                    {\n                        GameObject explosion = GameObject.Instantiate(Plugin.explosion, /*__instance.gameObject.transform.position*/__2, Quaternion.identity);\n                        foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                        {\n                            exp.enemy = false;\n                            exp.hitterWeapon = \"\";\n                            exp.maxSize *= ConfigManager.orbStrikeRevolverExplosionSize.value;\n                            exp.speed *= ConfigManager.orbStrikeRevolverExplosionSize.value;\n                            exp.damage = (int)(exp.damage * ConfigManager.orbStrikeRevolverExplosionDamage.value);\n                        }\n\n                        OrbitalExplosionInfo info = explosion.AddComponent<OrbitalExplosionInfo>();\n                        info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                        info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                        __state.info = info;\n                    }\n                }", "                        foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                        {\n                            exp.enemy = false;\n                            exp.hitterWeapon = \"\";\n                            exp.maxSize *= ConfigManager.orbStrikeRevolverExplosionSize.value;\n                            exp.speed *= ConfigManager.orbStrikeRevolverExplosionSize.value;\n                            exp.damage = (int)(exp.damage * ConfigManager.orbStrikeRevolverExplosionDamage.value);\n                        }\n\n                        OrbitalExplosionInfo info = explosion.AddComponent<OrbitalExplosionInfo>();\n                        info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                        info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                        __state.info = info;\n                    }\n                }", "                else if (Coin_ReflectRevolver.shootingAltBeam.TryGetComponent(out RevolverBeam beam))\n                {\n                    if (beam.beamType == BeamType.Revolver)\n                    {\n                        // REVOLVER CHARGED (NORMAL + ALT. IF DISTINCTION IS NEEDED, USE beam.strongAlt FOR ALT)\n                        if (beam.ultraRicocheter)\n                        {\n                            if(ConfigManager.orbStrikeRevolverChargedInsignia.value)\n                            {\n                                GameObject insignia = GameObject.Instantiate(Plugin.virtueInsignia, /*__instance.transform.position*/__2, Quaternion.identity);\n                                // This is required for ff override to detect this insignia as non ff attack\n                                insignia.gameObject.name = \"PlayerSpawned\";\n                                float horizontalSize = ConfigManager.orbStrikeRevolverChargedInsigniaSize.value;\n                                insignia.transform.localScale = new Vector3(horizontalSize, insignia.transform.localScale.y, horizontalSize);\n                                VirtueInsignia comp = insignia.GetComponent<VirtueInsignia>();\n                                comp.windUpSpeedMultiplier = ConfigManager.orbStrikeRevolverChargedInsigniaDelayBoost.value;\n                                comp.damage = ConfigManager.orbStrikeRevolverChargedInsigniaDamage.value;\n                                comp.predictive = false;\n                                comp.hadParent = false;\n                                comp.noTracking = true;\n\n                                StyleHUD.Instance.AddPoints(ConfigManager.orbStrikeRevolverChargedStylePoint.value, ConfigManager.orbStrikeRevolverChargedStyleText.guid);\n                                __state.canPostStyle = false;\n                            }\n                        }\n                        // REVOLVER ALT\n                        else\n                        {", "                            if (ConfigManager.orbStrikeRevolverExplosion.value)\n                            {\n                                GameObject explosion = GameObject.Instantiate(Plugin.explosion, /*__instance.gameObject.transform.position*/__2, Quaternion.identity);\n                                foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                                {\n                                    exp.enemy = false;\n                                    exp.hitterWeapon = \"\";\n                                    exp.maxSize *= ConfigManager.orbStrikeRevolverExplosionSize.value;\n                                    exp.speed *= ConfigManager.orbStrikeRevolverExplosionSize.value;\n                                    exp.damage = (int)(exp.damage * ConfigManager.orbStrikeRevolverExplosionDamage.value);\n                                }\n\n                                OrbitalExplosionInfo info = explosion.AddComponent<OrbitalExplosionInfo>();\n                                info.id = ConfigManager.orbStrikeRevolverStyleText.guid;\n                                info.points = ConfigManager.orbStrikeRevolverStylePoint.value;\n                                __state.info = info;\n                            }\n                        }\n                    }\n                    // ELECTRIC RAILCANNON", "                    else if (beam.beamType == BeamType.Railgun && beam.hitAmount > 500)\n                    {\n                        if(ConfigManager.orbStrikeElectricCannonExplosion.value)\n                        {\n                            GameObject lighning = GameObject.Instantiate(Plugin.lightningStrikeExplosive, /*__instance.gameObject.transform.position*/ __2, Quaternion.identity);\n                            foreach (Explosion exp in lighning.GetComponentsInChildren<Explosion>())\n                            {\n                                exp.enemy = false;\n                                exp.hitterWeapon = \"\";\n\n                                if (exp.damage == 0)\n                                    exp.maxSize /= 2;\n\n                                exp.maxSize *= ConfigManager.orbStrikeElectricCannonExplosionSize.value;\n                                exp.speed *= ConfigManager.orbStrikeElectricCannonExplosionSize.value;\n                                exp.damage = (int)(exp.damage * ConfigManager.orbStrikeElectricCannonExplosionDamage.value);\n\n                                exp.canHit = AffectedSubjects.All;\n                            }\n\n                            OrbitalExplosionInfo info = lighning.AddComponent<OrbitalExplosionInfo>();\n                            info.id = ConfigManager.orbStrikeElectricCannonStyleText.guid;\n                            info.points = ConfigManager.orbStrikeElectricCannonStylePoint.value;\n                            __state.info = info;\n                        }\n                    }\n                    // MALICIOUS RAILCANNON", "                                if (exp.damage == 0)\n                                    exp.maxSize /= 2;\n\n                                exp.maxSize *= ConfigManager.orbStrikeElectricCannonExplosionSize.value;\n                                exp.speed *= ConfigManager.orbStrikeElectricCannonExplosionSize.value;\n                                exp.damage = (int)(exp.damage * ConfigManager.orbStrikeElectricCannonExplosionDamage.value);\n\n                                exp.canHit = AffectedSubjects.All;\n                            }\n\n                            OrbitalExplosionInfo info = lighning.AddComponent<OrbitalExplosionInfo>();\n                            info.id = ConfigManager.orbStrikeElectricCannonStyleText.guid;\n                            info.points = ConfigManager.orbStrikeElectricCannonStylePoint.value;\n                            __state.info = info;\n                        }\n                    }\n                    // MALICIOUS RAILCANNON", "                    else if (beam.beamType == BeamType.Railgun)\n                    {\n                        // UNUSED\n                        causeExplosion = false;\n                    }\n                    // MALICIOUS BEAM\n                    else if (beam.beamType == BeamType.MaliciousFace)\n                    {\n                        GameObject explosion = GameObject.Instantiate(Plugin.sisyphiusPrimeExplosion, /*__instance.gameObject.transform.position*/__2, Quaternion.identity);\n                        foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                        {\n                            exp.enemy = false;\n                            exp.hitterWeapon = \"\";\n                            exp.maxSize *= ConfigManager.maliciousChargebackExplosionSizeMultiplier.value;\n                            exp.speed *= ConfigManager.maliciousChargebackExplosionSizeMultiplier.value;\n                            exp.damage = (int)(exp.damage * ConfigManager.maliciousChargebackExplosionDamageMultiplier.value);\n                        }\n\n                        OrbitalExplosionInfo info = explosion.AddComponent<OrbitalExplosionInfo>();\n                        info.id = ConfigManager.maliciousChargebackStyleText.guid;\n                        info.points = ConfigManager.maliciousChargebackStylePoint.value;\n                        __state.info = info;\n                    }\n                    // SENTRY BEAM", "                        foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                        {\n                            exp.enemy = false;\n                            exp.hitterWeapon = \"\";\n                            exp.maxSize *= ConfigManager.maliciousChargebackExplosionSizeMultiplier.value;\n                            exp.speed *= ConfigManager.maliciousChargebackExplosionSizeMultiplier.value;\n                            exp.damage = (int)(exp.damage * ConfigManager.maliciousChargebackExplosionDamageMultiplier.value);\n                        }\n\n                        OrbitalExplosionInfo info = explosion.AddComponent<OrbitalExplosionInfo>();\n                        info.id = ConfigManager.maliciousChargebackStyleText.guid;\n                        info.points = ConfigManager.maliciousChargebackStylePoint.value;\n                        __state.info = info;\n                    }\n                    // SENTRY BEAM", "                    else if (beam.beamType == BeamType.Enemy)\n                    {\n                        StyleHUD.Instance.AddPoints(ConfigManager.sentryChargebackStylePoint.value, ConfigManager.sentryChargebackStyleText.formattedString);\n\n                        if (ConfigManager.sentryChargebackExtraBeamCount.value > 0)\n                        {\n                            List<Tuple<EnemyIdentifier, float>> enemies = UnityUtils.GetClosestEnemies(__2, ConfigManager.sentryChargebackExtraBeamCount.value, UnityUtils.doNotCollideWithPlayerValidator);\n                            foreach (Tuple<EnemyIdentifier, float> enemy in enemies)\n                            {\n                                RevolverBeam newBeam = GameObject.Instantiate(beam, beam.transform.position, Quaternion.identity);\n                                newBeam.hitEids.Add(__instance);\n                                newBeam.transform.LookAt(enemy.Item1.transform);\n                                GameObject.Destroy(newBeam.GetComponent<OrbitalStrikeFlag>());\n                            }\n                        }\n\n                        RevolverBeam_ExecuteHits.isOrbitalRay = false;\n                    }\n                }\n", "                if (causeExplosion && RevolverBeam_ExecuteHits.orbitalBeamFlag != null)\n                    RevolverBeam_ExecuteHits.orbitalBeamFlag.exploded = true;\n\n                Debug.Log(\"Applied orbital strike explosion\");\n            }\n\n            return true;\n        }\n\n        static void Postfix(EnemyIdentifier __instance, StateInfo __state)\n        {", "            if(__state.canPostStyle && __instance.dead && __state.info != null)\n            {\n                __state.info.active = false;\n                if (__state.info.id != \"\")\n                    StyleHUD.Instance.AddPoints(__state.info.points, __state.info.id);\n            }\n        }\n    }\n\n    class RevolverBeam_HitSomething\n    {\n        static bool Prefix(RevolverBeam __instance, out GameObject __state)\n        {\n            __state = null;\n", "    class RevolverBeam_HitSomething\n    {\n        static bool Prefix(RevolverBeam __instance, out GameObject __state)\n        {\n            __state = null;\n\n            if (RevolverBeam_ExecuteHits.orbitalBeam == null)\n                return true;\n            if (__instance.beamType != BeamType.Railgun)\n                return true;\n            if (__instance.hitAmount != 1)\n                return true;\n", "            if (__instance.beamType != BeamType.Railgun)\n                return true;\n            if (__instance.hitAmount != 1)\n                return true;\n\n            if (RevolverBeam_ExecuteHits.orbitalBeam.GetInstanceID() == __instance.GetInstanceID())\n            {\n                if (!RevolverBeam_ExecuteHits.orbitalBeamFlag.exploded && ConfigManager.orbStrikeMaliciousCannonExplosion.value)\n                {\n                    Debug.Log(\"MALICIOUS EXPLOSION EXTRA SIZE\");\n\n                    GameObject tempExp = GameObject.Instantiate(__instance.hitParticle, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);", "                    foreach (Explosion exp in tempExp.GetComponentsInChildren<Explosion>())\n                    {\n                        exp.maxSize *= ConfigManager.orbStrikeMaliciousCannonExplosionSizeMultiplier.value;\n                        exp.speed *= ConfigManager.orbStrikeMaliciousCannonExplosionSizeMultiplier.value;\n                        exp.damage = (int)(exp.damage * ConfigManager.orbStrikeMaliciousCannonExplosionDamageMultiplier.value);\n                    }\n                    __instance.hitParticle = tempExp;\n\n                    OrbitalExplosionInfo info = tempExp.AddComponent<OrbitalExplosionInfo>();\n                    info.id = ConfigManager.orbStrikeMaliciousCannonStyleText.guid;\n                    info.points = ConfigManager.orbStrikeMaliciousCannonStylePoint.value;\n\n                    RevolverBeam_ExecuteHits.orbitalBeamFlag.exploded = true;\n                }\n                Debug.Log(\"Already exploded\");\n            }\n            else\n                Debug.Log(\"Not the same instance\");\n\n            return true;\n        }\n\n        static void Postfix(RevolverBeam __instance, GameObject __state)\n        {", "            if (__state != null)\n                GameObject.Destroy(__state);\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/CustomProgress.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\n\nnamespace Ultrapain.Patches\n{\n    /*[HarmonyPatch(typeof(GameProgressSaver), \"GetGameProgress\", new Type[] { typeof(int) })]\n    class CustomProgress_GetGameProgress\n    {\n        static bool Prefix(ref int __0)\n        {\n            if (Plugin.ultrapainDifficulty)\n                __0 = 100;\n            return true;\n        }\n    }\n\n    [HarmonyPatch(typeof(GameProgressSaver), \"GetGameProgress\", new Type[] { typeof(string), typeof(int) }, new ArgumentType[] { ArgumentType.Out, ArgumentType.Normal })]", "            if (Plugin.ultrapainDifficulty)\n                __0 = 100;\n            return true;\n        }\n    }\n\n    [HarmonyPatch(typeof(GameProgressSaver), \"GetGameProgress\", new Type[] { typeof(string), typeof(int) }, new ArgumentType[] { ArgumentType.Out, ArgumentType.Normal })]\n    class CustomProgress_GetGameProgress2\n    {\n        static bool Prefix(ref int __1)\n        {", "            if (Plugin.ultrapainDifficulty)\n                __1 = 100;\n            return true;\n        }\n    }\n\n    [HarmonyPatch(typeof(GameProgressSaver), \"GetPrime\")]\n    class CustomProgress_GetPrime\n    {\n        static bool Prefix(ref int __1)\n        {", "            if (Plugin.ultrapainDifficulty)\n                __1 = 100;\n            return true;\n        }\n    }\n\n    [HarmonyPatch(typeof(GameProgressSaver), \"GetPrime\")]\n    class CustomProgress_GetProgress\n    {\n        static bool Prefix(ref int __0)\n        {", "            if (Plugin.ultrapainDifficulty)\n                __0 = 100;\n            return true;\n        }\n    }\n\n    [HarmonyPatch(typeof(RankData), MethodType.Constructor, new Type[] { typeof(StatsManager) })]\n    class CustomProgress_RankDataCTOR\n    {\n        static bool Prefix(RankData __instance, out int __state)\n        {\n            __state = -1;", "            if (Plugin.ultrapainDifficulty)\n            {\n                __state = MonoSingleton<PrefsManager>.Instance.GetInt(\"difficulty\", 0);\n                MonoSingleton<PrefsManager>.Instance.SetInt(\"difficulty\", 100);\n            }\n\n            return true;\n        }\n\n        static void Postfix(RankData __instance, int __state)\n        {", "            if (__state >= 0)\n            {\n                MonoSingleton<PrefsManager>.Instance.SetInt(\"difficulty\", __state);\n            }\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(PrefsManager), \"GetInt\")]\n    class StatsManager_DifficultyOverride\n    {\n        static bool Prefix(string __0, ref int __result)\n        {", "    class StatsManager_DifficultyOverride\n    {\n        static bool Prefix(string __0, ref int __result)\n        {\n            if (__0 == \"difficulty\" && Plugin.realUltrapainDifficulty)\n            {\n                __result = 5;\n                return false;\n            }\n\n            return true;\n        }\n    }*/\n", "    class PrefsManager_Ctor\n    {\n        static void Postfix(ref Dictionary<string, Func<object, object>> ___propertyValidators)\n        {\n            ___propertyValidators.Clear();\n        }\n    }\n\n    class PrefsManager_EnsureValid\n    {\n        static bool Prefix(string __0, object __1, ref object __result)\n        {\n            __result = __1;\n            return false;\n        }\n    }\n}\n", "    class PrefsManager_EnsureValid\n    {\n        static bool Prefix(string __0, object __1, ref object __result)\n        {\n            __result = __1;\n            return false;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/DifficultyTitle.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine.UI;\n\nnamespace Ultrapain.Patches\n{\n    public class DifficultyTitle_Check_Patch\n    {\n        static void Postfix(DifficultyTitle __instance, ref Text ___txt)\n        {\n            if (___txt.text.Contains(\"ULTRAKILL MUST DIE\") && Plugin.realUltrapainDifficulty)\n                ___txt.text = ___txt.text.Replace(\"ULTRAKILL MUST DIE\", ConfigManager.pluginName.value);\n", "            if (___txt.text.Contains(\"ULTRAKILL MUST DIE\") && Plugin.realUltrapainDifficulty)\n                ___txt.text = ___txt.text.Replace(\"ULTRAKILL MUST DIE\", ConfigManager.pluginName.value);\n\n            //else if (___txt.text == \"-- VIOLENT --\" && Plugin.ultrapainDifficulty)\n            //    ___txt.text = \"-- ULTRAPAIN --\";\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Drone.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.ConstrainedExecution;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class Drone_Start_Patch\n    {\n        static void Postfix(Drone __instance, ref EnemyIdentifier ___eid)\n        {", "namespace Ultrapain.Patches\n{\n    class Drone_Start_Patch\n    {\n        static void Postfix(Drone __instance, ref EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Drone)\n                return;\n\n            __instance.gameObject.AddComponent<DroneFlag>();\n        }\n    }\n", "    class Drone_PlaySound_Patch\n    {\n        static FieldInfo antennaFlashField = typeof(Turret).GetField(\"antennaFlash\", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);\n        static ParticleSystem antennaFlash;\n        public static Color defaultLineColor = new Color(1f, 0.44f, 0.74f);\n\n        static bool Prefix(Drone __instance, EnemyIdentifier ___eid, AudioClip __0)\n        {\n            if (___eid.enemyType != EnemyType.Drone)\n                return true;\n", "            if (___eid.enemyType != EnemyType.Drone)\n                return true;\n\n            if(__0 == __instance.windUpSound)\n            {\n                DroneFlag flag = __instance.GetComponent<DroneFlag>();\n                if (flag == null)\n                    return true;\n\n                List<Tuple<DroneFlag.Firemode, float>> chances = new List<Tuple<DroneFlag.Firemode, float>>();\n                if (ConfigManager.droneProjectileToggle.value)\n                    chances.Add(new Tuple<DroneFlag.Firemode, float>(DroneFlag.Firemode.Projectile, ConfigManager.droneProjectileChance.value));", "                if (ConfigManager.droneProjectileToggle.value)\n                    chances.Add(new Tuple<DroneFlag.Firemode, float>(DroneFlag.Firemode.Projectile, ConfigManager.droneProjectileChance.value));\n                if (ConfigManager.droneExplosionBeamToggle.value)\n                    chances.Add(new Tuple<DroneFlag.Firemode, float>(DroneFlag.Firemode.Explosive, ConfigManager.droneExplosionBeamChance.value));\n                if (ConfigManager.droneSentryBeamToggle.value)\n                    chances.Add(new Tuple<DroneFlag.Firemode, float>(DroneFlag.Firemode.TurretBeam, ConfigManager.droneSentryBeamChance.value));\n\n                if (chances.Count == 0 || chances.Sum(item => item.Item2) <= 0)\n                    flag.currentMode = DroneFlag.Firemode.Projectile;\n                else\n                    flag.currentMode = UnityUtils.GetRandomFloatWeightedItem(chances, item => item.Item2).Item1;\n", "                if (flag.currentMode == DroneFlag.Firemode.Projectile)\n                {\n                    flag.attackDelay = ConfigManager.droneProjectileDelay.value;\n                    return true;\n                }\n                else if (flag.currentMode == DroneFlag.Firemode.Explosive)\n                {\n                    flag.attackDelay = ConfigManager.droneExplosionBeamDelay.value;\n\n                    GameObject chargeEffect = GameObject.Instantiate(Plugin.chargeEffect, __instance.transform);\n                    chargeEffect.transform.localPosition = new Vector3(0, 0, 0.8f);\n                    chargeEffect.transform.localScale = Vector3.zero;\n\n                    float duration = ConfigManager.droneExplosionBeamDelay.value / ___eid.totalSpeedModifier;\n                    RemoveOnTime remover = chargeEffect.AddComponent<RemoveOnTime>();\n                    remover.time = duration;\n                    CommonLinearScaler scaler = chargeEffect.AddComponent<CommonLinearScaler>();\n                    scaler.targetTransform = scaler.transform;\n                    scaler.scaleSpeed = 1f / duration;\n                    CommonAudioPitchScaler pitchScaler = chargeEffect.AddComponent<CommonAudioPitchScaler>();\n                    pitchScaler.targetAud = chargeEffect.GetComponent<AudioSource>();\n                    pitchScaler.scaleSpeed = 1f / duration;\n\n                    return false;\n                }", "                else if (flag.currentMode == DroneFlag.Firemode.TurretBeam)\n                {\n                    flag.attackDelay = ConfigManager.droneSentryBeamDelay.value;\n                    if(ConfigManager.droneDrawSentryBeamLine.value)\n                    {\n                        flag.lr.enabled = true;\n                        flag.SetLineColor(ConfigManager.droneSentryBeamLineNormalColor.value);\n                        flag.Invoke(\"LineRendererColorToWarning\", Mathf.Max(0.01f, (flag.attackDelay / ___eid.totalSpeedModifier) - ConfigManager.droneSentryBeamLineIndicatorDelay.value));\n                    }\n\n                    if (flag.particleSystem == null)\n                    {", "                    if (flag.particleSystem == null)\n                    {\n                        if (antennaFlash == null)\n                            antennaFlash = (ParticleSystem)antennaFlashField.GetValue(Plugin.turret);\n                        flag.particleSystem = GameObject.Instantiate(antennaFlash, __instance.transform);\n                        flag.particleSystem.transform.localPosition = new Vector3(0, 0, 2);\n                    }\n\n                    flag.particleSystem.Play();\n                    GameObject flash = GameObject.Instantiate(Plugin.turretFinalFlash, __instance.transform);\n                    GameObject.Destroy(flash.transform.Find(\"MuzzleFlash/muzzleflash\").gameObject);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class Drone_Shoot_Patch\n    {\n        static bool Prefix(Drone __instance, ref EnemyIdentifier ___eid)\n        {\n            DroneFlag flag = __instance.GetComponent<DroneFlag>();\n            if(flag == null || __instance.crashing)\n                return true;\n\n            DroneFlag.Firemode mode = flag.currentMode;\n\n            if (mode == DroneFlag.Firemode.Projectile)\n                return true;", "            if (mode == DroneFlag.Firemode.Projectile)\n                return true;\n            if (mode == DroneFlag.Firemode.Explosive)\n            {\n                GameObject beam = GameObject.Instantiate(Plugin.beam.gameObject, __instance.transform.position + __instance.transform.forward, __instance.transform.rotation);\n\n                RevolverBeam revBeam = beam.GetComponent<RevolverBeam>();\n                revBeam.hitParticle = Plugin.shotgunGrenade.gameObject.GetComponent<Grenade>().explosion;\n                revBeam.damage /= 2;\n                revBeam.damage *= ___eid.totalDamageModifier;\n\n                return false;\n            }", "            if(mode == DroneFlag.Firemode.TurretBeam)\n            {\n                GameObject turretBeam = GameObject.Instantiate(Plugin.turretBeam.gameObject, __instance.transform.position + __instance.transform.forward * 2f, __instance.transform.rotation);\n                if (turretBeam.TryGetComponent<RevolverBeam>(out RevolverBeam revBeam))\n                {\n                    revBeam.damage = ConfigManager.droneSentryBeamDamage.value;\n                    revBeam.damage *= ___eid.totalDamageModifier;\n                    revBeam.alternateStartPoint = __instance.transform.position + __instance.transform.forward;\n                    revBeam.ignoreEnemyType = EnemyType.Drone;\n                }\n\n                flag.lr.enabled = false;\n\n                return false;\n            }\n\n            Debug.LogError($\"Drone fire mode in impossible state. Current value: {mode} : {(int)mode}\");\n            return true;\n        }\n    }\n", "    class Drone_Update\n    {\n        static void Postfix(Drone __instance, EnemyIdentifier ___eid, ref float ___attackCooldown, int ___difficulty)\n        {\n            if (___eid.enemyType != EnemyType.Drone)\n                return;\n\n            DroneFlag flag = __instance.GetComponent<DroneFlag>();\n            if (flag == null || flag.attackDelay < 0)\n                return;\n\n            float attackSpeedDecay = (float)(___difficulty / 2);", "            if (flag == null || flag.attackDelay < 0)\n                return;\n\n            float attackSpeedDecay = (float)(___difficulty / 2);\n            if (___difficulty == 1)\n            {\n                attackSpeedDecay = 0.75f;\n            }\n            else if (___difficulty == 0)\n            {\n                attackSpeedDecay = 0.5f;\n            }\n            attackSpeedDecay *= ___eid.totalSpeedModifier;\n\n            float delay = flag.attackDelay / ___eid.totalSpeedModifier;\n            __instance.CancelInvoke(\"Shoot\");\n            __instance.Invoke(\"Shoot\", delay);\n            ___attackCooldown = UnityEngine.Random.Range(2f, 4f) + (flag.attackDelay - 0.75f) * attackSpeedDecay;\n            flag.attackDelay = -1;\n        }\n    }\n", "            else if (___difficulty == 0)\n            {\n                attackSpeedDecay = 0.5f;\n            }\n            attackSpeedDecay *= ___eid.totalSpeedModifier;\n\n            float delay = flag.attackDelay / ___eid.totalSpeedModifier;\n            __instance.CancelInvoke(\"Shoot\");\n            __instance.Invoke(\"Shoot\", delay);\n            ___attackCooldown = UnityEngine.Random.Range(2f, 4f) + (flag.attackDelay - 0.75f) * attackSpeedDecay;\n            flag.attackDelay = -1;\n        }\n    }\n", "    class DroneFlag : MonoBehaviour\n    {\n        public enum Firemode : int\n        {\n            Projectile = 0,\n            Explosive,\n            TurretBeam\n        }\n\n        public ParticleSystem particleSystem;\n        public LineRenderer lr;", "        public ParticleSystem particleSystem;\n        public LineRenderer lr;\n        public Firemode currentMode = Firemode.Projectile;\n        private static Firemode[] allModes = Enum.GetValues(typeof(Firemode)) as Firemode[];\n\n        static FieldInfo turretAimLine = typeof(Turret).GetField(\"aimLine\", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);\n        static Material whiteMat;\n        public void Awake()\n        {\n            lr = gameObject.AddComponent<LineRenderer>();\n            lr.enabled = false;\n            lr.receiveShadows = false;\n            lr.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n            lr.startWidth = lr.endWidth = lr.widthMultiplier = 0.025f;\n", "            if (whiteMat == null)\n                whiteMat = ((LineRenderer)turretAimLine.GetValue(Plugin.turret)).material;\n\n            lr.material = whiteMat;\n        }\n\n        public void SetLineColor(Color c)\n        {\n            Gradient gradient = new Gradient();\n            GradientColorKey[] array = new GradientColorKey[1];\n            array[0].color = c;\n            GradientAlphaKey[] array2 = new GradientAlphaKey[1];\n            array2[0].alpha = 1f;\n            gradient.SetKeys(array, array2);\n            lr.colorGradient = gradient;\n        }\n", "        public void LineRendererColorToWarning()\n        {\n            SetLineColor(ConfigManager.droneSentryBeamLineWarningColor.value);\n        }\n\n        public float attackDelay = -1;\n        public bool homingTowardsPlayer = false;\n\n        Transform target;\n        Rigidbody rb;\n", "        private void Update()\n        {\n            if(homingTowardsPlayer)\n            {\n                if(target == null)\n                    target = PlayerTracker.Instance.GetTarget();\n                if (rb == null)\n                    rb = GetComponent<Rigidbody>();\n\n                Quaternion to = Quaternion.LookRotation(target.position/* + MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity()*/ - transform.position);\n                transform.rotation = Quaternion.RotateTowards(transform.rotation, to, Time.deltaTime * ConfigManager.droneHomeTurnSpeed.value);\n                rb.velocity = transform.forward * rb.velocity.magnitude;\n            }\n            ", "            if(lr.enabled)\n            {\n                lr.SetPosition(0, transform.position);\n                lr.SetPosition(1, transform.position + transform.forward * 1000);\n            }\n        }\n    }\n\n    class Drone_Death_Patch\n    {\n        static bool Prefix(Drone __instance, EnemyIdentifier ___eid)\n        {", "    class Drone_Death_Patch\n    {\n        static bool Prefix(Drone __instance, EnemyIdentifier ___eid)\n        {\n            if (___eid.enemyType != EnemyType.Drone || __instance.crashing)\n                return true;\n\n            DroneFlag flag = __instance.GetComponent<DroneFlag>();\n            if (flag == null)\n                return true;\n", "            if (flag == null)\n                return true;\n\n            if (___eid.hitter == \"heavypunch\" || ___eid.hitter == \"punch\")\n                return true;\n\n            flag.homingTowardsPlayer = true;\n            return true;\n        }\n    }\n", "    class Drone_GetHurt_Patch\n    {\n        static bool Prefix(Drone __instance, EnemyIdentifier ___eid, bool ___parried)\n        {\n            if((___eid.hitter == \"shotgunzone\" || ___eid.hitter == \"punch\") && !___parried)\n            {\n                DroneFlag flag = __instance.GetComponent<DroneFlag>();\n                if (flag == null)\n                    return true;\n                flag.homingTowardsPlayer = false;\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/V2Second.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing ULTRAKILL.Cheats;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Ultrapain.Patches", "\nnamespace Ultrapain.Patches\n{\n    public class V2SecondFlag : MonoBehaviour\n    {\n        public V2RocketLauncher rocketLauncher;\n        public V2MaliciousCannon maliciousCannon;\n        public Collider v2collider;\n\n        public Transform targetGrenade;\n    }\n", "        public Transform targetGrenade;\n    }\n\n    public class V2RocketLauncher : MonoBehaviour\n    {\n        public Transform shootPoint;\n        public Collider v2collider;\n        AudioSource aud;\n\n        float altFireCharge = 0f;\n        bool altFireCharging = false;\n\n        void Awake()\n        {\n            aud = GetComponent<AudioSource>();", "            if (aud == null)\n                aud = gameObject.AddComponent<AudioSource>();\n\n            aud.playOnAwake = false;\n            aud.clip = Plugin.cannonBallChargeAudio;\n        }\n\n        void Update()\n        {\n            if (altFireCharging)\n            {", "            if (altFireCharging)\n            {\n                if (!aud.isPlaying)\n                {\n                    aud.pitch = Mathf.Min(1f, altFireCharge) + 0.5f;\n                    aud.Play();\n                }\n\n                altFireCharge += Time.deltaTime;\n            }\n        }\n\n        void OnDisable()\n        {\n            altFireCharging = false;\n        }\n\n        void PrepareFire()\n        {\n            Instantiate<GameObject>(Plugin.v2flashUnparryable, this.shootPoint.position, this.shootPoint.rotation).transform.localScale *= 4f;\n        }\n\n        void SetRocketRotation(Transform rocket)\n        {\n            // OLD PREDICTION\n            /*Rigidbody rb = rocket.GetComponent<Rigidbody>();\n            Grenade grn = rocket.GetComponent<Grenade>();\n            float magnitude = grn.rocketSpeed;\n\n            //float distance = Vector3.Distance(MonoSingleton<PlayerTracker>.Instance.gameObject.transform.position, __0.transform.position);\n            float distance = Vector3.Distance(MonoSingleton<PlayerTracker>.Instance.GetTarget().position, rocket.transform.position);\n            Vector3 predictedPosition = MonoSingleton<PlayerTracker>.Instance.PredictPlayerPosition(1.0f);\n\n            float velocity = Mathf.Clamp(distance, Mathf.Max(magnitude - 5.0f, 0), magnitude + 5);\n\n            rocket.transform.LookAt(predictedPosition);\n            rocket.GetComponent<Grenade>().rocketSpeed = velocity;\n            rb.maxAngularVelocity = velocity;\n            rb.velocity = Vector3.zero;\n            rb.AddRelativeForce(Vector3.forward * magnitude * rb.mass, ForceMode.VelocityChange);\n            // rb.velocity = rocket.transform.forward * velocity;\n            */\n\n            // NEW PREDICTION\n            Vector3 playerPos = Tools.PredictPlayerPosition(0.5f);\n            rocket.LookAt(playerPos);\n            Rigidbody rb = rocket.GetComponent<Rigidbody>();\n            rb.velocity = Vector3.zero;\n            rb.AddForce(rocket.transform.forward * 10000f);\n        }\n\n        void Fire()\n        {\n            GameObject rocket = Instantiate<GameObject>(Plugin.rocket, shootPoint.transform.position, shootPoint.transform.rotation);\n            rocket.transform.position = new Vector3(rocket.transform.position.x, v2collider.bounds.center.y, rocket.transform.position.z);\n            rocket.transform.LookAt(PlayerTracker.Instance.GetTarget());\n            rocket.transform.position += rocket.transform.forward * 2f;\n            SetRocketRotation(rocket.transform);\n            Grenade component = rocket.GetComponent<Grenade>();", "            if (component)\n            {\n                component.harmlessExplosion = component.explosion;\n                component.enemy = true;\n                component.CanCollideWithPlayer(true);\n            }\n\n            //Physics.IgnoreCollision(rocket.GetComponent<Collider>(), v2collider);\n        }\n\n        void PrepareAltFire()\n        {\n            altFireCharging = true;\n        }\n\n        void AltFire()\n        {\n            altFireCharging = false;\n            altFireCharge = 0;\n            GameObject cannonBall = Instantiate(Plugin.cannonBall, shootPoint.transform.position, shootPoint.transform.rotation);\n            cannonBall.transform.position = new Vector3(cannonBall.transform.position.x, v2collider.bounds.center.y, cannonBall.transform.position.z);\n            cannonBall.transform.LookAt(PlayerTracker.Instance.GetTarget());\n            cannonBall.transform.position += cannonBall.transform.forward * 2f;\n", "            if(cannonBall.TryGetComponent<Cannonball>(out Cannonball comp))\n            {\n                comp.sourceWeapon = this.gameObject;\n            }\n\n            if(cannonBall.TryGetComponent<Rigidbody>(out Rigidbody rb))\n            {\n                rb.velocity = rb.transform.forward * 150f;\n            }\n        }\n\n        static MethodInfo bounce = typeof(Cannonball).GetMethod(\"Bounce\", BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);", "        public static bool CannonBallTriggerPrefix(Cannonball __instance, Collider __0)\n        {\n            if(__instance.sourceWeapon != null && __instance.sourceWeapon.GetComponent<V2RocketLauncher>() != null)\n            {\n                if (__0.gameObject.tag == \"Player\")\n                {\n                    if (!__instance.hasBounced)\n                    {\n                        bounce.Invoke(__instance, new object[0]);\n                        NewMovement.Instance.GetHurt((int)__instance.damage, true, 1, false, false);\n                        return false;\n                    }\n                }\n                else\n                {\n                    EnemyIdentifierIdentifier eii = __0.gameObject.GetComponent<EnemyIdentifierIdentifier>();", "                    if (!__instance.launched && eii != null && (eii.eid.enemyType == EnemyType.V2 || eii.eid.enemyType == EnemyType.V2Second))\n                        return false;\n                }\n\n                return true;\n            }\n\n            return true;\n        }\n    }\n", "    public class V2MaliciousCannon : MonoBehaviour\n    {\n        //readonly static FieldInfo maliciousIgnorePlayer = typeof(RevolverBeam).GetField(\"maliciousIgnorePlayer\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n        Transform shootPoint;\n        public Transform v2trans;\n        public float cooldown = 0f;\n\n        static readonly string debugTag = \"[V2][MalCannonShoot]\";\n\n        void Awake()\n        {\n            shootPoint = UnityUtils.GetChildByNameRecursively(transform, \"Shootpoint\");\n        }\n\n        void PrepareFire()\n        {\n            Instantiate<GameObject>(Plugin.v2flashUnparryable, this.shootPoint.position, this.shootPoint.rotation).transform.localScale *= 4f;\n        }\n\n        void Fire()\n        {\n            cooldown = ConfigManager.v2SecondMalCannonSnipeCooldown.value;\n\n            Transform target = V2Utils.GetClosestGrenade();\n            Vector3 targetPosition = Vector3.zero;\n", "            if (target != null)\n            {\n                Debug.Log($\"{debugTag} Targeted grenade\");\n                targetPosition = target.position;\n            }\n            else\n            {\n                Transform playerTarget = PlayerTracker.Instance.GetTarget();\n                /*if (Physics.Raycast(new Ray(playerTarget.position, Vector3.down), out RaycastHit hit, 100f, new LayerMask() { value = (1 << 8 | 1 << 24) }, QueryTriggerInteraction.Ignore))\n                {\n                    Debug.Log($\"{debugTag} Targeted ground below player\");\n                    targetPosition = hit.point;\n                }\n                else\n                {*/\n                    Debug.Log($\"{debugTag} Targeted player with random spread\");\n                    targetPosition = playerTarget.transform.position + UnityEngine.Random.onUnitSphere * 2f;\n                //}\n            }\n\n            GameObject beam = Instantiate(Plugin.maliciousCannonBeam, v2trans.position, Quaternion.identity);\n            beam.transform.position = new Vector3(beam.transform.position.x, v2trans.GetComponent<Collider>().bounds.center.y, beam.transform.position.z);\n            beam.transform.LookAt(targetPosition);\n            beam.transform.position += beam.transform.forward * 2f;", "                /*if (Physics.Raycast(new Ray(playerTarget.position, Vector3.down), out RaycastHit hit, 100f, new LayerMask() { value = (1 << 8 | 1 << 24) }, QueryTriggerInteraction.Ignore))\n                {\n                    Debug.Log($\"{debugTag} Targeted ground below player\");\n                    targetPosition = hit.point;\n                }\n                else\n                {*/\n                    Debug.Log($\"{debugTag} Targeted player with random spread\");\n                    targetPosition = playerTarget.transform.position + UnityEngine.Random.onUnitSphere * 2f;\n                //}\n            }\n\n            GameObject beam = Instantiate(Plugin.maliciousCannonBeam, v2trans.position, Quaternion.identity);\n            beam.transform.position = new Vector3(beam.transform.position.x, v2trans.GetComponent<Collider>().bounds.center.y, beam.transform.position.z);\n            beam.transform.LookAt(targetPosition);\n            beam.transform.position += beam.transform.forward * 2f;", "            if (beam.TryGetComponent<RevolverBeam>(out RevolverBeam comp))\n            {\n                comp.alternateStartPoint = shootPoint.transform.position;\n                comp.ignoreEnemyType = EnemyType.V2Second;\n                comp.sourceWeapon = gameObject;\n                //comp.beamType = BeamType.Enemy;\n                //maliciousIgnorePlayer.SetValue(comp, false);\n            }\n        }\n\n        void PrepareAltFire()\n        {\n\n        }\n\n        void AltFire()\n        {\n\n        }\n    }\n\n", "    class V2SecondUpdate\n    {\n        static bool Prefix(V2 __instance, ref int ___currentWeapon, ref Transform ___overrideTarget, ref Rigidbody ___overrideTargetRb, ref float ___shootCooldown,\n            ref bool ___aboutToShoot, ref EnemyIdentifier ___eid, bool ___escaping)\n        {\n            if (!__instance.secondEncounter)\n                return true;\n\n            if (!__instance.active || ___escaping || BlindEnemies.Blind)\n                return true;\n\n            V2SecondFlag flag = __instance.GetComponent<V2SecondFlag>();", "            if (!__instance.active || ___escaping || BlindEnemies.Blind)\n                return true;\n\n            V2SecondFlag flag = __instance.GetComponent<V2SecondFlag>();\n            if (flag == null)\n                return true;\n\n            if (flag.maliciousCannon.cooldown > 0)\n                flag.maliciousCannon.cooldown = Mathf.MoveTowards(flag.maliciousCannon.cooldown, 0, Time.deltaTime);\n\n            if (flag.targetGrenade == null)\n            {\n                Transform target = V2Utils.GetClosestGrenade();\n", "            if (flag.targetGrenade == null)\n            {\n                Transform target = V2Utils.GetClosestGrenade();\n\n                //if (ConfigManager.v2SecondMalCannonSnipeToggle.value && target != null\n                //    && ___shootCooldown <= 0.9f && !___aboutToShoot && flag.maliciousCannon.cooldown == 0f)\n                if(target != null)\n                {\n                    float distanceToPlayer = Vector3.Distance(target.position, PlayerTracker.Instance.GetTarget().transform.position);\n                    float distanceToV2 = Vector3.Distance(target.position, flag.v2collider.bounds.center);\n                    if (ConfigManager.v2SecondMalCannonSnipeToggle.value && flag.maliciousCannon.cooldown == 0 && distanceToPlayer <= ConfigManager.v2SecondMalCannonSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2SecondMalCannonSnipeMinDistanceToV2.value)\n                    {\n                        flag.targetGrenade = target;\n\n                        ___shootCooldown = 1f;\n                        ___aboutToShoot = true;\n                        __instance.weapons[___currentWeapon].transform.GetChild(0).SendMessage(\"CancelAltCharge\", SendMessageOptions.DontRequireReceiver);\n                        __instance.CancelInvoke(\"ShootWeapon\");\n                        __instance.CancelInvoke(\"AltShootWeapon\");\n                        __instance.Invoke(\"ShootWeapon\", ConfigManager.v2SecondMalCannonSnipeReactTime.value / ___eid.totalSpeedModifier);\n                        \n                        V2SecondSwitchWeapon.SwitchWeapon.Invoke(__instance, new object[1] { 4 });\n                    }", "                    if (ConfigManager.v2SecondMalCannonSnipeToggle.value && flag.maliciousCannon.cooldown == 0 && distanceToPlayer <= ConfigManager.v2SecondMalCannonSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2SecondMalCannonSnipeMinDistanceToV2.value)\n                    {\n                        flag.targetGrenade = target;\n\n                        ___shootCooldown = 1f;\n                        ___aboutToShoot = true;\n                        __instance.weapons[___currentWeapon].transform.GetChild(0).SendMessage(\"CancelAltCharge\", SendMessageOptions.DontRequireReceiver);\n                        __instance.CancelInvoke(\"ShootWeapon\");\n                        __instance.CancelInvoke(\"AltShootWeapon\");\n                        __instance.Invoke(\"ShootWeapon\", ConfigManager.v2SecondMalCannonSnipeReactTime.value / ___eid.totalSpeedModifier);\n                        \n                        V2SecondSwitchWeapon.SwitchWeapon.Invoke(__instance, new object[1] { 4 });\n                    }", "                    else if(ConfigManager.v2SecondCoreSnipeToggle.value && distanceToPlayer <= ConfigManager.v2SecondCoreSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2SecondCoreSnipeMinDistanceToV2.value)\n                    {\n                        flag.targetGrenade = target;\n\n                        __instance.weapons[___currentWeapon].transform.GetChild(0).SendMessage(\"CancelAltCharge\", SendMessageOptions.DontRequireReceiver);\n                        __instance.CancelInvoke(\"ShootWeapon\");\n                        __instance.CancelInvoke(\"AltShootWeapon\");\n                        __instance.Invoke(\"ShootWeapon\", ConfigManager.v2SecondCoreSnipeReactionTime.value / ___eid.totalSpeedModifier);\n                        ___shootCooldown = 1f;\n                        ___aboutToShoot = true;\n\n                        V2SecondSwitchWeapon.SwitchWeapon.Invoke(__instance, new object[1] { 0 });\n                        Debug.Log(\"Preparing to fire for grenade\");\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class V2SecondShootWeapon\n    {\n        static bool Prefix(V2 __instance, ref int ___currentWeapon)\n        {\n            if (!__instance.secondEncounter)\n                return true;\n\n            V2SecondFlag flag = __instance.GetComponent<V2SecondFlag>();\n            if (flag == null)\n                return true;\n", "            if (flag == null)\n                return true;\n\n            if (___currentWeapon == 0)\n            {\n                //Transform closestGrenade = V2Utils.GetClosestGrenade();\n                Transform closestGrenade = flag.targetGrenade;\n                if (closestGrenade != null && ConfigManager.v2SecondCoreSnipeToggle.value)\n                {\n                    float distanceToPlayer = Vector3.Distance(closestGrenade.position, PlayerTracker.Instance.GetTarget().position);\n                    float distanceToV2 = Vector3.Distance(closestGrenade.position, flag.v2collider.bounds.center);", "                    if (distanceToPlayer <= ConfigManager.v2SecondCoreSnipeMaxDistanceToPlayer.value && distanceToV2 >= ConfigManager.v2SecondCoreSnipeMinDistanceToV2.value)\n                    {\n                        Debug.Log(\"Attempting to shoot the grenade\");\n                        GameObject revolverBeam = GameObject.Instantiate(Plugin.revolverBeam, __instance.transform.position + __instance.transform.forward, Quaternion.identity);\n                        revolverBeam.transform.LookAt(closestGrenade.position);\n                        if (revolverBeam.TryGetComponent<RevolverBeam>(out RevolverBeam comp))\n                        {\n                            comp.beamType = BeamType.Enemy;\n                            comp.sourceWeapon = __instance.weapons[0];\n                        }\n\n                        __instance.ForceDodge(V2Utils.GetDirectionAwayFromTarget(flag.v2collider.bounds.center, closestGrenade.transform.position));\n                        return false;\n                    }\n                }\n            }", "            else if(___currentWeapon == 4)\n            {\n                __instance.ForceDodge(V2Utils.GetDirectionAwayFromTarget(flag.v2collider.bounds.center, PlayerTracker.Instance.GetTarget().position));\n            }\n\n            return true;\n        }\n\n        static void Postfix(V2 __instance, ref int ___currentWeapon)\n        {\n            if (!__instance.secondEncounter)\n                return;\n", "            if (!__instance.secondEncounter)\n                return;\n\n            if (___currentWeapon == 4)\n            {\n                V2SecondSwitchWeapon.SwitchWeapon.Invoke(__instance, new object[] { 0 });\n            }\n        }\n    }\n\n    class V2SecondSwitchWeapon\n    {", "    class V2SecondSwitchWeapon\n    {\n        public static MethodInfo SwitchWeapon = typeof(V2).GetMethod(\"SwitchWeapon\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n        static bool Prefix(V2 __instance, ref int __0)\n        {\n            if (!__instance.secondEncounter || !ConfigManager.v2SecondRocketLauncherToggle.value)\n                return true;\n\n            if (__0 != 1 && __0 != 2)\n                return true;\n\n            int[] weapons = new int[] { 1, 2, 3 };\n            int weapon = weapons[UnityEngine.Random.RandomRangeInt(0, weapons.Length)];\n            __0 = weapon;\n\n            return true;\n        }\n    }\n", "            if (__0 != 1 && __0 != 2)\n                return true;\n\n            int[] weapons = new int[] { 1, 2, 3 };\n            int weapon = weapons[UnityEngine.Random.RandomRangeInt(0, weapons.Length)];\n            __0 = weapon;\n\n            return true;\n        }\n    }\n", "    class V2SecondFastCoin\n    {\n        static MethodInfo switchWeapon = typeof(V2).GetMethod(\"SwitchWeapon\", BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public);\n\n        static bool Prefix(V2 __instance, ref int ___coinsToThrow, ref bool ___aboutToShoot, ref Transform ___overrideTarget, ref Rigidbody ___overrideTargetRb,\n            ref Transform ___target, Animator ___anim, ref bool ___shootingForCoin, ref int ___currentWeapon, ref float ___shootCooldown, ref bool ___aiming)\n        {\n            if (___coinsToThrow == 0)\n            {\n                return false;\n            }\n            GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.coin, __instance.transform.position, __instance.transform.rotation);\n            Rigidbody rigidbody;", "            if (gameObject.TryGetComponent<Rigidbody>(out rigidbody))\n            {\n                rigidbody.AddForce((___target.transform.position - ___anim.transform.position).normalized * 20f + Vector3.up * 30f, ForceMode.VelocityChange);\n            }\n            Coin coin;\n            if (gameObject.TryGetComponent<Coin>(out coin))\n            {\n                GameObject gameObject2 = GameObject.Instantiate<GameObject>(coin.flash, coin.transform.position, MonoSingleton<CameraController>.Instance.transform.rotation);\n                gameObject2.transform.localScale *= 2f;\n                gameObject2.transform.SetParent(gameObject.transform, true);\n            }\n            ___coinsToThrow--;\n\n            ___aboutToShoot = true;\n            ___shootingForCoin = true;\n            switchWeapon.Invoke(__instance, new object[1] { 0 });\n            __instance.CancelInvoke(\"ShootWeapon\");\n            __instance.Invoke(\"ShootWeapon\", ConfigManager.v2SecondFastCoinShootDelay.value);\n\n            ___overrideTarget = coin.transform;\n            ___overrideTargetRb = coin.GetComponent<Rigidbody>();\n            __instance.CancelInvoke(\"AltShootWeapon\");\n            __instance.weapons[___currentWeapon].transform.GetChild(0).SendMessage(\"CancelAltCharge\", SendMessageOptions.DontRequireReceiver);\n            ___shootCooldown = 1f;\n\n            __instance.CancelInvoke(\"ThrowCoins\");\n            __instance.Invoke(\"ThrowCoins\", ConfigManager.v2SecondFastCoinThrowDelay.value);\n\n            return false;\n        }\n    }\n", "    class V2SecondEnrage\n    {\n        static void Postfix(BossHealthBar __instance, ref EnemyIdentifier ___eid, ref int ___currentHpSlider)\n        {\n            V2 v2 = __instance.GetComponent<V2>();\n            if (v2 != null && v2.secondEncounter && ___currentHpSlider == 1)\n                v2.Invoke(\"Enrage\", 0.01f);\n        }\n    }\n\n    class V2SecondStart\n    {\n        static void RemoveAlwaysOnTop(Transform t)\n        {", "    class V2SecondStart\n    {\n        static void RemoveAlwaysOnTop(Transform t)\n        {\n            foreach (Transform child in UnityUtils.GetComponentsInChildrenRecursively<Transform>(t))\n            {\n                child.gameObject.layer = Physics.IgnoreRaycastLayer;\n            }\n            t.gameObject.layer = Physics.IgnoreRaycastLayer;\n        }\n\n        static FieldInfo machineV2 = typeof(Machine).GetField(\"v2\", BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);\n        static void Postfix(V2 __instance, EnemyIdentifier ___eid)\n        {", "            if (!__instance.secondEncounter)\n                return;\n\n            V2SecondFlag flag = __instance.gameObject.AddComponent<V2SecondFlag>();\n            flag.v2collider = __instance.GetComponent<Collider>();\n\n            /*___eid.enemyType = EnemyType.V2Second;\n            ___eid.UpdateBuffs();\n            machineV2.SetValue(__instance.GetComponent<Machine>(), __instance);*/\n\n            GameObject player = SceneManager.GetActiveScene().GetRootGameObjects().Where(obj => obj.name == \"Player\").FirstOrDefault();", "            if (player == null)\n                return;\n\n            Transform v2WeaponTrans = __instance.weapons[0].transform.parent;\n\n            GameObject v2rocketLauncher = GameObject.Instantiate(Plugin.rocketLauncherAlt, v2WeaponTrans);\n            v2rocketLauncher.transform.localScale = new Vector3(0.5f, 0.5f, 0.5f);\n            v2rocketLauncher.transform.localPosition = new Vector3(0.1f, -0.2f, -0.1f);\n            v2rocketLauncher.transform.localRotation = Quaternion.Euler(new Vector3(10.2682f, 12.6638f, 198.834f));\n            v2rocketLauncher.transform.GetChild(0).localPosition = Vector3.zero;\n            v2rocketLauncher.transform.GetChild(0).localRotation = Quaternion.Euler(Vector3.zero);\n            GameObject.DestroyImmediate(v2rocketLauncher.GetComponent<RocketLauncher>());\n            GameObject.DestroyImmediate(v2rocketLauncher.GetComponent<WeaponIcon>());\n            GameObject.DestroyImmediate(v2rocketLauncher.GetComponent<WeaponIdentifier>());\n            GameObject.DestroyImmediate(v2rocketLauncher.GetComponent<WeaponPos>());\n            GameObject.DestroyImmediate(v2rocketLauncher.GetComponent<Animator>());\n            V2RocketLauncher rocketComp = v2rocketLauncher.transform.GetChild(0).gameObject.AddComponent<V2RocketLauncher>();\n            rocketComp.v2collider = __instance.GetComponent<Collider>();\n            rocketComp.shootPoint = __instance.transform;\n            RemoveAlwaysOnTop(v2rocketLauncher.transform);\n            flag.rocketLauncher = rocketComp;\n\n            GameObject v2maliciousCannon = GameObject.Instantiate(Plugin.maliciousRailcannon, v2WeaponTrans);\n            GameObject.DestroyImmediate(v2maliciousCannon.GetComponent<Railcannon>());\n            GameObject.DestroyImmediate(v2maliciousCannon.GetComponent<WeaponIcon>());\n            GameObject.DestroyImmediate(v2maliciousCannon.GetComponent<WeaponIdentifier>());\n            GameObject.DestroyImmediate(v2maliciousCannon.GetComponent<WeaponIcon>());\n            GameObject.DestroyImmediate(v2maliciousCannon.GetComponent<WeaponPos>());", "            foreach (RailCannonPip pip in UnityUtils.GetComponentsInChildrenRecursively<RailCannonPip>(v2maliciousCannon.transform))\n                GameObject.DestroyImmediate(pip);\n            //GameObject.Destroy(v2maliciousCannon.GetComponent<Animator>());\n            v2maliciousCannon.transform.localScale = new Vector3(0.25f, 0.25f, 0.25f);\n            v2maliciousCannon.transform.localRotation = Quaternion.Euler(270, 90, 0);\n            v2maliciousCannon.transform.localPosition = Vector3.zero;\n            v2maliciousCannon.transform.GetChild(0).localPosition = Vector3.zero;\n            V2MaliciousCannon cannonComp = v2maliciousCannon.transform.GetChild(0).gameObject.AddComponent<V2MaliciousCannon>();\n            cannonComp.v2trans = __instance.transform;\n            RemoveAlwaysOnTop(v2maliciousCannon.transform);\n            flag.maliciousCannon = cannonComp;\n\n            EnemyRevolver rev = UnityUtils.GetComponentInChildrenRecursively<EnemyRevolver>(__instance.weapons[0].transform);\n            V2CommonRevolverComp revComp;", "            if (ConfigManager.v2SecondSharpshooterToggle.value)\n            {\n                revComp = rev.gameObject.AddComponent<V2CommonRevolverComp>();\n                revComp.secondPhase = __instance.secondEncounter;\n            }\n\n            __instance.weapons = new GameObject[] { __instance.weapons[0], __instance.weapons[1], __instance.weapons[2], v2rocketLauncher, v2maliciousCannon };\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/V2Common.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    public static class V2Utils\n    {\n        public static Transform GetClosestGrenade()\n        {\n            Transform closestTransform = null;\n            float closestDistance = 1000000;\n", "        public static Transform GetClosestGrenade()\n        {\n            Transform closestTransform = null;\n            float closestDistance = 1000000;\n\n            foreach(Grenade g in GrenadeList.Instance.grenadeList)\n            {\n                float dist = Vector3.Distance(g.transform.position, PlayerTracker.Instance.GetTarget().position);\n                if(dist < closestDistance)\n                {\n                    closestTransform = g.transform;\n                    closestDistance = dist;\n                }\n            }\n", "                if(dist < closestDistance)\n                {\n                    closestTransform = g.transform;\n                    closestDistance = dist;\n                }\n            }\n\n            foreach (Cannonball c in GrenadeList.Instance.cannonballList)\n            {\n                float dist = Vector3.Distance(c.transform.position, PlayerTracker.Instance.GetTarget().position);\n                if (dist < closestDistance)\n                {\n                    closestTransform = c.transform;\n                    closestDistance = dist;\n                }\n            }\n\n            return closestTransform;\n        }\n", "                if (dist < closestDistance)\n                {\n                    closestTransform = c.transform;\n                    closestDistance = dist;\n                }\n            }\n\n            return closestTransform;\n        }\n\n        public static Vector3 GetDirectionAwayFromTarget(Vector3 center, Vector3 target)\n        {\n            // Calculate the direction vector from the center to the target\n            Vector3 direction = target - center;\n\n            // Set the Y component of the direction vector to 0\n            direction.y = 0;\n\n            // Normalize the direction vector\n            direction.Normalize();\n\n            // Reverse the direction vector to face away from the target\n            direction = -direction;\n\n            return direction;\n        }\n    }\n", "        public static Vector3 GetDirectionAwayFromTarget(Vector3 center, Vector3 target)\n        {\n            // Calculate the direction vector from the center to the target\n            Vector3 direction = target - center;\n\n            // Set the Y component of the direction vector to 0\n            direction.y = 0;\n\n            // Normalize the direction vector\n            direction.Normalize();\n\n            // Reverse the direction vector to face away from the target\n            direction = -direction;\n\n            return direction;\n        }\n    }\n", "    class V2CommonExplosion\n    {\n        static void Postfix(Explosion __instance)\n        {\n            if (__instance.sourceWeapon == null)\n                return;\n\n            V2MaliciousCannon malCanComp = __instance.sourceWeapon.GetComponent<V2MaliciousCannon>();\n            if(malCanComp != null)\n            {\n                Debug.Log(\"Grenade explosion triggered by V2 malicious cannon\");\n                __instance.toIgnore.Add(EnemyType.V2);\n                __instance.toIgnore.Add(EnemyType.V2Second);\n                return;\n            }\n\n            EnemyRevolver revComp = __instance.sourceWeapon.GetComponentInChildren<EnemyRevolver>();", "            if(malCanComp != null)\n            {\n                Debug.Log(\"Grenade explosion triggered by V2 malicious cannon\");\n                __instance.toIgnore.Add(EnemyType.V2);\n                __instance.toIgnore.Add(EnemyType.V2Second);\n                return;\n            }\n\n            EnemyRevolver revComp = __instance.sourceWeapon.GetComponentInChildren<EnemyRevolver>();\n            if(revComp != null)\n            {\n                Debug.Log(\"Grenade explosion triggered by V2 revolver\");\n                __instance.toIgnore.Add(EnemyType.V2);\n                __instance.toIgnore.Add(EnemyType.V2Second);\n                return;\n            }\n        }\n    }\n\n    // SHARPSHOOTER\n", "            if(revComp != null)\n            {\n                Debug.Log(\"Grenade explosion triggered by V2 revolver\");\n                __instance.toIgnore.Add(EnemyType.V2);\n                __instance.toIgnore.Add(EnemyType.V2Second);\n                return;\n            }\n        }\n    }\n\n    // SHARPSHOOTER\n", "    class V2CommonRevolverComp : MonoBehaviour\n    {\n        public bool secondPhase = false;\n        public bool shootingForSharpshooter = false;\n    }\n\n    class V2CommonRevolverPrepareAltFire\n    {\n        static bool Prefix(EnemyRevolver __instance, GameObject ___altCharge)\n        {\n            if(__instance.TryGetComponent<V2CommonRevolverComp>(out V2CommonRevolverComp comp))\n            {", "            if(__instance.TryGetComponent<V2CommonRevolverComp>(out V2CommonRevolverComp comp))\n            {\n                if ((comp.secondPhase && !ConfigManager.v2SecondSharpshooterToggle.value)\n                    || (!comp.secondPhase && !ConfigManager.v2FirstSharpshooterToggle.value))\n                    return true;\n\n                bool sharp = UnityEngine.Random.Range(0f, 100f) <= (comp.secondPhase ? ConfigManager.v2SecondSharpshooterChance.value : ConfigManager.v2FirstSharpshooterChance.value);\n\n                Transform quad = ___altCharge.transform.Find(\"MuzzleFlash/Quad\");\n                MeshRenderer quadRenderer = quad.gameObject.GetComponent<MeshRenderer>();\n                quadRenderer.material.color = sharp ? new Color(1f, 0.1f, 0f) : new Color(1f, 1f, 1f);\n\n                comp.shootingForSharpshooter = sharp;\n            }\n\n            return true;\n        }\n    }\n", "    class V2CommonRevolverBulletSharp : MonoBehaviour\n    {\n        public int reflectionCount = 2;\n        public float autoAimAngle = 30f;\n\n        public Projectile proj;\n        public float speed = 350f;\n        public bool hasTargetPoint = false;\n        public Vector3 shootPoint;\n        public Vector3 targetPoint;\n        public RaycastHit targetHit;", "        public Vector3 shootPoint;\n        public Vector3 targetPoint;\n        public RaycastHit targetHit;\n        public bool alreadyHitPlayer = false;\n        public bool alreadyReflected = false;\n\n        private void Awake()\n        {\n            proj = GetComponent<Projectile>();\n            proj.speed = 0;\n            GetComponent<Rigidbody>().isKinematic = true;\n        }\n", "        private void Update()\n        {\n            if (!hasTargetPoint)\n                transform.position += transform.forward * speed;\n            else\n            {\n                if (transform.position != targetPoint)\n                {\n                    transform.position = Vector3.MoveTowards(transform.position, targetPoint, Time.deltaTime * speed);\n                    if (transform.position == targetPoint)\n                        proj.SendMessage(\"Collided\", targetHit.collider);\n                }\n                else\n                    proj.SendMessage(\"Collided\", targetHit.collider);\n            }\n        }\n    }\n", "                    if (transform.position == targetPoint)\n                        proj.SendMessage(\"Collided\", targetHit.collider);\n                }\n                else\n                    proj.SendMessage(\"Collided\", targetHit.collider);\n            }\n        }\n    }\n\n    class V2CommonRevolverBullet\n    {\n        static bool Prefix(Projectile __instance, Collider __0)\n        {\n            V2CommonRevolverBulletSharp comp = __instance.GetComponent<V2CommonRevolverBulletSharp>();", "    class V2CommonRevolverBullet\n    {\n        static bool Prefix(Projectile __instance, Collider __0)\n        {\n            V2CommonRevolverBulletSharp comp = __instance.GetComponent<V2CommonRevolverBulletSharp>();\n            if (comp == null)\n                return true;\n\n            if ((__0.gameObject.tag == \"Head\" || __0.gameObject.tag == \"Body\" || __0.gameObject.tag == \"Limb\" || __0.gameObject.tag == \"EndLimb\") && __0.gameObject.tag != \"Armor\")\n            {\n                EnemyIdentifierIdentifier eii = __instance.GetComponent<EnemyIdentifierIdentifier>();", "            if ((__0.gameObject.tag == \"Head\" || __0.gameObject.tag == \"Body\" || __0.gameObject.tag == \"Limb\" || __0.gameObject.tag == \"EndLimb\") && __0.gameObject.tag != \"Armor\")\n            {\n                EnemyIdentifierIdentifier eii = __instance.GetComponent<EnemyIdentifierIdentifier>();\n                if (eii != null)\n                {\n                    eii.eid.hitter = \"enemy\";\n                    eii.eid.DeliverDamage(__0.gameObject, __instance.transform.forward * 100f, __instance.transform.position, comp.proj.damage / 10f, false, 0f, null, false);\n                    return false;\n                }\n            }\n", "            if (comp.alreadyReflected)\n                return false;\n\n            bool isPlayer = __0.gameObject.tag == \"Player\";\n            if (isPlayer)\n            {\n                if (comp.alreadyHitPlayer)\n                    return false;\n                NewMovement.Instance.GetHurt(Mathf.RoundToInt(comp.proj.damage), true, 1f, false, false);\n                comp.alreadyHitPlayer = true;\n                return false;\n            }\n", "            if (!comp.hasTargetPoint || comp.transform.position != comp.targetPoint)\n                return false;\n\n            if(comp.reflectionCount <= 0)\n            {\n                comp.alreadyReflected = true;\n                return true;\n            }\n\n            // REFLECTION\n            LayerMask envMask = new LayerMask() { value = 1 << 8 | 1 << 24 };\n            GameObject reflectedBullet = GameObject.Instantiate(__instance.gameObject, comp.targetPoint, __instance.transform.rotation);\n            V2CommonRevolverBulletSharp reflectComp = reflectedBullet.GetComponent<V2CommonRevolverBulletSharp>();\n            reflectComp.reflectionCount -= 1;\n            reflectComp.shootPoint = reflectComp.transform.position;\n            reflectComp.alreadyReflected = false;\n            reflectComp.alreadyHitPlayer = false;\n\n            reflectedBullet.transform.forward = Vector3.Reflect(comp.transform.forward, comp.targetHit.normal).normalized;\n            \n            Vector3 playerPos = NewMovement.Instance.transform.position;\n            Vector3 playerVectorFromBullet = playerPos - reflectedBullet.transform.position;\n            float angle = Vector3.Angle(playerVectorFromBullet, reflectedBullet.transform.forward);", "            if (angle <= ConfigManager.v2FirstSharpshooterAutoaimAngle.value)\n            {\n                Quaternion lastRotation = reflectedBullet.transform.rotation;\n                reflectedBullet.transform.LookAt(NewMovement.Instance.playerCollider.bounds.center);\n\n                RaycastHit[] hits = Physics.RaycastAll(reflectedBullet.transform.position, reflectedBullet.transform.forward, Vector3.Distance(reflectedBullet.transform.position, playerPos));\n                bool hitEnv = false;\n                foreach (RaycastHit rayHit in hits)\n                {\n                    if (rayHit.transform.gameObject.layer == 8 || rayHit.transform.gameObject.layer == 24)\n                    {\n                        hitEnv = true;\n                        break;\n                    }\n                }\n", "                    if (rayHit.transform.gameObject.layer == 8 || rayHit.transform.gameObject.layer == 24)\n                    {\n                        hitEnv = true;\n                        break;\n                    }\n                }\n\n                if (hitEnv)\n                {\n                    reflectedBullet.transform.rotation = lastRotation;\n                }\n            }\n", "            if(Physics.Raycast(reflectedBullet.transform.position, reflectedBullet.transform.forward, out RaycastHit hit, float.PositiveInfinity, envMask))\n            {\n                reflectComp.targetPoint = hit.point;\n                reflectComp.targetHit = hit;\n                reflectComp.hasTargetPoint = true;\n            }\n            else\n            {\n                reflectComp.hasTargetPoint = false;\n            }\n\n            comp.alreadyReflected = true;\n            GameObject.Instantiate(Plugin.ricochetSfx, reflectedBullet.transform.position, Quaternion.identity);\n            return true;\n        }\n    }\n", "    class V2CommonRevolverAltShoot\n    {\n        static bool Prefix(EnemyRevolver __instance, EnemyIdentifier ___eid)\n        {\n            if (__instance.TryGetComponent<V2CommonRevolverComp>(out V2CommonRevolverComp comp) && comp.shootingForSharpshooter)\n            {\n                __instance.CancelAltCharge();\n\n                Vector3 position = __instance.shootPoint.position;\n                if (Vector3.Distance(__instance.transform.position, ___eid.transform.position) > Vector3.Distance(MonoSingleton<NewMovement>.Instance.transform.position, ___eid.transform.position))\n                {\n                    position = new Vector3(___eid.transform.position.x, __instance.transform.position.y, ___eid.transform.position.z);\n                }\n\n                GameObject bullet = GameObject.Instantiate(__instance.altBullet, position, __instance.shootPoint.rotation);\n                V2CommonRevolverBulletSharp bulletComp = bullet.AddComponent<V2CommonRevolverBulletSharp>();\n                bulletComp.autoAimAngle = comp.secondPhase ? ConfigManager.v2SecondSharpshooterAutoaimAngle.value : ConfigManager.v2FirstSharpshooterAutoaimAngle.value;\n                bulletComp.reflectionCount = comp.secondPhase ? ConfigManager.v2SecondSharpshooterReflections.value : ConfigManager.v2FirstSharpshooterReflections.value;\n                bulletComp.speed *= comp.secondPhase ? ConfigManager.v2SecondSharpshooterSpeed.value : ConfigManager.v2FirstSharpshooterSpeed.value;\n\n                TrailRenderer rend = UnityUtils.GetComponentInChildrenRecursively<TrailRenderer>(bullet.transform);\n                rend.endColor = rend.startColor = new Color(1, 0, 0);\n\n                Projectile component = bullet.GetComponent<Projectile>();", "                if (Vector3.Distance(__instance.transform.position, ___eid.transform.position) > Vector3.Distance(MonoSingleton<NewMovement>.Instance.transform.position, ___eid.transform.position))\n                {\n                    position = new Vector3(___eid.transform.position.x, __instance.transform.position.y, ___eid.transform.position.z);\n                }\n\n                GameObject bullet = GameObject.Instantiate(__instance.altBullet, position, __instance.shootPoint.rotation);\n                V2CommonRevolverBulletSharp bulletComp = bullet.AddComponent<V2CommonRevolverBulletSharp>();\n                bulletComp.autoAimAngle = comp.secondPhase ? ConfigManager.v2SecondSharpshooterAutoaimAngle.value : ConfigManager.v2FirstSharpshooterAutoaimAngle.value;\n                bulletComp.reflectionCount = comp.secondPhase ? ConfigManager.v2SecondSharpshooterReflections.value : ConfigManager.v2FirstSharpshooterReflections.value;\n                bulletComp.speed *= comp.secondPhase ? ConfigManager.v2SecondSharpshooterSpeed.value : ConfigManager.v2FirstSharpshooterSpeed.value;\n\n                TrailRenderer rend = UnityUtils.GetComponentInChildrenRecursively<TrailRenderer>(bullet.transform);\n                rend.endColor = rend.startColor = new Color(1, 0, 0);\n\n                Projectile component = bullet.GetComponent<Projectile>();", "                if (component)\n                {\n                    component.safeEnemyType = __instance.safeEnemyType;\n                    component.damage *= comp.secondPhase ? ConfigManager.v2SecondSharpshooterDamage.value : ConfigManager.v2FirstSharpshooterDamage.value;\n                }\n\n                LayerMask envMask = new LayerMask() { value = 1 << 8 | 1 << 24 };\n\n                float v2Height = -1;\n                RaycastHit v2Ground;\n                if (!Physics.Raycast(position, Vector3.down, out v2Ground, float.PositiveInfinity, envMask))\n                    v2Height = v2Ground.distance;\n\n                float playerHeight = -1;\n                RaycastHit playerGround;", "                if (!Physics.Raycast(position, Vector3.down, out v2Ground, float.PositiveInfinity, envMask))\n                    v2Height = v2Ground.distance;\n\n                float playerHeight = -1;\n                RaycastHit playerGround;\n                if (!Physics.Raycast(NewMovement.Instance.transform.position, Vector3.down, out playerGround, float.PositiveInfinity, envMask))\n                    playerHeight = playerGround.distance;\n\n                if (v2Height != -1 && playerHeight != -1)\n                {\n                    Vector3 playerGroundFromV2 = playerGround.point - v2Ground.point;\n                    float distance = Vector3.Distance(playerGround.point, v2Ground.point);\n                    float k = playerHeight / v2Height;\n\n                    float d1 = (distance * k) / (1 + k);\n                    Vector3 lookPoint = v2Ground.point + (playerGroundFromV2 / distance) * d1;\n\n                    bullet.transform.LookAt(lookPoint);\n                }\n                else\n                {\n                    Vector3 mid = ___eid.transform.position + (NewMovement.Instance.transform.position - ___eid.transform.position) * 0.5f;", "                if (v2Height != -1 && playerHeight != -1)\n                {\n                    Vector3 playerGroundFromV2 = playerGround.point - v2Ground.point;\n                    float distance = Vector3.Distance(playerGround.point, v2Ground.point);\n                    float k = playerHeight / v2Height;\n\n                    float d1 = (distance * k) / (1 + k);\n                    Vector3 lookPoint = v2Ground.point + (playerGroundFromV2 / distance) * d1;\n\n                    bullet.transform.LookAt(lookPoint);\n                }\n                else\n                {\n                    Vector3 mid = ___eid.transform.position + (NewMovement.Instance.transform.position - ___eid.transform.position) * 0.5f;", "                    if (Physics.Raycast(mid, Vector3.down, out RaycastHit hit, 1000f, new LayerMask() { value = 1 << 8 | 1 << 24 }))\n                    {\n                        bullet.transform.LookAt(hit.point);\n                    }\n                    else\n                    {\n                        bullet.transform.LookAt(NewMovement.Instance.playerCollider.bounds.center);\n                    }\n                }\n\n                GameObject.Instantiate(__instance.muzzleFlashAlt, __instance.shootPoint.position, __instance.shootPoint.rotation);\n", "                if (Physics.Raycast(bullet.transform.position, bullet.transform.forward, out RaycastHit predictedHit, float.PositiveInfinity, envMask))\n                {\n                    bulletComp.targetPoint = predictedHit.point;\n                    bulletComp.targetHit = predictedHit;\n                    bulletComp.hasTargetPoint = true;\n                }\n                else\n                {\n                    bulletComp.hasTargetPoint = false;\n                }\n\n                comp.shootingForSharpshooter = false;\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/FleshPrison.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing UnityEngine;\nusing UnityEngine.UI;\n\nnamespace Ultrapain.Patches\n{\n    class FleshObamium_Start\n    {\n        static bool Prefix(FleshPrison __instance)\n        {", "    class FleshObamium_Start\n    {\n        static bool Prefix(FleshPrison __instance)\n        {\n            if (__instance.altVersion)\n                return true;\n\n            if (__instance.eid == null)\n                __instance.eid = __instance.GetComponent<EnemyIdentifier>();\n            __instance.eid.overrideFullName = ConfigManager.fleshObamiumName.value;\n            return true;\n        }\n\n        static void Postfix(FleshPrison __instance)\n        {", "            if (__instance.altVersion)\n                return;\n\n            GameObject fleshObamium = GameObject.Instantiate(Plugin.fleshObamium, __instance.transform);\n            fleshObamium.transform.parent = __instance.transform.Find(\"fleshprisonrigged/Armature/root/prism/\");\n            fleshObamium.transform.localScale = new Vector3(36, 36, 36);\n            fleshObamium.transform.localPosition = Vector3.zero;\n            fleshObamium.transform.localRotation = Quaternion.identity;\n            fleshObamium.transform.Rotate(new Vector3(180, 0, 0), Space.Self);\n            fleshObamium.GetComponent<MeshRenderer>().material.color = new Color(0.15f, 0.15f, 0.15f, 1f);\n\n            fleshObamium.layer = 24;\n\n            // __instance.transform.Find(\"FleshPrison2/FleshPrison2_Head\").GetComponent<SkinnedMeshRenderer>().enabled = false;\n", "            if (__instance.bossHealth != null)\n            {\n                __instance.bossHealth.bossName = ConfigManager.fleshObamiumName.value;\n                if (__instance.bossHealth.bossBar != null)\n                {\n                    BossHealthBarTemplate temp = __instance.bossHealth.bossBar.GetComponent<BossHealthBarTemplate>();\n                    temp.bossNameText.text = ConfigManager.fleshObamiumName.value;\n                    foreach (Text t in temp.textInstances)\n                        t.text = ConfigManager.fleshObamiumName.value;\n                }\n            }\n        }\n    }\n", "    class FleshPrisonProjectile : MonoBehaviour\n    {\n        void Start()\n        {\n            GetComponent<Rigidbody>().AddForce(Vector3.up * 50f, ForceMode.VelocityChange);\n        }\n    }\n\n    class FleshPrisonRotatingInsignia : MonoBehaviour\n    {\n        List<VirtueInsignia> insignias = new List<VirtueInsignia>();", "    class FleshPrisonRotatingInsignia : MonoBehaviour\n    {\n        List<VirtueInsignia> insignias = new List<VirtueInsignia>();\n        public FleshPrison prison;\n        public float damageMod = 1f;\n        public float speedMod = 1f;\n\n        void SpawnInsignias()\n        {\n            insignias.Clear();\n\n            int projectileCount = (prison.altVersion ? ConfigManager.panopticonSpinAttackCount.value : ConfigManager.fleshPrisonSpinAttackCount.value);\n            float anglePerProjectile = 360f / projectileCount;\n            float distance = (prison.altVersion ? ConfigManager.panopticonSpinAttackDistance.value : ConfigManager.fleshPrisonSpinAttackDistance.value);\n\n            Vector3 currentNormal = Vector3.forward;", "            for (int i = 0; i < projectileCount; i++)\n            {\n                GameObject insignia = Instantiate(Plugin.virtueInsignia, transform.position + currentNormal * distance, Quaternion.identity);\n                insignia.transform.parent = gameObject.transform;\n                VirtueInsignia comp = insignia.GetComponent<VirtueInsignia>();\n                comp.hadParent = false;\n                comp.noTracking = true;\n                comp.predictive = true;\n                comp.predictiveVersion = null;\n                comp.otherParent = transform;\n                comp.target = insignia.transform;\n                comp.windUpSpeedMultiplier = (prison.altVersion ? ConfigManager.panopticonSpinAttackActivateSpeed.value : ConfigManager.fleshPrisonSpinAttackActivateSpeed.value) * speedMod;\n                comp.damage = (int)((prison.altVersion ? ConfigManager.panopticonSpinAttackDamage.value : ConfigManager.fleshPrisonSpinAttackDamage.value) * damageMod);\n                float size = Mathf.Abs(prison.altVersion ? ConfigManager.panopticonSpinAttackSize.value : ConfigManager.fleshPrisonSpinAttackSize.value);\n                insignia.transform.localScale = new Vector3(size, insignia.transform.localScale.y, size);\n                insignias.Add(comp);\n                currentNormal = Quaternion.Euler(0, anglePerProjectile, 0) * currentNormal;\n            }\n        }\n\n        FieldInfo inAction;", "        public float anglePerSecond = 1f;\n        void Start()\n        {\n            SpawnInsignias();\n            inAction = typeof(FleshPrison).GetField(\"inAction\", BindingFlags.Instance | BindingFlags.NonPublic);\n            anglePerSecond = prison.altVersion ? ConfigManager.panopticonSpinAttackTurnSpeed.value : ConfigManager.fleshPrisonSpinAttackTurnSpeed.value;\n            if (UnityEngine.Random.RandomRangeInt(0, 100) < 50)\n                anglePerSecond *= -1;\n        }\n\n        bool markedForDestruction = false;\n        void Update()\n        {\n            transform.Rotate(new Vector3(0, anglePerSecond * Time.deltaTime * speedMod, 0));\n", "            if (!markedForDestruction && (prison == null || !(bool)inAction.GetValue(prison)))\n            {\n                markedForDestruction = true;\n                return;\n            }\n\n            if (insignias.Count == 0 || insignias[0] == null)\n                if (markedForDestruction)\n                    Destroy(gameObject);\n                else\n                    SpawnInsignias();\n        }\n    }\n", "    class FleshPrisonStart\n    {\n        static void Postfix(FleshPrison __instance)\n        {\n            if (__instance.altVersion)\n                return;\n\n            //__instance.homingProjectile = GameObject.Instantiate(Plugin.hideousMassProjectile, Vector3.positiveInfinity, Quaternion.identity);\n            //__instance.homingProjectile.hideFlags = HideFlags.HideAndDontSave;\n            //SceneManager.MoveGameObjectToScene(__instance.homingProjectile, SceneManager.GetSceneByName(\"\"));\n            //__instance.homingProjectile.AddComponent<FleshPrisonProjectile>();\n        }\n    }\n", "    class FleshPrisonShoot\n    {\n        static void Postfix(FleshPrison __instance, ref Animator ___anim, EnemyIdentifier ___eid)\n        {\n            if (__instance.altVersion)\n                return;\n\n            GameObject obj = new GameObject();\n            obj.transform.position = __instance.transform.position + Vector3.up;\n            FleshPrisonRotatingInsignia flag = obj.AddComponent<FleshPrisonRotatingInsignia>();\n            flag.prison = __instance;\n            flag.damageMod = ___eid.totalDamageModifier;\n            flag.speedMod = ___eid.totalSpeedModifier;\n        }\n    }\n\n    /*[HarmonyPatch(typeof(FleshPrison), \"SpawnInsignia\")]", "    class FleshPrisonInsignia\n    {\n        static bool Prefix(FleshPrison __instance, ref bool ___inAction, ref float ___fleshDroneCooldown, EnemyIdentifier ___eid,\n            Statue ___stat, float ___maxHealth)\n        {\n            if (__instance.altVersion)\n                return true;\n\n            if (!Plugin.ultrapainDifficulty || !ConfigManager.enemyTweakToggle.value)\n                return true;\n\n            ___inAction = false;\n\n            GameObject CreateInsignia()\n            {\n                GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.insignia, MonoSingleton<PlayerTracker>.Instance.GetPlayer().position, Quaternion.identity);\n                VirtueInsignia virtueInsignia;", "            if (!Plugin.ultrapainDifficulty || !ConfigManager.enemyTweakToggle.value)\n                return true;\n\n            ___inAction = false;\n\n            GameObject CreateInsignia()\n            {\n                GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.insignia, MonoSingleton<PlayerTracker>.Instance.GetPlayer().position, Quaternion.identity);\n                VirtueInsignia virtueInsignia;\n                if (gameObject.TryGetComponent<VirtueInsignia>(out virtueInsignia))\n                {\n                    virtueInsignia.predictive = true;\n                    virtueInsignia.noTracking = true;\n                    virtueInsignia.otherParent = __instance.transform;", "                if (gameObject.TryGetComponent<VirtueInsignia>(out virtueInsignia))\n                {\n                    virtueInsignia.predictive = true;\n                    virtueInsignia.noTracking = true;\n                    virtueInsignia.otherParent = __instance.transform;\n                    if (___stat.health > ___maxHealth / 2f)\n                    {\n                        virtueInsignia.charges = 2;\n                    }\n                    else\n                    {\n                        virtueInsignia.charges = 3;\n                    }\n                    virtueInsignia.charges++;\n                    virtueInsignia.windUpSpeedMultiplier = 0.5f;\n                    virtueInsignia.windUpSpeedMultiplier *= ___eid.totalSpeedModifier;\n                    virtueInsignia.damage = Mathf.RoundToInt((float)virtueInsignia.damage * ___eid.totalDamageModifier);\n                    virtueInsignia.target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n                    virtueInsignia.predictiveVersion = null;\n                    Light light = gameObject.AddComponent<Light>();\n                    light.range = 30f;\n                    light.intensity = 50f;\n                }\n                gameObject.transform.localScale = new Vector3(5f, 2f, 5f);\n                GoreZone componentInParent = __instance.GetComponentInParent<GoreZone>();", "                if (componentInParent)\n                {\n                    gameObject.transform.SetParent(componentInParent.transform, true);\n                }\n                else\n                {\n                    gameObject.transform.SetParent(__instance.transform, true);\n                }\n\n                return gameObject;\n            }\n\n            GameObject InsigniaY = CreateInsignia();\n            GameObject InsigniaX = CreateInsignia();\n            GameObject InsigniaZ = CreateInsignia();\n\n            InsigniaX.transform.eulerAngles = new Vector3(0, MonoSingleton<PlayerTracker>.Instance.GetTarget().transform.rotation.eulerAngles.y, 0);\n            InsigniaX.transform.Rotate(new Vector3(90, 0, 0), Space.Self);\n            InsigniaZ.transform.eulerAngles = new Vector3(0, MonoSingleton<PlayerTracker>.Instance.GetTarget().transform.rotation.eulerAngles.y, 0);\n            InsigniaZ.transform.Rotate(new Vector3(0, 0, 90), Space.Self);\n", "            if (___fleshDroneCooldown < 1f)\n            {\n                ___fleshDroneCooldown = 1f;\n            }\n\n            return false;\n        }\n    }*/\n}\n"]}
{"filename": "Ultrapain/Patches/MinosPrime.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing Sandbox;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.AI;\n\nnamespace Ultrapain.Patches\n{\n    class MinosPrimeCharge\n    {\n        static GameObject decoy;\n", "namespace Ultrapain.Patches\n{\n    class MinosPrimeCharge\n    {\n        static GameObject decoy;\n\n        public static void CreateDecoy()\n        {\n            if (decoy != null || Plugin.minosPrime == null)\n                return;\n\n            decoy = GameObject.Instantiate(Plugin.minosPrime, Vector3.zero, Quaternion.identity);\n            decoy.SetActive(false);\n\n            GameObject.Destroy(decoy.GetComponent<MinosPrime>());\n            GameObject.Destroy(decoy.GetComponent<Machine>());\n            GameObject.Destroy(decoy.GetComponent<BossHealthBar>());\n            GameObject.Destroy(decoy.GetComponent<EventOnDestroy>());\n            GameObject.Destroy(decoy.GetComponent<BossIdentifier>());\n            GameObject.Destroy(decoy.GetComponent<EnemyIdentifier>());\n            GameObject.Destroy(decoy.GetComponent<BasicEnemyDataRelay>());\n            GameObject.Destroy(decoy.GetComponent<Rigidbody>());\n            GameObject.Destroy(decoy.GetComponent<CapsuleCollider>());\n            GameObject.Destroy(decoy.GetComponent<AudioSource>());\n            GameObject.Destroy(decoy.GetComponent<NavMeshAgent>());", "            if (decoy != null || Plugin.minosPrime == null)\n                return;\n\n            decoy = GameObject.Instantiate(Plugin.minosPrime, Vector3.zero, Quaternion.identity);\n            decoy.SetActive(false);\n\n            GameObject.Destroy(decoy.GetComponent<MinosPrime>());\n            GameObject.Destroy(decoy.GetComponent<Machine>());\n            GameObject.Destroy(decoy.GetComponent<BossHealthBar>());\n            GameObject.Destroy(decoy.GetComponent<EventOnDestroy>());\n            GameObject.Destroy(decoy.GetComponent<BossIdentifier>());\n            GameObject.Destroy(decoy.GetComponent<EnemyIdentifier>());\n            GameObject.Destroy(decoy.GetComponent<BasicEnemyDataRelay>());\n            GameObject.Destroy(decoy.GetComponent<Rigidbody>());\n            GameObject.Destroy(decoy.GetComponent<CapsuleCollider>());\n            GameObject.Destroy(decoy.GetComponent<AudioSource>());\n            GameObject.Destroy(decoy.GetComponent<NavMeshAgent>());", "            foreach (SkinnedMeshRenderer renderer in UnityUtils.GetComponentsInChildrenRecursively<SkinnedMeshRenderer>(decoy.transform))\n            {\n                renderer.material = new Material(Plugin.gabrielFakeMat);\n            }\n            SandboxEnemy sbe = decoy.GetComponent<SandboxEnemy>();\n            if (sbe != null)\n                GameObject.Destroy(sbe);\n            MindflayerDecoy comp = decoy.AddComponent<MindflayerDecoy>();\n            comp.fadeSpeed = 1f;\n            //decoy.GetComponent<Animator>().StopPlayback();\n            //decoy.GetComponent<Animator>().Update(100f);\n\n            GameObject.Destroy(decoy.transform.Find(\"SwingCheck\").gameObject);\n            GameObject.Destroy(decoy.transform.Find(\"Capsule\").gameObject);\n            GameObject.Destroy(decoy.transform.Find(\"Point Light\").gameObject);", "            foreach (EnemyIdentifierIdentifier eii in UnityUtils.GetComponentsInChildrenRecursively<EnemyIdentifierIdentifier>(decoy.transform))\n                GameObject.Destroy(eii);\n        }\n\n        static void DrawTrail(MinosPrime instance, Animator anim, Vector3 startPosition, Vector3 targetPosition)\n        {\n            if(decoy == null)\n            {\n                CreateDecoy();\n                return;\n            }\n            targetPosition = Vector3.MoveTowards(targetPosition, startPosition, 5f);\n\n            Vector3 currentPosition = startPosition;\n            float distance = Vector3.Distance(startPosition, targetPosition);", "            if (distance < 2.5f)\n                return;\n\n            float deltaDistance = 2.5f;\n\n            float fadeSpeed = 1f / ConfigManager.minosPrimeTeleportTrailDuration.value;\n            AnimatorStateInfo currentAnimatorStateInfo = anim.GetCurrentAnimatorStateInfo(0);\n            int maxIterations = Mathf.CeilToInt(distance / deltaDistance);\n            float currentTransparency = 0.1f;\n            float deltaTransparencyPerIteration = 1f / maxIterations;\n            while (currentPosition != targetPosition)\n            {\n                GameObject gameObject = GameObject.Instantiate(decoy, currentPosition, instance.transform.rotation);\n                gameObject.SetActive(true);\n                Animator componentInChildren = gameObject.GetComponentInChildren<Animator>();\n                componentInChildren.Play(currentAnimatorStateInfo.shortNameHash, 0, currentAnimatorStateInfo.normalizedTime);\n                componentInChildren.speed = 0f;\n                MindflayerDecoy comp = gameObject.GetComponent<MindflayerDecoy>();\n                comp.fadeSpeed = fadeSpeed;\n                currentTransparency += deltaTransparencyPerIteration;\n                comp.fadeOverride = Mathf.Min(1f, currentTransparency);\n\n                currentPosition = Vector3.MoveTowards(currentPosition, targetPosition, deltaDistance);\n            }\n        }\n\n        static void Postfix(MinosPrime __instance, Animator ___anim)\n        {\n            string stateName = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name;\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();", "            while (currentPosition != targetPosition)\n            {\n                GameObject gameObject = GameObject.Instantiate(decoy, currentPosition, instance.transform.rotation);\n                gameObject.SetActive(true);\n                Animator componentInChildren = gameObject.GetComponentInChildren<Animator>();\n                componentInChildren.Play(currentAnimatorStateInfo.shortNameHash, 0, currentAnimatorStateInfo.normalizedTime);\n                componentInChildren.speed = 0f;\n                MindflayerDecoy comp = gameObject.GetComponent<MindflayerDecoy>();\n                comp.fadeSpeed = fadeSpeed;\n                currentTransparency += deltaTransparencyPerIteration;\n                comp.fadeOverride = Mathf.Min(1f, currentTransparency);\n\n                currentPosition = Vector3.MoveTowards(currentPosition, targetPosition, deltaDistance);\n            }\n        }\n\n        static void Postfix(MinosPrime __instance, Animator ___anim)\n        {\n            string stateName = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name;\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();", "            if (stateName == \"Combo\" || (flag != null && flag.throwingProjectile))\n                return;\n\n            Transform player = MonoSingleton<PlayerTracker>.Instance.GetPlayer();\n\n            float min = ConfigManager.minosPrimeRandomTeleportMinDistance.value;\n            float max = ConfigManager.minosPrimeRandomTeleportMaxDistance.value;\n\n            Vector3 unitSphere = UnityEngine.Random.onUnitSphere;\n            unitSphere.y = Mathf.Abs(unitSphere.y);\n            float distance = UnityEngine.Random.Range(min, max);\n\n            Ray ray = new Ray(player.position, unitSphere);\n\n            LayerMask mask = new LayerMask();\n            mask.value |= 256 | 16777216;", "            if (Physics.Raycast(ray, out RaycastHit hit, max, mask, QueryTriggerInteraction.Ignore))\n            {\n                if (hit.distance < min)\n                    return;\n                Vector3 point = ray.GetPoint(hit.distance - 5);\n                __instance.Teleport(point, __instance.transform.position);\n            }\n            else\n            {\n                Vector3 point = ray.GetPoint(distance);\n                __instance.Teleport(point, __instance.transform.position);\n            }\n        }\n\n        static void TeleportPostfix(MinosPrime __instance, Animator ___anim, Vector3 __0, Vector3 __1)\n        {\n            DrawTrail(__instance, ___anim, __1, __0);\n        }\n    }\n", "    class MinosPrimeFlag : MonoBehaviour\n    {\n        void Start()\n        {\n\n        }\n\n        public void ComboExplosion()\n        {\n            GameObject explosion = Instantiate(Plugin.lightningStrikeExplosive, transform.position, Quaternion.identity);\n            foreach(Explosion e in explosion.GetComponentsInChildren<Explosion>())\n            {\n                e.toIgnore.Add(EnemyType.MinosPrime);\n                e.maxSize *= ConfigManager.minosPrimeComboExplosionSize.value;\n                e.speed *= ConfigManager.minosPrimeComboExplosionSize.value;\n                e.damage = (int)(e.damage * ConfigManager.minosPrimeComboExplosionDamage.value);\n            }\n        }\n", "            foreach(Explosion e in explosion.GetComponentsInChildren<Explosion>())\n            {\n                e.toIgnore.Add(EnemyType.MinosPrime);\n                e.maxSize *= ConfigManager.minosPrimeComboExplosionSize.value;\n                e.speed *= ConfigManager.minosPrimeComboExplosionSize.value;\n                e.damage = (int)(e.damage * ConfigManager.minosPrimeComboExplosionDamage.value);\n            }\n        }\n\n        public void BigExplosion()\n        {\n            GameObject explosion = Instantiate(Plugin.lightningStrikeExplosive, transform.position, Quaternion.identity);", "        public void BigExplosion()\n        {\n            GameObject explosion = Instantiate(Plugin.lightningStrikeExplosive, transform.position, Quaternion.identity);\n            foreach (Explosion e in explosion.GetComponentsInChildren<Explosion>())\n            {\n                e.toIgnore.Add(EnemyType.MinosPrime);\n                e.maxSize *= ConfigManager.minosPrimeExplosionSize.value;\n                e.speed *= ConfigManager.minosPrimeExplosionSize.value;\n                e.damage = (int)(e.damage * ConfigManager.minosPrimeExplosionDamage.value);\n            }\n        }\n", "        public bool throwingProjectile = false;\n        public string plannedAttack = \"\";\n\n        public bool explosionAttack = false;\n    }\n\n    class MinosPrime_Start\n    {\n        static void Postfix(MinosPrime __instance, Animator ___anim, ref bool ___enraged)\n        {\n            if (ConfigManager.minosPrimeEarlyPhaseToggle.value)\n                ___enraged = true;\n            __instance.gameObject.AddComponent<MinosPrimeFlag>();\n", "            if (ConfigManager.minosPrimeEarlyPhaseToggle.value)\n                ___enraged = true;\n            __instance.gameObject.AddComponent<MinosPrimeFlag>();\n\n            if (ConfigManager.minosPrimeComboExplosionToggle.value)\n            {\n                AnimationClip boxing = ___anim.runtimeAnimatorController.animationClips.Where(item => item.name == \"Boxing\").First();\n                List<UnityEngine.AnimationEvent> boxingEvents = boxing.events.ToList();\n                boxingEvents.Insert(15, new UnityEngine.AnimationEvent() { time = 2.4f, functionName = \"ComboExplosion\", messageOptions = SendMessageOptions.RequireReceiver });\n                boxing.events = boxingEvents.ToArray();\n            }\n        }\n    }\n", "    class MinosPrime_StopAction\n    {\n        static void Postfix(MinosPrime __instance, EnemyIdentifier ___eid)\n        {\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();\n            if (flag == null)\n                return;\n\n            if (flag.plannedAttack != \"\")\n            {\n                __instance.SendMessage(flag.plannedAttack);\n                flag.plannedAttack = \"\";\n            }\n        }\n    }\n\n    // aka JUDGEMENT", "            if (flag.plannedAttack != \"\")\n            {\n                __instance.SendMessage(flag.plannedAttack);\n                flag.plannedAttack = \"\";\n            }\n        }\n    }\n\n    // aka JUDGEMENT\n    class MinosPrime_Dropkick\n    {\n        static bool Prefix(MinosPrime __instance, EnemyIdentifier ___eid, ref bool ___inAction, Animator ___anim)\n        {\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();", "    class MinosPrime_Dropkick\n    {\n        static bool Prefix(MinosPrime __instance, EnemyIdentifier ___eid, ref bool ___inAction, Animator ___anim)\n        {\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();\n            if (flag == null)\n                return true;\n\n            if (!flag.throwingProjectile)\n            {\n                if (ConfigManager.minosPrimeExplosionToggle.value\n                    && UnityEngine.Random.Range(0, 99.9f) < ConfigManager.minosPrimeExplosionChance.value)\n                {\n                    __instance.TeleportAnywhere();\n                    ___inAction = true;\n                    flag.explosionAttack = true;\n                    ___anim.speed = ___eid.totalSpeedModifier * ConfigManager.minosPrimeExplosionWindupSpeed.value;\n                    ___anim.Play(\"Outro\", 0, 0.5f);\n                    __instance.PlayVoice(new AudioClip[] { __instance.phaseChangeVoice });\n\n                    return false;\n                }\n", "            if (!flag.throwingProjectile)\n            {\n                if (ConfigManager.minosPrimeExplosionToggle.value\n                    && UnityEngine.Random.Range(0, 99.9f) < ConfigManager.minosPrimeExplosionChance.value)\n                {\n                    __instance.TeleportAnywhere();\n                    ___inAction = true;\n                    flag.explosionAttack = true;\n                    ___anim.speed = ___eid.totalSpeedModifier * ConfigManager.minosPrimeExplosionWindupSpeed.value;\n                    ___anim.Play(\"Outro\", 0, 0.5f);\n                    __instance.PlayVoice(new AudioClip[] { __instance.phaseChangeVoice });\n\n                    return false;\n                }\n", "                if (ConfigManager.minosPrimeComboToggle.value)\n                {\n                    flag.throwingProjectile = true;\n                    flag.plannedAttack = \"Dropkick\";\n                    __instance.SendMessage(\"ProjectilePunch\");\n                }\n\n                return false;\n            }\n            else\n            {", "                if (ConfigManager.minosPrimeComboToggle.value)\n                {\n                    flag.plannedAttack = \"ProjectilePunch\";\n                    flag.throwingProjectile = false;\n                }\n            }\n\n            return true;\n        }\n    }\n\n    // aka PREPARE THYSELF", "    class MinosPrime_Combo\n    {\n        static float timing = 3f;\n\n        static void Postfix(MinosPrime __instance, EnemyIdentifier ___eid)\n        {\n            if (!ConfigManager.minosPrimeComboToggle.value)\n                return;\n\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();\n            if (flag == null)\n                return;\n\n            flag.plannedAttack = \"Uppercut\";\n        }\n    }\n\n    // aka DIE", "            if (flag == null)\n                return;\n\n            flag.plannedAttack = \"Uppercut\";\n        }\n    }\n\n    // aka DIE\n    class MinosPrime_RiderKick\n    {\n        static bool Prefix(MinosPrime __instance, ref bool ___previouslyRiderKicked)\n        {", "    class MinosPrime_RiderKick\n    {\n        static bool Prefix(MinosPrime __instance, ref bool ___previouslyRiderKicked)\n        {\n            if (UnityEngine.Random.Range(0, 99.9f) > ConfigManager.minosPrimeCrushAttackChance.value)\n                return true;\n\n            ___previouslyRiderKicked = true;\n\n            Vector3 vector = MonoSingleton<PlayerTracker>.Instance.PredictPlayerPosition(0.5f);\n            Transform target = MonoSingleton<PlayerTracker>.Instance.GetPlayer();", "            if (vector.y < target.position.y)\n            {\n                vector.y = target.position.y;\n            }\n\n            __instance.Teleport(vector + Vector3.up * 25f, __instance.transform.position);\n            __instance.SendMessage(\"DropAttack\");\n            return false;\n        }\n    }\n\n    // End of PREPARE THYSELF", "    class MinosPrime_ProjectileCharge\n    {\n        static bool Prefix(MinosPrime __instance, Animator ___anim)\n        {\n            string clipname = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name;\n            if (clipname != \"Combo\" || UnityEngine.Random.Range(0, 99.9f) > ConfigManager.minosPrimeComboExplosiveEndChance.value)\n                return true;\n\n            ___anim.Play(\"Dropkick\", 0, (1.0815f - 0.4279f) / 2.65f);\n            return false;\n        }\n    }\n", "    class MinosPrime_Ascend\n    {\n        static bool Prefix(MinosPrime __instance, EnemyIdentifier ___eid, Animator ___anim, ref bool ___vibrating)\n        {\n            if (___eid.health <= 0)\n                return true;\n\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();\n            if (flag == null)\n                return true;\n", "            if (flag == null)\n                return true;\n\n            if (!flag.explosionAttack)\n                return true;\n\n            ___anim.speed = ___eid.totalSpeedModifier;\n            ___vibrating = false;\n            flag.explosionAttack = false;\n            flag.BigExplosion();\n            __instance.Invoke(\"Uppercut\", 0.5f);\n            return false;\n        }\n    }\n", "    class MinosPrime_Death\n    {\n        static bool Prefix(MinosPrime __instance, Animator ___anim, ref bool ___vibrating)\n        {\n            MinosPrimeFlag flag = __instance.GetComponent<MinosPrimeFlag>();\n            if (flag == null)\n                return true;\n\n            if (!flag.explosionAttack)\n                return true;\n\n            flag.explosionAttack = false;\n            ___vibrating = false;\n            ___anim.speed = 1f;\n            ___anim.Play(\"Walk\", 0, 0f);\n\n            return true;\n        }\n    }\n}\n", "            if (!flag.explosionAttack)\n                return true;\n\n            flag.explosionAttack = false;\n            ___vibrating = false;\n            ___anim.speed = 1f;\n            ___anim.Play(\"Walk\", 0, 0f);\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Parry.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class GrenadeParriedFlag : MonoBehaviour\n    {\n        public int parryCount = 1;\n        public bool registeredStyle = false;\n        public bool bigExplosionOverride = false;\n        public GameObject temporaryExplosion;", "        public bool registeredStyle = false;\n        public bool bigExplosionOverride = false;\n        public GameObject temporaryExplosion;\n        public GameObject temporaryBigExplosion;\n        public GameObject weapon;\n\n        public enum GrenadeType\n        {\n            Core,\n            Rocket,\n        }\n", "        public GrenadeType grenadeType;\n    }\n\n    class Punch_CheckForProjectile_Patch\n    {\n        static bool Prefix(Punch __instance, Transform __0, ref bool __result, ref bool ___hitSomething, Animator ___anim)\n        {\n            Grenade grn = __0.GetComponent<Grenade>();\n            if(grn != null)\n            {\n                if (grn.rocket && !ConfigManager.rocketBoostToggle.value)\n                    return true;", "            if(grn != null)\n            {\n                if (grn.rocket && !ConfigManager.rocketBoostToggle.value)\n                    return true;\n                if (!ConfigManager.grenadeBoostToggle.value)\n                    return true;\n\n                MonoSingleton<TimeController>.Instance.ParryFlash();\n                ___hitSomething = true;\n\n                grn.transform.LookAt(Camera.main.transform.position + Camera.main.transform.forward * 100.0f);\n\n                Rigidbody rb = grn.GetComponent<Rigidbody>();\n                rb.velocity = Vector3.zero;\n                rb.AddRelativeForce(Vector3.forward * Mathf.Max(Plugin.MinGrenadeParryVelocity, rb.velocity.magnitude), ForceMode.VelocityChange);\n                rb.velocity = grn.transform.forward * Mathf.Max(Plugin.MinGrenadeParryVelocity, rb.velocity.magnitude);\n", "                /*if (grn.rocket)\n                    MonoSingleton<StyleHUD>.Instance.AddPoints(100, Plugin.StyleIDs.rocketBoost, MonoSingleton<GunControl>.Instance.currentWeapon, null);\n                else\n                    MonoSingleton<StyleHUD>.Instance.AddPoints(100, Plugin.StyleIDs.fistfulOfNades, MonoSingleton<GunControl>.Instance.currentWeapon, null);\n                */\n\n                GrenadeParriedFlag flag = grn.GetComponent<GrenadeParriedFlag>();\n                if (flag != null)\n                    flag.parryCount += 1;\n                else\n                {\n                    flag = grn.gameObject.AddComponent<GrenadeParriedFlag>();\n                    flag.grenadeType = (grn.rocket) ? GrenadeParriedFlag.GrenadeType.Rocket : GrenadeParriedFlag.GrenadeType.Core;\n                    flag.weapon = MonoSingleton<GunControl>.Instance.currentWeapon;\n                }\n\n                grn.rocketSpeed *= 1f + ConfigManager.rocketBoostSpeedMultiplierPerHit.value;\n\n                ___anim.Play(\"Hook\", 0, 0.065f);\n                __result = true;\n                return false;\n            }\n\n            return true;\n        }\n    }\n", "    class Grenade_Explode_Patch1\n    {\n        static bool Prefix(Grenade __instance, ref bool __2, ref bool __1, ref bool ___exploded)\n        {\n            GrenadeParriedFlag flag = __instance.GetComponent<GrenadeParriedFlag>();\n            if (flag == null)\n                return true;\n\n            if (__instance.rocket)\n            {\n                bool rocketParried = flag != null;\n                bool rocketHitGround = __1;\n\n                flag.temporaryBigExplosion = GameObject.Instantiate(__instance.superExplosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                __instance.superExplosion = flag.temporaryBigExplosion;", "            if (__instance.rocket)\n            {\n                bool rocketParried = flag != null;\n                bool rocketHitGround = __1;\n\n                flag.temporaryBigExplosion = GameObject.Instantiate(__instance.superExplosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                __instance.superExplosion = flag.temporaryBigExplosion;\n                foreach (Explosion e in __instance.superExplosion.GetComponentsInChildren<Explosion>())\n                {\n                    e.speed *= 1f + ConfigManager.rocketBoostSizeMultiplierPerHit.value * flag.parryCount;\n                    e.damage *= (int)(1f + ConfigManager.rocketBoostDamageMultiplierPerHit.value * flag.parryCount);\n                    e.maxSize *= 1f + ConfigManager.rocketBoostSizeMultiplierPerHit.value * flag.parryCount;\n                }\n\n                flag.temporaryExplosion = GameObject.Instantiate(__instance.explosion, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n                __instance.explosion = flag.temporaryExplosion;", "                if (rocketParried/* && rocketHitGround*/)\n                {\n                    if(!rocketHitGround || ConfigManager.rocketBoostAlwaysExplodesToggle.value)\n                        __1 = false;\n\n                    foreach(Explosion e in (__2) ? flag.temporaryBigExplosion.GetComponentsInChildren<Explosion>() : flag.temporaryExplosion.GetComponentsInChildren<Explosion>())\n                    {\n                        GrenadeParriedFlag fFlag = e.gameObject.AddComponent<GrenadeParriedFlag>();\n                        fFlag.weapon = flag.weapon;\n                        fFlag.grenadeType = GrenadeParriedFlag.GrenadeType.Rocket;\n                        fFlag.parryCount = flag.parryCount;\n                        break;\n                    }\n                }\n", "                foreach (Explosion e in __instance.explosion.GetComponentsInChildren<Explosion>())\n                {\n                    e.speed *= 1f + ConfigManager.rocketBoostSizeMultiplierPerHit.value * flag.parryCount;\n                    e.damage *= (int)(1f + ConfigManager.rocketBoostDamageMultiplierPerHit.value * flag.parryCount);\n                    e.maxSize *= 1f + ConfigManager.rocketBoostSizeMultiplierPerHit.value * flag.parryCount;\n                }\n            }\n            else\n            {\n                if (flag != null/* && flag.bigExplosionOverride*/)\n                {\n                    __2 = true;\n                    GameObject explosion = GameObject.Instantiate(__instance.superExplosion);", "                if (flag != null/* && flag.bigExplosionOverride*/)\n                {\n                    __2 = true;\n                    GameObject explosion = GameObject.Instantiate(__instance.superExplosion);\n                    foreach(Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n                    {\n                        exp.damage = (int)(exp.damage * ConfigManager.grenadeBoostDamageMultiplier.value);\n                        exp.maxSize *= ConfigManager.grenadeBoostSizeMultiplier.value;\n                        exp.speed *= ConfigManager.grenadeBoostSizeMultiplier.value;\n                    }\n                    __instance.superExplosion = explosion;\n                    flag.temporaryBigExplosion = explosion;\n                }\n            }\n\n            return true;\n        }\n\n        static void Postfix(Grenade __instance, ref bool ___exploded)\n        {\n            GrenadeParriedFlag flag = __instance.GetComponent<GrenadeParriedFlag>();", "            if (flag == null)\n                return;\n\n            if (__instance.rocket)\n            {\n                if (flag.temporaryExplosion != null)\n                {\n                    GameObject.Destroy(flag.temporaryExplosion);\n                    flag.temporaryExplosion = null;\n                }\n                if (flag.temporaryBigExplosion != null)\n                {\n                    GameObject.Destroy(flag.temporaryBigExplosion);\n                    flag.temporaryBigExplosion = null;\n                }\n            }\n            else\n            {", "                if (flag.temporaryBigExplosion != null)\n                {\n                    GameObject.Destroy(flag.temporaryBigExplosion);\n                    flag.temporaryBigExplosion = null;\n                }\n            }\n            else\n            {\n                if (flag.temporaryBigExplosion != null)\n                {\n                    GameObject.Destroy(flag.temporaryBigExplosion);\n                    flag.temporaryBigExplosion = null;\n                }\n            }\n        }\n    }\n", "                if (flag.temporaryBigExplosion != null)\n                {\n                    GameObject.Destroy(flag.temporaryBigExplosion);\n                    flag.temporaryBigExplosion = null;\n                }\n            }\n        }\n    }\n\n    class Grenade_Collision_Patch\n    {\n        static float lastTime = 0;\n\n        static bool Prefix(Grenade __instance, Collider __0)\n        {\n            GrenadeParriedFlag flag = __instance.GetComponent<GrenadeParriedFlag>();", "    class Grenade_Collision_Patch\n    {\n        static float lastTime = 0;\n\n        static bool Prefix(Grenade __instance, Collider __0)\n        {\n            GrenadeParriedFlag flag = __instance.GetComponent<GrenadeParriedFlag>();\n            if (flag == null)\n                return true;\n\n            //if (!Plugin.ultrapainDifficulty || !ConfigManager.playerTweakToggle.value || !ConfigManager.grenadeBoostToggle.value)\n            //    return true;\n", "            //if (!Plugin.ultrapainDifficulty || !ConfigManager.playerTweakToggle.value || !ConfigManager.grenadeBoostToggle.value)\n            //    return true;\n\n            if (__0.gameObject.layer != 14 && __0.gameObject.layer != 20)\n            {\n                EnemyIdentifierIdentifier enemyIdentifierIdentifier;\n                if ((__0.gameObject.layer == 11 || __0.gameObject.layer == 10) && __0.TryGetComponent<EnemyIdentifierIdentifier>(out enemyIdentifierIdentifier) && enemyIdentifierIdentifier.eid)\n                {\n                    if (enemyIdentifierIdentifier.eid.enemyType != EnemyType.MaliciousFace && flag.grenadeType == GrenadeParriedFlag.GrenadeType.Core && (Time.time - lastTime >= 0.25f || lastTime < 0))\n                    {\n                        lastTime = Time.time;\n                        flag.bigExplosionOverride = true;\n\n                        MonoSingleton<StyleHUD>.Instance.AddPoints(ConfigManager.grenadeBoostStylePoints.value, ConfigManager.grenadeBoostStyleText.guid, MonoSingleton<GunControl>.Instance.currentWeapon, null);\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n", "                    if (enemyIdentifierIdentifier.eid.enemyType != EnemyType.MaliciousFace && flag.grenadeType == GrenadeParriedFlag.GrenadeType.Core && (Time.time - lastTime >= 0.25f || lastTime < 0))\n                    {\n                        lastTime = Time.time;\n                        flag.bigExplosionOverride = true;\n\n                        MonoSingleton<StyleHUD>.Instance.AddPoints(ConfigManager.grenadeBoostStylePoints.value, ConfigManager.grenadeBoostStyleText.guid, MonoSingleton<GunControl>.Instance.currentWeapon, null);\n                    }\n                }\n            }\n\n            return true;\n        }\n    }\n", "    class Explosion_Collide_Patch\n    {\n        static float lastTime = 0;\n\n        static bool Prefix(Explosion __instance, Collider __0)\n        {\n            GrenadeParriedFlag flag = __instance.gameObject.GetComponent<GrenadeParriedFlag>();\n            if (flag == null || flag.registeredStyle)\n                return true;\n\n            if (!flag.registeredStyle && __0.gameObject.tag != \"Player\" && (__0.gameObject.layer == 10 || __0.gameObject.layer == 11)\n                && __instance.canHit != AffectedSubjects.PlayerOnly)\n            {\n                EnemyIdentifierIdentifier componentInParent = __0.GetComponentInParent<EnemyIdentifierIdentifier>();", "            if (!flag.registeredStyle && __0.gameObject.tag != \"Player\" && (__0.gameObject.layer == 10 || __0.gameObject.layer == 11)\n                && __instance.canHit != AffectedSubjects.PlayerOnly)\n            {\n                EnemyIdentifierIdentifier componentInParent = __0.GetComponentInParent<EnemyIdentifierIdentifier>();\n                if(flag.grenadeType == GrenadeParriedFlag.GrenadeType.Rocket && componentInParent != null && componentInParent.eid != null && !componentInParent.eid.blessed && !componentInParent.eid.dead && (Time.time - lastTime >= 0.25f || lastTime < 0))\n                {\n                    flag.registeredStyle = true;\n                    lastTime = Time.time;\n                    MonoSingleton<StyleHUD>.Instance.AddPoints(ConfigManager.rocketBoostStylePoints.value, ConfigManager.rocketBoostStyleText.guid, flag.weapon, null, flag.parryCount);\n                }\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Solider.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class Solider_Start_Patch\n    {\n        static void Postfix(ZombieProjectiles __instance, ref GameObject ___decProjectile, ref GameObject ___projectile, ref EnemyIdentifier ___eid, ref Animator ___anim)\n        {\n            if (___eid.enemyType != EnemyType.Soldier)\n                return;\n\n            /*___projectile = Plugin.soliderBullet;\n", "            if (___eid.enemyType != EnemyType.Soldier)\n                return;\n\n            /*___projectile = Plugin.soliderBullet;\n\n            if (Plugin.decorativeProjectile2.gameObject != null)\n                ___decProjectile = Plugin.decorativeProjectile2.gameObject;*/\n\n            __instance.gameObject.AddComponent<SoliderShootCounter>();\n        }\n    }\n", "    class Solider_SpawnProjectile_Patch\n    {\n        static void Postfix(ZombieProjectiles __instance, ref EnemyIdentifier ___eid, ref GameObject ___origWP)\n        {\n            if (___eid.enemyType != EnemyType.Soldier)\n                return;\n\n            ___eid.weakPoint = null;\n        }\n    }\n", "    class SoliderGrenadeFlag : MonoBehaviour\n    {\n        public GameObject tempExplosion;\n    }\n\n    class Solider_ThrowProjectile_Patch\n    {\n        static void Postfix(ZombieProjectiles __instance, ref GameObject ___currentProjectile, ref EnemyIdentifier ___eid, ref GameObject ___player, ref Animator ___anim, ref float ___coolDown)\n        {\n            if (___eid.enemyType != EnemyType.Soldier)\n                return;\n\n            ___currentProjectile.GetComponent<ProjectileSpread>().spreadAmount = 10;\n            ___currentProjectile.SetActive(true);\n\n            SoliderShootCounter counter = __instance.gameObject.GetComponent<SoliderShootCounter>();", "            if (___eid.enemyType != EnemyType.Soldier)\n                return;\n\n            ___currentProjectile.GetComponent<ProjectileSpread>().spreadAmount = 10;\n            ___currentProjectile.SetActive(true);\n\n            SoliderShootCounter counter = __instance.gameObject.GetComponent<SoliderShootCounter>();\n            if (counter.remainingShots > 0)\n            {\n                counter.remainingShots -= 1;\n", "                if (counter.remainingShots != 0)\n                {\n                    ___anim.Play(\"Shoot\", 0, Plugin.SoliderShootAnimationStart / 2f);\n                    ___anim.fireEvents = true;\n                    __instance.DamageStart();\n\n                    ___coolDown = 0;\n                }\n                else\n                {\n                    counter.remainingShots = ConfigManager.soliderShootCount.value;", "                    if (ConfigManager.soliderShootGrenadeToggle.value)\n                    {\n                        GameObject grenade = GameObject.Instantiate(Plugin.shotgunGrenade.gameObject, ___currentProjectile.transform.position, ___currentProjectile.transform.rotation);\n                        grenade.transform.Translate(Vector3.forward * 0.5f);\n\n                        Vector3 targetPos = Plugin.PredictPlayerPosition(__instance.GetComponent<Collider>(), ___eid.totalSpeedModifier);\n                        grenade.transform.LookAt(targetPos);\n\n                        Rigidbody rb = grenade.GetComponent<Rigidbody>();\n                        //rb.maxAngularVelocity = 10000;\n                        //foreach (Rigidbody r in grenade.GetComponentsInChildren<Rigidbody>())\n                        //    r.maxAngularVelocity = 10000;\n                        rb.AddForce(grenade.transform.forward * Plugin.SoliderGrenadeForce);\n                        //rb.velocity = ___currentProjectile.transform.forward * Plugin.instance.SoliderGrenadeForce;\n                        rb.useGravity = false;\n\n                        grenade.GetComponent<Grenade>().enemy = true;\n                        grenade.GetComponent<Grenade>().CanCollideWithPlayer(true);\n                        grenade.AddComponent<SoliderGrenadeFlag>();\n                    }\n                }\n            }\n\n            //counter.remainingShots = ConfigManager.soliderShootCount.value;\n        }\n    }\n", "                        //foreach (Rigidbody r in grenade.GetComponentsInChildren<Rigidbody>())\n                        //    r.maxAngularVelocity = 10000;\n                        rb.AddForce(grenade.transform.forward * Plugin.SoliderGrenadeForce);\n                        //rb.velocity = ___currentProjectile.transform.forward * Plugin.instance.SoliderGrenadeForce;\n                        rb.useGravity = false;\n\n                        grenade.GetComponent<Grenade>().enemy = true;\n                        grenade.GetComponent<Grenade>().CanCollideWithPlayer(true);\n                        grenade.AddComponent<SoliderGrenadeFlag>();\n                    }\n                }\n            }\n\n            //counter.remainingShots = ConfigManager.soliderShootCount.value;\n        }\n    }\n", "    class Grenade_Explode_Patch\n    {\n        static bool Prefix(Grenade __instance, out bool __state)\n        {\n            __state = false;\n            SoliderGrenadeFlag flag = __instance.GetComponent<SoliderGrenadeFlag>();\n            if (flag == null)\n                return true;\n\n            flag.tempExplosion = GameObject.Instantiate(__instance.explosion);\n            __state = true;", "            foreach(Explosion e in flag.tempExplosion.GetComponentsInChildren<Explosion>())\n            {\n                e.damage = ConfigManager.soliderGrenadeDamage.value;\n                e.maxSize *= ConfigManager.soliderGrenadeSize.value;\n                e.speed *= ConfigManager.soliderGrenadeSize.value;\n            }\n            __instance.explosion = flag.tempExplosion;\n\n            return true;\n        }\n\n        static void Postfix(Grenade __instance, bool __state)\n        {", "            if (!__state)\n                return;\n\n            SoliderGrenadeFlag flag = __instance.GetComponent<SoliderGrenadeFlag>();\n            GameObject.Destroy(flag.tempExplosion);\n        }\n    }\n\n    class SoliderShootCounter : MonoBehaviour\n    {\n        public int remainingShots = ConfigManager.soliderShootCount.value;\n    }\n}\n", "    class SoliderShootCounter : MonoBehaviour\n    {\n        public int remainingShots = ConfigManager.soliderShootCount.value;\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Turret.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class TurretFlag : MonoBehaviour\n    {\n        public int shootCountRemaining = ConfigManager.turretBurstFireCount.value;\n    }\n\n    class TurretStart\n    {\n        static void Postfix(Turret __instance)\n        {\n            __instance.gameObject.AddComponent<TurretFlag>();\n        }\n    }\n", "    class TurretStart\n    {\n        static void Postfix(Turret __instance)\n        {\n            __instance.gameObject.AddComponent<TurretFlag>();\n        }\n    }\n\n    class TurretShoot\n    {\n        static bool Prefix(Turret __instance, ref EnemyIdentifier ___eid, ref RevolverBeam ___beam, ref Transform ___shootPoint,\n            ref float ___aimTime, ref float ___maxAimTime, ref float ___nextBeepTime, ref float ___flashTime)\n        {\n            TurretFlag flag = __instance.GetComponent<TurretFlag>();", "    class TurretShoot\n    {\n        static bool Prefix(Turret __instance, ref EnemyIdentifier ___eid, ref RevolverBeam ___beam, ref Transform ___shootPoint,\n            ref float ___aimTime, ref float ___maxAimTime, ref float ___nextBeepTime, ref float ___flashTime)\n        {\n            TurretFlag flag = __instance.GetComponent<TurretFlag>();\n            if (flag == null)\n                return true;\n\n            if (flag.shootCountRemaining > 0)\n            {\n                RevolverBeam revolverBeam = GameObject.Instantiate<RevolverBeam>(___beam, new Vector3(__instance.transform.position.x, ___shootPoint.transform.position.y, __instance.transform.position.z), ___shootPoint.transform.rotation);\n                revolverBeam.alternateStartPoint = ___shootPoint.transform.position;\n                RevolverBeam revolverBeam2;", "            if (flag.shootCountRemaining > 0)\n            {\n                RevolverBeam revolverBeam = GameObject.Instantiate<RevolverBeam>(___beam, new Vector3(__instance.transform.position.x, ___shootPoint.transform.position.y, __instance.transform.position.z), ___shootPoint.transform.rotation);\n                revolverBeam.alternateStartPoint = ___shootPoint.transform.position;\n                RevolverBeam revolverBeam2;\n                if (___eid.totalDamageModifier != 1f && revolverBeam.TryGetComponent<RevolverBeam>(out revolverBeam2))\n                {\n                    revolverBeam2.damage *= ___eid.totalDamageModifier;\n                }\n\n                ___nextBeepTime = 0;\n                ___flashTime = 0;\n                ___aimTime = ___maxAimTime - ConfigManager.turretBurstFireDelay.value;", "                if (___aimTime < 0)\n                    ___aimTime = 0;\n\n                flag.shootCountRemaining -= 1;\n                return false;\n            }\n            else\n                flag.shootCountRemaining = ConfigManager.turretBurstFireCount.value;\n\n            return true;\n        }\n    }\n", "    class TurretAim\n    {\n        static void Postfix(Turret __instance)\n        {\n            TurretFlag flag = __instance.GetComponent<TurretFlag>();\n            if (flag == null)\n                return;\n\n            flag.shootCountRemaining = ConfigManager.turretBurstFireCount.value;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Filth.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class SwingCheck2_CheckCollision_Patch2\n    {\n        static bool Prefix(SwingCheck2 __instance, Collider __0, EnemyIdentifier ___eid)\n        {\n            if (__0.gameObject.tag != \"Player\")\n                return true;\n", "            if (__0.gameObject.tag != \"Player\")\n                return true;\n\n            if (__instance.transform.parent == null)\n                return true;\n\n            EnemyIdentifier eid = __instance.transform.parent.gameObject.GetComponent<EnemyIdentifier>();\n            if (eid == null || eid.enemyType != EnemyType.Filth)\n                return true;\n\n            GameObject expObj = GameObject.Instantiate(Plugin.explosion, eid.transform.position, Quaternion.identity);", "            foreach(Explosion exp in expObj.GetComponentsInChildren<Explosion>())\n            {\n                exp.enemy = true;\n                exp.damage = (int)(ConfigManager.filthExplosionDamage.value * ___eid.totalDamageModifier);\n                exp.maxSize *= ConfigManager.filthExplosionSize.value;\n                exp.speed *= ConfigManager.filthExplosionSize.value;\n                exp.toIgnore.Add(EnemyType.Filth);\n            }\n\n            if (ConfigManager.filthExplodeKills.value)\n            {\n                eid.Death();\n            }\n\n            return false;\n        }\n    }\n}\n", "            if (ConfigManager.filthExplodeKills.value)\n            {\n                eid.Death();\n            }\n\n            return false;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Ferryman.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing UnityEngine;\nusing UnityEngine.AI;\n\nnamespace Ultrapain.Patches\n{\n    class FerrymanFlag : MonoBehaviour\n    {", "{\n    class FerrymanFlag : MonoBehaviour\n    {\n        private int currentCombo = 0;\n        public List<int> randomComboPattern = new List<int>();\n        public int remainingCombo = ConfigManager.ferrymanComboCount.value;\n\n        void Start()\n        {\n            int attackCount = 3;\n            int allocationPerAttack = 1;\n", "            for (int attack = 0; attack < attackCount; attack++)\n                for (int i = 0; i < allocationPerAttack; i++)\n                    randomComboPattern.Add(attack);\n\n            System.Random rng = new System.Random(System.DateTime.Today.Millisecond);\n            randomComboPattern.OrderBy(a => rng.Next()).ToList();\n        }\n\n        public int GetNextCombo()\n        {\n            currentCombo++;", "        public int GetNextCombo()\n        {\n            currentCombo++;\n            if (currentCombo >= randomComboPattern.Count)\n                currentCombo = 0;\n            return randomComboPattern[currentCombo];\n        }\n    }\n\n    class FerrymanStart\n    {\n        static void Postfix(Ferryman __instance)\n        {\n            __instance.gameObject.AddComponent<FerrymanFlag>();\n        }\n    }\n", "    class FerrymanStart\n    {\n        static void Postfix(Ferryman __instance)\n        {\n            __instance.gameObject.AddComponent<FerrymanFlag>();\n        }\n    }\n\n    class FerrymanStopMoving\n    {\n        public static MethodInfo SnapToGround = typeof(Ferryman).GetMethod(\"SnapToGround\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n        static void Postfix(Ferryman __instance, ref Animator ___anim, ref bool ___inAction, ref bool ___tracking, ref NavMeshAgent ___nma,\n            ref bool ___useMain, ref bool ___useOar, ref bool ___useKick, ref bool ___backTrailActive,\n            bool ___bossVersion, bool ___inPhaseChange)\n        {\n            FerrymanFlag flag = __instance.gameObject.GetComponent<FerrymanFlag>();", "    class FerrymanStopMoving\n    {\n        public static MethodInfo SnapToGround = typeof(Ferryman).GetMethod(\"SnapToGround\", BindingFlags.Instance | BindingFlags.NonPublic);\n\n        static void Postfix(Ferryman __instance, ref Animator ___anim, ref bool ___inAction, ref bool ___tracking, ref NavMeshAgent ___nma,\n            ref bool ___useMain, ref bool ___useOar, ref bool ___useKick, ref bool ___backTrailActive,\n            bool ___bossVersion, bool ___inPhaseChange)\n        {\n            FerrymanFlag flag = __instance.gameObject.GetComponent<FerrymanFlag>();\n            if (flag == null)\n                return;\n", "            if (flag == null)\n                return;\n\n            if (___bossVersion && ___inPhaseChange)\n            {\n                flag.remainingCombo = ConfigManager.ferrymanComboCount.value;\n                return;\n            }\n\n            string clipName = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name;\n            if (clipName != \"OarCombo\" && clipName != \"KickCombo\" && clipName != \"Stinger\" && clipName != \"BackstepAttack\")\n                return;\n\n            AnimationClip clip = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip;\n            float time = clip.events.Where(obj => obj.functionName == \"StopMoving\").Last().time;", "            if (clipName != \"OarCombo\" && clipName != \"KickCombo\" && clipName != \"Stinger\" && clipName != \"BackstepAttack\")\n                return;\n\n            AnimationClip clip = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip;\n            float time = clip.events.Where(obj => obj.functionName == \"StopMoving\").Last().time;\n            if (___anim.GetCurrentAnimatorStateInfo(0).normalizedTime < time / clip.length)\n                return;\n\n            //if (flag.remainingCombo == ConfigManager.ferrymanComboCount.value && clipName == \"KickCombo\")\n            //    flag.remainingCombo -= 1;\n\n            flag.remainingCombo -= 1;", "            //if (flag.remainingCombo == ConfigManager.ferrymanComboCount.value && clipName == \"KickCombo\")\n            //    flag.remainingCombo -= 1;\n\n            flag.remainingCombo -= 1;\n            if(flag.remainingCombo <= 0)\n            {\n                flag.remainingCombo = ConfigManager.ferrymanComboCount.value;\n                return;\n            }\n\n            int attackType = flag.GetNextCombo();\n            ", "            if (attackType == 0)\n            {\n                // time = 0.8347\n                // total = 2.4667\n                ___anim.Play(\"OarCombo\", 0, (0.8347f * (1f - ConfigManager.ferrymanAttackDelay.value)) / 2.4667f);\n\n                SnapToGround.Invoke(__instance, new object[0]);\n                ___inAction = true;\n                ___tracking = true;\n                if (___nma.isOnNavMesh)\n                {\n                    ___nma.SetDestination(__instance.transform.position);\n                }\n                //__instance.anim.SetTrigger(\"OarCombo\");\n                ___backTrailActive = true;\n                ___useMain = true;\n                ___useOar = true;\n                ___useKick = false;\n            }", "                if (___nma.isOnNavMesh)\n                {\n                    ___nma.SetDestination(__instance.transform.position);\n                }\n                //__instance.anim.SetTrigger(\"OarCombo\");\n                ___backTrailActive = true;\n                ___useMain = true;\n                ___useOar = true;\n                ___useKick = false;\n            }\n            else if(attackType == 1)\n            {\n                // time = 0.8347\n                // total = 2.4667\n                ___anim.Play(\"KickCombo\", 0, (0.8347f * (1f - ConfigManager.ferrymanAttackDelay.value)) / 2.4667f);\n\n                SnapToGround.Invoke(__instance, new object[0]);\n                ___inAction = true;\n                ___tracking = true;", "            else if(attackType == 1)\n            {\n                // time = 0.8347\n                // total = 2.4667\n                ___anim.Play(\"KickCombo\", 0, (0.8347f * (1f - ConfigManager.ferrymanAttackDelay.value)) / 2.4667f);\n\n                SnapToGround.Invoke(__instance, new object[0]);\n                ___inAction = true;\n                ___tracking = true;\n                if (___nma.isOnNavMesh)\n                {\n                    ___nma.SetDestination(__instance.transform.position);\n                }\n                //__instance.anim.SetTrigger(\"KickCombo\");\n                ___backTrailActive = true;\n                ___useMain = true;\n                ___useOar = false;\n                ___useKick = true;\n            }\n            else\n            {\n                // time = 0.4129\n                // total = 1.3\n                ___anim.Play(\"Stinger\", 0, 0);\n\n                SnapToGround.Invoke(__instance, new object[0]);\n                ___inAction = true;\n                ___tracking = true;", "                if (___nma.isOnNavMesh)\n                {\n                    ___nma.SetDestination(__instance.transform.position);\n                }\n                //__instance.anim.SetTrigger(\"KickCombo\");\n                ___backTrailActive = true;\n                ___useMain = true;\n                ___useOar = false;\n                ___useKick = true;\n            }\n            else\n            {\n                // time = 0.4129\n                // total = 1.3\n                ___anim.Play(\"Stinger\", 0, 0);\n\n                SnapToGround.Invoke(__instance, new object[0]);\n                ___inAction = true;\n                ___tracking = true;", "                if (___nma.isOnNavMesh)\n                {\n                    ___nma.SetDestination(__instance.transform.position);\n                }\n                //__instance.anim.SetTrigger(\"KickCombo\");\n                ___backTrailActive = true;\n                ___useMain = true;\n                ___useOar = true;\n                ___useKick = false;\n            }\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Mindflayer.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.Reflection;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class Mindflayer_Start_Patch\n    {\n        static void Postfix(Mindflayer __instance, ref EnemyIdentifier ___eid)\n        {\n            __instance.gameObject.AddComponent<MindflayerPatch>();\n            //___eid.SpeedBuff();\n        }\n    }\n", "    class Mindflayer_ShootProjectiles_Patch\n    {\n        public static float maxProjDistance = 5;\n        public static float initialProjectileDistance = -1f;\n        public static float distancePerProjShot = 0.2f;\n\n        static bool Prefix(Mindflayer __instance, ref EnemyIdentifier ___eid, ref LayerMask ___environmentMask, ref bool ___enraged)\n        {\n            /*for(int i = 0; i < 20; i++)\n            {\n                Quaternion randomRotation = Quaternion.LookRotation(MonoSingleton<PlayerTracker>.Instance.GetTarget().position - __instance.transform.position);\n                randomRotation.eulerAngles += new Vector3(UnityEngine.Random.Range(-15.0f, 15.0f), UnityEngine.Random.Range(-15.0f, 15.0f), UnityEngine.Random.Range(-15.0f, 15.0f));\n                Projectile componentInChildren = GameObject.Instantiate(Plugin.homingProjectile.gameObject, __instance.transform.position + __instance.transform.forward, randomRotation).GetComponentInChildren<Projectile>();\n\n                Vector3 randomPos = __instance.tentacles[UnityEngine.Random.RandomRangeInt(0, __instance.tentacles.Length)].position;", "            /*for(int i = 0; i < 20; i++)\n            {\n                Quaternion randomRotation = Quaternion.LookRotation(MonoSingleton<PlayerTracker>.Instance.GetTarget().position - __instance.transform.position);\n                randomRotation.eulerAngles += new Vector3(UnityEngine.Random.Range(-15.0f, 15.0f), UnityEngine.Random.Range(-15.0f, 15.0f), UnityEngine.Random.Range(-15.0f, 15.0f));\n                Projectile componentInChildren = GameObject.Instantiate(Plugin.homingProjectile.gameObject, __instance.transform.position + __instance.transform.forward, randomRotation).GetComponentInChildren<Projectile>();\n\n                Vector3 randomPos = __instance.tentacles[UnityEngine.Random.RandomRangeInt(0, __instance.tentacles.Length)].position;\n                if (!Physics.Raycast(__instance.transform.position, randomPos - __instance.transform.position, Vector3.Distance(randomPos, __instance.transform.position), ___environmentMask))\n                    componentInChildren.transform.position = randomPos;\n\n                componentInChildren.speed = 10f * ___eid.totalSpeedModifier * UnityEngine.Random.Range(0.5f, 1.5f);\n                componentInChildren.turnSpeed *= UnityEngine.Random.Range(0.5f, 1.5f);\n                componentInChildren.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n                componentInChildren.safeEnemyType = EnemyType.Mindflayer;\n                componentInChildren.damage *= ___eid.totalDamageModifier;\n            }\n            \n            __instance.chargeParticle.Stop(false, ParticleSystemStopBehavior.StopEmittingAndClear);\n            __instance.cooldown = (float)UnityEngine.Random.Range(4, 5);\n\n            return false;*/\n\n            MindflayerPatch counter = __instance.GetComponent<MindflayerPatch>();", "            if (counter == null)\n                return true;\n\n            if (counter.shotsLeft == 0)\n            {\n                counter.shotsLeft = ConfigManager.mindflayerShootAmount.value;\n                __instance.chargeParticle.Stop(false, ParticleSystemStopBehavior.StopEmittingAndClear);\n                __instance.cooldown = (float)UnityEngine.Random.Range(4, 5);\n                return false;\n            }\n\n            Quaternion randomRotation = Quaternion.LookRotation(MonoSingleton<PlayerTracker>.Instance.GetTarget().position - __instance.transform.position);\n            randomRotation.eulerAngles += new Vector3(UnityEngine.Random.Range(-10.0f, 10.0f), UnityEngine.Random.Range(-10.0f, 10.0f), UnityEngine.Random.Range(-10.0f, 10.0f));\n            Projectile componentInChildren = GameObject.Instantiate(Plugin.homingProjectile, __instance.transform.position + __instance.transform.forward, randomRotation).GetComponentInChildren<Projectile>();\n\n            Vector3 randomPos = __instance.tentacles[UnityEngine.Random.RandomRangeInt(0, __instance.tentacles.Length)].position;", "            if (!Physics.Raycast(__instance.transform.position, randomPos - __instance.transform.position, Vector3.Distance(randomPos, __instance.transform.position), ___environmentMask))\n                componentInChildren.transform.position = randomPos;\n\n            int shotCount = ConfigManager.mindflayerShootAmount.value - counter.shotsLeft;\n            componentInChildren.transform.position += componentInChildren.transform.forward * Mathf.Clamp(initialProjectileDistance + shotCount * distancePerProjShot, 0, maxProjDistance);\n\n            componentInChildren.speed = ConfigManager.mindflayerShootInitialSpeed.value * ___eid.totalSpeedModifier;\n            componentInChildren.turningSpeedMultiplier = ConfigManager.mindflayerShootTurnSpeed.value;\n            componentInChildren.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n            componentInChildren.safeEnemyType = EnemyType.Mindflayer;\n            componentInChildren.damage *= ___eid.totalDamageModifier;\n            componentInChildren.sourceWeapon = __instance.gameObject;\n            counter.shotsLeft -= 1;\n            __instance.Invoke(\"ShootProjectiles\", ConfigManager.mindflayerShootDelay.value / ___eid.totalSpeedModifier);\n\n            return false;\n        }\n    }\n", "    class EnemyIdentifier_DeliverDamage_MF\n    {\n        static bool Prefix(EnemyIdentifier __instance, ref float __3, GameObject __6)\n        {\n            if (__instance.enemyType != EnemyType.Mindflayer)\n                return true;\n\n            if (__6 == null || __6.GetComponent<Mindflayer>() == null)\n                return true;\n\n            __3 *= ConfigManager.mindflayerProjectileSelfDamageMultiplier.value / 100f;\n            return true;\n        }\n    }\n", "    class SwingCheck2_CheckCollision_Patch\n    {\n        static FieldInfo goForward = typeof(Mindflayer).GetField(\"goForward\", BindingFlags.NonPublic | BindingFlags.Instance);\n        static MethodInfo meleeAttack = typeof(Mindflayer).GetMethod(\"MeleeAttack\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n        static bool Prefix(Collider __0, out int __state)\n        {\n            __state = __0.gameObject.layer;\n            return true;\n        }\n\n        static void Postfix(SwingCheck2 __instance, Collider __0, int __state)\n        {", "            if (__0.tag == \"Player\")\n                Debug.Log($\"Collision with {__0.name} with tag {__0.tag} and layer {__state}\");\n            if (__0.gameObject.tag != \"Player\" || __state == 15)\n                return;\n\n            if (__instance.transform.parent == null)\n                return;\n\n            Debug.Log(\"Parent check\");\n            Mindflayer mf = __instance.transform.parent.gameObject.GetComponent<Mindflayer>();\n", "            if (mf == null)\n                return;\n\n            //MindflayerPatch patch = mf.gameObject.GetComponent<MindflayerPatch>();\n\n            Debug.Log(\"Attempting melee combo\");\n            __instance.DamageStop();\n            goForward.SetValue(mf, false);\n            meleeAttack.Invoke(mf, new object[] { });\n\n            /*if (patch.swingComboLeft > 0)\n            {\n                patch.swingComboLeft -= 1;\n                __instance.DamageStop();\n                goForward.SetValue(mf, false);\n                meleeAttack.Invoke(mf, new object[] { });\n            }\n            else\n                patch.swingComboLeft = 2;*/\n        }\n    }\n", "            /*if (patch.swingComboLeft > 0)\n            {\n                patch.swingComboLeft -= 1;\n                __instance.DamageStop();\n                goForward.SetValue(mf, false);\n                meleeAttack.Invoke(mf, new object[] { });\n            }\n            else\n                patch.swingComboLeft = 2;*/\n        }\n    }\n", "    class Mindflayer_MeleeTeleport_Patch\n    {\n        public static Vector3 deltaPosition = new Vector3(0, -10, 0);\n\n        static bool Prefix(Mindflayer __instance, ref EnemyIdentifier ___eid, ref LayerMask ___environmentMask, ref bool ___goingLeft, ref Animator ___anim, ref bool ___enraged)\n        {\n            if (___eid.drillers.Count > 0)\n                return false;\n\n            Vector3 targetPosition = MonoSingleton<PlayerTracker>.Instance.PredictPlayerPosition(0.9f) + deltaPosition;\n            float distance = Vector3.Distance(__instance.transform.position, targetPosition);\n\n            Ray targetRay = new Ray(__instance.transform.position, targetPosition - __instance.transform.position);\n            RaycastHit hit;", "            if (Physics.Raycast(targetRay, out hit, distance, ___environmentMask, QueryTriggerInteraction.Ignore))\n            {\n                targetPosition = targetRay.GetPoint(Mathf.Max(0.0f, hit.distance - 1.0f));\n            }\n\n            MonoSingleton<HookArm>.Instance.StopThrow(1f, true);\n            __instance.transform.position = targetPosition;\n            ___goingLeft = !___goingLeft;\n\n            GameObject.Instantiate<GameObject>(__instance.teleportSound, __instance.transform.position, Quaternion.identity);\n            GameObject gameObject = GameObject.Instantiate<GameObject>(__instance.decoy, __instance.transform.GetChild(0).position, __instance.transform.GetChild(0).rotation);\n            Animator componentInChildren = gameObject.GetComponentInChildren<Animator>();\n            AnimatorStateInfo currentAnimatorStateInfo = ___anim.GetCurrentAnimatorStateInfo(0);\n            componentInChildren.Play(currentAnimatorStateInfo.shortNameHash, 0, currentAnimatorStateInfo.normalizedTime);\n            componentInChildren.speed = 0f;", "            if (___enraged)\n            {\n                gameObject.GetComponent<MindflayerDecoy>().enraged = true;\n            }\n\n            ___anim.speed = 0f;\n            __instance.CancelInvoke(\"ResetAnimSpeed\");\n            __instance.Invoke(\"ResetAnimSpeed\", 0.25f / ___eid.totalSpeedModifier);\n\n            return false;\n        }\n    }\n", "    class SwingCheck2_DamageStop_Patch\n    {\n        static void Postfix(SwingCheck2 __instance)\n        {\n            if (__instance.transform.parent == null)\n                return;\n            GameObject parent = __instance.transform.parent.gameObject;\n            Mindflayer mf = parent.GetComponent<Mindflayer>();\n            if (mf == null)\n                return;\n\n            MindflayerPatch patch = parent.GetComponent<MindflayerPatch>();\n            patch.swingComboLeft = 2;\n        }\n    }\n", "            if (mf == null)\n                return;\n\n            MindflayerPatch patch = parent.GetComponent<MindflayerPatch>();\n            patch.swingComboLeft = 2;\n        }\n    }\n\n    class MindflayerPatch : MonoBehaviour\n    {\n        public int shotsLeft = ConfigManager.mindflayerShootAmount.value;", "    class MindflayerPatch : MonoBehaviour\n    {\n        public int shotsLeft = ConfigManager.mindflayerShootAmount.value;\n        public int swingComboLeft = 2;\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Idol.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class Idol_Death_Patch\n    {\n        static void Postfix(Idol __instance)\n        {", "            if(ConfigManager.idolExplodionType.value == ConfigManager.IdolExplosionType.Sand)\n            {\n                GameObject.Instantiate(Plugin.sandExplosion, __instance.transform.position, Quaternion.identity);\n                return;\n            }\n\n            GameObject tempExplosion = null;\n            switch(ConfigManager.idolExplodionType.value)\n            {\n                case ConfigManager.IdolExplosionType.Normal:\n                    tempExplosion = Plugin.explosion;\n                    break;\n\n                case ConfigManager.IdolExplosionType.Big:\n                    tempExplosion = Plugin.bigExplosion;\n                    break;\n\n                case ConfigManager.IdolExplosionType.Ligthning:\n                    tempExplosion = Plugin.lightningStrikeExplosive;\n                    break;\n\n                case ConfigManager.IdolExplosionType.Sisyphean:\n                    tempExplosion = Plugin.sisyphiusPrimeExplosion;\n                    break;\n            }\n\n            GameObject explosion = GameObject.Instantiate(tempExplosion, __instance.gameObject.transform.position, Quaternion.identity);", "            foreach (Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n            {\n                exp.enemy = true;\n                exp.canHit = AffectedSubjects.All;\n                exp.hitterWeapon = \"\";\n                exp.maxSize *= ConfigManager.idolExplosionSizeMultiplier.value;\n                exp.speed *= ConfigManager.idolExplosionSizeMultiplier.value;\n                exp.damage = (int)(exp.damage * ConfigManager.idolExplosionDamageMultiplier.value);\n                exp.enemyDamageMultiplier = ConfigManager.idolExplosionEnemyDamagePercent.value / 100f;\n            }\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Whiplash.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class HookArm_FixedUpdate_Patch\n    {\n        static bool Prefix(HookArm __instance, ref Grenade ___caughtGrenade, ref Vector3 ___caughtPoint, ref Vector3 ___hookPoint, ref float ___cooldown, ref List<Rigidbody> ___caughtObjects)\n        {\n            if (___caughtGrenade != null && ___caughtGrenade.rocket && !___caughtGrenade.playerRiding && MonoSingleton<WeaponCharges>.Instance.rocketFrozen)\n            {", "            if (___caughtGrenade != null && ___caughtGrenade.rocket && !___caughtGrenade.playerRiding && MonoSingleton<WeaponCharges>.Instance.rocketFrozen)\n            {\n                if (__instance.state == HookState.Throwing)\n                {\n                    if (!MonoSingleton<InputManager>.Instance.InputSource.Hook.IsPressed && (___cooldown <= 0.1f || ___caughtObjects.Count > 0))\n                    {\n                        __instance.StopThrow(0f, false);\n                    }\n\n                    return false;\n                }", "                else if (__instance.state == HookState.Ready)\n                {\n                    if (MonoSingleton<NewMovement>.Instance.boost || MonoSingleton<NewMovement>.Instance.sliding)\n                        return true;\n\n                    ___hookPoint = ___caughtGrenade.transform.position + ___caughtPoint; //__instance.caughtTransform.position + __instance.caughtPoint;\n                    __instance.beingPulled = true;\n                    MonoSingleton<NewMovement>.Instance.rb.velocity = (/*___hookPoint*/___caughtGrenade.transform.position - MonoSingleton<NewMovement>.Instance.transform.position).normalized * 60f;\n                    if (MonoSingleton<NewMovement>.Instance.gc.onGround)\n                        MonoSingleton<NewMovement>.Instance.rb.MovePosition(MonoSingleton<NewMovement>.Instance.transform.position + Vector3.up);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}\n", "                    if (MonoSingleton<NewMovement>.Instance.gc.onGround)\n                        MonoSingleton<NewMovement>.Instance.rb.MovePosition(MonoSingleton<NewMovement>.Instance.transform.position + Vector3.up);\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Cerberus.cs", "chunked_list": ["\ufeffusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class CerberusFlag : MonoBehaviour\n    {\n        public int extraDashesRemaining = ConfigManager.cerberusTotalDashCount.value - 1;\n        public Transform head;\n        public float lastParryTime;\n        private EnemyIdentifier eid;\n", "        public float lastParryTime;\n        private EnemyIdentifier eid;\n\n        private void Awake()\n        {\n            eid = GetComponent<EnemyIdentifier>();\n            head = transform.Find(\"Armature/Control/Waist/Chest/Chest_001/Head\");\n            if (head == null)\n                head = UnityUtils.GetChildByTagRecursively(transform, \"Head\");\n        }\n", "        public void MakeParryable()\n        {\n            lastParryTime = Time.time;\n            GameObject flash = GameObject.Instantiate(Plugin.parryableFlash, head.transform.position, head.transform.rotation, head);\n            flash.transform.LookAt(CameraController.Instance.transform);\n            flash.transform.position += flash.transform.forward;\n            flash.transform.Rotate(Vector3.up, 90, Space.Self);\n        }\n    }\n\n    class StatueBoss_StopTracking_Patch\n    {\n        static void Postfix(StatueBoss __instance, Animator ___anim)\n        {\n            CerberusFlag flag = __instance.GetComponent<CerberusFlag>();", "    class StatueBoss_StopTracking_Patch\n    {\n        static void Postfix(StatueBoss __instance, Animator ___anim)\n        {\n            CerberusFlag flag = __instance.GetComponent<CerberusFlag>();\n            if (flag == null)\n                return;\n\n            if (___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name != \"Tackle\")\n                return;\n\n            flag.MakeParryable();\n        }\n    }\n", "            if (___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name != \"Tackle\")\n                return;\n\n            flag.MakeParryable();\n        }\n    }\n\n    class StatueBoss_Stomp_Patch\n    {\n        static void Postfix(StatueBoss __instance)\n        {\n            CerberusFlag flag = __instance.GetComponent<CerberusFlag>();", "            if (flag == null)\n                return;\n\n            flag.MakeParryable();\n        }\n    }\n\n    class Statue_GetHurt_Patch\n    {\n        static bool Prefix(Statue __instance, EnemyIdentifier ___eid)\n        {\n            CerberusFlag flag = __instance.GetComponent<CerberusFlag>();", "            if (flag == null)\n                return true;\n\n            if (___eid.hitter != \"punch\" && ___eid.hitter != \"shotgunzone\")\n                return true;\n\n            float deltaTime = Time.time - flag.lastParryTime;\n            if (deltaTime > ConfigManager.cerberusParryableDuration.value / ___eid.totalSpeedModifier)\n                return true;\n\n            flag.lastParryTime = 0;\n            ___eid.health -= ConfigManager.cerberusParryDamage.value;\n            MonoSingleton<FistControl>.Instance.currentPunch.Parry(false, ___eid);\n            return true;\n        }\n    }\n", "    class StatueBoss_StopDash_Patch\n    {\n        public static void Postfix(StatueBoss __instance, ref int ___tackleChance)\n        {\n            CerberusFlag flag = __instance.GetComponent<CerberusFlag>();\n            if (flag == null)\n                return;\n\n            if (flag.extraDashesRemaining > 0)\n            {\n                flag.extraDashesRemaining -= 1;\n                __instance.SendMessage(\"Tackle\");\n                ___tackleChance -= 20;\n            }\n            else\n                flag.extraDashesRemaining = ConfigManager.cerberusTotalDashCount.value - 1;\n        }\n    }\n", "            if (flag.extraDashesRemaining > 0)\n            {\n                flag.extraDashesRemaining -= 1;\n                __instance.SendMessage(\"Tackle\");\n                ___tackleChance -= 20;\n            }\n            else\n                flag.extraDashesRemaining = ConfigManager.cerberusTotalDashCount.value - 1;\n        }\n    }\n", "    class StatueBoss_Start_Patch\n    {\n        static void Postfix(StatueBoss __instance)\n        {\n            __instance.gameObject.AddComponent<CerberusFlag>();\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/MaliciousFace.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing System;\nusing System.ComponentModel;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class MaliciousFaceFlag : MonoBehaviour\n    {\n        public bool charging = false;\n    }\n", "        public bool charging = false;\n    }\n\n    class MaliciousFace_Start_Patch\n    {\n        static void Postfix(SpiderBody __instance, ref GameObject ___proj, ref int ___maxBurst)\n        {\n            __instance.gameObject.AddComponent<MaliciousFaceFlag>();\n\n            if (ConfigManager.maliciousFaceHomingProjectileToggle.value)\n            {\n                ___proj = Plugin.homingProjectile;\n                ___maxBurst = Math.Max(0, ConfigManager.maliciousFaceHomingProjectileCount.value - 1);\n            }\n        }\n    }\n", "            if (ConfigManager.maliciousFaceHomingProjectileToggle.value)\n            {\n                ___proj = Plugin.homingProjectile;\n                ___maxBurst = Math.Max(0, ConfigManager.maliciousFaceHomingProjectileCount.value - 1);\n            }\n        }\n    }\n\n    class MaliciousFace_ChargeBeam\n    {\n        static void Postfix(SpiderBody __instance)\n        {", "    class MaliciousFace_ChargeBeam\n    {\n        static void Postfix(SpiderBody __instance)\n        {\n            if (__instance.TryGetComponent<MaliciousFaceFlag>(out MaliciousFaceFlag flag))\n                flag.charging = true;\n        }\n    }\n\n    class MaliciousFace_BeamChargeEnd\n    {\n        static bool Prefix(SpiderBody __instance, float ___maxHealth, ref int ___beamsAmount)\n        {", "    class MaliciousFace_BeamChargeEnd\n    {\n        static bool Prefix(SpiderBody __instance, float ___maxHealth, ref int ___beamsAmount)\n        {\n            if (__instance.TryGetComponent<MaliciousFaceFlag>(out MaliciousFaceFlag flag) && flag.charging)\n            {\n                if (__instance.health < ___maxHealth / 2)\n                    ___beamsAmount = ConfigManager.maliciousFaceBeamCountEnraged.value;\n                else\n                    ___beamsAmount = ConfigManager.maliciousFaceBeamCountNormal.value;\n                \n                flag.charging = false;\n            }\n\n            return true;\n        }\n    }\n", "    class MaliciousFace_ShootProj_Patch\n    {\n        /*static bool Prefix(SpiderBody __instance, ref GameObject ___proj, out bool __state)\n        {\n            __state = false;\n            if (!Plugin.ultrapainDifficulty || !ConfigManager.enemyTweakToggle.value || !ConfigManager.maliciousFaceHomingProjectileToggle.value)\n                return true;\n\n            ___proj = Plugin.homingProjectile;\n            __state = true;\n\n            return true;\n        }*/\n\n        static void Postfix(SpiderBody __instance, ref GameObject ___currentProj, EnemyIdentifier ___eid/*, bool __state*/)\n        {", "            /*if (!__state)\n                return;*/\n\n            Projectile proj = ___currentProj.GetComponent<Projectile>();\n            proj.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n            proj.speed = ConfigManager.maliciousFaceHomingProjectileSpeed.value;\n            proj.turningSpeedMultiplier = ConfigManager.maliciousFaceHomingProjectileTurnSpeed.value;\n            proj.damage = ConfigManager.maliciousFaceHomingProjectileDamage.value;\n            proj.safeEnemyType = EnemyType.MaliciousFace;\n            proj.speed *= ___eid.totalSpeedModifier;\n            proj.damage *= ___eid.totalDamageModifier;\n            ___currentProj.SetActive(true);\n        }\n    }\n", "    class MaliciousFace_Enrage_Patch\n    {\n        static void Postfix(SpiderBody __instance)\n        {\n            EnemyIdentifier comp = __instance.GetComponent<EnemyIdentifier>();\n            for(int i = 0; i < ConfigManager.maliciousFaceRadianceAmount.value; i++)\n                comp.BuffAll();\n            comp.UpdateBuffs(false);\n\n            //__instance.spark = new GameObject();\n        }\n    }\n\n    /*[HarmonyPatch(typeof(SpiderBody))]\n    [HarmonyPatch(\"BeamChargeEnd\")]", "    class MaliciousFace_BeamChargeEnd_Patch\n    {\n        static void Postfix(SpiderBody __instance, ref bool ___parryable)\n        {\n            if (__instance.currentEnrageEffect == null)\n                return;\n            ___parryable = false;\n        }\n    }*/\n\n    /*[HarmonyPatch(typeof(HookArm))]\n    [HarmonyPatch(\"FixedUpdate\")]", "    class HookArm_FixedUpdate_MaliciousFacePatch\n    {\n        static void Postfix(HookArm __instance, ref EnemyIdentifier ___caughtEid)\n        {\n            if (__instance.state == HookState.Caught && ___caughtEid.enemyType == EnemyType.MaliciousFace)\n            {\n                if (___caughtEid.GetComponent<SpiderBody>().currentEnrageEffect == null)\n                    return;\n\n                //__instance.state = HookState.Pulling;\n                ___caughtEid = null;\n                __instance.StopThrow();\n            }\n        }\n    }*/\n}\n"]}
{"filename": "Ultrapain/Patches/Screwdriver.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing UnityEngine.UIElements.UIR;\n\nnamespace Ultrapain.Patches\n{\n    class DrillFlag : MonoBehaviour\n    {", "namespace Ultrapain.Patches\n{\n    class DrillFlag : MonoBehaviour\n    {\n        public Harpoon drill;\n        public Rigidbody rb;\n        public List<Tuple<EnemyIdentifier, float>> targetEids = new List<Tuple<EnemyIdentifier, float>>();\n        public List<EnemyIdentifier> piercedEids = new List<EnemyIdentifier>();\n        public Transform currentTargetTrans;\n        public Collider currentTargetCol;\n        public EnemyIdentifier currentTargetEid;\n\n        void Awake()\n        {", "        public Transform currentTargetTrans;\n        public Collider currentTargetCol;\n        public EnemyIdentifier currentTargetEid;\n\n        void Awake()\n        {\n            if (drill == null)\n                drill = GetComponent<Harpoon>();\n            if (rb == null)\n                rb = GetComponent<Rigidbody>();\n        }\n\n        void Update()\n        {", "            if (rb == null)\n                rb = GetComponent<Rigidbody>();\n        }\n\n        void Update()\n        {\n            if(targetEids != null)\n            {\n                if (currentTargetEid == null || currentTargetEid.dead || currentTargetEid.blessed || currentTargetEid.stuckMagnets.Count == 0)\n                {\n                    currentTargetEid = null;", "                if (currentTargetEid == null || currentTargetEid.dead || currentTargetEid.blessed || currentTargetEid.stuckMagnets.Count == 0)\n                {\n                    currentTargetEid = null;\n                    foreach (Tuple<EnemyIdentifier, float> item in targetEids)\n                    {\n                        EnemyIdentifier eid = item.Item1;\n                        if (eid == null || eid.dead || eid.blessed || eid.stuckMagnets.Count == 0)\n                            continue;\n                        currentTargetEid = eid;\n                        currentTargetTrans = eid.transform;\n                        if (currentTargetEid.gameObject.TryGetComponent(out Collider col))\n                            currentTargetCol = col;\n                        break;\n                    }\n                }\n", "                        if (currentTargetEid.gameObject.TryGetComponent(out Collider col))\n                            currentTargetCol = col;\n                        break;\n                    }\n                }\n\n                if(currentTargetEid != null)\n                {\n                    transform.LookAt(currentTargetCol == null ? currentTargetTrans.position : currentTargetCol.bounds.center);\n                    rb.velocity = transform.forward * 150f;\n                }\n                else\n                {\n                    targetEids.Clear();\n                }\n            }\n        }\n    }\n", "    class Harpoon_Start\n    {\n        static void Postfix(Harpoon __instance)\n        {\n            if (!__instance.drill)\n                return;\n            DrillFlag flag = __instance.gameObject.AddComponent<DrillFlag>();\n            flag.drill = __instance;\n        }\n    }\n", "    class Harpoon_Punched\n    {\n        static void Postfix(Harpoon __instance, EnemyIdentifierIdentifier ___target)\n        {\n            if (!__instance.drill)\n                return;\n\n            DrillFlag flag = __instance.GetComponent<DrillFlag>();\n            if (flag == null)\n                return;\n", "            if (flag == null)\n                return;\n\n            if(___target != null && ___target.eid != null)\n                flag.targetEids = UnityUtils.GetClosestEnemies(__instance.transform.position, 3, (sourcePos, enemy) =>\n                {\n                    if (enemy == ___target.eid)\n                        return false;\n\n                    foreach (Magnet m in enemy.stuckMagnets)\n                    {", "                    foreach (Magnet m in enemy.stuckMagnets)\n                    {\n                        if (m != null)\n                            return true;\n                    }\n\n                    return false;\n                });\n            else\n                flag.targetEids = UnityUtils.GetClosestEnemies(__instance.transform.position, 3, (sourcePos, enemy) =>\n                {", "                    foreach(Magnet m in enemy.stuckMagnets)\n                    {\n                        if (m != null)\n                            return true;\n                    }\n\n                    return false;\n                });\n        }\n    }\n", "    class Harpoon_OnTriggerEnter_Patch\n    {\n        public static float forwardForce = 10f;\n        public static float upwardForce = 10f;\n        static LayerMask envLayer = new LayerMask() { m_Mask = 16777472 };\n\n        private static Harpoon lastHarpoon;\n        static bool Prefix(Harpoon __instance, Collider __0)\n        {\n            if (!__instance.drill)\n                return true;\n", "            if (!__instance.drill)\n                return true;\n\n            if(__0.TryGetComponent(out EnemyIdentifierIdentifier eii))\n            {\n                if (eii.eid == null)\n                    return true;\n                EnemyIdentifier eid = eii.eid;\n\n                DrillFlag flag = __instance.GetComponent<DrillFlag>();\n                if (flag == null)\n                    return true;\n", "                if (flag == null)\n                    return true;\n\n                if(flag.currentTargetEid != null)\n                {\n                    if(flag.currentTargetEid == eid)\n                    {\n                        flag.targetEids.Clear();\n                        flag.piercedEids.Clear();\n                        flag.currentTargetEid = null;\n                        flag.currentTargetTrans = null;\n                        flag.currentTargetCol = null;\n", "                        if(ConfigManager.screwDriverHomeDestroyMagnets.value)\n                        {\n                            foreach (Magnet h in eid.stuckMagnets)\n                                if (h != null)\n                                    GameObject.Destroy(h.gameObject);\n                            eid.stuckMagnets.Clear();\n                        }\n                        return true;\n                    }\n                    else if (!flag.piercedEids.Contains(eid))\n                    {", "                    else if (!flag.piercedEids.Contains(eid))\n                    {\n                        if (ConfigManager.screwDriverHomePierceDamage.value > 0)\n                        {\n                            eid.hitter = \"harpoon\";\n                            eid.DeliverDamage(__0.gameObject, __instance.transform.forward, __instance.transform.position, ConfigManager.screwDriverHomePierceDamage.value, false, 0, null, false);\n                            flag.piercedEids.Add(eid);\n                        }\n                        return false;\n                    }\n\n                    return false;\n                }\n            }\n\n            Coin sourceCoin = __0.gameObject.GetComponent<Coin>();", "            if (sourceCoin != null)\n            {\n                if (__instance == lastHarpoon)\n                    return true;\n\n                Quaternion currentRotation = Quaternion.Euler(0, __0.transform.eulerAngles.y, 0);\n                int totalCoinCount = ConfigManager.screwDriverCoinSplitCount.value;\n                float rotationPerIteration = 360f / totalCoinCount;\n            \n                for(int i = 0; i < totalCoinCount; i++)\n                {\n                    GameObject coinClone = GameObject.Instantiate(Plugin.coin, __instance.transform.position, currentRotation);\n                    Coin comp = coinClone.GetComponent<Coin>();\n                    comp.sourceWeapon = sourceCoin.sourceWeapon;\n                    comp.power = sourceCoin.power;\n                    Rigidbody rb = coinClone.GetComponent<Rigidbody>();\n\n                    rb.AddForce(coinClone.transform.forward * forwardForce + Vector3.up * upwardForce, ForceMode.VelocityChange);\n                    currentRotation = Quaternion.Euler(0, currentRotation.eulerAngles.y + rotationPerIteration, 0);\n                }\n\n                GameObject.Destroy(__0.gameObject);\n                GameObject.Destroy(__instance.gameObject);\n                lastHarpoon = __instance;\n                return false;\n            }\n\n            Grenade sourceGrn = __0.GetComponent<Grenade>();", "                for(int i = 0; i < totalCoinCount; i++)\n                {\n                    GameObject coinClone = GameObject.Instantiate(Plugin.coin, __instance.transform.position, currentRotation);\n                    Coin comp = coinClone.GetComponent<Coin>();\n                    comp.sourceWeapon = sourceCoin.sourceWeapon;\n                    comp.power = sourceCoin.power;\n                    Rigidbody rb = coinClone.GetComponent<Rigidbody>();\n\n                    rb.AddForce(coinClone.transform.forward * forwardForce + Vector3.up * upwardForce, ForceMode.VelocityChange);\n                    currentRotation = Quaternion.Euler(0, currentRotation.eulerAngles.y + rotationPerIteration, 0);\n                }\n\n                GameObject.Destroy(__0.gameObject);\n                GameObject.Destroy(__instance.gameObject);\n                lastHarpoon = __instance;\n                return false;\n            }\n\n            Grenade sourceGrn = __0.GetComponent<Grenade>();", "            if(sourceGrn != null)\n            {\n                if (__instance == lastHarpoon)\n                    return true;\n\n                Quaternion currentRotation = Quaternion.Euler(0, __0.transform.eulerAngles.y, 0);\n                int totalGrenadeCount = ConfigManager.screwDriverCoinSplitCount.value;\n                float rotationPerIteration = 360f / totalGrenadeCount;\n                List<Tuple<EnemyIdentifier , float>> targetEnemies = new List<Tuple<EnemyIdentifier, float>>();\n\n                foreach (GameObject enemy in GameObject.FindGameObjectsWithTag(\"Enemy\"))\n                {\n                    float sqrMagnitude = (enemy.transform.position - __0.transform.position).sqrMagnitude;", "                foreach (GameObject enemy in GameObject.FindGameObjectsWithTag(\"Enemy\"))\n                {\n                    float sqrMagnitude = (enemy.transform.position - __0.transform.position).sqrMagnitude;\n                    if (targetEnemies.Count < totalGrenadeCount || sqrMagnitude < targetEnemies.Last().Item2)\n                    {\n                        EnemyIdentifier eid = enemy.GetComponent<EnemyIdentifier>();\n                        if (eid == null || eid.dead || eid.blessed)\n                            continue;\n\n                        if (Physics.Raycast(__0.transform.position, enemy.transform.position - __0.transform.position, out RaycastHit hit, Vector3.Distance(__0.transform.position, enemy.transform.position) - 0.5f, envLayer))\n                            continue;\n", "                        if (Physics.Raycast(__0.transform.position, enemy.transform.position - __0.transform.position, out RaycastHit hit, Vector3.Distance(__0.transform.position, enemy.transform.position) - 0.5f, envLayer))\n                            continue;\n\n                        if(targetEnemies.Count == 0)\n                        {\n                            targetEnemies.Add(new Tuple<EnemyIdentifier, float>(eid, sqrMagnitude));\n                            continue;\n                        }\n\n                        int insertionPoint = targetEnemies.Count;\n                        while (insertionPoint != 0 && targetEnemies[insertionPoint - 1].Item2 > sqrMagnitude)\n                            insertionPoint -= 1;\n\n                        targetEnemies.Insert(insertionPoint, new Tuple<EnemyIdentifier, float>(eid, sqrMagnitude));", "                        while (insertionPoint != 0 && targetEnemies[insertionPoint - 1].Item2 > sqrMagnitude)\n                            insertionPoint -= 1;\n\n                        targetEnemies.Insert(insertionPoint, new Tuple<EnemyIdentifier, float>(eid, sqrMagnitude));\n                        if (targetEnemies.Count > totalGrenadeCount)\n                            targetEnemies.RemoveAt(totalGrenadeCount);\n                    }\n                }\n\n                for (int i = 0; i < totalGrenadeCount; i++)\n                {\n                    Grenade grenadeClone = GameObject.Instantiate(sourceGrn, __instance.transform.position, currentRotation);\n                    Rigidbody rb = grenadeClone.GetComponent<Rigidbody>();\n\n                    rb.velocity = Vector3.zero;", "                for (int i = 0; i < totalGrenadeCount; i++)\n                {\n                    Grenade grenadeClone = GameObject.Instantiate(sourceGrn, __instance.transform.position, currentRotation);\n                    Rigidbody rb = grenadeClone.GetComponent<Rigidbody>();\n\n                    rb.velocity = Vector3.zero;\n                    if(i <= targetEnemies.Count - 1 || targetEnemies.Count != 0)\n                    {\n                        grenadeClone.transform.LookAt(targetEnemies[i <= targetEnemies.Count - 1 ? i : 0].Item1.transform);\n                        if (!grenadeClone.rocket)\n                        {\n                            rb.AddForce(grenadeClone.transform.forward * 50f, ForceMode.VelocityChange);\n                            rb.useGravity = false;\n                        }\n                        else\n                        {\n                            grenadeClone.rocketSpeed = 150f;\n                        }\n                    }\n                    else\n                    {\n                        rb.AddForce(grenadeClone.transform.forward * forwardForce + Vector3.up * upwardForce, ForceMode.VelocityChange);\n                    }\n\n                    currentRotation = Quaternion.Euler(0, currentRotation.eulerAngles.y + rotationPerIteration, 0);\n                }\n\n                GameObject.Destroy(__instance.gameObject);\n                GameObject.Destroy(sourceGrn.gameObject);\n                lastHarpoon = __instance;\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n", "                        if (!grenadeClone.rocket)\n                        {\n                            rb.AddForce(grenadeClone.transform.forward * 50f, ForceMode.VelocityChange);\n                            rb.useGravity = false;\n                        }\n                        else\n                        {\n                            grenadeClone.rocketSpeed = 150f;\n                        }\n                    }\n                    else\n                    {\n                        rb.AddForce(grenadeClone.transform.forward * forwardForce + Vector3.up * upwardForce, ForceMode.VelocityChange);\n                    }\n\n                    currentRotation = Quaternion.Euler(0, currentRotation.eulerAngles.y + rotationPerIteration, 0);\n                }\n\n                GameObject.Destroy(__instance.gameObject);\n                GameObject.Destroy(sourceGrn.gameObject);\n                lastHarpoon = __instance;\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/EnrageEffect.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class EnrageEffect_Start\n    {\n        static void Postfix(EnrageEffect __instance)\n        {\n            AudioSource enrageAud = __instance.gameObject.GetComponents<AudioSource>().Where(src => src.loop).First();", "    class EnrageEffect_Start\n    {\n        static void Postfix(EnrageEffect __instance)\n        {\n            AudioSource enrageAud = __instance.gameObject.GetComponents<AudioSource>().Where(src => src.loop).First();\n            if (enrageAud.isPlaying)\n                enrageAud.Stop();\n            enrageAud.clip = Plugin.enrageAudioCustom;\n            enrageAud.Play();\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Leviathan.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Reflection;\nusing System.Text;\nusing ULTRAKILL.Cheats;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class Leviathan_Flag : MonoBehaviour\n    {", "namespace Ultrapain.Patches\n{\n    class Leviathan_Flag : MonoBehaviour\n    {\n        private LeviathanHead comp;\n        private Animator anim;\n        //private Collider col;\n        private LayerMask envMask = new LayerMask() { value = 1 << 8 | 1 << 24 };\n\n        public float playerRocketRideTracker = 0;\n", "        public float playerRocketRideTracker = 0;\n\n        private GameObject currentProjectileEffect;\n        private AudioSource currentProjectileAud;\n        private Transform shootPoint;\n        public float currentProjectileSize = 0;\n        public float beamChargeRate = 12f / 1f;\n\n        public int beamRemaining = 0;\n\n        public int projectilesRemaining = 0;", "        public int beamRemaining = 0;\n\n        public int projectilesRemaining = 0;\n        public float projectileDelayRemaining = 0f;\n\n        private static FieldInfo ___inAction = typeof(LeviathanHead).GetField(\"inAction\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n        private void Awake()\n        {\n            comp = GetComponent<LeviathanHead>();\n            anim = GetComponent<Animator>();\n            //col = GetComponent<Collider>();\n        }\n", "        public bool beamAttack = false;\n        public bool projectileAttack = false;\n\n        public bool charging = false;\n        private void Update()\n        {\n            if (currentProjectileEffect != null && (charging || currentProjectileSize < 11.9f))\n            {\n                currentProjectileSize += beamChargeRate * Time.deltaTime;\n                currentProjectileEffect.transform.localScale = Vector3.one * currentProjectileSize;\n                currentProjectileAud.pitch = currentProjectileSize / 2;\n            }\n        }\n", "        public void ChargeBeam(Transform shootPoint)\n        {\n            if (currentProjectileEffect != null)\n                return;\n            this.shootPoint = shootPoint;\n\n            charging = true;\n            currentProjectileSize = 0;\n            currentProjectileEffect = GameObject.Instantiate(Plugin.chargeEffect, shootPoint);\n            currentProjectileAud = currentProjectileEffect.GetComponent<AudioSource>();\n            currentProjectileEffect.transform.localPosition = new Vector3(0, 0, 6);\n            currentProjectileEffect.transform.localScale = Vector3.zero;\n\n            beamRemaining = ConfigManager.leviathanChargeCount.value;\n            beamChargeRate = 11.9f / ConfigManager.leviathanChargeDelay.value;\n            Invoke(\"PrepareForFire\", ConfigManager.leviathanChargeDelay.value / comp.lcon.eid.totalSpeedModifier);\n        }\n", "        private Grenade FindTargetGrenade()\n        {\n            List<Grenade> list = GrenadeList.Instance.grenadeList;\n            Grenade targetGrenade = null;\n            Vector3 playerPos = PlayerTracker.Instance.GetTarget().position;\n            foreach (Grenade grn in list)\n            {\n                if (Vector3.Distance(grn.transform.position, playerPos) <= 10f)\n                {\n                    targetGrenade = grn;\n                    break;\n                }\n            }\n\n            return targetGrenade;\n        }\n", "        private Grenade targetGrenade = null;\n        public void PrepareForFire()\n        {\n            charging = false;\n\n            // OLD PREDICTION\n            //targetShootPoint = NewMovement.Instance.playerCollider.bounds.center;\n            //if (Physics.Raycast(NewMovement.Instance.transform.position, Vector3.down, out RaycastHit hit, float.MaxValue, envMask))\n            //    targetShootPoint = hit.point;\n\n            // Malicious face beam prediction\n            GameObject player = MonoSingleton<PlayerTracker>.Instance.GetPlayer().gameObject;\n            Vector3 a = new Vector3(MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().x, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().y / (float)(MonoSingleton<NewMovement>.Instance.ridingRocket ? 1 : 2), MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().z);\n            targetShootPoint = (MonoSingleton<NewMovement>.Instance.ridingRocket ? MonoSingleton<NewMovement>.Instance.ridingRocket.transform.position : player.transform.position) + a / (1f / ConfigManager.leviathanChargeDelay.value) / comp.lcon.eid.totalSpeedModifier;\n            RaycastHit raycastHit;\n            // I guess this was in case player is approaching the malface, but it is very unlikely with leviathan", "            /*if (MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude > 0f && col.Raycast(new Ray(player.transform.position, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity()), out raycastHit, MonoSingleton<PlayerTracker>.Instance.GetPlayerVelocity().magnitude * 0.5f / comp.lcon.eid.totalSpeedModifier))\n            {\n                targetShootPoint = player.transform.position;\n            }\n            else */if (Physics.Raycast(player.transform.position, targetShootPoint - player.transform.position, out raycastHit, Vector3.Distance(targetShootPoint, player.transform.position), LayerMaskDefaults.Get(LMD.EnvironmentAndBigEnemies), QueryTriggerInteraction.Collide))\n            {\n                targetShootPoint = raycastHit.point;\n            }\n\n            Invoke(\"Shoot\", ConfigManager.leviathanChargeDelay.value / comp.lcon.eid.totalSpeedModifier);\n        }\n", "        private Vector3 RandomVector(float min, float max)\n        {\n            return new Vector3(UnityEngine.Random.Range(min, max), UnityEngine.Random.Range(min, max), UnityEngine.Random.Range(min, max));\n        }\n\n        public Vector3 targetShootPoint;\n        private void Shoot()\n        {\n            Debug.Log(\"Attempting to shoot projectile for leviathan\");\n            GameObject proj = GameObject.Instantiate(Plugin.maliciousFaceProjectile, shootPoint.transform.position, Quaternion.identity);\n", "            if (targetGrenade == null)\n                targetGrenade = FindTargetGrenade();\n\n            if (targetGrenade != null)\n            {\n                //NewMovement.Instance.playerCollider.bounds.center\n                //proj.transform.rotation = Quaternion.LookRotation(targetGrenade.transform.position - shootPoint.transform.position);\n                proj.transform.rotation = Quaternion.LookRotation(targetGrenade.transform.position - shootPoint.transform.position);\n            }\n            else\n            {\n                proj.transform.rotation = Quaternion.LookRotation(targetShootPoint - proj.transform.position);\n                //proj.transform.rotation = Quaternion.LookRotation(NewMovement.Instance.playerCollider.bounds.center - proj.transform.position);\n                //proj.transform.eulerAngles += RandomVector(-5f, 5f);\n            }\n            proj.transform.localScale = new Vector3(2f, 1f, 2f);\n", "            if (proj.TryGetComponent(out RevolverBeam projComp))\n            {\n                GameObject expClone = GameObject.Instantiate(projComp.hitParticle, new Vector3(1000000, 1000000, 1000000), Quaternion.identity);\n\n                foreach (Explosion exp in expClone.GetComponentsInChildren<Explosion>())\n                {\n                    exp.maxSize *= ConfigManager.leviathanChargeSizeMulti.value;\n                    exp.speed *= ConfigManager.leviathanChargeSizeMulti.value;\n                    exp.damage = (int)(exp.damage * ConfigManager.leviathanChargeDamageMulti.value * comp.lcon.eid.totalDamageModifier);\n                    exp.toIgnore.Add(EnemyType.Leviathan);\n                }\n\n                projComp.damage *= 2 * comp.lcon.eid.totalDamageModifier;\n                projComp.hitParticle = expClone;\n            }\n\n            beamRemaining -= 1;", "            if (beamRemaining <= 0)\n            {\n                Destroy(currentProjectileEffect);\n                currentProjectileSize = 0;\n                beamAttack = false;\n\n                if (projectilesRemaining <= 0)\n                {\n                    comp.lookAtPlayer = false;\n                    anim.SetBool(\"ProjectileBurst\", false);\n                    ___inAction.SetValue(comp, false);\n                    targetGrenade = null;\n                }\n                else\n                {\n                    comp.lookAtPlayer = true;\n                    projectileAttack = true;\n                }\n            }\n            else\n            {\n                targetShootPoint = NewMovement.Instance.playerCollider.bounds.center;", "                if (Physics.Raycast(NewMovement.Instance.transform.position, Vector3.down, out RaycastHit hit, float.MaxValue, envMask))\n                    targetShootPoint = hit.point;\n\n                comp.lookAtPlayer = true;\n                Invoke(\"PrepareForFire\", ConfigManager.leviathanChargeDelay.value / comp.lcon.eid.totalSpeedModifier);\n            }\n        }\n\n        private void SwitchToSecondPhase()\n        {\n            comp.lcon.phaseChangeHealth = comp.lcon.stat.health;\n        }\n    }\n", "        private void SwitchToSecondPhase()\n        {\n            comp.lcon.phaseChangeHealth = comp.lcon.stat.health;\n        }\n    }\n\n    class LeviathanTail_Flag : MonoBehaviour\n    {\n        public int swingCount = 0;\n\n        private Animator ___anim;", "        public int swingCount = 0;\n\n        private Animator ___anim;\n        private void Awake()\n        {\n            ___anim = GetComponent<Animator>();\n        }\n\n        public static float crossfadeDuration = 0.05f;\n        private void SwingAgain()\n        {\n            ___anim.CrossFade(\"TailWhip\", crossfadeDuration, 0, LeviathanTail_SwingEnd.targetStartNormalized);\n        }\n    }\n\n", "        public static float crossfadeDuration = 0.05f;\n        private void SwingAgain()\n        {\n            ___anim.CrossFade(\"TailWhip\", crossfadeDuration, 0, LeviathanTail_SwingEnd.targetStartNormalized);\n        }\n    }\n\n\n    class Leviathan_Start\n    {\n        static void Postfix(LeviathanHead __instance)\n        {\n            Leviathan_Flag flag = __instance.gameObject.AddComponent<Leviathan_Flag>();", "    class Leviathan_Start\n    {\n        static void Postfix(LeviathanHead __instance)\n        {\n            Leviathan_Flag flag = __instance.gameObject.AddComponent<Leviathan_Flag>();\n            if(ConfigManager.leviathanSecondPhaseBegin.value)\n                flag.Invoke(\"SwitchToSecondPhase\", 2f / __instance.lcon.eid.totalSpeedModifier);\n        }\n    }\n\n    class Leviathan_FixedUpdate\n    {", "    class Leviathan_FixedUpdate\n    {\n        public static float projectileForward = 10f;\n\n        static bool Roll(float chancePercent)\n        {\n            return UnityEngine.Random.Range(0, 99.9f) <= chancePercent;\n        }\n\n        static bool Prefix(LeviathanHead __instance, LeviathanController ___lcon, ref bool ___projectileBursting, float ___projectileBurstCooldown,\n            Transform ___shootPoint, ref bool ___trackerIgnoreLimits, Animator ___anim, ref int ___previousAttack)\n        {", "            if (!__instance.active)\n            {\n                return false;\n            }\n\n            Leviathan_Flag flag = __instance.GetComponent<Leviathan_Flag>();\n            if (flag == null)\n                return true;\n\n            if (___projectileBursting && flag.projectileAttack)\n            {", "            if (___projectileBursting && flag.projectileAttack)\n            {\n                if (flag.projectileDelayRemaining > 0f)\n                {\n                    flag.projectileDelayRemaining = Mathf.MoveTowards(flag.projectileDelayRemaining, 0f, Time.deltaTime * __instance.lcon.eid.totalSpeedModifier);\n                }\n                else\n                {\n                    flag.projectilesRemaining -= 1;\n                    flag.projectileDelayRemaining = (1f / ConfigManager.leviathanProjectileDensity.value) / __instance.lcon.eid.totalSpeedModifier;\n\n                    GameObject proj = null;\n                    Projectile comp = null;", "                    if (Roll(ConfigManager.leviathanProjectileYellowChance.value) && ConfigManager.leviathanProjectileMixToggle.value)\n                    {\n                        proj = GameObject.Instantiate(Plugin.hideousMassProjectile, ___shootPoint.position, ___shootPoint.rotation);\n                        comp = proj.GetComponent<Projectile>();\n                        comp.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n                        comp.safeEnemyType = EnemyType.Leviathan;\n\n                        // values from p2 flesh prison\n                        comp.turnSpeed *= 4f;\n                        comp.turningSpeedMultiplier *= 4f;\n                        comp.predictiveHomingMultiplier = 1.25f;\n                    }", "                    else if (Roll(ConfigManager.leviathanProjectileBlueChance.value) && ConfigManager.leviathanProjectileMixToggle.value)\n                    {\n                        proj = GameObject.Instantiate(Plugin.homingProjectile, ___shootPoint.position, ___shootPoint.rotation);\n                        comp = proj.GetComponent<Projectile>();\n                        comp.target = MonoSingleton<PlayerTracker>.Instance.GetTarget();\n                        comp.safeEnemyType = EnemyType.Leviathan;\n\n                        // values from mindflayer\n                        comp.turningSpeedMultiplier = 0.5f;\n                        comp.speed = 20f;\n                        comp.speed *= ___lcon.eid.totalSpeedModifier;\n                        comp.damage *= ___lcon.eid.totalDamageModifier;\n                    }\n                    else\n                    {\n                        proj = GameObject.Instantiate<GameObject>(MonoSingleton<DefaultReferenceManager>.Instance.projectile, ___shootPoint.position, ___shootPoint.rotation);\n                        comp = proj.GetComponent<Projectile>();\n                        comp.safeEnemyType = EnemyType.Leviathan;\n\n                        comp.speed *= 2f;\n                        comp.enemyDamageMultiplier = 0.5f;\n                    }\n\n                    comp.speed *= __instance.lcon.eid.totalSpeedModifier;\n                    comp.damage *= __instance.lcon.eid.totalDamageModifier;\n                    comp.safeEnemyType = EnemyType.Leviathan;\n                    comp.enemyDamageMultiplier = ConfigManager.leviathanProjectileFriendlyFireDamageMultiplier.normalizedValue;\n                    proj.transform.localScale *= 2f;\n                    proj.transform.position += proj.transform.forward * projectileForward;\n                }\n            }\n", "            if (___projectileBursting)\n            {\n                if (flag.projectilesRemaining <= 0 || BlindEnemies.Blind)\n                {\n                    flag.projectileAttack = false;\n\n                    if (!flag.beamAttack)\n                    {\n                        ___projectileBursting = false;\n                        ___trackerIgnoreLimits = false;\n                        ___anim.SetBool(\"ProjectileBurst\", false);\n                    }\n                }\n                else\n                {", "                    if (NewMovement.Instance.ridingRocket != null && ConfigManager.leviathanChargeAttack.value && ConfigManager.leviathanChargeHauntRocketRiding.value)\n                    {\n                        flag.playerRocketRideTracker += Time.deltaTime;\n                        if (flag.playerRocketRideTracker >= 1 && !flag.beamAttack)\n                        {\n                            flag.projectileAttack = false;\n                            flag.beamAttack = true;\n                            __instance.lookAtPlayer = true;\n                            flag.ChargeBeam(___shootPoint);\n                            flag.beamRemaining = 1;\n\n                            return false;\n                        }\n                    }\n                    else\n                    {\n                        flag.playerRocketRideTracker = 0;\n                    }\n                }\n            }\n\n            return false;\n        }\n    }\n", "    class Leviathan_ProjectileBurst\n    {\n        static bool Prefix(LeviathanHead __instance, Animator ___anim,\n            ref int ___projectilesLeftInBurst, ref float ___projectileBurstCooldown, ref bool ___inAction)\n        {\n            if (!__instance.active)\n            {\n                return false;\n            }\n\n            Leviathan_Flag flag = __instance.GetComponent<Leviathan_Flag>();", "            if (flag == null)\n                return true;\n            if (flag.beamAttack || flag.projectileAttack)\n                return false;\n\n            flag.beamAttack = false;\n            if (ConfigManager.leviathanChargeAttack.value)\n            {\n                if (NewMovement.Instance.ridingRocket != null && ConfigManager.leviathanChargeHauntRocketRiding.value)\n                {\n                    flag.beamAttack = true;\n                }", "                if (NewMovement.Instance.ridingRocket != null && ConfigManager.leviathanChargeHauntRocketRiding.value)\n                {\n                    flag.beamAttack = true;\n                }\n                else if (UnityEngine.Random.Range(0, 99.9f) <= ConfigManager.leviathanChargeChance.value && ConfigManager.leviathanChargeAttack.value)\n                {\n                    flag.beamAttack = true;\n                }\n            }\n\n            flag.projectileAttack = true;\n            return true;\n", "            /*if (!beamAttack)\n            {\n                flag.projectileAttack = true;\n                return true;\n            }*/\n\n            /*if(flag.beamAttack)\n            {\n                Debug.Log(\"Attempting to prepare beam for leviathan\");\n                ___anim.SetBool(\"ProjectileBurst\", true);\n\n                //___projectilesLeftInBurst = 1;\n                //___projectileBurstCooldown = 100f;\n                ___inAction = true;\n\n                return true;\n            }*/\n        }\n    }\n", "    class Leviathan_ProjectileBurstStart\n    {\n        static bool Prefix(LeviathanHead __instance, Transform ___shootPoint)\n        {\n            Leviathan_Flag flag = __instance.GetComponent<Leviathan_Flag>();\n            if (flag == null)\n                return true;\n            if (flag.projectileAttack)\n            {\n                if(flag.projectilesRemaining <= 0)\n                {\n                    flag.projectilesRemaining = ConfigManager.leviathanProjectileCount.value;\n                    flag.projectileDelayRemaining = 0;\n                }\n            }\n", "                if(flag.projectilesRemaining <= 0)\n                {\n                    flag.projectilesRemaining = ConfigManager.leviathanProjectileCount.value;\n                    flag.projectileDelayRemaining = 0;\n                }\n            }\n\n            if (flag.beamAttack)\n            {\n                if (!flag.charging)\n                {\n                    Debug.Log(\"Attempting to charge beam for leviathan\");\n                    __instance.lookAtPlayer = true;\n                    flag.ChargeBeam(___shootPoint);\n                }\n            }\n            return true;\n        }\n    }\n\n", "                if (!flag.charging)\n                {\n                    Debug.Log(\"Attempting to charge beam for leviathan\");\n                    __instance.lookAtPlayer = true;\n                    flag.ChargeBeam(___shootPoint);\n                }\n            }\n            return true;\n        }\n    }\n\n", "    class LeviathanTail_Start\n    {\n        static void Postfix(LeviathanTail __instance)\n        {\n            __instance.gameObject.AddComponent<LeviathanTail_Flag>();\n        }\n    }\n\n    // This is the tail attack animation begin\n    // fires at n=3.138\n    // l=5.3333\n    // 0.336\n    // 0.88", "    class LeviathanTail_BigSplash\n    {\n        static bool Prefix(LeviathanTail __instance)\n        {\n            LeviathanTail_Flag flag = __instance.gameObject.GetComponent<LeviathanTail_Flag>();\n            if (flag == null)\n                return true;\n\n            flag.swingCount = ConfigManager.leviathanTailComboCount.value;\n            return true;\n        }\n    }\n", "    class LeviathanTail_SwingEnd\n    {\n        public static float targetEndNormalized = 0.7344f;\n        public static float targetStartNormalized = 0.41f;\n\n        static bool Prefix(LeviathanTail __instance, Animator ___anim)\n        {\n            LeviathanTail_Flag flag = __instance.gameObject.GetComponent<LeviathanTail_Flag>();\n            if (flag == null)\n                return true;\n\n            flag.swingCount -= 1;", "            if (flag == null)\n                return true;\n\n            flag.swingCount -= 1;\n            if (flag.swingCount == 0)\n                return true;\n\n            flag.Invoke(\"SwingAgain\", Mathf.Max(0f, 5.3333f * (0.88f - targetEndNormalized) * (1f / ___anim.speed)));\n            return false;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/SisyphusInstructionist.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing MonoMod.Utils;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    /*public class SisyphusInstructionistFlag : MonoBehaviour\n    {\n\n    }\n\n    [HarmonyPatch(typeof(Sisyphus), nameof(Sisyphus.Knockdown))]", "    public class SisyphusInstructionist_Knockdown_Patch\n    {\n        static void Postfix(Sisyphus __instance, ref EnemyIdentifier ___eid)\n        {\n            SisyphusInstructionistFlag flag = __instance.GetComponent<SisyphusInstructionistFlag>();\n            if (flag != null)\n                return;\n\n            __instance.gameObject.AddComponent<SisyphusInstructionistFlag>();\n\n            foreach(EnemySimplifier esi in UnityUtils.GetComponentsInChildrenRecursively<EnemySimplifier>(__instance.transform))\n            {\n                esi.enraged = true;\n            }\n            GameObject effect = GameObject.Instantiate(Plugin.enrageEffect, __instance.transform);\n            effect.transform.localScale = Vector3.one * 0.2f;\n        }\n    }*/\n", "            foreach(EnemySimplifier esi in UnityUtils.GetComponentsInChildrenRecursively<EnemySimplifier>(__instance.transform))\n            {\n                esi.enraged = true;\n            }\n            GameObject effect = GameObject.Instantiate(Plugin.enrageEffect, __instance.transform);\n            effect.transform.localScale = Vector3.one * 0.2f;\n        }\n    }*/\n\n    public class SisyphusInstructionist_Start\n    {", "    public class SisyphusInstructionist_Start\n    {\n        public static GameObject _shockwave;\n        public static GameObject shockwave\n        {\n            get {\n                if(_shockwave == null && Plugin.shockwave != null)\n                {\n                    _shockwave = GameObject.Instantiate(Plugin.shockwave);\n                    CommonActivator activator = _shockwave.AddComponent<CommonActivator>();\n                    //ObjectActivator objectActivator = _shockwave.AddComponent<ObjectActivator>();\n                    //objectActivator.originalInstanceID = _shockwave.GetInstanceID();\n                    //objectActivator.activator = activator;\n                    activator.originalId = _shockwave.GetInstanceID();\n", "                    foreach (Transform t in _shockwave.transform)\n                        t.gameObject.SetActive(false);\n                    /*Renderer rend = _shockwave.GetComponent<Renderer>();\n                    activator.rend = rend;\n                    rend.enabled = false;*/\n                    Rigidbody rb = _shockwave.GetComponent<Rigidbody>();\n                    activator.rb = rb;\n                    activator.kinematic = rb.isKinematic;\n                    activator.colDetect = rb.detectCollisions;\n                    rb.detectCollisions = false;\n                    rb.isKinematic = true;\n                    AudioSource aud = _shockwave.GetComponent<AudioSource>();\n                    activator.aud = aud;\n                    aud.enabled = false;\n                    /*Collider col = _shockwave.GetComponent<Collider>();\n                    activator.col = col;\n                    col.enabled = false;*/", "                    foreach(Component comp in _shockwave.GetComponents<Component>())\n                    {\n                        if (comp == null || comp is Transform)\n                            continue;\n                        if (comp is MonoBehaviour behaviour)\n                        {\n                            if (behaviour is not CommonActivator && behaviour is not ObjectActivator)\n                            {\n                                behaviour.enabled = false;\n                                activator.comps.Add(behaviour);\n                            }\n                        }\n                    }\n\n                    PhysicalShockwave shockComp = _shockwave.GetComponent<PhysicalShockwave>();\n                    shockComp.maxSize = 100f;\n                    shockComp.speed = ConfigManager.sisyInstJumpShockwaveSpeed.value;\n                    shockComp.damage = ConfigManager.sisyInstJumpShockwaveDamage.value;\n                    shockComp.enemy = true;\n                    shockComp.enemyType = EnemyType.Sisyphus;\n                    _shockwave.transform.localScale = new Vector3(_shockwave.transform.localScale.x, _shockwave.transform.localScale.y * ConfigManager.sisyInstJumpShockwaveSize.value, _shockwave.transform.localScale.z);\n                }\n\n                return _shockwave;\n            }\n        }\n\n        static void Postfix(Sisyphus __instance, ref GameObject ___explosion, ref PhysicalShockwave ___m_ShockwavePrefab)\n        {\n            //___explosion = shockwave/*___m_ShockwavePrefab.gameObject*/;\n            ___m_ShockwavePrefab = shockwave.GetComponent<PhysicalShockwave>();\n        }\n    }\n\n    /*\n     * A bug occurs where if the player respawns, the shockwave prefab gets deleted\n     * \n     * Check existence of the prefab on update\n     */", "    public class SisyphusInstructionist_Update\n    {\n        static void Postfix(Sisyphus __instance, ref PhysicalShockwave ___m_ShockwavePrefab)\n        {\n            //___explosion = shockwave/*___m_ShockwavePrefab.gameObject*/;\n            if(___m_ShockwavePrefab == null)\n                ___m_ShockwavePrefab = SisyphusInstructionist_Start.shockwave.GetComponent<PhysicalShockwave>();\n        }\n    }\n\n    public class SisyphusInstructionist_SetupExplosion\n    {\n        static void Postfix(Sisyphus __instance, ref GameObject __0, EnemyIdentifier ___eid)\n        {\n            GameObject shockwave = GameObject.Instantiate(Plugin.shockwave, __0.transform.position, __0.transform.rotation);\n            PhysicalShockwave comp = shockwave.GetComponent<PhysicalShockwave>();\n\n            comp.enemy = true;\n            comp.enemyType = EnemyType.Sisyphus;\n            comp.maxSize = 100f;\n            comp.speed = ConfigManager.sisyInstBoulderShockwaveSpeed.value * ___eid.totalSpeedModifier;\n            comp.damage = (int)(ConfigManager.sisyInstBoulderShockwaveDamage.value * ___eid.totalDamageModifier);\n            shockwave.transform.localScale = new Vector3(shockwave.transform.localScale.x, shockwave.transform.localScale.y * ConfigManager.sisyInstBoulderShockwaveSize.value, shockwave.transform.localScale.z);\n        }\n\n        /*static bool Prefix(Sisyphus __instance, ref GameObject __0, ref Animator ___anim)\n        {\n            string clipName = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name;\n            Debug.Log($\"Clip name: {clipName}\");\n\n            PhysicalShockwave comp = __0.GetComponent<PhysicalShockwave>();", "    public class SisyphusInstructionist_SetupExplosion\n    {\n        static void Postfix(Sisyphus __instance, ref GameObject __0, EnemyIdentifier ___eid)\n        {\n            GameObject shockwave = GameObject.Instantiate(Plugin.shockwave, __0.transform.position, __0.transform.rotation);\n            PhysicalShockwave comp = shockwave.GetComponent<PhysicalShockwave>();\n\n            comp.enemy = true;\n            comp.enemyType = EnemyType.Sisyphus;\n            comp.maxSize = 100f;\n            comp.speed = ConfigManager.sisyInstBoulderShockwaveSpeed.value * ___eid.totalSpeedModifier;\n            comp.damage = (int)(ConfigManager.sisyInstBoulderShockwaveDamage.value * ___eid.totalDamageModifier);\n            shockwave.transform.localScale = new Vector3(shockwave.transform.localScale.x, shockwave.transform.localScale.y * ConfigManager.sisyInstBoulderShockwaveSize.value, shockwave.transform.localScale.z);\n        }\n\n        /*static bool Prefix(Sisyphus __instance, ref GameObject __0, ref Animator ___anim)\n        {\n            string clipName = ___anim.GetCurrentAnimatorClipInfo(0)[0].clip.name;\n            Debug.Log($\"Clip name: {clipName}\");\n\n            PhysicalShockwave comp = __0.GetComponent<PhysicalShockwave>();", "            if (comp == null)\n                return true;\n\n            comp.enemy = true;\n            comp.enemyType = EnemyType.Sisyphus;\n            comp.maxSize = 100f;\n            comp.speed = 35f;\n            comp.damage = 20;\n            __0.transform.localScale = new Vector3(__0.transform.localScale.x, __0.transform.localScale.y / 2, __0.transform.localScale.z);\n\n            GameObject explosion = GameObject.Instantiate(Plugin.sisyphiusExplosion, __0.transform.position, Quaternion.identity);\n            __0 = explosion;\n\n            return true;\n        }*/\n    }\n", "    public class SisyphusInstructionist_StompExplosion\n    {\n        static bool Prefix(Sisyphus __instance, Transform ___target, EnemyIdentifier ___eid)\n        {\n            Vector3 vector = __instance.transform.position + Vector3.up;\n            if (Physics.Raycast(vector, ___target.position - vector, Vector3.Distance(___target.position, vector), LayerMaskDefaults.Get(LMD.Environment)))\n            {\n                vector = __instance.transform.position + Vector3.up * 5f;\n            }\n            GameObject explosion = Object.Instantiate<GameObject>(Plugin.sisyphiusPrimeExplosion, vector, Quaternion.identity);\n            foreach(Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n            {\n                exp.enemy = true;\n                exp.toIgnore.Add(EnemyType.Sisyphus);\n                exp.maxSize *= ConfigManager.sisyInstStrongerExplosionSizeMulti.value;\n                exp.speed *= ConfigManager.sisyInstStrongerExplosionSizeMulti.value * ___eid.totalSpeedModifier;\n                exp.damage = (int)(exp.damage * ConfigManager.sisyInstStrongerExplosionDamageMulti.value * ___eid.totalDamageModifier);\n            }\n\n            return false;\n        }\n    }\n}\n", "            foreach(Explosion exp in explosion.GetComponentsInChildren<Explosion>())\n            {\n                exp.enemy = true;\n                exp.toIgnore.Add(EnemyType.Sisyphus);\n                exp.maxSize *= ConfigManager.sisyInstStrongerExplosionSizeMulti.value;\n                exp.speed *= ConfigManager.sisyInstStrongerExplosionSizeMulti.value * ___eid.totalSpeedModifier;\n                exp.damage = (int)(exp.damage * ConfigManager.sisyInstStrongerExplosionDamageMulti.value * ___eid.totalDamageModifier);\n            }\n\n            return false;\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/GabrielSecond.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Text;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    class GabrielSecondFlag : MonoBehaviour\n    {\n        public int maxChaos = 7;", "    class GabrielSecondFlag : MonoBehaviour\n    {\n        public int maxChaos = 7;\n        public int chaosRemaining = 7;\n        public GabrielSecond comp;\n\n        public float teleportChance = 20;\n\n        public void ChaoticAttack(float delay)\n        {\n            if(chaosRemaining == 0)\n            {\n                chaosRemaining = maxChaos;\n                return;\n            }\n\n            chaosRemaining -= 1;\n            CancelInvoke(\"CallChaoticAttack\");\n            Invoke(\"CallChaoticAttack\", delay);\n        }\n\n        static MethodInfo BasicCombo = typeof(GabrielSecond).GetMethod(\"BasicCombo\", BindingFlags.Instance | BindingFlags.NonPublic);\n        static MethodInfo FastCombo = typeof(GabrielSecond).GetMethod(\"FastCombo\", BindingFlags.Instance | BindingFlags.NonPublic);\n        static MethodInfo CombineSwords = typeof(GabrielSecond).GetMethod(\"CombineSwords\", BindingFlags.Instance | BindingFlags.NonPublic);\n", "        public void ChaoticAttack(float delay)\n        {\n            if(chaosRemaining == 0)\n            {\n                chaosRemaining = maxChaos;\n                return;\n            }\n\n            chaosRemaining -= 1;\n            CancelInvoke(\"CallChaoticAttack\");\n            Invoke(\"CallChaoticAttack\", delay);\n        }\n\n        static MethodInfo BasicCombo = typeof(GabrielSecond).GetMethod(\"BasicCombo\", BindingFlags.Instance | BindingFlags.NonPublic);\n        static MethodInfo FastCombo = typeof(GabrielSecond).GetMethod(\"FastCombo\", BindingFlags.Instance | BindingFlags.NonPublic);\n        static MethodInfo CombineSwords = typeof(GabrielSecond).GetMethod(\"CombineSwords\", BindingFlags.Instance | BindingFlags.NonPublic);\n", "        public void CallChaoticAttack()\n        {\n            bool teleported = false;\n            if (UnityEngine.Random.Range(0, 100) <= teleportChance)\n            {\n                Debug.Log(\"Attemted teleport\");\n                comp.Teleport(false, false, true, false, false);\n                teleported = true;\n            }\n\n            switch (UnityEngine.Random.RandomRangeInt(0, 3))\n            {\n                case 0:\n                    BasicCombo.Invoke(comp, new object[0]);\n                    break;\n\n                case 1:\n                    FastCombo.Invoke(comp, new object[0]);\n                    break;\n\n                case 2:", "                    if (!comp.secondPhase && !teleported)\n                    {\n                        Debug.Log(\"Attemted sword throw teleport\");\n                        comp.Teleport(false, false, true, false, false);\n                    }\n                    CombineSwords.Invoke(comp, new object[0]);\n                    break;\n            }\n        }\n    }\n", "    class GabrielSecond_Start\n    {\n        static void Postfix(GabrielSecond __instance)\n        {\n            __instance.gameObject.AddComponent<GabrielSecondFlag>().comp = __instance;\n        }\n    }\n\n    class GabrielSecond_FastCombo\n    {\n        //0.3601\n        //0.5075\n        //0.8171", "    class GabrielSecond_FastCombo\n    {\n        //0.3601\n        //0.5075\n        //0.8171\n        public static float[] attackTimings = new float[]\n        {\n            0.3601f * 3.75f,\n            0.5075f * 3.75f,\n            0.8171f * 3.75f,\n        };\n\n        static void Postfix(GabrielSecond __instance)\n        {\n            Debug.Log(\"Fast combo attack\");\n            GabrielSecondFlag flag = __instance.GetComponent<GabrielSecondFlag>();", "            if (flag == null)\n                return;\n            flag.ChaoticAttack(attackTimings[UnityEngine.Random.RandomRangeInt(0, 3)]);\n        }\n    }\n\n    class GabrielSecond_BasicCombo\n    {\n        //0.3908\n        //0.3908\n        //0.7567", "        public static float[] attackTimings = new float[]\n        {\n            0.3908f * 4.3333f,\n            0.3908f * 4.3333f,\n            0.7567f * 4.3333f,\n        };\n\n        static void Postfix(GabrielSecond __instance)\n        {\n            Debug.Log(\"Basic combo attack\");\n            GabrielSecondFlag flag = __instance.GetComponent<GabrielSecondFlag>();", "            if (flag == null)\n                return;\n            flag.ChaoticAttack(attackTimings[UnityEngine.Random.RandomRangeInt(0, 3)]);\n        }\n    }\n\n    class GabrielSecond_ThrowCombo\n    {\n        static float delay = 3.0667f;\n\n        static void Postfix(GabrielSecond __instance)\n        {\n            Debug.Log(\"Throw combo attack\");\n            GabrielSecondFlag flag = __instance.GetComponent<GabrielSecondFlag>();", "            if (flag == null)\n                return;\n            flag.ChaoticAttack(delay);\n        }\n    }\n\n    class GabrielSecond_CombineSwords\n    {\n        static float delay = 0.5f + 1.0833f;\n\n        //0.9079 * 1.0833\n        //0.5 + 1.0833\n        static void Postfix(GabrielSecond __instance)\n        {\n            Debug.Log(\"Combine sword attack\");\n            GabrielSecondFlag flag = __instance.GetComponent<GabrielSecondFlag>();", "            if (flag == null)\n                return;\n            flag.ChaoticAttack(delay);\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/Stalker.cs", "chunked_list": ["\ufeffusing HarmonyLib;\nusing ULTRAKILL.Cheats;\nusing UnityEngine;\n\nnamespace Ultrapain.Patches\n{\n    public class Stalker_SandExplode_Patch\n    {\n        static bool Prefix(Stalker __instance, ref int ___difficulty, ref EnemyIdentifier ___eid, int __0,\n            ref bool ___exploding, ref float ___countDownAmount, ref float ___explosionCharge,\n            ref Color ___currentColor, Color[] ___lightColors, AudioSource ___lightAud, AudioClip[] ___lightSounds,\n            ref bool ___blinking, Machine ___mach, ref bool ___exploded, Transform ___target)\n        {\n            bool removeStalker = true;", "            if (!(StockMapInfo.Instance != null && StockMapInfo.Instance.levelName == \"GOD DAMN THE SUN\"\n                && __instance.transform.parent != null && __instance.transform.parent.name == \"Wave 1\"\n                && __instance.transform.parent.parent != null && __instance.transform.parent.parent.name.StartsWith(\"5 Stuff\")))\n            {\n                removeStalker = false;\n            }\n\n            GameObject explosion = Object.Instantiate<GameObject>(__instance.explosion, __instance.transform.position + Vector3.up * 2.5f, Quaternion.identity);\n            if (__0 != 1)\n            {\n                explosion.transform.localScale *= 1.5f;\n            }", "            if (__0 != 1)\n            {\n                explosion.transform.localScale *= 1.5f;\n            }\n            if (___eid.stuckMagnets.Count > 0)\n            {\n                float num = 0.75f;\n                if (___eid.stuckMagnets.Count > 1)\n                {\n                    num -= 0.125f * (float)(___eid.stuckMagnets.Count - 1);\n                }\n                explosion.transform.localScale *= num;\n            }\n\n            SandificationZone zone = explosion.GetComponentInChildren<SandificationZone>();\n            zone.buffDamage = zone.buffHealth = zone.buffSpeed = false;\n", "            if (ConfigManager.stalkerSpreadHealthRad.value)\n                zone.healthBuff = ___eid.healthBuffModifier + ConfigManager.stalkerSpreadHealthAddition.value;\n            else\n                zone.healthBuff = 0;\n\n            if (ConfigManager.stalkerSpreadDamageRad.value)\n                zone.damageBuff = ___eid.damageBuffModifier + ConfigManager.stalkerSpreadDamageAddition.value;\n            else\n                zone.damageBuff = 0;\n\n            if (ConfigManager.stalkerSpreadSpeedRad.value)\n                zone.speedBuff = ___eid.speedBuffModifier + ConfigManager.stalkerSpreadSpeedAddition.value;\n            else\n                zone.speedBuff = 0;\n", "            if (ConfigManager.stalkerSpreadSpeedRad.value)\n                zone.speedBuff = ___eid.speedBuffModifier + ConfigManager.stalkerSpreadSpeedAddition.value;\n            else\n                zone.speedBuff = 0;\n\n            if ((!removeStalker || ___eid.blessed || InvincibleEnemies.Enabled) && __0 != 1)\n            {\n                ___exploding = false;\n                ___countDownAmount = 0f;\n                ___explosionCharge = 0f;\n                ___currentColor = ___lightColors[0];\n                ___lightAud.clip = ___lightSounds[0];\n                ___blinking = false;\n                return false;\n            }\n\n            ___exploded = true;", "            if (!___mach.limp)\n            {\n                ___mach.GoLimp();\n                ___eid.Death();\n            }\n            if (___target != null)\n            {\n                if (MonoSingleton<StalkerController>.Instance.CheckIfTargetTaken(___target))\n                {\n                    MonoSingleton<StalkerController>.Instance.targets.Remove(___target);\n                }\n                EnemyIdentifier enemyIdentifier;", "                if (___target.TryGetComponent<EnemyIdentifier>(out enemyIdentifier) && enemyIdentifier.buffTargeter == ___eid)\n                {\n                    enemyIdentifier.buffTargeter = null;\n                }\n            }\n            if (___eid.drillers.Count != 0)\n            {\n                for (int i = ___eid.drillers.Count - 1; i >= 0; i--)\n                {\n                    Object.Destroy(___eid.drillers[i].gameObject);\n                }\n            }\n            __instance.gameObject.SetActive(false);\n            Object.Destroy(__instance.gameObject);\n\n            return false;\n        }\n    }\n", "    public class SandificationZone_Enter_Patch\n    {\n        static void Postfix(SandificationZone __instance, Collider __0)\n        {\n            if (__0.gameObject.layer == 10 || __0.gameObject.layer == 11)\n            {\n                EnemyIdentifierIdentifier component = __0.gameObject.GetComponent<EnemyIdentifierIdentifier>();\n                if (component && component.eid && !component.eid.dead && component.eid.enemyType != EnemyType.Stalker)\n                {\n                    EnemyIdentifier eid = component.eid;\n                    if (eid.damageBuffModifier < __instance.damageBuff)\n                        eid.DamageBuff(__instance.damageBuff);", "                    if (eid.damageBuffModifier < __instance.damageBuff)\n                        eid.DamageBuff(__instance.damageBuff);\n                    if (eid.speedBuffModifier < __instance.speedBuff)\n                        eid.SpeedBuff(__instance.speedBuff);\n                    if (eid.healthBuffModifier < __instance.healthBuff)\n                        eid.HealthBuff(__instance.healthBuff);\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "Ultrapain/Patches/SomethingWicked.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Ultrapain.Patches\n{\n    class SomethingWickedFlag : MonoBehaviour\n    {\n        public GameObject spear;", "    class SomethingWickedFlag : MonoBehaviour\n    {\n        public GameObject spear;\n        public MassSpear spearComp;\n        public EnemyIdentifier eid;\n        public Transform spearOrigin;\n        public Rigidbody spearRb;\n\n        public static float SpearTriggerDistance = 80f;\n        public static LayerMask envMask = new LayerMask() { value = (1 << 8) | (1 << 24) };\n\n        void Awake()\n        {", "        public static float SpearTriggerDistance = 80f;\n        public static LayerMask envMask = new LayerMask() { value = (1 << 8) | (1 << 24) };\n\n        void Awake()\n        {\n            if (eid == null)\n                eid = GetComponent<EnemyIdentifier>();\n            if (spearOrigin == null)\n            {\n                GameObject obj = new GameObject();\n                obj.transform.parent = transform;\n                obj.transform.position = GetComponent<Collider>().bounds.center;\n\n                obj.SetActive(false);\n                spearOrigin = obj.transform;\n            }\n        }\n\n        void Update()\n        {", "            if(spear == null)\n            {\n                Vector3 playerCenter = NewMovement.Instance.playerCollider.bounds.center;\n                float distanceFromPlayer = Vector3.Distance(spearOrigin.position, playerCenter);\n\n                if (distanceFromPlayer < SpearTriggerDistance)\n                {\n                    if(!Physics.Raycast(transform.position, playerCenter - transform.position, distanceFromPlayer, envMask))\n                    {\n                        spear = GameObject.Instantiate(Plugin.hideousMassSpear, transform);\n                        spear.transform.position = spearOrigin.position;\n                        spear.transform.LookAt(playerCenter);\n                        spear.transform.position += spear.transform.forward * 5;\n                        spearComp = spear.GetComponent<MassSpear>();\n                        spearRb = spearComp.GetComponent<Rigidbody>();\n\n                        spearComp.originPoint = spearOrigin;\n                        spearComp.damageMultiplier = 0f;\n                        spearComp.speedMultiplier = 2;\n                    }\n                }\n            }", "            else if(spearComp.beenStopped)\n            {\n                if (!spearComp.transform.parent || spearComp.transform.parent.tag != \"Player\")\n                    if(spearRb.isKinematic == true)\n                        GameObject.Destroy(spear);\n            }\n        }\n    }\n\n    class SomethingWicked_Start\n    {\n        static void Postfix(Wicked __instance)\n        {\n            SomethingWickedFlag flag = __instance.gameObject.AddComponent<SomethingWickedFlag>();\n        }\n    }\n", "    class SomethingWicked_Start\n    {\n        static void Postfix(Wicked __instance)\n        {\n            SomethingWickedFlag flag = __instance.gameObject.AddComponent<SomethingWickedFlag>();\n        }\n    }\n\n    class SomethingWicked_GetHit\n    {\n        static void Postfix(Wicked __instance)\n        {\n            SomethingWickedFlag flag = __instance.GetComponent<SomethingWickedFlag>();", "    class SomethingWicked_GetHit\n    {\n        static void Postfix(Wicked __instance)\n        {\n            SomethingWickedFlag flag = __instance.GetComponent<SomethingWickedFlag>();\n            if (flag == null)\n                return;\n\n            if (flag.spear != null)\n                GameObject.Destroy(flag.spear);\n        }\n    }\n", "            if (flag.spear != null)\n                GameObject.Destroy(flag.spear);\n        }\n    }\n\n    class JokeWicked : MonoBehaviour\n    {\n        void OnDestroy()\n        {\n            MusicManager.Instance.ForceStartMusic();\n        }\n    }\n", "    class JokeWicked_GetHit\n    {\n        static void Postfix(Wicked __instance)\n        {\n            if (__instance.GetComponent<JokeWicked>() == null)\n                return;\n\n            GameObject.Destroy(__instance.gameObject);\n        }\n    }\n", "    class ObjectActivator_Activate\n    {\n        static bool Prefix(ObjectActivator __instance)\n        {\n            if (SceneManager.GetActiveScene().name != \"38748a67bc9e67a43956a92f87d1e742\")\n                return true;\n\n            if(__instance.name == \"Scream\")\n            {\n                GameObject goreZone = new GameObject();\n                goreZone.AddComponent<GoreZone>();\n\n                Vector3 spawnPos = new Vector3(86.7637f, -39.9667f, 635.7572f);", "                if (Physics.Raycast(spawnPos + Vector3.up, Vector3.down, out RaycastHit hit, 100f, new LayerMask() { value = (1 << 8) | (1 << 24) }, QueryTriggerInteraction.Ignore))\n                    spawnPos = hit.point;\n\n                GameObject wicked = GameObject.Instantiate(Plugin.somethingWicked, spawnPos, Quaternion.identity, goreZone.transform); ;\n                wicked.AddComponent<JokeWicked>();\n\n                Wicked comp = wicked.GetComponent<Wicked>();\n                comp.patrolPoints = new Transform[] { __instance.transform };\n                wicked.AddComponent<JokeWicked>();\n            }\n            else if(__instance.name == \"Hint 1\")\n            {\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n", "            else if(__instance.name == \"Hint 1\")\n            {\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n"]}
