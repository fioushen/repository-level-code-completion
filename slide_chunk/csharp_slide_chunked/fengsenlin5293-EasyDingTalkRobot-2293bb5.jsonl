{"filename": "Samples/EasyDingTalk.ActionCard/Program.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing Newtonsoft.Json;\n\nnamespace EasyDingTalk.ActionCard\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string keywords = \"[senlin]\";\n\n            var actionCardMsg = new ActionCardMessage\n            {\n                title = \"\u4e54\u5e03\u65af 20 \u5e74\u524d\u60f3\u6253\u9020\u4e00\u95f4\u82f9\u679c\u5496\u5561\u5385\uff0c\u800c\u5b83\u6b63\u662f Apple Store \u7684\u524d\u8eab\",\n                text = $\"![screenshot](https://cdn.pixabay.com/photo/2018/04/17/08/52/steve-jobs-3326938_960_720.jpg) \\r\\n ### \u4e54\u5e03\u65af 20 \u5e74\u524d\u60f3\u6253\u9020\u7684\u82f9\u679c\u5496\u5561\u5385 \\r\\n Apple Store \u7684\u8bbe\u8ba1\u6b63\u4ece\u539f\u6765\u6ee1\u6ee1\u7684\u79d1\u6280\u611f\u8d70\u5411\u751f\u6d3b\u5316\uff0c\u800c\u5176\u751f\u6d3b\u5316\u7684\u8d70\u5411\u5176\u5b9e\u53ef\u4ee5\u8ffd\u6eaf\u5230 20 \u5e74\u524d\u82f9\u679c\u4e00\u4e2a\u5efa\u7acb\u5496\u5561\u9986\u7684\u8ba1\u5212\",\n                btnOrientation = \"0\",\n                singleTitle = \"\u9605\u8bfb\u5168\u6587\",\n                singleURL = \"https://www.dingtalk.com/\"\n            };\n            var message = new Message\n            {\n                Body = actionCardMsg,\n                msgtype = actionCardMsg.msgtype,\n            };\n\n            var singleJumpActionCardMsg = new ActionCardMessage\n            {\n                title = \"\u4e54\u5e03\u65af 20 \u5e74\u524d\u60f3\u6253\u9020\u4e00\u95f4\u82f9\u679c\u5496\u5561\u5385\uff0c\u800c\u5b83\u6b63\u662f Apple Store \u7684\u524d\u8eab\",\n                text = $\"![screenshot](https://cdn.pixabay.com/photo/2018/04/17/08/52/steve-jobs-3326938_960_720.jpg) \\r\\n ### \u4e54\u5e03\u65af 20 \u5e74\u524d\u60f3\u6253\u9020\u7684\u82f9\u679c\u5496\u5561\u5385 \\r\\n Apple Store \u7684\u8bbe\u8ba1\u6b63\u4ece\u539f\u6765\u6ee1\u6ee1\u7684\u79d1\u6280\u611f\u8d70\u5411\u751f\u6d3b\u5316\uff0c\u800c\u5176\u751f\u6d3b\u5316\u7684\u8d70\u5411\u5176\u5b9e\u53ef\u4ee5\u8ffd\u6eaf\u5230 20 \u5e74\u524d\u82f9\u679c\u4e00\u4e2a\u5efa\u7acb\u5496\u5561\u9986\u7684\u8ba1\u5212\",\n                btnOrientation = \"0\",\n                btns = new List<Btn>\n                {\n                    new Btn\n                    {\n                        title = \"\u5185\u5bb9\u4e0d\u9519\",\n                        actionURL = \"https://www.dingtalk.com/\"\n                    },\n                    new Btn\n                    {\n                        title = \"\u4e0d\u611f\u5174\u8da3\",\n                        actionURL = \"https://www.dingtalk.com/\"\n                    }\n                }\n            };\n\n            var singleJumpMessage = new Message\n            {\n                Body = singleJumpActionCardMsg,\n                msgtype = singleJumpActionCardMsg.msgtype,\n            };\n\n            //no Secret\n            //EasyDingTalk easyDingTalk = new EasyDingTalk();\n            //var rst = easyDingTalk.SendMessage(message);\n            // Console.WriteLine(JsonConvert.SerializeObject(rst));\n\n            //with Secret\n            EasyDingTalkSecret easyDingTalkSecret = new EasyDingTalkSecret();\n            //var rstSecret = easyDingTalkSecret.SendMessage(message);\n            var rstSecret = easyDingTalkSecret.SendMessage(singleJumpMessage);\n            Console.WriteLine(JsonConvert.SerializeObject(rstSecret));\n\n            Console.ReadLine();\n        }\n    }\n}"]}
{"filename": "Samples/EasyDingTalk.FeedCard/Program.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing Newtonsoft.Json;\n\nnamespace EasyDingTalk.FeedCard\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string keywords = \"[senlin]\";\n\n            var feedCardMsg = new FeedCardMessage\n            {\n                links =\n                {\n                    new Messages.FeedCard\n                    {\n                        title = \"Steve Jobs\",\n                        messageURL = \"https://www.dingtalk.com/\",\n                        picURL = \"https://cdn.pixabay.com/photo/2018/04/17/08/52/steve-jobs-3326938_960_720.jpg\"\n                    },\n                    new Messages.FeedCard\n                    {\n                        title = \"Stay Hungry\",\n                        messageURL = \"https://www.dingtalk.com/\",\n                        picURL = \"https://cdn.pixabay.com/photo/2015/05/08/15/26/apple-758333_960_720.jpg\"\n                    },\n                    new Messages.FeedCard\n                    {\n                        title = \"Mac Pro\",\n                        messageURL = \"https://www.dingtalk.com/\",\n                        picURL = \"https://cdn.pixabay.com/photo/2020/04/08/20/16/mac-pro-and-pro-display-xdr-5018763_960_720.jpg\"\n                    },\n                }\n            };\n            var message = new Message\n            {\n                Body = feedCardMsg,\n                msgtype = feedCardMsg.msgtype,\n            };\n\n            //no Secret\n            //EasyDingTalk easyDingTalk = new EasyDingTalk();\n            //var rst = easyDingTalk.SendMessage(message);\n            // Console.WriteLine(JsonConvert.SerializeObject(rst));\n\n            //with Secret\n            EasyDingTalkSecret easyDingTalkSecret = new EasyDingTalkSecret();\n            var rstSecret = easyDingTalkSecret.SendMessage(message);\n            Console.WriteLine(JsonConvert.SerializeObject(rstSecret));\n\n            Console.ReadLine();\n        }\n    }\n}"]}
{"filename": "Samples/EasyDingTalk.Link/Program.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing Newtonsoft.Json;\n\nnamespace EasyDingTalk.Link\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string keywords = \"[senlin]\";\n\n            var linkmsg = new LinkMessage\n            {\n                title = \"\u65f6\u4ee3\u7684\u706b\u8f66\u5411\u524d\u5f00\",\n                text = $\"\u8fd9\u4e2a\u5373\u5c06\u53d1\u5e03\u7684\u65b0\u7248\u672c\uff0c\u521b\u59cb\u4ebaxx\u79f0\u5b83\u4e3a\u7ea2\u6811\u6797\u3002\u800c\u5728\u6b64\u4e4b\u524d\uff0c\u6bcf\u5f53\u9762\u4e34\u91cd\u5927\u5347\u7ea7\uff0c\u4ea7\u54c1\u7ecf\u7406\u4eec\u90fd\u4f1a\u53d6\u4e00\u4e2a\u5e94\u666f\u7684\u4ee3\u53f7\uff0c\u8fd9\u4e00\u6b21\uff0c\u4e3a\u4ec0\u4e48\u662f\u7ea2\u6811\u6797\",\n                picUrl = \"https://cdn.pixabay.com/photo/2023/04/21/04/04/clouds-7941024_960_720.jpg\",\n                messageUrl = \"https://www.dingtalk.com/s?__biz=MzA4NjMwMTA2Ng==&mid=2650316842&idx=1&sn=60da3ea2b29f1dcc43a7c8e4a7c97a16&scene=2&srcid=09189AnRJEdIiWVaKltFzNTw&from=timeline&isappinstalled=0&key=&ascene=2&uin=&devicetype=android-23&version=26031933&nettype=WIFI\",\n            };\n            var message = new Message\n            {\n                Body = linkmsg,\n                msgtype = linkmsg.msgtype,\n            };\n\n            //no Secret\n            //EasyDingTalk easyDingTalk = new EasyDingTalk();\n            //var rst = easyDingTalk.SendMessage(message);\n            // Console.WriteLine(JsonConvert.SerializeObject(rst));\n\n            //with Secret\n            EasyDingTalkSecret easyDingTalkSecret = new EasyDingTalkSecret();\n            var rstSecret = easyDingTalkSecret.SendMessage(message);\n            Console.WriteLine(JsonConvert.SerializeObject(rstSecret));\n\n            Console.ReadLine();\n        }\n    }\n}"]}
{"filename": "Samples/EasyDingTalk.Text/Program.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing Newtonsoft.Json;\n\nnamespace EasyDingTalk.Text\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string keywords = \"[senlin]\";\n\n            var textmsg = new TextMessage\n            {\n                content = $\"{keywords}: Hello, \u9489\u9489!\"\n            };\n            var message = new Message\n            {\n                Body = textmsg,\n                at = new At\n                {\n                    isAtAll = true\n                },\n                msgtype = textmsg.msgtype,\n            };\n\n            //no Secret\n            //EasyDingTalk easyDingTalk = new EasyDingTalk();\n            //var rst = easyDingTalk.SendMessage(message);\n            //Console.WriteLine(JsonConvert.SerializeObject(rst));\n\n\n            //with Secret\n            EasyDingTalkSecret easyDingTalkSecret = new EasyDingTalkSecret();\n            var rstSecret = easyDingTalkSecret.SendMessage(message);\n            Console.WriteLine(JsonConvert.SerializeObject(rstSecret));\n\n            Console.ReadLine();\n        }\n    }\n}"]}
{"filename": "Samples/EasyDingTalk.Markdown/Program.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing Newtonsoft.Json;\n\nnamespace EasyDingTalk.Markdown\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string keywords = \"[senlin]\";\n\n            var markdownMsg = new MarkdownMessage\n            {\n                title = \"\u676d\u5dde\u5929\u6c14\",\n                text = $\"#### \u676d\u5dde\u5929\u6c14 @150XXXXXXXX \\n > 9\u5ea6\uff0c\u897f\u5317\u98ce1\u7ea7\uff0c\u7a7a\u6c14\u826f89\uff0c\u76f8\u5bf9\u6e29\u5ea673%\\n > ![screenshot](https://img.alicdn.com/tfs/TB1NwmBEL9TBuNjy1zbXXXpepXa-2400-1218.png)\\n > ###### 10\u70b920\u5206\u53d1\u5e03 [\u5929\u6c14](https://www.dingtalk.com) \\n\",\n            };\n            var message = new Message\n            {\n                Body = markdownMsg,\n                at = new At\n                {\n                    isAtAll = true\n                },\n                msgtype = markdownMsg.msgtype,\n            };\n\n            //no Secret\n            //EasyDingTalk easyDingTalk = new EasyDingTalk();\n            //var rst = easyDingTalk.SendMessage(message);\n            // Console.WriteLine(JsonConvert.SerializeObject(rst));\n\n            //with Secret\n            EasyDingTalkSecret easyDingTalkSecret = new EasyDingTalkSecret();\n            var rstSecret = easyDingTalkSecret.SendMessage(message);\n            Console.WriteLine(JsonConvert.SerializeObject(rstSecret));\n\n            Console.ReadLine();\n        }\n    }\n}"]}
{"filename": "EasyDingTalk/EasyDingTalkSecret.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing Newtonsoft.Json.Linq;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Flurl.Http;\nusing EasyDingTalk.Utilities;", "using Flurl.Http;\nusing EasyDingTalk.Utilities;\n\nnamespace EasyDingTalk\n{\n    public class EasyDingTalkSecret : IEasyDingTalk<Message, MessageResult>\n    {\n        private string _secret;\n        private DateTime _startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1));\n\n        #region constructor\n        public EasyDingTalkSecret(string host, string access_token, string secret)\n        {\n            _secret = secret;\n            RequestUrl = $\"{host}?access_token={access_token}\";\n        }\n\n        public EasyDingTalkSecret()\n        {\n            var settingsPath = SettingsUtil.ResolvePath(\"settings.json\");\n            var settings = SettingsUtil.GetSettingFromJsonFile(settingsPath);\n            RequestUrl = $\"{settings.host}?access_token={settings.access_token}\";\n\n            _secret = settings.secret;\n        }\n        #endregion\n", "        private DateTime _startTime = TimeZone.CurrentTimeZone.ToLocalTime(new System.DateTime(1970, 1, 1));\n\n        #region constructor\n        public EasyDingTalkSecret(string host, string access_token, string secret)\n        {\n            _secret = secret;\n            RequestUrl = $\"{host}?access_token={access_token}\";\n        }\n\n        public EasyDingTalkSecret()\n        {\n            var settingsPath = SettingsUtil.ResolvePath(\"settings.json\");\n            var settings = SettingsUtil.GetSettingFromJsonFile(settingsPath);\n            RequestUrl = $\"{settings.host}?access_token={settings.access_token}\";\n\n            _secret = settings.secret;\n        }\n        #endregion\n", "        #region interface implementation\n\n        public string RequestUrl { get; }\n\n        public MessageResult SendMessage(Message message)\n        {\n            string url = CreateUrl();\n            return url.PostJsonAsync(message).ReceiveJson<MessageResult>().Result;\n        }\n\n        public Task<MessageResult> SendMessageAsync(Message message)\n        {\n            string url = CreateUrl();\n            return RequestUrl.PostJsonAsync(message).ReceiveJson<MessageResult>();\n        }\n        #endregion\n\n\n        #region private methods\n", "        private string CreateUrl()\n        {\n            var timestamp = GetTimeStamp();\n            var sign = GetSign(_secret, timestamp);\n            string url = $\"{RequestUrl}&timestamp={timestamp}&sign={sign}\";\n            return url;\n        }\n\n\n        private string GetTimeStamp()\n        {\n            return (Convert.ToInt64((DateTime.Now - _startTime).TotalMilliseconds)).ToString();\n        }\n", "        private string GetTimeStamp()\n        {\n            return (Convert.ToInt64((DateTime.Now - _startTime).TotalMilliseconds)).ToString();\n        }\n\n        private string GetSign(string secret, string timestamp)\n        {\n            string stringToSign = timestamp + \"\\n\" + secret;\n            System.Security.Cryptography.HMACSHA256 hmac = new System.Security.Cryptography.HMACSHA256(Encoding.UTF8.GetBytes(secret));\n            byte[] hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign));\n            return Convert.ToBase64String(hashBytes);\n        }\n        #endregion\n\n    }\n}\n"]}
{"filename": "EasyDingTalk/MessageResult.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk\n{\n    public class MessageResult\n    {", "namespace EasyDingTalk\n{\n    public class MessageResult\n    {\n        public int errcode { get; set; }\n        public string errmsg { get; set; }\n\n        [Newtonsoft.Json.JsonIgnore]\n        public bool IsSuccess\n        {\n            get\n            {\n                return errcode == 0;\n            }\n        }\n    }\n}\n", "        public bool IsSuccess\n        {\n            get\n            {\n                return errcode == 0;\n            }\n        }\n    }\n}\n"]}
{"filename": "EasyDingTalk/IEasyDingTalk.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk\n{\n    public interface IEasyDingTalk<TMessage, TResult>\n    {\n        string RequestUrl { get; }\n\n        TResult SendMessage(TMessage message);\n        Task<TResult> SendMessageAsync(TMessage message);\n    }\n}\n", "    public interface IEasyDingTalk<TMessage, TResult>\n    {\n        string RequestUrl { get; }\n\n        TResult SendMessage(TMessage message);\n        Task<TResult> SendMessageAsync(TMessage message);\n    }\n}\n"]}
{"filename": "EasyDingTalk/EasyDingTalk.cs", "chunked_list": ["\ufeffusing EasyDingTalk.Messages;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Flurl.Http;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing EasyDingTalk.Utilities;", "using Newtonsoft.Json.Linq;\nusing EasyDingTalk.Utilities;\n\nnamespace EasyDingTalk\n{\n    public class EasyDingTalk : IEasyDingTalk<Message, MessageResult>\n    {\n        #region constructor\n\n        public EasyDingTalk(string host, string access_token)\n        {\n            RequestUrl = $\"{host}?access_token={access_token}\";\n        }\n\n        public EasyDingTalk(string settingsJsonPath)\n        {\n            string url = SettingsUtil.CreateUrlFromJsonFile(settingsJsonPath);\n            RequestUrl = url;\n        }\n\n        public EasyDingTalk()\n        {\n            var settingsPath = SettingsUtil.ResolvePath(\"settings.json\");\n            string url = SettingsUtil.CreateUrlFromJsonFile(settingsPath);\n            RequestUrl = url;\n        }\n        #endregion\n", "        #region interface implementation\n\n\n        public string RequestUrl { get; }\n\n        public MessageResult SendMessage(Message message)\n        {\n            return RequestUrl.PostJsonAsync(message).ReceiveJson<MessageResult>().Result;\n        }\n\n        public Task<MessageResult> SendMessageAsync(Message message)\n        {\n            return RequestUrl.PostJsonAsync(message).ReceiveJson<MessageResult>();\n        }\n        #endregion\n\n\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/MessageBase.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk.Messages\n{\n    //[JsonConverter(typeof(MessageTypeConverter))]\n    public class MessageBase\n    {\n        [Newtonsoft.Json.JsonIgnore]", "{\n    //[JsonConverter(typeof(MessageTypeConverter))]\n    public class MessageBase\n    {\n        [Newtonsoft.Json.JsonIgnore]\n        public string msgtype { get; protected set; }\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/FeedCardMessage.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk.Messages\n{\n    public class FeedCard\n    {\n        public string title { get; set; }", "    public class FeedCard\n    {\n        public string title { get; set; }\n        public string messageURL { get; set; }\n        public string picURL { get; set; }\n    }\n    public class FeedCardMessage : MessageBase\n    {\n        public FeedCardMessage()\n        {\n            msgtype = \"feedCard\";\n        }\n        public List<FeedCard> links { get; set; } = new List<FeedCard>();\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/ActionCardMessage.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk.Messages\n{\n    public class Btn\n    {", "{\n    public class Btn\n    {\n        public string title { get; set; }\n        public string actionURL { get; set; }\n    }\n    public class ActionCardMessage : MessageBase\n    {\n        public ActionCardMessage()\n        {\n            msgtype = \"actionCard\";\n        }\n ", "        public string title { get; set; }\n        public string text { get; set; }\n        public string singleTitle { get; set; }\n        public string singleURL { get; set; }\n        public string btnOrientation { get; set; }\n        [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]\n        public List<Btn> btns { get; set; }\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/TextMessage.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk.Messages\n{\n    public class TextMessage : MessageBase\n    {\n        public TextMessage()\n        {\n            msgtype = \"text\";\n        }", "namespace EasyDingTalk.Messages\n{\n    public class TextMessage : MessageBase\n    {\n        public TextMessage()\n        {\n            msgtype = \"text\";\n        }\n        public string content { get; set; }\n    }\n}\n", "        public string content { get; set; }\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/Message.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection.PortableExecutable;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\nusing Newtonsoft.Json.Linq;", "using Newtonsoft.Json.Converters;\nusing Newtonsoft.Json.Linq;\n\nnamespace EasyDingTalk.Messages\n{\n    public class At\n    {\n        public bool isAtAll { get; set; }\n\n        public List<string> atMobiles { get; set; } = new List<string>();\n\n        public List<string> atUserIds { get; set; } = new List<string>();\n\n    }\n\n\n    [JsonConverter(typeof(MessageTypeConverter))]    ", "    public class Message\n    {\n        public string msgtype { get; set; }\n        public MessageBase Body { get; set; }        \n        public At at { get; set; }\n    }\n\n    public class MessageTypeConverter : JsonConverter\n    {\n        public override bool CanConvert(Type objectType)\n        {\n            throw new NotImplementedException();\n        }\n", "        public override bool CanConvert(Type objectType)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override object? ReadJson(JsonReader reader, Type objectType, object? existingValue, JsonSerializer serializer)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)\n        {\n            var t = value.GetType();\n            var body = t.GetProperty(\"Body\").GetValue(value) as MessageBase;\n            var msgtype = t.GetProperty(\"msgtype\").GetValue(value) as string;\n            var at = t.GetProperty(\"at\").GetValue(value);\n\n            writer.WriteStartObject();\n\n            writer.WritePropertyName(\"msgtype\");\n            writer.WriteValue(msgtype);\n\n            writer.WritePropertyName(msgtype);\n            serializer.Serialize(writer, body);\n", "        public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)\n        {\n            var t = value.GetType();\n            var body = t.GetProperty(\"Body\").GetValue(value) as MessageBase;\n            var msgtype = t.GetProperty(\"msgtype\").GetValue(value) as string;\n            var at = t.GetProperty(\"at\").GetValue(value);\n\n            writer.WriteStartObject();\n\n            writer.WritePropertyName(\"msgtype\");\n            writer.WriteValue(msgtype);\n\n            writer.WritePropertyName(msgtype);\n            serializer.Serialize(writer, body);\n", "            if(at != null)\n            {\n                writer.WritePropertyName(\"at\");\n                serializer.Serialize(writer, at);\n            }     \n\n            writer.WriteEndObject();\n\n        }\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/LinkMessage.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk.Messages\n{\n    public class LinkMessage : MessageBase\n    {\n        public LinkMessage()\n        {\n            msgtype = \"link\";\n        }", "    public class LinkMessage : MessageBase\n    {\n        public LinkMessage()\n        {\n            msgtype = \"link\";\n        }\n        public string messageUrl { get; set; }\n        public string picUrl { get; set; }\n        public string title { get; set; }\n        public string text { get; set; }\n    }\n}\n", "        public string title { get; set; }\n        public string text { get; set; }\n    }\n}\n"]}
{"filename": "EasyDingTalk/Messages/MarkdownMessage.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace EasyDingTalk.Messages\n{\n    public class MarkdownMessage: MessageBase\n    {\n        public MarkdownMessage()\n        {\n            msgtype = \"markdown\";\n        }\n", "    public class MarkdownMessage: MessageBase\n    {\n        public MarkdownMessage()\n        {\n            msgtype = \"markdown\";\n        }\n\n        public string title { get; set; }\n        public string text { get; set; }\n    }\n}\n", "        public string text { get; set; }\n    }\n}\n"]}
{"filename": "EasyDingTalk/Utilities/SettingsUtil.cs", "chunked_list": ["\ufeffusing Newtonsoft.Json.Linq;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Dynamic;\nusing System.Runtime.InteropServices.JavaScript;\n", "using System.Runtime.InteropServices.JavaScript;\n\nnamespace EasyDingTalk.Utilities\n{\n    internal static class SettingsUtil\n    {\n        public static string CreateUrlFromJsonFile(string settingsJsonFilePath)\n        {\n            if (!File.Exists(settingsJsonFilePath))\n            {\n                throw new Exception($\"file '{settingsJsonFilePath}' not exist.\");\n            }\n\n            var settings = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(settingsJsonFilePath));\n            var host = settings[\"host\"].ToString();\n            var access_token = settings[\"access_token\"].ToString();\n            var url = $\"{host}?access_token={access_token}\";\n            return url;\n        }\n", "            if (!File.Exists(settingsJsonFilePath))\n            {\n                throw new Exception($\"file '{settingsJsonFilePath}' not exist.\");\n            }\n\n            var settings = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(settingsJsonFilePath));\n            var host = settings[\"host\"].ToString();\n            var access_token = settings[\"access_token\"].ToString();\n            var url = $\"{host}?access_token={access_token}\";\n            return url;\n        }\n", "        public static dynamic GetSettingFromJsonFile(string settingsJsonFilePath)\n        {\n            if (!File.Exists(settingsJsonFilePath))\n            {\n                throw new Exception($\"file '{settingsJsonFilePath}' not exist.\");\n            }\n            dynamic json = new ExpandoObject();\n            var settings = JsonConvert.DeserializeObject<JObject>(File.ReadAllText(settingsJsonFilePath));\n            json.host = settings[\"host\"].ToString();\n            json.access_token = settings[\"access_token\"].ToString();\n            json.secret = settings[\"secret\"].ToString();\n            return json;\n        }\n", "        public static string ResolvePath(string path)\n        {\n            var assemblyPath = Path.GetDirectoryName(typeof(SettingsUtil).Assembly.Location);\n\n            return Path.Combine(assemblyPath, path);\n        }\n    }\n}\n"]}
