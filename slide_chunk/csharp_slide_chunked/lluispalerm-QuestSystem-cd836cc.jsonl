{"filename": "Editor/GraphEditor/QuestGraphSaveUtility.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing UnityEditor.UIElements;\nusing UnityEditor.Experimental.GraphView;\nusing UnityEditor;\nusing UnityEngine.Windows;\nusing System;", "using UnityEngine.Windows;\nusing System;\n\nnamespace QuestSystem.QuestEditor\n{\n    public class QuestGraphSaveUtility\n    {\n        private QuestGraphView _targetGraphView;\n\n        private List<Edge> Edges => _targetGraphView.edges.ToList();\n        private List<NodeQuestGraph> node => _targetGraphView.nodes.ToList().Cast<NodeQuestGraph>().ToList();\n\n        private List<NodeQuest> _cacheNodes = new List<NodeQuest>();\n", "        public static QuestGraphSaveUtility GetInstance(QuestGraphView targetGraphView)\n        {\n            return new QuestGraphSaveUtility\n            {\n                _targetGraphView = targetGraphView,\n            };\n        }\n\n        private void creteNodeQuestAssets(Quest Q, ref List<NodeQuest> NodesInGraph)\n        {\n            int j = 0;\n            CheckFolders(Q);\n\n            string path = QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}/Nodes\";\n            string tempPath = QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}/Temp\";\n            //Move all nodes OUT to temp", "        private void creteNodeQuestAssets(Quest Q, ref List<NodeQuest> NodesInGraph)\n        {\n            int j = 0;\n            CheckFolders(Q);\n\n            string path = QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}/Nodes\";\n            string tempPath = QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}/Temp\";\n            //Move all nodes OUT to temp\n            if (AssetDatabase.IsValidFolder(path)) {\n                AssetDatabase.CreateFolder(QuestConstants.MISIONS_FOLDER + $\"{Q.misionName}\", \"Temp\");\n\n                var debug = AssetDatabase.MoveAsset(path, tempPath);\n            }\n\n\n            Debug.Log(\"GUID: \" + AssetDatabase.CreateFolder(QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}\", \"Nodes\"));\n            \n            //Order by position \n            List<NodeQuestGraph> nodeList = node.Where(node => !node.entryPoint).ToList();\n", "            if (AssetDatabase.IsValidFolder(path)) {\n                AssetDatabase.CreateFolder(QuestConstants.MISIONS_FOLDER + $\"{Q.misionName}\", \"Temp\");\n\n                var debug = AssetDatabase.MoveAsset(path, tempPath);\n            }\n\n\n            Debug.Log(\"GUID: \" + AssetDatabase.CreateFolder(QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}\", \"Nodes\"));\n            \n            //Order by position \n            List<NodeQuestGraph> nodeList = node.Where(node => !node.entryPoint).ToList();\n", "            foreach (var nodequest in nodeList)\n            {\n                //Visual part\n                string nodeSaveName = Q.misionName + \"_Node\" + j;\n                NodeQuest saveNode; \n\n                //Si existe en temps\n                bool alredyExists = false;\n                if (alredyExists = !string.IsNullOrEmpty(AssetDatabase.AssetPathToGUID(tempPath + \"/\" + nodeSaveName + \".asset\")))\n                {\n                    saveNode = AssetDatabase.LoadAssetAtPath<NodeQuest>(tempPath + \"/\" + nodeSaveName + \".asset\");\n                }\n                else\n                {\n                    saveNode = ScriptableObject.CreateInstance<NodeQuest>();\n                }\n\n                saveNode.GUID = nodequest.GUID;\n                saveNode.position = nodequest.GetPosition().position;\n\n                //Quest Part\n                saveNode.isFinal = nodequest.isFinal;\n                saveNode.extraText = nodequest.extraText;\n                saveNode.nodeObjectives = createObjectivesFromGraph(nodequest.questObjectives);\n", "                if (alredyExists = !string.IsNullOrEmpty(AssetDatabase.AssetPathToGUID(tempPath + \"/\" + nodeSaveName + \".asset\")))\n                {\n                    saveNode = AssetDatabase.LoadAssetAtPath<NodeQuest>(tempPath + \"/\" + nodeSaveName + \".asset\");\n                }\n                else\n                {\n                    saveNode = ScriptableObject.CreateInstance<NodeQuest>();\n                }\n\n                saveNode.GUID = nodequest.GUID;\n                saveNode.position = nodequest.GetPosition().position;\n\n                //Quest Part\n                saveNode.isFinal = nodequest.isFinal;\n                saveNode.extraText = nodequest.extraText;\n                saveNode.nodeObjectives = createObjectivesFromGraph(nodequest.questObjectives);\n", "                if(!alredyExists)\n                    AssetDatabase.CreateAsset(saveNode, $\"{QuestConstants.MISIONS_FOLDER}/{Q.misionName}/Nodes/{nodeSaveName}.asset\");\n                else\n                {\n                    AssetDatabase.MoveAsset(tempPath + \"/\" + nodeSaveName + \".asset\", path + \"/\" + nodeSaveName + \".asset\");\n                }\n\n                EditorUtility.SetDirty(saveNode);\n                AssetDatabase.SaveAssets(); \n\n                NodesInGraph.Add(saveNode);\n                j++;\n            }\n\n            AssetDatabase.DeleteAsset(tempPath);\n\n        }\n", "        public void CheckFolders(Quest Q)\n        {\n            if (!AssetDatabase.IsValidFolder(QuestConstants.RESOURCES_PATH))\n            {\n                AssetDatabase.CreateFolder(QuestConstants.PARENT_PATH, QuestConstants.RESOURCES_NAME);\n            }\n\n            if (!AssetDatabase.IsValidFolder(QuestConstants.MISIONS_FOLDER))\n            {\n                AssetDatabase.CreateFolder(QuestConstants.RESOURCES_PATH, QuestConstants.MISIONS_NAME);\n            }\n", "            if (!AssetDatabase.IsValidFolder(QuestConstants.MISIONS_FOLDER + $\"/{Q.misionName}\"))\n            {\n                AssetDatabase.CreateFolder(QuestConstants.MISIONS_FOLDER, $\"{Q.misionName}\");\n            }\n\n\n        }\n\n        private void saveConections(Quest Q, List<NodeQuest> nodesInGraph)\n        {\n            var connectedPorts = Edges.Where(x => x.input.node != null).ToArray();\n            Q.ResetNodeLinksGraph();\n\n", "        private void saveConections(Quest Q, List<NodeQuest> nodesInGraph)\n        {\n            var connectedPorts = Edges.Where(x => x.input.node != null).ToArray();\n            Q.ResetNodeLinksGraph();\n\n\n            foreach (NodeQuest currentNode in nodesInGraph)\n            {\n                currentNode.nextNode.Clear();\n            }\n\n", "            for (int i = 0; i < connectedPorts.Length; i++)\n            {\n                var outputNode = connectedPorts[i].output.node as NodeQuestGraph;\n                var inputNode = connectedPorts[i].input.node as NodeQuestGraph;\n\n                Q.nodeLinkData.Add(new Quest.NodeLinksGraph\n                {\n                    baseNodeGUID = outputNode.GUID,\n                    portName = connectedPorts[i].output.portName,\n                    targetNodeGUID = inputNode.GUID\n                });\n\n                //Add to next node list\n                NodeQuest baseNode = nodesInGraph.Find(n => n.GUID == outputNode.GUID);\n                NodeQuest targetNode = nodesInGraph.Find(n => n.GUID == inputNode.GUID);\n", "                if (targetNode != null && baseNode != null)\n                    baseNode.nextNode.Add(targetNode);\n            }\n        }\n\n        public void SaveGraph(Quest Q)\n        {\n            if (!Edges.Any()) return;\n\n\n            List<NodeQuest> NodesInGraph = new List<NodeQuest>();\n            // Nodes\n            creteNodeQuestAssets(Q, ref NodesInGraph);\n\n            // Conections\n            saveConections(Q, NodesInGraph);\n\n            //Last Quest parameters\n\n            var startNode = node.Find(node => node.entryPoint); //Find the first node Graph\n            Q.startDay = startNode.startDay;\n            Q.limitDay = startNode.limitDay;\n            Q.isMain = startNode.isMain;\n\n            \n            //Questionable\n            var firstMisionNode = Edges.Find(x => x.output.portName == \"Next\");\n            var firstMisionNode2 = firstMisionNode.input.node as NodeQuestGraph;\n            string GUIDfirst = firstMisionNode2.GUID;\n            Q.firtsNode = NodesInGraph.Find(n => n.GUID == GUIDfirst);\n\n            EditorUtility.SetDirty(Q);\n\n\n        }\n", "        public void LoadGraph(Quest Q)\n        {\n            if (Q == null)\n            {\n                EditorUtility.DisplayDialog(\"Error!!\", \"Quest aprece como null, revisa el scriptable object\", \"OK\");\n                return;\n            }\n\n            NodeQuest[] getNodes = Resources.LoadAll<NodeQuest>($\"{QuestConstants.MISIONS_NAME}/{ Q.misionName}/Nodes\");\n            _cacheNodes = new List<NodeQuest>(getNodes);\n\n            clearGraph(Q);\n            LoadNodes(Q);\n            ConectNodes(Q);\n        }\n", "        private void clearGraph(Quest Q)\n        {\n            node.Find(x => x.entryPoint).GUID = Q.nodeLinkData[0].baseNodeGUID;\n\n            foreach (var node in node)\n            {\n                if (node.entryPoint)\n                {\n                    \n                    var aux = node.mainContainer.Children().ToList();\n                    var aux2 = aux[2].Children().ToList();\n\n                    // C\n                    TextField misionName = aux2[0] as TextField;\n                    Toggle isMain = aux2[1] as Toggle;\n                    IntegerField startDay = aux2[2] as IntegerField;\n                    IntegerField limitDay = aux2[3] as IntegerField;\n\n                    misionName.value = Q.misionName;\n                    isMain.value = Q.isMain;\n                    startDay.value = Q.startDay;\n                    limitDay.value = Q.limitDay;\n\n                    // \n                    node.limitDay = Q.limitDay;\n                    node.startDay = Q.startDay;\n                    node.isMain = Q.isMain;\n                    node.misionName = Q.misionName;\n\n                    continue;\n                }\n\n                //Remove edges\n                Edges.Where(x => x.input.node == node).ToList().ForEach(edge => _targetGraphView.RemoveElement(edge));\n\n                //Remove Node\n                _targetGraphView.RemoveElement(node);\n            }\n        }\n", "        private void LoadNodes(Quest Q)\n        {\n            foreach (var node in _cacheNodes)\n            {\n                var tempNode = _targetGraphView.CreateNodeQuest(node.name, Vector2.zero, node.extraText, node.isFinal);\n                //Load node variables\n                tempNode.GUID = node.GUID;\n                tempNode.extraText = node.extraText;\n                tempNode.isFinal = node.isFinal;\n                tempNode.RefreshPorts();\n", "                if (node.nodeObjectives != null) {\n                    foreach (QuestObjective qObjective in node.nodeObjectives)\n                    {\n                        //CreateObjectives\n                        QuestObjectiveGraph objtemp = new QuestObjectiveGraph(qObjective.keyName, qObjective.maxItems, qObjective.actualItems,\n                                                          qObjective.description, qObjective.hiddenObjective, qObjective.autoExitOnCompleted);\n\n\n                        var deleteButton = new Button(clickEvent: () => _targetGraphView.removeQuestObjective(tempNode, objtemp))\n                        {\n                            text = \"x\"\n                        };\n                        objtemp.Add(deleteButton);\n\n                        var newBox = new Box();\n                        objtemp.Add(newBox);\n\n\n                        objtemp.actualItems = qObjective.actualItems;\n                        objtemp.description = qObjective.description;\n                        objtemp.maxItems = qObjective.maxItems;\n                        objtemp.keyName = qObjective.keyName;\n                        objtemp.hiddenObjective = qObjective.hiddenObjective;\n                        objtemp.autoExitOnCompleted = qObjective.autoExitOnCompleted;\n\n                        tempNode.objectivesRef.Add(objtemp);\n                        tempNode.questObjectives.Add(objtemp);\n                    }\n                }\n                \n\n                _targetGraphView.AddElement(tempNode);\n\n                var nodePorts = Q.nodeLinkData.Where(x => x.baseNodeGUID == node.GUID).ToList();\n                nodePorts.ForEach(x => _targetGraphView.AddNextNodePort(tempNode));\n\n\n            }\n        }\n        ", "        private void ConectNodes(Quest Q)\n        {\n            List<NodeQuestGraph> nodeListCopy = new List<NodeQuestGraph>(node);\n\n            for (int i = 0; i < nodeListCopy.Count; i++)\n            {\n                var conections = Q.nodeLinkData.Where(x => x.baseNodeGUID == nodeListCopy[i].GUID).ToList();\n\n                for (int j = 0; j < conections.Count(); j++)\n                {\n                    string targetNodeGUID = conections[j].targetNodeGUID;\n                    var targetNode = nodeListCopy.Find(x => x.GUID == targetNodeGUID);\n                    LinkNodes(nodeListCopy[i].outputContainer[j].Q<Port>(), (Port)targetNode.inputContainer[0]);\n\n                    targetNode.SetPosition(new Rect(_cacheNodes.First(x => x.GUID == targetNodeGUID).position, new Vector2(150, 200)));\n                }\n            }\n        }\n", "                for (int j = 0; j < conections.Count(); j++)\n                {\n                    string targetNodeGUID = conections[j].targetNodeGUID;\n                    var targetNode = nodeListCopy.Find(x => x.GUID == targetNodeGUID);\n                    LinkNodes(nodeListCopy[i].outputContainer[j].Q<Port>(), (Port)targetNode.inputContainer[0]);\n\n                    targetNode.SetPosition(new Rect(_cacheNodes.First(x => x.GUID == targetNodeGUID).position, new Vector2(150, 200)));\n                }\n            }\n        }\n", "        private void LinkNodes(Port outpor, Port inport)\n        {\n            var tempEdge = new Edge\n            {\n                output = outpor,\n                input = inport\n            };\n\n            tempEdge.input.Connect(tempEdge);\n            tempEdge.output.Connect(tempEdge);\n            _targetGraphView.Add(tempEdge);\n\n\n        }\n\n        public QuestObjective[] createObjectivesFromGraph(List<QuestObjectiveGraph> qog)\n        {\n            List<QuestObjective> Listaux = new List<QuestObjective>();\n", "            foreach (QuestObjectiveGraph obj in qog)\n            {\n                QuestObjective aux = new QuestObjective\n                {\n                    keyName = obj.keyName,\n                    maxItems = obj.maxItems,\n                    actualItems = obj.actualItems,\n                    description = obj.description,\n                    hiddenObjective = obj.hiddenObjective,\n                    autoExitOnCompleted = obj.autoExitOnCompleted\n                };\n\n                Listaux.Add(aux);\n\n            }\n\n            return Listaux.ToArray();\n        }\n\n\n    }\n}"]}
{"filename": "Editor/GraphEditor/QuestNodeSearchWindow.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor;\nusing UnityEditor.Experimental.GraphView;\nusing UnityEngine;\nusing UnityEngine.UIElements;\n\nnamespace QuestSystem.QuestEditor\n{\n    public class QuestNodeSearchWindow : ScriptableObject, ISearchWindowProvider\n    {\n", "{\n    public class QuestNodeSearchWindow : ScriptableObject, ISearchWindowProvider\n    {\n\n        private QuestGraphView _graphView;\n        private EditorWindow _window;\n        private Texture2D _textureForTable; \n\n        public void Init(QuestGraphView graphView, EditorWindow window){\n            _graphView = graphView;\n            _window = window;\n\n            _textureForTable = new Texture2D(1,1);\n            _textureForTable.SetPixel(0,0, new Color(0,0,0,0));\n            _textureForTable.Apply();\n        }\n\n        public List<SearchTreeEntry> CreateSearchTree(SearchWindowContext context)\n        {\n            var tree = new List<SearchTreeEntry>\n            {\n                new SearchTreeGroupEntry(new GUIContent(\"Create Node\"), 0)\n                {\n                },\n                new SearchTreeEntry(new GUIContent(\"    Quest Node\"))\n                {\n                    level = 1, userData = new NodeQuestGraph(),\n                },\n\n            };\n\n            return tree;\n        }\n", "        public void Init(QuestGraphView graphView, EditorWindow window){\n            _graphView = graphView;\n            _window = window;\n\n            _textureForTable = new Texture2D(1,1);\n            _textureForTable.SetPixel(0,0, new Color(0,0,0,0));\n            _textureForTable.Apply();\n        }\n\n        public List<SearchTreeEntry> CreateSearchTree(SearchWindowContext context)\n        {\n            var tree = new List<SearchTreeEntry>\n            {\n                new SearchTreeGroupEntry(new GUIContent(\"Create Node\"), 0)\n                {\n                },\n                new SearchTreeEntry(new GUIContent(\"    Quest Node\"))\n                {\n                    level = 1, userData = new NodeQuestGraph(),\n                },\n\n            };\n\n            return tree;\n        }\n", "        public bool OnSelectEntry(SearchTreeEntry SearchTreeEntry, SearchWindowContext context)\n        {\n            Vector2 mousePosition = _window.rootVisualElement.ChangeCoordinatesTo(_window.rootVisualElement.parent, \n            context.screenMousePosition - _window.position.position);\n\n            Vector2 graphViewMousePosition = _graphView.contentViewContainer.WorldToLocal(mousePosition);\n\n\n            switch(SearchTreeEntry.userData){\n                case NodeQuestGraph nodeQuestGraph:\n                    _graphView.CreateNode(\"NodeQuest\", graphViewMousePosition);\n                    return true;\n                default:\n                    return false;\n            }\n        }\n    }\n}\n\n"]}
{"filename": "Editor/GraphEditor/NodeQuestGraph.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEditor.Experimental.GraphView;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing UnityEditor;\n\nnamespace QuestSystem.QuestEditor\n{\n    [System.Serializable]\n    public class NodeQuestGraph : UnityEditor.Experimental.GraphView.Node\n    {", "{\n    [System.Serializable]\n    public class NodeQuestGraph : UnityEditor.Experimental.GraphView.Node\n    {\n        public string GUID;\n\n        public TextAsset extraText;\n\n        public VisualElement objectivesRef;\n\n        public List<QuestObjectiveGraph> questObjectives;\n", "        public VisualElement objectivesRef;\n\n        public List<QuestObjectiveGraph> questObjectives;\n\n        public bool isFinal;\n\n        public bool entryPoint = false;\n\n        public int limitDay;\n\n        public int startDay;\n", "        public int limitDay;\n\n        public int startDay;\n\n        public string misionName;\n\n        public bool isMain;\n\n\n    }\n}"]}
{"filename": "Editor/GraphEditor/QuestGraphUtility.cs", "chunked_list": ["using UnityEngine.UIElements;\nusing UnityEditor.UIElements;\n\npublic static class QuestGraphUtility\n{\n    public static TextField CreateTextField(string label, string variableToModify, string defaultValue = \"\")\n    {\n        var field = new TextField(label)\n        {\n            value = defaultValue\n        };\n\n        field.RegisterValueChangedCallback(evt =>\n        {\n            variableToModify = evt.newValue;\n        });\n\n        return field;\n    }\n", "    public static IntegerField CreateIntegerField(string label, int variableToModify, int defaultValue =  0) \n    {\n        var field = new IntegerField(label)\n        {\n            value = defaultValue\n        };\n\n        field.RegisterValueChangedCallback(evt =>\n        {\n            variableToModify = evt.newValue;\n        });\n\n        return field;\n    }\n}\n"]}
{"filename": "Editor/GraphEditor/QuestGraphView.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEditor.Experimental.GraphView;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing UnityEditor.UIElements;\n\nnamespace QuestSystem.QuestEditor", "\nnamespace QuestSystem.QuestEditor\n{\n    public class QuestGraphView : GraphView\n    {\n        public string misionName;\n\n        private QuestNodeSearchWindow _searchWindow;\n        public Quest questRef;\n        private QuestGraphView _self;\n        private QuestGraphEditor editorWindow;\n\n\n        public QuestGraphView(EditorWindow _editorWindow, Quest q = null)\n        {\n            questRef = q;\n            editorWindow = (QuestGraphEditor)_editorWindow;\n            styleSheets.Add(Resources.Load<StyleSheet>(\"QuestGraph\"));\n            SetupZoom(ContentZoomer.DefaultMinScale, ContentZoomer.DefaultMaxScale);\n\n            this.AddManipulator(new ContentDragger());\n            this.AddManipulator(new SelectionDragger());\n            this.AddManipulator(new RectangleSelector());\n\n            //Grid\n            var grid = new GridBackground();\n            Insert(0, grid);\n            grid.StretchToParentSize();\n\n            this.AddElement(GenerateEntryPointNode());\n            this.AddSearchWindow(editorWindow);\n            _self = this;\n\n        }\n\n\n        //TODO: Create node at desired position with fewer hide", "        public Quest questRef;\n        private QuestGraphView _self;\n        private QuestGraphEditor editorWindow;\n\n\n        public QuestGraphView(EditorWindow _editorWindow, Quest q = null)\n        {\n            questRef = q;\n            editorWindow = (QuestGraphEditor)_editorWindow;\n            styleSheets.Add(Resources.Load<StyleSheet>(\"QuestGraph\"));\n            SetupZoom(ContentZoomer.DefaultMinScale, ContentZoomer.DefaultMaxScale);\n\n            this.AddManipulator(new ContentDragger());\n            this.AddManipulator(new SelectionDragger());\n            this.AddManipulator(new RectangleSelector());\n\n            //Grid\n            var grid = new GridBackground();\n            Insert(0, grid);\n            grid.StretchToParentSize();\n\n            this.AddElement(GenerateEntryPointNode());\n            this.AddSearchWindow(editorWindow);\n            _self = this;\n\n        }\n\n\n        //TODO: Create node at desired position with fewer hide", "        /*public override void BuildContextualMenu(ContextualMenuPopulateEvent evt)\n        {\n            base.BuildContextualMenu(evt);\n\n            if (evt.target is GraphView)\n            {\n                evt.menu.InsertAction(1,\"Create Node\", (e) => {\n                    \n\n                    var a = editorWindow.rootVisualElement; var b = editorWindow.position.position; var c = editorWindow.rootVisualElement.parent;\n\n                    var context = new SearchWindowContext(e.eventInfo.mousePosition, a.worldBound.x, a.worldBound.y);\n                    Vector2 mousePosition = editorWindow.rootVisualElement.ChangeCoordinatesTo(editorWindow.rootVisualElement, context.screenMousePosition - editorWindow.position.position);\n                    Vector2 graphViewMousePosition = this.contentViewContainer.WorldToLocal(mousePosition);\n\n                    CreateNode(\"NodeQuest\", mousePosition);\n                });\n            }\n        }*/\n", "        private void AddSearchWindow(EditorWindow editorWindow)\n        {\n            _searchWindow = ScriptableObject.CreateInstance<QuestNodeSearchWindow>();\n            _searchWindow.Init(this, editorWindow);\n            nodeCreationRequest = context => SearchWindow.Open(new SearchWindowContext(context.screenMousePosition),_searchWindow);\n        }\n\n        private Port GeneratePort(NodeQuestGraph node, Direction direction, Port.Capacity capacity = Port.Capacity.Single)\n        {\n            return node.InstantiatePort(Orientation.Horizontal, direction, capacity, typeof(float));\n        }\n\n", "        public NodeQuestGraph GenerateEntryPointNode()\n        {\n            var node = new NodeQuestGraph\n            {\n                title = \"Start\",\n                GUID = Guid.NewGuid().ToString(),\n                entryPoint = true\n            };\n\n            //Add ouput port\n            var generatetPort = GeneratePort(node, Direction.Output);\n            generatetPort.portName = \"Next\";\n            node.outputContainer.Add(generatetPort);\n\n            //Quest params\n            var box = new Box();\n\n            //\n            var misionName = new TextField(\"Mision Name:\")\n            {\n                value = \"Temp name\"\n            };\n\n            misionName.RegisterValueChangedCallback(evt =>\n            {\n                node.misionName = evt.newValue;\n            });\n\n            box.Add(misionName);\n\n            //\n            var isMain = new Toggle();\n            isMain.label = \"isMain\";\n\n            isMain.value = false;\n\n            isMain.RegisterValueChangedCallback(evt =>\n            {\n                node.isMain = evt.newValue;\n            });\n\n            //isMain.SetValueWithoutNotify(false);\n\n            box.Add(isMain);\n\n            //\n            var startDay = new IntegerField(\"Start Day:\")\n            {\n                value = 0\n            };\n\n            startDay.RegisterValueChangedCallback(evt =>\n            {\n                node.startDay = evt.newValue;\n            });\n\n            box.Add(startDay);\n\n            //\n            var limitDay = new IntegerField(\"Limit Day:\")\n            {\n                value = 0\n            };\n\n            limitDay.RegisterValueChangedCallback(evt =>\n            {\n                node.limitDay = evt.newValue;\n            });\n\n            box.Add(limitDay);\n\n            node.mainContainer.Add(box);\n\n\n            //Refresh visual part\n            node.RefreshExpandedState();\n            node.RefreshPorts();\n\n            node.SetPosition(new Rect(100, 200, 100, 150));\n\n            return node;\n\n        }\n", "        public override List<Port> GetCompatiblePorts(Port startPort, NodeAdapter nodeAdapter)\n        {\n            var compatiblePorts = new List<Port>();\n\n            //Reglas de conexions\n            ports.ForEach(port =>\n            {\n                if (startPort != port && startPort.node != port.node)\n                    compatiblePorts.Add(port);\n            });\n\n            return compatiblePorts;\n        }\n", "        public void CreateNode(string nodeName, Vector2 position)\n        {\n            AddElement(CreateNodeQuest(nodeName,position));\n        }\n\n        public NodeQuestGraph CreateNodeQuest(string nodeName, Vector2 position, TextAsset ta = null, bool end = false)\n        {\n            var node = new NodeQuestGraph\n            {\n                title = nodeName,\n                GUID = Guid.NewGuid().ToString(),\n                questObjectives = new List<QuestObjectiveGraph>(),\n            };\n\n            //Add Input port\n            var generatetPortIn = GeneratePort(node, Direction.Input, Port.Capacity.Multi);\n            generatetPortIn.portName = \"Input\";\n            node.inputContainer.Add(generatetPortIn);\n\n            node.styleSheets.Add(Resources.Load<StyleSheet>(\"Node\"));\n\n            //Add button to add ouput\n            var button = new Button(clickEvent: () =>\n            {\n                AddNextNodePort(node);\n            });\n            button.text = \"New Next Node\";\n            node.titleContainer.Add(button);\n\n            //Button to add more objectives\n            var button2 = new Button(clickEvent: () =>\n            {\n                AddNextQuestObjective(node);\n            });\n            button2.text = \"Add new Objective\";\n\n            //Hide/Unhide elements\n            var hideButton = new Button(clickEvent: () =>\n            {\n                HideUnhide(node, button2);\n            });\n            hideButton.text = \"Hide/Unhide\";\n\n\n\n\n            //Extra information\n            var extraText = new ObjectField(\"Extra information:\");\n            extraText.objectType = typeof(TextAsset);\n\n            extraText.RegisterValueChangedCallback(evt =>\n            {\n                node.extraText = evt.newValue as TextAsset;\n            });\n            extraText.SetValueWithoutNotify(ta);\n\n            //Bool es final\n            var togle = new Toggle();\n            togle.label = \"isFinal\";\n\n            togle.RegisterValueChangedCallback(evt =>\n            {\n                node.isFinal = evt.newValue;\n            });\n            togle.SetValueWithoutNotify(end);\n\n            var container = new Box();\n            node.mainContainer.Add(container);// Container per a tenir fons solid\n\n            container.Add(extraText);\n            container.Add(togle);\n            container.Add(hideButton);\n            container.Add(button2);\n\n            node.objectivesRef = new Box();\n            container.Add(node.objectivesRef);\n\n            //Refresh la part Visual\n            node.RefreshExpandedState();\n            node.RefreshPorts();\n            node.SetPosition(new Rect(position.x, position.y, 400, 450));\n\n            return node;\n        }\n", "        private void HideUnhide(NodeQuestGraph node, Button b)\n        {\n            bool show = !b.visible;\n            b.visible = show;\n\n            foreach (var objective in node.questObjectives)\n            {\n                if (show)\n                {\n                    node.objectivesRef.Add(objective);\n                }\n                else\n                {\n                    node.objectivesRef.Remove(objective);\n                }\n            }\n\n            node.RefreshExpandedState();\n            node.RefreshPorts();\n        }\n", "        public void AddNextNodePort(NodeQuestGraph node, string overrideName = \"\")\n        {\n            var generatetPort = GeneratePort(node, Direction.Output);\n            int nPorts = node.outputContainer.Query(\"connector\").ToList().Count;\n\n            //generatetPort.portName = \"NextNode \" + nPorts;\n\n            string choicePortName = string.IsNullOrEmpty(overrideName) ? \"NextNode \" + nPorts : overrideName;\n            generatetPort.portName = choicePortName;\n\n            var deleteButton = new Button(clickEvent: () => RemovePort(node, generatetPort))\n            {\n                text = \"x\"\n            };\n            generatetPort.contentContainer.Add(deleteButton);\n\n            node.outputContainer.Add(generatetPort);\n            node.RefreshPorts();\n            node.RefreshExpandedState();\n        }\n", "        private void RemovePort(NodeQuestGraph node, Port p)\n        {\n            var targetEdge = edges.ToList().Where(x => x.output.portName == p.portName && x.output.node == p.node);\n            if (targetEdge.Any())\n            {\n                var edge = targetEdge.First();\n                edge.input.Disconnect(edge);\n                RemoveElement(targetEdge.First());\n            }\n\n            node.outputContainer.Remove(p);\n            node.RefreshPorts();\n            node.RefreshExpandedState();\n        }\n", "        public void removeQuestObjective(NodeQuestGraph nodes, QuestObjectiveGraph objective)\n        {\n            nodes.objectivesRef.Remove(objective);\n            nodes.questObjectives.Remove(objective);\n            nodes.RefreshExpandedState();\n        }\n\n        private void AddNextQuestObjective(NodeQuestGraph node)\n        {\n            var Q = new QuestObjectiveGraph();\n\n            var deleteButton = new Button(clickEvent: () => removeQuestObjective(node, Q))\n            {\n                text = \"x\"\n            };\n            Q.contentContainer.Add(deleteButton);\n\n            //Visual Box separator\n            var newBox = new Box();\n            Q.Add(newBox);\n\n            node.objectivesRef.Add(Q);\n            node.questObjectives.Add(Q);\n            node.RefreshPorts();\n            node.RefreshExpandedState();\n        }\n", "        public NodeQuestGraph GetEntryPointNode()\n        {\n            List<NodeQuestGraph> nodeList = this.nodes.ToList().Cast<NodeQuestGraph>().ToList();\n            return nodeList.First(node => node.entryPoint);\n        }\n\n\n\n    }\n}"]}
{"filename": "Editor/GraphEditor/QuestObjectiveGraph.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing UnityEditor.UIElements;\n\nnamespace QuestSystem.QuestEditor\n{\n    [System.Serializable]\n    public class QuestObjectiveGraph : VisualElement\n    {", "    [System.Serializable]\n    public class QuestObjectiveGraph : VisualElement\n    {\n        public string keyName;\n        public int maxItems;\n        public int actualItems;\n        public string description;\n        public bool hiddenObjective;\n        public bool autoExitOnCompleted;\n\n\n        public QuestObjectiveGraph(string key = \"\", int max = 0, int actual = 0, string des = \"\", bool hiddenObjectiveDefault = false, bool autoExitOnCompletedDefault = false)\n        {\n\n            //keyName\n            var propertyKeyNameField = new TextField(\"keyName:\")\n            {\n                value = key\n            };\n\n            propertyKeyNameField.RegisterValueChangedCallback(evt =>\n            {\n                keyName = evt.newValue;\n            });\n\n\n            this.Add(propertyKeyNameField);\n\n\n            // Max items\n            var propertyMaxItemsField = new IntegerField(\"maxItems:\")\n            {\n                value = max\n            };\n\n            propertyMaxItemsField.RegisterValueChangedCallback(evt =>\n            {\n                maxItems = evt.newValue;\n            });\n\n            this.Add(propertyMaxItemsField);\n\n            //  actualItems\n            var propertyActualItemsField = new IntegerField(\"actualItems:\")\n            {\n                value = actual\n            };\n\n            propertyActualItemsField.RegisterValueChangedCallback(evt =>\n            {\n                actualItems = evt.newValue;\n            });\n\n            this.Add(propertyActualItemsField);\n\n            //keyName\n            var propertyDescriptionField = new TextField(\"description:\")\n            {\n                value = des\n            };\n\n            propertyDescriptionField.RegisterValueChangedCallback(evt =>\n            {\n                description = evt.newValue;\n            });\n\n            this.Add(propertyDescriptionField);\n\n            //Hidden hiddenObjective\n            var propertyHiddenField = new Toggle();\n            propertyHiddenField.label = \"Hidden objective\";\n\n            propertyHiddenField.RegisterValueChangedCallback(evt =>\n            {\n                hiddenObjective = evt.newValue;\n            });\n            propertyHiddenField.SetValueWithoutNotify(hiddenObjectiveDefault);\n\n            this.Add(propertyHiddenField);\n\n            //Auto ecit on complete\n            var propertyAutoExitField = new Toggle();\n            propertyAutoExitField.label = \"Auto exit on complete\";\n            \n            propertyAutoExitField.RegisterValueChangedCallback(evt =>\n            {\n                autoExitOnCompleted = evt.newValue;\n            });\n            propertyAutoExitField.SetValueWithoutNotify(autoExitOnCompletedDefault);\n\n            this.Add(propertyAutoExitField);\n\n\n\n\n        }\n\n    }\n}", "        public bool autoExitOnCompleted;\n\n\n        public QuestObjectiveGraph(string key = \"\", int max = 0, int actual = 0, string des = \"\", bool hiddenObjectiveDefault = false, bool autoExitOnCompletedDefault = false)\n        {\n\n            //keyName\n            var propertyKeyNameField = new TextField(\"keyName:\")\n            {\n                value = key\n            };\n\n            propertyKeyNameField.RegisterValueChangedCallback(evt =>\n            {\n                keyName = evt.newValue;\n            });\n\n\n            this.Add(propertyKeyNameField);\n\n\n            // Max items\n            var propertyMaxItemsField = new IntegerField(\"maxItems:\")\n            {\n                value = max\n            };\n\n            propertyMaxItemsField.RegisterValueChangedCallback(evt =>\n            {\n                maxItems = evt.newValue;\n            });\n\n            this.Add(propertyMaxItemsField);\n\n            //  actualItems\n            var propertyActualItemsField = new IntegerField(\"actualItems:\")\n            {\n                value = actual\n            };\n\n            propertyActualItemsField.RegisterValueChangedCallback(evt =>\n            {\n                actualItems = evt.newValue;\n            });\n\n            this.Add(propertyActualItemsField);\n\n            //keyName\n            var propertyDescriptionField = new TextField(\"description:\")\n            {\n                value = des\n            };\n\n            propertyDescriptionField.RegisterValueChangedCallback(evt =>\n            {\n                description = evt.newValue;\n            });\n\n            this.Add(propertyDescriptionField);\n\n            //Hidden hiddenObjective\n            var propertyHiddenField = new Toggle();\n            propertyHiddenField.label = \"Hidden objective\";\n\n            propertyHiddenField.RegisterValueChangedCallback(evt =>\n            {\n                hiddenObjective = evt.newValue;\n            });\n            propertyHiddenField.SetValueWithoutNotify(hiddenObjectiveDefault);\n\n            this.Add(propertyHiddenField);\n\n            //Auto ecit on complete\n            var propertyAutoExitField = new Toggle();\n            propertyAutoExitField.label = \"Auto exit on complete\";\n            \n            propertyAutoExitField.RegisterValueChangedCallback(evt =>\n            {\n                autoExitOnCompleted = evt.newValue;\n            });\n            propertyAutoExitField.SetValueWithoutNotify(autoExitOnCompletedDefault);\n\n            this.Add(propertyAutoExitField);\n\n\n\n\n        }\n\n    }\n}"]}
{"filename": "Editor/GraphEditor/QuestGraphEditor.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing UnityEditor.Experimental.GraphView;\nusing UnityEditor;\nusing UnityEngine;\nusing UnityEngine.UIElements;\nusing UnityEditor.UIElements;\nusing System;\n", "using System;\n\nnamespace QuestSystem.QuestEditor\n{\n    public class QuestGraphEditor : GraphViewEditorWindow\n    {\n        public static Quest questForGraph;\n\n        private QuestGraphView _questGraph;\n        private bool mouseClicked;\n\n        [MenuItem(\"Tools/QuestGraph\")]", "        private QuestGraphView _questGraph;\n        private bool mouseClicked;\n\n        [MenuItem(\"Tools/QuestGraph\")]\n        public static void OpenQuestGraphWindow()\n        {\n            questForGraph = null;\n            var window = GetWindow<QuestGraphEditor>();\n            window.titleContent = new GUIContent(\"QuestGraph\");\n\n        }\n", "        private void OnEnable()\n        {\n            ConstructGraphView();\n            GenerateToolBar();\n            GenerateMinimap();\n        }\n\n\n\n\n        private void GenerateMinimap()\n        {\n            var minimap = new MiniMap { anchored = true };\n            minimap.SetPosition(new Rect(10, 30, 200, 140));\n\n            _questGraph.Add(minimap);\n        }\n", "        private void GenerateMinimap()\n        {\n            var minimap = new MiniMap { anchored = true };\n            minimap.SetPosition(new Rect(10, 30, 200, 140));\n\n            _questGraph.Add(minimap);\n        }\n\n        private void ConstructGraphView()\n        {\n            _questGraph = new QuestGraphView(this)\n            {\n                name = \"Quest Graph\"\n            };\n", "        private void ConstructGraphView()\n        {\n            _questGraph = new QuestGraphView(this)\n            {\n                name = \"Quest Graph\"\n            };\n\n            if (questForGraph != null)\n                _questGraph.misionName = questForGraph.misionName;\n\n            _questGraph.StretchToParentSize();\n\n            rootVisualElement.Add(_questGraph);\n        }\n", "        private void GenerateToolBar()\n        {\n            var toolbar = new Toolbar();\n\n            var nodeCreateButton = new Button(clickEvent: () => { _questGraph.CreateNode(\"NodeQuest\", Vector2.zero); });\n            nodeCreateButton.text = \"Crete Node\";\n\n            toolbar.Add(nodeCreateButton);\n\n            //Save\n            toolbar.Add(new Button(clickEvent: () => SaveQuestData()) { text = \"Save Quest Data\" });\n            toolbar.Add(new Button(clickEvent: () => LoadQuestData()) { text = \"Load Quest Data\" });\n\n            //Current quest\n            var Ins = new ObjectField(\"Quest editing\");\n            Ins.objectType = typeof(Quest);\n            Ins.RegisterValueChangedCallback(evt =>\n            {\n                questForGraph = evt.newValue as Quest;\n            });\n\n            toolbar.Add(Ins);\n\n            rootVisualElement.Add(toolbar);\n        }\n", "        private void CreateQuest()\n        {\n            // create new scriptableObject \n\n            //questForGraph =\n\n            Quest newQuest = ScriptableObject.CreateInstance<Quest>();\n\n            NodeQuestGraph entryNode = _questGraph.GetEntryPointNode();\n            newQuest.misionName = entryNode.misionName;\n            newQuest.isMain = entryNode.isMain;\n            newQuest.startDay = entryNode.startDay;\n            newQuest.limitDay = entryNode.limitDay;\n\n            questForGraph = newQuest;\n\n            var saveUtility = QuestGraphSaveUtility.GetInstance(_questGraph);\n\n            saveUtility.CheckFolders(questForGraph);\n            AssetDatabase.CreateAsset(newQuest, $\"{QuestConstants.MISIONS_FOLDER}/{newQuest.misionName}/{newQuest.misionName}.asset\");\n\n            //saveUtility.LoadGraph(questForGraph);\n\n        }\n", "        private void LoadQuestData()\n        {\n            if (questForGraph == null)\n            {\n                EditorUtility.DisplayDialog(\"Error!!\", \"No quest to load!\", \"OK\");\n                return;\n            }\n\n            var saveUtility = QuestGraphSaveUtility.GetInstance(_questGraph);\n            saveUtility.LoadGraph(questForGraph);\n        }\n", "        private void SaveQuestData()\n        {\n            if (questForGraph == null)\n            {\n                CreateQuest();\n            }\n\n\n            var saveUtility = QuestGraphSaveUtility.GetInstance(_questGraph);\n            Debug.Log(questForGraph.misionName);\n            saveUtility.SaveGraph(questForGraph);\n        }\n", "        private void OnDisable()\n        {\n            rootVisualElement.Remove(_questGraph);\n        }\n    }\n}"]}
{"filename": "Editor/CustomInspector/QuestLogEditor.cs", "chunked_list": ["using UnityEngine;\nusing UnityEditor;\n\n\nnamespace QuestSystem.QuestEditor\n{\n    [CustomEditor(typeof(QuestLog))]\n    public class QuestLogEditor : Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            QuestLog questLog = (QuestLog)target;\n\n            DrawDefaultInspector();\n", "        public override void OnInspectorGUI()\n        {\n            QuestLog questLog = (QuestLog)target;\n\n            DrawDefaultInspector();\n\n            if (GUILayout.Button(\"Reset all Quest\"))\n            {\n                questLog.ResetAllQuest();\n            }\n\n        }\n    }\n}\n"]}
{"filename": "Editor/CustomInspector/QuestEditor.cs", "chunked_list": ["\ufeffusing UnityEditor;\nusing UnityEngine;\n\nnamespace QuestSystem.QuestEditor\n{\n    [CustomEditor(typeof(Quest))]\n    public class QuestEditor : Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            Quest q = (Quest)target;\n\n            DrawDefaultInspector();\n", "        public override void OnInspectorGUI()\n        {\n            Quest q = (Quest)target;\n\n            DrawDefaultInspector();\n\n            if (GUILayout.Button(\"Reset\"))\n            {\n                q.Reset();\n            }\n\n        }\n    }\n}"]}
{"filename": "Editor/CustomInspector/QuestObjectiveUpdaterEditor.cs", "chunked_list": ["using UnityEngine;\nusing UnityEditor;\nusing System;\nusing System.Collections.Generic;\n\nnamespace QuestSystem.QuestEditor\n{\n    [CustomEditor(typeof(QuestObjectiveUpdater))]\n    public class QuestObjectiveUpdaterEditor : Editor\n    {           \n        private int selectedValue = 0;", "    public class QuestObjectiveUpdaterEditor : Editor\n    {           \n        private int selectedValue = 0;\n        private string previousKey = \"\";\n        private readonly float marginX = 25;\n        private readonly int marginBottomSpaces = 8;\n        //private int \n\n        \n\n        public override void OnInspectorGUI()\n        {\n            QuestObjectiveUpdater qU = (QuestObjectiveUpdater)target;\n            GUIContent objectFieldLabel = new GUIContent(\"Hola\");\n            Rect commonRect = new Rect(new Vector2(20,344), new Vector2(EditorGUIUtility.currentViewWidth - marginX, 20));\n            DrawDefaultInspector();\n\n\n\n            //Get all Keys", "        public override void OnInspectorGUI()\n        {\n            QuestObjectiveUpdater qU = (QuestObjectiveUpdater)target;\n            GUIContent objectFieldLabel = new GUIContent(\"Hola\");\n            Rect commonRect = new Rect(new Vector2(20,344), new Vector2(EditorGUIUtility.currentViewWidth - marginX, 20));\n            DrawDefaultInspector();\n\n\n\n            //Get all Keys\n            if (qU.nodeToUpdate != null) {\n                string[] keyList = qU.GetListOfObjectives();\n                int[] numberList = new int[keyList.Length];\n", "            if (qU.nodeToUpdate != null) {\n                string[] keyList = qU.GetListOfObjectives();\n                int[] numberList = new int[keyList.Length];\n\n                for (int i = 0; i < keyList.Length; i++)\n                {\n                    numberList[i] = i;\n                }\n\n                if (!string.IsNullOrEmpty(qU.keyObjectiveSelected)) selectedValue = Array.IndexOf(keyList, qU.keyObjectiveSelected);\n\n                selectedValue = EditorGUILayout.IntPopup(\"Keys: \", selectedValue, keyList, numberList);", "                if (!string.IsNullOrEmpty(qU.keyObjectiveSelected)) selectedValue = Array.IndexOf(keyList, qU.keyObjectiveSelected);\n\n                selectedValue = EditorGUILayout.IntPopup(\"Keys: \", selectedValue, keyList, numberList);\n                if (keyList.Length > 0 && selectedValue >= 0)\n                {\n                    if(previousKey != keyList[selectedValue])\n                    {\n                        qU.keyObjectiveSelected = keyList[selectedValue];\n                        previousKey = keyList[selectedValue];\n                        EditorUtility.SetDirty(qU);\n                    }\n                }\n            }\n", "            for (int i = 0; i < marginBottomSpaces; i++)\n            {\n                EditorGUILayout.Space();\n            }\n\n            if (GUI.Button(commonRect, \"~\"))\n            {\n                EditorGUIUtility.ShowObjectPicker<NodeQuest>(qU.nodeToUpdate, false, qU.GetMisionName(), GetInstanceID());\n            }\n\n            if (Event.current.commandName == \"ObjectSelectorUpdated\")\n            {", "            if (Event.current.commandName == \"ObjectSelectorUpdated\")\n            {\n                if (EditorGUIUtility.GetObjectPickerControlID() == GetInstanceID())\n                {\n                    qU.nodeToUpdate = EditorGUIUtility.GetObjectPickerObject() as NodeQuest;\n                    EditorUtility.SetDirty(qU);\n                }\n\n            }\n\n            EditorGUI.ObjectField(commonRect, \"   Node to Update\", qU.nodeToUpdate, typeof(NodeQuest), false);\n\n", "            for (int i = 0; i < marginBottomSpaces; i++)\n            {\n                EditorGUILayout.Space();\n            }\n        }\n\n\n\n\n    }\n}\n"]}
{"filename": "Editor/CustomInspector/QuestOnObjectWorldEditor.cs", "chunked_list": ["using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEditor;\n\n\nnamespace QuestSystem.QuestEditor\n{\n    [CustomEditor(typeof(QuestOnObjectWorld))]\n    public class QuestOnObjectWorldEditor : Editor\n    {", "    [CustomEditor(typeof(QuestOnObjectWorld))]\n    public class QuestOnObjectWorldEditor : Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            QuestOnObjectWorld qOW = (QuestOnObjectWorld)target;\n\n            if (GUILayout.Button(\"Get all Nodes from Quest\"))\n            {\n                qOW.GetAllNodesFromQuest();\n            }\n\n            DrawDefaultInspector();\n", "            if (GUILayout.Button(\"Populate with children\"))\n            {\n                qOW.PopulateChildListDefault();\n            }\n\n        }\n    }\n}\n"]}
{"filename": "Runtime/QuestLog.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing QuestSystem.SaveSystem;\nusing System.Linq;\n\nnamespace QuestSystem\n{\n    [CreateAssetMenu(fileName = \"New Quest\", menuName = \"QuestSystem/QuestLog\")]\n    [System.Serializable]\n    public class QuestLog : ScriptableObject\n    {\n        public List<Quest> curentQuests = new List<Quest>();\n        public List<Quest> doneQuest = new List<Quest>();\n        public List<Quest> failedQuest = new List<Quest>();\n", "    [CreateAssetMenu(fileName = \"New Quest\", menuName = \"QuestSystem/QuestLog\")]\n    [System.Serializable]\n    public class QuestLog : ScriptableObject\n    {\n        public List<Quest> curentQuests = new List<Quest>();\n        public List<Quest> doneQuest = new List<Quest>();\n        public List<Quest> failedQuest = new List<Quest>();\n\n        public int businessDay;\n\n        public bool IsCurrent(Quest q) => curentQuests.Contains(q);\n", "        public int businessDay;\n\n        public bool IsCurrent(Quest q) => curentQuests.Contains(q);\n\n        public bool IsDoned(Quest q) => doneQuest.Contains(q);\n\n        public bool IsFailed(Quest q) => failedQuest.Contains(q);\n         \n        public void LoadUpdate(QuestLogSaveData qls)\n        {\n            //Coger el dia\n            businessDay = qls.dia;\n\n            //Actualizar currents\n            curentQuests = new List<Quest>();\n", "        public void LoadUpdate(QuestLogSaveData qls)\n        {\n            //Coger el dia\n            businessDay = qls.dia;\n\n            //Actualizar currents\n            curentQuests = new List<Quest>();\n\n            foreach (QuestSaveData qs in qls.currentQuestSave)\n            {\n                Quest q = Resources.Load(QuestConstants.MISIONS_NAME + \"/\" + qs.name + \"/\" + qs.name) as Quest;\n                q.state = qs.states;\n                q.AdvanceToCurrentNode();\n                q.nodeActual.nodeObjectives = qs.actualNodeData.objectives;\n\n                curentQuests.Add(q);\n            }\n\n            //Done i failed add\n            doneQuest = new List<Quest>();\n", "            foreach (QuestSaveData qs in qls.currentQuestSave)\n            {\n                Quest q = Resources.Load(QuestConstants.MISIONS_NAME + \"/\" + qs.name + \"/\" + qs.name) as Quest;\n                q.state = qs.states;\n                q.AdvanceToCurrentNode();\n                q.nodeActual.nodeObjectives = qs.actualNodeData.objectives;\n\n                curentQuests.Add(q);\n            }\n\n            //Done i failed add\n            doneQuest = new List<Quest>();\n", "            foreach (QuestSaveData qs in qls.doneQuestSave)\n            {\n                Quest q = Resources.Load(QuestConstants.MISIONS_NAME + \"/\" + qs.name + \"/\" + qs.name) as Quest;\n                doneQuest.Add(q);\n            }\n\n            failedQuest = new List<Quest>();\n\n            foreach (QuestSaveData qs in qls.failedQuestSave)\n            {\n                Quest q = Resources.Load(QuestConstants.MISIONS_NAME + \"/\" + qs.name + \"/\" + qs.name) as Quest;\n                failedQuest.Add(q);\n            }\n        }\n", "            foreach (QuestSaveData qs in qls.failedQuestSave)\n            {\n                Quest q = Resources.Load(QuestConstants.MISIONS_NAME + \"/\" + qs.name + \"/\" + qs.name) as Quest;\n                failedQuest.Add(q);\n            }\n        }\n\n        public void RemoveQuest(Quest q)\n        {\n            if (IsCurrent(q))\n                curentQuests.Remove(q);", "            if (IsCurrent(q))\n                curentQuests.Remove(q);\n            else if (IsDoned(q))\n                doneQuest.Remove(q);\n            else if (IsFailed(q))\n                failedQuest.Remove(q);\n\n        }\n\n        public void ResetAllQuest()\n        {\n            List<Quest> quests = curentQuests.Concat(doneQuest).Concat(failedQuest).ToList();\n", "        public void ResetAllQuest()\n        {\n            List<Quest> quests = curentQuests.Concat(doneQuest).Concat(failedQuest).ToList();\n\n            foreach (Quest q in quests)\n            {\n                q.Reset();\n                RemoveQuest(q);\n            }\n        }\n\n    }\n}"]}
{"filename": "Runtime/QuestConstants.cs", "chunked_list": ["using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace QuestSystem\n{\n    public static class QuestConstants\n    {\n        public static readonly string RESOURCES_PATH = \"Assets/Resources\";\n        public static readonly string RESOURCES_NAME = \"Resources\";\n        public static readonly string MISIONS_FOLDER = \"Assets/Resources/Missions\";", "        public static readonly string RESOURCES_PATH = \"Assets/Resources\";\n        public static readonly string RESOURCES_NAME = \"Resources\";\n        public static readonly string MISIONS_FOLDER = \"Assets/Resources/Missions\";\n        public static readonly string MISIONS_NAME = \"Missions\";\n        public static readonly string PARENT_PATH = \"Assets\";\n        public static readonly string SAVE_FILE_PATH = Application.persistentDataPath + \"/saves/\" + \"savefile\" + \".save\";\n        public static readonly string SAVE_FILE_FOLDER = Application.persistentDataPath + \"/saves\";\n        public static readonly string QUEST_LOG_NAME = \"TheQuestLog\";\n        public static readonly string NODES_TEMP_FOLDER_NAME = \"NodesTemp\";\n        public static readonly string NODES_FOLDER_NAME = \"Nodes\";\n    }\n}\n\n", "        public static readonly string NODES_TEMP_FOLDER_NAME = \"NodesTemp\";\n        public static readonly string NODES_FOLDER_NAME = \"Nodes\";\n    }\n}\n\n"]}
{"filename": "Runtime/QuestObjective.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace QuestSystem\n{\n    [System.Serializable]\n    public class QuestObjective\n    {\n        public string keyName;\n        public bool isCompleted;", "        public string keyName;\n        public bool isCompleted;\n        public int maxItems;\n        public int actualItems;\n        public string description;\n        public bool hiddenObjective;\n        public bool autoExitOnCompleted;\n\n    }\n}"]}
{"filename": "Runtime/QuestObjectiveUpdater.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.Events;\n\nnamespace QuestSystem\n{\n    public class QuestObjectiveUpdater : MonoBehaviour, IQuestInteraction\n    {\n        public Quest questToUpdate;\n        [HideInInspector] public NodeQuest nodeToUpdate;", "        public Quest questToUpdate;\n        [HideInInspector] public NodeQuest nodeToUpdate;\n        [HideInInspector] public string keyObjectiveSelected;\n        public int adder = 1;\n        public int exit = 0;\n        public TextAsset extraText;\n\n        public UnityEvent eventsOnUpdate;\n        public UnityEvent eventsOnFinish;\n\n        private bool canUpdate;", "        public UnityEvent eventsOnFinish;\n\n        private bool canUpdate;\n        private bool updating;\n        private bool isDone;\n        private QuestManager questManagerRef;\n\n\n        // Start is called before the first frame update\n        void Start()\n        {\n            canUpdate = false;\n            updating = false;\n            questManagerRef = QuestManager.GetInstance();\n            isDone = questManagerRef.IsDoned(questToUpdate) || questManagerRef.IsFailed(questToUpdate); \n        }\n", "        public void updateQuest()\n        {\n            //Afegir instancies al objectiu\n            if (!string.IsNullOrEmpty(keyObjectiveSelected)) {\n                QuestObjective questObjective = new QuestObjective();\n\n                int i = 0;\n                //Find\n                while (questObjective.keyName == null && i < nodeToUpdate.nodeObjectives.Length)\n                {\n                    if (nodeToUpdate.nodeObjectives[i].keyName == keyObjectiveSelected)\n                    {\n                        questObjective = nodeToUpdate.nodeObjectives[i];\n                    }\n                    i++;\n                }\n\n                questObjective.actualItems += adder;\n", "                while (questObjective.keyName == null && i < nodeToUpdate.nodeObjectives.Length)\n                {\n                    if (nodeToUpdate.nodeObjectives[i].keyName == keyObjectiveSelected)\n                    {\n                        questObjective = nodeToUpdate.nodeObjectives[i];\n                    }\n                    i++;\n                }\n\n                questObjective.actualItems += adder;\n", "                if (IsNodeCompleted(questObjective))\n                {\n                    if (nodeToUpdate.isFinal)\n                    {\n                        questToUpdate.nodeActual.ChangeTheStateOfObjects(false);\n                        questManagerRef.DonearQuest(questToUpdate);\n                        isDone = true;\n                    }\n                    else\n                    {\n                        questToUpdate.nodeActual.ChangeTheStateOfObjects(false);\n                        questToUpdate.state.Add(exit);\n                        Debug.Log(\"Exit :\" + exit + \", Next node: \" + nodeToUpdate.nextNode.Count);\n                        questToUpdate.nodeActual = nodeToUpdate.nextNode[exit];\n                        questToUpdate.nodeActual.ChangeTheStateOfObjects(true);\n                        \n                    }\n\n                    eventsOnFinish.Invoke();\n                    QuestManager.GetInstance().Save();\n                }\n\n                eventsOnUpdate.Invoke();\n            }\n        }\n\n        IEnumerator ShowDialogue()\n        {\n            updating = true;\n            ", "            if (extraText == null)\n            {\n                yield return null;\n                updateQuest();\n                updating = false;\n            }\n            else\n            {\n\n            }\n        }\n", "        private bool isCurrent() => questToUpdate.nodeActual == nodeToUpdate;\n\n        private bool isAbleToUpdateQuest() => canUpdate && !isDone && isCurrent() && !updating;\n\n        public void ChangeExit(int n)\n        {\n            exit = n;\n        }\n\n        //Delete the ones you don't want to use\n", "        private void OnTriggerEnter(Collider other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n\n        private void OnTriggerExit(Collider other)\n        {\n            resultOfEnter(false, other.tag);\n        }\n\n        private void OnTriggerEnter2D(Collider2D other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n", "        private void OnTriggerEnter2D(Collider2D other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n\n        private void OnTriggerExit2D(Collider2D other)\n        {\n            resultOfEnter(false, other.tag);\n        }\n\n        private void resultOfEnter(bool canUpdateResult, string tag)\n        {", "        private void resultOfEnter(bool canUpdateResult, string tag)\n        {\n            if (tag == \"Player\") canUpdate = canUpdateResult;\n        }\n\n        public string GetMisionName()\n        {\n            string returnValue = \"\";\n\n            if (questToUpdate != null) returnValue += questToUpdate.misionName + \"_\";\n\n            return returnValue;\n        }\n\n        public string[] GetListOfObjectives()\n        {\n            List<string> returnList = new List<string>() ;\n", "            if (questToUpdate != null) returnValue += questToUpdate.misionName + \"_\";\n\n            return returnValue;\n        }\n\n        public string[] GetListOfObjectives()\n        {\n            List<string> returnList = new List<string>() ;\n\n            if(nodeToUpdate != null)\n            {", "            if(nodeToUpdate != null)\n            {\n                if (nodeToUpdate.nodeObjectives != null) {\n                    for (int i = 0; i < nodeToUpdate.nodeObjectives.Length; i++)\n                    {\n                        returnList.Add(nodeToUpdate.nodeObjectives[i].keyName);\n                    }\n                }\n            }\n\n            return returnList.ToArray();\n        }\n", "        public void Interact()\n        {\n            if (isAbleToUpdateQuest())\n            {\n                StartCoroutine(ShowDialogue());\n            }\n        }\n\n        private bool IsNodeCompleted(QuestObjective questObjective)\n        {\n            if (questObjective.actualItems >= questObjective.maxItems)\n            {\n                questObjective.isCompleted = true;", "        private bool IsNodeCompleted(QuestObjective questObjective)\n        {\n            if (questObjective.actualItems >= questObjective.maxItems)\n            {\n                questObjective.isCompleted = true;\n                if(questObjective.autoExitOnCompleted) return true;\n            }\n\n            for (int i = 0; i < nodeToUpdate.nodeObjectives.Length; i++)\n            {\n                if (!nodeToUpdate.nodeObjectives[i].isCompleted && !nodeToUpdate.nodeObjectives[i].autoExitOnCompleted)\n                {\n                    return false;\n                }\n            } \n\n            return true;\n        }\n    }\n}", "            for (int i = 0; i < nodeToUpdate.nodeObjectives.Length; i++)\n            {\n                if (!nodeToUpdate.nodeObjectives[i].isCompleted && !nodeToUpdate.nodeObjectives[i].autoExitOnCompleted)\n                {\n                    return false;\n                }\n            } \n\n            return true;\n        }\n    }\n}"]}
{"filename": "Runtime/QuestManager.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEditor;\nusing QuestSystem.SaveSystem;\n\nnamespace QuestSystem\n{\n    public class QuestManager\n    {\n        public QuestLog misionLog;", "    public class QuestManager\n    {\n        public QuestLog misionLog;\n        public QuestLogSaveData data;\n\n        private static QuestManager instance;\n\n        public static QuestManager GetInstance()\n        {\n            if (instance == null) instance = new QuestManager();\n            return instance;\n        }\n\n        private QuestManager()\n        {\n            misionLog = Resources.Load<QuestLog>(QuestConstants.QUEST_LOG_NAME);\n", "            if (instance == null) instance = new QuestManager();\n            return instance;\n        }\n\n        private QuestManager()\n        {\n            misionLog = Resources.Load<QuestLog>(QuestConstants.QUEST_LOG_NAME);\n\n            if (misionLog == null)\n            {\n                // crear\n                misionLog = ScriptableObject.CreateInstance<QuestLog>();\n#if UNITY_EDITOR\n                AssetDatabase.CreateAsset(misionLog, QuestConstants.RESOURCES_PATH + \"/\" + QuestConstants.QUEST_LOG_NAME + \".asset\");\n#endif\n\n            }\n\n            QuestLogSaveData aux = QuestSaveSystem.Load(QuestConstants.SAVE_FILE_PATH) as QuestLogSaveData;", "            if (misionLog == null)\n            {\n                // crear\n                misionLog = ScriptableObject.CreateInstance<QuestLog>();\n#if UNITY_EDITOR\n                AssetDatabase.CreateAsset(misionLog, QuestConstants.RESOURCES_PATH + \"/\" + QuestConstants.QUEST_LOG_NAME + \".asset\");\n#endif\n\n            }\n\n            QuestLogSaveData aux = QuestSaveSystem.Load(QuestConstants.SAVE_FILE_PATH) as QuestLogSaveData;", "            if (aux == null) Debug.Log(\"No file to load in \" + aux);\n            else\n            {\n                data = aux;\n                misionLog.LoadUpdate(data);\n            }\n        }\n\n        public void AddMisionToCurrent(Quest q)\n        {\n            q.nodeActual = q.firtsNode;\n            q.nodeActual.ChangeTheStateOfObjects(true);\n            misionLog.curentQuests.Add(q);\n        }\n", "        public void AddMisionToCurrent(Quest q)\n        {\n            q.nodeActual = q.firtsNode;\n            q.nodeActual.ChangeTheStateOfObjects(true);\n            misionLog.curentQuests.Add(q);\n        }\n\n        public bool IsMisionInLog(Quest q)\n        {\n            return misionLog.IsCurrent(q) || misionLog.IsDoned(q) || misionLog.IsFailed(q);\n        }\n", "        public bool IsCurrent(Quest q) => misionLog.IsCurrent(q);\n\n        public bool IsDoned(Quest q) => misionLog.IsDoned(q);\n\n        public bool IsFailed(Quest q) => misionLog.IsFailed(q);\n\n        public void DonearQuest(Quest q)\n        {\n            misionLog.curentQuests.Remove(q);\n            misionLog.doneQuest.Add(q);\n\n            Save();\n        }\n", "        public void Save()\n        {\n            //Comprovar que se guarde compilado\n#if !UNITY_EDITOR\n            data = new QuestLogSaveData(misionLog);\n            QuestSaveSystem.Save(data);\n#endif\n        }\n\n\n\n        /// <summary>\n        /// Formats the current mision information like this:\n        /// Mision Name /n\n        ///    /tab Objective description 0/1\n        /// </summary>\n        /// <returns> Returns the string formated </returns>", "        public string GetCurrentQuestsInformation()\n        {\n            string textFormated = \"\";\n\n            foreach (Quest quest in misionLog.curentQuests)\n            {\n                textFormated += quest.misionName + \"\\n\";\n\n                for (int i = 0; i < quest.nodeActual.nodeObjectives.Length; i++)\n                {\n                    QuestObjective currentObjective = quest.nodeActual.nodeObjectives[i];\n                    textFormated += \"   \" + currentObjective.description  + \" \"\n                                    + currentObjective.actualItems + \"/\" + currentObjective.maxItems\n                                    + \"\\n\";\n                }\n            }\n\n            return textFormated;\n        }\n\n\n\n    }\n}", "                for (int i = 0; i < quest.nodeActual.nodeObjectives.Length; i++)\n                {\n                    QuestObjective currentObjective = quest.nodeActual.nodeObjectives[i];\n                    textFormated += \"   \" + currentObjective.description  + \" \"\n                                    + currentObjective.actualItems + \"/\" + currentObjective.maxItems\n                                    + \"\\n\";\n                }\n            }\n\n            return textFormated;\n        }\n\n\n\n    }\n}"]}
{"filename": "Runtime/IQuestInteraction.cs", "chunked_list": ["using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace QuestSystem\n{\n    public interface IQuestInteraction\n    {\n        void Interact(); \n    }\n}\n"]}
{"filename": "Runtime/QuestGiver.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace QuestSystem\n{\n    public class QuestGiver : MonoBehaviour , IQuestInteraction\n    {\n        public Quest questToGive;\n        public TextAsset extraText;\n", "        public Quest questToGive;\n        public TextAsset extraText;\n\n        private bool ableToGive = false;\n        private bool questAlreadyGiven;\n        private QuestManager questManagerRef;\n\n        // Start is called before the first frame update\n        void Start()\n        {\n            questManagerRef = QuestManager.GetInstance();\n            questAlreadyGiven = questManagerRef.IsMisionInLog(questToGive);\n        }\n", "        public void giveQuest()\n        {\n            showDialogue();\n            questManagerRef.AddMisionToCurrent(questToGive);\n\n            questAlreadyGiven = true;\n            QuestManager.GetInstance().Save();\n        }\n\n        public void showDialogue()\n        {", "        public void showDialogue()\n        {\n            //if (conversation != null) FindObjectOfType<DialogueWindow>().StartDialogue(conversation, null);\n            //else return;\n        }\n\n\n        //Delete the ones you don't want to use\n\n        private void OnTriggerEnter(Collider other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n", "        private void OnTriggerEnter(Collider other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n\n        private void OnTriggerExit(Collider other)\n        {\n            resultOfEnter(false, other.tag);\n        }\n\n        private void OnTriggerEnter2D(Collider2D other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n", "        private void OnTriggerEnter2D(Collider2D other)\n        {\n            resultOfEnter(true, other.tag);\n        }\n\n        private void OnTriggerExit2D(Collider2D other)\n        {\n            resultOfEnter(false, other.tag);\n        }\n\n        private void resultOfEnter(bool ableToGiveResult, string tag)\n        {", "        private void resultOfEnter(bool ableToGiveResult, string tag)\n        {\n            if (tag == \"Player\") ableToGive = ableToGiveResult;\n        }\n\n        public void Interact()\n        {\n            if(ableToGive && !questAlreadyGiven)\n            {\n                giveQuest();\n            }\n        }\n\n\n    }\n}"]}
{"filename": "Runtime/NodeQuest.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\n\nnamespace QuestSystem\n{\n    [CreateAssetMenu(fileName = \"New NodeQuest\", menuName = \"QuestSystem/NodeQuest\")]\n    [System.Serializable]\n    public class NodeQuest : ScriptableObject\n    {\n        public List<NodeQuest> nextNode = new List<NodeQuest>();", "    [System.Serializable]\n    public class NodeQuest : ScriptableObject\n    {\n        public List<NodeQuest> nextNode = new List<NodeQuest>();\n        public TextAsset extraText;\n        public List<GameObject> objectsActivated;\n        public bool isFinal;\n        public QuestObjective[] nodeObjectives;\n\n        [Header(\"Graph Part\")]\n        public string GUID;", "        public string GUID;\n        public Vector2 position;\n\n        public void AddObject(GameObject g)\n        {\n            if (g == null) Debug.Log(\"Object is null\");\n            if (!objectsActivated.Contains(g))\n            {\n                objectsActivated.Add(g);\n            }\n        }\n", "        public void ChangeTheStateOfObjects(bool b)\n        {\n            foreach (GameObject g in objectsActivated)\n            {\n                g.SetActive(b);\n            }\n        }\n\n        private void OnEnable()\n        {\n            objectsActivated = new List<GameObject>();\n        }\n\n\n\n    }\n}", "        private void OnEnable()\n        {\n            objectsActivated = new List<GameObject>();\n        }\n\n\n\n    }\n}"]}
{"filename": "Runtime/QuestOnObjectWorld.cs", "chunked_list": ["\ufeffusing UnityEngine;\n\nnamespace QuestSystem\n{\n    public class QuestOnObjectWorld : MonoBehaviour\n    {\n        //Structs in order to show on editor\n        [System.Serializable]\n        public struct ObjectsForQuestTable\n        {\n            public Quest quest;\n            public ActivationRowNode[] tableNodes;\n        }\n\n        [System.Serializable]", "        public struct ObjectsForQuestTable\n        {\n            public Quest quest;\n            public ActivationRowNode[] tableNodes;\n        }\n\n        [System.Serializable]\n        public struct ActivationRowNode\n        {\n            public NodeQuest node;\n            public bool activate;\n        }\n\n        public ObjectsForQuestTable[] objectsForQuestTable;\n\n        public GameObject[] objectsToControlList;\n", "            public NodeQuest node;\n            public bool activate;\n        }\n\n        public ObjectsForQuestTable[] objectsForQuestTable;\n\n        public GameObject[] objectsToControlList;\n\n        private QuestManager questManagerRef;\n        // Start is called before the first frame update\n        private void Awake()\n        {\n            questManagerRef = QuestManager.GetInstance();\n        }\n\n\n\n        void Start()\n        {\n            //Default: every object is disabled", "        private QuestManager questManagerRef;\n        // Start is called before the first frame update\n        private void Awake()\n        {\n            questManagerRef = QuestManager.GetInstance();\n        }\n\n\n\n        void Start()\n        {\n            //Default: every object is disabled", "            foreach (GameObject g in objectsToControlList)\n            {\n                g.SetActive(false);\n            }\n\n            for (int i = 0; i < objectsForQuestTable.Length; i++)\n            {\n                bool isCurrent = questManagerRef.IsCurrent(objectsForQuestTable[i].quest);\n                bool hasBeenActivated = false;\n\n", "                for (int j = 0; j < objectsForQuestTable[i].tableNodes.Length; j++)\n                {\n                    if (objectsForQuestTable[i].tableNodes[j].activate)\n                    {\n                        foreach (GameObject g in objectsToControlList)\n                        {\n                            objectsForQuestTable[i].tableNodes[j].node.AddObject(g);\n                        }\n                    }\n\n                    if (!hasBeenActivated && isCurrent && objectsForQuestTable[i].quest.nodeActual == objectsForQuestTable[i].tableNodes[j].node)\n                    {", "                    if (!hasBeenActivated && isCurrent && objectsForQuestTable[i].quest.nodeActual == objectsForQuestTable[i].tableNodes[j].node)\n                    {\n                        foreach (GameObject g in objectsToControlList)\n                        {\n                            g.SetActive(objectsForQuestTable[i].tableNodes[j].activate);\n                        }\n                        hasBeenActivated = true;\n                    }\n                }\n            }\n\n            \n\n\n        }\n", "        public void PopulateChildListDefault()\n        {\n            int numberOfChilds = transform.childCount;\n            GameObject[] children = new GameObject[numberOfChilds];\n\n            for (int i = 0; i < numberOfChilds; i++)\n            {\n                children[i] = transform.GetChild(i).gameObject;\n            }\n\n            objectsToControlList = children;\n        }\n", "        public void GetAllNodesFromQuest()\n        {\n            for (int i = 0; i < objectsForQuestTable.Length; i++)\n            {\n                string path = $\"{QuestConstants.MISIONS_NAME}/{objectsForQuestTable[i].quest.misionName}/{QuestConstants.NODES_FOLDER_NAME}\";\n                NodeQuest[] nodesFromQuest = Resources.LoadAll<NodeQuest>(path);\n                if (nodesFromQuest != null && nodesFromQuest.Length > 0)\n                {\n                    ActivationRowNode[] tableNodes = new ActivationRowNode[nodesFromQuest.Length]; \n                    for (int j = 0; j < tableNodes.Length; j++)\n                    {\n                        tableNodes[j].node = nodesFromQuest[j];\n                    }\n\n                    objectsForQuestTable[i].tableNodes = tableNodes;\n                }\n            }\n        }\n\n    }\n\n\n\n\n}", "                    for (int j = 0; j < tableNodes.Length; j++)\n                    {\n                        tableNodes[j].node = nodesFromQuest[j];\n                    }\n\n                    objectsForQuestTable[i].tableNodes = tableNodes;\n                }\n            }\n        }\n\n    }\n\n\n\n\n}"]}
{"filename": "Runtime/Quest.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEditor;\n\n\nnamespace QuestSystem\n{\n    [CreateAssetMenu(fileName = \"New Quest\", menuName = \"QuestSystem/Quest\")]\n    [System.Serializable]\n    public class Quest : ScriptableObject\n    {\n        [Header(\"Warning!!!! This ScriptaleObject has to be in a resources folder  under Missions/[MisionName]\")]", "    [CreateAssetMenu(fileName = \"New Quest\", menuName = \"QuestSystem/Quest\")]\n    [System.Serializable]\n    public class Quest : ScriptableObject\n    {\n        [Header(\"Warning!!!! This ScriptaleObject has to be in a resources folder  under Missions/[MisionName]\")]\n        public NodeQuest firtsNode;\n        public NodeQuest nodeActual;\n        public List<int> state;\n        public int limitDay;\n        public int startDay;\n        public string misionName;", "        public int limitDay;\n        public int startDay;\n        public string misionName;\n        public bool isMain;\n\n        [Header(\"Graph Part\")]\n        public List<NodeLinksGraph> nodeLinkData;\n\n        [System.Serializable]\n        public class NodeLinksGraph\n        {", "        public class NodeLinksGraph\n        {\n            public string baseNodeGUID;\n            public string portName;\n            public string targetNodeGUID;\n        }\n\n        public void Reset()\n        {\n            state = new List<int>();\n            nodeActual = null;\n\n            NodeQuest[] getNodes = Resources.LoadAll<NodeQuest>($\"{QuestConstants.MISIONS_NAME}/{ this.misionName}/Nodes\");\n", "            foreach (NodeQuest n in getNodes)\n            {\n                for (int i = 0; i < n.nodeObjectives.Length; i++)\n                {\n                    n.nodeObjectives[i].isCompleted = false;\n                    n.nodeObjectives[i].actualItems = 0;\n                }\n#if UNITY_EDITOR\n                EditorUtility.SetDirty(n);\n#endif\n            }\n\n            QuestManager.GetInstance().misionLog.RemoveQuest(this);\n        }\n", "        public void AdvanceToCurrentNode()\n        {\n            nodeActual = firtsNode;\n            foreach (int i in state)\n            {\n                nodeActual = nodeActual.nextNode[i];\n            }\n\n\n        \n        }\n", "        public void ResetNodeLinksGraph()\n        {\n            nodeLinkData = new List<NodeLinksGraph>();\n        }\n    }\n}"]}
{"filename": "Runtime/SaveData/NodeQuestSaveDataSurrogate.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.Serialization;\nusing UnityEngine;\n\nnamespace QuestSystem.SaveSystem\n{\n    public class NodeQuestSaveDataSurrogate : ISerializationSurrogate\n    {\n        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            NodeQuest nq = (NodeQuest)obj;\n            info.AddValue(\"extraText\", nq.extraText);\n            info.AddValue(\"isFinal\", nq.isFinal);\n            info.AddValue(\"nodeObjectives\", nq.nodeObjectives);\n        }\n", "        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            NodeQuest nq = (NodeQuest)obj;\n            info.AddValue(\"extraText\", nq.extraText);\n            info.AddValue(\"isFinal\", nq.isFinal);\n            info.AddValue(\"nodeObjectives\", nq.nodeObjectives);\n        }\n\n        public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)\n        {\n            NodeQuest nq = (NodeQuest)obj;\n            nq.isFinal = (bool)info.GetValue(\"isFinal\", typeof(bool));\n            nq.nodeObjectives = (QuestObjective[])info.GetValue(\"nodeObjectives\", typeof(QuestObjective[]));\n            obj = nq;\n            return obj;\n        }\n\n    }\n\n    [System.Serializable]", "        public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)\n        {\n            NodeQuest nq = (NodeQuest)obj;\n            nq.isFinal = (bool)info.GetValue(\"isFinal\", typeof(bool));\n            nq.nodeObjectives = (QuestObjective[])info.GetValue(\"nodeObjectives\", typeof(QuestObjective[]));\n            obj = nq;\n            return obj;\n        }\n\n    }\n\n    [System.Serializable]", "    public class NodeQuestSaveData\n    {\n        public QuestObjective[] objectives;\n\n        public NodeQuestSaveData()\n        {\n            objectives = new QuestObjective[1];\n        }\n\n        public NodeQuestSaveData(int i)\n        {\n            objectives = new QuestObjective[i];\n        }\n\n\n    }\n}"]}
{"filename": "Runtime/SaveData/QuestObjectiveSurrogate.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing System.Runtime.Serialization;\n\nnamespace QuestSystem.SaveSystem\n{\n    public class QuestObjectiveSurrogate : ISerializationSurrogate\n    {\n        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            QuestObjective qo = (QuestObjective)obj;\n\n            info.AddValue(\"keyName\", qo.keyName);\n            info.AddValue(\"isCompleted\", qo.isCompleted);\n            info.AddValue(\"maxItems\", qo.maxItems);\n            info.AddValue(\"actualItems\", qo.actualItems);\n            info.AddValue(\"description\", qo.description);\n        }\n", "        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            QuestObjective qo = (QuestObjective)obj;\n\n            info.AddValue(\"keyName\", qo.keyName);\n            info.AddValue(\"isCompleted\", qo.isCompleted);\n            info.AddValue(\"maxItems\", qo.maxItems);\n            info.AddValue(\"actualItems\", qo.actualItems);\n            info.AddValue(\"description\", qo.description);\n        }\n", "        public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)\n        {\n            QuestObjective qo = (QuestObjective)obj;\n\n            qo.keyName = (string)info.GetValue(\"keyName\", typeof(string));\n            qo.isCompleted = (bool)info.GetValue(\"isCompleted\", typeof(bool));\n            qo.maxItems = (int)info.GetValue(\"maxItems\", typeof(int));\n            qo.actualItems = (int)info.GetValue(\"actualItems\", typeof(int));\n            qo.description = (string)info.GetValue(\"description\", typeof(string));\n\n            obj = qo;\n            return obj;\n        }\n\n\n    }\n}"]}
{"filename": "Runtime/SaveData/QuestSaveSystem.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing UnityEngine;\n\nnamespace QuestSystem.SaveSystem\n{\n    public class QuestSaveSystem\n    {", "{\n    public class QuestSaveSystem\n    {\n        public static string GetPath(string saveName)\n        {\n            return QuestConstants.SAVE_FILE_FOLDER + \"/\" + saveName + \".save\";\n        }\n\n        public static bool Save(object saveData)\n        {\n            BinaryFormatter formatter = GetBinaryFormater();\n", "        public static bool Save(object saveData)\n        {\n            BinaryFormatter formatter = GetBinaryFormater();\n\n            if (!Directory.Exists(QuestConstants.SAVE_FILE_FOLDER))\n            {\n                Directory.CreateDirectory(QuestConstants.SAVE_FILE_FOLDER);\n            }\n\n            string path = QuestConstants.SAVE_FILE_PATH;\n            Debug.Log(path);\n            FileStream file = File.Create(path);\n\n            formatter.Serialize(file, saveData);\n            Debug.Log(\"Saved\");\n            file.Close();\n\n            return true;\n        }\n", "        public static object Load(string path)\n        {\n            Debug.Log(path);\n            if (!File.Exists(path)) return null;\n\n            BinaryFormatter formatter = GetBinaryFormater();\n\n            FileStream file = File.Open(path, FileMode.Open);\n            try\n            {\n                object save = formatter.Deserialize(file);\n                file.Close();\n                Debug.Log(\"Loaded\");\n                return save;\n            }\n            catch\n            {\n                Debug.LogErrorFormat(\"Faled to load file at {0}\", path);\n                file.Close();\n                return null;\n            }\n        }\n\n        /*", "        public static object LoadFromName(string saveName)\n        {\n            return Load(GetPath(saveName));\n        }*/\n\n        public static BinaryFormatter GetBinaryFormater()\n        {\n            //Create binary formater\n            BinaryFormatter formatter = new BinaryFormatter();\n\n\n            //Define surrogates (especificacions de com tractar les dades)\n            SurrogateSelector selector = new SurrogateSelector();\n\n            QuestObjectiveSurrogate objectiveSurrogate = new QuestObjectiveSurrogate();\n            NodeQuestSaveDataSurrogate nodeSurrogate = new NodeQuestSaveDataSurrogate();\n            QuestSaveDataSurrogate questSurrogate = new QuestSaveDataSurrogate();\n            QuestLogSaveDataSurrogate questLogSurrogate = new QuestLogSaveDataSurrogate();\n\n            //selector.AddSurrogate(typeof(QuestObjective), new StreamingContext(StreamingContextStates.All), objectiveSurrogate);\n            selector.AddSurrogate(typeof(NodeQuest), new StreamingContext(StreamingContextStates.All), nodeSurrogate);\n            selector.AddSurrogate(typeof(Quest), new StreamingContext(StreamingContextStates.All), questSurrogate);\n            selector.AddSurrogate(typeof(QuestLog), new StreamingContext(StreamingContextStates.All), questLogSurrogate);\n\n            formatter.SurrogateSelector = selector;\n\n            return formatter;\n        }\n    }\n}"]}
{"filename": "Runtime/SaveData/QuestSaveDataSurrogate.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing UnityEngine;\n\nnamespace QuestSystem.SaveSystem\n{\n    public class QuestSaveDataSurrogate : ISerializationSurrogate\n    {", "{\n    public class QuestSaveDataSurrogate : ISerializationSurrogate\n    {\n        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            Quest q = (Quest)obj;\n\n            info.AddValue(\"firtsNode\", q.firtsNode);\n            info.AddValue(\"nodeActual\", q.nodeActual);\n            info.AddValue(\"state\", q.state);\n            info.AddValue(\"limitDay\", q.limitDay);\n            info.AddValue(\"startDay\", q.startDay);\n            info.AddValue(\"misionName\", q.misionName);\n        }\n", "        public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)\n        {\n            Quest q = (Quest)obj;\n\n            q.firtsNode = (NodeQuest)info.GetValue(\"firtsNode\", typeof(NodeQuest));\n            q.firtsNode = (NodeQuest)info.GetValue(\"nodeActual\", typeof(NodeQuest));\n            q.state = (List<int>)info.GetValue(\"state\", typeof(List<int>));\n            q.limitDay = (int)info.GetValue(\"limitDay\", typeof(int));\n            q.startDay = (int)info.GetValue(\"startDay\", typeof(int));\n            q.misionName = (string)info.GetValue(\"misionName\", typeof(string));\n\n            obj = q;\n            return obj;\n        }\n\n    }\n\n    [System.Serializable]", "    public class QuestSaveData\n    {\n        public List<int> states;\n        public string name;\n        public NodeQuestSaveData actualNodeData;\n    }\n\n}"]}
{"filename": "Runtime/SaveData/QuestLogSaveDataSurrogate.cs", "chunked_list": ["\ufeffusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.Serialization;\nusing UnityEngine;\n\nnamespace QuestSystem.SaveSystem\n{\n    public class QuestLogSaveDataSurrogate : ISerializationSurrogate\n    {\n        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            QuestLog ql = (QuestLog)obj;\n\n            info.AddValue(\"curentQuest\", ql.curentQuests);\n            info.AddValue(\"doneQuest\", ql.doneQuest);\n            info.AddValue(\"failedQuest\", ql.failedQuest);\n            info.AddValue(\"businessDay\", ql.businessDay);\n\n        }\n", "        public void GetObjectData(object obj, SerializationInfo info, StreamingContext context)\n        {\n            QuestLog ql = (QuestLog)obj;\n\n            info.AddValue(\"curentQuest\", ql.curentQuests);\n            info.AddValue(\"doneQuest\", ql.doneQuest);\n            info.AddValue(\"failedQuest\", ql.failedQuest);\n            info.AddValue(\"businessDay\", ql.businessDay);\n\n        }\n", "        public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector)\n        {\n            QuestLog ql = (QuestLog)obj;\n\n            ql.curentQuests = (List<Quest>)info.GetValue(\"curentQuest\", typeof(List<Quest>));\n            ql.doneQuest = (List<Quest>)info.GetValue(\"doneQuest\", typeof(List<Quest>));\n            ql.failedQuest = (List<Quest>)info.GetValue(\"failedQuest\", typeof(List<Quest>));\n\n            ql.businessDay = (int)info.GetValue(\"businessDay\", typeof(int));\n\n            obj = ql;\n            return obj;\n        }\n    }\n\n    [System.Serializable]", "    public class QuestLogSaveData\n    {\n        public List<QuestSaveData> currentQuestSave;\n        public List<QuestSaveData> doneQuestSave;\n        public List<QuestSaveData> failedQuestSave;\n\n        public int dia;\n\n        public QuestLogSaveData(QuestLog ql)\n        {\n            //Manage current quest\n            currentQuestSave = new List<QuestSaveData>();\n            doneQuestSave = new List<QuestSaveData>();\n            failedQuestSave = new List<QuestSaveData>();\n", "            foreach (Quest q in ql.curentQuests)\n            {\n                QuestSaveData aux = new QuestSaveData();\n                aux.name = q.misionName;\n                aux.states = q.state;\n\n                aux.actualNodeData = new NodeQuestSaveData(q.nodeActual.nodeObjectives.Length);\n\n                for (int i = 0; i < q.nodeActual.nodeObjectives.Length; i++)\n                    aux.actualNodeData.objectives[i] = q.nodeActual.nodeObjectives[i];\n\n                currentQuestSave.Add(aux);\n            }\n", "                for (int i = 0; i < q.nodeActual.nodeObjectives.Length; i++)\n                    aux.actualNodeData.objectives[i] = q.nodeActual.nodeObjectives[i];\n\n                currentQuestSave.Add(aux);\n            }\n\n            foreach (Quest q in ql.doneQuest)\n            {\n                QuestSaveData aux = new QuestSaveData();\n                aux.name = q.misionName;\n\n                currentQuestSave.Add(aux);\n            }\n", "            foreach (Quest q in ql.failedQuest)\n            {\n                QuestSaveData aux = new QuestSaveData();\n                aux.name = q.misionName;\n\n                currentQuestSave.Add(aux);\n            }\n\n            dia = ql.businessDay;\n\n        }\n    }\n}"]}
