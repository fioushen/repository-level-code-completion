{"filename": "src/FunctionApp/Program.cs", "chunked_list": ["using FunctionApp.Configurations;\n\nusing Microsoft.Azure.Functions.Worker.Extensions.OpenApi.Extensions;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Configurations.AppSettings.Extensions;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Abstractions;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Configurations;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n", "using Microsoft.Extensions.Hosting;\n\nvar host = new HostBuilder()\n               .ConfigureAppConfiguration((context, config) =>\n               {\n                   config.AddEnvironmentVariables();\n               })\n               .ConfigureFunctionsWorkerDefaults(worker => worker.UseNewtonsoftJson())\n               .ConfigureServices(services =>\n               {", "               .ConfigureServices(services =>\n               {\n                   var settings = services.BuildServiceProvider()\n                                          .GetService<IConfiguration>()\n                                          .Get<GraphSettings>(GraphSettings.Name);\n\n                   services.AddSingleton(settings);\n\n                   services.AddSingleton<IOpenApiConfigurationOptions>(_ =>\n                            {", "                   services.AddSingleton<IOpenApiConfigurationOptions>(_ =>\n                            {\n                                var options = new DefaultOpenApiConfigurationOptions();\n\n                                /* \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f for GH Codespaces \u2b07\ufe0f\u2b07\ufe0f\u2b07\ufe0f */\n                                var codespaces = bool.TryParse(Environment.GetEnvironmentVariable(\"OpenApi__RunOnCodespaces\"), out var isCodespaces) && isCodespaces;\n                                if (codespaces)\n                                {\n                                    options.IncludeRequestingHostName = false;\n                                }\n                                /* \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f for GH Codespaces \u2b06\ufe0f\u2b06\ufe0f\u2b06\ufe0f */\n\n                                return options;\n                            });\n               })\n               .Build();\n\nhost.Run();"]}
{"filename": "src/FunctionApp/Triggers/UserDetailsHttpTrigger.cs", "chunked_list": ["using System.Net;\nusing System.Text;\n\nusing Azure.Identity;\n\nusing FunctionApp.Configurations;\nusing FunctionApp.Models;\n\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;", "using Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Graph;\n\nusing Newtonsoft.Json;\n\nnamespace FunctionApp.Triggers", "\nnamespace FunctionApp.Triggers\n{\n    /// <summary>\n    /// This represents the HTTP trigger entity for user details.\n    /// </summary>\n    public class UserDetailsHttpTrigger\n    {\n        private readonly GraphSettings _settings;\n        private readonly ILogger _logger;\n\n        /// <summary>\n        /// Initialise the new instance of the <see cref=\"UserDetailsHttpTrigger\"/> class.\n        /// </summary>\n        /// <param name=\"settings\"><see cref=\"GraphSettings\"/> instance.</param>\n        /// <param name=\"loggerFactory\"><see cref=\"ILoggerFactory\"/> instance.</param>\n        public UserDetailsHttpTrigger(GraphSettings settings, ILoggerFactory loggerFactory)\n        {\n            this._settings = settings ?? throw new ArgumentNullException(nameof(settings));\n            this._logger = (loggerFactory ?? throw new ArgumentNullException(nameof(loggerFactory))).CreateLogger<UserDetailsHttpTrigger>();\n        }\n\n        /// <summary>\n        /// Invokes the HTTP trigger to get user details.\n        /// </summary>\n        /// <param name=\"req\"><see cref=\"HttpRequestData\"/> instance.</param>\n        /// <returns>Returns <see cref=\"HttpResponseData\"/> instance.</returns>\n        [Function(nameof(UserDetailsHttpTrigger.GetUserDetailsAsync))]\n        [OpenApiOperation(operationId: \"getUser\", tags: new[] { \"registration\" }, Summary = \"Get user details\", Description = \"This endpoint gets the user details.\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: \"application/json\", bodyType: typeof(LoggedInUser), Summary = \"Response payload including the logged-in user details.\", Description = \"Response payload that includes the logged-in user details.\")]\n        [OpenApiResponseWithoutBody(statusCode: HttpStatusCode.BadRequest, Summary = \"Invalid request\", Description = \"This indicates the request is invalid.\")]\n        [OpenApiResponseWithoutBody(statusCode: HttpStatusCode.NotFound, Summary = \"User not found\", Description = \"This indicates the user is not found.\")]", "        private readonly GraphSettings _settings;\n        private readonly ILogger _logger;\n\n        /// <summary>\n        /// Initialise the new instance of the <see cref=\"UserDetailsHttpTrigger\"/> class.\n        /// </summary>\n        /// <param name=\"settings\"><see cref=\"GraphSettings\"/> instance.</param>\n        /// <param name=\"loggerFactory\"><see cref=\"ILoggerFactory\"/> instance.</param>\n        public UserDetailsHttpTrigger(GraphSettings settings, ILoggerFactory loggerFactory)\n        {\n            this._settings = settings ?? throw new ArgumentNullException(nameof(settings));\n            this._logger = (loggerFactory ?? throw new ArgumentNullException(nameof(loggerFactory))).CreateLogger<UserDetailsHttpTrigger>();\n        }\n\n        /// <summary>\n        /// Invokes the HTTP trigger to get user details.\n        /// </summary>\n        /// <param name=\"req\"><see cref=\"HttpRequestData\"/> instance.</param>\n        /// <returns>Returns <see cref=\"HttpResponseData\"/> instance.</returns>\n        [Function(nameof(UserDetailsHttpTrigger.GetUserDetailsAsync))]\n        [OpenApiOperation(operationId: \"getUser\", tags: new[] { \"registration\" }, Summary = \"Get user details\", Description = \"This endpoint gets the user details.\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: \"application/json\", bodyType: typeof(LoggedInUser), Summary = \"Response payload including the logged-in user details.\", Description = \"Response payload that includes the logged-in user details.\")]\n        [OpenApiResponseWithoutBody(statusCode: HttpStatusCode.BadRequest, Summary = \"Invalid request\", Description = \"This indicates the request is invalid.\")]\n        [OpenApiResponseWithoutBody(statusCode: HttpStatusCode.NotFound, Summary = \"User not found\", Description = \"This indicates the user is not found.\")]", "        public async Task<HttpResponseData> GetUserDetailsAsync(\n            [HttpTrigger(AuthorizationLevel.Anonymous, \"GET\", Route = \"users/get\")] HttpRequestData req)\n        {\n            this._logger.LogInformation(\"C# HTTP trigger function processed a request.\");\n\n            var response = req.CreateResponse();\n            var request = req.Headers.TryGetValues(\"x-ms-client-principal\", out var result) ? result.FirstOrDefault() : null;\n            if (string.IsNullOrWhiteSpace(request))\n            {\n                response.StatusCode = HttpStatusCode.BadRequest;\n\n                return response;\n            }\n\n            var json = Encoding.UTF8.GetString(Convert.FromBase64String(request));\n            var principal = JsonConvert.DeserializeObject<ClientPrincipal>(json);\n\n            var credential = new ClientSecretCredential(this._settings?.TenantId, this._settings?.ClientId, this._settings?.ClientSecret);\n            var client = new GraphServiceClient(credential);\n\n            var users = await client.Users.GetAsync().ConfigureAwait(false);\n            var user = users?.Value.SingleOrDefault(p => p.UserPrincipalName == principal?.UserDetails);", "            if (user == null)\n            {\n                response.StatusCode = HttpStatusCode.NotFound;\n\n                return response;\n            }\n\n            var loggedInUser = new LoggedInUser(user);\n\n            response.StatusCode = HttpStatusCode.OK;\n            response.Headers.Add(\"Content-Type\", \"application/json; charset=utf-8\");\n            await response.WriteStringAsync(JsonConvert.SerializeObject(loggedInUser)).ConfigureAwait(false);\n\n            return response;\n        }\n    }\n}"]}
{"filename": "src/FunctionApp/Models/LoggedInUser.cs", "chunked_list": ["using Microsoft.Graph.Models;\n\nusing Newtonsoft.Json;\n\nnamespace FunctionApp.Models\n{\n    /// <summary>\n    /// This represents the entity for logged-in user details.\n    /// </summary>\n    public class LoggedInUser\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"LoggedInUser\" /> class.\n        /// </summary>\n        /// <param name=\"user\"><see cref=\"User\"/> instance.</param>\n        public LoggedInUser(User user)\n        {", "    /// </summary>\n    public class LoggedInUser\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"LoggedInUser\" /> class.\n        /// </summary>\n        /// <param name=\"user\"><see cref=\"User\"/> instance.</param>\n        public LoggedInUser(User user)\n        {\n            if (user == null)\n            {\n                throw new ArgumentNullException(nameof(user));\n            }\n\n            this.Upn = user?.UserPrincipalName;\n            this.DisplayName = user?.DisplayName;\n            this.Email = user?.Mail;\n        }\n\n        /// <summary>\n        /// Gets or sets the UPN.\n        /// </summary>\n        [JsonProperty(\"upn\")]", "            if (user == null)\n            {\n                throw new ArgumentNullException(nameof(user));\n            }\n\n            this.Upn = user?.UserPrincipalName;\n            this.DisplayName = user?.DisplayName;\n            this.Email = user?.Mail;\n        }\n\n        /// <summary>\n        /// Gets or sets the UPN.\n        /// </summary>\n        [JsonProperty(\"upn\")]", "        public virtual string? Upn { get; set; }\n\n        /// <summary>\n        /// Gets or sets the display name.\n        /// </summary>\n        [JsonProperty(\"displayName\")]\n        public virtual string? DisplayName { get; set; }\n\n        /// <summary>\n        /// Gets or sets the email.\n        /// </summary>\n        [JsonProperty(\"email\")]", "        public virtual string? Email { get; set; }\n    }\n}"]}
{"filename": "src/FunctionApp/Models/ClientPrincipal.cs", "chunked_list": ["using Newtonsoft.Json;\n\nnamespace FunctionApp.Models\n{\n    /// <summary>\n    /// This represents the entity for the client principal.\n    /// </summary>\n    public class ClientPrincipal\n    {\n        /// <summary>\n        /// Gets or sets the identity provider.\n        /// </summary>\n        [JsonProperty(\"identityProvider\")]\n        public string? IdentityProvider { get; set; }\n\n        /// <summary>\n        /// Gets or sets the user ID.\n        /// </summary>\n        [JsonProperty(\"userId\")]\n        public string? UserId { get; set; }\n\n        /// <summary>\n        /// Gets or sets the user details.\n        /// </summary>\n        [JsonProperty(\"userDetails\")]\n        public string? UserDetails { get; set; }\n\n        /// <summary>\n        /// Gets or sets the user roles.\n        /// </summary>\n        [JsonProperty(\"userRoles\")]\n        public IEnumerable<string>? UserRoles { get; set; }\n    }\n}"]}
{"filename": "src/FunctionApp/Configurations/GraphSettings.cs", "chunked_list": ["namespace FunctionApp.Configurations\n{\n    /// <summary>\n    /// This represents the app settings entity for Microsoft Graph.\n    /// </summary>\n    public class GraphSettings\n    {\n        /// <summary>\n        /// Gets the app settings name.\n        /// </summary>\n        public const string Name = \"MsGraph\";\n\n        /// <summary>\n        /// Gets or sets the tenant ID.\n        /// </summary>", "        public const string Name = \"MsGraph\";\n\n        /// <summary>\n        /// Gets or sets the tenant ID.\n        /// </summary>\n        public virtual string? TenantId { get; set; }\n\n        /// <summary>\n        /// Gets or sets the client ID.\n        /// </summary>\n        public virtual string? ClientId { get; set; }\n\n        /// <summary>\n        /// Gets or sets the client ID.\n        /// </summary>", "        public virtual string? ClientId { get; set; }\n\n        /// <summary>\n        /// Gets or sets the client ID.\n        /// </summary>\n        public virtual string? ClientSecret { get; set; }\n    }\n}"]}
{"filename": "src/BlazorApp/Program.cs", "chunked_list": ["using BlazorApp;\nusing BlazorApp.Helpers;\n\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\n\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\n", "builder.RootComponents.Add<HeadOutlet>(\"head::after\");\n\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) })\n                .AddScoped<IGraphHelper, GraphHelper>();\n\nawait builder.Build().RunAsync();"]}
{"filename": "src/BlazorApp/Shared/MainLayout.razor.cs", "chunked_list": ["using BlazorApp.Helpers;\nusing BlazorApp.Models;\n\nusing Microsoft.AspNetCore.Components;\n\nnamespace BlazorApp.Shared\n{\n    /// <summary>\n    /// This represents the main layout component.\n    /// </summary>\n    public partial class MainLayout : LayoutComponentBase\n    {\n        /// <summary>\n        /// Gets or sets the <see cref=\"IGraphHelper\"/> instance.\n        /// </summary>\n        [Inject]\n        public IGraphHelper? Helper { get; set; }\n\n        /// <summary>\n        /// Gets or sets the value indicating whether the user is authenticated or not.\n        /// </summary>", "    /// This represents the main layout component.\n    /// </summary>\n    public partial class MainLayout : LayoutComponentBase\n    {\n        /// <summary>\n        /// Gets or sets the <see cref=\"IGraphHelper\"/> instance.\n        /// </summary>\n        [Inject]\n        public IGraphHelper? Helper { get; set; }\n\n        /// <summary>\n        /// Gets or sets the value indicating whether the user is authenticated or not.\n        /// </summary>", "        protected virtual bool IsAuthenticated { get; private set; }\n\n        /// <summary>\n        /// Gets or sets the value indicating whether the login DOM is hidden or not.\n        /// </summary>\n        protected virtual bool IsLoginHidden { get; private set; } = false;\n\n        /// <summary>\n        /// Gets or sets the value indicating whether the logout DOM is hidden or not.\n        /// </summary>\n        protected virtual bool IsLogoutHidden { get; private set; } = true;\n\n        /// <summary>\n        /// Gets the logged-in user's display name.\n        /// </summary>", "        protected virtual bool IsLogoutHidden { get; private set; } = true;\n\n        /// <summary>\n        /// Gets the logged-in user's display name.\n        /// </summary>\n        protected virtual string? DisplayName { get; private set; }\n\n        /// <inheritdoc />\n        protected override async Task OnInitializedAsync()\n        {\n            await this.GetLogInDetailsAsync().ConfigureAwait(false);\n        }\n\n        /// <summary>\n        /// Invokes right after the user logged-in.\n        /// </summary>", "        protected override async Task OnInitializedAsync()\n        {\n            await this.GetLogInDetailsAsync().ConfigureAwait(false);\n        }\n\n        /// <summary>\n        /// Invokes right after the user logged-in.\n        /// </summary>\n        protected async Task OnLoggedInAsync()\n        {\n            await this.GetLogInDetailsAsync().ConfigureAwait(false);\n        }\n\n        /// <summary>\n        /// Invokes right after the user logged-out.\n        /// </summary>", "        protected async Task OnLoggedInAsync()\n        {\n            await this.GetLogInDetailsAsync().ConfigureAwait(false);\n        }\n\n        /// <summary>\n        /// Invokes right after the user logged-out.\n        /// </summary>\n        protected async Task OnLoggedOutAsync()\n        {\n            await this.GetLogInDetailsAsync().ConfigureAwait(false);\n        }\n", "        protected async Task OnLoggedOutAsync()\n        {\n            await this.GetLogInDetailsAsync().ConfigureAwait(false);\n        }\n\n        private async Task GetLogInDetailsAsync()\n        {\n            if (this.Helper == null)\n            {\n                throw new InvalidOperationException(\"User details have not been initialised yet\");\n            }\n\n            var authDetails = await this.Helper.GetAuthenticationDetailsAsync().ConfigureAwait(false);\n\n            this.IsAuthenticated = authDetails.ClientPrincipal != null;\n            this.IsLoginHidden = this.IsAuthenticated;\n            this.IsLogoutHidden = !this.IsAuthenticated;\n\n            var loggedInUser = await this.Helper.GetLoggedInUserDetailsAsync().ConfigureAwait(false);\n            this.DisplayName = loggedInUser?.DisplayName ?? \"Not a user in this tenant\";\n        }\n    }\n}"]}
{"filename": "src/BlazorApp/Helpers/GraphHelper.cs", "chunked_list": ["using System.Text.Json;\n\nusing BlazorApp.Models;\n\nnamespace BlazorApp.Helpers\n{\n    /// <summary>\n    /// This provides interfaces to the <see cref=\"GraphHelper\"/> class.\n    /// </summary>\n    public interface IGraphHelper\n    {\n        /// <summary>\n        /// Gets the authentication details from the token.\n        /// </summary>\n        Task<AuthenticationDetails> GetAuthenticationDetailsAsync();\n\n        /// <summary>\n        /// Gets the logged-in user details from Azure AD.\n        /// </summary>\n        Task<LoggedInUserDetails> GetLoggedInUserDetailsAsync();\n    }\n\n    /// <summary>\n    /// This represents the helper entity for Microsoft Graph.\n    /// </summary>", "    /// </summary>\n    public interface IGraphHelper\n    {\n        /// <summary>\n        /// Gets the authentication details from the token.\n        /// </summary>\n        Task<AuthenticationDetails> GetAuthenticationDetailsAsync();\n\n        /// <summary>\n        /// Gets the logged-in user details from Azure AD.\n        /// </summary>\n        Task<LoggedInUserDetails> GetLoggedInUserDetailsAsync();\n    }\n\n    /// <summary>\n    /// This represents the helper entity for Microsoft Graph.\n    /// </summary>", "    public class GraphHelper : IGraphHelper\n    {\n        private readonly HttpClient _http;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"GraphHelper\"/> class.\n        /// </summary>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\"/> instance.</param>\n        public GraphHelper(HttpClient httpClient)\n        {\n            this._http = httpClient ?? throw new ArgumentNullException(nameof(httpClient));\n        }\n\n        /// <inheritdoc />", "        public async Task<AuthenticationDetails> GetAuthenticationDetailsAsync()\n        {\n            var json = await this._http.GetStringAsync(\"/.auth/me\").ConfigureAwait(false);\n            var details = JsonSerializer.Deserialize<AuthenticationDetails>(json);\n\n            return details ?? new AuthenticationDetails();\n        }\n\n        /// <inheritdoc />\n        public async Task<LoggedInUserDetails> GetLoggedInUserDetailsAsync()\n        {\n            var details = default(LoggedInUserDetails);\n            try\n            {\n                using var response = await this._http.GetAsync(\"/api/users/get\").ConfigureAwait(false);\n                response.EnsureSuccessStatusCode();\n\n                var json = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n                details = JsonSerializer.Deserialize<LoggedInUserDetails>(json);\n            }\n            catch\n            {\n            }\n\n            return details;\n        }\n    }\n}", "        public async Task<LoggedInUserDetails> GetLoggedInUserDetailsAsync()\n        {\n            var details = default(LoggedInUserDetails);\n            try\n            {\n                using var response = await this._http.GetAsync(\"/api/users/get\").ConfigureAwait(false);\n                response.EnsureSuccessStatusCode();\n\n                var json = await response.Content.ReadAsStringAsync().ConfigureAwait(false);\n                details = JsonSerializer.Deserialize<LoggedInUserDetails>(json);\n            }\n            catch\n            {\n            }\n\n            return details;\n        }\n    }\n}"]}
{"filename": "src/BlazorApp/Models/LoggedInUserDetails.cs", "chunked_list": ["using System.Text.Json.Serialization;\n\nnamespace BlazorApp.Models\n{\n    /// <summary>\n    /// This represents the entity for the logged-in user details.\n    /// </summary>\n    public class LoggedInUserDetails\n    {\n        /// <summary>\n        /// Gets or sets the UPN.\n        /// </summary>\n        [JsonPropertyName(\"upn\")]", "        public virtual string? Upn { get; set; }\n\n        /// <summary>\n        /// Gets or sets the display name.\n        /// </summary>\n        [JsonPropertyName(\"displayName\")]\n        public virtual string? DisplayName { get; set; }\n\n        /// <summary>\n        /// Gets or sets the email.\n        /// </summary>\n        [JsonPropertyName(\"email\")]", "        public virtual string? Email { get; set; }\n    }\n}"]}
{"filename": "src/BlazorApp/Models/AuthenticationDetails.cs", "chunked_list": ["using System.Text.Json.Serialization;\n\nnamespace BlazorApp.Models\n{\n    /// <summary>\n    /// This represents the entity for authentication details.\n    /// </summary>\n    public class AuthenticationDetails\n    {\n        /// <summary>\n        /// Gets or sets the <see cref=\"Models.ClientPrincipal\"/> instance.\n        /// </summary>\n        [JsonPropertyName(\"clientPrincipal\")]\n        public ClientPrincipal? ClientPrincipal { get; set; }\n    }\n}"]}
{"filename": "src/BlazorApp/Models/ClientPrincipal.cs", "chunked_list": ["using System.Text.Json.Serialization;\n\nnamespace BlazorApp.Models\n{\n    /// <summary>\n    /// This represents the entity for the client principal.\n    /// </summary>\n    public class ClientPrincipal\n    {\n        /// <summary>\n        /// Gets or sets the identity provider.\n        /// </summary>\n        [JsonPropertyName(\"identityProvider\")]\n        public string? IdentityProvider { get; set; }\n\n        /// <summary>\n        /// Gets or sets the user ID.\n        /// </summary>\n        [JsonPropertyName(\"userId\")]\n        public string? UserId { get; set; }\n\n        /// <summary>\n        /// Gets or sets the user details.\n        /// </summary>\n        [JsonPropertyName(\"userDetails\")]\n        public string? UserDetails { get; set; }\n\n        /// <summary>\n        /// Gets or sets the user roles.\n        /// </summary>\n        [JsonPropertyName(\"userRoles\")]\n        public IEnumerable<string>? UserRoles { get; set; }\n    }\n}"]}
{"filename": "src/BlazorApp/Pages/Index.razor.cs", "chunked_list": ["using BlazorApp.Helpers;\n\nusing Microsoft.AspNetCore.Components;\n\nnamespace BlazorApp.Pages\n{\n    /// <summary>\n    /// This represents the index page component.\n    /// </summary>\n    public partial class Index : ComponentBase\n    {\n        /// <summary>\n        /// Gets or sets the <see cref=\"IGraphHelper\"/> instance used to make requests to the Graph API.\n        /// </summary>\n        [Inject]\n        public IGraphHelper? Helper { get; set; }\n\n        /// <summary>\n        /// Gets the value indicating whether the component should be hidden or not.\n        /// </summary>", "    /// </summary>\n    public partial class Index : ComponentBase\n    {\n        /// <summary>\n        /// Gets or sets the <see cref=\"IGraphHelper\"/> instance used to make requests to the Graph API.\n        /// </summary>\n        [Inject]\n        public IGraphHelper? Helper { get; set; }\n\n        /// <summary>\n        /// Gets the value indicating whether the component should be hidden or not.\n        /// </summary>", "        protected virtual bool IsHidden { get; private set; } = true;\n\n        /// <summary>\n        /// Gets the email of the logged-in user.\n        /// </summary>\n        protected virtual string? Upn { get; private set; }\n\n        /// <summary>\n        /// Gets the display name of the logged-in user.\n        /// </summary>\n        protected virtual string? DisplayName { get; private set; }\n\n        /// <inheritdoc />", "        protected virtual string? DisplayName { get; private set; }\n\n        /// <inheritdoc />\n        protected override async Task OnInitializedAsync()\n        {\n            if (this.Helper == null)\n            {\n                throw new InvalidOperationException(\"User details have not been initialised yet\");\n            }\n\n            var loggedInUser = await this.Helper.GetLoggedInUserDetailsAsync().ConfigureAwait(false);\n\n            this.IsHidden = loggedInUser == null;\n\n            this.Upn = loggedInUser?.Upn;\n            this.DisplayName = loggedInUser?.DisplayName;\n        }\n    }\n}"]}
