{"filename": "Assets/Mochineko/WhisperAPI.Samples/PolicyFactory.cs", "chunked_list": ["#nullable enable\nusing System;\nusing Mochineko.Relent.Resilience;\nusing Mochineko.Relent.Resilience.Bulkhead;\nusing Mochineko.Relent.Resilience.Retry;\nusing Mochineko.Relent.Resilience.Timeout;\nusing Mochineko.Relent.Resilience.Wrap;\n\nnamespace Mochineko.WhisperAPI.Samples\n{\n    internal static class PolicyFactory\n    {", "namespace Mochineko.WhisperAPI.Samples\n{\n    internal static class PolicyFactory\n    {\n        private const float TotalTimeoutSeconds = 60f;\n        private const int MaxRetryCount = 10;\n        private const double ExponentialBackoffFactor = 0.1d;\n        private const double ExponentialBackoffBaseNumber = 2d;\n        private const int MaxParallelization = 1;\n\n        public static IPolicy<string> Build()\n        {\n            var totalTimeout = TimeoutFactory.Timeout<string>(\n                TimeSpan.FromSeconds(TotalTimeoutSeconds));\n\n            var retry = RetryFactory.RetryWithExponentialBackoff<string>(\n                MaxRetryCount,\n                ExponentialBackoffFactor,\n                ExponentialBackoffBaseNumber);\n\n            var bulkheadPolicy = BulkheadFactory.Bulkhead<string>(\n                MaxParallelization);\n\n            return totalTimeout\n                .Wrap(retry)\n                .Wrap(bulkheadPolicy);\n        }\n    }\n}", "        private const int MaxParallelization = 1;\n\n        public static IPolicy<string> Build()\n        {\n            var totalTimeout = TimeoutFactory.Timeout<string>(\n                TimeSpan.FromSeconds(TotalTimeoutSeconds));\n\n            var retry = RetryFactory.RetryWithExponentialBackoff<string>(\n                MaxRetryCount,\n                ExponentialBackoffFactor,\n                ExponentialBackoffBaseNumber);\n\n            var bulkheadPolicy = BulkheadFactory.Bulkhead<string>(\n                MaxParallelization);\n\n            return totalTimeout\n                .Wrap(retry)\n                .Wrap(bulkheadPolicy);\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI.Samples/TranslationSample.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing Assets.Mochineko.WhisperAPI;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.Resilience;\nusing Mochineko.Relent.UncertainResult;\nusing Unity.Logging;", "using Mochineko.Relent.UncertainResult;\nusing Unity.Logging;\nusing UnityEngine;\n\nnamespace Mochineko.WhisperAPI.Samples\n{\n    /// <summary>\n    /// A sample component to translate speech into English text by Whisper transcription API on Unity.\n    /// </summary>\n    public sealed class TranslationSample : MonoBehaviour\n    {", "    /// </summary>\n    public sealed class TranslationSample : MonoBehaviour\n    {\n        private static readonly HttpClient httpClient = new();\n\n        /// <summary>\n        /// File path of speech audio.\n        /// </summary>\n        [SerializeField] private string filePath = string.Empty;\n\n        private readonly IPolicy<string> policy = PolicyFactory.Build();\n", "        [SerializeField] private string filePath = string.Empty;\n\n        private readonly IPolicy<string> policy = PolicyFactory.Build();\n\n        private readonly TranslationRequestParameters requestParameters = new(\n            string.Empty,\n            Model.Whisper1);\n\n        [ContextMenu(nameof(Translate))]\n        public void Translate()\n        {\n            TranslateAsync(this.GetCancellationTokenOnDestroy())\n                .Forget();\n        }\n", "        public void Translate()\n        {\n            TranslateAsync(this.GetCancellationTokenOnDestroy())\n                .Forget();\n        }\n\n        private async UniTask TranslateAsync(CancellationToken cancellationToken)\n        {\n            var apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");\n            if (string.IsNullOrEmpty(apiKey)) throw new NullReferenceException(nameof(apiKey));\n\n            var absoluteFilePath = Path.Combine(\n                Application.dataPath,\n                \"..\",\n                filePath);\n\n            requestParameters.File = filePath;\n\n            Log.Debug(\"[WhisperAPI.Samples] Begin to translate.\");\n\n            // Translate speech into English text by Whisper transcription API.\n            var result = await policy\n                .ExecuteAsync(async innerCancellationToken\n                        => await TranslationAPI\n                            .TranslateFileAsync(\n                                apiKey,\n                                httpClient,\n                                absoluteFilePath,\n                                requestParameters,\n                                innerCancellationToken,\n                                true),\n                    cancellationToken);\n\n            switch (result)\n            {\n                // Success\n                case IUncertainSuccessResult<string> success:\n                {\n                    // Default text response format is JSON.\n                    var text = TranslationResponseBody.FromJson(success.Result)?.Text;\n                    Log.Debug(\"[WhisperAPI.Samples] Succeeded to translate into: {0}.\", text);\n                    break;\n                }\n                // Retryable failure\n                case IUncertainRetryableResult<string> retryable:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Retryable failed to translate because -> {0}.\", retryable.Message);\n                    break;\n                }\n                // Failure\n                case IUncertainFailureResult<string> failure:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Failed to translate because -> {0}.\", failure.Message);\n                    break;\n                }\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(result));\n            }\n        }\n    }\n}", "            if (string.IsNullOrEmpty(apiKey)) throw new NullReferenceException(nameof(apiKey));\n\n            var absoluteFilePath = Path.Combine(\n                Application.dataPath,\n                \"..\",\n                filePath);\n\n            requestParameters.File = filePath;\n\n            Log.Debug(\"[WhisperAPI.Samples] Begin to translate.\");\n\n            // Translate speech into English text by Whisper transcription API.\n            var result = await policy\n                .ExecuteAsync(async innerCancellationToken\n                        => await TranslationAPI\n                            .TranslateFileAsync(\n                                apiKey,\n                                httpClient,\n                                absoluteFilePath,\n                                requestParameters,\n                                innerCancellationToken,\n                                true),\n                    cancellationToken);\n\n            switch (result)\n            {\n                // Success\n                case IUncertainSuccessResult<string> success:\n                {\n                    // Default text response format is JSON.\n                    var text = TranslationResponseBody.FromJson(success.Result)?.Text;\n                    Log.Debug(\"[WhisperAPI.Samples] Succeeded to translate into: {0}.\", text);\n                    break;\n                }\n                // Retryable failure\n                case IUncertainRetryableResult<string> retryable:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Retryable failed to translate because -> {0}.\", retryable.Message);\n                    break;\n                }\n                // Failure\n                case IUncertainFailureResult<string> failure:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Failed to translate because -> {0}.\", failure.Message);\n                    break;\n                }\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(result));\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI.Samples/TranscriptionSample.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing Assets.Mochineko.WhisperAPI;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.Resilience;\nusing Mochineko.Relent.UncertainResult;\nusing Unity.Logging;", "using Mochineko.Relent.UncertainResult;\nusing Unity.Logging;\nusing UnityEngine;\n\nnamespace Mochineko.WhisperAPI.Samples\n{\n    /// <summary>\n    /// A sample component to transcribe speech into text by Whisper transcription API on Unity.\n    /// </summary>\n    public sealed class TranscriptionSample : MonoBehaviour\n    {", "    /// </summary>\n    public sealed class TranscriptionSample : MonoBehaviour\n    {\n        private static readonly HttpClient httpClient = new();\n\n        /// <summary>\n        /// File path of speech audio.\n        /// </summary>\n        [SerializeField] private string filePath = string.Empty;\n\n        private readonly IPolicy<string> policy = PolicyFactory.Build();\n", "        [SerializeField] private string filePath = string.Empty;\n\n        private readonly IPolicy<string> policy = PolicyFactory.Build();\n\n        private readonly TranscriptionRequestParameters requestParameters = new(\n            string.Empty,\n            Model.Whisper1);\n\n        [ContextMenu(nameof(Transcribe))]\n        public void Transcribe()\n        {\n            TranscribeAsync(this.GetCancellationTokenOnDestroy())\n                .Forget();\n        }\n", "        public void Transcribe()\n        {\n            TranscribeAsync(this.GetCancellationTokenOnDestroy())\n                .Forget();\n        }\n\n        private async UniTask TranscribeAsync(CancellationToken cancellationToken)\n        {\n            var apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");\n            if (string.IsNullOrEmpty(apiKey)) throw new NullReferenceException(nameof(apiKey));\n\n            var absoluteFilePath = Path.Combine(\n                Application.dataPath,\n                \"..\",\n                filePath);\n\n            requestParameters.File = filePath;\n\n            Log.Debug(\"[WhisperAPI.Samples] Begin to transcribe.\");\n\n            // Transcribe speech into text by Whisper transcription API.\n            var result = await policy\n                .ExecuteAsync(async innerCancellationToken\n                        => await TranscriptionAPI\n                            .TranscribeFileAsync(\n                                apiKey,\n                                httpClient,\n                                absoluteFilePath,\n                                requestParameters,\n                                innerCancellationToken,\n                                true),\n                    cancellationToken);\n\n            switch (result)\n            {\n                // Success\n                case IUncertainSuccessResult<string> success:\n                {\n                    // Default text response format is JSON.\n                    var text = TranscriptionResponseBody.FromJson(success.Result)?.Text;\n                    Log.Debug(\"[WhisperAPI.Samples] Succeeded to transcribe into: {0}.\", text);\n                    break;\n                }\n                // Retryable failure\n                case IUncertainRetryableResult<string> retryable:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Retryable failed to transcribe because -> {0}.\", retryable.Message);\n                    break;\n                }\n                // Failure\n                case IUncertainFailureResult<string> failure:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Failed to transcribe because -> {0}.\", failure.Message);\n                    break;\n                }\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(result));\n            }\n        }\n    }\n}", "            if (string.IsNullOrEmpty(apiKey)) throw new NullReferenceException(nameof(apiKey));\n\n            var absoluteFilePath = Path.Combine(\n                Application.dataPath,\n                \"..\",\n                filePath);\n\n            requestParameters.File = filePath;\n\n            Log.Debug(\"[WhisperAPI.Samples] Begin to transcribe.\");\n\n            // Transcribe speech into text by Whisper transcription API.\n            var result = await policy\n                .ExecuteAsync(async innerCancellationToken\n                        => await TranscriptionAPI\n                            .TranscribeFileAsync(\n                                apiKey,\n                                httpClient,\n                                absoluteFilePath,\n                                requestParameters,\n                                innerCancellationToken,\n                                true),\n                    cancellationToken);\n\n            switch (result)\n            {\n                // Success\n                case IUncertainSuccessResult<string> success:\n                {\n                    // Default text response format is JSON.\n                    var text = TranscriptionResponseBody.FromJson(success.Result)?.Text;\n                    Log.Debug(\"[WhisperAPI.Samples] Succeeded to transcribe into: {0}.\", text);\n                    break;\n                }\n                // Retryable failure\n                case IUncertainRetryableResult<string> retryable:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Retryable failed to transcribe because -> {0}.\", retryable.Message);\n                    break;\n                }\n                // Failure\n                case IUncertainFailureResult<string> failure:\n                {\n                    Log.Error(\"[WhisperAPI.Samples] Failed to transcribe because -> {0}.\", failure.Message);\n                    break;\n                }\n                default:\n                    throw new UncertainResultPatternMatchException(nameof(result));\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI.Tests/TranscriptionTest.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Assets.Mochineko.WhisperAPI;\nusing FluentAssertions;\nusing Mochineko.Relent.UncertainResult;\nusing NUnit.Framework;", "using Mochineko.Relent.UncertainResult;\nusing NUnit.Framework;\nusing UnityEngine;\nusing UnityEngine.TestTools;\n\nnamespace Mochineko.WhisperAPI.Tests\n{\n    [TestFixture]\n    internal sealed class TranscriptionTest\n    {\n        [Test]\n        [RequiresPlayMode(false)]", "    internal sealed class TranscriptionTest\n    {\n        [Test]\n        [RequiresPlayMode(false)]\n        public async Task Transcribe()\n        {\n            var apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");\n            if (string.IsNullOrEmpty(apiKey))\n            {\n                throw new NullReferenceException(nameof(apiKey));\n            }\n\n            var filePath = Path.Combine(\n                Application.dataPath,\n                \"Mochineko/WhisperAPI.Tests/test.wav\");\n\n            using var httpClient = new HttpClient();\n\n            var apiResult = await TranscriptionAPI\n                .TranscribeFileAsync(\n                    apiKey,\n                    httpClient,\n                    filePath,\n                    new TranscriptionRequestParameters(\n                        filePath,\n                        Model.Whisper1,\n                        temperature: 0f),\n                    CancellationToken.None,\n                    debug: false);\n\n            var result = TranscriptionResponseBody.FromJson(apiResult.Unwrap())?.Text;\n            result?.Should().Be(\"\u3068\u308a\u3042\u3048\u305a\u5e97\u306e\u524d\u3001\u6383\u9664\u3057\u3068\u3044\u3066\u304f\u308c\u3002 \u5185\u6c34\u3082\u983c\u3080\u3002\");\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI.Tests/TranslationTest.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Assets.Mochineko.WhisperAPI;\nusing FluentAssertions;\nusing Mochineko.Relent.UncertainResult;\nusing NUnit.Framework;", "using Mochineko.Relent.UncertainResult;\nusing NUnit.Framework;\nusing UnityEngine;\nusing UnityEngine.TestTools;\n\nnamespace Mochineko.WhisperAPI.Tests\n{\n    [TestFixture]\n    internal sealed class TranslationTest\n    {\n        [Test]\n        [RequiresPlayMode(false)]", "    internal sealed class TranslationTest\n    {\n        [Test]\n        [RequiresPlayMode(false)]\n        public async Task Translate()\n        {\n            var apiKey = Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\");\n            if (string.IsNullOrEmpty(apiKey)) throw new NullReferenceException(nameof(apiKey));\n\n            var filePath = Path.Combine(\n                Application.dataPath,\n                \"Mochineko/WhisperAPI.Tests/test.wav\");\n\n            using var httpClient = new HttpClient();\n\n            var apiResult = await TranslationAPI\n                .TranslateFileAsync(\n                    apiKey,\n                    httpClient,\n                    filePath,\n                    new TranslationRequestParameters(\n                        filePath,\n                        Model.Whisper1,\n                        temperature: 0f),\n                    CancellationToken.None,\n                    true);\n\n            var result = TranscriptionResponseBody.FromJson(apiResult.Unwrap())?.Text;\n            result?.Should().Be(\"Please clean up the store. Please clean up the store.\");\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI.Tests/ModelTest.cs", "chunked_list": ["#nullable enable\nusing Assets.Mochineko.WhisperAPI;\nusing FluentAssertions;\nusing NUnit.Framework;\nusing UnityEngine.TestTools;\n\nnamespace Mochineko.WhisperAPI.Tests\n{\n    [TestFixture]\n    internal sealed class ModelTest\n    {\n        [TestCase(Model.Whisper1, \"whisper-1\")]\n        [RequiresPlayMode(false)]", "    [TestFixture]\n    internal sealed class ModelTest\n    {\n        [TestCase(Model.Whisper1, \"whisper-1\")]\n        [RequiresPlayMode(false)]\n        public void Resolve(Model model, string modelText)\n        {\n            model.ToText().Should().Be(modelText);\n            modelText.ToModel().Should().Be(model);\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/ModelResolver.cs", "chunked_list": ["#nullable enable\nusing System.Collections.Generic;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    internal static class ModelResolver\n    {\n        private static readonly IReadOnlyDictionary<Model, string> Dictionary = new Dictionary<Model, string>\n        {\n            [Model.Whisper1] = \"whisper-1\",\n        };\n", "        public static Model ToModel(this string model)\n            => Dictionary.Inverse(model);\n\n        public static string ToText(this Model model)\n            => Dictionary[model];\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/RateLimitExceededResult.cs", "chunked_list": ["#nullable enable\nusing Mochineko.Relent.UncertainResult;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// A result that indicates that the rate limit of API has been exceeded.\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    public sealed class RateLimitExceededResult<T>\n        : IUncertainFailureResult<T>\n    {", "    /// <typeparam name=\"T\"></typeparam>\n    public sealed class RateLimitExceededResult<T>\n        : IUncertainFailureResult<T>\n    {\n        public bool Success => false;\n        public bool Retryable => false;\n        public bool Failure => true;\n        public string Message { get; }\n        \n        public RateLimitExceededResult(string message)\n        {\n            Message = message;\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/TranscriptionRequestParameters.cs", "chunked_list": ["#nullable enable\nusing System.IO;\nusing System.Net.Http;\nusing Unity.Logging;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// Request parameters of Whisper transcription API.\n    /// https://platform.openai.com/docs/api-reference/audio/create", "    /// Request parameters of Whisper transcription API.\n    /// https://platform.openai.com/docs/api-reference/audio/create\n    /// </summary>\n    public sealed class TranscriptionRequestParameters\n    {\n        /// <summary>\n        /// [Required] \"file\"\n        /// The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n        /// </summary>\n        public string File { get; set; }\n\n        /// <summary>\n        /// [Required] \"model\"\n        /// ID of the model to use.\n        /// Only `whisper-1` is currently available.\n        /// </summary>", "        public string File { get; set; }\n\n        /// <summary>\n        /// [Required] \"model\"\n        /// ID of the model to use.\n        /// Only `whisper-1` is currently available.\n        /// </summary>\n        public Model Model { get; }\n\n        /// <summary>\n        /// [Optional] \"prompt\"\n        /// An optional text to guide the model's style or continue a previous audio segment.\n        /// The prompt should match the audio language.\n        /// </summary>\n        public string? Prompt { get; }\n\n        /// <summary>\n        /// [Optional] \"response_format\" Defaults to json\n        /// The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.\n        /// </summary>\n        public string? ResponseFormat { get; }\n\n        /// <summary>\n        /// [Optional] \"temperature\" Defaults to 0.\n        /// The sampling temperature, between 0 and 1.\n        /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n        /// If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.\n        /// </summary>\n        public float? Temperature { get; }\n\n        /// <summary>\n        /// [Optional] \"language\"\n        /// The language of the input audio.\n        /// Supplying the input language in ISO-639-1 format will improve accuracy and latency.\n        /// See https://github.com/openai/whisper#available-models-and-languages\n        /// </summary>\n        public string? Language { get; }\n\n        public TranscriptionRequestParameters(\n            string file,\n            Model model,\n            string? prompt = null,\n            string? responseFormat = null,\n            float? temperature = null,\n            string? language = null)\n        {\n            this.File = file;\n            this.Model = model;\n            this.Prompt = prompt;\n            this.ResponseFormat = responseFormat;\n            this.Temperature = temperature;\n            this.Language = language;\n        }\n\n        internal static readonly string[] AvailableAudioFileFormats =\n        {\n            \".mp3\",\n            \".mp4\",\n            \".mpeg\",\n            \".mpga\",\n            \".m4a\",\n            \".wav\",\n            \".webm\",\n        };\n\n        internal static readonly string[] AvailableResponseFormats =\n        {\n            \"json\",\n            \"text\",\n            \"srt\",\n            \"verbose_json\",\n            \"vtt\",\n        };\n", "        public static bool IsAvailableAudioFileFormat(string filePath)\n        {\n            var extension = Path.GetExtension(filePath);\n            foreach (var available in AvailableAudioFileFormats)\n            {\n                if (extension == available)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n", "        public static bool IsAvailableResponseFormat(string responseFormat)\n        {\n            foreach (var available in AvailableResponseFormats)\n            {\n                if (responseFormat == available)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /// <summary>\n        /// Sets parameters to <see cref=\"MultipartFormDataContent\"/> with stream.\n        /// </summary>\n        /// <param name=\"content\">Target content</param>\n        /// <param name=\"fileStream\">File stream</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <exception cref=\"InvalidDataException\">Invalid parameters.</exception>", "        public void SetParameters(MultipartFormDataContent content, Stream fileStream, bool debug)\n        {\n            if (string.IsNullOrEmpty(File))\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] File text is empty.\");\n                throw new InvalidDataException(\"File text is empty.\");\n            }\n\n            if (!IsAvailableAudioFileFormat(File))\n            {\n                Log.Fatal(\n                    \"[WhisperAPI.Transcription] The file format is not available. The file format must be one of {0}\",\n                    string.Join(\", \", AvailableAudioFileFormats));\n                throw new InvalidDataException(\n                    $\"The file format is not available. The file format must be one of {string.Join(\", \", AvailableAudioFileFormats)}\");\n            }\n", "            if (!IsAvailableAudioFileFormat(File))\n            {\n                Log.Fatal(\n                    \"[WhisperAPI.Transcription] The file format is not available. The file format must be one of {0}\",\n                    string.Join(\", \", AvailableAudioFileFormats));\n                throw new InvalidDataException(\n                    $\"The file format is not available. The file format must be one of {string.Join(\", \", AvailableAudioFileFormats)}\");\n            }\n\n            if (ResponseFormat != null && !IsAvailableResponseFormat(ResponseFormat))\n            {\n                Log.Fatal(\n                    \"[WhisperAPI.Transcription] The response format is not available. The response format must be one of {0}\",\n                    string.Join(\", \", AvailableResponseFormats));\n                throw new InvalidDataException(\n                    $\"The response format is not available. The response format must be one of {string.Join(\", \", AvailableResponseFormats)}\");\n            }\n\n            content.Add(\n                content: new StreamContent(content: fileStream),\n                name: \"file\",\n                fileName: File);", "            if (ResponseFormat != null && !IsAvailableResponseFormat(ResponseFormat))\n            {\n                Log.Fatal(\n                    \"[WhisperAPI.Transcription] The response format is not available. The response format must be one of {0}\",\n                    string.Join(\", \", AvailableResponseFormats));\n                throw new InvalidDataException(\n                    $\"The response format is not available. The response format must be one of {string.Join(\", \", AvailableResponseFormats)}\");\n            }\n\n            content.Add(\n                content: new StreamContent(content: fileStream),\n                name: \"file\",\n                fileName: File);", "            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Transcription] Request parameter: file = {0},\", File);\n            }\n\n            content.Add(\n                content: new StringContent(\n                    content: Model.ToText(),\n                    encoding: System.Text.Encoding.UTF8),\n                name: \"model\");\n            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Transcription] Request parameter: model = {0},\", Model.ToText());\n            }\n", "            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Transcription] Request parameter: model = {0},\", Model.ToText());\n            }\n\n            if (Prompt != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: Prompt,\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"prompt\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Transcription] Request parameter: prompt = {0},\", Prompt);\n                }\n            }\n\n            if (ResponseFormat != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: ResponseFormat,\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"response_format\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Transcription] Request parameter: response_format = {0},\", ResponseFormat);\n                }\n            }\n\n            if (Temperature != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: Temperature.ToString(),\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"temperature\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Transcription] Request parameter: temperature = {0},\", Temperature.Value);\n                }\n            }\n\n            if (Language != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: Language,\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"language\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Transcription] Request parameter: language = {0},\", Language);\n                }\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/TranslationRequestParameters.cs", "chunked_list": ["#nullable enable\nusing System.IO;\nusing System.Net.Http;\nusing Unity.Logging;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// Request parameters of Whisper translation API.\n    /// https://platform.openai.com/docs/api-reference/audio/create", "    /// Request parameters of Whisper translation API.\n    /// https://platform.openai.com/docs/api-reference/audio/create\n    /// </summary>\n    public sealed class TranslationRequestParameters\n    {\n        /// <summary>\n        /// [Required] \"file\"\n        /// The audio file object (not file name) translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.\n        /// </summary>\n        public string File { get; set; }\n\n        /// <summary>\n        /// [Required] \"model\"\n        /// ID of the model to use.\n        /// Only whisper-1 is currently available.\n        /// </summary>", "        public string File { get; set; }\n\n        /// <summary>\n        /// [Required] \"model\"\n        /// ID of the model to use.\n        /// Only whisper-1 is currently available.\n        /// </summary>\n        public Model Model { get; }\n\n        /// <summary>\n        /// [Optional] \"prompt\"\n        /// An optional text to guide the model's style or continue a previous audio segment.\n        /// The prompt should be in English.\n        /// </summary>\n        public string? Prompt { get; }\n\n        /// <summary>\n        /// [Optional] \"response_format\" Defaults to json\n        /// The format of the translate output, in one of these options: json, text, srt, verbose_json, or vtt.\n        /// </summary>\n        public string? ResponseFormat { get; }\n\n        /// <summary>\n        /// [Optional] \"temperature\" Defaults to 1.\n        /// The sampling temperature, between 0 and 1.\n        /// Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n        /// If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.\n        /// </summary>\n        public float? Temperature { get; }\n\n        public TranslationRequestParameters(\n            string file,\n            Model model,\n            string? prompt = null,\n            string? responseFormat = null,\n            float? temperature = null)\n        {\n            this.File = file;\n            this.Model = model;\n            this.Prompt = prompt;\n            this.ResponseFormat = responseFormat;\n            this.Temperature = temperature;\n        }\n\n        internal static readonly string[] AvailableAudioFileFormats =\n        {\n            \".mp3\",\n            \".mp4\",\n            \".mpeg\",\n            \".mpga\",\n            \".m4a\",\n            \".wav\",\n            \".webm\",\n        };\n        \n        internal static readonly string[] AvailableResponseFormats =\n        {\n            \"json\",\n            \"text\",\n            \"srt\",\n            \"verbose_json\",\n            \"vtt\",\n        };\n", "        public static bool IsAvailableAudioFileFormat(string file)\n        {\n            var extension = Path.GetExtension(file);\n            foreach (var available in AvailableAudioFileFormats)\n            {\n                if (extension == available)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        ", "        public static bool IsAvailableResponseFormat(string responseFormat)\n        {\n            foreach (var available in AvailableResponseFormats)\n            {\n                if (responseFormat == available)\n                {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /// <summary>\n        /// Sets parameters to <see cref=\"MultipartFormDataContent\"/> with stream.\n        /// </summary>\n        /// <param name=\"content\">Target content</param>\n        /// <param name=\"fileStream\">File stream</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <exception cref=\"InvalidDataException\">Invalid parameters.</exception>", "        public void SetParameters(MultipartFormDataContent content, Stream fileStream, bool debug)\n        {\n            if (string.IsNullOrEmpty(File))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] File text is empty.\");\n                throw new InvalidDataException(\"File text is empty.\");\n            }\n\n            if (!IsAvailableAudioFileFormat(File))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] The file format is not available. The file format must be one of {0}\", string.Join(\", \", AvailableAudioFileFormats));\n                throw new InvalidDataException($\"The file format is not available. The file format must be one of {string.Join(\", \", AvailableAudioFileFormats)}\");\n            }\n", "            if (!IsAvailableAudioFileFormat(File))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] The file format is not available. The file format must be one of {0}\", string.Join(\", \", AvailableAudioFileFormats));\n                throw new InvalidDataException($\"The file format is not available. The file format must be one of {string.Join(\", \", AvailableAudioFileFormats)}\");\n            }\n\n            if (ResponseFormat != null && !IsAvailableResponseFormat(ResponseFormat))\n            {\n                Log.Fatal(\n                    \"[WhisperAPI.Translation] The response format is not available. The response format must be one of {0}\",\n                    string.Join(\", \", AvailableResponseFormats));\n                throw new InvalidDataException($\"The response format is not available. The response format must be one of {string.Join(\", \", AvailableResponseFormats)}\");\n            }\n            \n            content.Add(\n                content: new StreamContent(content: fileStream),\n                name: \"file\",\n                fileName: File);", "            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Translation] Request parameter: file = {0},\", File);\n            }\n\n            content.Add(\n                content: new StringContent(\n                    content: Model.ToText(),\n                    encoding: System.Text.Encoding.UTF8),\n                name: \"model\");\n            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Translation] Request parameter: model = {0},\", Model.ToText());\n            }\n", "            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Translation] Request parameter: model = {0},\", Model.ToText());\n            }\n\n            if (Prompt != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: Prompt,\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"prompt\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Translation] Request parameter: prompt = {0},\", Prompt);\n                }\n            }\n\n            if (ResponseFormat != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: ResponseFormat,\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"response_format\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Translation] Request parameter: response_format = {0},\", ResponseFormat);\n                }\n            }\n\n            if (Temperature != null)\n            {\n                content.Add(\n                    content: new StringContent(\n                        content: Temperature.ToString(),\n                        encoding: System.Text.Encoding.UTF8),\n                    name: \"temperature\");", "                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Translation] Request parameter: temperature = {0},\", Temperature.Value);\n                }\n            }\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/TranslationAPI.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.UncertainResult;\nusing Unity.Logging;\n", "using Unity.Logging;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// OpenAI Whisper translation API.\n    /// Document: https://platform.openai.com/docs/guides/speech-to-text\n    /// API reference: https://platform.openai.com/docs/api-reference/audio/create\n    /// </summary>\n    public static class TranslationAPI\n    {", "    /// </summary>\n    public static class TranslationAPI\n    {\n        private const string EndPoint = \"https://api.openai.com/v1/audio/translations\";\n\n        /// <summary>\n        /// Translates speech audio into English text by Whisper translation API.\n        /// https://platform.openai.com/docs/api-reference/audio/create\n        /// </summary>\n        /// <param name=\"apiKey\">OpenAI API key.</param>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\" /> instance.</param>\n        /// <param name=\"fileStream\">Speech audio file stream.</param>\n        /// <param name=\"parameters\">API request parameters.</param>\n        /// <param name=\"cancellationToken\">Operation cancellation token.</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <returns>Response text that is specified format by request body (Default is JSON).</returns>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"apiKey\" /> must not be null.</exception>\n        /// <exception cref=\"InvalidOperationException\"><paramref name=\"fileStream\" /> must be readable.</exception>\n        /// <exception cref=\"InvalidDataException\">Invalid request parameters.</exception>\n        /// <exception cref=\"UncertainResultPatternMatchException\">Library bad implementation.</exception>", "        public static async UniTask<IUncertainResult<string>> TranslateAsync(\n            string apiKey,\n            HttpClient httpClient,\n            Stream fileStream,\n            TranslationRequestParameters parameters,\n            CancellationToken cancellationToken,\n            bool debug = false)\n        {\n            // Validate\n            if (string.IsNullOrEmpty(apiKey))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] OpenAI API key is empty.\");\n                throw new ArgumentNullException(nameof(apiKey));\n            }\n", "            if (string.IsNullOrEmpty(apiKey))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] OpenAI API key is empty.\");\n                throw new ArgumentNullException(nameof(apiKey));\n            }\n\n            if (!fileStream.CanRead)\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] File stream is not readable.\");\n                throw new InvalidOperationException(\"File stream is not readable.\");\n            }\n", "            if (cancellationToken.IsCancellationRequested)\n            {\n                Log.Error(\"[WhisperAPI.Translation] Already cancelled.\");\n                return UncertainResults.RetryWithTrace<string>(\"Already cancelled.\");\n            }\n\n            // Create request\n            var requestMessage = new HttpRequestMessage(HttpMethod.Post, EndPoint);\n\n            requestMessage\n                .Headers\n                .Add(\"Authorization\", $\"Bearer {apiKey}\");\n\n            var requestContent = new MultipartFormDataContent();\n            parameters.SetParameters(requestContent, fileStream, debug);\n            requestMessage.Content = requestContent;\n\n            // Run request on a thread pool\n            await UniTask.SwitchToThreadPool();\n\n            // Send request\n            HttpResponseMessage responseMessage;\n            var apiResult = await UncertainTryFactory\n                .TryAsync<HttpResponseMessage>(async innerCancellationToken\n                    => await httpClient.SendAsync(requestMessage, innerCancellationToken))\n                .CatchAsRetryable<HttpResponseMessage, HttpRequestException>(exception\n                    => $\"Retryable due to request exception -> {exception}.\")\n                .CatchAsRetryable<HttpResponseMessage, OperationCanceledException>(exception\n                    => $\"Retryable due to cancellation exception -> {exception}.\")\n                .CatchAsFailure<HttpResponseMessage, Exception>(exception\n                    => $\"Failure due to unhandled -> {exception}.\")\n                .Finalize(() =>\n                {\n                    requestMessage.Dispose();\n                    return UniTask.CompletedTask;\n                })\n                .ExecuteAsync(cancellationToken);\n\n            await UniTask.SwitchToMainThread();\n\n            switch (apiResult)\n            {\n                case IUncertainSuccessResult<HttpResponseMessage> apiSuccess:", "                    if (debug)\n                    {\n                        Log.Debug(\"[WhisperAPI.Translation] Success to send request.\");\n                    }\n\n                    responseMessage = apiSuccess.Result;\n                    break;\n\n                case IUncertainRetryableResult<HttpResponseMessage> apiRetryable:\n                    Log.Error(\"[WhisperAPI.Translation] Retryable to send request due to {0}.\",\n                        apiRetryable.Message);\n                    return UncertainResults.RetryWithTrace<string>(apiRetryable.Message);\n\n                case IUncertainFailureResult<HttpResponseMessage> apiFailure:\n                    Log.Error(\"[WhisperAPI.Translation] Failure to send request due to {0}.\", apiFailure.Message);\n                    return UncertainResults.FailWithTrace<string>(apiFailure.Message);\n\n                default:\n                    Log.Fatal(\"[WhisperAPI.Translation] Not found uncertain result implementation.\");\n                    throw new UncertainResultPatternMatchException(nameof(apiResult));\n            }\n\n            // Dispose response message when out of scope\n            using var _ = responseMessage;\n", "            if (responseMessage.Content == null)\n            {\n                Log.Error(\"[WhisperAPI.Translation] Response content is null.\");\n                return UncertainResults.FailWithTrace<string>(\n                    \"Response content is null.\");\n            }\n\n            var responseText = await responseMessage.Content.ReadAsStringAsync();\n            if (string.IsNullOrEmpty(responseText))\n            {\n                Log.Error(\"[WhisperAPI.Translation] Response body is empty.\");\n                return UncertainResults.FailWithTrace<string>(\n                    \"Response body is empty.\");\n            }\n", "            if (string.IsNullOrEmpty(responseText))\n            {\n                Log.Error(\"[WhisperAPI.Translation] Response body is empty.\");\n                return UncertainResults.FailWithTrace<string>(\n                    \"Response body is empty.\");\n            }\n\n            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Translation] Response content with status code:({0}){1}, response:\\n{2}\",\n                    (int)responseMessage.StatusCode,\n                    responseMessage.StatusCode,\n                    responseText);\n            }\n\n            // Success", "            if (responseMessage.IsSuccessStatusCode)\n            {\n                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Translation] Success to translate: {0}.\", responseText);\n                }\n\n                // Text format is determined by request parameter:\"response_format\",\n                // then return raw response text.\n                return UncertainResults.Succeed(responseText);\n            }\n            // Rate limit exceeded", "            if (responseMessage.StatusCode is HttpStatusCode.TooManyRequests)\n            {\n                Log.Error(\n                    \"[WhisperAPI.Translation] Retryable because the API has exceeded rate limit with status code:({0}){1}, error response:{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return new RateLimitExceededResult<string>(\n                    $\"Retryable because the API has exceeded rate limit with status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:{responseText}.\");\n            }\n            // Retryable\n            if ((int)responseMessage.StatusCode is >= 500 and <= 599)\n            {\n                Log.Error(\n                    \"[WhisperAPI.Translation] Retryable because the API returned status code:({0}){1}, error response:{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.RetryWithTrace<string>(\n                    $\"Retryable because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:{responseText}.\");\n            }\n            // Response error\n            else\n            {\n                Log.Error(\n                    \"[WhisperAPI.Translation] Failed because the API returned status code:({0}){1}, error response:{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.FailWithTrace<string>(\n                    $\"Failed because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:{responseText}.\"\n                );\n            }\n        }\n\n        /// <summary>\n        ///     Translates speech audio into English text from file by Whisper translation API.\n        ///     https://platform.openai.com/docs/api-reference/audio/create\n        /// </summary>\n        /// <param name=\"apiKey\">OpenAI API key.</param>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\" /> instance.</param>\n        /// <param name=\"filePath\">Speech audio file path.</param>\n        /// <param name=\"parameters\">API request parameters.</param>\n        /// <param name=\"cancellationToken\">Operation cancellation token.</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <returns>Response text that is specified format by request body (Default is JSON).</returns>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"filePath\" /> must not be empty.</exception>\n        /// <exception cref=\"FileNotFoundException\"><paramref name=\"filePath\" /> is not found.</exception>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"apiKey\" /> must not be empty.</exception>\n        /// <exception cref=\"InvalidDataException\">Invalid request parameters.</exception>\n        /// <exception cref=\"UncertainResultPatternMatchException\">Library bad implementation.</exception>", "            if ((int)responseMessage.StatusCode is >= 500 and <= 599)\n            {\n                Log.Error(\n                    \"[WhisperAPI.Translation] Retryable because the API returned status code:({0}){1}, error response:{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.RetryWithTrace<string>(\n                    $\"Retryable because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:{responseText}.\");\n            }\n            // Response error\n            else\n            {\n                Log.Error(\n                    \"[WhisperAPI.Translation] Failed because the API returned status code:({0}){1}, error response:{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.FailWithTrace<string>(\n                    $\"Failed because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:{responseText}.\"\n                );\n            }\n        }\n\n        /// <summary>\n        ///     Translates speech audio into English text from file by Whisper translation API.\n        ///     https://platform.openai.com/docs/api-reference/audio/create\n        /// </summary>\n        /// <param name=\"apiKey\">OpenAI API key.</param>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\" /> instance.</param>\n        /// <param name=\"filePath\">Speech audio file path.</param>\n        /// <param name=\"parameters\">API request parameters.</param>\n        /// <param name=\"cancellationToken\">Operation cancellation token.</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <returns>Response text that is specified format by request body (Default is JSON).</returns>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"filePath\" /> must not be empty.</exception>\n        /// <exception cref=\"FileNotFoundException\"><paramref name=\"filePath\" /> is not found.</exception>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"apiKey\" /> must not be empty.</exception>\n        /// <exception cref=\"InvalidDataException\">Invalid request parameters.</exception>\n        /// <exception cref=\"UncertainResultPatternMatchException\">Library bad implementation.</exception>", "        public static async UniTask<IUncertainResult<string>> TranslateFileAsync(\n            string apiKey,\n            HttpClient httpClient,\n            string filePath,\n            TranslationRequestParameters parameters,\n            CancellationToken cancellationToken,\n            bool debug = false)\n        {\n            if (string.IsNullOrEmpty(filePath))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] File path is empty.\");\n                throw new ArgumentNullException(nameof(filePath));\n            }\n", "            if (string.IsNullOrEmpty(filePath))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] File path is empty.\");\n                throw new ArgumentNullException(nameof(filePath));\n            }\n\n            if (!File.Exists(filePath))\n            {\n                Log.Fatal(\"[WhisperAPI.Translation] File is not found at {0}.\", filePath);\n                throw new FileNotFoundException(filePath);\n            }\n\n            await using var fileStream = File.OpenRead(filePath);\n\n            return await TranslateAsync(\n                apiKey,\n                httpClient,\n                fileStream,\n                parameters,\n                cancellationToken,\n                debug);\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/TranscriptionAPI.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing Cysharp.Threading.Tasks;\nusing Mochineko.Relent.UncertainResult;\nusing Unity.Logging;\n", "using Unity.Logging;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// OpenAI Whisper transcription API.\n    /// Document: https://platform.openai.com/docs/guides/speech-to-text\n    /// API reference: https://platform.openai.com/docs/api-reference/audio/create\n    /// </summary>\n    public static class TranscriptionAPI\n    {", "    /// </summary>\n    public static class TranscriptionAPI\n    {\n        private const string EndPoint = \"https://api.openai.com/v1/audio/transcriptions\";\n\n        /// <summary>\n        /// Transcribes speech audio into text by Whisper transcription API.\n        /// https://platform.openai.com/docs/api-reference/audio/create\n        /// </summary>\n        /// <param name=\"apiKey\">OpenAI API key.</param>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\" /> instance.</param>\n        /// <param name=\"fileStream\">Speech audio file stream.</param>\n        /// <param name=\"parameters\">API request parameters.</param>\n        /// <param name=\"cancellationToken\">Operation cancellation token.</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <returns>Response text that is specified format by request body (Default is JSON).</returns>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"apiKey\" /> must not be null.</exception>\n        /// <exception cref=\"InvalidOperationException\"><paramref name=\"fileStream\" /> must be readable.</exception>\n        /// <exception cref=\"InvalidDataException\">Invalid request parameters.</exception>\n        /// <exception cref=\"UncertainResultPatternMatchException\">Library bad implementation.</exception>", "        public static async UniTask<IUncertainResult<string>> TranscribeAsync(\n            string apiKey,\n            HttpClient httpClient,\n            Stream fileStream,\n            TranscriptionRequestParameters parameters,\n            CancellationToken cancellationToken,\n            bool debug = false)\n        {\n            // Validate\n            if (string.IsNullOrEmpty(apiKey))\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] OpenAI API key is empty.\");\n                throw new ArgumentNullException(nameof(apiKey));\n            }\n", "            if (string.IsNullOrEmpty(apiKey))\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] OpenAI API key is empty.\");\n                throw new ArgumentNullException(nameof(apiKey));\n            }\n\n            if (!fileStream.CanRead)\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] File stream is not readable.\");\n                throw new InvalidOperationException(\"File stream is not readable.\");\n            }\n", "            if (cancellationToken.IsCancellationRequested)\n            {\n                Log.Error(\"[WhisperAPI.Transcription] Already cancelled.\");\n                return UncertainResults.RetryWithTrace<string>(\"Already cancelled.\");\n            }\n\n            // Create request\n            var requestMessage = new HttpRequestMessage(HttpMethod.Post, EndPoint);\n\n            requestMessage\n                .Headers\n                .Add(\"Authorization\", $\"Bearer {apiKey}\");\n\n            var requestContent = new MultipartFormDataContent();\n            parameters.SetParameters(requestContent, fileStream, debug);\n            requestMessage.Content = requestContent;\n\n            // Run request on a thread pool\n            await UniTask.SwitchToThreadPool();\n\n            // Send request\n            HttpResponseMessage responseMessage;\n            var apiResult = await UncertainTryFactory\n                .TryAsync<HttpResponseMessage>(async innerCancellationToken\n                    => await httpClient.SendAsync(requestMessage, innerCancellationToken))\n                .CatchAsRetryable<HttpResponseMessage, HttpRequestException>(exception\n                    => $\"Retryable due to request exception -> {exception}.\")\n                .CatchAsRetryable<HttpResponseMessage, OperationCanceledException>(exception\n                    => $\"Retryable due to cancellation exception -> {exception}.\")\n                .CatchAsFailure<HttpResponseMessage, Exception>(exception\n                    => $\"Failure due to unhandled -> {exception}.\")\n                .Finalize(() =>\n                {\n                    requestMessage.Dispose();\n                    return UniTask.CompletedTask;\n                })\n                .ExecuteAsync(cancellationToken);\n\n            await UniTask.SwitchToMainThread();\n\n            switch (apiResult)\n            {\n                case IUncertainSuccessResult<HttpResponseMessage> apiSuccess:", "                    if (debug)\n                    {\n                        Log.Debug(\"[WhisperAPI.Transcription] Success to send request.\");\n                    }\n\n                    responseMessage = apiSuccess.Result;\n                    break;\n\n                case IUncertainRetryableResult<HttpResponseMessage> apiRetryable:\n                    Log.Error(\"[WhisperAPI.Transcription] Retryable to send request due to {0}\",\n                        apiRetryable.Message);\n                    return UncertainResults.RetryWithTrace<string>(apiRetryable.Message);\n\n                case IUncertainFailureResult<HttpResponseMessage> apiFailure:\n                    Log.Error(\"[WhisperAPI.Transcription] Failure to send request due to {0}\", apiFailure.Message);\n                    return UncertainResults.FailWithTrace<string>(apiFailure.Message);\n\n                default:\n                    Log.Fatal(\"[WhisperAPI.Transcription] Not found uncertain result implementation.\");\n                    throw new UncertainResultPatternMatchException(nameof(apiResult));\n            }\n\n            // Dispose response message when out of scope\n            using var _ = responseMessage;\n\n            // Read response content", "            if (responseMessage.Content == null)\n            {\n                Log.Error(\"[WhisperAPI.Transcription] Response content is null.\");\n                return UncertainResults.FailWithTrace<string>(\n                    \"Response content is null.\");\n            }\n\n            var responseText = await responseMessage.Content.ReadAsStringAsync();\n            if (string.IsNullOrEmpty(responseText))\n            {\n                Log.Error(\"[WhisperAPI.Transcription] Response body is empty.\");\n                return UncertainResults.FailWithTrace<string>(\n                    \"Response body is empty.\");\n            }\n", "            if (string.IsNullOrEmpty(responseText))\n            {\n                Log.Error(\"[WhisperAPI.Transcription] Response body is empty.\");\n                return UncertainResults.FailWithTrace<string>(\n                    \"Response body is empty.\");\n            }\n\n            if (debug)\n            {\n                Log.Debug(\"[WhisperAPI.Transcription] Response content with status code:({0}){1}, response:\\n{2}\",\n                    (int)responseMessage.StatusCode,\n                    responseMessage.StatusCode,\n                    responseText);\n            }\n\n            // Success", "            if (responseMessage.IsSuccessStatusCode)\n            {\n                if (debug)\n                {\n                    Log.Debug(\"[WhisperAPI.Transcription] Succeed:\\n{0}.\", responseText);\n                }\n\n                // Text format is determined by request parameter:\"response_format\",\n                // then return raw response text.\n                return UncertainResults.Succeed(responseText);\n            }\n            // Rate limit exceeded\n", "            if (responseMessage.StatusCode is HttpStatusCode.TooManyRequests)\n            {\n                Log.Error(\n                    \"[WhisperAPI.Transcription] Retryable because the API has exceeded rate limit with status code:({0}){1}, error response:\\n{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return new RateLimitExceededResult<string>(\n                    $\"Retryable because the API has exceeded rate limit with status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:\\n{responseText}.\");\n            }\n            // Retryable\n            if ((int)responseMessage.StatusCode is >= 500 and <= 599)\n            {\n                Log.Error(\n                    \"[WhisperAPI.Transcription] Retryable because the API returned status code:({0}){1}, error response:\\n{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.RetryWithTrace<string>(\n                    $\"Retryable because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:\\n{responseText}.\");\n            }\n            // Response error\n            else\n            {\n                Log.Error(\n                    \"[WhisperAPI.Transcription] Failed because the API returned status code:({0}){1}, error response:\\n{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.FailWithTrace<string>(\n                    $\"Failed because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:\\n{responseText}.\"\n                );\n            }\n        }\n\n        /// <summary>\n        /// Transcribes speech audio into text from file by Whisper transcription API.\n        /// https://platform.openai.com/docs/api-reference/audio/create\n        /// </summary>\n        /// <param name=\"apiKey\">OpenAI API key.</param>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\" /> instance.</param>\n        /// <param name=\"filePath\">Speech audio file path.</param>\n        /// <param name=\"parameters\">API request parameters.</param>\n        /// <param name=\"cancellationToken\">Operation cancellation token.</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <returns>Response text that is specified format by request body (Default is JSON).</returns>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"filePath\" /> must not be empty.</exception>\n        /// <exception cref=\"FileNotFoundException\"><paramref name=\"filePath\" /> is not found.</exception>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"apiKey\" /> must not be empty.</exception>\n        /// <exception cref=\"InvalidDataException\">Invalid request parameters.</exception>\n        /// <exception cref=\"UncertainResultPatternMatchException\">Library bad implementation.</exception>", "            if ((int)responseMessage.StatusCode is >= 500 and <= 599)\n            {\n                Log.Error(\n                    \"[WhisperAPI.Transcription] Retryable because the API returned status code:({0}){1}, error response:\\n{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.RetryWithTrace<string>(\n                    $\"Retryable because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:\\n{responseText}.\");\n            }\n            // Response error\n            else\n            {\n                Log.Error(\n                    \"[WhisperAPI.Transcription] Failed because the API returned status code:({0}){1}, error response:\\n{2}.\",\n                    (int)responseMessage.StatusCode, responseMessage.StatusCode, responseText);\n\n                return UncertainResults.FailWithTrace<string>(\n                    $\"Failed because the API returned status code:({(int)responseMessage.StatusCode}){responseMessage.StatusCode}, error response:\\n{responseText}.\"\n                );\n            }\n        }\n\n        /// <summary>\n        /// Transcribes speech audio into text from file by Whisper transcription API.\n        /// https://platform.openai.com/docs/api-reference/audio/create\n        /// </summary>\n        /// <param name=\"apiKey\">OpenAI API key.</param>\n        /// <param name=\"httpClient\"><see cref=\"HttpClient\" /> instance.</param>\n        /// <param name=\"filePath\">Speech audio file path.</param>\n        /// <param name=\"parameters\">API request parameters.</param>\n        /// <param name=\"cancellationToken\">Operation cancellation token.</param>\n        /// <param name=\"debug\">Log debug information.</param>\n        /// <returns>Response text that is specified format by request body (Default is JSON).</returns>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"filePath\" /> must not be empty.</exception>\n        /// <exception cref=\"FileNotFoundException\"><paramref name=\"filePath\" /> is not found.</exception>\n        /// <exception cref=\"ArgumentNullException\"><paramref name=\"apiKey\" /> must not be empty.</exception>\n        /// <exception cref=\"InvalidDataException\">Invalid request parameters.</exception>\n        /// <exception cref=\"UncertainResultPatternMatchException\">Library bad implementation.</exception>", "        public static async UniTask<IUncertainResult<string>> TranscribeFileAsync(\n            string apiKey,\n            HttpClient httpClient,\n            string filePath,\n            TranscriptionRequestParameters parameters,\n            CancellationToken cancellationToken,\n            bool debug = false)\n        {\n            if (string.IsNullOrEmpty(filePath))\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] File path is empty.\");\n                throw new ArgumentNullException(nameof(filePath));\n            }\n", "            if (string.IsNullOrEmpty(filePath))\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] File path is empty.\");\n                throw new ArgumentNullException(nameof(filePath));\n            }\n\n            if (!File.Exists(filePath))\n            {\n                Log.Fatal(\"[WhisperAPI.Transcription] File is not found at {0}\", filePath);\n                throw new FileNotFoundException(filePath);\n            }\n\n            await using var fileStream = File.OpenRead(filePath);\n\n            return await TranscribeAsync(\n                apiKey,\n                httpClient,\n                fileStream,\n                parameters,\n                cancellationToken,\n                debug);\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/Model.cs", "chunked_list": ["#nullable enable\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// Speech recognition model.\n    /// </summary>\n    public enum Model\n    {\n        /// <summary>\n        /// \"whisper-1\"\n        /// </summary>\n        Whisper1,\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/TranslationResponseBody.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// Response body of translation when specifying JSON format.\n    /// </summary>\n    [JsonObject]\n    public sealed class TranslationResponseBody\n    {\n        [JsonProperty(\"text\"), JsonRequired]", "    [JsonObject]\n    public sealed class TranslationResponseBody\n    {\n        [JsonProperty(\"text\"), JsonRequired]\n        public string Text { get; private set; } = string.Empty;\n\n        public string ToJson()\n            => JsonConvert.SerializeObject(this, Formatting.Indented);\n\n        public static TranslationResponseBody? FromJson(string json)\n            => JsonConvert.DeserializeObject<TranslationResponseBody>(json, new JsonSerializerSettings());\n    }\n}", "        public static TranslationResponseBody? FromJson(string json)\n            => JsonConvert.DeserializeObject<TranslationResponseBody>(json, new JsonSerializerSettings());\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/AssemblyInfo.cs", "chunked_list": ["using System.Runtime.CompilerServices;\n\n[assembly: InternalsVisibleTo(\"Mochineko.WhisperAPI.Tests\")]"]}
{"filename": "Assets/Mochineko/WhisperAPI/InverseDictionaryExtension.cs", "chunked_list": ["#nullable enable\nusing System;\nusing System.Collections.Generic;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    internal static class InverseDictionaryExtension\n    {\n        public static T Inverse<T>(this IReadOnlyDictionary<T, string> dictionary, string key)\n            where T : Enum\n        {", "        public static T Inverse<T>(this IReadOnlyDictionary<T, string> dictionary, string key)\n            where T : Enum\n        {\n            foreach (var pair in dictionary)\n            {\n                if (pair.Value == key)\n                {\n                    return pair.Key;\n                }\n            }\n\n            throw new KeyNotFoundException(key);\n        }\n    }\n}"]}
{"filename": "Assets/Mochineko/WhisperAPI/TranscriptionResponseBody.cs", "chunked_list": ["#nullable enable\nusing Newtonsoft.Json;\n\nnamespace Assets.Mochineko.WhisperAPI\n{\n    /// <summary>\n    /// Response body of transcription when specifying JSON format.\n    /// </summary>\n    [JsonObject]\n    public sealed class TranscriptionResponseBody\n    {\n        [JsonProperty(\"text\"), JsonRequired]", "    [JsonObject]\n    public sealed class TranscriptionResponseBody\n    {\n        [JsonProperty(\"text\"), JsonRequired]\n        public string Text { get; private set; } = string.Empty;\n\n        public string ToJson()\n            => JsonConvert.SerializeObject(this, Formatting.Indented);\n\n        public static TranscriptionResponseBody? FromJson(string json)\n            => JsonConvert.DeserializeObject<TranscriptionResponseBody>(json, new JsonSerializerSettings());\n    }\n}", "        public static TranscriptionResponseBody? FromJson(string json)\n            => JsonConvert.DeserializeObject<TranscriptionResponseBody>(json, new JsonSerializerSettings());\n    }\n}"]}
