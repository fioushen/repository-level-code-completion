{"filename": "CalloutInterfaceAPI/Functions.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Drawing;\n    using System.Linq;\n    using System.Runtime.CompilerServices;\n    using Rage.Native;\n\n    /// <summary>", "\n    /// <summary>\n    /// Miscellanous helper functions.\n    /// </summary>\n    public static class Functions\n    {\n        /// <summary>\n        /// Indicates whether the Callout Interface is available.\n        /// </summary>\n        public static readonly bool IsCalloutInterfaceAvailable;\n", "        public static readonly bool IsCalloutInterfaceAvailable;\n\n        private static readonly List<ColorCondition> ColorTable;\n        private static DateTime lastDateTime;\n        private static DateTime nextDateTime;\n\n        static Functions()\n        {\n            IsCalloutInterfaceAvailable = LSPD_First_Response.Mod.API.Functions.GetAllUserPlugins()\n                .Any(x => x.GetName().Name.Equals(\"CalloutInterface\") && x.GetName().Version.CompareTo(new Version(\"1.4.0.0\")) >= 0);\n\n            ColorTable = new List<ColorCondition>()\n            {\n                new ColorCondition((h, s, b) => b < 0.1f, \"Black\"),\n                new ColorCondition((h, s, b) => s < 0.1f && b > 0.9f, \"White\"),\n                new ColorCondition((h, s, b) => s < 0.1f, \"Gray\"),\n                new ColorCondition((h, s, b) => (h < 30 || h >= 330) && s > 0.5 && s < 0.9 && b > 0.5 && b < 0.9, \"Pink\"),\n                new ColorCondition((h, s, b) => h < 30 || h >= 330, \"Red\"),\n                new ColorCondition((h, s, b) => h < 90 && s > 0.6 && b < 0.2, \"Brown\"),\n                new ColorCondition((h, s, b) => h < 90 && s < 0.4 && b > 0.5 && b < 0.8, \"Orange\"),\n                new ColorCondition((h, s, b) => h < 90 && s < 0.4 && b > 0.8, \"Tan\"),\n                new ColorCondition((h, s, b) => h < 90, \"Yellow\"),\n                new ColorCondition((h, s, b) => h < 150 && b < 0.5 && s < 0.6, \"Olive\"),\n                new ColorCondition((h, s, b) => h < 150, \"Green\"),\n                new ColorCondition((h, s, b) => h < 210, \"Cyan\"),\n                new ColorCondition((h, s, b) => h < 270, \"Blue\"),\n                new ColorCondition((h, s, b) => h < 330, \"Purple\"),\n            };\n\n            lastDateTime = DateTime.Today + Rage.World.TimeOfDay;\n            nextDateTime = lastDateTime;\n        }\n\n        /// <summary>", "        /// Converts a Color struct into a readable name.  Kinda.  I did my best.\n        /// </summary>\n        /// <param name=\"color\">The color.</param>\n        /// <returns>A name of the color that is reasonably accurate.</returns>\n        [MethodImpl(MethodImplOptions.NoInlining)]\n        public static string GetColorName(Color color)\n        {\n            var h = color.GetHue();\n            var s = color.GetSaturation();\n            var b = color.GetBrightness();\n            foreach (var condition in ColorTable)\n            {", "            foreach (var condition in ColorTable)\n            {\n                if (condition.Condition(h, s, b))\n                {\n                    return condition.ColorName;\n                }\n            }\n\n            return \"Unknown\";\n        }\n\n        /// <summary>\n        /// Gets a consistent date time.\n        /// </summary>\n        /// <returns>A DateTime object that syncs with the in-game time of day and the current date.</returns>\n        [MethodImpl(MethodImplOptions.NoInlining)]", "        public static DateTime GetDateTime()\n        {\n            nextDateTime = lastDateTime.Date + Rage.World.TimeOfDay;\n            if (nextDateTime < lastDateTime)\n            {\n                nextDateTime += TimeSpan.FromDays(1.0);\n            }\n\n            lastDateTime = nextDateTime;\n            return nextDateTime;\n        }\n\n        /// <summary>\n        /// Sends a message to the Callout Interface.  Does not support color codes but it does support newlines (\\n).\n        /// If CalloutInterface is not available, does nothing.\n        /// </summary>\n        /// <param name=\"callout\">The callout associated with the message.</param>\n        /// <param name=\"message\">The message to send.</param>\n        [MethodImpl(MethodImplOptions.NoInlining)]", "        public static void SendMessage(LSPD_First_Response.Mod.Callouts.Callout callout, string message)\n        {\n            if (IsCalloutInterfaceAvailable)\n            {\n                External.CalloutInterfaceInvoker.SendMessage(callout, message);\n            }\n        }\n\n        /// <summary>\n        /// Sends a vehicle for the external (non-MDT) plate display.\n        /// If CalloutInterface is not available, does nothing.\n        /// </summary>\n        /// <param name=\"vehicle\">The targeted vehicle.</param>\n        [MethodImpl(MethodImplOptions.NoInlining)]", "        public static void SendVehicle(Rage.Vehicle vehicle)\n        {\n            if (vehicle && IsCalloutInterfaceAvailable)\n            {\n                External.CalloutInterfaceInvoker.SendVehicle(vehicle);\n            }\n        }\n\n        /// <summary>\n        /// Retrieves the make of a vehicle.\n        /// </summary>\n        /// <param name=\"hash\">The vehicle's model hash.</param>\n        /// <returns>A string representing the vehicle's make.</returns>\n        internal static string GetVehicleMake(uint hash)\n        {\n            try\n            {\n                var make = Rage.Game.GetLocalizedString(NativeFunction.Natives.GET_MAKE_NAME_FROM_VEHICLE_MODEL<string>(hash));", "                if (!string.IsNullOrEmpty(make))\n                {\n                    return make;\n                }\n            }\n            catch\n            {\n            }\n\n            return \"unknown\";\n        }\n\n        /// <summary>\n        /// Retrieves the model of a vehicle.\n        /// </summary>\n        /// <param name=\"hash\">The vehicle's model hash.</param>\n        /// <returns>A string representing the vehicle's model.</returns>\n        internal static string GetVehicleModel(uint hash)\n        {\n            try\n            {\n                var model = Rage.Game.GetLocalizedString(NativeFunction.Natives.GET_DISPLAY_NAME_FROM_VEHICLE_MODEL<string>(hash));", "                if (!string.IsNullOrEmpty(model))\n                {\n                    return model;\n                }\n            }\n            catch\n            {\n            }\n\n            return \"unknown\";\n        }\n\n        /// <summary>\n        /// Represents a potential color combination based on HSB.\n        /// </summary>", "        internal class ColorCondition\n        {\n            /// <summary>\n            /// Initializes a new instance of the <see cref=\"ColorCondition\"/> class.\n            /// </summary>\n            /// <param name=\"condition\">The condition for which the color applies.</param>\n            /// <param name=\"colorName\">The name of the relevant color.</param>\n            public ColorCondition(Func<float, float, float, bool> condition, string colorName)\n            {\n                this.Condition = condition;\n                this.ColorName = colorName;\n            }\n\n            /// <summary>\n            /// Gets the condition.\n            /// </summary>\n            public Func<float, float, float, bool> Condition { get; }\n\n            /// <summary>\n            /// Gets the color name.\n            /// </summary>", "            public string ColorName { get; }\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Enums.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI\n{\n    /// <summary>\n    /// The type of vehicle document a policeman might be interested in.\n    /// </summary>\n    public enum VehicleDocument\n    {\n        Insurance,\n        Registration,\n    }\n\n    /// <summary>", "    /// Replaces StopThePed's VehicleStatus enum for safety.\n    /// </summary>\n    public enum VehicleDocumentStatus\n    {\n        Expired,\n        None,\n        Unknown,\n        Valid,\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/RandomNumberGenerator.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI\n{\n    /// <summary>\n    /// A helper class for generating random numbers.\n    /// </summary>\n    internal static class RandomNumberGenerator\n    {\n        private static readonly System.Random Random = new System.Random();\n\n        /// <summary>\n        /// Gets the next random number.\n        /// </summary>\n        /// <param name=\"minValue\">The beginning of the range (inclusive).</param>\n        /// <param name=\"maxValue\">The end of the range (exclusive).</param>\n        /// <returns>A random number.</returns>", "        public static int Next(int minValue, int maxValue)\n        {\n            return Random.Next(minValue, maxValue);\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/CalloutInterfaceAttribute.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI\n{\n    using LSPD_First_Response.Mod.Callouts;\n\n    /// <summary>\n    /// Represents an attribute that provides information about a callout for the Callout Interface.\n    /// </summary>\n    public class CalloutInterfaceAttribute : CalloutInfoAttribute\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"CalloutInterfaceAttribute\"/> class with the specified name, probability, description, priority, and agency.\n        /// </summary>\n        /// <param name=\"name\">The name of the callout.</param>\n        /// <param name=\"probability\">The probability of the callout being triggered.</param>\n        /// <param name=\"description\">The description of the callout.</param>\n        /// <param name=\"priority\">The priority of the callout (optional).</param>\n        /// <param name=\"agency\">The agency associated with the callout (optional).</param>\n        public CalloutInterfaceAttribute(string name, CalloutProbability probability, string description, string priority = \"\", string agency = \"\")\n            : base(name, probability)\n        {\n            this.Agency = agency;\n            this.Description = description;\n            this.Priority = priority;\n        }\n\n        /// <summary>\n        /// Gets the agency associated with the callout (e.g. LSSD, LSPD).\n        /// </summary>", "        /// Initializes a new instance of the <see cref=\"CalloutInterfaceAttribute\"/> class with the specified name, probability, description, priority, and agency.\n        /// </summary>\n        /// <param name=\"name\">The name of the callout.</param>\n        /// <param name=\"probability\">The probability of the callout being triggered.</param>\n        /// <param name=\"description\">The description of the callout.</param>\n        /// <param name=\"priority\">The priority of the callout (optional).</param>\n        /// <param name=\"agency\">The agency associated with the callout (optional).</param>\n        public CalloutInterfaceAttribute(string name, CalloutProbability probability, string description, string priority = \"\", string agency = \"\")\n            : base(name, probability)\n        {\n            this.Agency = agency;\n            this.Description = description;\n            this.Priority = priority;\n        }\n\n        /// <summary>\n        /// Gets the agency associated with the callout (e.g. LSSD, LSPD).\n        /// </summary>", "        public string Agency { get; private set; }\n\n        /// <summary>\n        /// Gets the description of the callout.  This is used by Callout Interface to list the callout on the callouts tab.\n        /// </summary>\n        public string Description { get; private set; }\n\n        /// <summary>\n        /// Gets the priority of the callout (e.g. CODE 2, CODE 3).\n        /// </summary>\n        public string Priority { get; private set; }\n    }\n}\n", "        public string Priority { get; private set; }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Events.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI\n{\n    using CalloutInterfaceAPI.Records;\n\n    /// <summary>\n    /// Callout Interface Helper events.\n    /// </summary>\n    public class Events\n    {\n        /// <summary>\n        /// The event handler delegate for OnPedCheck.\n        /// </summary>\n        /// <param name=\"record\">The resulting record.</param>\n        /// <param name=\"source\">The source of the request.</param>", "        /// The event handler delegate for OnPedCheck.\n        /// </summary>\n        /// <param name=\"record\">The resulting record.</param>\n        /// <param name=\"source\">The source of the request.</param>\n        public delegate void PedCheckEventHandler(PedRecord record, string source);\n\n        /// <summary>\n        /// The event handler delegate for OnPlateCheck.\n        /// </summary>\n        /// <param name=\"record\">The resulting record.</param>\n        /// <param name=\"source\">The source of the request.</param>", "        public delegate void PlateCheckEventHandler(VehicleRecord record, string source);\n\n        /// <summary>\n        /// An event for a ped record.\n        /// </summary>\n        public static event PedCheckEventHandler OnPedCheck;\n\n        /// <summary>\n        /// An event for a vehicle record\n        /// </summary>\n        public static event PlateCheckEventHandler OnPlateCheck;\n\n        /// <summary>\n        /// Raises a ped check event.\n        /// </summary>\n        /// <param name=\"record\">The result of the ped check.</param>\n        /// <param name=\"source\">The source of the request.</param>\n        internal static void RaisePedCheckEvent(PedRecord record, string source)\n        {\n            OnPedCheck?.Invoke(record, source);\n        }\n\n        /// <summary>\n        /// Raises a plate check event.\n        /// </summary>\n        /// <param name=\"record\">The result of the plate check.</param>\n        /// <param name=\"source\">The source of the request.</param>\n        internal static void RaisePlateCheckEvent(VehicleRecord record, string source)\n        {\n            OnPlateCheck?.Invoke(record, source);\n        }\n    }\n}\n", "        public static event PlateCheckEventHandler OnPlateCheck;\n\n        /// <summary>\n        /// Raises a ped check event.\n        /// </summary>\n        /// <param name=\"record\">The result of the ped check.</param>\n        /// <param name=\"source\">The source of the request.</param>\n        internal static void RaisePedCheckEvent(PedRecord record, string source)\n        {\n            OnPedCheck?.Invoke(record, source);\n        }\n\n        /// <summary>\n        /// Raises a plate check event.\n        /// </summary>\n        /// <param name=\"record\">The result of the plate check.</param>\n        /// <param name=\"source\">The source of the request.</param>\n        internal static void RaisePlateCheckEvent(VehicleRecord record, string source)\n        {\n            OnPlateCheck?.Invoke(record, source);\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/VehicleDatabase.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using System;\n    using System.Collections.Generic;\n    using CalloutInterfaceAPI.External;\n\n    /// <summary>\n    /// Represents a database of vehicle records.\n    /// </summary>\n    internal class VehicleDatabase : RecordDatabase<Rage.Vehicle, VehicleRecord>\n    {", "    /// </summary>\n    internal class VehicleDatabase : RecordDatabase<Rage.Vehicle, VehicleRecord>\n    {\n        private int invalidDocumentCount = 0;\n\n        /// <summary>\n        /// Gets or sets the maximum invalid document rate.\n        /// </summary>\n        internal float MaxInvalidDocumentRate { get; set; } = 0.05f;\n\n        /// <inheritdoc />\n        internal override void Prune(int minutes)\n        {\n            Rage.Game.LogTrivial($\"CalloutInterfaceAPI pruning vehicle data older than {minutes} minute(s)\");\n            Rage.Game.LogTrivial($\"  total entries    : {this.Entities.Count}\");\n            Rage.Game.LogTrivial($\"  invalid documents: {this.invalidDocumentCount}\");\n\n            var deadKeys = new List<Rage.PoolHandle>();\n            var threshold = DateTime.Now - TimeSpan.FromMinutes(minutes);", "            foreach (var pair in this.Entities)\n            {\n                var record = pair.Value;\n                if (!record.Entity || record.CreationDateTime < threshold)\n                {\n                    deadKeys.Add(pair.Key);\n                    this.invalidDocumentCount -= (record.InsuranceStatus != VehicleDocumentStatus.Valid || record.RegistrationStatus != VehicleDocumentStatus.Valid) ? 1 : 0;\n                }\n            }\n\n            foreach (var key in deadKeys)\n            {\n                this.Entities.Remove(key);\n            }\n\n            Rage.Game.LogTrivial($\"  entries removed  : {deadKeys.Count}\");\n        }\n\n        /// <summary>\n        /// Creates a database record.\n        /// </summary>\n        /// <param name=\"vehicle\">The underlying vehicle.</param>\n        /// <returns>The database record based on the vehicle.</returns>", "            foreach (var key in deadKeys)\n            {\n                this.Entities.Remove(key);\n            }\n\n            Rage.Game.LogTrivial($\"  entries removed  : {deadKeys.Count}\");\n        }\n\n        /// <summary>\n        /// Creates a database record.\n        /// </summary>\n        /// <param name=\"vehicle\">The underlying vehicle.</param>\n        /// <returns>The database record based on the vehicle.</returns>", "        protected override VehicleRecord CreateRecord(Rage.Vehicle vehicle)\n        {\n            var record = new VehicleRecord(vehicle);\n            if (vehicle)\n            {\n                record.Class = vehicle.Class.ToString();\n                record.Color = Functions.GetColorName(vehicle.PrimaryColor);\n                record.InsuranceStatus = this.GetDocumentStatus(vehicle, VehicleDocument.Insurance);\n                record.LicensePlate = vehicle.LicensePlate;\n                record.LicensePlateStyle = vehicle.LicensePlateStyle;\n                record.Make = Functions.GetVehicleMake(vehicle.Model.Hash);\n                record.Model = Functions.GetVehicleModel(vehicle.Model.Hash);\n                record.OwnerName = LSPD_First_Response.Mod.API.Functions.GetVehicleOwnerName(vehicle);\n                record.OwnerPersona = Computer.GetOwnerPersona(vehicle);\n                record.RegistrationStatus = this.GetDocumentStatus(vehicle, VehicleDocument.Registration);\n            }\n\n            this.invalidDocumentCount += (record.InsuranceStatus != VehicleDocumentStatus.Valid || record.RegistrationStatus != VehicleDocumentStatus.Valid) ? 1 : 0;\n            return record;\n        }\n\n        /// <summary>\n        /// Gets a vehicle registration status.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle to look up.</param>\n        /// <param name=\"document\">The type of vehicle document.</param>\n        /// <returns>The status.</returns>", "        private VehicleDocumentStatus GetDocumentStatus(Rage.Vehicle vehicle, VehicleDocument document)\n        {\n            if (!vehicle)\n            {\n                return VehicleDocumentStatus.Valid;\n            }\n\n            bool invalidDocumentRateExceeded = this.Entities.Count > 0 && (float)this.invalidDocumentCount / this.Entities.Count > this.MaxInvalidDocumentRate;\n            var status = StopThePedFunctions.GetVehicleDocumentStatus(vehicle, document);\n            if (status != VehicleDocumentStatus.Unknown)\n            {", "            if (status != VehicleDocumentStatus.Unknown)\n            {\n                if (status != VehicleDocumentStatus.Valid && invalidDocumentRateExceeded)\n                {\n                    status = VehicleDocumentStatus.Valid;\n                    StopThePedFunctions.SetVehicleDocumentStatus(vehicle, document, status);\n                }\n\n                return status;\n            }\n", "            if (!invalidDocumentRateExceeded)\n            {\n                int random = RandomNumberGenerator.Next(0, 20);\n                if (random == 7 || random == 12)\n                {\n                    return VehicleDocumentStatus.Expired;\n                }\n                else if (random == 10)\n                {\n                    return VehicleDocumentStatus.None;\n                }\n            }\n\n            return VehicleDocumentStatus.Valid;\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/Computer.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using LSPD_First_Response.Engine.Scripting.Entities;\n\n    /// <summary>\n    /// The police computer.\n    /// </summary>\n    public static class Computer\n    {\n        private static readonly PedDatabase PedDatabase = new PedDatabase();\n        private static readonly VehicleDatabase VehicleDatabase = new VehicleDatabase();\n\n        /// <summary>\n        /// Retrieves a ped record without doing an official ped check.\n        /// </summary>\n        /// <param name=\"ped\">Rage.Ped ped.</param>\n        /// <returns>The ped record.</returns>", "        private static readonly PedDatabase PedDatabase = new PedDatabase();\n        private static readonly VehicleDatabase VehicleDatabase = new VehicleDatabase();\n\n        /// <summary>\n        /// Retrieves a ped record without doing an official ped check.\n        /// </summary>\n        /// <param name=\"ped\">Rage.Ped ped.</param>\n        /// <returns>The ped record.</returns>\n        public static PedRecord GetPedRecord(Rage.Ped ped)\n        {\n            return PedDatabase.GetRecord(ped);\n        }\n\n        /// <summary>\n        /// Retrieves a vehicle record without doing an official plate check.\n        /// </summary>\n        /// <param name=\"vehicle\">Rage.Vehicle vehicle.</param>\n        /// <returns>The vehicle record.</returns>", "        public static PedRecord GetPedRecord(Rage.Ped ped)\n        {\n            return PedDatabase.GetRecord(ped);\n        }\n\n        /// <summary>\n        /// Retrieves a vehicle record without doing an official plate check.\n        /// </summary>\n        /// <param name=\"vehicle\">Rage.Vehicle vehicle.</param>\n        /// <returns>The vehicle record.</returns>\n        public static VehicleRecord GetVehicleRecord(Rage.Vehicle vehicle)\n        {\n            return VehicleDatabase.GetRecord(vehicle);\n        }\n\n        /// <summary>\n        /// Runs a ped check.\n        /// </summary>\n        /// <param name=\"ped\">The ped to run a ped check against.</param>\n        /// <param name=\"source\">Some identifier to include so we know where the ped check request came from.</param>", "        public static VehicleRecord GetVehicleRecord(Rage.Vehicle vehicle)\n        {\n            return VehicleDatabase.GetRecord(vehicle);\n        }\n\n        /// <summary>\n        /// Runs a ped check.\n        /// </summary>\n        /// <param name=\"ped\">The ped to run a ped check against.</param>\n        /// <param name=\"source\">Some identifier to include so we know where the ped check request came from.</param>\n        public static void PedCheck(Rage.Ped ped, string source)\n        {", "        public static void PedCheck(Rage.Ped ped, string source)\n        {\n            if (ped)\n            {\n                var record = PedDatabase.GetRecord(ped);\n                Events.RaisePedCheckEvent(record, source);\n            }\n        }\n\n        /// <summary>\n        /// Runs a plate check.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle to run the plate check against.</param>\n        /// <param name=\"source\">Some identifier to include so we know where the plate check request came from.</param>", "        public static void PlateCheck(Rage.Vehicle vehicle, string source)\n        {\n            if (vehicle)\n            {\n                Functions.SendVehicle(vehicle);\n                var record = VehicleDatabase.GetRecord(vehicle);\n                Events.RaisePlateCheckEvent(record, source);\n            }\n        }\n\n        /// <summary>\n        /// Gets the persona for the driver of a vehicle if available.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle.</param>\n        /// <returns>The persona, or null.</returns>\n        internal static Persona GetDriverPersona(Rage.Vehicle vehicle)\n        {", "            if (vehicle && vehicle.HasDriver && vehicle.Driver)\n            {\n                return PedDatabase.GetRecord(vehicle.Driver).Persona;\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Gets the Ped Persona for the owner of the vehicle.\n        /// NOTE: There isn't always a matching persona in the game.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle being looked up.</param>\n        /// <returns>The relevant persona if available.</returns>\n        internal static Persona GetOwnerPersona(Rage.Vehicle vehicle)\n        {", "            if (!vehicle)\n            {\n                return null;\n            }\n\n            var name = LSPD_First_Response.Mod.API.Functions.GetVehicleOwnerName(vehicle);\n            var driver = GetDriverPersona(vehicle);\n            if (driver != null && string.Compare(driver.FullName, name, true) == 0)\n            {\n                return driver;\n            }\n", "            foreach (var ped in Rage.Game.LocalPlayer.Character.GetNearbyPeds(16))\n            {\n                var persona = PedDatabase.GetRecord(ped).Persona;\n                if (persona != null && string.Compare(persona.FullName, name, true) == 0)\n                {\n                    return persona;\n                }\n            }\n\n            return null;\n        }\n\n        /// <summary>\n        /// Prunes the databases completely.\n        /// </summary>\n        internal static void PurgeAll()\n        {\n            PedDatabase.Prune(0);\n            VehicleDatabase.Prune(0);\n        }\n\n        /// <summary>\n        /// Sets the rate at which documents should return as invalid.\n        /// </summary>\n        /// <param name=\"rate\">The rate as a value from 0-1f.</param>\n        internal static void SetMaxInvalidDocumentRate(float rate)\n        {\n            VehicleDatabase.MaxInvalidDocumentRate = rate;\n        }\n\n        /// <summary>\n        /// Sets the rate at which licenses should return as invalid.\n        /// </summary>\n        /// <param name=\"rate\">The rate as a value from 0-1f.</param>\n        internal static void SetMaxInvalidLicenseRate(float rate)\n        {\n            PedDatabase.MaxInvalidLicenseRate = rate;\n        }\n\n        /// <summary>\n        /// Sets the rate at which persons should come back wanted.\n        /// </summary>\n        /// <param name=\"rate\">The rate as a value from 0-1f.</param>\n        internal static void SetMaxWantedRate(float rate)\n        {\n            PedDatabase.MaxWantedRate = rate;\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/VehicleRecord.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using LSPD_First_Response.Engine.Scripting.Entities;\n\n    /// <summary>\n    /// Represents a vehicle record looked up on the computer.\n    /// </summary>\n    public class VehicleRecord : EntityRecord<Rage.Vehicle>\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"VehicleRecord\"/> class.\n        /// </summary>\n        /// <param name=\"vehicle\">The Rage.Vehicle to base the record on.</param>\n        public VehicleRecord(Rage.Vehicle vehicle)\n            : base(vehicle)\n        {\n        }\n\n        /// <summary>\n        /// Gets the vehicle's class.\n        /// </summary>", "        public string Class { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle's color.\n        /// </summary>\n        public string Color { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle insurance status.\n        /// </summary>\n        public VehicleDocumentStatus InsuranceStatus { get; internal set; } = VehicleDocumentStatus.Valid;\n\n        /// <summary>\n        /// Gets the vehicle's license plate.\n        /// </summary>", "        public VehicleDocumentStatus InsuranceStatus { get; internal set; } = VehicleDocumentStatus.Valid;\n\n        /// <summary>\n        /// Gets the vehicle's license plate.\n        /// </summary>\n        public string LicensePlate { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle's license plate style.\n        /// </summary>\n        public Rage.LicensePlateStyle LicensePlateStyle { get; internal set; } = Rage.LicensePlateStyle.BlueOnWhite1;\n\n        /// <summary>\n        /// Gets the vehicle's make.\n        /// </summary>", "        public string Make { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle's model.\n        /// </summary>\n        public string Model { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle's owner.\n        /// </summary>\n        public string OwnerName { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle owner's persona.\n        /// </summary>", "        public string OwnerName { get; internal set; } = \"Unknown\";\n\n        /// <summary>\n        /// Gets the vehicle owner's persona.\n        /// </summary>\n        public Persona OwnerPersona { get; internal set; } = null;\n\n        /// <summary>\n        /// Gets the vehicle registration status.\n        /// </summary>\n        public VehicleDocumentStatus RegistrationStatus { get; internal set; } = VehicleDocumentStatus.Valid;\n    }\n}\n", "        public VehicleDocumentStatus RegistrationStatus { get; internal set; } = VehicleDocumentStatus.Valid;\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/RecordDatabase.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using System.Collections.Generic;\n    using System.Diagnostics;\n\n    /// <summary>\n    /// Represents a database of records.\n    /// </summary>\n    /// <typeparam name=\"TEntity\">The type of Rage.Entity.</typeparam>\n    /// <typeparam name=\"TRecord\">The type of EntityRecord.</typeparam>\n    internal abstract class RecordDatabase<TEntity, TRecord>\n        where TEntity : Rage.Entity\n        where TRecord : EntityRecord<TEntity>\n    {", "    /// <typeparam name=\"TEntity\">The type of Rage.Entity.</typeparam>\n    /// <typeparam name=\"TRecord\">The type of EntityRecord.</typeparam>\n    internal abstract class RecordDatabase<TEntity, TRecord>\n        where TEntity : Rage.Entity\n        where TRecord : EntityRecord<TEntity>\n    {\n        private readonly Stopwatch pruneTimer;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"RecordDatabase{TEntity, TRecord}\"/> class.\n        /// </summary>\n        protected RecordDatabase()\n        {\n            this.pruneTimer = Stopwatch.StartNew();\n        }\n\n        /// <summary>\n        /// Gets or sets a value indicating how long (in minutes) we should wait before automatically pruning records.\n        /// </summary>\n        internal int PruneInterval { get; set; } = 15;\n\n        /// <summary>\n        /// Gets a dictionary of entity records with the entity's (hopefully unique) pool handle as key.\n        /// </summary>\n        protected Dictionary<Rage.PoolHandle, TRecord> Entities { get; } = new Dictionary<Rage.PoolHandle, TRecord>();\n\n        /// <summary>\n        /// Gets a record from the database based on the given entity.\n        /// </summary>\n        /// <param name=\"entity\">The entity.</param>\n        /// <returns>The relevant record.</returns>", "        public TRecord GetRecord(TEntity entity)\n        {\n            if (this.pruneTimer.Elapsed.TotalMinutes > this.PruneInterval)\n            {\n                this.Prune(this.PruneInterval * 2);\n                this.pruneTimer.Restart();\n            }\n\n            TRecord record = null;\n            if (entity)\n            {", "            if (entity)\n            {\n                if (this.Entities.ContainsKey(entity.Handle))\n                {\n                    record = this.Entities[entity.Handle];\n                }\n                else\n                {\n                    record = this.CreateRecord(entity);\n                    this.Entities[entity.Handle] = record;\n                }\n            }\n\n            return record;\n        }\n\n        /// <summary>\n        /// Prunes the database of records.\n        /// </summary>\n        /// <param name=\"minutes\">The maximum age of records in minutes.</param>\n        internal abstract void Prune(int minutes);\n\n        /// <summary>\n        /// Creates a new record based on the entity.\n        /// </summary>\n        /// <param name=\"entity\">The entity from which to create the record.</param>\n        /// <returns>The new record.</returns>", "        protected abstract TRecord CreateRecord(TEntity entity);\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/PedRecord.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using System;\n    using LSPD_First_Response.Engine.Scripting.Entities;\n\n    /// <summary>\n    /// Represents a ped record.\n    /// </summary>\n    public class PedRecord : EntityRecord<Rage.Ped>\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"PedRecord\"/> class.\n        /// </summary>\n        /// <param name=\"ped\">The underlying ped.</param>\n        public PedRecord(Rage.Ped ped)\n            : base(ped)\n        {\n        }\n\n        /// <summary>\n        /// Gets the advisory text.\n        /// </summary>", "    public class PedRecord : EntityRecord<Rage.Ped>\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"PedRecord\"/> class.\n        /// </summary>\n        /// <param name=\"ped\">The underlying ped.</param>\n        public PedRecord(Rage.Ped ped)\n            : base(ped)\n        {\n        }\n\n        /// <summary>\n        /// Gets the advisory text.\n        /// </summary>", "        public string Advisory { get; internal set; } = string.Empty;\n\n        /// <summary>\n        /// Gets the ped's birthday.\n        /// </summary>\n        public DateTime Birthday { get; internal set; } = DateTime.MinValue;\n\n        /// <summary>\n        /// Gets the number of citations.\n        /// </summary>\n        public int Citations { get; internal set; } = 0;\n\n        /// <summary>\n        /// Gets the ped's first name.\n        /// </summary>", "        public int Citations { get; internal set; } = 0;\n\n        /// <summary>\n        /// Gets the ped's first name.\n        /// </summary>\n        public string First { get; internal set; } = \"John\";\n\n        /// <summary>\n        /// Gets a value indicating whether or not the ped is male.\n        /// </summary>\n        public bool IsMale { get; internal set; } = true;\n\n        /// <summary>\n        /// Gets a value indicating whether or not the ped is wanted.\n        /// </summary>", "        public bool IsMale { get; internal set; } = true;\n\n        /// <summary>\n        /// Gets a value indicating whether or not the ped is wanted.\n        /// </summary>\n        public bool IsWanted { get; internal set; } = false;\n\n        /// <summary>\n        /// Gets the peds last name.\n        /// </summary>\n        public string Last { get; internal set; } = \"Doe\";\n\n        /// <summary>\n        /// Gets the license state.\n        /// </summary>", "        public string Last { get; internal set; } = \"Doe\";\n\n        /// <summary>\n        /// Gets the license state.\n        /// </summary>\n        public ELicenseState LicenseState { get; internal set; } = ELicenseState.Valid;\n\n        /// <summary>\n        /// Gets the persona for the Ped.\n        /// </summary>\n        public Persona Persona { get; internal set; } = null;\n    }\n}\n", "        public Persona Persona { get; internal set; } = null;\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/PedDatabase.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using System;\n    using System.Collections.Generic;\n    using LSPD_First_Response.Engine.Scripting.Entities;\n\n    /// <summary>\n    /// Represents a database of ped records.\n    /// </summary>\n    internal class PedDatabase : RecordDatabase<Rage.Ped, PedRecord>\n    {", "    /// </summary>\n    internal class PedDatabase : RecordDatabase<Rage.Ped, PedRecord>\n    {\n        private int invalidLicenseCount = 0;\n        private int wantedCount = 0;\n\n        /// <summary>\n        /// Gets or sets the max invalid license rate.\n        /// </summary>\n        internal float MaxInvalidLicenseRate { get; set; } = 0.05f;\n\n        /// <summary>\n        /// Gets or sets the max wanted rate.\n        /// </summary>\n        internal float MaxWantedRate { get; set; } = 0.01f;\n\n        /// <inheritdoc />\n        internal override void Prune(int minutes)\n        {\n            Rage.Game.LogTrivial($\"CalloutInterfaceAPI pruning ped data older than {minutes} minute(s)\");\n            Rage.Game.LogTrivial($\"  total entries: {this.Entities.Count}\");\n            Rage.Game.LogTrivial($\"  invalid licenses: {this.invalidLicenseCount}\");\n            Rage.Game.LogTrivial($\"  wanted count    : {this.wantedCount}\");\n\n            var deadKeys = new List<Rage.PoolHandle>();\n            var threshold = DateTime.Now - TimeSpan.FromMinutes(minutes);", "            foreach (var pair in this.Entities)\n            {\n                var record = pair.Value;\n                if (!record.Entity || record.CreationDateTime < threshold)\n                {\n                    deadKeys.Add(pair.Key);\n                    this.invalidLicenseCount -= (record.LicenseState == ELicenseState.Expired || record.LicenseState == ELicenseState.Suspended) ? 1 : 0;\n                    this.wantedCount -= record.IsWanted ? 1 : 0;\n                }\n            }\n", "            foreach (var key in deadKeys)\n            {\n                this.Entities.Remove(key);\n            }\n\n            Rage.Game.LogTrivial($\"  entries removed : {deadKeys.Count}\");\n        }\n\n        /// <inheritdoc />\n        protected override PedRecord CreateRecord(Rage.Ped ped)\n        {\n            var record = new PedRecord(ped);", "        protected override PedRecord CreateRecord(Rage.Ped ped)\n        {\n            var record = new PedRecord(ped);\n            if (ped)\n            {\n                record.IsMale = ped.IsMale;\n                var persona = this.GetPersona(ped);\n                if (persona != null)\n                {\n                    record.Advisory = persona.AdvisoryText;\n                    record.Birthday = persona.Birthday;\n                    record.Citations = persona.Citations;\n                    record.First = persona.Forename;\n                    record.IsWanted = persona.Wanted;\n                    record.Last = persona.Surname;\n                    record.LicenseState = persona.ELicenseState;\n                    record.Persona = persona;\n                }\n            }\n\n            this.invalidLicenseCount += (record.LicenseState == ELicenseState.Expired || record.LicenseState == ELicenseState.Suspended) ? 1 : 0;\n            this.wantedCount += record.IsWanted ? 1 : 0;\n            return record;\n        }\n", "        private Persona GetPersona(Rage.Ped ped)\n        {\n            var persona = LSPD_First_Response.Mod.API.Functions.GetPersonaForPed(ped);\n            if (persona != null)\n            {\n                bool isPersonaChanged = false;\n                if (persona.Wanted && this.Entities.Count > 0 && (float)this.wantedCount / this.Entities.Count > this.MaxWantedRate)\n                {\n                    persona.Wanted = false;\n                    isPersonaChanged = true;\n                }\n", "                if (persona.ELicenseState == ELicenseState.Expired || persona.ELicenseState == ELicenseState.Suspended)\n                {\n                    if (this.Entities.Count > 0 && (float)this.invalidLicenseCount / this.Entities.Count > this.MaxInvalidLicenseRate)\n                    {\n                        persona.ELicenseState = ELicenseState.Valid;\n                        isPersonaChanged = true;\n                    }\n                }\n\n                if (isPersonaChanged)\n                {\n                    try\n                    {\n                        LSPD_First_Response.Mod.API.Functions.SetPersonaForPed(ped, persona);\n                    }", "                if (isPersonaChanged)\n                {\n                    try\n                    {\n                        LSPD_First_Response.Mod.API.Functions.SetPersonaForPed(ped, persona);\n                    }\n                    catch (Exception ex)\n                    {\n                        Rage.Game.LogTrivial($\"CalloutInterfaceAPI encountered an error while setting a persona: {ex.Message}\");\n                    }\n                }\n            }\n\n            return persona;\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/Records/EntityRecord.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.Records\n{\n    using System;\n\n    /// <summary>\n    /// Represents a single entity.\n    /// </summary>\n    /// <typeparam name=\"TEntity\">The type of entity for the record.</typeparam>\n    public abstract class EntityRecord<TEntity>\n        where TEntity : Rage.Entity\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"EntityRecord{TEntity}\"/> class.\n        /// </summary>\n        /// <param name=\"entity\">The underlying entity for the record.</param>\n        protected EntityRecord(TEntity entity)\n        {\n            this.Entity = entity;\n            this.CreationDateTime = DateTime.Now;\n        }\n\n        /// <summary>\n        /// Gets or sets the underlying entity for the record.\n        /// </summary>", "    public abstract class EntityRecord<TEntity>\n        where TEntity : Rage.Entity\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"EntityRecord{TEntity}\"/> class.\n        /// </summary>\n        /// <param name=\"entity\">The underlying entity for the record.</param>\n        protected EntityRecord(TEntity entity)\n        {\n            this.Entity = entity;\n            this.CreationDateTime = DateTime.Now;\n        }\n\n        /// <summary>\n        /// Gets or sets the underlying entity for the record.\n        /// </summary>", "        public TEntity Entity { get; protected set; }\n\n        /// <summary>\n        /// Gets or sets the real world DateTime for when the record was created.\n        /// </summary>\n        public DateTime CreationDateTime { get; protected set; }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/External/StopThePedFunctions.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.External\n{\n    using System.Linq;\n    using System.Runtime.CompilerServices;\n\n    /// <summary>\n    /// Safe interface to StopThePed functions.\n    /// </summary>\n    internal static class StopThePedFunctions\n    {\n        /// <summary>\n        /// Indicates whether the Callout Interface is available.\n        /// </summary>", "    internal static class StopThePedFunctions\n    {\n        /// <summary>\n        /// Indicates whether the Callout Interface is available.\n        /// </summary>\n        public static readonly bool IsStopThePedAvailable;\n\n        static StopThePedFunctions()\n        {\n            IsStopThePedAvailable = LSPD_First_Response.Mod.API.Functions.GetAllUserPlugins()\n                .Any(x => x.GetName().Name.Equals(\"StopThePed\"));\n        }\n\n        /// <summary>\n        /// Gets the vehicle's document status from StopThePed.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle.</param>\n        /// <param name=\"document\">The type of document.</param>\n        /// <returns>The relevant status if it's available.</returns>\n        [MethodImpl(MethodImplOptions.NoInlining)]", "        public static VehicleDocumentStatus GetVehicleDocumentStatus(Rage.Vehicle vehicle, VehicleDocument document)\n        {\n            if (IsStopThePedAvailable)\n            {\n                return StopThePedInvoker.GetVehicleDocumentStatus(vehicle, document);\n            }\n\n            return VehicleDocumentStatus.Unknown;\n        }\n\n        /// <summary>\n        /// Sets the vehicle document status in StopThePed.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle.</param>\n        /// <param name=\"document\">Type of document.</param>\n        /// <param name=\"status\">The status.</param>\n        [MethodImpl(MethodImplOptions.NoInlining)]", "        public static void SetVehicleDocumentStatus(Rage.Vehicle vehicle, VehicleDocument document, VehicleDocumentStatus status)\n        {\n            if (IsStopThePedAvailable)\n            {\n                StopThePedInvoker.SetVehicleDocumentStatus(vehicle, document, status);\n            }\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/External/CalloutInterfaceInvoker.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.External\n{\n    /// <summary>\n    /// Functions for interacting with CalloutInterface.  Calling these when CalloutInteface is unavailable will cause a crash.\n    /// </summary>\n    internal static class CalloutInterfaceInvoker\n    {\n        /// <summary>\n        /// Sends the callout details to the Callout Interface.\n        /// </summary>\n        /// <param name=\"callout\">The callout to send the details for.</param>\n        /// <param name=\"priority\">The priority of the callout.</param>\n        /// <param name=\"agency\">The agency associated with the callout.</param>\n        internal static void SendCalloutDetails(LSPD_First_Response.Mod.Callouts.Callout callout, string priority, string agency)\n        {\n            CalloutInterface.API.Functions.SendCalloutDetails(callout, priority, agency);\n        }\n\n        /// <summary>\n        /// Sends a message to the Callout Interface.\n        /// </summary>\n        /// <param name=\"callout\">The callout associated with the message.</param>\n        /// <param name=\"message\">The message to send.</param>\n        internal static void SendMessage(LSPD_First_Response.Mod.Callouts.Callout callout, string message)\n        {\n            CalloutInterface.API.Functions.SendMessage(callout, message);\n        }\n\n        /// <summary>\n        /// Sends a vehicle for the plate display.\n        /// </summary>\n        /// <param name=\"vehicle\">The targeted vehicle.</param>\n        internal static void SendVehicle(Rage.Vehicle vehicle)\n        {\n            CalloutInterface.API.Functions.SendVehicle(vehicle);\n        }\n    }\n}\n"]}
{"filename": "CalloutInterfaceAPI/External/StopThePedInvoker.cs", "chunked_list": ["\ufeffnamespace CalloutInterfaceAPI.External\n{\n    /// <summary>\n    /// Functions for interacting with StopThePed.  Calling this when StopThePed is unavailable will cause a crash.\n    /// </summary>\n    internal static class StopThePedInvoker\n    {\n        /// <summary>\n        /// Gets the vehicle's document status from StopThePed.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle.</param>\n        /// <param name=\"document\">The type of document.</param>\n        /// <returns>The relevant status if it's available.</returns>\n        internal static VehicleDocumentStatus GetVehicleDocumentStatus(Rage.Vehicle vehicle, VehicleDocument document)\n        {", "            if (vehicle)\n            {\n                var status = document == VehicleDocument.Insurance ? StopThePed.API.Functions.getVehicleInsuranceStatus(vehicle) : StopThePed.API.Functions.getVehicleRegistrationStatus(vehicle);\n                switch (status)\n                {\n                    case StopThePed.API.STPVehicleStatus.Expired:\n                        return VehicleDocumentStatus.Expired;\n                    case StopThePed.API.STPVehicleStatus.None:\n                        return VehicleDocumentStatus.None;\n                    case StopThePed.API.STPVehicleStatus.Valid:\n                        return VehicleDocumentStatus.Valid;\n                }\n            }\n\n            return VehicleDocumentStatus.Unknown;\n        }\n\n        /// <summary>\n        /// Sets the vehicle's document status in StopThePed.\n        /// </summary>\n        /// <param name=\"vehicle\">The vehicle.</param>\n        /// <param name=\"document\">The type of document.</param>\n        /// <param name=\"status\">The document status.</param>\n        internal static void SetVehicleDocumentStatus(Rage.Vehicle vehicle, VehicleDocument document, VehicleDocumentStatus status)\n        {", "            if (vehicle)\n            {\n                var stpStatus = status == VehicleDocumentStatus.Expired ? StopThePed.API.STPVehicleStatus.Expired : (status == VehicleDocumentStatus.None ? StopThePed.API.STPVehicleStatus.None : StopThePed.API.STPVehicleStatus.Valid);\n                if (document == VehicleDocument.Insurance)\n                {\n                    StopThePed.API.Functions.setVehicleInsuranceStatus(vehicle, stpStatus);\n                }\n                else if (document == VehicleDocument.Registration)\n                {\n                    StopThePed.API.Functions.setVehicleRegistrationStatus(vehicle, stpStatus);\n                }\n            }\n        }\n    }\n}\n"]}
