{"filename": "NodeBot/Program.cs", "chunked_list": ["\ufeffusing ConsoleInteractive;\nusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.BTD6;\nusing NodeBot.Command;\nusing NodeBot.github;\n\nnamespace NodeBot.Test\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string ip = Console.ReadLine()!;\n            Console.Clear();\n            ConsoleWriter.Init();\n            NodeBot nodeBot = new(ip);\n            nodeBot.RegisterCommand(new Echo());\n            nodeBot.RegisterCommand(new AtAll());\n            nodeBot.RegisterCommand(new Op());\n            nodeBot.RegisterCommand(new github.GithubCommand());\n            nodeBot.RegisterCommand(new Git_Subscribe());\n            nodeBot.RegisterCommand(new Stop());\n            nodeBot.RegisterCommand(new BTD6_RoundCheck());\n            WebhookService webhookService = WebhookService.Instance;\n            WebhookService.MessageEvent += (_, e) =>\n            {\n                //nodeBot.session.SendPrivateMessage(1306334428, new(new CqTextMsg(e.Message)));\n            };\n            nodeBot.RegisterService(webhookService);\n            nodeBot.LoadPermission();\n            nodeBot.Start();\n            CancellationTokenSource cts = new CancellationTokenSource();\n\n            ConsoleReader.MessageReceived += (sender, s) => {\n                nodeBot.CallConsoleInputEvent(s);\n            };\n            ConsoleReader.BeginReadThread(cts.Token);\n        }\n    }\n}", "{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string ip = Console.ReadLine()!;\n            Console.Clear();\n            ConsoleWriter.Init();\n            NodeBot nodeBot = new(ip);\n            nodeBot.RegisterCommand(new Echo());\n            nodeBot.RegisterCommand(new AtAll());\n            nodeBot.RegisterCommand(new Op());\n            nodeBot.RegisterCommand(new github.GithubCommand());\n            nodeBot.RegisterCommand(new Git_Subscribe());\n            nodeBot.RegisterCommand(new Stop());\n            nodeBot.RegisterCommand(new BTD6_RoundCheck());\n            WebhookService webhookService = WebhookService.Instance;\n            WebhookService.MessageEvent += (_, e) =>\n            {\n                //nodeBot.session.SendPrivateMessage(1306334428, new(new CqTextMsg(e.Message)));\n            };\n            nodeBot.RegisterService(webhookService);\n            nodeBot.LoadPermission();\n            nodeBot.Start();\n            CancellationTokenSource cts = new CancellationTokenSource();\n\n            ConsoleReader.MessageReceived += (sender, s) => {\n                nodeBot.CallConsoleInputEvent(s);\n            };\n            ConsoleReader.BeginReadThread(cts.Token);\n        }\n    }\n}"]}
{"filename": "NodeBot/NodeBot.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing EleCho.GoCqHttpSdk.Post;\nusing NodeBot.Classes;\nusing NodeBot.Command;\nusing NodeBot.Event;\nusing NodeBot.Service;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;", "using System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection.Metadata;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot\n{\n    public class NodeBot\n    {\n        public Dictionary<long, int> Permissions = new();", "    public class NodeBot\n    {\n        public Dictionary<long, int> Permissions = new();\n        public int OpPermission = 5;\n        public CqWsSession session;\n        public event EventHandler<ConsoleInputEvent>? ConsoleInputEvent;\n        public event EventHandler<ReceiveMessageEvent>? ReceiveMessageEvent;\n        public List<ICommand> Commands = new List<ICommand>();\n        public List<IService> Services = new List<IService>();\n        public Queue<Task> ToDoQueue = new Queue<Task>();\n        public NodeBot(string ip)\n        {\n            session = new(new()\n            {\n                BaseUri = new Uri(\"ws://\" + ip),\n                UseApiEndPoint = true,\n                UseEventEndPoint = true,\n            });\n            session.PostPipeline.Use(async (context, next) =>\n            {", "                if (ReceiveMessageEvent != null)\n                {\n                    ReceiveMessageEvent(this, new(context));\n                }\n                await next();\n            });\n            ConsoleInputEvent += (sender, e) =>\n            {\n                ExecuteCommand(new ConsoleCommandSender(session, this), e.Text);\n            };\n            ReceiveMessageEvent += (sender, e) =>\n            {", "                if (e.Context is CqPrivateMessagePostContext cqPrivateMessage)\n                {\n                    ExecuteCommand(new UserQQSender(session, this, cqPrivateMessage.UserId), cqPrivateMessage.Message);\n                }\n                if (e.Context is CqGroupMessagePostContext cqGroupMessage)\n                {\n                    ExecuteCommand(new GroupQQSender(session ,this, cqGroupMessage.GroupId, cqGroupMessage.UserId), cqGroupMessage.Message);\n                }\n            };\n        }\n        /// <summary>\n        /// \u4fdd\u5b58\u6743\u9650\u6570\u636e\n        /// </summary>", "        public void SavePermission()\n        {\n            if (!File.Exists(\"Permission.json\"))\n            {\n                File.Create(\"Permission.json\").Close();\n            }\n            File.WriteAllText(\"Permission.json\", Newtonsoft.Json.JsonConvert.SerializeObject(Permissions));\n        }\n        /// <summary>\n        /// \u52a0\u8f7d\u6743\u9650\u6570\u636e\n        /// </summary>", "        public void LoadPermission()\n        {\n            if (File.Exists(\"Permission.json\"))\n            {\n                string json = File.ReadAllText(\"Permission.json\");\n                Permissions = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<long, int>>(json)!;\n            }\n        }\n        public void RegisterCommand(ICommand command)\n        {\n            Commands.Add(command);\n        }", "        public void RegisterCommand(ICommand command)\n        {\n            Commands.Add(command);\n        }\n        public void RegisterService(IService service)\n        {\n            Services.Add(service);\n        }\n        public void Start()\n        {\n            session.Start();", "        public void Start()\n        {\n            session.Start();\n            foreach (IService service in Services)\n            {\n                service.OnStart(this);\n            }\n            Task.Run(() =>\n            {\n                while (true)\n                {\n                    Thread.Sleep(1000);", "                while (true)\n                {\n                    Thread.Sleep(1000);\n                    if (ToDoQueue.Count > 0)\n                    {\n                        Task task;\n                        lock (ToDoQueue)\n                        {\n                            task = ToDoQueue.Dequeue();\n                        }\n                        task.Start();\n                    }\n                }\n            });\n        }", "        public void CallConsoleInputEvent(string text)\n        {\n            if (ConsoleInputEvent != null)\n            {\n                ConsoleInputEvent(this, new(text));\n            }\n        }\n        public void ExecuteCommand(ICommandSender sender, string commandLine)\n        {\n            ICommand? command = GetCommandByCommandLine(commandLine);\n            if (command == null)\n            {\n                return;\n            }", "            if (command == null)\n            {\n                return;\n            }\n            if (sender is ConsoleCommandSender console)\n            {\n                if (command.IsConsoleCommand())\n                {\n                    command.Execute(sender, commandLine);\n                }\n            }\n        }", "        public void ExecuteCommand(IQQSender sender, CqMessage commandLine)\n        {\n            if (commandLine[0] is CqTextMsg cqTextMsg)\n            {\n                ICommand? command = GetCommandByCommandLine(cqTextMsg.Text);\n                if (command == null)\n                {\n                    return;\n                }\n                if (HasPermission(command, sender))\n                {", "                if (HasPermission(command, sender))\n                {\n                    if (sender is UserQQSender userQQSender && command.IsUserCommand())\n                    {\n                        command.Execute(sender, commandLine);\n                    }\n                    if (sender is GroupQQSender groupQQSender && command.IsGroupCommand())\n                    {\n                        command.Execute(sender, commandLine);\n                    }\n                }\n                else\n                {\n                    sender.SendMessage(\"\u4f60\u6ca1\u6709\u6743\u9650\");\n                }\n            }\n        }\n        public ICommand? GetCommandByCommandLine(string command)\n        {\n            string[] tmp = command.Split(' ');", "            foreach (string s in tmp)\n            {\n                if (s != string.Empty)\n                {\n                    return FindCommand(s);\n                }\n            }\n            return null;\n        }\n        public ICommand? FindCommand(string commandName)\n        {", "            foreach (ICommand command in Commands)\n            {\n                if (command.GetName().ToLower() == commandName.ToLower())\n                {\n                    return command;\n                }\n            }\n            return null;\n        }\n        public bool HasPermission(ICommand command, long QQNumber)\n        {\n            int permission = 0;", "        public bool HasPermission(ICommand command, long QQNumber)\n        {\n            int permission = 0;\n            if (Permissions.ContainsKey(QQNumber))\n            {\n                permission = Permissions[QQNumber];\n            }\n            return permission >= command.GetDefaultPermission();\n        }\n        public bool HasPermission(ICommand command, ICommandSender sender)\n        {", "        public bool HasPermission(ICommand command, ICommandSender sender)\n        {\n            if (sender is IQQSender QQSender)\n            {\n                return HasPermission(command, QQSender.GetNumber());\n            }\n            if (sender is ConsoleCommandSender)\n            {\n                return true;\n            }\n            return false;\n        }", "        public void RunTask(Task task)\n        {\n            lock (ToDoQueue)\n            {\n                ToDoQueue.Enqueue(task);\n            }\n        }\n        public void RunAction(Action action)\n        {\n            Task task = new(action);\n            RunTask(task);\n        }", "        public void SendGroupMessage(long GroupNumber, CqMessage msgs)\n        {\n            RunAction(() =>\n            {\n                session.SendGroupMessage(GroupNumber, msgs);\n            });\n        }\n        public void SendPrivateMessage(long QQNumber, CqMessage msgs)\n        {\n            RunAction(() =>\n            {\n                session.SendPrivateMessage(QQNumber, msgs);\n            });\n        }", "        public void SendMessage(long Number, CqMessage msgs, UserType type)\n        {\n            if(type == UserType.User)\n            {\n                SendPrivateMessage(Number, msgs);\n            }\n            else if(type == UserType.Group)\n            {\n                SendGroupMessage(Number, msgs);\n            }\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Classes/ICommandSender.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Classes\n{\n    public interface ICommandSender\n    {\n        void SendMessage(string message);\n        NodeBot GetNodeBot();\n    }\n}\n", "{\n    public interface ICommandSender\n    {\n        void SendMessage(string message);\n        NodeBot GetNodeBot();\n    }\n}\n"]}
{"filename": "NodeBot/Classes/UserType.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Classes\n{\n    public enum UserType\n    {\n        User,\n        Group\n    }\n}\n", "    public enum UserType\n    {\n        User,\n        Group\n    }\n}\n"]}
{"filename": "NodeBot/Classes/IQQSender.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Classes\n{\n    public interface IQQSender : ICommandSender\n    {\n        long GetNumber();\n        long? GetGroupNumber();\n        CqWsSession GetSession();\n        void SendMessage(CqMessage msgs);\n    }", "namespace NodeBot.Classes\n{\n    public interface IQQSender : ICommandSender\n    {\n        long GetNumber();\n        long? GetGroupNumber();\n        CqWsSession GetSession();\n        void SendMessage(CqMessage msgs);\n    }\n    public class GroupQQSender : IQQSender\n    {", "    public class GroupQQSender : IQQSender\n    {\n        public long GroupNumber;\n        public long QQNumber;\n        public CqWsSession Session;\n        public NodeBot Bot;\n        public GroupQQSender(CqWsSession session,NodeBot bot, long groupNumber, long QQNumber)\n        {\n            this.Session = session;\n            this.QQNumber = QQNumber;\n            this.GroupNumber = groupNumber;\n            this.Bot = bot;\n        }\n        public long? GetGroupNumber()\n        {\n            return GroupNumber;\n        }\n", "        public NodeBot GetNodeBot()\n        {\n            return Bot;\n        }\n\n        public long GetNumber()\n        {\n            return QQNumber;\n        }\n\n        public CqWsSession GetSession()\n        {\n            return Session;\n        }\n", "        public CqWsSession GetSession()\n        {\n            return Session;\n        }\n\n        public void SendMessage(string message)\n        {\n            Bot.SendGroupMessage(GroupNumber, new(new CqTextMsg(message)));\n        }\n\n        public void SendMessage(CqMessage msgs)\n        {\n            Bot.SendGroupMessage(GroupNumber, msgs);\n        }\n    }", "        public void SendMessage(CqMessage msgs)\n        {\n            Bot.SendGroupMessage(GroupNumber, msgs);\n        }\n    }\n    public class UserQQSender : IQQSender\n    {\n        public long QQNumber;\n        public CqWsSession Session;\n        public NodeBot Bot;\n        public UserQQSender(CqWsSession session,NodeBot bot, long QQNumber)\n        {\n            this.Session = session;\n            this.QQNumber = QQNumber;\n            this.Bot = bot;\n        }\n\n        public long? GetGroupNumber()\n        {\n            return null;\n        }\n", "        public CqWsSession Session;\n        public NodeBot Bot;\n        public UserQQSender(CqWsSession session,NodeBot bot, long QQNumber)\n        {\n            this.Session = session;\n            this.QQNumber = QQNumber;\n            this.Bot = bot;\n        }\n\n        public long? GetGroupNumber()\n        {\n            return null;\n        }\n", "        public NodeBot GetNodeBot()\n        {\n            throw new NotImplementedException();\n        }\n\n        public long GetNumber()\n        {\n            return QQNumber;\n        }\n\n        public CqWsSession GetSession()\n        {\n            return Session;\n        }\n", "        public CqWsSession GetSession()\n        {\n            return Session;\n        }\n\n        public void SendMessage(string message)\n        {\n            Bot.SendPrivateMessage(QQNumber, new CqMessage(new CqTextMsg(message)));\n        }\n\n        public void SendMessage(CqMessage msgs)\n        {\n            Bot.SendPrivateMessage(QQNumber, msgs);\n        }\n    }\n}\n", "        public void SendMessage(CqMessage msgs)\n        {\n            Bot.SendPrivateMessage(QQNumber, msgs);\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Event/ConsoleInputEvent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Event\n{\n    public class ConsoleInputEvent : EventArgs\n    {\n        public string Text;\n        public ConsoleInputEvent(string text)\n        {\n            Text = text;\n        }\n    }\n}\n", "    public class ConsoleInputEvent : EventArgs\n    {\n        public string Text;\n        public ConsoleInputEvent(string text)\n        {\n            Text = text;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Event/ReceiveMessageEvent.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Post;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Event\n{\n    public class ReceiveMessageEvent : EventArgs\n    {", "{\n    public class ReceiveMessageEvent : EventArgs\n    {\n        public CqPostContext Context;\n        public ReceiveMessageEvent(CqPostContext context)\n        {\n            Context = context;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Service/IService.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Service\n{\n    public interface IService\n    {\n        void OnStart(NodeBot nodeBot);\n        void OnStop();\n    }\n}\n", "    public interface IService\n    {\n        void OnStart(NodeBot nodeBot);\n        void OnStop();\n    }\n}\n"]}
{"filename": "NodeBot/github/GithubCommand.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing NodeBot.Command;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github", "\nnamespace NodeBot.github\n{\n    public class GithubCommand : ICommand\n    {\n        public GithubCommand()\n        {\n\n        }\n        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            return true;\n        }\n", "        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            return true;\n        }\n\n        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            throw new NotImplementedException();\n        }\n\n        public int GetDefaultPermission()\n        {\n            return 0;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 0;\n        }\n\n        public string GetName()\n        {\n            return \"github\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return false;\n        }\n    }\n}\n", "        public bool IsUserCommand()\n        {\n            return false;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/github/GitSubscribeInfo.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Numerics;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github\n{\n    public class GitSubscribeInfo\n    {", "{\n    public class GitSubscribeInfo\n    {\n        public string Repository = string.Empty;\n        public long GroupNumber = 0;\n        public GitSubscribeInfo() { }\n        public GitSubscribeInfo(string repository, long groupNumber)\n        {\n            Repository = repository;\n            GroupNumber = groupNumber;\n        }", "        public static bool operator ==(GitSubscribeInfo left, GitSubscribeInfo right)\n        {\n            if(left.GroupNumber == right.GroupNumber && left.Repository == right.Repository)\n            {\n                return true;    \n            }\n            return false;\n        }\n        public static bool operator !=(GitSubscribeInfo left, GitSubscribeInfo right)\n        {\n            return !(left == right);\n        }\n", "        public static bool operator !=(GitSubscribeInfo left, GitSubscribeInfo right)\n        {\n            return !(left == right);\n        }\n\n        public override bool Equals(object? obj)\n        {\n            if (ReferenceEquals(this, obj))\n            {\n                return true;\n            }", "            if (obj != null)\n            {\n                if (this.GetType() == obj.GetType())\n                {\n                    return this == (GitSubscribeInfo)obj;\n                }\n            }\n            return false;\n        }\n\n        public override int GetHashCode()\n        {\n            return Repository.GetHashCode() ^ GroupNumber.GetHashCode();\n        }\n    }\n}\n", "        public override int GetHashCode()\n        {\n            return Repository.GetHashCode() ^ GroupNumber.GetHashCode();\n        }\n    }\n}\n"]}
{"filename": "NodeBot/github/WebhookService.cs", "chunked_list": ["\ufeffusing ConsoleInteractive;\nusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.github.utils;\nusing NodeBot.Service;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Text;", "using System.Net;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github\n{\n    public class WebhookMessageEvent : EventArgs\n    {\n        public string Message { get; set; }\n        public string MessageType { get; set; }\n        public WebhookMessageEvent(string message, string messageType)\n        {\n            Message = message;\n            MessageType = messageType;\n        }\n    }", "        public string Message { get; set; }\n        public string MessageType { get; set; }\n        public WebhookMessageEvent(string message, string messageType)\n        {\n            Message = message;\n            MessageType = messageType;\n        }\n    }\n    public class WebhookService : IService\n    {\n        public static Thread ListenerThread = new(new ParameterizedThreadStart(Listening));", "    public class WebhookService : IService\n    {\n        public static Thread ListenerThread = new(new ParameterizedThreadStart(Listening));\n        public static event EventHandler<WebhookMessageEvent>? MessageEvent;\n        public static WebhookService Instance { get; private set; } = new();\n        public NodeBot? NodeBot { get; private set; }\n        static WebhookService()\n        {\n            MessageEvent += (_, e) =>\n            {\n                if(e.MessageType == \"push\")\n                {\n                    PushEvent pushEvent = Newtonsoft.Json.JsonConvert.DeserializeObject<PushEvent>(e.Message)!;", "                if(e.MessageType == \"push\")\n                {\n                    PushEvent pushEvent = Newtonsoft.Json.JsonConvert.DeserializeObject<PushEvent>(e.Message)!;\n                    if (pushEvent.sender.login != \"github-actions[bot]\")\n                    {\n                        ConsoleWriter.WriteLine(pushEvent.repository.full_name + \"\u6709\u65b0push\");\n                        foreach (GitSubscribeInfo info in Git_Subscribe.Info)\n                        {\n                            if (info.Repository == pushEvent.repository.full_name && Instance.NodeBot != null)\n                            {\n                                string msg = $\"{pushEvent.repository.full_name}\u6709\u65b0\u63a8\u9001!\";\n                                long added = 0;\n                                long removed = 0;\n                                long modified = 0;", "                            if (info.Repository == pushEvent.repository.full_name && Instance.NodeBot != null)\n                            {\n                                string msg = $\"{pushEvent.repository.full_name}\u6709\u65b0\u63a8\u9001!\";\n                                long added = 0;\n                                long removed = 0;\n                                long modified = 0;\n                                foreach (Commit commit in pushEvent.commits)\n                                {\n                                    msg += $\"\\n - {commit.id.Substring(0, 6)}  {commit.message}\";\n                                    added += commit.added.LongLength;\n                                    removed += commit.removed.LongLength;\n                                    modified += commit.modified.LongLength;\n                                }\n                                msg += $\"\\n\u63a8\u9001\u8005  {pushEvent.sender.login}\";\n                                msg += $\"\\n\u65f6\u95f4  {pushEvent.head_commit.timestamp}\";\n                                msg += $\"\\n\u94fe\u63a5  {pushEvent.head_commit.url}\";\n                                //msg += $\"\\n\u6dfb\u52a0  {added}\";\n                                //msg += $\"\\n\u79fb\u9664  {removed}\";\n                                //msg += $\"\\n\u4fee\u6539  {modified}\";\n\n                                Instance.NodeBot.SendGroupMessage(info.GroupNumber, new(new CqTextMsg(msg)));\n                            }\n                        }\n                    }\n                }\n            };\n        }", "        public void OnStart(NodeBot nodeBot)\n        {\n            ListenerThread.Start();\n            NodeBot = nodeBot;\n        }\n\n        public void OnStop()\n        {\n#pragma warning disable SYSLIB0006 // \u7c7b\u578b\u6216\u6210\u5458\u5df2\u8fc7\u65f6\n            ListenerThread.Abort();\n#pragma warning restore SYSLIB0006 // \u7c7b\u578b\u6216\u6210\u5458\u5df2\u8fc7\u65f6\n        }", "        public static void Listening(object? args)\n        {\n            HttpListener httpListener = new();\n            httpListener.Prefixes.Add(\"http://+:40001/\");\n            httpListener.Start();\n            while (true)\n            {\n                HttpListenerContext context = httpListener.GetContext();\n                string json = \"\";\n                using(StreamReader reader = new(context.Request.InputStream))\n                {\n                    json = reader.ReadToEnd();\n                }\n                string type = context.Request.Headers[\"X-GitHub-Event\"]!;\n                context.Response.Close();", "                using(StreamReader reader = new(context.Request.InputStream))\n                {\n                    json = reader.ReadToEnd();\n                }\n                string type = context.Request.Headers[\"X-GitHub-Event\"]!;\n                context.Response.Close();\n                if(MessageEvent != null)\n                {\n                    MessageEvent.Invoke(ListenerThread, new(json, type));\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "NodeBot/github/Git_Subscribe.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing NodeBot.Command;\nusing NodeBot.github.utils;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n", "using System.Threading.Tasks;\n\nnamespace NodeBot.github\n{\n    public class Git_Subscribe : ICommand\n    {\n        public static List<GitSubscribeInfo> Info = new List<GitSubscribeInfo>();\n        public Git_Subscribe()\n        {\n            LoadInfo();\n        }", "        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            return true;\n        }\n\n        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            try\n            {\n                string msg = ((CqTextMsg)msgs[0]).Text;\n                string repository = msg.Split(' ')[1];\n                GitSubscribeInfo info =  new(repository, ((GroupQQSender)QQSender).GroupNumber);", "                foreach (var item in Info)\n                {\n                    if(item == info)\n                    {\n                        QQSender.SendMessage($\"\u5df2\u7ecf\u8ba2\u9605{repository}\");\n                        return false;\n                    }\n                }\n                Info.Add(new(repository, ((GroupQQSender)QQSender).GroupNumber));\n                QQSender.SendMessage($\"\u6210\u529f\u8ba2\u9605{repository}\");\n            }\n            catch\n            {\n                QQSender.SendMessage(\"\u68c0\u67e5\u53c2\u6570\");\n            }\n            SaveInfo();\n            return true;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 5;\n        }\n\n        public string GetName()\n        {\n            return \"github::subscribe\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return false;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return false;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return false;\n        }", "        public bool IsUserCommand()\n        {\n            return false;\n        }\n        public void SaveInfo()\n        {\n            if (!File.Exists(\"GithubSubScribeInfo.json\"))\n            {\n                File.Create(\"GithubSubScribeInfo.json\").Close();\n            }\n            File.WriteAllText(\"GithubSubScribeInfo.json\", Newtonsoft.Json.JsonConvert.SerializeObject(Info));\n        }", "        public void LoadInfo()\n        {\n            if (File.Exists(\"GithubSubScribeInfo.json\"))\n            {\n                string json = File.ReadAllText(\"GithubSubScribeInfo.json\");\n                Info = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GitSubscribeInfo>>(json)!;\n            }\n        }\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/User.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class User\n    {\n        public string name = string.Empty;", "    public class User\n    {\n        public string name = string.Empty;\n        public string email = string.Empty;\n        public string login = string.Empty;\n        public long id = 0;\n        public string node_id = string.Empty;\n        public string avatar_url = string.Empty;\n        public string gravatar_id = string.Empty;\n        public string url = string.Empty;\n        public string html_url = string.Empty;", "        public string gravatar_id = string.Empty;\n        public string url = string.Empty;\n        public string html_url = string.Empty;\n        public string followers_url = string.Empty;\n        public string following_url = string.Empty;\n        public string gists_url = string.Empty;\n        public string starred_url = string.Empty;\n        public string subscriptions_url = string.Empty;\n        public string organizations_url = string.Empty;\n        public string repos_url = string.Empty;\n        public string events_url = string.Empty;", "        public string organizations_url = string.Empty;\n        public string repos_url = string.Empty;\n        public string events_url = string.Empty;\n        public string received_events_url = string.Empty;\n        public string type = string.Empty;\n        public bool site_admin = false;\n\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/License.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class License\n    {\n        public string key = string.Empty;", "    public class License\n    {\n        public string key = string.Empty;\n        public string name = string.Empty;\n        public string spdx_id = string.Empty;\n        public string url = string.Empty;\n        public string node_id = string.Empty;\n        public License() { }\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/IGithubEvent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public interface IGithubEvent\n    {\n\n    }\n}\n", "    public interface IGithubEvent\n    {\n\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/PushEvent.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class PushEvent : IGithubEvent\n    {\n        public string @ref = string.Empty;", "    public class PushEvent : IGithubEvent\n    {\n        public string @ref = string.Empty;\n        public string before = string.Empty;\n        public string after = string.Empty;\n        public Repository repository = new();\n        public Author pusher = new();\n        public User? organization = new();\n        public User sender = new();\n        public bool created = false;\n        public bool deleted = false;", "        public User sender = new();\n        public bool created = false;\n        public bool deleted = false;\n        public bool forced = false;\n        public string? base_ref = string.Empty;\n        public string compare = string.Empty;\n        public Commit[] commits = Array.Empty<Commit>();\n        public Commit head_commit = new();\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/Repository.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class Repository\n    {\n        public long id = 0;", "    public class Repository\n    {\n        public long id = 0;\n        public string node_id = string.Empty;\n        public string name = string.Empty;\n        public string full_name = string.Empty;\n        public bool @private;\n        public User owner = new();\n        public string html_url = string.Empty;\n        public string? description = string.Empty;\n        public bool fork = false;", "        public string html_url = string.Empty;\n        public string? description = string.Empty;\n        public bool fork = false;\n        public string url = string.Empty;\n        public string forks_url = string.Empty;\n        public string keys_url = string.Empty;\n        public string collaborators_url = string.Empty;\n        public string teams_url = string.Empty;\n        public string hooks_url = string.Empty;\n        public string issue_events_url = string.Empty;\n        public string events_url = string.Empty;", "        public string hooks_url = string.Empty;\n        public string issue_events_url = string.Empty;\n        public string events_url = string.Empty;\n        public string assignees_url = string.Empty;\n        public string branches_url = string.Empty;\n        public string tags_url = string.Empty;\n        public string blobs_url = string.Empty;\n        public string git_tags_url = string.Empty;\n        public string git_refs_url = string.Empty;\n        public string trees_url = string.Empty;\n        public string statuses_url = string.Empty;", "        public string git_refs_url = string.Empty;\n        public string trees_url = string.Empty;\n        public string statuses_url = string.Empty;\n        public string languages_url = string.Empty;\n        public string stargazers_url = string.Empty;\n        public string contributors_url = string.Empty;\n        public string subscribers_url = string.Empty;\n        public string subscription_url = string.Empty;\n        public string commits_url = string.Empty;\n        public string git_commits_url = string.Empty;\n        public string comments_url = string.Empty;", "        public string commits_url = string.Empty;\n        public string git_commits_url = string.Empty;\n        public string comments_url = string.Empty;\n        public string issue_comment_url = string.Empty;\n        public string contents_url = string.Empty;\n        public string compare_url = string.Empty;\n        public string merges_url = string.Empty;\n        public string archive_url = string.Empty;\n        public string downloads_url = string.Empty;\n        public string issues_url = string.Empty;\n        public string pulls_url = string.Empty;", "        public string downloads_url = string.Empty;\n        public string issues_url = string.Empty;\n        public string pulls_url = string.Empty;\n        public string milestones_url = string.Empty;\n        public string notifications_url = string.Empty;\n        public string labels_url = string.Empty;\n        public string releases_url = string.Empty;\n        public string deployments_url = string.Empty;\n        public long created_at = 0;\n        public string updated_at = string.Empty;\n        public long pushed_at = 0;", "        public long created_at = 0;\n        public string updated_at = string.Empty;\n        public long pushed_at = 0;\n        public string git_url = string.Empty;\n        public string ssh_url = string.Empty;\n        public string clone_url = string.Empty;\n        public string svn_url = string.Empty;\n        public string? homepage = string.Empty;\n        public long size = 0;\n        public long stargazers_count = 0;\n        public long watchers_count = 0;", "        public long size = 0;\n        public long stargazers_count = 0;\n        public long watchers_count = 0;\n        public string language = string.Empty;\n        public bool has_issues = false;\n        public bool has_projects = false;\n        public bool has_downloads = false;\n        public bool has_wiki = false;\n        public bool has_pages = false;\n        public bool has_discussions = false;\n        public long forks_count = 0;\n        public string? mirror_url = string.Empty;", "        public bool has_pages = false;\n        public bool has_discussions = false;\n        public long forks_count = 0;\n        public string? mirror_url = string.Empty;\n        public bool archived = false;\n        public bool disabled = false;\n        public long open_issues_count = 0;\n        public License license = new();\n        public bool allow_forking = true;\n        public bool is_template = false;\n        public bool web_commit_signoff_required = false;\n        public string[] topics = Array.Empty<string>();", "        public bool allow_forking = true;\n        public bool is_template = false;\n        public bool web_commit_signoff_required = false;\n        public string[] topics = Array.Empty<string>();\n        public string visibility = string.Empty;\n        public long forks = 0;\n        public long open_issues = 0;\n        public long watchers = 0;\n        public string default_branch = \"master\";\n        public long stargazers = 0;\n        public string master_branch = \"master\";\n        public string? organization = string.Empty;\n\n\n        public Repository()\n        {\n\n        }\n    }\n}\n", "        public string default_branch = \"master\";\n        public long stargazers = 0;\n        public string master_branch = \"master\";\n        public string? organization = string.Empty;\n\n\n        public Repository()\n        {\n\n        }\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/Author.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class Author\n    {\n        public string name = string.Empty;", "    public class Author\n    {\n        public string name = string.Empty;\n        public string email = string.Empty;\n        public string username = string.Empty;\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/Committer.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class Committer : Author\n    {\n    }\n}\n", "    public class Committer : Author\n    {\n    }\n}\n"]}
{"filename": "NodeBot/github/utils/Commit.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.github.utils\n{\n    public class Commit\n    {\n        public string id = string.Empty;", "    public class Commit\n    {\n        public string id = string.Empty;\n        public string tree_id = string.Empty;\n        public bool distinct = true;\n        public string message = string.Empty;\n        public string timestamp = string.Empty;\n        public string url = string.Empty;\n        public Author author = new();\n        public Committer committer = new();\n        public string[] added = new string[0];\n        public string[] removed = new string[0];\n        public string[] modified = new string[0];\n        public Commit()\n        {\n\n        }\n    }\n}\n", "        public Author author = new();\n        public Committer committer = new();\n        public string[] added = new string[0];\n        public string[] removed = new string[0];\n        public string[] modified = new string[0];\n        public Commit()\n        {\n\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Lib/AdvancesConsole.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Lib\n{\n    public static class AdvancedConsole\n    {\n        public static string Buffer = string.Empty;", "    public static class AdvancedConsole\n    {\n        public static string Buffer = string.Empty;\n        public static string InputStart = \">>\";\n        public static (int Left, int Top) InputStartPos;\n        public static bool IsInputing = false;\n        public static Stream inputStream = Console.OpenStandardInput();\n        public static TextReader In = TextReader.Synchronized(inputStream == Stream.Null ?\n                    StreamReader.Null :\n                    new StreamReader(\n                        stream: inputStream,\n                        encoding: Console.InputEncoding,\n                        bufferSize: 1,\n                        leaveOpen: true)\n                    {\n\n                    });", "        public static void WriteLine(dynamic text)\n        {\n            if (IsInputing)\n            {\n                Console.SetCursorPosition(InputStartPos.Left, InputStartPos.Top);\n                for (int i = 0; i < Buffer.Length + InputStart.Length; i++)\n                {\n                    Console.Write(' ');\n                }\n                Console.SetCursorPosition(InputStartPos.Left, InputStartPos.Top);\n            }\n            Console.WriteLine(text);", "            if (IsInputing)\n            {\n                InputStartPos = Console.GetCursorPosition();\n            }\n            Console.Write(InputStart);\n            if (IsInputing)\n                Console.Write(Buffer);\n        }\n        public static string ReadLine()\n        {\n\n            InputStartPos = Console.GetCursorPosition();\n            IsInputing = true;\n            Console.Write(InputStart);", "        public static string ReadLine()\n        {\n\n            InputStartPos = Console.GetCursorPosition();\n            IsInputing = true;\n            Console.Write(InputStart);\n            while (true)\n            {\n                var tmp = In.Read();\n                if ((char)tmp == '\\n')\n                {\n                    break;\n                }", "                if ((char)tmp == '\\n')\n                {\n                    break;\n                }\n                else if ((char)tmp == '\\b' && Buffer.Length > 0)\n                {\n                    Buffer = Buffer.Substring(0, Buffer.Length - 1);\n                }\n                else if ((char)tmp == '\\b' && Buffer.Length == 0)\n                {\n                    Console.Write(InputStart[InputStart.Length - 1]);\n                }", "                else if ((char)tmp == '\\b' && Buffer.Length == 0)\n                {\n                    Console.Write(InputStart[InputStart.Length - 1]);\n                }\n                else if ((char)tmp != '\\b')\n                {\n                    Buffer += ((char)tmp).ToString();\n                }\n            }\n            string tmp2 = Buffer;\n            Buffer = string.Empty;\n            IsInputing = false;\n            return tmp2;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/BTD6/BTD6_RoundCheck.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Message;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing NodeBot.BTD6.util;\nusing NodeBot.Classes;\nusing NodeBot.Command;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;", "using System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.BTD6\n{\n    public class BTD6_RoundCheck : ICommand\n    {\n        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            string msg = string.Empty;\n            int round;\n            try\n            {\n                round = int.Parse(commandLine.Split(' ')[1]);\n            }\n            catch\n            {\n                sender.SendMessage(\"\u53c2\u6570\u9519\u8bef\");\n            }\n            finally\n            {\n                round = int.Parse(commandLine.Split(' ')[1]) - 1;", "        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            string msg = string.Empty;\n            int round;\n            try\n            {\n                round = int.Parse(commandLine.Split(' ')[1]);\n            }\n            catch\n            {\n                sender.SendMessage(\"\u53c2\u6570\u9519\u8bef\");\n            }\n            finally\n            {\n                round = int.Parse(commandLine.Split(' ')[1]) - 1;", "                if (round <= 0)\n                {\n                    sender.SendMessage(\"\u53c2\u6570\u9519\u8bef\");\n                }\n                else if(round > 140)\n                {\n                    sender.SendMessage(\"\u6700\u5927\u53ea\u652f\u6301140\u6ce2\");\n                }\n                else\n                {\n                    msg += $\"==========\\n{round + 1}\u56de\u5408 \u4fe1\u606f\u5982\u4e0b\\n\";", "                    using (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"NodeBot.Resource.Round-Release.json\")!)\n                    {\n                        string jsonData = new StreamReader(stream).ReadToEnd();\n                        JObject json = JObject.Parse(jsonData);\n                        JToken normal = json[\"normal\"]!;\n                        msg += $\"\u7ecf\u9a8c {normal[\"xp\"]![round]}\\n\";\n                        msg += $\"\u51fb\u7834\u6c14\u7403\u6240\u83b7\u5f97\u7684\u94b1 {normal[\"pop_money\"]![round]}\\n\";\n                        msg += $\"\u56de\u5408\u7ed3\u675f\u6240\u5f97\u5230\u7684\u94b1 {normal[\"round_money\"]![round]}\\n\";\n                        msg += $\"\u603b\u51fb\u7834 {normal[\"pops\"]![round]}\\n\";\n                        msg += $\"\u94b1\u83b7\u5f97\u500d\u7387 {normal[\"money_k\"]![round]}\\n\";\n                        msg += $\"\u6240\u9700\u65f6\u95f4 {normal[\"time\"]![round]}\\n\";\n                        msg += $\"\u6c14\u7403:  \";\n                        JToken bloons = normal[\"bloons\"]![round]!;\n                        Dictionary<string, int> bloonsDictionary = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, int>>(bloons.ToString())!;", "                        foreach(KeyValuePair<string, int> pair in bloonsDictionary)\n                        {\n                            msg += $\"{BloonsUtils.Translate(pair.Key)} {pair.Value}\u4e2a  \";\n                        }\n                    }\n                    msg += $\"\\n\\n==========\";\n                    sender.SendMessage(msg);\n                }\n            }\n            return true;\n        }\n", "        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            if (msgs[0] is CqTextMsg msg)\n            {\n                string commandLine = msg.Text;\n                Execute(QQSender, commandLine);\n            }\n            else\n            {\n                QQSender.SendMessage(\"\u53c2\u6570\u9519\u8bef\");\n            }\n            return true;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 0;\n        }\n\n        public string GetName()\n        {\n            return \"btd6::RoundCheck\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n", "        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/BTD6/util/BloonsUtils.cs", "chunked_list": ["\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.BTD6.util\n{\n    public static class BloonsUtils\n    {\n        public static Dictionary<string, string> BloonsName = new() {\n            {\"red\", \"\u7ea2\u6c14\u7403\"},\n            {\"blue\", \"\u84dd\u6c14\u7403\"},\n            {\"green\", \"\u7eff\u6c14\u7403\"},\n            {\"yellow\", \"\u9ec4\u6c14\u7403\"},\n            {\"pink\", \"\u7c89\u6c14\u7403\"},\n            {\"black\", \"\u9ed1\u6c14\u7403\"},\n            {\"white\", \"\u767d\u6c14\u7403\"},\n            {\"purple\", \"\u7d2b\u6c14\u7403\"},\n            {\"lead\", \"\u94c5\u6c14\u7403\"},\n            {\"zebra\", \"\u6591\u9a6c\u6c14\u7403\"},\n            {\"rainbow\", \"\u5f69\u8679\u6c14\u7403\"},\n            {\"ceramic\", \"\u9676\u74f7\u6c14\u7403\"},\n            {\"moab\", \"MOAB\u6c14\u7403\"},\n            {\"bfb\", \"BFB\u6c14\u7403\"},\n            {\"zomg\", \"ZOMG\u6c14\u7403\"},\n            {\"ddt\", \"DDT\u6c14\u7403\"},\n            {\"c-ddt\", \"DDT\u6c14\u7403\"},\n            {\"bad\", \"BAD\u6c14\u7403\"},\n        };", "    public static class BloonsUtils\n    {\n        public static Dictionary<string, string> BloonsName = new() {\n            {\"red\", \"\u7ea2\u6c14\u7403\"},\n            {\"blue\", \"\u84dd\u6c14\u7403\"},\n            {\"green\", \"\u7eff\u6c14\u7403\"},\n            {\"yellow\", \"\u9ec4\u6c14\u7403\"},\n            {\"pink\", \"\u7c89\u6c14\u7403\"},\n            {\"black\", \"\u9ed1\u6c14\u7403\"},\n            {\"white\", \"\u767d\u6c14\u7403\"},\n            {\"purple\", \"\u7d2b\u6c14\u7403\"},\n            {\"lead\", \"\u94c5\u6c14\u7403\"},\n            {\"zebra\", \"\u6591\u9a6c\u6c14\u7403\"},\n            {\"rainbow\", \"\u5f69\u8679\u6c14\u7403\"},\n            {\"ceramic\", \"\u9676\u74f7\u6c14\u7403\"},\n            {\"moab\", \"MOAB\u6c14\u7403\"},\n            {\"bfb\", \"BFB\u6c14\u7403\"},\n            {\"zomg\", \"ZOMG\u6c14\u7403\"},\n            {\"ddt\", \"DDT\u6c14\u7403\"},\n            {\"c-ddt\", \"DDT\u6c14\u7403\"},\n            {\"bad\", \"BAD\u6c14\u7403\"},\n        };", "        public static Dictionary<string, string> BloonsAttribute = new() {\n            {\"c\", \"\u8ff7\u5f69\"},\n            {\"r\", \"\u91cd\u751f\"},\n            {\"f\", \"\u52a0\u56fa\"},\n        };\n        public static string Translate(string bloon)\n        {\n            if (bloon.Contains(\"-\") && bloon != \"c-ddt\")\n            {\n                string[] tmp = bloon.Split('-');\n                string Attribute = tmp[0];\n                string Name = tmp[1];\n                return TranslateAttribute(Attribute) + TranslateName(Name);\n            }\n            else\n            {\n                return TranslateName(bloon);\n            }\n        }", "        public static string TranslateName(string bloon)\n        {\n            return BloonsName[bloon.ToLower()];\n        }\n        public static string TranslateAttribute(string attributes)\n        {\n            string tmp = string.Empty;\n            foreach(char c in attributes)\n            {\n                tmp += BloonsAttribute[c.ToString()];\n            }\n            return tmp;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Command/ICommand.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Command\n{\n    public interface ICommand\n    {\n        string GetName();\n        bool IsConsoleCommand();\n        bool IsUserCommand();\n        bool IsGroupCommand();\n        int GetDefaultPermission();\n        bool Execute(ICommandSender sender, string commandLine);\n        bool Execute(IQQSender QQSender, CqMessage msgs);\n    }\n}\n", "namespace NodeBot.Command\n{\n    public interface ICommand\n    {\n        string GetName();\n        bool IsConsoleCommand();\n        bool IsUserCommand();\n        bool IsGroupCommand();\n        int GetDefaultPermission();\n        bool Execute(ICommandSender sender, string commandLine);\n        bool Execute(IQQSender QQSender, CqMessage msgs);\n    }\n}\n"]}
{"filename": "NodeBot/Command/ConsoleCommandSender.cs", "chunked_list": ["\ufeffusing ConsoleInteractive;\nusing EleCho.GoCqHttpSdk;\nusing Microsoft.VisualBasic;\nusing NodeBot.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n", "using System.Threading.Tasks;\n\nnamespace NodeBot.Command\n{\n    public class ConsoleCommandSender : ICommandSender\n    {\n        public CqWsSession Session;\n        public NodeBot Bot;\n        public ConsoleCommandSender(CqWsSession session, NodeBot bot)\n        {\n            Session = session;\n            Bot = bot;\n        }\n", "        public NodeBot GetNodeBot()\n        {\n            return Bot;\n        }\n\n        public CqWsSession GetSession()\n        {\n            return Session;\n        }\n\n        public void SendMessage(string message)\n        {", "        public void SendMessage(string message)\n        {\n            if (!message.Contains('\\n'))\n            {\n                ConsoleWriter.WriteLine(message);\n            }\n            else\n            {\n                foreach (string msg in message.Split('\\n'))\n                {\n                    ConsoleWriter.WriteLine(msg);\n                }\n            }\n        }\n    }\n}\n", "                foreach (string msg in message.Split('\\n'))\n                {\n                    ConsoleWriter.WriteLine(msg);\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Command/AtAll.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Command", "\nnamespace NodeBot.Command\n{\n    public class AtAll : ICommand\n    {\n        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            throw new NotImplementedException();\n        }\n\n        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            List<CqAtMsg> tmp = new List<CqAtMsg>();", "        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            List<CqAtMsg> tmp = new List<CqAtMsg>();\n            foreach(var user in QQSender.GetSession().GetGroupMemberList(QQSender.GetGroupNumber()!.Value)!.Members)\n            {\n                tmp.Add(new(user.UserId));\n                if(tmp.Count >= 100)\n                {\n                    QQSender.GetNodeBot().SendGroupMessage(QQSender.GetGroupNumber()!.Value, new(tmp));\n                    tmp = new();\n                }\n            }\n            QQSender.GetNodeBot().SendGroupMessage(QQSender.GetGroupNumber()!.Value, new(tmp));\n            return true;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 5;\n        }\n\n        public string GetName()\n        {\n            return \"atall\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return false;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return false;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return false;\n        }\n    }\n}\n", "        public bool IsUserCommand()\n        {\n            return false;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Command/Echo.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Command\n{\n    public class Echo : ICommand\n    {", "namespace NodeBot.Command\n{\n    public class Echo : ICommand\n    {\n        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            sender.SendMessage(commandLine.TrimStart().Substring(5));\n            return true;\n        }\n\n        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {", "        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            if (msgs[0] is CqTextMsg msg)\n            {\n                string tmp = msg.Text;\n                tmp.TrimStart();\n                tmp = tmp.Substring(5);\n                msgs[0] = new CqTextMsg(tmp);\n            }\n            QQSender.SendMessage(msgs);\n            return true;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 0;\n        }\n\n        public string GetName()\n        {\n            return \"echo\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n", "        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Command/Op.cs", "chunked_list": ["\ufeffusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace NodeBot.Command", "\nnamespace NodeBot.Command\n{\n    public class Op : ICommand\n    {\n        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            string[] strNums = commandLine.Split(\" \");\n            foreach(string strNum in strNums)\n            {\n                try\n                {\n                    long num = long.Parse(strNum);\n                    sender.GetNodeBot().Permissions[num] = sender.GetNodeBot().OpPermission;\n                    sender.SendMessage($\"\u5c06{num}\u8bbe\u4e3aop\");\n                }\n                catch { }\n            }\n            sender.GetNodeBot().SavePermission();\n            return true;\n        }\n", "            foreach(string strNum in strNums)\n            {\n                try\n                {\n                    long num = long.Parse(strNum);\n                    sender.GetNodeBot().Permissions[num] = sender.GetNodeBot().OpPermission;\n                    sender.SendMessage($\"\u5c06{num}\u8bbe\u4e3aop\");\n                }\n                catch { }\n            }\n            sender.GetNodeBot().SavePermission();\n            return true;\n        }\n", "        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            string commandLine = ((CqTextMsg)msgs[0]).Text;\n            string[] strNums = commandLine.Split(\" \");\n            foreach (string strNum in strNums)\n            {\n                try\n                {\n                    long num = long.Parse(strNum);\n                    QQSender.GetNodeBot().Permissions[num] = QQSender.GetNodeBot().OpPermission;\n                    QQSender.SendMessage($\"\u5c06{num}\u8bbe\u4e3aop\");\n                }\n                catch { }\n            }\n            QQSender.GetNodeBot().SavePermission();\n            return true;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 5;\n        }\n\n        public string GetName()\n        {\n            return \"op\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n", "        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n"]}
{"filename": "NodeBot/Command/Stop.cs", "chunked_list": ["\ufeffusing ConsoleInteractive;\nusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Classes;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n", "using System.Threading.Tasks;\n\nnamespace NodeBot.Command\n{\n    public class Stop : ICommand\n    {\n        public bool Execute(ICommandSender sender, string commandLine)\n        {\n            sender.SendMessage(\"\u673a\u5668\u4eba\u5df2\u505c\u6b62\");\n            Environment.Exit(0);\n            return true;\n        }\n", "        public bool Execute(IQQSender QQSender, CqMessage msgs)\n        {\n            QQSender.SendMessage(\"\u673a\u5668\u4eba\u5df2\u505c\u6b62\");\n            ConsoleWriter.WriteLine($\"\u673a\u5668\u4eba\u88ab{QQSender.GetNumber()}\u505c\u6b62\");\n            Environment.Exit(0);\n            return true;\n        }\n\n        public int GetDefaultPermission()\n        {\n            return 5;\n        }\n", "        public int GetDefaultPermission()\n        {\n            return 5;\n        }\n\n        public string GetName()\n        {\n            return \"stop\";\n        }\n\n        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n", "        public bool IsConsoleCommand()\n        {\n            return true;\n        }\n\n        public bool IsGroupCommand()\n        {\n            return true;\n        }\n\n        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n", "        public bool IsUserCommand()\n        {\n            return true;\n        }\n    }\n}\n"]}
{"filename": "NodeBot.Test/Program.cs", "chunked_list": ["\ufeffusing ConsoleInteractive;\nusing EleCho.GoCqHttpSdk;\nusing EleCho.GoCqHttpSdk.Message;\nusing NodeBot.Command;\nusing NodeBot.github;\n\nnamespace NodeBot.Test\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string ip = Console.ReadLine()!;\n            Console.Clear();\n            ConsoleWriter.Init();\n            NodeBot nodeBot = new(ip);\n            nodeBot.RegisterCommand(new Echo());\n            nodeBot.RegisterCommand(new AtAll());\n            nodeBot.RegisterCommand(new Op());\n            nodeBot.RegisterCommand(new github.GithubCommand());\n            nodeBot.RegisterCommand(new Git_Subscribe());\n            WebhookService webhookService = WebhookService.Instance;\n            WebhookService.MessageEvent += (_, e) =>\n            {\n                //nodeBot.session.SendPrivateMessage(1306334428, new(new CqTextMsg(e.Message)));\n            };\n//\n            nodeBot.RegisterService(webhookService);\n            nodeBot.LoadPermission();\n            nodeBot.Start();\n            CancellationTokenSource cts = new CancellationTokenSource();\n\n            ConsoleReader.MessageReceived += (sender, s) => {\n                nodeBot.CallConsoleInputEvent(s);\n            };\n            ConsoleReader.BeginReadThread(cts.Token);\n        }\n    }\n}", "    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            string ip = Console.ReadLine()!;\n            Console.Clear();\n            ConsoleWriter.Init();\n            NodeBot nodeBot = new(ip);\n            nodeBot.RegisterCommand(new Echo());\n            nodeBot.RegisterCommand(new AtAll());\n            nodeBot.RegisterCommand(new Op());\n            nodeBot.RegisterCommand(new github.GithubCommand());\n            nodeBot.RegisterCommand(new Git_Subscribe());\n            WebhookService webhookService = WebhookService.Instance;\n            WebhookService.MessageEvent += (_, e) =>\n            {\n                //nodeBot.session.SendPrivateMessage(1306334428, new(new CqTextMsg(e.Message)));\n            };\n//\n            nodeBot.RegisterService(webhookService);\n            nodeBot.LoadPermission();\n            nodeBot.Start();\n            CancellationTokenSource cts = new CancellationTokenSource();\n\n            ConsoleReader.MessageReceived += (sender, s) => {\n                nodeBot.CallConsoleInputEvent(s);\n            };\n            ConsoleReader.BeginReadThread(cts.Token);\n        }\n    }\n}"]}
