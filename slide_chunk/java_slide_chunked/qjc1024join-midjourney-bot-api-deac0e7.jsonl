{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/MidjourneyJavaApplication.java", "chunked_list": ["package com.qjc.midjourney;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class MidjourneyJavaApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MidjourneyJavaApplication.class, args);\n\t}\n\n}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(MidjourneyJavaApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/result/ResponseData.java", "chunked_list": ["package com.qjc.midjourney.result;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class ResponseData {\n    private String message;\n    private String error;\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/config/DiscordConfig.java", "chunked_list": ["package com.qjc.midjourney.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * The type DiscordConfig  config.\n *\n * @author qjch", " *\n * @author qjch\n * @email 1071643762@qq.com\n */\n@Configuration\n@ConfigurationProperties(prefix = \"discord\")\n@Data\npublic class DiscordConfig {\n    private String userToken;\n    private String botToken;\n    private String serverId;\n    private String channelId;\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/config/DiscordClientInitializer.java", "chunked_list": ["package com.qjc.midjourney.config;\n\nimport com.qjc.midjourney.event.DiscordEventHandler;\nimport jakarta.annotation.PostConstruct;\nimport net.dv8tion.jda.api.JDA;\nimport net.dv8tion.jda.api.JDABuilder;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport javax.security.auth.login.LoginException;", "\nimport javax.security.auth.login.LoginException;\n\n@Component\npublic class DiscordClientInitializer {\n    private final DiscordConfig discordConfig;\n    private JDA jda;\n    private DiscordEventHandler discordEventHandler;\n\n    @Autowired\n    public DiscordClientInitializer(DiscordConfig discordConfig,DiscordEventHandler discordEventHandler) {\n        this.discordConfig = discordConfig;\n        this.discordEventHandler = discordEventHandler;\n    }\n\n    @PostConstruct", "    public void init() throws LoginException {\n        jda = JDABuilder\n                .createDefault(discordConfig.getBotToken())\n                .addEventListeners(discordEventHandler).build();\n    }\n\n    public JDA getJda() {\n        return jda;\n    }\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/config/CallBackConfig.java", "chunked_list": ["package com.qjc.midjourney.config;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n/**\n * The type CallBackConfig  config.\n *\n * @author qjch\n * @email 1071643762@qq.com", " * @author qjch\n * @email 1071643762@qq.com\n */\n@Configuration\n@ConfigurationProperties(prefix = \"call-back\")\n@Data\npublic class CallBackConfig {\n    private String url;\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/config/MidjourneyBotConfiguration.java", "chunked_list": ["package com.qjc.midjourney.config;\n\nimport lombok.Data;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Data\npublic class MidjourneyBotConfiguration {\n\n    private final DiscordConfig discordConfig;\n\n    private final CallBackConfig callBackConfig;\n\n    @Autowired\n    public MidjourneyBotConfiguration(DiscordConfig discordConfig, CallBackConfig callBackConfig) {\n        this.discordConfig = discordConfig;\n        this.callBackConfig = callBackConfig;\n    }\n\n}", "public class MidjourneyBotConfiguration {\n\n    private final DiscordConfig discordConfig;\n\n    private final CallBackConfig callBackConfig;\n\n    @Autowired\n    public MidjourneyBotConfiguration(DiscordConfig discordConfig, CallBackConfig callBackConfig) {\n        this.discordConfig = discordConfig;\n        this.callBackConfig = callBackConfig;\n    }\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/controller/TestController.java", "chunked_list": ["package com.qjc.midjourney.controller;\n\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson2.JSONObject;\nimport com.qjc.midjourney.service.impl.ChatServiceImpl;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.PostMapping;", "import org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.List;\n\n/**\n * @author qjc", "/**\n * @author qjc\n * @description TODO\n * @date 2023-05-06 18:02\n */\n@RestController\n@RequestMapping(\"/test\")\n@Slf4j\npublic class TestController {\n    /**\n     * The Gpt service.\n     */\n    @Autowired\n    private ChatServiceImpl chatServiceimpl;\n\n    @PostMapping(\"/test\")", "public class TestController {\n    /**\n     * The Gpt service.\n     */\n    @Autowired\n    private ChatServiceImpl chatServiceimpl;\n\n    @PostMapping(\"/test\")\n    public JSONObject jsonObject (@RequestBody JSONObject jsonObject){\n        log.info(\"/test\"+jsonObject.toString());\n        return jsonObject;\n\n    }\n\n    /**\n     * Completions result.\n     *\n     * @param dto the dto\n     * @return the result\n     */\n\n    @PostMapping(value = \"/chat/completions\", name = \"GPT-Turbo 3.5\", produces = MediaType.APPLICATION_JSON_VALUE)", "    public JSONObject jsonObject (@RequestBody JSONObject jsonObject){\n        log.info(\"/test\"+jsonObject.toString());\n        return jsonObject;\n\n    }\n\n    /**\n     * Completions result.\n     *\n     * @param dto the dto\n     * @return the result\n     */\n\n    @PostMapping(value = \"/chat/completions\", name = \"GPT-Turbo 3.5\", produces = MediaType.APPLICATION_JSON_VALUE)", "    public Result completions(@Validated @RequestBody final GptTurboDto dto) {\n        log.info(\"==================>\"+dto.toString());\n        try {\n            final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);\n            List<GptTurboModel.Messages> messages = model.getMessages();\n            int listSize = messages.size();\n            int startIndex = listSize > 5 ? listSize - 5 : 0;\n            List<GptTurboModel.Messages> lastFiveMessages = messages.subList(startIndex, listSize);\n            model.setMessages(lastFiveMessages);\n            log.info(\"List<GptTurboModel.Messages>===================>\"+ JSON.toJSONString(lastFiveMessages));\n            return Result.data(chatServiceimpl.build(model, \"chat/completions\"));\n        } catch (Exception e) {\n            log.error(\"Failed to fetch GPT3.5 model API /chat/completions\"+e.getMessage()+dto.toString());\n            return Result.error(e.getMessage());\n        }\n    }\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/controller/Result.java", "chunked_list": ["package com.qjc.midjourney.controller;\n\n\nimport java.io.Serializable;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n\n/**", "\n/**\n * The type Result.\n *\n * @email 1071643762 @qq.om\n */\n@SuppressWarnings(\"all\")\npublic class Result extends LinkedHashMap<String, Object> implements Serializable {\n\n\n    /**\n     * The constant serialVersionUID.\n     *\n     * @email 1071643762 @qq.om\n     */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * The constant CODE_SUCCESS.\n     *\n     * @email 1071643762 @qq.om\n     */", "    public static final int CODE_SUCCESS = 200;\n\n    /**\n     * The constant CODE_ERROR.\n     *\n     * @email 2074055628 @qq.om\n     */\n    public static final int CODE_ERROR = 500;\n\n\n    /**\n     * Instantiates a new Result.\n     *\n     * @email 1071643762 @qq.om\n     */\n    public Result() {\n    }\n\n    /**\n     * Instantiates a new Result.\n     *\n     * @param code the code\n     * @param msg  the msg\n     * @param data the data\n     * @email 1071643762 @qq.om\n     */\n    public Result(int code, String msg, Object data) {\n        this.setCode(code);\n        this.setMsg(msg);\n        this.setData(data);\n    }\n\n\n    /**\n     * Instantiates a new Result.\n     *\n     * @param map the map\n     * @author bdth\n     * @email 1071643762 @qq.om\n     */\n    public Result(Map<String, ?> map) {\n        this.setMap(map);\n    }\n\n    /**\n     * Gets code.\n     *\n     * @return the code\n     * @author bdth\n     * @email 1071643762 @qq.om\n     */", "    public Integer getCode() {\n        return (Integer) this.get(\"code\");\n    }\n\n    /**\n     * Gets msg.\n     *\n     * @return the msg\n     * @author bdth\n     * @email 1071643762 @qq.om\n     */", "    public String getMsg() {\n        return (String) this.get(\"msg\");\n    }\n\n\n    /**\n     * Gets data.\n     *\n     * @return the data\n     * @email 1071643762 @qq.om\n     */", "    public Object getData() {\n        return this.get(\"data\");\n    }\n\n\n    /**\n     * Sets code.\n     *\n     * @param code the code\n     * @return the code\n     * @email 1071643762 @qq.om\n     */", "    public Result setCode(int code) {\n        this.put(\"code\", code);\n        return this;\n    }\n\n\n    /**\n     * Sets msg.\n     *\n     * @param msg the msg\n     * @return the msg\n     * @email 1071643762 @qq.om\n     */", "    public Result setMsg(String msg) {\n        this.put(\"msg\", msg);\n        return this;\n    }\n\n\n    /**\n     * Sets data.\n     *\n     * @param data the data\n     * @return the data\n     * @email 1071643762 @qq.om\n     */", "    public Result setData(Object data) {\n        this.put(\"data\", data);\n        return this;\n    }\n\n    /**\n     * Set result.\n     *\n     * @param key  the key\n     * @param data the data\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public Result set(String key, Object data) {\n        this.put(key, data);\n        return this;\n    }\n\n\n    /**\n     * Sets map.\n     *\n     * @param map the map\n     * @return the map\n     * @email 1071643762 @qq.om\n     */", "    public Result setMap(Map<String, ?> map) {\n        Iterator var2 = map.keySet().iterator();\n\n        while (var2.hasNext()) {\n            String key = (String) var2.next();\n            this.put(key, map.get(key));\n        }\n\n        return this;\n    }\n\n    /**\n     * Ok result.\n     *\n     * @return the result\n     * @author bdth\n     * @email 1071643762 @qq.om\n     */", "    public static Result ok() {\n        return new Result(CODE_SUCCESS, \"\u64cd\u4f5c\u6210\u529f\", (Object) null);\n    }\n\n\n    /**\n     * Ok result.\n     *\n     * @param msg the msg\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public static Result ok(String msg) {\n        return new Result(CODE_SUCCESS, msg, (Object) null);\n    }\n\n\n    /**\n     * Code result.\n     *\n     * @param code the code\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public static Result code(int code) {\n        return new Result(code, (String) null, (Object) null);\n    }\n\n\n    /**\n     * Data result.\n     *\n     * @param data the data\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public static Result data(Object data) {\n        return new Result(CODE_SUCCESS, \"ok\", data);\n    }\n\n\n    /**\n     * Error result.\n     *\n     * @return the result\n     * @author bdth\n     * @email 1071643762 @qq.om\n     */", "    public static Result error() {\n        return new Result(CODE_ERROR, \"\u64cd\u4f5c\u5931\u8d25\", (Object) null);\n    }\n\n\n    /**\n     * Error result.\n     *\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public static Result error(final String msg, final Integer code) {\n        return new Result(code, msg, (Object) null);\n    }\n\n\n    /**\n     * Error result.\n     *\n     * @param msg the msg\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public static Result error(String msg) {\n        return new Result(CODE_ERROR, msg, (Object) null);\n    }\n\n\n    /**\n     * Build result.\n     *\n     * @param code the code\n     * @param msg  the msg\n     * @param data the data\n     * @return the result\n     * @email 1071643762 @qq.om\n     */", "    public static Result build(int code, String msg, Object data) {\n        return new Result(code, msg, data);\n    }\n\n\n    /**\n     * To string string.\n     *\n     * @return the string\n     * @email 1071643762 @qq.om\n     */", "    public String toString() {\n        return \"{\\\"code\\\": \" + this.getCode() + \", \\\"msg\\\": \" + this.transValue(this.getMsg()) + \", \\\"data\\\": \" + this.transValue(this.getData()) + \"}\";\n    }\n\n\n    /**\n     * Trans value string.\n     *\n     * @param value the value\n     * @return the string\n     * @email 1071643762 @qq.om\n     */\n    private String transValue(Object value) {\n        return value instanceof String ? \"\\\"\" + value + \"\\\"\" : String.valueOf(value);\n    }\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/controller/GptTurboModel.java", "chunked_list": ["/**\n * @author \u660e\u660e\u4e0d\u662f\u4e0b\u96e8\u5929\n */\npackage com.qjc.midjourney.controller;\n\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n", "import java.util.List;\n\n\n/**\n * The type Gpt alpha model.\n */\n@Data\n@Accessors(chain = true)\npublic class GptTurboModel {\n\n\n    /**\n     * The Model.\n     */\n    private String model = \"gpt-3.5-turbo\";\n\n    /**\n     * The Top p.\n     */\n    private Double top_p = 0.9;\n\n    /**\n     * The Stream.\n     */\n    private boolean stream = false;\n\n    /**\n     * The Messages.\n     */\n    private List<Messages> messages;\n\n    /**\n     * The Max tokens.\n     */\n    private Integer max_tokens = 2048;\n\n\n    /**\n     * The type Messages.\n     *\n     * @author bdth\n     * @email 2074055628 @qq.om\n     */\n    @Data", "public class GptTurboModel {\n\n\n    /**\n     * The Model.\n     */\n    private String model = \"gpt-3.5-turbo\";\n\n    /**\n     * The Top p.\n     */\n    private Double top_p = 0.9;\n\n    /**\n     * The Stream.\n     */\n    private boolean stream = false;\n\n    /**\n     * The Messages.\n     */\n    private List<Messages> messages;\n\n    /**\n     * The Max tokens.\n     */\n    private Integer max_tokens = 2048;\n\n\n    /**\n     * The type Messages.\n     *\n     * @author bdth\n     * @email 2074055628 @qq.om\n     */\n    @Data", "    public static class Messages {\n\n        /**\n         * The Role.\n         */\n        private String role;\n\n        /**\n         * The Content.\n         */\n        private String content;\n    }\n\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/controller/MidjourneyController.java", "chunked_list": ["package com.qjc.midjourney.controller;\n\nimport com.qjc.midjourney.dto.RequestTrigger;\nimport com.qjc.midjourney.result.ResponseData;\nimport com.qjc.midjourney.service.MidjourneyService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;", "import org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/midjourney\")\npublic class MidjourneyController {\n\n    private final MidjourneyService midjourneyService;\n\n    @Autowired\n    public MidjourneyController(MidjourneyService midjourneyService) {\n        this.midjourneyService = midjourneyService;\n    }\n\n    @PostMapping\n    public ResponseEntity<ResponseData> midjourneyBot(@RequestBody RequestTrigger requestTrigger) {", "        try {\n            midjourneyService.executeAction(requestTrigger);\n            return ResponseEntity.ok(ResponseData.builder()\n                    .message(\"success\")\n                    .build());\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ResponseData.builder()\n                    .message(e.getMessage())\n                    .build());\n        }\n    }\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/controller/GptTurboDto.java", "chunked_list": ["\npackage com.qjc.midjourney.controller;\n\n\nimport jakarta.validation.constraints.NotEmpty;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport java.util.List;", "\nimport java.util.List;\n\n\n@Getter\n@Setter\n@ToString\npublic class GptTurboDto {\n\n    @NotEmpty(message = \"\u6d88\u606f\u6570\u636e\u4e0d\u80fd\u4e3a\u7a7a\")\n    private List<GptTurboModel.Messages> messages;\n\n", "    public static GptTurboModel convertToGptTurboModel(GptTurboDto item) {\n        if (item == null) {\n            return null;\n        }\n        GptTurboModel result = new GptTurboModel();\n        result.setMessages(item.getMessages());\n        return result;\n    }\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/enums/Scene.java", "chunked_list": ["package com.qjc.midjourney.enums;\n/**\n * The type Scene .\n *\n * @author qjch\n * @email 1071643762@qq.com\n */\npublic enum Scene {\n        FIRST_TRIGGER,\n        GENERATE_END,\n        GENERATE_EDIT_ERROR\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqUpscaleDiscord.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class ReqUpscaleDiscord {\n    @Builder.Default\n    private int type = 3;\n    private String guildId;\n    private String channelId;\n    @Builder.Default\n    private int messageFlags = 0;\n    private String messageId;\n    @Builder.Default\n    private String applicationId = \"936929561302675456\";\n    @Builder.Default\n    private String sessionId = \"45bc04dd4da37141a5f73dfbfaf5bdcf\";\n    private ReqUpscaleData data;\n\n\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/RequestMidjourneyOptions.java", "chunked_list": ["/**\n  * Copyright 2023 json.cn \n  */\npackage com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;", "import lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n/**\n * Auto-generated: 2023-04-25 9:7:8\n *\n * @author json.cn (i@json.cn)\n * @website http://www.json.cn/java2pojo/\n */\n", " */\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class RequestMidjourneyOptions {\n    @Builder.Default\n    private int type = 3;\n    @Builder.Default\n    private String name = \"prompt\";\n    private String value ;\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/RequestMidjourneyData.java", "chunked_list": ["/**\n  * Copyright 2023 json.cn \n  */\npackage com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;", "import lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n\n/**\n * Auto-generated: 2023-04-25 9:7:8\n *\n * @author json.cn (i@json.cn)\n * @website http://www.json.cn/java2pojo/", " * @author json.cn (i@json.cn)\n * @website http://www.json.cn/java2pojo/\n */\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class RequestMidjourneyData {\n    @Builder.Default\n    private String version = \"1077969938624553050\";\n    @Builder.Default\n    private String id = \"938956540159881230\";\n    @Builder.Default\n    private String name = \"imagine\";\n    @Builder.Default\n    private int type = 1;\n    private List<RequestMidjourneyOptions> options;\n    private RequestMidjourneyApplicationCommand application_command;\n    private List<String> attachments;\n\n\n\n\n}", "public class RequestMidjourneyData {\n    @Builder.Default\n    private String version = \"1077969938624553050\";\n    @Builder.Default\n    private String id = \"938956540159881230\";\n    @Builder.Default\n    private String name = \"imagine\";\n    @Builder.Default\n    private int type = 1;\n    private List<RequestMidjourneyOptions> options;\n    private RequestMidjourneyApplicationCommand application_command;\n    private List<String> attachments;\n\n\n\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/RequestMidjourneyOptionss.java", "chunked_list": ["package com.qjc.midjourney.request; /**\n * Copyright 2023 json.cn\n */\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n", "import lombok.experimental.Accessors;\n\n/**\n  * Copyright 2023 json.cn\n  */\n\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor", "@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class RequestMidjourneyOptionss {\n    @Builder.Default\n    private int type = 3;\n    @Builder.Default\n    private String name = \"prompt\";\n    @Builder.Default\n    private String description = \"The prompt to imagine\";\n    @Builder.Default\n    private boolean required = true;\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqMaxUpscaleDiscord.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class ReqMaxUpscaleDiscord {\n    @Builder.Default\n    private int type = 3;\n    private String guildId;\n    private String channelId;\n    @Builder.Default\n    private int messageFlags = 0;\n    private String messageId;\n    @Builder.Default\n    private String applicationId = \"936929561302675456\";\n    @Builder.Default\n    private String sessionId = \"1f3dbdf09efdf93d81a3a6420882c92c\";\n    private ReqMaxUpscaleData data;\n\n\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqReSetUpscaleDiscord.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class ReqReSetUpscaleDiscord {\n    @Builder.Default\n    private int type = 3;\n    private String guildId;\n    private String channelId;\n    @Builder.Default\n    private int messageFlags = 0;\n    private String messageId;\n    @Builder.Default\n    private String applicationId = \"936929561302675456\";\n    @Builder.Default\n    private String sessionId = \"45bc04dd4da37141a5f73dfbfaf5bdcf\";\n    private ReqReSetUpscaleData data;\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/RequestMidjourneyDto.java", "chunked_list": ["/**\n  * Copyright 2023 json.cn \n  */\npackage com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;", "import lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class RequestMidjourneyDto {\n    @Builder.Default\n    private int type = 2;\n    @Builder.Default\n    private String application_id = \"936929561302675456\";\n    private String guild_id;\n    private String channel_id;\n    @Builder.Default\n    private String session_id = \"9c4055428e13bcbf2248a6b36084c5f3\";\n    private RequestMidjourneyData data;\n\n\n}", "public class RequestMidjourneyDto {\n    @Builder.Default\n    private int type = 2;\n    @Builder.Default\n    private String application_id = \"936929561302675456\";\n    private String guild_id;\n    private String channel_id;\n    @Builder.Default\n    private String session_id = \"9c4055428e13bcbf2248a6b36084c5f3\";\n    private RequestMidjourneyData data;\n\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/RequestMidjourneyApplicationCommand.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\nimport java.util.List;\n", "import java.util.List;\n\n/**\n * Auto-generated: 2023-04-25 9:7:8\n *\n * @author json.cn (i@json.cn)\n * @website http://www.json.cn/java2pojo/\n */\n\n@Data", "\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class RequestMidjourneyApplicationCommand {\n    @Builder.Default\n    private String id = \"938956540159881230\";\n    @Builder.Default\n    private String application_id = \"936929561302675456\";\n    @Builder.Default\n    private String version = \"1077969938624553050\";\n    @Builder.Default\n    private String default_member_permissions = null;\n    @Builder.Default\n    private int type = 1;\n    @Builder.Default\n    private boolean nsfw = false;\n    @Builder.Default\n    private String name = \"imagine\";\n    @Builder.Default\n    private String description = \"Create images with Midjourney\";\n    @Builder.Default\n    private boolean dm_permission = true;\n    private List<RequestMidjourneyOptionss> options;\n\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqUpscaleData.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@Builder", "@Data\n@Builder\n@Accessors(chain = true)\npublic class ReqUpscaleData {\n    @Builder.Default\n    private int componentType = 2;\n    private String customId;\n\n    public ReqUpscaleData(int index, String messageHash) {\n        this.customId = String.format(\"MJ::JOB::upsample::%d::%s\", index, messageHash);\n    }\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqReSetUpscaleData.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Data\npublic class ReqReSetUpscaleData {\n    @Builder.Default\n    private int componentType = 2;\n    private String customId;\n\n    public ReqReSetUpscaleData(String messageHash) {\n        this.customId = String.format(\"MJ::JOB::reroll::0::%s::SOLO\", messageHash);\n    }\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/CallBackData.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\nimport net.dv8tion.jda.api.entities.Guild;\nimport net.dv8tion.jda.api.entities.Member;\nimport net.dv8tion.jda.api.entities.MessageChannel;", "import net.dv8tion.jda.api.entities.Member;\nimport net.dv8tion.jda.api.entities.MessageChannel;\nimport net.dv8tion.jda.api.entities.MessageType;\n\n/**\n * @author qjc\n * @description TODO\n * @date 2023-05-06 17:17\n */\n", " */\n\n@Data\n\n@Builder\n@Accessors(chain = true)\npublic class CallBackData {\n\n   /* private CallBackGuild callBackGuild;\n\n    private CallBackMessageChannel callBackMessageChannel;\n\n    private CallBackMember callBackMember;\n\n    private CallBackMessageType callBackMessageType;\n\n    private CallBackAttachment callBackAttachment;*/\n\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqVariationData.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.Data;\n\n@Data\npublic  class ReqVariationData {\n        private int componentType = 2;\n        private String customId;\n        public ReqVariationData(int index, String messageHash) {\n            this.customId = String.format(\"MJ::JOB::variation::%d::%s\", index, messageHash);\n     }\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqVariationDiscord.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class ReqVariationDiscord {\n    @Builder.Default\n    private int type = 3;\n    private String guildId;\n    private String channelId;\n    @Builder.Default\n    private int messageFlags = 0;\n    private String messageId;\n    @Builder.Default\n    private String applicationId = \"936929561302675456\";\n    @Builder.Default\n    private String sessionId = \"45bc04dd4da37141a5f73dfbfaf5bdcf\";\n    private ReqVariationData data;\n\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/request/ReqMaxUpscaleData.java", "chunked_list": ["package com.qjc.midjourney.request;\n\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.experimental.Accessors;\n\n@Data\n\npublic class ReqMaxUpscaleData {\n    @Builder.Default\n    private int componentType = 2;\n    private String customId;\n\n    public ReqMaxUpscaleData(String messageHash) {\n        this.customId = String.format(\"MJ::JOB::variation::1::%s::SOLO\", messageHash);\n    }\n\n}", "public class ReqMaxUpscaleData {\n    @Builder.Default\n    private int componentType = 2;\n    private String customId;\n\n    public ReqMaxUpscaleData(String messageHash) {\n        this.customId = String.format(\"MJ::JOB::variation::1::%s::SOLO\", messageHash);\n    }\n\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/service/MidjourneyService.java", "chunked_list": ["package com.qjc.midjourney.service;\n\nimport com.qjc.midjourney.dto.RequestTrigger;\n\n/**\n * @author qjc\n * @description TODO\n * @date 2023-05-06 15:37\n */\npublic interface MidjourneyService {\n    public void executeAction(RequestTrigger requestTrigger) throws Exception;\n}\n", " */\npublic interface MidjourneyService {\n    public void executeAction(RequestTrigger requestTrigger) throws Exception;\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/service/DiscordInteractionService.java", "chunked_list": ["package com.qjc.midjourney.service;\n\nimport org.springframework.web.reactive.function.client.WebClient;\n\n/**\n * @author qjc\n * @description TODO\n * @date 2023-05-06 15:59\n */\npublic interface DiscordInteractionService {\n", " */\npublic interface DiscordInteractionService {\n\n    public void generateImage(String prompt);\n\n    public void upscale(int index, String messageId, String messageHash);\n\n    public void variate(int index, String messageId, String messageHash);\n\n    public void maxUpscale(String messageId, String messageHash);\n\n", "    public void maxUpscale(String messageId, String messageHash);\n\n\n    public void reSet(String messageId, String messageHash);\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/service/impl/ChatServiceImpl.java", "chunked_list": ["package com.qjc.midjourney.service.impl;\n\nimport com.alibaba.fastjson.JSONObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport java.time.Duration;", "\nimport java.time.Duration;\nimport java.util.concurrent.TimeoutException;\n\n\n/**\n * The type Gpt service.\n *\n * @author bdth\n */", " * @author bdth\n */\n@Service\n\n\n@Slf4j\npublic class ChatServiceImpl  {\n\n\n    @Value(\"${chatgpt.token}\")\n    private String token;\n\n\n    /**\n     * The constant openUrl.\n     */\n    private static final String openUrl = \"https://api.openai.com/v1/\";\n\n\n\n\n\n    /**\n     * Http string.\n     *\n     * @param body the body\n     * @return the string\n     */", "    public JSONObject build(final Object body, final String url) {\n\n        final WebClient.Builder webClient = WebClient.builder();\n\n        log.info(\"=================>WebClient start http:\");\n\n        try {\n            webClient\n                    .baseUrl(openUrl)\n                    .defaultHeader(\"Authorization\", \"Bearer \" +token);\n            return JSONObject.parseObject(\n                    webClient.build()\n                            .post()\n                            .uri(url)\n                            .body(BodyInserters.fromValue(body))\n                            .retrieve()\n                            .bodyToMono(String.class)\n                            .timeout(Duration.ofSeconds(60))\n                            .onErrorMap(TimeoutException.class, e -> new Exception())\n                            .block()\n            );\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new JSONObject();\n    }\n\n\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/service/impl/MidjourneyServiceImpl.java", "chunked_list": ["package com.qjc.midjourney.service.impl;\n\nimport com.qjc.midjourney.dto.RequestTrigger;\nimport com.qjc.midjourney.service.DiscordInteractionService;\nimport com.qjc.midjourney.service.MidjourneyService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class MidjourneyServiceImpl implements MidjourneyService {\n\n    @Autowired\n    private DiscordInteractionService discordInteractionService;", "@Service\npublic class MidjourneyServiceImpl implements MidjourneyService {\n\n    @Autowired\n    private DiscordInteractionService discordInteractionService;\n    public void executeAction(RequestTrigger requestTrigger) throws Exception {\n        String type = requestTrigger.getType();\n        switch (type) {\n            case \"generate\":\n                // Call GenerateImage service\n                discordInteractionService.generateImage(requestTrigger.getPrompt());\n                break;\n            case \"upscale\":\n                // Call ImageUpscale service\n                discordInteractionService.upscale(requestTrigger.getIndex(),\n                        requestTrigger.getDiscordMsgId(),\n                        requestTrigger.getMsgHash());\n                break;\n            case \"variation\":\n                // Call ImageVariation service\n                discordInteractionService.variate(requestTrigger.getIndex(),\n                        requestTrigger.getDiscordMsgId(),\n                        requestTrigger.getMsgHash());\n                break;\n            case \"maxUpscale\":\n                // Call ImageMaxUpscale service\n                discordInteractionService.maxUpscale(  requestTrigger.getDiscordMsgId(),\n                        requestTrigger.getMsgHash());\n                break;\n            case \"reset\":\n                // Call ImageReset service\n                discordInteractionService.reSet(requestTrigger.getDiscordMsgId(),\n                        requestTrigger.getMsgHash());\n                break;\n            default:\n                throw new Exception(\"Invalid type\");\n        }\n    }\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/service/impl/DiscordInteractionServiceImpl.java", "chunked_list": ["package com.qjc.midjourney.service.impl;\n\nimport com.qjc.midjourney.config.MidjourneyBotConfiguration;\nimport com.qjc.midjourney.request.*;\nimport com.qjc.midjourney.service.DiscordInteractionService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.BodyInserters;", "import org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Arrays;\n\n/**\n * @author qjc\n * @description TODO", " * @author qjc\n * @description TODO\n * @date 2023-05-06 16:00\n * @email 1071643762@qq.com\n */\n@Service\n@Slf4j\npublic class DiscordInteractionServiceImpl implements DiscordInteractionService {\n    private static final String DISCORD_API_URL = \"https://discord.com/api/v9/interactions\";\n    private final WebClient webClient;\n\n    private final MidjourneyBotConfiguration midjourneyBotConfiguration;\n    @Autowired\n    public DiscordInteractionServiceImpl(MidjourneyBotConfiguration midjourneyBotConfiguration,\n                                         WebClient.Builder webClientBuilder) {\n        this.webClient = webClientBuilder.build();\n        this.midjourneyBotConfiguration= midjourneyBotConfiguration;\n    }\n\n    /**\n     * Call GenerateImage service\n     * @param prompt\n     */\n    @Override", "    public void generateImage(String prompt) {\n        sendRequest(RequestMidjourneyDto.builder()\n                .guild_id(midjourneyBotConfiguration.getDiscordConfig().getServerId())\n                .channel_id(midjourneyBotConfiguration.getDiscordConfig().getChannelId())\n                .data(RequestMidjourneyData.builder()\n                        .options(Arrays.asList(RequestMidjourneyOptions.builder()\n                                .value(prompt)\n                                .build()))\n                        .application_command(RequestMidjourneyApplicationCommand.builder()\n                                .options(Arrays.asList(RequestMidjourneyOptionss.builder().build()))\n                                .build())\n                        .build())\n                .build());\n\n    }\n\n\n    /**\n     * Call ImageUpscale service\n     * @param\n     */", "    public void upscale(int index, String messageId, String messageHash) {\n         sendRequest( ReqUpscaleDiscord.builder()\n                .guildId(midjourneyBotConfiguration.getDiscordConfig().getServerId())\n                .channelId(midjourneyBotConfiguration.getDiscordConfig().getChannelId())\n                .messageId(messageId)\n                .data(new ReqUpscaleData(index,messageHash))\n                .build());\n    }\n\n    /**\n     * Call ImageVariation service\n     * @param index\n     * @param messageId\n     * @param messageHash\n     */\n    @Override", "    public void variate(int index, String messageId, String messageHash) {\n        sendRequest(ReqVariationDiscord.builder()\n                .guildId(midjourneyBotConfiguration.getDiscordConfig().getServerId())\n                .channelId(midjourneyBotConfiguration.getDiscordConfig().getChannelId())\n                .messageId(messageId)\n                .data(new ReqVariationData(index,messageHash))\n                .build()\n        );\n    }\n\n    @Override", "    public void maxUpscale(String messageId, String messageHash) {\n        sendRequest(ReqMaxUpscaleDiscord.builder()\n                .guildId(midjourneyBotConfiguration.getDiscordConfig().getServerId())\n                .channelId(midjourneyBotConfiguration.getDiscordConfig().getChannelId())\n                .messageId(messageId)\n                .data(new ReqMaxUpscaleData(messageHash))\n                .build());\n    }\n\n    @Override\n    public void reSet(String messageId, String messageHash) {\n        sendRequest(ReqReSetUpscaleDiscord.builder()\n                .guildId(midjourneyBotConfiguration.getDiscordConfig().getServerId())\n                .channelId(midjourneyBotConfiguration.getDiscordConfig().getChannelId())\n                .messageId(messageId)\n                .data(new ReqReSetUpscaleData(messageHash))\n                .build());\n    }\n\n\n\n\n    /**\n     * request DISCORD_API_URL\n     * @param requestBody\n     */\n    private void sendRequest(Object requestBody) {\n        webClient.post()\n                .uri(DISCORD_API_URL)\n                .contentType(MediaType.APPLICATION_JSON)\n                .header(\"Authorization\", midjourneyBotConfiguration.getDiscordConfig().getUserToken())\n                .body(BodyInserters.fromValue(requestBody))\n                .retrieve()\n                .bodyToMono(String.class)\n                .subscribe(response -> log.info(\"Upscale response: \" + response),\n                        error -> log.error(\"Error: \" + error.getMessage()));\n    }\n}\n", "    public void reSet(String messageId, String messageHash) {\n        sendRequest(ReqReSetUpscaleDiscord.builder()\n                .guildId(midjourneyBotConfiguration.getDiscordConfig().getServerId())\n                .channelId(midjourneyBotConfiguration.getDiscordConfig().getChannelId())\n                .messageId(messageId)\n                .data(new ReqReSetUpscaleData(messageHash))\n                .build());\n    }\n\n\n\n\n    /**\n     * request DISCORD_API_URL\n     * @param requestBody\n     */\n    private void sendRequest(Object requestBody) {\n        webClient.post()\n                .uri(DISCORD_API_URL)\n                .contentType(MediaType.APPLICATION_JSON)\n                .header(\"Authorization\", midjourneyBotConfiguration.getDiscordConfig().getUserToken())\n                .body(BodyInserters.fromValue(requestBody))\n                .retrieve()\n                .bodyToMono(String.class)\n                .subscribe(response -> log.info(\"Upscale response: \" + response),\n                        error -> log.error(\"Error: \" + error.getMessage()));\n    }\n}\n"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/dto/RequestTrigger.java", "chunked_list": ["package com.qjc.midjourney.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.experimental.Accessors;\n\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@Accessors(chain = true)\npublic class RequestTrigger {\n    private String type;\n    private String discordMsgId;\n    private String msgHash;\n    private String prompt;\n    private int index;\n}"]}
{"filename": "midjourney-bot-api-java/src/main/java/com/qjc/midjourney/event/DiscordEventHandler.java", "chunked_list": ["package com.qjc.midjourney.event;\n\nimport com.alibaba.fastjson.JSONObject;\nimport com.qjc.midjourney.config.DiscordConfig;\nimport com.qjc.midjourney.config.MidjourneyBotConfiguration;\nimport com.qjc.midjourney.enums.Scene;\nimport lombok.extern.slf4j.Slf4j;\nimport net.dv8tion.jda.api.MessageBuilder;\nimport net.dv8tion.jda.api.OnlineStatus;\nimport net.dv8tion.jda.api.Permission;", "import net.dv8tion.jda.api.OnlineStatus;\nimport net.dv8tion.jda.api.Permission;\nimport net.dv8tion.jda.api.entities.*;\n\nimport net.dv8tion.jda.api.events.message.MessageReceivedEvent;\nimport net.dv8tion.jda.api.events.message.MessageUpdateEvent;\nimport net.dv8tion.jda.api.hooks.ListenerAdapter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;", "import org.springframework.stereotype.Component;\nimport org.springframework.web.reactive.function.client.WebClient;\n\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.EnumSet;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n/**", "import java.util.Map;\n/**\n * The type DiscordEventHandler event trigger .\n *\n * @author qjch\n * @email 1071643762@qq.com\n */\n@Component\n@Slf4j\npublic class DiscordEventHandler extends ListenerAdapter {\n\n    private final MidjourneyBotConfiguration midjourneyBotConfiguration;\n    private final WebClient webClient;\n\n    @Autowired\n    public DiscordEventHandler(MidjourneyBotConfiguration midjourneyBotConfiguration, WebClient.Builder webClientBuilder) {\n        this.midjourneyBotConfiguration = midjourneyBotConfiguration;\n        this.webClient = webClientBuilder.build();\n    }\n\n    @Override", "@Slf4j\npublic class DiscordEventHandler extends ListenerAdapter {\n\n    private final MidjourneyBotConfiguration midjourneyBotConfiguration;\n    private final WebClient webClient;\n\n    @Autowired\n    public DiscordEventHandler(MidjourneyBotConfiguration midjourneyBotConfiguration, WebClient.Builder webClientBuilder) {\n        this.midjourneyBotConfiguration = midjourneyBotConfiguration;\n        this.webClient = webClientBuilder.build();\n    }\n\n    @Override", "    public void onMessageReceived(MessageReceivedEvent event) {\n        Message message = event.getMessage();\n        MessageChannel channel = event.getChannel();\n        User author = event.getAuthor();\n\n        if (!channel.getId().equals(midjourneyBotConfiguration.getDiscordConfig().getChannelId()) ||\n                author.getId().equals(event.getJDA().getSelfUser().getId())) {\n            return;\n        }\n\n        if (message.getContentRaw().contains(\"(Waiting to start)\") && !message.getContentRaw().contains(\"Rerolling **\")) {\n            trigger(message.getContentRaw(), Scene.FIRST_TRIGGER);\n            return;\n        }\n", "        if (message.getContentRaw().contains(\"(Waiting to start)\") && !message.getContentRaw().contains(\"Rerolling **\")) {\n            trigger(message.getContentRaw(), Scene.FIRST_TRIGGER);\n            return;\n        }\n\n        for (Message.Attachment attachment : message.getAttachments()) {\n            if (attachment.isImage()) {\n                replay(attachment);\n                return;\n            }\n        }\n    }\n    private void test(){\n      /*  JSONObject jsonObject =new JSONObject();\n        jsonObject.put(\"id\", attachment.getId());\n        jsonObject.put(\"url\", attachment.getUrl());\n        jsonObject.put(\"proxyUrl\", attachment.getProxyUrl());\n        jsonObject.put(\"fileName\", attachment.getFileName());\n        jsonObject.put(\"contentType\", attachment.getContentType());\n        jsonObject.put(\"description\", attachment.getDescription());\n        jsonObject.put(\"size\", attachment.getSize());\n        jsonObject.put(\"height\", attachment.getHeight());\n        jsonObject.put(\"width\", attachment.getWidth());*/\n    }\n\n    @Override", "    public void onMessageUpdate(MessageUpdateEvent event) {\n        Message message = event.getMessage();\n        MessageChannel channel = event.getChannel();\n        User author = event.getAuthor();\n\n        if (!channel.getId().equals(midjourneyBotConfiguration.getDiscordConfig()\n                .getChannelId()) || author.getId().equals(event.getJDA().getSelfUser().getId())) {\n            return;\n        }\n\n        if (message.getContentRaw().contains(\"(Stopped)\")) {\n            trigger(message.getContentRaw(), Scene.GENERATE_EDIT_ERROR);\n        }\n    }\n\n    private void replay(Message.Attachment attachment ) {\n      /*  //\u83b7\u53d6\u670d\u52a1\u5668\uff08\u516c\u4f1a\uff09\u4fe1\u606f\n        Guild guild = message.getGuild();\n        String guildId = guild.getId();\n        String guildName = guild.getName();\n\n        System.out.println(\"guildId = \" + guildId);//\u8f93\u51fa\u670d\u52a1\u5668\uff08\u516c\u4f1a\uff09id\n        System.out.println(\"guildName = \" + guildName);//\u8f93\u51fa\u670d\u52a1\u5668\uff08\u516c\u4f1a\uff09\u540d\u79f0\n\n        //\u83b7\u53d6\u9891\u9053\u4fe1\u606f\n        MessageChannel channel = message.getChannel();\n        String channelId = channel.getId();\n        String channelName = channel.getName();\n        ChannelType channelType = channel.getType();\n        System.out.println(\"channelId = \" + channelId);//\u8f93\u51fa\u9891\u9053id\n        System.out.println(\"channelName = \" + channelName);//\u8f93\u51fa\u9891\u9053\u540d\u79f0\n        System.out.println(\"channelType = \" + channelType);//\u8f93\u51fa\u9891\u9053\u7c7b\u578b\n\n        //\u83b7\u53d6\u53d1\u6d88\u606f\u4eba\n        Member member = message.getMember();\n        String memberId = member.getId();\n        String memberNickname = member.getNickname();\n        String memberEffectiveName = member.getEffectiveName();\n        List<Role> memberRoles = member.getRoles();\n        EnumSet<Permission> memberPermissions = member.getPermissions();\n        OnlineStatus memberOnlineStatus = member.getOnlineStatus();\n        System.out.println(\"memberId = \" + memberId);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684id\n        System.out.println(\"memberNickname = \" + memberNickname);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u6635\u79f0\n        System.out.println(\"memberEffectiveName = \" + memberEffectiveName);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u6709\u6548\u540d\u79f0\n        System.out.println(\"memberRoles = \" + memberRoles);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u89d2\u8272\u5217\u8868\n        System.out.println(\"memberPermissions = \" + memberPermissions);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u6743\u9650\u5217\u8868\n        System.out.println(\"memberOnlineStatus = \" + memberOnlineStatus);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u5728\u7ebf\u72b6\u6001\n\n        //\u83b7\u53d6\u6d88\u606f\u4fe1\u606f\n        String messageId = message.getId();\n        String messageContentRaw = message.getContentRaw();\n        MessageType messageType = message.getType();\n        System.out.println(\"messageId = \" + messageId);//\u8f93\u51fa\u6d88\u606fid\n        System.out.println(\"messageContentRaw = \" + messageContentRaw);//\u8f93\u51fa\u6d88\u606f\u5185\u5bb9\n        System.out.println(\"messageType = \" + messageType);//\u8f93\u51fa\u6d88\u606f\u7c7b\u578b*/\n//\u622a\u53d6  \u6587\u4ef6\u540d\u79f0  hrldaiz_Cute_Magical_Flying_Dogs_fantasy_art_drawn_by_Disney_co_450bfebf-ff51-4ed3-83ec-273c665f4414.png\n        String fileName = attachment.getFileName();\n        String[] keys = fileName.split(\"_\", -1);\n\n        com.alibaba.fastjson.JSONObject jsonObject =new JSONObject();\n        jsonObject.put(\"id\", attachment.getId());\n        jsonObject.put(\"url\", attachment.getUrl());\n        jsonObject.put(\"proxyUrl\", attachment.getProxyUrl());\n        jsonObject.put(\"fileName\", attachment.getFileName());\n        jsonObject.put(\"contentType\", attachment.getContentType());\n        jsonObject.put(\"description\", attachment.getDescription());\n        jsonObject.put(\"size\", attachment.getSize());\n        jsonObject.put(\"height\", attachment.getHeight());\n        jsonObject.put(\"width\", attachment.getWidth());\n\n        String images = keys[keys.length - 1];\n        String msgHash = images.split(\"\\\\.\")[0];\n        jsonObject.put(\"msgHash\",msgHash);\n\n        DateTimeFormatter df = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        LocalDateTime time = LocalDateTime.now();\n        String localTime = df.format(time);\n        jsonObject.put(\"date\",localTime);\n\n        //\u62fc\u63a5\u8def\u5f84\uff0c\u6570\u636e\u5e93\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u8be5\u8def\u5f84\uff0c\u8fd4\u56de\u524d\u7aef\uff0c\u524d\u7aef\u5373\u53ef\u8bbf\u95ee\n        log.info(\"MessageMetadataRegistry:\"+jsonObject.toJSONString());\n        Map<String, Object> body = new HashMap<>();\n        body.put(\"discord\", jsonObject);\n        body.put(\"type\", Scene.GENERATE_END);\n        request(body);\n    }\n\n\n\n\n\n    private void trigger(String content, Scene scene) {\n        Map<String, Object> body = new HashMap<>();\n        body.put(\"content\", content);\n        body.put(\"type\", scene);\n        request(body);\n    }\n\n    private void request(Map<String, Object> params) {\n        webClient.post()\n                .uri(midjourneyBotConfiguration.getCallBackConfig().getUrl())\n                .bodyValue(params)\n                .retrieve()\n                .bodyToMono(String.class)\n                .subscribe(response -> log.info(\"Upscale response: \" + response),\n                        error -> log.error(\"Error: \" + error.getMessage()));\n    }\n\n\n}", "        if (message.getContentRaw().contains(\"(Stopped)\")) {\n            trigger(message.getContentRaw(), Scene.GENERATE_EDIT_ERROR);\n        }\n    }\n\n    private void replay(Message.Attachment attachment ) {\n      /*  //\u83b7\u53d6\u670d\u52a1\u5668\uff08\u516c\u4f1a\uff09\u4fe1\u606f\n        Guild guild = message.getGuild();\n        String guildId = guild.getId();\n        String guildName = guild.getName();\n\n        System.out.println(\"guildId = \" + guildId);//\u8f93\u51fa\u670d\u52a1\u5668\uff08\u516c\u4f1a\uff09id\n        System.out.println(\"guildName = \" + guildName);//\u8f93\u51fa\u670d\u52a1\u5668\uff08\u516c\u4f1a\uff09\u540d\u79f0\n\n        //\u83b7\u53d6\u9891\u9053\u4fe1\u606f\n        MessageChannel channel = message.getChannel();\n        String channelId = channel.getId();\n        String channelName = channel.getName();\n        ChannelType channelType = channel.getType();\n        System.out.println(\"channelId = \" + channelId);//\u8f93\u51fa\u9891\u9053id\n        System.out.println(\"channelName = \" + channelName);//\u8f93\u51fa\u9891\u9053\u540d\u79f0\n        System.out.println(\"channelType = \" + channelType);//\u8f93\u51fa\u9891\u9053\u7c7b\u578b\n\n        //\u83b7\u53d6\u53d1\u6d88\u606f\u4eba\n        Member member = message.getMember();\n        String memberId = member.getId();\n        String memberNickname = member.getNickname();\n        String memberEffectiveName = member.getEffectiveName();\n        List<Role> memberRoles = member.getRoles();\n        EnumSet<Permission> memberPermissions = member.getPermissions();\n        OnlineStatus memberOnlineStatus = member.getOnlineStatus();\n        System.out.println(\"memberId = \" + memberId);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684id\n        System.out.println(\"memberNickname = \" + memberNickname);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u6635\u79f0\n        System.out.println(\"memberEffectiveName = \" + memberEffectiveName);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u6709\u6548\u540d\u79f0\n        System.out.println(\"memberRoles = \" + memberRoles);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u89d2\u8272\u5217\u8868\n        System.out.println(\"memberPermissions = \" + memberPermissions);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u6743\u9650\u5217\u8868\n        System.out.println(\"memberOnlineStatus = \" + memberOnlineStatus);//\u8f93\u51fa\u53d1\u9001\u6d88\u606f\u4eba\u7684\u5728\u7ebf\u72b6\u6001\n\n        //\u83b7\u53d6\u6d88\u606f\u4fe1\u606f\n        String messageId = message.getId();\n        String messageContentRaw = message.getContentRaw();\n        MessageType messageType = message.getType();\n        System.out.println(\"messageId = \" + messageId);//\u8f93\u51fa\u6d88\u606fid\n        System.out.println(\"messageContentRaw = \" + messageContentRaw);//\u8f93\u51fa\u6d88\u606f\u5185\u5bb9\n        System.out.println(\"messageType = \" + messageType);//\u8f93\u51fa\u6d88\u606f\u7c7b\u578b*/\n//\u622a\u53d6  \u6587\u4ef6\u540d\u79f0  hrldaiz_Cute_Magical_Flying_Dogs_fantasy_art_drawn_by_Disney_co_450bfebf-ff51-4ed3-83ec-273c665f4414.png\n        String fileName = attachment.getFileName();\n        String[] keys = fileName.split(\"_\", -1);\n\n        com.alibaba.fastjson.JSONObject jsonObject =new JSONObject();\n        jsonObject.put(\"id\", attachment.getId());\n        jsonObject.put(\"url\", attachment.getUrl());\n        jsonObject.put(\"proxyUrl\", attachment.getProxyUrl());\n        jsonObject.put(\"fileName\", attachment.getFileName());\n        jsonObject.put(\"contentType\", attachment.getContentType());\n        jsonObject.put(\"description\", attachment.getDescription());\n        jsonObject.put(\"size\", attachment.getSize());\n        jsonObject.put(\"height\", attachment.getHeight());\n        jsonObject.put(\"width\", attachment.getWidth());\n\n        String images = keys[keys.length - 1];\n        String msgHash = images.split(\"\\\\.\")[0];\n        jsonObject.put(\"msgHash\",msgHash);\n\n        DateTimeFormatter df = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n        LocalDateTime time = LocalDateTime.now();\n        String localTime = df.format(time);\n        jsonObject.put(\"date\",localTime);\n\n        //\u62fc\u63a5\u8def\u5f84\uff0c\u6570\u636e\u5e93\u4e2d\u53ef\u4ee5\u76f4\u63a5\u4fdd\u5b58\u8be5\u8def\u5f84\uff0c\u8fd4\u56de\u524d\u7aef\uff0c\u524d\u7aef\u5373\u53ef\u8bbf\u95ee\n        log.info(\"MessageMetadataRegistry:\"+jsonObject.toJSONString());\n        Map<String, Object> body = new HashMap<>();\n        body.put(\"discord\", jsonObject);\n        body.put(\"type\", Scene.GENERATE_END);\n        request(body);\n    }\n\n\n\n\n\n    private void trigger(String content, Scene scene) {\n        Map<String, Object> body = new HashMap<>();\n        body.put(\"content\", content);\n        body.put(\"type\", scene);\n        request(body);\n    }\n\n    private void request(Map<String, Object> params) {\n        webClient.post()\n                .uri(midjourneyBotConfiguration.getCallBackConfig().getUrl())\n                .bodyValue(params)\n                .retrieve()\n                .bodyToMono(String.class)\n                .subscribe(response -> log.info(\"Upscale response: \" + response),\n                        error -> log.error(\"Error: \" + error.getMessage()));\n    }\n\n\n}"]}
