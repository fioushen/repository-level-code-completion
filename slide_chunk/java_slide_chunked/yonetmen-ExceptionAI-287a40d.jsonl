{"filename": "src/main/java/com/ksmgl/exceptionai/action/CodeEditorAction.java", "chunked_list": ["package com.ksmgl.exceptionai.action;\n\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.editor.markup.HighlighterLayer;\nimport com.intellij.openapi.editor.markup.HighlighterTargetArea;\nimport com.intellij.openapi.editor.markup.RangeHighlighter;\nimport com.intellij.openapi.editor.markup.TextAttributes;\nimport com.intellij.openapi.fileEditor.FileEditorManager;", "import com.intellij.openapi.editor.markup.TextAttributes;\nimport com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileEditor.OpenFileDescriptor;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.roots.ProjectRootManager;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.psi.JavaPsiFacade;\nimport com.intellij.psi.PsiClass;\nimport com.intellij.psi.PsiFile;\nimport com.intellij.psi.search.GlobalSearchScope;", "import com.intellij.psi.PsiFile;\nimport com.intellij.psi.search.GlobalSearchScope;\nimport com.intellij.ui.JBColor;\nimport kotlin.Pair;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.awt.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;", "import java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class CodeEditorAction {\n\n  private static final Map<Pair<String, Integer>, RangeHighlighter> HIGHLIGHTERS = new HashMap<>();\n  private static final JBColor HIGHLIGHT_COLOR =\n      new JBColor(new Color(33, 66, 131, 255), new Color(33, 66, 131, 255));\n  private static final TextAttributes HIGHLIGHT_ATTRIBUTES =\n      new TextAttributes(null, HIGHLIGHT_COLOR, null, null, 0);\n", "  public void handleExceptionTrace(@NotNull Project project, String line, Pattern pattern) {\n    Matcher matcher = pattern.matcher(line);\n    if (PluginToggleAction.isEnabled()) {\n      ApplicationManager.getApplication().runReadAction(() -> {\n        while (matcher.find()) {\n          String className = matcher.group(1);\n          int lineNumber;\n          try {\n            lineNumber = Integer.parseInt(matcher.group(4));\n          } catch (NumberFormatException e) {\n            continue;\n          }\n\n          PsiClass psiClass = getClassFromProject(project, className);", "          if (psiClass != null) {\n            navigateAndHighlightLine(project, psiClass, lineNumber);\n          }\n        }\n      });\n    }\n  }\n\n  private PsiClass getClassFromProject(Project project, String className) {\n    PsiClass psiClass = JavaPsiFacade.getInstance(project)\n        .findClass(className, GlobalSearchScope.projectScope(project));", "    if (psiClass != null) {\n      VirtualFile classFile = psiClass.getContainingFile().getVirtualFile();\n      boolean isInSourceRoot = ProjectRootManager.getInstance(project)\n          .getFileIndex().isInSourceContent(classFile);\n      if (isInSourceRoot) {\n        return psiClass;\n      }\n    }\n    return null;\n  }\n\n  private void navigateAndHighlightLine(Project project, PsiClass psiClass, int lineNumber) {\n    PsiFile psiFile = psiClass.getContainingFile();", "    if (psiFile != null) {\n      VirtualFile virtualFile = psiFile.getVirtualFile();\n      if (virtualFile != null) {\n        OpenFileDescriptor descriptor = new OpenFileDescriptor(project, virtualFile, lineNumber - 1);\n        ApplicationManager.getApplication().invokeLater(() -> {\n          if (descriptor.canNavigate()) {\n            descriptor.navigate(true);\n            final Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();\n            if (editor != null) {\n              highlightLineInEditor(editor, descriptor, psiClass, lineNumber);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  private void highlightLineInEditor(\n      Editor editor,\n      OpenFileDescriptor descriptor,\n      PsiClass psiClass,\n      int lineNumber) {\n    Runnable[] command = new Runnable[1];\n    command[0] = () -> {", "            if (editor != null) {\n              highlightLineInEditor(editor, descriptor, psiClass, lineNumber);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  private void highlightLineInEditor(\n      Editor editor,\n      OpenFileDescriptor descriptor,\n      PsiClass psiClass,\n      int lineNumber) {\n    Runnable[] command = new Runnable[1];\n    command[0] = () -> {", "      if (editor.getCaretModel().getOffset() == descriptor.getOffset()) {\n        editor.getSelectionModel().selectLineAtCaret();\n        Document document = editor.getDocument();\n        int lineStartOffset = document.getLineStartOffset(lineNumber - 1);\n        int lineEndOffset = document.getLineEndOffset(lineNumber - 1);\n\n        Pair<String, Integer> key = new Pair<>(psiClass.getQualifiedName(), lineNumber);\n        RangeHighlighter existingHighlighter = HIGHLIGHTERS.get(key);\n        if (existingHighlighter == null || !existingHighlighter.isValid()) {\n          RangeHighlighter highlighter = editor.getMarkupModel()\n              .addRangeHighlighter(\n                  lineStartOffset,\n                  lineEndOffset,\n                  HighlighterLayer.ERROR,\n                  HIGHLIGHT_ATTRIBUTES,\n                  HighlighterTargetArea.LINES_IN_RANGE);\n          HIGHLIGHTERS.put(key, highlighter);\n        }\n      } else {\n        editor.getCaretModel().moveToOffset(descriptor.getOffset());\n        ApplicationManager.getApplication().invokeLater(command[0]);\n      }\n    };\n    command[0].run();\n  }\n", "        if (existingHighlighter == null || !existingHighlighter.isValid()) {\n          RangeHighlighter highlighter = editor.getMarkupModel()\n              .addRangeHighlighter(\n                  lineStartOffset,\n                  lineEndOffset,\n                  HighlighterLayer.ERROR,\n                  HIGHLIGHT_ATTRIBUTES,\n                  HighlighterTargetArea.LINES_IN_RANGE);\n          HIGHLIGHTERS.put(key, highlighter);\n        }\n      } else {\n        editor.getCaretModel().moveToOffset(descriptor.getOffset());\n        ApplicationManager.getApplication().invokeLater(command[0]);\n      }\n    };\n    command[0].run();\n  }\n", "  public void clearAllHighlights() {\n    ApplicationManager.getApplication().invokeLater(() -> {\n      for (Map.Entry<Pair<String, Integer>, RangeHighlighter> entry : HIGHLIGHTERS.entrySet()) {\n        entry.getValue().dispose();\n      }\n      HIGHLIGHTERS.clear();\n    });\n  }\n}"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/action/PluginToggleAction.java", "chunked_list": ["package com.ksmgl.exceptionai.action;\n\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.Presentation;\nimport com.intellij.openapi.actionSystem.Toggleable;\nimport com.intellij.openapi.util.Key;\nimport org.jetbrains.annotations.NotNull;\n\nimport static com.ksmgl.exceptionai.gui.icon.ToggleIcon.TOGGLE_OFF;", "\nimport static com.ksmgl.exceptionai.gui.icon.ToggleIcon.TOGGLE_OFF;\nimport static com.ksmgl.exceptionai.gui.icon.ToggleIcon.TOGGLE_ON;\n\npublic class PluginToggleAction extends AnAction implements Toggleable {\n  private static boolean isEnabled = true;\n\n  public PluginToggleAction() {\n    super(\"Toggle On ExceptionAI\");\n  }\n", "  public static boolean isEnabled() {\n    return isEnabled;\n  }\n\n  @Override\n  public void actionPerformed(@NotNull AnActionEvent event) {\n    isEnabled = !isEnabled;\n  }\n\n  @Override\n  public void update(@NotNull AnActionEvent event) {\n    super.update(event);\n    Presentation presentation = event.getPresentation();\n    presentation.putClientProperty(Key.create(\"selected\"), isEnabled);\n    presentation.setEnabled(true);\n    presentation.setIcon(isEnabled ? TOGGLE_ON : TOGGLE_OFF);\n    presentation.setDescription(\"Toggle ExceptionAI\");\n    presentation.setText(isEnabled ? \"Turn Off ExceptionAI\" : \"Turn On ExceptionAI\");\n  }\n}", "  public void update(@NotNull AnActionEvent event) {\n    super.update(event);\n    Presentation presentation = event.getPresentation();\n    presentation.putClientProperty(Key.create(\"selected\"), isEnabled);\n    presentation.setEnabled(true);\n    presentation.setIcon(isEnabled ? TOGGLE_ON : TOGGLE_OFF);\n    presentation.setDescription(\"Toggle ExceptionAI\");\n    presentation.setText(isEnabled ? \"Turn Off ExceptionAI\" : \"Turn On ExceptionAI\");\n  }\n}"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/action/ShowSuggestionAction.java", "chunked_list": ["package com.ksmgl.exceptionai.action;\n\nimport com.intellij.execution.filters.Filter;\nimport com.intellij.execution.filters.HyperlinkInfo;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.editor.markup.TextAttributes;\nimport com.intellij.openapi.options.ShowSettingsUtil;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.ui.Messages;\nimport com.intellij.ui.JBColor;", "import com.intellij.openapi.ui.Messages;\nimport com.intellij.ui.JBColor;\nimport com.ksmgl.exceptionai.api.APIResponse;\nimport com.ksmgl.exceptionai.api.OpenAIClient;\nimport com.ksmgl.exceptionai.config.ExceptionAIConfigurable;\nimport com.ksmgl.exceptionai.config.OpenAIAPISettings;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\nimport java.awt.*;", "import javax.swing.*;\nimport java.awt.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ShowSuggestionAction {\n\n  private OpenAIClient openAiClient;\n\n  @Nullable\n  public Filter.Result handleSuggestionEvent(String line, int entireLength) {\n    // Show Suggestion\n    final Pattern EXCEPTION_PATTERN = Pattern.compile(\"(?<exception>\\\\S+Exception): (?<message>.*)\");\n    Matcher matcher = EXCEPTION_PATTERN.matcher(line);", "    if (PluginToggleAction.isEnabled() && matcher.find()) {\n      String exception = matcher.group(\"exception\");\n      String message = matcher.group(\"message\");\n\n      HyperlinkInfo hyperlinkInfo = p -> {\n        OpenAIAPISettings settings = OpenAIAPISettings.getInstance();\n        if (!settings.isConfigured()) {\n          showMissingApiKeyAlert(p);\n        } else {\n          openAiClient = new OpenAIClient(\n              settings.getApiKey(),\n              settings.getModel(),\n              settings.getTemperature(),\n              settings.getMaxTokens()\n          );\n          APIResponse apiResponse = openAiClient.getSuggestions(exception, message);\n          showSuggestion(p, apiResponse);\n        }\n      };\n      return new Filter.Result(0, entireLength, hyperlinkInfo,\n          new TextAttributes(JBColor.RED, null, null, null, Font.PLAIN));\n    }\n    return null;\n  }\n\n  private void showMissingApiKeyAlert(Project project) {\n    String message = \"Please set your OpenAI API key in the plugin settings.\";\n    String title = \"OpenAI API Key Missing\";\n    int messageType = JOptionPane.WARNING_MESSAGE;\n    JOptionPane.showMessageDialog(null, message, title, messageType);\n\n    showOpenAIAPISettings(project);\n  }\n\n  private void showOpenAIAPISettings(Project project) {\n    ShowSettingsUtil.getInstance().showSettingsDialog(project, ExceptionAIConfigurable.class);\n  }\n\n  private void showSuggestion(Project project, APIResponse apiResponse) {", "    try {\n      ApplicationManager.getApplication().invokeLater(() -> {\n        if (apiResponse.getCode() == 200) {\n          Messages.showMessageDialog(\n              project,\n              \"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());\n        } else {\n          Messages.showMessageDialog(\n              project,\n              apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());\n        }\n      });\n    } catch (Throwable t) {\n      // ignore.\n    }\n  }\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/config/ExceptionAIConfigurable.java", "chunked_list": ["package com.ksmgl.exceptionai.config;\n\nimport com.intellij.openapi.options.SearchableConfigurable;\nimport com.ksmgl.exceptionai.form.OpenAIAPISettingsForm;\nimport org.jetbrains.annotations.Nls;\nimport org.jetbrains.annotations.NonNls;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;", "\nimport javax.swing.*;\n\npublic class ExceptionAIConfigurable implements SearchableConfigurable {\n  private OpenAIAPISettingsForm form;\n  private final OpenAIAPISettings settings;\n\n  public ExceptionAIConfigurable() {\n    settings = OpenAIAPISettings.getInstance();\n  }\n\n  @Override\n  public @NotNull\n  @NonNls String getId() {\n    return \"ExceptionAI.Settings\";\n  }\n\n  @Nls(capitalization = Nls.Capitalization.Title)\n  @Override", "  public String getDisplayName() {\n    return \"ExceptionAI Settings\";\n  }\n\n  @Nullable\n  @Override\n  public JComponent createComponent() {\n    form = new OpenAIAPISettingsForm();\n    return form.getMainPanel();\n  }\n", "  public boolean isModified() {\n    if (form != null) {\n      return !form.getApiKey().equals(settings.getApiKey())\n          || !form.getModel().equals(settings.getModel())\n          || !form.getMaxTokens().equals(String.valueOf(settings.getMaxTokens()))\n          || !form.getTemperature().equals(String.valueOf(settings.getTemperature()));\n    }\n    return false;\n  }\n\n  @Override", "  public void apply() {\n    if (form != null) {\n      settings.setApiKey(form.getApiKey());\n      settings.setModel(form.getModel());\n      settings.setMaxTokens(getMaxTokensValue(form.getMaxTokens()));\n      settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));\n    }\n  }\n\n  @Override\n  public void reset() {", "  public void reset() {\n    if (form != null) {\n      form.setApiKey(settings.getApiKey());\n      form.setModel(settings.getModel());\n      form.setMaxTokens(String.valueOf(settings.getMaxTokens()));\n      form.setTemperature(String.valueOf(settings.getTemperature()));\n    }\n  }\n\n  @Override\n  public void disposeUIResources() {\n    form = null;\n  }\n\n  private double getMaxTemperatureValue(String temperature) {", "  public void disposeUIResources() {\n    form = null;\n  }\n\n  private double getMaxTemperatureValue(String temperature) {\n    try {\n      double value = Double.parseDouble(temperature);\n      if (value < 0) return 0.0;\n      if (value > 2) return 2.0;\n      return value;\n    } catch (Exception e) {\n      return 1.0;\n    }\n  }\n\n  private int getMaxTokensValue(String maxTokens) {", "      if (value > 2) return 2.0;\n      return value;\n    } catch (Exception e) {\n      return 1.0;\n    }\n  }\n\n  private int getMaxTokensValue(String maxTokens) {\n    try {\n      int value = Integer.parseInt(maxTokens);\n      if (value < 100) return 100;\n      return Math.min(value, 2048);\n    } catch (Exception e) {\n      return 100;\n    }\n  }\n}", "    try {\n      int value = Integer.parseInt(maxTokens);\n      if (value < 100) return 100;\n      return Math.min(value, 2048);\n    } catch (Exception e) {\n      return 100;\n    }\n  }\n}"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/config/OpenAIAPISettings.java", "chunked_list": ["package com.ksmgl.exceptionai.config;\n\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.components.State;\nimport com.intellij.openapi.components.Storage;\nimport com.intellij.util.xmlb.XmlSerializerUtil;\nimport org.apache.commons.lang.StringUtils;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;", "import org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\n@State(\n    name = \"ExceptionAIConfig\",\n    storages = {@Storage(\"ExceptionAIConfig.xml\")}\n)\npublic class OpenAIAPISettings implements PersistentStateComponent<OpenAIAPISettings.State> {\n\n  private static final OpenAIAPISettings instance =\n      ApplicationManager.getApplication().getService(OpenAIAPISettings.class);\n", "  public static class State {\n    public String apiKey = \"\";\n    public String model = \"gpt-3.5-turbo\";\n    public int maxTokens = 500;\n    public double temperature = 1;\n  }\n\n  private final State appState = new State();\n\n  public static OpenAIAPISettings getInstance() {\n    return instance;\n  }\n", "  public static OpenAIAPISettings getInstance() {\n    return instance;\n  }\n\n  public boolean isConfigured() {\n    return !StringUtils.isBlank(appState.apiKey) && !StringUtils.isBlank(appState.model);\n  }\n\n  public String getApiKey() {\n    return appState.apiKey;\n  }\n", "  public String getApiKey() {\n    return appState.apiKey;\n  }\n\n  public void setApiKey(String apiKey) {\n    appState.apiKey = apiKey;\n  }\n\n  public String getModel() {\n    return appState.model;\n  }\n", "  public String getModel() {\n    return appState.model;\n  }\n\n  public void setModel(String model) {\n    appState.model = model;\n  }\n\n  public int getMaxTokens() {\n    return appState.maxTokens;\n  }\n", "  public int getMaxTokens() {\n    return appState.maxTokens;\n  }\n\n  public void setMaxTokens(int maxTokens) {\n    appState.maxTokens = maxTokens;\n  }\n\n  public double getTemperature() {\n    return appState.temperature;\n  }\n", "  public double getTemperature() {\n    return appState.temperature;\n  }\n\n  public void setTemperature(double temperature) {\n    appState.temperature = temperature;\n  }\n\n  @Nullable\n  @Override\n  public State getState() {\n    return appState;\n  }\n\n  @Override", "  public State getState() {\n    return appState;\n  }\n\n  @Override\n  public void loadState(@NotNull State state) {\n    XmlSerializerUtil.copyBean(state, appState);\n  }\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/filter/ExceptionFilter.java", "chunked_list": ["package com.ksmgl.exceptionai.filter;\n\nimport com.intellij.execution.filters.ConsoleFilterProvider;\nimport com.intellij.execution.filters.Filter;\nimport com.intellij.openapi.project.Project;\nimport com.ksmgl.exceptionai.action.CodeEditorAction;\nimport com.ksmgl.exceptionai.action.ShowSuggestionAction;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.regex.Matcher;", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ExceptionFilter implements ConsoleFilterProvider {\n\n  private static final CodeEditorAction cea = new CodeEditorAction();\n  private static final ShowSuggestionAction ssa = new ShowSuggestionAction();\n  private static final Pattern TRACE_PATTERN =\n      Pattern.compile(\"at ([a-zA-Z0-9_$.]+)\\\\.([a-zA-Z0-9_$]+)\\\\(([A-Za-z0-9-_$.]+\\\\.java):(\\\\d+)\\\\)\");\n\n  @NotNull\n  @Override\n  public Filter[] getDefaultFilters(@NotNull Project project) {\n    cea.clearAllHighlights(); // Clearing all possible highlights after re-run\n    return new Filter[]{\n        (line, entireLength) -> {\n          Matcher matcher = TRACE_PATTERN.matcher(line);\n          // Check if line matches the pattern before processing", "          if (matcher.find()) {\n            // Open the Class file in Code Editor\n            cea.handleExceptionTrace(project, line, TRACE_PATTERN);\n          }\n          // Show suggestion about the Exception & Error message\n          return ssa.handleSuggestionEvent(line, entireLength);\n        }\n    };\n  }\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/gui/icon/ToggleIcon.java", "chunked_list": ["package com.ksmgl.exceptionai.gui.icon;\n\nimport com.intellij.openapi.util.IconLoader;\n\nimport javax.swing.*;\n\npublic final class ToggleIcon {\n\n  private ToggleIcon() {}\n\n  public static final Icon TOGGLE_ON =\n      IconLoader.getIcon(\"/power_on.svg\", ToggleIcon.class.getClassLoader());", "  public static final Icon TOGGLE_ON =\n      IconLoader.getIcon(\"/power_on.svg\", ToggleIcon.class.getClassLoader());\n  public static final Icon TOGGLE_OFF =\n      IconLoader.getIcon(\"/power_off.svg\", ToggleIcon.class.getClassLoader());\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/form/OpenAIAPISettingsForm.java", "chunked_list": ["package com.ksmgl.exceptionai.form;\n\nimport com.intellij.openapi.ui.DialogWrapper;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\n\npublic class OpenAIAPISettingsForm {\n  private JPanel mainPanel;\n  private JTextField apiKeyTextField;\n  private JLabel apiKeyLabel;\n  private JTextField modelTextField;\n  private JLabel modelLabel;\n  private JTextField maxTokensTextField;\n  private JLabel maxTokenLabel;\n  private JTextField tempTextField;\n  private JLabel tempLabel;\n", "  public JPanel getMainPanel() {\n    return mainPanel;\n  }\n\n  public String getApiKey() {\n    return apiKeyTextField.getText();\n  }\n\n  public String getModel() {\n    return modelTextField.getText();\n  }\n", "  public String getModel() {\n    return modelTextField.getText();\n  }\n\n  public String getMaxTokens() {\n    return maxTokensTextField.getText();\n  }\n\n  public String getTemperature() {\n    return tempTextField.getText();\n  }\n", "  public String getTemperature() {\n    return tempTextField.getText();\n  }\n\n  public void setApiKey(String apiKey) {\n    apiKeyTextField.setText(apiKey);\n  }\n\n  public void setModel(String model) {\n    modelTextField.setText(model);\n  }\n", "  public void setModel(String model) {\n    modelTextField.setText(model);\n  }\n\n  public void setMaxTokens(String maxTokens) {\n    maxTokensTextField.setText(maxTokens);\n  }\n\n  public void setTemperature(String temperature) {\n    tempTextField.setText(temperature);\n  }\n", "  public void setTemperature(String temperature) {\n    tempTextField.setText(temperature);\n  }\n\n  public void show() {\n    DialogWrapper dialog = new DialogWrapper(true) {\n      {\n        init();\n      }\n\n      @Nullable\n      @Override\n      protected JComponent createCenterPanel() {\n        return mainPanel;\n      }\n    };\n    dialog.setTitle(\"OpenAI API Configuration\");\n    dialog.showAndGet();\n  }\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/api/OpenAIClient.java", "chunked_list": ["package com.ksmgl.exceptionai.api;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;", "import okhttp3.RequestBody;\nimport okhttp3.Response;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;", "import java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.ksmgl.exceptionai.api.ApiErrors.*;\n\npublic class OpenAIClient {\n  private static final String API_URL = \"https://api.openai.com/v1/chat/completions\";\n  private final OkHttpClient client;\n  private static final Gson gson = new Gson();\n  private final String apiKey;\n  private final String model;\n  private final double temperature;\n  private final int maxTokens;\n\n  public OpenAIClient(String apiKey, String model, double temperature, int maxTokens) {\n    this.client = new OkHttpClient.Builder()\n        .connectTimeout(30, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .writeTimeout(30, TimeUnit.SECONDS)\n        .build();\n    this.apiKey = apiKey;\n    this.model = model;\n    this.temperature = temperature;\n    this.maxTokens = maxTokens;\n  }\n", "  public APIResponse getSuggestions(String exception, String message) {\n    String prompt = String.format(\"I encountered a Java exception: %s with the message: %s. \" +\n        \"What are some possible solutions to fix this issue?\", exception, message);\n\n    Map<String, Object> requestBody = buildRequestBodyMap(prompt);\n    String jsonRequestBody = gson.toJson(requestBody);\n\n    RequestBody body = RequestBody.create(jsonRequestBody, MediaType.parse(\"application/json\"));\n\n    Request request = new Request.Builder()\n        .url(API_URL)\n        .addHeader(\"Content-Type\", \"application/json\")\n        .addHeader(\"Authorization\", String.format(\"Bearer %s\", this.apiKey))\n        .post(body)\n        .build();\n\n    String suggestion = \"\";\n    try (Response response = client.newCall(request).execute()) {", "      if (response.isSuccessful() && response.body() != null) {\n        String responseBody = response.body().string();\n        JsonObject jsonResponse = OpenAIClient.gson.fromJson(responseBody, JsonObject.class);\n        JsonArray choices = jsonResponse.getAsJsonArray(\"choices\");\n        if (choices.size() > 0) {\n          JsonObject jsonObject = choices.get(0).getAsJsonObject().getAsJsonObject(\"message\");\n          suggestion = jsonObject.get(\"content\").getAsString().trim();\n        }\n      } else if (response.code() == 401) {\n        return new APIResponse(401, AUTH_ERROR);\n      } else if (response.code() == 404) {\n        return new APIResponse(404, INVALID_MODEL_REQUEST_ERROR);", "      } else if (response.code() == 401) {\n        return new APIResponse(401, AUTH_ERROR);\n      } else if (response.code() == 404) {\n        return new APIResponse(404, INVALID_MODEL_REQUEST_ERROR);\n      } else if (response.code() == 429) {\n        return new APIResponse(429, INSUFFICIENT_QUOTA);\n      } else if (response.code() == 400) {\n        return new APIResponse(400, INVALID_REQUEST_ERROR);\n      } else if (response.code() == 500) {\n        return new APIResponse(500, INTERNAL_SERVER_ERROR);\n      }\n    } catch (IOException e) {\n      return new APIResponse(500, INTERNAL_SERVER_ERROR);\n    }\n    return new APIResponse(200, suggestion);\n  }\n\n  @NotNull\n  private Map<String, Object> buildRequestBodyMap(String prompt) {\n    Map<String, Object> requestBody = new HashMap<>();\n    requestBody.put(\"model\", this.model);\n    requestBody.put(\"temperature\", this.temperature);\n    requestBody.put(\"max_tokens\", this.maxTokens);\n\n    List<Map<String, String>> messages = new ArrayList<>();\n    Map<String, String> userMessage = new HashMap<>();\n    userMessage.put(\"role\", \"user\");\n    userMessage.put(\"content\", prompt);\n    messages.add(userMessage);\n    requestBody.put(\"messages\", messages);\n    return requestBody;\n  }\n\n}\n", "      } else if (response.code() == 500) {\n        return new APIResponse(500, INTERNAL_SERVER_ERROR);\n      }\n    } catch (IOException e) {\n      return new APIResponse(500, INTERNAL_SERVER_ERROR);\n    }\n    return new APIResponse(200, suggestion);\n  }\n\n  @NotNull\n  private Map<String, Object> buildRequestBodyMap(String prompt) {\n    Map<String, Object> requestBody = new HashMap<>();\n    requestBody.put(\"model\", this.model);\n    requestBody.put(\"temperature\", this.temperature);\n    requestBody.put(\"max_tokens\", this.maxTokens);\n\n    List<Map<String, String>> messages = new ArrayList<>();\n    Map<String, String> userMessage = new HashMap<>();\n    userMessage.put(\"role\", \"user\");\n    userMessage.put(\"content\", prompt);\n    messages.add(userMessage);\n    requestBody.put(\"messages\", messages);\n    return requestBody;\n  }\n\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/api/ApiErrors.java", "chunked_list": ["package com.ksmgl.exceptionai.api;\n\npublic final class ApiErrors {\n\n  private ApiErrors() {\n  }\n\n  public static final String AUTH_ERROR =\n      \"\\nIncorrect API key provided. \" +\n          \"You can find your API key at https://platform.openai.com/account/api-keys.\\n\\n\" +\n          \"To update your API Key and/or other settings:\\n\\n\" +\n          \"Go to \\\"File > Settings > ExceptionAI Settings\\\" \\n\\n\" +\n          \"If you are not sure how to configure these settings please follow the link below. \\n\\n\" +\n          \"https://platform.openai.com/docs/api-reference/completions/create\";\n", "  public static final String INSUFFICIENT_QUOTA =\n      \"\\nYou exceeded your current quota, please check your plan and billing details.\\n\\n\" +\n          \"You can check your usage at https://platform.openai.com/account/usage\";\n\n  public static final String INVALID_REQUEST_ERROR =\n      \"\\nThere was an error in your settings. Please make sure that you provided valid \" +\n          \"Model, Temperature and/or MaxTokens values.\\n\" +\n          \"See documentation: https://platform.openai.com/docs/api-reference/chat \\n\" +\n          \"See github for simplified guidance: https://github.com/yonetmen/ExceptionAI\";\n\n  public static final String INVALID_MODEL_REQUEST_ERROR =\n      \"\\nThe Model you want to use is not currently supported. \" +\n          \"If you don't know which model to choose, try 'gpt-3.5-turbo'.\\n\" +\n          \"See documentation: https://platform.openai.com/docs/api-reference/models \\n\";\n", "  public static final String INVALID_MODEL_REQUEST_ERROR =\n      \"\\nThe Model you want to use is not currently supported. \" +\n          \"If you don't know which model to choose, try 'gpt-3.5-turbo'.\\n\" +\n          \"See documentation: https://platform.openai.com/docs/api-reference/models \\n\";\n\n  public static final String INTERNAL_SERVER_ERROR =\n      \"\\nOpenAI API server had an error while processing your request.\\n\" +\n          \"Retry your request after a brief wait to see if the issue persists.\\n\" +\n          \"You can check OpenAI status page here: https://status.openai.com/\";\n\n}\n"]}
{"filename": "src/main/java/com/ksmgl/exceptionai/api/APIResponse.java", "chunked_list": ["package com.ksmgl.exceptionai.api;\n\npublic final class APIResponse {\n\n  private final int code;\n  private final String message;\n\n  public APIResponse(int code, String message) {\n    this.code = code;\n    this.message = message;\n  }\n", "  public int getCode() {\n    return code;\n  }\n\n  public String getMessage() {\n    return message;\n  }\n}\n"]}
