{"filename": "app/src/main/java/com/linsheng/FATJS/MyAccessibilityService.java", "chunked_list": ["package com.linsheng.FATJS;\n\nimport android.os.Environment;\nimport android.view.accessibility.AccessibilityEvent;\n\nimport androidx.annotation.RequiresApi;\n\nimport com.linsheng.FATJS.rpa.dyService.DyTaskService;\nimport com.linsheng.FATJS.utils.TimeUtil;\n", "import com.linsheng.FATJS.utils.TimeUtil;\n\nimport java.io.File;\n\npublic class MyAccessibilityService extends AccUtils {\n\n    private static final String TAG = \"FATJS\";\n\n    public MyAccessibilityService() {\n    }\n\n    /**\n     * \u76d1\u542c\u4e8b\u4ef6\u7684\u53d1\u751f\n     * @param accessibilityEvent\n     */\n    @Override\n    @RequiresApi(24)", "    public void onAccessibilityEvent(AccessibilityEvent accessibilityEvent) {\n\n        // \u5237\u65b0\u5f53\u524d Activity()\n        super.refreshCurrentActivity(accessibilityEvent);\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/AccUtils.java", "chunked_list": ["package com.linsheng.FATJS;\n\nimport android.accessibilityservice.AccessibilityService;\nimport android.accessibilityservice.GestureDescription;\nimport android.annotation.SuppressLint;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;", "import android.content.pm.PackageManager;\nimport android.content.pm.ResolveInfo;\nimport android.graphics.Path;\nimport android.graphics.Rect;\nimport android.util.Log;\nimport android.view.accessibility.AccessibilityEvent;\nimport android.view.accessibility.AccessibilityNodeInfo;\n\nimport androidx.annotation.RequiresApi;\n", "import androidx.annotation.RequiresApi;\n\nimport com.linsheng.FATJS.bean.Variable;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Random;", "import java.util.List;\nimport java.util.Random;\n\npublic class AccUtils extends AccessibilityService {\n    @SuppressLint(\"StaticFieldLeak\")\n    public static AccessibilityService AccessibilityHelper;\n    private static final String TAG = \"FATJS\";\n\n    public AccUtils() {\n        AccessibilityHelper = this;\n    }\n\n    @Override", "    public void onAccessibilityEvent(AccessibilityEvent accessibilityEvent) {}\n\n    // \u6682\u65f6\u6ca1\u6709\u7528\u5230\n    public static final String ACTION = \"action\";\n    public static final String CLICK = \"click\";\n    public static final String SLIDE = \"slide\";\n\n    public static File runTimeFile;\n\n    // \u8fd4\u56de\u7684\u8282\u70b9\n    private volatile static AccessibilityNodeInfo nodeInfoOut;\n    private volatile static List<AccessibilityNodeInfo> nodeInfoOutList;\n    private volatile static List<String> textList;\n\n    @Override", "    public void onCreate() {\n        super.onCreate();\n    }\n\n    /**\n     ************************************************\u5de5\u5177\u65b9\u6cd5*********************************************\n     ************************************************\u5de5\u5177\u65b9\u6cd5*********************************************\n     */\n\n    // \u79fb\u52a8\u60ac\u6d6e\u7a97\n    public static void moveFloatWindow(String val) {", "    public static void moveFloatWindow(String val) {\n        try {\n            AccUtils.printLogMsg(\"\u79fb\u52a8\u60ac\u6d6e\u7a97 => \" + val);\n            Intent intent = new Intent();\n            intent.setAction(\"com.msg\");\n            switch (val) {\n                case \"\u6253\u5f00\":\n                    intent.putExtra(\"msg\", \"show_max\");\n                    // \u66f4\u65b0\u6309\u94ae\n                    Variable.btnTextView.setText(\"\u5168\u5c4f\");\n                    break;\n                case \"\u9690\u85cf\":\n                    intent.putExtra(\"msg\", \"hide_mini\");\n                    // \u66f4\u65b0\u6309\u94ae\n                    Variable.btnTextView.setText(\"\u6253\u5f00\");\n                    break;\n                case \"\u5168\u5c4f\":\n                    intent.putExtra(\"msg\", \"full_screen\");\n                    // \u66f4\u65b0\u6309\u94ae\n                    Variable.btnTextView.setText(\"\u9690\u85cf\");\n                    break;\n            }\n            Variable.context.sendBroadcast(intent);\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    // \u65e5\u5fd7\u6253\u5370", "    public static void printLogMsg(String msg) {\n        Intent intent = new Intent();\n        intent.setAction(\"com.msg\");\n        intent.putExtra(\"msg\", msg);\n        Variable.context.sendBroadcast(intent);\n    }\n\n    /**\n     * *******************************************\u81ea\u5e26\u65b9\u6cd5\u5c01\u88c5**************************************************\n     */\n\n\n    @SuppressLint({\"InvalidWakeLockTag\", \"NewApi\"})", "    public static Boolean lockScreenNow() {\n        // \u7acb\u5373\u9501\u5c4f\n        try {\n            return AccessibilityHelper.performGlobalAction(AccessibilityService.GLOBAL_ACTION_LOCK_SCREEN);\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    public static Boolean back() {", "    public static Boolean back() {\n        try {\n            AccessibilityHelper.performGlobalAction(AccessibilityService.GLOBAL_ACTION_BACK);\n            return true;\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    public static Boolean home() {", "    public static Boolean home() {\n        try {\n            AccessibilityHelper.performGlobalAction(AccessibilityService.GLOBAL_ACTION_HOME);\n            return true;\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n", "    public static void waitToAlermClose() {\n        printLogMsg(\"\\n---------\\n---------\\n---------\\n---------\\n---------\\n---------\\n---------\\n---------\\n\");\n        printLogMsg(\"W: \" + Variable.mWidth + \" H: \" + Variable.mHeight);\n        timeSleep(6000);\n    }\n\n    /**\n     * *******************************************\u81ea\u5e26\u65b9\u6cd5\u5c01\u88c5**************************************************\n     */\n\n    /**\n     * *******************************************\u83b7\u53d6\u5c4f\u5e55\u5143\u7d20**************************************************\n     */\n\n    static class StopMsgException extends RuntimeException {\n    }\n\n    static class StopRunException extends RuntimeException {\n    }\n", "    public static AccessibilityNodeInfo getRootInActiveMy() {\n        for (int i = 0; i < 5; i++) {\n            AccessibilityNodeInfo root = AccessibilityHelper.getRootInActiveWindow();\n            if (root != null) {\n                return root;\n            }\n            timeSleep(500);\n        }\n        Log.w(TAG, \"getRootInActiveMy: do not find window\");\n        throw new StopRunException();\n    }\n\n    /**\n     * *******************************************\u83b7\u53d6\u5c4f\u5e55\u5143\u7d20**************************************************\n     */\n\n    /**\n     * *******************************************\u67e5\u627e\u5143\u7d20**************************************************\n     */\n\n    /**\n     * \u83b7\u53d6\u5f53\u524dActivity\n     */", "    public static String getCurrentActivityName() {\n        return Variable.currentActivityName;\n    }\n\n    /**\n     * \u5237\u65b0\u5f53\u524d Activity()\n     * @param accessibilityEvent\n     */\n    protected void refreshCurrentActivity(AccessibilityEvent accessibilityEvent) {\n        AccessibilityNodeInfo source = accessibilityEvent.getSource();\n", "        if (source != null) {\n            CharSequence packageName = source.getPackageName();\n            if (accessibilityEvent.getEventType() == accessibilityEvent.TYPE_WINDOW_STATE_CHANGED) {\n\n                //\u83b7\u53d6\u5f53\u524d\u7a97\u53e3activity\u540d\n                ComponentName componentName = new ComponentName(\n                        accessibilityEvent.getPackageName().toString(),\n                        accessibilityEvent.getClassName().toString()\n                );\n\n                try {\n                    String activityName = getPackageManager().getActivityInfo(componentName, 0).toString();\n                    activityName = activityName.substring(activityName.indexOf(\" \"), activityName.indexOf(\"}\"));\n                    Variable.currentActivityName = activityName;\n                     Log.i(TAG, \" => \" + Variable.currentActivityName);\n                } catch (PackageManager.NameNotFoundException e) {}\n            }\n        }\n    }\n\n    /**\n     * \u8fd4\u56de\u4e00\u4e2a\u6587\u5b57\u5217\u8868\uff0c\u5305\u542broot\u4e0b\u6240\u6709\u6587\u5b57\u5185\u5bb9\n     * @param root\n     * @return\n     */", "                try {\n                    String activityName = getPackageManager().getActivityInfo(componentName, 0).toString();\n                    activityName = activityName.substring(activityName.indexOf(\" \"), activityName.indexOf(\"}\"));\n                    Variable.currentActivityName = activityName;\n                     Log.i(TAG, \" => \" + Variable.currentActivityName);\n                } catch (PackageManager.NameNotFoundException e) {}\n            }\n        }\n    }\n\n    /**\n     * \u8fd4\u56de\u4e00\u4e2a\u6587\u5b57\u5217\u8868\uff0c\u5305\u542broot\u4e0b\u6240\u6709\u6587\u5b57\u5185\u5bb9\n     * @param root\n     * @return\n     */", "    public static List<String> findAllText(AccessibilityNodeInfo root) {\n        try {\n            textList = new ArrayList<>();\n            recursionFindAllText(root);\n            return textList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<String> findAllText() {", "    public static List<String> findAllText() {\n        try {\n            textList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindAllText(root);\n            return textList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindAllText(AccessibilityNodeInfo root) {\n        String text_tmp = String.valueOf(root.getText());", "        if (text_tmp != null && !\"\".equals(text_tmp) && !\"null\".equals(text_tmp)) {\n            textList.add(\"text\\t\" + text_tmp);\n        }\n        String desc_tmp = String.valueOf(root.getContentDescription());\n        if (desc_tmp != null && !\"\".equals(desc_tmp) && !\"null\".equals(desc_tmp)) {\n            textList.add(\"desc\\t\" + desc_tmp);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindAllText(root.getChild(i));\n        }\n    }\n\n    /**\n     * \u8fd4\u56de\u4e00\u4e2a\u6587\u5b57\u5217\u8868\uff0c\u5305\u542broot\u4e0b\u6240\u6709id\u5185\u5bb9\n     * @param root\n     * @return\n     */", "    public static List<String> findAllIds(AccessibilityNodeInfo root) {\n        try {\n            textList = new ArrayList<>();\n            recursionFindAllIds(root);\n            return textList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<String> findAllIds() {", "    public static List<String> findAllIds() {\n        try {\n            textList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindAllIds(root);\n            return textList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindAllIds(AccessibilityNodeInfo root) {\n        String id_tmp = String.valueOf(root.getViewIdResourceName());", "        if (id_tmp != null && !\"\".equals(id_tmp) && !\"null\".equals(id_tmp)) {\n            textList.add(id_tmp);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindAllIds(root.getChild(i));\n        }\n    }\n\n    /**\n     * \u8fd4\u56de\u4e00\u4e2a\u6587\u5b57\u5217\u8868\uff0c\u5305\u542broot\u4e0b\u6240\u6709className\u5185\u5bb9\n     * @param root\n     * @return\n     */", "    public static List<String> findAllClassName(AccessibilityNodeInfo root) {\n        try {\n            textList = new ArrayList<>();\n            recursionFindAllClassName(root);\n            return textList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<String> findAllClassName() {", "    public static List<String> findAllClassName() {\n        try {\n            textList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindAllClassName(root);\n            return textList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindAllClassName(AccessibilityNodeInfo root) {\n        String classname_tmp = String.valueOf(root.getClassName());", "        if (classname_tmp != null && !\"\".equals(classname_tmp) && !\"null\".equals(classname_tmp)) {\n            textList.add(classname_tmp);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindAllClassName(root.getChild(i));\n        }\n    }\n\n    /**\n     * \u6839\u636etext \u67e5\u627e\u5143\u7d20 \u539f\u751f\u65b9\u6cd5\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findAccessibilityNodesByText(String str_param) {\n        AccessibilityNodeInfo root = getRootInActiveMy();\n        List<AccessibilityNodeInfo> nodeInfoList = root.findAccessibilityNodeInfosByText(str_param);\n        if (nodeInfoList.size() > 0) {\n            return nodeInfoList.get(0);\n        }\n        return null;\n    }\n\n    /**\n     * \u770b\u770btext\u4e3axxx\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5e76\u4e14\u53ef\u70b9\u51fb\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findElementTextCanClick(AccessibilityNodeInfo root, String str_param) {\n        try {\n            recursionFindElementTextCanClick(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    public static AccessibilityNodeInfo findElementTextCanClick( String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementTextCanClick(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementTextCanClick(AccessibilityNodeInfo root, String str_param) {\n        CharSequence rootText = root.getText();", "    public static AccessibilityNodeInfo findElementTextCanClick( String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementTextCanClick(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementTextCanClick(AccessibilityNodeInfo root, String str_param) {\n        CharSequence rootText = root.getText();", "        if (rootText != null) {\n            String textStr = String.valueOf(rootText);\n            if (textStr.equals(str_param) && root.isClickable()) {\n                nodeInfoOut = root;\n                throw new StopMsgException();\n            }\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementTextCanClick(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u6839\u636eresourceId \u67e5\u627e\u5143\u7d20\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findElementById(AccessibilityNodeInfo root, String str_param) {\n        try {\n            recursionFindElementById(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    public static AccessibilityNodeInfo findElementById(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementById(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementById(AccessibilityNodeInfo root, String str_param) {\n        String viewIdResourceName = root.getViewIdResourceName();", "    public static AccessibilityNodeInfo findElementById(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementById(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementById(AccessibilityNodeInfo root, String str_param) {\n        String viewIdResourceName = root.getViewIdResourceName();", "        if (str_param.equals(viewIdResourceName)) {\n            nodeInfoOut = root;\n            throw new StopMsgException();\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementById(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u6839\u636eresourceId \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u5143\u7d20  \u8fd4\u56delist node\u90fd\u662f\u5305\u542b\u5173\u7cfb\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static List<AccessibilityNodeInfo> findElementListByContainId(AccessibilityNodeInfo root, String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            recursionFindElementListByContainId(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<AccessibilityNodeInfo> findElementListByContainId(String str_param) {", "    public static List<AccessibilityNodeInfo> findElementListByContainId(String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementListByContainId(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementListByContainId(AccessibilityNodeInfo root, String str_param) {\n        String viewIdResourceName = root.getViewIdResourceName();", "        if (viewIdResourceName != null && viewIdResourceName.contains(str_param)) {\n            nodeInfoOutList.add(root);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementListByContainId(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u6839\u636etext \u67e5\u627e\u5143\u7d20\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findElementByText(AccessibilityNodeInfo root, String str_param) {\n        try {\n            recursionFindElementByText(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    public static AccessibilityNodeInfo findElementByText(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByText(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementByText(AccessibilityNodeInfo root, String str_param) {\n        CharSequence rootText = root.getText();", "    public static AccessibilityNodeInfo findElementByText(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByText(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementByText(AccessibilityNodeInfo root, String str_param) {\n        CharSequence rootText = root.getText();", "        if (rootText != null) {\n            String textStr = String.valueOf(rootText);\n            if (str_param.equals(textStr)) {\n                nodeInfoOut = root;\n                throw new StopMsgException();\n            }\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementByText(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u6839\u636eclassName \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u5143\u7d20  \u8fd4\u56delist node\u90fd\u662f\u5305\u542b\u5173\u7cfb\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static List<AccessibilityNodeInfo> findElementListByContainClassName(AccessibilityNodeInfo root, String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            recursionFindElementListByContainClassName(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<AccessibilityNodeInfo> findElementListByContainClassName(String str_param) {", "    public static List<AccessibilityNodeInfo> findElementListByContainClassName(String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementListByContainClassName(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementListByContainClassName(AccessibilityNodeInfo root, String str_param) {\n        String rootClassName = String.valueOf(root.getClassName());", "        if (!\"\".equals(rootClassName) && rootClassName.contains(str_param)) {\n            nodeInfoOutList.add(root);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementListByContainClassName(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u67e5\u770b\u7b49\u4e8eDescription\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static List<AccessibilityNodeInfo> findElementListDescription(AccessibilityNodeInfo root, String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            recursionFindElementListDescription(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<AccessibilityNodeInfo> findElementListDescription(String str_param) {", "    public static List<AccessibilityNodeInfo> findElementListDescription(String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementListDescription(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementListDescription(AccessibilityNodeInfo root, String str_param) {\n        CharSequence rootText = root.getContentDescription();", "        if (rootText != null) {\n            String textStr = String.valueOf(rootText);\n            if (str_param.equals(textStr)) {\n                nodeInfoOutList.add(root);\n            }\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementListDescription(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u67e5\u770b\u7b49\u4e8eDescription\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findElementByDescription(AccessibilityNodeInfo root, String str_param) {\n        try {\n            recursionFindElementByDescription(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    public static AccessibilityNodeInfo findElementByDescription(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByDescription(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementByDescription(AccessibilityNodeInfo root, String str_param) {\n        String textStr = String.valueOf(root.getContentDescription());", "    public static AccessibilityNodeInfo findElementByDescription(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByDescription(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementByDescription(AccessibilityNodeInfo root, String str_param) {\n        String textStr = String.valueOf(root.getContentDescription());", "        if (str_param.equals(textStr)) {\n            nodeInfoOut = root;\n            throw new StopMsgException();\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementByDescription(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u67e5\u770b\u5305\u542bDescription\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findElementByContainDescription(AccessibilityNodeInfo root, String str_param) {\n        try {\n            recursionFindElementByContainDescription(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    public static AccessibilityNodeInfo findElementByContainDescription(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByContainDescription(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementByContainDescription(AccessibilityNodeInfo root, String str_param) {", "    public static AccessibilityNodeInfo findElementByContainDescription(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByContainDescription(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementByContainDescription(AccessibilityNodeInfo root, String str_param) {", "        if (root != null) {\n            CharSequence rootText = root.getContentDescription();\n            if (rootText != null) {\n                String textStr = String.valueOf(rootText);\n                if (textStr.contains(str_param)) {\n                    nodeInfoOut = root;\n                    throw new StopMsgException();\n                }\n            }\n            for (int i = 0; i < root.getChildCount(); i++) {\n                recursionFindElementByContainDescription(root.getChild(i), str_param);\n            }\n        }\n    }\n\n    /**\n     * \u6839\u636eDesc \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u5143\u7d20  \u8fd4\u56delist node\u90fd\u662f\u5305\u542b\u5173\u7cfb\n     * @param root\n     * @param str_param\n     * @return\n     */", "            for (int i = 0; i < root.getChildCount(); i++) {\n                recursionFindElementByContainDescription(root.getChild(i), str_param);\n            }\n        }\n    }\n\n    /**\n     * \u6839\u636eDesc \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u5143\u7d20  \u8fd4\u56delist node\u90fd\u662f\u5305\u542b\u5173\u7cfb\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static List<AccessibilityNodeInfo> findElementListByContainDescription(AccessibilityNodeInfo root, String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            recursionFindElementListByContainDescription(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<AccessibilityNodeInfo> findElementListByContainDescription(String str_param) {", "    public static List<AccessibilityNodeInfo> findElementListByContainDescription(String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementListByContainDescription(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementListByContainDescription(AccessibilityNodeInfo root, String str_param) {\n        String text = String.valueOf(root.getContentDescription());", "        if (text.contains(str_param)) {\n            nodeInfoOutList.add(root);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementListByContainDescription(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u770b\u770b\u5305\u542btext\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static AccessibilityNodeInfo findElementByContainText(AccessibilityNodeInfo root, String str_param) {\n        try {\n            recursionFindElementByContainText(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    public static AccessibilityNodeInfo findElementByContainText(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByContainText(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementByContainText(AccessibilityNodeInfo root, String str_param) {\n        String textStr = String.valueOf(root.getText());", "    public static AccessibilityNodeInfo findElementByContainText(String str_param) {\n        try {\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementByContainText(root, str_param);\n        }catch (StopMsgException e) {\n            return nodeInfoOut;\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20 \u5305\u542b\u67d0\u5b57\u7b26\u4e32\n    private static void recursionFindElementByContainText(AccessibilityNodeInfo root, String str_param) {\n        String textStr = String.valueOf(root.getText());", "        if (textStr.contains(str_param)) {\n            nodeInfoOut = root;\n            throw new StopMsgException();\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementByContainText(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * \u6839\u636etext \u67e5\u627e\u6240\u6709\u7b26\u5408\u7684\u5143\u7d20  \u8fd4\u56delist node\u90fd\u662f\u5305\u542b\u5173\u7cfb\n     * @param root\n     * @param str_param\n     * @return\n     */", "    public static List<AccessibilityNodeInfo> findElementListByContainText(AccessibilityNodeInfo root, String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            recursionFindElementListByContainText(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    public static List<AccessibilityNodeInfo> findElementListByContainText(String str_param) {", "    public static List<AccessibilityNodeInfo> findElementListByContainText(String str_param) {\n        try {\n            nodeInfoOutList = new ArrayList<>();\n            AccessibilityNodeInfo root = getRootInActiveMy();\n            recursionFindElementListByContainText(root, str_param);\n            return nodeInfoOutList;\n        }catch (StopMsgException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    // \u9012\u5f52\u627e\u5143\u7d20\n    private static void recursionFindElementListByContainText(AccessibilityNodeInfo root, String str_param) {\n        String text = String.valueOf(root.getText());", "        if (text.contains(str_param)) {\n            nodeInfoOutList.add(root);\n        }\n        for (int i = 0; i < root.getChildCount(); i++) {\n            recursionFindElementListByContainText(root.getChild(i), str_param);\n        }\n    }\n\n    /**\n     * *******************************************\u67e5\u627e\u5143\u7d20**************************************************\n     */\n\n\n    @Override", "    public void onInterrupt() {\n        Log.e(TAG, \"\u88ab\u6253\u65ad\");\n    }\n\n\n    /**\n     * *******************************************\u57fa\u672c\u64cd\u4f5c**************************************************\n     */\n    /**\n     * \u8f93\u5165\u6587\u672c \u6307\u5b9a\u5143\u7d20\u4e0a\u8f93\u5165\u6587\u672c\n     * @param str_param\n     * @return\n     */", "    public static Boolean inputTextByNode(AccessibilityNodeInfo nodeInfo ,String str_param) {\n        timeSleep(500);\n        if (nodeInfo != null) {\n            // \u641c\u7d22\u5bf9\u5e94\u7684\u540d\u5b57\n            android.os.Bundle rg_ShuJuBao19 = new android.os.Bundle ();\n            rg_ShuJuBao19.putString (\"ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE\", str_param);\n            nodeInfo.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, rg_ShuJuBao19);\n            nodeInfo.recycle();\n            timeSleep(500);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * \u83b7\u53d6\u5750\u6807\n     * @param nodeInfo\n     * @return\n     */", "    public static List<Integer> getPoint(AccessibilityNodeInfo nodeInfo) {\n        if (nodeInfo != null) {\n            Rect rect = new Rect();\n            nodeInfo.getBoundsInScreen(rect);\n            int x=(rect.left+rect.right)/2;\n            int y = (rect.top + rect.bottom) / 2;\n            List<Integer> list = new ArrayList<>();\n            list.add(x);\n            list.add(y);\n            // \u56de\u6536\n            nodeInfo.recycle();\n            return list;\n        }\n        return null;\n    }\n\n    /**\n     * \u6839\u636e\u5750\u6807\u70b9\u51fb\n     * @param nodeInfo\n     * @return\n     */\n    @RequiresApi(24)", "    public static Boolean clickNodeByPoint(AccessibilityNodeInfo nodeInfo) {\n        try {\n            if (nodeInfo != null) {\n                Rect rect = new Rect();\n                nodeInfo.getBoundsInScreen(rect);\n                int x = (rect.left + rect.right) / 2;\n                int y = (rect.top + rect.bottom) / 2;\n                Boolean aBoolean = clickPoint(x, y, new Random().nextInt(54) + 50);\n                // \u56de\u6536\n                nodeInfo.recycle();\n                return aBoolean;\n            }\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    /**\n     * \u6839\u636e\u5750\u6807\u70b9\u51fb\u52a0\u504f\u79fb\u91cf\n     * @param nodeInfo\n     * @return\n     */\n    @RequiresApi(24)", "    public static Boolean clickNodeByPointOffset(AccessibilityNodeInfo nodeInfo, int offset_x, int offset_y) {\n        try {\n            if (nodeInfo != null) {\n                Rect rect = new Rect();\n                nodeInfo.getBoundsInScreen(rect);\n                int x = (rect.left + rect.right) / 2;\n                x += offset_x;\n                int y = (rect.top + rect.bottom) / 2;\n                y += offset_y;\n                Boolean aBoolean = clickPoint(x, y, new Random().nextInt(54) + 50);\n                // \u56de\u6536\n                nodeInfo.recycle();\n                return aBoolean;\n            }\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    /**\n     * \u70b9\u51fb\u7236\u7ea7\u80fd\u70b9\u51fb\u7684\u8282\u70b9\n     * @param nodeInfo\n     * @return\n     */", "    public static Boolean clickParentCanClick(AccessibilityNodeInfo nodeInfo) {\n        try {\n            if (nodeInfo != null) {\n                boolean action1 = nodeInfo.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n                if (action1) {\n                    // \u56de\u6536\n                    nodeInfo.recycle();\n                    return true;\n                }\n\n                while (!nodeInfo.isClickable()) {\n                    nodeInfo = nodeInfo.getParent();\n                }", "                while (!nodeInfo.isClickable()) {\n                    nodeInfo = nodeInfo.getParent();\n                }\n                if (nodeInfo.isClickable()) {\n                    boolean action = nodeInfo.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n                    // \u56de\u6536\n                    nodeInfo.recycle();\n                    return action;\n                }\n            }\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    /**\n     * \u70b9\u51fb\u5750\u6807\n     * @param x1\n     * @param y1\n     * @param duration\n     */\n    @RequiresApi(24)", "    public static Boolean clickPoint(float x1, float y1, long duration) {\n        Path path=new Path();\n        x1 = x1 + new Random().nextInt(9) - 4;\n        y1 = y1 + new Random().nextInt(9) - 4;\n        printLogMsg(\"[x => \" + x1 + \", y => \" + y1 + \"]\");\n        if (x1 > Variable.mWidth || y1 > Variable.mHeight || x1 < 0 || y1 < 0) {   // 2220\u662f\u8363\u800020i\u4e0b\u9762\u7684\u5bfc\u822a\u680f\u6309\u94ae\n            printLogMsg(\"Variable.mWidth: \" + Variable.mWidth);\n            printLogMsg(\"Variable.mHeight: \" + Variable.mHeight);\n            printLogMsg(\"\u8d85\u51fa\u4e86\u70b9\u51fb\u8303\u56f4\");\n            return false;\n        }\n        path.moveTo(x1, y1);\n        GestureDescription.Builder builder=new GestureDescription.Builder();\n        GestureDescription gestureDescription=builder\n                .addStroke(new GestureDescription.StrokeDescription(path,0,duration))\n                .build();\n\n        return AccessibilityHelper.dispatchGesture(gestureDescription,new GestureResultCallback() {\n            @Override", "            public void onCompleted(GestureDescription gestureDescription1) {\n                super.onCompleted(gestureDescription1);\n                Log.e(TAG,\"\u70b9\u51fb\u7ed3\u675f...\"+ gestureDescription1.getStrokeCount());\n            }\n            @Override\n            public void onCancelled(GestureDescription gestureDescription1) {\n                super.onCancelled(gestureDescription1);\n                Log.e(TAG,\"\u70b9\u51fb\u53d6\u6d88\");\n            }\n        },null);\n    }\n\n    /**\n     * \u53cc\u51fb\u5750\u6807\n     * @param x1\n     * @param y1\n     * @param duration\n     */\n    @RequiresApi(24)", "    public static boolean doubleClickPoint(float x1,float y1,long duration){\n        Path path=new Path();\n        path.moveTo(x1,y1);\n        GestureDescription.Builder builder = new GestureDescription.Builder();\n        GestureDescription gestureDescription=builder\n                .addStroke(new GestureDescription.StrokeDescription(path,0,duration))\n                .addStroke(new GestureDescription.StrokeDescription(path, new Random().nextInt(60) + 220, duration)).build();\n        return AccessibilityHelper.dispatchGesture(gestureDescription,new GestureResultCallback() {\n            @Override\n            public void onCompleted(GestureDescription gestureDescription) {\n                super.onCompleted(gestureDescription);\n                Log.e(TAG,\"\u70b9\u51fb\u7ed3\u675f...\"+gestureDescription.getStrokeCount());\n            }\n            @Override", "            public void onCompleted(GestureDescription gestureDescription) {\n                super.onCompleted(gestureDescription);\n                Log.e(TAG,\"\u70b9\u51fb\u7ed3\u675f...\"+gestureDescription.getStrokeCount());\n            }\n            @Override\n            public void onCancelled(GestureDescription gestureDescription) {\n                super.onCancelled(gestureDescription);\n                Log.e(TAG,\"\u70b9\u51fb\u53d6\u6d88\");\n            }\n        },null);\n    }\n\n    /**\n     * \u7b49\u5f85\n     * @param time\n     */", "    public static void timeSleep(int time) {\n        try {\n            Thread.sleep(time);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            int i = 1/0;\n        }\n    }\n\n    /**\n     * *******************************************\u57fa\u672c\u64cd\u4f5c**************************************************\n     */\n", "    public static Boolean startApplication(Context ctx, String pkName){\n        PackageManager packageManager= ctx.getPackageManager();\n        Intent resolveIntent = new Intent(Intent.ACTION_MAIN, null);\n        resolveIntent.addCategory(Intent.CATEGORY_LAUNCHER);\n        resolveIntent.setPackage(pkName);\n        List<ResolveInfo> apps = packageManager.queryIntentActivities(resolveIntent, 0);\n        ResolveInfo ri = apps.iterator().next();\n        if (ri != null ) {\n            String packageName = ri.activityInfo.packageName;\n            String className = ri.activityInfo.name;\n            Intent intent = new Intent(Intent.ACTION_MAIN);\n            intent.addCategory(Intent.CATEGORY_LAUNCHER);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            ComponentName cn = new ComponentName(packageName, className);\n            intent.setComponent(cn);\n            ctx.startActivity(intent);\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * \u6253\u5f00\u5e94\u7528\n     * @param appName\n     * @return\n     */\n    @RequiresApi(24)", "    public static boolean openApp(String appName) {\n        // \u6253\u5f00\u5e94\u7528\n        home();\n        timeSleep(2 * 1000);\n        clickParentCanClick(findElementByText(appName));\n        return true;\n    }\n\n    /**\n     * \u624b\u52bf\u6ed1\u52a8\n     * @param x1\n     * @param y1\n     * @param x2\n     * @param y2\n     * @param duration\n     */\n    @RequiresApi(24)", "    public static Boolean swipe(float x1,float y1,float x2,float y2,long duration) {\n        try {\n            Path path=new Path();\n            path.moveTo(x1 + new Random().nextInt(10) - 5,y1 + new Random().nextInt(10) - 5);\n            path.lineTo(x2 + new Random().nextInt(10) - 5,y2 + new Random().nextInt(10) - 5);\n            GestureDescription.Builder builder=new GestureDescription.Builder();\n            GestureDescription gestureDescription=builder\n                    .addStroke(new GestureDescription.StrokeDescription(path,0,duration))\n                    .build();\n            return AccessibilityHelper.dispatchGesture(gestureDescription,new GestureResultCallback() {\n                @Override", "                public void onCompleted(GestureDescription gestureDescription1) {\n                    super.onCompleted(gestureDescription1);\n                    Log.e(TAG,\"\u6ed1\u52a8\u7ed3\u675f...\"+ gestureDescription1.getStrokeCount());\n                }\n                @Override\n                public void onCancelled(GestureDescription gestureDescription1) {\n                    super.onCancelled(gestureDescription1);\n                    Log.e(TAG,\"\u6ed1\u52a8\u53d6\u6d88\");\n                }\n            },null);\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n    @RequiresApi(24)", "    public static boolean swipeFYS(float x1,float y1,float x2,float y2,long duration){\n        Path pathA=new Path();\n        Path pathB=new Path();\n        pathA.moveTo(x1,y1);\n        pathA.lineTo(x2,y2);\n        pathB.moveTo(x1,y1);\n        pathB.lineTo(x2,y2);\n        Log.e(TAG,\"MyAccessibilityService \u4e2d\u7f29\u653e zoom()\u65b9\u6cd5\u6ed1\u52a8\u70b9,reset\uff1a\uff08 \"+x1+\",\"+y1+\"),(\"+x2+\",\"+y2+\"),\uff08 \"+x1+\",\"+y1+\"),(\"+x2+\",\"+y2+\"),\"+\"\u65f6\u957f\u662f:\"+duration);\n        GestureDescription.Builder builder=new GestureDescription.Builder();\n        GestureDescription gestureDescription=builder\n                .addStroke(new GestureDescription.StrokeDescription(pathA,0,duration))\n                .addStroke(new GestureDescription.StrokeDescription(pathB,50,200))\n                .build();\n        return AccessibilityHelper.dispatchGesture(gestureDescription,new GestureResultCallback() {\n            @Override", "            public void onCompleted(GestureDescription gestureDescription) {\n                super.onCompleted(gestureDescription);\n                Log.e(TAG,\"\u7f29\u653e\u7ed3\u675f...\"+gestureDescription.getStrokeCount());\n            }\n            @Override\n            public void onCancelled(GestureDescription gestureDescription) {\n                super.onCancelled(gestureDescription);\n                Log.e(TAG,\"\u7f29\u653e\u53d6\u6d88\");\n            }\n        },null);\n    }\n\n    @RequiresApi(24)", "    public static boolean zoom(float x1,float y1,float x2,float y2, float x3,float y3,float x4,float y4,long duration){\n        Path pathA=new Path();\n        Path pathB=new Path();\n        pathA.moveTo(x1,y1);\n        pathA.lineTo(x2,y2);\n        pathB.moveTo(x3,y3);\n        pathB.lineTo(x4,y4);\n        Log.e(TAG,\"MyAccessibilityService \u4e2d\u7f29\u653e zoom()\u65b9\u6cd5\u6ed1\u52a8\u70b9,reset\uff1a\uff08 \"+x1+\",\"+y1+\"),(\"+x2+\",\"+y2+\"),\uff08 \"+x3+\",\"+y3+\"),(\"+x4+\",\"+y4+\"),\"+\"\u65f6\u957f\u662f:\"+duration);\n        GestureDescription.Builder builder=new GestureDescription.Builder();\n        GestureDescription gestureDescription=builder\n                .addStroke(new GestureDescription.StrokeDescription(pathA,0,duration))\n                .addStroke(new GestureDescription.StrokeDescription(pathB,0,duration))\n                .build();\n        return AccessibilityHelper.dispatchGesture(gestureDescription,new GestureResultCallback() {\n            @Override", "            public void onCompleted(GestureDescription gestureDescription) {\n                super.onCompleted(gestureDescription);\n                Log.e(TAG,\"\u7f29\u653e\u7ed3\u675f...\"+gestureDescription.getStrokeCount());\n            }\n            @Override\n            public void onCancelled(GestureDescription gestureDescription) {\n                super.onCancelled(gestureDescription);\n                Log.e(TAG,\"\u7f29\u653e\u53d6\u6d88\");\n            }\n        },null);\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/utils/TimeUtil.java", "chunked_list": ["package com.linsheng.FATJS.utils;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class TimeUtil {\n    public TimeUtil() {\n    }\n\n    public static String getDIYStringDate(String pattern) {\n        Date currentTime = new Date();\n//        SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd HH:mm:ss\");\n        SimpleDateFormat formatter = new SimpleDateFormat(pattern);\n        return formatter.format(currentTime);\n    }\n", "    public static String getDIYStringDate(String pattern) {\n        Date currentTime = new Date();\n//        SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd HH:mm:ss\");\n        SimpleDateFormat formatter = new SimpleDateFormat(pattern);\n        return formatter.format(currentTime);\n    }\n\n    public static String getStringDate() {\n        Date currentTime = new Date();\n//        SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd HH:mm:ss\");\n        SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd\");\n//        SimpleDateFormat formatter = new SimpleDateFormat(\"HH:mm\");\n        return formatter.format(currentTime);\n    }\n", "    public static String getYesterdayStringDate() {\n        Calendar cal=Calendar.getInstance();\n        cal.add(Calendar.DATE,-1);\n        Date d = cal.getTime();\n//        SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd HH:mm:ss\");\n        SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd\");\n//        SimpleDateFormat formatter = new SimpleDateFormat(\"HH:mm\");\n        return formatter.format(d);\n    }\n\n    //\u5224\u65ad\u5f53\u524d\u662f\u4e0a\u5348\u4e2d\u5348\u4e0b\u5348\n    int getTimeType(Date time) {\n        SimpleDateFormat df = new SimpleDateFormat(\"HH\");\n        String str = df.format(time);\n        int a = Integer.parseInt(str);\n        //\u4e0a\u5348", "        if (a >= 4 && a <= 12) {\n            return 1;\n        }\n        //\u4e0b\u5348\n        if (a > 12 && a <= 24) {\n            return 2;\n        }\n        return 1;\n    }\n\n    public static String getStrDate(String pattern) {\n        Date currentTime = new Date();\n        SimpleDateFormat formatter = new SimpleDateFormat(pattern);\n        return formatter.format(currentTime);\n    }\n\n    // \u6839\u636e\u5e74\u6708\u65e5\u5bf9\u6bd4\u65f6\u95f4\u5927\u5c0f   \u4f20\u5165\u7684\u683c\u5f0f\u5fc5\u987b\u662f  2000\u5e7412\u67086\u65e5   , \u5982\u679c\u662f\u4e00\u6837\u7684\u4e5f\u8fd4\u56de false", "    public static String getStrDate(String pattern) {\n        Date currentTime = new Date();\n        SimpleDateFormat formatter = new SimpleDateFormat(pattern);\n        return formatter.format(currentTime);\n    }\n\n    // \u6839\u636e\u5e74\u6708\u65e5\u5bf9\u6bd4\u65f6\u95f4\u5927\u5c0f   \u4f20\u5165\u7684\u683c\u5f0f\u5fc5\u987b\u662f  2000\u5e7412\u67086\u65e5   , \u5982\u679c\u662f\u4e00\u6837\u7684\u4e5f\u8fd4\u56de false\n    public static Boolean leftLargerTimeStr(String timeStr, String targetTimeStr) {\n\n        String year_str = timeStr.split(\"\u5e74\")[0];\n        String month_str = timeStr.split(\"\u5e74\")[1].split(\"\u6708\")[0];\n        String day_str = timeStr.split(\"\u5e74\")[1].split(\"\u6708\")[1].split(\"\u65e5\")[0];\n\n        String target_year_str = targetTimeStr.split(\"\u5e74\")[0];\n        String target_month_str = targetTimeStr.split(\"\u5e74\")[1].split(\"\u6708\")[0];\n        String target_day_str = targetTimeStr.split(\"\u5e74\")[1].split(\"\u6708\")[1].split(\"\u65e5\")[0];\n\n        int year = Integer.parseInt(year_str); // \u83b7\u53d6\u5e74\n        int month = Integer.parseInt(month_str); // \u83b7\u53d6\u6708\n        int day = Integer.parseInt(day_str); // \u83b7\u53d6\u65e5\n\n        int target_year = Integer.parseInt(target_year_str); // \u83b7\u53d6\u5e74\n        int target_month = Integer.parseInt(target_month_str); // \u83b7\u53d6\u6708\n        int target_day = Integer.parseInt(target_day_str); // \u83b7\u53d6\u65e5\n", "        if (year > target_year) {\n            return true;\n        }else if (year < target_year) {\n            return false;\n        }\n\n        if (month > target_month) {\n            return true;\n        }else if (month < target_month) {\n            return false;\n        }\n\n        return day > target_day;\n    }\n\n    // \u5982\u679c\u53ea\u6709 \u6708\u548c\u65e5 \u5219\u6dfb\u52a0\u4e0a\u5e74\u4efd  param \u683c\u5f0f  2\u67082\u65e5", "        }else if (month < target_month) {\n            return false;\n        }\n\n        return day > target_day;\n    }\n\n    // \u5982\u679c\u53ea\u6709 \u6708\u548c\u65e5 \u5219\u6dfb\u52a0\u4e0a\u5e74\u4efd  param \u683c\u5f0f  2\u67082\u65e5\n    public static String fixTimeStrAddYear(String timeStr) {\n        if (timeStr.contains(\"\u5e74\")) {\n            return timeStr;\n        }\n        String year_str = getStrDate(\"yyyy\u5e74\");\n        return year_str + timeStr;\n    }\n}\n\n\n// 2022\u5e745\u670830\u65e5\n// 5\u670830\u65e5\n//        String strDate = TimeUtil.getStrDate(\"yyyy\u5e74MM\u6708dd\u65e5\");\n//        thiz.printLogMsg(\"strDate => \" + strDate);\n//\n//        String strDate_0 = TimeUtil.getStrDate(\"MM\u6708dd\u65e5\");\n//        strDate_0 = TimeUtil.fixTimeStrAddYear(strDate_0);\n//        thiz.printLogMsg(\"strDate_0 => \" + strDate_0);\n//\n//        String strDate_1 = TimeUtil.getStrDate(\"yyyy\u5e74\");\n//        thiz.printLogMsg(\"strDate_1 => \" + strDate_1);\n//\n//        Boolean leftLargerTimeStr = TimeUtil.leftLargerTimeStr(\"2023\u5e7402\u670815\u65e5\", \"2023\u5e742\u670817\u65e5\");\n//        thiz.printLogMsg(\"leftLargerTimeStr => \" + leftLargerTimeStr);\n//\n//        thiz.timeSleep(waitSixSecond * 900);\n", "    public static String fixTimeStrAddYear(String timeStr) {\n        if (timeStr.contains(\"\u5e74\")) {\n            return timeStr;\n        }\n        String year_str = getStrDate(\"yyyy\u5e74\");\n        return year_str + timeStr;\n    }\n}\n\n\n// 2022\u5e745\u670830\u65e5\n// 5\u670830\u65e5\n//        String strDate = TimeUtil.getStrDate(\"yyyy\u5e74MM\u6708dd\u65e5\");\n//        thiz.printLogMsg(\"strDate => \" + strDate);\n//\n//        String strDate_0 = TimeUtil.getStrDate(\"MM\u6708dd\u65e5\");\n//        strDate_0 = TimeUtil.fixTimeStrAddYear(strDate_0);\n//        thiz.printLogMsg(\"strDate_0 => \" + strDate_0);\n//\n//        String strDate_1 = TimeUtil.getStrDate(\"yyyy\u5e74\");\n//        thiz.printLogMsg(\"strDate_1 => \" + strDate_1);\n//\n//        Boolean leftLargerTimeStr = TimeUtil.leftLargerTimeStr(\"2023\u5e7402\u670815\u65e5\", \"2023\u5e742\u670817\u65e5\");\n//        thiz.printLogMsg(\"leftLargerTimeStr => \" + leftLargerTimeStr);\n//\n//        thiz.timeSleep(waitSixSecond * 900);\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/utils/TxTManager.java", "chunked_list": ["package com.linsheng.FATJS.utils;\n\nimport android.os.Environment;\nimport android.util.Log;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;", "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\n\npublic class TxTManager {\n    private static final String TAG = \"FATJS\";\n\n    /**\n     * \u4fdd\u5b58\u5185\u5bb9\u5230TXT\u6587\u4ef6\u4e2d\n     */", "    public static boolean writeToTxt(String fileName, String content) {\n        FileOutputStream fileOutputStream;\n        BufferedWriter bufferedWriter;\n        File file = new File(fileName);\n        try {\n            file.createNewFile();\n            fileOutputStream = new FileOutputStream(file);\n            bufferedWriter = new BufferedWriter(new OutputStreamWriter(fileOutputStream));\n            bufferedWriter.write(content);\n            bufferedWriter.close();\n        } catch (IOException e) {\n            Log.e(TAG, \"writeToTxt: java.io.FileNotFoundException: version.txt: open failed: EACCES (Permission denied)\");\n            return false;\n        }\n        return true;\n    }\n    /**\n     * \u8bfb\u53d6\u5185\u5bb9\n     *\n     * @param filePath\n     * @return\n     */", "    public static String readFromTxt(String filePath) {\n        FileInputStream fileInputStream;\n        BufferedReader bufferedReader;\n        StringBuilder stringBuilder = new StringBuilder();\n        File file = new File(filePath);\n        if (file.exists()) {\n            try {\n                fileInputStream = new FileInputStream(file);\n                bufferedReader = new BufferedReader(new InputStreamReader(fileInputStream));\n                String line;\n                while ((line = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(line);\n                }\n                bufferedReader.close();\n            } catch (FileNotFoundException e) {\n                Log.e(TAG, \"readFromTxt: FileNotFoundException\");\n                return null;\n            } catch (IOException e) {\n                Log.e(TAG, \"readFromTxt: IOException\");\n                return null;\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    /**\n     * \u521b\u5efa\u6587\u4ef6\u5939\n     * @param fileDirectory\n     */", "                while ((line = bufferedReader.readLine()) != null) {\n                    stringBuilder.append(line);\n                }\n                bufferedReader.close();\n            } catch (FileNotFoundException e) {\n                Log.e(TAG, \"readFromTxt: FileNotFoundException\");\n                return null;\n            } catch (IOException e) {\n                Log.e(TAG, \"readFromTxt: IOException\");\n                return null;\n            }\n        }\n        return stringBuilder.toString();\n    }\n\n    /**\n     * \u521b\u5efa\u6587\u4ef6\u5939\n     * @param fileDirectory\n     */", "    public static void createDirectory(String fileDirectory) {\n        File file = new File(fileDirectory);\n        if (!file.exists()) {\n            file.mkdirs();\n        }\n    }\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/utils/ExitException.java", "chunked_list": ["package com.linsheng.FATJS.utils;\n\npublic class ExitException extends Exception\n{\n\tString taskName;\n\tpublic ExitException(String taskName)    //\u6784\u9020\u65b9\u6cd5\n\t{\n\t\tsuper(\"\u4efb\u52a1\u9500\u6bc1-->\" + taskName);\t    //\u8c03\u7528Exception(message:String)\n\t}\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/utils/ExceptionUtil.java", "chunked_list": ["package com.linsheng.FATJS.utils;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\npublic class ExceptionUtil {\n    public ExceptionUtil() {\n    }\n\n    public static String toString(Throwable var0) throws ExitException {\n        StringWriter var1 = new StringWriter();\n        PrintWriter var2 = new PrintWriter(var1);\n        var0.printStackTrace(var2);", "    public static String toString(Throwable var0) throws ExitException {\n        StringWriter var1 = new StringWriter();\n        PrintWriter var2 = new PrintWriter(var1);\n        var0.printStackTrace(var2);\n        if (var1.toString().contains(\"\u4efb\u52a1\u9500\u6bc1\")) {\n            throw new ExitException(\"0\");\n        }\n        return var1.toString();\n    }\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/config/WindowPermissionCheck.java", "chunked_list": ["package com.linsheng.FATJS.config;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.provider.Settings;\nimport android.widget.Toast;\n\npublic class WindowPermissionCheck {\n", "\npublic class WindowPermissionCheck {\n\n    public static boolean checkPermission(Activity activity){\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M\n                && !Settings.canDrawOverlays(activity)) {\n            Toast.makeText(activity, \"\u5f53\u524d\u65e0\u6743\u9650\uff0c\u8bf7\u6388\u6743\", Toast.LENGTH_SHORT).show();\n            activity.startActivityForResult(\n                    new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,\n                            Uri.parse(\"package:\" + activity.getPackageName())), 0);\n            return false;\n        }\n        return true;\n    }\n", "    public static void onActivityResult(Activity activity,\n                                        int requestCode,\n                                        int resultCode,\n                                        Intent data,\n                                        OnWindowPermissionListener onWindowPermissionListener) {\n        if (requestCode == 0) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M\n                    && !Settings.canDrawOverlays(activity)) {\n                Toast.makeText(activity.getApplicationContext(), \"\u6388\u6743\u5931\u8d25\", Toast.LENGTH_SHORT).show();\n                if(onWindowPermissionListener!=null)\n                    onWindowPermissionListener.onFailure();\n            }else {\n                Toast.makeText(activity.getApplicationContext(), \"\u6388\u6743\u6210\u529f\", Toast.LENGTH_SHORT).show();", "                if(onWindowPermissionListener!=null)\n                    onWindowPermissionListener.onFailure();\n            }else {\n                Toast.makeText(activity.getApplicationContext(), \"\u6388\u6743\u6210\u529f\", Toast.LENGTH_SHORT).show();\n                if(onWindowPermissionListener!=null)\n                    onWindowPermissionListener.onSuccess();\n            }\n        }\n    }\n\n    public interface OnWindowPermissionListener{\n        void onSuccess();\n        void onFailure();\n    }\n}", "    public interface OnWindowPermissionListener{\n        void onSuccess();\n        void onFailure();\n    }\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/activitys/MainActivity.java", "chunked_list": ["package com.linsheng.FATJS.activitys;\n\nimport android.Manifest;\nimport android.annotation.SuppressLint;\nimport android.app.Activity;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.content.pm.PackageManager;", "import android.content.IntentFilter;\nimport android.content.pm.PackageManager;\nimport android.graphics.Point;\nimport android.hardware.display.VirtualDisplay;\nimport android.media.ImageReader;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.os.Handler;", "import android.os.Environment;\nimport android.os.Handler;\nimport android.provider.Settings;\nimport android.text.TextUtils;\nimport android.util.DisplayMetrics;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;", "import android.widget.ArrayAdapter;\nimport android.widget.ListView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.RequiresApi;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.linsheng.FATJS.AccUtils;\nimport com.linsheng.FATJS.R;", "import com.linsheng.FATJS.AccUtils;\nimport com.linsheng.FATJS.R;\nimport com.linsheng.FATJS.bean.Variable;\nimport com.linsheng.FATJS.config.WindowPermissionCheck;\nimport com.linsheng.FATJS.rpa.dingdingService.DingDingService;\nimport com.linsheng.FATJS.rpa.dyService.DyTaskService;\nimport com.linsheng.FATJS.service.MyService;\nimport com.linsheng.FATJS.utils.TxTManager;\nimport com.cmcy.rxpermissions2.RxPermissions;\nimport com.tencent.tinker.lib.tinker.TinkerInstaller;", "import com.cmcy.rxpermissions2.RxPermissions;\nimport com.tencent.tinker.lib.tinker.TinkerInstaller;\n\nimport java.io.File;\n\npublic class MainActivity extends AppCompatActivity {\n    private static final String TAG = \"FATJS\";\n    File patch_signed_7zip = null;\n    private String readFromTxt;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n\n        super.onCreate(savedInstanceState);\n        Log.i(TAG, \"onCreate()\u88ab\u8c03\u7528\u4e86\");\n\n        Variable.context = this.getApplicationContext();\n\n        // \u5b58\u50a8\u6743\u9650\n        storagePermissions();\n\n        // \u83b7\u53d6\u624b\u673a\u4fe1\u606f\n        // getPhoneInfo();\n\n        // \u5f00\u542f\u524d\u53f0\u670d\u52a1 \u672a\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n         openForwardService();\n\n        // \u4ece sdcard \u8bfb\u53d6\u7248\u672c\u53f7\u548c\u6296\u97f3id\u53f7\n        readIDFromSdcard();\n\n        setContentView(R.layout.activity_main);\n\n        // \u5728\u5176\u4ed6\u5e94\u7528\u4e0a\u5c42\u663e\u793a\n        boolean permission = WindowPermissionCheck.checkPermission(this);", "        if (permission) {\n            Log.i(TAG, \"onCreate: permission true => \" + permission);\n            // \u6253\u5f00\u60ac\u6d6e\u7a97\n            startService(new Intent(Variable.context, FloatingButton.class));\n            // \u6253\u5f00\u60ac\u6d6e\u7a97\n            startService(new Intent(Variable.context, FloatingWindow.class));\n        }\n\n        buildAdapter();\n\n        initDisplay();\n    }\n\n    // \u4efb\u52a1\u5f00\u59cb\u5165\u53e3\n    private void start_run_dy() {\n        new Thread(new Runnable() {\n            @RequiresApi(api = Build.VERSION_CODES.N)\n            @Override", "            public void run() {\n                try {\n\n                    DyTaskService dyTaskService = new DyTaskService();\n                    dyTaskService.main();\n\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n    private void start_run_dingding() {\n        new Thread(new Runnable() {\n            @RequiresApi(api = Build.VERSION_CODES.N)\n            @Override", "            public void run() {\n                try {\n\n                    DingDingService dingDingService = new DingDingService();\n                    dingDingService.main();\n\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n    @Override", "    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == 0) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && !Settings.canDrawOverlays(MainActivity.this)) {\n                Toast.makeText(this.getApplicationContext(), \"\u60ac\u6d6e\u7a97\u6388\u6743\u5931\u8d25\", Toast.LENGTH_SHORT).show();\n            }else {\n                Toast.makeText(this.getApplicationContext(), \"\u60ac\u6d6e\u7a97\u6388\u6743\u6210\u529f\", Toast.LENGTH_SHORT).show();\n                // \u6253\u5f00\u60ac\u6d6e\u7a97\n                startService(new Intent(Variable.context, FloatingButton.class));\n                // \u6253\u5f00\u60ac\u6d6e\u7a97\n                startService(new Intent(Variable.context, FloatingWindow.class));\n            }\n        }\n    }\n\n    private void buildAdapter() {\n        //2\u3001\u7ed1\u5b9a\u63a7\u4ef6\n        ListView listView = (ListView) findViewById(R.id.list_view);\n        //3\u3001\u51c6\u5907\u6570\u636e\n        String[] data={\n                \"\u7248\u672c\u53f7 => \" + readFromTxt,\n                \"\u5f00\u542f\u65e0\u969c\u788d\",\n                \"\u6296\u97f3\u6d4f\u89c8\u89c6\u9891\u5e76\u6253\u5370\u6807\u9898\",\n                \"\u9489\u9489\u6253\u5361\",\n                //\"ANDROID_ID: \" + Variable.ANDROID_ID,\n                //\"PHONE_NAME: \" + Variable.PHONE_NAME,\n                //\"load fix patch\",\n                \"\u8df3\u8f6c\u5230\u8bbe\u7f6e\u65e0\u969c\u788d\u9875\u9762\",\n                \"\u4ec5\u7528\u4e8e\u5b66\u4e60\u4ea4\u6d41\uff0c\u5207\u52ff\u7528\u4e8e\u975e\u6cd5\u9014\u5f84\uff0c\u5426\u5219\u4e0e\u4f5c\u8005\u65e0\u5173\",\n                \"\u4ee3\u7801\u5f00\u6e90 GitHub \u641c\u7d22 FATJS\",\n        };\n        //4\u3001\u521b\u5efa\u9002\u914d\u5668 \u8fde\u63a5\u6570\u636e\u6e90\u548c\u63a7\u4ef6\u7684\u6865\u6881\n        //\u53c2\u6570 1\uff1a\u5f53\u524d\u7684\u4e0a\u4e0b\u6587\u73af\u5883\n        //\u53c2\u6570 2\uff1a\u5f53\u524d\u5217\u8868\u9879\u6240\u52a0\u8f7d\u7684\u5e03\u5c40\u6587\u4ef6\n        //(android.R.layout.simple_list_item_1)\u8fd9\u91cc\u7684\u5e03\u5c40\u6587\u4ef6\u662fAndroid\u5185\u7f6e\u7684\uff0c\u91cc\u9762\u53ea\u6709\u4e00\u4e2atextview\u63a7\u4ef6\u7528\u6765\u663e\u793a\u7b80\u5355\u7684\u6587\u672c\u5185\u5bb9\n        //\u53c2\u6570 3\uff1a\u6570\u636e\u6e90\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(MainActivity.this,android.R.layout.simple_list_item_1,data);\n        //5\u3001\u5c06\u9002\u914d\u5668\u52a0\u8f7d\u5230\u63a7\u4ef6\u4e2d\n        listView.setAdapter(adapter);\n        //6\u3001\u4e3a\u5217\u8868\u4e2d\u9009\u4e2d\u7684\u9879\u6dfb\u52a0\u5355\u51fb\u54cd\u5e94\u4e8b\u4ef6\n        listView.setOnItemClickListener(new AdapterView.OnItemClickListener()\n        {\n            @SuppressLint(\"SetTextI18n\")\n            @Override", "            public void onItemClick(AdapterView<?> parent, View view, int i, long l) {\n                String result=((TextView)view).getText().toString();\n\n                switchResult(result, view);\n            }\n        });\n    }\n\n    private void switchResult(String result, View view) {\n        // \u8df3\u8f6c\u65e0\u969c\u788d\u9875\u9762\n        if (result.equals(\"\u8df3\u8f6c\u5230\u8bbe\u7f6e\u65e0\u969c\u788d\u9875\u9762\")) {\n            startActivity(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS));\n            return;\n        }\n\n        // \u52a0\u8f7d\u8981\u4fee\u590d\u7684\u5305", "        if (result.equals(\"\u8df3\u8f6c\u5230\u8bbe\u7f6e\u65e0\u969c\u788d\u9875\u9762\")) {\n            startActivity(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS));\n            return;\n        }\n\n        // \u52a0\u8f7d\u8981\u4fee\u590d\u7684\u5305\n        if (result.equals(\"load fix patch\")) {\n            // loadBtn = (TextView)view;\n            loadPatch();\n            return;\n        }\n\n        // \u4ec5\u7528\u4e8e\u5b66\u4e60\u4ea4\u6d41\uff0c\u5207\u52ff\u7528\u4e8e\u975e\u6cd5\u9014\u5f84", "        if (result.equals(\"\u4ec5\u7528\u4e8e\u5b66\u4e60\u4ea4\u6d41\uff0c\u5207\u52ff\u7528\u4e8e\u975e\u6cd5\u9014\u5f84\uff0c\u5426\u5219\u4e0e\u4f5c\u8005\u65e0\u5173\")) {\n            return;\n        }\n\n        // \u4ee3\u7801\u5f00\u6e90 GitHub \u641c\u7d22 FATJS\n        if (result.equals(\"\u4ee3\u7801\u5f00\u6e90 GitHub \u641c\u7d22 FATJS\")) {\n            return;\n        }\n\n        //\u5224\u65ad\u65e0\u969c\u788d\u662f\u5426\u5f00\u542f\n        if (!isAccessibilityServiceOn()) {\n            startActivity(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS));\n        }else {\n            // \u521d\u59cb\u5316", "        if (!isAccessibilityServiceOn()) {\n            startActivity(new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS));\n        }else {\n            // \u521d\u59cb\u5316\n            if (result.equals(\"init webSocket\")) {\n                // \u79fb\u52a8\u60ac\u6d6e\u7a97\n                Variable.btnTextView.setText(\"\u5168\u5c4f\");\n                Intent intent = new Intent();\n                intent.setAction(\"com.msg\");\n                intent.putExtra(\"msg\", \"show_max\");\n                Variable.context.sendBroadcast(intent);\n\n            }\n", "            if (result.equals(\"\u6296\u97f3\u6d4f\u89c8\u89c6\u9891\u5e76\u6253\u5370\u6807\u9898\")) {\n                start_run_dy();\n            }\n\n            if (result.equals(\"\u9489\u9489\u6253\u5361\")) {\n                start_run_dingding();\n            }\n        }\n    }\n\n    public void initDisplay() {\n        DisplayMetrics dm = new DisplayMetrics();//\u5c4f\u5e55\u5ea6\u91cf\n        getWindowManager().getDefaultDisplay().getMetrics(dm);\n        Variable.mWidth = dm.widthPixels;//\u5bbd\u5ea6\n        Variable.mHeight = dm.heightPixels ;//\u9ad8\u5ea6\n    }\n\n    private void readIDFromSdcard() {\n        // \u5224\u65ad\u6709\u6ca1\u6709 FATJS_DIR \u76ee\u5f55  \u6ca1\u6709\u5219\u521b\u5efa\n        File dirFile = new File(Environment.getExternalStorageDirectory() + \"/FATJS_DIR\");", "    public void initDisplay() {\n        DisplayMetrics dm = new DisplayMetrics();//\u5c4f\u5e55\u5ea6\u91cf\n        getWindowManager().getDefaultDisplay().getMetrics(dm);\n        Variable.mWidth = dm.widthPixels;//\u5bbd\u5ea6\n        Variable.mHeight = dm.heightPixels ;//\u9ad8\u5ea6\n    }\n\n    private void readIDFromSdcard() {\n        // \u5224\u65ad\u6709\u6ca1\u6709 FATJS_DIR \u76ee\u5f55  \u6ca1\u6709\u5219\u521b\u5efa\n        File dirFile = new File(Environment.getExternalStorageDirectory() + \"/FATJS_DIR\");\n        if (!dirFile.exists()) {", "        if (!dirFile.exists()) {\n            if (dirFile.mkdir()) {\n                Log.i(TAG, \"onCreate: FATJS_DIR \u76ee\u5f55\u521b\u5efa\u6210\u529f\");\n            }\n        }\n\n        // \u8bfb\u53d6version.txt\u7684\u7248\u672c\u53f7\n        File versionFile = new File(Environment.getExternalStorageDirectory() + \"/FATJS_DIR/version.txt\");\n        readFromTxt = readOrCreateVersion(versionFile.getAbsolutePath());\n        readFromTxt = readFromTxt.trim();\n    }\n\n    private void openForwardService() {\n        Intent intent = new Intent(this, MyService.class);\n        startService(intent);\n    }\n\n    private void getPhoneInfo() {\n        // \u83b7\u53d6 ANDROID_ID\n        Variable.ANDROID_ID = Settings.System.getString(getContentResolver(), Settings.System.ANDROID_ID);\n        Log.i(TAG, \"attachBaseContext: ANDROID_ID--->\" + Variable.ANDROID_ID);\n\n        // \u83b7\u53d6\u624b\u673a\u540d\u79f0\n        String phoneName = getPhoneName();\n        Variable.PHONE_NAME = phoneName;\n        Log.i(TAG, \"onCreate: phoneName => \" + phoneName);\n    }\n\n    // \u83b7\u53d6 sdcard \u8bfb\u5199\u6743\u9650\n    private void storagePermissions() {\n        // \u5b58\u50a8\u6743\u9650\n        RxPermissions.request(this, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)\n            .subscribe(granted -> {", "                if (granted) {\n                    //\u6743\u9650\u5141\u8bb8\n                    readIDFromSdcard();\n                } else {\n                    //\u6743\u9650\u62d2\u7edd\n                    Toast.makeText(this.getApplicationContext(), \"\u5b58\u50a8\u6388\u6743\u5931\u8d25\", Toast.LENGTH_SHORT).show();\n                }\n            });\n    }\n\n    private String readOrCreateVersion(String absolutePath) {\n        String fromXML = TxTManager.readFromTxt(absolutePath);", "        if (fromXML == null || fromXML.equals(\"\")) {\n            TxTManager.writeToTxt(absolutePath, \"2.1.6\");\n            return \"2.1.6\";\n        }\n        return fromXML;\n    }\n\n    // \u83b7\u53d6\u672c\u673a\u540d\u79f0\n    private String getPhoneName() {\n        return Settings.Secure.getString(getContentResolver(), \"bluetooth_name\"); // \u624b\u673a\u540d\u79f0\n    }\n\n    private String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/FATJS_DIR/patch_signed_7zip.apk\";\n    /**\n     * \u52a0\u8f7d\u70ed\u8865\u4e01\u63d2\u4ef6\n     */", "    public void loadPatch() {\n        // \u67e5\u770b sdcard/FATJS_DIR \u76ee\u5f55\u4e0b\u662f\u5426\u6709 patch \u5305\n        patch_signed_7zip = new File(Environment.getExternalStorageDirectory() + \"/FATJS_DIR/patch_signed_7zip.apk\");\n        if (patch_signed_7zip.exists()) {\n\n            new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    // load patch \u5305\n                    TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), path);\n                }\n            }).start();\n\n        }else {\n            Log.i(TAG, \"loadPatch: no patch_signed_7zip\");\n            Toast.makeText(Variable.context, \"no patch_signed_7zip\", Toast.LENGTH_LONG).show();\n        }\n    }\n\n    // \u5e7f\u64ad\n    DataReceiver dataReceiver = null;\n    private static final String ACTIONR = \"com.jumpUid\";\n    @Override\n    protected void onStart() {//\u91cd\u5199onStart\u65b9\u6cd5\n        super.onStart();\n\n        Log.i(TAG, \"onStart()\");\n", "        if (dataReceiver == null) {\n            dataReceiver = new DataReceiver();\n            IntentFilter filter = new IntentFilter();//\u521b\u5efaIntentFilter\u5bf9\u8c61\n            filter.addAction(ACTIONR);\n            registerReceiver(dataReceiver, filter);//\u6ce8\u518cBroadcast Receiver\n        }\n\n    }\n    // \u5e7f\u64ad\u5185\u90e8\u7c7b\n    public class DataReceiver extends BroadcastReceiver {\n        @Override", "    public class DataReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            Variable.broadcast_map.put(\"jumpUid\", false);\n            Log.i(TAG, \"onReceive\u5e7f\u64ad: \" + intent.getAction());\n            Log.i(TAG, \"onReceive: param -> \" + intent.getStringExtra(\"tem\"));\n\n            // UID\u8df3\u8f6c\n            Intent intentToUri = new Intent();\n            intentToUri.setData(Uri.parse(\"snssdk1128://user/profile/\" + intent.getStringExtra(\"tem\")));\n            startActivity(intentToUri);\n        }\n    }\n\n    // \u5224\u65ad\u672c\u7a0b\u5e8f\u7684\u65e0\u969c\u788d\u670d\u52a1\u662f\u5426\u5df2\u7ecf\u5f00\u542f", "    public Boolean isAccessibilityServiceOn() {\n        try{\n            String packageName = this.getPackageName();\n            Log.i(TAG, \"isAccessibilityServiceOn: packageName => \" + packageName);\n            String service = packageName + \"/\" + packageName + \".MyAccessibilityService\";\n            int enabled = Settings.Secure.getInt(Variable.context.getContentResolver(), Settings.Secure.ACCESSIBILITY_ENABLED);\n            TextUtils.SimpleStringSplitter splitter = new TextUtils.SimpleStringSplitter(':');\n            if (enabled == 1) {\n                String settingValue = Settings.Secure.getString(Variable.context.getContentResolver(), Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);\n                if (settingValue != null) {\n                    splitter.setString(settingValue);", "                if (settingValue != null) {\n                    splitter.setString(settingValue);\n                    while (splitter.hasNext()) {\n                        String accessibilityService = splitter.next();\n                        if (accessibilityService.equals(service)) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }catch (Exception ex){\n            ex.printStackTrace();\n            return false;\n        }\n        return false;\n    }\n\n    @Override\n    protected void onDestroy() {\n        Log.i(TAG, \"onDestroy: \u9500\u6bc1\u4e86\");\n        super.onDestroy();\n    }\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/activitys/FloatingWindow.java", "chunked_list": ["package com.linsheng.FATJS.activitys;\n\nimport android.app.Service;\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.graphics.Color;\nimport android.graphics.PixelFormat;\nimport android.os.Build;", "import android.graphics.PixelFormat;\nimport android.os.Build;\nimport android.os.IBinder;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.ViewGroup;\nimport android.view.WindowManager;\nimport android.widget.LinearLayout;\nimport android.widget.ScrollView;\nimport android.widget.TextView;", "import android.widget.ScrollView;\nimport android.widget.TextView;\n\nimport androidx.annotation.Nullable;\n\nimport com.linsheng.FATJS.bean.Variable;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class FloatingWindow extends Service {\n    private static final String TAG = \"FATJS\";\n    private WindowManager wm;\n    private  ScrollView sv;\n    private int float_window_width = 500;\n    private int float_window_height = 230;\n    private int offset_y = 440;\n\n    // \u5e7f\u64ad\n    DataReceiver dataReceiver = null;\n    private static final String ACTIONR = \"com.msg\";\n\n    @Override", "import java.util.Date;\n\npublic class FloatingWindow extends Service {\n    private static final String TAG = \"FATJS\";\n    private WindowManager wm;\n    private  ScrollView sv;\n    private int float_window_width = 500;\n    private int float_window_height = 230;\n    private int offset_y = 440;\n\n    // \u5e7f\u64ad\n    DataReceiver dataReceiver = null;\n    private static final String ACTIONR = \"com.msg\";\n\n    @Override", "    public int onStartCommand(Intent intent, int flags, int startId) {\n\n        if (dataReceiver == null) {\n            dataReceiver = new DataReceiver();\n            IntentFilter filter = new IntentFilter();//\u521b\u5efaIntentFilter\u5bf9\u8c61\n            filter.addAction(ACTIONR);\n            registerReceiver(dataReceiver, filter);//\u6ce8\u518cBroadcast Receiver\n        }\n\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    // \u5e7f\u64ad\u5185\u90e8\u7c7b", "    public class DataReceiver extends BroadcastReceiver {\n        @Override\n        public void onReceive(Context context, Intent intent) {\n            if (\"hide_mini\".equals(intent.getStringExtra(\"msg\"))) {\n                Log.i(TAG, \"onReceive: hide_mini\");\n                // \u9690\u85cf\u60ac\u6d6e\u7a97\u76f8\u5173\n                WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(30, 30, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n                setTypePhone(parameters); //\u60ac\u6d6e\u7a97\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n                parameters.x = 0;\n                parameters.y = 0;\n                parameters.gravity = Gravity.RIGHT | Gravity.TOP;\n\n                wm.updateViewLayout(sv, parameters);", "            }else if(\"show_max\".equals(intent.getStringExtra(\"msg\"))) {\n                Log.i(TAG, \"onReceive: show_max\");\n                // \u5c55\u5f00\u60ac\u6d6e\u7a97\u76f8\u5173\n                WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(float_window_width, float_window_height, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n                setTypePhone(parameters); //\u60ac\u6d6e\u7a97\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n                parameters.x = 20;\n                parameters.y = offset_y;\n                parameters.gravity = Gravity.LEFT | Gravity.TOP;\n\n                wm.updateViewLayout(sv, parameters);\n            }else if(\"full_screen\".equals(intent.getStringExtra(\"msg\"))) {\n                Log.i(TAG, \"onReceive: full_screen\");\n                // \u5168\u5c4f\u60ac\u6d6e\u7a97\n                WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(Variable.mWidth, Variable.mHeight - offset_y - 250, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n                setTypePhone(parameters); //\u60ac\u6d6e\u7a97\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n                parameters.x = 0;\n                parameters.y = offset_y;\n                parameters.gravity = Gravity.LEFT | Gravity.TOP;\n\n                wm.updateViewLayout(sv, parameters);\n            } else {\n                // \u65e5\u5fd7\u76f8\u5173\n                Variable.broadcast_map.put(\"msg\", false);\n\n                // \u65e5\u5fd7\u6253\u5370\n                printLog(intent.getStringExtra(\"msg\"));\n            }\n        }\n    }\n\n    @Override", "            }else if(\"full_screen\".equals(intent.getStringExtra(\"msg\"))) {\n                Log.i(TAG, \"onReceive: full_screen\");\n                // \u5168\u5c4f\u60ac\u6d6e\u7a97\n                WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(Variable.mWidth, Variable.mHeight - offset_y - 250, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n                setTypePhone(parameters); //\u60ac\u6d6e\u7a97\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n                parameters.x = 0;\n                parameters.y = offset_y;\n                parameters.gravity = Gravity.LEFT | Gravity.TOP;\n\n                wm.updateViewLayout(sv, parameters);\n            } else {\n                // \u65e5\u5fd7\u76f8\u5173\n                Variable.broadcast_map.put(\"msg\", false);\n\n                // \u65e5\u5fd7\u6253\u5370\n                printLog(intent.getStringExtra(\"msg\"));\n            }\n        }\n    }\n\n    @Override", "    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        return null;\n    }\n    private void setTypePhone(WindowManager.LayoutParams parameters) {\n        Log.i(TAG, \"onCreate: Build.VERSION.SDK_INT => \" + Build.VERSION.SDK_INT);", "        if (Build.VERSION.SDK_INT < 27) {\n            parameters.type = WindowManager.LayoutParams.TYPE_PHONE;\n        }\n    }\n    public TextView createText(String textContent) {\n        TextView content_text = new TextView(Variable.context);;\n        ViewGroup.LayoutParams txtParameters = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        content_text.setText(textContent);\n\n        if (textContent.contains(\"Exception\")) {\n            content_text.setTextSize(11);\n            content_text.setTextColor(Color.argb(210,255,0,0));\n        }else {\n            content_text.setTextSize(11);\n            content_text.setTextColor(Color.argb(210,0,255,0));\n        }\n\n        //content_text.setPadding(5,5,5,5);\n        content_text.setLayoutParams(txtParameters);\n        return content_text;\n    }\n\n    // \u6253\u5370\u65e5\u5fd7", "        if (textContent.contains(\"Exception\")) {\n            content_text.setTextSize(11);\n            content_text.setTextColor(Color.argb(210,255,0,0));\n        }else {\n            content_text.setTextSize(11);\n            content_text.setTextColor(Color.argb(210,0,255,0));\n        }\n\n        //content_text.setPadding(5,5,5,5);\n        content_text.setLayoutParams(txtParameters);\n        return content_text;\n    }\n\n    // \u6253\u5370\u65e5\u5fd7", "    public void printLog(String msg) {\n        // \u65e5\u5fd7\u6a21\u677f\n        String curTime = getStringDate();\n        String logTmp = \"[\" + curTime + \"]: \" + msg;\n        Variable.ll.addView(createText(logTmp));\n        Log.i(TAG, \"printLog: \" + logTmp);\n\n        // scrollview \u81ea\u52a8\u6eda\u52a8\n        sv.post(new Runnable() {\n            @Override\n            public void run() {\n                sv.fullScroll(ScrollView.FOCUS_DOWN);\n            }\n        });\n    }\n", "            public void run() {\n                sv.fullScroll(ScrollView.FOCUS_DOWN);\n            }\n        });\n    }\n\n    public String getStringDate() {\n        Date currentTime = new Date();\n        SimpleDateFormat formatter = new SimpleDateFormat(\"HH:mm\");\n        return formatter.format(currentTime);\n    }\n\n    @Override", "    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"onCreate\");\n        // \u5b9a\u4e49\u9762\u677f\n        wm = (WindowManager) getSystemService(WINDOW_SERVICE);\n        sv = new ScrollView(Variable.context);\n        Variable.ll = new LinearLayout(Variable.context);\n\n        // LinearLayout \u5bb9\u5668\n        LinearLayout.LayoutParams llParameters = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n        Variable.ll.setPadding(5, 5, 5, 5);\n        Variable.ll.setOrientation(LinearLayout.VERTICAL);\n        Variable.ll.setLayoutParams(llParameters);\n\n        // ScrollView\u5bb9\u5668\n        ViewGroup.LayoutParams svParams = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n        sv.setBackgroundColor(Color.argb(188,0,0,0));\n        Variable.ll.setPadding(5, 5, 5, 5);\n        sv.setVerticalScrollBarEnabled(true);\n        sv.setLayoutParams(svParams);\n\n        // \u8bbe\u7f6e\u9762\u677f\n//        WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(float_window_width, float_window_height, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n//        parameters.x = 20;\n//        parameters.y = offset_y;\n//        parameters.gravity = Gravity.LEFT | Gravity.TOP;\n\n        WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(30, 30, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n        setTypePhone(parameters); //\u60ac\u6d6e\u7a97\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n        parameters.x = 0;\n        parameters.y = 0;\n        parameters.gravity = Gravity.RIGHT | Gravity.TOP;\n\n        parameters.setTitle(\"FATJS\");\n\n        // \u6dfb\u52a0\u5143\u7d20\u5230\u9762\u677f\n        Variable.ll.addView(createText(\"\u65e5\u5fd7\u9762\u677flog\"));\n        sv.addView(Variable.ll);\n        wm.addView(sv, parameters);\n\n        // \u76d1\u542c\u89e6\u6478\uff0c\u79fb\u52a8\n//        sv.setOnTouchListener(new View.OnTouchListener() {\n//            int x, y;\n//            float touchedX, touchedY;\n//            private WindowManager.LayoutParams updatedParameters = parameters;\n//            @Override", "//            public boolean onTouch(View v, MotionEvent event) {\n//\n//                switch (event.getAction()) {\n//                    case MotionEvent.ACTION_DOWN:\n//\n//                        x = updatedParameters.x;\n//                        y = updatedParameters.y;\n//\n//                        float rawX = event.getRawX();\n//                        touchedX = rawX;\n//                        touchedY = event.getRawY();\n//\n//                        break;\n//\n//                    case MotionEvent.ACTION_MOVE:\n//\n//                        updatedParameters.x = (int) (x + (event.getRawX() - touchedX));\n//                        updatedParameters.y = (int) (y + (event.getRawY() - touchedY));\n//\n//                        wm.updateViewLayout(sv, updatedParameters);\n//\n//                    default:\n//                        break;\n//                }\n//                return false;\n//            }\n//        });\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/activitys/FloatingButton.java", "chunked_list": ["package com.linsheng.FATJS.activitys;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.graphics.PixelFormat;\nimport android.graphics.Rect;\nimport android.os.Build;\nimport android.os.IBinder;\nimport android.util.Log;", "import android.os.IBinder;\nimport android.util.Log;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.WindowManager;\nimport android.view.accessibility.AccessibilityNodeInfo;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n", "import android.widget.TextView;\n\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\n\nimport com.linsheng.FATJS.AccUtils;\nimport com.linsheng.FATJS.bean.Variable;\nimport com.linsheng.FATJS.utils.ExceptionUtil;\nimport com.linsheng.FATJS.utils.ExitException;\n", "import com.linsheng.FATJS.utils.ExitException;\n\nimport java.util.List;\n\npublic class FloatingButton extends Service {\n    private static final String TAG = \"FATJS\";\n    private WindowManager wm;\n    private LinearLayout ll;\n    private int offset_y = 300;\n\n    @Override", "    public int onStartCommand(Intent intent, int flags, int startId) {\n        return super.onStartCommand(intent, flags, startId);\n    }\n\n    @Nullable\n    @Override\n    public IBinder onBind(Intent intent) {\n        Log.i(TAG, \"onBind: \");\n        return null;\n    }\n\n    private void setTypePhone(WindowManager.LayoutParams parameters) {\n        Log.i(TAG, \"onCreate: Build.VERSION.SDK_INT => \" + Build.VERSION.SDK_INT);", "        if (Build.VERSION.SDK_INT < 27) {\n            parameters.type = WindowManager.LayoutParams.TYPE_PHONE;\n        }\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        // \u5b9a\u4e49\u9762\u677f\n        wm = (WindowManager) getSystemService(WINDOW_SERVICE);\n        Variable.btnTextView = new TextView(Variable.context);\n        ll = new LinearLayout(Variable.context);\n\n        ViewGroup.LayoutParams txtParameters = new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n        Variable.btnTextView.setText(\"\u6253\u5f00\");\n        Variable.btnTextView.setTextSize(10);\n        Variable.btnTextView.setGravity(Gravity.CENTER); //\u6587\u5b57\u5c45\u4e2d\n        Variable.btnTextView.setTextColor(Color.argb(200,10,250,0));\n        Variable.btnTextView.setLayoutParams(txtParameters);\n\n        // LinearLayout \u5bb9\u5668\n        LinearLayout.LayoutParams llParameters = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);\n        ll.setBackgroundColor(Color.argb(180,0,0,0));\n        ll.setPadding(0, 3, 0, 0);\n        ll.setOrientation(LinearLayout.VERTICAL); //\u7ebf\u6027\u5e03\u5c40\n        ll.setLayoutParams(llParameters);\n\n        // \u8bbe\u7f6e\u9762\u677f\n        WindowManager.LayoutParams parameters = new WindowManager.LayoutParams(80, 45, WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE, PixelFormat.TRANSLUCENT);\n        setTypePhone(parameters); //\u60ac\u6d6e\u7a97\u9002\u914d\u4f4e\u7248\u672c\u5b89\u5353\n        parameters.x = 20;\n        parameters.y = offset_y;\n        parameters.gravity = Gravity.RIGHT | Gravity.TOP;\n        parameters.setTitle(\"FATJS\");\n\n        // \u6dfb\u52a0\u5143\u7d20\u5230\u9762\u677f\n        ll.addView(Variable.btnTextView);\n        wm.addView(ll, parameters);\n\n        ll.setOnClickListener(new View.OnClickListener() {\n            @RequiresApi(api = Build.VERSION_CODES.N)\n            @Override", "            public void onClick(View v) {\n\n                // \u6d4b\u8bd5\u65b9\u6cd5\n//                testMethodPre(); // \u8fd9\u4e2a\u548c\u4e0b\u9762\u8fd9\u4e2a btnClick() \u4e0d\u80fd\u540c\u65f6\u5f00\u542f\uff0c\u53ea\u80fd\u5f00\u4e00\u4e2a\uff0c\u5426\u5219\u4f1a\u51b2\u7a81\n\n                // \u6539\u53d8\u60ac\u6d6e\u7a97\u5927\u5c0f\n                btnClick();\n\n            }\n        });\n    }\n\n    private void testMethodPre() {\n        new Thread(new Runnable() {\n            @RequiresApi(api = Build.VERSION_CODES.N)\n            @Override", "            public void run() {\n                try {\n                    // \u6d4b\u8bd5\u65b9\u6cd5\n                    testMethod();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n    private void btnClick() {", "        if (\"\u6253\u5f00\".contentEquals(Variable.btnTextView.getText())) {\n            Log.i(TAG, \"onClick: \u6253\u5f00 --> \u5168\u5c4f\");\n            Variable.btnTextView.setText(\"\u5168\u5c4f\");\n\n            // \u5c55\u5f00\u60ac\u6d6e\u7a97\n            Intent intent = new Intent();\n            intent.setAction(\"com.msg\");\n            intent.putExtra(\"msg\", \"show_max\");\n            Variable.context.sendBroadcast(intent);\n        }else if(\"\u9690\u85cf\".contentEquals(Variable.btnTextView.getText())){\n            Log.i(TAG, \"onClick: \u9690\u85cf --> \u6253\u5f00\");\n            Variable.btnTextView.setText(\"\u6253\u5f00\");\n\n            // \u9690\u85cf\u60ac\u6d6e\u7a97\n            Intent intent = new Intent();\n            intent.setAction(\"com.msg\");\n            intent.putExtra(\"msg\", \"hide_mini\");\n            Variable.context.sendBroadcast(intent);", "        }else if(\"\u9690\u85cf\".contentEquals(Variable.btnTextView.getText())){\n            Log.i(TAG, \"onClick: \u9690\u85cf --> \u6253\u5f00\");\n            Variable.btnTextView.setText(\"\u6253\u5f00\");\n\n            // \u9690\u85cf\u60ac\u6d6e\u7a97\n            Intent intent = new Intent();\n            intent.setAction(\"com.msg\");\n            intent.putExtra(\"msg\", \"hide_mini\");\n            Variable.context.sendBroadcast(intent);\n        }else if(\"\u5168\u5c4f\".contentEquals(Variable.btnTextView.getText())) {\n            Log.i(TAG, \"onClick: \u5168\u5c4f --> \u9690\u85cf\");\n            Variable.btnTextView.setText(\"\u9690\u85cf\");\n\n            // \u9690\u85cf\u60ac\u6d6e\u7a97\n            Intent intent = new Intent();\n            intent.setAction(\"com.msg\");\n            intent.putExtra(\"msg\", \"full_screen\");\n            Variable.context.sendBroadcast(intent);\n        }\n    }\n\n    /**\n     * \u6d4b\u8bd5\u65b9\u6cd5\n     */\n    @RequiresApi(api = Build.VERSION_CODES.N)\n    private void testMethod() throws ExitException {\n\n        // \u5c06\u6d4b\u8bd5\u7684\u52a8\u4f5c\u5199\u5230\u8fd9\u91cc\uff0c\u70b9\u51fb\u60ac\u6d6e\u8239\u7684 \u6253\u5f00 \u6309\u94ae\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\n        AccUtils.moveFloatWindow(\"\u6253\u5f00\");\n        String videoDesc = currentVideoDesc();\n        AccUtils.printLogMsg(\"videoDesc => \" + videoDesc);\n\n        List<AccessibilityNodeInfo> listByContainId = AccUtils.findElementListByContainText(\"\u8fdb\u5165\u76f4\u64ad\u95f4\");", "        }else if(\"\u5168\u5c4f\".contentEquals(Variable.btnTextView.getText())) {\n            Log.i(TAG, \"onClick: \u5168\u5c4f --> \u9690\u85cf\");\n            Variable.btnTextView.setText(\"\u9690\u85cf\");\n\n            // \u9690\u85cf\u60ac\u6d6e\u7a97\n            Intent intent = new Intent();\n            intent.setAction(\"com.msg\");\n            intent.putExtra(\"msg\", \"full_screen\");\n            Variable.context.sendBroadcast(intent);\n        }\n    }\n\n    /**\n     * \u6d4b\u8bd5\u65b9\u6cd5\n     */\n    @RequiresApi(api = Build.VERSION_CODES.N)\n    private void testMethod() throws ExitException {\n\n        // \u5c06\u6d4b\u8bd5\u7684\u52a8\u4f5c\u5199\u5230\u8fd9\u91cc\uff0c\u70b9\u51fb\u60ac\u6d6e\u8239\u7684 \u6253\u5f00 \u6309\u94ae\uff0c\u5c31\u53ef\u4ee5\u6267\u884c\n        AccUtils.moveFloatWindow(\"\u6253\u5f00\");\n        String videoDesc = currentVideoDesc();\n        AccUtils.printLogMsg(\"videoDesc => \" + videoDesc);\n\n        List<AccessibilityNodeInfo> listByContainId = AccUtils.findElementListByContainText(\"\u8fdb\u5165\u76f4\u64ad\u95f4\");", "        if (listByContainId != null) {\n            for (AccessibilityNodeInfo nodeInfo : listByContainId) {\n                Log.i(TAG, \"currentVideoDesc: node => \" + nodeInfo);\n            }\n\n//                for (AccessibilityNodeInfo nodeInfo : listByContainId) {\n//                    Rect rect = new Rect();\n//                    nodeInfo.getBoundsInScreen(rect);\n//                    if (rect.left >= Variable.mWidth || rect.left < 10 || rect.top >= Variable.mHeight || rect.top < 900) {\n//                        continue;\n//                    }\n//                    String tmp = String.valueOf(nodeInfo.getText());\n//                    Log.i(TAG, \"test_2: nodeInfo => \" + tmp + \" point => \" + rect.left + \", \" + rect.top);\n//                    return tmp;\n//                }\n        }\n\n    }\n\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u89c6\u9891\u7684\u6807\u9898\n     * @return\n     * @throws ExitException\n     */\n    private String currentVideoDesc() throws ExitException {", "//                    if (rect.left >= Variable.mWidth || rect.left < 10 || rect.top >= Variable.mHeight || rect.top < 900) {\n//                        continue;\n//                    }\n//                    String tmp = String.valueOf(nodeInfo.getText());\n//                    Log.i(TAG, \"test_2: nodeInfo => \" + tmp + \" point => \" + rect.left + \", \" + rect.top);\n//                    return tmp;\n//                }\n        }\n\n    }\n\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u89c6\u9891\u7684\u6807\u9898\n     * @return\n     * @throws ExitException\n     */\n    private String currentVideoDesc() throws ExitException {", "        try {\n            List<AccessibilityNodeInfo> listByContainId = AccUtils.findElementListByContainId(\"com.ss.android.ugc.aweme:id/desc\");\n            if (listByContainId != null) {\n                for (AccessibilityNodeInfo nodeInfo : listByContainId) {\n                    Rect rect = new Rect();\n                    nodeInfo.getBoundsInScreen(rect);\n                    if (rect.left >= Variable.mWidth || rect.left < 10 || rect.top >= Variable.mHeight || rect.top < 900) {\n                        continue;\n                    }\n                    String tmp = String.valueOf(nodeInfo.getText());\n                    Log.i(TAG, \"test_2: nodeInfo => \" + tmp + \" point => \" + rect.left + \", \" + rect.top);\n                    return tmp;\n                }\n            }\n        }catch (Exception e) {\n            e.printStackTrace();\n            AccUtils.printLogMsg(ExceptionUtil.toString(e));\n        }\n        return null;\n    }\n\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/XiuFuActivity.java", "chunked_list": ["package com.linsheng.FATJS.reporter;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport android.os.Bundle;\nimport android.os.Environment;\nimport android.view.View;\nimport android.widget.TextView;\n\nimport com.linsheng.FATJS.R;", "\nimport com.linsheng.FATJS.R;\nimport com.linsheng.FATJS.BuildConfig;\nimport com.tencent.tinker.lib.tinker.Tinker;\nimport com.tencent.tinker.lib.tinker.TinkerInstaller;\nimport com.tencent.tinker.loader.shareutil.ShareConstants;\nimport com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n\npublic class XiuFuActivity extends AppCompatActivity{\n\n    private String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/FATJS_DIR/patch_signed_7zip.apk\";\n\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n//        textView = findViewById(R.id.tv_text);\n//        textView.setText(\"\u8865\u4e01\u4fe1\u606f2\");\n//\n//        //\u8bf7\u6c42\u6587\u4ef6\u6743\u9650\n//        RxPermissions.request(this, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)\n//                .subscribe(granted -> {", "public class XiuFuActivity extends AppCompatActivity{\n\n    private String path = Environment.getExternalStorageDirectory().getAbsolutePath() + \"/FATJS_DIR/patch_signed_7zip.apk\";\n\n    private TextView textView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n//        textView = findViewById(R.id.tv_text);\n//        textView.setText(\"\u8865\u4e01\u4fe1\u606f2\");\n//\n//        //\u8bf7\u6c42\u6587\u4ef6\u6743\u9650\n//        RxPermissions.request(this, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)\n//                .subscribe(granted -> {", "//                    if (granted) {\n//                        //\u6743\u9650\u5141\u8bb8\n//                    } else {\n//                        //\u6743\u9650\u62d2\u7edd\n//                    }\n//                });\n    }\n\n    /**\n     * \u52a0\u8f7d\u70ed\u8865\u4e01\u63d2\u4ef6\n     */", "    public void loadPatch() {\n        TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), path);\n    }\n\n    /**\n     * \u67e5\u770b\u8865\u4e01\u4fe1\u606f\n     */\n    public void showInfo(View v) {\n        // add more Build Info\n        final StringBuilder sb = new StringBuilder();\n        Tinker tinker = Tinker.with(getApplicationContext());", "        Tinker tinker = Tinker.with(getApplicationContext());\n        if (tinker.isTinkerLoaded()) {\n            sb.append(String.format(\"[\u8865\u4e01\u5df2\u52a0\u8f7d] \\n\"));\n            sb.append(String.format(\"[\u57fa\u51c6\u5305\u7248\u672c\u53f7] %s \\n\", BuildConfig.TINKER_ID));\n\n            sb.append(String.format(\"[\u8865\u4e01\u53f7] %s \\n\", tinker.getTinkerLoadResultIfPresent().getPackageConfigByName(ShareConstants.TINKER_ID)));\n            sb.append(String.format(\"[\u8865\u4e01\u7248\u672c] %s \\n\", tinker.getTinkerLoadResultIfPresent().getPackageConfigByName(\"patchVersion\")));\n            sb.append(String.format(\"[\u8865\u4e01\u5360\u7528\u7a7a\u95f4] %s k \\n\", tinker.getTinkerRomSpace()));\n\n        } else {\n            sb.append(String.format(\"[\u8865\u4e01\u672a\u52a0\u8f7d] \\n\"));\n            sb.append(String.format(\"[\u57fa\u51c6\u5305\u7248\u672c\u53f7] %s \\n\", BuildConfig.TINKER_ID));\n\n            sb.append(String.format(\"[TINKER_ID] %s \\n\", ShareTinkerInternals.getManifestTinkerID(getApplicationContext())));\n        }\n\n        textView.setText(sb);\n    }\n\n    /**\n     * \u6e05\u9664\u8865\u5305\n     */", "    public void cleanPatch(View v){\n        Tinker.with(getApplicationContext()).cleanPatch();\n    }\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SampleResultService.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.widget.Toast;\n\nimport com.tencent.tinker.lib.service.DefaultTinkerResultService;\nimport com.tencent.tinker.lib.service.PatchResult;\nimport com.tencent.tinker.lib.util.TinkerLog;\nimport com.tencent.tinker.lib.util.TinkerServiceInternals;", "import com.tencent.tinker.lib.util.TinkerLog;\nimport com.tencent.tinker.lib.util.TinkerServiceInternals;\n\nimport java.io.File;\n\npublic class SampleResultService extends DefaultTinkerResultService {\n    private static final String TAG = \"FATJS\";\n\n    @Override\n    public void onPatchResult(final PatchResult result) {\n        if (result == null) {\n            TinkerLog.e(TAG, \"SampleResultService received null result!!!!\");\n            return;\n        }\n        TinkerLog.i(TAG, \"SampleResultService receive result: %s\", result.toString());\n\n        //first, we want to kill the recover process\n        TinkerServiceInternals.killTinkerPatchServiceProcess(getApplicationContext());\n\n        Handler handler = new Handler(Looper.getMainLooper());\n        handler.post(new Runnable() {\n            @Override", "    public void onPatchResult(final PatchResult result) {\n        if (result == null) {\n            TinkerLog.e(TAG, \"SampleResultService received null result!!!!\");\n            return;\n        }\n        TinkerLog.i(TAG, \"SampleResultService receive result: %s\", result.toString());\n\n        //first, we want to kill the recover process\n        TinkerServiceInternals.killTinkerPatchServiceProcess(getApplicationContext());\n\n        Handler handler = new Handler(Looper.getMainLooper());\n        handler.post(new Runnable() {\n            @Override", "            public void run() {\n                if (result.isSuccess) {\n                    Toast.makeText(getApplicationContext(), \"\u8865\u4e01\u52a0\u8f7d\u6210\u529f\uff0c\u8bf7\u91cd\u542f\u5e94\u7528\", Toast.LENGTH_LONG).show();\n                } else {\n                    Toast.makeText(getApplicationContext(), \"\u8865\u4e01\u52a0\u8f7d\u5931\u8d25\", Toast.LENGTH_LONG).show();\n                }\n            }\n        });\n        // is success and newPatch, it is nice to delete the raw file, and restart at once\n        // for old patch, you can't delete the patch file\n        if (result.isSuccess) {\n            deleteRawPatchFile(new File(result.rawPatchFilePath));\n\n            //not like TinkerResultService, I want to restart just when I am at background!\n            //if you have not install tinker this moment, you can use TinkerApplicationHelper api", "        if (result.isSuccess) {\n            deleteRawPatchFile(new File(result.rawPatchFilePath));\n\n            //not like TinkerResultService, I want to restart just when I am at background!\n            //if you have not install tinker this moment, you can use TinkerApplicationHelper api\n            if (checkIfNeedKill(result)) {\n                if (Utils.isBackground()) {\n                    TinkerLog.i(TAG, \"it is in background, just restart process\");\n                    restartProcess();\n                } else {\n                    //we can wait process at background, such as onAppBackground\n                    //or we can restart when the screen off\n                    TinkerLog.i(TAG, \"tinker wait screen to restart process\");\n                    new Utils.ScreenState(getApplicationContext(), new Utils.ScreenState.IOnScreenOff() {\n                        @Override", "                        public void onScreenOff() {\n                            restartProcess();\n                        }\n                    });\n                }\n            } else {\n                TinkerLog.i(TAG, \"I have already install the newly patch version!\");\n            }\n        }\n    }\n\n    /**\n     * you can restart your process through service or broadcast\n     */\n    private void restartProcess() {\n        TinkerLog.i(TAG, \"app is background now, i can kill quietly\");\n        //you can send service or broadcast intent to restart your process\n        android.os.Process.killProcess(android.os.Process.myPid());\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SampleApplication.java", "chunked_list": ["package com.linsheng.FATJS.reporter;\n\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.linsheng.FATJS.bean.Variable;\nimport com.tencent.tinker.loader.app.TinkerApplication;\nimport com.tencent.tinker.loader.shareutil.ShareConstants;\n\n/**", "\n/**\n *\n * Generated application for tinker life cycle\n *\n */\npublic class SampleApplication extends TinkerApplication {\n\n\n    private static final String TAG = \"FATJS\";\n\n    public SampleApplication() {\n        super(ShareConstants.TINKER_ENABLE_ALL, SampleApplicationLike.class.getName());\n    }\n\n    @Override\n    protected void attachBaseContext(Context base) {\n        Log.i(TAG, \"attachBaseContext: xxx\");\n        super.attachBaseContext(base);\n    }\n\n    @Override", "    public void onCreate() {\n        super.onCreate();\n        Log.i(TAG, \"onCreate: MyApp --> onCreate Method\");\n    }\n\n}"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SampleApplicationLike.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport android.annotation.TargetApi;\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.util.Log;\n\nimport androidx.multidex.MultiDex;", "\nimport androidx.multidex.MultiDex;\n\nimport com.linsheng.FATJS.bean.Variable;\nimport com.tencent.tinker.entry.DefaultApplicationLike;\nimport com.tencent.tinker.lib.tinker.Tinker;\n\n@SuppressWarnings(\"unused\")\n//@DefaultLifeCycle(application = \"com.example.tinkertest.reporter.SampleApplication\", flags = ShareConstants.TINKER_ENABLE_ALL, loadVerifyFlag = false)\npublic class SampleApplicationLike extends DefaultApplicationLike {\n    private static final String TAG = \"FATJS\";\n\n    public SampleApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag,\n                                 long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) {\n        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);\n    }\n\n    @Override", "//@DefaultLifeCycle(application = \"com.example.tinkertest.reporter.SampleApplication\", flags = ShareConstants.TINKER_ENABLE_ALL, loadVerifyFlag = false)\npublic class SampleApplicationLike extends DefaultApplicationLike {\n    private static final String TAG = \"FATJS\";\n\n    public SampleApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag,\n                                 long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) {\n        super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);\n    }\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onCreate: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = getApplication().getBaseContext();\n    }\n\n\n\n    /**\n     * install multiDex before install tinker\n     * so we don't need to put the tinker lib classes in the main dex\n     *\n     * @param base\n     */\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n    @Override", "    public void onCreate() {\n        super.onCreate();\n        // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\n        Log.i(TAG, \"onCreate: \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\");\n        Variable.context = getApplication().getBaseContext();\n    }\n\n\n\n    /**\n     * install multiDex before install tinker\n     * so we don't need to put the tinker lib classes in the main dex\n     *\n     * @param base\n     */\n    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)\n    @Override", "    public void onBaseContextAttached(Context base) {\n        super.onBaseContextAttached(base);\n        MultiDex.install(base);\n\n        TinkerManager.setTinkerApplicationLike(this);\n        TinkerManager.setUpgradeRetryEnable(true);\n        TinkerManager.installTinker(this);\n        Tinker.with(getApplication());\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SamplePatchListener.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport android.app.ActivityManager;\nimport android.content.Context;\nimport android.content.SharedPreferences;\n\nimport com.tencent.tinker.lib.listener.DefaultPatchListener;\nimport com.tencent.tinker.lib.util.TinkerLog;\nimport com.tencent.tinker.loader.shareutil.ShareConstants;\nimport com.tencent.tinker.loader.shareutil.SharePatchFileUtil;", "import com.tencent.tinker.loader.shareutil.ShareConstants;\nimport com.tencent.tinker.loader.shareutil.SharePatchFileUtil;\nimport com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n\nimport java.io.File;\nimport java.util.Properties;\n\npublic class SamplePatchListener extends DefaultPatchListener {\n    private static final String TAG = \"FATJS\";\n\n    protected static final long NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN = 60 * 1024 * 1024;\n\n    private final int maxMemory;\n\n    public SamplePatchListener(Context context) {\n        super(context);\n        maxMemory = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();\n        TinkerLog.i(TAG, \"application maxMemory:\" + maxMemory);\n    }\n\n    /**\n     * because we use the defaultCheckPatchReceived method\n     * the error code define by myself should after {@code ShareConstants.ERROR_RECOVER_INSERVICE\n     *\n     * @param path\n     * @param newPatch\n     * @return\n     */\n    @Override", "    public int patchCheck(String path, String patchMd5) {\n        File patchFile = new File(path);\n        TinkerLog.i(TAG, \"receive a patch file: %s, file size:%d\", path, SharePatchFileUtil.getFileOrDirectorySize(patchFile));\n        int returnCode = super.patchCheck(path, patchMd5);\n\n        if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n            returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);\n        }\n\n        if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n            SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);\n            //optional, only disable this patch file with md5\n            int fastCrashCount = sp.getInt(patchMd5, 0);", "        if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n            SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);\n            //optional, only disable this patch file with md5\n            int fastCrashCount = sp.getInt(patchMd5, 0);\n//            if (fastCrashCount >= SampleUncaughtExceptionHandler.MAX_CRASH_COUNT) {\n//                returnCode = Utils.ERROR_PATCH_CRASH_LIMIT;\n//            }\n        }\n        // Warning, it is just a sample case, you don't need to copy all of these\n        // Interception some of the request\n        if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n            Properties properties = ShareTinkerInternals.fastGetPatchPackageMeta(patchFile);", "        if (returnCode == ShareConstants.ERROR_PATCH_OK) {\n            Properties properties = ShareTinkerInternals.fastGetPatchPackageMeta(patchFile);\n            if (properties == null) {\n                returnCode = Utils.ERROR_PATCH_CONDITION_NOT_SATISFIED;\n            } else {\n                String platform = properties.getProperty(Utils.PLATFORM);\n                TinkerLog.i(TAG, \"get platform:\" + platform);\n                // check patch platform require\n//                if (platform == null || !platform.equals(BuildInfo.PLATFORM)) {\n//                    returnCode = Utils.ERROR_PATCH_CONDITION_NOT_SATISFIED;\n//                }\n            }\n        }\n\n        SampleTinkerReport.onTryApply(returnCode == ShareConstants.ERROR_PATCH_OK);\n        return returnCode;\n    }\n}\n", "//                if (platform == null || !platform.equals(BuildInfo.PLATFORM)) {\n//                    returnCode = Utils.ERROR_PATCH_CONDITION_NOT_SATISFIED;\n//                }\n            }\n        }\n\n        SampleTinkerReport.onTryApply(returnCode == ShareConstants.ERROR_PATCH_OK);\n        return returnCode;\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SamplePatchReporter.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport android.content.Context;\nimport android.content.Intent;\n\nimport com.tencent.tinker.lib.reporter.DefaultPatchReporter;\nimport com.tencent.tinker.loader.shareutil.SharePatchInfo;\n\nimport java.io.File;\nimport java.util.List;", "import java.io.File;\nimport java.util.List;\n\npublic class SamplePatchReporter extends DefaultPatchReporter {\n    private static final String TAG = \"FATJS\";\n    public SamplePatchReporter(Context context) {\n        super(context);\n    }\n\n    @Override\n    public void onPatchServiceStart(Intent intent) {\n        super.onPatchServiceStart(intent);\n        SampleTinkerReport.onApplyPatchServiceStart();\n    }\n\n    @Override", "    public void onPatchServiceStart(Intent intent) {\n        super.onPatchServiceStart(intent);\n        SampleTinkerReport.onApplyPatchServiceStart();\n    }\n\n    @Override\n    public void onPatchDexOptFail(File patchFile, List<File> dexFiles, Throwable t) {\n        super.onPatchDexOptFail(patchFile, dexFiles, t);\n        SampleTinkerReport.onApplyDexOptFail(t);\n    }\n\n    @Override", "    public void onPatchException(File patchFile, Throwable e) {\n        super.onPatchException(patchFile, e);\n        SampleTinkerReport.onApplyCrash(e);\n    }\n\n    @Override\n    public void onPatchInfoCorrupted(File patchFile, String oldVersion, String newVersion) {\n        super.onPatchInfoCorrupted(patchFile, oldVersion, newVersion);\n        SampleTinkerReport.onApplyInfoCorrupted();\n    }\n\n    @Override", "    public void onPatchPackageCheckFail(File patchFile, int errorCode) {\n        super.onPatchPackageCheckFail(patchFile, errorCode);\n        SampleTinkerReport.onApplyPackageCheckFail(errorCode);\n    }\n\n    @Override\n    public void onPatchResult(File patchFile, boolean success, long cost) {\n        super.onPatchResult(patchFile, success, cost);\n        SampleTinkerReport.onApplied(cost, success);\n    }\n\n    @Override", "    public void onPatchTypeExtractFail(File patchFile, File extractTo, String filename, int fileType) {\n        super.onPatchTypeExtractFail(patchFile, extractTo, filename, fileType);\n        SampleTinkerReport.onApplyExtractFail(fileType);\n    }\n\n    @Override\n    public void onPatchVersionCheckFail(File patchFile, SharePatchInfo oldPatchInfo, String patchFileVersion) {\n        super.onPatchVersionCheckFail(patchFile, oldPatchInfo, patchFileVersion);\n        SampleTinkerReport.onApplyVersionCheckFail();\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SampleTinkerReport.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport com.tencent.tinker.lib.util.TinkerLog;\nimport com.tencent.tinker.loader.shareutil.ShareConstants;\nimport com.tencent.tinker.loader.shareutil.ShareTinkerInternals;\n\n\npublic class SampleTinkerReport {\n    private static final String TAG = \"FATJS\";\n\n    // KEY - PV", "    public static final int KEY_REQUEST                   = 0;\n    public static final int KEY_DOWNLOAD                  = 1;\n    public static final int KEY_TRY_APPLY                 = 2;\n    public static final int KEY_TRY_APPLY_SUCCESS         = 3;\n    public static final int KEY_APPLIED_START             = 4;\n    public static final int KEY_APPLIED                   = 5;\n    public static final int KEY_LOADED                    = 6;\n    public static final int KEY_CRASH_FAST_PROTECT        = 7;\n    public static final int KEY_CRASH_CAUSE_XPOSED_DALVIK = 8;\n    public static final int KEY_CRASH_CAUSE_XPOSED_ART    = 9;\n    public static final int KEY_APPLY_WITH_RETRY          = 10;\n\n    //Key -- try apply detail", "    public static final int KEY_CRASH_CAUSE_XPOSED_DALVIK = 8;\n    public static final int KEY_CRASH_CAUSE_XPOSED_ART    = 9;\n    public static final int KEY_APPLY_WITH_RETRY          = 10;\n\n    //Key -- try apply detail\n    public static final int KEY_TRY_APPLY_UPGRADE                 = 70;\n    public static final int KEY_TRY_APPLY_DISABLE                 = 71;\n    public static final int KEY_TRY_APPLY_RUNNING                 = 72;\n    public static final int KEY_TRY_APPLY_INSERVICE               = 73;\n    public static final int KEY_TRY_APPLY_NOT_EXIST               = 74;\n    public static final int KEY_TRY_APPLY_GOOGLEPLAY              = 75;", "    public static final int KEY_TRY_APPLY_INSERVICE               = 73;\n    public static final int KEY_TRY_APPLY_NOT_EXIST               = 74;\n    public static final int KEY_TRY_APPLY_GOOGLEPLAY              = 75;\n    public static final int KEY_TRY_APPLY_ROM_SPACE               = 76;\n    public static final int KEY_TRY_APPLY_ALREADY_APPLY           = 77;\n    public static final int KEY_TRY_APPLY_MEMORY_LIMIT            = 78;\n    public static final int KEY_TRY_APPLY_CRASH_LIMIT             = 79;\n    public static final int KEY_TRY_APPLY_CONDITION_NOT_SATISFIED = 80;\n    public static final int KEY_TRY_APPLY_JIT                     = 81;\n\n    //Key -- apply detail", "    public static final int KEY_TRY_APPLY_JIT                     = 81;\n\n    //Key -- apply detail\n    public static final int KEY_APPLIED_UPGRADE      = 100;\n    public static final int KEY_APPLIED_UPGRADE_FAIL = 101;\n\n    public static final int KEY_APPLIED_EXCEPTION                               = 120;\n    public static final int KEY_APPLIED_DEXOPT_OTHER                            = 121;\n    public static final int KEY_APPLIED_DEXOPT_EXIST                            = 122;\n    public static final int KEY_APPLIED_DEXOPT_FORMAT                           = 123;\n    public static final int KEY_APPLIED_INFO_CORRUPTED                          = 124;\n    //package check", "    public static final int KEY_APPLIED_DEXOPT_EXIST                            = 122;\n    public static final int KEY_APPLIED_DEXOPT_FORMAT                           = 123;\n    public static final int KEY_APPLIED_INFO_CORRUPTED                          = 124;\n    //package check\n    public static final int KEY_APPLIED_PACKAGE_CHECK_SIGNATURE                 = 150;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_DEX_META                  = 151;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_LIB_META                  = 152;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND   = 153;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND = 154;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_META_NOT_FOUND            = 155;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL       = 156;", "    public static final int KEY_APPLIED_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND = 154;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_META_NOT_FOUND            = 155;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL       = 156;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_RES_META                  = 157;\n    public static final int KEY_APPLIED_PACKAGE_CHECK_TINKERFLAG_NOT_SUPPORT    = 158;\n\n    //version check\n    public static final int KEY_APPLIED_VERSION_CHECK      = 180;\n    //extract error\n    public static final int KEY_APPLIED_PATCH_FILE_EXTRACT = 181;\n    public static final int KEY_APPLIED_DEX_EXTRACT        = 182;", "    public static final int KEY_APPLIED_PATCH_FILE_EXTRACT = 181;\n    public static final int KEY_APPLIED_DEX_EXTRACT        = 182;\n    public static final int KEY_APPLIED_LIB_EXTRACT        = 183;\n    public static final int KEY_APPLIED_RESOURCE_EXTRACT   = 184;\n    //cost time\n    public static final int KEY_APPLIED_SUCC_COST_5S_LESS  = 200;\n    public static final int KEY_APPLIED_SUCC_COST_10S_LESS = 201;\n    public static final int KEY_APPLIED_SUCC_COST_30S_LESS = 202;\n    public static final int KEY_APPLIED_SUCC_COST_60S_LESS = 203;\n    public static final int KEY_APPLIED_SUCC_COST_OTHER    = 204;\n", "    public static final int KEY_APPLIED_SUCC_COST_60S_LESS = 203;\n    public static final int KEY_APPLIED_SUCC_COST_OTHER    = 204;\n\n    public static final int KEY_APPLIED_FAIL_COST_5S_LESS  = 205;\n    public static final int KEY_APPLIED_FAIL_COST_10S_LESS = 206;\n    public static final int KEY_APPLIED_FAIL_COST_30S_LESS = 207;\n    public static final int KEY_APPLIED_FAIL_COST_60S_LESS = 208;\n    public static final int KEY_APPLIED_FAIL_COST_OTHER    = 209;\n\n\n    // KEY -- load detail", "    public static final int KEY_LOADED_UNKNOWN_EXCEPTION        = 250;\n    public static final int KEY_LOADED_UNCAUGHT_EXCEPTION       = 251;\n    public static final int KEY_LOADED_EXCEPTION_DEX            = 252;\n    public static final int KEY_LOADED_EXCEPTION_DEX_CHECK      = 253;\n    public static final int KEY_LOADED_EXCEPTION_RESOURCE       = 254;\n    public static final int KEY_LOADED_EXCEPTION_RESOURCE_CHECK = 255;\n\n\n    public static final int KEY_LOADED_MISMATCH_DEX       = 300;\n    public static final int KEY_LOADED_MISMATCH_LIB       = 301;\n    public static final int KEY_LOADED_MISMATCH_RESOURCE  = 302;", "    public static final int KEY_LOADED_MISMATCH_DEX       = 300;\n    public static final int KEY_LOADED_MISMATCH_LIB       = 301;\n    public static final int KEY_LOADED_MISMATCH_RESOURCE  = 302;\n    public static final int KEY_LOADED_MISSING_DEX        = 303;\n    public static final int KEY_LOADED_MISSING_LIB        = 304;\n    public static final int KEY_LOADED_MISSING_PATCH_FILE = 305;\n    public static final int KEY_LOADED_MISSING_PATCH_INFO = 306;\n    public static final int KEY_LOADED_MISSING_DEX_OPT    = 307;\n    public static final int KEY_LOADED_MISSING_RES        = 308;\n    public static final int KEY_LOADED_INFO_CORRUPTED     = 309;\n\n    //load package check", "    public static final int KEY_LOADED_MISSING_RES        = 308;\n    public static final int KEY_LOADED_INFO_CORRUPTED     = 309;\n\n    //load package check\n    public static final int KEY_LOADED_PACKAGE_CHECK_SIGNATURE                 = 350;\n    public static final int KEY_LOADED_PACKAGE_CHECK_DEX_META                  = 351;\n    public static final int KEY_LOADED_PACKAGE_CHECK_LIB_META                  = 352;\n    public static final int KEY_LOADED_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND   = 353;\n    public static final int KEY_LOADED_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND = 354;\n    public static final int KEY_LOADED_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL       = 355;\n    public static final int KEY_LOADED_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND    = 356;", "    public static final int KEY_LOADED_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND = 354;\n    public static final int KEY_LOADED_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL       = 355;\n    public static final int KEY_LOADED_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND    = 356;\n    public static final int KEY_LOADED_PACKAGE_CHECK_RES_META                  = 357;\n    public static final int KEY_LOADED_PACKAGE_CHECK_TINKERFLAG_NOT_SUPPORT    = 358;\n\n\n    public static final int KEY_LOADED_SUCC_COST_500_LESS  = 400;\n    public static final int KEY_LOADED_SUCC_COST_1000_LESS = 401;\n    public static final int KEY_LOADED_SUCC_COST_3000_LESS = 402;\n    public static final int KEY_LOADED_SUCC_COST_5000_LESS = 403;", "    public static final int KEY_LOADED_SUCC_COST_1000_LESS = 401;\n    public static final int KEY_LOADED_SUCC_COST_3000_LESS = 402;\n    public static final int KEY_LOADED_SUCC_COST_5000_LESS = 403;\n    public static final int KEY_LOADED_SUCC_COST_OTHER     = 404;\n\n    public static final int KEY_LOADED_INTERPRET_GET_INSTRUCTION_SET_ERROR = 450;\n    public static final int KEY_LOADED_INTERPRET_INTERPRET_COMMAND_ERROR   = 451;\n    public static final int KEY_LOADED_INTERPRET_TYPE_INTERPRET_OK         = 452;\n\n\n    interface Reporter {\n        void onReport(int key);\n\n        void onReport(String message);\n    }\n\n    private static Reporter reporter = null;\n", "    public void setReporter(Reporter reporter) {\n        this.reporter = reporter;\n    }\n\n    public static void onTryApply(boolean success) {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_TRY_APPLY);\n\n        reporter.onReport(KEY_TRY_APPLY_UPGRADE);\n", "        if (success) {\n            reporter.onReport(KEY_TRY_APPLY_SUCCESS);\n        }\n    }\n\n    public static void onTryApplyFail(int errorCode) {\n        if (reporter == null) {\n            return;\n        }\n        switch (errorCode) {\n            case ShareConstants.ERROR_PATCH_NOTEXIST:\n                reporter.onReport(KEY_TRY_APPLY_NOT_EXIST);\n                break;\n            case ShareConstants.ERROR_PATCH_DISABLE:\n                reporter.onReport(KEY_TRY_APPLY_DISABLE);\n                break;\n            case ShareConstants.ERROR_PATCH_INSERVICE:\n                reporter.onReport(KEY_TRY_APPLY_INSERVICE);\n                break;\n            case ShareConstants.ERROR_PATCH_RUNNING:\n                reporter.onReport(KEY_TRY_APPLY_RUNNING);\n                break;\n            case ShareConstants.ERROR_PATCH_JIT:\n                reporter.onReport(KEY_TRY_APPLY_JIT);\n                break;\n            case Utils.ERROR_PATCH_ROM_SPACE:\n                reporter.onReport(KEY_TRY_APPLY_ROM_SPACE);\n                break;\n            case Utils.ERROR_PATCH_GOOGLEPLAY_CHANNEL:\n                reporter.onReport(KEY_TRY_APPLY_GOOGLEPLAY);\n                break;\n            case ShareConstants.ERROR_PATCH_ALREADY_APPLY:\n                reporter.onReport(KEY_TRY_APPLY_ALREADY_APPLY);\n                break;\n            case Utils.ERROR_PATCH_CRASH_LIMIT:\n                reporter.onReport(KEY_TRY_APPLY_CRASH_LIMIT);\n                break;\n            case Utils.ERROR_PATCH_MEMORY_LIMIT:\n                reporter.onReport(KEY_TRY_APPLY_MEMORY_LIMIT);\n                break;\n            case Utils.ERROR_PATCH_CONDITION_NOT_SATISFIED:\n                reporter.onReport(KEY_TRY_APPLY_CONDITION_NOT_SATISFIED);\n                break;\n\n        }\n    }\n", "    public static void onLoadPackageCheckFail(int errorCode) {\n        if (reporter == null) {\n            return;\n        }\n        switch (errorCode) {\n            case ShareConstants.ERROR_PACKAGE_CHECK_SIGNATURE_FAIL:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_SIGNATURE);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_DEX_META);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_LIB_META);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL);\n\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_RES_META);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_TINKERFLAG_NOT_SUPPORT:\n                reporter.onReport(KEY_LOADED_PACKAGE_CHECK_TINKERFLAG_NOT_SUPPORT);\n                break;\n        }\n    }\n", "    public static void onLoaded(long cost) {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_LOADED);\n\n        if (cost < 0L) {\n            TinkerLog.e(TAG, \"hp_report report load cost failed, invalid cost\");\n            return;\n        }\n", "        if (cost <= 500) {\n            reporter.onReport(KEY_LOADED_SUCC_COST_500_LESS);\n        } else if (cost <= 1000) {\n            reporter.onReport(KEY_LOADED_SUCC_COST_1000_LESS);\n        } else if (cost <= 3000) {\n            reporter.onReport(KEY_LOADED_SUCC_COST_3000_LESS);\n        } else if (cost <= 5000) {\n            reporter.onReport(KEY_LOADED_SUCC_COST_5000_LESS);\n        } else {\n            reporter.onReport(KEY_LOADED_SUCC_COST_OTHER);\n        }\n    }\n", "    public static void onLoadInfoCorrupted() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_LOADED_INFO_CORRUPTED);\n    }\n\n    public static void onLoadFileNotFound(int fileType) {\n        if (reporter == null) {\n            return;\n        }\n        switch (fileType) {\n            case ShareConstants.TYPE_DEX_OPT:\n                reporter.onReport(KEY_LOADED_MISSING_DEX_OPT);\n                break;\n            case ShareConstants.TYPE_DEX:\n                reporter.onReport(KEY_LOADED_MISSING_DEX);\n                break;\n            case ShareConstants.TYPE_LIBRARY:\n                reporter.onReport(KEY_LOADED_MISSING_LIB);\n                break;\n            case ShareConstants.TYPE_PATCH_FILE:\n                reporter.onReport(KEY_LOADED_MISSING_PATCH_FILE);\n                break;\n            case ShareConstants.TYPE_PATCH_INFO:\n                reporter.onReport(KEY_LOADED_MISSING_PATCH_INFO);\n                break;\n            case ShareConstants.TYPE_RESOURCE:\n                reporter.onReport(KEY_LOADED_MISSING_RES);\n                break;\n        }\n    }\n", "        if (reporter == null) {\n            return;\n        }\n        switch (fileType) {\n            case ShareConstants.TYPE_DEX_OPT:\n                reporter.onReport(KEY_LOADED_MISSING_DEX_OPT);\n                break;\n            case ShareConstants.TYPE_DEX:\n                reporter.onReport(KEY_LOADED_MISSING_DEX);\n                break;\n            case ShareConstants.TYPE_LIBRARY:\n                reporter.onReport(KEY_LOADED_MISSING_LIB);\n                break;\n            case ShareConstants.TYPE_PATCH_FILE:\n                reporter.onReport(KEY_LOADED_MISSING_PATCH_FILE);\n                break;\n            case ShareConstants.TYPE_PATCH_INFO:\n                reporter.onReport(KEY_LOADED_MISSING_PATCH_INFO);\n                break;\n            case ShareConstants.TYPE_RESOURCE:\n                reporter.onReport(KEY_LOADED_MISSING_RES);\n                break;\n        }\n    }\n", "    public static void onLoadInterpretReport(int type, Throwable e) {\n        if (reporter == null) {\n            return;\n        }\n        switch (type) {\n            case ShareConstants.TYPE_INTERPRET_GET_INSTRUCTION_SET_ERROR:\n                reporter.onReport(KEY_LOADED_INTERPRET_GET_INSTRUCTION_SET_ERROR);\n                reporter.onReport(\"Tinker Exception:interpret occur exception \" + Utils.getExceptionCauseString(e));\n                break;\n            case ShareConstants.TYPE_INTERPRET_COMMAND_ERROR:\n                reporter.onReport(KEY_LOADED_INTERPRET_INTERPRET_COMMAND_ERROR);\n                reporter.onReport(\"Tinker Exception:interpret occur exception \" + Utils.getExceptionCauseString(e));\n                break;\n            case ShareConstants.TYPE_INTERPRET_OK:\n                reporter.onReport(KEY_LOADED_INTERPRET_TYPE_INTERPRET_OK);\n                break;\n        }\n    }\n", "    public static void onLoadFileMisMatch(int fileType) {\n        if (reporter == null) {\n            return;\n        }\n        switch (fileType) {\n            case ShareConstants.TYPE_DEX:\n                reporter.onReport(KEY_LOADED_MISMATCH_DEX);\n                break;\n            case ShareConstants.TYPE_LIBRARY:\n                reporter.onReport(KEY_LOADED_MISMATCH_LIB);\n                break;\n            case ShareConstants.TYPE_RESOURCE:\n                reporter.onReport(KEY_LOADED_MISMATCH_RESOURCE);\n                break;\n        }\n    }\n", "    public static void onLoadException(Throwable throwable, int errorCode) {\n        if (reporter == null) {\n            return;\n        }\n        boolean isCheckFail = false;\n        switch (errorCode) {\n            case ShareConstants.ERROR_LOAD_EXCEPTION_DEX:\n                if (throwable.getMessage().contains(ShareConstants.CHECK_DEX_INSTALL_FAIL)) {\n                    reporter.onReport(KEY_LOADED_EXCEPTION_DEX_CHECK);\n                    isCheckFail = true;\n                    TinkerLog.e(TAG, \"tinker dex check fail:\" + throwable.getMessage());\n                } else {\n                    reporter.onReport(KEY_LOADED_EXCEPTION_DEX);\n                    TinkerLog.e(TAG, \"tinker dex reflect fail:\" + throwable.getMessage());\n                }\n                break;\n            case ShareConstants.ERROR_LOAD_EXCEPTION_RESOURCE:", "                if (throwable.getMessage().contains(ShareConstants.CHECK_RES_INSTALL_FAIL)) {\n                    reporter.onReport(KEY_LOADED_EXCEPTION_RESOURCE_CHECK);\n                    isCheckFail = true;\n                    TinkerLog.e(TAG, \"tinker res check fail:\" + throwable.getMessage());\n                } else {\n                    reporter.onReport(KEY_LOADED_EXCEPTION_RESOURCE);\n                    TinkerLog.e(TAG, \"tinker res reflect fail:\" + throwable.getMessage());\n                }\n                break;\n            case ShareConstants.ERROR_LOAD_EXCEPTION_UNCAUGHT:\n                reporter.onReport(KEY_LOADED_UNCAUGHT_EXCEPTION);\n                break;\n            case ShareConstants.ERROR_LOAD_EXCEPTION_UNKNOWN:\n                reporter.onReport(KEY_LOADED_UNKNOWN_EXCEPTION);\n                break;\n        }\n        //reporter exception, for dex check fail, we don't need to report stacktrace", "        if (!isCheckFail) {\n            reporter.onReport(\"Tinker Exception:load tinker occur exception \" + Utils.getExceptionCauseString(throwable));\n        }\n    }\n\n    public static void onApplyPatchServiceStart() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_APPLIED_START);\n    }\n", "    public static void onApplyDexOptFail(Throwable throwable) {\n        if (reporter == null) {\n            return;\n        }\n        if (throwable.getMessage().contains(ShareConstants.CHECK_DEX_OAT_EXIST_FAIL)) {\n            reporter.onReport(KEY_APPLIED_DEXOPT_EXIST);\n        } else if (throwable.getMessage().contains(ShareConstants.CHECK_DEX_OAT_FORMAT_FAIL)) {\n            reporter.onReport(KEY_APPLIED_DEXOPT_FORMAT);\n        } else {\n            reporter.onReport(KEY_APPLIED_DEXOPT_OTHER);\n            reporter.onReport(\"Tinker Exception:apply tinker occur exception \" + Utils.getExceptionCauseString(throwable));\n        }\n    }\n", "    public static void onApplyInfoCorrupted() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_APPLIED_INFO_CORRUPTED);\n    }\n\n    public static void onApplyVersionCheckFail() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_APPLIED_VERSION_CHECK);\n    }\n", "        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_APPLIED_VERSION_CHECK);\n    }\n\n    public static void onApplyExtractFail(int fileType) {\n        if (reporter == null) {\n            return;\n        }\n        switch (fileType) {\n            case ShareConstants.TYPE_DEX:\n                reporter.onReport(KEY_APPLIED_DEX_EXTRACT);\n                break;\n            case ShareConstants.TYPE_LIBRARY:\n                reporter.onReport(KEY_APPLIED_LIB_EXTRACT);\n                break;\n            case ShareConstants.TYPE_PATCH_FILE:\n                reporter.onReport(KEY_APPLIED_PATCH_FILE_EXTRACT);\n                break;\n            case ShareConstants.TYPE_RESOURCE:\n                reporter.onReport(KEY_APPLIED_RESOURCE_EXTRACT);\n                break;\n        }\n    }\n", "    public static void onApplied(long cost, boolean success) {\n        if (reporter == null) {\n            return;\n        }\n        if (success) {\n            reporter.onReport(KEY_APPLIED);\n        }\n\n        if (success) {\n            reporter.onReport(KEY_APPLIED_UPGRADE);\n        } else {\n            reporter.onReport(KEY_APPLIED_UPGRADE_FAIL);\n        }\n\n        TinkerLog.i(TAG, \"hp_report report apply cost = %d\", cost);\n", "        if (success) {\n            reporter.onReport(KEY_APPLIED_UPGRADE);\n        } else {\n            reporter.onReport(KEY_APPLIED_UPGRADE_FAIL);\n        }\n\n        TinkerLog.i(TAG, \"hp_report report apply cost = %d\", cost);\n\n        if (cost < 0L) {\n            TinkerLog.e(TAG, \"hp_report report apply cost failed, invalid cost\");\n            return;\n        }\n", "        if (cost < 0L) {\n            TinkerLog.e(TAG, \"hp_report report apply cost failed, invalid cost\");\n            return;\n        }\n\n        if (cost <= 5000) {\n            if (success) {\n                reporter.onReport(KEY_APPLIED_SUCC_COST_5S_LESS);\n            } else {\n                reporter.onReport(KEY_APPLIED_FAIL_COST_5S_LESS);\n            }", "        } else if (cost <= 10 * 1000) {\n            if (success) {\n                reporter.onReport(KEY_APPLIED_SUCC_COST_10S_LESS);\n            } else {\n                reporter.onReport(KEY_APPLIED_FAIL_COST_10S_LESS);\n            }\n        } else if (cost <= 30 * 1000) {\n            if (success) {\n                reporter.onReport(KEY_APPLIED_SUCC_COST_30S_LESS);\n            } else {\n                reporter.onReport(KEY_APPLIED_FAIL_COST_30S_LESS);\n            }", "        } else if (cost <= 60 * 1000) {\n            if (success) {\n                reporter.onReport(KEY_APPLIED_SUCC_COST_60S_LESS);\n            } else {\n                reporter.onReport(KEY_APPLIED_FAIL_COST_60S_LESS);\n            }\n        } else {\n            if (success) {\n                reporter.onReport(KEY_APPLIED_SUCC_COST_OTHER);\n            } else {\n                reporter.onReport(KEY_APPLIED_FAIL_COST_OTHER);\n            }\n        }\n    }\n", "    public static void onApplyPackageCheckFail(int errorCode) {\n        if (reporter == null) {\n            return;\n        }\n        TinkerLog.i(TAG, \"hp_report package check failed, error = %d\", errorCode);\n\n        switch (errorCode) {\n            case ShareConstants.ERROR_PACKAGE_CHECK_SIGNATURE_FAIL:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_SIGNATURE);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_DEX_META_CORRUPTED:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_DEX_META);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_LIB_META_CORRUPTED:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_LIB_META);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_PATCH_TINKER_ID_NOT_FOUND);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_APK_TINKER_ID_NOT_FOUND);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_TINKER_ID_NOT_EQUAL);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_PACKAGE_META_NOT_FOUND:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_META_NOT_FOUND);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_RESOURCE_META_CORRUPTED:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_RES_META);\n                break;\n            case ShareConstants.ERROR_PACKAGE_CHECK_TINKERFLAG_NOT_SUPPORT:\n                reporter.onReport(KEY_APPLIED_PACKAGE_CHECK_TINKERFLAG_NOT_SUPPORT);\n                break;\n        }\n    }\n", "    public static void onApplyCrash(Throwable throwable) {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_APPLIED_EXCEPTION);\n        reporter.onReport(\"Tinker Exception:apply tinker occur exception \" + Utils.getExceptionCauseString(throwable));\n    }\n\n    public static void onFastCrashProtect() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_CRASH_FAST_PROTECT);\n    }\n", "    public static void onFastCrashProtect() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_CRASH_FAST_PROTECT);\n    }\n\n    public static void onXposedCrash() {\n        if (reporter == null) {\n            return;\n        }", "        if (reporter == null) {\n            return;\n        }\n        if (ShareTinkerInternals.isVmArt()) {\n            reporter.onReport(KEY_CRASH_CAUSE_XPOSED_ART);\n        } else {\n            reporter.onReport(KEY_CRASH_CAUSE_XPOSED_DALVIK);\n        }\n    }\n\n    public static void onReportRetryPatch() {", "    public static void onReportRetryPatch() {\n        if (reporter == null) {\n            return;\n        }\n        reporter.onReport(KEY_APPLY_WITH_RETRY);\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/TinkerManager.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport com.tencent.tinker.entry.ApplicationLike;\nimport com.tencent.tinker.lib.listener.PatchListener;\nimport com.tencent.tinker.lib.patch.AbstractPatch;\nimport com.tencent.tinker.lib.patch.UpgradePatch;\nimport com.tencent.tinker.lib.reporter.LoadReporter;\nimport com.tencent.tinker.lib.reporter.PatchReporter;\nimport com.tencent.tinker.lib.tinker.TinkerInstaller;\nimport com.tencent.tinker.lib.util.TinkerLog;", "import com.tencent.tinker.lib.tinker.TinkerInstaller;\nimport com.tencent.tinker.lib.util.TinkerLog;\nimport com.tencent.tinker.lib.util.UpgradePatchRetry;\n\npublic class TinkerManager {\n    private static final String TAG = \"FATJS\";\n\n    private static ApplicationLike applicationLike;\n    private static boolean isInstalled = false;\n\n    public static void setTinkerApplicationLike(ApplicationLike appLike) {\n        applicationLike = appLike;\n    }\n", "    public static void setTinkerApplicationLike(ApplicationLike appLike) {\n        applicationLike = appLike;\n    }\n\n    public static ApplicationLike getTinkerApplicationLike() {\n        return applicationLike;\n    }\n\n    public static void setUpgradeRetryEnable(boolean enable) {\n        UpgradePatchRetry.getInstance(applicationLike.getApplication()).setRetryEnable(enable);\n    }\n\n\n    /**\n     * all use default class, simply Tinker install method\n     */", "    public static void setUpgradeRetryEnable(boolean enable) {\n        UpgradePatchRetry.getInstance(applicationLike.getApplication()).setRetryEnable(enable);\n    }\n\n\n    /**\n     * all use default class, simply Tinker install method\n     */\n    public static void sampleInstallTinker(ApplicationLike appLike) {\n        if (isInstalled) {\n            TinkerLog.w(TAG, \"install tinker, but has installed, ignore\");\n            return;\n        }\n        TinkerInstaller.install(appLike);\n        isInstalled = true;\n    }\n\n\n    /**\n     * you can specify all class you want.\n     * sometimes, you can only install tinker in some process you want!\n     *\n     * @param appLike\n     */", "    public static void sampleInstallTinker(ApplicationLike appLike) {\n        if (isInstalled) {\n            TinkerLog.w(TAG, \"install tinker, but has installed, ignore\");\n            return;\n        }\n        TinkerInstaller.install(appLike);\n        isInstalled = true;\n    }\n\n\n    /**\n     * you can specify all class you want.\n     * sometimes, you can only install tinker in some process you want!\n     *\n     * @param appLike\n     */", "    public static void installTinker(ApplicationLike appLike) {\n        if (isInstalled) {\n            TinkerLog.w(TAG, \"install tinker, but has installed, ignore\");\n            return;\n        }\n        //or you can just use DefaultLoadReporter\n        LoadReporter loadReporter = new SampleLoadReporter(appLike.getApplication());\n        //or you can just use DefaultPatchReporter\n        PatchReporter patchReporter = new SamplePatchReporter(appLike.getApplication());\n        //or you can just use DefaultPatchListener\n        PatchListener patchListener = new SamplePatchListener(appLike.getApplication());\n        //you can set your own upgrade patch if you need\n        AbstractPatch upgradePatchProcessor = new UpgradePatch();\n\n        TinkerInstaller.install(appLike,\n                loadReporter, patchReporter, patchListener,\n                SampleResultService.class, upgradePatchProcessor);\n\n        isInstalled = true;\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/SampleLoadReporter.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport android.content.Context;\nimport android.os.Looper;\nimport android.os.MessageQueue;\n\nimport com.tencent.tinker.lib.reporter.DefaultLoadReporter;\nimport com.tencent.tinker.lib.util.UpgradePatchRetry;\nimport com.tencent.tinker.loader.shareutil.ShareConstants;\n", "import com.tencent.tinker.loader.shareutil.ShareConstants;\n\nimport java.io.File;\n\n\npublic class SampleLoadReporter extends DefaultLoadReporter {\n    private static final String TAG = \"FATJS\";\n\n    public SampleLoadReporter(Context context) {\n        super(context);\n    }\n\n    @Override", "    public void onLoadPatchListenerReceiveFail(final File patchFile, int errorCode) {\n        super.onLoadPatchListenerReceiveFail(patchFile, errorCode);\n        SampleTinkerReport.onTryApplyFail(errorCode);\n    }\n\n    @Override\n    public void onLoadResult(File patchDirectory, int loadCode, long cost) {\n        super.onLoadResult(patchDirectory, loadCode, cost);\n        switch (loadCode) {\n            case ShareConstants.ERROR_LOAD_OK:\n                SampleTinkerReport.onLoaded(cost);\n                break;\n        }\n        Looper.getMainLooper().myQueue().addIdleHandler(new MessageQueue.IdleHandler() {\n            @Override", "            public boolean queueIdle() {\n                if (UpgradePatchRetry.getInstance(context).onPatchRetryLoad()) {\n                    SampleTinkerReport.onReportRetryPatch();\n                }\n                return false;\n            }\n        });\n    }\n\n    @Override\n    public void onLoadException(Throwable e, int errorCode) {\n        super.onLoadException(e, errorCode);\n        SampleTinkerReport.onLoadException(e, errorCode);\n    }\n\n    @Override", "    public void onLoadException(Throwable e, int errorCode) {\n        super.onLoadException(e, errorCode);\n        SampleTinkerReport.onLoadException(e, errorCode);\n    }\n\n    @Override\n    public void onLoadFileMd5Mismatch(File file, int fileType) {\n        super.onLoadFileMd5Mismatch(file, fileType);\n        SampleTinkerReport.onLoadFileMisMatch(fileType);\n    }\n\n    /**\n     * try to recover patch oat file\n     *\n     * @param file\n     * @param fileType\n     * @param isDirectory\n     */\n    @Override", "    public void onLoadFileNotFound(File file, int fileType, boolean isDirectory) {\n        super.onLoadFileNotFound(file, fileType, isDirectory);\n        SampleTinkerReport.onLoadFileNotFound(fileType);\n    }\n\n    @Override\n    public void onLoadPackageCheckFail(File patchFile, int errorCode) {\n        super.onLoadPackageCheckFail(patchFile, errorCode);\n        SampleTinkerReport.onLoadPackageCheckFail(errorCode);\n    }\n\n    @Override", "    public void onLoadPatchInfoCorrupted(String oldVersion, String newVersion, File patchInfoFile) {\n        super.onLoadPatchInfoCorrupted(oldVersion, newVersion, patchInfoFile);\n        SampleTinkerReport.onLoadInfoCorrupted();\n    }\n\n    @Override\n    public void onLoadInterpret(int type, Throwable e) {\n        super.onLoadInterpret(type, e);\n        SampleTinkerReport.onLoadInterpretReport(type, e);\n    }\n\n    @Override", "    public void onLoadPatchVersionChanged(String oldVersion, String newVersion, File patchDirectoryFile, String currentPatchName) {\n        super.onLoadPatchVersionChanged(oldVersion, newVersion, patchDirectoryFile, currentPatchName);\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/reporter/Utils.java", "chunked_list": ["/*\n * Tencent is pleased to support the open source community by making Tinker available.\n *\n * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/BSD-3-Clause\n *", " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.linsheng.FATJS.reporter;\n", "package com.linsheng.FATJS.reporter;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.os.Environment;\nimport android.os.StatFs;\n\nimport com.tencent.tinker.lib.util.TinkerLog;", "\nimport com.tencent.tinker.lib.util.TinkerLog;\nimport com.tencent.tinker.loader.shareutil.ShareConstants;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintStream;\n\npublic class Utils {\n    private static final String TAG = \"FATJS\";\n\n    /**\n     * the error code define by myself\n     * should after {@code ShareConstants.ERROR_PATCH_INSERVICE\n     */", "\npublic class Utils {\n    private static final String TAG = \"FATJS\";\n\n    /**\n     * the error code define by myself\n     * should after {@code ShareConstants.ERROR_PATCH_INSERVICE\n     */\n    public static final int ERROR_PATCH_GOOGLEPLAY_CHANNEL      = -20;\n    public static final int ERROR_PATCH_ROM_SPACE               = -21;\n    public static final int ERROR_PATCH_MEMORY_LIMIT            = -22;", "    public static final int ERROR_PATCH_GOOGLEPLAY_CHANNEL      = -20;\n    public static final int ERROR_PATCH_ROM_SPACE               = -21;\n    public static final int ERROR_PATCH_MEMORY_LIMIT            = -22;\n    public static final int ERROR_PATCH_CRASH_LIMIT             = -23;\n    public static final int ERROR_PATCH_CONDITION_NOT_SATISFIED = -24;\n\n    public static final String PLATFORM = \"platform\";\n\n    public static final int MIN_MEMORY_HEAP_SIZE = 45;\n\n    private static boolean background = false;\n", "    public static final int MIN_MEMORY_HEAP_SIZE = 45;\n\n    private static boolean background = false;\n\n    public static boolean isGooglePlay() {\n        return false;\n    }\n\n    public static boolean isBackground() {\n        return background;\n    }\n", "    public static boolean isBackground() {\n        return background;\n    }\n\n    public static void setBackground(boolean back) {\n        background = back;\n    }\n\n    public static int checkForPatchRecover(long roomSize, int maxMemory) {\n        if (Utils.isGooglePlay()) {\n            return Utils.ERROR_PATCH_GOOGLEPLAY_CHANNEL;\n        }", "    public static int checkForPatchRecover(long roomSize, int maxMemory) {\n        if (Utils.isGooglePlay()) {\n            return Utils.ERROR_PATCH_GOOGLEPLAY_CHANNEL;\n        }\n        if (maxMemory < MIN_MEMORY_HEAP_SIZE) {\n            return Utils.ERROR_PATCH_MEMORY_LIMIT;\n        }\n        //or you can mention user to clean their rom space!\n        if (!checkRomSpaceEnough(roomSize)) {\n            return Utils.ERROR_PATCH_ROM_SPACE;\n        }\n\n        return ShareConstants.ERROR_PATCH_OK;\n    }\n", "        if (!checkRomSpaceEnough(roomSize)) {\n            return Utils.ERROR_PATCH_ROM_SPACE;\n        }\n\n        return ShareConstants.ERROR_PATCH_OK;\n    }\n\n    public static boolean isXposedExists(Throwable thr) {\n        StackTraceElement[] stackTraces = thr.getStackTrace();\n        for (StackTraceElement stackTrace : stackTraces) {\n            final String clazzName = stackTrace.getClassName();", "        for (StackTraceElement stackTrace : stackTraces) {\n            final String clazzName = stackTrace.getClassName();\n            if (clazzName != null && clazzName.contains(\"de.robv.android.xposed.XposedBridge\")) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    @Deprecated\n    public static boolean checkRomSpaceEnough(long limitSize) {\n        long allSize;\n        long availableSize = 0;", "    public static boolean checkRomSpaceEnough(long limitSize) {\n        long allSize;\n        long availableSize = 0;\n        try {\n            File data = Environment.getDataDirectory();\n            StatFs sf = new StatFs(data.getPath());\n            availableSize = (long) sf.getAvailableBlocks() * (long) sf.getBlockSize();\n            allSize = (long) sf.getBlockCount() * (long) sf.getBlockSize();\n        } catch (Exception e) {\n            allSize = 0;\n        }\n", "        if (allSize != 0 && availableSize > limitSize) {\n            return true;\n        }\n        return false;\n    }\n\n    public static String getExceptionCauseString(final Throwable ex) {\n        final ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        final PrintStream ps = new PrintStream(bos);\n\n        try {\n            // print directly\n            Throwable t = ex;", "        try {\n            // print directly\n            Throwable t = ex;\n            while (t.getCause() != null) {\n                t = t.getCause();\n            }\n            t.printStackTrace(ps);\n            return toVisualString(bos.toString());\n        } finally {\n            try {\n                bos.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static String toVisualString(String src) {\n        boolean cutFlg = false;\n", "            try {\n                bos.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static String toVisualString(String src) {\n        boolean cutFlg = false;\n", "        if (null == src) {\n            return null;\n        }\n\n        char[] chr = src.toCharArray();\n        if (null == chr) {\n            return null;\n        }\n\n        int i = 0;\n        for (; i < chr.length; i++) {", "        for (; i < chr.length; i++) {\n            if (chr[i] > 127) {\n                chr[i] = 0;\n                cutFlg = true;\n                break;\n            }\n        }\n\n        if (cutFlg) {\n            return new String(chr, 0, i);\n        } else {\n            return src;\n        }\n    }\n", "        if (cutFlg) {\n            return new String(chr, 0, i);\n        } else {\n            return src;\n        }\n    }\n\n    public static class ScreenState {\n        public interface IOnScreenOff {\n            void onScreenOff();\n        }\n\n        public ScreenState(final Context context, final IOnScreenOff onScreenOffInterface) {\n            IntentFilter filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_SCREEN_OFF);\n\n            context.registerReceiver(new BroadcastReceiver() {\n\n                @Override", "        public interface IOnScreenOff {\n            void onScreenOff();\n        }\n\n        public ScreenState(final Context context, final IOnScreenOff onScreenOffInterface) {\n            IntentFilter filter = new IntentFilter();\n            filter.addAction(Intent.ACTION_SCREEN_OFF);\n\n            context.registerReceiver(new BroadcastReceiver() {\n\n                @Override", "                public void onReceive(Context context, Intent in) {\n                    String action = in == null ? \"\" : in.getAction();\n                    TinkerLog.i(TAG, \"ScreenReceiver action [%s] \", action);\n                    if (Intent.ACTION_SCREEN_OFF.equals(action)) {\n                        if (onScreenOffInterface != null) {\n                            onScreenOffInterface.onScreenOff();\n                        }\n                    }\n                    context.unregisterReceiver(this);\n                }\n            }, filter);\n        }\n    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/enums/TaskTypeEnum.java", "chunked_list": ["package com.linsheng.FATJS.enums;\n\n//\u8c03\u5ea6\u4efb\u52a1\u7c7b\u578b\u679a\u4e3e\npublic enum TaskTypeEnum {\n    SEND_MESSAGE(1,\"\u79c1\u4fe1\",\"\u79c1\u4fe1\"),\n    WECHAT_SEND_MESSAGE(2,\"\u5fae\u4fe1\u7fa4\u53d1\",\"\u5fae\u4fe1\u7fa4\u53d1\");\n\n    private int code;\n    private String name;\n    private String descTxt;\n\n    TaskTypeEnum(int code, String name, String descTxt) {\n        this.code = code;\n        this.name = name;\n        this.descTxt = descTxt;\n    }\n", "    public int getCode() {\n        return code;\n    }\n\n\n    public String getName() {\n        return name;\n    }\n\n\n    public String getDescTxt() {\n        return descTxt;\n    }\n\n}\n", "    public String getDescTxt() {\n        return descTxt;\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/bean/Variable.java", "chunked_list": ["package com.linsheng.FATJS.bean;\n\nimport android.content.Context;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport java.util.HashMap;\n\npublic class Variable {\n    public static String ANDROID_ID = \"\";\n    public static String PHONE_NAME = \"\";\n\n    // \u60ac\u6d6e\u7a97\u5c55\u793a\u7684\u6587\u5b57", "public class Variable {\n    public static String ANDROID_ID = \"\";\n    public static String PHONE_NAME = \"\";\n\n    // \u60ac\u6d6e\u7a97\u5c55\u793a\u7684\u6587\u5b57\n    public static TextView btnTextView = null;\n    // \u4e0a\u4e0b\u6587\n    public static Context context = null;\n    // ll\n    public static LinearLayout ll = null;\n", "    public static LinearLayout ll = null;\n\n    public volatile static HashMap<String, Boolean> broadcast_map = new HashMap<String, Boolean>() {{\n        put(\"jumpUid\", false);\n        put(\"msg\", false);\n    }};\n\n    // \u5f53\u524dActivityName\n    public static volatile String currentActivityName;\n\n    // \u5c4f\u5e55\u5bbd\u9ad8", "    public static volatile String currentActivityName;\n\n    // \u5c4f\u5e55\u5bbd\u9ad8\n    public static int mWidth;\n    public static int mHeight;\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/rpa/TaskFactory/TaskBasic.java", "chunked_list": ["package com.linsheng.FATJS.rpa.TaskFactory;\n\nimport com.linsheng.FATJS.AccUtils;\n\nimport java.util.Date;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n\npublic class TaskBasic {\n    private static final String TAG = \"FATJS\";\n\n    public TaskBasic(String NAME) {\n        this.NAME = NAME;\n    }\n\n    // \u4efb\u52a1\u540d\u79f0", "\npublic class TaskBasic {\n    private static final String TAG = \"FATJS\";\n\n    public TaskBasic(String NAME) {\n        this.NAME = NAME;\n    }\n\n    // \u4efb\u52a1\u540d\u79f0\n    public String NAME = \"\";\n    // \u4efb\u52a1\u65f6\u95f4", "    public String NAME = \"\";\n    // \u4efb\u52a1\u65f6\u95f4\n    public Date startTime;\n\n    // \u505c\u987f\u65f6\u957f\n    public final int waitHrefOfSecond  =   500;\n    public final int waitOneSecond     =   1000;\n    public final int waitTwoSecond     =   2000;\n    public final int waitThreeSecond   =   3000;\n    public final int waitFourSecond    =   4000;\n    public final int waitFiveSecond    =   5000;", "    public final int waitThreeSecond   =   3000;\n    public final int waitFourSecond    =   4000;\n    public final int waitFiveSecond    =   5000;\n    public final int waitSixSecond     =   6000;\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u7b2c\u4e00\u4e2a\u6574\u6570\n    public static int extractFirstIntFromString(String str){\n        Pattern p = Pattern.compile(\"\\\\d+\");\n        Matcher m = p.matcher(str);\n\n        int i = -1;", "        if (m.find()){\n            i = Integer.parseInt(m.group());\n            AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);\n        } else {\n            AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");\n        }\n        return i;\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/rpa/dyService/DyTaskService.java", "chunked_list": ["package com.linsheng.FATJS.rpa.dyService;\nimport android.graphics.Rect;\nimport android.util.Log;\nimport android.view.accessibility.AccessibilityNodeInfo;\n\nimport androidx.annotation.RequiresApi;\n\nimport com.linsheng.FATJS.AccUtils;\nimport com.linsheng.FATJS.bean.Variable;\nimport com.linsheng.FATJS.enums.TaskTypeEnum;", "import com.linsheng.FATJS.bean.Variable;\nimport com.linsheng.FATJS.enums.TaskTypeEnum;\nimport com.linsheng.FATJS.rpa.TaskFactory.TaskBasic;\nimport com.linsheng.FATJS.utils.ExceptionUtil;\nimport com.linsheng.FATJS.utils.ExitException;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n", "import java.util.Random;\n\n/**\n * \u6296\u97f3\u6d4f\u89c8\u89c6\u9891\u5e76\u6253\u5370\u6807\u9898\n */\npublic class DyTaskService extends TaskBasic {\n\n    private static final String TAG = \"FATJS\";\n    public DyTaskService() {\n        super(TaskTypeEnum.WECHAT_SEND_MESSAGE.getName());\n    }\n\n    @RequiresApi(24)", "    public void main() throws Exception {\n        try {\n            runTask();\n        }catch (Exception e) {\n            AccUtils.printLogMsg(ExceptionUtil.toString(e)); //\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u5230\u60ac\u6d6e\u7a97\u65e5\u5fd7\u4e0a\n            e.printStackTrace();\n        }\n    }\n\n    @RequiresApi(24)\n    private void runTask() throws ExitException {\n        AccUtils.moveFloatWindow(\"\u6253\u5f00\");\n        AccUtils.printLogMsg(\"open dy App\");\n        AccUtils.openApp(\"\u6296\u97f3\");\n        AccUtils.timeSleep(waitSixSecond + waitTwoSecond);\n", "        for (int i = 0; i < 100; i++) {\n\n            // \u70b9\u6389\u5f39\u7a97\n            AccessibilityNodeInfo elementByText = AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");\n            if (elementByText != null) {\n                AccUtils.clickNodeByPoint(elementByText);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");\n            if (element != null) {\n                AccUtils.clickNodeByPoint(element);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo closeNode = AccUtils.findElementByText(\"\u5173\u95ed\");", "            if (element != null) {\n                AccUtils.clickNodeByPoint(element);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n            AccessibilityNodeInfo closeNode = AccUtils.findElementByText(\"\u5173\u95ed\");\n            if (closeNode != null) {\n                AccUtils.clickNodeByPoint(closeNode);\n            }\n            AccUtils.timeSleep(waitTwoSecond);\n\n            String videoDesc = currentVideoDesc();\n            AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);\n            AccUtils.timeSleep(new Random().nextInt(waitSixSecond));\n\n            AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");\n            AccUtils.swipe(610, Variable.mHeight - 230, 620, 120, 420);\n            AccUtils.timeSleep(waitTwoSecond);\n\n        }\n    }\n\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u89c6\u9891\u7684\u6807\u9898\n     * @return\n     * @throws ExitException\n     */\n    private String currentVideoDesc() throws ExitException {", "        try {\n            List<AccessibilityNodeInfo> listByContainId = AccUtils.findElementListByContainId(\"com.ss.android.ugc.aweme:id/desc\");\n            if (listByContainId != null) {\n                for (AccessibilityNodeInfo nodeInfo : listByContainId) {\n                    Rect rect = new Rect();\n                    nodeInfo.getBoundsInScreen(rect);\n                    if (rect.left >= Variable.mWidth || rect.left < 10 || rect.top >= Variable.mHeight || rect.top < 900) {\n                        continue;\n                    }\n                    String tmp = String.valueOf(nodeInfo.getText());\n                    Log.i(TAG, \"test_2: nodeInfo => \" + tmp + \" point => \" + rect.left + \", \" + rect.top);\n                    return tmp;\n                }\n            }\n        }catch (Exception e) {\n            e.printStackTrace();\n            AccUtils.printLogMsg(ExceptionUtil.toString(e));\n        }\n        return null;\n    }\n\n\n\n\n\n\n\n\n\n\n\n//        AccUtils.printLogMsg(\"\u70b9\u51fb\u641c\u7d22\");\n//        AccUtils.clickPoint(Variable.mWidth - 50, 150, 100);\n//        AccUtils.timeSleep(waitTwoSecond);\n//        String currentActivityName = AccUtils.getCurrentActivityName();\n//        Log.i(TAG, \"runTask: currentActivityName => \" + currentActivityName);", "//        if (currentActivityName.contains(\"SearchResultActivity\")) {\n//            AccUtils.printLogMsg(\"\u8df3\u8f6c\u5230\u4e86\u641c\u7d22\u9875\u9762\");\n//        }\n//\n//        AccUtils.printLogMsg(\"input text\");\n//        List<AccessibilityNodeInfo> className = AccUtils.findElementListByContainClassName(\"android.widget.EditText\");\n//        if (className != null) {\n//            AccessibilityNodeInfo nodeInfo = className.get(0);\n//            AccUtils.inputTextByNode(nodeInfo, \"Zy52016899\");\n//            AccUtils.timeSleep(waitOneSecond);\n//        }\n//\n//        AccUtils.printLogMsg(\"\u70b9\u51fb\u641c\u7d22\u6309\u94ae\");\n//        AccUtils.clickNodeByPoint(AccUtils.findElementByText(\"\u641c\u7d22\"));\n//        AccUtils.timeSleep(waitFiveSecond);\n//\n//        AccUtils.printLogMsg(\"into index page\");\n//        AccessibilityNodeInfo elementByContainText = AccUtils.findElementByContainText(\"\u6296\u97f3\u53f7\uff1aZy52016899\");\n//        Log.i(TAG, \"findColorTest: elementByContainText => \" + elementByContainText);\n//        AccUtils.clickNodeByPoint(elementByContainText);\n//        AccUtils.timeSleep(waitThreeSecond);\n//\n//        AccUtils.printLogMsg(\"into video\");\n//        List<AccessibilityNodeInfo> recyclerView = AccUtils.findElementListByContainClassName(\"androidx.recyclerview.widget.RecyclerView\");", "//        if (recyclerView != null) {\n//            AccessibilityNodeInfo info = recyclerView.get(0);\n//            AccessibilityNodeInfo child = info.getChild(0);\n//            AccUtils.clickNodeByPoint(child);\n//        }\n//\n//        for (int i = 0; i < 3; i++) {\n//            AccUtils.timeSleep(waitThreeSecond + new Random().nextInt(waitFourSecond));\n//            AccUtils.printLogMsg(\"double click\");\n//            AccUtils.doubleClickPoint(540, 1200, 89);\n//            AccUtils.timeSleep(waitTwoSecond);\n//\n//            AccUtils.printLogMsg(\"comment\");\n//            List<AccessibilityNodeInfo> edit = AccUtils.findElementListByContainClassName(\"android.widget.EditText\");", "//            if (edit != null) {\n//                AccessibilityNodeInfo nodeInfo = edit.get(0);\n//                AccUtils.inputTextByNode(nodeInfo, \"[\u8d5e][\u8d5e][\u8d5e]\");\n//                AccUtils.timeSleep(waitOneSecond);\n//            }\n//\n//            Boolean canClick = AccUtils.clickParentCanClick(AccUtils.findElementByContainDescription(\"\u53d1\u9001\"));\n//            if (!canClick) {\n//                AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u53d1\u9001\"));\n//            }\n//\n//            AccUtils.timeSleep(waitTwoSecond);\n//\n//            AccUtils.printLogMsg(\"swipe to next video\");\n//            AccUtils.swipe(540,1920, 530, 250, 500);\n//            AccUtils.timeSleep(waitThreeSecond);\n//        }\n//\n//        AccUtils.back();\n//        AccUtils.timeSleep(waitTwoSecond);\n//\n//        List<AccessibilityNodeInfo> byContainText = AccUtils.findElementListByContainText(\"\u5173\u6ce8\");", "//        if (byContainText != null) {\n//            AccUtils.clickNodeByPoint(byContainText.get(1));\n//            AccUtils.timeSleep(waitThreeSecond);\n//        }\n//\n//        AccUtils.home();\n//        AccUtils.inputTextByNode()\n\n\n//        for (int i = 0; i < 15; i++) {\n//            AccUtils.printLogMsg(\"\u5237\u89c6\u9891\");\n//            AccUtils.timeSleep(waitFourSecond);\n//            AccUtils.swipe(560,1900, 550, 300, 800);\n//            AccUtils.timeSleep(waitThreeSecond);\n//        }\n\n\n//        AccUtils.printLogMsg(\"\u70b9\u51fb\u901a\u8baf\u5f55\");\n//        AccUtils.clickNodeByPoint(AccUtils.findElementByText(\"\u901a\u8baf\u5f55\"));\n//        AccUtils.timeSleep(waitThreeSecond);\n//        AccUtils.printLogMsg(\"click A by FindColor\");\n//        int[] x = ScreenLib.findColor( 0x191919, \"1|-4|0x191919,4|1|0x191919,6|8|0x191919,2|8|0x191919,-4|9|0x191919,2|5|0xffffff\", 90, 1017, 405, 1079, 858);", "//        for (int i = 0; i < 15; i++) {\n//            AccUtils.printLogMsg(\"\u5237\u89c6\u9891\");\n//            AccUtils.timeSleep(waitFourSecond);\n//            AccUtils.swipe(560,1900, 550, 300, 800);\n//            AccUtils.timeSleep(waitThreeSecond);\n//        }\n\n\n//        AccUtils.printLogMsg(\"\u70b9\u51fb\u901a\u8baf\u5f55\");\n//        AccUtils.clickNodeByPoint(AccUtils.findElementByText(\"\u901a\u8baf\u5f55\"));\n//        AccUtils.timeSleep(waitThreeSecond);\n//        AccUtils.printLogMsg(\"click A by FindColor\");\n//        int[] x = ScreenLib.findColor( 0x191919, \"1|-4|0x191919,4|1|0x191919,6|8|0x191919,2|8|0x191919,-4|9|0x191919,2|5|0xffffff\", 90, 1017, 405, 1079, 858);", "//        if (x != null) {\n//            AccUtils.printLogMsg(\"color find point => \" + x[0] + \", \" + x[1]);\n//            AccUtils.clickPoint(x[0], x[1], new Random().nextInt(54) + 150);\n//        }else {\n//            AccUtils.printLogMsg(\"color not found\");\n//        }\n//        AccUtils.timeSleep(waitOneSecond);\n//        AccUtils.printLogMsg(\"start read address book\");\n//        for (int i = 0; i < 20; i++) {\n//            readAddressBooks();\n//        }\n//    private static List<String> nameItemList = new ArrayList<>();\n//\n//    private void readAddressBooks() throws ExitException {\n//        AccessibilityNodeInfo targetClassNameNode = findTargetClassNameNode();", "//        for (int i = 0; i < 20; i++) {\n//            readAddressBooks();\n//        }\n//    private static List<String> nameItemList = new ArrayList<>();\n//\n//    private void readAddressBooks() throws ExitException {\n//        AccessibilityNodeInfo targetClassNameNode = findTargetClassNameNode();\n//        if (targetClassNameNode != null) {\n//            int childCount = targetClassNameNode.getChildCount();\n//            for (int i = 0; i < childCount; i++) {\n//                AccessibilityNodeInfo nodeChild = targetClassNameNode.getChild(i);\n//                List<AccessibilityNodeInfo> listByClassName = AccUtils.findElementListByContainClassName(nodeChild, \"android.widget.TextView\");", "//            for (int i = 0; i < childCount; i++) {\n//                AccessibilityNodeInfo nodeChild = targetClassNameNode.getChild(i);\n//                List<AccessibilityNodeInfo> listByClassName = AccUtils.findElementListByContainClassName(nodeChild, \"android.widget.TextView\");\n//                if (listByClassName != null && listByClassName.size() > 0) {\n//                    AccessibilityNodeInfo nodeInfo = listByClassName.get(0);\n//                    String nameItem = String.valueOf(nodeInfo.getText());\n//                    if (nameItem.length() > 1) {\n//                        AccUtils.printLogMsg(\"=> \" + nameItem);\n//                        nameItemList.add(nameItem);\n//                    }\n//                }\n//            }\n//            targetClassNameNode.performAction(AccessibilityNodeInfo.ACTION_SCROLL_FORWARD);\n//            AccUtils.timeSleep(waitThreeSecond);\n//        }\n//\n//    }\n//", "//    public static AccessibilityNodeInfo findTargetClassNameNode() throws ExitException {\n//        List<AccessibilityNodeInfo> listByClassName = AccUtils.findElementListByContainClassName(\"androidx.recyclerview.widget.RecyclerView\");\n//        AccessibilityNodeInfo targetClassNameNode = null;\n//        if (listByClassName != null && listByClassName.size() > 0) {\n//            for (AccessibilityNodeInfo classNameNode : listByClassName) {\n//                if (classNameNode.isScrollable()) {\n//                    AccUtils.printLogMsg(\"found classNameNode => \" + classNameNode.getClassName() + \" isScrollable => \" + classNameNode.isScrollable());\n//                    targetClassNameNode = classNameNode;\n//                    return targetClassNameNode;\n//                }\n//            }\n//        }else {\n//            AccUtils.printLogMsg(\"not found tableRow\");\n//        }\n//        return null;\n//    }\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/rpa/dingdingService/DingDingService.java", "chunked_list": ["package com.linsheng.FATJS.rpa.dingdingService;\nimport android.graphics.Rect;\nimport android.util.Log;\nimport android.view.accessibility.AccessibilityNodeInfo;\n\nimport androidx.annotation.RequiresApi;\n\nimport com.linsheng.FATJS.AccUtils;\nimport com.linsheng.FATJS.bean.Variable;\nimport com.linsheng.FATJS.enums.TaskTypeEnum;", "import com.linsheng.FATJS.bean.Variable;\nimport com.linsheng.FATJS.enums.TaskTypeEnum;\nimport com.linsheng.FATJS.rpa.TaskFactory.TaskBasic;\nimport com.linsheng.FATJS.utils.ExceptionUtil;\nimport com.linsheng.FATJS.utils.ExitException;\n\nimport java.util.List;\nimport java.util.Random;\n\n/**", "\n/**\n * \u9489\u9489\u6253\u5361\n */\npublic class DingDingService extends TaskBasic {\n\n    private static final String TAG = \"FATJS\";\n    public DingDingService() {\n        super(TaskTypeEnum.WECHAT_SEND_MESSAGE.getName());\n    }\n\n    @RequiresApi(24)", "    public void main() throws Exception {\n        try {\n            runTask();\n        }catch (Exception e) {\n            AccUtils.printLogMsg(ExceptionUtil.toString(e)); //\u6253\u5370\u5f02\u5e38\u4fe1\u606f\u5230\u60ac\u6d6e\u7a97\u65e5\u5fd7\u4e0a\n            e.printStackTrace();\n        }\n    }\n\n    @RequiresApi(24)\n    private void runTask() throws ExitException {\n        AccUtils.moveFloatWindow(\"\u6253\u5f00\");\n\n        AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");\n        AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n\n        AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");\n        AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));\n        AccUtils.timeSleep(6000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u597d\u7684\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6682\u65f6\u4e0d\"));\n        AccUtils.timeSleep(2000);\n\n        //Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u4e0a\u73ed\u6253\u5361;\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        List<AccessibilityNodeInfo> listByContainText = AccUtils.findElementListByContainText(\"\u6253\u5361\");", "        if (listByContainText != null && listByContainText.size() > 0) {\n            for (AccessibilityNodeInfo nodeInfo : listByContainText) {\n                Rect rect = new Rect();\n                nodeInfo.getBoundsInScreen(rect);\n                int left = rect.left;\n                int top = rect.top;\n                int bottom = rect.bottom;\n                String tmp_text = String.valueOf(nodeInfo.getText());\n                if (\n                        left > 350\n                                && tmp_text.length() > 3\n                                && tmp_text.length() < 6\n                                && top > 900\n                                && !tmp_text.contains(\"\u5907\u6ce8\")\n                                && bottom < Variable.mHeight - 200\n                ) {\n                    Log.i(TAG, \"runTask: node => \" + nodeInfo);\n                    AccUtils.clickParentCanClick(nodeInfo);\n                }\n            }\n        }\n        AccUtils.timeSleep(3000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");\n        AccUtils.home();\n    }\n\n}\n", "                if (\n                        left > 350\n                                && tmp_text.length() > 3\n                                && tmp_text.length() < 6\n                                && top > 900\n                                && !tmp_text.contains(\"\u5907\u6ce8\")\n                                && bottom < Variable.mHeight - 200\n                ) {\n                    Log.i(TAG, \"runTask: node => \" + nodeInfo);\n                    AccUtils.clickParentCanClick(nodeInfo);\n                }\n            }\n        }\n        AccUtils.timeSleep(3000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");\n        AccUtils.home();\n    }\n\n}\n"]}
{"filename": "app/src/main/java/com/linsheng/FATJS/service/MyService.java", "chunked_list": ["package com.linsheng.FATJS.service;\n\nimport android.app.Notification;\nimport android.app.NotificationChannel;\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.app.Service;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.os.Build;", "import android.graphics.Color;\nimport android.os.Build;\nimport android.os.IBinder;\nimport android.util.Log;\n\npublic class MyService extends Service {\n    private static final String TAG = \"FATJS\";\n    public MyService() {\n    }\n\n    @Override", "    public IBinder onBind(Intent intent) {\n        // TODO: Return the communication channel to the service.\n        throw new UnsupportedOperationException(\"Not yet implemented\");\n    }\n\n    @Override\n    public void onCreate() {\n        Log.e(TAG, \"onCreate\");\n        super.onCreate();\n    }\n\n    // \u5728\u8be5\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u670d\u52a1\u7684\u6838\u5fc3\u4e1a\u52a1\n    @Override", "    public int onStartCommand(Intent intent, int flags, int startId) {\n        // \u63d0\u9ad8\u8fdb\u7a0b\u4f18\u5148\u7ea7\n        Log.e(TAG,\"onStartCommand\");\n        intent.putExtra(\"main\",\"hello \");\n\n        //---------------------------------------------\n        String CHANNEL_ONE_ID = \"com.primedu.cn\";\n        String CHANNEL_ONE_NAME = \"Channel One\";\n        NotificationChannel notificationChannel = null;\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            notificationChannel = new NotificationChannel(CHANNEL_ONE_ID,\n                    CHANNEL_ONE_NAME, NotificationManager.IMPORTANCE_HIGH);\n            notificationChannel.enableLights(true);\n            notificationChannel.setLightColor(Color.RED);\n            notificationChannel.setShowBadge(true);\n            notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);\n            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n            manager.createNotificationChannel(notificationChannel);\n        }\n\n        //--------------------------------------------------------\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);\n        Notification notification = null;", "        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            notificationChannel = new NotificationChannel(CHANNEL_ONE_ID,\n                    CHANNEL_ONE_NAME, NotificationManager.IMPORTANCE_HIGH);\n            notificationChannel.enableLights(true);\n            notificationChannel.setLightColor(Color.RED);\n            notificationChannel.setShowBadge(true);\n            notificationChannel.setLockscreenVisibility(Notification.VISIBILITY_PUBLIC);\n            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\n            manager.createNotificationChannel(notificationChannel);\n        }\n\n        //--------------------------------------------------------\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, 0);\n        Notification notification = null;", "        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\n            notification = new Notification.Builder(this).setChannelId(CHANNEL_ONE_ID)\n                    .setTicker(\"Nature\")\n                    //.setSmallIcon(R.drawable.application1)\n                    .setContentTitle(\"FATJS_DIR\")\n                    .setContentIntent(pendingIntent)\n                    .setActions()\n                    .getNotification();\n            notification.flags |= Notification.FLAG_NO_CLEAR;\n            startForeground(1, notification);\n        }\n        return START_STICKY;\n    }\n}"]}
