{"filename": "src/main/java/org/samokat/performance/mockserver/utils/SmtpServer.java", "chunked_list": ["package org.samokat.performance.mockserver.utils;\n\nimport com.dumbster.smtp.SimpleSmtpServer;\nimport java.io.IOException;\nimport org.samokat.performance.mockserver.core.MockServer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SmtpServer implements Runnable {\n\n    private final SimpleSmtpServer server;\n\n    Logger log = LoggerFactory.getLogger(MockServer.class);\n\n\n    public SmtpServer() throws IOException {\n        int SMTP_PORT = Integer.parseInt(System.getProperty(\"SMTP_PORT\"));\n        server = SimpleSmtpServer.start(SMTP_PORT);\n        log.info(\"SMTP service is ready for emails\");\n    }\n\n\n    @Override", "public class SmtpServer implements Runnable {\n\n    private final SimpleSmtpServer server;\n\n    Logger log = LoggerFactory.getLogger(MockServer.class);\n\n\n    public SmtpServer() throws IOException {\n        int SMTP_PORT = Integer.parseInt(System.getProperty(\"SMTP_PORT\"));\n        server = SimpleSmtpServer.start(SMTP_PORT);\n        log.info(\"SMTP service is ready for emails\");\n    }\n\n\n    @Override", "    public void run() {\n        if (this.server.getReceivedEmails().size() > 0) {\n            log.info(\"Received \" + this.server.getReceivedEmails().size());\n            server.reset();\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/utils/ExternalField.java", "chunked_list": ["package org.samokat.performance.mockserver.utils;\n\nimport static org.mockserver.model.HttpResponse.response;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\nimport graphql.language.Document;\nimport graphql.language.Field;\nimport graphql.language.InlineFragment;", "import graphql.language.Field;\nimport graphql.language.InlineFragment;\nimport graphql.language.OperationDefinition;\nimport graphql.language.SelectionSet;\nimport graphql.parser.Parser;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;", "import java.util.Map;\nimport java.util.Objects;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.mockserver.mock.action.ExpectationResponseCallback;\nimport org.mockserver.model.HttpRequest;\nimport org.mockserver.model.HttpResponse;\nimport org.mockserver.model.MediaType;\nimport org.samokat.performance.mockserver.helpers.externalfield.RepresentationsItem;\nimport org.samokat.performance.mockserver.helpers.externalfield.Response;\n", "import org.samokat.performance.mockserver.helpers.externalfield.Response;\n\n/**\n * Special kind of ExpectationResponseCallback for processing graphql external fields\n */\npublic interface ExternalField extends ExpectationResponseCallback {\n\n    /**\n     * Returns value of parameter by name. You can specify custom logic or constant values.\n     *\n     * @param name The name of requested parameter\n     * @return String\n     */\n    default String parametrizeByRule(String name) {\n        return RandomStringUtils.randomAlphabetic(10);\n    }\n\n\n    @Override\n    default HttpResponse handle(HttpRequest httpRequest) {\n        var rawBody = httpRequest.getBody().getValue().toString();\n\n        Gson gson = new Gson();\n        Response body = gson.fromJson(rawBody, Response.class);\n\n        var query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");\n        System.out.println(query);\n\n        var params = getParams(query);\n\n        HashMap<String, Object> variables = getVars(rawBody);\n\n        var list = body.getVariables().getRepresentations();\n        var json = new JsonObject();\n        var entities = new JsonObject();\n        entities.add(\"_entities\", new JsonArray());\n", "        for (RepresentationsItem el : list) {\n            var type = el.getTypename();\n            var externalData = new JsonObject();\n            externalData.addProperty(\"__typename\", type);\n            if (!variables.isEmpty()) {\n                for (Map.Entry<String, Object> entry : variables.entrySet()) {\n                    externalData.addProperty(String.format(\"_%s\", entry.getKey()),\n                        entry.getValue().toString());\n                }\n            }\n            for (Object param : params) {", "            for (Object param : params) {\n                if (param instanceof String) {\n                    externalData.addProperty((String) param,\n                        RandomStringUtils.randomAlphabetic(10));\n                } else if (param instanceof List) {\n                    var objectParam = (List<?>) param;\n                    var jsonParam = (JsonObject) objectParam.get(1);\n                    var name = (String) objectParam.get(0);\n\n                    externalData.add(name, jsonParam.getAsJsonObject(name));\n                }\n            }\n            entities.getAsJsonArray(\"_entities\").add(externalData);\n        }\n        json.add(\"data\", entities);\n\n        return response().withBody(json.toString())\n            .withContentType(MediaType.APPLICATION_JSON_UTF_8);\n    }\n\n\n    private List<Object> getParams(String query) {\n        Parser parser = new Parser();\n        List<Object> paramList = new ArrayList<>();\n        Document document = parser.parseDocument(query);\n        OperationDefinition operation = null;", "        for (var definition : document.getDefinitions()) {\n            if (definition instanceof OperationDefinition) {\n                operation = (OperationDefinition) definition;\n            }\n        }\n        Field entities = null;\n        for (var selection : Objects.requireNonNull(operation).getSelectionSet().getSelections()) {\n            if (selection instanceof Field) {\n                entities = (Field) selection;\n            }\n        }\n        InlineFragment selectionInlineFragment = null;", "        for (var selectionFragment : Objects.requireNonNull(entities).getSelectionSet()\n            .getSelections()) {\n            if (selectionFragment instanceof InlineFragment) {\n                selectionInlineFragment = (InlineFragment) selectionFragment;\n            }\n        }\n        Field mainField = null;\n        for (var selectionField : Objects.requireNonNull(selectionInlineFragment).getSelectionSet()\n            .getSelections()) {\n            if (selectionField instanceof Field) {\n                mainField = (Field) selectionField;\n            }\n        }", "            if (selectionField instanceof Field) {\n                mainField = (Field) selectionField;\n            }\n        }\n        if (Objects.requireNonNull(mainField).getSelectionSet() == null) {\n            paramList.add(mainField.getName());\n        } else {\n            paramList.add(List.of(mainField.getName(), getSubField(\n                mainField.getName(),\n                mainField.getSelectionSet())));\n        }\n        return paramList;\n    }\n\n\n    private JsonObject getSubField(String name, SelectionSet value) {\n        var result = new JsonObject();\n        var subField = new JsonObject();", "        for (var selection : value.getSelections()) {\n            Field field = (Field) selection;\n            if (field.getSelectionSet() != null) {\n                subField.add(field.getName(),\n                    getSubField(field.getName(), field.getSelectionSet()));\n            } else {\n                subField.addProperty(field.getName(), parametrizeByRule(field.getName()));\n            }\n        }\n        result.add(name, subField);\n        return result;\n    }\n\n\n    private HashMap<String, Object> getVars(String rawBody) {\n\n        var vars = rawBody.replaceAll(\"[\\n,\\r ]\", \"\")\n            .replaceFirst(\".+\\\"__typename\\\":\\\".+?\\\"\", \"\")\n            .replaceFirst(\"}]}.+\", \"\")\n            .replaceAll(\"\\\"\", \"\")\n            .split(\",\");\n\n        HashMap<String, Object> variables = new HashMap<>();", "        for (String v : vars) {\n            var pair = v.split(\":\");\n            variables.put(pair[0], pair[1]);\n        }\n        return variables;\n    }\n}"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/helpers/externalfield/Response.java", "chunked_list": ["package org.samokat.performance.mockserver.helpers.externalfield;\n\nimport com.google.gson.annotations.SerializedName;\n\npublic class Response {\n\n    @SerializedName(\"variables\")\n    private Variables variables;\n\n    @SerializedName(\"query\")\n    private String query;\n\n    @SerializedName(\"operationName\")\n    private String operationName;\n\n", "    public Variables getVariables() {\n        return variables;\n    }\n\n\n    public String getQuery() {\n        return query;\n    }\n\n\n    public String getOperationName() {\n        return operationName;\n    }\n}\n", "    public String getOperationName() {\n        return operationName;\n    }\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/helpers/externalfield/Variables.java", "chunked_list": ["package org.samokat.performance.mockserver.helpers.externalfield;\n\nimport com.google.gson.annotations.SerializedName;\nimport java.util.List;\n\npublic class Variables {\n\n    @SerializedName(\"representations\")\n    private List<RepresentationsItem> representations;\n\n\n    public List<RepresentationsItem> getRepresentations() {\n        return representations;\n    }\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/helpers/externalfield/RepresentationsItem.java", "chunked_list": ["package org.samokat.performance.mockserver.helpers.externalfield;\n\nimport com.google.gson.annotations.SerializedName;\n\npublic class RepresentationsItem {\n\n    @SerializedName(\"__typename\")\n    private String typename;\n\n\n    public String getTypename() {\n        return typename;\n    }\n\n}\n", "    public String getTypename() {\n        return typename;\n    }\n\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/core/MockServer.java", "chunked_list": ["package org.samokat.performance.mockserver.core;\n\nimport com.sun.net.httpserver.HttpServer;\nimport io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmGcMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics;\nimport io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics;\nimport io.micrometer.core.instrument.binder.system.ProcessorMetrics;\nimport io.micrometer.prometheus.PrometheusConfig;\nimport io.micrometer.prometheus.PrometheusMeterRegistry;", "import io.micrometer.prometheus.PrometheusConfig;\nimport io.micrometer.prometheus.PrometheusMeterRegistry;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.util.Objects;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport org.mockserver.configuration.Configuration;\nimport org.mockserver.integration.ClientAndServer;", "import org.mockserver.configuration.Configuration;\nimport org.mockserver.integration.ClientAndServer;\nimport org.samokat.performance.mockserver.core.initializer.CommandSwitcher;\nimport org.samokat.performance.mockserver.utils.SmtpServer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class MockServer {\n\n    private static ClientAndServer mockServer;\n\n    static Logger log = LoggerFactory.getLogger(MockServer.class);\n\n", "    public static void main(String[] args) {\n        try {\n            var mockType = System.getProperty(\"team\").toLowerCase();\n            var logLevel = System.getProperty(\"loglevel\").toUpperCase();\n            int smtpDelaySeconds = Integer.parseInt(System.getProperty(\"SMTP_DELAY_SECONDS\"));\n            log.info(mockType);\n            startMockServer(logLevel);\n            mockServer.upsert(\n                Objects.requireNonNull(CommandSwitcher.getCommand(mockType))\n                    .initializeExpectations());\n            log.info(\"Mockserver is running\");\n\n            ScheduledThreadPoolExecutor threadPool = new ScheduledThreadPoolExecutor(1);\n            threadPool.scheduleWithFixedDelay(new SmtpServer(), 0, smtpDelaySeconds,\n                TimeUnit.SECONDS);\n        } catch (NullPointerException | IOException e) {\n            log.error(\"Fatal error in initialization process\", e);\n            System.exit(1);\n        }\n    }\n\n", "    public static void startMockServer(String logLevel) throws IOException {\n        var clientPort = Integer.parseInt(System.getProperty(\"CLIENT_PORT\"));\n        var jvmMetricsPort = Integer.parseInt(System.getProperty(\"JVM_METRICS_PORT\"));\n        var jvmMetricsPath = System.getProperty(\"JVM_METRICS_PATH\").toLowerCase();\n        Configuration config = new Configuration()\n            .metricsEnabled(true)\n            .logLevel(logLevel)\n            .maxLogEntries(1000)\n            .clientNioEventLoopThreadCount(10)\n            .actionHandlerThreadCount(5)\n            .maximumNumberOfRequestToReturnInVerificationFailure(1)\n            .attemptToProxyIfNoMatchingExpectation(false)\n            .maxSocketTimeoutInMillis(60000L);", "        if (logLevel.equals(\"ERROR\")) {\n            config.disableLogging(true) \n                .detailedMatchFailures(false);\n        }\n        mockServer = ClientAndServer.startClientAndServer(config, clientPort);\n\n        PrometheusMeterRegistry prometheusRegistry = new PrometheusMeterRegistry(\n            PrometheusConfig.DEFAULT);\n        new ClassLoaderMetrics().bindTo(prometheusRegistry);\n        new JvmMemoryMetrics().bindTo(prometheusRegistry);\n        new JvmGcMetrics().bindTo(prometheusRegistry);\n        new JvmThreadMetrics().bindTo(prometheusRegistry);\n        new ProcessorMetrics().bindTo(prometheusRegistry);\n\n        HttpServer server = HttpServer.create(new InetSocketAddress(jvmMetricsPort), 0);\n        server.createContext(jvmMetricsPath, httpExchange ->\n        {\n            String response = prometheusRegistry.scrape();\n            httpExchange.sendResponseHeaders(200, response.getBytes().length);\n            try (OutputStream os = httpExchange.getResponseBody()) {\n                os.write(response.getBytes());\n            } catch (IOException e) {\n                log.error(\"Error in exposing jvm metrics\", e);\n            }\n        });\n        new Thread(server::start).start();\n        log.info(\"JVM metrics are exposing now\");\n    }\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/core/initializer/CommandSwitcher.java", "chunked_list": ["package org.samokat.performance.mockserver.core.initializer;\n\nimport org.samokat.performance.mockserver.mocks.BananaBread;\nimport org.samokat.performance.mockserver.mocks.Croissant;\n\npublic class CommandSwitcher {\n\n    public static Command getCommand(String commandName) {\n        switch (commandName) {\n            case \"bananabread\":\n                return new BananaBread();\n            case \"croissant\":\n                return new Croissant();\n            default:\n                return null;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/core/initializer/Command.java", "chunked_list": ["package org.samokat.performance.mockserver.core.initializer;\n\nimport java.io.IOException;\nimport org.mockserver.mock.Expectation;\n\n/**\n * Configures expectations of mock for Command\n */\npublic interface Command {\n\n    /**\n     * Init list of Expectations\n     *\n     * @return Expectation[]\n     * @throws IOException\n     * @see Expectation\n     */\n    default Expectation[] initializeExpectations() throws IOException {\n        return new Expectation[]{};\n    }\n}\n", "public interface Command {\n\n    /**\n     * Init list of Expectations\n     *\n     * @return Expectation[]\n     * @throws IOException\n     * @see Expectation\n     */\n    default Expectation[] initializeExpectations() throws IOException {\n        return new Expectation[]{};\n    }\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/core/initializer/Utils.java", "chunked_list": ["package org.samokat.performance.mockserver.core.initializer;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport org.apache.commons.io.IOUtils;\n\npublic class Utils {\n\n    public static String getFile(String local) throws IOException {\n        InputStream in = CommandSwitcher.class.getClassLoader().getResourceAsStream(local);\n        String file = null;", "    public static String getFile(String local) throws IOException {\n        InputStream in = CommandSwitcher.class.getClassLoader().getResourceAsStream(local);\n        String file = null;\n        if (in != null) {\n            file = IOUtils.toString(in, StandardCharsets.UTF_8);\n        }\n        return file;\n    }\n}\n"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/mocks/Croissant.java", "chunked_list": ["package org.samokat.performance.mockserver.mocks;\n\nimport static org.mockserver.model.HttpRequest.request;\nimport static org.mockserver.model.HttpResponse.response;\nimport static org.mockserver.model.JsonBody.json;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\nimport java.util.List;", "import java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.UUID;\nimport net.minidev.json.JSONObject;\nimport org.mockserver.mock.Expectation;\nimport org.mockserver.mock.action.ExpectationResponseCallback;\nimport org.mockserver.model.HttpClassCallback;\nimport org.mockserver.model.HttpRequest;\nimport org.mockserver.model.HttpResponse;", "import org.mockserver.model.HttpRequest;\nimport org.mockserver.model.HttpResponse;\nimport org.mockserver.model.MediaType;\nimport org.samokat.performance.mockserver.core.initializer.Command;\nimport org.samokat.performance.mockserver.core.initializer.Utils;\n\npublic class Croissant implements Command {\n\n    @Override\n    public Expectation[] initializeExpectations() throws IOException {\n        return new Expectation[]{\n\n            new Expectation(\n                request()\n                    .withMethod(\"POST\")\n                    .withPath(\"/quaso/stock\")\n            ).thenRespond(\n                response()\n                    .withBody(\n                        json(Utils.getFile(\"croissant/stock.json\"), StandardCharsets.UTF_8)\n                    )\n            ),\n\n            new Expectation(\n                request()\n                    .withMethod(\"GET\").withPath(\"/quaso/.+/info\")\n            ).thenRespond(\n                HttpClassCallback.callback().withCallbackClass(CroissantCall.class)\n            ),\n\n            new Expectation(\n                request()\n                    .withMethod(\"GET\")\n                    .withPath(\"/quaso\")\n            ).thenRespond(\n                HttpClassCallback.callback().withCallbackClass(RandomCroissantCall.class)\n            ),\n\n        };\n    }\n\n", "    public static class CroissantCall implements ExpectationResponseCallback {\n\n        @Override\n        public HttpResponse handle(HttpRequest httpRequest) {\n            JSONObject json = new JSONObject();\n            var uuid = httpRequest.getPath().getValue()\n                .replaceFirst(\"/quaso/\", \"\")\n                .replaceFirst(\"/info\", \"\");\n            json.put(\"id\", uuid);\n\n            List<String> types = Arrays.asList(\"chocolate\", \"almond\", \"raspberry\");\n            Random rand = new Random();\n            String type = types.get(rand.nextInt(types.size()));\n            json.put(\"type\", type);\n            json.put(\"taste\", \"fantastic\");\n            return response().withBody(json(json))\n                .withContentType(MediaType.APPLICATION_JSON_UTF_8);\n        }\n    }\n", "    public static class RandomCroissantCall implements ExpectationResponseCallback {\n\n        @Override\n        public HttpResponse handle(HttpRequest httpRequest) {\n            JSONObject json = new JSONObject();\n            UUID uuid = UUID.randomUUID();\n            json.put(\"id\", uuid);\n\n            List<String> types = Arrays.asList(\"chocolate\", \"almond\", \"raspberry\");\n            Random rand = new Random();\n            String type = types.get(rand.nextInt(types.size()));\n            json.put(\"type\", type);\n            return response().withBody(json(json))\n                .withContentType(MediaType.APPLICATION_JSON_UTF_8);\n        }\n    }\n}"]}
{"filename": "src/main/java/org/samokat/performance/mockserver/mocks/BananaBread.java", "chunked_list": ["package org.samokat.performance.mockserver.mocks;\n\nimport static org.mockserver.model.HttpRequest.request;\nimport static org.mockserver.model.HttpResponse.response;\nimport static org.mockserver.model.JsonBody.json;\nimport static org.mockserver.model.JsonPathBody.jsonPath;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;", "import java.nio.charset.StandardCharsets;\nimport java.util.List;\nimport java.util.Random;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.mockserver.mock.Expectation;\nimport org.mockserver.model.HttpClassCallback;\nimport org.samokat.performance.mockserver.core.initializer.Command;\nimport org.samokat.performance.mockserver.core.initializer.Utils;\nimport org.samokat.performance.mockserver.utils.ExternalField;\n\npublic class BananaBread implements Command {\n\n    @Override\n    public Expectation[] initializeExpectations() throws IOException {\n        return new Expectation[]{\n\n            new Expectation(\n                request()\n                    .withMethod(\"POST\")\n                    .withPath(\"/graphql\")\n                    .withBody(Utils.getFile(\"bananabread/get_scheme.json\"))\n            ).thenRespond(\n                response()\n                    .withBody(\n                        json(Utils.getFile(\"bananabread/scheme.json\"), StandardCharsets.UTF_8)\n                    )\n            ),\n            // \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0430 \u044d\u043a\u0441\u0442\u0435\u0440\u043d\u0430\u043b \u043f\u043e\u043b\u0435\u0439\n            new Expectation(\n                request()\n                    .withMethod(\"POST\")\n                    .withPath(\"/graphql\")\n                    .withBody(jsonPath(\"$.variables.representations[*]\"))\n            ).thenRespond(\n                HttpClassCallback.callback().withCallbackClass(ExternalFieldBananaBread.class)\n            ),\n        };\n    }\n\n", "import org.samokat.performance.mockserver.utils.ExternalField;\n\npublic class BananaBread implements Command {\n\n    @Override\n    public Expectation[] initializeExpectations() throws IOException {\n        return new Expectation[]{\n\n            new Expectation(\n                request()\n                    .withMethod(\"POST\")\n                    .withPath(\"/graphql\")\n                    .withBody(Utils.getFile(\"bananabread/get_scheme.json\"))\n            ).thenRespond(\n                response()\n                    .withBody(\n                        json(Utils.getFile(\"bananabread/scheme.json\"), StandardCharsets.UTF_8)\n                    )\n            ),\n            // \u0437\u0430\u0433\u043b\u0443\u0448\u043a\u0430 \u044d\u043a\u0441\u0442\u0435\u0440\u043d\u0430\u043b \u043f\u043e\u043b\u0435\u0439\n            new Expectation(\n                request()\n                    .withMethod(\"POST\")\n                    .withPath(\"/graphql\")\n                    .withBody(jsonPath(\"$.variables.representations[*]\"))\n            ).thenRespond(\n                HttpClassCallback.callback().withCallbackClass(ExternalFieldBananaBread.class)\n            ),\n        };\n    }\n\n", "    public static class ExternalFieldBananaBread implements ExternalField {\n\n        @Override\n        public String parametrizeByRule(String name) {\n            if (name.equals(\"id\")) {\n                List<String> id = List.of(\n                    \"bab28819-bae3-4891-96f9-e2e214265fa3\",\n                    \"424c1588-4fa4-4ccc-93ea-d50cedbb51b4\");\n                return id.get(new Random().nextInt(id.size()));\n            } else {\n                return RandomStringUtils.randomAlphabetic(10);\n            }\n        }\n    }\n}\n"]}
