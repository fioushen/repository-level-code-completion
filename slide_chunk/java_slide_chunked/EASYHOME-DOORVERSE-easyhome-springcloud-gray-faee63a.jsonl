{"filename": "src/main/java/com/easyhome/common/feign/FeignTransmitHeadersRequestInterceptor.java", "chunked_list": ["package com.easyhome.common.feign;\n\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport feign.RequestInterceptor;\nimport feign.RequestTemplate;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Map;", "\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * feign\u4f20\u9012\u8bf7\u6c42\u5934\u4fe1\u606f\u62e6\u622a\u5668\n *\n * @author wangshufeng\n */\n@Slf4j", " */\n@Slf4j\n@Configuration\npublic class FeignTransmitHeadersRequestInterceptor implements RequestInterceptor {\n\n    @Override\n    public void apply(RequestTemplate requestTemplate) {\n        Map<String,String> attributes=GrayParamHolder.getGrayMap();\n        if (Objects.nonNull(attributes)) {\n            //\u7070\u5ea6\u6807\u8bc6\u4f20\u9012\n            String version = attributes.get(GrayscaleConstant.HEADER_KEY);", "        if (Objects.nonNull(attributes)) {\n            //\u7070\u5ea6\u6807\u8bc6\u4f20\u9012\n            String version = attributes.get(GrayscaleConstant.HEADER_KEY);\n            if(!StringUtils.isEmpty(version)){\n                requestTemplate.header(GrayscaleConstant.HEADER_KEY, version);\n            }\n            /** \u81ea\u5b9a\u4e49\u4e00\u4e9b\u901a\u7528\u53c2\u6570\u4f20\u9012\n            String deviceOs = attributes.get(GrayscaleConstant.DEVICE_OS);\n            if(!StringUtils.isEmpty(deviceOs)){\n                requestTemplate.header(GrayscaleConstant.DEVICE_OS, deviceOs);\n            }**/\n            String printLogFlg = attributes.get(GrayscaleConstant.PRINT_HEADER_LOG_KEY);", "            if(!StringUtils.isEmpty(deviceOs)){\n                requestTemplate.header(GrayscaleConstant.DEVICE_OS, deviceOs);\n            }**/\n            String printLogFlg = attributes.get(GrayscaleConstant.PRINT_HEADER_LOG_KEY);\n            if (log.isInfoEnabled() && GrayscaleConstant.STR_BOOLEAN_TRUE.equals(printLogFlg)) {\n                requestTemplate.header(GrayscaleConstant.PRINT_HEADER_LOG_KEY, printLogFlg);\n                log.info(\"feign\u4f20\u9012\u8bf7\u6c42\u5934\u4fe1\u606f:{}={}\", GrayscaleConstant.HEADER_KEY, version);\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/feign/TransmitHeaderPrintLogConfig.java", "chunked_list": ["package com.easyhome.common.feign;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n/**\n * \u6253\u5370\u8bf7\u6c42\u5934\u7070\u5ea6\u53c2\u6570\u62e6\u622a\u5668\u914d\u7f6e\n * @author wangshufeng\n */", " * @author wangshufeng\n */\n@Configuration\npublic class TransmitHeaderPrintLogConfig implements WebMvcConfigurer {\n    /**\n     * \u914d\u7f6e\u62e6\u622a\u89c4\u5219\u4e0e\u6ce8\u5165\u62e6\u622a\u5668\n     * @param registry\n     */\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        // addPathPattern \u6dfb\u52a0\u62e6\u622a\u89c4\u5219 /** \u62e6\u622a\u6240\u6709\u5305\u62ec\u9759\u6001\u8d44\u6e90\n        // excludePathPattern \u6392\u9664\u62e6\u622a\u89c4\u5219 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u653e\u5f00\u9759\u6001\u8d44\u6e90\u7684\u62e6\u622a\n        registry.addInterceptor(new TransmitHeaderPrintLogHanlerInterceptor())\n                .addPathPatterns(\"/**\");\n    }\n}\n", "    public void addInterceptors(InterceptorRegistry registry) {\n        // addPathPattern \u6dfb\u52a0\u62e6\u622a\u89c4\u5219 /** \u62e6\u622a\u6240\u6709\u5305\u62ec\u9759\u6001\u8d44\u6e90\n        // excludePathPattern \u6392\u9664\u62e6\u622a\u89c4\u5219 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u653e\u5f00\u9759\u6001\u8d44\u6e90\u7684\u62e6\u622a\n        registry.addInterceptor(new TransmitHeaderPrintLogHanlerInterceptor())\n                .addPathPatterns(\"/**\");\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/feign/GrayHeaderParam.java", "chunked_list": ["package com.easyhome.common.feign;\n\nimport com.easyhome.common.utils.GrayscaleConstant;\n\n/**\n * \u5f02\u6b65\u7ebf\u7a0b\u62f7\u8d1d\u7070\u5ea6\u7070\u5ea6\u73af\u5883\u4fe1\u606f\u679a\u4e3e\n * @author wangshufeng\n */\n\npublic enum GrayHeaderParam {\n\n    HEADER_KEY(GrayscaleConstant.HEADER_KEY),\n    PRINT_HEADER_LOG_KEY(GrayscaleConstant.PRINT_HEADER_LOG_KEY),\n    USER_ID(GrayscaleConstant.USER_ID),\n    DW_LANG(GrayscaleConstant.DW_LANG),\n    DEVICE_OS(GrayscaleConstant.DEVICE_OS);\n    private String value;\n\n    GrayHeaderParam(String value) {\n        this.value = value;\n    }\n", "\npublic enum GrayHeaderParam {\n\n    HEADER_KEY(GrayscaleConstant.HEADER_KEY),\n    PRINT_HEADER_LOG_KEY(GrayscaleConstant.PRINT_HEADER_LOG_KEY),\n    USER_ID(GrayscaleConstant.USER_ID),\n    DW_LANG(GrayscaleConstant.DW_LANG),\n    DEVICE_OS(GrayscaleConstant.DEVICE_OS);\n    private String value;\n\n    GrayHeaderParam(String value) {\n        this.value = value;\n    }\n", "    public String getValue() {\n        return value;\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/feign/GrayParamHolder.java", "chunked_list": ["package com.easyhome.common.feign;\n\nimport com.alibaba.ttl.TransmittableThreadLocal;\nimport com.easyhome.common.utils.GrayUtil;\nimport com.easyhome.common.utils.GrayscaleConstant;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/**\n * \u5f02\u6b65\u7ebf\u7a0b\u95f4\u53c2\u6570\u4f20\u9012\n *\n * @author wangshufeng\n */\npublic class GrayParamHolder {\n\n    /**\n     * \u5728Java\u7684\u542f\u52a8\u53c2\u6570\u52a0\u4e0a\uff1a-javaagent:path/to/transmittable-thread-local-2.x.y.jar\u3002\n     * <p>\n     * \u6ce8\u610f\uff1a\n     * <p>\n     * \u5982\u679c\u4fee\u6539\u4e86\u4e0b\u8f7d\u7684TTL\u7684Jar\u7684\u6587\u4ef6\u540d\uff08transmittable-thread-local-2.x.y.jar\uff09\uff0c\u5219\u9700\u8981\u81ea\u5df1\u624b\u52a8\u901a\u8fc7-Xbootclasspath JVM\u53c2\u6570\u6765\u663e\u5f0f\u914d\u7f6e\u3002\n     * \u6bd4\u5982\u4fee\u6539\u6587\u4ef6\u540d\u6210ttl-foo-name-changed.jar\uff0c\u5219\u8fd8\u9700\u8981\u52a0\u4e0aJava\u7684\u542f\u52a8\u53c2\u6570\uff1a-Xbootclasspath/a:path/to/ttl-foo-name-changed.jar\u3002\n     * \u6216\u4f7f\u7528v2.6.0\u4e4b\u524d\u7684\u7248\u672c\uff08\u5982v2.5.1\uff09\uff0c\u5219\u4e5f\u9700\u8981\u81ea\u5df1\u624b\u52a8\u901a\u8fc7-Xbootclasspath JVM\u53c2\u6570\u6765\u663e\u5f0f\u914d\u7f6e\uff08\u5c31\u50cfTTL\u4e4b\u524d\u7684\u7248\u672c\u7684\u505a\u6cd5\u4e00\u6837\uff09\u3002\n     * \u52a0\u4e0aJava\u7684\u542f\u52a8\u53c2\u6570\uff1a-Xbootclasspath/a:path/to/transmittable-thread-local-2.5.1.jar\u3002\n     */\n    private static ThreadLocal<Map<String, String>> paramLocal = new TransmittableThreadLocal();\n\n    /**\n     * \u83b7\u53d6\u5355\u4e2a\u53c2\u6570\u503c\n     *\n     * @param key\n     * @return\n     */", "    public static String getValue(String key) {\n        Map<String, String> paramMap = GrayParamHolder.paramLocal.get();\n        if (Objects.nonNull(paramMap) && !paramMap.isEmpty()) {\n            return paramMap.get(key);\n        }\n        return null;\n    }\n\n    /**\n     * \u83b7\u53d6\u6240\u6709\u53c2\u6570\n     *\n     * @return\n     */", "    public static Map<String, String> getGrayMap() {\n        Map<String, String> paramMap = GrayParamHolder.paramLocal.get();\n        if(paramMap==null){\n            paramMap=new HashMap<>(8);\n            if(GrayUtil.isGrayPod()){\n                paramMap.put(GrayscaleConstant.HEADER_KEY, GrayscaleConstant.HEADER_VALUE);\n                paramMap.put(GrayscaleConstant.PRINT_HEADER_LOG_KEY, GrayscaleConstant.STR_BOOLEAN_TRUE);\n                GrayParamHolder.paramLocal.set(paramMap);\n            }\n        }\n        return paramMap;\n\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5355\u4e2a\u53c2\u6570\n     *\n     * @param key\n     * @param value\n     */", "    public static void putValue(String key, String value) {\n        Map<String, String> paramMap = GrayParamHolder.paramLocal.get();\n        if (Objects.isNull(paramMap) || paramMap.isEmpty()) {\n            paramMap = new HashMap<>(6);\n            GrayParamHolder.paramLocal.set(paramMap);\n        }\n        paramMap.put(key, value);\n    }\n\n\n    /**\n     * \u8bbe\u7f6e\u5355\u591a\u4e2a\u53c2\u6570\n     *\n     * @param map\n     */", "    public static void putValues(Map<String,String> map) {\n        Map<String, String> paramMap = GrayParamHolder.paramLocal.get();\n        if (Objects.isNull(paramMap) || paramMap.isEmpty()) {\n            paramMap = new HashMap<>(6);\n            GrayParamHolder.paramLocal.set(paramMap);\n        }\n        if(Objects.nonNull(map)&&!map.isEmpty()){\n            for (Map.Entry<String,String> item:map.entrySet()){\n                paramMap.put(item.getKey(),item.getValue());\n            }\n        }\n    }\n\n    /**\n     * \u6e05\u7a7a\u7ebf\u7a0b\u53c2\u6570\n     */", "    public static void clearValue() {\n        GrayParamHolder.paramLocal.remove();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/feign/TransmitHeaderPrintLogHanlerInterceptor.java", "chunked_list": ["package com.easyhome.common.feign;\n\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;", "import javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * \u6253\u5370\u8bf7\u6c42\u5934\u7070\u5ea6\u53c2\u6570\u62e6\u622a\u5668\n * @author wangshufeng\n */", " * @author wangshufeng\n */\n@Slf4j\npublic class TransmitHeaderPrintLogHanlerInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String printLogFlg = request.getHeader(GrayscaleConstant.PRINT_HEADER_LOG_KEY);\n        if (log.isInfoEnabled() && GrayscaleConstant.STR_BOOLEAN_TRUE.equals(printLogFlg)) {\n            Enumeration<String> headerNames = request.getHeaderNames();\n            if (headerNames != null) {", "        if (log.isInfoEnabled() && GrayscaleConstant.STR_BOOLEAN_TRUE.equals(printLogFlg)) {\n            Enumeration<String> headerNames = request.getHeaderNames();\n            if (headerNames != null) {\n                while (headerNames.hasMoreElements()) {\n                    String name = headerNames.nextElement();\n                    String value = request.getHeader(name);\n                    log.info(\"\u63a5\u6536\u5230\u7684\u8bf7\u6c42\u5934\u4fe1\u606f:{}={}\", name, value);\n                }\n            }\n        }\n        Map<String,String> param=new HashMap<>(8);\n        //\u83b7\u53d6\u6240\u6709\u7070\u5ea6\u53c2\u6570\u503c\u8bbe\u7f6e\u5230ThreadLocal\uff0c\u4ee5\u4fbf\u4f20\u503c", "        for (GrayHeaderParam item:GrayHeaderParam.values()) {\n            String hParam = request.getHeader(item.getValue());\n            if(!StringUtils.isEmpty(hParam)){\n                param.put(item.getValue(), hParam);\n            }\n        }\n        GrayParamHolder.putValues(param);\n        return true;\n    }\n\n    @Override", "    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler,\n                                @Nullable Exception ex) throws Exception {\n        //\u6e05\u9664\u7070\u5ea6ThreadLocal\n        GrayParamHolder.clearValue();\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/nacos/NacosListenerConfig.java", "chunked_list": ["package com.easyhome.common.nacos;\n\nimport com.alibaba.cloud.nacos.NacosDiscoveryProperties;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport com.alibaba.nacos.api.naming.NamingFactory;\nimport com.alibaba.nacos.api.naming.NamingService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.annotation.PostConstruct;", "\nimport javax.annotation.PostConstruct;\nimport javax.annotation.Resource;\n\n/**\n * \u914d\u7f6enacos\u81ea\u5b9a\u4e49\u76d1\u542c\n * @author wangshufeng\n */\n@Configuration\n@Slf4j\npublic class NacosListenerConfig {\n    @Resource\n    NacosDiscoveryProperties nacosDiscoveryProperties;\n    @Resource\n    NacosEventListener nacosEventListener;\n\n    @PostConstruct", "@Configuration\n@Slf4j\npublic class NacosListenerConfig {\n    @Resource\n    NacosDiscoveryProperties nacosDiscoveryProperties;\n    @Resource\n    NacosEventListener nacosEventListener;\n\n    @PostConstruct\n    public void subscribe() {\n        try {\n            NamingService namingService = NamingFactory.createNamingService(nacosDiscoveryProperties.getServerAddr());\n            namingService.subscribe(nacosDiscoveryProperties.getService(),nacosDiscoveryProperties.getGroup(), nacosEventListener);\n            log.info(\"\u914d\u7f6enacos\u81ea\u5b9a\u4e49\u76d1\u542c\u5b8c\u6210\");\n        } catch (NacosException e) {\n            log.error(\"\u914d\u7f6enacos\u81ea\u5b9a\u4e49\u76d1\u542c\u9519\u8bef\", e);\n        }\n    }\n}\n", "    public void subscribe() {\n        try {\n            NamingService namingService = NamingFactory.createNamingService(nacosDiscoveryProperties.getServerAddr());\n            namingService.subscribe(nacosDiscoveryProperties.getService(),nacosDiscoveryProperties.getGroup(), nacosEventListener);\n            log.info(\"\u914d\u7f6enacos\u81ea\u5b9a\u4e49\u76d1\u542c\u5b8c\u6210\");\n        } catch (NacosException e) {\n            log.error(\"\u914d\u7f6enacos\u81ea\u5b9a\u4e49\u76d1\u542c\u9519\u8bef\", e);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/nacos/NacosMetadataConfig.java", "chunked_list": ["package com.easyhome.common.nacos;\n\nimport com.alibaba.cloud.nacos.ConditionalOnNacosDiscoveryEnabled;\nimport com.alibaba.cloud.nacos.NacosDiscoveryProperties;\nimport com.alibaba.cloud.nacos.discovery.NacosWatch;\nimport com.easyhome.common.utils.GrayUtil;\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;", "import org.springframework.boot.autoconfigure.AutoConfigureBefore;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.cloud.client.CommonsClientAutoConfiguration;\nimport org.springframework.cloud.client.discovery.simple.SimpleDiscoveryClientAutoConfiguration;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Objects;\n", "import java.util.Objects;\n\n/**\n * \u6ce8\u518c\u670d\u52a1\u6dfb\u52a0\u5143\u6570\u636e\u4fe1\u606f\n *\n * @author wangshufeng\n */\n@Slf4j\n@Configuration\n@ConditionalOnNacosDiscoveryEnabled", "@Configuration\n@ConditionalOnNacosDiscoveryEnabled\n@AutoConfigureBefore({SimpleDiscoveryClientAutoConfiguration.class, CommonsClientAutoConfiguration.class})\npublic class NacosMetadataConfig {\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(value = {\"spring.cloud.nacos.discovery.watch.enabled\"}, matchIfMissing = true)\n    public NacosWatch nacosWatch(NacosDiscoveryProperties nacosDiscoveryProperties) {\n        String grayFlg = GrayUtil.isGrayPod().toString();\n        log.info(\"\u6ce8\u518c\u670d\u52a1\u6dfb\u52a0\u5143\u6570\u636e\uff1a\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883-{}\", grayFlg);\n        nacosDiscoveryProperties.getMetadata().put(GrayscaleConstant.POD_GRAY, grayFlg);", "        if(Objects.equals(grayFlg,GrayscaleConstant.STR_BOOLEAN_TRUE)){\n            String groupFlg = GrayUtil.podGroup();\n            nacosDiscoveryProperties.getMetadata().put(GrayscaleConstant.GRAY_GROUP, groupFlg);\n        }\n        return new NacosWatch(nacosDiscoveryProperties);\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/nacos/NacosEventListener.java", "chunked_list": ["package com.easyhome.common.nacos;\n\nimport com.alibaba.nacos.api.naming.listener.Event;\nimport com.alibaba.nacos.api.naming.listener.EventListener;\nimport com.alibaba.nacos.api.naming.listener.NamingEvent;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport com.easyhome.common.event.GrayEventChangeEvent;\nimport com.easyhome.common.rocketmq.ListenerStateEnum;\nimport com.easyhome.common.utils.GrayUtil;\nimport com.easyhome.common.utils.GrayscaleConstant;", "import com.easyhome.common.utils.GrayUtil;\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.ApplicationEventPublisher;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.CollectionUtils;\n\nimport javax.annotation.Resource;\nimport java.util.List;\n", "import java.util.List;\n\n/**\n * nacos\u81ea\u5b9a\u4e49\u76d1\u542c\u5b9e\u73b0\n *\n * @author wangshufeng\n */\n@Slf4j\n@Component\npublic class NacosEventListener implements EventListener {\n\n    @Resource\n    private ApplicationEventPublisher publisher;\n\n    @Override", "@Component\npublic class NacosEventListener implements EventListener {\n\n    @Resource\n    private ApplicationEventPublisher publisher;\n\n    @Override\n    public void onEvent(Event event) {\n        if (event instanceof NamingEvent) {\n            this.mqInit(((NamingEvent) event).getInstances());\n        }\n    }\n\n    /**\n     * \u5f53\u524d\u7684mq\u76d1\u542c\u72b6\u6001\n     */\n    private static ListenerStateEnum listenerMqState;\n", "        if (event instanceof NamingEvent) {\n            this.mqInit(((NamingEvent) event).getInstances());\n        }\n    }\n\n    /**\n     * \u5f53\u524d\u7684mq\u76d1\u542c\u72b6\u6001\n     */\n    private static ListenerStateEnum listenerMqState;\n\n    public synchronized void mqInit(List<Instance> instances) {\n        ListenerStateEnum newState;\n        //\u5f53\u524d\u5b9e\u4f8b\u662f\u7070\u5ea6\u5b9e\u4f8b", "    public synchronized void mqInit(List<Instance> instances) {\n        ListenerStateEnum newState;\n        //\u5f53\u524d\u5b9e\u4f8b\u662f\u7070\u5ea6\u5b9e\u4f8b\n        if (GrayUtil.isGrayPod()) {\n            newState = ListenerStateEnum.GRAYSCALE;\n        } else {\n            //\u5224\u65ad\u5f53\u524d\u670d\u52a1\u6709\u7070\u5ea6\u5b9e\u4f8b\n            if (this.isHaveGray(instances)) {\n                newState = ListenerStateEnum.PRODUCTION;\n            } else {\n                newState = ListenerStateEnum.TOGETHER;\n            }\n        }\n        log.info(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{}\", GrayUtil.isGrayPod());\n        log.info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{}\", newState.getValue());\n        //\u9632\u6b62\u91cd\u590d\u521d\u59cb\u5316\u76d1\u542cmq\u961f\u5217\u4fe1\u606f", "        if (!newState.equals(listenerMqState)) {\n            listenerMqState = newState;\n            publisher.publishEvent(new GrayEventChangeEvent(listenerMqState));\n        }\n    }\n\n    /**\n     * \u662f\u5426\u6709\u7070\u5ea6\u5b9e\u4f8b\n     *\n     * @return\n     */\n    private boolean isHaveGray(List<Instance> instances) {", "        if (!CollectionUtils.isEmpty(instances)) {\n            for (Instance instance : instances) {\n                if (GrayscaleConstant.STR_BOOLEAN_TRUE.equals(instance.getMetadata().get(GrayscaleConstant.POD_GRAY))) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/nacos/BalancerRuleConfig.java", "chunked_list": ["package com.easyhome.common.nacos;\n\nimport com.easyhome.common.nacos.ribbon.NacosRule;\nimport com.netflix.loadbalancer.IRule;\nimport org.springframework.beans.factory.config.ConfigurableBeanFactory;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\n\n/**", "\n/**\n * \u7070\u5ea6\u8d1f\u8f7d\u7b56\u7565\u914d\u7f6e\n * @author wangshufeng\n */\n@Configuration\npublic class BalancerRuleConfig {\n    @Bean\n    @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n    public IRule getRule(){\n        return new NacosRule();\n    }\n}\n", "    public IRule getRule(){\n        return new NacosRule();\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/nacos/ribbon/NacosRule.java", "chunked_list": ["package com.easyhome.common.nacos.ribbon;\n\nimport com.alibaba.cloud.nacos.NacosDiscoveryProperties;\nimport com.alibaba.cloud.nacos.ribbon.ExtendBalancer;\nimport com.alibaba.cloud.nacos.ribbon.NacosServer;\nimport com.alibaba.nacos.api.naming.NamingService;\nimport com.alibaba.nacos.api.naming.pojo.Instance;\nimport com.easyhome.common.utils.GrayUtil;\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport com.netflix.client.config.IClientConfig;", "import com.easyhome.common.utils.GrayscaleConstant;\nimport com.netflix.client.config.IClientConfig;\nimport com.netflix.loadbalancer.AbstractLoadBalancerRule;\nimport com.netflix.loadbalancer.DynamicServerListLoadBalancer;\nimport com.netflix.loadbalancer.Server;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.util.CollectionUtils;\n", "import org.springframework.util.CollectionUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.stream.Collectors;\n\n/**\n * nacos\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u7b56\u7565", "/**\n * nacos\u81ea\u5b9a\u4e49\u8d1f\u8f7d\u7b56\u7565\n *\n * @author wangshufeng\n */\n@Slf4j\npublic class NacosRule extends AbstractLoadBalancerRule {\n\n    @Autowired\n    private NacosDiscoveryProperties nacosDiscoveryProperties;\n\n    @Override", "    public Server choose(Object key) {\n        try {\n            String clusterName = this.nacosDiscoveryProperties.getClusterName();\n            DynamicServerListLoadBalancer loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();\n            String name = loadBalancer.getName();\n            NamingService namingService = nacosDiscoveryProperties.namingServiceInstance();\n            List<Instance> instances = namingService.selectInstances(name, true);\n            instances = this.getGrayFilterInstances(instances, key);\n            if (CollectionUtils.isEmpty(instances)) {\n                log.warn(\"no instance in service {}\", name);\n                return null;\n            }\n            List<Instance> instancesToChoose = instances;", "            if (CollectionUtils.isEmpty(instances)) {\n                log.warn(\"no instance in service {}\", name);\n                return null;\n            }\n            List<Instance> instancesToChoose = instances;\n            if (StringUtils.isNotBlank(clusterName)) {\n                List<Instance> sameClusterInstances = instances.stream()\n                        .filter(instance -> Objects.equals(clusterName, instance.getClusterName()))\n                        .collect(Collectors.toList());\n                if (!CollectionUtils.isEmpty(sameClusterInstances)) {\n                    instancesToChoose = sameClusterInstances;\n                } else {\n                    log.warn(\n                            \"A cross-cluster call occurs\uff0cname = {}, clusterName = {}, instance = {}\",\n                            name, clusterName, instances);\n                }\n            }\n\n            Instance instance = ExtendBalancer.getHostByRandomWeight2(instancesToChoose);\n            return new NacosServer(instance);\n        } catch (Exception e) {\n            log.warn(\"NacosRule error\", e);\n            return null;\n        }\n    }\n\n    /**\n     * \u6839\u636e\u5f53\u524d\u8bf7\u6c42\u662f\u5426\u4e3a\u7070\u5ea6\u8fc7\u6ee4\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\n     *\n     * @param instances\n     * @return List<Instance>\n     */\n    private List<Instance> getGrayFilterInstances(List<Instance> instances, Object key) {", "                if (!CollectionUtils.isEmpty(sameClusterInstances)) {\n                    instancesToChoose = sameClusterInstances;\n                } else {\n                    log.warn(\n                            \"A cross-cluster call occurs\uff0cname = {}, clusterName = {}, instance = {}\",\n                            name, clusterName, instances);\n                }\n            }\n\n            Instance instance = ExtendBalancer.getHostByRandomWeight2(instancesToChoose);\n            return new NacosServer(instance);\n        } catch (Exception e) {\n            log.warn(\"NacosRule error\", e);\n            return null;\n        }\n    }\n\n    /**\n     * \u6839\u636e\u5f53\u524d\u8bf7\u6c42\u662f\u5426\u4e3a\u7070\u5ea6\u8fc7\u6ee4\u670d\u52a1\u5b9e\u4f8b\u5217\u8868\n     *\n     * @param instances\n     * @return List<Instance>\n     */\n    private List<Instance> getGrayFilterInstances(List<Instance> instances, Object key) {", "        if (CollectionUtils.isEmpty(instances)) {\n            return instances;\n        } else {\n            //\u662f\u5426\u7070\u5ea6\u8bf7\u6c42\n            Boolean isGrayRequest;\n            String grayGroup=GrayscaleConstant.HEADER_VALUE;\n            //\u517c\u5bb9gateway\u4f20\u503c\u65b9\u5f0f\uff0cgateway\u662fnio\u662f\u901a\u8fc7key\u6765\u505a\u8d1f\u8f7d\u5b9e\u4f8b\u8bc6\u522b\u7684\n            if (Objects.nonNull(key) && !GrayscaleConstant.DEFAULT.equals(key)) {\n                isGrayRequest = true;\n                if(isGrayRequest){\n                    grayGroup=(String)key;\n                }\n            } else {\n                isGrayRequest = GrayUtil.isGrayRequest();", "                if(isGrayRequest){\n                    grayGroup=(String)key;\n                }\n            } else {\n                isGrayRequest = GrayUtil.isGrayRequest();\n                if(isGrayRequest){\n                    grayGroup=GrayUtil.requestGroup();\n                }\n            }\n\n            List<Instance> prodInstance=new ArrayList<>();\n            List<Instance> grayInstance=new ArrayList<>();", "            for(Instance item:instances){\n                Map<String, String> metadata = item.getMetadata();\n                if (metadata.isEmpty() || !GrayscaleConstant.STR_BOOLEAN_TRUE.equals(metadata.get(GrayscaleConstant.POD_GRAY))) {\n                    prodInstance.add(item);\n                }\n                if (isGrayRequest) {\n                    if (!metadata.isEmpty() && GrayscaleConstant.STR_BOOLEAN_TRUE.equals(metadata.get(GrayscaleConstant.POD_GRAY))) {\n                        if(Objects.equals(grayGroup,metadata.get(GrayscaleConstant.GRAY_GROUP))){\n                            grayInstance.add(item);\n                        }\n                    }\n                }\n            }", "            if(!isGrayRequest||CollectionUtils.isEmpty(grayInstance)){\n                return prodInstance;\n            }\n            return grayInstance;\n        }\n    }\n\n    @Override\n    public void initWithNiwsConfig(IClientConfig clientConfig) {\n\n    }\n}\n", "    public void initWithNiwsConfig(IClientConfig clientConfig) {\n\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/rocketmq/ListenerStateEnum.java", "chunked_list": ["package com.easyhome.common.rocketmq;\n\nimport lombok.Getter;\n\n/**\n * \u7070\u5ea6\u53d1\u7248\u961f\u5217\u76d1\u542c\u72b6\u6001\n *\n * @author wangshufeng\n */\n@Getter\npublic enum ListenerStateEnum {\n    /**\n     * \u53ea\u76d1\u542c\u751f\u4ea7\u73af\u5883\u961f\u5217\n     */\n    PRODUCTION(0, \"\u53ea\u76d1\u542c\u751f\u4ea7\u73af\u5883\u961f\u5217\"),\n    /**\n     * \u53ea\u76d1\u542c\u7070\u5ea6\u73af\u5883\u961f\u5217\n     */\n    GRAYSCALE(1, \"\u53ea\u76d1\u542c\u7070\u5ea6\u73af\u5883\u961f\u5217\"),\n    /**\n     * \u540c\u65f6\u76d1\u542c\u751f\u4ea7\u548c\u7070\u5ea6\u73af\u5883\u961f\u5217\n     */\n    TOGETHER(2, \"\u540c\u65f6\u76d1\u542c\u751f\u4ea7\u548c\u7070\u5ea6\u73af\u5883\u961f\u5217\");\n\n\n    /**\n     * key\n     */\n    private Integer key;\n    /**\n     * value\n     */\n    private String value;\n\n    ListenerStateEnum(Integer key, String value) {\n        this.key = key;\n        this.value = value;\n    }\n", " */\n@Getter\npublic enum ListenerStateEnum {\n    /**\n     * \u53ea\u76d1\u542c\u751f\u4ea7\u73af\u5883\u961f\u5217\n     */\n    PRODUCTION(0, \"\u53ea\u76d1\u542c\u751f\u4ea7\u73af\u5883\u961f\u5217\"),\n    /**\n     * \u53ea\u76d1\u542c\u7070\u5ea6\u73af\u5883\u961f\u5217\n     */\n    GRAYSCALE(1, \"\u53ea\u76d1\u542c\u7070\u5ea6\u73af\u5883\u961f\u5217\"),\n    /**\n     * \u540c\u65f6\u76d1\u542c\u751f\u4ea7\u548c\u7070\u5ea6\u73af\u5883\u961f\u5217\n     */\n    TOGETHER(2, \"\u540c\u65f6\u76d1\u542c\u751f\u4ea7\u548c\u7070\u5ea6\u73af\u5883\u961f\u5217\");\n\n\n    /**\n     * key\n     */\n    private Integer key;\n    /**\n     * value\n     */\n    private String value;\n\n    ListenerStateEnum(Integer key, String value) {\n        this.key = key;\n        this.value = value;\n    }\n", "    public static String getValue(Integer key) {\n        for (ListenerStateEnum value : values()) {\n            if (value.getKey().equals(key)) {\n                return value.getValue();\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/rocketmq/AbstractGrayEventListener.java", "chunked_list": ["package com.easyhome.common.rocketmq;\n\nimport com.aliyun.openservices.ons.api.Consumer;\nimport com.aliyun.openservices.ons.api.MessageListener;\nimport com.aliyun.openservices.ons.api.ONSFactory;\nimport com.aliyun.openservices.ons.api.PropertyKeyConst;\nimport com.easyhome.common.event.GrayEventChangeEvent;\nimport com.easyhome.common.utils.GrayUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.ApplicationContext;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.util.StringUtils;\n\nimport javax.annotation.PreDestroy;\nimport javax.annotation.Resource;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;", "import java.util.List;\nimport java.util.Objects;\nimport java.util.Properties;\n\n\n/**\n * \u7070\u5ea6\u5b9e\u4f8b\u4e0a\u4e0b\u7ebf\u4e8b\u4ef6\u5904\u7406\u57fa\u7840\u7c7b\n *\n * @author wangshufeng\n */", " * @author wangshufeng\n */\n@Slf4j\npublic abstract class AbstractGrayEventListener implements ApplicationListener<GrayEventChangeEvent> {\n\n    private Consumer consumer;\n    private Consumer consumerGray;\n\n    /**\n     * \u9ed8\u8ba4\u8ba2\u9605tag\u89c4\u5219\n     */\n    private static final String DEFAULT_SUB_EXPRESSION = \"*\";\n\n    private List<SubscriptionData> subscribes = new ArrayList<>();\n\n    private ListenerStateEnum currentState;\n\n    private Properties mqProperties;\n\n    @Resource\n    private ApplicationContext applicationContext;\n\n    /**\n     * \u521d\u59cb\u5316\u6d88\u8d39\u8005\u5b9e\u4f8b\n     */", "    public void initConsumer() {\n        if (GrayUtil.isGrayPod()) {\n            initConsumerGray();\n        } else {\n            initConsumerProduction();\n        }\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u751f\u4ea7\u6d88\u8d39\u8005\u5b9e\u4f8b\n     */\n    private void initConsumerProduction() {", "        if (consumer == null) {\n            synchronized (this) {\n                if (consumer == null) {\n                    if (Objects.isNull(mqProperties)) {\n                        throw new NullPointerException(\"rocketMq\u914d\u7f6e\u4fe1\u606f\u672a\u8bbe\u7f6e\");\n                    } else {\n                        consumer = ONSFactory.createConsumer(mqProperties);\n                        consumer.start();\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * \u521d\u59cb\u5316\u7070\u5ea6\u6d88\u8d39\u8005\u5b9e\u4f8b\n     */\n    private void initConsumerGray() {", "        if (consumerGray == null) {\n            synchronized (this) {\n                if (consumerGray == null) {\n                    if (Objects.isNull(mqProperties)) {\n                        throw new NullPointerException(\"rocketMq\u914d\u7f6e\u4fe1\u606f\u672a\u8bbe\u7f6e\");\n                    } else {\n                        Properties grayProperties = new Properties();\n                        grayProperties.putAll(mqProperties);\n                        grayProperties.setProperty(PropertyKeyConst.GROUP_ID, GrayUtil.topicGrayName(grayProperties.getProperty(PropertyKeyConst.GROUP_ID)));\n                        consumerGray = ONSFactory.createConsumer(grayProperties);\n                        consumerGray.start();\n                    }\n                }\n            }\n        }\n    }\n\n    @Override", "    public void onApplicationEvent(GrayEventChangeEvent event) {\n        ListenerStateEnum listenerStateEnum = (ListenerStateEnum) event.getSource();\n        log.info(this.getClass().getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());\n        currentState = listenerStateEnum;\n        if (ListenerStateEnum.PRODUCTION.equals(listenerStateEnum)) {\n            initConsumerProduction();\n            for (SubscriptionData item : subscribes) {\n                if (Objects.nonNull(consumer)) {\n                    consumer.subscribe(item.getTopic(), item.getSubExpression(), item.getListener());\n                }\n            }\n            shutdownConsumerGray();\n        }", "        if (ListenerStateEnum.TOGETHER.equals(listenerStateEnum)) {\n            initConsumerProduction();\n            initConsumerGray();\n            for (SubscriptionData item : subscribes) {\n                if (Objects.nonNull(consumer)) {\n                    consumer.subscribe(item.getTopic(), item.getSubExpression(), item.getListener());\n                }\n                if (Objects.nonNull(consumerGray)) {\n                    consumerGray.subscribe(GrayUtil.topicGrayName(item.getTopic()), item.getSubExpression(), item.getListener());\n                }\n            }\n        }\n", "        if (ListenerStateEnum.GRAYSCALE.equals(listenerStateEnum)) {\n            initConsumerGray();\n            for (SubscriptionData item : subscribes) {\n                if (Objects.nonNull(consumerGray)) {\n                    consumerGray.subscribe(GrayUtil.topicGrayName(item.getTopic()), item.getSubExpression(), item.getListener());\n                }\n            }\n            shutdownConsumerProduction();\n        }\n    }\n\n    /**\n     * \u6dfb\u52a0\u8ba2\u9605\u89c4\u5219\n     *\n     * @param topic         \u4e3b\u9898\n     * @param listenerClass \u5904\u7406\u6d88\u606f\u76d1\u542c\u5668\u7c7b\u540d\u79f0\n     * @return AbstractGrayEventListener\n     */", "    public AbstractGrayEventListener subscribe(String topic, Class<? extends MessageListener> listenerClass) {\n        return this.subscribe(topic, DEFAULT_SUB_EXPRESSION, listenerClass);\n    }\n\n    /**\n     * \u6dfb\u52a0\u8ba2\u9605\u89c4\u5219\n     *\n     * @param topic         \u4e3b\u9898\n     * @param subExpression \u8ba2\u9605tag\u89c4\u5219\n     * @param listenerClass \u5904\u7406\u6d88\u606f\u76d1\u542c\u5668\u7c7b\u540d\u79f0\n     * @return AbstractGrayEventListener\n     */", "    public AbstractGrayEventListener subscribe(String topic, String subExpression, Class<? extends MessageListener> listenerClass) {\n        if (Objects.isNull(listenerClass)) {\n            throw new NullPointerException(\"listenerClass\u4fe1\u606f\u672a\u8bbe\u7f6e\");\n        }\n        MessageListener listener = applicationContext.getBean(listenerClass);\n        if (Objects.isNull(listener)) {\n            throw new NullPointerException(listenerClass.getName().concat(\"\u672a\u627e\u5230\u5b9e\u4f8b\u5bf9\u8c61\"));\n        }\n        return this.subscribe(topic, subExpression, listener);\n    }\n\n    /**\n     * \u6dfb\u52a0\u8ba2\u9605\u89c4\u5219\n     *\n     * @param topic    \u4e3b\u9898\n     * @param listener \u5904\u7406\u6d88\u606f\u76d1\u542c\u5668\n     * @return AbstractGrayEventListener\n     */", "    public AbstractGrayEventListener subscribe(String topic, MessageListener listener) {\n        return this.subscribe(topic, DEFAULT_SUB_EXPRESSION, listener);\n    }\n\n    /**\n     * \u6dfb\u52a0\u8ba2\u9605\u89c4\u5219\n     *\n     * @param topic         \u4e3b\u9898\n     * @param subExpression \u8ba2\u9605tag\u89c4\u5219\n     * @param listener      \u5904\u7406\u6d88\u606f\u76d1\u542c\u5668\n     * @return AbstractGrayEventListener\n     */", "    public AbstractGrayEventListener subscribe(String topic, String subExpression, MessageListener listener) {\n        if (StringUtils.isEmpty(topic)) {\n            throw new NullPointerException(\"topic\u4fe1\u606f\u672a\u8bbe\u7f6e\");\n        }\n        if (StringUtils.isEmpty(subExpression)) {\n            throw new NullPointerException(\"subExpression\u4fe1\u606f\u672a\u8bbe\u7f6e\");\n        }\n        if (Objects.isNull(listener)) {\n            throw new NullPointerException(\"listener\u4fe1\u606f\u672a\u8bbe\u7f6e\");\n        }\n        if (listener instanceof GrayMessageListener) {\n            subscribes.add(new SubscriptionData(topic, subExpression, listener));\n        } else {\n            subscribes.add(new SubscriptionData(topic, subExpression, new GrayMessageListener(listener)));\n        }\n        return this;\n    }\n\n    /**\n     * \u8bbe\u7f6eRoketMq\u914d\u7f6e\u5c5e\u6027\n     *\n     * @param mqProperties \u914d\u7f6e\u5c5e\u6027\n     * @return AbstractGrayEventListener\n     */", "        if (listener instanceof GrayMessageListener) {\n            subscribes.add(new SubscriptionData(topic, subExpression, listener));\n        } else {\n            subscribes.add(new SubscriptionData(topic, subExpression, new GrayMessageListener(listener)));\n        }\n        return this;\n    }\n\n    /**\n     * \u8bbe\u7f6eRoketMq\u914d\u7f6e\u5c5e\u6027\n     *\n     * @param mqProperties \u914d\u7f6e\u5c5e\u6027\n     * @return AbstractGrayEventListener\n     */", "    public AbstractGrayEventListener setMqProperties(Properties mqProperties) {\n        this.mqProperties = mqProperties;\n        return this;\n    }\n\n\n    /**\n     * \u9500\u6bc1\u65b9\u6cd5\n     */\n    @PreDestroy\n    public void shutdown() {\n        shutdownConsumerProduction();\n        shutdownConsumerGray();\n    }\n\n    /**\n     * \u9500\u6bc1\u751f\u4ea7\u6d88\u8d39\u5b9e\u4f8b\n     */\n    private void shutdownConsumerProduction() {", "    public void shutdown() {\n        shutdownConsumerProduction();\n        shutdownConsumerGray();\n    }\n\n    /**\n     * \u9500\u6bc1\u751f\u4ea7\u6d88\u8d39\u5b9e\u4f8b\n     */\n    private void shutdownConsumerProduction() {\n        if (Objects.nonNull(consumer)) {\n            consumer.shutdown();\n            consumer = null;\n        }\n    }\n\n    /**\n     * \u9500\u6bc1\u7070\u5ea6\u6d88\u8d39\u8005\u5b9e\u4f8b\n     */\n    private void shutdownConsumerGray() {", "        if (Objects.nonNull(consumer)) {\n            consumer.shutdown();\n            consumer = null;\n        }\n    }\n\n    /**\n     * \u9500\u6bc1\u7070\u5ea6\u6d88\u8d39\u8005\u5b9e\u4f8b\n     */\n    private void shutdownConsumerGray() {\n        if (Objects.nonNull(consumerGray)) {\n            consumerGray.shutdown();\n            consumerGray = null;\n        }\n    }\n}\n\n\n\n\n\n\n\n", "        if (Objects.nonNull(consumerGray)) {\n            consumerGray.shutdown();\n            consumerGray = null;\n        }\n    }\n}\n\n\n\n\n\n\n\n"]}
{"filename": "src/main/java/com/easyhome/common/rocketmq/SubscriptionData.java", "chunked_list": ["package com.easyhome.common.rocketmq;\n\nimport com.aliyun.openservices.ons.api.MessageListener;\nimport lombok.Data;\n\n/**\n * \u8ba2\u9605\u89c4\u5219\u6570\u636e\n * @author wangshufeng\n */\n@Data\npublic class SubscriptionData {\n    private String topic;\n    private String subExpression;\n    private MessageListener listener;\n\n    public SubscriptionData(String topic, String subExpression, MessageListener listener) {\n        this.topic = topic;\n        this.subExpression = subExpression;\n        this.listener = listener;\n    }\n}\n", " */\n@Data\npublic class SubscriptionData {\n    private String topic;\n    private String subExpression;\n    private MessageListener listener;\n\n    public SubscriptionData(String topic, String subExpression, MessageListener listener) {\n        this.topic = topic;\n        this.subExpression = subExpression;\n        this.listener = listener;\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/rocketmq/GrayMessageListener.java", "chunked_list": ["package com.easyhome.common.rocketmq;\n\nimport com.aliyun.openservices.ons.api.Action;\nimport com.aliyun.openservices.ons.api.ConsumeContext;\nimport com.aliyun.openservices.ons.api.Message;\nimport com.aliyun.openservices.ons.api.MessageListener;\nimport com.easyhome.common.feign.GrayParamHolder;\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport lombok.extern.slf4j.Slf4j;\n", "import lombok.extern.slf4j.Slf4j;\n\n/**\n * \u7070\u5ea6mq\u6d88\u606f\u76d1\u542c\u5668\n * \u901a\u8fc7topic\u540e\u7f00\u5224\u65ad\u662f\u5426\u4e3a\u7070\u5ea6\u6d41\u91cf\n * @author wangshufeng\n */\n@Slf4j\npublic final class GrayMessageListener implements MessageListener {\n\n    private MessageListener messageListener;\n\n    public GrayMessageListener(MessageListener messageListener) {\n        this.messageListener = messageListener;\n    }\n\n    @Override", "public final class GrayMessageListener implements MessageListener {\n\n    private MessageListener messageListener;\n\n    public GrayMessageListener(MessageListener messageListener) {\n        this.messageListener = messageListener;\n    }\n\n    @Override\n    public Action consume(Message message, ConsumeContext context) {\n        if(message.getTopic().endsWith(GrayscaleConstant.GRAY_TOPIC_SUFFIX)){\n            GrayParamHolder.putValue(GrayscaleConstant.HEADER_KEY, GrayscaleConstant.HEADER_VALUE);\n            GrayParamHolder.putValue(GrayscaleConstant.PRINT_HEADER_LOG_KEY, GrayscaleConstant.STR_BOOLEAN_TRUE);\n            log.info(\"\u4e3a\u5f53\u524dmq\u8bbe\u7f6e\u4f20\u9012\u7070\u5ea6\u6807\u8bc6\u3002\");\n        }\n        Action result= messageListener.consume(message,context);\n        GrayParamHolder.clearValue();\n        return result;\n    }\n}\n", "    public Action consume(Message message, ConsumeContext context) {\n        if(message.getTopic().endsWith(GrayscaleConstant.GRAY_TOPIC_SUFFIX)){\n            GrayParamHolder.putValue(GrayscaleConstant.HEADER_KEY, GrayscaleConstant.HEADER_VALUE);\n            GrayParamHolder.putValue(GrayscaleConstant.PRINT_HEADER_LOG_KEY, GrayscaleConstant.STR_BOOLEAN_TRUE);\n            log.info(\"\u4e3a\u5f53\u524dmq\u8bbe\u7f6e\u4f20\u9012\u7070\u5ea6\u6807\u8bc6\u3002\");\n        }\n        Action result= messageListener.consume(message,context);\n        GrayParamHolder.clearValue();\n        return result;\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/utils/GrayscaleConstant.java", "chunked_list": ["package com.easyhome.common.utils;\n\n/**\n * \u7070\u5ea6\u53d1\u5e03\u5e38\u91cf\n * @author wangshufeng\n */\npublic class GrayscaleConstant {\n\n    public static final String STR_BOOLEAN_TRUE = \"true\";\n\n    /**\n     * \u5934\u4fe1\u606f\u6253\u5370\u65e5\u5fd7\u6807\u8bc6\n     */", "    public static final String STR_BOOLEAN_TRUE = \"true\";\n\n    /**\n     * \u5934\u4fe1\u606f\u6253\u5370\u65e5\u5fd7\u6807\u8bc6\n     */\n    public static final String PRINT_HEADER_LOG_KEY = \"print_header_log\";\n\n    /**\n     * http\u8bf7\u6c42\u5934\u7070\u5ea6\u6807\u8bc6\u53c2\u6570\u540d\n     */\n    public static final String  HEADER_KEY = \"release-version\";\n\n    /**\n     * http\u8bf7\u6c42\u5934\u7070\u5ea6\u6807\u8bc6\u53c2\u6570\u503c\n     */", "    public static final String  HEADER_KEY = \"release-version\";\n\n    /**\n     * http\u8bf7\u6c42\u5934\u7070\u5ea6\u6807\u8bc6\u53c2\u6570\u503c\n     */\n    public static final String HEADER_VALUE = \"grayscale\";\n\n    /**\n     * useId http\u8bf7\u6c42\u5934\u6807\u8bc6\n     */\n    public static final String USER_ID = \"User_Id\";\n\n    /**\n     * \u56fd\u9645\u5316\u8bed\u8a00\n     */", "    public static final String USER_ID = \"User_Id\";\n\n    /**\n     * \u56fd\u9645\u5316\u8bed\u8a00\n     */\n    public static final String DW_LANG = \"dw_lang\";\n\n    /**\n     * \u64cd\u4f5c\n     */\n    public static final String DEVICE_OS = \"deviceOs\";\n    /**\n     * \u662f\u5426\u7070\u5ea6\u5b9e\u4f8b\n     */", "    public static final String DEVICE_OS = \"deviceOs\";\n    /**\n     * \u662f\u5426\u7070\u5ea6\u5b9e\u4f8b\n     */\n    public static final String POD_GRAY=\"pod.gray\";\n\n    /**\n     * \u7070\u5ea6\u6d88\u606f\u961f\u5217\u540e\u7f00\n     */\n    public static final String GRAY_TOPIC_SUFFIX=\"_gray\";\n\n    /**\n     * \u9ed8\u8ba4\u5b57\u7b26\u4e32\n     */", "    public static final String GRAY_TOPIC_SUFFIX=\"_gray\";\n\n    /**\n     * \u9ed8\u8ba4\u5b57\u7b26\u4e32\n     */\n    public static final String DEFAULT = \"default\";\n\n    /**\n     * \u7070\u5ea6\u5206\u7ec4\n     */\n    public static final String GRAY_GROUP=\"gray.group\";\n\n}\n", "    public static final String GRAY_GROUP=\"gray.group\";\n\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/utils/GrayUtil.java", "chunked_list": ["package com.easyhome.common.utils;\n\nimport com.easyhome.common.feign.GrayParamHolder;\nimport org.springframework.util.StringUtils;\n\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * \u7070\u5ea6\u53d1\u5e03\u5de5\u5177\u7c7b", "/**\n * \u7070\u5ea6\u53d1\u5e03\u5de5\u5177\u7c7b\n *\n * @author wangshufeng\n */\npublic class GrayUtil {\n    /**\n     * \u4e3b\u9898\u540d\u79f0\u62fc\u63a5\u7070\u5ea6\u540e\u7f00\n     *\n     * @param topicName\n     * @return String\n     */", "    public static String topicGrayName(String topicName) {\n        if (StringUtils.isEmpty(topicName)) {\n            throw new NullPointerException(\"topicName\u4e3anull\");\n        }\n        return topicName.concat(GrayscaleConstant.GRAY_TOPIC_SUFFIX);\n    }\n\n    /**\n     * \u81ea\u52a8\u4e3b\u9898\u540d\u79f0\u62fc\u63a5\u7070\u5ea6\u540e\u7f00\n     * @param topicName\n     * @return String\n     */", "    public static String autoTopicGrayName(String topicName) {\n        if (isGrayRequest()) {\n            return topicGrayName(topicName);\n        } else {\n            return topicName;\n        }\n    }\n\n    /**\n     * \u662f\u5426\u4e3a\u7070\u5ea6\u8bf7\u6c42\n     * @return Boolean\n     */", "    public static Boolean isGrayRequest(){\n        Map<String,String> attributes= GrayParamHolder.getGrayMap();\n        String releaseVersion=attributes.get(GrayscaleConstant.HEADER_KEY);\n        if (Objects.nonNull(releaseVersion)&&!\"\".equals(releaseVersion)) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * \u5f53\u524d\u73af\u5883\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\n     *\n     * @return boolean\n     */", "    public static Boolean isGrayPod() {\n        String grayFlg = System.getProperty(GrayscaleConstant.POD_GRAY);\n        if (GrayscaleConstant.STR_BOOLEAN_TRUE.equals(grayFlg)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u8fd0\u884c\u5b9e\u4f8b\u7684\u7070\u5ea6\u5206\u7ec4\n     * @return\n     */", "    public static String podGroup() {\n        String groupFlag = System.getProperty(GrayscaleConstant.GRAY_GROUP);\n        if (groupFlag!=null&&!\"\".equals(groupFlag)) {\n            return groupFlag;\n        } else {\n            return GrayscaleConstant.HEADER_VALUE;\n        }\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8bf7\u6c42\u5206\u7ec4\n     * @return\n     */", "    public static String requestGroup(){\n        Map<String,String> attributes= GrayParamHolder.getGrayMap();\n        String groupFlag =attributes.get(GrayscaleConstant.HEADER_KEY);\n        if (groupFlag!=null&&!\"\".equals(groupFlag)) {\n            return groupFlag;\n        } else {\n            return GrayscaleConstant.HEADER_VALUE;\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/job/JavaGrayProcessor.java", "chunked_list": ["package com.easyhome.common.job;\n\nimport com.alibaba.schedulerx.worker.domain.JobContext;\nimport com.alibaba.schedulerx.worker.processor.JobProcessor;\nimport com.alibaba.schedulerx.worker.processor.ProcessResult;\nimport com.easyhome.common.feign.GrayParamHolder;\nimport com.easyhome.common.utils.GrayUtil;\nimport com.easyhome.common.utils.GrayscaleConstant;\nimport lombok.extern.slf4j.Slf4j;\n", "import lombok.extern.slf4j.Slf4j;\n\n/**\n * \u963f\u91cc\u4e91job\u57fa\u7c7b\n * @author wangshufeng\n */\n@Slf4j\npublic abstract class JavaGrayProcessor implements JobProcessor {\n    @Override\n    public void preProcess(JobContext context) throws Exception {\n        GrayParamHolder.clearValue();", "    public void preProcess(JobContext context) throws Exception {\n        GrayParamHolder.clearValue();\n        if (GrayUtil.isGrayPod()) {\n            GrayParamHolder.putValue(GrayscaleConstant.HEADER_KEY, GrayscaleConstant.HEADER_VALUE);\n            GrayParamHolder.putValue(GrayscaleConstant.PRINT_HEADER_LOG_KEY, GrayscaleConstant.STR_BOOLEAN_TRUE);\n            log.info(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1atrue,Job\u8bbe\u7f6e\u4f20\u9012\u7070\u5ea6\u6807\u8bc6\u3002\");\n        }\n    }\n\n    @Override\n    public ProcessResult postProcess(JobContext context) {\n        GrayParamHolder.clearValue();\n        return null;\n    }\n\n    @Override", "    public ProcessResult postProcess(JobContext context) {\n        GrayParamHolder.clearValue();\n        return null;\n    }\n\n    @Override\n    public void kill(JobContext context) {\n\n    }\n}\n"]}
{"filename": "src/main/java/com/easyhome/common/event/GrayEventChangeEvent.java", "chunked_list": ["package com.easyhome.common.event;\n\nimport com.easyhome.common.rocketmq.ListenerStateEnum;\nimport org.springframework.context.ApplicationEvent;\n\n\n\n/**\n * \u7070\u5ea6\u73af\u5883\u53d8\u66f4\u4e8b\u4ef6\n * @author wangshufeng", " * \u7070\u5ea6\u73af\u5883\u53d8\u66f4\u4e8b\u4ef6\n * @author wangshufeng\n */\npublic class GrayEventChangeEvent extends ApplicationEvent {\n    /**\n     * Create a new {@code ApplicationEvent}.\n     *\n     * @param source the object on which the event initially occurred or with\n     *               which the event is associated (never {@code null})\n     */\n    public GrayEventChangeEvent(ListenerStateEnum source) {\n        super(source);\n    }\n}\n"]}
