{"filename": "api/src/test/java/sh/pancake/serdemc/TestMetadataPacket.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.DataInputStream;", "\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.junit.jupiter.api.Test;\n\nimport sh.pancake.serdemc.io.InputStreamReader;\nimport sh.pancake.serdemc.network.io.PacketDataReader;\n", "import sh.pancake.serdemc.network.io.PacketDataReader;\n\nclass TestMetadataPacket {\n    private InputStream openTestPacketStream() throws IOException {\n        return TestNbt.class.getResourceAsStream(\"/metadata_packet.bin\");\n    }\n\n    @Test\n    void testRead() throws Throwable {\n        try(DataInputStream inputStream = new DataInputStream(openTestPacketStream())) {", "    void testRead() throws Throwable {\n        try(DataInputStream inputStream = new DataInputStream(openTestPacketStream())) {\n            PacketDataReader reader = new PacketDataReader(new InputStreamReader(inputStream));\n\n            assertEquals(reader.readVarInt(), 78);\n            assertEquals(reader.readVarInt(), 27);\n            assertEquals(reader.readEntityMetadata().size(), 2);\n        }\n    }\n}", "    }\n}\n"]}
{"filename": "api/src/test/java/sh/pancake/serdemc/TestLoginPacket.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.DataInputStream;", "\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.junit.jupiter.api.Test;\n\nimport sh.pancake.serdemc.io.InputStreamReader;\nimport sh.pancake.serdemc.network.io.PacketDataReader;\n", "import sh.pancake.serdemc.network.io.PacketDataReader;\n\nclass TestLoginPacket {\n    private InputStream openTestPacketStream() throws IOException {\n        return TestNbt.class.getResourceAsStream(\"/login_packet.bin\");\n    }\n\n    @Test\n    void testRead() throws Throwable {\n        try(DataInputStream inputStream = new DataInputStream(openTestPacketStream())) {", "    void testRead() throws Throwable {\n        try(DataInputStream inputStream = new DataInputStream(openTestPacketStream())) {\n            PacketDataReader reader = new PacketDataReader(new InputStreamReader(inputStream));\n\n            assertEquals(reader.readVarInt(), 36);\n            assertEquals(reader.readInt(), 74);\n            assertEquals(reader.readBoolean(), false);\n            assertEquals(reader.readByteUnsigned(), 0);\n            assertEquals(reader.readByte(), -1);\n            assertEquals(reader.readVarInt(), 3);", "            assertEquals(reader.readByte(), -1);\n            assertEquals(reader.readVarInt(), 3);\n            assertEquals(reader.readIdentifier(), \"minecraft:overworld\");\n            assertEquals(reader.readIdentifier(), \"minecraft:the_nether\");\n            assertEquals(reader.readIdentifier(), \"minecraft:the_end\");\n            assertEquals(reader.readNbt().getCompound().size(), 3);\n        }\n    }\n}\n", "}\n"]}
{"filename": "api/src/test/java/sh/pancake/serdemc/TestNbt.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc;\n\nimport static org.junit.jupiter.api.Assertions.assertArrayEquals;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n", "import static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.junit.jupiter.api.Test;\n", "import org.junit.jupiter.api.Test;\n\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\nimport sh.pancake.serdemc.data.nbt.NbtTagCompound;\nimport sh.pancake.serdemc.data.nbt.NbtTagValue;\nimport sh.pancake.serdemc.data.nbt.io.NbtReader;\nimport sh.pancake.serdemc.data.nbt.io.NbtWriter;\nimport sh.pancake.serdemc.io.InputStreamReader;\nimport sh.pancake.serdemc.io.OutputStreamWriter;\n", "import sh.pancake.serdemc.io.OutputStreamWriter;\n\nclass TestNbt {\n    private InputStream openTestNbtStream() throws IOException {\n        return TestNbt.class.getResourceAsStream(\"/hello_world.nbt\");\n    }\n\n    @Test\n    void testRead() throws Throwable {\n        try(DataInputStream inputStream = new DataInputStream(openTestNbtStream())) {", "    void testRead() throws Throwable {\n        try(DataInputStream inputStream = new DataInputStream(openTestNbtStream())) {\n            NbtRootCompound root = new NbtReader(new InputStreamReader(inputStream)).readRootCompound();\n\n            assertEquals(root.getCompound().get(\"name\"), NbtTagValue.fromString(\"Bananrama\"));\n        }\n    }\n\n    @Test\n    void testWrite() throws Throwable {", "    @Test\n    void testWrite() throws Throwable {\n        byte[] original;\n        try (InputStream stream = openTestNbtStream()) {\n            original = stream.readAllBytes();\n        }\n\n        NbtRootCompound root = new NbtRootCompound(\"hello world\", new NbtTagCompound());\n        root.getCompound().put(\"name\", NbtTagValue.fromString(\"Bananrama\"));\n", "        root.getCompound().put(\"name\", NbtTagValue.fromString(\"Bananrama\"));\n\n        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n            new NbtWriter(new OutputStreamWriter(new DataOutputStream(outputStream))).writeRootCompound(root);\n\n            assertArrayEquals(original, outputStream.toByteArray());\n        }\n    }\n}\n", "}\n"]}
{"filename": "api/src/test/java/sh/pancake/serdemc/TestBigNbt.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc;\n\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;", "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.GZIPInputStream;\n\nimport org.junit.jupiter.api.Test;\n\nimport sh.pancake.serdemc.data.nbt.io.NbtReader;\nimport sh.pancake.serdemc.io.InputStreamReader;\n\npublic class TestBigNbt {\n    private InputStream openTestNbtStream() throws IOException {\n        return new GZIPInputStream(TestBigNbt.class.getResourceAsStream(\"/bigtest.nbt\"));\n    }\n\n    @Test\n    void testRead() throws Throwable {\n        try (DataInputStream inputStream = new DataInputStream(openTestNbtStream())) {\n            new NbtReader(new InputStreamReader(inputStream)).readRootCompound();\n        }\n    }\n}\n", "\npublic class TestBigNbt {\n    private InputStream openTestNbtStream() throws IOException {\n        return new GZIPInputStream(TestBigNbt.class.getResourceAsStream(\"/bigtest.nbt\"));\n    }\n\n    @Test\n    void testRead() throws Throwable {\n        try (DataInputStream inputStream = new DataInputStream(openTestNbtStream())) {\n            new NbtReader(new InputStreamReader(inputStream)).readRootCompound();\n        }\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/io/InputStreamReader.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.io;\n\nimport java.io.DataInputStream;\nimport java.io.IOException;\n", "import java.io.IOException;\n\nimport lombok.AllArgsConstructor;\n\n@AllArgsConstructor\npublic class InputStreamReader implements DataReader {\n    private final DataInputStream stream;\n\n    @Override\n    public byte readByte() throws IOException {\n        return stream.readByte();\n    }\n\n    @Override", "    public byte readByte() throws IOException {\n        return stream.readByte();\n    }\n\n    @Override\n    public int readBytes(byte[] dst, int offset, int length) throws IOException {\n        return stream.read(dst, offset, length);\n    }\n\n    @Override\n    public short readShort() throws IOException {\n        return stream.readShort();\n    }\n\n    @Override", "    public short readShort() throws IOException {\n        return stream.readShort();\n    }\n\n    @Override\n    public int readInt() throws IOException {\n        return stream.readInt();\n    }\n\n    @Override\n    public long readLong() throws IOException {\n        return stream.readLong();\n    }\n}\n", "    public long readLong() throws IOException {\n        return stream.readLong();\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/io/ByteBufferReader.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.io;\n\nimport java.nio.ByteBuffer;\n\nimport lombok.AllArgsConstructor;", "\nimport lombok.AllArgsConstructor;\n\n@AllArgsConstructor\npublic class ByteBufferReader implements DataReader {\n    private final ByteBuffer byteBuffer;\n\n    @Override\n    public byte readByte() {\n        return byteBuffer.get();\n    }\n\n    @Override", "    public byte readByte() {\n        return byteBuffer.get();\n    }\n\n    @Override\n    public int readBytes(byte[] dst, int offset, int length) {\n        int read = Math.min(length, byteBuffer.remaining());\n\n        byteBuffer.get(dst, offset, read);\n        return read;\n    }\n\n    @Override", "    public short readShort() {\n        return byteBuffer.getShort();\n    }\n\n    @Override\n    public int readInt() {\n        return byteBuffer.getInt();\n    }\n\n    @Override\n    public long readLong() {\n        return byteBuffer.getLong();\n    }\n}\n", "    public long readLong() {\n        return byteBuffer.getLong();\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/io/DataReader.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.io;\n\nimport java.io.IOException;\n\npublic interface DataReader {\n    byte readByte() throws IOException;\n    default int readByteUnsigned() throws IOException {\n        return Byte.toUnsignedInt(readByte());\n    }\n\n    int readBytes(byte[] dst, int offset, int length) throws IOException;\n\n    default int readBytes(byte[] dst, int offset) throws IOException {\n        return readBytes(dst, offset, dst.length);\n    }\n    default int readBytes(byte[] dst) throws IOException {\n        return readBytes(dst, 0, dst.length);\n    }\n\n    short readShort() throws IOException;\n    default int readShortUnsigned() throws IOException {\n        return Short.toUnsignedInt(readShort());\n    }\n\n    int readInt() throws IOException;\n    long readLong() throws IOException;\n\n    default float readFloat() throws IOException {\n        return Float.intBitsToFloat(readInt());\n    }\n\n    default double readDouble() throws IOException {\n        return Double.longBitsToDouble(readLong());\n    }\n}\n", "\npublic interface DataReader {\n    byte readByte() throws IOException;\n    default int readByteUnsigned() throws IOException {\n        return Byte.toUnsignedInt(readByte());\n    }\n\n    int readBytes(byte[] dst, int offset, int length) throws IOException;\n\n    default int readBytes(byte[] dst, int offset) throws IOException {\n        return readBytes(dst, offset, dst.length);\n    }\n    default int readBytes(byte[] dst) throws IOException {\n        return readBytes(dst, 0, dst.length);\n    }\n\n    short readShort() throws IOException;\n    default int readShortUnsigned() throws IOException {\n        return Short.toUnsignedInt(readShort());\n    }\n\n    int readInt() throws IOException;\n    long readLong() throws IOException;\n\n    default float readFloat() throws IOException {\n        return Float.intBitsToFloat(readInt());\n    }\n\n    default double readDouble() throws IOException {\n        return Double.longBitsToDouble(readLong());\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/io/OutputStreamWriter.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.io;\n\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n", "import java.io.IOException;\n\nimport lombok.AllArgsConstructor;\n\n@AllArgsConstructor\npublic class OutputStreamWriter implements DataWriter {\n    private final DataOutputStream stream;\n\n    @Override\n    public void writeByte(byte value) throws IOException {\n        stream.writeByte(value);\n    }\n\n    @Override", "    public void writeByte(byte value) throws IOException {\n        stream.writeByte(value);\n    }\n\n    @Override\n    public void writeBytes(byte[] dst, int offset, int length) throws IOException {\n        stream.write(dst, offset, length);\n    }\n\n    @Override\n    public void writeShort(short value) throws IOException {\n        stream.writeShort(value);\n    }\n\n    @Override", "    public void writeShort(short value) throws IOException {\n        stream.writeShort(value);\n    }\n\n    @Override\n    public void writeInt(int value) throws IOException {\n        stream.writeInt(value);\n    }\n\n    @Override\n    public void writeLong(long value) throws IOException {\n        stream.writeLong(value);\n    }\n}\n", "    public void writeLong(long value) throws IOException {\n        stream.writeLong(value);\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/io/ByteBufferWriter.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.io;\n\nimport java.nio.ByteBuffer;\n\nimport lombok.AllArgsConstructor;", "\nimport lombok.AllArgsConstructor;\n\n@AllArgsConstructor\npublic class ByteBufferWriter implements DataWriter {\n    private final ByteBuffer byteBuffer;\n\n    @Override\n    public void writeByte(byte value) {\n        byteBuffer.put(value);\n    }\n\n    @Override", "    public void writeByte(byte value) {\n        byteBuffer.put(value);\n    }\n\n    @Override\n    public void writeBytes(byte[] dst, int offset, int length) {\n        byteBuffer.put(dst, offset, length);\n    }\n\n    @Override\n    public void writeShort(short value) {\n        byteBuffer.putShort(value);\n    }\n\n    @Override", "    public void writeShort(short value) {\n        byteBuffer.putShort(value);\n    }\n\n    @Override\n    public void writeInt(int value) {\n        byteBuffer.putInt(value);\n    }\n\n    @Override\n    public void writeLong(long value) {\n        byteBuffer.putLong(value);\n    }\n}\n", "    public void writeLong(long value) {\n        byteBuffer.putLong(value);\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/io/DataWriter.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.io;\n\nimport java.io.IOException;\n\npublic interface DataWriter {\n    void writeByte(byte value) throws IOException;\n    default void writeByteUnsigned(int value) throws IOException {\n        writeByte((byte) value);\n    }\n\n    void writeBytes(byte[] dst, int offset, int length) throws IOException;", "\npublic interface DataWriter {\n    void writeByte(byte value) throws IOException;\n    default void writeByteUnsigned(int value) throws IOException {\n        writeByte((byte) value);\n    }\n\n    void writeBytes(byte[] dst, int offset, int length) throws IOException;\n    public default void writeBytes(byte[] dst, int offset) throws IOException {\n        writeBytes(dst, offset, dst.length - offset);\n    }", "    public default void writeBytes(byte[] dst, int offset) throws IOException {\n        writeBytes(dst, offset, dst.length - offset);\n    }\n    public default void writeBytes(byte[] dst) throws IOException {\n        writeBytes(dst, 0, dst.length);\n    }\n\n    void writeShort(short value) throws IOException;\n    default void writeShortUnsigned(int value) throws IOException {\n        writeShort((short) value);\n    }\n\n    void writeInt(int value) throws IOException;\n    void writeLong(long value) throws IOException;\n\n    default void writeFloat(float value) throws IOException {\n        writeInt(Float.floatToRawIntBits(value));\n    }\n\n    default void writeDouble(double value) throws IOException {\n        writeLong(Double.doubleToRawLongBits(value));\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/Vector3.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Vector3 {\n    private final float x;\n    private final float y;\n    private final float z;\n\n    public Quaternion toQuaternion() {\n        return toQuaternion(0f);\n    }", "    public Quaternion toQuaternion() {\n        return toQuaternion(0f);\n    }\n    public Quaternion toQuaternion(float w) {\n        return new Quaternion(x, y, z, w);\n    }\n\n    public static Vector3 fromQuaternion(Quaternion qu) {\n        return new Vector3(qu.getX(), qu.getY(), qu.getZ());\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/BlockPosition.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class BlockPosition {\n    private int x;\n    private int y;\n    private int z;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/Quaternion.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class Quaternion {\n    private final float x;\n    private final float y;\n    private final float z;\n    private final float w;\n\n    public Vector3 toVector3() {\n        return new Vector3(x, y, z);\n    }\n", "    public Vector3 toVector3() {\n        return new Vector3(x, y, z);\n    }\n\n    public static Quaternion fromVector3(Vector3 vec) {\n        return fromVector3(vec, 0f);\n    }\n    public static Quaternion fromVector3(Vector3 vec, float w) {\n        return new Quaternion(vec.getX(), vec.getY(), vec.getZ(), w);\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/GlobalBlockPosition.java", "chunked_list": ["package sh.pancake.serdemc.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class GlobalBlockPosition {\n    private String dimension;\n    private BlockPosition position;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/ItemStack.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;", "import lombok.Data;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\n\n@Data\n@AllArgsConstructor\npublic class ItemStack {\n    private int id;\n\n    private byte count;\n\n    private NbtRootCompound nbt;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/metadata/MetadataValue.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.metadata;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class MetadataValue {\n    private int type;\n    private Object value;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/metadata/codec/MetadataValueReader.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.metadata.codec;\n\nimport java.io.IOException;\n\nimport sh.pancake.serdemc.network.io.PacketDataReader;", "\nimport sh.pancake.serdemc.network.io.PacketDataReader;\n\n@FunctionalInterface\npublic interface MetadataValueReader<T> {\n    T read(PacketDataReader reader) throws IOException;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/metadata/codec/MetadataCodec.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.metadata.codec;\n\nimport java.io.IOException;\nimport java.util.UUID;\n", "import java.util.UUID;\n\nimport javax.annotation.Nullable;\n\nimport sh.pancake.serdemc.data.BlockPosition;\nimport sh.pancake.serdemc.data.GlobalBlockPosition;\nimport sh.pancake.serdemc.data.ItemStack;\nimport sh.pancake.serdemc.data.Quaternion;\nimport sh.pancake.serdemc.data.Vector3;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;", "import sh.pancake.serdemc.data.Vector3;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\nimport sh.pancake.serdemc.data.particle.Particle;\nimport sh.pancake.serdemc.data.particle.codec.ParticleDataCodec;\nimport sh.pancake.serdemc.network.io.PacketDataReader;\nimport sh.pancake.serdemc.network.io.PacketDataWriter;\n\n@SuppressWarnings(\"null\")\npublic abstract class MetadataCodec<T> implements MetadataValueReader<T>, MetadataValueWriter<T> {\n    public static final MetadataCodec<Byte> BYTE = create(PacketDataReader::readByte, PacketDataWriter::writeByte);\n    public static final MetadataCodec<Integer> VAR_INT = create(PacketDataReader::readVarInt, PacketDataWriter::writeVarInt);", "public abstract class MetadataCodec<T> implements MetadataValueReader<T>, MetadataValueWriter<T> {\n    public static final MetadataCodec<Byte> BYTE = create(PacketDataReader::readByte, PacketDataWriter::writeByte);\n    public static final MetadataCodec<Integer> VAR_INT = create(PacketDataReader::readVarInt, PacketDataWriter::writeVarInt);\n    public static final MetadataCodec<Long> VAR_LONG = create(PacketDataReader::readVarLong, PacketDataWriter::writeVarLong);\n    public static final MetadataCodec<Float> FLOAT = create(PacketDataReader::readFloat, PacketDataWriter::writeFloat);\n    public static final MetadataCodec<String> STRING = create(PacketDataReader::readString, PacketDataWriter::writeString);\n    public static final MetadataCodec<String> CHAT = create(PacketDataReader::readChat, PacketDataWriter::writeChat);\n    public static final MetadataCodec<ItemStack> SLOT = create(PacketDataReader::readSlot, PacketDataWriter::writeSlot);\n    public static final MetadataCodec<Boolean> BOOLEAN = create(PacketDataReader::readBoolean, PacketDataWriter::writeBoolean);\n    public static final MetadataCodec<BlockPosition> POSITION = create(PacketDataReader::readPosition, PacketDataWriter::writePosition);\n    public static final MetadataCodec<UUID> UUID = create(PacketDataReader::readUUID, PacketDataWriter::writeUUID);", "    public static final MetadataCodec<Boolean> BOOLEAN = create(PacketDataReader::readBoolean, PacketDataWriter::writeBoolean);\n    public static final MetadataCodec<BlockPosition> POSITION = create(PacketDataReader::readPosition, PacketDataWriter::writePosition);\n    public static final MetadataCodec<UUID> UUID = create(PacketDataReader::readUUID, PacketDataWriter::writeUUID);\n    public static final MetadataCodec<NbtRootCompound> NBT = create(PacketDataReader::readNbt, PacketDataWriter::writeNbt);\n    public static final MetadataCodec<Particle> PARTICLE = new MetadataCodec<>() {\n        @Override\n        public Particle read(PacketDataReader reader) throws IOException {\n            int type = reader.readVarInt();\n            Object data = null;\n\n            ParticleDataCodec<?> codec = ParticleDataCodec.getCodec(type);", "            if (codec != null) {\n                data = codec.read(reader);\n            }\n\n            return new Particle(type, data);\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        public void write(PacketDataWriter writer, Particle value) throws IOException {\n            int type = value.getId();\n\n            writer.writeVarInt(type);\n\n            ParticleDataCodec<Object> codec = (ParticleDataCodec<Object>) ParticleDataCodec.getCodec(type);", "        public void write(PacketDataWriter writer, Particle value) throws IOException {\n            int type = value.getId();\n\n            writer.writeVarInt(type);\n\n            ParticleDataCodec<Object> codec = (ParticleDataCodec<Object>) ParticleDataCodec.getCodec(type);\n            if (codec == null) {\n                return;\n            }\n\n            codec.write(writer, value);\n        }\n    };", "    public static final MetadataCodec<GlobalBlockPosition> GLOBAL_POSITION = new MetadataCodec<>() {\n        @Override\n        public GlobalBlockPosition read(PacketDataReader reader) throws IOException {\n            return new GlobalBlockPosition(reader.readIdentifier(), reader.readPosition());\n        }\n\n        public void write(PacketDataWriter writer, GlobalBlockPosition value) throws IOException {\n            writer.writeIdentifier(value.getDimension());\n            writer.writePosition(value.getPosition());\n        }\n    };", "    public static final MetadataCodec<Vector3> VECTOR = new MetadataCodec<>() {\n        @Override\n        public Vector3 read(PacketDataReader reader) throws IOException {\n            return new Vector3(\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat()\n            );\n        }\n\n        public void write(PacketDataWriter writer, Vector3 value) throws IOException {\n            writer.writeFloat(value.getX());\n            writer.writeFloat(value.getY());\n            writer.writeFloat(value.getZ());\n        }\n    };", "        public void write(PacketDataWriter writer, Vector3 value) throws IOException {\n            writer.writeFloat(value.getX());\n            writer.writeFloat(value.getY());\n            writer.writeFloat(value.getZ());\n        }\n    };\n    public static final MetadataCodec<Quaternion> QUATERNION = new MetadataCodec<>() {\n        @Override\n        public Quaternion read(PacketDataReader reader) throws IOException {\n            return new Quaternion(\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat()\n            );\n        }\n", "        public Quaternion read(PacketDataReader reader) throws IOException {\n            return new Quaternion(\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat()\n            );\n        }\n\n        public void write(PacketDataWriter writer, Quaternion value) throws IOException {\n            writer.writeFloat(value.getX());\n            writer.writeFloat(value.getY());\n            writer.writeFloat(value.getZ());\n            writer.writeFloat(value.getW());\n        }\n    };\n\n    private static final MetadataCodec<?>[] MAP = {\n        BYTE, // 0 byte\n        VAR_INT, // 1 varint\n        VAR_LONG, // 2 varlong\n        FLOAT, // 3 float\n        STRING, // 4 string\n        CHAT, // 5 chat\n        optional(CHAT), // 6 opt chat\n        SLOT, // 7 slot\n        BOOLEAN, // 8 boolean\n        VECTOR, // 9 rotation\n        POSITION, // 10 position\n        optional(POSITION), // 11 opt position\n        VAR_INT, // 12 direction\n        optional(UUID), // 13 opt uuid\n        VAR_INT, // 14 block id\n        VAR_INT, // 15 opt block id\n        NBT, // 16 nbt\n        PARTICLE, // 17 particle\n        VAR_INT, // 18 villager data\n        create(\n            (reader) -> {\n                int value = reader.readVarInt();", "        public void write(PacketDataWriter writer, Quaternion value) throws IOException {\n            writer.writeFloat(value.getX());\n            writer.writeFloat(value.getY());\n            writer.writeFloat(value.getZ());\n            writer.writeFloat(value.getW());\n        }\n    };\n\n    private static final MetadataCodec<?>[] MAP = {\n        BYTE, // 0 byte\n        VAR_INT, // 1 varint\n        VAR_LONG, // 2 varlong\n        FLOAT, // 3 float\n        STRING, // 4 string\n        CHAT, // 5 chat\n        optional(CHAT), // 6 opt chat\n        SLOT, // 7 slot\n        BOOLEAN, // 8 boolean\n        VECTOR, // 9 rotation\n        POSITION, // 10 position\n        optional(POSITION), // 11 opt position\n        VAR_INT, // 12 direction\n        optional(UUID), // 13 opt uuid\n        VAR_INT, // 14 block id\n        VAR_INT, // 15 opt block id\n        NBT, // 16 nbt\n        PARTICLE, // 17 particle\n        VAR_INT, // 18 villager data\n        create(\n            (reader) -> {\n                int value = reader.readVarInt();", "                if (value == 0) return null;\n                return value - 1;\n            },\n            (writer, value) -> {\n                if (value == null) {\n                    writer.writeVarInt(0);\n                    return;\n                }\n\n                writer.writeVarInt(value + 1);\n            }\n        ), // 19 opt varint\n        VAR_INT, // 20 pose\n        VAR_INT, // 21 cat variant\n        VAR_INT, // 22 frog variant\n        optional(GLOBAL_POSITION), // 23 opt global pos\n        VAR_INT, // 24 painting variant\n        VAR_INT, // 25 sniffer state\n        VECTOR, // 26 vector\n        QUATERNION, // 27 quaternion\n    };\n\n    public static @Nullable MetadataCodec<?> getCodec(int type) {", "        if (type < 0 || type >= MAP.length) {\n            return null;\n        }\n\n        return MAP[type];\n    }\n\n    public static <Type> MetadataCodec<Type> create(\n        final MetadataValueReader<Type> read,\n        final MetadataValueWriter<Type> write\n    ) {\n        return new MetadataCodec<>() {\n            @Override", "            public Type read(PacketDataReader reader) throws IOException {\n                return read.read(reader);\n            }\n\n            @Override\n            public void write(PacketDataWriter writer, Type value) throws IOException {\n                write.write(writer, value);\n            }\n        };\n    }\n\n    public static <Type> MetadataCodec<Type> optional(final MetadataCodec<Type> codec) {\n        return new MetadataCodec<>() {\n            @Override\n            public @Nullable Type read(PacketDataReader reader) throws IOException {", "                if (!reader.readBoolean()) {\n                    return null;\n                }\n\n                return codec.read(reader);\n            }\n\n            @Override\n            public void write(PacketDataWriter writer, @Nullable Type value) throws IOException {\n                if (value == null) {\n                    writer.writeBoolean(false);\n                    return;\n                }\n\n                writer.writeBoolean(true);\n                codec.write(writer, value);\n            }\n        };\n    }\n}\n", "            public void write(PacketDataWriter writer, @Nullable Type value) throws IOException {\n                if (value == null) {\n                    writer.writeBoolean(false);\n                    return;\n                }\n\n                writer.writeBoolean(true);\n                codec.write(writer, value);\n            }\n        };\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/metadata/codec/MetadataValueWriter.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.metadata.codec;\n\nimport java.io.IOException;\n\nimport sh.pancake.serdemc.network.io.PacketDataWriter;", "\nimport sh.pancake.serdemc.network.io.PacketDataWriter;\n\n@FunctionalInterface\npublic interface MetadataValueWriter<T> {\n    void write(PacketDataWriter writer, T value) throws IOException;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/NbtTagVisitor.java", "chunked_list": ["package sh.pancake.serdemc.data.nbt;\n\npublic interface NbtTagVisitor {\n    void visitByte(byte value);\n\n    void visitShort(short value);\n\n    void visitInt(int value);\n\n    void visitLong(long value);\n\n    void visitFloat(float value);\n\n    void visitDouble(double value);\n\n    void visitByteArray(byte[] value);\n\n    void visitString(String value);\n\n    void visitList(NbtTagList<?> value);\n\n    void visitCompound(NbtTagCompound value);\n\n    void visitIntArray(int[] value);\n\n    void visitLongArray(long[] value);\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/NbtTagValue.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.nbt;\n\nimport java.util.Objects;\n\npublic abstract class NbtTagValue<T> {\n    public static final byte TAG_END = 0;", "\npublic abstract class NbtTagValue<T> {\n    public static final byte TAG_END = 0;\n    public static final byte TAG_BYTE = 1;\n    public static final byte TAG_SHORT = 2;\n    public static final byte TAG_INT = 3;\n    public static final byte TAG_LONG = 4;\n    public static final byte TAG_FLOAT = 5;\n    public static final byte TAG_DOUBLE = 6;\n    public static final byte TAG_BYTE_ARRAY = 7;\n    public static final byte TAG_STRING = 8;", "    public static final byte TAG_DOUBLE = 6;\n    public static final byte TAG_BYTE_ARRAY = 7;\n    public static final byte TAG_STRING = 8;\n    public static final byte TAG_LIST = 9;\n    public static final byte TAG_COMPOUND = 10;\n    public static final byte TAG_INT_ARRAY = 11;\n    public static final byte TAG_LONG_ARRAY = 12;\n\n    public static NbtTagValue<Byte> fromByte(byte value) {\n        return new NbtTagValue<>() {\n            @Override", "    public static NbtTagValue<Byte> fromByte(byte value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_BYTE;\n            }\n\n            @Override\n            public Byte getValue() {\n                return value;\n            }\n\n            @Override", "            public Byte getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitByte(value);\n            }\n        };\n    }\n", "    public static NbtTagValue<Short> fromShort(short value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_SHORT;\n            }\n\n            @Override\n            public Short getValue() {\n                return value;\n            }\n\n            @Override", "            public Short getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitShort(value);\n            }\n        };\n    }\n", "    public static NbtTagValue<Integer> fromInt(int value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_INT;\n            }\n\n            @Override\n            public Integer getValue() {\n                return value;\n            }\n\n            @Override", "            public Integer getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitInt(value);\n            }\n        };\n    }\n", "    public static NbtTagValue<Long> fromLong(long value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_LONG;\n            }\n\n            @Override\n            public Long getValue() {\n                return value;\n            }\n\n            @Override", "            public Long getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitLong(value);\n            }\n        };\n    }\n", "    public static NbtTagValue<Float> fromFloat(float value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_FLOAT;\n            }\n\n            @Override\n            public Float getValue() {\n                return value;\n            }\n\n            @Override", "            public Float getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitFloat(value);\n            }\n        };\n    }\n", "    public static NbtTagValue<Double> fromDouble(double value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_DOUBLE;\n            }\n\n            @Override\n            public Double getValue() {\n                return value;\n            }\n\n            @Override", "            public Double getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitDouble(value);\n            }\n        };\n    }\n", "    public static NbtTagValue<byte[]> fromByteArray(byte[] value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_BYTE_ARRAY;\n            }\n\n            @Override\n            public byte[] getValue() {\n                return value;\n            }\n\n            @Override", "            public void visit(NbtTagVisitor visitor) {\n                visitor.visitByteArray(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<String> fromString(String value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_STRING;\n            }\n\n            @Override", "            public byte getType() {\n                return TAG_STRING;\n            }\n\n            @Override\n            public String getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitString(value);\n            }\n        };\n    }\n\n    public static <Item> NbtTagValue<NbtTagList<Item>> fromList(NbtTagList<Item> value) {\n        return new NbtTagValue<>() {\n            @Override", "            public void visit(NbtTagVisitor visitor) {\n                visitor.visitString(value);\n            }\n        };\n    }\n\n    public static <Item> NbtTagValue<NbtTagList<Item>> fromList(NbtTagList<Item> value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_LIST;\n            }\n\n            @Override\n            public NbtTagList<Item> getValue() {\n                return value;\n            }\n\n            @Override", "            public byte getType() {\n                return TAG_LIST;\n            }\n\n            @Override\n            public NbtTagList<Item> getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitList(value);\n            }\n        };\n    }\n", "            public void visit(NbtTagVisitor visitor) {\n                visitor.visitList(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<NbtTagCompound> fromCompound(NbtTagCompound value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_COMPOUND;\n            }\n\n            @Override", "            public byte getType() {\n                return TAG_COMPOUND;\n            }\n\n            @Override\n            public NbtTagCompound getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitCompound(value);\n            }\n        };\n    }\n", "            public void visit(NbtTagVisitor visitor) {\n                visitor.visitCompound(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<int[]> fromIntArray(int[] value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_INT_ARRAY;\n            }\n\n            @Override\n            public int[] getValue() {\n                return value;\n            }\n\n            @Override", "            public byte getType() {\n                return TAG_INT_ARRAY;\n            }\n\n            @Override\n            public int[] getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitIntArray(value);\n            }\n        };\n    }\n", "            public void visit(NbtTagVisitor visitor) {\n                visitor.visitIntArray(value);\n            }\n        };\n    }\n\n    public static NbtTagValue<long[]> fromLongArray(long[] value) {\n        return new NbtTagValue<>() {\n            @Override\n            public byte getType() {\n                return TAG_LONG_ARRAY;\n            }\n\n            @Override\n            public long[] getValue() {\n                return value;\n            }\n\n            @Override", "            public byte getType() {\n                return TAG_LONG_ARRAY;\n            }\n\n            @Override\n            public long[] getValue() {\n                return value;\n            }\n\n            @Override\n            public void visit(NbtTagVisitor visitor) {\n                visitor.visitLongArray(value);\n            }\n        };\n    }\n\n    private NbtTagValue() {}\n    ", "            public void visit(NbtTagVisitor visitor) {\n                visitor.visitLongArray(value);\n            }\n        };\n    }\n\n    private NbtTagValue() {}\n    \n    public abstract byte getType();\n    \n    public abstract T getValue();\n", "    public abstract byte getType();\n    \n    public abstract T getValue();\n\n    public abstract void visit(NbtTagVisitor visitor);\n\n    @Override\n    public boolean equals(Object arg0) {\n        if (!(arg0 instanceof NbtTagValue)) {\n            return false;\n        }\n\n        NbtTagValue<?> other = (NbtTagValue<?>) arg0;\n        return getType() == other.getType() && getValue().equals(other.getValue());\n    }\n\n    @Override", "        if (!(arg0 instanceof NbtTagValue)) {\n            return false;\n        }\n\n        NbtTagValue<?> other = (NbtTagValue<?>) arg0;\n        return getType() == other.getType() && getValue().equals(other.getValue());\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(getValue(), getType());\n    }\n}\n", "    public int hashCode() {\n        return Objects.hash(getValue(), getType());\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/NbtTagList.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.nbt;\n\nimport java.util.AbstractList;\nimport java.util.ArrayList;\n", "import java.util.ArrayList;\n\nimport lombok.Getter;\n\npublic class NbtTagList<T> extends AbstractList<NbtTagValue<T>> {\n    @Getter\n    private final byte type;\n\n    private final ArrayList<NbtTagValue<T>> list;\n\n    public NbtTagList(byte type) {\n        this.type = type;\n        this.list = new ArrayList<>();\n    }\n\n    public NbtTagList(byte type, int length) {\n        this.type = type;\n        this.list = new ArrayList<>(length);\n    }\n\n    @Override", "    public void add(int arg0, NbtTagValue<T> arg1) {\n        list.add(arg0, arg1);\n    }\n\n    @Override\n    public NbtTagValue<T> set(int arg0, NbtTagValue<T> arg1) {\n        return list.set(arg0, arg1);\n    }\n\n    @Override\n    public NbtTagValue<T> remove(int arg0) {\n        return list.remove(arg0);\n    }\n\n    @Override", "    public int size() {\n        return list.size();\n    }\n\n    @Override\n    public NbtTagValue<T> get(int arg0) {\n        return list.get(arg0);\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/NbtRootCompound.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.nbt;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@Data\n@AllArgsConstructor\npublic class NbtRootCompound {\n    private final String name;\n    private final NbtTagCompound compound;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/NbtTagCompound.java", "chunked_list": ["/*\n * Created on Tue Mar 28 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.nbt;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;", "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class NbtTagCompound implements Map<String, NbtTagValue<?>> {\n    private final HashMap<String, NbtTagValue<?>> map;\n\n    public NbtTagCompound() {\n        this.map = new HashMap<>();\n    }\n\n    public NbtTagCompound(int capacity) {\n        this.map = new HashMap<>(capacity);\n    }\n\n    @Override\n    public Set<Entry<String, NbtTagValue<?>>> entrySet() {\n        return map.entrySet();\n    }\n\n    @Override", "    public void clear() {\n        map.clear();\n    }\n\n    @Override\n    public boolean containsKey(Object arg0) {\n        return map.containsKey(arg0);\n    }\n\n    @Override\n    public boolean containsValue(Object arg0) {\n        return map.containsValue(arg0);\n    }\n\n    @Override\n    public NbtTagValue<?> get(Object arg0) {\n        return map.get(arg0);\n    }\n\n    @Override", "    public boolean containsValue(Object arg0) {\n        return map.containsValue(arg0);\n    }\n\n    @Override\n    public NbtTagValue<?> get(Object arg0) {\n        return map.get(arg0);\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return map.keySet();\n    }\n\n    @Override\n    public NbtTagValue<?> put(String arg0, NbtTagValue<?> arg1) {\n        return map.put(arg0, arg1);\n    }\n\n    @Override", "    public boolean isEmpty() {\n        return map.isEmpty();\n    }\n\n    @Override\n    public Set<String> keySet() {\n        return map.keySet();\n    }\n\n    @Override\n    public NbtTagValue<?> put(String arg0, NbtTagValue<?> arg1) {\n        return map.put(arg0, arg1);\n    }\n\n    @Override", "    public void putAll(Map<? extends String, ? extends NbtTagValue<?>> arg0) {\n        map.putAll(arg0);\n    }\n\n    @Override\n    public NbtTagValue<?> remove(Object arg0) {\n        return map.remove(arg0);\n    }\n\n    @Override\n    public int size() {\n        return map.size();\n    }\n\n    @Override\n    public Collection<NbtTagValue<?>> values() {\n        return map.values();\n    }\n}\n", "    public int size() {\n        return map.size();\n    }\n\n    @Override\n    public Collection<NbtTagValue<?>> values() {\n        return map.values();\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/io/NbtWriter.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.nbt.io;\n\nimport java.io.IOException;\nimport java.util.Map;\n", "import java.util.Map;\n\nimport javax.annotation.Nullable;\n\nimport lombok.AllArgsConstructor;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\nimport sh.pancake.serdemc.data.nbt.NbtTagList;\nimport sh.pancake.serdemc.data.nbt.NbtTagValue;\nimport sh.pancake.serdemc.io.DataWriter;\n", "import sh.pancake.serdemc.io.DataWriter;\n\n@AllArgsConstructor\npublic class NbtWriter {\n    private final DataWriter writer;\n\n    public void writeByte(byte value) throws IOException {\n        writer.writeByte(value);\n    }\n\n    public void writeShort(short value) throws IOException {\n        writer.writeShort(value);\n    }\n", "    public void writeShort(short value) throws IOException {\n        writer.writeShort(value);\n    }\n\n    public void writeInt(int value) throws IOException {\n        writer.writeInt(value);\n    }\n\n    public void writeLong(long value) throws IOException {\n        writer.writeLong(value);\n    }\n", "    public void writeLong(long value) throws IOException {\n        writer.writeLong(value);\n    }\n\n    public void writeFloat(float value) throws IOException {\n        writer.writeFloat(value);\n    }\n\n    public void writeDouble(double value) throws IOException {\n        writer.writeDouble(value);\n    }\n", "    public void writeDouble(double value) throws IOException {\n        writer.writeDouble(value);\n    }\n\n    public void writeByteArray(byte[] value) throws IOException {\n        writer.writeInt(value.length);\n        writer.writeBytes(value);\n    }\n\n    public void writeString(String value) throws IOException {\n        writer.writeShortUnsigned(value.length());\n        writer.writeBytes(value.getBytes());\n    }\n\n    public <Item> void writeList(NbtTagList<Item> list) throws IOException {\n        writer.writeByte(list.getType());\n        writer.writeInt(list.size());", "    public void writeString(String value) throws IOException {\n        writer.writeShortUnsigned(value.length());\n        writer.writeBytes(value.getBytes());\n    }\n\n    public <Item> void writeList(NbtTagList<Item> list) throws IOException {\n        writer.writeByte(list.getType());\n        writer.writeInt(list.size());\n        for (NbtTagValue<?> tag : list) {\n            writeTag(tag);\n        }\n    }\n", "        for (NbtTagValue<?> tag : list) {\n            writeTag(tag);\n        }\n    }\n\n    public void writeCompound(Map<String, NbtTagValue<?>> compound) throws IOException {\n        for (String name : compound.keySet()) {\n            NbtTagValue<?> tag = compound.get(name);\n\n            writer.writeByte(tag.getType());\n            writeString(name);\n            writeTag(tag);\n        }\n        writer.writeByte(NbtTagValue.TAG_END);\n    }\n", "    public void writeRootCompoundOptional(@Nullable NbtRootCompound compound) throws IOException {\n        if (compound == null) {\n            writeByte(NbtTagValue.TAG_END);\n            return;\n        }\n\n        writeRootCompound(compound);\n    }\n    public void writeRootCompound(NbtRootCompound compound) throws IOException {\n        writeByte(NbtTagValue.TAG_COMPOUND);\n        writeString(compound.getName());\n        writeCompound(compound.getCompound());\n    }\n", "    public void writeRootCompound(NbtRootCompound compound) throws IOException {\n        writeByte(NbtTagValue.TAG_COMPOUND);\n        writeString(compound.getName());\n        writeCompound(compound.getCompound());\n    }\n\n    public void writeIntArray(int[] value) throws IOException {\n        int length = value.length;\n\n        writer.writeInt(length);\n        for (int i = 0; i < length; i++) {\n            writeInt(value[i]);\n        }\n    }\n", "        for (int i = 0; i < length; i++) {\n            writeInt(value[i]);\n        }\n    }\n\n    public void writeLongArray(long[] value) throws IOException {\n        int length = value.length;\n\n        writer.writeInt(length);\n        for (int i = 0; i < length; i++) {\n            writeLong(value[i]);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")", "        for (int i = 0; i < length; i++) {\n            writeLong(value[i]);\n        }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public void writeTag(NbtTagValue<?> tag) throws IOException {\n        byte type = tag.getType();\n        Object value = tag.getValue();\n\n        switch (type) {\n            case NbtTagValue.TAG_BYTE: {\n                writeByte((byte) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_SHORT: {\n                writeShort((short) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_INT: {\n                writeInt((int) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_LONG: {\n                writeLong((long) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_FLOAT: {\n                writeFloat((float) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_DOUBLE: {\n                writeDouble((double) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_BYTE_ARRAY: {\n                writeByteArray((byte[]) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_STRING: {\n                writeString((String) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_LIST: {\n                writeList((NbtTagList<?>) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_COMPOUND: {\n                writeCompound((Map<String, NbtTagValue<?>>) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_INT_ARRAY: {\n                writeIntArray((int[]) value);\n                return;\n            }\n\n            case NbtTagValue.TAG_LONG_ARRAY: {\n                writeLongArray((long[]) value);\n                return;\n            }\n\n            default: throw new RuntimeException(\"Unknown NBT type: \" + type);\n        }\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/nbt/io/NbtReader.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.nbt.io;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\n", "import java.nio.charset.StandardCharsets;\n\nimport javax.annotation.Nullable;\n\nimport lombok.AllArgsConstructor;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\nimport sh.pancake.serdemc.data.nbt.NbtTagCompound;\nimport sh.pancake.serdemc.data.nbt.NbtTagList;\nimport sh.pancake.serdemc.data.nbt.NbtTagValue;\nimport sh.pancake.serdemc.io.DataReader;", "import sh.pancake.serdemc.data.nbt.NbtTagValue;\nimport sh.pancake.serdemc.io.DataReader;\n\n@AllArgsConstructor\npublic class NbtReader {\n    private final DataReader reader;\n\n    public byte readByte() throws IOException {\n        return reader.readByte();\n    }\n", "    public short readShort() throws IOException {\n        return reader.readShort();\n    }\n\n    public int readInt() throws IOException {\n        return reader.readInt();\n    }\n\n    public long readLong() throws IOException {\n        return reader.readLong();\n    }\n", "    public long readLong() throws IOException {\n        return reader.readLong();\n    }\n\n    public float readFloat() throws IOException {\n        return reader.readFloat();\n    }\n\n    public double readDouble() throws IOException {\n        return reader.readDouble();\n    }\n\n    public byte[] readByteArray() throws IOException {\n        int length = reader.readInt();\n        byte[] data = new byte[length];\n\n        reader.readBytes(data);\n        return data;\n    }\n", "    public double readDouble() throws IOException {\n        return reader.readDouble();\n    }\n\n    public byte[] readByteArray() throws IOException {\n        int length = reader.readInt();\n        byte[] data = new byte[length];\n\n        reader.readBytes(data);\n        return data;\n    }\n", "    public String readString() throws IOException {\n        int length = reader.readShort();\n        byte[] data = new byte[length];\n        reader.readBytes(data);\n\n        return new String(data, StandardCharsets.UTF_8);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public NbtTagList<?> readList() throws IOException {\n        byte type = reader.readByte();\n        int length = reader.readInt();\n\n        NbtTagList<Object> list = new NbtTagList<>(type, length);", "        for (int i = 0; i < length; i++) {\n            list.add((NbtTagValue<Object>) readTag(type));\n        }\n\n        return list;\n    }\n\n    public NbtTagCompound readCompound() throws IOException {\n        NbtTagCompound compound = new NbtTagCompound();\n\n        for (byte type; (type = reader.readByte()) != NbtTagValue.TAG_END;) {\n            compound.put(readString(), readTag(type));\n        }\n\n        return compound;\n    }\n\n    public @Nullable NbtRootCompound readRootCompoundOptional() throws IOException {\n        byte type = reader.readByte();", "        for (byte type; (type = reader.readByte()) != NbtTagValue.TAG_END;) {\n            compound.put(readString(), readTag(type));\n        }\n\n        return compound;\n    }\n\n    public @Nullable NbtRootCompound readRootCompoundOptional() throws IOException {\n        byte type = reader.readByte();\n        if (type == NbtTagValue.TAG_END) return null;\n\n        return readRootCompoundInner(type);\n    }", "        if (type == NbtTagValue.TAG_END) return null;\n\n        return readRootCompoundInner(type);\n    }\n    public NbtRootCompound readRootCompound() throws IOException {\n        return readRootCompoundInner(reader.readByte());\n    }\n\n    private NbtRootCompound readRootCompoundInner(byte type) throws IOException {\n        if (type != NbtTagValue.TAG_COMPOUND) {\n            throw new RuntimeException(\"Root is not TAG_Compound type\");\n        }\n\n        return new NbtRootCompound(readString(), readCompound());\n    }\n\n    public int[] readIntArray() throws IOException {\n        int length = reader.readInt();\n        int[] value = new int[length];\n", "        if (type != NbtTagValue.TAG_COMPOUND) {\n            throw new RuntimeException(\"Root is not TAG_Compound type\");\n        }\n\n        return new NbtRootCompound(readString(), readCompound());\n    }\n\n    public int[] readIntArray() throws IOException {\n        int length = reader.readInt();\n        int[] value = new int[length];\n", "        for (int i = 0; i < length; i++) {\n            value[i] = reader.readInt();\n        }\n        return value;\n    }\n\n    public long[] readLongArray() throws IOException {\n        int length = reader.readInt();\n        long[] value = new long[length];\n\n        for (int i = 0; i < length; i++) {\n            value[i] = reader.readLong();\n        }\n        return value;\n    }\n\n    public NbtTagValue<?> readTag(byte type) throws IOException {\n        switch (type) {\n            case NbtTagValue.TAG_BYTE: return NbtTagValue.fromByte(readByte());\n\n            case NbtTagValue.TAG_SHORT: return NbtTagValue.fromShort(readShort());\n\n            case NbtTagValue.TAG_INT: return NbtTagValue.fromInt(readInt());\n\n            case NbtTagValue.TAG_LONG: return NbtTagValue.fromLong(readLong());\n\n            case NbtTagValue.TAG_FLOAT: return NbtTagValue.fromFloat(readFloat());\n\n            case NbtTagValue.TAG_DOUBLE: return NbtTagValue.fromDouble(readDouble());\n\n            case NbtTagValue.TAG_BYTE_ARRAY: return NbtTagValue.fromByteArray(readByteArray());\n\n            case NbtTagValue.TAG_STRING: return NbtTagValue.fromString(readString());\n\n            case NbtTagValue.TAG_LIST: return NbtTagValue.fromList(readList());\n\n            case NbtTagValue.TAG_COMPOUND: return NbtTagValue.fromCompound(readCompound());\n\n            case NbtTagValue.TAG_INT_ARRAY: return NbtTagValue.fromIntArray(readIntArray());\n\n            case NbtTagValue.TAG_LONG_ARRAY: return NbtTagValue.fromLongArray(readLongArray());\n\n            default: throw new RuntimeException(\"Unknown NBT type: \" + type);\n        }\n    }\n}\n", "        for (int i = 0; i < length; i++) {\n            value[i] = reader.readLong();\n        }\n        return value;\n    }\n\n    public NbtTagValue<?> readTag(byte type) throws IOException {\n        switch (type) {\n            case NbtTagValue.TAG_BYTE: return NbtTagValue.fromByte(readByte());\n\n            case NbtTagValue.TAG_SHORT: return NbtTagValue.fromShort(readShort());\n\n            case NbtTagValue.TAG_INT: return NbtTagValue.fromInt(readInt());\n\n            case NbtTagValue.TAG_LONG: return NbtTagValue.fromLong(readLong());\n\n            case NbtTagValue.TAG_FLOAT: return NbtTagValue.fromFloat(readFloat());\n\n            case NbtTagValue.TAG_DOUBLE: return NbtTagValue.fromDouble(readDouble());\n\n            case NbtTagValue.TAG_BYTE_ARRAY: return NbtTagValue.fromByteArray(readByteArray());\n\n            case NbtTagValue.TAG_STRING: return NbtTagValue.fromString(readString());\n\n            case NbtTagValue.TAG_LIST: return NbtTagValue.fromList(readList());\n\n            case NbtTagValue.TAG_COMPOUND: return NbtTagValue.fromCompound(readCompound());\n\n            case NbtTagValue.TAG_INT_ARRAY: return NbtTagValue.fromIntArray(readIntArray());\n\n            case NbtTagValue.TAG_LONG_ARRAY: return NbtTagValue.fromLongArray(readLongArray());\n\n            default: throw new RuntimeException(\"Unknown NBT type: \" + type);\n        }\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/Particle.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle;\n\nimport javax.annotation.Nullable;\n\nimport lombok.AllArgsConstructor;", "\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class Particle {\n    private int id;\n    private @Nullable Object data;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/BlockParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class BlockParticleData {\n    private int blockId;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/DustParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class DustParticleData {\n    private float red;\n    private float green;\n    private float blue;\n    private float scale;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/SchulkChargeParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class SchulkChargeParticleData {\n    private float roll;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/VibrationParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport sh.pancake.serdemc.data.BlockPosition;", "import lombok.Data;\nimport sh.pancake.serdemc.data.BlockPosition;\n\n@AllArgsConstructor\n@Data\npublic class VibrationParticleData {\n    private String type;\n    \n    private BlockPosition position;\n    \n    private int entityId;\n    private float entityEyeHeight;\n\n    private int ticks;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/ShriekParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class ShriekParticleData {\n    private int delay;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/TransitionParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n", "import lombok.Data;\n\n@AllArgsConstructor\n@Data\npublic class TransitionParticleData {\n    private float fromRed;\n    private float fromGreen;\n    private float fromBlue;\n\n    private float scale;\n\n    private float toRed;\n    private float toGreen;\n    private float toBlue;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/data/ItemParticleData.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.data;\n\nimport javax.annotation.Nullable;\n\nimport lombok.AllArgsConstructor;", "\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport sh.pancake.serdemc.data.ItemStack;\n\n@AllArgsConstructor\n@Data\npublic class ItemParticleData {\n    @Nullable\n    private ItemStack item;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/codec/ParticleDataWriter.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.codec;\n\nimport java.io.IOException;\n\nimport sh.pancake.serdemc.network.io.PacketDataWriter;", "\nimport sh.pancake.serdemc.network.io.PacketDataWriter;\n\n@FunctionalInterface\npublic interface ParticleDataWriter<T> {\n    void write(PacketDataWriter writer, T value) throws IOException;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/codec/ParticleDataCodec.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.codec;\n\nimport java.io.IOException;\n\nimport javax.annotation.Nullable;", "\nimport javax.annotation.Nullable;\n\nimport sh.pancake.serdemc.data.particle.data.BlockParticleData;\nimport sh.pancake.serdemc.data.particle.data.DustParticleData;\nimport sh.pancake.serdemc.data.particle.data.ItemParticleData;\nimport sh.pancake.serdemc.data.particle.data.SchulkChargeParticleData;\nimport sh.pancake.serdemc.data.particle.data.ShriekParticleData;\nimport sh.pancake.serdemc.data.particle.data.TransitionParticleData;\nimport sh.pancake.serdemc.data.particle.data.VibrationParticleData;", "import sh.pancake.serdemc.data.particle.data.TransitionParticleData;\nimport sh.pancake.serdemc.data.particle.data.VibrationParticleData;\nimport sh.pancake.serdemc.network.io.PacketDataReader;\nimport sh.pancake.serdemc.network.io.PacketDataWriter;\n\npublic abstract class ParticleDataCodec<T> implements ParticleDataReader<T>, ParticleDataWriter<T> {\n    public static final ParticleDataCodec<BlockParticleData> BLOCK = new ParticleDataCodec<>() {\n        @Override\n        public BlockParticleData read(PacketDataReader reader) throws IOException {\n            return new BlockParticleData(reader.readVarInt());\n        }\n\n        @Override", "        public BlockParticleData read(PacketDataReader reader) throws IOException {\n            return new BlockParticleData(reader.readVarInt());\n        }\n\n        @Override\n        public void write(PacketDataWriter writer, BlockParticleData value) throws IOException {\n            writer.writeVarInt(value.getBlockId());\n        }\n    };\n\n    public static final ParticleDataCodec<DustParticleData> DUST = new ParticleDataCodec<>() {\n        @Override", "    public static final ParticleDataCodec<DustParticleData> DUST = new ParticleDataCodec<>() {\n        @Override\n        public DustParticleData read(PacketDataReader reader) throws IOException {\n            return new DustParticleData(\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat()\n            );\n        }\n\n        @Override", "        public void write(PacketDataWriter writer, DustParticleData value) throws IOException {\n            writer.writeFloat(value.getRed());\n            writer.writeFloat(value.getGreen());\n            writer.writeFloat(value.getBlue());\n            writer.writeFloat(value.getScale());\n        }\n    };\n\n    public static final ParticleDataCodec<TransitionParticleData> TRANSITION = new ParticleDataCodec<>() {\n        @Override\n        public TransitionParticleData read(PacketDataReader reader) throws IOException {\n            return new TransitionParticleData(\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat()\n            );\n        }\n\n        @Override", "    public static final ParticleDataCodec<TransitionParticleData> TRANSITION = new ParticleDataCodec<>() {\n        @Override\n        public TransitionParticleData read(PacketDataReader reader) throws IOException {\n            return new TransitionParticleData(\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat(),\n                reader.readFloat()\n            );\n        }\n\n        @Override", "        public void write(PacketDataWriter writer, TransitionParticleData value) throws IOException {\n            writer.writeFloat(value.getFromRed());\n            writer.writeFloat(value.getFromGreen());\n            writer.writeFloat(value.getFromBlue());\n            writer.writeFloat(value.getScale());\n            writer.writeFloat(value.getToRed());\n            writer.writeFloat(value.getToGreen());\n            writer.writeFloat(value.getToBlue());\n        }\n    };\n", "    public static final ParticleDataCodec<SchulkChargeParticleData> SCHULK_CHARGE = new ParticleDataCodec<>() {\n        @Override\n        public SchulkChargeParticleData read(PacketDataReader reader) throws IOException {\n            return new SchulkChargeParticleData(reader.readFloat());\n        }\n\n        @Override\n        public void write(PacketDataWriter writer, SchulkChargeParticleData value) throws IOException {\n            writer.writeFloat(value.getRoll());\n        }\n    };\n", "    public static final ParticleDataCodec<ItemParticleData> ITEM = new ParticleDataCodec<>() {\n        @Override\n        public ItemParticleData read(PacketDataReader reader) throws IOException {\n            return new ItemParticleData(reader.readSlot());\n        }\n\n        @Override\n        public void write(PacketDataWriter writer, ItemParticleData value) throws IOException {\n            writer.writeSlot(value.getItem());\n        }\n    };\n", "    public static final ParticleDataCodec<VibrationParticleData> VIBRATION = new ParticleDataCodec<>() {\n        @Override\n        public VibrationParticleData read(PacketDataReader reader) throws IOException {\n            return new VibrationParticleData(\n                reader.readString(),\n                reader.readPosition(),\n                reader.readVarInt(),\n                reader.readFloat(),\n                reader.readVarInt()\n            );\n        }\n\n        @Override", "        public void write(PacketDataWriter writer, VibrationParticleData value) throws IOException {\n            writer.writeString(value.getType());\n            writer.writePosition(value.getPosition());\n            writer.writeVarInt(value.getEntityId());\n            writer.writeFloat(value.getEntityEyeHeight());\n            writer.writeVarInt(value.getTicks());\n        }\n    };\n\n    public static final ParticleDataCodec<ShriekParticleData> SHRIEK = new ParticleDataCodec<>() {\n        @Override", "    public static final ParticleDataCodec<ShriekParticleData> SHRIEK = new ParticleDataCodec<>() {\n        @Override\n        public ShriekParticleData read(PacketDataReader reader) throws IOException {\n            return new ShriekParticleData(reader.readVarInt());\n        }\n\n        @Override\n        public void write(PacketDataWriter writer, ShriekParticleData value) throws IOException {\n            writer.writeVarInt(value.getDelay());\n        }\n    };\n\n    public static @Nullable ParticleDataCodec<?> getCodec(int id) {\n        switch (id) {\n            case 2:\n            case 3:\n            case 25: return BLOCK;\n\n            case 14: return DUST;\n\n            case 15: return TRANSITION;\n\n            case 33: return SCHULK_CHARGE;\n\n            case 42: return ITEM;\n\n            case 43: return VIBRATION;\n\n            case 95: return SHRIEK;\n\n            default: return null;\n        }\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/data/particle/codec/ParticleDataReader.java", "chunked_list": ["/*\n * Created on Mon Mar 27 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.data.particle.codec;\n\nimport java.io.IOException;\n\nimport sh.pancake.serdemc.network.io.PacketDataReader;", "\nimport sh.pancake.serdemc.network.io.PacketDataReader;\n\n@FunctionalInterface\npublic interface ParticleDataReader<T> {\n    T read(PacketDataReader reader) throws IOException;\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/network/io/PacketDataReader.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.network.io;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;", "import java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\nimport javax.annotation.Nullable;\n\nimport sh.pancake.serdemc.data.BlockPosition;\nimport sh.pancake.serdemc.data.ItemStack;\nimport sh.pancake.serdemc.data.metadata.MetadataValue;", "import sh.pancake.serdemc.data.ItemStack;\nimport sh.pancake.serdemc.data.metadata.MetadataValue;\nimport sh.pancake.serdemc.data.metadata.codec.MetadataCodec;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\nimport sh.pancake.serdemc.data.nbt.io.NbtReader;\nimport sh.pancake.serdemc.io.DataReader;\n\npublic class PacketDataReader {\n    private final DataReader reader;\n    private final NbtReader nbtReader;\n\n    public PacketDataReader(DataReader reader) {\n        this.reader = reader;\n        this.nbtReader = new NbtReader(reader);\n    }\n", "    public byte readByte() throws IOException {\n        return reader.readByte();\n    }\n    public int readByteUnsigned() throws IOException {\n        return reader.readByteUnsigned();\n    }\n\n    public boolean readBoolean() throws IOException {\n        if (reader.readByte() == 0x00) {\n            return false;\n        }\n        \n        return true;\n    }\n", "        if (reader.readByte() == 0x00) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    public int readBytes(byte[] dst) throws IOException {\n        return reader.readBytes(dst);\n    }\n", "    public short readShort() throws IOException {\n        return reader.readShort();\n    }\n    public int readShortUnsigned() throws IOException {\n        return reader.readShortUnsigned();\n    }\n\n    public int readInt() throws IOException {\n        return reader.readInt();\n    }\n", "    public int readVarInt() throws IOException {\n        int value = 0;\n\n        for (int position = 0;; position += 7) {\n            if (position >= 32) throw new RuntimeException(\"VarInt is too big\");\n\n            byte current = readByte();\n\n            value |= (current & 0x7F) << position;\n\n            if ((current & 0x80) == 0) {\n                break;\n            }\n        }\n\n        return value;\n    }\n", "            if ((current & 0x80) == 0) {\n                break;\n            }\n        }\n\n        return value;\n    }\n\n    public long readLong() throws IOException {\n        return reader.readLong();\n    }\n", "    public long readLong() throws IOException {\n        return reader.readLong();\n    }\n\n    public long readVarLong() throws IOException {\n        long value = 0;\n        for (int position = 0;; position += 7) {\n            if (position >= 64) throw new RuntimeException(\"VarLong is too big\");\n\n            byte current = readByte();\n\n            value |= (long) (current & 0x7F) << position;\n", "            if ((current & 0x80) == 0) {\n                break;\n            }\n        }\n\n        return value;\n    }\n\n    public float readFloat() throws IOException {\n        return reader.readFloat();\n    }\n", "    public float readFloat() throws IOException {\n        return reader.readFloat();\n    }\n\n    public double readDouble() throws IOException {\n        return reader.readDouble();\n    }\n\n    public String readString() throws IOException {\n        return readString(32767);\n    }\n", "    public String readString() throws IOException {\n        return readString(32767);\n    }\n\n    public String readString(int maxLength) throws IOException {\n        int length = readVarInt();\n        if (length > maxLength) {\n            throw new RuntimeException(\"String exceed max length. maxLength: \" + maxLength + \" length: \" + length);\n        }\n\n        byte[] buf = new byte[length];\n        reader.readBytes(buf);\n\n        return new String(buf, StandardCharsets.UTF_8);\n    }\n", "    public String readChat() throws IOException {\n        return readString(262144);\n    }\n\n    public String readIdentifier() throws IOException {\n        return readString(32767);\n    }\n\n    public UUID readUUID() throws IOException {\n        return new UUID(reader.readLong(), reader.readLong());\n    }\n\n    public @Nullable ItemStack readSlot() throws IOException {", "    public UUID readUUID() throws IOException {\n        return new UUID(reader.readLong(), reader.readLong());\n    }\n\n    public @Nullable ItemStack readSlot() throws IOException {\n        if (!readBoolean()) {\n            return null;\n        }\n\n        return new ItemStack(readVarInt(), readByte(), readNbt());\n    }\n", "    public BlockPosition readPosition() throws IOException {\n        long pos = reader.readLong();\n\n        return new BlockPosition(\n            (int) (pos >>> 38L),\n            (int) ((pos >>> 12L) & 67108863L),\n            (int) (pos & 4095L)\n        );\n    }\n\n    public NbtRootCompound readNbt() throws IOException {\n        return nbtReader.readRootCompound();\n    }\n    public @Nullable NbtRootCompound readNbtOptional() throws IOException {\n        return nbtReader.readRootCompoundOptional();\n    }\n\n    public Map<Byte, MetadataValue> readEntityMetadata() throws IOException {\n        Map<Byte, MetadataValue> map = new HashMap<>();\n", "    public NbtRootCompound readNbt() throws IOException {\n        return nbtReader.readRootCompound();\n    }\n    public @Nullable NbtRootCompound readNbtOptional() throws IOException {\n        return nbtReader.readRootCompoundOptional();\n    }\n\n    public Map<Byte, MetadataValue> readEntityMetadata() throws IOException {\n        Map<Byte, MetadataValue> map = new HashMap<>();\n\n        for (int index; (index = readByteUnsigned()) != 0xFF;) {\n            int type = readVarInt();\n\n            MetadataCodec<?> codec = MetadataCodec.getCodec(type);", "        for (int index; (index = readByteUnsigned()) != 0xFF;) {\n            int type = readVarInt();\n\n            MetadataCodec<?> codec = MetadataCodec.getCodec(type);\n            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            map.put((byte) index, new MetadataValue(type, codec.read(this)));\n        }\n\n        return map;\n    }\n}\n"]}
{"filename": "api/src/main/java/sh/pancake/serdemc/network/io/PacketDataWriter.java", "chunked_list": ["/*\n * Created on Sun Mar 26 2023\n *\n * Copyright (c) storycraft. Licensed under the Apache Licence 2.0.\n */\npackage sh.pancake.serdemc.network.io;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.UUID;", "import java.util.Map;\nimport java.util.UUID;\n\nimport javax.annotation.Nullable;\n\nimport sh.pancake.serdemc.data.BlockPosition;\nimport sh.pancake.serdemc.data.ItemStack;\nimport sh.pancake.serdemc.data.metadata.MetadataValue;\nimport sh.pancake.serdemc.data.metadata.codec.MetadataCodec;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;", "import sh.pancake.serdemc.data.metadata.codec.MetadataCodec;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound;\nimport sh.pancake.serdemc.data.nbt.io.NbtWriter;\nimport sh.pancake.serdemc.io.DataWriter;\n\npublic class PacketDataWriter {\n    private final DataWriter writer;\n    private final NbtWriter nbtWriter;\n\n    public PacketDataWriter(DataWriter writer) {\n        this.writer = writer;\n        this.nbtWriter = new NbtWriter(writer);\n    }\n", "    public void writeByte(byte value) throws IOException {\n        writer.writeByte(value);\n    }\n    public void writeByteUnsigned(int value) throws IOException {\n        writer.writeByteUnsigned(value);\n    }\n\n    public void writeBoolean(boolean value) throws IOException {\n        writer.writeByte((byte) (value ? 1 : 0));\n    }\n", "    public void writeBytes(byte[] dst) throws IOException {\n        writer.writeBytes(dst);\n    }\n\n    public void writeShort(short value) throws IOException {\n        writer.writeShort(value);\n    }\n    public void writeShortUnsigned(int value) throws IOException {\n        writer.writeShortUnsigned(value);\n    }\n", "    public void writeInt(int value) throws IOException {\n        writer.writeInt(value);\n    }\n\n    public void writeVarInt(int value) throws IOException {\n        while (true) {\n            if ((value & ~0x7F) == 0) {\n                writeByte((byte) value);\n                return;\n            }\n\n            writeByte((byte) ((value & 0x7F) | 0x80));\n\n            value >>>= 7;\n        }\n    }\n", "    public void writeLong(long value) throws IOException {\n        writer.writeLong(value);\n    }\n\n    public void writeVarLong(long value) throws IOException {\n        while (true) {\n            if ((value & ~0x7FL) == 0) {\n                writeByte((byte) value);\n                return;\n            }\n\n            writeByte((byte) ((value & 0x7F) | 0x80));\n\n            value >>>= 7;\n        }\n    }\n", "    public void writeFloat(float value) throws IOException {\n        writer.writeFloat(value);\n    }\n\n    public void writeDouble(double value) throws IOException {\n        writer.writeDouble(value);\n    }\n\n    public void writeString(String value) throws IOException {\n        writeString(value, 32767);\n    }", "    public void writeString(String value) throws IOException {\n        writeString(value, 32767);\n    }\n    public void writeString(String value, int maxLength) throws IOException {\n        int length = value.length();\n        if (length > maxLength) {\n            throw new RuntimeException(\"String exceed max length. maxLength: \" + maxLength + \" length: \" + length);\n        }\n\n        writeVarInt(length);\n        writeBytes(value.getBytes());\n    }\n", "    public void writeChat(String value) throws IOException {\n        writeString(value, 262144);\n    }\n\n    public void writeIdentifier(String value) throws IOException {\n        writeString(value, 32767);\n    }\n\n    public void writeUUID(UUID uuid) throws IOException {\n        writer.writeLong(uuid.getMostSignificantBits());\n        writer.writeLong(uuid.getLeastSignificantBits());\n    }\n", "    public void writeUUID(UUID uuid) throws IOException {\n        writer.writeLong(uuid.getMostSignificantBits());\n        writer.writeLong(uuid.getLeastSignificantBits());\n    }\n\n    public void writeSlot(@Nullable ItemStack item) throws IOException {\n        if (item == null) {\n            writeBoolean(false);\n            return;\n        }\n\n        writeBoolean(true);\n        writeVarInt(item.getId());\n        writeByte(item.getCount());\n        writeNbt(item.getNbt());\n    }\n", "    public void writePosition(BlockPosition position) throws IOException {\n        writer.writeLong(position.getX() << 38L | (position.getZ() & 0x3FFFFFFL) << 12L | position.getY() & 0xFFFL);\n    }\n\n    public void writeNbt(NbtRootCompound compound) throws IOException {\n        nbtWriter.writeRootCompound(compound);\n    }\n    public void readNbtOptional(@Nullable NbtRootCompound compound) throws IOException {\n        nbtWriter.writeRootCompoundOptional(compound);\n    }\n\n    @SuppressWarnings(\"unchecked\")", "    public void writeEntityMetadata(Map<Byte, MetadataValue> metadata) throws IOException {\n        for (Byte index : metadata.keySet()) {\n            if (index.byteValue() == (byte) 0xFF) {\n                throw new RuntimeException(\"Index cannot be 255\");\n            }\n\n            MetadataValue value = metadata.get(index);\n            int type = value.getType();\n\n            MetadataCodec<Object> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);\n            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            writeVarInt(type);\n            codec.write(this, value.getValue());\n        }\n\n        writeByte((byte) 0xFF);\n    }\n}\n", "            if (codec == null) {\n                throw new RuntimeException(\"Unknown metadata type: \" + type);\n            }\n\n            writeVarInt(type);\n            codec.write(this, value.getValue());\n        }\n\n        writeByte((byte) 0xFF);\n    }\n}\n"]}
