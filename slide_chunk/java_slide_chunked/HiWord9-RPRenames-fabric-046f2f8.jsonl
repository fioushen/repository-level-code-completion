{"filename": "src/main/java/com/HiWord9/RPRenames/RenameButton.java", "chunked_list": ["package com.HiWord9.RPRenames;\n\nimport com.HiWord9.RPRenames.configGeneration.CEMList;\nimport com.HiWord9.RPRenames.configGeneration.ConfigManager;\nimport com.HiWord9.RPRenames.modConfig.ModConfig;\nimport io.github.cottonmc.cotton.gui.widget.WLabel;\nimport io.github.cottonmc.cotton.gui.widget.data.HorizontalAlignment;\nimport io.github.cottonmc.cotton.gui.widget.icon.ItemIcon;\nimport me.shedaniel.math.Color;\nimport net.minecraft.block.AbstractSkullBlock;", "import me.shedaniel.math.Color;\nimport net.minecraft.block.AbstractSkullBlock;\nimport net.minecraft.block.Block;\nimport net.minecraft.block.Blocks;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.font.TextRenderer;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.widget.TexturedButtonWidget;\nimport net.minecraft.client.render.DiffuseLighting;\nimport net.minecraft.client.render.LightmapTextureManager;", "import net.minecraft.client.render.DiffuseLighting;\nimport net.minecraft.client.render.LightmapTextureManager;\nimport net.minecraft.client.util.InputUtil;\nimport net.minecraft.client.util.math.MatrixStack;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.EquipmentSlot;\nimport net.minecraft.entity.ItemEntity;\nimport net.minecraft.entity.LivingEntity;\nimport net.minecraft.entity.passive.SnowGolemEntity;\nimport net.minecraft.entity.passive.SquidEntity;", "import net.minecraft.entity.passive.SnowGolemEntity;\nimport net.minecraft.entity.passive.SquidEntity;\nimport net.minecraft.item.ArmorItem;\nimport net.minecraft.item.ElytraItem;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.math.Vec3f;\nimport org.lwjgl.glfw.GLFW;\n\nimport java.io.File;", "\nimport java.io.File;\nimport java.util.ArrayList;\n\npublic class RenameButton extends Screen {\n\n    private final ModConfig config = ModConfig.INSTANCE;\n\n    TexturedButtonWidget button;\n    boolean CEM = false;\n    int mobInList;\n    Text name;\n    ItemStack item;\n    ItemIcon icon;\n    WLabel displayText = new WLabel(Text.of(\"\"),0xffffff);\n    int orderOnPage;\n    ArrayList<Text> tooltip = new ArrayList<>();\n    int page;\n    boolean active;\n\n    EquipmentSlot equipmentSlot = null;\n\n    int buttonHeight = 20;\n    int buttonOffsetY = 2;\n\n    int slotSize = 18;\n    int rowSize = 9;\n    int firstSlotX = 7;\n    int firstSlotY = 83;\n\n    public RenameButton() {\n        super(null);\n    }\n", "    public void drawElements(MatrixStack matrices, int mouseX, int mouseY) {\n        if (active) {\n            icon.paint(matrices, -128, 32 + ((buttonHeight + 2) * orderOnPage), 16);\n            WLabel shadow = new WLabel(displayText.getText(), 0x3f3f3f);\n            shadow.setHorizontalAlignment(HorizontalAlignment.CENTER).paint(matrices, -70, 38 + (buttonHeight + buttonOffsetY) * orderOnPage, mouseX, mouseY);\n            displayText.setHorizontalAlignment(HorizontalAlignment.CENTER).paint(matrices, -71, 37 + (buttonHeight + buttonOffsetY) * orderOnPage, mouseX, mouseY);\n        }\n    }\n\n    public void highlightSlot(MatrixStack matrices, ArrayList<Integer> currentInvOrder, ArrayList<String> inventory, String currentItem, int highlightColor) {\n        int orderInList = (page * 5) + orderOnPage;", "    public void highlightSlot(MatrixStack matrices, ArrayList<Integer> currentInvOrder, ArrayList<String> inventory, String currentItem, int highlightColor) {\n        int orderInList = (page * 5) + orderOnPage;\n        if (orderInList + 1 <= currentInvOrder.size()) {\n            int slotNum = currentInvOrder.get(orderInList);\n            int x;\n            int y;\n            if (!inventory.get(slotNum).equals(currentItem)) {\n                boolean isOnHotBar = false;\n                if (slotNum < rowSize) {\n                    slotNum += rowSize * 3;\n                    isOnHotBar = true;\n                } else {\n                    slotNum -= rowSize;\n                }\n                int orderInRow = slotNum % rowSize;\n                int row = slotNum / rowSize;\n                x = firstSlotX + (slotSize * orderInRow);\n                y = firstSlotY + (slotSize * row);", "                if (slotNum < rowSize) {\n                    slotNum += rowSize * 3;\n                    isOnHotBar = true;\n                } else {\n                    slotNum -= rowSize;\n                }\n                int orderInRow = slotNum % rowSize;\n                int row = slotNum / rowSize;\n                x = firstSlotX + (slotSize * orderInRow);\n                y = firstSlotY + (slotSize * row);\n                if (isOnHotBar) {\n                    y += 4;\n                }\n            } else {\n                x = 26;\n                y = 46;\n            }\n            fill(matrices, x, y, x + slotSize, y + slotSize, highlightColor);\n        }\n    }\n", "                if (isOnHotBar) {\n                    y += 4;\n                }\n            } else {\n                x = 26;\n                y = 46;\n            }\n            fill(matrices, x, y, x + slotSize, y + slotSize, highlightColor);\n        }\n    }\n", "    public void drawPreview(MatrixStack matrices, int x, int y, int width, int height, double scaleFactorItem, double scaleFactorEntity) {\n        int xOffset = 8;\n        int yOffset = 2;\n        int rows = tooltip.size();\n        if (config.enablePreview && !CEM && !config.disablePlayerPreviewTips && (!config.playerPreviewByDefault || !InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT))) {\n            rows++;\n        }\n        if (rows > 1) {\n            yOffset += 10 * (rows - 1) + 2;\n        }\n        if (!CEM) {", "        if (!CEM) {\n            if (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT) != config.playerPreviewByDefault) {\n                playerPreview(matrices, x + xOffset, y + yOffset, (int) (width * scaleFactorEntity), (int) (height * scaleFactorEntity), (int) (32 * scaleFactorEntity), config.spinPlayerPreview, item);\n            } else {\n                itemPreview(matrices, x + xOffset, y + yOffset, (int) (width / 2 * scaleFactorItem), (int) (height / 2 * scaleFactorItem), (int) (16 * scaleFactorItem));\n            }\n        } else {\n            entityPreview(matrices, x + xOffset, y + yOffset, (int) (width * scaleFactorEntity), (int) (height * scaleFactorEntity), (int) (32 * scaleFactorEntity), config.spinMobPreview);\n        }\n    }\n\n    boolean bl = false;\n    private boolean isKeyJustPressed(int key) {", "        if (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), key)) {\n            if (!bl) {\n                bl = true;\n                return true;\n            }\n        } else {\n            bl = false;\n        }\n        return false;\n    }\n\n    private void itemPreview(MatrixStack matrices, int x, int y, int width, int height, int size) {\n        drawFakeTooltip(matrices, x, y, width, height);\n        icon.paint(matrices, x + width / 2 - size / 2, y + height / 2 - size / 2, size);\n    }\n\n    private void entityPreview(MatrixStack matrices, int x, int y, int width, int height, int size, boolean spin) {\n        var entityType = CEMList.mobs[mobInList];\n        var client = MinecraftClient.getInstance();\n        var entity = (LivingEntity) entityType.create(client.world);\n        assert entity != null;\n        entity.setCustomName(name);", "        if (entity instanceof SnowGolemEntity) {\n            ((SnowGolemEntity) entity).setHasPumpkin(!config.disableSnowGolemPumpkin);\n        }\n\n        int newWidth = (int) (width + size * entity.getWidth() - 1);\n        int newHeight = (int) (height + size * entity.getHeight() - 1);\n\n        drawFakeTooltip(matrices, x, y, newWidth, newHeight);\n        renderEntity(matrices, x + newWidth / 2, (int) (y + newHeight - size * 0.75), size, entity, spin);\n    }\n\n    private void renderEntity(MatrixStack matrices, int x, int y, int size, Entity entity, boolean spin) {\n        DiffuseLighting.disableGuiDepthLighting();\n        matrices.push();", "        if (entity instanceof SquidEntity) {\n            size /= 1.5;\n        } else if (entity instanceof ItemEntity) {\n            size *= 2;\n        }\n        if (entity instanceof LivingEntity living && living.isBaby()) {\n            size /= 1.7;\n        }\n        matrices.translate(x, y, 1050);\n        matrices.scale(1f, 1f, -1);\n        matrices.translate(0, 0, 1000);\n        matrices.scale(size, size, size);\n        var quaternion = Vec3f.POSITIVE_Z.getDegreesQuaternion(180.f);\n        var quaternion2 = Vec3f.POSITIVE_X.getDegreesQuaternion(-10.f);\n        quaternion.hamiltonProduct(quaternion2);\n        matrices.multiply(quaternion);", "        if (MinecraftClient.getInstance().cameraEntity != null) {\n            entity.setPos(MinecraftClient.getInstance().cameraEntity.getX(), MinecraftClient.getInstance().cameraEntity.getY(), MinecraftClient.getInstance().cameraEntity.getZ());\n        }\n\n        assert MinecraftClient.getInstance().player != null;\n        entity.age = MinecraftClient.getInstance().player.age;\n        setupAngles(entity, spin);\n\n        var entityRenderDispatcher = MinecraftClient.getInstance().getEntityRenderDispatcher();\n        quaternion2.conjugate();\n        entityRenderDispatcher.setRotation(quaternion2);\n        entityRenderDispatcher.setRenderShadows(false);\n        var immediate = MinecraftClient.getInstance().getBufferBuilders().getEntityVertexConsumers();\n\n        entityRenderDispatcher.render(entity, 0, 0, 0, 0.f, 1.f, matrices, immediate,\n                LightmapTextureManager.MAX_LIGHT_COORDINATE\n        );\n        immediate.draw();\n        entityRenderDispatcher.setRenderShadows(true);\n        matrices.pop();\n        DiffuseLighting.enableGuiDepthLighting();\n    }\n\n    private void playerPreview(MatrixStack matrices, int x, int y, int width, int height, int size, boolean spin, ItemStack item) {\n        var entity = MinecraftClient.getInstance().player;\n\n        boolean extraSlotAvailable = true;\n        EquipmentSlot extraEquipmentSlot = null;\n", "        if (item.getItem() instanceof ArmorItem armorItem) {\n            extraEquipmentSlot = armorItem.getSlotType();\n        } else if (Block.getBlockFromItem(item.getItem()) == Blocks.CARVED_PUMPKIN) {\n            extraEquipmentSlot = EquipmentSlot.HEAD;\n        } else if (Block.getBlockFromItem(item.getItem()) instanceof AbstractSkullBlock) {\n            extraEquipmentSlot = EquipmentSlot.HEAD;\n        } else if (item.getItem() instanceof ElytraItem) {\n            extraEquipmentSlot = EquipmentSlot.CHEST;\n        } else {\n            extraSlotAvailable = false;\n        }\n", "        if (equipmentSlot == null) {\n            if (extraSlotAvailable) {\n                equipmentSlot = extraEquipmentSlot;\n            } else {\n                equipmentSlot = EquipmentSlot.MAINHAND;\n            }\n        }\n\n        if (isKeyJustPressed(GLFW.GLFW_KEY_F)) {\n            if (equipmentSlot == EquipmentSlot.HEAD) {\n                if (extraSlotAvailable && extraEquipmentSlot != EquipmentSlot.HEAD && config.alwaysAllowPlayerPreviewHead) {\n                    equipmentSlot = extraEquipmentSlot;\n                } else {\n                    equipmentSlot = EquipmentSlot.MAINHAND;\n                }", "        if (isKeyJustPressed(GLFW.GLFW_KEY_F)) {\n            if (equipmentSlot == EquipmentSlot.HEAD) {\n                if (extraSlotAvailable && extraEquipmentSlot != EquipmentSlot.HEAD && config.alwaysAllowPlayerPreviewHead) {\n                    equipmentSlot = extraEquipmentSlot;\n                } else {\n                    equipmentSlot = EquipmentSlot.MAINHAND;\n                }\n            } else if (equipmentSlot == EquipmentSlot.MAINHAND) {\n                equipmentSlot = EquipmentSlot.OFFHAND;\n            } else if (equipmentSlot == EquipmentSlot.OFFHAND) {\n                if (config.alwaysAllowPlayerPreviewHead) {\n                    equipmentSlot = EquipmentSlot.HEAD;\n                } else {", "            } else if (equipmentSlot == EquipmentSlot.OFFHAND) {\n                if (config.alwaysAllowPlayerPreviewHead) {\n                    equipmentSlot = EquipmentSlot.HEAD;\n                } else {\n                    if (extraSlotAvailable) {\n                        equipmentSlot = extraEquipmentSlot;\n                    } else {\n                        equipmentSlot = EquipmentSlot.MAINHAND;\n                    }\n                }\n            } else if (equipmentSlot == extraEquipmentSlot) {\n                equipmentSlot = EquipmentSlot.MAINHAND;\n            }\n        }\n\n        boolean isArmor = false;\n        int armorSlot = 0;", "            } else if (equipmentSlot == extraEquipmentSlot) {\n                equipmentSlot = EquipmentSlot.MAINHAND;\n            }\n        }\n\n        boolean isArmor = false;\n        int armorSlot = 0;\n        if (equipmentSlot != EquipmentSlot.MAINHAND && equipmentSlot != EquipmentSlot.OFFHAND) {\n            isArmor = true;\n            if (equipmentSlot == EquipmentSlot.LEGS) {\n                armorSlot = 1;", "            if (equipmentSlot == EquipmentSlot.LEGS) {\n                armorSlot = 1;\n            } else if (equipmentSlot == EquipmentSlot.CHEST) {\n                armorSlot = 2;\n            } else if (equipmentSlot == EquipmentSlot.HEAD) {\n                armorSlot = 3;\n            }\n        }\n\n        assert entity != null;\n        ItemStack temp = entity.getEquippedStack(equipmentSlot);\n", "        if (isArmor) {\n            entity.getInventory().armor.set(armorSlot, item);\n        } else {\n            entity.equipStack(equipmentSlot, item);\n        }\n\n        int newWidth = (int) (width + size * entity.getWidth() - 1);\n        int newHeight = (int) (height + size * entity.getHeight() - 1);\n        drawFakeTooltip(matrices, x, y, newWidth, newHeight);\n        renderPlayer(matrices, x + newWidth / 2, (int) (y + newHeight - size * 0.75), size, entity, spin);\n", "        if (isArmor) {\n            entity.getInventory().armor.set(armorSlot, temp);\n        } else {\n            entity.equipStack(equipmentSlot, temp);\n        }\n    }\n\n    private void renderPlayer(MatrixStack matrices, int x, int y, int size, LivingEntity entity, boolean spin) {\n        DiffuseLighting.disableGuiDepthLighting();\n        matrices.push();\n        matrices.translate(x, y, 1050);\n        matrices.scale(1f, 1f, -1);\n        matrices.translate(0, 0, 1000);\n        matrices.scale(size, size, size);\n        var quaternion = Vec3f.POSITIVE_Z.getDegreesQuaternion(180.f);\n        var quaternion2 = Vec3f.POSITIVE_X.getDegreesQuaternion(-10.f);\n        quaternion.hamiltonProduct(quaternion2);\n        matrices.multiply(quaternion);", "        if (MinecraftClient.getInstance().cameraEntity != null) {\n            entity.setPos(MinecraftClient.getInstance().cameraEntity.getX(), MinecraftClient.getInstance().cameraEntity.getY(), MinecraftClient.getInstance().cameraEntity.getZ());\n        }\n\n        float h = entity.bodyYaw;\n        float i = entity.getYaw();\n        float j = entity.getPitch();\n        float k = entity.prevHeadYaw;\n        float l = entity.headYaw;\n\n        setupAngles(entity, spin);\n\n        var entityRenderDispatcher = MinecraftClient.getInstance().getEntityRenderDispatcher();\n        quaternion2.conjugate();\n        entityRenderDispatcher.setRotation(quaternion2);\n        entityRenderDispatcher.setRenderShadows(false);\n        var immediate = MinecraftClient.getInstance().getBufferBuilders().getEntityVertexConsumers();\n\n        entityRenderDispatcher.render(entity, 0, 0, 0, 0.f, 1.f, matrices, immediate,\n                LightmapTextureManager.MAX_LIGHT_COORDINATE\n        );\n        immediate.draw();\n        entityRenderDispatcher.setRenderShadows(true);\n\n        entity.bodyYaw = h;\n        entity.setYaw(i);\n        entity.setPitch(j);\n        entity.prevHeadYaw = k;\n        entity.headYaw = l;\n\n        matrices.pop();\n        DiffuseLighting.enableGuiDepthLighting();\n    }\n\n    private void setupAngles(Entity entity, boolean spin) {\n        float yaw = spin ? (float) (((System.currentTimeMillis() / 10)) % 360) : 225.0F;\n        entity.setYaw(yaw);\n        entity.setHeadYaw(yaw);\n        entity.setPitch(0.f);", "        if (entity instanceof LivingEntity living) {\n            living.bodyYaw = yaw;\n        }\n    }\n\n    public void drawFakeTooltip(MatrixStack matrices, int x, int y, int width, int height) {\n        int alpha = 239;\n        int bgColor = Color.ofRGBA(15,0,15, alpha).getColor();\n        int topColor = Color.ofRGBA(37,1,91, alpha).getColor();\n        int bottomColor = Color.ofRGBA(24,1,51, alpha).getColor();\n        int x2 = x + width - 1;\n        int y2 = y + height - 1;\n        fill(matrices, x + 1, y, x2 - 1 + 1, y + 1, bgColor);\n        fill(matrices, x + 1, y2, x2 - 1 + 1, y2 + 1, bgColor);\n        fill(matrices, x, y + 1, x + 1, y2 - 1 + 1, bgColor);\n        fill(matrices, x2, y + 1, x2 + 1, y2 - 1 + 1, bgColor);\n        fill(matrices, x + 2, y + 2, x2 - 2 + 1, y2 - 2 + 1, bgColor);\n        fill(matrices, x + 2, y + 1, x2 - 2 + 1, y + 1 + 1, topColor);\n        fill(matrices, x + 2, y2 - 1, x2 - 2 + 1, y2 - 1 + 1, bottomColor);\n        fillGradient(matrices, x + 1, y + 1, x + 1 + 1, y2 - 1 + 1, topColor, bottomColor);\n        fillGradient(matrices, x2 - 1, y + 1, x2 - 1 + 1, y2 - 1 + 1, topColor, bottomColor);\n    }\n", "    public TexturedButtonWidget getButton() {\n        return button;\n    }\n\n    public ArrayList<Text> getTooltip() {\n        return tooltip;\n    }\n\n    public boolean isCEM() {\n        return CEM;\n    }\n", "    public boolean isCEM() {\n        return CEM;\n    }\n\n    public void setActive(boolean active) {\n        this.active = active;\n    }\n\n    public boolean isActive() {\n        return active;\n    }\n", "    public boolean isActive() {\n        return active;\n    }\n\n    public void setParameters(TexturedButtonWidget button, Text name, ItemStack item, int page, int orderOnPage, boolean isCEM, int mobInList, ArrayList<Text> tooltip) {\n        this.button = button;\n        this.name = name;\n        displayText.setText(shortText(name));\n        this.item = item;\n        this.item.setCustomName(name);\n        this.icon = new ItemIcon(item);\n        this.page = page;\n        this.orderOnPage = orderOnPage;\n        this.CEM = isCEM;\n        this.mobInList = mobInList;\n        this.tooltip = tooltip;\n        this.equipmentSlot = null;\n        this.active = true;\n    }\n\n    private Text shortText(Text text) {\n        TextRenderer renderer = MinecraftClient.getInstance().textRenderer;\n        String shortText;\n        shortText = text.getString();", "        if (renderer.getWidth(shortText) > 92 - 5) {\n            while (renderer.getWidth(shortText) > 92 - 5) {\n                shortText = shortText.substring(0, shortText.length() - 1);\n            }\n            return Text.of(shortText + \"...\");\n        }\n        return Text.of(shortText);\n    }\n\n    public static boolean calcFavorite(String item, String name) {\n        File file = new File(RPRenames.configPathFavorite + item + \".json\");", "    public static boolean calcFavorite(String item, String name) {\n        File file = new File(RPRenames.configPathFavorite + item + \".json\");\n        if (file.exists()) {\n            String[] favoriteList = ConfigManager.configRead(file).getName();\n            for (String s : favoriteList) {\n                if (name.equals(s)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/RPRenames.java", "chunked_list": ["package com.HiWord9.RPRenames;\n\nimport com.HiWord9.RPRenames.modConfig.ModConfig;\nimport me.shedaniel.autoconfig.AutoConfig;\nimport me.shedaniel.autoconfig.ConfigHolder;\nimport me.shedaniel.autoconfig.serializer.GsonConfigSerializer;\nimport net.fabricmc.api.ClientModInitializer;\nimport net.fabricmc.fabric.api.resource.ResourceManagerHelper;\nimport net.fabricmc.fabric.api.resource.ResourcePackActivationType;\nimport net.fabricmc.loader.api.FabricLoader;", "import net.fabricmc.fabric.api.resource.ResourcePackActivationType;\nimport net.fabricmc.loader.api.FabricLoader;\nimport net.minecraft.util.ActionResult;\nimport net.minecraft.util.Identifier;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.File;\nimport java.net.URL;\n\npublic class RPRenames implements ClientModInitializer {", "import java.net.URL;\n\npublic class RPRenames implements ClientModInitializer {\n\tpublic static final String MOD_ID = \"rprenames\";\n\tpublic static final Logger LOGGER = LoggerFactory.getLogger(\"rprenames\");\n\n\tpublic static String configPath = \"config/renames/\";\n\tpublic static String configPathClient = configPath + \"client/\";\n\tpublic static String configPathServer = configPath + \"server/\";\n\tpublic static String configPathNameCIT = \"all\";\n\tpublic static String configPathNameCEM = \"models\";", "\tpublic static String configPathServer = configPath + \"server/\";\n\tpublic static String configPathNameCIT = \"all\";\n\tpublic static String configPathNameCEM = \"models\";\n\tpublic static String configPathFavorite = configPath + \"favorite/\";\n\tpublic static File configClientCITFolder = new File(configPathClient + configPathNameCIT);\n\tpublic static File configClientCEMFolder = new File(configPathClient + configPathNameCEM);\n\tpublic static File configServerCITFolder = new File(configPathServer + configPathNameCIT);\n\tpublic static File configServerCEMFolder = new File(configPathServer + configPathNameCEM);\n\tpublic static File configFolderMain = new File(RPRenames.configPath);\n\tpublic static File configClientFolder = new File(RPRenames.configPathClient);\n\tpublic static File configServerFolder = new File(RPRenames.configPathServer);\n", "\tpublic static File configFolderMain = new File(RPRenames.configPath);\n\tpublic static File configClientFolder = new File(RPRenames.configPathClient);\n\tpublic static File configServerFolder = new File(RPRenames.configPathServer);\n\n\tpublic static URL serverResourcePackURL = null;\n\n\tpublic static final File MOD_CONFIG_FILE = new File(FabricLoader.getInstance().getConfigDir().toFile(), \"rprenames.json\");\n\n\tprivate static ConfigHolder<ModConfig> configHolder;\n\n\t@Override", "\tpublic void onInitializeClient() {\n\t\tLOGGER.info(\"RPRenames author like coca-cola zero, but don't tell anyone\");\n\t\tconfigHolder = AutoConfig.register(ModConfig.class, GsonConfigSerializer::new);\n\t\tconfigHolder.registerSaveListener((manager, data) -> ActionResult.SUCCESS);\n\t\tModConfig config = ModConfig.INSTANCE;\n\t\tif (config.loadModBuiltinResources) {\n\t\t\tLOGGER.info(\"Loading RPRenames built-in resource packs\");\n\t\t\tFabricLoader.getInstance().getModContainer(MOD_ID).ifPresent(container -> {\n\t\t\t\tResourceManagerHelper.registerBuiltinResourcePack(asId(\"vanillish\"), container, ResourcePackActivationType.NORMAL);\n\t\t\t\tResourceManagerHelper.registerBuiltinResourcePack(asId(\"default_dark_mode\"), container, ResourcePackActivationType.NORMAL);\n\t\t\t});\n\t\t}\n\t}\n", "\tpublic static Identifier asId(String path) {\n\t\treturn new Identifier(MOD_ID, path);\n\t}\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/Tabs.java", "chunked_list": ["package com.HiWord9.RPRenames;\n\npublic enum Tabs {\n    SEARCH,\n    FAVORITE,\n    INVENTORY;\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/Rename.java", "chunked_list": ["package com.HiWord9.RPRenames;\n\npublic class Rename {\n    private String[] name;\n\n    public Rename(String[] name) {\n        this.name = name;\n    }\n\n    public String[] getName() {\n        return name;\n    }\n", "    public String getName(int a) {\n        return name[a];\n    }\n\n    public void setName(String[] name) {\n        this.name = name;\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/modConfig/ModConfig.java", "chunked_list": ["package com.HiWord9.RPRenames.modConfig;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.google.gson.Gson;\nimport com.google.gson.stream.JsonWriter;\nimport me.shedaniel.autoconfig.ConfigData;\nimport me.shedaniel.autoconfig.annotation.Config;\nimport me.shedaniel.math.Color;\nimport org.apache.commons.compress.utils.IOUtils;\n", "import org.apache.commons.compress.utils.IOUtils;\n\nimport java.io.*;\n\n@Config(name = \"rprenames\")\npublic class ModConfig implements ConfigData {\n    public boolean ignoreCEM = false;\n\n    public boolean enableAnvilModification = true;\n\n    public int createConfigCheckboxPosX = 158;", "    public boolean enableAnvilModification = true;\n\n    public int createConfigCheckboxPosX = 158;\n    public int createConfigCheckboxPosY = 48;\n\n    public int favoritePosX = 71;\n    public int favoritePosY = -75;\n\n    public boolean loadModBuiltinResources = true;\n\n    public boolean openByDefault = false;\n", "    public boolean loadModBuiltinResources = true;\n\n    public boolean openByDefault = false;\n\n    public boolean highlightSlot = true;\n\n    public int slotHighlightColorALPHA = 50;\n    public int slotHighlightColorRGB = 8454143;\n\n    public boolean translateMobNames = true;\n    public boolean translateItemNames = true;\n", "    public boolean translateMobNames = true;\n    public boolean translateItemNames = true;\n\n    public boolean enablePreview = true;\n\n    public boolean playerPreviewByDefault = false;\n\n    public boolean spinMobPreview = true;\n    public boolean spinPlayerPreview = false;\n\n    public boolean disableSnowGolemPumpkin = false;\n", "    public boolean spinPlayerPreview = false;\n\n    public boolean disableSnowGolemPumpkin = false;\n\n    public double scaleFactorItem = 2.0;\n    public double scaleFactorEntity = 1.0;\n\n    public boolean alwaysAllowPlayerPreviewHead = false;\n\n    public boolean disablePageArrowsTips = false;\n    public boolean disablePlayerPreviewTips = false;\n", "    public boolean disablePageArrowsTips = false;\n    public boolean disablePlayerPreviewTips = false;\n\n    public boolean updateConfig = true;\n\n    public int getSlotHighlightRGBA() {\n        int r = Color.ofTransparent(slotHighlightColorRGB).getRed();\n        int g = Color.ofTransparent(slotHighlightColorRGB).getGreen();\n        int b = Color.ofTransparent(slotHighlightColorRGB).getBlue();\n        return Color.ofRGBA(r, g, b, (int) ((float) slotHighlightColorALPHA / 100 * 255)).getColor();\n    }\n", "    public static final ModConfig INSTANCE = ModConfig.read();\n\n    public static ModConfig read() {\n        if (!RPRenames.MOD_CONFIG_FILE.exists())\n            return new ModConfig().write();\n\n        Reader reader = null;\n        try {\n            return new Gson().fromJson(reader = new FileReader(RPRenames.MOD_CONFIG_FILE), ModConfig.class);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(reader);\n        }\n    }\n", "    public ModConfig write() {\n        Gson gson = new Gson();\n        JsonWriter writer = null;\n        try {\n            writer = gson.newJsonWriter(new FileWriter(RPRenames.MOD_CONFIG_FILE));\n            writer.setIndent(\"    \");\n\n            gson.toJson(gson.toJsonTree(this, ModConfig.class), writer);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(writer);\n        }\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/modConfig/ModConfigScreenFactory.java", "chunked_list": ["package com.HiWord9.RPRenames.modConfig;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.configGeneration.ConfigManager;\nimport me.shedaniel.clothconfig2.api.AbstractConfigListEntry;\nimport me.shedaniel.clothconfig2.api.ConfigBuilder;\nimport me.shedaniel.clothconfig2.api.ConfigCategory;\nimport me.shedaniel.clothconfig2.api.ConfigEntryBuilder;\nimport me.shedaniel.clothconfig2.impl.builders.SubCategoryBuilder;\nimport me.shedaniel.math.Color;", "import me.shedaniel.clothconfig2.impl.builders.SubCategoryBuilder;\nimport me.shedaniel.math.Color;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.text.Style;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Formatting;\nimport net.minecraft.util.Identifier;\n\npublic class ModConfigScreenFactory {\n    public static Screen create(Screen parent) {\n        ModConfig currentConfig = ModConfig.INSTANCE, defaultConfig = new ModConfig();\n\n        ConfigBuilder builder = ConfigBuilder.create()\n                .setParentScreen(parent)\n                .setDefaultBackgroundTexture(new Identifier(\"minecraft\", \"textures/block/bookshelf.png\"))\n                .setTitle(Text.translatable(\"rprenames.config.title\"))\n                .setSavingRunnable(currentConfig::write);\n\n        ConfigCategory general = builder.getOrCreateCategory(Text.translatable(\"rprenames.config.general\"));\n        ConfigCategory gui = builder.getOrCreateCategory(Text.translatable(\"rprenames.config.gui\"));\n        ConfigCategory debug = builder.getOrCreateCategory(Text.translatable(\"rprenames.config.debug\"));\n        ConfigEntryBuilder entryBuilder = builder.entryBuilder();\n\n        AbstractConfigListEntry<Boolean> ignoreCEM = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.general.ignoreCEM\"), currentConfig.ignoreCEM)\n                .setTooltip(Text.translatable(\"rprenames.config.general.ignoreCEM.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.ignoreCEM = newConfig)\n                .setDefaultValue(defaultConfig.ignoreCEM)\n                .build();\n\n        AbstractConfigListEntry<Boolean> enableAnvilModification = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.general.enableAnvilModification\"), currentConfig.enableAnvilModification)\n                .setTooltip(Text.translatable(\"rprenames.config.general.enableAnvilModification.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.enableAnvilModification = newConfig)\n                .setDefaultValue(defaultConfig.enableAnvilModification)\n                .build();\n\n        AbstractConfigListEntry<Integer> packCheckboxX = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.packCheckboxX\"), currentConfig.createConfigCheckboxPosX)\n                .setTooltip(Text.translatable(\"rprenames.config.general.packCheckboxX.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.createConfigCheckboxPosX = newConfig)\n                .setDefaultValue(defaultConfig.createConfigCheckboxPosX)\n                .build();\n\n        AbstractConfigListEntry<Integer> packCheckboxY = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.packCheckboxY\"), currentConfig.createConfigCheckboxPosY)\n                .setTooltip(Text.translatable(\"rprenames.config.general.packCheckboxY.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.createConfigCheckboxPosY = newConfig)\n                .setDefaultValue(defaultConfig.createConfigCheckboxPosY)\n                .build();\n\n        AbstractConfigListEntry<Integer> favoriteButtonX = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.favoriteButtonX\"), currentConfig.favoritePosX)\n                .setTooltip(Text.translatable(\"rprenames.config.general.favoriteButtonX.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.favoritePosX = newConfig)\n                .setDefaultValue(defaultConfig.favoritePosX)\n                .build();\n\n        AbstractConfigListEntry<Integer> favoriteButtonY = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.favoriteButtonY\"), currentConfig.favoritePosY)\n                .setTooltip(Text.translatable(\"rprenames.config.general.favoriteButtonY.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.favoritePosY = newConfig)\n                .setDefaultValue(defaultConfig.favoritePosY)\n                .build();\n\n        AbstractConfigListEntry<Boolean> loadModBuiltinResources = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.general.loadModBuiltinResources\"), currentConfig.loadModBuiltinResources)\n                .setTooltip(Text.translatable(\"rprenames.config.general.loadModBuiltinResources.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.loadModBuiltinResources = newConfig)\n                .setDefaultValue(defaultConfig.loadModBuiltinResources)\n                .requireRestart()\n                .build();\n\n        AbstractConfigListEntry<Boolean> openByDefault = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.openByDefault\"), currentConfig.openByDefault)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.openByDefault.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.openByDefault = newConfig)\n                .setDefaultValue(defaultConfig.openByDefault)\n                .build();\n\n        AbstractConfigListEntry<Boolean> highlightSlot = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.highlightSlot\"), currentConfig.highlightSlot)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.highlightSlot.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.highlightSlot = newConfig)\n                .setDefaultValue(defaultConfig.highlightSlot)\n                .build();\n\n        AbstractConfigListEntry<Integer> slotHighlightColor = entryBuilder.startColorField(Text.translatable(\"rprenames.config.gui.slotHighlightColor\"), Color.ofTransparent(currentConfig.slotHighlightColorRGB))\n                .setTooltip(Text.translatable(\"rprenames.config.gui.slotHighlightColor.tooltip\"))\n                .setDefaultValue(defaultConfig.slotHighlightColorRGB)\n                .setSaveConsumer(newConfig -> currentConfig.slotHighlightColorRGB = newConfig)\n                .build();\n\n        AbstractConfigListEntry<Integer> slotHighlightALPHA = entryBuilder.startIntSlider(Text.translatable(\"rprenames.config.gui.slotHighlightALPHA\"), currentConfig.slotHighlightColorALPHA, 0, 100)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.slotHighlightALPHA.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.slotHighlightColorALPHA = newConfig)\n                .setDefaultValue(defaultConfig.slotHighlightColorALPHA)\n                .setTextGetter(percent -> {", "public class ModConfigScreenFactory {\n    public static Screen create(Screen parent) {\n        ModConfig currentConfig = ModConfig.INSTANCE, defaultConfig = new ModConfig();\n\n        ConfigBuilder builder = ConfigBuilder.create()\n                .setParentScreen(parent)\n                .setDefaultBackgroundTexture(new Identifier(\"minecraft\", \"textures/block/bookshelf.png\"))\n                .setTitle(Text.translatable(\"rprenames.config.title\"))\n                .setSavingRunnable(currentConfig::write);\n\n        ConfigCategory general = builder.getOrCreateCategory(Text.translatable(\"rprenames.config.general\"));\n        ConfigCategory gui = builder.getOrCreateCategory(Text.translatable(\"rprenames.config.gui\"));\n        ConfigCategory debug = builder.getOrCreateCategory(Text.translatable(\"rprenames.config.debug\"));\n        ConfigEntryBuilder entryBuilder = builder.entryBuilder();\n\n        AbstractConfigListEntry<Boolean> ignoreCEM = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.general.ignoreCEM\"), currentConfig.ignoreCEM)\n                .setTooltip(Text.translatable(\"rprenames.config.general.ignoreCEM.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.ignoreCEM = newConfig)\n                .setDefaultValue(defaultConfig.ignoreCEM)\n                .build();\n\n        AbstractConfigListEntry<Boolean> enableAnvilModification = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.general.enableAnvilModification\"), currentConfig.enableAnvilModification)\n                .setTooltip(Text.translatable(\"rprenames.config.general.enableAnvilModification.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.enableAnvilModification = newConfig)\n                .setDefaultValue(defaultConfig.enableAnvilModification)\n                .build();\n\n        AbstractConfigListEntry<Integer> packCheckboxX = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.packCheckboxX\"), currentConfig.createConfigCheckboxPosX)\n                .setTooltip(Text.translatable(\"rprenames.config.general.packCheckboxX.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.createConfigCheckboxPosX = newConfig)\n                .setDefaultValue(defaultConfig.createConfigCheckboxPosX)\n                .build();\n\n        AbstractConfigListEntry<Integer> packCheckboxY = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.packCheckboxY\"), currentConfig.createConfigCheckboxPosY)\n                .setTooltip(Text.translatable(\"rprenames.config.general.packCheckboxY.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.createConfigCheckboxPosY = newConfig)\n                .setDefaultValue(defaultConfig.createConfigCheckboxPosY)\n                .build();\n\n        AbstractConfigListEntry<Integer> favoriteButtonX = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.favoriteButtonX\"), currentConfig.favoritePosX)\n                .setTooltip(Text.translatable(\"rprenames.config.general.favoriteButtonX.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.favoritePosX = newConfig)\n                .setDefaultValue(defaultConfig.favoritePosX)\n                .build();\n\n        AbstractConfigListEntry<Integer> favoriteButtonY = entryBuilder.startIntField(Text.translatable(\"rprenames.config.general.favoriteButtonY\"), currentConfig.favoritePosY)\n                .setTooltip(Text.translatable(\"rprenames.config.general.favoriteButtonY.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.favoritePosY = newConfig)\n                .setDefaultValue(defaultConfig.favoritePosY)\n                .build();\n\n        AbstractConfigListEntry<Boolean> loadModBuiltinResources = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.general.loadModBuiltinResources\"), currentConfig.loadModBuiltinResources)\n                .setTooltip(Text.translatable(\"rprenames.config.general.loadModBuiltinResources.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.loadModBuiltinResources = newConfig)\n                .setDefaultValue(defaultConfig.loadModBuiltinResources)\n                .requireRestart()\n                .build();\n\n        AbstractConfigListEntry<Boolean> openByDefault = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.openByDefault\"), currentConfig.openByDefault)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.openByDefault.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.openByDefault = newConfig)\n                .setDefaultValue(defaultConfig.openByDefault)\n                .build();\n\n        AbstractConfigListEntry<Boolean> highlightSlot = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.highlightSlot\"), currentConfig.highlightSlot)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.highlightSlot.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.highlightSlot = newConfig)\n                .setDefaultValue(defaultConfig.highlightSlot)\n                .build();\n\n        AbstractConfigListEntry<Integer> slotHighlightColor = entryBuilder.startColorField(Text.translatable(\"rprenames.config.gui.slotHighlightColor\"), Color.ofTransparent(currentConfig.slotHighlightColorRGB))\n                .setTooltip(Text.translatable(\"rprenames.config.gui.slotHighlightColor.tooltip\"))\n                .setDefaultValue(defaultConfig.slotHighlightColorRGB)\n                .setSaveConsumer(newConfig -> currentConfig.slotHighlightColorRGB = newConfig)\n                .build();\n\n        AbstractConfigListEntry<Integer> slotHighlightALPHA = entryBuilder.startIntSlider(Text.translatable(\"rprenames.config.gui.slotHighlightALPHA\"), currentConfig.slotHighlightColorALPHA, 0, 100)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.slotHighlightALPHA.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.slotHighlightColorALPHA = newConfig)\n                .setDefaultValue(defaultConfig.slotHighlightColorALPHA)\n                .setTextGetter(percent -> {", "                    if (percent == 0) {\n                        return Text.translatable(\"rprenames.config.gui.slotHighlightALPHA.off\").formatted(Formatting.RED);\n                    }\n                    return Text.of(percent.toString());\n                })\n                .build();\n\n        AbstractConfigListEntry<Boolean> translateMobNames = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.translateMobNames\"), currentConfig.translateMobNames)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.translateMobNames.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.translateMobNames = newConfig)\n                .setDefaultValue(defaultConfig.translateMobNames)\n                .build();\n\n        AbstractConfigListEntry<Boolean> translateItemNames = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.translateItemNames\"), currentConfig.translateItemNames)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.translateItemNames.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.translateItemNames = newConfig)\n                .setDefaultValue(defaultConfig.translateItemNames)\n                .build();\n\n        AbstractConfigListEntry<Boolean> enablePreview = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.enablePreview\"), currentConfig.enablePreview)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.enablePreview.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.enablePreview = newConfig)\n                .setDefaultValue(defaultConfig.enablePreview)\n                .build();\n\n        AbstractConfigListEntry<Boolean> playerPreviewByDefault = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.playerPreviewByDefault\"), currentConfig.playerPreviewByDefault)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.playerPreviewByDefault.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.playerPreviewByDefault = newConfig)\n                .setDefaultValue(defaultConfig.playerPreviewByDefault)\n                .build();\n\n        AbstractConfigListEntry<Boolean> spinMobPreview = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.spinMobPreview\"), currentConfig.spinMobPreview)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.spinMobPreview.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.spinMobPreview = newConfig)\n                .setDefaultValue(defaultConfig.spinMobPreview)\n                .build();\n\n        AbstractConfigListEntry<Boolean> spinPlayerPreview = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.spinPlayerPreview\"), currentConfig.spinPlayerPreview)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.spinPlayerPreview.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.spinPlayerPreview = newConfig)\n                .setDefaultValue(defaultConfig.spinPlayerPreview)\n                .build();\n\n        AbstractConfigListEntry<Boolean> disableSnowGolemPumpkin = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.disableSnowGolemPumpkin\"), currentConfig.disableSnowGolemPumpkin)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.disableSnowGolemPumpkin.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.disableSnowGolemPumpkin = newConfig)\n                .setDefaultValue(defaultConfig.disableSnowGolemPumpkin)\n                .build();\n\n        AbstractConfigListEntry<Double> scaleFactorItem = entryBuilder.startDoubleField(Text.translatable(\"rprenames.config.gui.scaleFactorItem\"), currentConfig.scaleFactorItem)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.scaleFactorItem.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.scaleFactorItem = newConfig)\n                .setDefaultValue(defaultConfig.scaleFactorItem)\n                .build();\n\n        AbstractConfigListEntry<Double> scaleFactorEntity = entryBuilder.startDoubleField(Text.translatable(\"rprenames.config.gui.scaleFactorEntity\"), currentConfig.scaleFactorEntity)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.scaleFactorEntity.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.scaleFactorEntity = newConfig)\n                .setDefaultValue(defaultConfig.scaleFactorEntity)\n                .build();\n\n        AbstractConfigListEntry<Boolean> alwaysAllowPlayerPreviewHead = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.alwaysAllowPlayerPreviewHead\"), currentConfig.alwaysAllowPlayerPreviewHead)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.alwaysAllowPlayerPreviewHead.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.alwaysAllowPlayerPreviewHead = newConfig)\n                .setDefaultValue(defaultConfig.alwaysAllowPlayerPreviewHead)\n                .build();\n\n        AbstractConfigListEntry<Boolean> disablePageArrowsTips = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.disablePageArrowsTips\"), currentConfig.disablePageArrowsTips)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.disablePageArrowsTips.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.disablePageArrowsTips = newConfig)\n                .setDefaultValue(defaultConfig.disablePageArrowsTips)\n                .build();\n\n        AbstractConfigListEntry<Boolean> disablePlayerPreviewTips = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.gui.disablePlayerPreviewTips\"), currentConfig.disablePlayerPreviewTips)\n                .setTooltip(Text.translatable(\"rprenames.config.gui.disablePlayerPreviewTips.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.disablePlayerPreviewTips = newConfig)\n                .setDefaultValue(defaultConfig.disablePlayerPreviewTips)\n                .build();\n\n        AbstractConfigListEntry<Boolean> updateConfig = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.debug.updateConfig\"), currentConfig.updateConfig)\n                .setTooltip(Text.translatable(\"rprenames.config.debug.updateConfig.tooltip\"))\n                .setSaveConsumer(newConfig -> currentConfig.updateConfig = newConfig)\n                .setDefaultValue(defaultConfig.updateConfig)\n                .build();\n\n        class PrevToggle { boolean bl = false; }\n        final PrevToggle prevToggleRecreateConfig = new PrevToggle();\n        AbstractConfigListEntry<Boolean> recreateConfig = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.debug.recreateConfig\"), false)\n                .setTooltip(Text.translatable(\"rprenames.config.debug.recreateConfig.tooltip\"))\n                .setYesNoTextSupplier((bl) -> {", "                    if (bl != prevToggleRecreateConfig.bl) {\n                        RPRenames.LOGGER.info(\"Recreating config manually\");\n                        ConfigManager.configUpdate();\n                        prevToggleRecreateConfig.bl = bl;\n                    }\n                    return Text.translatable(\"rprenames.config.debug.recreateConfig.title\").fillStyle(Style.EMPTY.withColor(Formatting.GOLD));\n                })\n                .build();\n\n        final PrevToggle prevToggleClearConfig = new PrevToggle();\n        AbstractConfigListEntry<Boolean> clearConfig = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.debug.clearConfig\"), false)\n                .setTooltip(Text.translatable(\"rprenames.config.debug.clearConfig.tooltip\"))\n                .setYesNoTextSupplier((bl) -> {", "                    if (bl != prevToggleClearConfig.bl) {\n                        RPRenames.LOGGER.info(\"Deleting config manually\");\n                        ConfigManager.configClear();\n                        prevToggleClearConfig.bl = bl;\n                    }\n                    return Text.translatable(\"rprenames.config.debug.clearConfig.title\").fillStyle(Style.EMPTY.withColor(Formatting.RED));\n                })\n                .build();\n\n        final PrevToggle prevToggleOpenConfigFolder = new PrevToggle();\n        AbstractConfigListEntry<Boolean> openConfigFolder = entryBuilder.startBooleanToggle(Text.translatable(\"rprenames.config.debug.openConfigFolder\"), false)\n                .setTooltip(Text.translatable(\"rprenames.config.debug.openConfigFolder.tooltip\"))\n                .setYesNoTextSupplier((bl) -> {", "                    if (bl != prevToggleOpenConfigFolder.bl) {\n                        RPRenames.LOGGER.info(\"Opening config folder manually\");\n                        ConfigManager.openConfigFolder();\n                        prevToggleOpenConfigFolder.bl = bl;\n                    }\n                    return Text.translatable(\"rprenames.config.debug.openConfigFolder.title\").fillStyle(Style.EMPTY.withColor(Formatting.AQUA));\n                })\n                .build();\n\n        SubCategoryBuilder createConfigCheckboxPosition = entryBuilder.startSubCategory(Text.translatable(\"rprenames.config.general.subCategory.createConfigCheckboxPosition\"));\n        createConfigCheckboxPosition.add(0, packCheckboxX);\n        createConfigCheckboxPosition.add(1, packCheckboxY);\n\n        SubCategoryBuilder favoriteButtonPosition = entryBuilder.startSubCategory(Text.translatable(\"rprenames.config.general.subCategory.favoriteButtonPosition\"));\n        favoriteButtonPosition.add(0, favoriteButtonX);\n        favoriteButtonPosition.add(1, favoriteButtonY);\n\n        SubCategoryBuilder slotHighlightColorSettings = entryBuilder.startSubCategory(Text.translatable(\"rprenames.config.gui.subCategory.slotHighlightColorSettings\"));\n        slotHighlightColorSettings.add(0, slotHighlightColor);\n        slotHighlightColorSettings.add(1, slotHighlightALPHA);\n\n        SubCategoryBuilder tooltipTranslations = entryBuilder.startSubCategory(Text.translatable(\"rprenames.config.gui.subCategory.tooltipTranslations\"));\n        tooltipTranslations.add(0, translateItemNames);\n        tooltipTranslations.add(1, translateMobNames);\n\n        SubCategoryBuilder previewScale = entryBuilder.startSubCategory(Text.translatable(\"rprenames.config.gui.subCategory.previewScale\"));\n        previewScale.add(0, scaleFactorItem);\n        previewScale.add(1, scaleFactorEntity);\n\n        general.addEntry(ignoreCEM);\n        general.addEntry(enableAnvilModification);\n        general.addEntry(createConfigCheckboxPosition.build());\n        general.addEntry(favoriteButtonPosition.build());\n        general.addEntry(loadModBuiltinResources);\n        gui.addEntry(openByDefault);\n        gui.addEntry(highlightSlot);\n        gui.addEntry(slotHighlightColorSettings.build());\n        gui.addEntry(tooltipTranslations.build());\n        gui.addEntry(enablePreview);\n        gui.addEntry(playerPreviewByDefault);\n        gui.addEntry(spinMobPreview);\n        gui.addEntry(spinPlayerPreview);\n        gui.addEntry(disableSnowGolemPumpkin);\n        gui.addEntry(previewScale.build());\n        gui.addEntry(alwaysAllowPlayerPreviewHead);\n        gui.addEntry(disablePageArrowsTips);\n        gui.addEntry(disablePlayerPreviewTips);\n        debug.addEntry(updateConfig);\n        debug.addEntry(recreateConfig);\n        debug.addEntry(clearConfig);\n        debug.addEntry(openConfigFolder);\n\n        return builder.build();\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/modConfig/ModMenuIntegration.java", "chunked_list": ["package com.HiWord9.RPRenames.modConfig;\n\nimport com.terraformersmc.modmenu.api.ConfigScreenFactory;\nimport com.terraformersmc.modmenu.api.ModMenuApi;\nimport net.fabricmc.api.EnvType;\nimport net.fabricmc.api.Environment;\n\n@Environment(EnvType.CLIENT)\npublic class ModMenuIntegration implements ModMenuApi {\n\n    @Override\n    public ConfigScreenFactory<?> getModConfigScreenFactory() {\n        return ModConfigScreenFactory::create;\n    }\n}\n", "public class ModMenuIntegration implements ModMenuApi {\n\n    @Override\n    public ConfigScreenFactory<?> getModConfigScreenFactory() {\n        return ModConfigScreenFactory::create;\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/mixin/AnvilScreenMixin.java", "chunked_list": ["package com.HiWord9.RPRenames.mixin;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.Rename;\nimport com.HiWord9.RPRenames.RenameButton;\nimport com.HiWord9.RPRenames.Tabs;\nimport com.HiWord9.RPRenames.configGeneration.CEMList;\nimport com.HiWord9.RPRenames.configGeneration.ConfigManager;\nimport com.HiWord9.RPRenames.modConfig.ModConfig;\nimport com.google.gson.Gson;", "import com.HiWord9.RPRenames.modConfig.ModConfig;\nimport com.google.gson.Gson;\nimport io.github.cottonmc.cotton.gui.widget.WLabel;\nimport io.github.cottonmc.cotton.gui.widget.data.HorizontalAlignment;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.font.TextRenderer;\nimport net.minecraft.client.gui.screen.Screen;\nimport net.minecraft.client.gui.screen.ingame.AnvilScreen;\nimport net.minecraft.client.gui.widget.ButtonWidget;\nimport net.minecraft.client.gui.widget.ClickableWidget;", "import net.minecraft.client.gui.widget.ButtonWidget;\nimport net.minecraft.client.gui.widget.ClickableWidget;\nimport net.minecraft.client.gui.widget.TextFieldWidget;\nimport net.minecraft.client.gui.widget.TexturedButtonWidget;\nimport net.minecraft.client.util.InputUtil;\nimport net.minecraft.client.util.math.MatrixStack;\nimport net.minecraft.entity.EntityType;\nimport net.minecraft.entity.player.PlayerInventory;\nimport net.minecraft.item.ItemStack;\nimport net.minecraft.screen.ScreenHandler;", "import net.minecraft.item.ItemStack;\nimport net.minecraft.screen.ScreenHandler;\nimport net.minecraft.screen.slot.SlotActionType;\nimport net.minecraft.text.Style;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Formatting;\nimport net.minecraft.util.Identifier;\nimport org.lwjgl.glfw.GLFW;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;", "import org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.Shadow;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.Redirect;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;", "import java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.FileVisitOption;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.function.Consumer;", "import java.util.Locale;\nimport java.util.function.Consumer;\n\n@Mixin(AnvilScreen.class)\npublic abstract class AnvilScreenMixin extends Screen {\n\n\tprivate static final ModConfig config = ModConfig.INSTANCE;\n\tboolean isOnServer = !MinecraftClient.getInstance().isInSingleplayer();\n\n\t@Shadow\n\tprivate TextFieldWidget nameField;\n\n\tAnvilScreenMixin(Text title) {\n\t\tsuper(title);\n\t}\n\n\tboolean open = config.openByDefault;\n\n\tprivate static final Identifier MENU_TEXTURE = new Identifier(RPRenames.MOD_ID,\"textures/gui/menu.png\");\n\tint menuTextureWidth = 204;\n\tint menuTextureHeight = 166;\n\tint menuWidth = 138;\n\tint menuHeight = 166;\n\tint tabWidth = 33;\n\tint tabHeight = 26;\n\tint tabOffsetY = 5;\n\tprivate static final Identifier OPENER_TEXTURE = new Identifier(RPRenames.MOD_ID,\"textures/gui/opener.png\");\n\tint openerTextureWidth = 22;\n\tint openerTextureHeight = 110;\n\tint openerWidth = 22;\n\tint openerHeight = 22;\n\tprivate static final Identifier BUTTON_TEXTURE = new Identifier(RPRenames.MOD_ID,\"textures/gui/button.png\");\n\tint buttonTextureWidth = 118;\n\tint buttonTextureHeight = 80;\n\tint buttonWidth = 118;\n\tint buttonHeight = 20;\n\tint buttonOffsetY = 2;\n\tprivate static final Identifier PAGE_ARROWS_TEXTURE = new Identifier(RPRenames.MOD_ID,\"textures/gui/page_arrows.png\");\n\tint pageArrowsTextureWidth = 60;\n\tint pageArrowsTextureHeight = 48;\n\tint pageArrowsWidth = 30;\n\tint pageArrowsHeight = 16;\n\tprivate static final Identifier FAVORITE_BUTTON_TEXTURE = new Identifier(RPRenames.MOD_ID,\"textures/gui/favorite_button.png\");\n\tint favoriteButtonTextureWidth = 9;\n\tint favoriteButtonTextureHeight = 18;\n\tint favoriteButtonWidth = 9;\n\tint favoriteButtonHeight = 9;\n\n\tint highlightColor = config.getSlotHighlightRGBA();\n\n\tint backgroundWidth = 176;\n\tint backgroundHeight = 166;\n\n\tint page = 0;\n\tint currentRenameListSize;\n\n\tString currentItem = \"air\";\n\tItemStack itemAfterUpdate;\n\tArrayList<String> currentItemList = new ArrayList<>();\n\tArrayList<Integer> currentInvOrder = new ArrayList<>();\n\tboolean afterInventoryTab = false;\n\tint tempPage;\n\tint citSize;\n\n\tTexturedButtonWidget background;\n\tTexturedButtonWidget opener;\n\tTexturedButtonWidget openerOpened;\n\tTexturedButtonWidget openerPlus;\n\tTexturedButtonWidget openerMinus;\n\n\tRenameButton button1 = new RenameButton();\n\tRenameButton button2 = new RenameButton();\n\tRenameButton button3 = new RenameButton();\n\tRenameButton button4 = new RenameButton();\n\tRenameButton button5 = new RenameButton();\n\tArrayList<RenameButton> buttons = new ArrayList<>();\n\n\tTexturedButtonWidget searchTab;\n\tTexturedButtonWidget searchTabActive;\n\tTexturedButtonWidget favoriteTab;\n\tTexturedButtonWidget favoriteTabActive;\n\tTexturedButtonWidget inventoryTab;\n\tTexturedButtonWidget inventoryTabActive;\n\tTabs currentTab = Tabs.SEARCH;\n\n\tTexturedButtonWidget addToFavorite;\n\tTexturedButtonWidget removeFromFavorite;\n\n\tTexturedButtonWidget pageDown;\n\tTexturedButtonWidget pageUp;\n\n\tWLabel pageCount = new WLabel(Text.of(\"\"),0xffffff);\n\n\tRename currentRenameList;\n\n\tTextRenderer renderer = MinecraftClient.getInstance().textRenderer;\n\n\tTextFieldWidget searchField;\n\tText SEARCH_HINT_TEXT = Text.translatable(\"rprenames.gui.searchHintText\").formatted(Formatting.ITALIC).formatted(Formatting.GRAY);\n\n\tString searchTag = \"\";\n\n\tArrayList<ArrayList<String>> mobName = new ArrayList<>();\n\n\tboolean currentItemHasRenames = true;\n\n\t@Inject(at = @At(\"RETURN\"), method = \"setup\")\n\tprivate void init(CallbackInfo ci) {", "\t\tif (config.enableAnvilModification) {\n\t\t\tRPRenames.LOGGER.info(\"Starting RPRenames modification on AnvilScreen\");\n\n\t\t\tbuttons.add(button1);\n\t\t\tbuttons.add(button2);\n\t\t\tbuttons.add(button3);\n\t\t\tbuttons.add(button4);\n\t\t\tbuttons.add(button5);\n\n\t\t\tbackground = new TexturedButtonWidget(this.width / 2 - 228, this.height / 2 - 83, menuWidth, menuHeight, tabWidth * 2, 0, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, null);\n\t\t\tbackground.active = false;\n\n\t\t\tpageDown = new TexturedButtonWidget(this.width / 2 - 218, this.height / 2 + 57, pageArrowsWidth, pageArrowsHeight, 0, 0, pageArrowsHeight, PAGE_ARROWS_TEXTURE, pageArrowsTextureWidth, pageArrowsTextureHeight, (button -> {", "\t\t\t\tif (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT)) {\n\t\t\t\t\tpage = 0;\n\t\t\t\t} else {\n\t\t\t\t\tpage--;\n\t\t\t\t}\n\t\t\t\thideButtons();\n\t\t\t\tbuttonsDefine();\n\t\t\t\taddDrawableChild(background);\n\t\t\t\tshowButtons();\n\t\t\t\ttabsUpdate();\n\t\t\t\tupdatePageWidgets();", "\t\t\t\tif (page == 0) {\n\t\t\t\t\tbutton.active = false;\n\t\t\t\t}\n\t\t\t\tpageUp.active = true;\n\t\t\t}));\n\t\t\tpageUp = new TexturedButtonWidget(this.width / 2 - 130, this.height / 2 + 57, pageArrowsWidth, pageArrowsHeight, pageArrowsWidth, 0, pageArrowsHeight, PAGE_ARROWS_TEXTURE, pageArrowsTextureWidth, pageArrowsTextureHeight, (button -> {\n\t\t\t\tif (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT)) {\n\t\t\t\t\tpage = ((currentRenameList.getName().length + 4) / 5 - 1);\n\t\t\t\t} else {\n\t\t\t\t\tpage++;\n\t\t\t\t}\n\t\t\t\thideButtons();\n\t\t\t\tbuttonsDefine();\n\t\t\t\taddDrawableChild(background);\n\t\t\t\tshowButtons();\n\t\t\t\ttabsUpdate();\n\t\t\t\tupdatePageWidgets();\n\t\t\t\tpageDown.active = true;", "\t\t\t\tif (5 + page * 5 > currentRenameListSize - 1) {\n\t\t\t\t\tbutton.active = false;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tboolean clientConfigReadable = RPRenames.configClientFolder.exists();\n\t\t\tboolean serverConfigReadable = RPRenames.configServerFolder.exists();\n\t\t\tif (!isOnServer) {\n\t\t\t\tserverConfigReadable = false;\n\t\t\t}\n", "\t\t\tif (!clientConfigReadable && !serverConfigReadable) {\n\t\t\t\tText noConfigText = Text.translatable(\"rprenames.gui.configNotFound\", RPRenames.configPath);\n\t\t\t\topener = new TexturedButtonWidget(this.width / 2 - 85, this.height / 2 - 39, openerWidth, openerHeight, 0, 0, 0, OPENER_TEXTURE, openerTextureWidth, openerTextureHeight, (button) -> switchOpen(), new ButtonWidget.TooltipSupplier() {\n\t\t\t\t\tpublic void onTooltip(ButtonWidget buttonWidget, MatrixStack matrixStack, int i, int j) {\n\t\t\t\t\t\trenderTooltip(matrixStack, noConfigText, i, j);\n\t\t\t\t\t}\n\n\t\t\t\t\tpublic void supply(Consumer<Text> consumer) {\n\t\t\t\t\t\tconsumer.accept(noConfigText);\n\t\t\t\t\t}\n\t\t\t\t}, noConfigText);\n\t\t\t} else {\n\t\t\t\topener = new TexturedButtonWidget(this.width / 2 - 85, this.height / 2 - 39, openerWidth, openerHeight, 0, 0, 0, OPENER_TEXTURE, openerTextureWidth, openerTextureHeight, (button) -> switchOpen());\n\t\t\t}\n\n\t\t\topenerOpened = new TexturedButtonWidget(this.width / 2 - 85, this.height / 2 - 39, openerWidth, openerHeight, 0, openerHeight * 3, openerHeight, OPENER_TEXTURE, openerTextureWidth, openerTextureHeight, null);\n\t\t\topenerPlus = new TexturedButtonWidget(this.width / 2 - 85, this.height / 2 - 39, openerWidth, openerHeight, 0, 0, openerHeight, OPENER_TEXTURE, openerTextureWidth, openerTextureHeight, null);\n\t\t\topenerMinus = new TexturedButtonWidget(this.width / 2 - 85, this.height / 2 - 39, openerWidth, openerHeight, 0, openerHeight * 2, 0, OPENER_TEXTURE, openerTextureWidth, openerTextureHeight, null);\n\n\t\t\taddDrawableChild(opener);\n\n\t\t\tsearchTab = new TexturedButtonWidget(this.width / 2 - 258, this.height / 2 - 78, tabWidth, tabHeight, 0, 0, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, button -> {\n\t\t\t\tcurrentTab = Tabs.SEARCH;\n\t\t\t\treloadButton(searchTabActive);\n\t\t\t\tremove(favoriteTabActive);\n\t\t\t\tremove(inventoryTabActive);\n\t\t\t\tscreenUpdate();\n\t\t\t});\n\t\t\tfavoriteTab = new TexturedButtonWidget(this.width / 2 - 258, this.height / 2 - 78 + (tabHeight + tabOffsetY), tabWidth, tabHeight, 0, tabHeight, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, button -> {\n\t\t\t\tcurrentTab = Tabs.FAVORITE;\n\t\t\t\tremove(searchTabActive);\n\t\t\t\treloadButton(favoriteTabActive);\n\t\t\t\tremove(inventoryTabActive);\n\t\t\t\tscreenUpdate();\n\t\t\t});\n\t\t\tinventoryTab = new TexturedButtonWidget(this.width / 2 - 258, this.height / 2 - 78 + (tabHeight + tabOffsetY) * 2, tabWidth, tabHeight, 0, tabHeight * 2, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, button -> {\n\t\t\t\tcurrentTab = Tabs.INVENTORY;\n\t\t\t\tremove(searchTabActive);\n\t\t\t\tremove(favoriteTabActive);\n\t\t\t\treloadButton(inventoryTabActive);\n\t\t\t\tscreenUpdate();\n\t\t\t});\n\t\t\tsearchTabActive = new TexturedButtonWidget(this.width / 2 - 258, this.height / 2 - 78, tabWidth, tabHeight, tabWidth, 0, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, null);\n\t\t\tfavoriteTabActive = new TexturedButtonWidget(this.width / 2 - 258, this.height / 2 - 78 + (tabHeight + tabOffsetY), tabWidth, tabHeight, tabWidth, tabHeight, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, null);\n\t\t\tinventoryTabActive = new TexturedButtonWidget(this.width / 2 - 258, this.height / 2 - 78 + (tabHeight + tabOffsetY) * 2, tabWidth, tabHeight, tabWidth, tabHeight * 2, 0, MENU_TEXTURE, menuTextureWidth, menuTextureHeight, null);\n\t\t\tsearchTabActive.active = false;\n\t\t\tfavoriteTabActive.active = false;\n\t\t\tinventoryTabActive.active = false;\n\n\t\t\taddToFavorite = new TexturedButtonWidget(this.width / 2 + config.favoritePosX, this.height / 2 + config.favoritePosY, favoriteButtonWidth, favoriteButtonHeight, 0, favoriteButtonHeight, 0, FAVORITE_BUTTON_TEXTURE, favoriteButtonTextureWidth, favoriteButtonTextureHeight, button -> {\n\t\t\t\tString favoriteName = nameField.getText();\n\n\t\t\t\tString item = cutTranslationKey(currentItem);\n\n\t\t\t\tFile currentFile = new File(RPRenames.configPathFavorite + item + \".json\");\n\t\t\t\tboolean nameExist;\n\t\t\t\tArrayList<Rename> listNames = new ArrayList<>();", "\t\t\t\tif (currentFile.exists()) {\n\t\t\t\t\tRename alreadyExist = ConfigManager.configRead(currentFile);\n\t\t\t\t\tnameExist = Arrays.stream(alreadyExist.getName()).toList().contains(favoriteName);\n\t\t\t\t\tif (!nameExist) {\n\t\t\t\t\t\tString[] newConfig = new String[alreadyExist.getName().length + 1];\n\t\t\t\t\t\tint h = 0;\n\t\t\t\t\t\twhile (h < alreadyExist.getName().length) {\n\t\t\t\t\t\t\tnewConfig[h] = alreadyExist.getName()[h];\n\t\t\t\t\t\t\th++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewConfig[h] = favoriteName;\n\n\t\t\t\t\t\tRename newRename = new Rename(newConfig);\n\t\t\t\t\t\tlistNames.add(newRename);\n\t\t\t\t\t}\n\t\t\t\t} else {", "\t\t\t\t\tif (new File(RPRenames.configPathFavorite).mkdirs()) {\n\t\t\t\t\t\tSystem.out.println(\"[RPR] Created folder for favorites config: \" + RPRenames.configPathFavorite);\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"[RPR] Created new file for favorites config: \" + RPRenames.configPathFavorite + item + \".json\");\n\t\t\t\t\tRename name1 = new Rename(new String[]{favoriteName});\n\t\t\t\t\tlistNames.add(name1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tFileWriter fileWriter = new FileWriter(currentFile);\n\t\t\t\t\tGson gson = new Gson();\n\t\t\t\t\tgson.toJson(listNames, fileWriter);\n\t\t\t\t\tfileWriter.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\n\t\t\t\tfeaturedButtonsUpdate(nameField.getText());", "\t\t\t\ttry {\n\t\t\t\t\tFileWriter fileWriter = new FileWriter(currentFile);\n\t\t\t\t\tGson gson = new Gson();\n\t\t\t\t\tgson.toJson(listNames, fileWriter);\n\t\t\t\t\tfileWriter.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\n\t\t\t\tfeaturedButtonsUpdate(nameField.getText());\n\t\t\t\tif (open) {\n\t\t\t\t\tscreenUpdate(page);\n\t\t\t\t}\n\t\t\t});\n\t\t\tremoveFromFavorite = new TexturedButtonWidget(this.width / 2 + config.favoritePosX, this.height / 2 + config.favoritePosY, favoriteButtonWidth, favoriteButtonHeight, 0, 0, 0, FAVORITE_BUTTON_TEXTURE, favoriteButtonTextureWidth, favoriteButtonTextureHeight, button -> {\n\t\t\t\tString favoriteName = nameField.getText();\n\n\t\t\t\tString item = cutTranslationKey(currentItem);\n\n\t\t\t\tFile currentFile = new File(RPRenames.configPathFavorite + item + \".json\");\n\t\t\t\tRename alreadyExist = ConfigManager.configRead(currentFile);\n\t\t\t\tArrayList<String> alreadyExistList = new ArrayList<>(Arrays.stream(alreadyExist.getName()).toList());\n\t\t\t\talreadyExistList.remove(favoriteName);\n\n\t\t\t\tString[] newConfig = new String[alreadyExistList.size()];", "\t\t\t\tif (open) {\n\t\t\t\t\tscreenUpdate(page);\n\t\t\t\t}\n\t\t\t});\n\t\t\tremoveFromFavorite = new TexturedButtonWidget(this.width / 2 + config.favoritePosX, this.height / 2 + config.favoritePosY, favoriteButtonWidth, favoriteButtonHeight, 0, 0, 0, FAVORITE_BUTTON_TEXTURE, favoriteButtonTextureWidth, favoriteButtonTextureHeight, button -> {\n\t\t\t\tString favoriteName = nameField.getText();\n\n\t\t\t\tString item = cutTranslationKey(currentItem);\n\n\t\t\t\tFile currentFile = new File(RPRenames.configPathFavorite + item + \".json\");\n\t\t\t\tRename alreadyExist = ConfigManager.configRead(currentFile);\n\t\t\t\tArrayList<String> alreadyExistList = new ArrayList<>(Arrays.stream(alreadyExist.getName()).toList());\n\t\t\t\talreadyExistList.remove(favoriteName);\n\n\t\t\t\tString[] newConfig = new String[alreadyExistList.size()];", "\t\t\t\tfor (int i = 0; i < alreadyExistList.size(); i++) {\n\t\t\t\t\tnewConfig[i] = alreadyExistList.get(i);\n\t\t\t\t}\n\n\t\t\t\tif (newConfig.length > 0) {\n\t\t\t\t\tRename newRename = new Rename(newConfig);\n\t\t\t\t\tArrayList<Rename> listFiles = new ArrayList<>();\n\t\t\t\t\tlistFiles.add(newRename);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tFileWriter fileWriter = new FileWriter(currentFile);\n\t\t\t\t\t\tGson gson = new Gson();\n\t\t\t\t\t\tgson.toJson(listFiles, fileWriter);\n\t\t\t\t\t\tfileWriter.close();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t} else {", "\t\t\t\t\ttry {\n\t\t\t\t\t\tFileWriter fileWriter = new FileWriter(currentFile);\n\t\t\t\t\t\tGson gson = new Gson();\n\t\t\t\t\t\tgson.toJson(listFiles, fileWriter);\n\t\t\t\t\t\tfileWriter.close();\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tFiles.deleteIfExists(currentFile.toPath());\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfeaturedButtonsUpdate(nameField.getText());", "\t\t\t\t\ttry {\n\t\t\t\t\t\tFiles.deleteIfExists(currentFile.toPath());\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfeaturedButtonsUpdate(nameField.getText());\n\t\t\t\tif (open) {\n\t\t\t\t\tscreenUpdate(page);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsearchField = new TextFieldWidget(renderer, this.width / 2 - 204, this.height / 2 - 68, 100, 10, Text.of(\"\"));\n\t\t\tsearchField.setChangedListener(this::onSearch);\n\t\t\tsearchField.setDrawsBackground(false);\n\n\t\t\tscreenUpdate();\n\t\t}\n\t}\n\n\tprivate void switchOpen() {", "\t\t\t\tif (open) {\n\t\t\t\t\tscreenUpdate(page);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tsearchField = new TextFieldWidget(renderer, this.width / 2 - 204, this.height / 2 - 68, 100, 10, Text.of(\"\"));\n\t\t\tsearchField.setChangedListener(this::onSearch);\n\t\t\tsearchField.setDrawsBackground(false);\n\n\t\t\tscreenUpdate();\n\t\t}\n\t}\n\n\tprivate void switchOpen() {", "\t\tif (!open) {\n\t\t\topen = true;\n\t\t\tRPRenames.LOGGER.info(\"Opening RPRenames Menu\");\n\t\t\tscreenUpdate();\n\t\t} else {\n\t\t\topen = false;\n\t\t\tclearAll();\n\t\t\tsearchField.setTextFieldFocused(false);\n\t\t\tsearchField.setFocusUnlocked(false);\n\t\t\tsearchField.setText(\"\");\n\t\t\tremove(searchField);\n\t\t\tnameField.setTextFieldFocused(true);\n\t\t\tnameField.setFocusUnlocked(false);\n\t\t\tremove(openerOpened);\n\t\t\tremove(searchTab);\n\t\t\tremove(favoriteTab);\n\t\t\tremove(searchTabActive);\n\t\t\tremove(favoriteTabActive);\n\t\t\tcurrentTab = Tabs.SEARCH;\n\t\t\tRPRenames.LOGGER.info(\"Closing RPRenames Menu\");\n\t\t}\n\t}\n\n\tprivate void screenUpdate() {\n\t\tscreenUpdate(0);\n\t}\n\n\tprivate void screenUpdate(int savedPage) {\n\t\tclearAll();\n\t\tpage = savedPage;\n\t\topener.active = true;\n\t\tmobName.clear();", "\t\tif (afterInventoryTab) {\n\t\t\tcurrentTab = Tabs.INVENTORY;\n\t\t\tpage = tempPage;\n\t\t}\n\t\tboolean showOpenerMinus = false;\n\t\tboolean showOpenerPlus = false;\n\t\tFile jsonRenamesClient = new File(RPRenames.configPathClient + RPRenames.configPathNameCIT + \"/\" + cutTranslationKey(currentItem) + \".json\");\n\t\tFile jsonRenamesServer = new File(RPRenames.configPathServer + RPRenames.configPathNameCIT + \"/\" + cutTranslationKey(currentItem) + \".json\");\n\t\tFile jsonRenamesFavorite = new File(RPRenames.configPathFavorite + cutTranslationKey(currentItem) + \".json\");\n\t\tboolean clientConfigReadable = jsonRenamesClient.exists();\n\t\tboolean serverConfigReadable = jsonRenamesServer.exists();\n\t\tboolean clientConfigCEMReadable = RPRenames.configClientCEMFolder.exists();\n\t\tboolean serverConfigCEMReadable = RPRenames.configServerCEMFolder.exists();", "\t\tif (!isOnServer) {\n\t\t\tserverConfigReadable = false;\n\t\t\tserverConfigCEMReadable = false;\n\t\t}\n\t\tString actualSearch = searchField.getText();\n\t\tcurrentItemHasRenames = true;\n\t\tif (!currentItem.equals(\"air\")) {\n\t\t\tshowOpenerPlus = true;\n\t\t\tif (clientConfigReadable || serverConfigReadable) {\n\t\t\t\tif (currentTab == Tabs.SEARCH) {\n\t\t\t\t\tList<String> list1 = new ArrayList<>();\n\t\t\t\t\tList<String> list2 = new ArrayList<>();", "\t\t\tif (clientConfigReadable || serverConfigReadable) {\n\t\t\t\tif (currentTab == Tabs.SEARCH) {\n\t\t\t\t\tList<String> list1 = new ArrayList<>();\n\t\t\t\t\tList<String> list2 = new ArrayList<>();\n\t\t\t\t\tif (clientConfigReadable) {\n\t\t\t\t\t\tlist1 = Arrays.stream(search(ConfigManager.configRead(jsonRenamesClient).getName(), actualSearch)).toList();\n\t\t\t\t\t}\n\t\t\t\t\tif (serverConfigReadable) {\n\t\t\t\t\t\tlist2 = Arrays.stream(search(ConfigManager.configRead(jsonRenamesServer).getName(), actualSearch)).toList();\n\t\t\t\t\t}\n\t\t\t\t\tString[] list3 = new String[list1.size() + list2.size()];\n\t\t\t\t\tint n = 0;", "\t\t\t\t\tfor (String s : list1) {\n\t\t\t\t\t\tlist3[n] = s;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t}\n\t\t\t\t\tfor (String s : list2) {\n\t\t\t\t\t\tlist3[n] = s;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentRenameList = new Rename(list3);\n\t\t\t\t\tif (cutTranslationKey(currentItem).equals(\"name_tag\") && !config.ignoreCEM) {\n\t\t\t\t\t\tcitSize = currentRenameList.getName().length;\n\t\t\t\t\t\tList<ArrayList<String>> settings = getCEM(currentRenameList, clientConfigCEMReadable, serverConfigCEMReadable, actualSearch);\n\t\t\t\t\t\tString[] finalList = new String[settings.get(1).size() + settings.get(0).size()];\n\t\t\t\t\t\tint g = 0;", "\t\t\t\t\tif (cutTranslationKey(currentItem).equals(\"name_tag\") && !config.ignoreCEM) {\n\t\t\t\t\t\tcitSize = currentRenameList.getName().length;\n\t\t\t\t\t\tList<ArrayList<String>> settings = getCEM(currentRenameList, clientConfigCEMReadable, serverConfigCEMReadable, actualSearch);\n\t\t\t\t\t\tString[] finalList = new String[settings.get(1).size() + settings.get(0).size()];\n\t\t\t\t\t\tint g = 0;\n\t\t\t\t\t\tfor (String s : settings.get(1)) {\n\t\t\t\t\t\t\tfinalList[g] = s;\n\t\t\t\t\t\t\tg++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tg = 0;\n\t\t\t\t\t\tfor (String s : settings.get(0)) {\n\t\t\t\t\t\t\tfinalList[settings.get(1).size() + g] = s;\n\t\t\t\t\t\t\tg++;\n\t\t\t\t\t\t}", "\t\t\t\t\t\tfor (String s : settings.get(0)) {\n\t\t\t\t\t\t\tfinalList[settings.get(1).size() + g] = s;\n\t\t\t\t\t\t\tg++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (g != 0) {\n\t\t\t\t\t\t\tcurrentRenameList = new Rename(finalList);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if ((clientConfigCEMReadable || serverConfigCEMReadable) && cutTranslationKey(currentItem).equals(\"name_tag\") && !config.ignoreCEM) {\n\t\t\t\tif (currentTab == Tabs.SEARCH) {\n\t\t\t\t\tcitSize = 0;\n\t\t\t\t\tList<ArrayList<String>> settings = getCEM(currentRenameList, clientConfigCEMReadable, serverConfigCEMReadable, actualSearch);\n\t\t\t\t\tString[] finalList = new String[settings.get(0).size()];\n\t\t\t\t\tint g = 0;", "\t\t\t} else if ((clientConfigCEMReadable || serverConfigCEMReadable) && cutTranslationKey(currentItem).equals(\"name_tag\") && !config.ignoreCEM) {\n\t\t\t\tif (currentTab == Tabs.SEARCH) {\n\t\t\t\t\tcitSize = 0;\n\t\t\t\t\tList<ArrayList<String>> settings = getCEM(currentRenameList, clientConfigCEMReadable, serverConfigCEMReadable, actualSearch);\n\t\t\t\t\tString[] finalList = new String[settings.get(0).size()];\n\t\t\t\t\tint g = 0;\n\t\t\t\t\tfor (String s : settings.get(0)) {\n\t\t\t\t\t\tfinalList[g] = s;\n\t\t\t\t\t\tg++;\n\t\t\t\t\t}\n\t\t\t\t\tcurrentRenameList = new Rename(finalList);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshowOpenerMinus = true;\n\t\t\t\tcurrentItemHasRenames = false;", "\t\t\t\tif (currentTab == Tabs.SEARCH) {\n\t\t\t\t\tcurrentTab = Tabs.FAVORITE;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tshowOpenerMinus = true;\n\t\t\tif (currentTab == Tabs.SEARCH || currentTab == Tabs.FAVORITE) {\n\t\t\t\tcurrentTab = Tabs.INVENTORY;\n\t\t\t}\n\t\t}\n", "\t\tif (!showOpenerPlus) {\n\t\t\tcurrentItemList = getInventory();\n\t\t\tcurrentInvOrder.clear();\n\t\t\tArrayList<String> checked = new ArrayList<>();\n\t\t\tfor (String s : currentItemList) {\n\t\t\t\tString item = cutTranslationKey(s);\n\t\t\t\tif (!item.equals(\"air\") && !checked.contains(item)) {\n\t\t\t\t\tFile jsonRenamesClientLocal = new File(RPRenames.configPathClient + RPRenames.configPathNameCIT + \"/\" + item + \".json\");\n\t\t\t\t\tFile jsonRenamesServerLocal = new File(RPRenames.configPathServer + RPRenames.configPathNameCIT + \"/\" + item + \".json\");\n\t\t\t\t\tboolean clientConfigReadableLocal = jsonRenamesClientLocal.exists();\n\t\t\t\t\tboolean serverConfigReadableLocal = jsonRenamesServerLocal.exists();\n\t\t\t\t\tboolean clientConfigCEMReadableLocal = RPRenames.configClientCEMFolder.exists();\n\t\t\t\t\tboolean serverConfigCEMReadableLocal = RPRenames.configServerCEMFolder.exists();", "\t\t\t\t\tif (!isOnServer) {\n\t\t\t\t\t\tserverConfigReadableLocal = false;\n\t\t\t\t\t\tserverConfigCEMReadableLocal = false;\n\t\t\t\t\t}\n\t\t\t\t\tif (!item.equals(\"name_tag\")) {\n\t\t\t\t\t\tclientConfigCEMReadableLocal = false;\n\t\t\t\t\t\tserverConfigCEMReadableLocal = false;\n\t\t\t\t\t}\n\t\t\t\t\tchecked.add(item);\n\t\t\t\t\tif (clientConfigReadableLocal || serverConfigReadableLocal || clientConfigCEMReadableLocal || serverConfigCEMReadableLocal) {\n\t\t\t\t\t\tshowOpenerPlus = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n", "\t\t\t\t\tif (clientConfigReadableLocal || serverConfigReadableLocal || clientConfigCEMReadableLocal || serverConfigCEMReadableLocal) {\n\t\t\t\t\t\tshowOpenerPlus = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentTab == Tabs.FAVORITE) {\n\t\t\tif (jsonRenamesFavorite.exists()) {\n\t\t\t\tcurrentRenameList = new Rename(search(ConfigManager.configRead(jsonRenamesFavorite).getName(), actualSearch));\n\t\t\t} else {\n\t\t\t\tcurrentRenameList = new Rename(new String[0]);\n\t\t\t}\n\t\t}", "\t\tif (currentTab == Tabs.FAVORITE) {\n\t\t\tif (jsonRenamesFavorite.exists()) {\n\t\t\t\tcurrentRenameList = new Rename(search(ConfigManager.configRead(jsonRenamesFavorite).getName(), actualSearch));\n\t\t\t} else {\n\t\t\t\tcurrentRenameList = new Rename(new String[0]);\n\t\t\t}\n\t\t}\n\t\tif (currentTab == Tabs.INVENTORY) {\n\t\t\tcurrentItemList = getInventory();\n\t\t\tArrayList<String> checked = new ArrayList<>();\n\t\t\tArrayList<String> names = new ArrayList<>();\n\t\t\tArrayList<Integer> numInInv = new ArrayList<>();\n\t\t\tint i = 0;", "\t\t\tfor (String s : currentItemList) {\n\t\t\t\tString item = cutTranslationKey(s);\n\t\t\t\tString itemSearchTag = \"\";\n\t\t\t\tif (searchField.getText().startsWith(\"+\")) {\n\t\t\t\t\titemSearchTag = searchField.getText().substring(1);\n\t\t\t\t}\n\t\t\t\tif (!item.equals(\"air\") && !checked.contains(item) && item.toUpperCase(Locale.ROOT).contains(itemSearchTag.toUpperCase(Locale.ROOT))) {\n\t\t\t\t\tFile jsonRenamesClientLocal = new File(RPRenames.configPathClient + RPRenames.configPathNameCIT + \"/\" + item + \".json\");\n\t\t\t\t\tFile jsonRenamesServerLocal = new File(RPRenames.configPathServer + RPRenames.configPathNameCIT + \"/\" + item + \".json\");\n\t\t\t\t\tboolean clientConfigReadableLocal = jsonRenamesClientLocal.exists();\n\t\t\t\t\tboolean serverConfigReadableLocal = jsonRenamesServerLocal.exists();\n\t\t\t\t\tboolean clientConfigCEMReadableLocal = RPRenames.configClientCEMFolder.exists();\n\t\t\t\t\tboolean serverConfigCEMReadableLocal = RPRenames.configServerCEMFolder.exists();", "\t\t\t\t\tif (!isOnServer) {\n\t\t\t\t\t\tserverConfigReadableLocal = false;\n\t\t\t\t\t\tserverConfigCEMReadableLocal = false;\n\t\t\t\t\t}\n\t\t\t\t\tchecked.add(item);\n\t\t\t\t\tif (clientConfigReadableLocal) {\n\t\t\t\t\t\tList<String> c = Arrays.stream(new Rename(search(ConfigManager.configRead(jsonRenamesClientLocal).getName(), searchTag)).getName()).toList();\n\t\t\t\t\t\tfor (String name : c) {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t\tnumInInv.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}", "\t\t\t\t\tif (serverConfigReadableLocal) {\n\t\t\t\t\t\tList<String> c = Arrays.stream(new Rename(search(ConfigManager.configRead(jsonRenamesServerLocal).getName(), searchTag)).getName()).toList();\n\t\t\t\t\t\tfor (String name : c) {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t\tnumInInv.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (item.equals(\"name_tag\") && !config.ignoreCEM) {\n\t\t\t\t\t\tList<ArrayList<String>> settings = getCEM(currentRenameList, clientConfigCEMReadableLocal, serverConfigCEMReadableLocal, searchTag);\n\t\t\t\t\t\tcitSize = names.size();\n\t\t\t\t\t\tfor (String name : settings.get(0)) {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t\tnumInInv.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcurrentRenameList = new Rename(names.toArray(new String[0]));\n\t\t\tcurrentInvOrder = numInInv;\n\t\t}\n", "\t\t\t\t\t\tfor (String name : settings.get(0)) {\n\t\t\t\t\t\t\tnames.add(name);\n\t\t\t\t\t\t\tnumInInv.add(i);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcurrentRenameList = new Rename(names.toArray(new String[0]));\n\t\t\tcurrentInvOrder = numInInv;\n\t\t}\n", "\t\tif (page >= (currentRenameList.getName().length + 4) / 5) {\n\t\t\tpage = ((currentRenameList.getName().length + 4) / 5) - 1;\n\t\t\tif (page == -1) {\n\t\t\t\tpage = 0;\n\t\t\t}\n\t\t}\n\t\tcurrentRenameListSize = currentRenameList.getName().length;\n\t\tbuttonsDefine();\n\t\tclearAll();\n\t\tif (showOpenerMinus) {\n\t\t\treloadButton(openerMinus);\n\t\t}", "\t\tif (showOpenerMinus) {\n\t\t\treloadButton(openerMinus);\n\t\t}\n\t\tif (showOpenerPlus) {\n\t\t\treloadButton(openerPlus);\n\t\t}\n\n\t\tif (open) {\n\t\t\treloadButton(background);\n\t\t\treloadButton(openerOpened);\n\t\t\tshowButtons();\n\t\t\tupdatePageWidgets();\n\t\t\taddDrawableChild(searchField);\n\t\t\tsearchField.setFocusUnlocked(true);\n\t\t\tnameField.setTextFieldFocused(false);\n\t\t\tnameField.setFocusUnlocked(true);\n\t\t\ttabsUpdate();\n\t\t}\n\t}\n\n\tArrayList<String> modelsArray = new ArrayList<>();\n\n\tprivate List<ArrayList<String>> getCEM(Rename currentRenameList, boolean clientConfigCEMReadable, boolean serverConfigCEMReadable, String searchTag) {", "\t\tif (clientConfigCEMReadable) {\n\t\t\ttry {\n\t\t\t\tFiles.walk(Path.of(RPRenames.configPathClient + RPRenames.configPathNameCEM), new FileVisitOption[0]).filter(path -> path.toString().endsWith(\".json\")).forEach((jsonFile) -> addToMobName(jsonFile, searchTag));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tif (serverConfigCEMReadable) {\n\t\t\ttry {\n\t\t\t\tFiles.walk(Path.of(RPRenames.configPathServer + RPRenames.configPathNameCEM), new FileVisitOption[0]).filter(path -> path.toString().endsWith(\".json\")).forEach((jsonFile) -> addToMobName(jsonFile, searchTag));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tArrayList<String> citWithoutModels = new ArrayList<>();", "\t\t\ttry {\n\t\t\t\tFiles.walk(Path.of(RPRenames.configPathServer + RPRenames.configPathNameCEM), new FileVisitOption[0]).filter(path -> path.toString().endsWith(\".json\")).forEach((jsonFile) -> addToMobName(jsonFile, searchTag));\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tArrayList<String> citWithoutModels = new ArrayList<>();\n\t\tif (currentRenameList != null) {\n\t\t\tfor (String s : currentRenameList.getName()) {\n\t\t\t\tif (!modelsArray.contains(s)) {\n\t\t\t\t\tcitWithoutModels.add(s);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<ArrayList<String>> settings = new ArrayList<>();\n\t\tsettings.add(new ArrayList<>(modelsArray));\n\t\tsettings.add(citWithoutModels);\n\t\tmodelsArray.clear();\n\t\treturn settings;\n\t}\n\n\tprivate void addToMobName(Path jsonFile, String searchTag) {\n\t\tFile file = new File(String.valueOf(jsonFile));\n\t\tboolean isValid = false;", "\t\t\tfor (String s : currentRenameList.getName()) {\n\t\t\t\tif (!modelsArray.contains(s)) {\n\t\t\t\t\tcitWithoutModels.add(s);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tList<ArrayList<String>> settings = new ArrayList<>();\n\t\tsettings.add(new ArrayList<>(modelsArray));\n\t\tsettings.add(citWithoutModels);\n\t\tmodelsArray.clear();\n\t\treturn settings;\n\t}\n\n\tprivate void addToMobName(Path jsonFile, String searchTag) {\n\t\tFile file = new File(String.valueOf(jsonFile));\n\t\tboolean isValid = false;", "\t\tfor (EntityType<?> entityType : CEMList.mobs) {\n\t\t\tif (entityType.getUntranslatedName().equals(file.getName().substring(0, file.getName().length() - 5))) {\n\t\t\t\tisValid = true;\n\t\t\t}\n\t\t}\n\t\tif (!isValid) {\n\t\t\treturn;\n\t\t}\n\t\tfor (String s : search(ConfigManager.configRead(file).getName(), searchTag)) {\n\t\t\tif (!modelsArray.contains(s)) {\n\t\t\t\tmodelsArray.add(s);\n\t\t\t\tArrayList<String> mob = new ArrayList<>();\n\t\t\t\tmob.add(file.getName().substring(0, file.getName().length() - 5));\n\t\t\t\tmobName.add(mob);\n\t\t\t} else {\n\t\t\t\tint n = 0;", "\t\tfor (String s : search(ConfigManager.configRead(file).getName(), searchTag)) {\n\t\t\tif (!modelsArray.contains(s)) {\n\t\t\t\tmodelsArray.add(s);\n\t\t\t\tArrayList<String> mob = new ArrayList<>();\n\t\t\t\tmob.add(file.getName().substring(0, file.getName().length() - 5));\n\t\t\t\tmobName.add(mob);\n\t\t\t} else {\n\t\t\t\tint n = 0;\n\t\t\t\tfor (String s2 : modelsArray) {\n\t\t\t\t\tif (s2.equals(s)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tn++;\n\t\t\t\t}\n\t\t\t\tArrayList<String> mob = mobName.get(n);\n\t\t\t\tmob.add(file.getName().substring(0, file.getName().length() - 5));\n\t\t\t\tmobName.set(n, mob);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Inject(at = @At(\"RETURN\"), method = \"onRenamed\")\n\tprivate void newNameEntered(String name, CallbackInfo ci) {", "\t\t\t\tfor (String s2 : modelsArray) {\n\t\t\t\t\tif (s2.equals(s)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tn++;\n\t\t\t\t}\n\t\t\t\tArrayList<String> mob = mobName.get(n);\n\t\t\t\tmob.add(file.getName().substring(0, file.getName().length() - 5));\n\t\t\t\tmobName.set(n, mob);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Inject(at = @At(\"RETURN\"), method = \"onRenamed\")\n\tprivate void newNameEntered(String name, CallbackInfo ci) {", "\t\tif (config.enableAnvilModification) {\n\t\t\tfeaturedButtonsUpdate(name);\n\t\t}\n\t}\n\n\tprivate void featuredButtonsUpdate(String name) {\n\t\tremove(addToFavorite);\n\t\tremove(removeFromFavorite);\n\t\tif (!name.isEmpty()) {\n\t\t\tFile file = new File(RPRenames.configPathFavorite + cutTranslationKey(currentItem) + \".json\");\n\t\t\tif (file.exists()) {\n\t\t\t\tString[] favoriteName = ConfigManager.configRead(file).getName();\n\t\t\t\tboolean nameExist = false;", "\t\tif (!name.isEmpty()) {\n\t\t\tFile file = new File(RPRenames.configPathFavorite + cutTranslationKey(currentItem) + \".json\");\n\t\t\tif (file.exists()) {\n\t\t\t\tString[] favoriteName = ConfigManager.configRead(file).getName();\n\t\t\t\tboolean nameExist = false;\n\t\t\t\tfor (String s : favoriteName) {\n\t\t\t\t\tif (name.equals(s)) {\n\t\t\t\t\t\tnameExist = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}", "\t\t\t\tif (nameExist) {\n\t\t\t\t\taddDrawableChild(removeFromFavorite);\n\t\t\t\t} else {\n\t\t\t\t\taddDrawableChild(addToFavorite);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddDrawableChild(addToFavorite);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Redirect(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/screen/ingame/AnvilScreen;init(Lnet/minecraft/client/MinecraftClient;II)V\"), method = \"resize\")\n\tprivate void onResize(AnvilScreen instance, MinecraftClient client, int width, int height){", "\t\tif (config.enableAnvilModification) {\n\t\t\tString tempSearchFieldText = searchField.getText();\n\t\t\tinstance.init(client, width, height);\n\t\t\tsearchField.setText(tempSearchFieldText);\n\t\t} else {\n\t\t\tinstance.init(client, width, height);\n\t\t}\n\t}\n\n\t@Redirect(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/gui/widget/TextFieldWidget;isActive()Z\"), method = \"keyPressed\")\n\tprivate boolean onKeyPressed(TextFieldWidget instance, int keyCode, int scanCode, int modifiers) {", "\t\tif (config.enableAnvilModification) {\n\t\t\tsearchField.keyPressed(keyCode, scanCode, modifiers);\n\t\t\treturn instance.isActive() || searchField.isActive();\n\t\t}\n\t\treturn instance.isActive();\n\t}\n\n\tArrayList<String> invChangeHandler = new ArrayList<>();\n\n\t@Inject(at = @At(\"RETURN\"), method = \"handledScreenTick\")\n\tprivate void onHandledScreenTick(CallbackInfo ci) {", "\t\tif (config.enableAnvilModification) {\n\t\t\tsearchField.tick();\n\t\t\tif (invChangeHandler.isEmpty()) {\n\t\t\t\tinvChangeHandler = getInventory();\n\t\t\t} else {\n\t\t\t\tArrayList<String> temp = getInventory();\n\t\t\t\tint i = 0;\n\t\t\t\tboolean equal = true;\n\t\t\t\twhile (i < temp.size() || i < invChangeHandler.size()) {\n\t\t\t\t\tif (invChangeHandler.size() > i && temp.size() > i) {\n\t\t\t\t\t\tif (!invChangeHandler.get(i).equals(temp.get(i))) {\n\t\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t}", "\t\t\t\twhile (i < temp.size() || i < invChangeHandler.size()) {\n\t\t\t\t\tif (invChangeHandler.size() > i && temp.size() > i) {\n\t\t\t\t\t\tif (!invChangeHandler.get(i).equals(temp.get(i))) {\n\t\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tequal = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\ti++;\n\t\t\t\t}", "\t\t\t\tif (!equal) {\n\t\t\t\t\tinvChangeHandler = temp;\n\t\t\t\t\tcurrentItemList = invChangeHandler;\n\t\t\t\t\tscreenUpdate(page);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t@Inject(at = @At(\"RETURN\"), method = \"onSlotUpdate\")\n\tprivate void itemUpdate(ScreenHandler handler, int slotId, ItemStack stack, CallbackInfo ci) {", "\t\tif (config.enableAnvilModification) {\n\t\t\tif (slotId == 0) {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\tcurrentItem = \"air\";\n\t\t\t\t\tsearchField.setText(\"\");\n\t\t\t\t\tsearchField.setFocusUnlocked(false);\n\t\t\t\t\tremove(searchField);\n\t\t\t\t\tsearchField.setTextFieldFocused(false);\n\t\t\t\t} else {\n\t\t\t\t\tcurrentItem = stack.getItem().getTranslationKey();\n\t\t\t\t\titemAfterUpdate = stack.copy();\n\t\t\t\t\tsearchField.setFocusUnlocked(true);\n\t\t\t\t\tcurrentTab = Tabs.SEARCH;\n\t\t\t\t\tfeaturedButtonsUpdate(nameField.getText());\n\t\t\t\t}\n\t\t\t\tscreenUpdate();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate ArrayList<String> getInventory() {\n\t\tArrayList<String> inventoryList = new ArrayList<>();\n\t\tassert MinecraftClient.getInstance().player != null;\n\t\tPlayerInventory inventory = MinecraftClient.getInstance().player.getInventory();", "\t\tfor (ItemStack itemStack : inventory.main) {\n\t\t\tinventoryList.add(itemStack.getItem().getTranslationKey());\n\t\t}\n\t\tinventoryList.add(currentItem);\n\t\treturn inventoryList;\n\t}\n\n\t@Inject(at = @At(\"RETURN\"), method = \"drawForeground\")\n\tprivate void frameUpdate (MatrixStack matrices, int mouseX, int mouseY, CallbackInfo ci) {\n\t\tif (config.enableAnvilModification) {\n\t\t\tif (open) {\n\t\t\t\tint xScreenOffset = (this.width - backgroundWidth) / 2;\n\t\t\t\tint yScreenOffset = (this.height - backgroundHeight) / 2;", "\t\tif (config.enableAnvilModification) {\n\t\t\tif (open) {\n\t\t\t\tint xScreenOffset = (this.width - backgroundWidth) / 2;\n\t\t\t\tint yScreenOffset = (this.height - backgroundHeight) / 2;\n\t\t\t\tfor (int n = 0; n < 5; n++) {\n\t\t\t\t\tbuttons.get(n).drawElements(matrices, mouseX, mouseY);\n\t\t\t\t}\n\t\t\t\tpageCount.setSize(12, 30);\n\t\t\t\tpageCount.setHorizontalAlignment(HorizontalAlignment.CENTER).paint(matrices, -76, 144, mouseX, mouseY);\n\t\t\t\tif (searchField != null) {\n\t\t\t\t\tif (!searchField.isFocused() && searchField.getText().isEmpty()) {\n\t\t\t\t\t\tdrawTextWithShadow(matrices, renderer, SEARCH_HINT_TEXT, -116, 15, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n", "\t\t\t\tif (searchField != null) {\n\t\t\t\t\tif (!searchField.isFocused() && searchField.getText().isEmpty()) {\n\t\t\t\t\t\tdrawTextWithShadow(matrices, renderer, SEARCH_HINT_TEXT, -116, 15, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!config.disablePageArrowsTips && InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT)) {\n\t\t\t\t\tMatrixStack matrixStack = new MatrixStack();\n\t\t\t\t\tmatrixStack.push();\n\t\t\t\t\tmatrixStack.translate(-xScreenOffset, -yScreenOffset, 0);\n\t\t\t\t\tif (pageUp.isMouseOver(mouseX, mouseY) && pageUp.isHovered()) {\n\t\t\t\t\t\trenderTooltip(matrixStack, Text.translatable(\"rprenames.gui.pageUp.toLast.tooltip\").copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY).withItalic(true)), mouseX, mouseY);", "\t\t\t\t\tif (pageUp.isMouseOver(mouseX, mouseY) && pageUp.isHovered()) {\n\t\t\t\t\t\trenderTooltip(matrixStack, Text.translatable(\"rprenames.gui.pageUp.toLast.tooltip\").copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY).withItalic(true)), mouseX, mouseY);\n\t\t\t\t\t} else if (pageDown.isMouseOver(mouseX, mouseY) && pageDown.isHovered()) {\n\t\t\t\t\t\trenderTooltip(matrixStack, Text.translatable(\"rprenames.gui.pageDown.toFirst.tooltip\").copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY).withItalic(true)), mouseX, mouseY);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (int n = 0; n < 5; n++) {\n\t\t\t\t\tif (buttons.get(n).getButton() != null) {\n\t\t\t\t\t\tif (buttons.get(n).getButton().isMouseOver(mouseX, mouseY) && buttons.get(n).getButton().isHovered() && buttons.get(n).isActive()) {\n\t\t\t\t\t\t\tMatrixStack matrixStack = new MatrixStack();\n\t\t\t\t\t\t\tmatrixStack.push();\n\t\t\t\t\t\t\tmatrixStack.translate(-xScreenOffset, -yScreenOffset, 0);\n\t\t\t\t\t\t\tArrayList<Text> lines = new ArrayList<>(buttons.get(n).getTooltip());", "\t\t\t\t\tif (buttons.get(n).getButton() != null) {\n\t\t\t\t\t\tif (buttons.get(n).getButton().isMouseOver(mouseX, mouseY) && buttons.get(n).getButton().isHovered() && buttons.get(n).isActive()) {\n\t\t\t\t\t\t\tMatrixStack matrixStack = new MatrixStack();\n\t\t\t\t\t\t\tmatrixStack.push();\n\t\t\t\t\t\t\tmatrixStack.translate(-xScreenOffset, -yScreenOffset, 0);\n\t\t\t\t\t\t\tArrayList<Text> lines = new ArrayList<>(buttons.get(n).getTooltip());\n\t\t\t\t\t\t\tif (!buttons.get(n).isCEM() && config.enablePreview) {\n\t\t\t\t\t\t\t\tif (!InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT) && !config.playerPreviewByDefault) {\n\t\t\t\t\t\t\t\t\tif (!config.disablePlayerPreviewTips) {\n\t\t\t\t\t\t\t\t\t\tlines.add(Text.translatable(\"rprenames.gui.playerPreviewTip.holdShift\").copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY).withItalic(true)));\n\t\t\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\t\t\tif (!config.disablePlayerPreviewTips) {\n\t\t\t\t\t\t\t\t\t\tlines.add(Text.translatable(\"rprenames.gui.playerPreviewTip.holdShift\").copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY).withItalic(true)));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (InputUtil.isKeyPressed(MinecraftClient.getInstance().getWindow().getHandle(), GLFW.GLFW_KEY_LEFT_SHIFT) != config.playerPreviewByDefault) {\n\t\t\t\t\t\t\t\t\tif (!config.disablePlayerPreviewTips) {\n\t\t\t\t\t\t\t\t\t\tlines.add(Text.translatable(\"rprenames.gui.playerPreviewTip.pressF\").copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY).withItalic(true)));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trenderTooltip(matrixStack, lines, mouseX, mouseY);\n\t\t\t\t\t\t\tif (currentTab == Tabs.INVENTORY && config.slotHighlightColorALPHA > 0) {\n\t\t\t\t\t\t\t\tbuttons.get(n).highlightSlot(matrices, currentInvOrder, getInventory(), currentItem, highlightColor);\n\t\t\t\t\t\t\t}", "\t\t\t\t\t\t\tif (currentTab == Tabs.INVENTORY && config.slotHighlightColorALPHA > 0) {\n\t\t\t\t\t\t\t\tbuttons.get(n).highlightSlot(matrices, currentInvOrder, getInventory(), currentItem, highlightColor);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (config.enablePreview) {\n\t\t\t\t\t\t\t\tbuttons.get(n).drawPreview(matrices, mouseX - xScreenOffset, mouseY - yScreenOffset, 52, 52, config.scaleFactorItem, config.scaleFactorEntity);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsearchField.setTextFieldFocused(false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void showButtons() {", "\t\tfor (int n = 0; n < 5; n++) {\n\t\t\tif (n + page * 5 <= currentRenameListSize - 1) {\n\t\t\t\taddDrawableChild(buttons.get(n).getButton());\n\t\t\t\tbuttons.get(n).setActive(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void hideButtons() {\n\t\tthis.remove(background);\n\t\tfor (int n = 0; n < 5; n++) {\n\t\t\tremove(buttons.get(n).getButton());\n\t\t\tbuttons.get(n).setActive(false);\n\t\t}\n\t}\n\n\tprivate void clearAll() {\n\t\tthis.remove(background);\n\t\tthis.remove(pageDown);\n\t\tthis.remove(pageUp);", "\t\tfor (int n = 0; n < 5; n++) {\n\t\t\tremove(buttons.get(n).getButton());\n\t\t\tbuttons.get(n).setActive(false);\n\t\t}\n\t}\n\n\tprivate void clearAll() {\n\t\tthis.remove(background);\n\t\tthis.remove(pageDown);\n\t\tthis.remove(pageUp);\n\t\tfor (int n = 0; n < 5; n++) {\n\t\t\tremove(buttons.get(n).getButton());\n\t\t\tbuttons.get(n).setActive(false);\n\t\t}\n\t\tpageCount.setText(Text.of(\"\"));\n\t\tremove(searchTab);\n\t\tremove(favoriteTab);\n\t\tremove(inventoryTab);\n\t\tremove(searchTabActive);\n\t\tremove(favoriteTabActive);\n\t\tremove(inventoryTabActive);\n\t\tremove(openerMinus);\n\t\tremove(openerPlus);\n\t}\n\n\tprivate void reloadButton(ClickableWidget button) {\n\t\tremove(button);\n\t\taddDrawableChild(button);\n\t}\n\n\tprivate void putInAnvil(int slotInInventory, MinecraftClient client) {\n\t\tslotInInventory = slotInInventory - 9;", "\t\tfor (int n = 0; n < 5; n++) {\n\t\t\tremove(buttons.get(n).getButton());\n\t\t\tbuttons.get(n).setActive(false);\n\t\t}\n\t\tpageCount.setText(Text.of(\"\"));\n\t\tremove(searchTab);\n\t\tremove(favoriteTab);\n\t\tremove(inventoryTab);\n\t\tremove(searchTabActive);\n\t\tremove(favoriteTabActive);\n\t\tremove(inventoryTabActive);\n\t\tremove(openerMinus);\n\t\tremove(openerPlus);\n\t}\n\n\tprivate void reloadButton(ClickableWidget button) {\n\t\tremove(button);\n\t\taddDrawableChild(button);\n\t}\n\n\tprivate void putInAnvil(int slotInInventory, MinecraftClient client) {\n\t\tslotInInventory = slotInInventory - 9;", "\t\tif (slotInInventory > 27) {\n\t\t\tslotInInventory -= 27;\n\t\t} else if (slotInInventory < 0) {\n\t\t\tslotInInventory += 36;\n\t\t}\n\t\tassert client.player != null;\n\t\tint syncId = client.player.currentScreenHandler.syncId;\n\t\tassert client.interactionManager != null;\n\t\tclient.interactionManager.clickSlot(syncId, slotInInventory + 3, 0, SlotActionType.PICKUP, client.player);\n\t\tclient.interactionManager.clickSlot(syncId, 0, 0, SlotActionType.PICKUP, client.player);\n\t\tclient.interactionManager.clickSlot(syncId, slotInInventory + 3, 0, SlotActionType.PICKUP, client.player);\n\t}\n\n\tprivate void createButton(int orderOnPage, Text text) {\n\t\tint orderInList = (page * 5) + orderOnPage;\n\t\tassert MinecraftClient.getInstance().player != null;\n\t\tPlayerInventory inventory = MinecraftClient.getInstance().player.getInventory();\n\t\tString item = currentTab == Tabs.INVENTORY && currentInvOrder.get(orderInList) != 36 ? inventory.main.get(currentInvOrder.get(orderInList)).copy().getItem().getTranslationKey() : currentItem;\n\t\tboolean favorite = RenameButton.calcFavorite(cutTranslationKey(item), text.getString());\n\t\tint v = favorite ? buttonHeight * 2 : 0;\n\n\t\tArrayList<Text> tooltip = new ArrayList<>();\n\t\ttooltip.add(text);\n\t\tboolean isCEM = false;\n\t\tString firstMob = null;", "\t\tif (currentTab == Tabs.INVENTORY) {\n\t\t\ttooltip.add(Text.of(config.translateItemNames ? Text.translatable(item).getString() : cutTranslationKey(item)).copy().fillStyle(Style.EMPTY.withColor(Formatting.DARK_AQUA)));\n\t\t}\n\t\tif (cutTranslationKey(item).equals(\"name_tag\") && orderInList + 1 > citSize && orderInList + 1 <= citSize + mobName.size()) {\n\t\t\tisCEM = true;\n\t\t\tfirstMob = mobName.get(orderInList - citSize).get(0);\n\t\t\tfor (String s : mobName.get(orderInList - citSize)) {\n\t\t\t\ttooltip.add(Text.of(config.translateMobNames ? Text.translatable(\"entity.minecraft.\" + s).getString() : s).copy().fillStyle(Style.EMPTY.withColor(Formatting.GRAY)));\n\t\t\t}\n\t\t}\n\n\t\tTexturedButtonWidget texturedButtonWidget = new TexturedButtonWidget(this.width / 2 - 218, this.height / 2 - 53 + (orderOnPage * (buttonHeight + buttonOffsetY)), buttonWidth, buttonHeight, 0, v, buttonHeight, BUTTON_TEXTURE, buttonTextureWidth, buttonTextureHeight, (button) -> {", "\t\t\tif (currentTab == Tabs.INVENTORY) {\n\t\t\t\tif (currentInvOrder.get(orderInList) != 36) {\n\t\t\t\t\tafterInventoryTab = true;\n\t\t\t\t\ttempPage = page;\n\t\t\t\t\tif (!currentItem.equals(item)) {\n\t\t\t\t\t\tputInAnvil(currentInvOrder.get(orderInList), MinecraftClient.getInstance());\n\t\t\t\t\t}\n\t\t\t\t\tafterInventoryTab = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tnameField.setText(text.getString());\n\t\t});\n\n\t\tItemStack itemStack = itemAfterUpdate == null ? null : itemAfterUpdate.copy();\n\t\tint mobInList = -1;", "\t\tif (isCEM) {\n\t\t\tint n = 0;\n\t\t\tfor (EntityType<?> entityType : CEMList.mobs) {\n\t\t\t\tString s = entityType.getUntranslatedName();\n\t\t\t\tif (s.equals(firstMob)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tn++;\n\t\t\t}\n\t\t\tmobInList = n;\n \t\t\titemStack = new ItemStack(CEMList.spawnEggItems[n]);\n\t\t} else {", "\t\t\tif (currentTab == Tabs.INVENTORY) {\n\t\t\t\tif (currentInvOrder.get(orderInList) != 36) {\n\t\t\t\t\titemStack = inventory.main.get(currentInvOrder.get(orderInList)).copy();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbuttons.get(orderOnPage).setParameters(texturedButtonWidget, text, itemStack, page, orderOnPage, isCEM, mobInList, tooltip);\n\t}\n\n\tprivate void buttonsDefine() {", "\t\tfor (int n = 0; n < 5; n++) {\n\t\t\tremove(buttons.get(n).getButton());\n\t\t\tbuttons.get(n).setActive(false);\n\t\t\tif (n + page * 5 <= currentRenameListSize - 1) {\n\t\t\t\tcreateButton(n, Text.of(currentRenameList.getName(n + page * 5)));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void updatePageWidgets() {\n\t\treloadButton(pageUp);\n\t\treloadButton(pageDown);\n\t\tpageDown.active = page != 0;\n\t\tpageUp.active = 5 + page * 5 <= currentRenameListSize - 1;\n\t\tpageCount.setText(Text.of(page + 1 + \"/\" + (currentRenameList.getName().length + 4) / 5));\n\t}\n\n\tprivate void tabsUpdate() {\n\t\treloadButton(searchTab);\n\t\treloadButton(favoriteTab);\n\t\treloadButton(inventoryTab);\n\t\tremove(searchTabActive);\n\t\tremove(favoriteTabActive);\n\t\tremove(inventoryTabActive);\n\t\tsearchTab.active = true;\n\t\tfavoriteTab.active = true;\n\t\tinventoryTab.active = true;", "\t\tif (currentTab == Tabs.SEARCH) {\n\t\t\taddDrawableChild(searchTabActive);\n\t\t\tsearchTab.active = false;\n\t\t} else if (currentTab == Tabs.FAVORITE) {\n\t\t\taddDrawableChild(favoriteTabActive);\n\t\t\tfavoriteTab.active = false;\n\t\t} else if (currentTab == Tabs.INVENTORY) {\n\t\t\taddDrawableChild(inventoryTabActive);\n\t\t\tinventoryTab.active = false;\n\t\t}\n\t\tif (!currentItemHasRenames) {\n\t\t\tsearchTab.active = false;\n\t\t}", "\t\tif (!currentItemHasRenames) {\n\t\t\tsearchTab.active = false;\n\t\t}\n\t\tif (currentItem.equals(\"air\")) {\n\t\t\tsearchTab.active = false;\n\t\t\tfavoriteTab.active = false;\n\t\t}\n\t}\n\n\tprivate void onSearch(String search) {\n\t\tif (search.startsWith(\"+\")) {\n\t\t\tsearchTag = \"\";\n\t\t} else {\n\t\t\tsearchTag = search;\n\t\t}\n\t\tscreenUpdate();\n\t}\n\n\tprivate String cutTranslationKey(String translationKey) {\n\t\tint i = translationKey.length() - 1;", "\t\tif (search.startsWith(\"+\")) {\n\t\t\tsearchTag = \"\";\n\t\t} else {\n\t\t\tsearchTag = search;\n\t\t}\n\t\tscreenUpdate();\n\t}\n\n\tprivate String cutTranslationKey(String translationKey) {\n\t\tint i = translationKey.length() - 1;\n\t\tif (translationKey.contains(\".\")) {", "\t\tif (translationKey.contains(\".\")) {\n\t\t\twhile (true) {\n\t\t\t\tif (String.valueOf(translationKey.charAt(i)).equals(\".\")) {\n\t\t\t\t\treturn translationKey.substring(i + 1);\n\t\t\t\t} else {\n\t\t\t\t\ti--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn translationKey;\n\t}\n\n\tprivate String[] search(String[] list, String match) {\n\t\tArrayList<String> arrayList = new ArrayList<>();\n\t\tint i = 0;\n\t\tint g = 0;", "\t\tif (match.contains(\"*\")) {\n\t\t\twhile (!String.valueOf(match.charAt(g)).equals(\"*\")) {\n\t\t\t\tg++;\n\t\t\t}\n\t\t\tint h = g;\n\t\t\tdo {\n\t\t\t\th++;\n\t\t\t} while ((!String.valueOf(match.charAt(h - 1)).equals(\"*\") || h != match.length()) && (String.valueOf(match.charAt(h)).equals(\"*\")));\n\t\t\twhile (i < list.length) {\n\t\t\t\tif (list[i].startsWith(match.substring(0,g)) && list[i].contains(match.substring(h))) {\n\t\t\t\t\tarrayList.add(list[i]);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t} else {", "\t\t\twhile (i < list.length) {\n\t\t\t\tif (list[i].startsWith(match.substring(0,g)) && list[i].contains(match.substring(h))) {\n\t\t\t\t\tarrayList.add(list[i]);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (i < list.length) {\n\t\t\t\tif (list[i].toUpperCase(Locale.ROOT).startsWith(match.toUpperCase(Locale.ROOT))) {\n\t\t\t\t\tarrayList.add(list[i]);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\tString[] cutList = new String[arrayList.size()];\n\t\tint k = 0;", "\t\t\t\tif (list[i].toUpperCase(Locale.ROOT).startsWith(match.toUpperCase(Locale.ROOT))) {\n\t\t\t\t\tarrayList.add(list[i]);\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\tString[] cutList = new String[arrayList.size()];\n\t\tint k = 0;\n\t\twhile (k < arrayList.size()) {\n\t\t\tcutList[k] = arrayList.get(k);\n\t\t\tk++;\n\t\t}\n\t\treturn cutList;\n\t}\n}", "\t\twhile (k < arrayList.size()) {\n\t\t\tcutList[k] = arrayList.get(k);\n\t\t\tk++;\n\t\t}\n\t\treturn cutList;\n\t}\n}"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/mixin/ClientBuiltinResourcePackProviderMixin.java", "chunked_list": ["package com.HiWord9.RPRenames.mixin;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.modConfig.ModConfig;\nimport net.minecraft.client.resource.ClientBuiltinResourcePackProvider;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n", "import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\nimport java.net.URL;\nimport java.util.concurrent.CompletableFuture;\n\n@Mixin(ClientBuiltinResourcePackProvider.class)\npublic abstract class ClientBuiltinResourcePackProviderMixin {\n    private static final ModConfig config = ModConfig.INSTANCE;\n\n    @Inject(at = @At(\"RETURN\"), method = \"download\")\n    private void serverResourcePackConfigCreator(URL url, String packSha1, boolean closeAfterDownload, CallbackInfoReturnable<CompletableFuture<?>> cir){", "        if (config.updateConfig) {\n            RPRenames.serverResourcePackURL = url;\n        }\n    }\n}"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/mixin/MinecraftClientMixin.java", "chunked_list": ["package com.HiWord9.RPRenames.mixin;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.configGeneration.ConfigManager;\nimport com.HiWord9.RPRenames.modConfig.ModConfig;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.client.gui.screen.pack.ResourcePackOrganizer;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;", "import org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;\n\nimport java.io.File;\nimport java.util.concurrent.CompletableFuture;\n\n@Mixin(MinecraftClient.class)\npublic abstract class MinecraftClientMixin {\n    private static final ModConfig config = ModConfig.INSTANCE;\n\n    @Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;disconnect(Lnet/minecraft/client/gui/screen/Screen;)V\"), method = \"disconnect*\")\n    private void serverResourcePackConfigDeleter(CallbackInfo ci){", "@Mixin(MinecraftClient.class)\npublic abstract class MinecraftClientMixin {\n    private static final ModConfig config = ModConfig.INSTANCE;\n\n    @Inject(at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/client/MinecraftClient;disconnect(Lnet/minecraft/client/gui/screen/Screen;)V\"), method = \"disconnect*\")\n    private void serverResourcePackConfigDeleter(CallbackInfo ci){\n        if (config.updateConfig) {\n            if (new File(RPRenames.configPathServer).exists()) {\n                ConfigManager.configDelete(RPRenames.configPathServer);\n            }\n            RPRenames.serverResourcePackURL = null;\n        }\n    }\n\n    @Inject(method = \"reloadResources(Z)Ljava/util/concurrent/CompletableFuture;\", at = @At(\"RETURN\"))\n    private void onReloadResources(CallbackInfoReturnable<CompletableFuture<Void>> cir) {", "        if (config.updateConfig) {\n            RPRenames.LOGGER.info(\"Starting recreating RPR Config\");\n            ConfigManager.configUpdate();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/configGeneration/CITConfig.java", "chunked_list": ["package com.HiWord9.RPRenames.configGeneration;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.Rename;\nimport com.google.gson.Gson;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.ArrayList;", "import java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.Properties;\n\npublic class CITConfig {\n\n    public static void propertiesToJson(Properties p, String outputPath) {\n        String items = p.getProperty(\"matchItems\");\n        if (items == null) {\n            items = p.getProperty(\"items\");\n        }", "    public static void propertiesToJson(Properties p, String outputPath) {\n        String items = p.getProperty(\"matchItems\");\n        if (items == null) {\n            items = p.getProperty(\"items\");\n        }\n        if (items != null) {\n            while (items.endsWith(\" \")) {\n                items = items.substring(0, items.length() - 1);\n            }\n            String item = null;\n            boolean finish = false;", "            while (!finish) {\n                int i = 0;\n                while (i < items.length()) {\n                    if (String.valueOf(items.charAt(i)).equals(\" \")) {\n                        item = items.substring(0, i);\n                        items = items.substring(i + 1);\n                        finish = false;\n                        break;\n                    }\n                    i++;\n                    finish = true;\n                }", "                if (finish) {\n                    item = items;\n                }\n\n                item = Objects.requireNonNull(item).replace(\"minecraft:\", \"\");\n\n                File currentFile = new File(outputPath + item + \".json\");\n                if (currentFile.exists() && p.getProperty(\"nbt.display.Name\") != null) {\n                    Rename alreadyExist = ConfigManager.configRead(currentFile);\n                    String[] ae = alreadyExist.getName();\n                    if (!Arrays.stream(ae).toList().contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {\n                        int AEsize = ae.length;\n                        String[] newConfig = new String[AEsize + 1];\n                        int h = 0;", "                    if (!Arrays.stream(ae).toList().contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {\n                        int AEsize = ae.length;\n                        String[] newConfig = new String[AEsize + 1];\n                        int h = 0;\n                        while (h < AEsize) {\n                            newConfig[h] = ae[h];\n                            h++;\n                        }\n                        newConfig[h] = ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\"));\n\n                        Rename newRename = new Rename(newConfig);\n                        ArrayList<Rename> listFiles = new ArrayList<>();\n                        listFiles.add(newRename);\n", "                        try {\n                            FileWriter fileWriter = new FileWriter(currentFile);\n                            Gson gson = new Gson();\n                            gson.toJson(listFiles, fileWriter);\n                            fileWriter.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                } else {\n                    if (p.getProperty(\"nbt.display.Name\") != null) {\n                        new File(outputPath).mkdirs();", "                    if (p.getProperty(\"nbt.display.Name\") != null) {\n                        new File(outputPath).mkdirs();\n                        try {\n                            RPRenames.LOGGER.info(\"Created new file for config: \" + outputPath + item + \".json\");\n                            ArrayList<Rename> listNames = new ArrayList<>();\n                            Rename name1 = new Rename(new String[]{ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\"))});\n                            listNames.add(name1);\n                            FileWriter fileWriter = new FileWriter(currentFile);\n                            Gson gson = new Gson();\n                            gson.toJson(listNames, fileWriter);\n                            fileWriter.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/configGeneration/ConfigManager.java", "chunked_list": ["package com.HiWord9.RPRenames.configGeneration;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.Rename;\nimport com.google.common.hash.Hashing;\nimport com.google.common.reflect.TypeToken;\nimport com.google.gson.Gson;\nimport net.minecraft.client.MinecraftClient;\nimport net.minecraft.resource.ResourcePackProfile;\nimport net.minecraft.util.Util;", "import net.minecraft.resource.ResourcePackProfile;\nimport net.minecraft.util.Util;\nimport org.apache.commons.io.FileUtils;\n\nimport java.io.*;\nimport java.lang.reflect.Type;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.FileSystem;\nimport java.nio.file.*;", "import java.nio.file.FileSystem;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class ConfigManager {\n\n    public static ArrayList<Rename> theList;\n\n    public static void configUpdate() {\n        configUpdate(MinecraftClient.getInstance().getResourcePackManager().getEnabledProfiles().stream().toList());\n    }\n", "    public static void configUpdate() {\n        configUpdate(MinecraftClient.getInstance().getResourcePackManager().getEnabledProfiles().stream().toList());\n    }\n\n    public static void configUpdate(List<ResourcePackProfile> enabledPacks) {\n        ArrayList<String> packs = new ArrayList<>();\n        for (ResourcePackProfile rpp : enabledPacks) {\n            packs.add(rpp.getName());\n        }\n        configUpdate(packs);\n    }\n", "    public static void configUpdate(ArrayList<String> enabledPacks) {\n        if (RPRenames.configClientFolder.exists() || RPRenames.configServerFolder.exists()) {\n            RPRenames.LOGGER.info(\"Deleting config\");\n            configClear();\n        }\n        RPRenames.LOGGER.info(\"Starting creating config\");\n        startConfigCreate(enabledPacks);\n        RPRenames.LOGGER.info(\"Finished creating config\");\n    }\n\n    public static void startConfigCreate(ArrayList<String> enabledPacks) {", "    public static void startConfigCreate(ArrayList<String> enabledPacks) {\n        for (String s : enabledPacks) {\n            if (s.startsWith(\"file/\")) {\n                String packName = s.substring(5);\n                RPRenames.LOGGER.info(\"Starting creating config for \\\"\" + packName + \"\\\".\");\n                ConfigManager.configCreate(\"resourcepacks/\" + packName, RPRenames.configPathClient);\n            }\n            if (s.equals(\"server\")) {\n                URL url = RPRenames.serverResourcePackURL;\n                if (url != null) {\n                    RPRenames.LOGGER.info(\"Starting creating config for Server's Resource Pack\");\n                    String serverResourcePack = Hashing.sha1().hashString(url.toString(), StandardCharsets.UTF_8).toString();\n                    ConfigManager.configCreate(\"server-resource-packs/\" + serverResourcePack, RPRenames.configPathServer);\n                } else {\n                    RPRenames.LOGGER.info(\"Unknown error while creating config for Server's Resource Pack\");\n                }\n            }\n        }\n    }\n", "                if (url != null) {\n                    RPRenames.LOGGER.info(\"Starting creating config for Server's Resource Pack\");\n                    String serverResourcePack = Hashing.sha1().hashString(url.toString(), StandardCharsets.UTF_8).toString();\n                    ConfigManager.configCreate(\"server-resource-packs/\" + serverResourcePack, RPRenames.configPathServer);\n                } else {\n                    RPRenames.LOGGER.info(\"Unknown error while creating config for Server's Resource Pack\");\n                }\n            }\n        }\n    }\n", "    public static void configCreate(String filePath, String outputPath) {\n        FileSystem zip = null;\n        if (new File(filePath).isFile()) {\n            try {\n                zip = FileSystems.newFileSystem(Paths.get(filePath), (ClassLoader) null);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        Path currentPath;\n\n        ArrayList<String> folders = new ArrayList<>();\n        folders.add(\"/assets/minecraft/optifine/cit/\");\n        folders.add(\"/assets/minecraft/optifine/cem/\");\n", "        for (String currentFolder : folders) {\n\n            if (new File(filePath).isFile()) {\n                assert zip != null;\n                currentPath = zip.getPath(currentFolder);\n            } else {\n                currentPath = Path.of(filePath + currentFolder);\n            }\n\n            String FT = null;\n            if (currentFolder.endsWith(\"/cit/\")) {\n                FT = \".properties\";", "            if (currentFolder.endsWith(\"/cit/\")) {\n                FT = \".properties\";\n            } else if (currentFolder.endsWith(\"/cem/\")) {\n                FT = \".jem\";\n            }\n            String fileType = FT;\n\n            try {\n                Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().endsWith(fileType)).forEach(propertiesFile -> {\n                    try {\n                        if (currentFolder.endsWith(\"/cit/\")) {\n                            InputStream inputStream = Files.newInputStream(propertiesFile);\n                            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                            Properties p = new Properties();\n                            p.load(bufferedReader);\n                            CITConfig.propertiesToJson(p, outputPath + RPRenames.configPathNameCIT + \"/\");", "                    try {\n                        if (currentFolder.endsWith(\"/cit/\")) {\n                            InputStream inputStream = Files.newInputStream(propertiesFile);\n                            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                            Properties p = new Properties();\n                            p.load(bufferedReader);\n                            CITConfig.propertiesToJson(p, outputPath + RPRenames.configPathNameCIT + \"/\");\n                        } else if (currentFolder.endsWith(\"/cem/\")) {\n                            String fileName = propertiesFile.getFileName().toString();\n                            if (Arrays.stream(CEMList.models).toList().contains(fileName.substring(0, propertiesFile.getFileName().toString().length() - 4))) {\n                                CEMConfig.startPropToJsonModels(filePath, outputPath + RPRenames.configPathNameCEM + \"/\");\n                            }\n                        }\n                    } catch (IOException ignored) {}\n                });\n            } catch (IOException ignored) {}\n        }", "                            if (Arrays.stream(CEMList.models).toList().contains(fileName.substring(0, propertiesFile.getFileName().toString().length() - 4))) {\n                                CEMConfig.startPropToJsonModels(filePath, outputPath + RPRenames.configPathNameCEM + \"/\");\n                            }\n                        }\n                    } catch (IOException ignored) {}\n                });\n            } catch (IOException ignored) {}\n        }\n        try {\n            if (zip != null) {\n                zip.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "        try {\n            if (zip != null) {\n                zip.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static Rename configRead(File theFile) {\n        try {\n            FileReader fileReader = new FileReader(theFile);\n            Type type = new TypeToken<ArrayList<Rename>>() {\n            }.getType();\n            Gson gson = new Gson();\n            theList = gson.fromJson(fileReader, type);\n            fileReader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return theList.get(0);\n    }\n", "    public static Rename configRead(File theFile) {\n        try {\n            FileReader fileReader = new FileReader(theFile);\n            Type type = new TypeToken<ArrayList<Rename>>() {\n            }.getType();\n            Gson gson = new Gson();\n            theList = gson.fromJson(fileReader, type);\n            fileReader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return theList.get(0);\n    }\n", "    public static void configDelete(String directoryName) {\n        File directory = new File(directoryName);\n        try {\n            FileUtils.deleteDirectory(directory);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String getFirstName(String nbtDisplayName) {\n        if (nbtDisplayName.startsWith(\"pattern:\") || nbtDisplayName.startsWith(\"ipattern:\")) {", "    public static String getFirstName(String nbtDisplayName) {\n        if (nbtDisplayName.startsWith(\"pattern:\") || nbtDisplayName.startsWith(\"ipattern:\")) {\n            if (nbtDisplayName.startsWith(\"pattern:\")) {\n                nbtDisplayName = nbtDisplayName.replace(\"pattern:\", \"\");\n            } else if (nbtDisplayName.startsWith(\"ipattern:\")) {\n                nbtDisplayName = nbtDisplayName.replace(\"ipattern:\", \"\");\n            }\n            nbtDisplayName = nbtDisplayName.replace(\"*\", \"\");\n            nbtDisplayName = nbtDisplayName.replace(\"?\", \"\");\n        } else if (nbtDisplayName.startsWith(\"regex:\") || nbtDisplayName.startsWith(\"iregex:\")) {\n            if (nbtDisplayName.startsWith(\"regex:\")) {\n                nbtDisplayName = nbtDisplayName.replace(\"regex:\", \"\");", "        } else if (nbtDisplayName.startsWith(\"regex:\") || nbtDisplayName.startsWith(\"iregex:\")) {\n            if (nbtDisplayName.startsWith(\"regex:\")) {\n                nbtDisplayName = nbtDisplayName.replace(\"regex:\", \"\");\n            } else if (nbtDisplayName.startsWith(\"iregex:\")) {\n                nbtDisplayName = nbtDisplayName.replace(\"iregex:\", \"\");\n            }\n            while (nbtDisplayName.contains(\"(\")) {\n                int a = 0;\n                while (!(String.valueOf(nbtDisplayName.charAt(a)).equals(\"(\"))) {\n                    a++;\n                }\n                int b = 0;", "                while (!(String.valueOf(nbtDisplayName.charAt(a)).equals(\"(\"))) {\n                    a++;\n                }\n                int b = 0;\n                if (nbtDisplayName.contains(\"|\")) {\n                    while (!(String.valueOf(nbtDisplayName.charAt(b)).equals(\"|\")) && b < nbtDisplayName.length()-1) {\n                        b++;\n                    }\n                }\n                int c = 0;\n                while (!(String.valueOf(nbtDisplayName.charAt(c)).equals(\")\"))) {\n                    c++;\n                }", "                while (!(String.valueOf(nbtDisplayName.charAt(c)).equals(\")\"))) {\n                    c++;\n                }\n                if (b == nbtDisplayName.length() || b > c) {\n                    b = 0;\n                }\n                if (b == 0) {\n                    b = c;\n                }\n                nbtDisplayName = nbtDisplayName.substring(0, b).replace(\"(\", \"\") + nbtDisplayName.substring(c + 1);\n            }", "            while (nbtDisplayName.contains(\"[\")) {\n                int a = 0;\n                while (!(String.valueOf(nbtDisplayName.charAt(a)).equals(\"[\"))) {\n                    a++;\n                }\n                int b = 0;\n                while (!(String.valueOf(nbtDisplayName.charAt(b)).equals(\"]\"))) {\n                    b++;\n                }\n                nbtDisplayName = nbtDisplayName.substring(0, a + 2).replace(\"[\", \"\") + nbtDisplayName.substring(b + 1);\n            }", "            while (nbtDisplayName.contains(\".*\")) {\n                nbtDisplayName = nbtDisplayName.replace(\".*\", \"\");\n            }\n            if (String.valueOf(nbtDisplayName.charAt(0)).equals(\" \")) {\n                nbtDisplayName = nbtDisplayName.substring(1);\n            }\n            if (String.valueOf(nbtDisplayName.charAt(nbtDisplayName.length() - 1)).equals(\" \")) {\n                nbtDisplayName = nbtDisplayName.substring(0, nbtDisplayName.length() - 1);\n            }\n        }\n        return nbtDisplayName;\n    }\n", "    public static void configClear() {\n        configDelete(RPRenames.configPathClient);\n        configDelete(RPRenames.configPathServer);\n    }\n\n    public static void openConfigFolder() {\n        if (RPRenames.configFolderMain.mkdirs()) {\n            RPRenames.LOGGER.info(\"Created config's folder\");\n        }\n        Util.getOperatingSystem().open(RPRenames.configFolderMain);\n    }\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/configGeneration/CEMList.java", "chunked_list": ["package com.HiWord9.RPRenames.configGeneration;\n\nimport net.minecraft.entity.EntityType;\nimport net.minecraft.item.Item;\nimport net.minecraft.item.Items;\n\npublic class CEMList {\n    public static String[] models = new String[]{\n            \"allay\", \"armor_stand\", \"axolotl\", \"axolotl\", \"axolotl\", \"axolotl\", \"axolotl\",\n            \"bat\", \"polar_bear\", \"bee\", \"bee\", \"bee\", \"bee\", \"bee\", \"blaze\",\n            \"cat\", \"cat\", \"cat\", \"cat\", \"cat_collar\", \"cat\", \"ocelot\", \"cat\", \"cat\", \"cat\", \"cat\", \"cat\", \"cat\",\n            \"chicken\", \"mooshroom\", \"cow\", \"mooshroom\", \"creeper\", \"creeper_charge\", \"dolphin\", \"enderman\", \"endermite\",\n            \"cod\", \"puffer_fish_big\", \"puffer_fish_medium\", \"puffer_fish_small\", \"salmon\", \"tropical_fish_a\", \"tropical_fish_b\",\n            \"fox\", \"fox\", \"fox\", \"fox\", \"frog\", \"frog\", \"frog\", \"ghast\", \"ghast\", \"goat\", \"guardian\", \"elder_guardian\", \"hoglin\", \"zoglin\",\n            \"donkey\", \"horse\", \"horse\", \"horse\", \"horse\", \"horse\", \"horse\", \"horse\", \"horse\", \"horse\", \"horse\",\n            \"skeleton_horse\", \"horse\", \"zombie_horse\", \"mule\",\n            \"evoker\", \"illusioner\", \"pillager\", \"ravager\", \"vex\", \"vex\", \"vindicator\",\n            \"iron_golem\", \"llama\", \"llama\", \"llama\", \"llama\",\n            \"panda\", \"panda\", \"panda\", \"panda\", \"panda\", \"panda\", \"panda\",\n            \"parrot\", \"parrot\", \"parrot\", \"parrot\", \"parrot\", \"phantom\", \"pig\", \"piglin\", \"piglin_brute\", \"zombified_piglin\",\n            \"rabbit\", \"rabbit\", \"rabbit\", \"rabbit\", \"rabbit\", \"rabbit\", \"rabbit\",\n            \"sheep\", \"sheep_wool\", \"shulker\", \"silverfish\", \"skeleton\", \"stray\", \"wither_skeleton\",\n            \"magma_cube\", \"slime\", \"snow_golem\", \"cave_spider\", \"spider\", \"glow_squid\", \"squid\", \"strider\", \"strider\",\n            \"tadpole\", \"turtle\",\n            \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\",\n            \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\", \"villager\",\n            \"villager\", \"villager\", \"villager\", \"wandering_trader\",\n            \"warden\", \"witch\", \"wither\", \"wither_armor\", \"wither\", \"wolf\", \"wolf\", \"wolf_collar\", \"wolf\",\n            \"drowned\", \"husk\", \"zombie\",\n            \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\",\n            \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\",\n            \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\",\n            \"zombie_villager\", \"zombie_villager\", \"zombie_villager\", \"zombie_villager\"\n    };\n", "    public static String[] textures = new String[]{\n            \"allay/allay\", \"armorstand/wood\",\n            \"axolotl/axolotl_blue\", \"axolotl/axolotl_cyan\", \"axolotl/axolotl_gold\", \"axolotl/axolotl_lucy\", \"axolotl/axolotl_wild\",\n            \"bat\", \"bear/polarbear\",\n            \"bee/bee\", \"bee/bee_angry\", \"bee/bee_angry_nectar\", \"bee/bee_nectar\", \"bee/bee_stinger\", \"blaze\",\n            \"cat/all_black\", \"cat/black\", \"cat/british_shorthair\", \"cat/calico\", \"cat/cat_collar\", \"cat/jellie\", \"cat/ocelot\",\n            \"cat/persian\", \"cat/ragdoll\", \"cat/red\", \"cat/siamese\", \"cat/tabby\", \"cat/white\",\n            \"chicken\", \"cow/brown_mooshroom\", \"cow/cow\", \"cow/red_mooshroom\", \"creeper/creeper\", \"creeper/creeper_armor\",\n            \"dolphin\", \"enderman/enderman\", \"endermite\",\n            \"fish/cod\", \"fish/pufferfish\", \"fish/pufferfish\", \"fish/pufferfish\", \"fish/salmon\", \"fish/tropical_a\", \"fish/tropical_b\",\n            \"fox/fox\", \"fox/fox_sleep\", \"fox/snow_fox\", \"fox/snow_fox_sleep\",\n            \"frog/cold_frog\", \"frog/temperate_frog\", \"frog/warm_frog\",\n            \"ghast/ghast\", \"ghast/ghast_shooting\", \"goat/goat\", \"guardian\", \"guardian_elder\",\n            \"hoglin/hoglin\", \"hoglin/zoglin\",\n            \"horse/donkey\", \"horse/horse_black\", \"horse/horse_brown\", \"horse/horse_chestnut\", \"horse/horse_creamy\",\n            \"horse/horse_darkbrown\", \"horse/horse_gray\", \"horse/horse_markings_blackdots\", \"horse/horse_markings_white\",\n            \"horse/horse_markings_whitedots\", \"horse/horse_markings_whitefield\", \"horse/horse_skeleton\", \"horse/horse_white\",\n            \"horse/horse_zombie\", \"horse/mule\",\n            \"illager/evoker\", \"illager/illusioner\", \"illager/pillager\", \"illager/ravager\", \"illager/vex\", \"illager/vex_charging\",\n            \"illager/vindicator\", \"iron_golem/iron_golem\",\n            \"llama/brown\", \"llama/creamy\", \"llama/gray\", \"llama/white\",\n            \"panda/aggressive_panda\", \"panda/brown_panda\", \"panda/lazy_panda\", \"panda/panda\",\n            \"panda/playful_panda\", \"panda/weak_panda\", \"panda/worried_panda\",\n            \"parrot/parrot_blue\", \"parrot/parrot_green\", \"parrot/parrot_grey\", \"parrot/parrot_red_blue\", \"parrot/parrot_yellow_blue\",\n            \"phantom\", \"pig/pig\", \"piglin/piglin\", \"piglin/piglin_brute\", \"piglin/zombified_piglin\",\n            \"rabbit/black\", \"rabbit/brown\", \"rabbit/gold\", \"rabbit/salt\", \"rabbit/toast\", \"rabbit/white\", \"rabbit/white_splotched\",\n            \"sheep/sheep\", \"sheep/sheep_fur\", \"shulker/shulker\", \"silverfish\",\n            \"skeleton/skeleton\", \"skeleton/stray\", \"skeleton/wither_skeleton\",\n            \"slime/magmacube\", \"slime/slime\", \"snow_golem\", \"spider/cave_spider\", \"spider/spider\", \"squid/glow_squid\", \"squid/squid\",\n            \"strider/strider\", \"strider/strider_cold\", \"tadpole/tadpole\", \"turtle/big_sea_turtle\",\n            \"villager/profession/armorer\", \"villager/profession/butcher\", \"villager/profession/cartographer\", \"villager/profession/cleric\",\n            \"villager/profession/farmer\", \"villager/profession/fisherman\", \"villager/profession/fletcher\",\n            \"villager/profession/leatherworker\", \"villager/profession/librarian\", \"villager/profession/mason\",\n            \"villager/profession/nitwit\", \"villager/profession/shepherd\", \"villager/profession/toolsmith\",\n            \"villager/profession/weaponsmith\", \"villager/type/desert\", \"villager/type/jungle\", \"villager/type/plains\",\n            \"villager/type/savanna\", \"villager/type/snow\", \"villager/type/swamp\", \"villager/type/taiga\", \"wandering_trader\",\n            \"warden/warden\", \"witch\", \"wither/wither\", \"wither/wither_armor\", \"wither/wither_invulnerable\",\n            \"wolf/wolf\", \"wolf/wolf_angry\", \"wolf/wolf_collar\", \"wolf/wolf_tame\",\n            \"zombie/drowned\", \"zombie/husk\", \"zombie/zombie\",\n            \"zombie_villager/profession/armorer\", \"zombie_villager/profession/butcher\", \"zombie_villager/profession/cartographer\",\n            \"zombie_villager/profession/cleric\", \"zombie_villager/profession/farmer\", \"zombie_villager/profession/fisherman\",\n            \"zombie_villager/profession/fletcher\", \"zombie_villager/profession/leatherworker\", \"zombie_villager/profession/librarian\",\n            \"zombie_villager/profession/mason\", \"zombie_villager/profession/nitwit\", \"zombie_villager/profession/shepherd\",\n            \"zombie_villager/profession/toolsmith\", \"zombie_villager/profession/weaponsmith\", \"zombie_villager/type/desert\",\n            \"zombie_villager/type/jungle\", \"zombie_villager/type/plains\", \"zombie_villager/type/savanna\", \"zombie_villager/type/snow\",\n            \"zombie_villager/type/swamp\", \"zombie_villager/type/taiga\", \"zombie_villager/zombie_villager\"\n    };\n", "    public static EntityType<?>[] mobs = new EntityType<?>[]{\n            EntityType.ALLAY,\n            EntityType.ARMOR_STAND,\n            EntityType.AXOLOTL,\n            EntityType.AXOLOTL,\n            EntityType.AXOLOTL,\n            EntityType.AXOLOTL,\n            EntityType.AXOLOTL,\n            EntityType.BAT,\n            EntityType.POLAR_BEAR,\n            EntityType.BEE,\n            EntityType.BEE,\n            EntityType.BEE,\n            EntityType.BEE,\n            EntityType.BEE,\n            EntityType.BLAZE,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.OCELOT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CAT,\n            EntityType.CHICKEN,\n            EntityType.MOOSHROOM,\n            EntityType.COW,\n            EntityType.MOOSHROOM,\n            EntityType.CREEPER,\n            EntityType.CREEPER,\n            EntityType.DOLPHIN,\n            EntityType.ENDERMAN,\n            EntityType.ENDERMITE,\n            EntityType.COD,\n            EntityType.PUFFERFISH,\n            EntityType.PUFFERFISH,\n            EntityType.PUFFERFISH,\n            EntityType.SALMON,\n            EntityType.TROPICAL_FISH,\n            EntityType.TROPICAL_FISH,\n            EntityType.FOX,\n            EntityType.FOX,\n            EntityType.FOX,\n            EntityType.FOX,\n            EntityType.FROG,\n            EntityType.FROG,\n            EntityType.FROG,\n            EntityType.GHAST,\n            EntityType.GHAST,\n            EntityType.GOAT,\n            EntityType.GUARDIAN,\n            EntityType.ELDER_GUARDIAN,\n            EntityType.HOGLIN,\n            EntityType.ZOGLIN,\n            EntityType.DONKEY,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.HORSE,\n            EntityType.SKELETON_HORSE,\n            EntityType.HORSE,\n            EntityType.ZOMBIE_HORSE,\n            EntityType.MULE,\n            EntityType.EVOKER,\n            EntityType.ILLUSIONER,\n            EntityType.PILLAGER,\n            EntityType.RAVAGER,\n            EntityType.VEX,\n            EntityType.VEX,\n            EntityType.VINDICATOR,\n            EntityType.IRON_GOLEM,\n            EntityType.LLAMA,\n            EntityType.LLAMA,\n            EntityType.LLAMA,\n            EntityType.LLAMA,\n            EntityType.PANDA,\n            EntityType.PANDA,\n            EntityType.PANDA,\n            EntityType.PANDA,\n            EntityType.PANDA,\n            EntityType.PANDA,\n            EntityType.PANDA,\n            EntityType.PARROT,\n            EntityType.PARROT,\n            EntityType.PARROT,\n            EntityType.PARROT,\n            EntityType.PARROT,\n            EntityType.PHANTOM,\n            EntityType.PIG,\n            EntityType.PIGLIN,\n            EntityType.PIGLIN_BRUTE,\n            EntityType.ZOMBIFIED_PIGLIN,\n            EntityType.RABBIT,\n            EntityType.RABBIT,\n            EntityType.RABBIT,\n            EntityType.RABBIT,\n            EntityType.RABBIT,\n            EntityType.RABBIT,\n            EntityType.RABBIT,\n            EntityType.SHEEP,\n            EntityType.SHEEP,\n            EntityType.SHULKER,\n            EntityType.SILVERFISH,\n            EntityType.SKELETON,\n            EntityType.STRAY,\n            EntityType.WITHER_SKELETON,\n            EntityType.MAGMA_CUBE,\n            EntityType.SLIME,\n            EntityType.SNOW_GOLEM,\n            EntityType.CAVE_SPIDER,\n            EntityType.SPIDER,\n            EntityType.GLOW_SQUID,\n            EntityType.SQUID,\n            EntityType.STRIDER,\n            EntityType.STRIDER,\n            EntityType.TADPOLE,\n            EntityType.TURTLE,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.VILLAGER,\n            EntityType.WANDERING_TRADER,\n            EntityType.WARDEN,\n            EntityType.WITCH,\n            EntityType.WITHER,\n            EntityType.WITHER,\n            EntityType.WITHER,\n            EntityType.WOLF,\n            EntityType.WOLF,\n            EntityType.WOLF,\n            EntityType.WOLF,\n            EntityType.DROWNED,\n            EntityType.HUSK,\n            EntityType.ZOMBIE,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER,\n            EntityType.ZOMBIE_VILLAGER\n    };\n", "    public static Item[] spawnEggItems = new Item[]{\n            Items.ALLAY_SPAWN_EGG,\n            Items.ARMOR_STAND,\n            Items.AXOLOTL_SPAWN_EGG,\n            Items.AXOLOTL_SPAWN_EGG,\n            Items.AXOLOTL_SPAWN_EGG,\n            Items.AXOLOTL_SPAWN_EGG,\n            Items.AXOLOTL_SPAWN_EGG,\n            Items.BAT_SPAWN_EGG,\n            Items.POLAR_BEAR_SPAWN_EGG,\n            Items.BEE_SPAWN_EGG,\n            Items.BEE_SPAWN_EGG,\n            Items.BEE_SPAWN_EGG,\n            Items.BEE_SPAWN_EGG,\n            Items.BEE_SPAWN_EGG,\n            Items.BLAZE_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.OCELOT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CAT_SPAWN_EGG,\n            Items.CHICKEN_SPAWN_EGG,\n            Items.MOOSHROOM_SPAWN_EGG,\n            Items.COW_SPAWN_EGG,\n            Items.MOOSHROOM_SPAWN_EGG,\n            Items.CREEPER_SPAWN_EGG,\n            Items.CREEPER_SPAWN_EGG,\n            Items.DOLPHIN_SPAWN_EGG,\n            Items.ENDERMAN_SPAWN_EGG,\n            Items.ENDERMITE_SPAWN_EGG,\n            Items.COD_SPAWN_EGG,\n            Items.PUFFERFISH_SPAWN_EGG,\n            Items.PUFFERFISH_SPAWN_EGG,\n            Items.PUFFERFISH_SPAWN_EGG,\n            Items.SALMON_SPAWN_EGG,\n            Items.TROPICAL_FISH_SPAWN_EGG,\n            Items.TROPICAL_FISH_SPAWN_EGG,\n            Items.FOX_SPAWN_EGG,\n            Items.FOX_SPAWN_EGG,\n            Items.FOX_SPAWN_EGG,\n            Items.FOX_SPAWN_EGG,\n            Items.FROG_SPAWN_EGG,\n            Items.FROG_SPAWN_EGG,\n            Items.FROG_SPAWN_EGG,\n            Items.GHAST_SPAWN_EGG,\n            Items.GHAST_SPAWN_EGG,\n            Items.GOAT_SPAWN_EGG,\n            Items.GUARDIAN_SPAWN_EGG,\n            Items.ELDER_GUARDIAN_SPAWN_EGG,\n            Items.HOGLIN_SPAWN_EGG,\n            Items.ZOGLIN_SPAWN_EGG,\n            Items.DONKEY_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.SKELETON_HORSE_SPAWN_EGG,\n            Items.HORSE_SPAWN_EGG,\n            Items.ZOMBIE_HORSE_SPAWN_EGG,\n            Items.MULE_SPAWN_EGG,\n            Items.EVOKER_SPAWN_EGG,\n            Items.STRUCTURE_VOID,\n            Items.PILLAGER_SPAWN_EGG,\n            Items.RAVAGER_SPAWN_EGG,\n            Items.VEX_SPAWN_EGG,\n            Items.VEX_SPAWN_EGG,\n            Items.VINDICATOR_SPAWN_EGG,\n            Items.IRON_BLOCK,\n            Items.LLAMA_SPAWN_EGG,\n            Items.LLAMA_SPAWN_EGG,\n            Items.LLAMA_SPAWN_EGG,\n            Items.LLAMA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PANDA_SPAWN_EGG,\n            Items.PARROT_SPAWN_EGG,\n            Items.PARROT_SPAWN_EGG,\n            Items.PARROT_SPAWN_EGG,\n            Items.PARROT_SPAWN_EGG,\n            Items.PARROT_SPAWN_EGG,\n            Items.PHANTOM_SPAWN_EGG,\n            Items.PIG_SPAWN_EGG,\n            Items.PIGLIN_SPAWN_EGG,\n            Items.PIGLIN_BRUTE_SPAWN_EGG,\n            Items.ZOMBIFIED_PIGLIN_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.RABBIT_SPAWN_EGG,\n            Items.SHEEP_SPAWN_EGG,\n            Items.SHEEP_SPAWN_EGG,\n            Items.SHULKER_SPAWN_EGG,\n            Items.SILVERFISH_SPAWN_EGG,\n            Items.SKELETON_SPAWN_EGG,\n            Items.STRAY_SPAWN_EGG,\n            Items.WITHER_SKELETON_SPAWN_EGG,\n            Items.MAGMA_CUBE_SPAWN_EGG,\n            Items.SLIME_SPAWN_EGG,\n            Items.SNOW_BLOCK,\n            Items.CAVE_SPIDER_SPAWN_EGG,\n            Items.SPIDER_SPAWN_EGG,\n            Items.GLOW_SQUID_SPAWN_EGG,\n            Items.SQUID_SPAWN_EGG,\n            Items.STRIDER_SPAWN_EGG,\n            Items.STRIDER_SPAWN_EGG,\n            Items.TADPOLE_SPAWN_EGG,\n            Items.TURTLE_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.VILLAGER_SPAWN_EGG,\n            Items.WANDERING_TRADER_SPAWN_EGG,\n            Items.WARDEN_SPAWN_EGG,\n            Items.WITCH_SPAWN_EGG,\n            Items.SOUL_SAND,\n            Items.SOUL_SAND,\n            Items.SOUL_SAND,\n            Items.WOLF_SPAWN_EGG,\n            Items.WOLF_SPAWN_EGG,\n            Items.WOLF_SPAWN_EGG,\n            Items.WOLF_SPAWN_EGG,\n            Items.DROWNED_SPAWN_EGG,\n            Items.HUSK_SPAWN_EGG,\n            Items.ZOMBIE_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG,\n            Items.ZOMBIE_VILLAGER_SPAWN_EGG\n    };\n}\n"]}
{"filename": "src/main/java/com/HiWord9/RPRenames/configGeneration/CEMConfig.java", "chunked_list": ["package com.HiWord9.RPRenames.configGeneration;\n\nimport com.HiWord9.RPRenames.RPRenames;\nimport com.HiWord9.RPRenames.Rename;\nimport com.google.gson.Gson;\n\nimport java.io.*;\nimport java.lang.reflect.Type;\nimport java.nio.file.*;\nimport java.util.*;", "import java.nio.file.*;\nimport java.util.*;\n\npublic class CEMConfig {\n\n    public static void propertiesToJsonModels(Properties p, String fileName, String outputPath) {\n        File currentFile = new File(outputPath + fileName + \".json\");\n        if (currentFile.exists()) {\n            List<String> namesValues = p.stringPropertyNames().stream().toList();\n            ArrayList<String> skins = new ArrayList<>();\n            for (String s : namesValues) {", "            for (String s : namesValues) {\n                if (s.startsWith(\"name.\")) {\n                    if (!skins.contains(p.getProperty(\"skins.\" + s.substring(5)))) {\n                        skins.add(p.getProperty(\"skins.\" + s.substring(5)));\n                        String name = ConfigManager.getFirstName(p.getProperty(s));\n                        if (currentFile.exists() && name != null) {\n                            Rename alreadyExist = ConfigManager.configRead(currentFile);\n                            String[] ae = alreadyExist.getName();\n                            if (!Arrays.stream(ae).toList().contains(name)) {\n                                int AEsize = ae.length;\n                                String[] newConfig = new String[AEsize + 1];\n                                int h = 0;", "                            if (!Arrays.stream(ae).toList().contains(name)) {\n                                int AEsize = ae.length;\n                                String[] newConfig = new String[AEsize + 1];\n                                int h = 0;\n                                while (h < AEsize) {\n                                    newConfig[h] = ae[h];\n                                    h++;\n                                }\n                                newConfig[h] = name;\n\n                                Rename newRename = new Rename(newConfig);\n                                ArrayList<Rename> listFiles = new ArrayList<>();\n                                listFiles.add(newRename);\n", "                                try {\n                                    FileWriter fileWriter = new FileWriter(currentFile);\n                                    Gson gson = new Gson();\n                                    gson.toJson(listFiles, fileWriter);\n                                    fileWriter.close();\n                                } catch (IOException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            ArrayList<String> namesArray = new ArrayList<>();\n            List<String> namesValues = p.stringPropertyNames().stream().toList();\n            ArrayList<String> skins = new ArrayList<>();", "            for (String s : namesValues) {\n                if (s.startsWith(\"name.\")) {\n                    if (!skins.contains(p.getProperty(\"skins.\" + s.substring(5)))) {\n                        skins.add(p.getProperty(\"skins.\" + s.substring(5)));\n                        String name = ConfigManager.getFirstName(p.getProperty(s));\n                        if (!namesArray.contains(name)) {\n                            namesArray.add(name);\n                        }\n                    }\n                }\n            }\n            String[] names = new String[namesArray.size()];\n            int i = 0;\n", "            for (String s : namesArray) {\n                names[i] = s;\n                i++;\n            }\n\n            Rename rename = new Rename(names);\n            ArrayList<Rename> renameArray = new ArrayList<>();\n            renameArray.add(rename);\n\n            if (names.length != 0) {\n                try {\n                    new File(outputPath).mkdirs();\n                    RPRenames.LOGGER.info(\"Created new file for config: \" + outputPath + fileName + \".json\");\n                    FileWriter fileWriter = new FileWriter(currentFile);\n                    Gson gson = new Gson();\n                    gson.toJson(renameArray, fileWriter);\n                    fileWriter.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n", "            if (names.length != 0) {\n                try {\n                    new File(outputPath).mkdirs();\n                    RPRenames.LOGGER.info(\"Created new file for config: \" + outputPath + fileName + \".json\");\n                    FileWriter fileWriter = new FileWriter(currentFile);\n                    Gson gson = new Gson();\n                    gson.toJson(renameArray, fileWriter);\n                    fileWriter.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n", "    public static void startPropToJsonModels(String rpPath, String outputPath) {\n        ArrayList<String> checked = new ArrayList<>();\n        String cemPath = \"/assets/minecraft/optifine/cem/\";\n        String randomEntityPath = \"/assets/minecraft/optifine/random/entity/\";\n        if (new File(rpPath).isFile()) {\n            try {\n                FileSystem zip = FileSystems.newFileSystem(Paths.get(rpPath), (ClassLoader) null);\n                Path currentPath = zip.getPath(\"/assets/minecraft/optifine/\");\n                int c = 0;\n                while (c < CEMList.models.length) {\n                    int fc = c;\n                    Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().equals(cemPath + CEMList.models[fc] + \".jem\")).forEach(jemFile -> {\n                        String obj = getObjFromBF(jemFile).toString();\n                        ArrayList<String> jpmList = getParamListFromObj(obj, \"model=\");", "                while (c < CEMList.models.length) {\n                    int fc = c;\n                    Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().equals(cemPath + CEMList.models[fc] + \".jem\")).forEach(jemFile -> {\n                        String obj = getObjFromBF(jemFile).toString();\n                        ArrayList<String> jpmList = getParamListFromObj(obj, \"model=\");\n                        for (String jpmFileName : jpmList) {\n                            if (jpmFileName != null && jpmFileName.endsWith(\".jpm\")) {\n                                try {\n                                    Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().equals(cemPath + jpmFileName)).forEach(jpmFile -> {\n                                        String jpmObj = getObjFromBF(jpmFile).toString();\n                                        String textureName = getPropPathInRandom(Objects.requireNonNull(getParamListFromObj(jpmObj, \"texture=\").get(0)));", "                                        try {\n                                            Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().equals(randomEntityPath + textureName + \".properties\")).forEach(propFile -> {\n                                                try {\n                                                    checked.add(String.valueOf(propFile));\n                                                    InputStream inputStream = Files.newInputStream(propFile);\n                                                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                                                    Properties p = new Properties();\n                                                    p.load(reader);\n                                                    propertiesToJsonModels(p, CEMList.mobs[fc].getUntranslatedName(), outputPath);\n                                                } catch (IOException e) {\n                                                    e.printStackTrace();\n                                                }\n                                            });\n                                        } catch (IOException e) {\n                                            e.printStackTrace();\n                                        }\n                                    });\n                                } catch (IOException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    });\n                    c++;\n                }\n                c = 0;", "                while (c < CEMList.textures.length) {\n                    int fc = c;\n                    Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().equals(randomEntityPath + CEMList.textures[fc] + \".properties\")).forEach(propFile -> {\n                        if (!checked.contains(String.valueOf(propFile))) {\n                            try {\n                                InputStream inputStream = Files.newInputStream(propFile);\n                                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                                Properties p = new Properties();\n                                p.load(reader);\n                                propertiesToJsonModels(p, CEMList.mobs[fc].getUntranslatedName(), outputPath);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                    Files.walk(currentPath, new java.nio.file.FileVisitOption[0]).filter(path -> path.toString().equals(randomEntityPath + getLastPathPart(CEMList.textures[fc]) + \".properties\")).forEach(propFile -> {", "                        if (!checked.contains(String.valueOf(propFile))) {\n                            try {\n                                InputStream inputStream = Files.newInputStream(propFile);\n                                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                                Properties p = new Properties();\n                                p.load(reader);\n                                propertiesToJsonModels(p, CEMList.mobs[fc].getUntranslatedName(), outputPath);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                    });\n                    c++;\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            int c = 0;", "            while (c < CEMList.models.length) {\n                File currentJem = new File(rpPath + cemPath + CEMList.models[c] + \".jem\");\n                if (currentJem.exists()) {\n                    String obj = getObjFromBF(currentJem.toPath()).toString();\n                    ArrayList<String> jpmList = getParamListFromObj(obj, \"model=\");\n                    for (String jpmFileName : jpmList) {\n                        if (jpmFileName != null && jpmFileName.endsWith(\".jpm\")) {\n                            String jpmObj = getObjFromBF(new File(rpPath + cemPath + jpmFileName).toPath()).toString();\n                            String textureName = getPropPathInRandom(Objects.requireNonNull(getParamListFromObj(jpmObj, \"texture=\").get(0)));\n                            File propertiesFile = new File(rpPath + randomEntityPath + textureName + \".properties\");\n                            if (propertiesFile.exists()) {", "                            if (propertiesFile.exists()) {\n                                try {\n                                    checked.add(propertiesFile.getPath());\n                                    InputStream inputStream = Files.newInputStream(propertiesFile.toPath());\n                                    BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                                    Properties p = new Properties();\n                                    p.load(reader);\n                                    propertiesToJsonModels(p, CEMList.mobs[c].getUntranslatedName(), outputPath);\n                                } catch (IOException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n                c++;\n            }\n            c = 0;", "            while (c < CEMList.textures.length) {\n                File propertiesFile = null;\n                if (new File(rpPath + randomEntityPath + CEMList.textures[c] + \".properties\").exists()) {\n                    propertiesFile = new File(rpPath + randomEntityPath + CEMList.textures[c] + \".properties\");\n                } else if (new File(rpPath + randomEntityPath + getLastPathPart(CEMList.textures[c]) + \".properties\").exists()) {\n                    propertiesFile = new File(rpPath + randomEntityPath + getLastPathPart(CEMList.textures[c]) + \".properties\");\n                }\n                if (propertiesFile != null && !checked.contains(propertiesFile.getPath())) {\n                    try {\n                        InputStream inputStream = Files.newInputStream(propertiesFile.toPath());\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                        Properties p = new Properties();\n                        p.load(reader);\n                        propertiesToJsonModels(p, CEMList.mobs[c].getUntranslatedName(), outputPath);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                c++;\n            }\n        }\n    }\n", "                    try {\n                        InputStream inputStream = Files.newInputStream(propertiesFile.toPath());\n                        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n                        Properties p = new Properties();\n                        p.load(reader);\n                        propertiesToJsonModels(p, CEMList.mobs[c].getUntranslatedName(), outputPath);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                c++;\n            }\n        }\n    }\n", "    public static ArrayList<String> getParamListFromObj(String obj, String parName) {\n        ArrayList<String> list = new ArrayList<>();\n        int i = 0;\n        while (i < obj.length() - parName.length()) {\n            if (obj.startsWith(parName, i) && !String.valueOf(obj.charAt(i - 1)).equals(\"b\")){\n                int o = i + parName.length();\n                while (!String.valueOf(obj.charAt(o)).equals(\",\")) {\n                    o++;\n                }\n                list.add(obj.substring(i + parName.length(), o));\n            }\n            i++;\n        }\n        return list;\n    }\n", "    public static String getLastPathPart(String path) {\n        int i = path.length() - 1;\n        while (i >= 0) {\n            if (!String.valueOf(path.charAt(i)).equals(\"/\")) {\n                i--;\n            } else {\n                break;\n            }\n        }\n        if (i >= 0) {\n            return path.substring(i + 1);\n        }\n        return path;\n    }\n", "        if (i >= 0) {\n            return path.substring(i + 1);\n        }\n        return path;\n    }\n\n    public static String getPropPathInRandom(String texturePath) {\n        if (texturePath.endsWith(\".png\")) {\n            texturePath = texturePath.substring(0, texturePath.length() - 4);\n        }\n        if (texturePath.startsWith(\"textures/entity/\")) {\n            texturePath = texturePath.substring(16);\n        }\n        return texturePath;\n    }\n", "        if (texturePath.startsWith(\"textures/entity/\")) {\n            texturePath = texturePath.substring(16);\n        }\n        return texturePath;\n    }\n\n    public static Object getObjFromBF(Path pathToFile) {\n        Object obj = null;\n        try {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Files.newInputStream(pathToFile)));\n            try {\n                Type type = new com.google.gson.reflect.TypeToken<>() {\n                }.getType();\n                Gson gson = new Gson();\n                obj = gson.fromJson(bufferedReader, type);\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n}\n", "        try {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(Files.newInputStream(pathToFile)));\n            try {\n                Type type = new com.google.gson.reflect.TypeToken<>() {\n                }.getType();\n                Gson gson = new Gson();\n                obj = gson.fromJson(bufferedReader, type);\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return obj;\n    }\n}\n"]}
