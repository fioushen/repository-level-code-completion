{"filename": "android/src/newarch/com/phonenumberinput/PhoneNumberToolbarViewManagerSpec.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.view.View;\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.viewmanagers.PhoneNumberToolbarViewManagerDelegate;\nimport com.facebook.react.viewmanagers.PhoneNumberToolbarViewManagerInterface;", "import com.facebook.react.viewmanagers.PhoneNumberToolbarViewManagerDelegate;\nimport com.facebook.react.viewmanagers.PhoneNumberToolbarViewManagerInterface;\nimport com.facebook.soloader.SoLoader;\n\npublic abstract class PhoneNumberToolbarViewManagerSpec<T extends View> extends SimpleViewManager<T> implements PhoneNumberToolbarViewManagerInterface<T> {\n  static {\n    if (BuildConfig.CODEGEN_MODULE_REGISTRATION != null) {\n      SoLoader.loadLibrary(BuildConfig.CODEGEN_MODULE_REGISTRATION);\n    }\n  }\n\n  private final ViewManagerDelegate<T> mDelegate;\n\n  public PhoneNumberToolbarViewManagerSpec() {\n    mDelegate = new PhoneNumberToolbarViewManagerDelegate(this);\n  }\n\n  @Nullable\n  @Override\n  protected ViewManagerDelegate<T> getDelegate() {\n    return mDelegate;\n  }\n}\n"]}
{"filename": "android/src/newarch/com/phonenumberinput/PhoneNumberInputViewManagerSpec.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.view.View;\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.viewmanagers.PhoneNumberInputViewManagerDelegate;\nimport com.facebook.react.viewmanagers.PhoneNumberInputViewManagerInterface;", "import com.facebook.react.viewmanagers.PhoneNumberInputViewManagerDelegate;\nimport com.facebook.react.viewmanagers.PhoneNumberInputViewManagerInterface;\nimport com.facebook.soloader.SoLoader;\n\npublic abstract class PhoneNumberInputViewManagerSpec<T extends View> extends SimpleViewManager<T> implements PhoneNumberInputViewManagerInterface<T> {\n  static {\n    if (BuildConfig.CODEGEN_MODULE_REGISTRATION != null) {\n      SoLoader.loadLibrary(BuildConfig.CODEGEN_MODULE_REGISTRATION);\n    }\n  }\n\n  private final ViewManagerDelegate<T> mDelegate;\n\n  public PhoneNumberInputViewManagerSpec() {\n    mDelegate = new PhoneNumberInputViewManagerDelegate(this);\n  }\n\n  @Nullable\n  @Override\n  protected ViewManagerDelegate<T> getDelegate() {\n    return mDelegate;\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/CountryKeyProvider.java", "chunked_list": ["package com.phonenumberinput;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.recyclerview.selection.ItemKeyProvider;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.List;\n\npublic class CountryKeyProvider extends ItemKeyProvider<String> {\n  private final List<Country> countries;\n\n  public CountryKeyProvider(int scope, List<Country> countries) {\n    super(scope);\n    this.countries = countries;\n  }\n\n  @Nullable\n  @Override", "\npublic class CountryKeyProvider extends ItemKeyProvider<String> {\n  private final List<Country> countries;\n\n  public CountryKeyProvider(int scope, List<Country> countries) {\n    super(scope);\n    this.countries = countries;\n  }\n\n  @Nullable\n  @Override", "  public String getKey(int position) {\n    return countries.get(position).getCode();\n  }\n\n  @Override\n  public int getPosition(@NonNull String key) {\n    for (int i = 0; i < countries.size(); i++) {\n      if (countries.get(i).getCode().equals(key)) {\n        return i;\n      }\n    }\n    return RecyclerView.NO_POSITION;\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/CountryPickerAdapter.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.graphics.Color;\nimport android.os.Build;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n", "import android.view.ViewGroup;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.recyclerview.selection.SelectionTracker;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.List;\n\npublic class CountryPickerAdapter extends RecyclerView.Adapter<CountryPickerListItem> {\n  private List<Country> countries;\n  private final LayoutInflater inflater;\n  private boolean darkMode;\n  private SelectionTracker<String> selectionTracker;\n  private int defaultCountry;\n  private final LinearLayoutManager layoutManager;\n\n  public CountryPickerAdapter(Context context,\n                              List<Country> countries,\n                              LinearLayoutManager layoutManager) {\n    this.countries = countries;\n    this.inflater = LayoutInflater.from(context);\n    this.layoutManager = layoutManager;\n  }\n", "import java.util.List;\n\npublic class CountryPickerAdapter extends RecyclerView.Adapter<CountryPickerListItem> {\n  private List<Country> countries;\n  private final LayoutInflater inflater;\n  private boolean darkMode;\n  private SelectionTracker<String> selectionTracker;\n  private int defaultCountry;\n  private final LinearLayoutManager layoutManager;\n\n  public CountryPickerAdapter(Context context,\n                              List<Country> countries,\n                              LinearLayoutManager layoutManager) {\n    this.countries = countries;\n    this.inflater = LayoutInflater.from(context);\n    this.layoutManager = layoutManager;\n  }\n", "  public void onCountryClick(int index) {\n    setSelectedIndex(index);\n    notifyItemChanged(index);\n  }\n\n  public void setSelectionTracker(SelectionTracker<String> selectionTracker) {\n    this.selectionTracker = selectionTracker;\n\n    if (defaultCountry >= 0 && defaultCountry < countries.size()) {\n      String countryCode = countries.get(defaultCountry).getCode();\n      selectionTracker.select(countryCode);\n    } else {\n      selectionTracker.clearSelection();\n    }\n  }\n", "    if (defaultCountry >= 0 && defaultCountry < countries.size()) {\n      String countryCode = countries.get(defaultCountry).getCode();\n      selectionTracker.select(countryCode);\n    } else {\n      selectionTracker.clearSelection();\n    }\n  }\n\n  public void setCountries(List<Country> countries) {\n    this.countries = countries;\n", "  public void setCountries(List<Country> countries) {\n    this.countries = countries;\n\n    if (selectionTracker == null) {\n      return;\n    }\n\n    if (defaultCountry >= 0 && defaultCountry < countries.size()) {\n      String countryCode = countries.get(defaultCountry).getCode();\n      selectionTracker.select(countryCode);\n    } else {\n      selectionTracker.clearSelection();\n    }\n  }\n\n  @SuppressLint(\"NotifyDataSetChanged\")", "  public void setDarkMode(boolean darkMode) {\n    this.darkMode = darkMode;\n\n    notifyDataSetChanged();\n  }\n\n  @RequiresApi(api = Build.VERSION_CODES.N)\n  @NonNull\n  @Override\n  public CountryPickerListItem onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n    View view = inflater.inflate(R.layout.country_picker_list_item, parent, false);\n    return new CountryPickerListItem(view, this::onCountryClick);\n  }\n\n  @Override", "  public CountryPickerListItem onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n    View view = inflater.inflate(R.layout.country_picker_list_item, parent, false);\n    return new CountryPickerListItem(view, this::onCountryClick);\n  }\n\n  @Override\n  public void onBindViewHolder(@NonNull CountryPickerListItem holder, int position) {\n    Country country = countries.get(position);\n\n    // Set the country flag, country name, and calling code for the current list item\n    holder.countryName.setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));\n    holder.callingCode.setText(country.getCallingCode());\n\n    int textColor = darkMode ? Color.parseColor(\"#FFFFFF\") : Color.parseColor(\"#000000\");\n    holder.countryName.setTextColor(textColor);\n    holder.callingCode.setTextColor(textColor);\n\n    holder.bind(country);\n    boolean isSelected = selectionTracker.isSelected(country.getCode());\n    holder.itemView.setActivated(isSelected);\n    holder.highlight(isSelected, darkMode);\n  }\n\n  @Override", "  public int getItemCount() {\n    return countries.size();\n  }\n\n  public void setSelectedIndex(int selectedIndex) {\n    defaultCountry = selectedIndex;\n\n    if (selectionTracker == null) {\n      return;\n    }\n", "    if (selectedIndex >= 0 && selectedIndex < countries.size()) {\n      String countryCode = countries.get(selectedIndex).getCode();\n      selectionTracker.select(countryCode);\n\n      layoutManager.scrollToPosition(selectedIndex);\n    } else {\n      selectionTracker.clearSelection();\n    }\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/PhoneNumberToolbarViewManager.java", "chunked_list": ["package com.phonenumberinput;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n", "import com.facebook.react.uimanager.annotations.ReactProp;\n\n@ReactModule(name = PhoneNumberToolbarViewManager.NAME)\npublic class PhoneNumberToolbarViewManager extends PhoneNumberToolbarViewManagerSpec<PhoneNumberToolbarView> {\n\n  public static final String NAME = \"PhoneNumberToolbarView\";\n\n  @NonNull\n  @Override\n  public String getName() {\n    return NAME;\n  }\n\n  @Override", "  public String getName() {\n    return NAME;\n  }\n\n  @Override\n  public PhoneNumberToolbarView createViewInstance(ThemedReactContext context) {\n    return new PhoneNumberToolbarView(context);\n  }\n\n  @Override\n  @ReactProp(name = \"doneButtonText\")", "  public void setDoneButtonText(PhoneNumberToolbarView view, @Nullable String text) {\n    view.setDoneButtonText(text);\n  }\n\n  @Override\n  @ReactProp(name = \"darkMode\")\n  public void setDarkMode(PhoneNumberToolbarView view, boolean darkMode) {\n\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/PhoneNumberToolbarView.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.Gravity;\nimport android.widget.TextView;\n\nimport androidx.appcompat.widget.Toolbar;\n\nimport androidx.annotation.Nullable;", "\nimport androidx.annotation.Nullable;\n\npublic class PhoneNumberToolbarView extends Toolbar {\n  private TextView rightTextView;\n\n\n  public PhoneNumberToolbarView(Context context) {\n    super(context);\n    init();\n  }\n\n  public PhoneNumberToolbarView(Context context, @Nullable AttributeSet attrs) {\n    super(context, attrs);\n    init();\n  }\n\n  public PhoneNumberToolbarView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    init();\n  }\n\n  private void init() {\n    rightTextView = new TextView(getContext());\n    rightTextView.setGravity(Gravity.END);\n    addView(rightTextView, new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, Gravity.END));\n  }\n", "  public void setDoneButtonText(String text) {\n    rightTextView.setText(text);\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/CountryDetailsLookup.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.view.MotionEvent;\nimport android.view.View;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.recyclerview.selection.ItemDetailsLookup;\nimport androidx.recyclerview.widget.RecyclerView;\n", "import androidx.recyclerview.widget.RecyclerView;\n\nimport com.phonenumberinput.CountryPickerListItem;\n\npublic class CountryDetailsLookup extends ItemDetailsLookup<String> {\n  private final RecyclerView recyclerView;\n\n  public CountryDetailsLookup(RecyclerView recyclerView) {\n    this.recyclerView = recyclerView;\n  }\n\n  @Nullable\n  @Override\n  public ItemDetails<String> getItemDetails(@NonNull MotionEvent e) {\n    View view = recyclerView.findChildViewUnder(e.getX(), e.getY());", "    if (view != null) {\n      RecyclerView.ViewHolder viewHolder = recyclerView.getChildViewHolder(view);\n      if (viewHolder instanceof CountryPickerListItem) {\n        return ((CountryPickerListItem) viewHolder).getItemDetails();\n      }\n    }\n    return null;\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/PhoneNumberInputViewPackage.java", "chunked_list": ["\npackage com.phonenumberinput;\n\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.ArrayList;\nimport java.util.Collections;", "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class PhoneNumberInputViewPackage implements ReactPackage {\n  @Override\n  public List<ViewManager> createViewManagers(ReactApplicationContext reactContext) {\n    List<ViewManager> viewManagers = new ArrayList<>();\n    viewManagers.add(new PhoneNumberInputViewManager());\n    viewManagers.add(new PhoneNumberToolbarViewManager());\n    return viewManagers;\n  }\n\n  @Override\n  public List<NativeModule> createNativeModules(ReactApplicationContext reactContext) {\n    return Collections.emptyList();\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/PhoneNumberInputView.java", "chunked_list": ["package com.phonenumberinput;\n\nimport androidx.annotation.Nullable;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\n\nimport androidx.recyclerview.widget.DividerItemDecoration;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.LinearSnapHelper;", "import androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.LinearSnapHelper;\nimport androidx.recyclerview.widget.RecyclerView;\n\npublic class PhoneNumberInputView extends RecyclerView {\n  private Context context;\n\n  public PhoneNumberInputView(Context context) {\n    super(context);\n    init(context);\n  }\n\n  public PhoneNumberInputView(Context context, @Nullable AttributeSet attrs) {\n    super(context, attrs);\n    init(context);\n  }\n\n  public PhoneNumberInputView(Context context,\n                              @Nullable AttributeSet attrs,\n                              int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    init(context);\n  }\n\n  private void init(Context _context) {\n    context = _context;\n    addItemDecoration(new DividerItemDecoration(context, DividerItemDecoration.VERTICAL));\n    LinearSnapHelper snapHelper = new LinearSnapHelper();\n    snapHelper.attachToRecyclerView(this);\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/Country.java", "chunked_list": ["package com.phonenumberinput;\n\npublic class Country {\n  private final String name; // human-readable name\n  private final String code; // ISO-3601 code\n  private final String emoji; // unicode emoji\n  private final String callingCode; // calling code, e.g. \"+1\"\n\n  public Country(String name, String code, String emoji, String callingCode) {\n    this.name = name;\n    this.code = code;\n    this.emoji = emoji;\n    this.callingCode = callingCode;\n  }\n", "  public String getName() {\n    return name;\n  }\n\n  public String getCode() {\n    return code;\n  }\n\n  public String getEmoji() {\n    return emoji;\n  }\n", "  public String getEmoji() {\n    return emoji;\n  }\n\n  public String getCallingCode() {\n    return callingCode;\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/PhoneNumberInputViewManager.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.graphics.Color;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.recyclerview.selection.SelectionPredicates;\nimport androidx.recyclerview.selection.SelectionTracker;\nimport androidx.recyclerview.selection.StorageStrategy;\nimport androidx.recyclerview.widget.LinearLayoutManager;", "import androidx.recyclerview.selection.StorageStrategy;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.LinearSnapHelper;\n\nimport com.facebook.react.bridge.ReadableArray;\nimport com.facebook.react.bridge.ReadableMap;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.annotations.ReactProp;\n", "import com.facebook.react.uimanager.annotations.ReactProp;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@ReactModule(name = PhoneNumberInputViewManager.NAME)\npublic class PhoneNumberInputViewManager\n  extends PhoneNumberInputViewManagerSpec<PhoneNumberInputView> {\n\n  public static final String NAME = \"PhoneNumberInputView\";\n\n  @Override", "  public static final String NAME = \"PhoneNumberInputView\";\n\n  @Override\n  public String getName() {\n    return NAME;\n  }\n\n  @NonNull\n  @Override\n  public PhoneNumberInputView createViewInstance(@NonNull ThemedReactContext context) {\n    PhoneNumberInputView view = new PhoneNumberInputView(context);\n\n    LinearLayoutManager layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false);\n    view.setLayoutManager(layoutManager);\n\n    CountryPickerAdapter adapter = new CountryPickerAdapter(view.getContext(), new ArrayList<>(), layoutManager);\n    view.setAdapter(adapter);\n\n    return view;\n  }\n\n  @Override\n  @ReactProp(name = \"items\")", "  public PhoneNumberInputView createViewInstance(@NonNull ThemedReactContext context) {\n    PhoneNumberInputView view = new PhoneNumberInputView(context);\n\n    LinearLayoutManager layoutManager = new LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false);\n    view.setLayoutManager(layoutManager);\n\n    CountryPickerAdapter adapter = new CountryPickerAdapter(view.getContext(), new ArrayList<>(), layoutManager);\n    view.setAdapter(adapter);\n\n    return view;\n  }\n\n  @Override\n  @ReactProp(name = \"items\")", "  public void setItems(PhoneNumberInputView view, @Nullable ReadableArray a) {\n    List<Country> countries = new ArrayList<>();\n\n    if (a != null) {\n      for (int i = 0; i < a.size(); i++) {\n        ReadableMap map = a.getMap(i);\n\n        String countryName = map.getString(\"name\");\n        String countryEmoji = map.getString(\"emoji\");\n        String countryCode = map.getString(\"code\");\n        String callingCode = map.getString(\"tel\");\n\n        Country country = new Country(countryName, countryCode, countryEmoji, callingCode);\n        countries.add(country);\n      }\n    }\n\n    CountryPickerAdapter adapter = (CountryPickerAdapter) view.getAdapter();\n", "    if (adapter != null) {\n      adapter.setCountries(countries);\n    } else {\n      LinearLayoutManager layoutManager = new LinearLayoutManager(view.getContext(), LinearLayoutManager.VERTICAL, false);\n      view.setLayoutManager(layoutManager);\n\n      LinearSnapHelper snapHelper = new LinearSnapHelper();\n      snapHelper.attachToRecyclerView(view);\n\n      adapter = new CountryPickerAdapter(view.getContext(), countries, layoutManager);\n      view.setAdapter(adapter);\n    }\n\n    // Set up the SelectionTracker\n    SelectionTracker<String> selectionTracker = new SelectionTracker.Builder<>(\n      \"countryPickerSelection\",\n      view,\n      new CountryKeyProvider(1, countries),\n      new CountryDetailsLookup(view),\n      StorageStrategy.createStringStorage())\n      .withSelectionPredicate(SelectionPredicates.createSelectSingleAnything())\n      .build();\n\n    adapter.setSelectionTracker(selectionTracker);\n  }\n\n  @Override\n  @ReactProp(name = \"darkMode\")", "  public void setDarkMode(PhoneNumberInputView view, boolean darkMode) {\n    int backgroundColor = darkMode ? Color.parseColor(\"#616161\") : Color.parseColor(\"#FFFFFF\");\n    view.setBackgroundColor(backgroundColor);\n\n    CountryPickerAdapter adapter = (CountryPickerAdapter) view.getAdapter();\n\n    if (adapter != null) {\n      adapter.setDarkMode(darkMode);\n    }\n  }\n\n  @Override\n  @ReactProp(name = \"selectedIndex\")", "  public void setSelectedIndex(PhoneNumberInputView view, int index) {\n    CountryPickerAdapter adapter = (CountryPickerAdapter)view.getAdapter();\n\n    if (adapter != null) {\n      adapter.setSelectedIndex(index);\n    }\n  }\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/CountryClickListener.java", "chunked_list": ["package com.phonenumberinput;\n\npublic interface CountryClickListener {\n  void onCountryClick(int position);\n}\n"]}
{"filename": "android/src/main/java/com/phonenumberinput/CountryPickerListItem.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.graphics.Color;\nimport android.os.Build;\nimport android.view.View;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;", "import androidx.annotation.Nullable;\nimport androidx.annotation.RequiresApi;\nimport androidx.recyclerview.selection.ItemDetailsLookup;\nimport androidx.recyclerview.widget.RecyclerView;\n\nimport java.util.function.Consumer;\n\npublic class CountryPickerListItem extends RecyclerView.ViewHolder {\n  TextView countryName; // includes emoji\n  TextView callingCode;\n\n  Country country;\n\n  @RequiresApi(api = Build.VERSION_CODES.N)\n  public CountryPickerListItem(@NonNull View itemView, Consumer<Integer> countryClickListener) {\n    super(itemView);\n\n    countryName = itemView.findViewById(R.id.country_name);\n    callingCode = itemView.findViewById(R.id.calling_code);\n\n    itemView.setOnClickListener(l -> {\n      System.out.println(\"called\");\n      int position = getBindingAdapterPosition();", "      if (position != RecyclerView.NO_POSITION) {\n        countryClickListener.accept(position);\n      }\n    });\n  }\n\n  public void bind(Country country) {\n    this.country = country;\n    // Bind the country data to your views\n    // ...\n  }\n", "  public void highlight(boolean isSelected, boolean darkMode) {\n    if (isSelected) {\n      int color = darkMode ? Color.parseColor(\"#7a7a7a\") : Color.parseColor(\"#d9d9d9\");\n      itemView.setBackgroundColor(color);\n    } else {\n      itemView.setBackgroundColor(Color.TRANSPARENT);\n    }\n  }\n\n  public ItemDetailsLookup.ItemDetails<String> getItemDetails() {\n    return new ItemDetailsLookup.ItemDetails<String>() {\n      @Override", "      public int getPosition() {\n        return getBindingAdapterPosition();\n      }\n\n      @Nullable\n      @Override\n      public String getSelectionKey() {\n        return country.getCode();\n      }\n    };\n  }\n}\n"]}
{"filename": "android/src/oldarch/com/rnphonenumberinput/RnPhoneNumberInputViewManagerSpec.java", "chunked_list": ["package com.phonenumberinput;\n\nimport android.view.View;\n\nimport androidx.annotation.Nullable;\n\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.uimanager.SimpleViewManager;\n\npublic abstract class RnPhoneNumberInputViewManagerSpec<T extends View> extends SimpleViewManager<T> {\n  public abstract void setColor(T view, @Nullable String value);\n}\n", "\npublic abstract class RnPhoneNumberInputViewManagerSpec<T extends View> extends SimpleViewManager<T> {\n  public abstract void setColor(T view, @Nullable String value);\n}\n"]}
{"filename": "example/android/app/src/debug/java/com/rnphonenumberinputexample/ReactNativeFlipper.java", "chunked_list": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * <p>This source code is licensed under the MIT license found in the LICENSE file in the root\n * directory of this source tree.\n */\npackage com.rnphonenumberinputexample;\n\nimport android.content.Context;\nimport com.facebook.flipper.android.AndroidFlipperClient;", "import android.content.Context;\nimport com.facebook.flipper.android.AndroidFlipperClient;\nimport com.facebook.flipper.android.utils.FlipperUtils;\nimport com.facebook.flipper.core.FlipperClient;\nimport com.facebook.flipper.plugins.crashreporter.CrashReporterPlugin;\nimport com.facebook.flipper.plugins.databases.DatabasesFlipperPlugin;\nimport com.facebook.flipper.plugins.fresco.FrescoFlipperPlugin;\nimport com.facebook.flipper.plugins.inspector.DescriptorMapping;\nimport com.facebook.flipper.plugins.inspector.InspectorFlipperPlugin;\nimport com.facebook.flipper.plugins.network.FlipperOkhttpInterceptor;", "import com.facebook.flipper.plugins.inspector.InspectorFlipperPlugin;\nimport com.facebook.flipper.plugins.network.FlipperOkhttpInterceptor;\nimport com.facebook.flipper.plugins.network.NetworkFlipperPlugin;\nimport com.facebook.flipper.plugins.sharedpreferences.SharedPreferencesFlipperPlugin;\nimport com.facebook.react.ReactInstanceEventListener;\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.modules.network.NetworkingModule;\nimport okhttp3.OkHttpClient;\n", "import okhttp3.OkHttpClient;\n\n/**\n * Class responsible of loading Flipper inside your React Native application. This is the debug\n * flavor of it. Here you can add your own plugins and customize the Flipper setup.\n */\npublic class ReactNativeFlipper {\n  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {\n    if (FlipperUtils.shouldEnableFlipper(context)) {\n      final FlipperClient client = AndroidFlipperClient.getInstance(context);\n\n      client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));\n      client.addPlugin(new DatabasesFlipperPlugin(context));\n      client.addPlugin(new SharedPreferencesFlipperPlugin(context));\n      client.addPlugin(CrashReporterPlugin.getInstance());\n\n      NetworkFlipperPlugin networkFlipperPlugin = new NetworkFlipperPlugin();\n      NetworkingModule.setCustomClientBuilder(\n          new NetworkingModule.CustomClientBuilder() {\n            @Override", "    if (FlipperUtils.shouldEnableFlipper(context)) {\n      final FlipperClient client = AndroidFlipperClient.getInstance(context);\n\n      client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));\n      client.addPlugin(new DatabasesFlipperPlugin(context));\n      client.addPlugin(new SharedPreferencesFlipperPlugin(context));\n      client.addPlugin(CrashReporterPlugin.getInstance());\n\n      NetworkFlipperPlugin networkFlipperPlugin = new NetworkFlipperPlugin();\n      NetworkingModule.setCustomClientBuilder(\n          new NetworkingModule.CustomClientBuilder() {\n            @Override", "            public void apply(OkHttpClient.Builder builder) {\n              builder.addNetworkInterceptor(new FlipperOkhttpInterceptor(networkFlipperPlugin));\n            }\n          });\n      client.addPlugin(networkFlipperPlugin);\n      client.start();\n\n      // Fresco Plugin needs to ensure that ImagePipelineFactory is initialized\n      // Hence we run if after all native modules have been initialized\n      ReactContext reactContext = reactInstanceManager.getCurrentReactContext();\n      if (reactContext == null) {\n        reactInstanceManager.addReactInstanceEventListener(\n            new ReactInstanceEventListener() {\n              @Override", "      if (reactContext == null) {\n        reactInstanceManager.addReactInstanceEventListener(\n            new ReactInstanceEventListener() {\n              @Override\n              public void onReactContextInitialized(ReactContext reactContext) {\n                reactInstanceManager.removeReactInstanceEventListener(this);\n                reactContext.runOnNativeModulesQueueThread(\n                    new Runnable() {\n                      @Override\n                      public void run() {\n                        client.addPlugin(new FrescoFlipperPlugin());\n                      }\n                    });\n              }\n            });\n      } else {\n        client.addPlugin(new FrescoFlipperPlugin());\n      }\n    }\n  }\n}\n", "                      public void run() {\n                        client.addPlugin(new FrescoFlipperPlugin());\n                      }\n                    });\n              }\n            });\n      } else {\n        client.addPlugin(new FrescoFlipperPlugin());\n      }\n    }\n  }\n}\n"]}
{"filename": "example/android/app/src/main/java/com/rnphonenumberinputexample/MainActivity.java", "chunked_list": ["package com.rnphonenumberinputexample;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;\nimport com.facebook.react.defaults.DefaultReactActivityDelegate;\n\npublic class MainActivity extends ReactActivity {\n\n  /**\n   * Returns the name of the main component registered from JavaScript. This is used to schedule\n   * rendering of the component.\n   */\n  @Override\n  protected String getMainComponentName() {\n    return \"RnPhoneNumberInputExample\";\n  }\n\n  /**\n   * Returns the instance of the {@link ReactActivityDelegate}. Here we use a util class {@link\n   * DefaultReactActivityDelegate} which allows you to easily enable Fabric and Concurrent React\n   * (aka React 18) with two boolean flags.\n   */\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new DefaultReactActivityDelegate(\n        this,\n        getMainComponentName(),\n        // If you opted-in for the New Architecture, we enable the Fabric Renderer.\n        DefaultNewArchitectureEntryPoint.getFabricEnabled(), // fabricEnabled\n        // If you opted-in for the New Architecture, we enable Concurrent React (i.e. React 18).\n        DefaultNewArchitectureEntryPoint.getConcurrentReactEnabled() // concurrentRootEnabled\n        );\n  }\n}\n"]}
{"filename": "example/android/app/src/main/java/com/rnphonenumberinputexample/MainApplication.java", "chunked_list": ["package com.rnphonenumberinputexample;\n\nimport android.app.Application;\nimport com.facebook.react.PackageList;\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint;\nimport com.facebook.react.defaults.DefaultReactNativeHost;\nimport com.facebook.soloader.SoLoader;", "import com.facebook.react.defaults.DefaultReactNativeHost;\nimport com.facebook.soloader.SoLoader;\nimport java.util.List;\n\npublic class MainApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost =\n      new DefaultReactNativeHost(this) {\n        @Override\n        public boolean getUseDeveloperSupport() {\n          return BuildConfig.DEBUG;\n        }\n\n        @Override\n        protected List<ReactPackage> getPackages() {\n          @SuppressWarnings(\"UnnecessaryLocalVariable\")\n          List<ReactPackage> packages = new PackageList(this).getPackages();\n          // Packages that cannot be autolinked yet can be added manually here, for example:\n          // packages.add(new MyReactNativePackage());\n          return packages;\n        }\n\n        @Override\n        protected String getJSMainModuleName() {\n          return \"index\";\n        }\n\n        @Override\n        protected boolean isNewArchEnabled() {\n          return BuildConfig.IS_NEW_ARCHITECTURE_ENABLED;\n        }\n\n        @Override\n        protected Boolean isHermesEnabled() {\n          return BuildConfig.IS_HERMES_ENABLED;\n        }\n      };\n\n  @Override", "        public boolean getUseDeveloperSupport() {\n          return BuildConfig.DEBUG;\n        }\n\n        @Override\n        protected List<ReactPackage> getPackages() {\n          @SuppressWarnings(\"UnnecessaryLocalVariable\")\n          List<ReactPackage> packages = new PackageList(this).getPackages();\n          // Packages that cannot be autolinked yet can be added manually here, for example:\n          // packages.add(new MyReactNativePackage());\n          return packages;\n        }\n\n        @Override\n        protected String getJSMainModuleName() {\n          return \"index\";\n        }\n\n        @Override\n        protected boolean isNewArchEnabled() {\n          return BuildConfig.IS_NEW_ARCHITECTURE_ENABLED;\n        }\n\n        @Override\n        protected Boolean isHermesEnabled() {\n          return BuildConfig.IS_HERMES_ENABLED;\n        }\n      };\n\n  @Override", "  public ReactNativeHost getReactNativeHost() {\n    return mReactNativeHost;\n  }\n\n  @Override\n  public void onCreate() {\n    super.onCreate();\n    SoLoader.init(this, /* native exopackage */ false);\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // If you opted-in for the New Architecture, we load the native entry point for this app.\n      DefaultNewArchitectureEntryPoint.load();\n    }\n    ReactNativeFlipper.initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n  }\n}\n", "    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      // If you opted-in for the New Architecture, we load the native entry point for this app.\n      DefaultNewArchitectureEntryPoint.load();\n    }\n    ReactNativeFlipper.initializeFlipper(this, getReactNativeHost().getReactInstanceManager());\n  }\n}\n"]}
{"filename": "example/android/app/src/release/java/com/rnphonenumberinputexample/ReactNativeFlipper.java", "chunked_list": ["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * <p>This source code is licensed under the MIT license found in the LICENSE file in the root\n * directory of this source tree.\n */\npackage com.rnphonenumberinputexample;\n\nimport android.content.Context;\nimport com.facebook.react.ReactInstanceManager;", "import android.content.Context;\nimport com.facebook.react.ReactInstanceManager;\n\n/**\n * Class responsible of loading Flipper inside your React Native application. This is the release\n * flavor of it so it's empty as we don't want to load Flipper.\n */\npublic class ReactNativeFlipper {\n  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {\n    // Do nothing as we don't want to initialize Flipper on Release.\n  }\n}\n", "  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {\n    // Do nothing as we don't want to initialize Flipper on Release.\n  }\n}\n"]}
