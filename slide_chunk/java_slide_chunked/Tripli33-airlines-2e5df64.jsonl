{"filename": "src/test/java/com/course_project/airlines/AirlinesApplicationTests.java", "chunked_list": ["package com.course_project.airlines;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass AirlinesApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/test/java/com/course_project/airlines/services/CustomUserDetailsServiceTest.java", "chunked_list": ["package com.course_project.airlines.services;\n\nimport com.course_project.airlines.models.User;\nimport com.course_project.airlines.repositories.UserRepository;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.security.core.userdetails.UserDetails;", "import org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@SpringBootTest\nclass CustomUserDetailsServiceTest {\n    @Autowired\n    private CustomUserDetailsService customUserDetailsService;\n    @MockBean", "    private CustomUserDetailsService customUserDetailsService;\n    @MockBean\n    private UserRepository userRepository;\n\n    @Test\n    void loadUserByUsername() {\n        String mockEmail = \"mock@example.com\";\n        User mockUser = new User();\n        mockUser.setEmail(mockEmail);\n        mockUser.setPassword(\"password\");", "        mockUser.setEmail(mockEmail);\n        mockUser.setPassword(\"password\");\n        Mockito.when(userRepository.findByEmail(mockEmail)).thenReturn(mockUser);\n        UserDetails userDetails = customUserDetailsService.loadUserByUsername(mockEmail);\n        assertEquals(mockEmail, userDetails.getUsername());\n        // TO DO method exception case\n//        String mockEmailToo = \"exception@example.com\";\n//        Mockito.when(userRepository.findByEmail(mockEmailToo)).thenReturn(null);\n//        assertThrows(UsernameNotFoundException.class, () -> customUserDetailsService.loadUserByUsername(mockEmailToo));\n    }", "//        assertThrows(UsernameNotFoundException.class, () -> customUserDetailsService.loadUserByUsername(mockEmailToo));\n    }\n}"]}
{"filename": "src/test/java/com/course_project/airlines/services/FlightServiceTest.java", "chunked_list": ["package com.course_project.airlines.services;\n\nimport com.course_project.airlines.models.Flight;\nimport com.course_project.airlines.models.User;\nimport com.course_project.airlines.repositories.FlightRepository;\nimport com.course_project.airlines.repositories.UserRepository;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.security.Principal;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n", "import java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\nclass FlightServiceTest {\n    @Autowired\n    private FlightService flightService;\n    @MockBean\n    private Principal principal;", "    @MockBean\n    private Principal principal;\n    @MockBean\n    private UserRepository userRepository;\n    @MockBean\n    private FlightRepository flightRepository;\n\n    @Test\n    void list() {\n        List<Flight> mockFlights = Arrays.asList(new Flight(), new Flight());", "    void list() {\n        List<Flight> mockFlights = Arrays.asList(new Flight(), new Flight());\n        Mockito.when(flightRepository.findAll()).thenReturn(mockFlights);\n        assertEquals(flightService.list(), Arrays.asList(new Flight(), new Flight()));\n    }\n\n    @Test\n    void getUserFlights() {\n        List<Flight> mockFlights = Arrays.asList(new Flight(), new Flight());\n        Mockito.when(principal.getName()).thenReturn(\"mockEmail\");", "        List<Flight> mockFlights = Arrays.asList(new Flight(), new Flight());\n        Mockito.when(principal.getName()).thenReturn(\"mockEmail\");\n        Mockito.when(userRepository.findByEmail(\"mockEmail\")).thenReturn(new User());\n        Mockito.when(flightRepository.findFlightsByUser(new User())).thenReturn(mockFlights);\n        assertEquals(flightService.getUserFlights(principal), Arrays.asList(new Flight(), new Flight()));\n    }\n\n    @Test\n    void createFlight() {\n        Flight flight = new Flight();", "    void createFlight() {\n        Flight flight = new Flight();\n        flightService.createFlight(flight);\n        assertFalse(flight.isOrderStatus());\n        Mockito.verify(flightRepository, Mockito.times(1)).save(flight);\n    }\n\n    @Test\n    void orderFlight() {\n        Flight mockFlight = new Flight();", "    void orderFlight() {\n        Flight mockFlight = new Flight();\n        User mockUser = new User();\n        Mockito.when(flightRepository.findById(1L)).thenReturn(Optional.of(mockFlight));\n        Mockito.when(principal.getName()).thenReturn(\"mockEmail\");\n        Mockito.when(userRepository.findByEmail(\"mockEmail\")).thenReturn(mockUser);\n        flightService.orderFlight(1L, principal);\n        assertEquals(mockFlight.getUser(), new User());\n        assertTrue(mockFlight.isOrderStatus());\n        assertThrows(EntityNotFoundException.class, () -> flightService.orderFlight(0L, principal));", "        assertTrue(mockFlight.isOrderStatus());\n        assertThrows(EntityNotFoundException.class, () -> flightService.orderFlight(0L, principal));\n        Mockito.verify(flightRepository, Mockito.times(1)).save(mockFlight);\n    }\n\n    @Test\n    void cancelFlight() {\n        Flight mockFlight = new Flight();\n        Mockito.when(flightRepository.findById(1L)).thenReturn(Optional.of(mockFlight));\n        flightService.cancelFlight(1L);", "        Mockito.when(flightRepository.findById(1L)).thenReturn(Optional.of(mockFlight));\n        flightService.cancelFlight(1L);\n        assertFalse(mockFlight.isOrderStatus());\n        assertNull(mockFlight.getUser());\n        assertThrows(EntityNotFoundException.class, () -> flightService.cancelFlight(0L));\n        Mockito.verify(flightRepository, Mockito.times(1)).save(mockFlight);\n    }\n\n    @Test\n    void deleteFlight() {", "    @Test\n    void deleteFlight() {\n        Flight mockFlight = new Flight();\n        Mockito.when(flightRepository.findById(1L)).thenReturn(Optional.of(mockFlight));\n        flightService.deleteFlight(1L);\n        Mockito.verify(flightRepository, Mockito.times(1)).delete(mockFlight);\n    }\n}"]}
{"filename": "src/test/java/com/course_project/airlines/services/UserServiceTest.java", "chunked_list": ["package com.course_project.airlines.services;\n\nimport com.course_project.airlines.models.User;\nimport com.course_project.airlines.models.enums.Role;\nimport com.course_project.airlines.repositories.UserRepository;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;", "import org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.security.Principal;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n", "import static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\nclass UserServiceTest {\n    @Autowired\n    private UserService userService;\n    @MockBean\n    private UserRepository userRepository;\n    @MockBean\n    private Principal principal;", "    @MockBean\n    private Principal principal;\n    @MockBean\n    private PasswordEncoder passwordEncoder;\n\n    @Test\n    void createUser() {\n        // TO DO password encoder test\n        User user = new User();\n        Set<Role> defaultUserRoles = new HashSet<>();", "        User user = new User();\n        Set<Role> defaultUserRoles = new HashSet<>();\n        defaultUserRoles.add(Role.ROLE_USER);\n        userService.createUser(user);\n        assertTrue(user.isActive());\n        assertEquals(user.getRoles(), defaultUserRoles);\n        Mockito.verify(userRepository, Mockito.times(1)).save(user);\n    }\n\n    @Test", "\n    @Test\n    void getUserByPrincipal() {\n        User mockUser = new User();\n        Mockito.when(principal.getName()).thenReturn(\"mockEmail\");\n        Mockito.when(userRepository.findByEmail(\"mockEmail\")).thenReturn(mockUser);\n        assertEquals(userService.getUserByPrincipal(principal), new User());\n        assertEquals(userService.getUserByPrincipal(null), new User());\n    }\n", "    }\n\n    @Test\n    void list() {\n        List<User> mockUsers = Arrays.asList(new User(), new User());\n        Mockito.when(userRepository.findAll()).thenReturn(mockUsers);\n        assertEquals(userService.list(), Arrays.asList(new User(), new User()));\n    }\n\n    @Test", "\n    @Test\n    void banUser() {\n        User mockUser = new User();\n        userService.createUser(mockUser);\n        mockUser.setId(1L);\n        Mockito.when(userRepository.findById(1L)).thenReturn(Optional.of(mockUser));\n        userService.banUser(1L);\n        assertFalse(mockUser.isActive());\n        assertThrows(EntityNotFoundException.class, () -> userService.banUser(0L));", "        assertFalse(mockUser.isActive());\n        assertThrows(EntityNotFoundException.class, () -> userService.banUser(0L));\n        Mockito.verify(userRepository, Mockito.times(2)).save(mockUser);\n    }\n\n    @Test\n    void changeUserRoles() {\n        User user = new User();\n        userService.createUser(user);\n        userService.changeUserRoles(user, Map.of(\"ROLE_USER\", \"ROLE_ADMIN\"));", "        userService.createUser(user);\n        userService.changeUserRoles(user, Map.of(\"ROLE_USER\", \"ROLE_ADMIN\"));\n        Set<Role> adminUserRoles = new HashSet<>();\n        adminUserRoles.add(Role.ROLE_ADMIN);\n        assertEquals(user.getRoles(), adminUserRoles);\n        Mockito.verify(userRepository, Mockito.times(2)).save(user);\n    }\n}"]}
{"filename": "src/main/java/com/course_project/airlines/AirlinesApplication.java", "chunked_list": ["package com.course_project.airlines;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class AirlinesApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(AirlinesApplication.class, args);\n\t}\n\n}\n", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(AirlinesApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/configurations/SecurityConfig.java", "chunked_list": ["package com.course_project.airlines.configurations;\n\nimport com.course_project.airlines.services.CustomUserDetailsService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;", "import org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.builders.WebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@EnableWebSecurity\n@RequiredArgsConstructor\n@Configuration", "@RequiredArgsConstructor\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    private final CustomUserDetailsService userDetailsService;\n\n    /**\n     * Method for configuring the HTTP security settings for the application.\n     *\n     * @param http - HttpSecurity object to be configured\n     * @throws Exception - if an error occurs during configuration\n     */\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                .antMatchers(\"/\", \"/registration\")\n                .permitAll()\n                .anyRequest().authenticated()\n                .and()\n                .formLogin()\n                .loginPage(\"/login\")\n                .permitAll()\n                .and()\n                .logout()\n                .permitAll();\n    }\n\n    /**\n     * Method for configuring the authentication manager builder with the user details service and password encoder\n     *\n     * @param auth - AuthenticationManagerBuilder object to be configured\n     * @throws Exception - if an error occurs during configuration\n     */\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth.userDetailsService(userDetailsService)\n                .passwordEncoder(passwordEncoder());\n    }\n\n    /**\n     * Method for configuring the web security settings to ignore certain resources\n     *\n     * @param web - the WebSecurity object to be configured\n     * @throws Exception - if an error occurs during configuration\n     */\n    @Override", "    public void configure(WebSecurity web) throws Exception {\n        web.ignoring()\n                .antMatchers(\"/css/**\", \"/assets/**\");\n    }\n\n    /**\n     * Method for creating a BCryptPasswordEncoder bean with a strength of 8.\n     *\n     * @return - the BCryptPasswordEncoder bean\n     */\n    @Bean", "    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(8);\n    }\n}"]}
{"filename": "src/main/java/com/course_project/airlines/repositories/FlightRepository.java", "chunked_list": ["package com.course_project.airlines.repositories;\n\nimport com.course_project.airlines.models.Flight;\nimport com.course_project.airlines.models.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\npublic interface FlightRepository extends JpaRepository<Flight, Long> {\n    /**\n     * Method for getting all user flight entities from the table \"flight\"\n     *\n     * @param user - user entity\n     * @return - all user flights\n     */\n    List<Flight> findFlightsByUser(User user);\n}\n", "public interface FlightRepository extends JpaRepository<Flight, Long> {\n    /**\n     * Method for getting all user flight entities from the table \"flight\"\n     *\n     * @param user - user entity\n     * @return - all user flights\n     */\n    List<Flight> findFlightsByUser(User user);\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/repositories/UserRepository.java", "chunked_list": ["package com.course_project.airlines.repositories;\n\nimport com.course_project.airlines.models.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface UserRepository extends JpaRepository<User, Long> {\n    /**\n     * Method for getting a user entity from the table \"user\"\n     *\n     * @param email - email address of the user\n     * @return - user entity\n     */\n    User findByEmail(String email);\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/models/User.java", "chunked_list": ["package com.course_project.airlines.models;\n\nimport com.course_project.airlines.models.enums.Role;\nimport lombok.Data;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.*;\nimport java.time.LocalDateTime;", "import javax.validation.constraints.*;\nimport java.time.LocalDateTime;\nimport java.util.*;\n\n@Entity\n@Table(name = \"user\")\n@Data\npublic class User implements UserDetails {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n    @NotBlank(message = \"Email required\")\n    @Column(name = \"email\", unique = true)\n    private String email;\n\n    @Pattern(regexp = \"\\\\+\\\\d{3}\\\\s?\\\\(?(\\\\d{2})\\\\)?[-.\\\\s]?\\\\d{3}[-.\\\\s]?\\\\d{2}[-.\\\\s]?\\\\d{2}\",\n            message = \"Incorrect phone number\")\n    @Column(name = \"phone_number\", unique = true)\n    private String phoneNumber;\n    @NotBlank(message = \"Username required\")\n    @Column(name = \"name\")\n    private String name;\n    @Column(name = \"active\")\n    private boolean active;\n\n    @Size(min = 4, message = \"Password must contain at least 4 characters\")\n    @Column(name = \"password\", length = 1000)\n    private String password;\n    @ElementCollection(targetClass = Role.class, fetch = FetchType.EAGER)\n    @CollectionTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"))\n    @Enumerated(EnumType.STRING)\n    private Set<Role> roles = new HashSet<>();\n    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = \"user\")\n    private List<Flight> products = new ArrayList<>();\n    private LocalDateTime dateOfCreated;\n\n    /**\n     * Method for initializing the creation date of the user entity\n     */\n    @PrePersist\n    private void init() {\n        dateOfCreated = LocalDateTime.now();\n    }\n\n    /**\n     * Method for determining if the user has the role of an admin\n     *\n     * @return - true if the user has the admin role, false otherwise\n     */", "    public boolean isAdmin() {\n        return roles.contains(Role.ROLE_ADMIN);\n    }\n\n    /**\n     * Method for retrieving the authorities (roles) associated with the user\n     *\n     * @return - collection of GrantedAuthority objects representing the roles of the user\n     */\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return roles;\n    }\n\n    /**\n     * Method for retrieving the username (email) of the user\n     *\n     * @return - email address associated with the user\n     */\n    @Override", "    public String getUsername() {\n        return email;\n    }\n\n    /**\n     * Method for checking if the user account has expired\n     *\n     * @return - true if the user account is not expired, false otherwise\n     */\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    /**\n     * Method for checking if the user account is locked\n     *\n     * @return - true if the user account is not locked, false otherwise\n     */\n    @Override", "    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    /**\n     * Method for checking if the user account is locked\n     *\n     * @return - true if the user account is not locked, false otherwise\n     */\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    /**\n     * Method for checking if the user credentials (password) are expired\n     *\n     * @return - true if the user credentials are not expired, false otherwise\n     */\n    @Override", "    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    /**\n     * Method for checking if the user credentials (password) are expired\n     *\n     * @return - true if the user credentials are not expired, false otherwise\n     */\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    /**\n     * Method for checking if the user account is enabled\n     *\n     * @return - true if the user account is enabled, false otherwise\n     */\n    @Override", "    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    /**\n     * Method for checking if the user account is enabled\n     *\n     * @return - true if the user account is enabled, false otherwise\n     */\n    @Override\n    public boolean isEnabled() {\n        return active;\n    }\n}", "    public boolean isEnabled() {\n        return active;\n    }\n}"]}
{"filename": "src/main/java/com/course_project/airlines/models/Flight.java", "chunked_list": ["package com.course_project.airlines.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.NotBlank;\n\n@Entity", "\n@Entity\n@Table(name = \"flight\")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Flight {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n    @NotBlank(message = \"Flight from required\")\n    @Column(name = \"flight_from\")\n    private String flightFrom;\n    @NotBlank(message = \"Flight to required\")\n    @Column(name = \"flight_to\")\n    private String flightTo;\n    @NotBlank(message = \"Depart date required\")\n    @Column(name = \"depart_date\")\n    private String departDate;\n    @NotBlank(message = \"Return date required\")\n    @Column(name = \"return_date\")\n    private String returnDate;\n    @Column(name = \"type_travaler\")\n    private String typeTraveler;\n    @Column(name = \"order_status\")\n    private boolean orderStatus;\n    @ManyToOne(cascade = CascadeType.REFRESH, fetch = FetchType.LAZY)\n    @JoinColumn\n    private User user;\n\n    /**\n     * Method for retrieving the string representation of the order status.\n     *\n     * @return \"Ordered\" if the order status is true, \"Vacant\" otherwise\n     */", "    public String getStringOrderStatus() {\n        return this.orderStatus ? \"Ordered\" : \"Vacant\";\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/models/enums/Role.java", "chunked_list": ["package com.course_project.airlines.models.enums;\n\nimport org.springframework.security.core.GrantedAuthority;\n\npublic enum Role implements GrantedAuthority {\n    ROLE_USER, ROLE_ADMIN;\n\n    /**\n     * Method for retrieving the authority (role) associated with the user\n     *\n     * @return the name of the authority (role)\n     */\n    @Override", "    public String getAuthority() {\n        return name();\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/services/FlightService.java", "chunked_list": ["package com.course_project.airlines.services;\n\nimport com.course_project.airlines.models.Flight;\nimport com.course_project.airlines.repositories.FlightRepository;\nimport com.course_project.airlines.repositories.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\n\nimport javax.persistence.EntityNotFoundException;", "\nimport javax.persistence.EntityNotFoundException;\nimport java.security.Principal;\n\nimport java.util.List;\n\n@Service\n@Slf4j\n@RequiredArgsConstructor\npublic class FlightService {\n    private final FlightRepository flightRepository;\n    private final UserRepository userRepository;\n\n    /**\n     * Method for getting all flight entities from the table \"flight\"\n     *\n     * @return - all flights\n     */\n    public List<Flight> list() {\n        return flightRepository.findAll();\n    }\n\n    /**\n     * Method for getting all user flight entities from the table \"flight\"\n     *\n     * @param principal - the currently logged-in user\n     * @return - all user flights\n     */\n    public List<Flight> getUserFlights(Principal principal) {\n        return flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));\n    }\n\n    /**\n     * Method for creating a new flight entity in the table \"flight\"\n     *\n     * @param flight - flight entity from the view\n     */", "@RequiredArgsConstructor\npublic class FlightService {\n    private final FlightRepository flightRepository;\n    private final UserRepository userRepository;\n\n    /**\n     * Method for getting all flight entities from the table \"flight\"\n     *\n     * @return - all flights\n     */\n    public List<Flight> list() {\n        return flightRepository.findAll();\n    }\n\n    /**\n     * Method for getting all user flight entities from the table \"flight\"\n     *\n     * @param principal - the currently logged-in user\n     * @return - all user flights\n     */\n    public List<Flight> getUserFlights(Principal principal) {\n        return flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));\n    }\n\n    /**\n     * Method for creating a new flight entity in the table \"flight\"\n     *\n     * @param flight - flight entity from the view\n     */", "    public void createFlight(Flight flight) {\n        flight.setOrderStatus(false);\n        flightRepository.save(flight);\n    }\n\n    /**\n     * Method for associating the user entity with the ordered flight\n     *\n     * @param id - id of the ordered flight\n     * @param principal - currently logged-in user\n     */", "    public void orderFlight(Long id, Principal principal) {\n        Flight flight = flightRepository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Flight not found with id \" + id));\n        flight.setUser(userRepository.findByEmail(principal.getName()));\n        flight.setOrderStatus(true);\n        flightRepository.save(flight);\n    }\n\n    /**\n     * Method for unassociating a user entity with a canceled flight\n     *\n     * @param id - id of the canceled flight\n     */", "    public void cancelFlight(Long id) {\n        Flight flight = flightRepository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Flight not found with id \" + id));\n        flight.setUser(null);\n        flight.setOrderStatus(false);\n        flightRepository.save(flight);\n    }\n\n    /**\n     * Method for deleting a flight entity from the table \"flight\"\n     *\n     * @param id - id of the deleted flight\n     */", "    public void deleteFlight(Long id) {\n        Flight flight = flightRepository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"Flight not found with id \" + id));\n        flightRepository.delete(flight);\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/services/UserService.java", "chunked_list": ["package com.course_project.airlines.services;\n\nimport com.course_project.airlines.models.User;\nimport com.course_project.airlines.models.enums.Role;\nimport com.course_project.airlines.repositories.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n", "import org.springframework.stereotype.Service;\n\nimport javax.persistence.EntityNotFoundException;\nimport java.security.Principal;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n", "import java.util.stream.Collectors;\n\n@Service\n@Slf4j\n@RequiredArgsConstructor\npublic class UserService {\n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n\n    /**\n     * Method for creating a new user entity in the table \"user\"\n     *\n     * @param user - user entity from the view\n     */", "    public void createUser(User user) {\n        user.setActive(true);\n        user.getRoles().add(Role.ROLE_USER);\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\n        userRepository.save(user);\n    }\n\n    /**\n     * Method for getting all user entities from the table \"user\"\n     *\n     * @return - all users\n     */\n    public List<User> list() {\n        return userRepository.findAll();\n    }\n\n    /**\n     * Method for getting a user entity from the table \"user\"\n     *\n     * @param principal - the currently logged-in user\n     * @return - currently logged-in user entity\n     */", "    public User getUserByPrincipal(Principal principal) {\n        // TODO refactor\n        if (principal == null) return new User();\n        return userRepository.findByEmail(principal.getName());\n    }\n\n    /**\n     * Method for changing the activity status of the user entity to the opposite one (authorize -> can't authorize, etc.)\n     *\n     * @param id - id of the current user\n     */", "    public void banUser(Long id) {\n        User user = userRepository.findById(id)\n                .orElseThrow(() -> new EntityNotFoundException(\"User not found with id \" + id));\n        user.setActive(!user.isActive());\n        userRepository.save(user);\n    }\n\n    /**\n     * Method for changing the status of the role of the user entity to the opposite one (admin -> user, etc.)\n     *\n     * @param user - user entity\n     * @param form - set of roles from the view\n     */", "    public void changeUserRoles(User user, Map<String, String> form) {\n        Set<String> roles = Arrays.stream(Role.values())\n                .map(Role::name)\n                .collect(Collectors.toSet());\n        user.getRoles().clear();\n        for (String val : form.values()) {\n            if (roles.contains(val)) {\n                user.getRoles().add(Role.valueOf(val));\n                break;\n            }\n        }\n        userRepository.save(user);\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/services/CustomUserDetailsService.java", "chunked_list": ["package com.course_project.airlines.services;\n\nimport com.course_project.airlines.repositories.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\n@Service", "\n@Service\n@RequiredArgsConstructor\npublic class CustomUserDetailsService implements UserDetailsService {\n    private final UserRepository userRepository;\n\n    /**\n     * Method that loads the user's data entity by their email address\n     * @param email - email address of the current user\n     * @return - entity containing the user's details\n     * @throws UsernameNotFoundException - if no user is found with the given email address\n     */\n    @Override", "    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {\n        return userRepository.findByEmail(email);\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/controllers/FlightController.java", "chunked_list": ["package com.course_project.airlines.controllers;\n\nimport com.course_project.airlines.services.FlightService;\nimport com.course_project.airlines.services.UserService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;", "import org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.security.Principal;\n\n@RequiredArgsConstructor\n@Controller\npublic class FlightController {\n    private final FlightService flightService;\n    private final UserService userService;\n\n    /**\n     * Handles the GET request for the home page\n     *\n     * @param model - model object for adding attributes and rendering views\n     * @param principal - the currently logged-in user\n     * @return - name of the view template to be rendered\n     */\n    @GetMapping(\"/\")", "    public String welcome(Model model, Principal principal) {\n        model.addAttribute(\"flights\", flightService.list());\n        model.addAttribute(\"user\", userService.getUserByPrincipal(principal));\n        return \"welcome\";\n    }\n\n    /**\n     * Handles the POST request for ordering a flight\n     *\n     * @param id - id of the flight to be ordered\n     * @param principal - currently logged-in user\n     * @return - redirect to the personal page after ordering the flight\n     */\n    @PostMapping(\"/\")", "    public String orderFlight(@RequestParam(\"flightId\") Long id, Principal principal) {\n        flightService.orderFlight(id, principal);\n        return \"redirect:/personal\";\n    }\n\n    /**\n     * Handles the GET request for the personal page\n     *\n     * @param model - model object for adding attributes and rendering views\n     * @param principal - currently logged-in user\n     * @return - name of the view template to be rendered\n     */\n    @GetMapping(\"/personal\")", "    public String personal(Model model, Principal principal) {\n        model.addAttribute(\"flights\", flightService.getUserFlights(principal));\n        return \"personal\";\n    }\n\n    /**\n     * Handles the POST request for canceling a flight\n     *\n     * @param id - id of the flight to be canceled\n     * @return - redirect to the personal page after canceling the flight\n     */\n    @PostMapping(\"/personal\")", "    public String cancelFlight(@RequestParam(\"flightId\") Long id) {\n        flightService.cancelFlight(id);\n        return \"redirect:/personal\";\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/controllers/AdminController.java", "chunked_list": ["package com.course_project.airlines.controllers;\n\nimport com.course_project.airlines.models.Flight;\nimport com.course_project.airlines.models.User;\nimport com.course_project.airlines.models.enums.Role;\nimport com.course_project.airlines.services.FlightService;\nimport com.course_project.airlines.services.UserService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.stereotype.Controller;", "import org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport javax.validation.Valid;", "\nimport javax.validation.Valid;\nimport java.util.Map;\n\n@RequiredArgsConstructor\n@Controller\n@PreAuthorize(\"hasAuthority('ROLE_ADMIN')\")\npublic class AdminController {\n    private final UserService userService;\n    private final FlightService flightService;\n\n    /**\n     * Handles the GET request for the admin page\n     *\n     * @param model - model object for adding attributes and rendering views\n     * @return - name of the view template to be rendered\n     */\n    @GetMapping(\"/admin\")", "    public String admin(Model model) {\n        model.addAttribute(\"users\", userService.list());\n        return \"admin\";\n    }\n\n    /**\n     * Handles the POST request for banning a user\n     *\n     * @param id - id of the user to be banned\n     * @return - redirect to the admin page after banning the user\n     */\n    @PostMapping(\"/admin\")", "    public String userBan(@RequestParam(\"userId\") Long id) {\n        userService.banUser(id);\n        return \"redirect:/admin\";\n    }\n\n    /**\n     * Handles the GET request for editing a user in the admin panel.\n     *\n     * @param user  - user entity to be edited\n     * @param model - model object for adding attributes and rendering views\n     * @return - name of the view template to be rendered for editing the user\n     */\n    @GetMapping(\"/admin/edit/{user}\")", "    public String userEdit(@PathVariable(\"user\") User user, Model model) {\n        model.addAttribute(\"user\", user);\n        model.addAttribute(\"roles\", Role.values());\n        return \"user-edit\";\n    }\n\n    /**\n     * Handles the POST request for editing a user's roles in the admin panel\n     *\n     * @param user - user entity to be edited\n     * @param form - map containing the updated roles for the user from the view\n     * @return - redirect to the admin page after editing the user's roles\n     */\n\n    @PostMapping(\"/admin/edit\")", "    public String userEdit(@RequestParam(\"userId\") User user, @RequestParam Map<String, String> form) {\n        userService.changeUserRoles(user, form);\n        return \"redirect:/admin\";\n    }\n\n    /**\n     * Handles the GET request for adding a new flight in the admin panel\n     *\n     * @return - name of the view template to be rendered for adding a flight\n     */\n    @GetMapping(\"/admin/add-flight\")", "    public String addFlight() {\n        return \"add-flight\";\n    }\n\n    /**\n     * Handles the POST request for adding a new flight in the admin panel.\n     *\n     * @param flight - flight entity to be added\n     * @param bindingResult - binding result object for validating flight input\n     * @param model - model object for adding attributes and rendering views\n     * @return - redirects to the add-flight page if the flight is successfully added or in case of validation errors\n     * return the name of the view template\n     */\n    @PostMapping(\"/admin/add-flight\")", "    public String addFlight(@Valid Flight flight, BindingResult bindingResult, Model model) {\n        if (bindingResult.hasErrors()) {\n            model.addAttribute(\"bindingResult\", bindingResult);\n            return \"add-flight\";\n        }\n        flightService.createFlight(flight);\n        return \"redirect:/admin/add-flight\";\n    }\n\n    /**\n     * Handles the POST request for canceling a user's flight by the admin\n     *\n     * @param id - id of the flight to be canceled\n     * @return - redirect to the home page after canceling the flight\n     */\n    @PostMapping(\"/admin/cancel\")", "    public String cancelUserFlight(@RequestParam(\"flightId\") Long id) {\n        flightService.cancelFlight(id);\n        return \"redirect:/\";\n    }\n\n    /**\n     * Handles the POST request for deleting a flight by the admin\n     *\n     * @param id - id of the flight to be deleted\n     * @return - the redirect to the home page after deleting the flight\n     */\n    @PostMapping(\"/admin/delete\")", "    public String deleteFlight(@RequestParam(\"flightId\") Long id) {\n        flightService.deleteFlight(id);\n        return \"redirect:/\";\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/controllers/UserController.java", "chunked_list": ["package com.course_project.airlines.controllers;\n\nimport com.course_project.airlines.models.User;\nimport com.course_project.airlines.services.UserService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\n\nimport javax.validation.Valid;\n\n@Controller\n@RequiredArgsConstructor\npublic class UserController {\n    private final UserService userService;\n\n    /**\n     * Handles the GET request for the login page\n     *\n     * @return - name of the login view template to be rendered\n     */\n    @GetMapping(\"/login\")", "public class UserController {\n    private final UserService userService;\n\n    /**\n     * Handles the GET request for the login page\n     *\n     * @return - name of the login view template to be rendered\n     */\n    @GetMapping(\"/login\")\n    public String login() {\n        return \"login\";\n    }\n\n    /**\n     * Handles the GET request for the registration page\n     *\n     * @return - name of the registration view template to be rendered\n     */\n    @GetMapping(\"/registration\")", "    public String login() {\n        return \"login\";\n    }\n\n    /**\n     * Handles the GET request for the registration page\n     *\n     * @return - name of the registration view template to be rendered\n     */\n    @GetMapping(\"/registration\")\n    public String registration() {\n        return \"registration\";\n    }\n\n    /**\n     * Handles the POST request for user registration\n     *\n     * @param user - user entity containing the user data from the registration form\n     * @param bindingResult - binding result object to capture any validation errors from the registration form\n     * @param model - model object to add attributes for the view\n     * @return - redirects to the login page if the user is successfully registered or in case of validation errors return\n     * the name of the view template\n     */\n    @PostMapping(\"/registration\")", "    public String registration() {\n        return \"registration\";\n    }\n\n    /**\n     * Handles the POST request for user registration\n     *\n     * @param user - user entity containing the user data from the registration form\n     * @param bindingResult - binding result object to capture any validation errors from the registration form\n     * @param model - model object to add attributes for the view\n     * @return - redirects to the login page if the user is successfully registered or in case of validation errors return\n     * the name of the view template\n     */\n    @PostMapping(\"/registration\")", "    public String createUser(@Valid @ModelAttribute(\"user\") User user, BindingResult bindingResult, Model model) {\n        if (bindingResult.hasErrors()) {\n            model.addAttribute(\"bindingResult\", bindingResult);\n            return \"/registration\";\n        }\n        userService.createUser(user);\n        return \"redirect:/login\";\n    }\n}\n"]}
{"filename": "src/main/java/com/course_project/airlines/controllers/GlobalAdviceController.java", "chunked_list": ["package com.course_project.airlines.controllers;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.authentication.AnonymousAuthenticationToken;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n", "import org.springframework.web.bind.annotation.ModelAttribute;\n\n@ControllerAdvice\n@RequiredArgsConstructor\npublic class GlobalAdviceController {\n\n    /**\n     * Method for retrieving the username of the currently authenticated user for use in the user profile\n     *\n     * @param currentUser - UserDetails object representing the currently authenticated user\n     * @return - the username of the authenticated user, or null if not authenticated\n     */\n    @ModelAttribute(\"userName\")", "    public String getUserProfile(@AuthenticationPrincipal UserDetails currentUser) {\n        if (\n                SecurityContextHolder.getContext().getAuthentication() != null &&\n                        SecurityContextHolder.getContext().getAuthentication().isAuthenticated() &&\n                        !(SecurityContextHolder.getContext().getAuthentication() instanceof AnonymousAuthenticationToken)\n\n        ) {\n            return currentUser.getUsername();\n        } else {\n            return null;\n        }\n    }\n}\n"]}
