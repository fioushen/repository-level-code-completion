{"filename": "src/test/java/com/ericblue/chatgpt3twilio/MicronautexampleTest.java", "chunked_list": ["package com.ericblue.chatgpt3twilio;\n\nimport io.micronaut.runtime.EmbeddedApplication;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\n\nimport jakarta.inject.Inject;\n\n@MicronautTest", "\n@MicronautTest\nclass MicronautexampleTest {\n\n    @Inject\n    EmbeddedApplication<?> application;\n\n    @Test\n    void testItWorks() {\n        Assertions.assertTrue(application.isRunning());", "    void testItWorks() {\n        Assertions.assertTrue(application.isRunning());\n    }\n\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/Application.java", "chunked_list": ["package com.ericblue.chatgpt3twilio;\n\nimport io.micronaut.core.util.StringUtils;\nimport io.micronaut.runtime.Micronaut;\nimport io.swagger.v3.oas.annotations.*;\nimport io.swagger.v3.oas.annotations.info.*;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.Logger;\n\n", "\n\n@OpenAPIDefinition(\n    info = @Info(\n            title = \"chatgpt3twilio\",\n            version = \"0.1\"\n    )\n)\npublic class Application {\n\n    private static final Logger logger = LoggerFactory.getLogger(Application.class);\n", "public class Application {\n\n    private static final Logger logger = LoggerFactory.getLogger(Application.class);\n\n    public static void main(String[] args) {\n        String chatGPTApiKey= System.getenv(\"CHATGPT_API_KEY\");\n        if ( StringUtils.isEmpty(chatGPTApiKey)) {\n            throw new RuntimeException(\"CHATGPT_API_KEY environment variable not set\");\n        }\n        \n        logger.info(\"Starting Micronaut application\");\n        Micronaut.run(Application.class, args);\n    }\n}"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/domain/ChatMessage.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.domain;\n\nimport io.micronaut.serde.annotation.Serdeable;\n\n@Serdeable\npublic class ChatMessage {\n\n    private String response;\n\n    public ChatMessage () {\n    }\n    public ChatMessage(String response) {\n        this.response = response;\n    }", "    public String getResponse() {\n        return response;\n    }\n\n    public void setResponse(String response) {\n        this.response = response;\n    }\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/config/TwilioConfiguration.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.config;\n\nimport io.micronaut.context.annotation.ConfigurationProperties;\nimport io.micronaut.core.util.StringUtils;\nimport io.micronaut.serde.annotation.Serdeable;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\n/**", "\n/**\n * Configuration for Twilio - Reads variable info from application.yaml, sourced by ENV variables\n */\n@Serdeable\n@ConfigurationProperties(\"twilio\")\npublic class TwilioConfiguration {\n\n    String validNumbers;\n\n    public String getValidNumbers() {\n        return validNumbers;\n    }\n\n    public ArrayList<String> getValidNumbersAsList() {\n", "    public String getValidNumbers() {\n        return validNumbers;\n    }\n\n    public ArrayList<String> getValidNumbersAsList() {\n\n        if (!StringUtils.isEmpty(validNumbers)) {\n            return new ArrayList<String>(Arrays.asList(validNumbers.split(\",\")));\n        } else {\n            return new ArrayList<String>();\n        }\n\n\n    }\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/config/ChatGPTConfiguration.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.config;\n\nimport io.micronaut.context.annotation.ConfigurationProperties;\nimport io.micronaut.serde.annotation.Serdeable;\n\n/**\n * Configuration for ChatGPT - Reads variable info from application.yaml, sourced by ENV variables\n */\n@Serdeable\n@ConfigurationProperties(\"chatgpt\")\npublic class ChatGPTConfiguration {\n\n    String apiKey;", "@Serdeable\n@ConfigurationProperties(\"chatgpt\")\npublic class ChatGPTConfiguration {\n\n    String apiKey;\n    public String getApiKey() {\n        return apiKey;\n    }\n\n    public void setApiKey(String apiKey) {\n        this.apiKey = apiKey;\n    }\n}\n", "    public void setApiKey(String apiKey) {\n        this.apiKey = apiKey;\n    }\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/util/ConfigUtils.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.util;\n\npublic class ConfigUtils {\n\n    /**\n     * Obfuscate API Key\n     * @param apiKey API Key\n     * @return Obfuscated API Key\n     */\n    public static String obfuscateApiKey(String apiKey) {\n\n        int apiKeyLength = apiKey.length();\n        int obfuscationLength = (int) Math.ceil(apiKeyLength / 2.0);\n        String obfuscationString = \"*\".repeat(obfuscationLength);\n        String obfuscatedApiKey = apiKey.substring(0, obfuscationLength) + obfuscationString + apiKey.substring(apiKeyLength - obfuscationLength);\n        return obfuscatedApiKey;\n\n    }\n\n}\n", "    public static String obfuscateApiKey(String apiKey) {\n\n        int apiKeyLength = apiKey.length();\n        int obfuscationLength = (int) Math.ceil(apiKeyLength / 2.0);\n        String obfuscationString = \"*\".repeat(obfuscationLength);\n        String obfuscatedApiKey = apiKey.substring(0, obfuscationLength) + obfuscationString + apiKey.substring(apiKeyLength - obfuscationLength);\n        return obfuscatedApiKey;\n\n    }\n\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/exception/RestException.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.exception;\n\nimport java.io.Serializable;\n\n/** Exception class for REST API */\npublic class RestException extends RuntimeException  implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    public RestException() {\n    }\n\n    public RestException(String message) {\n        super(message);\n    }\n\n    public RestException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public RestException(Throwable cause) {\n        super(cause);\n    }\n\n    public RestException(String message, Throwable cause,\n                           boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/web/VoiceController.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.web;\n\nimport com.ericblue.chatgpt3twilio.exception.RestException;\nimport com.ericblue.chatgpt3twilio.service.ChatGPTService;\nimport com.ericblue.chatgpt3twilio.service.TwilioService;\nimport io.micronaut.http.MediaType;\nimport io.micronaut.http.annotation.Body;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Post;\nimport com.twilio.twiml.VoiceResponse;", "import io.micronaut.http.annotation.Post;\nimport com.twilio.twiml.VoiceResponse;\nimport com.twilio.twiml.voice.Say;\nimport com.twilio.twiml.voice.Record;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Post;\nimport io.micronaut.http.annotation.QueryValue;\n\nimport java.net.URI;\nimport jakarta.inject.Inject;", "import java.net.URI;\nimport jakarta.inject.Inject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.Map;\n\n\n", "\n\n/** This controller is responsible for receiving Voice calls from Twilio\n * converting speech to text and sending them to the ChatGPTService.\n * Responses are then converted back from text to speech\n */\n\n@Controller(\"/voice\")\npublic class VoiceController {\n\n    private static final Logger logger = LoggerFactory.getLogger(VoiceController.class);\n\n    @Inject\n    ChatGPTService chatGPTService;\n\n    @Inject\n    TwilioService twilioService;\n\n\n    @Post(consumes = MediaType.APPLICATION_FORM_URLENCODED,\n            produces = MediaType.TEXT_XML)", "public class VoiceController {\n\n    private static final Logger logger = LoggerFactory.getLogger(VoiceController.class);\n\n    @Inject\n    ChatGPTService chatGPTService;\n\n    @Inject\n    TwilioService twilioService;\n\n\n    @Post(consumes = MediaType.APPLICATION_FORM_URLENCODED,\n            produces = MediaType.TEXT_XML)", "    public String processVoiceMessage(@Body Map<String, String> requestParams) {\n\n        String from = requestParams.get(\"From\");\n        String fromCity = requestParams.get(\"FromCity\");\n        String fromState = requestParams.get(\"FromState\");\n        String fromCountry = requestParams.get(\"FromCountry\");\n\n        logger.info(\"Received Voice call from \" + from);\n        logger.info(\"Location: \" + fromCity + \", \" + fromState + \", \" + fromCountry);\n\n        // TODO Update gather to provide further interaction, transcription and voice responses\n\n        return new VoiceResponse.Builder()\n                .say(\n                    new Say.Builder(\"Hello from Chat GPT.  Please ask your question and I'll do my best to answer.\").build()\n                ).build().toXml();\n\n    }\n\n}\n\n\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/web/SmsController.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.web;\n\nimport com.ericblue.chatgpt3twilio.exception.RestException;\nimport com.ericblue.chatgpt3twilio.service.ChatGPTService;\nimport com.ericblue.chatgpt3twilio.service.TwilioService;\nimport io.micronaut.http.MediaType;\nimport io.micronaut.http.annotation.Body;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Post;\nimport jakarta.inject.Inject;", "import io.micronaut.http.annotation.Post;\nimport jakarta.inject.Inject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;\n\n@Controller(\"/sms\")\n\n/** This controller is responsible for receiving SMS messages from Twilio and sending them to the ChatGPTService */", "\n/** This controller is responsible for receiving SMS messages from Twilio and sending them to the ChatGPTService */\n\npublic class SmsController {\n\n    private static final Logger logger = LoggerFactory.getLogger(SmsController.class);\n\n    @Inject\n    ChatGPTService chatGPTService;\n\n    @Inject\n    TwilioService twilioService;\n\n\n    /**\n     * This method is called when Twilio sends an SMS message to the application.\n     *  It validates the phone number and then sends the message to the ChatGPTService.\n     *\n     * @param requestParams Map of the request parameters\n     * @return String response from the ChatGPTService\n     *\n     */\n    @Post(consumes = MediaType.APPLICATION_FORM_URLENCODED,\n            produces = MediaType.TEXT_PLAIN)", "    public String processSMSMessage(@Body Map<String, String> requestParams) {\n\n        String from = requestParams.get(\"From\");\n        String fromCity = requestParams.get(\"FromCity\");\n        String fromState = requestParams.get(\"FromState\");\n        String fromCountry = requestParams.get(\"FromCountry\");\n        String body = requestParams.get(\"Body\");\n\n        logger.info(\"Received SMS from \" + from + \" with body \" + body);\n        logger.info(\"Location: \" + fromCity + \", \" + fromState + \", \" + fromCountry);\n", "        if (!twilioService.validatePhoneNumber(from)) {\n            logger.warn(\"Received SMS from invalid phone number: \" + from);\n            throw new RestException(\"Invalid phone number\");\n        }\n\n        String response = chatGPTService.askQuestion(body);\n        logger.debug(\"Response: \" + response);\n\n        return response;\n\n    }\n}\n\n\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/web/IndexController.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.web;\n\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.views.View;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n", "\n\n@Controller(\"/\")\npublic class IndexController {\n\n    @View(\"index\")\n    @Get\n    public Map<String, Object> index() {\n        Map<String, Object> model = new HashMap<>();\n        model.put(\"message\", \"Hello World\");\n        return model;\n    }\n\n}"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/web/ChatGPTController.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.web;\n\nimport com.ericblue.chatgpt3twilio.config.ChatGPTConfiguration;\nimport com.ericblue.chatgpt3twilio.domain.ChatMessage;\nimport com.ericblue.chatgpt3twilio.exception.RestException;\nimport com.ericblue.chatgpt3twilio.service.ChatGPTService;\nimport com.ericblue.chatgpt3twilio.util.ConfigUtils;\nimport com.github.jknack.handlebars.internal.lang3.StringUtils;\nimport io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;", "import io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.http.annotation.QueryValue;\nimport jakarta.inject.Inject;\n\n/**\n * This controller is responsible for returning the ChatGPT configuration\n * and sending messages to the ChatGPTService\n *\n * Note: This is primarily for testing purposes. All ChatGPT functionality is", " *\n * Note: This is primarily for testing purposes. All ChatGPT functionality is\n * abstracted and called within the SmsController.\n */\n@Controller(\"/chatgpt\")\npublic class ChatGPTController {\n\n    @Inject\n    ChatGPTService chatGPTService;\n\n    /** This method returns the ChatGPT configuration */\n    @Get(\"/config\")", "    public ChatGPTConfiguration getChatGPTConfiguration() {\n\n        if ( (chatGPTService.getChatGPTConfiguration().getApiKey() == null)) {\n            throw new RestException(\"chatGPTConfiguration is empty. CHATGPT_API_KEY environment variable is not set.\");\n        }\n\n        else {\n            ChatGPTConfiguration chatGPTConfiguration = chatGPTService.getChatGPTConfiguration();\n            chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));\n\n            return chatGPTConfiguration;\n\n        }\n\n    }\n\n    /**\n     * This method is called when the user sends a message to the ChatGPTService\n     ** @param message Message sent by the user\n     * @return ChatMessage response from the ChatGPTService\n     */\n\n    @Get(\"/chat\")", "    public ChatMessage sentChatMessage(@QueryValue(\"message\") String message) {\n\n        if (!(StringUtils.isEmpty(message))) {\n            String response = chatGPTService.askQuestion(message);\n            return new ChatMessage(response);\n        } else {\n            throw new RestException(\"message is empty\");\n        }\n\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/web/handler/ErrorMessage.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.web.handler;\n\n\nimport io.micronaut.serde.annotation.Serdeable;\n\n@Serdeable.Serializable\npublic class ErrorMessage  {\n\n    private String message;\n    private Boolean status;\n", "    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public Boolean getStatus() {\n        return status;\n    }\n", "    public Boolean getStatus() {\n        return status;\n    }\n\n    public void setStatus(Boolean status) {\n        this.status = status;\n    }\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/web/handler/RestExceptionHandler.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.web.handler;\n\nimport com.ericblue.chatgpt3twilio.exception.RestException;\nimport io.micronaut.context.annotation.Requires;\nimport io.micronaut.http.HttpRequest;\nimport io.micronaut.http.HttpResponse;\nimport io.micronaut.http.HttpStatus;\nimport io.micronaut.http.annotation.Produces;\nimport io.micronaut.http.server.exceptions.ExceptionHandler;\nimport jakarta.inject.Singleton;", "import io.micronaut.http.server.exceptions.ExceptionHandler;\nimport jakarta.inject.Singleton;\n\n@Produces\n@Singleton\n@Requires(classes = { RestExceptionHandler.class, ExceptionHandler.class })\npublic class RestExceptionHandler implements ExceptionHandler<RestException, HttpResponse<ErrorMessage>> {\n    @Override\n    public HttpResponse<ErrorMessage>\n    handle(HttpRequest request, RestException exception) {\n\n        ErrorMessage message = new ErrorMessage();\n        message.setMessage(exception.getMessage());\n        message.setStatus(false);\n        return HttpResponse.serverError(message).\n                status(HttpStatus.BAD_REQUEST);\n    }\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/service/ChatGPTService.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.service;\n\nimport com.ericblue.chatgpt3twilio.config.ChatGPTConfiguration;\nimport com.plexpt.chatgpt.ChatGPT;\nimport io.micronaut.core.annotation.Nullable;\nimport io.micronaut.runtime.context.scope.ThreadLocal;\n\n\n\n/**", "\n/**\n * This class is a wrapper for the ChatGPT client\n */\n\n@ThreadLocal\npublic class ChatGPTService {\n\n    private ChatGPT chatGPT;\n\n    private final ChatGPTConfiguration chatGPTConfiguration;\n\n    /**\n     * Constructor\n     * @param chatGPTConfiguration ChatGPT configuration containing the API key\n     */\n    public ChatGPTService(@Nullable ChatGPTConfiguration chatGPTConfiguration) {\n        this.chatGPTConfiguration = chatGPTConfiguration;\n\n        // Initialize ChatGPT client\n        chatGPT = ChatGPT.builder()\n                .apiKey(chatGPTConfiguration.getApiKey())\n                .timeout(900)\n                .apiHost(\"https://api.openai.com/\") //Reverse proxy address\n                .build()\n                .init();\n\n    }\n", "    public ChatGPTConfiguration getChatGPTConfiguration() {\n        return chatGPTConfiguration;\n    }\n\n    public String askQuestion(String question) {\n\n        return chatGPT.chat(question);\n\n    }\n\n}\n"]}
{"filename": "src/main/java/com/ericblue/chatgpt3twilio/service/TwilioService.java", "chunked_list": ["package com.ericblue.chatgpt3twilio.service;\n\nimport com.ericblue.chatgpt3twilio.config.TwilioConfiguration;\nimport io.micronaut.core.annotation.Nullable;\nimport jakarta.inject.Singleton;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\n", "import java.util.ArrayList;\n\n\n@Singleton\npublic class TwilioService {\n\n    private static final Logger logger = LoggerFactory.getLogger(TwilioService.class);\n\n    private final TwilioConfiguration twilioConfiguration;\n    public TwilioService(@Nullable TwilioConfiguration twilioConfiguration) {\n        this.twilioConfiguration = twilioConfiguration;\n    }\n\n    public ArrayList<String> getvalidNumbers() {\n        return twilioConfiguration.getValidNumbersAsList();\n    }\n\n    /**\n     * Validate that the phone number is in the list of valid phone numbers.\n     *  If no valid phone numbers are configured, all phone numbers are valid.\n     */", "    public boolean validatePhoneNumber(String phoneNumber) {\n        ArrayList<String> validPhoneNumbers = this.getvalidNumbers();\n\n        if (validPhoneNumbers.size() >=1) {\n\n            logger.info(\"Valid phone numbers for Twilio: \" + validPhoneNumbers);\n            boolean valid = validPhoneNumbers.contains(phoneNumber);\n            logger.info(\"Phone number \" + phoneNumber + \" is valid: \" + valid);\n\n            return valid;\n\n        } else {\n            logger.info(\"No phone numbers configured for Twilio. All phone numbers are valid.\");\n            return true;\n        }\n    }\n\n}\n"]}
