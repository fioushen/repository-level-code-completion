{"filename": "src/main/java/com/tati/utils/YoutubeAPI.java", "chunked_list": ["package com.tati.utils;\n\nimport java.util.List;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.json.gson.GsonFactory;\nimport com.google.api.services.youtube.YouTube;\nimport com.google.api.services.youtube.model.SearchListResponse;", "import com.google.api.services.youtube.YouTube;\nimport com.google.api.services.youtube.model.SearchListResponse;\nimport com.google.api.services.youtube.model.SearchResult;\nimport com.google.api.services.youtube.model.Video;\nimport com.google.api.services.youtube.model.VideoSnippet;\nimport com.google.api.services.youtube.model.VideoStatistics;\n\nimport java.io.IOException;\nimport java.math.BigInteger;\nimport java.security.GeneralSecurityException;", "import java.math.BigInteger;\nimport java.security.GeneralSecurityException;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\n\npublic class YoutubeAPI {\n\tprivate static final String APPLICATION_NAME = \"Youtube API Java Sample\";\n\tprivate static final String API_KEY = \"YOUR_API_KEY\";\n\n\t// Getting Video data based on the URL\n\tpublic List<String> getVideoData(String url) {\n\n\t\tString videoId = null;\n\n\t\tPattern pattern = Pattern.compile(\"^https://www\\\\.youtube\\\\.com/watch\\\\?v=([^&]+).*\");\n\t\tMatcher matcher = pattern.matcher(url);", "\t\tif (matcher.matches()) {\n\t\t\tvideoId = matcher.group(1);\n\t\t} else {\n\t\t\tvideoId = url.substring(url.lastIndexOf(\"/\") + 1);\n\t\t}\n\n\t\t// List to store the video data\n\t\tList<String> list = new ArrayList<String>();\n\n\t\ttry {\n\t\t\t// Set up the API client\n\t\t\tYouTube youtube = new YouTube.Builder(GoogleNetHttpTransport.newTrustedTransport(),\n\t\t\t\t\tGsonFactory.getDefaultInstance(), null).setApplicationName(APPLICATION_NAME).build();\n\n\t\t\t// Fetch the video data using the video ID and API key\n\t\t\tcom.google.api.services.youtube.YouTube.Videos.List videosListByIdRequest = youtube.videos()\n\t\t\t\t\t.list(\"snippet, contentDetails, statistics\");\n\t\t\tvideosListByIdRequest.setKey(API_KEY);\n\t\t\tvideosListByIdRequest.setId(videoId);\n\t\t\tVideo video = videosListByIdRequest.execute().getItems().get(0);\n\n\t\t\t// Get the video data\n\t\t\tVideoSnippet snippet = video.getSnippet();\n\t\t\tVideoStatistics statistics = video.getStatistics();\n\n\t\t\t// Channel Data ----------------------------------\n\n\t\t\t// Id\n\t\t\tString channelID = snippet.getChannelId();\n\t\t\t// Call the search().list method to retrieve the most popular video in the\n\t\t\t// channel\n\t\t\tYouTube.Search.List searchListRequest = youtube.search().list(\"id,snippet\");\n\t\t\tsearchListRequest.setChannelId(channelID);\n\t\t\tsearchListRequest.setType(\"video\");\n\t\t\tsearchListRequest.setFields(\"items(id(videoId),snippet(title))\");\n\t\t\tsearchListRequest.setOrder(\"viewCount\");\n\t\t\tsearchListRequest.setMaxResults(1L);\n\t\t\tSearchListResponse response = searchListRequest.setKey(API_KEY).execute();\n\n\t\t\t// Retrieve the video ID and title of the most popular video\n\t\t\tjava.util.List<SearchResult> items1 = response.getItems();\n\t\t\tString videoPopularTitle = items1.get(0).getSnippet().getTitle();\n\t\t\tString videoPopularId = items1.get(0).getId().getVideoId();\n\t\t\tString videoLink = \"https://www.youtube.com/watch?v=\" + videoPopularId;\n\n\t\t\t// Title\n\t\t\tString channelTitle = snippet.getChannelTitle();\n\n\t\t\t// Video Data ----------------------------------\n\n\t\t\t// Video Title\n\t\t\tString videoTitle = snippet.getTitle();\n\n\t\t\t// published At\n\t\t\tString publishedTime = snippet.getPublishedAt().toString();\n\t\t\tLocalDateTime publishedDateTime = LocalDateTime.parse(publishedTime, DateTimeFormatter.ISO_DATE_TIME);\n\n\t\t\t// Format the LocalDateTime object using a custom DateTimeFormatter\n\t\t\tString publishedAt = publishedDateTime.format(DateTimeFormatter.ofPattern(\"MMMM d, yyyy 'at' hh:mm a\"));\n\n\t\t\t// View Count\n\t\t\tBigInteger view_count = statistics.getViewCount();\n\t\t\tString viewCount = view_count.toString();\n\n\t\t\t// Like Count\n\t\t\tBigInteger like_count = statistics.getLikeCount();\n\t\t\tString likeCount = like_count.toString();\n\n\t\t\t// Comment Count\n\t\t\tBigInteger comment_count = statistics.getCommentCount();\n\t\t\tString commentCount = comment_count.toString();\n\n\t\t\t// Engagement Rate\n\t\t\tBigInteger total_interactions = like_count.add(comment_count);\n\t\t\tDouble engagement_rate = (total_interactions.doubleValue() / view_count.doubleValue()) * 100;\n\t\t\tString engagementRate = String.format(\"%.2f\", engagement_rate);\n\n\t\t\t// Add data to the list\n\t\t\t// list = [Title, Published At, View Count, Like Count, Comment Count,\n\t\t\t// engagement_rate,Channel name, Most popular video title, Most popular video\n\t\t\t// link]\n\t\t\tlist.add(videoTitle.replaceAll(\"&#39;\", \"'\"));\n\t\t\tlist.add(publishedAt);\n\t\t\tlist.add(viewCount);\n\t\t\tlist.add(likeCount);\n\t\t\tlist.add(commentCount);\n\t\t\tlist.add(engagementRate);\n\t\t\tlist.add(channelTitle.replaceAll(\"&#39;\", \"'\"));\n\t\t\tlist.add(videoPopularTitle.replaceAll(\"&#39;\", \"'\"));\n\t\t\tlist.add(videoLink);\n\n\t\t\treturn list;\n\n\t\t} catch (GeneralSecurityException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n", "\t\ttry {\n\t\t\t// Set up the API client\n\t\t\tYouTube youtube = new YouTube.Builder(GoogleNetHttpTransport.newTrustedTransport(),\n\t\t\t\t\tGsonFactory.getDefaultInstance(), null).setApplicationName(APPLICATION_NAME).build();\n\n\t\t\t// Fetch the video data using the video ID and API key\n\t\t\tcom.google.api.services.youtube.YouTube.Videos.List videosListByIdRequest = youtube.videos()\n\t\t\t\t\t.list(\"snippet, contentDetails, statistics\");\n\t\t\tvideosListByIdRequest.setKey(API_KEY);\n\t\t\tvideosListByIdRequest.setId(videoId);\n\t\t\tVideo video = videosListByIdRequest.execute().getItems().get(0);\n\n\t\t\t// Get the video data\n\t\t\tVideoSnippet snippet = video.getSnippet();\n\t\t\tVideoStatistics statistics = video.getStatistics();\n\n\t\t\t// Channel Data ----------------------------------\n\n\t\t\t// Id\n\t\t\tString channelID = snippet.getChannelId();\n\t\t\t// Call the search().list method to retrieve the most popular video in the\n\t\t\t// channel\n\t\t\tYouTube.Search.List searchListRequest = youtube.search().list(\"id,snippet\");\n\t\t\tsearchListRequest.setChannelId(channelID);\n\t\t\tsearchListRequest.setType(\"video\");\n\t\t\tsearchListRequest.setFields(\"items(id(videoId),snippet(title))\");\n\t\t\tsearchListRequest.setOrder(\"viewCount\");\n\t\t\tsearchListRequest.setMaxResults(1L);\n\t\t\tSearchListResponse response = searchListRequest.setKey(API_KEY).execute();\n\n\t\t\t// Retrieve the video ID and title of the most popular video\n\t\t\tjava.util.List<SearchResult> items1 = response.getItems();\n\t\t\tString videoPopularTitle = items1.get(0).getSnippet().getTitle();\n\t\t\tString videoPopularId = items1.get(0).getId().getVideoId();\n\t\t\tString videoLink = \"https://www.youtube.com/watch?v=\" + videoPopularId;\n\n\t\t\t// Title\n\t\t\tString channelTitle = snippet.getChannelTitle();\n\n\t\t\t// Video Data ----------------------------------\n\n\t\t\t// Video Title\n\t\t\tString videoTitle = snippet.getTitle();\n\n\t\t\t// published At\n\t\t\tString publishedTime = snippet.getPublishedAt().toString();\n\t\t\tLocalDateTime publishedDateTime = LocalDateTime.parse(publishedTime, DateTimeFormatter.ISO_DATE_TIME);\n\n\t\t\t// Format the LocalDateTime object using a custom DateTimeFormatter\n\t\t\tString publishedAt = publishedDateTime.format(DateTimeFormatter.ofPattern(\"MMMM d, yyyy 'at' hh:mm a\"));\n\n\t\t\t// View Count\n\t\t\tBigInteger view_count = statistics.getViewCount();\n\t\t\tString viewCount = view_count.toString();\n\n\t\t\t// Like Count\n\t\t\tBigInteger like_count = statistics.getLikeCount();\n\t\t\tString likeCount = like_count.toString();\n\n\t\t\t// Comment Count\n\t\t\tBigInteger comment_count = statistics.getCommentCount();\n\t\t\tString commentCount = comment_count.toString();\n\n\t\t\t// Engagement Rate\n\t\t\tBigInteger total_interactions = like_count.add(comment_count);\n\t\t\tDouble engagement_rate = (total_interactions.doubleValue() / view_count.doubleValue()) * 100;\n\t\t\tString engagementRate = String.format(\"%.2f\", engagement_rate);\n\n\t\t\t// Add data to the list\n\t\t\t// list = [Title, Published At, View Count, Like Count, Comment Count,\n\t\t\t// engagement_rate,Channel name, Most popular video title, Most popular video\n\t\t\t// link]\n\t\t\tlist.add(videoTitle.replaceAll(\"&#39;\", \"'\"));\n\t\t\tlist.add(publishedAt);\n\t\t\tlist.add(viewCount);\n\t\t\tlist.add(likeCount);\n\t\t\tlist.add(commentCount);\n\t\t\tlist.add(engagementRate);\n\t\t\tlist.add(channelTitle.replaceAll(\"&#39;\", \"'\"));\n\t\t\tlist.add(videoPopularTitle.replaceAll(\"&#39;\", \"'\"));\n\t\t\tlist.add(videoLink);\n\n\t\t\treturn list;\n\n\t\t} catch (GeneralSecurityException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/tati/dao/YoutubeDAOImpl.java", "chunked_list": ["package com.tati.dao;\n\nimport org.hibernate.SessionFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Repository;\n\nimport com.tati.model.YoutubeData;\n\n@Repository\npublic class YoutubeDAOImpl implements YoutubeDAO{\n\t\n\t@Autowired\n\tprivate SessionFactory sf;\n", "@Repository\npublic class YoutubeDAOImpl implements YoutubeDAO{\n\t\n\t@Autowired\n\tprivate SessionFactory sf;\n\n\tpublic long save(YoutubeData data) {\n\t\tsf.getCurrentSession().save(data);\n\t\treturn data.getId();\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/tati/dao/YoutubeDAO.java", "chunked_list": ["package com.tati.dao;\n\nimport com.tati.model.YoutubeData;\n\npublic interface YoutubeDAO {\n\n\t// save a record\n\tlong save(YoutubeData data);\n\n}\n"]}
{"filename": "src/main/java/com/tati/config/WebConfig.java", "chunked_list": ["package com.tati.config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n\n@Configuration\n@EnableWebMvc", "@Configuration\n@EnableWebMvc\n@ComponentScan(basePackages = {\"com.tati.controller\"})\npublic class WebConfig implements WebMvcConfigurer{\n\n}\n"]}
{"filename": "src/main/java/com/tati/config/AppConfig.java", "chunked_list": ["package com.tati.config;\n\nimport java.util.Properties;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.ComponentScans;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;", "import org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.PropertySource;\nimport org.springframework.core.env.Environment;\nimport org.springframework.orm.hibernate5.HibernateTransactionManager;\nimport org.springframework.orm.hibernate5.LocalSessionFactoryBean;\nimport org.springframework.transaction.annotation.EnableTransactionManagement;\nimport static org.hibernate.cfg.Environment.*;\n\n@Configuration\n@PropertySource(\"classpath:db.properties\")", "@Configuration\n@PropertySource(\"classpath:db.properties\")\n@EnableTransactionManagement\n@ComponentScans(value= {\n\t\t@ComponentScan(\"com.tati.dao\"),\n\t\t@ComponentScan(\"com.tati.service\")\n})\npublic class AppConfig {\n\t\n\t@Autowired\n\tprivate Environment env;\n\t\n\t@Bean", "\tpublic LocalSessionFactoryBean getSessionFactory() {\n\t\tLocalSessionFactoryBean factoryBean = new LocalSessionFactoryBean();\n\t\tProperties properties = new Properties();\n\t\t\n\t\t// Setting the jdbc properties\n\t\tproperties.put(DRIVER, env.getProperty(\"mysql.driver\"));\n\t\tproperties.put(URL, env.getProperty(\"mysql.url\"));\n\t\tproperties.put(USER, env.getProperty(\"mysql.user\"));\n\t\tproperties.put(PASS, env.getProperty(\"mysql.password\"));\n\t\t\n\t\t// Setting Hibernate properties\n\t\tproperties.put(SHOW_SQL, env.getProperty(\"hibernate.show_sql\"));\n\t\tproperties.put(HBM2DDL_AUTO, env.getProperty(\"hibernate.hbm2ddl.auto\"));\n\t\t\n\t\t// Setting C3P0 properties\n\t\tproperties.put(C3P0_MIN_SIZE, env.getProperty(\"hibernate.c3p0.min_size\"));\n\t\tproperties.put(C3P0_MAX_SIZE, env.getProperty(\"hibernate.c3p0.max_size\"));\n\t\tproperties.put(C3P0_ACQUIRE_INCREMENT, env.getProperty(\"hibernate.c3p0.acquire_increment\"));\n\t\tproperties.put(C3P0_TIMEOUT, env.getProperty(\"hibernate.c3p0.timeout\"));\n\t\tproperties.put(C3P0_MAX_STATEMENTS, env.getProperty(\"hibernate.c3p0.max_statements\"));\n\t\t\n\t\t// Set properties to factory bean\n\t\tfactoryBean.setHibernateProperties(properties);\n\t\t\n\t\t// Set package to scan\n\t\tfactoryBean.setPackagesToScan(\"com.tati.model\");\n\t\t\n\t\treturn factoryBean;\n\t\t\n\t}\n\t\n\t@Bean", "\tpublic HibernateTransactionManager getTransactionManager() {\n\t\tHibernateTransactionManager transactionManager = new HibernateTransactionManager();\n\t\ttransactionManager.setSessionFactory(getSessionFactory().getObject());\n\t\t\n\t\treturn transactionManager;\n\t\t\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/tati/config/WebAppInitializer.java", "chunked_list": ["package com.tati.config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n\npublic class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer{\n\n\t@Override\n\tprotected Class<?>[] getRootConfigClasses() {\n\t\t\n\t\treturn new Class[] {AppConfig.class};\n\t}\n\n\t@Override\n\tprotected Class<?>[] getServletConfigClasses() {\n\t\t\n\t\treturn new Class[] {WebConfig.class};\n\t}\n\n\t@Override\n\tprotected String[] getServletMappings() {\n\t\t\n\t\treturn new String[] {\"/\"};\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/tati/model/YoutubeData.java", "chunked_list": ["package com.tati.model;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\n\n@Entity(name = \"YoutubeData\")\npublic class YoutubeData {\n\t\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String videoTitle;\n\n\tprivate String publishedAt;\n\t\n\tprivate String viewCount;\n\t\n\tprivate String likeCount;\n\t\n\tprivate String commentCount;\n\t\n\tprivate String engagementRate;\n\t\n\tprivate String channelTitle;\n\t\n\tprivate String videoPopularTitle;\n\t\n\tprivate String videoPopularLink;\n", "public class YoutubeData {\n\t\n\t@Id\n\t@GeneratedValue(strategy = GenerationType.IDENTITY)\n\tprivate Long id;\n\n\tprivate String videoTitle;\n\n\tprivate String publishedAt;\n\t\n\tprivate String viewCount;\n\t\n\tprivate String likeCount;\n\t\n\tprivate String commentCount;\n\t\n\tprivate String engagementRate;\n\t\n\tprivate String channelTitle;\n\t\n\tprivate String videoPopularTitle;\n\t\n\tprivate String videoPopularLink;\n", "\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getVideoTitle() {\n\t\treturn videoTitle;\n\t}\n", "\tpublic String getVideoTitle() {\n\t\treturn videoTitle;\n\t}\n\n\tpublic void setVideoTitle(String videoTitle) {\n\t\tthis.videoTitle = videoTitle;\n\t}\n\n\tpublic String getPublishedAt() {\n\t\treturn publishedAt;\n\t}\n", "\tpublic String getPublishedAt() {\n\t\treturn publishedAt;\n\t}\n\n\tpublic void setPublishedAt(String publishedAt) {\n\t\tthis.publishedAt = publishedAt;\n\t}\n\n\tpublic String getViewCount() {\n\t\treturn viewCount;\n\t}\n", "\tpublic String getViewCount() {\n\t\treturn viewCount;\n\t}\n\n\tpublic void setViewCount(String viewCount) {\n\t\tthis.viewCount = viewCount;\n\t}\n\n\tpublic String getLikeCount() {\n\t\treturn likeCount;\n\t}\n", "\tpublic String getLikeCount() {\n\t\treturn likeCount;\n\t}\n\n\tpublic void setLikeCount(String likeCount) {\n\t\tthis.likeCount = likeCount;\n\t}\n\n\tpublic String getCommentCount() {\n\t\treturn commentCount;\n\t}\n", "\tpublic String getCommentCount() {\n\t\treturn commentCount;\n\t}\n\n\tpublic void setCommentCount(String commentCount) {\n\t\tthis.commentCount = commentCount;\n\t}\n\n\tpublic String getEngagementRate() {\n\t\treturn engagementRate;\n\t}\n", "\tpublic String getEngagementRate() {\n\t\treturn engagementRate;\n\t}\n\n\tpublic void setEngagementRate(String engagementRate) {\n\t\tthis.engagementRate = engagementRate;\n\t}\n\n\tpublic String getChannelTitle() {\n\t\treturn channelTitle;\n\t}\n", "\tpublic String getChannelTitle() {\n\t\treturn channelTitle;\n\t}\n\n\tpublic void setChannelTitle(String channelTitle) {\n\t\tthis.channelTitle = channelTitle;\n\t}\n\n\tpublic String getVideoPopularTitle() {\n\t\treturn videoPopularTitle;\n\t}\n", "\tpublic String getVideoPopularTitle() {\n\t\treturn videoPopularTitle;\n\t}\n\n\tpublic void setVideoPopularTitle(String videoPopularTitle) {\n\t\tthis.videoPopularTitle = videoPopularTitle;\n\t}\n\n\tpublic String getVideoPopularLink() {\n\t\treturn videoPopularLink;\n\t}\n", "\tpublic String getVideoPopularLink() {\n\t\treturn videoPopularLink;\n\t}\n\n\tpublic void setVideoPopularLink(String videoPopularLink) {\n\t\tthis.videoPopularLink = videoPopularLink;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"YoutubeData [id=\" + id + \", videoTitle=\" + videoTitle + \", publishedAt=\" + publishedAt + \", viewCount=\"\n\t\t\t\t+ viewCount + \", likeCount=\" + likeCount + \", commentCount=\" + commentCount + \", engagementRate=\"\n\t\t\t\t+ engagementRate + \", channelTitle=\" + channelTitle + \", videoPopularTitle=\" + videoPopularTitle\n\t\t\t\t+ \", videoPopularLink=\" + videoPopularLink + \"]\";\n\t}\n\t\n\t\n\n}\n", "\tpublic String toString() {\n\t\treturn \"YoutubeData [id=\" + id + \", videoTitle=\" + videoTitle + \", publishedAt=\" + publishedAt + \", viewCount=\"\n\t\t\t\t+ viewCount + \", likeCount=\" + likeCount + \", commentCount=\" + commentCount + \", engagementRate=\"\n\t\t\t\t+ engagementRate + \", channelTitle=\" + channelTitle + \", videoPopularTitle=\" + videoPopularTitle\n\t\t\t\t+ \", videoPopularLink=\" + videoPopularLink + \"]\";\n\t}\n\t\n\t\n\n}\n"]}
{"filename": "src/main/java/com/tati/controller/YoutubeAPIController.java", "chunked_list": ["package com.tati.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.tati.model.YoutubeData;\nimport com.tati.service.YoutubeService;", "import com.tati.model.YoutubeData;\nimport com.tati.service.YoutubeService;\nimport com.tati.utils.YoutubeAPI;\n\nimport java.util.List;\n\n@CrossOrigin(\"*\")\n@RestController\npublic class YoutubeAPIController {\n\t\n\t@Autowired\n\tprivate YoutubeService youtubeService;\n\t\n\t\n\t\n\t@PostMapping(\"/api/data\")", "public class YoutubeAPIController {\n\t\n\t@Autowired\n\tprivate YoutubeService youtubeService;\n\t\n\t\n\t\n\t@PostMapping(\"/api/data\")\n\tpublic YoutubeData add(@RequestParam(name= \"url\") String url){\n\t\tif (url != null) {\n\t\t\tYoutubeAPI youtube = new YoutubeAPI();\n\t\t\tList<String> videoData = youtube.getVideoData(url);\n\t\t\t\n\t\t\tYoutubeData dataHolder= new YoutubeData();\n\t\t\tdataHolder.setVideoTitle(videoData.get(0));\n\t\t\tdataHolder.setPublishedAt(videoData.get(1));\n\t\t\tdataHolder.setViewCount(videoData.get(2));\n\t\t\tdataHolder.setLikeCount(videoData.get(3));\n\t\t\tdataHolder.setCommentCount(videoData.get(4));\n\t\t\tdataHolder.setEngagementRate(videoData.get(5));\n\t\t\tdataHolder.setChannelTitle(videoData.get(6));\n\t\t\tdataHolder.setVideoPopularTitle(videoData.get(7));\n\t\t\tdataHolder.setVideoPopularLink(videoData.get(8));\n\t\t\t\n\t\t\tyoutubeService.save(dataHolder);\n\t\t\t\n\t\t\treturn dataHolder;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t\n\t}\n}\n", "\tpublic YoutubeData add(@RequestParam(name= \"url\") String url){\n\t\tif (url != null) {\n\t\t\tYoutubeAPI youtube = new YoutubeAPI();\n\t\t\tList<String> videoData = youtube.getVideoData(url);\n\t\t\t\n\t\t\tYoutubeData dataHolder= new YoutubeData();\n\t\t\tdataHolder.setVideoTitle(videoData.get(0));\n\t\t\tdataHolder.setPublishedAt(videoData.get(1));\n\t\t\tdataHolder.setViewCount(videoData.get(2));\n\t\t\tdataHolder.setLikeCount(videoData.get(3));\n\t\t\tdataHolder.setCommentCount(videoData.get(4));\n\t\t\tdataHolder.setEngagementRate(videoData.get(5));\n\t\t\tdataHolder.setChannelTitle(videoData.get(6));\n\t\t\tdataHolder.setVideoPopularTitle(videoData.get(7));\n\t\t\tdataHolder.setVideoPopularLink(videoData.get(8));\n\t\t\t\n\t\t\tyoutubeService.save(dataHolder);\n\t\t\t\n\t\t\treturn dataHolder;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t\n\t}\n}\n"]}
{"filename": "src/main/java/com/tati/service/YoutubeService.java", "chunked_list": ["package com.tati.service;\n\nimport com.tati.model.YoutubeData;\n\npublic interface YoutubeService {\n\n\t// save a record\n\tlong save(YoutubeData data);\n\n}\n"]}
{"filename": "src/main/java/com/tati/service/YoutubeServiceImpl.java", "chunked_list": ["package com.tati.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.tati.dao.YoutubeDAO;\nimport com.tati.model.YoutubeData;\n\nimport jakarta.transaction.Transactional;\n", "import jakarta.transaction.Transactional;\n\n@Service\npublic class YoutubeServiceImpl implements YoutubeService{\n\n\t@Autowired\n\tprivate YoutubeDAO youtubeDAO;\n\t\n\t@Transactional\n\tpublic long save(YoutubeData data) {\n\t\treturn youtubeDAO.save(data);\n\t}\n\n}\n", "\tpublic long save(YoutubeData data) {\n\t\treturn youtubeDAO.save(data);\n\t}\n\n}\n"]}
