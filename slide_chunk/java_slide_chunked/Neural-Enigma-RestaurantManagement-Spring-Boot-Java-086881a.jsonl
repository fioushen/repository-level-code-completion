{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/RestaurantManagementApplication.java", "chunked_list": ["package com.example.RestaurantManagement;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class RestaurantManagementApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(RestaurantManagementApplication.class, args);\n    }\n\n}\n", "    public static void main(String[] args) {\n        SpringApplication.run(RestaurantManagementApplication.class, args);\n    }\n\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Services/DishService.java", "chunked_list": ["package com.example.RestaurantManagement.Services;\n\nimport com.example.RestaurantManagement.Models.Dish;\nimport com.example.RestaurantManagement.Models.DishType;\nimport com.example.RestaurantManagement.Models.OrderedDish;\nimport com.example.RestaurantManagement.Repositories.DishRepository;\nimport com.example.RestaurantManagement.Repositories.DishTypeRepository;\nimport com.example.RestaurantManagement.Repositories.OrderedDishRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class DishService {\n\n    private final DishRepository dishRepository;\n    private final OrderedDishRepository orderedDishRepository;\n    private final DishTypeRepository dishTypeRepository;\n\n    @Autowired\n    public DishService(DishRepository dishRepository, OrderedDishRepository orderedDishRepository, DishTypeRepository dishTypeRepository) {\n        this.dishRepository = dishRepository;\n        this.orderedDishRepository = orderedDishRepository;\n        this.dishTypeRepository = dishTypeRepository;\n    }\n\n    public List<Dish> getAllDishes() {\n        return dishRepository.findAll();\n    }\n", "    public boolean checkIfDishIsOrdered(int id) {\n        List<OrderedDish> orderedDishes = orderedDishRepository.findAllByDish_Id(id);\n        return !orderedDishes.isEmpty();\n    }\n\n    public void editDish(int id, String name, double cost, String typeName) {\n        Optional<Dish> optionalDish = dishRepository.findById(id);\n        if (optionalDish.isPresent()) {\n            Dish dish = optionalDish.get();\n            dish.setName(name);\n            dish.setCost(cost);\n            DishType dishType = dishTypeRepository.findByName(typeName);", "            if (dishType != null) {\n                dish.setType(dishType);\n            }\n            dishRepository.save(dish);\n        }\n    }\n\n    public void deleteDish(int id) {\n        dishRepository.deleteById(id);\n    }\n", "    public void addDish(String name, double cost, String typeName) {\n        DishType dishType = dishTypeRepository.findByName(typeName);\n        if (dishType != null) {\n            Dish dish = new Dish();\n            dish.setName(name);\n            dish.setCost(cost);\n            dish.setType(dishType);\n            dishRepository.save(dish);\n        }\n    }\n", "    public Dish getDishById(int id) {\n        return dishRepository.findById(id).orElse(null);\n    }\n\n    public void editDishDetails(int id, String name, String description, String recipe){//}, byte[] image) {\n        Dish dish = getDishById(id);\n        if (dish != null) {\n            dish.setName(name);\n            dish.setDescription(description);\n            dish.setRecipe(recipe);\n           // dish.setImage(image);\n            dishRepository.save(dish);\n        }\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Services/TableBookingService.java", "chunked_list": ["package com.example.RestaurantManagement.Services;\n\nimport com.example.RestaurantManagement.Models.TableBooking;\nimport com.example.RestaurantManagement.Models.Tables;\nimport com.example.RestaurantManagement.Repositories.TableBookingRepository;\nimport com.example.RestaurantManagement.Repositories.TablesRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.sql.Date;", "\nimport java.sql.Date;\nimport java.sql.Time;\nimport java.util.List;\n\n@Service\npublic class TableBookingService {\n\n    private final TableBookingRepository tableBookingRepository;\n    private final TablesRepository tablesRepository;\n\n    @Autowired\n    public TableBookingService(TableBookingRepository tableBookingRepository,\n                               TablesRepository tablesRepository) {\n        this.tableBookingRepository = tableBookingRepository;\n        this.tablesRepository = tablesRepository;\n    }\n\n    public List<Tables> getAllTables() {\n        return tablesRepository.findAll();\n    }\n\n    public List<TableBooking> getAllBookings() {\n        return tableBookingRepository.findAll();\n    }\n", "    public String bookTable(int tableId, Date date, Time time, String info) {\n        Tables table = tablesRepository.findById(tableId).orElse(null);\n        if (table == null) {\n            return \"\u0421\u0442\u043e\u043b\u0438\u043a \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\";\n        }\n\n        TableBooking booking = new TableBooking();\n        booking.setTable(table);\n        booking.setDate(date);\n        booking.setTime(time);\n        booking.setInfo(info);\n        tableBookingRepository.save(booking);\n\n        return \"\u0421\u0442\u043e\u043b\u0438\u043a \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\";\n    }\n", "    public boolean isTableBooked(int tableId, Date date, Time time) {\n        List<TableBooking> bookings = this.getAllBookings();\n        for (TableBooking booking : bookings) {\n            if (booking.getTable().getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void deleteBooking(int id) {\n        tableBookingRepository.deleteById(id);\n    }\n\n}\n", "    public void deleteBooking(int id) {\n        tableBookingRepository.deleteById(id);\n    }\n\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Services/StaffService.java", "chunked_list": ["package com.example.RestaurantManagement.Services;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport com.example.RestaurantManagement.Repositories.StaffRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n", "import java.util.Optional;\n\n@Service\npublic class StaffService {\n    private final StaffRepository staffRepository;\n\n    @Autowired\n    public StaffService(StaffRepository staffRepository) {\n        this.staffRepository = staffRepository;\n    }\n\n    public List<Staff> getAllStaff() {\n        return staffRepository.findAll();\n    }\n", "    public void saveStaff(Staff staff) {\n        staffRepository.save(staff);\n    }\n\n    public void updateStaff(Staff staff) {\n        staffRepository.save(staff);\n    }\n\n    public void deleteStaff(Staff staff) {\n        staffRepository.delete(staff);\n    }\n", "    public void deleteStaff(Staff staff) {\n        staffRepository.delete(staff);\n    }\n\n    public Staff getStaffById(int id) {\n        Optional<Staff> staff = staffRepository.findById(id);\n        if (staff.isPresent()) {\n            return staff.get();\n        } else {\n            throw new RuntimeException(\"Staff not found for id: \" + id);\n        }\n    }", "    public boolean loginExists(String login) {\n        return staffRepository.findByLogin(login) != null;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Services/OrderService.java", "chunked_list": ["package com.example.RestaurantManagement.Services;\n\nimport com.example.RestaurantManagement.Models.Order;\nimport com.example.RestaurantManagement.Models.OrderedDish;\nimport com.example.RestaurantManagement.Models.Tables;\nimport com.example.RestaurantManagement.Repositories.OrderRepository;\nimport com.example.RestaurantManagement.Repositories.OrderedDishRepository;\nimport jakarta.transaction.Transactional;\nimport org.springframework.stereotype.Service;\n", "import org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\npublic class OrderService {\n\n    private final OrderRepository orderRepository;\n    private final OrderedDishRepository orderedDishRepository;\n\n    public OrderService(OrderRepository orderRepository, OrderedDishRepository orderedDishRepository) {\n        this.orderRepository = orderRepository;\n        this.orderedDishRepository = orderedDishRepository;\n    }\n\n    public List<Order> getAllOrders() {\n        List<Order> orders = orderRepository.findAll();", "        for (Order order : orders) {\n            if (order == null) {\n                order = new Order();\n            }\n            if (order.getTable() == null) {\n                order.setTable(new Tables());\n            }\n        }\n        return orders;\n    }\n\n    @Transactional", "    public void deleteOrder(int id) {\n        Order order = orderRepository.findById(id).orElseThrow(() -> new IllegalArgumentException(\"Order not found\"));\n        List<OrderedDish> orderedDishes = orderedDishRepository.findByOrder(order);\n        orderedDishRepository.deleteInBatch(orderedDishes);\n        orderRepository.delete(order);\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/Recipe.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"recipes\")\npublic class Recipe {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int idrecipes;\n\n    @Column(name = \"information\")\n    private String information;\n\n    @Column(name = \"instruction\")\n    private String instruction;\n\n    @Column(name = \"photo\")\n    private String photo;\n", "    public int getIdrecipes() {\n        return idrecipes;\n    }\n\n    public void setIdrecipes(int idrecipes) {\n        this.idrecipes = idrecipes;\n    }\n\n    public String getInformation() {\n        return information;\n    }\n", "    public String getInformation() {\n        return information;\n    }\n\n    public void setInformation(String information) {\n        this.information = information;\n    }\n\n    public String getInstruction() {\n        return instruction;\n    }\n", "    public String getInstruction() {\n        return instruction;\n    }\n\n    public void setInstruction(String instruction) {\n        this.instruction = instruction;\n    }\n\n    public String getPhoto() {\n        return photo;\n    }\n", "    public String getPhoto() {\n        return photo;\n    }\n\n    public void setPhoto(String photo) {\n        this.photo = photo;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/DishType.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\n\n@Entity\n@Table(name = \"dish_types\")\npublic class DishType {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"name\")\n    private String name;\n", "    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/Order.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\nimport java.sql.Timestamp;\nimport java.util.List;\n\n@Entity\n@Table(name = \"orders\")\npublic class Order {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"information\")\n    private String information;\n\n    @Column(name = \"total_cost\")\n    private double totalCost;\n\n    @ManyToOne\n    @JoinColumn(name = \"table_id\")\n    private Tables table;\n\n    @Column(name = \"start_time\")\n    private Timestamp startTime;\n\n    @Column(name = \"end_time\")\n    private Timestamp endTime;\n\n    @Column(name = \"status\")\n    private String status;\n\n    @OneToMany(mappedBy = \"order\", fetch = FetchType.EAGER)\n    private List<OrderedDish> orderedDishes;\n\n    public List<OrderedDish> getOrderedDishes() {\n        return orderedDishes;\n    }\n", "@Table(name = \"orders\")\npublic class Order {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"information\")\n    private String information;\n\n    @Column(name = \"total_cost\")\n    private double totalCost;\n\n    @ManyToOne\n    @JoinColumn(name = \"table_id\")\n    private Tables table;\n\n    @Column(name = \"start_time\")\n    private Timestamp startTime;\n\n    @Column(name = \"end_time\")\n    private Timestamp endTime;\n\n    @Column(name = \"status\")\n    private String status;\n\n    @OneToMany(mappedBy = \"order\", fetch = FetchType.EAGER)\n    private List<OrderedDish> orderedDishes;\n\n    public List<OrderedDish> getOrderedDishes() {\n        return orderedDishes;\n    }\n", "    public void setOrderedDishes(List<OrderedDish> orderedDishes) {\n        this.orderedDishes = orderedDishes;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n", "    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getInformation() {\n        return information;\n    }\n\n    public void setInformation(String information) {\n        this.information = information;\n    }\n", "    public void setInformation(String information) {\n        this.information = information;\n    }\n\n    public double getTotalCost() {\n        return totalCost;\n    }\n\n    public void setTotalCost(double totalCost) {\n        this.totalCost = totalCost;\n    }\n", "    public void setTotalCost(double totalCost) {\n        this.totalCost = totalCost;\n    }\n\n    public Tables getTable() {\n        return table;\n    }\n\n    public void setTable(Tables table) {\n        this.table = table;\n    }\n", "    public void setTable(Tables table) {\n        this.table = table;\n    }\n\n    public Timestamp getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(Timestamp startTime) {\n        this.startTime = startTime;\n    }\n", "    public void setStartTime(Timestamp startTime) {\n        this.startTime = startTime;\n    }\n\n    public Timestamp getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(Timestamp endTime) {\n        this.endTime = endTime;\n    }\n", "    public void setEndTime(Timestamp endTime) {\n        this.endTime = endTime;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n}\n\n", "    public void setStatus(String status) {\n        this.status = status;\n    }\n}\n\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/WorkHour.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\nimport java.sql.Date;\n\n@Entity\n@Table(name = \"work_hours\")\npublic class WorkHour {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"staff_id\")\n    private Staff staff;\n\n    @Column(name = \"date\")\n    private Date date;\n", "public class WorkHour {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"staff_id\")\n    private Staff staff;\n\n    @Column(name = \"date\")\n    private Date date;\n", "    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public Staff getStaff() {\n        return staff;\n    }\n", "    public Staff getStaff() {\n        return staff;\n    }\n\n    public void setStaff(Staff staff) {\n        this.staff = staff;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n", "    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/Staff.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\nimport java.sql.Date;\n\n@Entity\n@Table(name = \"staff\")\npublic class Staff {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"login\")\n    private String login;\n\n    @Column(name = \"password\")\n    private String password;\n\n    @Column(name = \"role\")\n    private String role;\n\n    @Column(name = \"apparatus_employed\")\n    private Date apparatusEmployed;\n\n    @Column(name = \"dismissal_from_work\")\n    private Date dismissalFromWork;\n", "public class Staff {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"login\")\n    private String login;\n\n    @Column(name = \"password\")\n    private String password;\n\n    @Column(name = \"role\")\n    private String role;\n\n    @Column(name = \"apparatus_employed\")\n    private Date apparatusEmployed;\n\n    @Column(name = \"dismissal_from_work\")\n    private Date dismissalFromWork;\n", "    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getLogin() {\n        return login;\n    }\n", "    public String getLogin() {\n        return login;\n    }\n\n    public void setLogin(String login) {\n        this.login = login;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n", "    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getRole() {\n        return role;\n    }\n", "    public String getRole() {\n        return role;\n    }\n\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public Date getApparatusEmployed() {\n        return apparatusEmployed;\n    }\n", "    public Date getApparatusEmployed() {\n        return apparatusEmployed;\n    }\n\n    public void setApparatusEmployed(Date apparatusEmployed) {\n        this.apparatusEmployed = apparatusEmployed;\n    }\n\n    public Date getDismissalFromWork() {\n        return dismissalFromWork;\n    }\n", "    public Date getDismissalFromWork() {\n        return dismissalFromWork;\n    }\n\n    public void setDismissalFromWork(Date dismissalFromWork) {\n        this.dismissalFromWork = dismissalFromWork;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/Tables.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"tables\")\npublic class Tables {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"seats\")\n    private int seats;\n", "    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public int getSeats() {\n        return seats;\n    }\n", "    public int getSeats() {\n        return seats;\n    }\n\n    public void setSeats(int seats) {\n        this.seats = seats;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/Dish.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"dishes\")\npublic class Dish {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @Column(name = \"name\")\n    private String name;\n\n    @Column(name = \"cost\")\n    private double cost;\n\n    @ManyToOne\n    @JoinColumn(name = \"type_id\")\n    private DishType type;\n\n    @Column(name = \"description\", nullable = true)\n    private String description;\n\n    @Column(name = \"recipe\", nullable = true)\n    private String recipe;\n\n    @Lob\n    @Column(name = \"image\", nullable = true)\n    private byte[] image;\n", "    public String getDescription() {\n        return description;\n    }\n\n    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public void setRecipe(String recipe) {\n        this.recipe = recipe;\n    }\n\n    public byte[] getImage() {\n        return image;\n    }\n", "    public void setRecipe(String recipe) {\n        this.recipe = recipe;\n    }\n\n    public byte[] getImage() {\n        return image;\n    }\n\n    public void setImage(byte[] image) {\n        this.image = image;\n    }\n", "    public void setImage(byte[] image) {\n        this.image = image;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n", "    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getRecipe() {\n        return recipe;\n    }\n\n    public String getName() {\n        return name;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public double getCost() {\n        return cost;\n    }\n", "    public double getCost() {\n        return cost;\n    }\n\n    public void setCost(double cost) {\n        this.cost = cost;\n    }\n\n    public DishType getType() {\n        return type;\n    }\n", "    public DishType getType() {\n        return type;\n    }\n\n    public void setType(DishType type) {\n        this.type = type;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/OrderRequest.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class OrderRequest {\n\n    private String information;\n    private double totalCost;\n    private Tables table;\n    @JsonProperty(\"dish_ids\")\n\n    private List<Integer> dish_ids;\n    private Map<Integer, Integer> dish_counts;\n    private Integer table_id;\n\n    public Map<Integer, Integer> getDish_counts() {\n        return dish_counts;\n    }\n", "    public void setDish_counts(Map<Integer, Integer> dish_counts) {\n        this.dish_counts = dish_counts;\n    }\n\n    public Integer getTable_id() {\n        return table_id;\n    }\n\n    public void setTable_id(Integer table_id) {\n        this.table_id = table_id;\n    }\n\n    public List<Integer> getDish_ids() {\n        return dish_ids;\n    }\n", "    public void setTable_id(Integer table_id) {\n        this.table_id = table_id;\n    }\n\n    public List<Integer> getDish_ids() {\n        return dish_ids;\n    }\n\n    public void setDish_ids(List<Integer> dish_ids) {\n        this.dish_ids = dish_ids;\n    }\n", "    public void setDish_ids(List<Integer> dish_ids) {\n        this.dish_ids = dish_ids;\n    }\n\n    public String getInformation() {\n        return information;\n    }\n\n    public void setInformation(String information) {\n        this.information = information;\n    }\n", "    public void setInformation(String information) {\n        this.information = information;\n    }\n\n    public double getTotalCost() {\n        return totalCost;\n    }\n\n    public void setTotalCost(double totalCost) {\n        this.totalCost = totalCost;\n    }\n", "    public void setTotalCost(double totalCost) {\n        this.totalCost = totalCost;\n    }\n\n    public Tables getTable() {\n        return table;\n    }\n\n    public void setTable(Tables table) {\n        this.table = table;\n    }\n\n}", "    public void setTable(Tables table) {\n        this.table = table;\n    }\n\n}"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/TableBooking.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\nimport java.sql.Date;\nimport java.sql.Time;\n\n@Entity\n@Table(name = \"tables_booking\")\npublic class TableBooking {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"table_id\")\n    private Tables table;\n\n    @Column(name = \"date\")\n    private Date date;\n\n    @Column(name = \"time\")\n    private Time time;\n\n    @Column(name = \"info\")\n    private String info;\n", "@Table(name = \"tables_booking\")\npublic class TableBooking {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"table_id\")\n    private Tables table;\n\n    @Column(name = \"date\")\n    private Date date;\n\n    @Column(name = \"time\")\n    private Time time;\n\n    @Column(name = \"info\")\n    private String info;\n", "    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public Tables getTable() {\n        return table;\n    }\n", "    public Tables getTable() {\n        return table;\n    }\n\n    public void setTable(Tables table) {\n        this.table = table;\n    }\n\n    public Date getDate() {\n        return date;\n    }\n", "    public Date getDate() {\n        return date;\n    }\n\n    public void setDate(Date date) {\n        this.date = date;\n    }\n\n    public Time getTime() {\n        return time;\n    }\n", "    public Time getTime() {\n        return time;\n    }\n\n    public void setTime(Time time) {\n        this.time = time;\n    }\n\n    public String getInfo() {\n        return info;\n    }\n", "    public String getInfo() {\n        return info;\n    }\n\n    public void setInfo(String info) {\n        this.info = info;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Models/OrderedDish.java", "chunked_list": ["package com.example.RestaurantManagement.Models;\n\nimport jakarta.persistence.*;\n\n@Entity\n@Table(name = \"ordered_dish\")\npublic class OrderedDish {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int id;\n\n    @ManyToOne\n    @JoinColumn(name = \"dish_id\")\n    private Dish dish;\n\n    @ManyToOne\n    @JoinColumn(name = \"order_id\")\n    private Order order;\n\n    @Column(name = \"status\")\n    private String status;\n", "    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public Dish getDish() {\n        return dish;\n    }\n", "    public Dish getDish() {\n        return dish;\n    }\n\n    public void setDish(Dish dish) {\n        this.dish = dish;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n", "    public Order getOrder() {\n        return order;\n    }\n\n    public void setOrder(Order order) {\n        this.order = order;\n    }\n\n    public String getStatus() {\n        return status;\n    }\n", "    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = status;\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/DishTypeRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.DishType;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface DishTypeRepository extends JpaRepository<DishType, Integer> {\n    DishType findByName(String name);\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/OrderedDishRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.Order;\nimport com.example.RestaurantManagement.Models.OrderedDish;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\n\n@Repository\npublic interface OrderedDishRepository extends JpaRepository<OrderedDish, Integer> {\n    List<OrderedDish> findAllByOrder(Order order);\n\n    List<OrderedDish> findAllByDish_Id(int id);\n\n    List<OrderedDish> findByOrder(Order order);\n}\n\n", "\n@Repository\npublic interface OrderedDishRepository extends JpaRepository<OrderedDish, Integer> {\n    List<OrderedDish> findAllByOrder(Order order);\n\n    List<OrderedDish> findAllByDish_Id(int id);\n\n    List<OrderedDish> findByOrder(Order order);\n}\n\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/DishRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.Dish;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface DishRepository extends JpaRepository<Dish, Integer> {\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/TableBookingRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.TableBooking;\nimport com.example.RestaurantManagement.Models.Tables;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.sql.Time;\nimport java.util.Date;\nimport java.util.List;", "import java.util.Date;\nimport java.util.List;\n\n@Repository\npublic interface TableBookingRepository extends JpaRepository<TableBooking, Integer> {\n\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/TablesRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.Tables;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface TablesRepository extends JpaRepository<Tables, Integer> {\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/WorkHourRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.WorkHour;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface WorkHourRepository extends JpaRepository<WorkHour, Integer> {\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/OrderRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.Order;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface OrderRepository extends JpaRepository<Order, Integer> {\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Repositories/StaffRepository.java", "chunked_list": ["package com.example.RestaurantManagement.Repositories;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface StaffRepository extends JpaRepository<Staff, Integer> {\n    Optional<Staff> findStaffByLogin(String login);\n\n    Staff findByLogin(String login);\n}\n", "@Repository\npublic interface StaffRepository extends JpaRepository<Staff, Integer> {\n    Optional<Staff> findStaffByLogin(String login);\n\n    Staff findByLogin(String login);\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/TableBookingController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.TableBooking;\nimport com.example.RestaurantManagement.Models.Tables;\nimport com.example.RestaurantManagement.Services.TableBookingService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.sql.Date;\nimport java.sql.Time;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;", "import java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Controller\npublic class TableBookingController {\n\n    private final TableBookingService tableBookingService;\n\n    @Autowired\n    public TableBookingController(TableBookingService tableBookingService) {\n        this.tableBookingService = tableBookingService;\n    }\n\n    @GetMapping(\"/book-table\")", "    public String bookingForm(Model model) {\n        List<TableBooking> bookings = tableBookingService.getAllBookings();\n        model.addAttribute(\"bookings\", bookings);\n\n        List<Tables> allTables = tableBookingService.getAllTables();\n        model.addAttribute(\"tables\", allTables);\n\n        Date currentDate = Date.valueOf(LocalDate.now());\n        Date maxDate = Date.valueOf(LocalDate.now().plusDays(3));\n\n        model.addAttribute(\"currentDate\", currentDate);\n        model.addAttribute(\"maxDate\", maxDate);\n\n        List<LocalTime> times = new ArrayList<>();", "        for (LocalTime timeOption = LocalTime.of(12, 0);\n             timeOption.isBefore(LocalTime.of(20, 30));\n             timeOption = timeOption.plusMinutes(30)) {\n            times.add(timeOption);\n        }\n\n        model.addAttribute(\"times\", times);\n\n        return \"book-table\";\n    }\n\n    @PostMapping(\"/book-table\")", "    public String bookTable(@RequestParam(\"table_id\") int tableId,\n                            @RequestParam(\"date\") Date date,\n                            @RequestParam(\"time\") String time,\n                            @RequestParam(\"info\") String info,\n                            Model model) {\n\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm\");\n        LocalTime localTime = LocalTime.parse(time, formatter);\n        Time sqlTime = Time.valueOf(localTime);\n\n        String message = tableBookingService.bookTable(tableId, date, sqlTime, info);\n        model.addAttribute(\"message\", message);\n\n        List<Tables> allTables = tableBookingService.getAllTables();\n        model.addAttribute(\"tables\", allTables);\n\n        Date currentDate = Date.valueOf(LocalDate.now());\n        Date maxDate = Date.valueOf(LocalDate.now().plusDays(3));\n\n        model.addAttribute(\"currentDate\", currentDate);\n        model.addAttribute(\"maxDate\", maxDate);\n\n        List<LocalTime> times = new ArrayList<>();", "        for (LocalTime timeOption = LocalTime.of(12, 0);\n             timeOption.isBefore(LocalTime.of(20, 30));\n             timeOption = timeOption.plusMinutes(30)) {\n            times.add(timeOption);\n        }\n\n        model.addAttribute(\"times\", times);\n\n        List<TableBooking> bookings = tableBookingService.getAllBookings();\n        model.addAttribute(\"bookings\", bookings);\n\n        return \"book-table\";\n    }\n\n    @PostMapping(\"/book-table/{id}/delete\")", "    public String deleteBooking(@PathVariable(\"id\") int id, Model model) {\n        tableBookingService.deleteBooking(id);\n        return \"redirect:/book-table\";\n    }\n\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/OrderController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.*;\nimport com.example.RestaurantManagement.Repositories.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.util.Pair;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.sql.Timestamp;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Controller\npublic class OrderController {\n\n    @Autowired\n    private DishRepository dishRepository;\n\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @Autowired\n    private OrderedDishRepository orderedDishRepository;\n\n    @Autowired\n    private TablesRepository tablesRepository;\n\n    @Autowired\n    private DishTypeRepository dishTypeRepository;\n\n    @GetMapping(\"/create-order\")", "\n@Controller\npublic class OrderController {\n\n    @Autowired\n    private DishRepository dishRepository;\n\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @Autowired\n    private OrderedDishRepository orderedDishRepository;\n\n    @Autowired\n    private TablesRepository tablesRepository;\n\n    @Autowired\n    private DishTypeRepository dishTypeRepository;\n\n    @GetMapping(\"/create-order\")", "    public String createOrderForm(Model model) {\n        model.addAttribute(\"dishes\", dishRepository.findAll());\n        model.addAttribute(\"types\", dishTypeRepository.findAll());\n        model.addAttribute(\"tables\", tablesRepository.findAll());\n        return \"create-order\";\n    }\n\n    @PostMapping(\"/create-order\")\n    public String createOrder(@RequestBody OrderRequest orderRequest) {\n        System.out.println(orderRequest);\n        Order newOrder = new Order();\n        Tables table = tablesRepository.findById(orderRequest.getTable_id())\n                .orElseThrow(() -> new RuntimeException(\"\u0421\u0442\u043e\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d: \" + orderRequest.getTable_id()));\n\n        newOrder.setTable(table);\n        newOrder.setStartTime(new Timestamp(System.currentTimeMillis()));\n        newOrder.setStatus(\"\u041f\u0440\u0438\u043d\u044f\u0442\");\n        newOrder.setInformation(\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043b\u044e\u0434\u0430\u0445 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f...\");\n\n        newOrder = orderRepository.save(newOrder);\n\n        Map<String, Pair<Integer, Double>> dishInfo = new HashMap<>();\n        double totalCost = 0.0;\n", "    public String createOrder(@RequestBody OrderRequest orderRequest) {\n        System.out.println(orderRequest);\n        Order newOrder = new Order();\n        Tables table = tablesRepository.findById(orderRequest.getTable_id())\n                .orElseThrow(() -> new RuntimeException(\"\u0421\u0442\u043e\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d: \" + orderRequest.getTable_id()));\n\n        newOrder.setTable(table);\n        newOrder.setStartTime(new Timestamp(System.currentTimeMillis()));\n        newOrder.setStatus(\"\u041f\u0440\u0438\u043d\u044f\u0442\");\n        newOrder.setInformation(\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0431\u043b\u044e\u0434\u0430\u0445 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f...\");\n\n        newOrder = orderRepository.save(newOrder);\n\n        Map<String, Pair<Integer, Double>> dishInfo = new HashMap<>();\n        double totalCost = 0.0;\n", "        if (orderRequest.getDish_ids() != null) {\n            for (Integer dishId : orderRequest.getDish_ids()) {\n                Dish dish = dishRepository.findById(dishId)\n                        .orElseThrow(() -> new RuntimeException(\"\u0411\u043b\u044e\u0434\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e: \" + dishId));\n\n                int count = orderRequest.getDish_counts().getOrDefault(dishId, 0);\n\n                for (int i = 0; i < count; i++) {\n                    OrderedDish orderedDish = new OrderedDish();\n                    orderedDish.setDish(dish);\n                    orderedDish.setOrder(newOrder);\n                    orderedDish.setStatus(\"\u041f\u0440\u0438\u043d\u044f\u0442\");\n                    orderedDishRepository.save(orderedDish);\n\n                    totalCost += dish.getCost();\n                }\n\n                String dishName = dish.getName();\n                int quantity = count;\n                dishInfo.put(dishName, Pair.of(quantity, dish.getCost()));\n            }\n        }\n\n        StringBuilder information = new StringBuilder(\"\\n=========== \u0417\u0430\u043a\u0430\u0437 ===========\\n\");", "        for (Map.Entry<String, Pair<Integer, Double>> entry : dishInfo.entrySet()) {\n            information.append(entry.getKey())\n                    .append(\":\\n- \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e: \")\n                    .append(entry.getValue().getFirst())\n                    .append(\"\\n- \u0446\u0435\u043d\u0430 \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443: \")\n                    .append(entry.getValue().getSecond())\n                    .append(\"\\n-----------------------------\\n\");\n        }\n        information = new StringBuilder(information.toString().replace(\"\\n\", \"<br>\"));\n\n        newOrder.setInformation(information.toString());\n        newOrder.setTotalCost(totalCost);\n        orderRepository.save(newOrder);\n\n        return \"redirect:/view-orders\";\n    }\n\n    @GetMapping(\"/view-orders\")", "    public String viewOrders(@RequestParam(required = false) String status,\n                             @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,\n                             Model model) {\n        List<Order> orders = orderRepository.findAll();\n\n        if (status != null && !status.isEmpty()) {\n            orders = orders.stream()\n                    .filter(order -> order.getStatus().equals(status))\n                    .collect(Collectors.toList());\n        }\n", "        if (date != null) {\n            orders = orders.stream()\n                    .filter(order -> order.getStartTime().toLocalDateTime().toLocalDate().equals(date))\n                    .collect(Collectors.toList());\n        }\n\n        model.addAttribute(\"orders\", orders);\n        return \"view-orders\";\n    }\n\n    @PostMapping(\"/update-status/{id}\")", "    public String updateStatus(@PathVariable int id, @RequestParam String status) {\n        Optional<Order> optionalOrder = orderRepository.findById(id);\n\n        if (optionalOrder.isPresent()) {\n            Order order = optionalOrder.get();\n\n            order.setStatus(status);\n            order.getOrderedDishes().forEach(dish -> dish.setStatus(status));\n\n            if (status.equals(\"\u0417\u0430\u043a\u0440\u044b\u0442\")) {\n                order.setEndTime(Timestamp.valueOf(LocalDateTime.now()));\n            }\n\n            orderRepository.save(order);\n        }\n\n        return \"redirect:/view-orders\";\n    }\n\n    @GetMapping(\"/manage-orders\")", "            if (status.equals(\"\u0417\u0430\u043a\u0440\u044b\u0442\")) {\n                order.setEndTime(Timestamp.valueOf(LocalDateTime.now()));\n            }\n\n            orderRepository.save(order);\n        }\n\n        return \"redirect:/view-orders\";\n    }\n\n    @GetMapping(\"/manage-orders\")", "    public String viewOrdersManager(@RequestParam(required = false) String status,\n                                    @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,\n                                    Model model) {\n        List<Order> orders = orderRepository.findAll();\n\n        if (status != null && !status.isEmpty()) {\n            orders = orders.stream()\n                    .filter(order -> order.getStatus().equals(status))\n                    .collect(Collectors.toList());\n        }\n", "        if (date != null) {\n            orders = orders.stream()\n                    .filter(order -> order.getStartTime().toLocalDateTime().toLocalDate().equals(date))\n                    .collect(Collectors.toList());\n        }\n\n        model.addAttribute(\"orders\", orders);\n        return \"manage-orders\";\n    }\n\n    @PostMapping(\"/update-status-manager/{id}\")", "    public String updateStatusManager(@PathVariable int id, @RequestParam String status) {\n        Optional<Order> optionalOrder = orderRepository.findById(id);\n\n        if (optionalOrder.isPresent()) {\n            Order order = optionalOrder.get();\n\n            order.setStatus(status);\n            order.getOrderedDishes().forEach(dish -> dish.setStatus(status));\n\n            if (status.equals(\"\u0417\u0430\u043a\u0440\u044b\u0442\")) {\n                order.setEndTime(Timestamp.valueOf(LocalDateTime.now()));\n            }\n\n            orderRepository.save(order);\n        }\n\n        return \"redirect:/manage-orders\";\n    }\n\n    @PostMapping(\"/update-dish-status-manager/{id}\")", "            if (status.equals(\"\u0417\u0430\u043a\u0440\u044b\u0442\")) {\n                order.setEndTime(Timestamp.valueOf(LocalDateTime.now()));\n            }\n\n            orderRepository.save(order);\n        }\n\n        return \"redirect:/manage-orders\";\n    }\n\n    @PostMapping(\"/update-dish-status-manager/{id}\")", "    public String updateDishStatus(@PathVariable int id, @RequestParam String status) {\n        Optional<OrderedDish> optionalDish = orderedDishRepository.findById(id);\n\n        if (optionalDish.isPresent()) {\n            OrderedDish dish = optionalDish.get();\n\n            dish.setStatus(status);\n            orderedDishRepository.save(dish);\n\n            Order order = dish.getOrder();\n            boolean allSameStatus = order.getOrderedDishes().stream()\n                    .allMatch(d -> d.getStatus().equals(status));\n", "            if (allSameStatus) {\n                order.setStatus(status);\n                if (status.equals(\"\u0417\u0430\u043a\u0440\u044b\u0442\")) {\n                    order.setEndTime(Timestamp.valueOf(LocalDateTime.now()));\n                }\n                orderRepository.save(order);\n            }\n        }\n\n        return \"redirect:/manage-orders\";\n    }\n\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/AuthorisationController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport com.example.RestaurantManagement.Repositories.StaffRepository;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.Optional;\n\n@Controller\npublic class AuthorisationController {\n\n    @Autowired\n    StaffRepository staffRepository;\n\n    @GetMapping(\"/\")", "    public String defaultPageRedirect() {\n        return \"redirect:/login\";\n    }\n\n    @GetMapping(\"/login\")\n    public String login() {\n        return \"login\";\n    }\n\n    @PostMapping(\"/login\")\n    public String postLogin(@RequestParam String login, @RequestParam String password, Model model, HttpSession session) {\n        Optional<Staff> optionalStaff = staffRepository.findStaffByLogin(login);\n", "    public String postLogin(@RequestParam String login, @RequestParam String password, Model model, HttpSession session) {\n        Optional<Staff> optionalStaff = staffRepository.findStaffByLogin(login);\n\n        if (optionalStaff.isPresent()) {\n            Staff staff = optionalStaff.get();\n            if (staff.getPassword().equals(password) && staff.getDismissalFromWork() == null) {\n                session.setAttribute(\"staff\", staff);\n                switch (staff.getRole()) {\n                    case \"\u041e\u0424\u0418\u0426\u0418\u0410\u041d\u0422\" -> {\n                        return \"redirect:/create-order\";\n                    }\n                    case \"\u0410\u0414\u041c\u0418\u041d\u0418\u0421\u0422\u0420\u0410\u0422\u041e\u0420\" -> {\n                        return \"redirect:/staff\";\n                    }\n                    case \"\u041c\u0415\u041d\u0415\u0414\u0416\u0415\u0420\" -> {\n                        return \"redirect:/view-schedule\";\n                    }\n                    case \"\u041f\u041e\u0412\u0410\u0420\" -> {\n                        return \"redirect:/kitchen\";\n                    }\n                    default -> {\n                        model.addAttribute(\"errorMessage\", \"\u041d\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0440\u043e\u043b\u044c\");\n                        return \"login\";\n                    }\n                }\n            }\n        }\n\n        model.addAttribute(\"errorMessage\", \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043b\u043e\u0433\u0438\u043d \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\");\n        return \"login\";\n    }\n\n    @GetMapping(\"/logout\")", "    public String logout(HttpSession request) {\n        request.setAttribute(\"staff\", null);\n        return \"redirect:/login\";\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/ShiftController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport com.example.RestaurantManagement.Models.WorkHour;\nimport com.example.RestaurantManagement.Repositories.StaffRepository;\nimport com.example.RestaurantManagement.Repositories.WorkHourRepository;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\n\nimport java.sql.Date;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Controller\npublic class ShiftController {\n    private final StaffRepository staffRepository;\n    private final WorkHourRepository workHourRepository;\n\n    public ShiftController(StaffRepository staffRepository, WorkHourRepository workHourRepository) {\n        this.staffRepository = staffRepository;\n        this.workHourRepository = workHourRepository;\n    }\n\n    @GetMapping(\"/assign-shifts\")", "@Controller\npublic class ShiftController {\n    private final StaffRepository staffRepository;\n    private final WorkHourRepository workHourRepository;\n\n    public ShiftController(StaffRepository staffRepository, WorkHourRepository workHourRepository) {\n        this.staffRepository = staffRepository;\n        this.workHourRepository = workHourRepository;\n    }\n\n    @GetMapping(\"/assign-shifts\")", "    public String assignShifts(Model model) {\n        model.addAttribute(\"staffs\", staffRepository.findAll());\n        return \"assign-shifts\";\n    }\n\n    @PostMapping(\"/assign-shift\")\n    public String assignShift(int staff_id, Date date) {\n        Staff staff = staffRepository.findById(staff_id).orElseThrow();\n        WorkHour workHour = new WorkHour();\n        workHour.setStaff(staff);\n        workHour.setDate(date);\n        workHourRepository.save(workHour);\n        return \"redirect:/assign-shifts\";\n    }\n\n    @GetMapping(\"/view-schedule\")", "    public String viewSchedule(Model model) {\n        Map<Staff, Long> shiftStats = workHourRepository.findAll().stream()\n                .collect(Collectors.groupingBy(WorkHour::getStaff, Collectors.counting()));\n        model.addAttribute(\"workHours\", workHourRepository.findAll());\n        model.addAttribute(\"shiftStats\", shiftStats);\n        return \"view-schedule\";\n    }\n\n    @PostMapping(\"/view-schedule/{id}/delete\")\n    public String deleteWorkHour(@PathVariable(\"id\") int id) {\n        workHourRepository.deleteById(id);\n        return \"redirect:/view-schedule\";\n    }\n\n}\n", "    public String deleteWorkHour(@PathVariable(\"id\") int id) {\n        workHourRepository.deleteById(id);\n        return \"redirect:/view-schedule\";\n    }\n\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/KitchenController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.Order;\nimport com.example.RestaurantManagement.Models.OrderedDish;\nimport com.example.RestaurantManagement.Repositories.OrderRepository;\nimport com.example.RestaurantManagement.Repositories.OrderedDishRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;", "import org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\n", "import java.util.stream.Collectors;\n\n@Controller\npublic class KitchenController {\n    @Autowired\n    private OrderedDishRepository orderedDishRepository;\n\n    @Autowired\n    private OrderRepository orderRepository;\n\n    @GetMapping(\"/kitchen\")", "    public String getKitchen(Model model) {\n        List<OrderedDish> orderedDishes = orderedDishRepository.findAll();\n        List<OrderedDish> acceptedDishes = orderedDishes.stream()\n                .filter(dish -> dish.getStatus().equals(\"\u041f\u0440\u0438\u043d\u044f\u0442\"))\n                .collect(Collectors.toList());\n        model.addAttribute(\"orderedDishes\", acceptedDishes);\n        return \"kitchen\";\n    }\n\n\n    @PostMapping(\"/update-dish-status/{id}\")", "    public String updateDishStatus(@PathVariable(\"id\") int id, @RequestParam(\"status\") String status) {\n        Optional<OrderedDish> optionalOrderedDish = orderedDishRepository.findById(id);\n        if (optionalOrderedDish.isPresent()) {\n            OrderedDish orderedDish = optionalOrderedDish.get();\n            orderedDish.setStatus(status);\n            orderedDishRepository.save(orderedDish);\n\n            List<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());\n\n            boolean allMatch = dishesInOrder.stream()\n                    .allMatch(dish -> dish.getStatus().equals(status));\n", "            if (allMatch) {\n                Order order = orderedDish.getOrder();\n                order.setStatus(status);\n                orderRepository.save(order);\n            }\n        }\n        return \"redirect:/kitchen\";\n    }\n}"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/MenuController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.Dish;\nimport com.example.RestaurantManagement.Models.DishType;\nimport com.example.RestaurantManagement.Repositories.DishTypeRepository;\nimport com.example.RestaurantManagement.Services.DishService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.List;\n\n@Controller\npublic class MenuController {\n\n    private final DishService dishService;\n    private final DishTypeRepository dishTypeRepository;\n\n    public MenuController(DishService dishService, DishTypeRepository dishTypeRepository) {\n        this.dishService = dishService;\n        this.dishTypeRepository = dishTypeRepository;\n    }\n\n    @GetMapping(\"/menu\")", "\n@Controller\npublic class MenuController {\n\n    private final DishService dishService;\n    private final DishTypeRepository dishTypeRepository;\n\n    public MenuController(DishService dishService, DishTypeRepository dishTypeRepository) {\n        this.dishService = dishService;\n        this.dishTypeRepository = dishTypeRepository;\n    }\n\n    @GetMapping(\"/menu\")", "    public String showMenu(Model model) {\n        List<Dish> dishes = dishService.getAllDishes();\n        List<DishType> dishTypes = dishTypeRepository.findAll();\n        model.addAttribute(\"dishes\", dishes);\n        model.addAttribute(\"dishTypes\", dishTypes);\n        return \"menu\";\n    }\n\n    @PostMapping(\"/menu/edit\")\n    public String editDish(@RequestParam(\"id\") int id, @RequestParam(\"name\") String name,\n                           @RequestParam(\"cost\") double cost, @RequestParam(\"type\") String typeName) {", "    public String editDish(@RequestParam(\"id\") int id, @RequestParam(\"name\") String name,\n                           @RequestParam(\"cost\") double cost, @RequestParam(\"type\") String typeName) {\n        if (dishService.checkIfDishIsOrdered(id)) {\n        } else {\n            dishService.editDish(id, name, cost, typeName);\n        }\n        return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/delete\")\n    public String deleteDish(@RequestParam(\"id\") int id) {", "    public String deleteDish(@RequestParam(\"id\") int id) {\n        if (dishService.checkIfDishIsOrdered(id)) {\n        } else {\n            dishService.deleteDish(id);\n        }\n        return \"redirect:/menu\";\n    }\n\n    @PostMapping(\"/menu/add\")\n    public String addDish(@RequestParam(\"name\") String name, @RequestParam(\"cost\") double cost,\n                          @RequestParam(\"type\") String typeName) {\n        dishService.addDish(name, cost, typeName);\n        return \"redirect:/menu\";\n    }\n\n    @GetMapping(\"/menu/{id}/details\")", "    public String addDish(@RequestParam(\"name\") String name, @RequestParam(\"cost\") double cost,\n                          @RequestParam(\"type\") String typeName) {\n        dishService.addDish(name, cost, typeName);\n        return \"redirect:/menu\";\n    }\n\n    @GetMapping(\"/menu/{id}/details\")\n    public String showDishDetails(@PathVariable(\"id\") int id, Model model) {\n        Dish dish = dishService.getDishById(id);\n        model.addAttribute(\"dish\", dish);\n        return \"dishDetails\";\n    }\n\n    @PostMapping(\"/menu/{id}/edit\")", "    public String editDishDetails(@PathVariable(\"id\") int id, @RequestParam(\"name\") String name,\n                                  @RequestParam(\"description\") String description,\n                                  @RequestParam(\"recipe\") String recipe){\n//                                  @RequestParam(\"image\") MultipartFile image) throws IOException {\n        dishService.editDishDetails(id, name, description, recipe);//, image.getBytes());\n        return \"redirect:/menu/{id}/details\";\n    }\n    @GetMapping(\"kitchen/{id}/recipe\")\n    public String showRecipe(@PathVariable(\"id\") int id, Model model) {\n        Dish dish = dishService.getDishById(id);\n        model.addAttribute(\"dish\", dish);\n        return \"recipe\";\n    }\n}\n", "    public String showRecipe(@PathVariable(\"id\") int id, Model model) {\n        Dish dish = dishService.getDishById(id);\n        model.addAttribute(\"dish\", dish);\n        return \"recipe\";\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/OrdersController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.Order;\nimport com.example.RestaurantManagement.Services.OrderService;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n", "import org.springframework.web.bind.annotation.RequestParam;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Controller\npublic class OrdersController {\n\n    private final OrderService orderService;\n\n    public OrdersController(OrderService orderService) {\n        this.orderService = orderService;\n    }\n\n    @GetMapping(\"/orders\")", "    public String showOrders(Model model) {\n        List<Order> orders = orderService.getAllOrders();\n        if (orders == null) {\n            orders = new ArrayList<>();\n        }\n        model.addAttribute(\"orders\", orders);\n        return \"orders\";\n    }\n\n\n    @PostMapping(\"/orders/delete\")", "    public String deleteOrder(@RequestParam(\"id\") int id) {\n        orderService.deleteOrder(id);\n        return \"redirect:/orders\";\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Controllers/StaffController.java", "chunked_list": ["package com.example.RestaurantManagement.Controllers;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport com.example.RestaurantManagement.Services.StaffService;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;", "import org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n@Controller\npublic class StaffController {\n\n    @Autowired\n    private HttpSession session;\n    private final StaffService staffService;\n\n    @Autowired\n    public StaffController(StaffService staffService) {\n        this.staffService = staffService;\n    }\n\n    @GetMapping(\"/staff\")", "    public String getStaff(Model model) {\n        model.addAttribute(\"staff\", staffService.getAllStaff());\n        model.addAttribute(\"newStaff\", new Staff());\n        model.addAttribute(\"currentUser\", getCurrentUser());\n        return \"staff\";\n    }\n\n\n    @PostMapping(\"/staff/add\")\n    public String addStaff(@ModelAttribute Staff staff, Model model) {\n        if (staffService.loginExists(staff.getLogin())) {\n            model.addAttribute(\"error\", \"\u041b\u043e\u0433\u0438\u043d \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\");\n            model.addAttribute(\"staff\", staffService.getAllStaff());\n            model.addAttribute(\"newStaff\", staff);\n            return \"redirect:/staff\";\n        }\n\n        java.util.Date currentDate = new java.util.Date();\n        staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));\n        staffService.saveStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n\n    @PostMapping(\"/staff/update\")", "    public String addStaff(@ModelAttribute Staff staff, Model model) {\n        if (staffService.loginExists(staff.getLogin())) {\n            model.addAttribute(\"error\", \"\u041b\u043e\u0433\u0438\u043d \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\");\n            model.addAttribute(\"staff\", staffService.getAllStaff());\n            model.addAttribute(\"newStaff\", staff);\n            return \"redirect:/staff\";\n        }\n\n        java.util.Date currentDate = new java.util.Date();\n        staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));\n        staffService.saveStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n\n    @PostMapping(\"/staff/update\")", "    public String updateStaff(@RequestParam(\"id\") int id, @RequestParam(\"role\") String role) {\n        Staff staff = staffService.getStaffById(id);\n        staff.setRole(role);\n        staffService.updateStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n    @PostMapping(\"/staff/delete\")\n    public String deleteStaff(@RequestParam(\"id\") int id) {\n        Staff staff = staffService.getStaffById(id);\n        staffService.deleteStaff(staff);\n        return \"redirect:/staff\";\n    }\n", "    public String deleteStaff(@RequestParam(\"id\") int id) {\n        Staff staff = staffService.getStaffById(id);\n        staffService.deleteStaff(staff);\n        return \"redirect:/staff\";\n    }\n\n    public Staff getCurrentUser() {\n        return (Staff) session.getAttribute(\"staff\");\n    }\n}\n"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Secure/ManagerCheckInterceptor.java", "chunked_list": ["package com.example.RestaurantManagement.Secure;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\npublic class ManagerCheckInterceptor implements HandlerInterceptor {\n\n    @Override", "public class ManagerCheckInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        HttpSession session = request.getSession();\n        Staff user = (Staff) session.getAttribute(\"staff\");\n        if (user == null || !user.getRole().equals(\"\u041c\u0415\u041d\u0415\u0414\u0416\u0415\u0420\")) {\n            response.sendRedirect(\"/login\");\n            return false;\n        }\n        return true;\n    }\n}"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Secure/KitchenCheckInterceptor.java", "chunked_list": ["package com.example.RestaurantManagement.Secure;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\npublic class KitchenCheckInterceptor implements HandlerInterceptor {\n\n    @Override", "public class KitchenCheckInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        HttpSession session = request.getSession();\n        Staff user = (Staff) session.getAttribute(\"staff\");\n        if (user == null || !user.getRole().equals(\"\u041f\u041e\u0412\u0410\u0420\")) {\n            response.sendRedirect(\"/login\");\n            return false;\n        }\n        return true;\n    }\n}"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Secure/WaiterCheckInterceptor.java", "chunked_list": ["package com.example.RestaurantManagement.Secure;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\npublic class WaiterCheckInterceptor implements HandlerInterceptor {\n\n    @Override", "public class WaiterCheckInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        HttpSession session = request.getSession();\n        Staff user = (Staff) session.getAttribute(\"staff\");\n        if (user == null || !user.getRole().equals(\"\u041e\u0424\u0418\u0426\u0418\u0410\u041d\u0422\")) {\n            response.sendRedirect(\"/login\");\n            return false;\n        }\n        return true;\n    }\n}"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Secure/AdminCheckInterceptor.java", "chunked_list": ["package com.example.RestaurantManagement.Secure;\n\nimport com.example.RestaurantManagement.Models.Staff;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport jakarta.servlet.http.HttpSession;\nimport org.springframework.web.servlet.HandlerInterceptor;\n\npublic class AdminCheckInterceptor implements HandlerInterceptor {\n\n    @Override", "public class AdminCheckInterceptor implements HandlerInterceptor {\n\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)\n            throws Exception {\n        HttpSession session = request.getSession();\n        Staff user = (Staff) session.getAttribute(\"staff\");\n        if (user == null || !user.getRole().equals(\"\u0410\u0414\u041c\u0418\u041d\u0418\u0421\u0422\u0420\u0410\u0422\u041e\u0420\")) {\n            response.sendRedirect(\"/login\");\n            return false;\n        }\n        return true;\n    }\n}"]}
{"filename": "RestaurantManagement/src/main/java/com/example/RestaurantManagement/Secure/WebMvcConfig.java", "chunked_list": ["package com.example.RestaurantManagement.Secure;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebMvcConfig implements WebMvcConfigurer {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new AdminCheckInterceptor()).addPathPatterns(\"/menu\", \"/orders\", \"/staff\");\n        registry.addInterceptor(new ManagerCheckInterceptor()).addPathPatterns(\"/assign-shifts\", \"/book-table\", \"/manage-orders\", \"/view-schedule\");\n        registry.addInterceptor(new KitchenCheckInterceptor()).addPathPatterns(\"/kitchen\", \"/recipe\");\n        registry.addInterceptor(new WaiterCheckInterceptor()).addPathPatterns(\"/create-order\", \"/view-orders\");\n    }\n\n}\n", "    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(new AdminCheckInterceptor()).addPathPatterns(\"/menu\", \"/orders\", \"/staff\");\n        registry.addInterceptor(new ManagerCheckInterceptor()).addPathPatterns(\"/assign-shifts\", \"/book-table\", \"/manage-orders\", \"/view-schedule\");\n        registry.addInterceptor(new KitchenCheckInterceptor()).addPathPatterns(\"/kitchen\", \"/recipe\");\n        registry.addInterceptor(new WaiterCheckInterceptor()).addPathPatterns(\"/create-order\", \"/view-orders\");\n    }\n\n}\n"]}
