{"filename": "src/main/java/im/dnn/BlockEntities/BlockEntities.java", "chunked_list": ["package im.dnn.BlockEntities;\n\nimport im.dnn.BlockEntities.Commands.BlockCommand;\nimport im.dnn.BlockEntities.Commands.MainCommand;\nimport im.dnn.BlockEntities.Commands.MainCompleter;\nimport im.dnn.BlockEntities.Constants.Commands;\nimport im.dnn.BlockEntities.Listeners.BlockListener;\nimport im.dnn.BlockEntities.Managers.BlockManager;\nimport im.dnn.BlockEntities.Utils.Logger;\nimport im.dnn.BlockEntities.Utils.Settings;", "import im.dnn.BlockEntities.Utils.Logger;\nimport im.dnn.BlockEntities.Utils.Settings;\nimport org.bukkit.plugin.java.JavaPlugin;\n\npublic class BlockEntities extends JavaPlugin {\n    public Settings settings;\n\n    @Override\n    public void onEnable() {\n        this.settings = new Settings(this);\n        Logger.setPlugin(this);\n        Logger.info(\"Enabled plugin PackManager\");\n\n        BlockManager blockManager = new BlockManager(this);\n        getServer().getPluginManager().registerEvents(new BlockListener(this, blockManager), this);\n\n        BlockCommand blockCommand = new BlockCommand(this);\n        getCommand(Commands.BASE).setExecutor(new MainCommand(this, blockCommand));\n        getCommand(Commands.BASE).setTabCompleter(new MainCompleter(blockCommand));\n    }\n}\n", "    public void onEnable() {\n        this.settings = new Settings(this);\n        Logger.setPlugin(this);\n        Logger.info(\"Enabled plugin PackManager\");\n\n        BlockManager blockManager = new BlockManager(this);\n        getServer().getPluginManager().registerEvents(new BlockListener(this, blockManager), this);\n\n        BlockCommand blockCommand = new BlockCommand(this);\n        getCommand(Commands.BASE).setExecutor(new MainCommand(this, blockCommand));\n        getCommand(Commands.BASE).setTabCompleter(new MainCompleter(blockCommand));\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Commands/MainCompleter.java", "chunked_list": ["package im.dnn.BlockEntities.Commands;\n\nimport im.dnn.BlockEntities.Constants.Commands;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.command.TabCompleter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MainCompleter implements TabCompleter {\n    private final BlockCommand blockCommand;\n\n    public MainCompleter (BlockCommand blockCommand) {\n        this.blockCommand = blockCommand;\n    }\n    @Override\n    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {\n        List<String> suggestions = new ArrayList<>();\n", "import java.util.List;\n\npublic class MainCompleter implements TabCompleter {\n    private final BlockCommand blockCommand;\n\n    public MainCompleter (BlockCommand blockCommand) {\n        this.blockCommand = blockCommand;\n    }\n    @Override\n    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {\n        List<String> suggestions = new ArrayList<>();\n", "        if (args.length == 1) {\n            suggestions.add(Commands.HELP);\n            suggestions.add(Commands.RELOAD);\n            suggestions.add(Commands.GET);\n            return suggestions;\n        }\n\n        if (args.length > 1 && args[0].equals(Commands.GET)) {\n            return blockCommand.completer(args);\n        }\n\n        return suggestions;\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Commands/BlockCommand.java", "chunked_list": ["package im.dnn.BlockEntities.Commands;\n\nimport im.dnn.BlockEntities.BlockEntities;\nimport im.dnn.BlockEntities.Constants.Keys;\nimport im.dnn.BlockEntities.Constants.Permissions;\nimport im.dnn.BlockEntities.Models.BlockItem;\nimport im.dnn.BlockEntities.Utils.Helpers;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\n", "import org.bukkit.entity.Player;\n\nimport java.util.*;\n\npublic class BlockCommand {\n    private final BlockEntities plugin;\n    public HashMap<String, BlockItem> blockTypes;\n    public List<String> blockTypesKeys;\n\n    private HashMap<String, BlockItem> loadBlockList(BlockEntities plugin) {\n        List<Map<?, ?>> blockList = plugin.settings.getMapList(Keys.BLOCKS);\n        HashMap<String, BlockItem> blockTypesList = new HashMap<>();\n", "        for(Map<?, ?> blockElement : blockList) {\n            String key = (String) blockElement.get(\"key\");\n            BlockItem blockItem = new BlockItem(blockElement);\n            blockTypesList.put(key, blockItem);\n        }\n\n        return blockTypesList;\n    }\n\n    private List<String> getBlockTypesKeys (HashMap<String, BlockItem> blockTypes) {\n        Set<String> keySet = blockTypes.keySet();\n        return new ArrayList<>(keySet);\n    }\n\n    public BlockCommand(BlockEntities plugin) {\n        this.plugin = plugin;\n        this.reload();\n    }\n", "    public void reload () {\n        this.blockTypes = this.loadBlockList(this.plugin);\n        this.blockTypesKeys = this.getBlockTypesKeys(this.blockTypes);\n    }\n\n    private boolean giveBlockItem (String blockType, Player player, int amount) {\n        if (!Helpers.hasPermission(player, Permissions.GET)) {\n            Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CANT_GET);\n\n            return false;\n        }\n\n        BlockItem blockItem = this.blockTypes.get(blockType);\n", "        if (!this.blockTypes.containsKey(blockType)) {\n            Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CMD_BLOCK_NOT_EXISTS);\n            return false;\n        }\n\n        player.getInventory().addItem(blockItem.getItem(amount));\n        return true;\n    }\n\n    public boolean onCommand (CommandSender sender, String[] args) {\n        if (!(sender instanceof Player)) {\n            Helpers.sendMessage(this.plugin, sender, Keys.MESSAGES_CMD_NOT_PLAYER);\n            return false;\n        }\n", "    public boolean onCommand (CommandSender sender, String[] args) {\n        if (!(sender instanceof Player)) {\n            Helpers.sendMessage(this.plugin, sender, Keys.MESSAGES_CMD_NOT_PLAYER);\n            return false;\n        }\n\n        if (args.length < 2) {\n            Helpers.sendMessage(this.plugin, sender, Keys.MESSAGES_CMD_BLOCK_MISSING);\n            return false;\n        }\n", "        if (args.length > 2 && args[2].matches(\"\\\\d+\")) {\n            return this.giveBlockItem(args[1], (Player) sender, Integer.parseInt(args[2]));\n        }\n\n        return this.giveBlockItem(args[1], (Player) sender, 1);\n    }\n\n    public List<String> completer(String[] args) {\n        List<String> suggestions = new ArrayList<>();\n\n        if (args.length > 3) {\n            return suggestions;\n        }\n", "        if (args.length > 3) {\n            return suggestions;\n        }\n\n        if (args.length > 2) {\n            suggestions.add(\"<amount>\");\n            return suggestions;\n        }\n\n        if (args.length > 1) {\n            suggestions.addAll(this.blockTypesKeys);\n            return suggestions;\n        }\n\n        return suggestions;\n    }\n}\n", "        if (args.length > 1) {\n            suggestions.addAll(this.blockTypesKeys);\n            return suggestions;\n        }\n\n        return suggestions;\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Commands/MainCommand.java", "chunked_list": ["package im.dnn.BlockEntities.Commands;\n\nimport im.dnn.BlockEntities.BlockEntities;\nimport im.dnn.BlockEntities.Constants.Commands;\nimport im.dnn.BlockEntities.Constants.Keys;\nimport im.dnn.BlockEntities.Constants.Permissions;\nimport im.dnn.BlockEntities.Models.BlockItem;\nimport im.dnn.BlockEntities.Utils.Helpers;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;", "import org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\n\nimport java.util.Map;\n\npublic class MainCommand implements CommandExecutor {\n    private final BlockEntities plugin;\n    private final BlockCommand blockCommand;\n\n    public MainCommand (BlockEntities plugin, BlockCommand blockCommand) {\n        this.plugin = plugin;\n        this.blockCommand = blockCommand;\n    }\n\n    @Override", "    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if (args.length == 0) {\n            return this.help(sender);\n        }\n\n        if (args[0].equalsIgnoreCase(Commands.HELP)) {\n            return this.help(sender);\n        }\n\n        if (args[0].equalsIgnoreCase(Commands.RELOAD)) {\n            return this.reload(sender);\n        }\n", "        if (args[0].equalsIgnoreCase(Commands.RELOAD)) {\n            return this.reload(sender);\n        }\n\n        if (args[0].equalsIgnoreCase(Commands.GET)) {\n            return this.blockCommand.onCommand(sender, args);\n        }\n\n        return false;\n    }\n\n    private boolean reload (CommandSender sender) {", "        if (sender instanceof Player && !Helpers.hasPermission((Player) sender, Permissions.RELOAD)) {\n            Helpers.sendMessage(this.plugin, sender, Keys.MESSAGES_CANT_RELOAD);\n            return false;\n        }\n\n        this.plugin.settings.reloadConfig();\n        this.blockCommand.reload();\n        Helpers.sendMessage(this.plugin, sender, Keys.MESSAGES_RELOADED);\n        return true;\n    }\n\n    private boolean help(CommandSender sender) {\n        Helpers.sendFormattedMessage(sender,\"&a&o&l[Block&b&o&lEntities] &e&o&lList of Commands\");\n        Helpers.sendFormattedMessage(sender,\"\");\n        Helpers.sendFormattedMessage(sender,\"&6&o/blockentities help &f&o\u2192 Show this help dialog, duh!\");\n        Helpers.sendFormattedMessage(sender,\"&6&o/blockentities reload &f&o\u2192 Reload plugin settings\");\n        Helpers.sendFormattedMessage(sender,\"\");\n        Helpers.sendFormattedMessage(sender,\"&e&o&lHOW TO GET A BLOCK\");\n        Helpers.sendFormattedMessage(sender,\"&6&o/blockentities get [block] <amount>\");\n        Helpers.sendFormattedMessage(sender,\"\");\n        Helpers.sendFormattedMessage(sender,\"&e&o&lAVAILABLE BLOCKS\");\n        Helpers.sendFormattedMessage(sender,\"\");\n", "        for (Map.Entry<String, BlockItem> entry : this.blockCommand.blockTypes.entrySet()) {\n            String blockID = entry.getKey();\n            BlockItem blockItem = entry.getValue();\n            Helpers.sendFormattedMessage(sender,\"&7&o- &f&o\" + blockID + \" &3&o\u2192 &r\" + blockItem.getDisplayName());\n        }\n\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Managers/BlockManager.java", "chunked_list": ["package im.dnn.BlockEntities.Managers;\n\nimport im.dnn.BlockEntities.BlockEntities;\nimport im.dnn.BlockEntities.Models.BlockEntity;\nimport im.dnn.BlockEntities.Models.BlockItem;\nimport im.dnn.BlockEntities.Utils.Helpers;\nimport org.bukkit.GameMode;\nimport org.bukkit.Location;\nimport org.bukkit.Sound;\nimport org.bukkit.World;", "import org.bukkit.Sound;\nimport org.bukkit.World;\nimport org.bukkit.entity.ItemDisplay;\nimport org.bukkit.entity.Player;\nimport org.bukkit.inventory.ItemStack;\nimport java.util.HashMap;\n\npublic class BlockManager {\n    private final BlockEntities plugin;\n    private HashMap<String, BlockEntity> blockCollection;\n\n    public BlockManager (BlockEntities plugin) {\n        blockCollection = new HashMap<>();\n        this.plugin = plugin;\n        this.preload();\n    }\n", "    public void addBlock (Location location, BlockItem blockItem) {\n        String blockID = Helpers.locationToString(location);\n        BlockEntity blockEntity = new BlockEntity(location, blockItem);\n\n        blockCollection.put(blockID, blockEntity);\n    }\n\n    public void removeBlock (Location location) {\n        String blockID = Helpers.locationToString(location);\n\n        if (blockCollection.containsKey(blockID)) {\n            BlockEntity blockEntity = blockCollection.get(blockID);\n            blockEntity.breakBlock();\n            blockCollection.remove(blockID);\n        }\n    }\n", "        if (blockCollection.containsKey(blockID)) {\n            BlockEntity blockEntity = blockCollection.get(blockID);\n            blockEntity.breakBlock();\n            blockCollection.remove(blockID);\n        }\n    }\n\n    public void breakBlock (Location location, Player player) {\n        String blockID = Helpers.locationToString(location);\n        if (blockCollection.containsKey(blockID)) {\n            BlockEntity blockEntity = blockCollection.get(blockID);\n            BlockItem blockItem = blockEntity.getBlockItem();\n\n            this.removeBlock(location);\n            player.playSound(location, Sound.BLOCK_STONE_BREAK, 1, 1);\n", "        if (blockCollection.containsKey(blockID)) {\n            BlockEntity blockEntity = blockCollection.get(blockID);\n            BlockItem blockItem = blockEntity.getBlockItem();\n\n            this.removeBlock(location);\n            player.playSound(location, Sound.BLOCK_STONE_BREAK, 1, 1);\n\n            if (player.getGameMode() == GameMode.SURVIVAL) {\n                World world = location.getWorld();\n                world.dropItemNaturally(location, blockItem.getItem(1));\n            }\n        }\n    }\n\n    private Location getLocationFromEntity (Location location) {\n        Location entityLocation = location.clone();\n        entityLocation.setX( location.getX() - 0.5 );\n        entityLocation.setY( location.getY() - 0.5 );\n        entityLocation.setZ( location.getZ() - 0.5 );\n\n        return entityLocation;\n    }\n\n    private void preload () {", "        for(World world : this.plugin.getServer().getWorlds()) {\n            for (ItemDisplay entity : world.getEntitiesByClass(ItemDisplay.class)) {\n                Location location = getLocationFromEntity(entity.getLocation());\n                ItemStack itemStack = entity.getItemStack();\n                BlockItem blockItem = new BlockItem(itemStack);\n                entity.remove();\n                this.addBlock(location, blockItem);\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Utils/Logger.java", "chunked_list": ["package im.dnn.BlockEntities.Utils;\n\nimport im.dnn.BlockEntities.BlockEntities;\n\npublic class Logger {\n    static Logger singleton = null;\n    static BlockEntities plugin;\n\n    public static void setPlugin (BlockEntities plugin) {\n        Logger.plugin = plugin;\n    }\n\n    private static void createInstance() {", "    public static void setPlugin (BlockEntities plugin) {\n        Logger.plugin = plugin;\n    }\n\n    private static void createInstance() {\n        if (singleton == null) {\n            singleton = new Logger();\n        }\n    }\n\n    public static void info (String msg) {\n        Logger.createInstance();", "    public static void info (String msg) {\n        Logger.createInstance();\n        if (plugin.settings.isDebug()) {\n            plugin.getLogger().info(msg);\n        }\n    }\n\n    public static void warning (String msg) {\n        Logger.createInstance();\n        plugin.getLogger().warning(msg);\n    }\n", "    public static void importantInfo (String msg) {\n        Logger.createInstance();\n        plugin.getLogger().info(msg);\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Utils/Helpers.java", "chunked_list": ["package im.dnn.BlockEntities.Utils;\n\nimport im.dnn.BlockEntities.BlockEntities;\nimport im.dnn.BlockEntities.Constants.Keys;\nimport org.bukkit.Location;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.entity.Player;\n\npublic class Helpers {\n    public static String locationToString (Location location) {\n        return location.getWorld().getName() + \"_z\" + location.getBlockX() + \"y\" + location.getBlockY() + \"z\" + location.getBlockZ();\n    }", "public class Helpers {\n    public static String locationToString (Location location) {\n        return location.getWorld().getName() + \"_z\" + location.getBlockX() + \"y\" + location.getBlockY() + \"z\" + location.getBlockZ();\n    }\n    public static String format(String message) {\n        return message.replaceAll(\"&\", \"\u00a7\");\n    }\n\n    public static boolean hasPermission (Player player, String permission) {\n        return player.isOp() || player.hasPermission(permission);\n    }\n", "    public static boolean hasPermission (Player player, String permission) {\n        return player.isOp() || player.hasPermission(permission);\n    }\n\n    public static void sendMessageToOpPlayers (BlockEntities plugin, String message) {\n        for (Player player : plugin.getServer().getOnlinePlayers()) {\n            if (player.isOp()) {\n                player.sendMessage(message);\n            }\n        }\n    }\n", "    public static void sendFormattedMessage (CommandSender sender, String message) {\n        sender.sendMessage(format(message));\n    }\n\n    public static void sendMessage (BlockEntities plugin, CommandSender sender, String pathToMessage) {\n        String prefix = plugin.settings.getString(Keys.MESSAGES_PREFIX);\n        String message = plugin.settings.getString(pathToMessage);\n        sendFormattedMessage(sender, prefix + message);\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Utils/Settings.java", "chunked_list": ["package im.dnn.BlockEntities.Utils;\n\nimport im.dnn.BlockEntities.BlockEntities;\nimport im.dnn.BlockEntities.Constants.Defaults;\nimport im.dnn.BlockEntities.Constants.Keys;\nimport org.bukkit.configuration.file.FileConfiguration;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic class Settings {\n    private BlockEntities plugin;\n    private FileConfiguration config;\n\n    public Settings (BlockEntities plugin) {\n        this.plugin = plugin;\n        this.setupConfig();\n    }\n", "import java.util.Map;\n\npublic class Settings {\n    private BlockEntities plugin;\n    private FileConfiguration config;\n\n    public Settings (BlockEntities plugin) {\n        this.plugin = plugin;\n        this.setupConfig();\n    }\n", "    public void setupConfig () {\n        this.plugin.saveDefaultConfig();\n        this.config = this.plugin.getConfig();\n        this.setupDefaults();\n    }\n\n    private void setupDefaults () {\n        this.config.addDefault(Keys.DEBUG, Defaults.DEBUG);\n        this.config.addDefault(Keys.BLOCKS, Defaults.BLOCKS);\n    }\n", "    public void reloadConfig () {\n        this.plugin.reloadConfig();\n        this.config = this.plugin.getConfig();\n    }\n\n    public void saveConfig () {\n        this.plugin.saveConfig();\n    }\n\n    public boolean isDebug () {\n        return this.config.getBoolean(Keys.DEBUG);\n    }\n\n    public List<Map<?, ?>> getMapList (String path) {\n        return this.config.getMapList(path);\n    }\n", "    public boolean isDebug () {\n        return this.config.getBoolean(Keys.DEBUG);\n    }\n\n    public List<Map<?, ?>> getMapList (String path) {\n        return this.config.getMapList(path);\n    }\n\n    public String getString (String path) {\n        return this.config.getString(path);\n    }\n", "    public String getString (String path) {\n        return this.config.getString(path);\n    }\n\n    public void set (String path, Object value) {\n        this.config.set(path, value);\n        this.saveConfig();\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Models/BlockItem.java", "chunked_list": ["package im.dnn.BlockEntities.Models;\n\nimport im.dnn.BlockEntities.Constants.Keys;\nimport im.dnn.BlockEntities.Utils.Helpers;\nimport org.bukkit.Material;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.inventory.meta.ItemMeta;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BlockItem {\n    private final Material BLOCK_MATERIAL = Material.LEGACY_STONE;\n    private String displayName;\n    private List<String> lore;\n    private int customModelData;\n\n\n    public BlockItem (ItemStack itemStack) {\n        this.displayName = itemStack.getItemMeta().getDisplayName();\n        this.lore = itemStack.getItemMeta().getLore();\n        this.customModelData = itemStack.getItemMeta().getCustomModelData();\n    }\n\n    public BlockItem (Map<?, ?> configObject) {\n        String rawDisplayName = (String) configObject.get(Keys.BLOCK_DISPLAYNAME);\n        List<String> rawLore = (List<String>) configObject.get(Keys.BLOCK_LORE);\n\n        this.displayName = Helpers.format(rawDisplayName);\n        this.customModelData = (int) configObject.get(Keys.BLOCK_CUSTOMMODELDATA);\n        this.lore = new ArrayList<>();\n", "        for (String loreItem : rawLore) {\n            this.lore.add(Helpers.format(loreItem));\n        }\n    }\n\n    public BlockItem (String displayName, List<String> lore, int customModelData) {\n        this.displayName = displayName;\n        this.lore = lore;\n        this.customModelData = customModelData;\n    }\n", "    public String getDisplayName() {\n        return this.displayName;\n    }\n\n    public ItemStack getItem(int amount) {\n        ItemStack item = new ItemStack(BLOCK_MATERIAL, amount);\n        ItemMeta itemMeta = item.getItemMeta();\n\n        itemMeta.setDisplayName(this.displayName);\n        itemMeta.setLore(this.lore);\n        itemMeta.setCustomModelData(this.customModelData);\n\n        item.setItemMeta(itemMeta);\n\n        return item;\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Models/BlockEntity.java", "chunked_list": ["package im.dnn.BlockEntities.Models;\n\nimport org.bukkit.Location;\nimport org.bukkit.Material;\nimport org.bukkit.World;\nimport org.bukkit.entity.ItemDisplay;\nimport org.bukkit.inventory.ItemStack;\n\npublic class BlockEntity {\n    private final Material BROKEN_MATERIAL = Material.AIR;\n    private final Material HITBOX_MATERIAL = Material.BARRIER;\n\n    private Location location;\n    private ItemDisplay entity;\n    private BlockItem blockItem;\n\n    public BlockEntity (Location location, BlockItem blockItem) {\n        this.placeBlock(location, blockItem);\n    }\n\n    private void placeBlock (Location location, BlockItem blockItem) {\n        World world = location.getWorld();\n\n        world.setBlockData(location, HITBOX_MATERIAL.createBlockData());\n        Location entityLocation = getLocationFromBlock(location);\n\n        world.spawn(entityLocation, ItemDisplay.class, entity -> {\n            ItemStack item = blockItem.getItem(1);\n            entity.setItemStack(item);\n            entity.setPersistent(true);\n            entity.setInvulnerable(true);\n\n            this.entity = entity;\n            this.location = location;\n            this.blockItem = blockItem;\n        });\n    }\n", "public class BlockEntity {\n    private final Material BROKEN_MATERIAL = Material.AIR;\n    private final Material HITBOX_MATERIAL = Material.BARRIER;\n\n    private Location location;\n    private ItemDisplay entity;\n    private BlockItem blockItem;\n\n    public BlockEntity (Location location, BlockItem blockItem) {\n        this.placeBlock(location, blockItem);\n    }\n\n    private void placeBlock (Location location, BlockItem blockItem) {\n        World world = location.getWorld();\n\n        world.setBlockData(location, HITBOX_MATERIAL.createBlockData());\n        Location entityLocation = getLocationFromBlock(location);\n\n        world.spawn(entityLocation, ItemDisplay.class, entity -> {\n            ItemStack item = blockItem.getItem(1);\n            entity.setItemStack(item);\n            entity.setPersistent(true);\n            entity.setInvulnerable(true);\n\n            this.entity = entity;\n            this.location = location;\n            this.blockItem = blockItem;\n        });\n    }\n", "    public void breakBlock () {\n        this.entity.remove();\n        World world = this.location.getWorld();\n        world.setBlockData(this.location, BROKEN_MATERIAL.createBlockData());\n    }\n\n    public BlockItem getBlockItem () {\n        return  this.blockItem;\n    }\n\n    private Location getLocationFromBlock (Location location) {\n        Location entityLocation = location.clone();\n        entityLocation.setX( location.getX() + 0.5 );\n        entityLocation.setY( location.getY() + 0.5 );\n        entityLocation.setZ( location.getZ() + 0.5 );\n\n        return entityLocation;\n    }\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Constants/Defaults.java", "chunked_list": ["package im.dnn.BlockEntities.Constants;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Defaults {\n    public final static boolean DEBUG = true;\n\n    public final static List<Object> BLOCKS = new ArrayList<>();\n\n}\n", "    public final static List<Object> BLOCKS = new ArrayList<>();\n\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Constants/Commands.java", "chunked_list": ["package im.dnn.BlockEntities.Constants;\n\npublic class Commands {\n\n    public static final String BASE = \"blockentities\";\n    public static final String HELP = \"help\";\n    public static final String RELOAD = \"reload\";\n    public static final String GET = \"get\";\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Constants/Keys.java", "chunked_list": ["package im.dnn.BlockEntities.Constants;\n\npublic class Keys {\n    public final static String DEBUG = \"debug\";\n\n    public final static String BLOCKS = \"blocks\";\n\n    public final static String BLOCK_KEY = \"key\";\n    public final static String BLOCK_DISPLAYNAME = \"displayName\";\n    public final static String BLOCK_LORE = \"lore\";\n    public final static String BLOCK_CUSTOMMODELDATA = \"customModelData\";\n", "    public final static String BLOCK_DISPLAYNAME = \"displayName\";\n    public final static String BLOCK_LORE = \"lore\";\n    public final static String BLOCK_CUSTOMMODELDATA = \"customModelData\";\n\n    public final static String MESSAGES_PREFIX = \"messages.prefix\";\n    public final static String MESSAGES_RELOADED = \"messages.reloaded\";\n    public final static String MESSAGES_CANT_RELOAD = \"messages.cantReload\";\n    public final static String MESSAGES_CANT_GET = \"messages.cantGet\";\n    public final static String MESSAGES_CANT_PLACE = \"messages.cantPlace\";\n    public final static String MESSAGES_CANT_BREAK = \"messages.cantBreak\";\n    public final static String MESSAGES_CMD_BLOCK_MISSING = \"messages.commandBlockMissing\";", "    public final static String MESSAGES_CANT_PLACE = \"messages.cantPlace\";\n    public final static String MESSAGES_CANT_BREAK = \"messages.cantBreak\";\n    public final static String MESSAGES_CMD_BLOCK_MISSING = \"messages.commandBlockMissing\";\n    public final static String MESSAGES_CMD_BLOCK_NOT_EXISTS = \"messages.commandBlockNotExists\";\n    public final static String MESSAGES_CMD_NOT_PLAYER= \"commandNotPlayer\";\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Constants/Permissions.java", "chunked_list": ["package im.dnn.BlockEntities.Constants;\n\npublic class Permissions {\n    public static String RELOAD = \"blockentities.reload\";\n    public static String GET = \"blockentities.get\";\n    public static String PLACE = \"blockentities.place\";\n    public static String BREAK = \"blockentities.break\";\n}\n"]}
{"filename": "src/main/java/im/dnn/BlockEntities/Listeners/BlockListener.java", "chunked_list": ["package im.dnn.BlockEntities.Listeners;\n\nimport im.dnn.BlockEntities.BlockEntities;\nimport im.dnn.BlockEntities.Constants.Keys;\nimport im.dnn.BlockEntities.Constants.Permissions;\nimport im.dnn.BlockEntities.Managers.BlockManager;\nimport im.dnn.BlockEntities.Models.BlockItem;\nimport im.dnn.BlockEntities.Utils.Helpers;\nimport org.bukkit.Location;\nimport org.bukkit.Material;", "import org.bukkit.Location;\nimport org.bukkit.Material;\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.block.Action;\nimport org.bukkit.event.block.BlockPlaceEvent;\nimport org.bukkit.event.player.PlayerInteractEvent;\nimport org.bukkit.inventory.ItemStack;\n\npublic class BlockListener implements Listener {\n    private BlockEntities plugin;\n    private BlockManager blockManager;\n\n    public BlockListener (BlockEntities plugin, BlockManager blockManager) {\n        this.plugin = plugin;\n        this.blockManager = blockManager;\n    }\n\n    @EventHandler", "import org.bukkit.inventory.ItemStack;\n\npublic class BlockListener implements Listener {\n    private BlockEntities plugin;\n    private BlockManager blockManager;\n\n    public BlockListener (BlockEntities plugin, BlockManager blockManager) {\n        this.plugin = plugin;\n        this.blockManager = blockManager;\n    }\n\n    @EventHandler", "    public void onBlockPlaced (BlockPlaceEvent event) {\n        ItemStack item = event.getItemInHand();\n        Material material = item.getData().getItemType();\n\n        if (material.equals(Material.LEGACY_STONE) && item.getItemMeta().hasCustomModelData()) {\n            Player player = event.getPlayer();\n\n            if (!Helpers.hasPermission(player, Permissions.PLACE)) {\n                Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CANT_PLACE);\n                event.setCancelled(true);\n                return;\n            }\n\n            Location location = event.getBlockPlaced().getLocation();\n            BlockItem blockItem = new BlockItem(item);\n            this.blockManager.addBlock(location, blockItem);\n        }\n    }\n\n    @EventHandler", "    public void onWantBlockBroke (PlayerInteractEvent event) {\n        if (event.getAction().equals(Action.LEFT_CLICK_BLOCK)) {\n            Location location = event.getClickedBlock().getLocation();\n            Player player = event.getPlayer();\n\n            if (!Helpers.hasPermission(player, Permissions.BREAK)) {\n                Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CANT_BREAK);\n                event.setCancelled(true);\n                return;\n            }\n\n            this.blockManager.breakBlock(location, player);\n        }\n    }\n}\n"]}
