{"filename": "src/main/java/de/florianmichael/classic4j/ClassiCubeHandler.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j;", "\npackage de.florianmichael.classic4j;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport de.florianmichael.classic4j.api.LoginProcessHandler;\nimport de.florianmichael.classic4j.request.classicube.auth.CCAuthenticationLoginRequest;\nimport de.florianmichael.classic4j.request.classicube.auth.CCAuthenticationTokenRequest;\nimport de.florianmichael.classic4j.request.classicube.server.CCServerInfoRequest;\nimport de.florianmichael.classic4j.request.classicube.server.CCServerListRequest;", "import de.florianmichael.classic4j.request.classicube.server.CCServerInfoRequest;\nimport de.florianmichael.classic4j.request.classicube.server.CCServerListRequest;\nimport de.florianmichael.classic4j.model.classicube.CCServerList;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAccount;\n\nimport javax.security.auth.login.LoginException;\nimport java.net.URI;\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic class ClassiCubeHandler {", "import java.util.function.Consumer;\n\npublic class ClassiCubeHandler {\n    public final static Gson GSON = new GsonBuilder().serializeNulls().create();\n\n    public final static URI CLASSICUBE_ROOT_URI = URI.create(\"https://www.classicube.net\");\n\n    public final static URI AUTHENTICATION_URI = CLASSICUBE_ROOT_URI.resolve(\"/api/login/\");\n    public final static URI SERVER_INFO_URI = CLASSICUBE_ROOT_URI.resolve(\"/api/server/\");\n    public final static URI SERVER_LIST_INFO_URI = CLASSICUBE_ROOT_URI.resolve(\"/api/servers/\");\n", "    public final static URI SERVER_INFO_URI = CLASSICUBE_ROOT_URI.resolve(\"/api/server/\");\n    public final static URI SERVER_LIST_INFO_URI = CLASSICUBE_ROOT_URI.resolve(\"/api/servers/\");\n\n    public static void requestServerList(final CCAccount account, final Consumer<CCServerList> complete) {\n        requestServerList(account, complete, Throwable::printStackTrace);\n    }\n\n    public static void requestServerList(final CCAccount account, final Consumer<CCServerList> complete, final Consumer<Throwable> throwableConsumer) {\n        CCServerListRequest.send(account).whenComplete((ccServerList, throwable) -> {\n            if (throwable != null) {\n                throwableConsumer.accept(throwable);\n                return;\n            }\n            complete.accept(ccServerList);\n        });\n    }\n", "            if (throwable != null) {\n                throwableConsumer.accept(throwable);\n                return;\n            }\n            complete.accept(ccServerList);\n        });\n    }\n\n    public static void requestServerInfo(final CCAccount account, final String serverHash, final Consumer<CCServerList> complete) {\n        requestServerInfo(account, serverHash, complete, Throwable::printStackTrace);\n    }\n", "    public static void requestServerInfo(final CCAccount account, final String serverHash, final Consumer<CCServerList> complete) {\n        requestServerInfo(account, serverHash, complete, Throwable::printStackTrace);\n    }\n\n    public static void requestServerInfo(final CCAccount account, final String serverHash, final Consumer<CCServerList> complete, final Consumer<Throwable> throwableConsumer) {\n        requestServerInfo(account, List.of(serverHash), complete, throwableConsumer);\n    }\n\n    public static void requestServerInfo(final CCAccount account, final List<String> serverHashes, final Consumer<CCServerList> complete) {\n        requestServerInfo(account, serverHashes, complete, Throwable::printStackTrace);\n    }\n", "    public static void requestServerInfo(final CCAccount account, final List<String> serverHashes, final Consumer<CCServerList> complete) {\n        requestServerInfo(account, serverHashes, complete, Throwable::printStackTrace);\n    }\n\n    public static void requestServerInfo(final CCAccount account, final List<String> serverHashes, final Consumer<CCServerList> complete, final Consumer<Throwable> throwableConsumer) {\n        CCServerInfoRequest.send(account, serverHashes).whenComplete((ccServerList, throwable) -> {\n            if (throwable != null) {\n                throwableConsumer.accept(throwable);\n                return;\n            }\n            complete.accept(ccServerList);\n        });\n    }\n", "    public static void requestAuthentication(final CCAccount account, final String loginCode, final LoginProcessHandler processHandler) {\n        CCAuthenticationTokenRequest.send(account).whenComplete((initialTokenResponse, throwable) -> {\n            if (throwable != null) {\n                processHandler.handleException(throwable);\n                return;\n            }\n            // There should NEVER be any errors on the initial token response!\n            if (initialTokenResponse.shouldError()) {\n                final String errorDisplay = initialTokenResponse.getErrorDisplay();\n                processHandler.handleException(new LoginException(errorDisplay));\n                return;\n            }\n            account.token = initialTokenResponse.token;\n\n            CCAuthenticationLoginRequest.send(account, initialTokenResponse, loginCode).whenComplete((loginResponse, throwable1) -> {", "                if (throwable1 != null) {\n                    processHandler.handleException(throwable1);\n                    return;\n                }\n                if (loginResponse.mfaRequired()) {\n                    processHandler.handleMfa(account);\n                    return;\n                }\n                if (loginResponse.shouldError()) {\n                    final String errorDisplay = loginResponse.getErrorDisplay();\n                    processHandler.handleException(new LoginException(errorDisplay));\n                    return;\n                }\n                processHandler.handleSuccessfulLogin(account);\n            });\n        });\n    }\n}\n", "                if (loginResponse.shouldError()) {\n                    final String errorDisplay = loginResponse.getErrorDisplay();\n                    processHandler.handleException(new LoginException(errorDisplay));\n                    return;\n                }\n                processHandler.handleSuccessfulLogin(account);\n            });\n        });\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/BetaCraftHandler.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j;", "\npackage de.florianmichael.classic4j;\n\nimport de.florianmichael.classic4j.request.betacraft.BCServerListRequest;\nimport de.florianmichael.classic4j.model.betacraft.BCServerList;\n\nimport java.net.URI;\nimport java.util.function.Consumer;\n\npublic class BetaCraftHandler {\n    public final static URI SERVER_LIST = URI.create(\"https://betacraft.uk/serverlist\");\n", "\npublic class BetaCraftHandler {\n    public final static URI SERVER_LIST = URI.create(\"https://betacraft.uk/serverlist\");\n\n    public static void requestServerList(final Consumer<BCServerList> complete) {\n        requestServerList(complete, Throwable::printStackTrace);\n    }\n\n    public static void requestServerList(final Consumer<BCServerList> complete, final Consumer<Throwable> throwableConsumer) {\n        BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {\n            if (throwable != null) {\n                throwableConsumer.accept(throwable);\n                return;\n            }\n            complete.accept(bcServerList);\n        });\n    }\n}\n", "    public static void requestServerList(final Consumer<BCServerList> complete, final Consumer<Throwable> throwableConsumer) {\n        BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {\n            if (throwable != null) {\n                throwableConsumer.accept(throwable);\n                return;\n            }\n            complete.accept(bcServerList);\n        });\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/JSPBetaCraftHandler.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j;", "\npackage de.florianmichael.classic4j;\n\nimport de.florianmichael.classic4j.api.JoinServerInterface;\n\nimport java.io.InputStream;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URL;\nimport java.security.MessageDigest;", "import java.net.URL;\nimport java.security.MessageDigest;\nimport java.util.Formatter;\nimport java.util.Scanner;\n\npublic class JSPBetaCraftHandler {\n    public final static URI GET_MP_PASS = URI.create(\"http://api.betacraft.uk/getmppass.jsp\");\n\n    public static String requestMPPass(final String username, final String ip, final int port, final JoinServerInterface joinServerInterface) {\n        try {\n            final String server = InetAddress.getByName(ip).getHostAddress() + \":\" + port;\n\n            joinServerInterface.sendAuthRequest(sha1(server.getBytes()));\n\n            final InputStream connection = new URL(GET_MP_PASS + \"?user=\" + username + \"&server=\" + server).openStream();\n            Scanner scanner = new Scanner(connection);\n            StringBuilder response = new StringBuilder();", "    public static String requestMPPass(final String username, final String ip, final int port, final JoinServerInterface joinServerInterface) {\n        try {\n            final String server = InetAddress.getByName(ip).getHostAddress() + \":\" + port;\n\n            joinServerInterface.sendAuthRequest(sha1(server.getBytes()));\n\n            final InputStream connection = new URL(GET_MP_PASS + \"?user=\" + username + \"&server=\" + server).openStream();\n            Scanner scanner = new Scanner(connection);\n            StringBuilder response = new StringBuilder();\n            while (scanner.hasNext()) {\n                response.append(scanner.next());\n            }\n            connection.close();\n", "            while (scanner.hasNext()) {\n                response.append(scanner.next());\n            }\n            connection.close();\n\n            if (response.toString().contains(\"FAILED\") || response.toString().contains(\"SERVER NOT FOUND\")) return \"0\";\n\n            return response.toString();\n        } catch (Throwable t) {\n            t.printStackTrace();\n            return \"0\";\n        }\n    }\n\n    private static String sha1(final byte[] input) {", "        try {\n            Formatter formatter = new Formatter();\n            final byte[] hash = MessageDigest.getInstance(\"SHA-1\").digest(input);\n            for (byte b : hash) {\n                formatter.format(\"%02x\", b);\n            }\n            return formatter.toString();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/CookieStore.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model;", "\npackage de.florianmichael.classic4j.model;\n\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\npublic class CookieStore {\n    private final Map<String, String> values;\n\n    public CookieStore() {\n        this.values = new HashMap<>();\n    }\n\n    public CookieStore(Map<String, String> values) {\n        this.values = values;\n    }\n\n    public Map<String, String> getMap() {\n        return Collections.unmodifiableMap(values);\n    }\n", "import java.util.Optional;\n\npublic class CookieStore {\n    private final Map<String, String> values;\n\n    public CookieStore() {\n        this.values = new HashMap<>();\n    }\n\n    public CookieStore(Map<String, String> values) {\n        this.values = values;\n    }\n\n    public Map<String, String> getMap() {\n        return Collections.unmodifiableMap(values);\n    }\n", "    public void merge(CookieStore cookieStore) {\n        this.values.putAll(cookieStore.getMap());\n    }\n\n    @Override\n    public String toString() {\n        final StringBuilder builder = new StringBuilder();\n\n        int i = 0;\n\n        for (Map.Entry<String, String> entry : values.entrySet()) {", "        for (Map.Entry<String, String> entry : values.entrySet()) {\n            if (i != 0) {\n                builder.append(\";\");\n            }\n\n            builder.append(entry.getKey());\n            builder.append(\"=\");\n            builder.append(entry.getValue());\n            i++;\n        }\n\n        return builder.toString();\n    }\n", "    public void mergeFromResponse(HttpResponse<?> response) {\n        final Optional<String> setCookieHeaderOptional = response.headers()\n                .firstValue(\"set-cookie\");\n\n        if (setCookieHeaderOptional.isEmpty()) {\n            return;\n        }\n\n        final String setCookieHeader = setCookieHeaderOptional.get();\n        final CookieStore store = CookieStore.parse(setCookieHeader);\n\n        this.merge(store);\n    }\n\n\n    public HttpRequest.Builder appendCookies(HttpRequest.Builder builder) {\n        builder.header(\"Cookie\", this.toString());\n\n        return builder;\n    }\n", "    public static CookieStore parse(final String value) {\n        final char[] characters = value.toCharArray();\n        StringBuilder currentKey = new StringBuilder();\n        StringBuilder currentValue = new StringBuilder();\n        boolean key = true;\n        final Map<String, String> values = new HashMap<>();\n\n        for (final char character : characters) {\n            if (character == '=' && key) {\n                currentValue = new StringBuilder();\n                key = false;\n                continue;\n            }\n", "            if (character == '=' && key) {\n                currentValue = new StringBuilder();\n                key = false;\n                continue;\n            }\n\n            if (character == ';' && !key) {\n                key = true;\n                values.put(currentKey.toString(), currentValue.toString());\n                continue;\n            }\n", "            if (key) {\n                currentKey.append(character);\n            } else {\n                currentValue.append(character);\n            }\n        }\n\n        return new CookieStore(values);\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/classicube/CCServerInfo.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.classicube;", "\npackage de.florianmichael.classic4j.model.classicube;\n\nimport com.google.gson.annotations.SerializedName;\n\npublic class CCServerInfo {\n    @SerializedName(\"hash\") private final String hash;\n    @SerializedName(\"maxplayers\") private final int maxPlayers;\n    @SerializedName(\"name\") private final String name;\n    @SerializedName(\"players\") private final int players;\n    @SerializedName(\"software\") private final String software;\n    @SerializedName(\"uptime\") private final long uptime;\n    @SerializedName(\"country_abbr\") private final String countryCode;\n    @SerializedName(\"web\") private final boolean web;\n    @SerializedName(\"featured\") private final boolean featured;\n    @SerializedName(\"ip\") private final String ip;\n    @SerializedName(\"port\") private final int port;\n    @SerializedName(\"mppass\") private final String mpPass;\n\n    public CCServerInfo(String hash, int maxPlayers, String name, int players, String software, long uptime, String countryCode, boolean web, boolean featured, String ip, int port, String mpPass) {\n        this.hash = hash;\n        this.maxPlayers = maxPlayers;\n        this.name = name;\n        this.players = players;\n        this.software = software;\n        this.uptime = uptime;\n        this.countryCode = countryCode;\n        this.web = web;\n        this.featured = featured;\n        this.ip = ip;\n        this.port = port;\n        this.mpPass = mpPass;\n    }\n", "    public String hash() {\n        return hash;\n    }\n\n    public int maxPlayers() {\n        return maxPlayers;\n    }\n\n    public String name() {\n        return name;\n    }\n", "    public String name() {\n        return name;\n    }\n\n    public int players() {\n        return players;\n    }\n\n    public String software() {\n        return software;\n    }\n", "    public String software() {\n        return software;\n    }\n\n    public long uptime() {\n        return uptime;\n    }\n\n    public String countryCode() {\n        return countryCode;\n    }\n", "    public String countryCode() {\n        return countryCode;\n    }\n\n    public boolean web() {\n        return web;\n    }\n\n    public boolean featured() {\n        return featured;\n    }\n", "    public boolean featured() {\n        return featured;\n    }\n\n    public String ip() {\n        return ip;\n    }\n\n    public int port() {\n        return port;\n    }\n", "    public int port() {\n        return port;\n    }\n\n    public String mpPass() {\n        return mpPass;\n    }\n\n    @Override\n    public String toString() {\n        return \"CCServerInfo{\" +\n                \"hash='\" + hash + '\\'' +\n                \", maxPlayers=\" + maxPlayers +\n                \", name='\" + name + '\\'' +\n                \", players=\" + players +\n                \", software='\" + software + '\\'' +\n                \", uptime=\" + uptime +\n                \", countryCode='\" + countryCode + '\\'' +\n                \", web=\" + web +\n                \", featured=\" + featured +\n                \", ip='\" + ip + '\\'' +\n                \", port=\" + port +\n                \", mpPass='\" + mpPass + '\\'' +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"CCServerInfo{\" +\n                \"hash='\" + hash + '\\'' +\n                \", maxPlayers=\" + maxPlayers +\n                \", name='\" + name + '\\'' +\n                \", players=\" + players +\n                \", software='\" + software + '\\'' +\n                \", uptime=\" + uptime +\n                \", countryCode='\" + countryCode + '\\'' +\n                \", web=\" + web +\n                \", featured=\" + featured +\n                \", ip='\" + ip + '\\'' +\n                \", port=\" + port +\n                \", mpPass='\" + mpPass + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/classicube/CCServerList.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.classicube;", "\npackage de.florianmichael.classic4j.model.classicube;\n\n\nimport de.florianmichael.classic4j.ClassiCubeHandler;\n\nimport java.util.List;\n\npublic class CCServerList {\n    private final List<CCServerInfo> servers;\n\n    public CCServerList(final List<CCServerInfo> servers) {\n        this.servers = servers;\n    }\n\n    public List<CCServerInfo> servers() {\n        return this.servers;\n    }\n", "public class CCServerList {\n    private final List<CCServerInfo> servers;\n\n    public CCServerList(final List<CCServerInfo> servers) {\n        this.servers = servers;\n    }\n\n    public List<CCServerInfo> servers() {\n        return this.servers;\n    }\n", "    public static CCServerList fromJson(final String json) {\n        return ClassiCubeHandler.GSON.fromJson(json, CCServerList.class);\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/classicube/highlevel/CCError.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.classicube.highlevel;", "\npackage de.florianmichael.classic4j.model.classicube.highlevel;\n\npublic enum CCError {\n    TOKEN(\"Incorrect token. Is your ViaFabricPlus out of date?\"),\n    USERNAME(\"Invalid username.\"),\n    PASSWORD(\"Invalid password.\"),\n    VERIFICATION(\"User hasn't verified their E-mail address yet.\"),\n    LOGIN_CODE(\"Multi-factor authentication requested. Please check your E-mail.\");\n\n    public final String description;\n\n    CCError(final String description) {\n        this.description = description;\n    }\n}\n", "    public final String description;\n\n    CCError(final String description) {\n        this.description = description;\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/classicube/highlevel/CCAccount.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.classicube.highlevel;", "\npackage de.florianmichael.classic4j.model.classicube.highlevel;\n\nimport com.google.gson.JsonObject;\nimport de.florianmichael.classic4j.model.CookieStore;\n\npublic class CCAccount {\n    public final CookieStore cookieStore = new CookieStore();\n\n    public String token;\n    private final String username;\n    private final String password;\n\n    public CCAccount(final String username, final String password) {\n        this(null, username, password);\n    }\n\n    public CCAccount(final String token, final String username, final String password) {\n        this.token = token;\n        this.username = username;\n        this.password = password;\n    }\n", "    public String token;\n    private final String username;\n    private final String password;\n\n    public CCAccount(final String username, final String password) {\n        this(null, username, password);\n    }\n\n    public CCAccount(final String token, final String username, final String password) {\n        this.token = token;\n        this.username = username;\n        this.password = password;\n    }\n", "    public JsonObject asJson() {\n        final JsonObject object = new JsonObject();\n\n        object.addProperty(\"token\", this.token);\n        object.addProperty(\"username\", this.username);\n        object.addProperty(\"password\", this.password);\n\n        return object;\n    }\n\n    public static CCAccount fromJson(final JsonObject object) {\n        String token = null;", "    public static CCAccount fromJson(final JsonObject object) {\n        String token = null;\n        if (object.has(\"token\"))\n            token = object.get(\"token\").getAsString();\n\n        return new CCAccount(\n                token,\n                object.get(\"username\").getAsString(),\n                object.get(\"password\").getAsString()\n        );\n    }\n", "    public String token() {\n        return token;\n    }\n\n    public String username() {\n        return username;\n    }\n\n    public String password() {\n        return password;\n    }\n\n    @Override", "    public String password() {\n        return password;\n    }\n\n    @Override\n    public String toString() {\n        return \"CCAccount{\" +\n                \"token='\" + token + '\\'' +\n                \", username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/classicube/highlevel/CCAuthenticationData.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.classicube.highlevel;", "\npackage de.florianmichael.classic4j.model.classicube.highlevel;\n\npublic class CCAuthenticationData {\n    private final String username;\n    private final String password;\n    private final String previousToken;\n    private final String loginCode;\n\n    public CCAuthenticationData(final String username, final String password, final String previousToken) {\n        this(username, password, previousToken, null);\n    }\n\n    public CCAuthenticationData(final String username, final String password, final String previousToken, final String loginCode) {\n        this.username = username;\n        this.password = password;\n        this.previousToken = previousToken;\n        this.loginCode = loginCode;\n    }\n", "    public CCAuthenticationData withLoginCode(final String loginCode) {\n        return new CCAuthenticationData(this.username, this.password, this.previousToken, loginCode);\n    }\n\n    public String username() {\n        return username;\n    }\n\n    public String password() {\n        return password;\n    }\n", "    public String password() {\n        return password;\n    }\n\n    public String previousToken() {\n        return previousToken;\n    }\n\n    public String loginCode() {\n        return loginCode;\n    }\n\n    @Override", "    public String loginCode() {\n        return loginCode;\n    }\n\n    @Override\n    public String toString() {\n        return \"CCAuthenticationData{\" +\n                \"username='\" + username + '\\'' +\n                \", password='\" + password + '\\'' +\n                \", previousToken='\" + previousToken + '\\'' +\n                \", loginCode='\" + loginCode + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/betacraft/BCServerInfo.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.betacraft;", "\npackage de.florianmichael.classic4j.model.betacraft;\n\npublic class BCServerInfo {\n    private final String name;\n    private final int playerCount;\n    private final int playerLimit;\n    private final String host;\n    private final int port;\n    private final BCVersion version;\n    private final boolean onlineMode;\n    private final String joinUrl;\n    private final String gameVersion;\n\n    public BCServerInfo(final String name, final int playerCount, final int playerLimit, final String host, final int port, final BCVersion version, final boolean onlineMode, final String joinUrl, final String gameVersion) {\n        this.name = name.trim();\n        this.playerCount = playerCount;\n        this.playerLimit = playerLimit;\n        this.host = host;\n        this.port = port;\n        this.version = version;\n        this.onlineMode = onlineMode;\n        this.joinUrl = joinUrl;\n        this.gameVersion = gameVersion;\n    }\n", "    public String name() {\n        return name;\n    }\n\n    public int playerCount() {\n        return playerCount;\n    }\n\n    public int playerLimit() {\n        return playerLimit;\n    }\n", "    public int playerLimit() {\n        return playerLimit;\n    }\n\n    public String host() {\n        return host;\n    }\n\n    public int port() {\n        return port;\n    }\n", "    public int port() {\n        return port;\n    }\n\n    public BCVersion version() {\n        return version;\n    }\n\n    public boolean onlineMode() {\n        return onlineMode;\n    }\n", "    public boolean onlineMode() {\n        return onlineMode;\n    }\n\n    public String joinUrl() {\n        return joinUrl;\n    }\n\n    public String gameVersion() {\n        return gameVersion;\n    }\n\n    @Override", "    public String gameVersion() {\n        return gameVersion;\n    }\n\n    @Override\n    public String toString() {\n        return \"BCServerInfo{\" +\n                \"name='\" + name + '\\'' +\n                \", playerCount=\" + playerCount +\n                \", playerLimit=\" + playerLimit +\n                \", host='\" + host + '\\'' +\n                \", port=\" + port +\n                \", version=\" + version +\n                \", onlineMode=\" + onlineMode +\n                \", joinUrl='\" + joinUrl + '\\'' +\n                \", gameVersion='\" + gameVersion + '\\'' +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/betacraft/BCServerList.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.betacraft;", "\npackage de.florianmichael.classic4j.model.betacraft;\n\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\nimport java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;", "import java.util.LinkedList;\nimport java.util.List;\n\npublic class BCServerList {\n    private final List<BCServerInfo> servers;\n\n    public BCServerList(final List<BCServerInfo> servers) {\n        this.servers = servers;\n    }\n\n    public static BCServerList fromDocument(final Document document) {\n        final List<BCServerInfo> servers = new LinkedList<>();\n        final Elements serverElements = document.getElementsByClass(\"online\");\n", "    public static BCServerList fromDocument(final Document document) {\n        final List<BCServerInfo> servers = new LinkedList<>();\n        final Elements serverElements = document.getElementsByClass(\"online\");\n\n        for (final Element serverElement : serverElements) {\n            final String joinUrl = serverElement.attr(\"href\");\n\n            if (joinUrl.length() < 7) {\n                continue;\n            }\n\n            final String substringedUrl = joinUrl.substring(7);\n\n            final String[] urlParts = substringedUrl.split(\"/\");\n", "            if (urlParts.length != 4) {\n                continue;\n            }\n\n            final String hostAndPort = urlParts[0];\n            final int portColonIndex = hostAndPort.lastIndexOf(\":\");\n\n            if (portColonIndex == -1) {\n                continue;\n            }\n\n            // We're using substring here in-case someone uses IPv6 for their server.\n            final String portStr = hostAndPort.substring(Math.min(portColonIndex + 1, hostAndPort.length() - 1));\n            final int port;\n", "            try {\n                port = Integer.parseInt(portStr);\n            } catch (NumberFormatException ignored) {\n                continue;\n            }\n\n            // We're doing this .replace operation because some server entries somehow manage to duplicate their port.\n            final String host = hostAndPort.substring(0, portColonIndex).replace(\":\" + port, \"\");\n            final String versionIdentifier = urlParts[3];\n            final BCVersion version = BCVersion.fromString(versionIdentifier);\n            final String rawNameStr = serverElement.text();\n            final int firstIndexOfClosingSquareBracket = rawNameStr.indexOf(\"]\");\n", "            if (firstIndexOfClosingSquareBracket == -1) {\n                continue;\n            }\n\n            final String halfParsedNameStr = rawNameStr.substring(Math.min(firstIndexOfClosingSquareBracket + 2, rawNameStr.length() - 1));\n            final boolean onlineMode = halfParsedNameStr.endsWith(\"[Online Mode]\");\n            final String parsedNameStr = onlineMode ? halfParsedNameStr.replace(\"[Online Mode]\", \"\") : halfParsedNameStr;\n            final Element playerCountElement = serverElement.nextElementSibling();\n\n            if (playerCountElement == null) {\n                continue;\n            }\n\n            final String playerCountContent = playerCountElement.text();\n            final int indexOfOpeningBracket = playerCountContent.indexOf(\"(\");\n            final int indexOfClosingBracket = playerCountContent.indexOf(\")\");\n", "            if (playerCountElement == null) {\n                continue;\n            }\n\n            final String playerCountContent = playerCountElement.text();\n            final int indexOfOpeningBracket = playerCountContent.indexOf(\"(\");\n            final int indexOfClosingBracket = playerCountContent.indexOf(\")\");\n\n            if (indexOfOpeningBracket == -1 || indexOfClosingBracket == -1) {\n                continue;\n            }\n\n            final String playerCountActualContent = playerCountContent.substring(indexOfOpeningBracket + 1, indexOfClosingBracket)\n                    .replace(\" \", \"\");\n            final String[] splitPlayerCount = playerCountActualContent.split(\"/\");\n", "            if (indexOfOpeningBracket == -1 || indexOfClosingBracket == -1) {\n                continue;\n            }\n\n            final String playerCountActualContent = playerCountContent.substring(indexOfOpeningBracket + 1, indexOfClosingBracket)\n                    .replace(\" \", \"\");\n            final String[] splitPlayerCount = playerCountActualContent.split(\"/\");\n\n            if (splitPlayerCount.length != 2) {\n                continue;\n            }\n\n            final int playerCount;\n            final int playerLimit;\n", "            if (splitPlayerCount.length != 2) {\n                continue;\n            }\n\n            final int playerCount;\n            final int playerLimit;\n\n            try {\n                playerCount = Integer.parseInt(splitPlayerCount[0]);\n                playerLimit = Integer.parseInt(splitPlayerCount[1]);\n            } catch (NumberFormatException ignored) {\n                continue;\n            }\n\n            final BCServerInfo server = new BCServerInfo(parsedNameStr, playerCount, playerLimit, host, port, version, onlineMode, joinUrl, versionIdentifier);\n\n            servers.add(server);\n        }\n        return new BCServerList(servers);\n    }\n\n    public List<BCServerInfo> servers() {\n        return Collections.unmodifiableList(this.servers);\n    }\n\n    public List<BCServerInfo> serversOfVersion(final BCVersion version) {\n        final List<BCServerInfo> serverListCopy = this.servers();\n\n        return serverListCopy.stream().filter(s -> s.version().equals(version)).toList();\n    }\n\n    public List<BCServerInfo> serversWithOnlineMode(final boolean on) {\n        return this.servers().stream().filter(s -> s.onlineMode() == on).toList();\n    }\n\n    public List<BCServerInfo> withGameVersion(final String gameVersion) {\n        return this.servers().stream().filter(s -> s.gameVersion().equals(gameVersion)).toList();\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/model/betacraft/BCVersion.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.model.betacraft;", "\npackage de.florianmichael.classic4j.model.betacraft;\n\nimport java.util.Arrays;\n\npublic enum BCVersion {\n    RELEASE(new String[]{\"r\", \"1\" /* Hacky I know, but it works */}),\n    CLASSIC(new String[]{\"c\"}),\n    INDEV(new String[]{\"mp-in-\", \"in-\", \"indev\"}),\n    INFDEV(new String[]{\"infdev\"}),\n    // 12-year-old server owners try not to give their server a non-compliant \"custom\" version challenge (Quite impossible)\n    ALPHA(new String[]{\"a\", \"nsss\"}),\n    BETA(new String[]{\"b\"}),\n    UNKNOWN(new String[0]);\n\n    final String[] versionPrefixes;\n\n    BCVersion(final String[] versionPrefixes) {\n        this.versionPrefixes = versionPrefixes;\n    }\n\n    public String[] versionPrefixes() {\n        final String[] copy = new String[versionPrefixes.length];\n        System.arraycopy(versionPrefixes, 0, copy, 0, versionPrefixes.length);\n\n        return copy;\n    }\n", "    public static BCVersion fromString(final String versionString) {\n        final String lowercaseVersionString = versionString.toLowerCase();\n\n        return Arrays.stream(BCVersion.values())\n                .filter(v -> Arrays.stream(v.versionPrefixes).anyMatch(lowercaseVersionString::startsWith))\n                .findFirst()\n                .orElse(BCVersion.UNKNOWN);\n    }\n\n    @Override\n    public String toString() {\n        return \"Version{\" +\n                \"versionPrefixes=\" + Arrays.toString(versionPrefixes) +\n                '}';\n    }\n}\n", "    public String toString() {\n        return \"Version{\" +\n                \"versionPrefixes=\" + Arrays.toString(versionPrefixes) +\n                '}';\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/util/WebRequests.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.util;", "\npackage de.florianmichael.classic4j.util;\n\nimport de.florianmichael.classic4j.model.CookieStore;\n\nimport java.net.URLEncoder;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;", "import java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\n\npublic class WebRequests {\n    public final static HttpClient HTTP_CLIENT = HttpClient.newHttpClient();\n\n    @SafeVarargs\n    public static String createRequestBody(final Pair<String, String>... parameters) {\n        final StringBuilder builder = new StringBuilder();\n        for (int i = 0; i < parameters.length; i++) {\n            final Pair<String, String> parameter = parameters[i];", "        for (int i = 0; i < parameters.length; i++) {\n            final Pair<String, String> parameter = parameters[i];\n            if (parameter.key() == null || parameter.value() == null) continue;\n\n            builder.append(parameter.key()).append(\"=\").\n                    append(URLEncoder.encode(parameter.value(), StandardCharsets.UTF_8));\n\n            if (i != parameters.length - 1) {\n                builder.append(\"&\");\n            }\n        }\n        return builder.toString();\n    }\n", "    public static HttpRequest buildWithCookies(final CookieStore cookieStore, final HttpRequest.Builder builder) {\n        return cookieStore.appendCookies(builder).build();\n    }\n\n    public static void updateCookies(final CookieStore cookieStore, final HttpResponse<?> response) {\n        cookieStore.mergeFromResponse(response);\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/util/Pair.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.util;", "\npackage de.florianmichael.classic4j.util;\n\npublic class Pair<K, V> {\n    private final K key;\n    private final V value;\n\n    public Pair(final K key, final V value) {\n        this.key = key;\n        this.value = value;\n    }\n", "    public K key() {\n        return this.key;\n    }\n\n    public V value() {\n        return this.value;\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/api/LoginProcessHandler.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.api;", "\npackage de.florianmichael.classic4j.api;\n\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAccount;\n\npublic interface LoginProcessHandler {\n\n    void handleMfa(final CCAccount account);\n    void handleSuccessfulLogin(final CCAccount account);\n    void handleException(final Throwable throwable);\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/api/JoinServerInterface.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.api;", "\npackage de.florianmichael.classic4j.api;\n\npublic interface JoinServerInterface {\n\n    void sendAuthRequest(final String serverId);\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/request/classicube/auth/CCAuthenticationTokenRequest.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.request.classicube.auth;", "\npackage de.florianmichael.classic4j.request.classicube.auth;\n\nimport de.florianmichael.classic4j.ClassiCubeHandler;\nimport de.florianmichael.classic4j.request.classicube.auth.base.CCAuthenticationResponse;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAccount;\nimport de.florianmichael.classic4j.util.WebRequests;\n\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;", "import java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.concurrent.CompletableFuture;\n\npublic class CCAuthenticationTokenRequest {\n\n    public static CompletableFuture<CCAuthenticationResponse> send(final CCAccount account) {\n        return CompletableFuture.supplyAsync(() -> {\n            final HttpRequest request = HttpRequest.newBuilder().GET().uri(ClassiCubeHandler.AUTHENTICATION_URI).build();\n\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n\n            WebRequests.updateCookies(account.cookieStore, response);\n            final String responseBody = response.body();\n            return CCAuthenticationResponse.fromJson(responseBody);\n        });\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/request/classicube/auth/CCAuthenticationLoginRequest.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.request.classicube.auth;", "\npackage de.florianmichael.classic4j.request.classicube.auth;\n\nimport de.florianmichael.classic4j.ClassiCubeHandler;\nimport de.florianmichael.classic4j.request.classicube.auth.base.CCAuthenticationResponse;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAccount;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAuthenticationData;\nimport de.florianmichael.classic4j.util.Pair;\nimport de.florianmichael.classic4j.util.WebRequests;\n", "import de.florianmichael.classic4j.util.WebRequests;\n\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.concurrent.CompletableFuture;\n\npublic class CCAuthenticationLoginRequest {\n\n    public static CompletableFuture<CCAuthenticationResponse> send(final CCAccount account, final CCAuthenticationResponse previousResponse, final String loginCode) {\n        return CompletableFuture.supplyAsync(() -> {\n            final CCAuthenticationData authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);\n\n            final String requestBody = WebRequests.createRequestBody(\n                    new Pair<>(\"username\", authenticationData.username()),\n                    new Pair<>(\"password\", authenticationData.password()),\n                    new Pair<>(\"token\", authenticationData.previousToken()),\n                    new Pair<>(\"login_code\", authenticationData.loginCode())\n            );\n\n            final HttpRequest request = WebRequests.buildWithCookies(account.cookieStore, HttpRequest.newBuilder()\n                    .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                    .uri(ClassiCubeHandler.AUTHENTICATION_URI)\n                    .header(\"content-type\", \"application/x-www-form-urlencoded\"));\n\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n\n            WebRequests.updateCookies(account.cookieStore, response);\n\n            final String responseBody = response.body();\n            return CCAuthenticationResponse.fromJson(responseBody);\n        });\n    }\n}\n", "    public static CompletableFuture<CCAuthenticationResponse> send(final CCAccount account, final CCAuthenticationResponse previousResponse, final String loginCode) {\n        return CompletableFuture.supplyAsync(() -> {\n            final CCAuthenticationData authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);\n\n            final String requestBody = WebRequests.createRequestBody(\n                    new Pair<>(\"username\", authenticationData.username()),\n                    new Pair<>(\"password\", authenticationData.password()),\n                    new Pair<>(\"token\", authenticationData.previousToken()),\n                    new Pair<>(\"login_code\", authenticationData.loginCode())\n            );\n\n            final HttpRequest request = WebRequests.buildWithCookies(account.cookieStore, HttpRequest.newBuilder()\n                    .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                    .uri(ClassiCubeHandler.AUTHENTICATION_URI)\n                    .header(\"content-type\", \"application/x-www-form-urlencoded\"));\n\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n\n            WebRequests.updateCookies(account.cookieStore, response);\n\n            final String responseBody = response.body();\n            return CCAuthenticationResponse.fromJson(responseBody);\n        });\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/request/classicube/auth/base/CCAuthenticationResponse.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.request.classicube.auth.base;", "\npackage de.florianmichael.classic4j.request.classicube.auth.base;\n\nimport de.florianmichael.classic4j.ClassiCubeHandler;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCError;\n\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class CCAuthenticationResponse {", "import java.util.stream.Collectors;\n\npublic class CCAuthenticationResponse {\n    public final String token;\n    public final String username;\n    public final boolean authenticated;\n    public final Set<String> errors;\n\n    public CCAuthenticationResponse(String token, String username, boolean authenticated, Set<String> errors) {\n        this.token = token;\n        this.username = username;\n        this.authenticated = authenticated;\n        this.errors = errors;\n    }\n", "    public boolean shouldError() {\n        return errors.size() > 0;\n    }\n\n    public String getErrorDisplay() {\n        final StringBuilder builder = new StringBuilder();\n\n        for (String error : this.errors) {\n            builder.append(CCError.valueOf(error.toUpperCase()).description).append(\"\\n\");\n        }\n\n        return builder.toString()\n                .trim();\n    }\n\n    public Set<CCError> errors() {\n        return this.errors.stream().map(s -> CCError.valueOf(s.toUpperCase(Locale.ROOT))).collect(Collectors.toSet());\n    }\n", "    public boolean mfaRequired() {\n        return this.errors().stream().anyMatch(e -> e == CCError.LOGIN_CODE);\n    }\n\n    public static CCAuthenticationResponse fromJson(final String json) {\n        return ClassiCubeHandler.GSON.fromJson(json, CCAuthenticationResponse.class);\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/request/classicube/server/CCServerInfoRequest.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.request.classicube.server;", "\npackage de.florianmichael.classic4j.request.classicube.server;\n\nimport de.florianmichael.classic4j.ClassiCubeHandler;\nimport de.florianmichael.classic4j.model.classicube.CCServerList;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAccount;\nimport de.florianmichael.classic4j.util.WebRequests;\n\nimport java.net.URI;\nimport java.net.http.HttpRequest;", "import java.net.URI;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\npublic class CCServerInfoRequest {\n\n    private static URI generateUri(final List<String> serverHashes) {\n        final String joined = String.join(\",\", serverHashes);\n\n        return ClassiCubeHandler.SERVER_INFO_URI.resolve(joined);\n    }\n", "    public static CompletableFuture<CCServerList> send(final CCAccount account, final List<String> serverHashes) {\n        return CompletableFuture.supplyAsync(() -> {\n            final URI uri = generateUri(serverHashes);\n\n            final HttpRequest request = WebRequests.buildWithCookies(account.cookieStore, HttpRequest.newBuilder().GET().uri(uri));\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n\n            WebRequests.updateCookies(account.cookieStore, response);\n\n            final String body = response.body();\n\n            return CCServerList.fromJson(body);\n        });\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/request/classicube/server/CCServerListRequest.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.request.classicube.server;", "\npackage de.florianmichael.classic4j.request.classicube.server;\n\nimport de.florianmichael.classic4j.ClassiCubeHandler;\nimport de.florianmichael.classic4j.model.classicube.CCServerList;\nimport de.florianmichael.classic4j.model.classicube.highlevel.CCAccount;\nimport de.florianmichael.classic4j.util.WebRequests;\n\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;", "import java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.concurrent.CompletableFuture;\n\npublic class CCServerListRequest {\n\n    public static CompletableFuture<CCServerList> send(final CCAccount account) {\n        return CompletableFuture.supplyAsync(() -> {\n            final HttpRequest request = WebRequests.buildWithCookies(account.cookieStore, HttpRequest.newBuilder().GET().uri(ClassiCubeHandler.SERVER_LIST_INFO_URI));\n\n            final HttpResponse<String> response = WebRequests.HTTP_CLIENT.sendAsync(request, HttpResponse.BodyHandlers.ofString()).join();\n\n            WebRequests.updateCookies(account.cookieStore, response);\n\n            final String body = response.body();\n            return CCServerList.fromJson(body);\n        });\n    }\n}\n"]}
{"filename": "src/main/java/de/florianmichael/classic4j/request/betacraft/BCServerListRequest.java", "chunked_list": ["/*\n * This file is part of Classic4J - https://github.com/FlorianMichael/Classic4J\n * Copyright (C) 2023 FlorianMichael/EnZaXD and contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *", " *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage de.florianmichael.classic4j.request.betacraft;", "\npackage de.florianmichael.classic4j.request.betacraft;\n\nimport de.florianmichael.classic4j.BetaCraftHandler;\nimport de.florianmichael.classic4j.model.betacraft.BCServerList;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class BCServerListRequest {\n", "import java.util.concurrent.CompletableFuture;\n\npublic class BCServerListRequest {\n\n    public static CompletableFuture<BCServerList> send() {\n        return CompletableFuture.supplyAsync(() -> {\n            Document document;\n\n            try {\n                document = Jsoup.connect(BetaCraftHandler.SERVER_LIST.toString())\n                        .userAgent(\"Java/\" + Runtime.version())\n                        .header(\"Accept\", \"text/html, image/gif, image/jpeg, ; q=.2,/*; q=.2\")\n                        .post()\n                        .quirksMode(Document.QuirksMode.quirks);\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n\n            return BCServerList.fromDocument(document);\n        });\n    }\n}\n", "            try {\n                document = Jsoup.connect(BetaCraftHandler.SERVER_LIST.toString())\n                        .userAgent(\"Java/\" + Runtime.version())\n                        .header(\"Accept\", \"text/html, image/gif, image/jpeg, ; q=.2,/*; q=.2\")\n                        .post()\n                        .quirksMode(Document.QuirksMode.quirks);\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n\n            return BCServerList.fromDocument(document);\n        });\n    }\n}\n"]}
