{"filename": "mixin-maven-plugin/src/test/java/com/playtika/maven/plugins/MixinModelMergerReportingTest.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.ReportPlugin;\nimport org.apache.maven.model.ReportSet;\nimport org.apache.maven.model.Reporting;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Arrays;", "\nimport java.util.Arrays;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class MixinModelMergerReportingTest {\n    private MixinModelMerger merger;\n    private Model source;\n\n    @BeforeEach\n    public void setup() {\n        merger = new MixinModelMerger();\n        source = new Model();\n        source.setReporting(new Reporting());\n        source.getReporting().setOutputDirectory(\"out1\");\n        source.getReporting().setExcludeDefaults(true);\n\n        ReportPlugin plugin = new ReportPlugin();\n        plugin.setGroupId(\"aaa\");\n        plugin.setArtifactId(\"aaa\");\n        plugin.setVersion(\"1.0\");\n\n        ReportSet reportSet = new ReportSet();\n        reportSet.setId(\"report-set-1\");\n        reportSet.setReports(Arrays.asList(new String[]{\"1\", \"2\"}));\n        plugin.addReportSet(reportSet);\n        source.getReporting().addPlugin(plugin);\n    }\n\n    @Test", "    public void setup() {\n        merger = new MixinModelMerger();\n        source = new Model();\n        source.setReporting(new Reporting());\n        source.getReporting().setOutputDirectory(\"out1\");\n        source.getReporting().setExcludeDefaults(true);\n\n        ReportPlugin plugin = new ReportPlugin();\n        plugin.setGroupId(\"aaa\");\n        plugin.setArtifactId(\"aaa\");\n        plugin.setVersion(\"1.0\");\n\n        ReportSet reportSet = new ReportSet();\n        reportSet.setId(\"report-set-1\");\n        reportSet.setReports(Arrays.asList(new String[]{\"1\", \"2\"}));\n        plugin.addReportSet(reportSet);\n        source.getReporting().addPlugin(plugin);\n    }\n\n    @Test", "    public void testReportingOutputDirectory() {\n        Model target = new Model();\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getOutputDirectory(), \"out1\");\n        target.setReporting(new Reporting());\n        target.getReporting().setOutputDirectory(\"out2\");\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getOutputDirectory(), \"out2\");\n    }\n\n    @Test", "    public void testReportingExcludeDefaults() {\n        Model target = new Model();\n        target.setReporting(new Reporting());\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getExcludeDefaults(), \"true\");\n        target.getReporting().setExcludeDefaults(false);\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getExcludeDefaults(), \"false\");\n    }\n\n    @Test", "    public void testReportingMissingPlugin() {\n        Model target = new Model();\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getPlugins().get(0).getArtifactId(), \"aaa\");\n    }\n\n    @Test\n    public void testReportingPluginMerge() {\n        Model target = new Model();\n        ReportPlugin plugin = new ReportPlugin();\n        plugin.setGroupId(\"aaa\");\n        plugin.setArtifactId(\"aaa\");\n        plugin.setVersion(\"1.1\");\n        target.setReporting(new Reporting());\n        target.getReporting().addPlugin(plugin);\n\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getPlugins().get(0).getVersion(), \"1.1\");\n        assertEquals(target.getReporting().getPlugins().get(0).getReportSets().get(0).getReports().get(0), \"1\");\n    }\n\n    @Test", "    public void testReportingPluginMergeWithNewReports() {\n        Model target = new Model();\n        ReportPlugin plugin = new ReportPlugin();\n\n        plugin.setGroupId(\"aaa\");\n        plugin.setArtifactId(\"aaa\");\n        plugin.setVersion(\"1.1\");\n        target.setReporting(new Reporting());\n        target.getReporting().addPlugin(plugin);\n\n        ReportSet reportSet = new ReportSet();\n        reportSet.setId(\"report-set-1\");\n        reportSet.setReports(Arrays.asList(new String[]{\"3\"}));\n        plugin.addReportSet(reportSet);\n\n        reportSet = new ReportSet();\n        reportSet.setId(\"report-set-2\");\n        reportSet.setReports(Arrays.asList(new String[]{\"11\", \"12\", \"13\"}));\n        plugin.addReportSet(reportSet);\n\n        merger.mergeReporting(target, source);\n        assertEquals(target.getReporting().getPlugins().get(0).getVersion(), \"1.1\");\n        assertEquals(target.getReporting().getPlugins().get(0).getReportSets().get(0).getReports().get(0), \"3\");\n        assertEquals(target.getReporting().getPlugins().get(0).getReportSets().get(0).getReports().get(1), \"1\");\n        assertEquals(target.getReporting().getPlugins().get(0).getReportSets().get(0).getReports().get(2), \"2\");\n        assertEquals(target.getReporting().getPlugins().get(0).getReportSets().get(1).getReports().get(2), \"13\");\n    }\n}\n"]}
{"filename": "mixin-maven-plugin/src/test/java/com/playtika/maven/plugins/MixinModelMergePluginRepositoriesTest.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.Repository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class MixinModelMergePluginRepositoriesTest {\n\n    private MixinModelMerger merger = new MixinModelMerger();\n\n    private Model mixinSourceModel = new Model();\n    private Repository pluginRepository1, pluginRepository2;\n\n    @BeforeEach", "    public void setUp() {\n        pluginRepository1 = new Repository();\n        pluginRepository1.setId(\"repo-1\");\n        pluginRepository1.setUrl(\"some.non.existent.url\");\n\n        pluginRepository2 = new Repository();\n        pluginRepository2.setId(\"repo-2\");\n        pluginRepository2.setUrl(\"some.non.existent.url.2\");\n    }\n\n    @Test", "    public void testEmptyTarget() {\n        mixinSourceModel.addPluginRepository(pluginRepository1);\n        assertEquals(1, mixinSourceModel.getPluginRepositories().size());\n        assertNotNull(mixinSourceModel.getPluginRepositories().get(0));\n\n        Model target = new Model();\n\n        merger.mergePluginRepositories(target, mixinSourceModel);\n\n        assertEquals(target.getPluginRepositories(), mixinSourceModel.getPluginRepositories());\n    }\n\n    @Test", "    public void testEmptySrc() {\n        assertTrue(mixinSourceModel.getPluginRepositories().isEmpty());\n\n        Model target = new Model();\n        target.addPluginRepository(pluginRepository1);\n\n        merger.mergePluginRepositories(target, mixinSourceModel);\n\n        assertEquals(1, target.getPluginRepositories().size());\n        assertTrue(target.getPluginRepositories().contains(pluginRepository1));\n    }\n\n    @Test", "    public void testNoEffectMerge() {\n        mixinSourceModel.addPluginRepository(pluginRepository1);\n        assertEquals(1, mixinSourceModel.getPluginRepositories().size());\n        assertNotNull(mixinSourceModel.getPluginRepositories().get(0));\n\n        Model target = new Model();\n        Repository repository = new Repository();\n        repository.setId(\"repo-1\");\n        repository.setUrl(\"some.non.existent.url\");\n        target.addPluginRepository(repository);\n\n        merger.mergePluginRepositories(target, mixinSourceModel);\n\n        assertEquals(1, target.getPluginRepositories().size());\n        assertTrue(target.getPluginRepositories().contains(pluginRepository1));\n    }\n\n    @Test", "    public void testActualMerge() {\n        mixinSourceModel.addPluginRepository(pluginRepository1);\n        assertEquals(1, mixinSourceModel.getPluginRepositories().size());\n        assertNotNull(mixinSourceModel.getPluginRepositories().get(0));\n\n        Model target = new Model();\n        target.addPluginRepository(pluginRepository2);\n\n        merger.mergePluginRepositories(target, mixinSourceModel);\n\n        assertEquals(2, target.getPluginRepositories().size());\n        assertTrue(target.getPluginRepositories().contains(pluginRepository1));\n        assertTrue(target.getPluginRepositories().contains(pluginRepository2));\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/test/java/com/playtika/maven/plugins/MixinModelMergeScmTest.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.Scm;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;", "import static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertNull;\n\n/**\n * Created by eyal on 31/05/2015.\n */\npublic class MixinModelMergeScmTest {\n    private MixinModelMerger merger;\n    private Model scm1, emptyScm;\n\n    @BeforeEach", "    public void setup() {\n        merger = new MixinModelMerger();\n        scm1 = new Model();\n        scm1.setScm(new Scm());\n        scm1.getScm().setUrl(\"some.non.existent.url\");\n\n        emptyScm = new Model();\n    }\n\n    @Test\n    public void testEmptyTarget() {\n        Scm origScm = scm1.getScm();\n        assertNotNull(origScm);\n        merger.mergeScm(scm1, emptyScm);\n        assertEquals(origScm, scm1.getScm());\n    }\n\n    @Test", "    public void testEmptyTarget() {\n        Scm origScm = scm1.getScm();\n        assertNotNull(origScm);\n        merger.mergeScm(scm1, emptyScm);\n        assertEquals(origScm, scm1.getScm());\n    }\n\n    @Test\n    public void testEmptySrc() {\n        assertNull(emptyScm.getScm());\n        merger.mergeScm(emptyScm, scm1);\n        assertNotNull(emptyScm.getScm());\n        assertEquals(emptyScm.getScm().getUrl(), scm1.getScm().getUrl());\n        assertNull(emptyScm.getScm().getDeveloperConnection());\n    }\n\n    @Test", "    public void testEmptySrc() {\n        assertNull(emptyScm.getScm());\n        merger.mergeScm(emptyScm, scm1);\n        assertNotNull(emptyScm.getScm());\n        assertEquals(emptyScm.getScm().getUrl(), scm1.getScm().getUrl());\n        assertNull(emptyScm.getScm().getDeveloperConnection());\n    }\n\n    @Test\n    public void testNoEffectMerge() {\n        Model scm2 = new Model();\n        scm2.setScm(new Scm());\n        scm2.getScm().setConnection(\"some.stupid.url\");\n        scm2.getScm().setDeveloperConnection(\"some.other.stupid.url\");\n        merger.mergeScm(scm2, scm1);\n        assertNotNull(scm2.getScm());\n        assertEquals(scm2.getScm().getConnection(), \"some.stupid.url\");\n        assertEquals(scm2.getScm().getDeveloperConnection(), \"some.other.stupid.url\");\n    }\n\n    @Test", "    public void testNoEffectMerge() {\n        Model scm2 = new Model();\n        scm2.setScm(new Scm());\n        scm2.getScm().setConnection(\"some.stupid.url\");\n        scm2.getScm().setDeveloperConnection(\"some.other.stupid.url\");\n        merger.mergeScm(scm2, scm1);\n        assertNotNull(scm2.getScm());\n        assertEquals(scm2.getScm().getConnection(), \"some.stupid.url\");\n        assertEquals(scm2.getScm().getDeveloperConnection(), \"some.other.stupid.url\");\n    }\n\n    @Test", "    public void testActualMerge() {\n        Model scm2 = new Model();\n        scm2.setScm(new Scm());\n        scm2.getScm().setDeveloperConnection(\"some.other.stupid.url\");\n        merger.mergeScm(scm2, scm1);\n        assertNotNull(scm2.getScm());\n        assertEquals(scm2.getScm().getConnection(), scm1.getScm().getConnection());\n        assertEquals(scm2.getScm().getDeveloperConnection(), \"some.other.stupid.url\");\n    }\n}\n"]}
{"filename": "mixin-maven-plugin/src/test/java/com/playtika/maven/plugins/MixinModelMergeRepositoriesTest.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.Repository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;", "import static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n\npublic class MixinModelMergeRepositoriesTest {\n\n    private MixinModelMerger merger = new MixinModelMerger();\n\n    private Model mixinSourceModel = new Model();\n    private Repository repository1, repository2;\n\n    @BeforeEach", "    public void setUp() {\n        repository1 = new Repository();\n        repository1.setId(\"repo-1\");\n        repository1.setUrl(\"some.non.existent.url\");\n\n        repository2 = new Repository();\n        repository2.setId(\"repo-2\");\n        repository2.setUrl(\"some.non.existent.url.2\");\n    }\n\n    @Test", "    public void testEmptyTarget() {\n        mixinSourceModel.addRepository(repository1);\n        assertEquals(1, mixinSourceModel.getRepositories().size());\n        assertNotNull(mixinSourceModel.getRepositories().get(0));\n\n        Model target = new Model();\n\n        merger.mergeRepositories(target, mixinSourceModel);\n\n        assertEquals(target.getRepositories(), mixinSourceModel.getRepositories());\n    }\n\n    @Test", "    public void testEmptySrc() {\n        assertTrue(mixinSourceModel.getRepositories().isEmpty());\n\n        Model target = new Model();\n        target.addRepository(repository1);\n\n        merger.mergeRepositories(target, mixinSourceModel);\n\n        assertEquals(1, target.getRepositories().size());\n        assertTrue(target.getRepositories().contains(repository1));\n    }\n\n    @Test", "    public void testNoEffectMerge() {\n        mixinSourceModel.addRepository(repository1);\n        assertEquals(1, mixinSourceModel.getRepositories().size());\n        assertNotNull(mixinSourceModel.getRepositories().get(0));\n\n        Model target = new Model();\n        Repository repository = new Repository();\n        repository.setId(\"repo-1\");\n        repository.setUrl(\"some.non.existent.url\");\n        target.addRepository(repository);\n\n        merger.mergeRepositories(target, mixinSourceModel);\n\n        assertEquals(1, target.getRepositories().size());\n        assertTrue(target.getRepositories().contains(repository1));\n    }\n\n    @Test", "    public void testActualMerge() {\n        mixinSourceModel.addRepository(repository1);\n        assertEquals(1, mixinSourceModel.getRepositories().size());\n        assertNotNull(mixinSourceModel.getRepositories().get(0));\n\n        Model target = new Model();\n        target.addRepository(repository2);\n\n        merger.mergeRepositories(target, mixinSourceModel);\n\n        assertEquals(2, target.getRepositories().size());\n        assertTrue(target.getRepositories().contains(repository1));\n        assertTrue(target.getRepositories().contains(repository2));\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/MixinModelProblemCollector.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.MavenExecutionException;\nimport org.apache.maven.model.building.ModelProblem;\nimport org.apache.maven.model.building.ModelProblemCollector;\nimport org.apache.maven.model.building.ModelProblemCollectorRequest;\n\nimport java.io.File;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;", "import java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.EnumSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class MixinModelProblemCollector implements ModelProblemCollector {\n    List<ModelProblemCollectorRequest> problems = new ArrayList<>();\n    private Set<ModelProblem.Severity> severities = EnumSet.noneOf(ModelProblem.Severity.class);\n\n    @Override", "    public void add(ModelProblemCollectorRequest req) {\n        problems.add(req);\n        severities.add(req.getSeverity());\n    }\n\n    public void clear() {\n        problems.clear();\n        severities.clear();\n    }\n\n    public void checkErrors(File pom) throws MavenExecutionException {", "    public void checkErrors(File pom) throws MavenExecutionException {\n        if (severities.contains(ModelProblem.Severity.ERROR) || severities.contains(ModelProblem.Severity.FATAL)) {\n            PrintWriter out = new PrintWriter(new StringWriter());\n            for (ModelProblemCollectorRequest request : problems) {\n                out.printf(\"Model Problem: %s%n\", request.getMessage());\n            }\n            throw new MavenExecutionException(out.toString(), pom);\n        }\n\n    }\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/PackageMixinMojo.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.io.xpp3.MavenXpp3Reader;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugins.annotations.LifecyclePhase;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;", "import org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport org.apache.maven.plugins.annotations.ResolutionScope;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.MavenProjectHelper;\nimport org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;", "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Files;\n\n@Mojo(name = \"package-mixin\", defaultPhase = LifecyclePhase.PACKAGE, requiresDependencyResolution = ResolutionScope.COMPILE, threadSafe = true)\npublic class PackageMixinMojo extends AbstractMojo {\n    private final MavenXpp3Reader mavenXpp3reader = new MavenXpp3Reader();\n    @Parameter\n    private MavenProject mavenProject;\n    @Parameter\n    private MavenProjectHelper projectHelper;\n    @Parameter(defaultValue = \"${project.basedir}/mixin.xml\", readonly = true)\n    private File mixinFile;\n\n    @Override", "    public void execute() throws MojoExecutionException, MojoFailureException {\n        if (!mixinFile.exists()) {\n            throw new MojoExecutionException(\"Cannot find file: \" + mixinFile);\n        }\n        try (InputStream is = Files.newInputStream(mixinFile.toPath())) {\n            @SuppressWarnings(\"unused\")\n            Model model = mavenXpp3reader.read(is);\n            mavenProject.getArtifact().setFile(mixinFile);\n        } catch (IOException e) {\n            throw new MojoExecutionException(\"Cannot load file: \" + mixinFile, e);\n        } catch (XmlPullParserException e) {\n            throw new MojoExecutionException(\"Cannot parse file: \" + mixinFile, e);\n        }\n    }\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/DefaultArtifactFetcher.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.ArtifactResolutionException;\nimport org.apache.maven.artifact.resolver.ArtifactResolutionRequest;\nimport org.apache.maven.artifact.resolver.ArtifactResolutionResult;\nimport org.apache.maven.artifact.resolver.ResolutionErrorHandler;\nimport org.apache.maven.artifact.resolver.filter.IncludesArtifactFilter;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.repository.RepositorySystem;", "import org.apache.maven.execution.MavenSession;\nimport org.apache.maven.repository.RepositorySystem;\nimport org.codehaus.plexus.component.annotations.Component;\nimport org.codehaus.plexus.component.annotations.Requirement;\n\nimport java.util.Arrays;\n\n@Component(role = ArtifactFetcher.class, hint = \"DefaultArtifactFetcher\")\npublic class DefaultArtifactFetcher implements ArtifactFetcher {\n    @Requirement\n    private RepositorySystem repositorySystem;\n    @Requirement\n    private ResolutionErrorHandler resolutionErrorHandler;\n\n\n    @Override", "public class DefaultArtifactFetcher implements ArtifactFetcher {\n    @Requirement\n    private RepositorySystem repositorySystem;\n    @Requirement\n    private ResolutionErrorHandler resolutionErrorHandler;\n\n\n    @Override\n    public Artifact createArtifact(String groupId, String artifactId, String type, String classifier, String version) {\n        return repositorySystem.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);\n    }\n\n    @Override", "    public Artifact createArtifact(String groupId, String artifactId, String type, String classifier, String version) {\n        return repositorySystem.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);\n    }\n\n    @Override\n    public void resolve(Artifact artifact, MavenSession session) throws ArtifactResolutionException {\n        ArtifactResolutionRequest request = new ArtifactResolutionRequest();\n        request.setArtifact(artifact);\n        request.setCollectionFilter(new IncludesArtifactFilter(Arrays.asList((new String[]{artifact.getId()}))));\n\n        request.setResolveRoot(true)\n                .setResolveTransitively(true)\n                .setLocalRepository(session.getLocalRepository())\n                .setOffline(session.isOffline())\n                .setForceUpdate(session.getRequest().isUpdateSnapshots());\n\n        request.setServers(session.getRequest().getServers());\n        request.setMirrors(session.getRequest().getMirrors());\n        request.setProxies(session.getRequest().getProxies());\n        request.setRemoteRepositories(session.getCurrentProject().getRemoteArtifactRepositories());\n        request.setLocalRepository(session.getLocalRepository());\n        ArtifactResolutionResult result = repositorySystem.resolve(request);\n        resolutionErrorHandler.throwErrors(request, result);\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/Mixin.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.MavenExecutionException;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Model;\nimport org.apache.maven.project.MavenProject;\n\npublic class Mixin {\n    private String groupId;\n    private String artifactId;\n    private String version;\n    private String type;\n\n    private Boolean mergePluginManagement;\n    private Boolean mergePlugins;\n    private Boolean mergeReporting;\n    private Boolean mergeProperties;\n    private Boolean mergeDistributionManagement;\n    private Boolean mergeScm;\n    private Boolean mergeRepositories;\n    private Boolean mergePluginRepositories;\n    private Boolean recurse;\n    private Boolean activateProfiles;\n    private Mixins mixins;\n\n    private String key;\n", "    public void setMixins(Mixins mixins) {\n        this.mixins = mixins;\n    }\n\n    public void setActivateProfiles(Boolean activateProfiles) {\n        this.activateProfiles = activateProfiles;\n    }\n\n    public String getGroupId() {\n        return groupId;\n    }\n", "    public String getGroupId() {\n        return groupId;\n    }\n\n    public void setGroupId(String groupId) {\n        this.groupId = groupId;\n    }\n\n    public String getArtifactId() {\n        return artifactId;\n    }\n", "    public String getArtifactId() {\n        return artifactId;\n    }\n\n    public void setArtifactId(String artifactId) {\n        this.artifactId = artifactId;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n", "    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public boolean isMergePluginManagement() {\n        return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();\n    }\n", "    public boolean isMergePluginManagement() {\n        return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();\n    }\n\n    public void setMergePluginManagement(Boolean mergePluginManagement) {\n        this.mergePluginManagement = mergePluginManagement;\n    }\n\n    public boolean isMergePlugins() {\n        return mergePlugins != null ? mergePlugins : mixins.isMergePlugins();\n    }\n", "    public boolean isMergePlugins() {\n        return mergePlugins != null ? mergePlugins : mixins.isMergePlugins();\n    }\n\n    public void setMergePlugins(Boolean mergePlugins) {\n        this.mergePlugins = mergePlugins;\n    }\n\n    public boolean isMergeReporting() {\n        return mergeReporting != null ? mergeReporting : mixins.isMergeReporting();\n    }\n", "    public boolean isMergeReporting() {\n        return mergeReporting != null ? mergeReporting : mixins.isMergeReporting();\n    }\n\n    public void setMergeReporting(Boolean mergeReporting) {\n        this.mergeReporting = mergeReporting;\n    }\n\n    public boolean isMergeProperties() {\n        return mergeProperties != null ? mergeProperties : mixins.isMergeProperties();\n    }\n", "    public boolean isMergeProperties() {\n        return mergeProperties != null ? mergeProperties : mixins.isMergeProperties();\n    }\n\n    public void setMergeProperties(Boolean mergeProperties) {\n        this.mergeProperties = mergeProperties;\n    }\n\n    public boolean isMergeDistributionManagement() {\n        return mergeDistributionManagement != null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();\n    }\n", "    public boolean isMergeDistributionManagement() {\n        return mergeDistributionManagement != null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();\n    }\n\n    public boolean isMergeScm() {\n        return mergeScm != null ? mergeScm : mixins.isMergeScm();\n    }\n\n    public void setMergeScm(Boolean mergeScm) {\n        this.mergeScm = mergeScm;\n    }\n\n    private boolean isMergeRepositories() {\n        return mergeRepositories != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n", "    public void setMergeScm(Boolean mergeScm) {\n        this.mergeScm = mergeScm;\n    }\n\n    private boolean isMergeRepositories() {\n        return mergeRepositories != null ? mergeRepositories : mixins.isMergeRepositories();\n    }\n\n    public void setMergeRepositories(Boolean mergeRepositories) {\n        this.mergeRepositories = mergeRepositories;\n    }\n", "    public void setMergeRepositories(Boolean mergeRepositories) {\n        this.mergeRepositories = mergeRepositories;\n    }\n\n    public boolean isMergePluginRepositories() {\n        return mergePluginRepositories != null ? mergePluginRepositories : mixins.isMergePluginRepositories();\n    }\n\n    public void setMergePluginRepositories(Boolean mergePluginRepositories) {\n        this.mergePluginRepositories = mergePluginRepositories;\n    }\n", "    public void setMergePluginRepositories(Boolean mergePluginRepositories) {\n        this.mergePluginRepositories = mergePluginRepositories;\n    }\n\n    public boolean isRecurse() {\n        return recurse != null ? recurse : mixins.isRecurse();\n    }\n\n    public void setRecurse(Boolean recurse) {\n        this.recurse = recurse;\n    }\n", "    public void setRecurse(Boolean recurse) {\n        this.recurse = recurse;\n    }\n\n    public Boolean isActivateProfiles() {\n        return activateProfiles != null ? activateProfiles : mixins.isActivateProfiles();\n    }\n\n    public String getType() {\n        if (type == null) {\n            type = mixins.getDefaultMixinType();\n        }\n        return type;\n    }\n", "    public String getType() {\n        if (type == null) {\n            type = mixins.getDefaultMixinType();\n        }\n        return type;\n    }\n\n    public String getKey() {\n        if (key == null) {\n            key = groupId + \":\" + artifactId + \":\" + getType();\n        }\n        return key;\n    }\n", "        if (key == null) {\n            key = groupId + \":\" + artifactId + \":\" + getType();\n        }\n        return key;\n    }\n\n    public void merge(Model mixinModel, MavenProject mavenProject, MavenSession mavenSession, MixinModelMerger mixinModelMerger) throws MavenExecutionException {\n        if (isMergeProperties()) {\n            mixinModelMerger.mergeProperties(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergePluginManagement()) {\n            mixinModelMerger.mergePluginManagement(mavenProject.getModel(), mixinModel);\n        }", "        if (isMergePluginManagement()) {\n            mixinModelMerger.mergePluginManagement(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergePlugins()) {\n            mixinModelMerger.mergePlugins(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergeReporting()) {\n            mixinModelMerger.mergeReporting(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergeDistributionManagement()) {\n            mixinModelMerger.mergeDistributionManagement(mavenProject.getModel(), mixinModel);\n        }", "        if (isMergeDistributionManagement()) {\n            mixinModelMerger.mergeDistributionManagement(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergeScm()) {\n            mixinModelMerger.mergeScm(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergeRepositories()) {\n            mixinModelMerger.mergeRepositories(mavenProject.getModel(), mixinModel);\n        }\n        if (isMergePluginRepositories()) {\n            mixinModelMerger.mergePluginRepositories(mavenProject.getModel(), mixinModel);\n        }\n    }\n\n    @Override", "        if (isMergePluginRepositories()) {\n            mixinModelMerger.mergePluginRepositories(mavenProject.getModel(), mixinModel);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return getKey();\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/MixinModelMerger.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.model.Build;\nimport org.apache.maven.model.DistributionManagement;\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.Plugin;\nimport org.apache.maven.model.PluginContainer;\nimport org.apache.maven.model.PluginExecution;\nimport org.apache.maven.model.PluginManagement;\nimport org.apache.maven.model.ReportPlugin;", "import org.apache.maven.model.PluginManagement;\nimport org.apache.maven.model.ReportPlugin;\nimport org.apache.maven.model.ReportSet;\nimport org.apache.maven.model.Reporting;\nimport org.apache.maven.model.merge.MavenModelMerger;\nimport org.codehaus.plexus.component.annotations.Component;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\n/**\n * MixinModelMerger\n * Enables pluginManagement and properties import from different pom files. Uses protected methods of MavenModelMerger, and therefore inherits from it\n */\n@Component(role = MixinModelMerger.class)\npublic class MixinModelMerger extends MavenModelMerger {\n\n    public void mergePluginManagement(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();", "public class MixinModelMerger extends MavenModelMerger {\n\n    public void mergePluginManagement(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        if (source.getBuild() != null && source.getBuild().getPluginManagement() != null) {\n            if (target.getBuild() == null) {\n                target.setBuild(new Build());\n            }\n            if (target.getBuild().getPluginManagement() == null) {\n                target.getBuild().setPluginManagement(new PluginManagement());\n            }\n            PluginContainer sourceContainer = source.getBuild().getPluginManagement();\n            PluginContainer targetContainer = target.getBuild().getPluginManagement();\n            mergePluginContainers(targetContainer, sourceContainer, context, true);\n\n        }\n    }\n", "            if (target.getBuild().getPluginManagement() == null) {\n                target.getBuild().setPluginManagement(new PluginManagement());\n            }\n            PluginContainer sourceContainer = source.getBuild().getPluginManagement();\n            PluginContainer targetContainer = target.getBuild().getPluginManagement();\n            mergePluginContainers(targetContainer, sourceContainer, context, true);\n\n        }\n    }\n\n    public void mergeReporting(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();", "    public void mergeReporting(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        if (source.getReporting() != null) {\n            if (target.getReporting() == null) {\n                target.setReporting(new Reporting());\n            }\n            Reporting sourceContainer = source.getReporting();\n            Reporting targetContainer = target.getReporting();\n            if (targetContainer.getOutputDirectory() == null) {\n                targetContainer.setOutputDirectory(sourceContainer.getOutputDirectory());\n            }", "            if (targetContainer.getOutputDirectory() == null) {\n                targetContainer.setOutputDirectory(sourceContainer.getOutputDirectory());\n            }\n            if (targetContainer.getExcludeDefaults() == null) {\n                targetContainer.setExcludeDefaults(sourceContainer.getExcludeDefaults());\n            }\n            for (ReportPlugin sourcePlugin : sourceContainer.getPlugins()) {\n                String key = sourcePlugin.getKey();\n                ReportPlugin targetPlugin = null;\n                for (ReportPlugin targetPluginElement : targetContainer.getPlugins()) {\n                    if (targetPluginElement.getKey() != null && targetPluginElement.getKey().equals(key)) {\n                        targetPlugin = targetPluginElement;\n                        break;\n                    }\n                }", "                for (ReportPlugin targetPluginElement : targetContainer.getPlugins()) {\n                    if (targetPluginElement.getKey() != null && targetPluginElement.getKey().equals(key)) {\n                        targetPlugin = targetPluginElement;\n                        break;\n                    }\n                }\n                if (targetPlugin == null) {\n                    targetContainer.getPlugins().add(sourcePlugin.clone());\n                } else {\n                    for (ReportSet sourceReportSet : sourcePlugin.getReportSets()) {\n                        String executionId = sourceReportSet.getId();\n                        ReportSet targetReportSet = null;", "                    for (ReportSet sourceReportSet : sourcePlugin.getReportSets()) {\n                        String executionId = sourceReportSet.getId();\n                        ReportSet targetReportSet = null;\n                        for (ReportSet targetReportSetIt : targetPlugin.getReportSets()) {\n                            if (targetReportSetIt.getId() != null && targetReportSetIt.getId().equals(executionId)) {\n                                targetReportSet = targetReportSetIt;\n                                break;\n                            }\n                        }\n                        if (targetReportSet == null) {\n                            targetPlugin.addReportSet(sourceReportSet.clone());\n                        } else {\n                            super.mergeReportSet(targetReportSet, sourceReportSet, false, context);\n                        }\n                    }\n                    super.mergeConfigurationContainer(targetPlugin, sourcePlugin, false, context);\n                    super.mergeReportPlugin_GroupId(targetPlugin, sourcePlugin, false, context);\n                    super.mergeReportPlugin_ArtifactId(targetPlugin, sourcePlugin, false, context);\n                    super.mergeReportPlugin_Version(targetPlugin, sourcePlugin, false, context);\n                }\n            }\n        }\n    }\n", "                        if (targetReportSet == null) {\n                            targetPlugin.addReportSet(sourceReportSet.clone());\n                        } else {\n                            super.mergeReportSet(targetReportSet, sourceReportSet, false, context);\n                        }\n                    }\n                    super.mergeConfigurationContainer(targetPlugin, sourcePlugin, false, context);\n                    super.mergeReportPlugin_GroupId(targetPlugin, sourcePlugin, false, context);\n                    super.mergeReportPlugin_ArtifactId(targetPlugin, sourcePlugin, false, context);\n                    super.mergeReportPlugin_Version(targetPlugin, sourcePlugin, false, context);\n                }\n            }\n        }\n    }\n", "    public void applyPluginManagementOnPlugins(Model model) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        mergePluginContainers(model.getBuild(), model.getBuild().getPluginManagement(), context, false);\n    }\n\n    public void mergePlugins(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        if (source.getBuild() != null) {\n            if (target.getBuild() == null) {\n                target.setBuild(new Build());\n            }\n            PluginContainer sourceContainer = source.getBuild();\n            PluginContainer targetContainer = target.getBuild();\n            mergePluginContainers(targetContainer, sourceContainer, context, true);\n        }\n    }\n", "            if (target.getBuild() == null) {\n                target.setBuild(new Build());\n            }\n            PluginContainer sourceContainer = source.getBuild();\n            PluginContainer targetContainer = target.getBuild();\n            mergePluginContainers(targetContainer, sourceContainer, context, true);\n        }\n    }\n\n    public void mergeProperties(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();", "    public void mergeProperties(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        if (source.getProperties() != null) {\n            super.mergeModelBase_Properties(target, source, false, context);\n        }\n    }\n\n    public void mergeDistributionManagement(Model target, Model source) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        if (source.getDistributionManagement() != null) {\n            if (target.getDistributionManagement() == null) {\n                target.setDistributionManagement(new DistributionManagement());\n            }\n            super.mergeDistributionManagement(target.getDistributionManagement(), source.getDistributionManagement(), false, context);\n        }\n    }\n\n    /**\n     * Fully merges pluginContainers with their plugins, their executions and their configuration\n     *\n     * @param targetPlugin\n     * @param sourcePlugin\n     * @param context\n     */\n    private void mergePluginContainers(PluginContainer targetContainer, PluginContainer sourceContainer, Map<Object, Object> context, boolean addTargetPlugin) {\n        List<Plugin> plugins = sourceContainer.getPlugins();", "        if (source.getDistributionManagement() != null) {\n            if (target.getDistributionManagement() == null) {\n                target.setDistributionManagement(new DistributionManagement());\n            }\n            super.mergeDistributionManagement(target.getDistributionManagement(), source.getDistributionManagement(), false, context);\n        }\n    }\n\n    /**\n     * Fully merges pluginContainers with their plugins, their executions and their configuration\n     *\n     * @param targetPlugin\n     * @param sourcePlugin\n     * @param context\n     */\n    private void mergePluginContainers(PluginContainer targetContainer, PluginContainer sourceContainer, Map<Object, Object> context, boolean addTargetPlugin) {\n        List<Plugin> plugins = sourceContainer.getPlugins();", "        for (Plugin sourcePlugin : plugins) {\n            String key = sourcePlugin.getKey();\n            Plugin targetPlugin = null;\n            for (Plugin targetPluginElement : targetContainer.getPlugins()) {\n                if (targetPluginElement.getKey() != null && targetPluginElement.getKey().equals(key)) {\n                    targetPlugin = targetPluginElement;\n                    break;\n                }\n            }\n            if (targetPlugin == null) {\n                if (addTargetPlugin) {\n                    targetContainer.getPlugins().add(sourcePlugin.clone());\n                }\n            } else {", "            if (targetPlugin == null) {\n                if (addTargetPlugin) {\n                    targetContainer.getPlugins().add(sourcePlugin.clone());\n                }\n            } else {\n                for (PluginExecution sourceExecution : sourcePlugin.getExecutions()) {\n                    String executionId = sourceExecution.getId();\n                    PluginExecution targetPluginExecution = null;\n                    for (PluginExecution targetExecution : targetPlugin.getExecutions()) {\n                        if (targetExecution.getId() != null && targetExecution.getId().equals(executionId)) {\n                            targetPluginExecution = targetExecution;\n                            break;\n                        }\n                    }", "                    for (PluginExecution targetExecution : targetPlugin.getExecutions()) {\n                        if (targetExecution.getId() != null && targetExecution.getId().equals(executionId)) {\n                            targetPluginExecution = targetExecution;\n                            break;\n                        }\n                    }\n                    if (targetPluginExecution == null) {\n                        targetPlugin.addExecution(sourceExecution.clone());\n                    } else {\n                        super.mergePluginExecution(targetPluginExecution, sourceExecution, false, context);\n                    }\n                }\n                super.mergeConfigurationContainer(targetPlugin, sourcePlugin, false, context);\n                super.mergePlugin_GroupId(targetPlugin, sourcePlugin, false, context);\n                super.mergePlugin_ArtifactId(targetPlugin, sourcePlugin, false, context);\n                super.mergePlugin_Version(targetPlugin, sourcePlugin, false, context);\n                super.mergePlugin_Extensions(targetPlugin, sourcePlugin, false, context);\n                super.mergePlugin_Dependencies(targetPlugin, sourcePlugin, false, context);\n            }\n        }\n    }\n", "    public void mergeScm(Model targetModel, Model sourceModel) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        super.mergeModel_Scm(targetModel, sourceModel, false, context);\n    }\n\n    public void mergeRepositories(Model targetModel, Model sourceModel) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        super.mergeModelBase_Repositories(targetModel, sourceModel, false, context);\n    }\n\n    public void mergePluginRepositories(Model targetModel, Model sourceModel) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        super.mergeModelBase_PluginRepositories(targetModel, sourceModel, false, context);\n    }\n\n}\n", "    public void mergePluginRepositories(Model targetModel, Model sourceModel) {\n        Map<Object, Object> context = new HashMap<Object, Object>();\n        super.mergeModelBase_PluginRepositories(targetModel, sourceModel, false, context);\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/MixinsProjectLoader.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.MavenExecutionException;\nimport org.apache.maven.artifact.InvalidRepositoryException;\nimport org.apache.maven.artifact.repository.ArtifactRepository;\nimport org.apache.maven.configuration.BeanConfigurationException;\nimport org.apache.maven.configuration.BeanConfigurationRequest;\nimport org.apache.maven.configuration.BeanConfigurator;\nimport org.apache.maven.configuration.DefaultBeanConfigurationRequest;\nimport org.apache.maven.execution.MavenSession;", "import org.apache.maven.configuration.DefaultBeanConfigurationRequest;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Build;\nimport org.apache.maven.model.ConfigurationContainer;\nimport org.apache.maven.model.DeploymentRepository;\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.Plugin;\nimport org.apache.maven.model.PluginContainer;\nimport org.apache.maven.model.PluginExecution;\nimport org.apache.maven.model.Profile;", "import org.apache.maven.model.PluginExecution;\nimport org.apache.maven.model.Profile;\nimport org.apache.maven.model.building.DefaultModelBuildingRequest;\nimport org.apache.maven.model.building.ModelBuildingRequest;\nimport org.apache.maven.model.interpolation.ModelInterpolator;\nimport org.apache.maven.model.plugin.PluginConfigurationExpander;\nimport org.apache.maven.model.plugin.ReportingConverter;\nimport org.apache.maven.model.profile.DefaultProfileActivationContext;\nimport org.apache.maven.model.profile.ProfileInjector;\nimport org.apache.maven.model.profile.ProfileSelector;", "import org.apache.maven.model.profile.ProfileInjector;\nimport org.apache.maven.model.profile.ProfileSelector;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.project.ProjectBuildingRequest;\nimport org.apache.maven.repository.RepositorySystem;\nimport org.codehaus.plexus.logging.Logger;\nimport org.codehaus.plexus.util.xml.Xpp3Dom;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;", "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\n\npublic class MixinsProjectLoader {\n    public static final String PLUGIN_GROUPID = \"com.playtika.maven.plugins\";", "\npublic class MixinsProjectLoader {\n    public static final String PLUGIN_GROUPID = \"com.playtika.maven.plugins\";\n    public static final String PLUGIN_ARTIFACTID = \"mixin-maven-plugin\";\n\n    private MavenSession mavenSession;\n    private MavenProject mavenProject;\n    private ProfileSelector profileSelector;\n    private ProfileInjector profileInjector;\n    private MixinModelMerger mixinModelMerger;\n    private ModelInterpolator modelInterpolator;\n    private PluginConfigurationExpander pluginConfigurationExpander;\n    private BeanConfigurator beanConfigurator;\n    private ReportingConverter reportingConverter;\n    private RepositorySystem repositorySystem;\n\n    private DefaultModelBuildingRequest modelBuildingRequest = new DefaultModelBuildingRequest();\n    private MixinModelCache mixinModelCache;\n    private Logger logger;\n\n    public MixinsProjectLoader(MavenSession mavenSession, MavenProject mavenProject, ModelInterpolator modelInterpolator,\n                               PluginConfigurationExpander pluginConfigurationExpander,\n                               BeanConfigurator beanConfigurator, Logger logger,\n                               MixinModelCache mixinModelCache, ProfileSelector profileSelector, ProfileInjector profileInjector,\n                               MixinModelMerger mixinModelMerger, ReportingConverter reportingConverter, RepositorySystem repositorySystem) {\n        this.mavenSession = mavenSession;\n        this.mavenProject = mavenProject;\n        this.modelInterpolator = modelInterpolator;\n        this.pluginConfigurationExpander = pluginConfigurationExpander;\n        this.beanConfigurator = beanConfigurator;\n        this.logger = logger;\n        this.mixinModelCache = mixinModelCache;\n        this.profileSelector = profileSelector;\n        this.profileInjector = profileInjector;\n        this.mixinModelMerger = mixinModelMerger;\n        this.reportingConverter = reportingConverter;\n        this.repositorySystem = repositorySystem;\n\n        ProjectBuildingRequest projectBuildingRequest = mavenSession.getProjectBuildingRequest();\n        modelBuildingRequest.setActiveProfileIds(projectBuildingRequest.getActiveProfileIds());\n        modelBuildingRequest.setInactiveProfileIds(projectBuildingRequest.getInactiveProfileIds());\n        modelBuildingRequest.setBuildStartTime(projectBuildingRequest.getBuildStartTime());\n    }\n", "    public void mergeMixins() throws MavenExecutionException {\n        List<Mixin> mixinList = new ArrayList<>();\n        Map<String, Mixin> mixinMap = new HashMap<String, Mixin>();\n        fillMixins(mixinList, mixinMap, mavenProject.getModel());\n        MixinModelProblemCollector problems = new MixinModelProblemCollector();\n        ModelBuildingRequest request = new DefaultModelBuildingRequest(modelBuildingRequest);\n        request.setSystemProperties(mavenSession.getSystemProperties());\n        request.setUserProperties(mavenSession.getUserProperties());\n\n        Set<String> mixinProfiles = new HashSet<String>();\n        for (Mixin mixin : mixinList) {\n            logger.debug(String.format(\"Merging mixin: %s into %s\", mixin.getKey(), mavenProject.getFile()));\n            Model mixinModel = mixinModelCache.getModel(mixin, mavenProject);", "        for (Mixin mixin : mixinList) {\n            logger.debug(String.format(\"Merging mixin: %s into %s\", mixin.getKey(), mavenProject.getFile()));\n            Model mixinModel = mixinModelCache.getModel(mixin, mavenProject);\n            if (mixin.isActivateProfiles()) {\n                logger.debug(String.format(\"Activating profiles in mixin: %s into %s\", mixin.getKey(), mavenProject.getFile()));\n                mixinModel = mixinModel.clone();\n                List<Profile> activePomProfiles =\n                        profileSelector.getActiveProfiles(mixinModel.getProfiles(), getProfileActivationContext(), problems);\n                for (Profile profile : activePomProfiles) {\n                    logger.debug(String.format(\"Activating profile %s in mixin: %s into %s\", profile.getId(), mixin.getKey(), mavenProject.getFile()));\n                    profileInjector.injectProfile(mixinModel, profile, modelBuildingRequest, problems);\n                    mixinProfiles.add(profile.getId());\n                }\n            }\n            // https://issues.apache.org/jira/browse/MSITE-484\n            // The merging of reportPlugins is problematice today. The reportingConverter adds reportPlugins to the site configuration, but they are not\n            // merged as plugins, and therefore create issues of mixture between reports.\n            // The workaround for that is to remove all reportPlugins if the user defined reporting section in the original pom. After the mixin will be merged.\n            boolean hasReporting = mavenProject.getModel().getReporting() != null;", "                for (Profile profile : activePomProfiles) {\n                    logger.debug(String.format(\"Activating profile %s in mixin: %s into %s\", profile.getId(), mixin.getKey(), mavenProject.getFile()));\n                    profileInjector.injectProfile(mixinModel, profile, modelBuildingRequest, problems);\n                    mixinProfiles.add(profile.getId());\n                }\n            }\n            // https://issues.apache.org/jira/browse/MSITE-484\n            // The merging of reportPlugins is problematice today. The reportingConverter adds reportPlugins to the site configuration, but they are not\n            // merged as plugins, and therefore create issues of mixture between reports.\n            // The workaround for that is to remove all reportPlugins if the user defined reporting section in the original pom. After the mixin will be merged.\n            boolean hasReporting = mavenProject.getModel().getReporting() != null;", "            if (hasReporting) {\n                removeSitePluginReportPlugins(mavenProject.getModel());\n            }\n            mixin.merge(mixinModel, mavenProject, mavenSession, mixinModelMerger);\n            if (hasReporting) {\n                //Need to convert old style reporting before merging the mixin, so the site plugin will be merged correctly\n                reportingConverter.convertReporting(mavenProject.getModel(), request, problems);\n            }\n        }\n        if (mixinList.size() > 0) {\n            //Apply the pluginManagement section on the plugins section\n            mixinModelMerger.applyPluginManagementOnPlugins(mavenProject.getModel());\n\n            modelInterpolator.interpolateModel(mavenProject.getModel(), mavenProject.getBasedir(), request, problems);\n            pluginConfigurationExpander.expandPluginConfiguration(mavenProject.getModel(), request, problems);", "        if (mixinList.size() > 0) {\n            //Apply the pluginManagement section on the plugins section\n            mixinModelMerger.applyPluginManagementOnPlugins(mavenProject.getModel());\n\n            modelInterpolator.interpolateModel(mavenProject.getModel(), mavenProject.getBasedir(), request, problems);\n            pluginConfigurationExpander.expandPluginConfiguration(mavenProject.getModel(), request, problems);\n            if (mavenProject.getInjectedProfileIds().containsKey(Profile.SOURCE_POM)) {\n                mavenProject.getInjectedProfileIds().get(Profile.SOURCE_POM).addAll(mixinProfiles);\n            } else {\n                mavenProject.getInjectedProfileIds().put(Profile.SOURCE_POM, new ArrayList<String>(mixinProfiles));\n            }\n            problems.checkErrors(mavenProject.getFile());\n\n            setupMaven33DistributionManagement(mavenProject);\n        }\n    }\n\n    private void removeSitePluginReportPlugins(Model model) {\n        cleanSitePluginFromReportPlugins(model.getBuild().getPluginManagement());\n        cleanSitePluginFromReportPlugins(model.getBuild());\n    }\n\n    private Plugin cleanSitePluginFromReportPlugins(PluginContainer pluginContainer) {", "        if (pluginContainer == null) {\n            return null;\n        }\n        Plugin sitePlugin = null;\n        for (Plugin plugin : pluginContainer.getPlugins()) {\n            if (\"maven-site-plugin\".equals(plugin.getArtifactId()) && \"org.apache.maven.plugins\".equals(plugin.getGroupId())) {\n                sitePlugin = plugin;\n                break;\n            }\n        }\n        cleanReportPluginsFromConfiguration(sitePlugin);", "        if (sitePlugin != null) {\n            for (PluginExecution pluginExecution : sitePlugin.getExecutions()) {\n                cleanReportPluginsFromConfiguration(pluginExecution);\n            }\n        }\n        return sitePlugin;\n    }\n\n    void cleanReportPluginsFromConfiguration(ConfigurationContainer configurationContainer) {\n        if (configurationContainer == null) return;\n        if (configurationContainer.getConfiguration() != null) {\n            Xpp3Dom dom = (Xpp3Dom) configurationContainer.getConfiguration();", "        if (configurationContainer == null) return;\n        if (configurationContainer.getConfiguration() != null) {\n            Xpp3Dom dom = (Xpp3Dom) configurationContainer.getConfiguration();\n            for (int i = dom.getChildCount() - 1; i >= 0; i--) {\n                Xpp3Dom child = dom.getChild(i);\n                if (\"reportPlugins\".equals(child.getName())) {\n                    dom.removeChild(i);\n                }\n            }\n        }\n    }\n\n    /**\n     * Maven &gt; 3.3 changed the way distributionManagement is being built. It is now being initialized during the projectbuilder phase,\n     * and therefore if a mixin is adding distributionManagement, we need to setup again\n     */\n    private void setupMaven33DistributionManagement(MavenProject mavenProject) {", "        if (mavenProject.getDistributionManagementArtifactRepository() == null && mavenProject.getDistributionManagement() != null) {\n            if (mavenProject.getDistributionManagement().getSnapshotRepository() != null) {\n                mavenProject.setSnapshotArtifactRepository(createRepo(mavenProject.getDistributionManagement().getSnapshotRepository()));\n            }\n            if (mavenProject.getDistributionManagement().getRepository() != null) {\n                mavenProject.setReleaseArtifactRepository(createRepo(mavenProject.getDistributionManagement().getRepository()));\n            }\n        }\n    }\n\n    private ArtifactRepository createRepo(DeploymentRepository deploymentRepo) {", "        try {\n            ArtifactRepository repo = repositorySystem.buildArtifactRepository(deploymentRepo);\n            repositorySystem.injectProxy(mavenSession.getRepositorySession(), Arrays.asList(repo));\n            repositorySystem.injectAuthentication(mavenSession.getRepositorySession(), Arrays.asList(repo));\n            return repo;\n        } catch (InvalidRepositoryException e) {\n            throw new IllegalStateException(\"Failed to create distribution repository \" + deploymentRepo.getId() + \" for \" + mavenProject.getId(), e);\n        }\n\n    }\n\n    private void fillMixins(List<Mixin> mixinList, Map<String, Mixin> mixinMap, Model model) throws MavenExecutionException {\n        //Merge properties of current Project with mixin for interpolateModel to work correctly\n        model = model.clone();\n        Properties origProperties = model.getProperties() != null ? model.getProperties() : new Properties();\n        origProperties.putAll(mavenProject.getProperties());\n        model.setProperties(origProperties);\n        MixinModelProblemCollector problems = new MixinModelProblemCollector();\n\n        ModelBuildingRequest request = new DefaultModelBuildingRequest(modelBuildingRequest);\n        request.setSystemProperties(mavenSession.getSystemProperties());\n        request.setUserProperties(mavenSession.getUserProperties());\n\n        modelInterpolator.interpolateModel(model, mavenProject.getBasedir(), request, problems);", "        if (model.getBuild() == null) {\n            model.setBuild(new Build());\n        }\n        List<Plugin> plugins = model.getBuild().getPlugins();\n        for (Plugin plugin : plugins) {\n            if (plugin.getGroupId().equals(PLUGIN_GROUPID) && plugin.getArtifactId().equals(PLUGIN_ARTIFACTID)) {\n                Mixins mixins = loadConfiguration(plugin.getConfiguration());\n                //First start with the base level and then add the inherited mixins\n                for (Mixin mixin : mixins.getMixins()) {\n                    if (!mixinMap.containsKey(mixin.getKey())) {\n                        logger.debug(String.format(\"Adding mixin: %s to cache\", mixin.getKey()));\n\n                        mixinModelCache.getModel(mixin, mavenProject);\n                        mixinMap.put(mixin.getKey(), mixin);\n                        mixinList.add(mixin);\n                    }\n                }", "                for (Mixin mixin : mixins.getMixins()) {\n                    if (!mixinMap.containsKey(mixin.getKey())) {\n                        logger.debug(String.format(\"Adding mixin: %s to cache\", mixin.getKey()));\n\n                        mixinModelCache.getModel(mixin, mavenProject);\n                        mixinMap.put(mixin.getKey(), mixin);\n                        mixinList.add(mixin);\n                    }\n                }\n                for (Mixin mixin : mixins.getMixins()) {\n                    if (mixin.isRecurse()) {\n                        Model mixinModel = mixinModelCache.getModel(mixin, mavenProject);\n                        fillMixins(mixinList, mixinMap, mixinModel);\n                    }\n                }\n            }\n        }\n    }\n\n    private DefaultProfileActivationContext getProfileActivationContext() {\n        DefaultProfileActivationContext context = new DefaultProfileActivationContext();\n        List<String> activeProfileIds = new ArrayList<>();\n        List<String> inactiveProfileIds = new ArrayList<>();", "                for (Mixin mixin : mixins.getMixins()) {\n                    if (mixin.isRecurse()) {\n                        Model mixinModel = mixinModelCache.getModel(mixin, mavenProject);\n                        fillMixins(mixinList, mixinMap, mixinModel);\n                    }\n                }\n            }\n        }\n    }\n\n    private DefaultProfileActivationContext getProfileActivationContext() {\n        DefaultProfileActivationContext context = new DefaultProfileActivationContext();\n        List<String> activeProfileIds = new ArrayList<>();\n        List<String> inactiveProfileIds = new ArrayList<>();", "        for (Profile profile : mavenProject.getActiveProfiles()) {\n            activeProfileIds.add(profile.getId());\n        }\n        activeProfileIds.addAll(modelBuildingRequest.getActiveProfileIds());\n        for (Profile profile : mavenProject.getModel().getProfiles()) {\n            if (profile.getActivation() != null && !activeProfileIds.contains(profile.getId())) {\n                inactiveProfileIds.add(profile.getId());\n            }\n        }\n        inactiveProfileIds.addAll(modelBuildingRequest.getInactiveProfileIds());\n        context.setActiveProfileIds(activeProfileIds);\n        context.setInactiveProfileIds(inactiveProfileIds);\n        context.setSystemProperties(mavenSession.getSystemProperties());\n        context.setUserProperties(mavenSession.getUserProperties());\n        context.setProjectDirectory(mavenProject.getBasedir());\n        return context;\n    }\n\n    private Mixins loadConfiguration(Object configuration) throws MavenExecutionException {\n        Mixins mixins = new Mixins();\n        BeanConfigurationRequest request = new DefaultBeanConfigurationRequest();\n        request.setBean(mixins);\n        request.setConfiguration(configuration, \"mixins\");", "        try {\n            beanConfigurator.configureBean(request);\n            return mixins;\n        } catch (BeanConfigurationException e) {\n            throw new MavenExecutionException(\"Cannot load mixins configuration: \" + e.getMessage(), e);\n        }\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/ArtifactFetcher.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.ArtifactResolutionException;\nimport org.apache.maven.execution.MavenSession;\n\npublic interface ArtifactFetcher {\n    public Artifact createArtifact(String groupId, String artifactId, String type, String classifier, String version);\n\n    public void resolve(Artifact artifact, MavenSession mavenSession) throws ArtifactResolutionException;\n}\n", "    public void resolve(Artifact artifact, MavenSession mavenSession) throws ArtifactResolutionException;\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/MixinMavenLifecycleParticipant.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.AbstractMavenLifecycleParticipant;\nimport org.apache.maven.MavenExecutionException;\nimport org.apache.maven.configuration.BeanConfigurator;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.interpolation.ModelInterpolator;\nimport org.apache.maven.model.io.xpp3.MavenXpp3Reader;\nimport org.apache.maven.model.plugin.PluginConfigurationExpander;\nimport org.apache.maven.model.plugin.ReportingConverter;", "import org.apache.maven.model.plugin.PluginConfigurationExpander;\nimport org.apache.maven.model.plugin.ReportingConverter;\nimport org.apache.maven.model.profile.ProfileInjector;\nimport org.apache.maven.model.profile.ProfileSelector;\nimport org.apache.maven.project.MavenProject;\nimport org.apache.maven.repository.RepositorySystem;\nimport org.codehaus.plexus.component.annotations.Component;\nimport org.codehaus.plexus.component.annotations.Requirement;\nimport org.codehaus.plexus.logging.Logger;\n", "import org.codehaus.plexus.logging.Logger;\n\nimport java.util.List;\n\n@Component(role = AbstractMavenLifecycleParticipant.class, hint = \"MixinMavenLifecycleParticipant\")\npublic class MixinMavenLifecycleParticipant extends AbstractMavenLifecycleParticipant {\n\n    private final MavenXpp3Reader mavenXpp3reader = new MavenXpp3Reader();\n\n    @Requirement\n    private MixinModelMerger mixinModelMerger;\n\n    @Requirement\n    private Logger logger;\n\n    @Requirement\n    private BeanConfigurator beanConfigurator;\n\n    @Requirement\n    private ModelInterpolator modelInterpolator;\n\n    @Requirement\n    private PluginConfigurationExpander pluginConfigurationExpander;\n\n    @Requirement\n    private ProfileInjector profileInjector;\n\n    @Requirement\n    private ProfileSelector profileSelector;\n\n    @Requirement\n    private ArtifactFetcher artifactFetcher;\n\n    @Requirement\n    private MixinModelCache mixinModelCache;\n\n    @Requirement\n    private ReportingConverter reportingConverter;\n\n    @Requirement\n    private RepositorySystem repositorySystem;\n\n    @Override", "    public void afterSessionStart(MavenSession session) throws MavenExecutionException {\n    }\n\n    @Override\n    public void afterProjectsRead(MavenSession mavenSession) throws MavenExecutionException {\n        logger.info(String.format(\"%s: Merging Mixins\", MixinsProjectLoader.PLUGIN_ARTIFACTID));\n        mixinModelCache.init(mavenSession, mavenXpp3reader);\n\n        List<MavenProject> projects = mavenSession.getProjects();\n        for (MavenProject module : projects) {\n            MixinsProjectLoader loader = new MixinsProjectLoader(mavenSession, module,\n                    modelInterpolator, pluginConfigurationExpander, beanConfigurator, logger, mixinModelCache, profileSelector, profileInjector, mixinModelMerger, reportingConverter, repositorySystem);\n            loader.mergeMixins();\n        }\n        mavenSession.setProjects(projects);\n        logger.info(String.format(\"%s: Mixins were merged\", MixinsProjectLoader.PLUGIN_ARTIFACTID));\n    }\n\n}", "        for (MavenProject module : projects) {\n            MixinsProjectLoader loader = new MixinsProjectLoader(mavenSession, module,\n                    modelInterpolator, pluginConfigurationExpander, beanConfigurator, logger, mixinModelCache, profileSelector, profileInjector, mixinModelMerger, reportingConverter, repositorySystem);\n            loader.mergeMixins();\n        }\n        mavenSession.setProjects(projects);\n        logger.info(String.format(\"%s: Mixins were merged\", MixinsProjectLoader.PLUGIN_ARTIFACTID));\n    }\n\n}"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/FakeMixinMojo.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugins.annotations.Mojo;\nimport org.apache.maven.plugins.annotations.Parameter;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * This mojo is a fake mojo just for having the mixins configuration available in IDEs such as intelliJ\n *\n * @author odavid\n */\n@Mojo(name = \"fake-mixin-mojo\", threadSafe = true)\npublic class FakeMixinMojo extends AbstractMojo {\n\n    @Parameter\n    private List<Mixin> mixins = new ArrayList<Mixin>();\n\n    @Override", "@Mojo(name = \"fake-mixin-mojo\", threadSafe = true)\npublic class FakeMixinMojo extends AbstractMojo {\n\n    @Parameter\n    private List<Mixin> mixins = new ArrayList<Mixin>();\n\n    @Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        //DO NOTHING...\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/MixinModelCache.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport org.apache.maven.MavenExecutionException;\nimport org.apache.maven.artifact.Artifact;\nimport org.apache.maven.artifact.resolver.ArtifactResolutionException;\nimport org.apache.maven.execution.MavenSession;\nimport org.apache.maven.model.Dependency;\nimport org.apache.maven.model.Model;\nimport org.apache.maven.model.io.xpp3.MavenXpp3Reader;\nimport org.apache.maven.plugin.MojoExecutionException;", "import org.apache.maven.model.io.xpp3.MavenXpp3Reader;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.project.MavenProject;\nimport org.codehaus.plexus.component.annotations.Component;\nimport org.codehaus.plexus.component.annotations.Requirement;\nimport org.codehaus.plexus.logging.Logger;\nimport org.codehaus.plexus.util.StringUtils;\nimport org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n\nimport java.io.File;", "\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component(role = MixinModelCache.class)\npublic class MixinModelCache {\n    private Map<String, Model> cache = new HashMap<>();\n\n    @Requirement\n    private Logger logger;\n\n    @Requirement\n    private ArtifactFetcher artifactFetcher;\n\n    private MavenSession mavenSession;\n\n    private MavenXpp3Reader xpp3Reader;\n", "@Component(role = MixinModelCache.class)\npublic class MixinModelCache {\n    private Map<String, Model> cache = new HashMap<>();\n\n    @Requirement\n    private Logger logger;\n\n    @Requirement\n    private ArtifactFetcher artifactFetcher;\n\n    private MavenSession mavenSession;\n\n    private MavenXpp3Reader xpp3Reader;\n", "    public void init(MavenSession mavenSession, MavenXpp3Reader xpp3Reader) {\n        this.mavenSession = mavenSession;\n        this.xpp3Reader = xpp3Reader;\n    }\n\n    public Model getModel(Mixin mixin, MavenProject mavenProject) throws MavenExecutionException {\n        Model model = cache.get(mixin.getKey());\n        if (model == null) {\n            checkMixinVersion(mixin, mavenProject);\n            File artifactFile = null;\n            for (MavenProject project : mavenSession.getProjects()) {\n                logger.debug(String.format(\"Checking if mixin %s is in within the same reactor\", mixin));", "            for (MavenProject project : mavenSession.getProjects()) {\n                logger.debug(String.format(\"Checking if mixin %s is in within the same reactor\", mixin));\n                if (project.getGroupId().equals(mixin.getGroupId()) && project.getArtifactId().equals(mixin.getArtifactId()) && mixin.getVersion().equals(project.getVersion())) {\n                    File mixinFile = new File(project.getBasedir(), mixin.getType() + \".xml\");\n                    if (mixinFile.exists()) {\n                        artifactFile = mixinFile;\n                    }\n                }\n            }\n            if (artifactFile == null) {\n                Artifact artifact = getArtifact(mixin, mavenProject);", "            if (artifactFile == null) {\n                Artifact artifact = getArtifact(mixin, mavenProject);\n                try {\n                    artifactFile = resolveArtifact(artifact);\n                } catch (MojoExecutionException e) {\n                    throw new MavenExecutionException(String.format(\"Cannot resolve mixin artifact %s\", artifact), e);\n                }\n                if (artifactFile == null || !artifactFile.exists()) {\n                    throw new MavenExecutionException(String.format(\"Cannot resolve mixin artifact %s\", artifact), new NullPointerException());\n                }\n            }", "            try {\n                logger.debug(String.format(\"loading mixin %s locally from %s\", mixin, artifactFile));\n                model = xpp3Reader.read(new FileInputStream(artifactFile));\n                model.setVersion(mixin.getVersion());\n                model.setGroupId(mixin.getGroupId());\n                model.setArtifactId(mixin.getArtifactId());\n\n                cache.put(mixin.getKey(), model);\n            } catch (FileNotFoundException e) {\n                throw new MavenExecutionException(String.format(\"Cannot find mixin file %s for mixin artifact %s \", artifactFile, mixin), e);\n            } catch (IOException e) {\n                throw new MavenExecutionException(String.format(\"Cannot read mixin file %s for mixin artifact %s \", artifactFile, mixin), e);\n            } catch (XmlPullParserException e) {\n                throw new MavenExecutionException(String.format(\"Cannot parse mixin file %s for mixin artifact %s \", artifactFile, mixin), e);\n            }\n\n        }\n        return model;\n    }\n\n    private File resolveArtifact(Artifact artifact) throws MojoExecutionException {", "        try {\n            artifactFetcher.resolve(artifact, mavenSession);\n            return artifact.getFile();\n        } catch (ArtifactResolutionException e) {\n            throw new MojoExecutionException(String.format(\"Error resolving artifact %s\", artifact), e);\n        }\n    }\n\n    private void checkMixinVersion(Mixin mixin, MavenProject currentProject) throws MavenExecutionException {\n        if (StringUtils.isEmpty(mixin.getVersion())) {\n            String groupId = mixin.getGroupId();\n            String artifactId = mixin.getArtifactId();\n            String depConflictId = mixin.getKey();\n            String version = mixin.getVersion();\n            String type = mixin.getType();\n", "        if (StringUtils.isEmpty(mixin.getVersion())) {\n            String groupId = mixin.getGroupId();\n            String artifactId = mixin.getArtifactId();\n            String depConflictId = mixin.getKey();\n            String version = mixin.getVersion();\n            String type = mixin.getType();\n\n            if (StringUtils.isEmpty(version)) {\n                version = null;\n                for (org.apache.maven.artifact.Artifact artifact : currentProject.getArtifacts()) {\n                    if (artifact.getDependencyConflictId().equals(depConflictId)) {\n                        version = artifact.getVersion();\n                        mixin.setVersion(version);\n                        break;\n                    }\n                }", "                for (org.apache.maven.artifact.Artifact artifact : currentProject.getArtifacts()) {\n                    if (artifact.getDependencyConflictId().equals(depConflictId)) {\n                        version = artifact.getVersion();\n                        mixin.setVersion(version);\n                        break;\n                    }\n                }\n                if (version == null) {\n                    for (Dependency dependency : currentProject.getDependencyManagement().getDependencies()) {\n                        if (dependency.getArtifactId().equals(artifactId) && dependency.getGroupId().equals(groupId) && dependency.getType().equals(type)) {\n                            version = dependency.getVersion();\n                            mixin.setVersion(version);\n                            break;\n                        }\n                    }\n                }", "                    for (Dependency dependency : currentProject.getDependencyManagement().getDependencies()) {\n                        if (dependency.getArtifactId().equals(artifactId) && dependency.getGroupId().equals(groupId) && dependency.getType().equals(type)) {\n                            version = dependency.getVersion();\n                            mixin.setVersion(version);\n                            break;\n                        }\n                    }\n                }\n                if (version == null) {\n                    throw new MavenExecutionException(\"Cannot find version for \" + depConflictId, currentProject.getFile());\n                }\n            }\n        }\n    }\n\n    private Artifact getArtifact(Mixin mixin, MavenProject currentProject) throws MavenExecutionException {\n        String groupId = mixin.getGroupId();\n        String artifactId = mixin.getArtifactId();\n        String version = mixin.getVersion();\n        String type = mixin.getType();\n        return artifactFetcher.createArtifact(groupId, artifactId, type, null, version);\n    }\n\n}\n", "                if (version == null) {\n                    throw new MavenExecutionException(\"Cannot find version for \" + depConflictId, currentProject.getFile());\n                }\n            }\n        }\n    }\n\n    private Artifact getArtifact(Mixin mixin, MavenProject currentProject) throws MavenExecutionException {\n        String groupId = mixin.getGroupId();\n        String artifactId = mixin.getArtifactId();\n        String version = mixin.getVersion();\n        String type = mixin.getType();\n        return artifactFetcher.createArtifact(groupId, artifactId, type, null, version);\n    }\n\n}\n"]}
{"filename": "mixin-maven-plugin/src/main/java/com/playtika/maven/plugins/Mixins.java", "chunked_list": ["package com.playtika.maven.plugins;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Mixins {\n    private List<Mixin> mixins = new ArrayList<Mixin>();\n    private boolean mergePlugins = true;\n    private boolean mergePluginManagement = true;\n    private boolean mergeProperties = true;\n    private boolean mergeReporting = true;\n    private boolean mergeDistributionManagement = true;\n    private boolean recurse = true;\n    private boolean activateProfiles = true;\n    private String defaultMixinType = \"pom\";\n    private boolean mergeScm = true;\n    private boolean mergeRepositories = true;\n    private boolean mergePluginRepositories = true;\n", "    public String getDefaultMixinType() {\n        return defaultMixinType;\n    }\n\n    public void setDefaultMixinType(String defaultMixinType) {\n        this.defaultMixinType = defaultMixinType;\n    }\n\n    public void addMixin(Mixin mixin) {\n        mixins.add(mixin);\n        mixin.setMixins(this);\n    }\n\n    public List<Mixin> getMixins() {\n        return mixins;\n    }\n", "    public void addMixin(Mixin mixin) {\n        mixins.add(mixin);\n        mixin.setMixins(this);\n    }\n\n    public List<Mixin> getMixins() {\n        return mixins;\n    }\n\n    public boolean isMergePlugins() {\n        return mergePlugins;\n    }\n", "    public boolean isMergePlugins() {\n        return mergePlugins;\n    }\n\n    public void setMergePlugins(boolean mergePlugins) {\n        this.mergePlugins = mergePlugins;\n    }\n\n    public boolean isMergePluginManagement() {\n        return mergePluginManagement;\n    }\n", "    public boolean isMergePluginManagement() {\n        return mergePluginManagement;\n    }\n\n    public void setMergePluginManagement(boolean mergePluginManagement) {\n        this.mergePluginManagement = mergePluginManagement;\n    }\n\n    public boolean isMergeProperties() {\n        return mergeProperties;\n    }\n", "    public boolean isMergeProperties() {\n        return mergeProperties;\n    }\n\n    public void setMergeProperties(boolean mergeProperties) {\n        this.mergeProperties = mergeProperties;\n    }\n\n    public boolean isMergeDistributionManagement() {\n        return mergeDistributionManagement;\n    }\n", "    public boolean isMergeDistributionManagement() {\n        return mergeDistributionManagement;\n    }\n\n    public void setMergeDistributionManagement(boolean mergeDistributionManagement) {\n        this.mergeDistributionManagement = mergeDistributionManagement;\n    }\n\n    public boolean isRecurse() {\n        return recurse;\n    }\n", "    public boolean isRecurse() {\n        return recurse;\n    }\n\n    public void setRecurse(boolean recurse) {\n        this.recurse = recurse;\n    }\n\n    public boolean isActivateProfiles() {\n        return activateProfiles;\n    }\n", "    public boolean isActivateProfiles() {\n        return activateProfiles;\n    }\n\n    public void setActivateProfiles(boolean activateProfiles) {\n        this.activateProfiles = activateProfiles;\n    }\n\n    public boolean isMergeReporting() {\n        return mergeReporting;\n    }\n", "    public boolean isMergeReporting() {\n        return mergeReporting;\n    }\n\n    public void setMergeReporting(boolean mergeReporting) {\n        this.mergeReporting = mergeReporting;\n    }\n\n\n    public boolean isMergeScm() {\n        return mergeScm;\n    }\n", "    public boolean isMergeScm() {\n        return mergeScm;\n    }\n\n    public void setMergeScm(boolean mergeScm) {\n        this.mergeScm = mergeScm;\n    }\n\n    public boolean isMergeRepositories() {\n        return mergeRepositories;\n    }\n", "    public boolean isMergeRepositories() {\n        return mergeRepositories;\n    }\n\n    public void setMergeRepositories(boolean mergeRepositories) {\n        this.mergeRepositories = mergeRepositories;\n    }\n\n    public boolean isMergePluginRepositories() {\n        return mergePluginRepositories;\n    }\n", "    public boolean isMergePluginRepositories() {\n        return mergePluginRepositories;\n    }\n\n    public void setMergePluginRepositories(boolean mergePluginRepositories) {\n        this.mergePluginRepositories = mergePluginRepositories;\n    }\n\n}\n"]}
{"filename": ".mvn/wrapper/MavenWrapperDownloader.java", "chunked_list": ["/*\n * Copyright 2007-present the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport java.net.*;\nimport java.io.*;\nimport java.nio.channels.*;", "import java.io.*;\nimport java.nio.channels.*;\nimport java.util.Properties;\n\npublic class MavenWrapperDownloader {\n\n    private static final String WRAPPER_VERSION = \"0.5.5\";\n    /**\n     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n     */\n    private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"\n        + WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";\n\n    /**\n     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n     * use instead of the default one.\n     */\n    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n            \".mvn/wrapper/maven-wrapper.properties\";\n\n    /**\n     * Path where the maven-wrapper.jar will be saved to.\n     */\n    private static final String MAVEN_WRAPPER_JAR_PATH =\n            \".mvn/wrapper/maven-wrapper.jar\";\n\n    /**\n     * Name of the property which should be used to override the default download url for the wrapper.\n     */\n    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n", "    public static void main(String args[]) {\n        System.out.println(\"- Downloader started\");\n        File baseDirectory = new File(args[0]);\n        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n\n        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n        // wrapperUrl parameter.\n        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n        String url = DEFAULT_DOWNLOAD_URL;\n        if(mavenWrapperPropertyFile.exists()) {\n            FileInputStream mavenWrapperPropertyFileInputStream = null;", "        if(mavenWrapperPropertyFile.exists()) {\n            FileInputStream mavenWrapperPropertyFileInputStream = null;\n            try {\n                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n                Properties mavenWrapperProperties = new Properties();\n                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n            } catch (IOException e) {\n                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n            } finally {\n                try {", "                try {\n                    if(mavenWrapperPropertyFileInputStream != null) {\n                        mavenWrapperPropertyFileInputStream.close();\n                    }\n                } catch (IOException e) {\n                    // Ignore ...\n                }\n            }\n        }\n        System.out.println(\"- Downloading from: \" + url);\n\n        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);", "        if(!outputFile.getParentFile().exists()) {\n            if(!outputFile.getParentFile().mkdirs()) {\n                System.out.println(\n                        \"- ERROR creating output directory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n            }\n        }\n        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n        try {\n            downloadFileFromURL(url, outputFile);\n            System.out.println(\"Done\");\n            System.exit(0);\n        } catch (Throwable e) {\n            System.out.println(\"- Error downloading\");\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    private static void downloadFileFromURL(String urlString, File destination) throws Exception {", "        if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {\n            String username = System.getenv(\"MVNW_USERNAME\");\n            char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();\n            Authenticator.setDefault(new Authenticator() {\n                @Override\n                protected PasswordAuthentication getPasswordAuthentication() {\n                    return new PasswordAuthentication(username, password);\n                }\n            });\n        }\n        URL website = new URL(urlString);\n        ReadableByteChannel rbc;\n        rbc = Channels.newChannel(website.openStream());\n        FileOutputStream fos = new FileOutputStream(destination);\n        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n        fos.close();\n        rbc.close();\n    }\n\n}\n"]}
