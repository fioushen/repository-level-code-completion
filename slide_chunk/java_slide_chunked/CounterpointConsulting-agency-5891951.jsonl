{"filename": "src/test/java/com/c20g/labs/agency/AgencyApplicationTests.java", "chunked_list": ["package com.c20g.labs.agency;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass AgencyApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/test/java/com/c20g/labs/agency/PromptTests.java", "chunked_list": ["package com.c20g.labs.agency;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\nimport org.springframework.boot.test.context.SpringBootTest;", "import org.junit.jupiter.api.Assertions;\nimport org.springframework.boot.test.context.SpringBootTest;\n\nimport com.c20g.labs.agency.prompt.Example;\nimport com.c20g.labs.agency.prompt.MultiShotPrompt;\nimport com.c20g.labs.agency.prompt.NoShotPrompt;\n\n@SpringBootTest\npublic class PromptTests {\n\t\n\t@Test\n\tvoid buildNoShotTemplate() {\n\t\tString template = \"what do you think about {topic}?\";\n\t\tNoShotPrompt p = new NoShotPrompt(template);\n\t\t\n\t\tMap<String, String> mappings = new HashMap<>();\n\t\tmappings.put(\"topic\", \"love\");\n\t\t\n\t\tString gen = p.generate(mappings);\n\t\tAssertions.assertEquals(\"what do you think about love?\", gen);\n\t}\n\t\n\t@Test\n\tvoid buildMultiShotTemplate() {\n\t\tString template = \"\"\"\n\t\t\t\tYour job is to extract key words from provided text.  For example:\n\n\t\t\t\t{examples}\n\n\t\t\t\tNow you do it, following the examples given.\n\n\t\t\t\tQuery: {text}\n\t\t\t\tResponse:\"\"\";\n\t\t\n\t\tList<Example> examples = new ArrayList<>();\n\t\texamples.add(new Example(\n\t\t\t\"Stripe provides APIs that web developers can use to integrate payment processing into their websites and mobile applications.\", \n\t\t\t\"Stripe, payment processing, APIs, web developers, websites, mobile applications\"));\n\t\texamples.add(new Example(\n\t\t\t\"OpenAI has trained cutting-edge language models that are very good at understanding and generating text. Our API provides access to these models and can be used to solve virtually any task that involves processing language.\", \n\t\t\t\"OpenAI, language models, text processing, API\"));\n\t\t\n\t\tMultiShotPrompt p = new MultiShotPrompt(template, examples);\n\n\t\t// note that stringifying the examples also adds two newlines to the tail of the examples\n\t\tString expected = \"\"\"\n\t\t\t\tYour job is to extract key words from provided text.  For example:\n\n\t\t\t\tQuery: Stripe provides APIs that web developers can use to integrate payment processing into their websites and mobile applications.\n\t\t\t\tResponse: Stripe, payment processing, APIs, web developers, websites, mobile applications\n\n\t\t\t\tQuery: OpenAI has trained cutting-edge language models that are very good at understanding and generating text. Our API provides access to these models and can be used to solve virtually any task that involves processing language.\n\t\t\t\tResponse: OpenAI, language models, text processing, API\n\n\n\n\t\t\t\tNow you do it, following the examples given.\n\n\t\t\t\tQuery: Counterpoint is at the forefront of the Business Digital Transformation and AI Revolution.  Guided by Bill, Kevin, and Steve, Counterpoint has won multiple BPTW awards and has a great set of customers.\n\t\t\t\tResponse:\"\"\";\n\n\t\tMap<String, String> inputMappings = new HashMap<>();\n\t\tinputMappings.put(\"text\", \"Counterpoint is at the forefront of the Business Digital Transformation and AI Revolution.  Guided by Bill, Kevin, and Steve, Counterpoint has won multiple BPTW awards and has a great set of customers.\");\n\n\t\tString gen = p.generate(inputMappings);\n\t\tAssertions.assertEquals(expected, gen);\n\t}\n\n}\n", "public class PromptTests {\n\t\n\t@Test\n\tvoid buildNoShotTemplate() {\n\t\tString template = \"what do you think about {topic}?\";\n\t\tNoShotPrompt p = new NoShotPrompt(template);\n\t\t\n\t\tMap<String, String> mappings = new HashMap<>();\n\t\tmappings.put(\"topic\", \"love\");\n\t\t\n\t\tString gen = p.generate(mappings);\n\t\tAssertions.assertEquals(\"what do you think about love?\", gen);\n\t}\n\t\n\t@Test\n\tvoid buildMultiShotTemplate() {\n\t\tString template = \"\"\"\n\t\t\t\tYour job is to extract key words from provided text.  For example:\n\n\t\t\t\t{examples}\n\n\t\t\t\tNow you do it, following the examples given.\n\n\t\t\t\tQuery: {text}\n\t\t\t\tResponse:\"\"\";\n\t\t\n\t\tList<Example> examples = new ArrayList<>();\n\t\texamples.add(new Example(\n\t\t\t\"Stripe provides APIs that web developers can use to integrate payment processing into their websites and mobile applications.\", \n\t\t\t\"Stripe, payment processing, APIs, web developers, websites, mobile applications\"));\n\t\texamples.add(new Example(\n\t\t\t\"OpenAI has trained cutting-edge language models that are very good at understanding and generating text. Our API provides access to these models and can be used to solve virtually any task that involves processing language.\", \n\t\t\t\"OpenAI, language models, text processing, API\"));\n\t\t\n\t\tMultiShotPrompt p = new MultiShotPrompt(template, examples);\n\n\t\t// note that stringifying the examples also adds two newlines to the tail of the examples\n\t\tString expected = \"\"\"\n\t\t\t\tYour job is to extract key words from provided text.  For example:\n\n\t\t\t\tQuery: Stripe provides APIs that web developers can use to integrate payment processing into their websites and mobile applications.\n\t\t\t\tResponse: Stripe, payment processing, APIs, web developers, websites, mobile applications\n\n\t\t\t\tQuery: OpenAI has trained cutting-edge language models that are very good at understanding and generating text. Our API provides access to these models and can be used to solve virtually any task that involves processing language.\n\t\t\t\tResponse: OpenAI, language models, text processing, API\n\n\n\n\t\t\t\tNow you do it, following the examples given.\n\n\t\t\t\tQuery: Counterpoint is at the forefront of the Business Digital Transformation and AI Revolution.  Guided by Bill, Kevin, and Steve, Counterpoint has won multiple BPTW awards and has a great set of customers.\n\t\t\t\tResponse:\"\"\";\n\n\t\tMap<String, String> inputMappings = new HashMap<>();\n\t\tinputMappings.put(\"text\", \"Counterpoint is at the forefront of the Business Digital Transformation and AI Revolution.  Guided by Bill, Kevin, and Steve, Counterpoint has won multiple BPTW awards and has a great set of customers.\");\n\n\t\tString gen = p.generate(inputMappings);\n\t\tAssertions.assertEquals(expected, gen);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/AgencyApplication.java", "chunked_list": ["package com.c20g.labs.agency;\n\nimport java.util.Scanner;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;", "import org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\nimport com.c20g.labs.agency.agent.planner.PlannerAgent;\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\n\n@SpringBootApplication\npublic class AgencyApplication implements CommandLineRunner {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(AgencyApplication.class);\n\n\t@Autowired\n\tprivate PlannerAgent topLevelPlanner;\n\t", "@SpringBootApplication\npublic class AgencyApplication implements CommandLineRunner {\n\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(AgencyApplication.class);\n\n\t@Autowired\n\tprivate PlannerAgent topLevelPlanner;\n\t\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(AgencyApplication.class, args);\n\t}\n\n\t@Override", "\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(AgencyApplication.class, args);\n\t}\n\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\n\t\tfinal Scanner stringScanner = new Scanner(System.in);\n\t\tConversationHistory topLevelPlannerConversation = new ConversationHistory();\n\n\t\tSystem.out.println(\"Welcome to AgencyGPT!  Please do some stuff.\");\n\n\t\tSystem.out.print(\"AgencyGPT > \");\n\t\tString nextMessage = null;", "\t\twhile((nextMessage = stringScanner.nextLine()) != null) {\n\n\t\t\tif(\"\".equals(nextMessage) || \"exit\".equals(nextMessage.toLowerCase())) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tChatMessage userInputMessage = new ChatMessage(ChatMessageRole.USER.value(), nextMessage);\n\t\t\ttopLevelPlannerConversation.addMessage(userInputMessage);\n\n\t\t\ttopLevelPlanner.run(nextMessage, topLevelPlannerConversation);\n\n\t\t\tSystem.out.print(\"AgencyGPT > \");\n\t\t} \n\t\tstringScanner.close();\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/embeddings/EmbeddingService.java", "chunked_list": ["package com.c20g.labs.agency.embeddings;\n\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.theokanning.openai.embedding.Embedding;", "\nimport com.theokanning.openai.embedding.Embedding;\nimport com.theokanning.openai.embedding.EmbeddingRequest;\nimport com.theokanning.openai.embedding.EmbeddingResult;\nimport com.theokanning.openai.embedding.EmbeddingRequest.EmbeddingRequestBuilder;\nimport com.theokanning.openai.service.OpenAiService;\n\n@Service\npublic class EmbeddingService {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(EmbeddingService.class);\n\n    @Autowired\n    private OpenAiService openAiService;\n\n    @Autowired\n    private EmbeddingRequestBuilder embeddingRequestBuilder;\n    \n    public List<Embedding> getEmbeddings(List<String> input) {\n        LOGGER.debug(\"Getting embedding for \" + input.size() + \" inputs\");\n        EmbeddingRequest request = embeddingRequestBuilder\n            .input(input)\n            .build();\n        EmbeddingResult result = openAiService.createEmbeddings(request);\n        return result.getData();\n    }\n}\n", "public class EmbeddingService {\n    \n    private static final Logger LOGGER = LoggerFactory.getLogger(EmbeddingService.class);\n\n    @Autowired\n    private OpenAiService openAiService;\n\n    @Autowired\n    private EmbeddingRequestBuilder embeddingRequestBuilder;\n    \n    public List<Embedding> getEmbeddings(List<String> input) {\n        LOGGER.debug(\"Getting embedding for \" + input.size() + \" inputs\");\n        EmbeddingRequest request = embeddingRequestBuilder\n            .input(input)\n            .build();\n        EmbeddingResult result = openAiService.createEmbeddings(request);\n        return result.getData();\n    }\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/loader/Loader.java", "chunked_list": ["package com.c20g.labs.agency.loader;\n\npublic interface Loader {\n    // \"ref\" here is some external ID\n    Document loadDocument(String ref) throws Exception;\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/loader/Document.java", "chunked_list": ["package com.c20g.labs.agency.loader;\n\nimport java.util.List;\n\npublic class Document {\n    private String originalText;\n    private List<String> chunks;\n\n    public String getOriginalText() {\n        return originalText;\n    }", "    public String getOriginalText() {\n        return originalText;\n    }\n    public void setOriginalText(String originalText) {\n        this.originalText = originalText;\n    }\n\n    public List<String> getChunks() {\n        return chunks;\n    }\n    public void setChunks(List<String> chunks) {\n        this.chunks = chunks;\n    }\n\n}\n", "    public void setChunks(List<String> chunks) {\n        this.chunks = chunks;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/loader/TextFileLoader.java", "chunked_list": ["package com.c20g.labs.agency.loader;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;", "import org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport com.c20g.labs.agency.config.AgencyConfiguration;\n\n@Component\npublic class TextFileLoader implements Loader {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TextFileLoader.class);\n\n    @Autowired\n    private AgencyConfiguration agencyConfiguration;\n\n    @Override", "    public Document loadDocument(String ref) throws Exception {\n        LOGGER.debug(\"Loading text document from: \" + ref);\n        Document d = new Document();\n        File input = new File(ref);\n        Scanner scanner = new Scanner(input);\n        \n        StringBuilder sb = new StringBuilder();\n        while(scanner.hasNextLine()) {\n            sb.append(scanner.nextLine()).append(\" \");\n        }\n        scanner.close();\n\n        LOGGER.debug(\"Got original text: \" + sb.toString());\n        d.setOriginalText(sb.toString());\n        \n        \n        StringBuilder outputBuilder = new StringBuilder();\n        String[] splitText = d.getOriginalText().split(\"\\\\n\");\n        List<String> chunks = chunkText(outputBuilder, splitText, agencyConfiguration.getTextLoaderChunkSize());\n        d.setChunks(chunks);\n        \n        return d;\n    }\n\n    private List<String> chunkText(StringBuilder builder, String[] parts, Integer chunkSize) {\n\n        List<String> chunksOut = new ArrayList<>();", "        for (int i = 0; i < parts.length; i++) {\n            if(parts[i].length() > chunkSize) {\n                // needs to be split up and re-run\n                List<String> insideSplits = chunkText(builder, parts[i].split(\".\"), chunkSize);\n                chunksOut.addAll(insideSplits);\n            }\n            else {\n                if(builder.length() + parts[i].length() < chunkSize) {\n                    builder.append(parts[i]);\n                }\n                else {\n                    // this is messy, but close enough\n                    chunksOut.add(builder.toString());\n                    builder = new StringBuilder();\n                }\n            }\n        }\n        \n        return chunksOut;\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/chat/ConversationHistory.java", "chunked_list": ["package com.c20g.labs.agency.chat;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.theokanning.openai.completion.chat.ChatMessage;\n\npublic class ConversationHistory {\n\n\tprotected List<ChatMessage> allMessages = new ArrayList<>();\n\n\tpublic List<ChatMessage> getAllMessages() {\n\t\treturn allMessages;\n\t}\n", "\tpublic void addMessage(ChatMessage message) {\n\t\tthis.allMessages.add(message);\n\t}\n\n\tpublic void setAllMessages(List<ChatMessage> messages) {\n\t\tthis.allMessages = messages;\n\t}\n\n\tpublic String formattedFullHistory() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(ChatMessage m : allMessages) {\n\t\t\tsb.append(m.getRole()).append(\" > \").append(m.getContent()).append(\"\\n\\n\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n\t\n}\n", "\tpublic String formattedFullHistory() {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(ChatMessage m : allMessages) {\n\t\t\tsb.append(m.getRole()).append(\" > \").append(m.getContent()).append(\"\\n\\n\");\n\t\t}\n\t\treturn sb.toString();\n\t}\n\t\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/config/MilvusConfiguration.java", "chunked_list": ["package com.c20g.labs.agency.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport io.milvus.client.MilvusServiceClient;\nimport io.milvus.param.ConnectParam;\n\n@Configuration\npublic class MilvusConfiguration {\n\n    @Value(\"${milvus.host}\")\n    private String host;\n    \n    @Value(\"${milvus.port}\")\n    private Integer port;\n\n    @Value(\"${milvus.username}\")\n    private String username;\n\n    @Value(\"${milvus.password}\")\n    private String password;\n\n    @Value(\"${milvus.collection}\")\n    private String collection;\n\n    @Value(\"${milvus.dimensions}\")\n    private Integer dimensions;\n\n    @Value(\"${milvus.timeout_ms}\")\n    private Long timeout;\n\n    @Value(\"${milvus.shards}\")\n    private Integer shards;\n\n    @Value(\"${milvus.delete_on_startup}\")\n    private Boolean deleteOnStartup;\n    \n    @Bean", "\n@Configuration\npublic class MilvusConfiguration {\n\n    @Value(\"${milvus.host}\")\n    private String host;\n    \n    @Value(\"${milvus.port}\")\n    private Integer port;\n\n    @Value(\"${milvus.username}\")\n    private String username;\n\n    @Value(\"${milvus.password}\")\n    private String password;\n\n    @Value(\"${milvus.collection}\")\n    private String collection;\n\n    @Value(\"${milvus.dimensions}\")\n    private Integer dimensions;\n\n    @Value(\"${milvus.timeout_ms}\")\n    private Long timeout;\n\n    @Value(\"${milvus.shards}\")\n    private Integer shards;\n\n    @Value(\"${milvus.delete_on_startup}\")\n    private Boolean deleteOnStartup;\n    \n    @Bean", "    public MilvusServiceClient milvusClient() {\n        MilvusServiceClient milvusClient = null;\n        ConnectParam connectParam = ConnectParam.newBuilder()\n                .withHost(host)\n                .withPort(port)\n                //.withAuthorization(username, password)\n                .build();\n        milvusClient = new MilvusServiceClient(connectParam);\n        return milvusClient;\n    }\n", "    public String getHost() {\n        return host;\n    }\n\n    public void setHost(String host) {\n        this.host = host;\n    }\n\n    public Integer getPort() {\n        return port;\n    }\n", "    public Integer getPort() {\n        return port;\n    }\n\n    public void setPort(Integer port) {\n        this.port = port;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n", "    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n", "    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getCollection() {\n        return collection;\n    }\n", "    public String getCollection() {\n        return collection;\n    }\n\n    public void setCollection(String collection) {\n        this.collection = collection;\n    }\n\n    public Integer getDimensions() {\n        return dimensions;\n    }\n", "    public Integer getDimensions() {\n        return dimensions;\n    }\n\n    public void setDimensions(Integer dimensions) {\n        this.dimensions = dimensions;\n    }\n\n    public Long getTimeout() {\n        return timeout;\n    }\n", "    public Long getTimeout() {\n        return timeout;\n    }\n\n    public void setTimeout(Long timeout) {\n        this.timeout = timeout;\n    }\n\n    public Integer getShards() {\n        return shards;\n    }\n", "    public Integer getShards() {\n        return shards;\n    }\n\n    public void setShards(Integer shards) {\n        this.shards = shards;\n    }\n\n    public Boolean getDeleteOnStartup() {\n        return deleteOnStartup;\n    }\n", "    public Boolean getDeleteOnStartup() {\n        return deleteOnStartup;\n    }\n\n    public void setDeleteOnStartup(Boolean deleteOnStartup) {\n        this.deleteOnStartup = deleteOnStartup;\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/config/AgencyConfiguration.java", "chunked_list": ["package com.c20g.labs.agency.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter", "@Getter\n@Setter\n@Configuration\npublic class AgencyConfiguration {\n\n    @Value(\"${agency.chat_log_dir}\")\n    private String chatLogDirectory;\n\n    @Value(\"${agency.text_loader_chunk_size}\")\n    private Integer textLoaderChunkSize;\n\n    @Value(\"${agency.chat_req_max_tokens}\")\n    private Integer chatRequestMaxTokens;\n\n    @Value(\"${agency.chat_summary_retained_messages_count}\")\n    private Integer chatSummaryRetainedMessageCount;\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/config/OpenAiConfiguration.java", "chunked_list": ["package com.c20g.labs.agency.config;\n\nimport java.time.Duration;\nimport java.util.HashMap;\n\n// import org.slf4j.Logger;\n// import org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;", "import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest.ChatCompletionRequestBuilder;\nimport com.theokanning.openai.embedding.EmbeddingRequest;\nimport com.theokanning.openai.embedding.EmbeddingRequest.EmbeddingRequestBuilder;\nimport com.theokanning.openai.service.OpenAiService;\n\n", "\n\n@Configuration\npublic class OpenAiConfiguration {\n\n    // private static final Logger LOGGER = LoggerFactory.getLogger(OpenAiConfiguration.class);\n    \n    @Value(\"${openai.apikey:#{null}}\")\n    private String openAIApiKey;\n\n    @Value(\"${openai.chat.model}\")\n    private String openAIChatModel;\n\n    @Value(\"${openai.chat.model.temp}\")\n    private Double openAIChatModelTemp;\n\n    @Value(\"${openai.embedding.model}\")\n    private String openAIEmbeddingsModel;\n\n    @Bean", "    public OpenAiService openAiService() throws Exception {\n        if(openAIApiKey == null || \"\".equals(openAIApiKey.trim())) {\n            openAIApiKey = System.getenv(\"OPENAI_API_KEY\");\n        }\n\n        if(openAIApiKey == null || openAIApiKey.trim().length() == 0) {\n            throw new Exception(\"OpenAI API key not set.\");\n        }\n\n        return new OpenAiService(openAIApiKey, (Duration.ZERO).plusMillis(60000));\n    }\n\n    @Bean", "    public ChatCompletionRequestBuilder chatCompletionRequestBuilder() {\n        ChatCompletionRequestBuilder builder = ChatCompletionRequest.builder();\n        builder.model(openAIChatModel);\n        builder.temperature(openAIChatModelTemp);\n        builder.n(1);\n\t\tbuilder.logitBias(new HashMap<>());\n        return builder;\n    }\n\n    @Bean\n    public EmbeddingRequestBuilder embeddingRequestBuilder() {\n        EmbeddingRequestBuilder builder = EmbeddingRequest.builder();\n        builder.model(openAIEmbeddingsModel);\n        return builder;\n    }\n", "    public EmbeddingRequestBuilder embeddingRequestBuilder() {\n        EmbeddingRequestBuilder builder = EmbeddingRequest.builder();\n        builder.model(openAIEmbeddingsModel);\n        return builder;\n    }\n\n    public String chatModel() {\n        return this.openAIChatModel;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/prompt/Example.java", "chunked_list": ["package com.c20g.labs.agency.prompt;\n\npublic class Example {\n\n\tprivate String query;\n\tprivate String response;\n\t\n\tpublic Example(String query, String response) {\n\t\tthis.query = query;\n\t\tthis.response = response;\n\t}\n\t", "\tpublic String toString() {\n\t\treturn \"Query: \" + query + \"\\nResponse: \" + response;\n\t}\n\t\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/prompt/PromptGenerator.java", "chunked_list": ["package com.c20g.labs.agency.prompt;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic abstract class PromptGenerator {\n\t\n\tprotected String template;\n\tprotected List<String> inputs;\n\t", "import java.util.regex.Pattern;\n\npublic abstract class PromptGenerator {\n\t\n\tprotected String template;\n\tprotected List<String> inputs;\n\t\n\tpublic String getTemplate() {\n\t\treturn template;\n\t}\n\tpublic void setTemplate(String template) {\n\t\tthis.template = template;\n\t}\n\n\tpublic List<String> getTemplateInputs() {\n\t\tSet<String> inputSet = new HashSet<>();\n\t\t// TODO: is this too greedy?  like might mess up if there are two inputs on the same line?\n\t\t// check if it returns {firstname} {lastname} or {firstname\\} \\{lastname}, which wouldnt be\n\t\t// in the skills map\n\t\tPattern pattern = Pattern.compile(\"\\\\{.+\\\\}\"); \n\t\tMatcher matcher = pattern.matcher(template);", "\tpublic void setTemplate(String template) {\n\t\tthis.template = template;\n\t}\n\n\tpublic List<String> getTemplateInputs() {\n\t\tSet<String> inputSet = new HashSet<>();\n\t\t// TODO: is this too greedy?  like might mess up if there are two inputs on the same line?\n\t\t// check if it returns {firstname} {lastname} or {firstname\\} \\{lastname}, which wouldnt be\n\t\t// in the skills map\n\t\tPattern pattern = Pattern.compile(\"\\\\{.+\\\\}\"); \n\t\tMatcher matcher = pattern.matcher(template);", "\t\twhile(matcher.find()) {\n\t\t\t// System.out.println(\"Found match: \" + matcher.group());\n\t\t\tinputSet.add(matcher.group());\n\t\t}\n\t\tList<String> result = new ArrayList<>();\n\t\tfor(String s : inputSet) {\n\t\t\tresult.add(s.substring(1, s.length()-1));\n\t\t}\n\t\treturn result;\n\t}\n", "\tpublic abstract String generate(Map<String, String> inputMappings);\n\t\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/prompt/MultiShotPrompt.java", "chunked_list": ["package com.c20g.labs.agency.prompt;\n\nimport java.util.List;\nimport java.util.Map;\n\n// import org.slf4j.*;\n\n\npublic class MultiShotPrompt extends PromptGenerator {\n\n\t// private static final Logger LOGGER = LoggerFactory.getLogger(MultiShotPrompt.class);\n\t\n\tprivate List<Example> examples;\n\t\n\tpublic MultiShotPrompt(String template, List<Example> examples) {\n\t\tthis.template = template;\n\t\tthis.examples = examples;\n\t}\n\n\t@Override", "public class MultiShotPrompt extends PromptGenerator {\n\n\t// private static final Logger LOGGER = LoggerFactory.getLogger(MultiShotPrompt.class);\n\t\n\tprivate List<Example> examples;\n\t\n\tpublic MultiShotPrompt(String template, List<Example> examples) {\n\t\tthis.template = template;\n\t\tthis.examples = examples;\n\t}\n\n\t@Override", "\tpublic String generate(Map<String, String> inputMappings) {\n\n\t\tStringBuilder sbExamples = new StringBuilder();\n\t\tfor(Example e : examples) {\n\t\t\tString examples = e.toString();\n\t\t\tsbExamples.append(examples).append(\"\\n\\n\");\n\t\t}\n\t\tString templateWithExamples = template.replaceAll(\"\\\\{examples\\\\}\", sbExamples.toString());\n\t\t\n\t\tList<String> inputList = getTemplateInputs();\n\t\tfor(String input : inputList) {\n\t\t\ttemplateWithExamples = templateWithExamples.replaceAll(\"\\\\{\"+input+\"\\\\}\", inputMappings.get(input));\n\t\t}\n\n\t\treturn templateWithExamples;\n\t}\n\n}\n", "\t\tfor(String input : inputList) {\n\t\t\ttemplateWithExamples = templateWithExamples.replaceAll(\"\\\\{\"+input+\"\\\\}\", inputMappings.get(input));\n\t\t}\n\n\t\treturn templateWithExamples;\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/prompt/NoShotPrompt.java", "chunked_list": ["package com.c20g.labs.agency.prompt;\n\nimport java.util.Map;\n\npublic class NoShotPrompt extends PromptGenerator {\n\t\n\tpublic NoShotPrompt(String template) {\n\t\tthis.template = template;\n\t}\n\t\n\t@Override", "\tpublic String generate(Map<String, String> inputMappings) {\n\t\tString finalPrompt = template;\n\t\tfor(String input : getTemplateInputs()) {\n\t\t\tfinalPrompt = finalPrompt.replaceAll(\"\\\\{\"+input+\"\\\\}\", inputMappings.get(input));\n\t\t}\n\t\treturn finalPrompt;\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/Skill.java", "chunked_list": ["package com.c20g.labs.agency.skill;\n\npublic interface Skill {\n    String execute(String jsonRequest) throws Exception;\n    SkillDescription describe() throws Exception;\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/SkillLocator.java", "chunked_list": ["package com.c20g.labs.agency.skill;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;", "import org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Service;\n\n\n@Service\npublic class SkillLocator {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SkillLocator.class);\n    \n    @Autowired\n    private ApplicationContext applicationContext;\n\n    private Map<String,Object> beans;\n\n    // gets a single Skill", "    public Skill locate(String name) throws Exception {\n        return locate(Arrays.asList(name)).get(name);\n    }\n\n    // gets a subset of all the registered SkillServices, useful when you\n    // want to save prompt tokens and don't need all the skills at the\n    // agent's disposal\n    public Map<String, Skill> locate(List<String> skills) throws Exception {\n\n        if(beans == null) {\n            beans = applicationContext.getBeansWithAnnotation(SkillService.class);", "        if(beans == null) {\n            beans = applicationContext.getBeansWithAnnotation(SkillService.class);\n            if(beans == null || beans.size() == 0) {\n                throw new Exception(\"Not able to locate skill classes\");\n            }\n        }\n\n        Map<String, Skill> returnVal = new HashMap<>();\n        Skill currentSkill = null;\n        for(String skillType : skills) {\n            for(String skillBeanKey : beans.keySet()) {\n                currentSkill = (Skill)beans.get(skillBeanKey);\n                SkillDescription description = currentSkill.describe();", "        for(String skillType : skills) {\n            for(String skillBeanKey : beans.keySet()) {\n                currentSkill = (Skill)beans.get(skillBeanKey);\n                SkillDescription description = currentSkill.describe();\n                if(description.getName().equals(skillType)) {\n                    LOGGER.debug(\"Found skill '\" + skillType + \"', adding to return map\");\n                    returnVal.put(skillType, currentSkill);\n                    break;\n                }  \n            }\n            if(currentSkill == null) {\n                throw new Exception(\"Unknown skill '\" + skillType + \"'\");    \n            }\n        }\n        StringBuffer logMessage = new StringBuffer();\n        logMessage.append(\"Returning \" + returnVal.keySet().size() + \" skills\");\n        return returnVal;\n    }\n\n\n\n}\n", "            if(currentSkill == null) {\n                throw new Exception(\"Unknown skill '\" + skillType + \"'\");    \n            }\n        }\n        StringBuffer logMessage = new StringBuffer();\n        logMessage.append(\"Returning \" + returnVal.keySet().size() + \" skills\");\n        return returnVal;\n    }\n\n\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/SkillDescription.java", "chunked_list": ["package com.c20g.labs.agency.skill;\n\npublic class SkillDescription {\n\n    private String name;\n    private String description;\n    private String instructions;\n\n    public SkillDescription(String name, String description, String instructions) {\n        this.name = name;\n        this.description = description;\n        this.instructions = instructions;\n    }\n", "    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n", "    public void setDescription(String description) {\n        this.description = description;\n    }\n\n    public String getInstructions() {\n        return instructions;\n    }\n    public void setInstructions(String instructions) {\n        this.instructions = instructions;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/SkillService.java", "chunked_list": ["package com.c20g.labs.agency.skill;\n\nimport java.lang.annotation.*;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.stereotype.Component;\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Component", "@Retention(RetentionPolicy.RUNTIME)\n@Component\n@ComponentScan(\n    basePackages = {\n      \"com.c20g.labs.agency\"\n    })\npublic @interface SkillService {\n    \n}\n", "}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/SkillRequest.java", "chunked_list": ["package com.c20g.labs.agency.skill;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class SkillRequest {\n    \n    protected String type;\n\n    public String getType() {\n        return type;\n    }\n", "    public String getType() {\n        return type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/calculate/CalculateSkillRequest.java", "chunked_list": ["package com.c20g.labs.agency.skill.calculate;\n\nimport com.c20g.labs.agency.skill.SkillRequest;\n\npublic class CalculateSkillRequest extends SkillRequest {\n    \n    private String expression;\n\n    public String getExpression() {\n        return expression;\n    }\n", "    public String getExpression() {\n        return expression;\n    }\n\n    public void setExpression(String expression) {\n        this.expression = expression;\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/calculate/CalculateSkill.java", "chunked_list": ["package com.c20g.labs.agency.skill.calculate;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\n", "import java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.config.AgencyConfiguration;\nimport com.c20g.labs.agency.prompt.NoShotPrompt;\nimport com.c20g.labs.agency.prompt.PromptGenerator;", "import com.c20g.labs.agency.prompt.NoShotPrompt;\nimport com.c20g.labs.agency.prompt.PromptGenerator;\nimport com.c20g.labs.agency.skill.Skill;\nimport com.c20g.labs.agency.skill.SkillDescription;\nimport com.c20g.labs.agency.skill.SkillService;\nimport com.c20g.labs.agency.util.ChatUtils;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;", "import com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\n\n@SkillService\npublic class CalculateSkill implements Skill {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(CalculateSkill.class);\n\n    @Autowired\n\tprivate AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n    private ChatUtils chatUtils;\n\n    @Override", "    public String execute(String jsonRequest) throws Exception {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            CalculateSkillRequest q = objectMapper.readValue(jsonRequest, CalculateSkillRequest.class);\n            LOGGER.debug(\"Calculating expression: \" + q.getExpression());\n\n            try {\n                String reqTemplate = \"\"\"\n                    The user needs to solve the following math problem:\n\n                    {expression}\n\n                    Write the Python code to perform the calculation.  You should\n                    return only executable Python code, with no explanation.\n                    \n                    Begin your output with #!/usr/bin/python3\n                    \n                    The calculation should be in a function called calculate, and\n                    the program should call 'calculate' as it's final line.  The\n                    calculate function should not return any value, and it should\n                    print exactly one line, which should be the final answer to\n                    the request.\n                        \"\"\";\n                    \n                ConversationHistory conversation = new ConversationHistory();\n\n                Map<String, String> exprInputMap = new HashMap<>();\n                exprInputMap.put(\"expression\", q.getExpression());\n\n                ChatMessage systemMessage = new ChatMessage(ChatMessageRole.SYSTEM.value(), \"You are a helpful AI agent that helps users calculate numerical results.\");\n                conversation.getAllMessages().add(systemMessage);\n\n                PromptGenerator p = new NoShotPrompt(reqTemplate);\n                ChatMessage userPrompt = new ChatMessage(ChatMessageRole.USER.value(), p.generate(exprInputMap));\n                conversation.getAllMessages().add(userPrompt);\n\n                ChatMessage aiResponseMsg = chatUtils.getNextChatResponse(conversation);\n                System.out.println(\"\\n\" + aiResponseMsg.getContent() + \"\\n\");\n                conversation.getAllMessages().add(aiResponseMsg);\n\n                File tmpPython = File.createTempFile(agencyConfiguration.getChatLogDirectory(), \".agency.calculate.py\");\n                LOGGER.debug(\"Writing python code to \" + tmpPython.getAbsolutePath());\n                PrintWriter writer = new PrintWriter(tmpPython);\n                writer.println(aiResponseMsg.getContent());\n                writer.close();\n                tmpPython.delete();\n                \n                LOGGER.debug(\"Executing python...\");\n                Process proc = new ProcessBuilder(\"python3\", tmpPython.getAbsolutePath()).start();\n                InputStream is = proc.getInputStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                BufferedReader br = new BufferedReader(isr);\n                StringBuilder responseBuilder = new StringBuilder();\n                String line;", "                while((line = br.readLine()) != null) {\n                    responseBuilder.append(line);\n                }\n                br.close();\n                isr.close();\n                is.close();\n                String response = responseBuilder.toString();\n                LOGGER.debug(\"Got output from python: \" + response);\n\n                return response;\n            }\n            catch(Exception e) {\n                LOGGER.error(\"Error getting and executing python code from mathematical expression: \" + q.getExpression(), e);\n                throw e;\n            }\n        }\n        catch(JsonProcessingException e) {\n            LOGGER.error(\"Error parsing JSON: \" + jsonRequest, e);\n        }\n\n        return \"FAIL\";\n    }\n\n    @Override", "    public SkillDescription describe() throws Exception {\n        return new SkillDescription(\n            \"calculate\",\n            \"This will take a mathematical expression and calculate its result.\",\n            \"Do not perform any mathematical calculations yourself.  When you need any calculation performed, this still is the only way for you to get the result.  When you need to use this skill, return as the result of that step the JSON formatted as {\\\"type\\\":\\\"calculate\\\", \\\"expression\\\":\\\"<calculation to perform>\\\"}\"\n        );\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/summarizer/SummarizerSkillRequest.java", "chunked_list": ["package com.c20g.labs.agency.skill.summarizer;\n\nimport com.c20g.labs.agency.skill.SkillRequest;\n\npublic class SummarizerSkillRequest extends SkillRequest {\n    private String inputText;\n\n    public String getInputText() {\n        return inputText;\n    }\n", "    public void setInputText(String inputText) {\n        this.inputText = inputText;\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/summarizer/SummarizerSkill.java", "chunked_list": ["package com.c20g.labs.agency.skill.summarizer;\n\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;", "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.config.AgencyConfiguration;\nimport com.c20g.labs.agency.prompt.NoShotPrompt;\nimport com.c20g.labs.agency.prompt.PromptGenerator;\nimport com.c20g.labs.agency.skill.Skill;\nimport com.c20g.labs.agency.skill.SkillDescription;", "import com.c20g.labs.agency.skill.Skill;\nimport com.c20g.labs.agency.skill.SkillDescription;\nimport com.c20g.labs.agency.skill.SkillService;\nimport com.c20g.labs.agency.util.ChatUtils;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\n\n@SkillService\npublic class SummarizerSkill implements Skill {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SummarizerSkill.class);\n\n    @Autowired\n\tprivate AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n    private ChatUtils chatUtils;\n\n    @Override", "@SkillService\npublic class SummarizerSkill implements Skill {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SummarizerSkill.class);\n\n    @Autowired\n\tprivate AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n    private ChatUtils chatUtils;\n\n    @Override", "    public String execute(String jsonRequest) throws Exception {\n        ObjectMapper objectMapper = new ObjectMapper();\n        SummarizerSkillRequest q = objectMapper.readValue(jsonRequest, SummarizerSkillRequest.class);\n        LOGGER.debug(\"Summarizing text: \" + q.getInputText());\n\n        ConversationHistory conversation = new ConversationHistory();\n\n        ChatMessage systemMessage = new ChatMessage(\n            ChatMessageRole.SYSTEM.value(), \n            \"\"\"\n                You are a helpful AI assistant that summarizes pieces of text into shorter ones.\n                The user will provide text and you will reply with the summary.  Do not include\n                any explanatory text in your response, only the summary itself.\n                    \"\"\");    \n        conversation.addMessage(systemMessage);\n\n        String reqTemplate = \"\"\"\n            Text to summarize:\n            {text}\n                \"\"\";\n        PromptGenerator p = new NoShotPrompt(reqTemplate);\n        Map<String, String> inputs = new HashMap<>();\n        inputs.put(\"text\", q.getInputText());\n\n        ChatMessage inputMessage = new ChatMessage(ChatMessageRole.USER.value(), p.generate(inputs));\n        conversation.addMessage(inputMessage);\n\n        ChatMessage aiResponseMsg = chatUtils.getNextChatResponse(conversation);\n        String aiResponse = aiResponseMsg.getContent();\n\n        return aiResponse;\n    }\n\n    @Override", "    public SkillDescription describe() throws Exception {\n        String instructions = \"\"\"\n            When you need to shorten a piece of text, send a response with valid the JSON formatted as: \n            ```json\n            {\n                \\\"type\\\":\\\"summarize\\\", \n                \\\"inputText\\\":\\\"<text to shorten>\\\"\n            }\n            ```\n                \"\"\";\n        return new SkillDescription(\n            \"summarize\",\n            \"This will take a piece of text and return a summary.\",\n            instructions\n        );\n    } \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/planner/PlannerSkill.java", "chunked_list": ["package com.c20g.labs.agency.skill.planner;\n\nimport com.c20g.labs.agency.skill.Skill;\nimport com.c20g.labs.agency.skill.SkillDescription;\nimport com.c20g.labs.agency.skill.SkillService;\n\n@SkillService\npublic class PlannerSkill implements Skill {\n\n    @Override\n    public String execute(String jsonRequest) throws Exception {\n        // TODO Auto-generated method stub\n        throw new UnsupportedOperationException(\"Unimplemented method 'execute'\");\n    }\n\n    @Override", "    public String execute(String jsonRequest) throws Exception {\n        // TODO Auto-generated method stub\n        throw new UnsupportedOperationException(\"Unimplemented method 'execute'\");\n    }\n\n    @Override\n    public SkillDescription describe() throws Exception {\n        // TODO Auto-generated method stub\n        throw new UnsupportedOperationException(\"Unimplemented method 'describe'\");\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/planner/PlannerSkillRequest.java", "chunked_list": ["package com.c20g.labs.agency.skill.planner;\n\nimport com.c20g.labs.agency.skill.SkillRequest;\n\npublic class PlannerSkillRequest extends SkillRequest {\n    private String requirements;\n\n    public String getRequirements() {\n        return requirements;\n    }\n", "    public void setRequirements(String requirements) {\n        this.requirements = requirements;\n    }\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/python/PythonSkillRequest.java", "chunked_list": ["package com.c20g.labs.agency.skill.python;\n\nimport com.c20g.labs.agency.skill.SkillRequest;\n\npublic class PythonSkillRequest extends SkillRequest {\n    private String description;\n\n    public String getDescription() {\n        return description;\n    }\n", "    public void setDescription(String description) {\n        this.description = description;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/skill/python/PythonSkill.java", "chunked_list": ["package com.c20g.labs.agency.skill.python;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.HashMap;\nimport java.util.Map;\n", "import java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.config.AgencyConfiguration;\nimport com.c20g.labs.agency.prompt.NoShotPrompt;\nimport com.c20g.labs.agency.prompt.PromptGenerator;", "import com.c20g.labs.agency.prompt.NoShotPrompt;\nimport com.c20g.labs.agency.prompt.PromptGenerator;\nimport com.c20g.labs.agency.skill.Skill;\nimport com.c20g.labs.agency.skill.SkillDescription;\nimport com.c20g.labs.agency.skill.SkillService;\nimport com.c20g.labs.agency.util.ChatUtils;\nimport com.fasterxml.jackson.core.JsonParseException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;", "import com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\n\n@SkillService\npublic class PythonSkill implements Skill {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PythonSkill.class);\n\n    @Autowired\n\tprivate AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n    private ChatUtils chatUtils;\n\n    @Override", "    public String execute(String jsonRequest) throws Exception {\n        try {\n            ObjectMapper objectMapper = new ObjectMapper();\n            PythonSkillRequest q = objectMapper.readValue(jsonRequest, PythonSkillRequest.class);\n            LOGGER.debug(\"Executing python for : \" + q.getDescription());\n\n            try {\n\n                String reqTemplate = \"\"\"\n                    The user needs Python code that fits the following description:\n\n                    {description}\n\n                    Write the Python code to perform the calculation.  You should\n                    return only executable Python code, with no explanation.\n                    \n                    Begin your output with '#!/usr/bin/python3'\n\n                    Your code to solve the problem should be in a function called\n                    'execute', and the program should call 'execute' as its final line.\n                    The execute function should not return any value, and it\n                    should only print one line with the final result to answer\n                    the request.\n                        \"\"\";\n\n                ConversationHistory conversation = new ConversationHistory();\n\n                Map<String, String> inputMap = new HashMap<>();\n                inputMap.put(\"description\", q.getDescription());\n\n                ChatMessage systemMessage = new ChatMessage(ChatMessageRole.SYSTEM.value(), \"\"\"\n                    You are a helpful AI agent that solves problems by writing Python\n                    code for the user to execute.\n                        \"\"\");\n\n                conversation.addMessage(systemMessage);\n\n                PromptGenerator p = new NoShotPrompt(reqTemplate);\n                ChatMessage userPrompt = new ChatMessage(ChatMessageRole.USER.value(), p.generate(inputMap));\n                conversation.addMessage(userPrompt);\n\n                ChatMessage aiResponseMsg = chatUtils.getNextChatResponse(conversation);\n                System.out.println(\"\\n\" + aiResponseMsg.getContent() + \"\\n\");\n                conversation.addMessage(aiResponseMsg);\n\n                return aiResponseMsg.getContent();\n            }\n            catch(Exception e) {\n                LOGGER.error(\"Error getting python code for description: \" + q.getDescription(), e);\n                throw e;\n            }\n        }\n        catch(JsonParseException jpe) {\n            LOGGER.error(\"Error parsing JSON: \" + jsonRequest, jpe);\n        }\n\n        return \"FAIL\";\n    }\n\n    @Override", "    public SkillDescription describe() throws Exception {\n        return new SkillDescription(\n            \"python\",\n            \"This will execute arbitrary Python code.\",\n            \"Executes arbitrary logic or calculations.  When you need to use this skill, return as the result of that step the JSON formatted as {\\\"type\\\":\\\"python\\\", \\\"description\\\" : \\\"<Description of the Python code to generate>\\\"}\"\n        );\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/util/ChatUtils.java", "chunked_list": ["package com.c20g.labs.agency.util;\n\nimport java.util.Scanner;\n\nimport org.json.simple.JSONValue;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport com.c20g.labs.agency.agent.summarizer.SummarizerAgent;\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.config.AgencyConfiguration;\nimport com.c20g.labs.agency.config.OpenAiConfiguration;\nimport com.knuddels.jtokkit.Encodings;\nimport com.knuddels.jtokkit.api.Encoding;\nimport com.knuddels.jtokkit.api.EncodingRegistry;\nimport com.theokanning.openai.Usage;", "import com.knuddels.jtokkit.api.EncodingRegistry;\nimport com.theokanning.openai.Usage;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatCompletionResult;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest.ChatCompletionRequestBuilder;\nimport com.theokanning.openai.service.OpenAiService;\n\n@Component\npublic class ChatUtils {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ChatUtils.class);\n\n    @Autowired\n\tprivate AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n\tprivate OpenAiService openAiService;\n\n    @Autowired\n    private OpenAiConfiguration openAiConfiguration;\n\n    @Autowired\n\tprivate ChatCompletionRequestBuilder requestBuilder;\n\n    @Autowired\n    private SummarizerAgent summarizerAgent;\n", "\n@Component\npublic class ChatUtils {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(ChatUtils.class);\n\n    @Autowired\n\tprivate AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n\tprivate OpenAiService openAiService;\n\n    @Autowired\n    private OpenAiConfiguration openAiConfiguration;\n\n    @Autowired\n\tprivate ChatCompletionRequestBuilder requestBuilder;\n\n    @Autowired\n    private SummarizerAgent summarizerAgent;\n", "    public String getNextLine(Scanner stringScanner) {\n\t\tSystem.out.print(\"> \");\n\t\tString input = stringScanner.nextLine();\n\t\treturn input;\n\t}\n\n    public String getNextLine(Scanner stringScanner, String prompt) {\n\t\tSystem.out.print(prompt + \" > \");\n\t\tString input = stringScanner.nextLine();\n\t\treturn input;\n\t}\n", "    public ChatMessage getNextChatResponse(ConversationHistory conversation) {\n\n        Integer tokenCount = getTokenCount(\n            Encodings.newDefaultEncodingRegistry(), \n            openAiConfiguration.chatModel(), \n            conversation);\n        LOGGER.debug(\"JTokkit counted \" + tokenCount + \" tokens in the request\");\n\n        ChatCompletionRequest chatCompletionRequest = requestBuilder\n                    .messages(conversation.getAllMessages())\n                    .maxTokens(agencyConfiguration.getChatRequestMaxTokens())\n                    .build();\n        ChatCompletionResult chatCompletion = openAiService.createChatCompletion(chatCompletionRequest);\n\n        String aiResponse = chatCompletion.getChoices().get(0).getMessage().getContent();\n        System.out.println(\"\\n\"+aiResponse+\"\\n\");\n\n        Usage usage = chatCompletion.getUsage();\n        LOGGER.debug(\"Tokens: (\" + usage.getPromptTokens() + \" / \" + usage.getCompletionTokens() + \")\");\n        return new ChatMessage(ChatMessageRole.ASSISTANT.value(), aiResponse);\n    }\n\n    private Integer getTokenCount(EncodingRegistry registry, String model, ConversationHistory conversation) {\n        Encoding encoding = registry.getEncodingForModel(model).orElseThrow();\n        int tokensPerMessage;", "        if (model.startsWith(\"gpt-4\")) {\n            tokensPerMessage = 3;\n        } else if (model.startsWith(\"gpt-3.5-turbo\")) {\n            tokensPerMessage = 4; // every message follows <|start|>{role/name}\\n{content}<|end|>\\n\n        } else {\n            throw new IllegalArgumentException(\"Unsupported model: \" + model);\n        }\n        int sum = 0;\n        for (final var message : conversation.getAllMessages()) {\n            sum += tokensPerMessage;\n            sum += encoding.countTokens(message.getContent());\n            sum += encoding.countTokens(message.getRole());\n        }\n\n        sum += 3; // every reply is primed with <|start|>assistant<|message|>\n\n        return sum;\n    }\n\n", "        for (final var message : conversation.getAllMessages()) {\n            sum += tokensPerMessage;\n            sum += encoding.countTokens(message.getContent());\n            sum += encoding.countTokens(message.getRole());\n        }\n\n        sum += 3; // every reply is primed with <|start|>assistant<|message|>\n\n        return sum;\n    }\n\n", "    public static String getLongInput(Scanner stringScanner) {\n        System.out.println(\"Enter text to summarize.  To process, enter \\\\z on the final line.\");\n        StringBuilder sb = new StringBuilder();\n        while(true) {\n            String nextLine = stringScanner.nextLine();\n\n            if(\"\\\\z\".equals(nextLine)) {\n                return sb.toString();\n            }\n            else {\n                sb.append(JSONValue.escape(nextLine));\n            }\n        }\n    }\n\n", "    public ConversationHistory summarizeConversation(ConversationHistory conversation) throws Exception {\n        ConversationHistory historyAgentConversation = \n            summarizerAgent.run(conversation.formattedFullHistory(), null);\n\n        ConversationHistory summarized = new ConversationHistory();\n\n        // copy the system message if there is one\n        if(conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {\n            summarized.addMessage(\n                new ChatMessage(ChatMessageRole.SYSTEM.value(), \n                                conversation.getAllMessages().get(0).getContent()));\n        }\n        \n        summarized.addMessage(\n            new ChatMessage(ChatMessageRole.USER.value(), \n                \"Here is a summary of our conversation so far:\\n\\n\" + \n                    historyAgentConversation.getAllMessages().get(\n                        historyAgentConversation.getAllMessages().size()-1)));\n        \n        StringBuilder recentMessagesSB = new StringBuilder(\"Here are our most recent messages: \\n\\n\");\n        ", "        if(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {\n            for(ChatMessage m : getLastMessages(conversation, agencyConfiguration.getChatSummaryRetainedMessageCount())) {\n                recentMessagesSB.append(m.getRole()).append(\" > \" + m.getContent()).append(\"\\n\");\n            }\n\n            summarized.addMessage(\n                new ChatMessage(ChatMessageRole.USER.value(), \n                    recentMessagesSB.toString()));\n        }\n\n        return summarized;\n    }\n", "    public ChatMessage getLastChatMessage(ConversationHistory conversation) {\n        return getLastMessages(conversation, 1)[0];\n    }\n\n    public ChatMessage[] getLastMessages(ConversationHistory conversation, int count) {\n        return conversation.getAllMessages()\n                    .subList(Math.max(conversation.getAllMessages().size() - count, 0), \n                conversation.getAllMessages().size()).toArray(new ChatMessage[0]);\n    }\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/util/LogUtils.java", "chunked_list": ["package com.c20g.labs.agency.util;\n\nimport java.io.PrintWriter;\n\nimport org.springframework.stereotype.Component;\n\nimport com.theokanning.openai.completion.chat.ChatMessage;\n\n@Component\npublic class LogUtils {\n    public void logMessage(PrintWriter writer, ChatMessage msg) {\n\t\twriter.println(msg.getRole() + \" > \" + msg.getContent());\n\t\twriter.println(\"\");\n\t\twriter.flush();\n\t}\n}\n", "@Component\npublic class LogUtils {\n    public void logMessage(PrintWriter writer, ChatMessage msg) {\n\t\twriter.println(msg.getRole() + \" > \" + msg.getContent());\n\t\twriter.println(\"\");\n\t\twriter.flush();\n\t}\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/milvus/MilvusService.java", "chunked_list": ["package com.c20g.labs.agency.milvus;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;", "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.c20g.labs.agency.config.MilvusConfiguration;\n\nimport io.milvus.client.MilvusClient;\nimport io.milvus.grpc.DataType;\nimport io.milvus.grpc.DescribeCollectionResponse;", "import io.milvus.grpc.DataType;\nimport io.milvus.grpc.DescribeCollectionResponse;\nimport io.milvus.grpc.DescribeIndexResponse;\nimport io.milvus.grpc.MutationResult;\nimport io.milvus.param.IndexType;\nimport io.milvus.param.MetricType;\nimport io.milvus.param.R;\nimport io.milvus.param.RpcStatus;\nimport io.milvus.param.collection.CreateCollectionParam;\nimport io.milvus.param.collection.DescribeCollectionParam;", "import io.milvus.param.collection.CreateCollectionParam;\nimport io.milvus.param.collection.DescribeCollectionParam;\nimport io.milvus.param.collection.DropCollectionParam;\nimport io.milvus.param.collection.FieldType;\nimport io.milvus.param.collection.HasCollectionParam;\nimport io.milvus.param.collection.LoadCollectionParam;\nimport io.milvus.param.dml.InsertParam;\nimport io.milvus.param.dml.InsertParam.Field;\nimport io.milvus.param.index.CreateIndexParam;\nimport io.milvus.param.index.DescribeIndexParam;", "import io.milvus.param.index.CreateIndexParam;\nimport io.milvus.param.index.DescribeIndexParam;\nimport io.milvus.response.DescCollResponseWrapper;\nimport io.milvus.response.DescIndexResponseWrapper;\n\n@Service\npublic class MilvusService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MilvusService.class);\n\n    @Autowired\n    private MilvusClient milvusClient;\n\n    @Autowired\n    private MilvusConfiguration milvusConfiguration;\n\n    private void createCollection() throws Exception {\n        FieldType fieldType1 = FieldType.newBuilder()\n            .withName(\"id\")\n            .withDescription(\"chunk identifier\")\n            .withDataType(DataType.Int64)\n            .withPrimaryKey(true)\n            .withAutoID(false)\n            .build();\n        \n        FieldType fieldType2 = FieldType.newBuilder()\n            .withName(\"parent_id\")\n            .withDescription(\"parent of chunk (complete document)\")\n            .withDataType(DataType.Int64)\n            .build();\n\n        FieldType fieldType3 = FieldType.newBuilder()\n            .withName(\"external_id\")\n            .withDescription(\"reference to source of vector data (eg. CMS identifier)\")\n            .withDataType(DataType.VarChar)\n            .withMaxLength(255)\n            .build();\n\n        FieldType fieldType4 = FieldType.newBuilder()\n            .withName(\"embeddings\")\n            .withDescription(\"the vector of floaty mcfloatfaces\")\n            .withDataType(DataType.FloatVector)\n            .withDimension(milvusConfiguration.getDimensions())\n            .build();\n        \n        CreateCollectionParam createCollectionReq = CreateCollectionParam.newBuilder()\n            .withCollectionName(milvusConfiguration.getCollection())\n            .withDescription(\"doc search embeddings\")\n            .withShardsNum(milvusConfiguration.getShards())\n            .addFieldType(fieldType1)\n            .addFieldType(fieldType2)\n            .addFieldType(fieldType3)\n            .addFieldType(fieldType4)\n            .build();\n", "        try {\n            R<RpcStatus> response = milvusClient.withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                .createCollection(createCollectionReq);\n\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Create collection response: \" + response.getData().getMsg());\n            }\n            else {\n                LOGGER.error(\"Error creating collection: \" + response.getData().getMsg());\n                if(response.getException() != null) {\n                    throw new Exception(\"Error creating embeddings collection\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error creating embeddings collection\");\n                }\n            }\n            createIndex();\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error creating embeddings collection\", e);\n        }\n    }\n\n    private boolean hasCollection() throws Exception {\n", "                if(response.getException() != null) {\n                    throw new Exception(\"Error creating embeddings collection\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error creating embeddings collection\");\n                }\n            }\n            createIndex();\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error creating embeddings collection\", e);\n        }\n    }\n\n    private boolean hasCollection() throws Exception {\n", "        try {\n            R<Boolean> response = milvusClient.hasCollection(HasCollectionParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .build());\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                return response.getData().booleanValue();\n            }\n            else {\n                LOGGER.error(\"Error checking if collection exists: \" + response.getMessage());\n                if(response.getException() != null) {\n                    throw new Exception(\"Error checking if collection exists\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error checking if collection exists\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error checking if collection exists\", e);\n        }\n    }\n", "                if(response.getException() != null) {\n                    throw new Exception(\"Error checking if collection exists\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error checking if collection exists\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error checking if collection exists\", e);\n        }\n    }\n", "    public void loadCollection() throws Exception {\n        try {\n            boolean hasCollection = hasCollection();\n            if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {\n                milvusClient.dropCollection(DropCollectionParam.newBuilder()\n                    .withCollectionName(milvusConfiguration.getCollection())\n                    .build());\n                createCollection();\n            }\n\n            if(!hasCollection) {\n                createCollection();\n            }\n\n            R<RpcStatus> response = milvusClient.loadCollection(LoadCollectionParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .build());", "            if(!hasCollection) {\n                createCollection();\n            }\n\n            R<RpcStatus> response = milvusClient.loadCollection(LoadCollectionParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .build());\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Collection loaded: \" + response.getData());\n            }\n            else {\n                LOGGER.error(\"Error loading collection: \" + response.getMessage());", "                if(response.getException() != null) {\n                    throw new Exception(\"Error loading collection\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error loading collection\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error loading collection\", e);\n        }\n    }\n", "    public DescribeCollectionResponse describeCollection() throws Exception {\n        try {\n            R<DescribeCollectionResponse> response = milvusClient.describeCollection(DescribeCollectionParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .build());\n\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                DescCollResponseWrapper wrapper = new DescCollResponseWrapper(response.getData());\n                LOGGER.debug(\"Collection Description\\n\\n\" + wrapper.toString());\n                return response.getData();\n            }\n            else {\n                LOGGER.error(\"Error loading collection: \" + response.getMessage());", "                if(response.getException() != null) {\n                    throw new Exception(\"Error loading collection\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error loading collection\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error getting collection description\", e);\n        }\n    }\n\n    private void createIndex() throws Exception {", "        try {\n            R<RpcStatus> response = milvusClient.createIndex(CreateIndexParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .withFieldName(\"embeddings\")\n                .withIndexName(\"idx_embeddings\")\n                .withIndexType(IndexType.IVF_FLAT)\n                .withMetricType(MetricType.L2)\n                .withExtraParam(\"{\\\"nlist\\\":128}\")\n                .withSyncMode(Boolean.TRUE)\n                .build());\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Index created\");\n            }\n            else {\n                LOGGER.error(\"Error creating index: \" + response.getMessage());", "            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Index created\");\n            }\n            else {\n                LOGGER.error(\"Error creating index: \" + response.getMessage());\n                if(response.getException() != null) {\n                    throw new Exception(\"Error creating index\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error creating index\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error creating index\", e);\n        }\n    }\n", "    public DescribeIndexResponse describeIndex() throws Exception {\n        try {\n            R<DescribeIndexResponse> response = milvusClient.describeIndex(DescribeIndexParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .withIndexName(\"idx_embeddings\")\n                .build());\n            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                DescIndexResponseWrapper wrapper = new DescIndexResponseWrapper(response.getData());\n                LOGGER.debug(\"Index Description\\n\\n\" + wrapper.toString());\n                return response.getData();\n            }\n            else {\n                LOGGER.error(\"Error getting index: \" + response.getMessage());", "                if(response.getException() != null) {\n                    throw new Exception(\"Error getting index\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error getting index\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error getting index\", e);\n        }\n    }\n", "    public MutationResult insert(Long parentId, String externalId, List<Double> embedding) throws Exception {\n        try {\n            List<Field> fields = new ArrayList<>();\n\n            List<Float> floatEmbedding = new ArrayList<>();\n            for(Double d : embedding) {\n                floatEmbedding.add(d.floatValue());\n            }\n            \n            fields.add(new Field(\"id\", Arrays.asList((new Random()).nextLong())));\n            fields.add(new Field(\"parent_id\", Arrays.asList(parentId)));\n            fields.add(new Field(\"external_id\", Arrays.asList(externalId)));\n            fields.add(new Field(\"embeddings\", Arrays.asList(floatEmbedding))); \n\n            R<MutationResult> response = milvusClient.insert(InsertParam.newBuilder()\n                .withCollectionName(milvusConfiguration.getCollection())\n                .withFields(fields)\n                .build());", "            if(response.getStatus().equals(R.Status.Success.getCode())) {\n                LOGGER.debug(\"Insert successful: \" + response.getData().getIDs());\n                return response.getData();\n            }\n            else {\n                LOGGER.error(\"Error inserting data: \" + response.getMessage());\n                if(response.getException() != null) {\n                    throw new Exception(\"Error inserting data\", response.getException());\n                }\n                else {\n                    throw new Exception(\"Error inserting data\");\n                }\n            }\n        }\n        catch(Exception e) {\n            throw new Exception(\"Error inserting data\", e);\n        }\n    }\n\n\n\n\n", "    public MilvusConfiguration getConfiguration() {\n        return this.milvusConfiguration;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/agent/Agent.java", "chunked_list": ["package com.c20g.labs.agency.agent;\n\nimport com.c20g.labs.agency.chat.ConversationHistory;\n\npublic interface Agent {\n    ConversationHistory run(String input, ConversationHistory parentConversation) throws Exception;\n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/agent/summarizer/SummarizerAgent.java", "chunked_list": ["package com.c20g.labs.agency.agent.summarizer;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.c20g.labs.agency.agent.Agent;\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.skill.summarizer.SummarizerSkill;", "import com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.skill.summarizer.SummarizerSkill;\nimport com.c20g.labs.agency.skill.summarizer.SummarizerSkillRequest;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\n\n@Service\npublic class SummarizerAgent implements Agent {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SummarizerAgent.class);\n\n    @Autowired\n    private SummarizerSkill summarizerSkill;\n\n    @Override", "public class SummarizerAgent implements Agent {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(SummarizerAgent.class);\n\n    @Autowired\n    private SummarizerSkill summarizerSkill;\n\n    @Override\n    public ConversationHistory run(String input, ConversationHistory parentConversation) throws Exception {\n        // this gets returned, the \"parentConversation\" passed in is ignored\n        ConversationHistory conversation = new ConversationHistory();\n\n        // normally this would come from a json request, but this makes it callable programmatically\n        // alternatively, you could actually pass a string of json to \"execute\" but that's ugly\n        // the fun part is it's immediately getting turned back into a Request by the skill...\n        SummarizerSkillRequest req = new SummarizerSkillRequest();\n        req.setType(\"summarize\");\n        req.setInputText(input);\n        \n        ObjectMapper objectMapper = new ObjectMapper();\n        String reqString = objectMapper.writeValueAsString(req);\n\n        String summary = summarizerSkill.execute(reqString);\n        conversation.addMessage(new ChatMessage(ChatMessageRole.ASSISTANT.value(), summary));\n        \n        return conversation;\n    }\n    \n}\n", "    public ConversationHistory run(String input, ConversationHistory parentConversation) throws Exception {\n        // this gets returned, the \"parentConversation\" passed in is ignored\n        ConversationHistory conversation = new ConversationHistory();\n\n        // normally this would come from a json request, but this makes it callable programmatically\n        // alternatively, you could actually pass a string of json to \"execute\" but that's ugly\n        // the fun part is it's immediately getting turned back into a Request by the skill...\n        SummarizerSkillRequest req = new SummarizerSkillRequest();\n        req.setType(\"summarize\");\n        req.setInputText(input);\n        \n        ObjectMapper objectMapper = new ObjectMapper();\n        String reqString = objectMapper.writeValueAsString(req);\n\n        String summary = summarizerSkill.execute(reqString);\n        conversation.addMessage(new ChatMessage(ChatMessageRole.ASSISTANT.value(), summary));\n        \n        return conversation;\n    }\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/agent/planner/PlannerAgent.java", "chunked_list": ["package com.c20g.labs.agency.agent.planner;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;", "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.c20g.labs.agency.agent.Agent;\nimport com.c20g.labs.agency.chat.ConversationHistory;\nimport com.c20g.labs.agency.config.AgencyConfiguration;\nimport com.c20g.labs.agency.util.ChatUtils;\nimport com.theokanning.openai.Usage;", "import com.c20g.labs.agency.util.ChatUtils;\nimport com.theokanning.openai.Usage;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest;\nimport com.theokanning.openai.completion.chat.ChatCompletionResult;\nimport com.theokanning.openai.completion.chat.ChatMessage;\nimport com.theokanning.openai.completion.chat.ChatMessageRole;\nimport com.theokanning.openai.completion.chat.ChatCompletionRequest.ChatCompletionRequestBuilder;\nimport com.theokanning.openai.service.OpenAiService;\n\n", "\n\n@Service\npublic class PlannerAgent implements Agent {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(PlannerAgent.class);\n\n    @Autowired\n    private AgencyConfiguration agencyConfiguration;\n\n    @Autowired\n\tprivate OpenAiService openAiService;\n\n    @Autowired\n    private ChatCompletionRequestBuilder requestBuilder;\n\n\n    @Override", "    public ConversationHistory run(String input, ConversationHistory parentConversation) throws Exception {\n        \n\t\tConversationHistory conversation = new ConversationHistory();\n\n\t\tString preludeString = \"\"\"\n\t\t\tYou are an AI agent designed to interact with human users and respond to arbitrary requests \n\t\t\tor conversation.  You are the leader of a team of special agents that provide you with an \n\t\t\tarray of services.  Your task is primarily to develop a plan to respond to the user's requests.  \n\t\t\tThink through the problem step-by-step and generate a plan -- each step should be carried out by \n\t\t\tone agent.  If your plan requires a step that none of your agents can complete, recommend and \n\t\t\tdescribe in detail a new type of agent or operation that would be able to solve the step.\n\n\t\t\tYour team of agents includes:\n\n\t\t\tName: Alice_Internet\n\t\t\tDescription: Can perform network and web operations\n\t\t\tOperations: google_search, wikipedia_search, retrieve_url\n\n\t\t\tName: Bob_Filesystem\n\t\t\tDescription: Can perform filesystem operations, like saving and deleting files or retrieving file content\n\t\t\tOperations: write_file, read_file, delete_file, open_file_with_executable\n\n\t\t\tName: Charlie_Programmer\n\t\t\tDescription: Can perform tasks generally done by human software developer, which can often be used to solve general problems when combined\n\t\t\tOperations: write_python_script, execute_python_script\n\n\t\t\tName: Diana_LLM\n\t\t\tDescription: Can interact with GPT models like GPT-3.5 or GPT-4, for general conversation or problem solving\n\t\t\tOperations: send_message, send_message_with_history\n\n\t\t\tDo not provide any additional text or commentary other than the plan.  Do not answer anything by yourself without consulting your team of agents.  Here's a few example interaction:\n\n\t\t\t=== START EXAMPLE 1 ===\n\t\t\tuser> Should I bring an umbrella with me today when I go outside?\n\t\t\tassistant> \n\t\t\tStep 1: Use InternetBot to perform \"google_search\" to find weather near you\n\t\t\tStep 2: Use LLMBot to perform \"send_message\" and ask whether the current weather retrieved from \"google_search\" requires an umbrella.\n\t\t\tStep 3: Respond to the user with the response from LLMBot.\n\t\t\t=== EXAMPLE END ===\n\n\t\t\t=== START EXAMPLE 2 ===\n\t\t\tuser> Is opening a Subway franchise in New York City a good idea for a business that will be profitable in 5 years?\n\t\t\tassistant> \n\t\t\tStep 1: Use InternetBot to perform \"google_search\" for \"What is the cost of opening a Subway franchise?\"\n\t\t\tStep 2: If the answer is not directly in the search results from Step 1, use InternetBot to perform \"retrieve_url\" to retrieve likely pages from the search results.\n\t\t\tStep 3: Use InternetBot to perform \"google_search\" for \"How many square feet are in the average Subway location?\"\n\t\t\tStep 4: If the answer isn't directly in the search results from Step 3, use InternetBot to perform \"retrieve_url\" to retrieve likely pages from the search results.\n\t\t\tStep 5: Use InternetBot to perform \"google_search\" for \"How expensive is a retail location in lower Manhatten for {{number of square feet}} square feet?\", using the number of square feet returned from Step 3 or Step 4.\n\t\t\tStep 6: If the answer isn't directly in the search results from Step 5, use InternetBot to perform \"retrieve_url\" to retrieve likely pages from the search results.\n\t\t\tStep 7: Use InternetBot to perform \"google_search\" for \"What the average revenue of a Subway location in lower Manhatten?\"\n\t\t\tStep 8: If the answer isn't directly in the search results from Step 7, use InternetBot to perform \"retrieve_url\" to retrieve likely pages from the search results.\n\t\t\tStep 9: Use LLMBot to perform \"send_message\", sending the results of the previous steps in the message, and asking LLMBot whether, given the numbers retrieved whether a Subway franchise in New York City will be profitable in 10 years.\n\t\t\tStep 10: Respond to the user with the response from LLMBot.\n\t\t\t=== EXAMPLE END ===\n\n\t\t\t=== START EXAMPLE 3 ===\n\t\t\tuser> Create a CSV file in the directory \"/tmp/\" called \"state_facts.csv\".  The CSV file should have three columns and be comma-separated.  The columns should be: \n\n\t\t\t{{state_name}}, {{state_abbreviation}}, {{state_population}}\n\n\t\t\tThere should be one row for each state in the USA.\n\t\t\tassistant> \n\t\t\tStep 1: Use InternetBot to perform \"google_search\" for \"What are the 50 states in the USA?\".  That should contain a page that gives the states and their abbreviations.\n\t\t\tStep 2: Use InternetBot to perform \"retrieve_url\" to retrieve likely pages from the search results from Step 1 until you find one that contains the states and abbreviations.\n\t\t\tStep 3: Use InternetBot to perform \"google_search\" for \"US state populations\".  That should contain a page that gives the population per state.\n\t\t\tStep 4: Use InternetBot to perform \"retrieve_url\" to retrieve likely pages from the search results from Step 3 until you find one that contains the state populations.\n\t\t\tStep 5: Use LLMBot to perform \"send_message\", sending the results of the previous steps in the message, and asking LLMBot to assemble the data into a CSV format sorted alphabetically by state abbreviation\n\t\t\tStep 6: Use FilesystemBot to perform \"write_file\", sending the results of Step 5 in the message.\n\t\t\t=== EXAMPLE END ===\n\n\t\t\t\t\"\"\";\n\n\t\tconversation.addMessage(new ChatMessage(ChatMessageRole.SYSTEM.value(), preludeString));\n\t\tconversation.addMessage(new ChatMessage(ChatMessageRole.USER.value(), input));\n\n\t\tChatCompletionRequest chatCompletionRequest = requestBuilder\n\t\t\t.messages(conversation.getAllMessages())\n\t\t\t.build();\n\t\t\t\n\t\tChatCompletionResult chatCompletion = openAiService.createChatCompletion(chatCompletionRequest);\n\t\tUsage usage = chatCompletion.getUsage();\n\t\tLOGGER.debug(\"Used \" + usage.getPromptTokens() + \" tokens for prompt\");\n\t\tLOGGER.debug(\"Used \" + usage.getCompletionTokens() + \" tokens for response\");\n\t\tLOGGER.debug(\"Used \" + usage.getTotalTokens() + \" tokens total\");\n\t\t\n\t\tString aiResponse = chatCompletion.getChoices().get(0).getMessage().getContent();\n\t\tLOGGER.debug(\"Planner Agent Response > \" + aiResponse);\n\n\t\tChatMessage aiResponseMessage = new ChatMessage(ChatMessageRole.ASSISTANT.value(), aiResponse);\n\t\tconversation.addMessage(aiResponseMessage);\n\n\t\treturn conversation;\n\n\t}\n    \n}\n"]}
{"filename": "src/main/java/com/c20g/labs/agency/agent/python/PythonAgent.java", "chunked_list": ["package com.c20g.labs.agency.agent.python;\n\nimport org.springframework.stereotype.Service;\n\nimport com.c20g.labs.agency.agent.Agent;\nimport com.c20g.labs.agency.chat.ConversationHistory;\n\n@Service\npublic class PythonAgent implements Agent {\n\n    @Override", "public class PythonAgent implements Agent {\n\n    @Override\n    public ConversationHistory run(String input, ConversationHistory parentConversation) throws Exception {\n        ConversationHistory conversation = new ConversationHistory();\n        \n        return conversation;\n    }\n    \n}\n"]}
