{"filename": "cities/src/test/java/com/kuehnenagel/cities/CitiesApplicationTests.java", "chunked_list": ["package com.kuehnenagel.cities;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CitiesApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "cities/src/test/java/com/kuehnenagel/cities/repository/CityRepositoryTests.java", "chunked_list": ["package com.kuehnenagel.cities.repository;\n\nimport com.kuehnenagel.cities.entity.City;\nimport com.kuehnenagel.cities.utils.AppConstants;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.data.domain.Page;", "import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\n\nimport java.util.List;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n", "import static org.assertj.core.api.Assertions.assertThat;\n\n@DataJpaTest\npublic class CityRepositoryTests {\n\n    @Autowired\n    CityRepository cityRepository;\n\n    private City city1;\n\n    private City city2;\n\n    @BeforeEach", "    public void setup() {\n        city1 = City.builder()\n                .id(1L)\n                .name(\"Gaziantep\")\n                .photo(\"http://cities.com/gaziantep.jpeg\")\n                .build();\n\n        city2 = City.builder()\n                .id(2L)\n                .name(\"Istanbul\")\n                .photo(\"http://cities.com/istanbul.jpeg\")\n                .build();\n    }\n\n    @DisplayName(\"JUnit test for find city by name operation\")\n    @Test", "    public void givenCities_whenFindByName_thenReturnCityObjects() throws Exception {\n        // given - precondition or setup\n\n        cityRepository.saveAll(List.of(city1,city2));\n        var cityName = \"gaziantep\";\n        Pageable pageable = PageRequest.of(Integer.valueOf(AppConstants.DEFAULT_PAGE_NUMBER),\n                Integer.valueOf(AppConstants.DEFAULT_PAGE_SIZE), Sort.by(AppConstants.DEFAULT_SORT_BY).ascending());\n        // when -  action or the behaviour that we are going test\n        Page<City> cityPage = cityRepository.findByNameContainingIgnoreCase(cityName, pageable);\n\n        // then - verify the output\n        assertThat(cityPage.getNumberOfElements()).isGreaterThan(0) ;\n    }\n\n\n}\n"]}
{"filename": "cities/src/test/java/com/kuehnenagel/cities/controller/CityControllerTests.java", "chunked_list": ["package com.kuehnenagel.cities.controller;\n\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.kuehnenagel.cities.dto.CityDto;\nimport com.kuehnenagel.cities.entity.City;\nimport com.kuehnenagel.cities.service.impl.CityServiceImpl;\nimport org.hamcrest.CoreMatchers;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;", "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.FilterType;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;", "import org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.test.context.support.WithMockUser;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.ResultActions;\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n", "import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n\nimport java.util.List;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.BDDMockito.given;\nimport static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;", "import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@WebMvcTest(value = CityController.class\n\n        // this disables loading up the WebSecurityConfig.java file, otherwise it fails on start up\n        , useDefaultFilters = false\n\n        // this one indicates the specific filter to be used, in this case\n        // related to the CityController we want to test", "        // this one indicates the specific filter to be used, in this case\n        // related to the CityController we want to test\n        , includeFilters = {\n        @ComponentScan.Filter(\n                type = FilterType.ASSIGNABLE_TYPE,\n                value = CityController.class\n        )\n})\npublic class CityControllerTests {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private CityServiceImpl cityService;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n\n    private City city;\n\n    @BeforeEach", "public class CityControllerTests {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @MockBean\n    private CityServiceImpl cityService;\n\n    @Autowired\n    private ObjectMapper objectMapper;\n\n\n    private City city;\n\n    @BeforeEach", "    public void setup() throws Exception {\n        city = City.builder()\n                .id(1L)\n                .name(\"Gaziantep\")\n                .photo(\"http://cities.com/gaziantep.jpeg\")\n                .build();\n    }\n\n\n    @DisplayName(\"JUnit test for Get All cities REST API\")\n    @Test\n    @WithMockUser", "    public void givenListOfCities_whenGetAllCities_thenReturnCityPage() throws Exception {\n        // given - precondition or setup\n        var cityDto = new CityDto();\n        cityDto.setId(1L);\n        cityDto.setName(\"Gaziantep\");\n        cityDto.setPhoto(\"http://cities.com/gaziantep.jpeg\");\n        var cityDto1 = new CityDto();\n        cityDto1.setId(2L);\n        cityDto1.setName(\"Istanbul\");\n        cityDto1.setPhoto(\"http://cities.com/istanbul.jpeg\");\n\n\n        Page<CityDto> pageOfCities = new PageImpl<>(List.of(cityDto, cityDto1));\n\n        int pageNo = 0;\n        int pageSize = 10;\n        String sortBy = \"id\";\n        String sortDir = Sort.Direction.ASC.name();\n        given(cityService.getCities(pageNo, pageSize, sortBy, sortDir)).willReturn(pageOfCities);\n\n        // when -  action or the behaviour that we are going test\n        ResultActions response = mockMvc.perform(get(\"/api/v1/cities\"));\n\n        // then - verify the output\n        response.andExpect(status().isOk())\n                .andDo(print());\n\n    }\n\n    @DisplayName(\"JUnit test for Get cities by name REST API\")\n    @Test\n    @WithMockUser", "    public void givenListOfCities_whenGetCitiesByName_thenReturnCityList() throws Exception {\n        // given - precondition or setup\n        var cityDto = new CityDto();\n        cityDto.setId(1L);\n        cityDto.setName(\"Gaziantep\");\n        cityDto.setPhoto(\"http://cities.com/gaziantep.jpeg\");\n\n        var cityName = \"Gaziantep\";\n        int pageNo = 0;\n        int pageSize = 10;\n        String sortBy = \"id\";\n        String sortDir = Sort.Direction.ASC.name();\n        given(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,cityName)).willReturn(new PageImpl<>(List.of(cityDto)));\n\n        // when -  action or the behaviour that we are going test\n        ResultActions response = mockMvc.perform(get(\"/api/v1/cities/search?name=\" + cityName));\n\n        // then - verify the output\n        response.andExpect(status().isOk())\n                .andDo(print());\n\n    }\n\n    @DisplayName(\"JUnit test for update city vREST API\")\n    @Test\n    @WithMockUser(authorities = \"ROLE_ALLOW_EDIT\")", "    public void givenUpdateCityObject_whenUpdateCity_thenReturnUpdatedCityObject() throws Exception {\n        // given - precondition or setup\n        var willUpdateCityDto = new CityDto();\n        willUpdateCityDto.setId(1L);\n        willUpdateCityDto.setName(\"Istanbul\");\n        willUpdateCityDto.setPhoto(\"http://cities.com/istanbul.jpeg\");\n\n        given(cityService.updateCity(any(CityDto.class)))\n                .willAnswer((invocation)-> invocation.getArgument(0));\n        // when -  action or the behaviour that we are going test\n        ResultActions response = mockMvc.perform(MockMvcRequestBuilders.put(\"/api/v1/cities\")\n                .contentType(MediaType.APPLICATION_JSON)", "                .content(objectMapper.writeValueAsString(willUpdateCityDto)).with(csrf()));\n\n        // then - verify the output\n        response.andExpect(status().isOk())\n                .andDo(print())\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.id\", CoreMatchers.is((willUpdateCityDto.getId().intValue()))))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.name\", CoreMatchers.is(willUpdateCityDto.getName())))\n                .andExpect(MockMvcResultMatchers.jsonPath(\"$.photo\", CoreMatchers.is(willUpdateCityDto.getPhoto())));\n\n    }\n\n}\n"]}
{"filename": "cities/src/test/java/com/kuehnenagel/cities/service/CityServiceTests.java", "chunked_list": ["package com.kuehnenagel.cities.service;\n\nimport com.kuehnenagel.cities.dto.CityDto;\nimport com.kuehnenagel.cities.entity.City;\nimport com.kuehnenagel.cities.exception.ResourceNotFoundException;\nimport com.kuehnenagel.cities.mapper.GenericMapper;\nimport com.kuehnenagel.cities.repository.CityRepository;\nimport com.kuehnenagel.cities.service.impl.CityServiceImpl;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;", "import org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.DisplayName;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.Spy;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.modelmapper.ModelMapper;\nimport org.springframework.data.domain.*;", "import org.modelmapper.ModelMapper;\nimport org.springframework.data.domain.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;", "import static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\npublic class CityServiceTests {\n\n    @Mock\n    CityRepository cityRepository;\n\n    @Spy\n    ModelMapper modelMapper;\n\n    @Spy\n    GenericMapper genericMapper;\n\n    @InjectMocks\n    CityServiceImpl cityService;\n\n\n    private City city;\n\n    @BeforeEach", "    public void setup() {\n        city = City.builder()\n                .id(1L)\n                .name(\"Gaziantep\")\n                .photo(\"http://cities.com/gaziantep.jpeg\")\n                .build();\n    }\n\n    @DisplayName(\"JUnit test for get Cities\")\n    @Test\n    public void givenCities_whenGetAllCities_thenReturnCitiesObjects() {\n        // given - precondition or setup\n        City city1 = City.builder()\n                .id(2L)\n                .name(\"Istanbul\")\n                .photo(\"http://cities.com/istanbul.jpeg\")\n                .build();\n\n        int pageNo = 0;\n        int pageSize = 10;\n        String sortBy = \"id\";\n        String sortDir = Sort.Direction.ASC.name();\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n\n        given(cityRepository.findAll(pageable)).willReturn(new PageImpl<>(List.of(city, city1)));\n\n        // when -  action or the behaviour that we are going test\n        Page<CityDto> cities = cityService.getCities(pageNo, pageSize, sortBy, sortDir);\n\n        // then - verify the output\n        assertThat(cities).isNotNull();\n        assertThat(cities.getNumberOfElements()).isGreaterThan(0);\n    }\n\n    @DisplayName(\"JUnit test for find cities by name\")\n    @Test", "    public void givenCities_whenGetAllCities_thenReturnCitiesObjects() {\n        // given - precondition or setup\n        City city1 = City.builder()\n                .id(2L)\n                .name(\"Istanbul\")\n                .photo(\"http://cities.com/istanbul.jpeg\")\n                .build();\n\n        int pageNo = 0;\n        int pageSize = 10;\n        String sortBy = \"id\";\n        String sortDir = Sort.Direction.ASC.name();\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n\n        given(cityRepository.findAll(pageable)).willReturn(new PageImpl<>(List.of(city, city1)));\n\n        // when -  action or the behaviour that we are going test\n        Page<CityDto> cities = cityService.getCities(pageNo, pageSize, sortBy, sortDir);\n\n        // then - verify the output\n        assertThat(cities).isNotNull();\n        assertThat(cities.getNumberOfElements()).isGreaterThan(0);\n    }\n\n    @DisplayName(\"JUnit test for find cities by name\")\n    @Test", "    public void givenCityObjectsandCityName_whenGetCitiesByName_thenReturnCityListObject() {\n        // given - precondition or setup\n        City city1 = City.builder()\n                .id(2L)\n                .name(\"Istanbul\")\n                .photo(\"http://cities.com/istanbul.jpeg\")\n                .build();\n\n        String cityName = \"gaziantep\";\n        int pageNo = 0;\n        int pageSize = 10;\n        String sortBy = \"id\";\n        String sortDir = Sort.Direction.ASC.name();\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n        given(cityRepository.findByNameContainingIgnoreCase(cityName, pageable)).willReturn(new PageImpl<>(List.of(city)));\n\n        // when -  action or the behaviour that we are going test\n        Page<CityDto> citiesByName = cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir, cityName);\n\n        // then - verify the output\n        assertThat(citiesByName).isNotNull();\n        assertThat(citiesByName.getNumberOfElements()).isGreaterThan(0);\n    }\n\n    @DisplayName(\"JUnit test for update city\")\n    @Test", "    public void givenCityObject_whenUpdateCity_thenReturnUpdatedCityObject() {\n        // given - precondition or setup\n        var willUpdateCity = City.builder()\n                .id(1L)\n                .name(\"Istanbul\")\n                .photo(\"http://cities.com/istanbul.jpeg\")\n                .build();\n\n\n        given(cityRepository.findById(willUpdateCity.getId())).willReturn(Optional.of(city));\n\n        CityDto willUpdateCityDto = new ModelMapper().map(willUpdateCity, CityDto.class);\n\n        given(cityRepository.save(city)).willReturn(willUpdateCity);\n\n\n        // when -  action or the behaviour that we are going test\n        CityDto updatedCity = cityService.updateCity(willUpdateCityDto);\n\n        // then - verify the output\n        verify(cityRepository, times(1)).save(city);\n        assertThat(updatedCity.getName()).isEqualTo(\"Istanbul\");\n        assertThat(updatedCity.getPhoto()).isEqualTo(\"http://cities.com/istanbul.jpeg\");\n    }\n\n    @DisplayName(\"JUnit test for can not find city while update city\")\n    @Test", "    public void givenCityObject_whenUpdateCity_thenThrowsException() {\n        // given - precondition or setup\n        var willUpdateCity = City.builder()\n                .id(3L)\n                .name(\"Istanbul\")\n                .photo(\"http://cities.com/istanbul.jpeg\")\n                .build();\n\n\n        given(cityRepository.findById(willUpdateCity.getId())).willReturn(Optional.empty());\n        CityDto willUpdateCityDto = new ModelMapper().map(willUpdateCity, CityDto.class);\n\n        // when -  action or the behaviour that we are going test\n        org.junit.jupiter.api.Assertions.assertThrows(ResourceNotFoundException.class, () -> {\n            cityService.updateCity(willUpdateCityDto);\n        });\n\n        // then\n        verify(cityRepository, never()).save(any(City.class));\n    }\n\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/CitiesApplication.java", "chunked_list": ["package com.kuehnenagel.cities;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class CitiesApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CitiesApplication.class, args);\n    }\n\n}\n", "    public static void main(String[] args) {\n        SpringApplication.run(CitiesApplication.class, args);\n    }\n\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/entity/User.java", "chunked_list": ["package com.kuehnenagel.cities.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.util.Set;\n\n@Setter\n@Getter\n@NoArgsConstructor", "@Getter\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"users\")\n@Builder\npublic class User {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String fullName;\n\n  @Column(nullable = false, unique = true)\n  private String username;\n\n  @Column(nullable = false)\n  private String password;\n\n  @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)\n  @JoinTable(\n      name = \"users_roles\",\n      joinColumns = @JoinColumn(name = \"user_id\", referencedColumnName = \"id\"),\n      inverseJoinColumns = @JoinColumn(name = \"role_id\", referencedColumnName = \"id\"))\n  private Set<Role> roles;\n\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/entity/Role.java", "chunked_list": ["package com.kuehnenagel.cities.entity;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter", "@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity\n@Table(name = \"roles\")\npublic class Role {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n  private String name;\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/entity/City.java", "chunked_list": ["package com.kuehnenagel.cities.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\n@Entity", "@AllArgsConstructor\n@Entity\n@Table(name = \"cities\")\n@Builder\npublic class City {\n\n    @Id\n    private Long id;\n    @Column(nullable = false)\n    private String name;\n\n    @Lob\n    @Column( length = 5000 )\n    private String photo;\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/repository/CityRepository.java", "chunked_list": ["package com.kuehnenagel.cities.repository;\n\nimport com.kuehnenagel.cities.entity.City;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.List;\n\npublic interface CityRepository extends JpaRepository<City, Long> {\n\n    Page<City> findByNameContainingIgnoreCase(String name, Pageable pageable);\n}\n", "\npublic interface CityRepository extends JpaRepository<City, Long> {\n\n    Page<City> findByNameContainingIgnoreCase(String name, Pageable pageable);\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/repository/UserRepository.java", "chunked_list": ["package com.kuehnenagel.cities.repository;\n\nimport com.kuehnenagel.cities.entity.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n  Optional<User> findByUsername(String username);\n\n  Boolean existsByUsername(String username);\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/repository/RoleRepository.java", "chunked_list": ["package com.kuehnenagel.cities.repository;\n\nimport com.kuehnenagel.cities.entity.Role;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.util.Optional;\n\npublic interface RoleRepository extends JpaRepository<Role, Long> {\n  Optional<Role> findByName(String name);\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/utils/AppConstants.java", "chunked_list": ["package com.kuehnenagel.cities.utils;\n\npublic class AppConstants {\n\n    public static final String DEFAULT_PAGE_NUMBER = \"0\";\n    public  static final String DEFAULT_PAGE_SIZE = \"10\";\n    public static final String DEFAULT_SORT_BY = \"id\";\n    public static final String DEFAULT_SORT_DIRECTION = \"asc\";\n\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/security/JwtTokenProvider.java", "chunked_list": ["package com.kuehnenagel.cities.security;\n\nimport com.kuehnenagel.cities.exception.ApplicationException;\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.stereotype.Component;", "import org.springframework.security.core.Authentication;\nimport org.springframework.stereotype.Component;\n\nimport java.security.Key;\nimport java.util.Date;\n\n@Component\npublic class JwtTokenProvider {\n\n  @Value(\"${app.jwt-secret}\")\n  private String jwtSecret;\n\n  @Value(\"${app-jwt-expiration-milliseconds}\")\n  private long jwtExpirationDate;\n\n  // generate JWT token", "  public String generateToken(Authentication authentication) {\n    String username = authentication.getName();\n\n    Date currentDate = new Date();\n\n    Date expireDate = new Date(currentDate.getTime() + jwtExpirationDate);\n\n    String token =\n        Jwts.builder()\n            .setSubject(username)\n            .setIssuedAt(new Date())\n            .setExpiration(expireDate)\n            .signWith(key())\n            .compact();\n    return token;\n  }\n\n  private Key key() {\n    return Keys.hmacShaKeyFor(Decoders.BASE64.decode(jwtSecret));\n  }\n\n  // get username from Jwt token", "  public String getUsername(String token) {\n    Claims claims =\n        Jwts.parserBuilder().setSigningKey(key()).build().parseClaimsJws(token).getBody();\n    String username = claims.getSubject();\n    return username;\n  }\n\n  // validate Jwt token\n  public boolean validateToken(String token) {\n    try {\n      Jwts.parserBuilder().setSigningKey(key()).build().parse(token);\n      return true;\n    } catch (MalformedJwtException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Invalid JWT token\");\n    } catch (ExpiredJwtException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Expired JWT token\");\n    } catch (UnsupportedJwtException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Unsupported JWT token\");\n    } catch (IllegalArgumentException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"JWT claims string is empty.\");\n    }\n  }\n}\n", "  public boolean validateToken(String token) {\n    try {\n      Jwts.parserBuilder().setSigningKey(key()).build().parse(token);\n      return true;\n    } catch (MalformedJwtException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Invalid JWT token\");\n    } catch (ExpiredJwtException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Expired JWT token\");\n    } catch (UnsupportedJwtException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Unsupported JWT token\");\n    } catch (IllegalArgumentException ex) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"JWT claims string is empty.\");\n    }\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/security/JwtAuthenticationEntryPoint.java", "chunked_list": ["package com.kuehnenagel.cities.security;\n\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\n", "import java.io.IOException;\n\n@Component\npublic class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint {\n\n  @Override\n  public void commence(\n      HttpServletRequest request,\n      HttpServletResponse response,\n      AuthenticationException authException)\n      throws IOException {\n\n    response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/security/JwtAuthenticationFilter.java", "chunked_list": ["package com.kuehnenagel.cities.security;\n\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;", "import org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport java.io.IOException;\n\n@Component\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n  private JwtTokenProvider jwtTokenProvider;\n\n  private UserDetailsService userDetailsService;\n\n  public JwtAuthenticationFilter(\n      JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {\n    this.jwtTokenProvider = jwtTokenProvider;\n    this.userDetailsService = userDetailsService;\n  }\n\n  @Override\n  protected void doFilterInternal(\n      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws ServletException, IOException {\n\n    // get JWT token from http request\n    String token = getTokenFromRequest(request);\n\n    // validate token", "\n@Component\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n\n  private JwtTokenProvider jwtTokenProvider;\n\n  private UserDetailsService userDetailsService;\n\n  public JwtAuthenticationFilter(\n      JwtTokenProvider jwtTokenProvider, UserDetailsService userDetailsService) {\n    this.jwtTokenProvider = jwtTokenProvider;\n    this.userDetailsService = userDetailsService;\n  }\n\n  @Override\n  protected void doFilterInternal(\n      HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n      throws ServletException, IOException {\n\n    // get JWT token from http request\n    String token = getTokenFromRequest(request);\n\n    // validate token", "    if (StringUtils.hasText(token) && jwtTokenProvider.validateToken(token)) {\n\n      // get username from token\n      String username = jwtTokenProvider.getUsername(token);\n\n      // load the user associated with token\n      UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n\n      UsernamePasswordAuthenticationToken authenticationToken =\n          new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n\n      authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n\n      SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n    }\n\n    filterChain.doFilter(request, response);\n  }\n\n  private String getTokenFromRequest(HttpServletRequest request) {\n\n    String bearerToken = request.getHeader(\"Authorization\");\n", "    if (StringUtils.hasText(bearerToken) && bearerToken.startsWith(\"Bearer \")) {\n      return bearerToken.substring(7, bearerToken.length());\n    }\n\n    return null;\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/security/CustomUserDetailsService.java", "chunked_list": ["package com.kuehnenagel.cities.security;\n\nimport com.kuehnenagel.cities.entity.User;\nimport com.kuehnenagel.cities.repository.UserRepository;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;", "import org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Service\npublic class CustomUserDetailsService implements UserDetailsService {\n\n  private UserRepository userRepository;\n\n  public CustomUserDetailsService(UserRepository userRepository) {\n    this.userRepository = userRepository;\n  }\n\n  @Override", "  public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n    User user =\n        userRepository\n            .findByUsername(username)\n            .orElseThrow(\n                () ->\n                    new UsernameNotFoundException(\n                        \"User not found with username : \" + username));\n\n    Set<GrantedAuthority> authorities =\n        user.getRoles().stream()\n            .map((role) -> new SimpleGrantedAuthority(role.getName()))\n            .collect(Collectors.toSet());\n\n    return new org.springframework.security.core.userdetails.User(\n        user.getUsername(), user.getPassword(), authorities);\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/config/MapperConfig.java", "chunked_list": ["package com.kuehnenagel.cities.config;\n\nimport org.modelmapper.ModelMapper;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class MapperConfig {\n\n  @Bean\n  public ModelMapper getModelMapper() {\n    return new ModelMapper();\n  }\n}\n", "  public ModelMapper getModelMapper() {\n    return new ModelMapper();\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/config/CorsConfiguration.java", "chunked_list": ["package com.kuehnenagel.cities.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class CorsConfiguration implements WebMvcConfigurer {\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\", \"HEAD\", \"TRACE\", \"CONNECT\");\n    }\n}", "    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n                .allowedOrigins(\"*\")\n                .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\", \"HEAD\", \"TRACE\", \"CONNECT\");\n    }\n}"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/config/SetupCitiesConfiguration.java", "chunked_list": ["package com.kuehnenagel.cities.config;\n\nimport com.kuehnenagel.cities.service.CityService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@RequiredArgsConstructor\npublic class SetupCitiesConfiguration {\n\n    private final CityService cityService;\n\n    @Bean", "@Configuration\n@RequiredArgsConstructor\npublic class SetupCitiesConfiguration {\n\n    private final CityService cityService;\n\n    @Bean\n    public CommandLineRunner runOnStartup() {\n        return args -> {\n            String csvFileName = \"cities.csv\"; // src/main/resources alt\u0131ndaki CSV dosyas\u0131n\u0131n ad\u0131n\u0131 girin\n            cityService.readAndSaveCsvFile(csvFileName);\n        };\n    }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/config/SecurityConfig.java", "chunked_list": ["package com.kuehnenagel.cities.config;\n\nimport com.kuehnenagel.cities.security.JwtAuthenticationEntryPoint;\nimport com.kuehnenagel.cities.security.JwtAuthenticationFilter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;", "import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n", "import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\nimport static org.springframework.boot.autoconfigure.security.servlet.PathRequest.toH2Console;\n\n@Configuration\n@EnableMethodSecurity\npublic class SecurityConfig {\n\n    private UserDetailsService userDetailsService;\n\n    private JwtAuthenticationEntryPoint authenticationEntryPoint;\n\n    private JwtAuthenticationFilter authenticationFilter;\n\n    public SecurityConfig(\n            UserDetailsService userDetailsService,\n            JwtAuthenticationEntryPoint authenticationEntryPoint,\n            JwtAuthenticationFilter authenticationFilter) {\n        this.userDetailsService = userDetailsService;\n        this.authenticationEntryPoint = authenticationEntryPoint;\n        this.authenticationFilter = authenticationFilter;\n    }\n\n    @Bean", "    public static PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration)\n            throws Exception {\n        return configuration.getAuthenticationManager();\n    }\n\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n\n        http.cors().and().csrf()\n                .disable()\n                .authorizeHttpRequests(\n                        (authorize) ->\n                                // authorize.anyRequest().authenticated()\n                                authorize\n                                        .requestMatchers(toH2Console())\n                                        .permitAll()\n                                        .requestMatchers(\"/api/v1/auth/**\")\n                                        .permitAll()\n                                        .anyRequest()\n                                        .authenticated())\n                .exceptionHandling(\n                        exception -> exception.authenticationEntryPoint(authenticationEntryPoint))\n                .sessionManagement(\n                        session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));\n        http.headers().frameOptions().disable();\n        http.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/controller/CityController.java", "chunked_list": ["package com.kuehnenagel.cities.controller;\n\nimport com.kuehnenagel.cities.dto.CityDto;\nimport com.kuehnenagel.cities.service.CityService;\nimport com.kuehnenagel.cities.utils.AppConstants;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;", "import org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/v1/cities\")\n@RequiredArgsConstructor\npublic class CityController {\n\n    private final CityService cityService;\n\n    @GetMapping\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<Page<CityDto>> getCities(\n            @RequestParam(\n                    value = \"pageNo\",\n                    defaultValue = AppConstants.DEFAULT_PAGE_NUMBER,\n                    required = false)\n            int pageNo,\n            @RequestParam(\n                    value = \"pageSize\",\n                    defaultValue = AppConstants.DEFAULT_PAGE_SIZE,\n                    required = false)\n            int pageSize,\n            @RequestParam(value = \"sortBy\", defaultValue = AppConstants.DEFAULT_SORT_BY, required = false)\n            String sortBy,\n            @RequestParam(\n                    value = \"sortDir\",\n                    defaultValue = AppConstants.DEFAULT_SORT_DIRECTION,\n                    required = false)\n            String sortDir) {\n        return ResponseEntity.ok(cityService.getCities(pageNo, pageSize, sortBy, sortDir));\n    }\n\n    @GetMapping(\"/search\")\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<Page<CityDto>> getCitiesByName(@RequestParam(\n            value = \"pageNo\",\n            defaultValue = AppConstants.DEFAULT_PAGE_NUMBER,\n            required = false)\n                                                         int pageNo,\n                                                         @RequestParam(\n                                                                 value = \"pageSize\",\n                                                                 defaultValue = AppConstants.DEFAULT_PAGE_SIZE,\n                                                                 required = false)\n                                                         int pageSize,\n                                                         @RequestParam(value = \"sortBy\", defaultValue = AppConstants.DEFAULT_SORT_BY, required = false)\n                                                         String sortBy,\n                                                         @RequestParam(\n                                                                 value = \"sortDir\",\n                                                                 defaultValue = AppConstants.DEFAULT_SORT_DIRECTION,\n                                                                 required = false)\n                                                         String sortDir, @RequestParam String name) {\n        return ResponseEntity.ok(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));\n    }\n\n    @PutMapping\n    @PreAuthorize(\"hasRole('ROLE_ALLOW_EDIT')\")\n    public ResponseEntity<CityDto> updateCity(@RequestBody CityDto dto) {\n        return ResponseEntity.ok(cityService.updateCity(dto));\n    }\n\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/controller/AuthController.java", "chunked_list": ["package com.kuehnenagel.cities.controller;\n\nimport com.kuehnenagel.cities.dto.JWTAuthResponse;\nimport com.kuehnenagel.cities.dto.LoginDto;\nimport com.kuehnenagel.cities.dto.RegisterDto;\nimport com.kuehnenagel.cities.service.AuthService;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;", "import org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/v1/auth\")\npublic class AuthController {\n\n  private AuthService authService;\n\n  public AuthController(AuthService authService) {\n    this.authService = authService;\n  }\n\n  // Build Login REST API\n  @PostMapping(value = {\"/login\", \"/signin\"})\n  public ResponseEntity<JWTAuthResponse> login(@RequestBody LoginDto loginDto) {\n    return ResponseEntity.ok(authService.login(loginDto));\n  }\n\n  // Build Register REST API\n  @PostMapping(value = {\"/register\", \"/signup\"})\n  public ResponseEntity<String> register(@RequestBody RegisterDto registerDto) {\n    String response = authService.register(registerDto);\n    return new ResponseEntity<>(response, HttpStatus.CREATED);\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/exception/ResourceNotFoundException.java", "chunked_list": ["package com.kuehnenagel.cities.exception;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ResponseStatus(value = HttpStatus.NOT_FOUND)\n@Getter", "@ResponseStatus(value = HttpStatus.NOT_FOUND)\n@Getter\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ResourceNotFoundException extends RuntimeException {\n  private String resourceName;\n  private String fieldName;\n  private long fieldValue;\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/exception/GlobalExceptionHandler.java", "chunked_list": ["package com.kuehnenagel.cities.exception;\n\nimport com.kuehnenagel.cities.dto.ErrorDetails;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.HttpStatusCode;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.AccessDeniedException;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;", "import org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.context.request.WebRequest;\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;", "import java.util.HashMap;\nimport java.util.Map;\n\n@ControllerAdvice\npublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler {\n\n  // handle specific exceptions\n  @ExceptionHandler(ResourceNotFoundException.class)\n  public ResponseEntity<ErrorDetails> handleResourceNotFoundException(\n      ResourceNotFoundException exception, WebRequest webRequest) {\n    ErrorDetails errorDetails =\n        new ErrorDetails(new Date(), exception.getMessage(), webRequest.getDescription(false));\n    return new ResponseEntity<>(errorDetails, HttpStatus.NOT_FOUND);\n  }\n\n  @ExceptionHandler(ApplicationException.class)\n  public ResponseEntity<ErrorDetails> handleBlogAPIException(\n      ApplicationException exception, WebRequest webRequest) {\n    ErrorDetails errorDetails =\n        new ErrorDetails(new Date(), exception.getMessage(), webRequest.getDescription(false));\n    return new ResponseEntity<>(errorDetails, HttpStatus.BAD_REQUEST);\n  }\n  // global exceptions\n  @ExceptionHandler(Exception.class)\n  public ResponseEntity<ErrorDetails> handleGlobalException(\n      Exception exception, WebRequest webRequest) {\n    ErrorDetails errorDetails =\n        new ErrorDetails(new Date(), exception.getMessage(), webRequest.getDescription(false));\n    return new ResponseEntity<>(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n  @Override\n  protected ResponseEntity<Object> handleMethodArgumentNotValid(\n      MethodArgumentNotValidException ex,\n      HttpHeaders headers,\n      HttpStatusCode status,\n      WebRequest request) {\n    Map<String, String> errors = new HashMap<>();\n    ex.getBindingResult()\n        .getAllErrors()\n        .forEach(\n            (error) -> {\n              String fieldName = ((FieldError) error).getField();\n              String message = error.getDefaultMessage();\n              errors.put(fieldName, message);\n            });\n\n    return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);\n  }\n\n  //    @ExceptionHandler(MethodArgumentNotValidException.class)\n  //    public ResponseEntity<Object>\n  // handleMethodArgumentNotValidException(MethodArgumentNotValidException exception,\n  //                                                                        WebRequest webRequest){\n  //        Map<String, String> errors = new HashMap<>();\n  //        exception.getBindingResult().getAllErrors().forEach((error) ->{\n  //            String fieldName = ((FieldError)error).getField();\n  //            String message = error.getDefaultMessage();\n  //            errors.put(fieldName, message);\n  //        });\n  //        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);\n  //    }\n\n  @ExceptionHandler(AccessDeniedException.class)\n  public ResponseEntity<ErrorDetails> handleAccessDeniedException(\n      AccessDeniedException exception, WebRequest webRequest) {\n    ErrorDetails errorDetails =\n        new ErrorDetails(new Date(), exception.getMessage(), webRequest.getDescription(false));\n    return new ResponseEntity<>(errorDetails, HttpStatus.UNAUTHORIZED);\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/exception/ApplicationException.java", "chunked_list": ["package com.kuehnenagel.cities.exception;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport org.springframework.http.HttpStatus;\n\n@Getter\n@AllArgsConstructor\npublic class ApplicationException extends RuntimeException {\n\n  private HttpStatus status;\n  private String message;\n\n  public ApplicationException(String message, HttpStatus status, String message1) {\n    super(message);\n    this.status = status;\n    this.message = message1;\n  }\n}\n", "public class ApplicationException extends RuntimeException {\n\n  private HttpStatus status;\n  private String message;\n\n  public ApplicationException(String message, HttpStatus status, String message1) {\n    super(message);\n    this.status = status;\n    this.message = message1;\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/service/AuthService.java", "chunked_list": ["package com.kuehnenagel.cities.service;\n\nimport com.kuehnenagel.cities.dto.JWTAuthResponse;\nimport com.kuehnenagel.cities.dto.LoginDto;\nimport com.kuehnenagel.cities.dto.RegisterDto;\nimport com.kuehnenagel.cities.entity.User;\n\npublic interface AuthService {\n  JWTAuthResponse login(LoginDto loginDto);\n\n  String register(RegisterDto registerDto);\n\n  User getCurrentUser();\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/service/CityService.java", "chunked_list": ["package com.kuehnenagel.cities.service;\n\nimport com.kuehnenagel.cities.dto.CityDto;\nimport org.springframework.data.domain.Page;\n\npublic interface CityService {\n    void readAndSaveCsvFile(String csvFileName);\n\n    Page<CityDto> getCities(int pageNo, int pageSize, String sortBy, String sortDir);\n\n    Page<CityDto> findCitiesByName(int pageNo, int pageSize, String sortBy, String sortDir,String name);\n\n    CityDto updateCity(CityDto dto);\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/service/impl/AuthServiceImpl.java", "chunked_list": ["package com.kuehnenagel.cities.service.impl;\n\nimport com.kuehnenagel.cities.dto.JWTAuthResponse;\nimport com.kuehnenagel.cities.dto.LoginDto;\nimport com.kuehnenagel.cities.dto.RegisterDto;\nimport com.kuehnenagel.cities.entity.Role;\nimport com.kuehnenagel.cities.entity.User;\nimport com.kuehnenagel.cities.exception.ApplicationException;\nimport com.kuehnenagel.cities.repository.RoleRepository;\nimport com.kuehnenagel.cities.repository.UserRepository;", "import com.kuehnenagel.cities.repository.RoleRepository;\nimport com.kuehnenagel.cities.repository.UserRepository;\nimport com.kuehnenagel.cities.security.JwtTokenProvider;\nimport com.kuehnenagel.cities.service.AuthService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;", "import org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Service\n@RequiredArgsConstructor\npublic class AuthServiceImpl implements AuthService {\n\n  private final AuthenticationManager authenticationManager;\n  private final UserRepository userRepository;\n  private final RoleRepository roleRepository;\n  private final PasswordEncoder passwordEncoder;\n  private final JwtTokenProvider jwtTokenProvider;\n\n  @Override", "@RequiredArgsConstructor\npublic class AuthServiceImpl implements AuthService {\n\n  private final AuthenticationManager authenticationManager;\n  private final UserRepository userRepository;\n  private final RoleRepository roleRepository;\n  private final PasswordEncoder passwordEncoder;\n  private final JwtTokenProvider jwtTokenProvider;\n\n  @Override\n  public JWTAuthResponse login(LoginDto loginDto) {\n\n    var authentication =\n        authenticationManager.authenticate(\n            new UsernamePasswordAuthenticationToken(\n                loginDto.getUsername(), loginDto.getPassword()));\n\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    JWTAuthResponse jwtAuthResponse = new JWTAuthResponse();\n    jwtAuthResponse.setAccessToken(jwtTokenProvider.generateToken(authentication));\n    return jwtAuthResponse;\n  }\n\n  @Override", "  public JWTAuthResponse login(LoginDto loginDto) {\n\n    var authentication =\n        authenticationManager.authenticate(\n            new UsernamePasswordAuthenticationToken(\n                loginDto.getUsername(), loginDto.getPassword()));\n\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    JWTAuthResponse jwtAuthResponse = new JWTAuthResponse();\n    jwtAuthResponse.setAccessToken(jwtTokenProvider.generateToken(authentication));\n    return jwtAuthResponse;\n  }\n\n  @Override", "  public String register(RegisterDto registerDto) {\n\n    // add check for username exists in database\n    if (userRepository.existsByUsername(registerDto.getUsername())) {\n      throw new ApplicationException(HttpStatus.BAD_REQUEST, \"Username is already exists!.\");\n    }\n\n    var user =\n        User.builder()\n            .fullName(registerDto.getFullName())\n            .username(registerDto.getUsername())\n            .password(passwordEncoder.encode(registerDto.getPassword()))\n            .build();\n\n    Set<Role> roles = new HashSet<>();\n    var userRole = roleRepository.findByName(\"ROLE_USER\").get();\n    roles.add(userRole);\n    var userRole2 = roleRepository.findByName(\"ROLE_ALLOW_EDIT\").get();\n    roles.add(userRole2);\n    user.setRoles(roles);\n\n    userRepository.save(user);\n\n    return \"User registered successfully!.\";\n  }\n\n  @Override", "  public User getCurrentUser() {\n    var authentication = SecurityContextHolder.getContext().getAuthentication();\n    return userRepository\n        .findByUsername(authentication.getName())\n        .orElseThrow(\n            () ->\n                new ApplicationException(HttpStatus.UNAUTHORIZED, \"User not found in the context\"));\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/service/impl/CityServiceImpl.java", "chunked_list": ["package com.kuehnenagel.cities.service.impl;\n\nimport com.kuehnenagel.cities.dto.CityDto;\nimport com.kuehnenagel.cities.entity.City;\nimport com.kuehnenagel.cities.exception.ApplicationException;\nimport com.kuehnenagel.cities.exception.ResourceNotFoundException;\nimport com.kuehnenagel.cities.mapper.GenericMapper;\nimport com.kuehnenagel.cities.repository.CityRepository;\nimport com.kuehnenagel.cities.service.CityService;\nimport lombok.RequiredArgsConstructor;", "import com.kuehnenagel.cities.service.CityService;\nimport lombok.RequiredArgsConstructor;\nimport org.apache.commons.csv.CSVFormat;\nimport org.apache.commons.csv.CSVParser;\nimport org.apache.commons.csv.CSVRecord;\nimport org.modelmapper.ModelMapper;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;", "import org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class CityServiceImpl implements CityService {\n\n\n    private final CityRepository cityRepository;\n\n    private final GenericMapper genericMapper;\n\n    private final ModelMapper modelMapper;\n\n    @Override", "    public void readAndSaveCsvFile(String fileName) {\n        try {\n            InputStream inputStream = getClass().getResourceAsStream(\"/\" + fileName);\n            InputStreamReader reader = new InputStreamReader(inputStream);\n            CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreHeaderCase().withTrim());\n\n            List<City> cities = new ArrayList<>();\n\n            for (CSVRecord record : csvParser) {\n                City City = new City();\n                City.setId(Long.valueOf(record.get(\"id\")));\n                City.setName(record.get(\"name\"));\n                City.setPhoto(record.get(\"photo\"));\n                cities.add(City);\n            }\n\n            cityRepository.saveAll(cities);\n            csvParser.close();\n\n        } catch (IOException e) {\n            throw new ApplicationException(HttpStatus.INTERNAL_SERVER_ERROR,e.getMessage());\n        }\n    }\n\n    @Override\n    public Page<CityDto> getCities(int pageNo, int pageSize, String sortBy, String sortDir) {\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n\n        // create Pageable instance\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n        Page<City> all = cityRepository.findAll(pageable);\n        return genericMapper.mapPage(all, CityDto.class);\n\n    }\n\n    @Override\n    public Page<CityDto> findCitiesByName(int pageNo, int pageSize, String sortBy, String sortDir,String name) {\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n\n        // create Pageable instance\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n        Page<City> cities = cityRepository.findByNameContainingIgnoreCase(name, pageable);\n        return genericMapper.mapPage(cities,CityDto.class);\n\n    }\n\n    @Override", "            for (CSVRecord record : csvParser) {\n                City City = new City();\n                City.setId(Long.valueOf(record.get(\"id\")));\n                City.setName(record.get(\"name\"));\n                City.setPhoto(record.get(\"photo\"));\n                cities.add(City);\n            }\n\n            cityRepository.saveAll(cities);\n            csvParser.close();\n\n        } catch (IOException e) {\n            throw new ApplicationException(HttpStatus.INTERNAL_SERVER_ERROR,e.getMessage());\n        }\n    }\n\n    @Override\n    public Page<CityDto> getCities(int pageNo, int pageSize, String sortBy, String sortDir) {\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n\n        // create Pageable instance\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n        Page<City> all = cityRepository.findAll(pageable);\n        return genericMapper.mapPage(all, CityDto.class);\n\n    }\n\n    @Override\n    public Page<CityDto> findCitiesByName(int pageNo, int pageSize, String sortBy, String sortDir,String name) {\n        Sort sort = sortDir.equalsIgnoreCase(Sort.Direction.ASC.name()) ? Sort.by(sortBy).ascending()\n                : Sort.by(sortBy).descending();\n\n        // create Pageable instance\n        Pageable pageable = PageRequest.of(pageNo, pageSize, sort);\n        Page<City> cities = cityRepository.findByNameContainingIgnoreCase(name, pageable);\n        return genericMapper.mapPage(cities,CityDto.class);\n\n    }\n\n    @Override", "    public CityDto updateCity(CityDto dto) {\n        City city = cityRepository.findById(dto.getId()).orElseThrow(() -> new ResourceNotFoundException(\"City\", \"Id\", dto.getId()));\n        city.setName(dto.getName());\n        city.setPhoto(dto.getPhoto());\n        City updatedCity = cityRepository.save(city);\n        return modelMapper.map(updatedCity,CityDto.class);\n    }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/mapper/GenericMapper.java", "chunked_list": ["package com.kuehnenagel.cities.mapper;\n\nimport lombok.RequiredArgsConstructor;\nimport org.modelmapper.ModelMapper;\nimport org.springframework.data.domain.Page;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n", "import java.util.stream.Collectors;\n\n@Component\npublic class GenericMapper {\n\n\n    public <S, T> List<T> mapList(List<S> source, Class<T> targetClass) {\n        return source\n                .stream()\n                .map(element -> new ModelMapper().map(element, targetClass))\n                .collect(Collectors.toList());\n    }\n\n    public <D, T> Page<D> mapPage(Page<T> entities, Class<D> dtoClass) {\n        return entities.map(objectEntity -> new ModelMapper().map(objectEntity, dtoClass));\n    }\n\n\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/dto/ErrorDetails.java", "chunked_list": ["package com.kuehnenagel.cities.dto;\n\nimport java.util.Date;\n\npublic class ErrorDetails {\n  private Date timestamp;\n  private String message;\n  private String details;\n\n  public ErrorDetails(Date timestamp, String message, String details) {\n    this.timestamp = timestamp;\n    this.message = message;\n    this.details = details;\n  }\n", "  public Date getTimestamp() {\n    return timestamp;\n  }\n\n  public String getMessage() {\n    return message;\n  }\n\n  public String getDetails() {\n    return details;\n  }\n}\n", "  public String getDetails() {\n    return details;\n  }\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/dto/LoginDto.java", "chunked_list": ["package com.kuehnenagel.cities.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Setter\n@Getter\n@NoArgsConstructor", "@Getter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class LoginDto {\n  private String username;\n  private String password;\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/dto/RegisterDto.java", "chunked_list": ["package com.kuehnenagel.cities.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Setter\n@Getter\n@NoArgsConstructor", "@Getter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class RegisterDto {\n  private String fullName;\n  private String username;\n  private String password;\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/dto/CityDto.java", "chunked_list": ["package com.kuehnenagel.cities.dto;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Setter\n@Getter\n@NoArgsConstructor\npublic class CityDto {\n\n    private Long id;\n\n    private String name;\n\n    private String photo;\n}\n", "@NoArgsConstructor\npublic class CityDto {\n\n    private Long id;\n\n    private String name;\n\n    private String photo;\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/dto/JWTAuthResponse.java", "chunked_list": ["package com.kuehnenagel.cities.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Setter\n@Getter\n@NoArgsConstructor", "@Getter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class JWTAuthResponse {\n  private String accessToken;\n  private String tokenType = \"Bearer\";\n}\n"]}
{"filename": "cities/src/main/java/com/kuehnenagel/cities/dto/UserDto.java", "chunked_list": ["package com.kuehnenagel.cities.dto;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserDto {\n    private String fullName;\n    private String username;\n}\n\n\n"]}
