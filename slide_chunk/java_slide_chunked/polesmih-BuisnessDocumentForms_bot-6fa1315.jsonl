{"filename": "src/main/java/org/example/Main.java", "chunked_list": ["package org.example;\n\nimport org.example.bot.Bot;\nimport org.example.bot.settings.Logger;\nimport org.example.dao.DocumentDAO;\nimport org.example.dao.imp.DocumentDAOImp;\nimport org.example.util.DocumentInfoSaver;\nimport org.example.util.ParserJson;\nimport org.telegram.telegrambots.meta.TelegramBotsApi;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;", "import org.telegram.telegrambots.meta.TelegramBotsApi;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\nimport org.telegram.telegrambots.updatesreceivers.DefaultBotSession;\n\npublic class Main {\n    public static void main(String[] args) {\n        Logger logger = new Logger();\n\n        try {\n            Bot bot = new Bot();\n            TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);\n            telegramBotsApi.registerBot(bot);\n            bot.init();\n            saveDocInfoToDb();\n        } catch (TelegramApiException e) {\n            e.printStackTrace();\n        }\n        logger.log(\"\u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\");\n    }\n\n    private static void saveDocInfoToDb() {\n        ParserJson parser = new ParserJson();\n        DocumentDAO documentDAO = new DocumentDAOImp();\n        DocumentInfoSaver saver = new DocumentInfoSaver(documentDAO);\n\n        var docInfoList = parser.getDocumentInfoList();\n        saver.saveDocumentInfo(docInfoList);\n    }\n}", "        try {\n            Bot bot = new Bot();\n            TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);\n            telegramBotsApi.registerBot(bot);\n            bot.init();\n            saveDocInfoToDb();\n        } catch (TelegramApiException e) {\n            e.printStackTrace();\n        }\n        logger.log(\"\u0411\u043e\u0442 \u0437\u0430\u043f\u0443\u0449\u0435\u043d!\");\n    }\n\n    private static void saveDocInfoToDb() {\n        ParserJson parser = new ParserJson();\n        DocumentDAO documentDAO = new DocumentDAOImp();\n        DocumentInfoSaver saver = new DocumentInfoSaver(documentDAO);\n\n        var docInfoList = parser.getDocumentInfoList();\n        saver.saveDocumentInfo(docInfoList);\n    }\n}"]}
{"filename": "src/main/java/org/example/component/Keyboards.java", "chunked_list": ["package org.example.component;\n\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;\n\nimport java.util.Arrays;\n\nimport static org.example.component.enums.DocumentType.*;\n\npublic class Keyboards {\n    public static ReplyKeyboardMarkup mainKeyboard() {\n        var row1 = new KeyboardRow();\n        row1.add(CONTRACT.getDocType());\n        row1.add(PROXY.getDocType());\n\n        var row2 = new KeyboardRow();\n        row2.add(CLAIM.getDocType());\n        row2.add(ACT.getDocType());\n        row2.add(VOUCHER.getDocType());\n\n        var row3 = new KeyboardRow();\n        row3.add(CUSTOMER.getDocType());\n\n        return ReplyKeyboardMarkup.builder()\n                .keyboard(Arrays.asList(row1, row2, row3))\n                .resizeKeyboard(true)\n                .build();\n    }\n}", "\npublic class Keyboards {\n    public static ReplyKeyboardMarkup mainKeyboard() {\n        var row1 = new KeyboardRow();\n        row1.add(CONTRACT.getDocType());\n        row1.add(PROXY.getDocType());\n\n        var row2 = new KeyboardRow();\n        row2.add(CLAIM.getDocType());\n        row2.add(ACT.getDocType());\n        row2.add(VOUCHER.getDocType());\n\n        var row3 = new KeyboardRow();\n        row3.add(CUSTOMER.getDocType());\n\n        return ReplyKeyboardMarkup.builder()\n                .keyboard(Arrays.asList(row1, row2, row3))\n                .resizeKeyboard(true)\n                .build();\n    }\n}"]}
{"filename": "src/main/java/org/example/component/BotCommands.java", "chunked_list": ["package org.example.component;\n\nimport org.telegram.telegrambots.meta.api.objects.commands.BotCommand;\n\nimport java.util.List;\n\npublic interface BotCommands {\n    List<BotCommand> LIST_OF_COMMAND = List.of(\n            new BotCommand(\"/start\", \"start bot\"),\n            new BotCommand(\"/key\", \"show documents\"),\n            new BotCommand(\"/help\", \"bot info\"),\n            new BotCommand(\"/info\", \"show count users\"),\n            new BotCommand(\"/donate\", \"thank me\")\n    );\n}"]}
{"filename": "src/main/java/org/example/component/enums/DocumentType.java", "chunked_list": ["package org.example.component.enums;\n\npublic enum DocumentType {\n    CONTRACT(\"\u0414\u043e\u0433\u043e\u0432\u043e\u0440\u044b\"),\n    ACT(\"\u0410\u043a\u0442\u044b\"),\n    PROXY(\"\u0414\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438\"),\n    CLAIM(\"\u0421\u0443\u0434\u0435\u0431\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b\"),\n    VOUCHER(\"\u0420\u0430\u0441\u043f\u0438\u0441\u043a\u0438\"),\n    CUSTOMER(\"\u0417\u0430\u0449\u0438\u0442\u0430 \u043f\u0440\u0430\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439\");\n\n    private final String docType;\n\n    DocumentType(String docType) {\n        this.docType = docType;\n    }\n", "    public String getDocType() {\n        return docType;\n    }\n}"]}
{"filename": "src/main/java/org/example/entity/BotUser.java", "chunked_list": ["package org.example.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Getter\n@Setter", "@Getter\n@Setter\n@Builder (toBuilder = true)\n@NoArgsConstructor\n@AllArgsConstructor\n@Table(name = \"bot_users\")\npublic class BotUser implements BotEntity{\n    @Id\n    private Long id;\n    private String firstName;\n    private String lastName;\n    private String userName;\n    private LocalDateTime dateCreate;\n    private Long countVisits;\n}\n\n"]}
{"filename": "src/main/java/org/example/entity/DocumentInfo.java", "chunked_list": ["package org.example.entity;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Getter\n@Setter", "@Getter\n@Setter\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\n@Table(name = \"doc_info\")\npublic class DocumentInfo implements BotEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private Integer docIndex;\n    private String docName;\n    private String docPath;\n    private String docType;\n    private String description;\n    private LocalDateTime dateCreate;\n}"]}
{"filename": "src/main/java/org/example/entity/BotEntity.java", "chunked_list": ["package org.example.entity;\n\npublic interface BotEntity {\n    Long getId();\n}"]}
{"filename": "src/main/java/org/example/dao/BotUserDAO.java", "chunked_list": ["package org.example.dao;\n\nimport org.example.entity.BotUser;\n\nimport java.util.List;\n\npublic interface BotUserDAO {\n    List<BotUser> getAll();\n\n    BotUser getById(long id);\n\n    void save(BotUser user);\n\n    void update(BotUser user);\n\n    void delete(BotUser user);\n\n    void deleteAll();\n\n    List<BotUser> getByName(String name);\n    long getCount();\n}"]}
{"filename": "src/main/java/org/example/dao/DocumentDAO.java", "chunked_list": ["package org.example.dao;\n\nimport org.example.entity.DocumentInfo;\n\nimport java.util.List;\n\npublic interface DocumentDAO {\n    void save(DocumentInfo docInfo);\n\n    void saveAll(List<DocumentInfo> infoList);\n\n    DocumentInfo getById(long id);\n\n    DocumentInfo getByIndex(int docIndex);\n\n    List<DocumentInfo> getAllByType(String docType);\n\n    void update(DocumentInfo docInfo);\n\n    void delete(DocumentInfo docInfo);\n\n    void deleteAll();\n\n    long getCount();\n}"]}
{"filename": "src/main/java/org/example/dao/imp/AbstractDAO.java", "chunked_list": ["package org.example.dao.imp;\n\nimport org.example.config.HibernateConfig;\nimport org.example.entity.BotEntity;\nimport org.hibernate.HibernateException;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.Transaction;\nimport org.hibernate.query.Query;\n\npublic abstract class AbstractDAO {\n    protected SessionFactory sessionFactory;\n\n    protected void addEntity(BotEntity botEntity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            session.persist(botEntity);\n            transaction.commit();\n        } catch (Exception e) {", "import org.hibernate.query.Query;\n\npublic abstract class AbstractDAO {\n    protected SessionFactory sessionFactory;\n\n    protected void addEntity(BotEntity botEntity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            session.persist(botEntity);\n            transaction.commit();\n        } catch (Exception e) {", "            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n\n    protected BotEntity findEntityById(long id, BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        BotEntity botEntity = null;\n        try (Session session = sessionFactory.openSession()) {\n\n            botEntity = session.get(entity.getClass(), id);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return botEntity;\n    }\n\n    protected void updateEntity(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            session.merge(entity);\n            transaction.commit();\n        } catch (Exception e) {", "            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n\n    public void deleteEntity(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            session.remove(entity);\n            transaction.commit();\n        } catch (Exception e) {", "    public void deleteEntity(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            session.remove(entity);\n            transaction.commit();\n        } catch (Exception e) {\n            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n", "            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n\n    public void deleteAllEntity(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            Query<?> query = session.createQuery(\"delete from \" + entity.getClass().getSimpleName(), entity.getClass());\n            query.executeUpdate();\n            transaction.commit();\n        } catch (Exception e) {", "    public void deleteAllEntity(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            Query<?> query = session.createQuery(\"delete from \" + entity.getClass().getSimpleName(), entity.getClass());\n            query.executeUpdate();\n            transaction.commit();\n        } catch (Exception e) {\n            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n", "            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n\n    public long getEntityCount(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        try (Session session = sessionFactory.openSession()) {\n            Query<Long> query = session.createQuery(\"SELECT SUM (countVisits) FROM \" + entity.getClass().getSimpleName(), Long.class);\n            return query.getSingleResult();\n        } catch (HibernateException e) {\n            throw new RuntimeException(\"Failed to get \" + entity.getClass().getSimpleName() + \" count\", e);\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n}", "    public long getEntityCount(BotEntity entity) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        try (Session session = sessionFactory.openSession()) {\n            Query<Long> query = session.createQuery(\"SELECT SUM (countVisits) FROM \" + entity.getClass().getSimpleName(), Long.class);\n            return query.getSingleResult();\n        } catch (HibernateException e) {\n            throw new RuntimeException(\"Failed to get \" + entity.getClass().getSimpleName() + \" count\", e);\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n}"]}
{"filename": "src/main/java/org/example/dao/imp/BotUserDAOImp.java", "chunked_list": ["package org.example.dao.imp;\n\nimport org.example.config.HibernateConfig;\nimport org.example.dao.BotUserDAO;\nimport org.example.entity.BotUser;\nimport org.hibernate.Session;\nimport org.hibernate.query.Query;\n\nimport java.util.List;\n\npublic class BotUserDAOImp extends AbstractDAO implements BotUserDAO {\n    @Override\n    public List<BotUser> getAll() {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        List<BotUser> users = null;\n        try (Session session = sessionFactory.openSession()) {\n            Query<BotUser> query = session.createQuery(\"from BotUser \", BotUser.class);\n            users = query.list();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return users;\n    }\n\n    @Override", "import java.util.List;\n\npublic class BotUserDAOImp extends AbstractDAO implements BotUserDAO {\n    @Override\n    public List<BotUser> getAll() {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        List<BotUser> users = null;\n        try (Session session = sessionFactory.openSession()) {\n            Query<BotUser> query = session.createQuery(\"from BotUser \", BotUser.class);\n            users = query.list();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return users;\n    }\n\n    @Override", "    public BotUser getById(long id) {\n        return (BotUser) findEntityById(id, new BotUser());\n    }\n\n    @Override\n    public void save(BotUser user) {\n        addEntity(user);\n    }\n\n    @Override\n    public void update(BotUser user) {\n        updateEntity(user);\n    }\n\n    @Override", "    public void update(BotUser user) {\n        updateEntity(user);\n    }\n\n    @Override\n    public void delete(BotUser user) {\n        deleteEntity(user);\n    }\n\n    @Override\n    public void deleteAll() {\n        deleteAllEntity(new BotUser());\n    }\n\n    @Override\n    public List<BotUser> getByName(String name) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        List<BotUser> users = null;\n        try (Session session = sessionFactory.openSession()) {\n            Query<BotUser> query = session.createQuery(\"from BotUser where userName like :searchName\", BotUser.class);\n            query.setParameter(\"searchName\", \"%\" + name + \"%\");\n            users = query.list();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return users;\n    }\n\n    @Override", "    public void deleteAll() {\n        deleteAllEntity(new BotUser());\n    }\n\n    @Override\n    public List<BotUser> getByName(String name) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        List<BotUser> users = null;\n        try (Session session = sessionFactory.openSession()) {\n            Query<BotUser> query = session.createQuery(\"from BotUser where userName like :searchName\", BotUser.class);\n            query.setParameter(\"searchName\", \"%\" + name + \"%\");\n            users = query.list();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return users;\n    }\n\n    @Override", "    public long getCount() {\n        return getEntityCount(new BotUser());\n    }\n}"]}
{"filename": "src/main/java/org/example/dao/imp/DocumentDAOImp.java", "chunked_list": ["package org.example.dao.imp;\n\nimport org.example.config.HibernateConfig;\nimport org.example.dao.DocumentDAO;\nimport org.example.entity.DocumentInfo;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\nimport org.hibernate.query.Query;\n\nimport java.util.List;", "\nimport java.util.List;\n\npublic class DocumentDAOImp extends AbstractDAO implements DocumentDAO {\n    @Override\n    public void save(DocumentInfo docInfo) {\n        addEntity(docInfo);\n    }\n\n    @Override\n    public void saveAll(List<DocumentInfo> infoList) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            infoList.forEach(session::persist);\n            transaction.commit();\n        } catch (Exception e) {", "    public void saveAll(List<DocumentInfo> infoList) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        Transaction transaction = null;\n\n        try (Session session = sessionFactory.openSession()) {\n            transaction = session.beginTransaction();\n\n            infoList.forEach(session::persist);\n            transaction.commit();\n        } catch (Exception e) {\n            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n\n    @Override", "            if (transaction != null) {\n                transaction.rollback();\n            }\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n    }\n\n    @Override\n    public DocumentInfo getById(long id) {\n        return (DocumentInfo) findEntityById(id, new DocumentInfo());\n    }\n\n    @Override", "    public DocumentInfo getById(long id) {\n        return (DocumentInfo) findEntityById(id, new DocumentInfo());\n    }\n\n    @Override\n    public DocumentInfo getByIndex(int docIndex) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        DocumentInfo documentInfo = null;\n        try (Session session = sessionFactory.openSession()) {\n            Query<DocumentInfo> query = session.createQuery(\"from DocumentInfo where docIndex=:fIndex\", DocumentInfo.class);\n            query.setParameter(\"fIndex\", docIndex);\n            documentInfo = query.getSingleResult();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return documentInfo;\n    }\n\n    @Override\n    public List<DocumentInfo> getAllByType(String docType) {\n        sessionFactory = HibernateConfig.getSessionFactory();\n        List<DocumentInfo> documentsInfo = null;\n        try (Session session = sessionFactory.openSession()) {\n            Query<DocumentInfo> query = session.createQuery(\"from DocumentInfo where docType like :type\", DocumentInfo.class);\n            query.setParameter(\"type\", \"%\" + docType + \"%\");\n            documentsInfo = query.list();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            this.sessionFactory = null;\n        }\n        return documentsInfo;\n    }\n\n    @Override", "    public void update(DocumentInfo docInfo) {\n        updateEntity(docInfo);\n    }\n\n    @Override\n    public void delete(DocumentInfo docInfo) {\n        deleteEntity(docInfo);\n    }\n\n    @Override\n    public void deleteAll() {\n        deleteAllEntity(new DocumentInfo());\n    }\n\n    @Override", "    public void deleteAll() {\n        deleteAllEntity(new DocumentInfo());\n    }\n\n    @Override\n    public long getCount() {\n        return getEntityCount(new DocumentInfo());\n    }\n}"]}
{"filename": "src/main/java/org/example/config/HibernateConfig.java", "chunked_list": ["package org.example.config;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.SessionFactory;\nimport org.hibernate.boot.Metadata;\nimport org.hibernate.boot.MetadataSources;\nimport org.hibernate.boot.registry.StandardServiceRegistry;\nimport org.hibernate.boot.registry.StandardServiceRegistryBuilder;\n\npublic class HibernateConfig {\n    private static final SessionFactory sessionFactory;\n\n    static {", "\npublic class HibernateConfig {\n    private static final SessionFactory sessionFactory;\n\n    static {\n        try {\n            StandardServiceRegistry registry = new StandardServiceRegistryBuilder()\n                    .configure(\"hibernate.cfg.xml\").build();\n            Metadata metadata = new MetadataSources(registry).getMetadataBuilder().build();\n            sessionFactory = metadata.getSessionFactoryBuilder().build();\n        } catch (Throwable ex) {\n            throw new ExceptionInInitializerError(ex);\n        }\n    }\n", "    public static SessionFactory getSessionFactory() throws HibernateException {\n        return sessionFactory;\n    }\n}"]}
{"filename": "src/main/java/org/example/command/Command.java", "chunked_list": ["package org.example.command;\n\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\npublic interface Command {\n    void execute(HandlerContext context, Message message);\n}"]}
{"filename": "src/main/java/org/example/command/imp/InfoCommand.java", "chunked_list": ["package org.example.command.imp;\n\nimport org.example.command.Command;\nimport org.example.handler.HandlerContext;\nimport org.example.service.BotUserService;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\nimport static org.example.bot.settings.StringConst.VISIT;\n\npublic class InfoCommand implements Command {\n    private final BotUserService botUserService;\n\n    public InfoCommand(BotUserService botUserService) {\n        this.botUserService = botUserService;\n    }\n\n    @Override", "\npublic class InfoCommand implements Command {\n    private final BotUserService botUserService;\n\n    public InfoCommand(BotUserService botUserService) {\n        this.botUserService = botUserService;\n    }\n\n    @Override\n    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n\n        var response = \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0439 \" + VISIT + \" \" + botUserService.getUserCount();\n        context.getMessageSenderService().sendMessage(userFrom.getId(), response);\n    }\n}\n", "    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n\n        var response = \"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u0439 \" + VISIT + \" \" + botUserService.getUserCount();\n        context.getMessageSenderService().sendMessage(userFrom.getId(), response);\n    }\n}\n"]}
{"filename": "src/main/java/org/example/command/imp/DonateCommand.java", "chunked_list": ["package org.example.command.imp;\n\nimport org.example.command.Command;\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\nimport static org.example.bot.settings.StringConst.DOG;\n\npublic class DonateCommand implements Command {\n    public final static String DOG_SHELTER = \"\u0425\u043e\u0447\u0435\u0448\u044c \u043c\u0435\u043d\u044f \u043e\u0442\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0438\u0442\u044c?\\n\" +\n            \"\u041f\u043e\u043c\u043e\u0433\u0438 \u0424\u043e\u043d\u0434\u0443\\n<a href=\\\"https://donate.priut.ru\\\">\u041f\u043e\u043c\u043e\u0449\u044c \u0431\u0435\u0437\u0434\u043e\u043c\u043d\u044b\u043c \u0441\u043e\u0431\u0430\u043a\u0430\u043c</a> \" + DOG;\n\n    @Override", "\npublic class DonateCommand implements Command {\n    public final static String DOG_SHELTER = \"\u0425\u043e\u0447\u0435\u0448\u044c \u043c\u0435\u043d\u044f \u043e\u0442\u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u0438\u0442\u044c?\\n\" +\n            \"\u041f\u043e\u043c\u043e\u0433\u0438 \u0424\u043e\u043d\u0434\u0443\\n<a href=\\\"https://donate.priut.ru\\\">\u041f\u043e\u043c\u043e\u0449\u044c \u0431\u0435\u0437\u0434\u043e\u043c\u043d\u044b\u043c \u0441\u043e\u0431\u0430\u043a\u0430\u043c</a> \" + DOG;\n\n    @Override\n    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n\n        context.getMessageSenderService().sendMessage(SendMessage.builder()\n                .chatId(userFrom.getId())\n                .text(DOG_SHELTER)\n                .parseMode(\"html\")\n                .build());\n    }\n}"]}
{"filename": "src/main/java/org/example/command/imp/HelpCommand.java", "chunked_list": ["package org.example.command.imp;\n\nimport org.example.command.Command;\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\npublic class HelpCommand implements Command {\n\n    @Override\n    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n\n        var response = \"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434:\\n\\n\" +\n                \"/start - \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0431\u043e\u0442\u0430\\n/key - \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443\\n\" +\n                \"/donate - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\\n/help - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\";\n\n        context.getMessageSenderService().sendMessage(userFrom.getId(), response);\n    }\n}", "    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n\n        var response = \"\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434:\\n\\n\" +\n                \"/start - \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u044c \u0431\u043e\u0442\u0430\\n/key - \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443\\n\" +\n                \"/donate - \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\\n/help - \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043c\u0430\u043d\u0434\";\n\n        context.getMessageSenderService().sendMessage(userFrom.getId(), response);\n    }\n}"]}
{"filename": "src/main/java/org/example/command/imp/KeyCommand.java", "chunked_list": ["package org.example.command.imp;\n\nimport org.example.command.Command;\nimport org.example.component.Keyboards;\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\nimport static org.example.bot.settings.StringConst.DOWN;\n\npublic class KeyCommand implements Command {\n    private static final String CHOOSE = \"\u041d\u0430 \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0435\u0439\u0441\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435 \u0432\u044b\u0431\u0435\u0440\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u0432\u0438\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \" + DOWN;\n\n    @Override", "import static org.example.bot.settings.StringConst.DOWN;\n\npublic class KeyCommand implements Command {\n    private static final String CHOOSE = \"\u041d\u0430 \u043f\u043e\u044f\u0432\u0438\u0432\u0448\u0435\u0439\u0441\u044f \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435 \u0432\u044b\u0431\u0435\u0440\u0438 \u043d\u0443\u0436\u043d\u044b\u0439 \u0432\u0438\u0434 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \" + DOWN;\n\n    @Override\n    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n\n        context.getMessageSenderService().sendMessage(SendMessage.builder()\n                .chatId(userFrom.getId())\n                .text(CHOOSE)\n                .replyMarkup(Keyboards.mainKeyboard())\n                .build());\n    }\n}"]}
{"filename": "src/main/java/org/example/command/imp/UnknownCommand.java", "chunked_list": ["package org.example.command.imp;\n\nimport org.example.command.Command;\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\nimport static org.example.bot.settings.StringConst.UNKNOWN;\n\npublic class UnknownCommand implements Command {\n\n    @Override", "public class UnknownCommand implements Command {\n\n    @Override\n    public void execute(HandlerContext context, Message message) {\n        var userFrom = message.getFrom();\n        context.getMessageSenderService().sendMessage(userFrom.getId(), UNKNOWN);\n    }\n}"]}
{"filename": "src/main/java/org/example/command/imp/StartCommand.java", "chunked_list": ["package org.example.command.imp;\n\nimport org.example.command.Command;\nimport org.example.entity.BotUser;\nimport org.example.handler.HandlerContext;\nimport org.example.service.BotUserService;\nimport org.telegram.telegrambots.meta.api.objects.Message;\nimport org.telegram.telegrambots.meta.api.objects.User;\n\nimport java.time.LocalDateTime;", "\nimport java.time.LocalDateTime;\n\nimport static org.example.bot.settings.StringConst.HI;\n\npublic class StartCommand implements Command {\n    private final BotUserService botUserService;\n    public final static String HELLO_MSG = \"! \" + HI + \"\\n\u042d\u0442\u043e\u0442 \u0431\u043e\u0442 \u0437\u043d\u0430\u0435\u0442 \u0444\u043e\u0440\u043c\u044b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432,\" +\n            \"\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0435\u0431\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u044c\u0441\u044f.\" +\n            \"\\n\u0412\u0432\u0435\u0434\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /key\";\n\n    public StartCommand(BotUserService botUserService) {\n        this.botUserService = botUserService;\n    }\n\n    @Override", "    public void execute(HandlerContext context, Message message) {\n        User userFrom = message.getFrom();\n\n        BotUser botUser = botUserService.findById(userFrom.getId());\n\n        if (botUser == null) {\n           botUser = BotUser.builder()\n                   .id(userFrom.getId())\n                   .firstName(userFrom.getFirstName())\n                   .lastName(userFrom.getLastName())\n                   .userName(userFrom.getUserName())\n                   .dateCreate(LocalDateTime.now())\n                   .countVisits(1L)\n                   .build();\n\n            botUserService.add(botUser);\n        }\n        else {\n            botUser.setCountVisits(botUser.getCountVisits() + 1);\n            botUserService.update(botUser);\n        }\n\n        var response = \"\u041f\u0440\u0438\u0432\u0435\u0442, \" + userFrom.getFirstName() + HELLO_MSG;\n        context.getMessageSenderService().sendMessage(userFrom.getId(), response);\n    }\n}\n"]}
{"filename": "src/main/java/org/example/command/enums/CommandName.java", "chunked_list": ["package org.example.command.enums;\n\npublic enum CommandName {\n    START(\"/start\"),\n    KEY(\"/key\"),\n    INFO(\"/info\"),\n    DONATE(\"/donate\"),\n    HELP(\"/help\");\n\n    private final String commandName;\n\n    CommandName(String commandName) {\n        this.commandName = commandName;\n    }\n", "    public String getCommandName() {\n        return commandName;\n    }\n}"]}
{"filename": "src/main/java/org/example/handler/HandlerContext.java", "chunked_list": ["package org.example.handler;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.example.bot.Bot;\nimport org.example.handler.handlers.CommandHandler;\nimport org.example.handler.handlers.DocumentHandler;\nimport org.example.handler.handlers.TextHandler;\nimport org.example.service.CommandService;\nimport org.example.service.DocumentService;", "import org.example.service.CommandService;\nimport org.example.service.DocumentService;\nimport org.example.service.MessageSenderService;\nimport org.example.service.imp.CommandServiceImp;\nimport org.example.service.imp.DocumentServiceImp;\nimport org.example.service.imp.MessageSenderServiceImp;\nimport org.telegram.telegrambots.meta.api.objects.Update;\n\n@Getter\npublic class HandlerContext {\n    private final BaseHandler textHandler;\n    private final BaseHandler commandHandler;\n    private final BaseHandler documentHandler;\n    private final MessageSenderService messageSenderService;\n\n    @Setter\n    private BaseHandler handler;\n\n    public HandlerContext(Bot bot) {\n        CommandService commandService = CommandServiceImp.getInstance();\n        DocumentService documentService = DocumentServiceImp.getInstance();\n\n        this.textHandler = new TextHandler(this, documentService);\n        this.commandHandler = new CommandHandler(this, commandService);\n        this.documentHandler = new DocumentHandler(this);\n        this.messageSenderService = new MessageSenderServiceImp(bot);\n    }\n", "@Getter\npublic class HandlerContext {\n    private final BaseHandler textHandler;\n    private final BaseHandler commandHandler;\n    private final BaseHandler documentHandler;\n    private final MessageSenderService messageSenderService;\n\n    @Setter\n    private BaseHandler handler;\n\n    public HandlerContext(Bot bot) {\n        CommandService commandService = CommandServiceImp.getInstance();\n        DocumentService documentService = DocumentServiceImp.getInstance();\n\n        this.textHandler = new TextHandler(this, documentService);\n        this.commandHandler = new CommandHandler(this, commandService);\n        this.documentHandler = new DocumentHandler(this);\n        this.messageSenderService = new MessageSenderServiceImp(bot);\n    }\n", "    public void handling(Update update) {\n        handler.handling(update.getMessage());\n    }\n}"]}
{"filename": "src/main/java/org/example/handler/AbstractHandler.java", "chunked_list": ["package org.example.handler;\n\nimport org.example.entity.DocumentInfo;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\n\npublic abstract class AbstractHandler implements BaseHandler {\n    protected final HandlerContext context;\n\n    protected AbstractHandler(HandlerContext context) {\n        this.context = context;\n    }\n\n    protected void executeDocument(long chatId, DocumentInfo docInfo) {\n        context.getMessageSenderService().sendDocument(chatId, docInfo);\n    }\n\n    protected void executeMessage(long chatId, String message) {\n        context.getMessageSenderService().sendMessage(chatId, message);\n    }\n\n    protected void executeMessage(SendMessage sendMessage) {\n        context.getMessageSenderService().sendMessage(sendMessage);\n    }\n}"]}
{"filename": "src/main/java/org/example/handler/BaseHandler.java", "chunked_list": ["package org.example.handler;\n\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\npublic interface BaseHandler {\n    void handling(Message message);\n}"]}
{"filename": "src/main/java/org/example/handler/handlers/DocumentHandler.java", "chunked_list": ["package org.example.handler.handlers;\n\nimport org.example.handler.AbstractHandler;\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\npublic class DocumentHandler extends AbstractHandler {\n    public DocumentHandler(HandlerContext context) {\n        super(context);\n    }\n\n    @Override", "    public void handling(Message message) {\n        var userFrom = message.getFrom();\n\n        executeMessage(SendMessage.builder()\n                .chatId(userFrom.getId())\n                .text(\"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0435\u0449\u0435 \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435...\")\n                .build());\n    }\n}"]}
{"filename": "src/main/java/org/example/handler/handlers/CommandHandler.java", "chunked_list": ["package org.example.handler.handlers;\n\nimport org.example.handler.AbstractHandler;\nimport org.example.handler.HandlerContext;\nimport org.example.service.CommandService;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\npublic class CommandHandler extends AbstractHandler {\n    private final CommandService commandService;\n\n    public CommandHandler(HandlerContext context,\n                          CommandService commandService) {\n        super(context);\n        this.commandService = commandService;\n    }\n\n    @Override", "    public void handling(Message message) {\n        commandService.retrieveCommand(message.getText()).execute(context, message);\n    }\n}"]}
{"filename": "src/main/java/org/example/handler/handlers/TextHandler.java", "chunked_list": ["package org.example.handler.handlers;\n\nimport org.example.handler.AbstractHandler;\nimport org.example.handler.HandlerContext;\nimport org.example.service.DocumentService;\nimport org.telegram.telegrambots.meta.api.objects.Message;\n\nimport static org.example.bot.settings.StringConst.CLIP;\nimport static org.example.bot.settings.StringConst.UNKNOWN;\n\npublic class TextHandler extends AbstractHandler {\n    private final DocumentService documentService;\n\n    public TextHandler(HandlerContext context, DocumentService documentService) {\n        super(context);\n        this.documentService = documentService;\n    }\n\n    @Override", "import static org.example.bot.settings.StringConst.UNKNOWN;\n\npublic class TextHandler extends AbstractHandler {\n    private final DocumentService documentService;\n\n    public TextHandler(HandlerContext context, DocumentService documentService) {\n        super(context);\n        this.documentService = documentService;\n    }\n\n    @Override", "    public void handling(Message message) {\n        var userFrom = message.getFrom();\n        var text = message.getText();\n\n        try {\n            int docIndex = Integer.parseInt(text);\n            var docInfo = documentService.getByIndex(docIndex);\n\n            if (docInfo != null) {\n                //\u042d\u0442\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u0435\u0449\u0435 \u043d\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u0431\u0430\u0437\u044b \u0438\u043d\u0444\u0443 \u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435\n//                String builder = \"id: \" + docInfo.getId() +\n//                        \"\\nindex: \" + docInfo.getDocIndex() +\n//                        \"\\nname: \" + docInfo.getDocName() +\n//                        \"\\ntype: \" + docInfo.getDocType() +\n//                        \"\\ndescription: \" + docInfo.getDescription() +\n//                        \"\\ndate: \" + docInfo.getDateCreate().format(DateTimeFormatter.ofPattern(\"dd.MM.yyyy\")) +\n//                        \"\\npath: \" + docInfo.getDocPath();\n//\n//                executeMessage(userFrom.getId(), builder);\n\n                executeDocument(userFrom.getId(), docInfo);\n                return;\n            }\n\n        } catch (NumberFormatException ex) {\n            ex.printStackTrace();\n\n            String header = \"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u044c \u043d\u043e\u043c\u0435\u0440, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0440\u044f\u0434\u043e\u043c \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439:\\n\\n\";\n            String response = docTypeHandler(text);\n", "            if (docInfo != null) {\n                //\u042d\u0442\u043e \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430, \u043a\u043e\u0433\u0434\u0430 \u0435\u0449\u0435 \u043d\u0435\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438, \u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0437 \u0431\u0430\u0437\u044b \u0438\u043d\u0444\u0443 \u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435\n//                String builder = \"id: \" + docInfo.getId() +\n//                        \"\\nindex: \" + docInfo.getDocIndex() +\n//                        \"\\nname: \" + docInfo.getDocName() +\n//                        \"\\ntype: \" + docInfo.getDocType() +\n//                        \"\\ndescription: \" + docInfo.getDescription() +\n//                        \"\\ndate: \" + docInfo.getDateCreate().format(DateTimeFormatter.ofPattern(\"dd.MM.yyyy\")) +\n//                        \"\\npath: \" + docInfo.getDocPath();\n//\n//                executeMessage(userFrom.getId(), builder);\n\n                executeDocument(userFrom.getId(), docInfo);\n                return;\n            }\n\n        } catch (NumberFormatException ex) {\n            ex.printStackTrace();\n\n            String header = \"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u044c \u043d\u043e\u043c\u0435\u0440, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0440\u044f\u0434\u043e\u043c \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u043e\u0439:\\n\\n\";\n            String response = docTypeHandler(text);\n", "            if (response != null) {\n                executeMessage(userFrom.getId(), header + response);\n                return;\n            }\n        }\n        executeMessage(userFrom.getId(), UNKNOWN);\n    }\n\n    private String docTypeHandler(String text) {\n        var docInfoList = documentService.getAllByType(text);\n", "        if (docInfoList != null && !docInfoList.isEmpty()) {\n            StringBuilder builder = new StringBuilder();\n\n            docInfoList.forEach(docInf -> builder.append(CLIP)\n                    .append(\" \")\n                    .append(docInf.getDocIndex())\n                    .append(\" - \")\n                    .append(docInf.getDocName())\n                    .append(\"\\n\"));\n\n            return builder.toString().trim();\n        }\n        return null;\n    }\n}"]}
{"filename": "src/main/java/org/example/util/DocumentInfoSaver.java", "chunked_list": ["package org.example.util;\n\nimport org.example.bot.settings.ConfigSettings;\nimport org.example.dao.DocumentDAO;\nimport org.example.entity.DocumentInfo;\n\nimport java.util.List;\n\npublic class DocumentInfoSaver {\n    private final String ROOT;\n    private final DocumentDAO documentDAO;\n    private static final String ACTS = \"acts/\";\n    private static final String CLAIMS = \"claims/\";\n    private static final String CONTRACTS = \"contracts/\";\n    private static final String CUSTOMER = \"customer/\";\n    private static final String PROXY = \"proxy/\";\n    private static final String VOUCHERS = \"vouchers/\";\n\n\n    public DocumentInfoSaver(DocumentDAO documentDAO) {\n        this.documentDAO = documentDAO;\n        this.ROOT = ConfigSettings.getInstance().getDocPath();\n    }\n", "public class DocumentInfoSaver {\n    private final String ROOT;\n    private final DocumentDAO documentDAO;\n    private static final String ACTS = \"acts/\";\n    private static final String CLAIMS = \"claims/\";\n    private static final String CONTRACTS = \"contracts/\";\n    private static final String CUSTOMER = \"customer/\";\n    private static final String PROXY = \"proxy/\";\n    private static final String VOUCHERS = \"vouchers/\";\n\n\n    public DocumentInfoSaver(DocumentDAO documentDAO) {\n        this.documentDAO = documentDAO;\n        this.ROOT = ConfigSettings.getInstance().getDocPath();\n    }\n", "    public void saveDocumentInfo(List<DocumentInfo> list) {\n        pathUpdater(list);\n        documentDAO.saveAll(list);\n    }\n\n    private void pathUpdater(List<DocumentInfo> list) {\n        list.forEach(docInfo -> {\n            switch (docInfo.getDocType()) {\n                case \"\u0410\u043a\u0442\u044b\":\n                    docInfo.setDocPath(ROOT + ACTS + docInfo.getDocPath());\n                    break;\n\n                case \"\u0421\u0443\u0434\u0435\u0431\u043d\u044b\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b\":\n                    docInfo.setDocPath(ROOT + CLAIMS + docInfo.getDocPath());\n                    break;\n\n                case \"\u0414\u043e\u0433\u043e\u0432\u043e\u0440\u044b\":\n                    docInfo.setDocPath(ROOT + CONTRACTS + docInfo.getDocPath());\n                    break;\n\n                case \"\u0417\u0430\u0449\u0438\u0442\u0430 \u043f\u0440\u0430\u0432 \u043f\u043e\u0442\u0440\u0435\u0431\u0438\u0442\u0435\u043b\u0435\u0439\":\n                    docInfo.setDocPath(ROOT + CUSTOMER + docInfo.getDocPath());\n                    break;\n\n                case \"\u0414\u043e\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438\":\n                    docInfo.setDocPath(ROOT + PROXY + docInfo.getDocPath());\n                    break;\n\n                case \"\u0420\u0430\u0441\u043f\u0438\u0441\u043a\u0438\":\n                    docInfo.setDocPath(ROOT + VOUCHERS + docInfo.getDocPath());\n            }\n        });\n    }\n}"]}
{"filename": "src/main/java/org/example/util/ParserJson.java", "chunked_list": ["package org.example.util;\n\nimport org.example.bot.settings.ConfigSettings;\nimport org.example.entity.DocumentInfo;\nimport org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\n\nimport java.nio.file.Files;\nimport java.nio.file.Paths;", "import java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SuppressWarnings(\"unchecked\")\npublic class ParserJson {\n    private final String JSON_DOC;\n\n    public ParserJson() {\n        this.JSON_DOC = ConfigSettings.getInstance().getJsonPath();\n    }\n\n    public List<DocumentInfo> getDocumentInfoList() {\n        List<DocumentInfo> infoList = new ArrayList<>();\n", "        try {\n            JSONParser parser = new JSONParser();\n            JSONObject jsonData = (JSONObject) parser.parse(getJsonFile());\n\n            ((JSONArray) jsonData.get(\"documents\")).forEach(docObj -> {\n                JSONObject jsonObject = (JSONObject) docObj;\n\n                var docIndex = ((Long) jsonObject.get(\"docIndex\")).intValue();\n                var docName = (String) jsonObject.get(\"docName\");\n                var docPath = (String) jsonObject.get(\"docPath\");\n                var docType = (String) jsonObject.get(\"docType\");\n\n                infoList.add(DocumentInfo.builder()\n                        .docIndex(docIndex)\n                        .docName(docName)\n                        .docPath(docPath)\n                        .docType(docType)\n                        .dateCreate(LocalDateTime.now())\n                        .build());\n            });\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return infoList;\n    }\n\n    private String getJsonFile() {\n        StringBuilder builder = new StringBuilder();", "        try {\n            List<String> lines = Files.readAllLines(Paths.get(JSON_DOC));\n            lines.forEach(builder::append);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n        return builder.toString();\n    }\n}"]}
{"filename": "src/main/java/org/example/bot/Bot.java", "chunked_list": ["package org.example.bot;\n\nimport org.example.bot.settings.ConfigSettings;\nimport org.example.bot.settings.Logger;\nimport org.example.handler.HandlerContext;\nimport org.telegram.telegrambots.bots.TelegramLongPollingBot;\nimport org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;\nimport org.telegram.telegrambots.meta.api.methods.send.SendDocument;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;", "import org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\n\nimport static org.example.bot.settings.StringConst.UNKNOWN;\nimport static org.example.component.BotCommands.LIST_OF_COMMAND;\n\npublic class Bot extends TelegramLongPollingBot {\n    public final Logger logger;\n    private HandlerContext context;\n    private final ConfigSettings settings;\n\n    public Bot() {\n        this.logger = new Logger();\n        this.settings = ConfigSettings.getInstance();\n    }\n", "public class Bot extends TelegramLongPollingBot {\n    public final Logger logger;\n    private HandlerContext context;\n    private final ConfigSettings settings;\n\n    public Bot() {\n        this.logger = new Logger();\n        this.settings = ConfigSettings.getInstance();\n    }\n\n    public void init() throws TelegramApiException {\n        this.context = new HandlerContext(this);\n        execute(new SetMyCommands(LIST_OF_COMMAND, new BotCommandScopeDefault(), null));\n    }\n\n    @Override", "    public void init() throws TelegramApiException {\n        this.context = new HandlerContext(this);\n        execute(new SetMyCommands(LIST_OF_COMMAND, new BotCommandScopeDefault(), null));\n    }\n\n    @Override\n    public String getBotUsername() {\n        return settings.getBotName();\n    }\n\n    @Override", "    public String getBotToken() {\n        return settings.getBotToken();\n    }\n\n    @Override\n    public void onUpdateReceived(Update update) {\n        if (update == null) {\n            return;\n        }\n\n        if (update.hasMessage()) {\n            var message = update.getMessage();\n", "        if (update.hasMessage()) {\n            var message = update.getMessage();\n\n            if (message.hasText()) {\n                var text = message.getText();\n\n                if (text.startsWith(\"/\")) {\n                    context.setHandler(context.getCommandHandler());\n                } else {\n                    context.setHandler(context.getTextHandler());\n                }", "            } else if (message.hasDocument()) {\n                context.setHandler(context.getDocumentHandler());\n            } else {\n                sendMessage(SendMessage.builder()\n                        .chatId(message.getChatId())\n                        .text(UNKNOWN)\n                        .build());\n                return;\n            }\n            context.handling(update);\n        }\n    }\n", "    public void sendMessage(SendMessage response) {\n        try {\n            execute(response);\n        } catch (TelegramApiException ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    public void sendMessage(SendDocument response) {\n        try {\n            execute(response);\n        } catch (TelegramApiException ex) {\n            ex.printStackTrace();\n        }\n    }\n}", "    public void sendMessage(SendDocument response) {\n        try {\n            execute(response);\n        } catch (TelegramApiException ex) {\n            ex.printStackTrace();\n        }\n    }\n}"]}
{"filename": "src/main/java/org/example/bot/settings/StringConst.java", "chunked_list": ["package org.example.bot.settings;\n\nimport com.vdurmont.emoji.EmojiParser;\n\npublic class StringConst {\n    public final static String HI = EmojiParser.parseToUnicode(\":wink:\");\n    public final static String DOWN = EmojiParser.parseToUnicode(\":point_down:\");\n    public final static String THINKING = EmojiParser.parseToUnicode(\":thinking:\");\n    public final static String CLIP = EmojiParser.parseToUnicode(\":paperclip:\");\n    public final static String VISIT = EmojiParser.parseToUnicode(\":point_right:\");\n", "    public final static String CLIP = EmojiParser.parseToUnicode(\":paperclip:\");\n    public final static String VISIT = EmojiParser.parseToUnicode(\":point_right:\");\n\n    public final static String HANDS = EmojiParser.parseToUnicode(\":handshake:\");\n    public final static String DOG = EmojiParser.parseToUnicode(\":dog:\");\n\n    public final static String UNKNOWN = \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441... \" + THINKING;\n}"]}
{"filename": "src/main/java/org/example/bot/settings/Logger.java", "chunked_list": ["package org.example.bot.settings;\n\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Logger {\n    public void log(String txt) {\n\n        DateFormat dateFormat = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\");\n        Date date = new Date();\n        System.out.print(dateFormat.format(date));\n        System.out.println(\", \" + txt + \"\\n\");\n    }\n}"]}
{"filename": "src/main/java/org/example/bot/settings/ConfigSettings.java", "chunked_list": ["package org.example.bot.settings;\n\nimport lombok.Data;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\n@Data\npublic class ConfigSettings {\n    private String botToken;\n    private String botName;\n    private String docPath;\n    private String jsonPath;\n    private Properties properties;\n    private static volatile ConfigSettings instance;\n    private static final String FILE_NAME = \"config.properties\";\n\n    private ConfigSettings() {\n    }\n", "@Data\npublic class ConfigSettings {\n    private String botToken;\n    private String botName;\n    private String docPath;\n    private String jsonPath;\n    private Properties properties;\n    private static volatile ConfigSettings instance;\n    private static final String FILE_NAME = \"config.properties\";\n\n    private ConfigSettings() {\n    }\n", "    public static ConfigSettings getInstance() {\n        if (instance == null) {\n            synchronized (ConfigSettings.class) {\n                if (instance == null) {\n                    instance = new ConfigSettings();\n                }\n            }\n        }\n        return instance;\n    }\n\n    {", "        try {\n            properties = new Properties();\n\n            try (InputStream inputStream = getClass().getClassLoader().getResourceAsStream(FILE_NAME)) {\n                properties.load(inputStream);\n            } catch (IOException e) {\n                throw new IOException(String.format(\"Error loading properties file '%s'\", FILE_NAME));\n            }\n\n            botToken = properties.getProperty(\"token\");\n            if (botToken == null) {\n                throw new RuntimeException(\"Token value is null\");\n            }\n\n            botName = properties.getProperty(\"username\");", "            if (botToken == null) {\n                throw new RuntimeException(\"Token value is null\");\n            }\n\n            botName = properties.getProperty(\"username\");\n            if (botName == null) {\n                throw new RuntimeException(\"UserName value is null\");\n            }\n\n            docPath = properties.getProperty(\"doc.path\");\n            if (docPath == null) {\n                throw new RuntimeException(\"Doc path is null\");\n            }\n\n            jsonPath = properties.getProperty(\"json.path\");", "            if (docPath == null) {\n                throw new RuntimeException(\"Doc path is null\");\n            }\n\n            jsonPath = properties.getProperty(\"json.path\");\n            if (jsonPath == null) {\n                throw new RuntimeException(\"Json path is null\");\n            }\n\n        } catch (RuntimeException | IOException e) {\n            throw new RuntimeException(\"Bot initialisation error: \" + e.getMessage());\n        }\n    }\n}"]}
{"filename": "src/main/java/org/example/service/MessageSenderService.java", "chunked_list": ["package org.example.service;\n\nimport org.example.entity.DocumentInfo;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\n\npublic interface MessageSenderService {\n    void sendMessage(SendMessage response);\n\n    void sendDocument(long chatId, DocumentInfo docInfo);\n\n    void sendMessage(long chatId, String message);\n}"]}
{"filename": "src/main/java/org/example/service/CommandService.java", "chunked_list": ["package org.example.service;\n\nimport org.example.command.Command;\n\npublic interface CommandService {\n    Command retrieveCommand(String commandIdentifier);\n}"]}
{"filename": "src/main/java/org/example/service/DocumentService.java", "chunked_list": ["package org.example.service;\n\nimport org.example.entity.DocumentInfo;\nimport org.telegram.telegrambots.meta.api.methods.send.SendDocument;\n\nimport java.util.List;\n\npublic interface DocumentService {\n    DocumentInfo getByIndex(int docIndex);\n\n    List<DocumentInfo> getAllByType(String docType);\n\n    void delete(int docIndex);\n\n    long getCountDocument();\n}"]}
{"filename": "src/main/java/org/example/service/BotUserService.java", "chunked_list": ["package org.example.service;\n\nimport org.example.entity.BotUser;\n\nimport java.util.List;\n\npublic interface BotUserService {\n    List<BotUser> getAll();\n\n    BotUser findById(long id);\n\n    void add(BotUser user);\n\n    void update(BotUser user);\n\n    void delete(BotUser user);\n\n    void deleteAll();\n\n    List<BotUser> findByName(String name);\n\n    long getUserCount();\n}"]}
{"filename": "src/main/java/org/example/service/imp/BotUserServiceImp.java", "chunked_list": ["package org.example.service.imp;\n\nimport jakarta.transaction.Transactional;\nimport org.example.dao.BotUserDAO;\nimport org.example.dao.imp.BotUserDAOImp;\nimport org.example.entity.BotUser;\nimport org.example.service.BotUserService;\n\nimport java.util.List;\n", "import java.util.List;\n\n@Transactional\npublic class BotUserServiceImp implements BotUserService {\n    private final BotUserDAO userDAO;\n    private static volatile BotUserServiceImp instance;\n\n    private BotUserServiceImp() {\n        this.userDAO = new BotUserDAOImp();\n    }\n", "    public static BotUserServiceImp getInstance() {\n        if (instance == null) {\n            synchronized (BotUserServiceImp.class) {\n                if (instance == null) {\n                    instance = new BotUserServiceImp();\n                }\n            }\n        }\n        return instance;\n    }\n\n    @Override\n    public List<BotUser> getAll() {\n        return userDAO.getAll();\n    }\n\n    @Override", "    public BotUser findById(long id) {\n        return userDAO.getById(id);\n    }\n\n    @Override\n    public void add(BotUser user) {\n        userDAO.save(user);\n    }\n\n    @Override\n    public void update(BotUser user) {\n        userDAO.update(user);\n    }\n\n    @Override", "    public void update(BotUser user) {\n        userDAO.update(user);\n    }\n\n    @Override\n    public void delete(BotUser user) {\n        userDAO.delete(user);\n    }\n\n    @Override\n    public void deleteAll() {\n        userDAO.deleteAll();\n    }\n\n    @Override\n    public List<BotUser> findByName(String name) {\n        return userDAO.getByName(name);\n    }\n\n    @Override", "    public void deleteAll() {\n        userDAO.deleteAll();\n    }\n\n    @Override\n    public List<BotUser> findByName(String name) {\n        return userDAO.getByName(name);\n    }\n\n    @Override\n    public long getUserCount() {\n        return userDAO.getCount();\n    }\n}", "    public long getUserCount() {\n        return userDAO.getCount();\n    }\n}"]}
{"filename": "src/main/java/org/example/service/imp/CommandServiceImp.java", "chunked_list": ["package org.example.service.imp;\n\nimport com.google.common.collect.ImmutableMap;\nimport org.example.command.Command;\nimport org.example.command.imp.*;\nimport org.example.service.BotUserService;\nimport org.example.service.CommandService;\n\nimport static org.example.command.enums.CommandName.*;\n\npublic class CommandServiceImp implements CommandService {\n\n    private final Command unknownCommand;\n    private static volatile CommandServiceImp instance;\n    private final ImmutableMap<String, Command> commandMap;\n\n    private CommandServiceImp() {\n        BotUserService botUserService = BotUserServiceImp.getInstance();\n\n        this.unknownCommand = new UnknownCommand();\n        this.commandMap = ImmutableMap.<String, Command>builder()\n                .put(START.getCommandName(), new StartCommand(botUserService))\n                .put(KEY.getCommandName(), new KeyCommand())\n                .put(INFO.getCommandName(), new InfoCommand(botUserService))\n                .put(DONATE.getCommandName(), new DonateCommand())\n                .put(HELP.getCommandName(), new HelpCommand())\n                .build();\n    }\n", "import static org.example.command.enums.CommandName.*;\n\npublic class CommandServiceImp implements CommandService {\n\n    private final Command unknownCommand;\n    private static volatile CommandServiceImp instance;\n    private final ImmutableMap<String, Command> commandMap;\n\n    private CommandServiceImp() {\n        BotUserService botUserService = BotUserServiceImp.getInstance();\n\n        this.unknownCommand = new UnknownCommand();\n        this.commandMap = ImmutableMap.<String, Command>builder()\n                .put(START.getCommandName(), new StartCommand(botUserService))\n                .put(KEY.getCommandName(), new KeyCommand())\n                .put(INFO.getCommandName(), new InfoCommand(botUserService))\n                .put(DONATE.getCommandName(), new DonateCommand())\n                .put(HELP.getCommandName(), new HelpCommand())\n                .build();\n    }\n", "    public static CommandServiceImp getInstance() {\n        if (instance == null) {\n            synchronized (CommandServiceImp.class) {\n                if (instance == null) {\n                    instance = new CommandServiceImp();\n                }\n            }\n        }\n        return instance;\n    }\n\n    @Override", "    public Command retrieveCommand(String commandIdentifier) {\n        return commandMap.getOrDefault(commandIdentifier, unknownCommand);\n    }\n}"]}
{"filename": "src/main/java/org/example/service/imp/MessageSenderServiceImp.java", "chunked_list": ["package org.example.service.imp;\n\nimport org.example.bot.Bot;\nimport org.example.entity.DocumentInfo;\nimport org.example.service.MessageSenderService;\nimport org.telegram.telegrambots.meta.api.methods.send.SendDocument;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.InputFile;\n\nimport java.io.File;", "\nimport java.io.File;\nimport java.nio.file.Path;\n\npublic class MessageSenderServiceImp implements MessageSenderService {\n    private final Bot bot;\n\n    public MessageSenderServiceImp(Bot bot) {\n        this.bot = bot;\n    }\n\n    @Override", "    public void sendMessage(SendMessage response) {\n        bot.sendMessage(response);\n    }\n\n    @Override\n    public void sendDocument(long chatId, DocumentInfo docInfo) {\n        File document = Path.of(docInfo.getDocPath()).toFile();\n\n        bot.sendMessage(SendDocument.builder()\n                .chatId(chatId)\n                .document(new InputFile(document))\n                .caption(docInfo.getDescription())\n                .build());\n    }\n\n    @Override", "    public void sendMessage(long chatId, String message) {\n        SendMessage response = SendMessage.builder()\n                .chatId(chatId)\n                .text(message)\n                .build();\n\n        bot.sendMessage(response);\n    }\n}"]}
{"filename": "src/main/java/org/example/service/imp/DocumentServiceImp.java", "chunked_list": ["package org.example.service.imp;\n\nimport org.example.dao.DocumentDAO;\nimport org.example.dao.imp.DocumentDAOImp;\nimport org.example.entity.DocumentInfo;\nimport org.example.service.DocumentService;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;", "import java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\n\npublic class DocumentServiceImp implements DocumentService {\n    private final DocumentDAO documentDAO;\n    private static volatile DocumentServiceImp instance;\n\n    private DocumentServiceImp() {\n        this.documentDAO = new DocumentDAOImp();\n    }\n", "    public static DocumentServiceImp getInstance() {\n        if (instance == null) {\n            synchronized (DocumentServiceImp.class) {\n                if (instance == null) {\n                    instance = new DocumentServiceImp();\n                }\n            }\n        }\n        return instance;\n    }\n\n    @Override", "    public DocumentInfo getByIndex(int docIndex) {\n        return documentDAO.getByIndex(docIndex);\n    }\n\n    @Override\n    public List<DocumentInfo> getAllByType(String docType) {\n        return documentDAO.getAllByType(docType);\n    }\n\n    @Override\n    public void delete(int docIndex) {\n        var docInfo = documentDAO.getByIndex(docIndex);\n", "    public void delete(int docIndex) {\n        var docInfo = documentDAO.getByIndex(docIndex);\n\n        if (docInfo == null) {\n            return;\n        }\n\n        try {\n            Files.delete(Path.of(docInfo.getDocPath()));\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n        documentDAO.delete(docInfo);\n    }\n\n    @Override", "    public long getCountDocument() {\n        return documentDAO.getCount();\n    }\n}"]}
