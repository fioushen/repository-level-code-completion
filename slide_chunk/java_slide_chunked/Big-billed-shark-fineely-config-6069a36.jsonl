{"filename": "src/main/java/com/fineelyframework/config/EnableAutoConfigScan.java", "chunked_list": ["package com.fineelyframework.config;\n\nimport com.fineelyframework.config.core.config.DatasourceConfig;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.annotation.AliasFor;\n\nimport java.lang.annotation.*;\n\n/**", "\n/**\n * Enable automatic configuration class scanning\n * <p>@EnableConfigScan(basePackage = \"com.fineely.entity\", requestMapping = \"/rest/config/\")\n * <p>@EnableConfigScan(basePackage = \"com.fineely.entity\")\n *\n * @author Rey Kepler\n * @since 0.0.1\n * @see DatasourceConfig\n * @see FineelyConfigAnnotationRegistry", " * @see DatasourceConfig\n * @see FineelyConfigAnnotationRegistry\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Import({DatasourceConfig.class, FineelyConfigAnnotationRegistry.class})\npublic @interface EnableAutoConfigScan {\n\n    /**", "\n    /**\n     * Alias for the {@link #basePackages()} attribute. Allows for more concise annotation\n     * declarations e.g.: {@code @EnableAutoConfigScan(\"org.my.pkg\")} instead of\n     * {@code @EnableAutoConfigScan(basePackages=\"org.my.pkg\")}.\n     * @return the base packages to scan\n     */\n    @AliasFor(\"basePackages\")\n    String[] value() default {};\n", "    String[] value() default {};\n\n    /**\n     * Base packages to scan for entities. {@link #value()} is an alias for (and mutually\n     * exclusive with) this attribute.\n     * <p>\n     * Use {@link #basePackageClasses()} for a type-safe alternative to String-based\n     * package names.\n     * @see com.fineelyframework.config.core.entity.ConfigSupport\n     * @return the base packages to scan\n     */\n    @AliasFor(\"value\")\n    String[] basePackages() default {};\n\n\n    /**\n     * Type-safe alternative to {@link #basePackages()} for specifying the packages to\n     * scan for entities. The package of each class specified will be scanned.\n     * <p>\n     * Consider creating a special no-op marker class or interface in each package that\n     * serves no purpose other than being referenced by this attribute.\n     * @return classes from the base packages to scan\n     */\n    Class<? extends ConfigSupport>[] basePackageClasses() default {};\n\n    /**\n     * Request mapping prefix. That's it @RequestMapping value, default /rest/config/.\n     * @return requestMapping\n     */\n    String requestMapping() default \"/rest/config/\";\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/FineelyConfigServlet.java", "chunked_list": ["package com.fineelyframework.config;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.context.WebApplicationContext;\nimport org.springframework.web.context.support.WebApplicationContextUtils;\n\nimport javax.servlet.Servlet;\nimport javax.servlet.ServletConfig;", "import javax.servlet.Servlet;\nimport javax.servlet.ServletConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.UnavailableException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;", "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\n\n/**\n * Processing requests for configuration classes\n *\n * <p>/get[className] and /update[className]\n *\n * @author Rey Kepler", " *\n * @author Rey Kepler\n * @since 0.0.1\n * @see ConfigSupport\n * @see EnableAutoConfigScan\n */\npublic class FineelyConfigServlet extends HttpServlet {\n\n    private ConfigIntermediary configIntermediary;\n\n    /**\n     * Init configIntermediary by webApplicationContext\n     * Called by the servlet container to indicate to a servlet that the servlet\n     * is being placed into service. See {@link Servlet#init}.\n     * <p>\n     * This implementation stores the {@link ServletConfig} object it receives\n     * from the servlet container for later use. When overriding this form of\n     * the method, call <code>super.init(config)</code>.\n     *\n     * @param config\n     *            the <code>ServletConfig</code> object that contains\n     *            configuration information for this servlet\n     * @exception ServletException\n     *                if an exception occurs that interrupts the servlet's\n     *                normal operation\n     * @see UnavailableException\n     */\n    @Override", "    public void init(ServletConfig config) throws ServletException {\n        WebApplicationContext cont = WebApplicationContextUtils.getRequiredWebApplicationContext(config.getServletContext());\n        configIntermediary = (ConfigIntermediary) cont.getBean(\"configIntermediary\");\n        super.init();\n    }\n\n\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String requestURI = request.getRequestURI();\n        String className = requestURI.replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");\n        ConfigSupport configByObject = configIntermediary.getConfigByObject(className);\n        responseWriter(response, configByObject);\n    }\n", "    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String requestURI = request.getRequestURI();\n        String className = requestURI.replaceAll(configIntermediary.getRequestMapping() + \"update\", \"\");\n        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n        StringBuilder sb = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null)\n            sb.append(line);\n        String configObjString = sb.toString();\n        configIntermediary.updateConfigByObject(className, configObjString);\n        responseWriter(response, true);\n    }\n\n    private void responseWriter(HttpServletResponse response, Object value) throws IOException {\n        response.setCharacterEncoding(StandardCharsets.UTF_8.name());\n        response.setContentType(MediaType.APPLICATION_JSON_VALUE);\n        response.getWriter().print(value instanceof Boolean ? JSONObject.toJSONString(value) : JSONObject.from(value).toString());\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/ConfigIntermediary.java", "chunked_list": ["package com.fineelyframework.config;\n\nimport com.alibaba.fastjson2.JSONObject;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport com.fineelyframework.config.core.service.FineelyConfigService;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.Map;\n\n/**", "\n/**\n * This is the config intermediary class.\n *\n * @author Rey Kepler\n * @since 0.0.1\n */\npublic class ConfigIntermediary {\n\n    /**\n     * Configure service get configuration.\n     */\n    @Autowired\n    private FineelyConfigService fineelyConfigService;\n\n    /**\n     * Configure class package name, key is class name, value is class package name.\n     */\n    private Map<String, String> packageMap;\n\n    /**\n     * Request mapping prefix. That's it @RequestMapping value.\n     */\n    private String requestMapping;\n\n    /**\n     * Mapping out package address by class name<p>\n     * Creating instances from reflect<p>\n     * @param className Labeled class name\n     * @see com.fineelyframework.config.core.entity.ConfigSupport\n     * @return Labeled class\n     * @since 0.0.1\n     */", "    public ConfigSupport getConfigByObject(String className) {\n        try {\n            ConfigSupport myInstance = (ConfigSupport) Class.forName(packageMap.get(className)).getDeclaredConstructor().newInstance();\n            return fineelyConfigService.get(myInstance);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    /**\n     * Mapping out package address by class name<p>\n     * @param className Labeled class name\n     * @param configObjString Configure the json string of the class\n     * @see com.fineelyframework.config.core.entity.ConfigSupport\n     * @since 0.0.1\n     */", "    public void updateConfigByObject(String className, String configObjString) {\n        try {\n            Class<?> aClass = Class.forName(packageMap.get(className));\n            fineelyConfigService.update((ConfigSupport) JSONObject.parseObject(configObjString, aClass));\n        } catch (Exception ignored) {\n        }\n    }\n\n    public FineelyConfigService getFineelyConfigService() {\n        return fineelyConfigService;\n    }\n", "    public FineelyConfigService getFineelyConfigService() {\n        return fineelyConfigService;\n    }\n\n    public void setFineelyConfigService(FineelyConfigService fineelyConfigService) {\n        this.fineelyConfigService = fineelyConfigService;\n    }\n\n    public String getRequestMapping() {\n        return requestMapping;\n    }\n", "    public String getRequestMapping() {\n        return requestMapping;\n    }\n\n    public void setRequestMapping(String requestMapping) {\n        this.requestMapping = requestMapping;\n    }\n\n    public Map<String, String> getPackageMap() {\n        return packageMap;\n    }\n", "    public void setPackageMap(Map<String, String> packageMap) {\n        this.packageMap = packageMap;\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/FineelyConfigAnnotationRegistry.java", "chunked_list": ["package com.fineelyframework.config;\n\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport org.reflections.Reflections;\nimport org.reflections.scanners.SubTypesScanner;\nimport org.reflections.scanners.TypeAnnotationsScanner;\nimport org.springframework.beans.MutablePropertyValues;\nimport org.springframework.beans.factory.config.BeanDefinition;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;", "import org.springframework.beans.factory.support.BeanDefinitionRegistry;\nimport org.springframework.beans.factory.support.BeanDefinitionRegistryPostProcessor;\nimport org.springframework.beans.factory.support.GenericBeanDefinition;\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\nimport org.springframework.context.annotation.AnnotationBeanNameGenerator;\nimport org.springframework.context.annotation.ConfigurationClassPostProcessor;\nimport org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\nimport org.springframework.core.type.AnnotationMetadata;\nimport org.springframework.stereotype.Component;\n", "import org.springframework.stereotype.Component;\n\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * Custom bean config registry.\n *\n * <p>Get basePackages and basePackageClasses through @{@link EnableAutoConfigScan}\n * <p>Scan all entities implements {@link ConfigSupport} injection {@link FineelyConfigServlet}", " * <p>Get basePackages and basePackageClasses through @{@link EnableAutoConfigScan}\n * <p>Scan all entities implements {@link ConfigSupport} injection {@link FineelyConfigServlet}\n * and {@link ConfigIntermediary}\n * @author Rey Kepler\n * @since 0.0.1\n * @see Reflections\n * @see ConfigSupport\n * @see FineelyConfigServlet\n * @see ImportBeanDefinitionRegistrar\n */", " * @see ImportBeanDefinitionRegistrar\n */\n@Component\npublic class FineelyConfigAnnotationRegistry implements ImportBeanDefinitionRegistrar {\n\n    /**\n     * Register bean definitions as necessary based on the given annotation metadata of\n     * the importing {@code @Configuration} class.\n     * <p>Note that {@link BeanDefinitionRegistryPostProcessor} types may <em>not</em> be\n     * registered here, due to lifecycle constraints related to {@code @Configuration}\n     * class processing.\n     * <p>The default implementation delegates to\n     * {@link #registerBeanDefinitions(AnnotationMetadata, BeanDefinitionRegistry)}.\n     * @param importingClassMetadata annotation metadata of the importing class\n     * @param registry current bean definition registry\n     * {@link ConfigurationClassPostProcessor#IMPORT_BEAN_NAME_GENERATOR} by default, or a\n     * user-provided one if {@link ConfigurationClassPostProcessor#setBeanNameGenerator}\n     * has been set. In the latter case, the passed-in strategy will be the same used for\n     * component scanning in the containing application context (otherwise, the default\n     * component-scan naming strategy is {@link AnnotationBeanNameGenerator#INSTANCE}).\n     * @since 5.2\n     * @see ConfigurationClassPostProcessor#IMPORT_BEAN_NAME_GENERATOR\n     * @see ConfigurationClassPostProcessor#setBeanNameGenerator\n     */\n    @Override", "    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n        Map<String, Object> annotationAttributes = importingClassMetadata.getAnnotationAttributes(EnableAutoConfigScan.class.getName());\n        String[] basePackages = (String[]) annotationAttributes.get(\"basePackages\");\n        Reflections reflections = new Reflections(basePackages, new SubTypesScanner(), new TypeAnnotationsScanner());\n        Set<Class<? extends ConfigSupport>> subTypes = reflections.getSubTypesOf(ConfigSupport.class);\n        Class<? extends ConfigSupport>[] basePackageClasses = (Class<? extends ConfigSupport>[]) annotationAttributes.get(\"basePackageClasses\");\n        subTypes.addAll(Arrays.stream(basePackageClasses).collect(Collectors.toSet()));\n        String requestMapping = (String) annotationAttributes.get(\"requestMapping\");\n        List<String> urlMappings = new ArrayList<>();\n        Map<String, String> packageMap = new HashMap<>();\n        for (Class<?> clazz : subTypes) {\n            String packageName = clazz.getName();\n            String[] packages = packageName.split(\"\\\\.\");\n            String className = packages[packages.length - 1];\n            urlMappings.add(String.format(requestMapping + \"get%s\", className));\n            urlMappings.add(String.format(requestMapping + \"update%s\", className));\n            packageMap.put(className, packageName);\n        }\n        // \u6ce8\u5165ServletRegistrationBean\n        BeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClassName(ServletRegistrationBean.class.getName());\n        MutablePropertyValues values = beanDefinition.getPropertyValues();\n        values.addPropertyValue(\"servlet\", new FineelyConfigServlet());\n        values.addPropertyValue(\"urlMappings\", urlMappings);\n        registry.registerBeanDefinition(\"servletRegistrationBean\", beanDefinition);\n        // \u6ce8\u5165\u914d\u7f6e\u4e2d\u4ecb\n        BeanDefinition configIntermediary = new GenericBeanDefinition();\n        configIntermediary.setBeanClassName(ConfigIntermediary.class.getName());\n        MutablePropertyValues configIntermediaryValues = configIntermediary.getPropertyValues();\n        configIntermediaryValues.addPropertyValue(\"packageMap\", packageMap);\n        configIntermediaryValues.addPropertyValue(\"requestMapping\", requestMapping);\n        registry.registerBeanDefinition(\"configIntermediary\", configIntermediary);\n    }\n}", "        for (Class<?> clazz : subTypes) {\n            String packageName = clazz.getName();\n            String[] packages = packageName.split(\"\\\\.\");\n            String className = packages[packages.length - 1];\n            urlMappings.add(String.format(requestMapping + \"get%s\", className));\n            urlMappings.add(String.format(requestMapping + \"update%s\", className));\n            packageMap.put(className, packageName);\n        }\n        // \u6ce8\u5165ServletRegistrationBean\n        BeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClassName(ServletRegistrationBean.class.getName());\n        MutablePropertyValues values = beanDefinition.getPropertyValues();\n        values.addPropertyValue(\"servlet\", new FineelyConfigServlet());\n        values.addPropertyValue(\"urlMappings\", urlMappings);\n        registry.registerBeanDefinition(\"servletRegistrationBean\", beanDefinition);\n        // \u6ce8\u5165\u914d\u7f6e\u4e2d\u4ecb\n        BeanDefinition configIntermediary = new GenericBeanDefinition();\n        configIntermediary.setBeanClassName(ConfigIntermediary.class.getName());\n        MutablePropertyValues configIntermediaryValues = configIntermediary.getPropertyValues();\n        configIntermediaryValues.addPropertyValue(\"packageMap\", packageMap);\n        configIntermediaryValues.addPropertyValue(\"requestMapping\", requestMapping);\n        registry.registerBeanDefinition(\"configIntermediary\", configIntermediary);\n    }\n}"]}
{"filename": "src/main/java/com/fineelyframework/config/core/entity/Config.java", "chunked_list": ["package com.fineelyframework.config.core.entity;\n\nimport org.hibernate.annotations.DynamicInsert;\nimport org.hibernate.annotations.DynamicUpdate;\n\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.time.LocalDateTime;\n\nimport static javax.persistence.GenerationType.IDENTITY;", "\nimport static javax.persistence.GenerationType.IDENTITY;\n\n/**\n * @author Rey Kepler\n */\n@Entity\n@DynamicInsert\n@DynamicUpdate\n@Table(name = \"config\")\npublic class Config implements Serializable {\n\n    private static final long serialVersionUID = 3434155825314659842L;\n\n    @Id\n    @GeneratedValue(strategy = IDENTITY)\n    @Column(unique = true, nullable = false, length = 10)\n    private int configId;\n\n    @Column(nullable = false, length = 64)\n    private String configCategory;\n\n    @Column(nullable = false, length = 64)\n    private String configCode;\n\n    @Column\n    private String configValue;\n\n    @Column(nullable = false)\n    private LocalDateTime lastModifyTime;\n\n    public Config() {\n    }\n\n    public Config(String configCategory, String configCode, Object configValue) {\n        this.configCode = configCode;", "@DynamicUpdate\n@Table(name = \"config\")\npublic class Config implements Serializable {\n\n    private static final long serialVersionUID = 3434155825314659842L;\n\n    @Id\n    @GeneratedValue(strategy = IDENTITY)\n    @Column(unique = true, nullable = false, length = 10)\n    private int configId;\n\n    @Column(nullable = false, length = 64)\n    private String configCategory;\n\n    @Column(nullable = false, length = 64)\n    private String configCode;\n\n    @Column\n    private String configValue;\n\n    @Column(nullable = false)\n    private LocalDateTime lastModifyTime;\n\n    public Config() {\n    }\n\n    public Config(String configCategory, String configCode, Object configValue) {\n        this.configCode = configCode;", "        if (configValue != null) {\n            this.configValue = configValue.toString();\n        }\n        this.configCategory = configCategory;\n        this.lastModifyTime = LocalDateTime.now();\n    }\n\n    public Integer getConfigId() {\n        return configId;\n    }\n", "    public void setConfigId(int configId) {\n        this.configId = configId;\n    }\n\n    public String getConfigCode() {\n        return configCode;\n    }\n\n    public void setConfigCode(String configCode) {\n        this.configCode = configCode;\n    }\n", "    public void setConfigCode(String configCode) {\n        this.configCode = configCode;\n    }\n\n    public String getConfigValue() {\n        return configValue;\n    }\n\n    public void setConfigValue(String configValue) {\n        this.configValue = configValue;\n    }\n", "    public void setConfigValue(String configValue) {\n        this.configValue = configValue;\n    }\n\n    public String getConfigCategory() {\n        return configCategory;\n    }\n\n    public void setConfigCategory(String configCategory) {\n        this.configCategory = configCategory;\n    }\n", "    public void setConfigCategory(String configCategory) {\n        this.configCategory = configCategory;\n    }\n\n    public LocalDateTime getLastModifyTime() {\n        return lastModifyTime;\n    }\n\n    public void setLastModifyTime(LocalDateTime lastModifyTime) {\n        this.lastModifyTime = lastModifyTime;\n    }\n}\n\n", "    public void setLastModifyTime(LocalDateTime lastModifyTime) {\n        this.lastModifyTime = lastModifyTime;\n    }\n}\n\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/entity/ConfigSupport.java", "chunked_list": ["package com.fineelyframework.config.core.entity;\n\nimport java.io.Serializable;\n\n/**\n * Interface provided for system configuration <p>\n * Add the following annotation to the startup class @{@link com.fineelyframework.config.EnableAutoConfigScan}\n * @author  Rey Kepler\n * @see com.fineelyframework.config.EnableAutoConfigScan\n * @since   JDK11", " * @see com.fineelyframework.config.EnableAutoConfigScan\n * @since   JDK11\n */\npublic interface ConfigSupport extends Serializable {\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/entity/ConfigPlus.java", "chunked_list": ["package com.fineelyframework.config.core.entity;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n\nimport javax.persistence.*;\n\n/**\n * @author Rey Kepler", "/**\n * @author Rey Kepler\n */\n@TableName(\"config\")\npublic class ConfigPlus extends Config {\n\n    @TableId(type = IdType.AUTO)\n    private Integer configId;\n\n    public ConfigPlus() {\n    }\n\n    public ConfigPlus(String configCategory, String configCode, Object configValue) {\n        super(configCategory, configCode, configValue);\n    }\n}\n\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/utils/TypeJudgmentUtil.java", "chunked_list": ["package com.fineelyframework.config.core.utils;\n\nimport com.alibaba.fastjson2.JSONArray;\nimport com.alibaba.fastjson2.JSONObject;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\n\nimport java.lang.reflect.Field;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;", "import java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\n\npublic class TypeJudgmentUtil {\n\n    public static Object[] getConfigCodes(Field[] fields) {\n        String[] configCodes = new String[fields.length];\n        for (int i = 0; i < fields.length; i++) {\n            configCodes[i] = fields[i].getName();\n        }\n        return configCodes;\n    }\n\n    public static <T extends ConfigSupport> Object get(T configSupport, Field field) {\n        Object configValue = null;", "        for (int i = 0; i < fields.length; i++) {\n            configCodes[i] = fields[i].getName();\n        }\n        return configCodes;\n    }\n\n    public static <T extends ConfigSupport> Object get(T configSupport, Field field) {\n        Object configValue = null;\n        try {\n            configValue = field.get(configSupport);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return configValue;\n    }\n", "        try {\n            configValue = field.get(configSupport);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n        return configValue;\n    }\n\n    public static String toJsonString(Object configValue) {\n        String value;\n        if (Objects.isNull(configValue)) {\n            value = null;", "    public static String toJsonString(Object configValue) {\n        String value;\n        if (Objects.isNull(configValue)) {\n            value = null;\n        } else if (configValue instanceof List) {\n            value = com.alibaba.fastjson2.JSONArray.toJSONString(configValue);\n        } else if (configValue instanceof Map) {\n            value = com.alibaba.fastjson2.JSONObject.toJSONString(configValue);\n        } else if (configValue instanceof Set) {\n            value = com.alibaba.fastjson2.JSONObject.toJSONString(configValue);\n        } else if (TypeJudgmentUtil.isBasicType(configValue.getClass())) {\n            value = configValue.toString();\n        } else {\n            value = com.alibaba.fastjson2.JSONObject.from(configValue).toString();\n        }\n        return value;\n    }\n", "        } else if (configValue instanceof Set) {\n            value = com.alibaba.fastjson2.JSONObject.toJSONString(configValue);\n        } else if (TypeJudgmentUtil.isBasicType(configValue.getClass())) {\n            value = configValue.toString();\n        } else {\n            value = com.alibaba.fastjson2.JSONObject.from(configValue).toString();\n        }\n        return value;\n    }\n\n    public static boolean isBasicType(Class typeClass) {\n        return typeClass == int.class || typeClass == short.class || typeClass == byte.class ||\n                typeClass == float.class || typeClass == double.class || typeClass == long.class ||\n                typeClass == String.class || typeClass == boolean.class || typeClass.isEnum() ||\n                typeClass == LocalDateTime.class || typeClass == LocalDate.class || typeClass == LocalTime.class ||\n                typeClass == Integer.class || typeClass == Boolean.class || typeClass == Long.class ||\n                typeClass == Double.class || typeClass == Float.class || typeClass == Byte.class ||\n                typeClass == Short.class;\n\n    }\n\n    public static <T extends ConfigSupport> void set(T configSupport, Field field, String configValue) {", "    public static boolean isBasicType(Class typeClass) {\n        return typeClass == int.class || typeClass == short.class || typeClass == byte.class ||\n                typeClass == float.class || typeClass == double.class || typeClass == long.class ||\n                typeClass == String.class || typeClass == boolean.class || typeClass.isEnum() ||\n                typeClass == LocalDateTime.class || typeClass == LocalDate.class || typeClass == LocalTime.class ||\n                typeClass == Integer.class || typeClass == Boolean.class || typeClass == Long.class ||\n                typeClass == Double.class || typeClass == Float.class || typeClass == Byte.class ||\n                typeClass == Short.class;\n\n    }\n\n    public static <T extends ConfigSupport> void set(T configSupport, Field field, String configValue) {", "        try {\n            Class typeClass = field.getType();\n            if (typeClass == int.class) {\n                if (configValue != null) {\n                    field.setInt(configSupport, Integer.parseInt(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }\n            } else if (typeClass == short.class) {\n                if (configValue != null) {\n                    field.setShort(configSupport, Short.parseShort(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }", "            } else if (typeClass == short.class) {\n                if (configValue != null) {\n                    field.setShort(configSupport, Short.parseShort(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }\n            } else if (typeClass == char.class) {\n                if (configValue != null) {\n                    field.setChar(configSupport, configValue.charAt(0));\n                } else {\n                    field.set(configSupport, null);\n                }", "            } else if (typeClass == byte.class) {\n                if (configValue != null) {\n                    field.setByte(configSupport, Byte.parseByte(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }\n            } else if (typeClass == float.class) {\n                if (configValue != null) {\n                    field.setFloat(configSupport, Float.parseFloat(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }", "            } else if (typeClass == double.class) {\n                if (configValue != null) {\n                    field.setDouble(configSupport, Double.parseDouble(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }\n            } else if (typeClass == long.class) {\n                if (configValue != null) {\n                    field.setLong(configSupport, Long.parseLong(configValue));\n                } else {\n                    field.set(configSupport, 0);\n                }", "            } else if (typeClass == String.class) {\n                field.set(configSupport, configValue);\n            } else if (typeClass == boolean.class) {\n                if (configValue != null) {\n                    field.setBoolean(configSupport, Boolean.parseBoolean(configValue));\n                } else {\n                    field.set(configSupport, false);\n                }\n            } else if (typeClass.isEnum()) {\n                if (configValue != null) {\n                    field.set(configSupport, Enum.valueOf(typeClass, configValue));\n                } else {\n                    field.set(configSupport, null);\n                }", "            } else if (typeClass.isEnum()) {\n                if (configValue != null) {\n                    field.set(configSupport, Enum.valueOf(typeClass, configValue));\n                } else {\n                    field.set(configSupport, null);\n                }\n            } else if (typeClass == LocalDateTime.class) {\n                if (configValue != null) {\n                    field.set(configSupport, LocalDateTime.parse(configValue, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));\n                } else {\n                    field.set(configSupport, null);\n                }", "            } else if (typeClass == LocalDate.class) {\n                if (configValue != null) {\n                    field.set(configSupport, LocalDate.parse(configValue, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));\n                } else {\n                    field.set(configSupport, null);\n                }\n            } else if (typeClass == LocalTime.class) {\n                if (configValue != null) {\n                    field.set(configSupport, LocalTime.parse(configValue, DateTimeFormatter.ofPattern(\"HH:mm:ss\")));\n                } else {\n                    field.set(configSupport, null);\n                }", "            } else if (typeClass == List.class) {\n                if (configValue != null && !\"[]\".equals(configValue)) {\n                    field.set(configSupport, JSONArray.parseArray(configValue, Object.class));\n                } else {\n                    field.set(configSupport, new ArrayList<>());\n                }\n            } else if (typeClass == Map.class) {\n                if (configValue != null) {\n                    field.set(configSupport, com.alibaba.fastjson2.JSONObject.parseObject(configValue, Map.class));\n                } else {\n                    field.set(configSupport, new HashMap<>());\n                }", "            } else if (!isBasicType(typeClass)) {\n                field.set(configSupport, null);\n//                if (configValue != null) {\n//                    field.set(configSupport, JSON.parseObject(configValue,typeClass));\n//                } else {\n//                    field.set(configSupport, null);\n//                }\n            } else if (typeClass == Set.class) {\n                if (configValue != null) {\n                    field.set(configSupport, JSONObject.parseObject(configValue, Set.class));\n                } else {\n                    field.set(configSupport, new HashMap<>());\n                }\n            } else {\n                field.set(configSupport, configValue);\n            }\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n", "                if (configValue != null) {\n                    field.set(configSupport, JSONObject.parseObject(configValue, Set.class));\n                } else {\n                    field.set(configSupport, new HashMap<>());\n                }\n            } else {\n                field.set(configSupport, configValue);\n            }\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/dao/ConfigDao.java", "chunked_list": ["/*\n * Copyright (c) 2018. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.\n * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.\n * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.\n * Vestibulum commodo. Ut rhoncus gravida arcu.\n */\n\n/*\n * Powered By [spring-boot-framework]", "/*\n * Powered By [spring-boot-framework]\n * Since 2015 - 2018\n */\n\npackage com.fineelyframework.config.core.dao;\n\nimport com.fineelyframework.config.core.entity.Config;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.data.jpa.repository.support.JpaRepositoryImplementation;", "import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.data.jpa.repository.support.JpaRepositoryImplementation;\n\n/**\n * @author Rey Kepler\n */\n@ConditionalOnProperty(prefix = \"fineely.config\", name = \"datasource\", havingValue = \"jpa\")\npublic interface ConfigDao extends JpaRepositoryImplementation<Config, Integer>, ConfigDaoPlus {\n}"]}
{"filename": "src/main/java/com/fineelyframework/config/core/dao/ConfigDaoImpl.java", "chunked_list": ["package com.fineelyframework.config.core.dao;\n\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.fineelyframework.config.core.entity.Config;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport com.fineelyframework.config.core.utils.TypeJudgmentUtil;\n\nimport javax.persistence.EntityManager;", "\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.time.LocalDateTime;\nimport java.util.*;", "import java.time.LocalDateTime;\nimport java.util.*;\n\npublic class ConfigDaoImpl implements ConfigDaoPlus {\n\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    @Override\n    public <T extends ConfigSupport> void update(T configSupport) {\n        Field[] fields = configSupport.getClass().getDeclaredFields();\n        String configCategory = configSupport.getClass().getSimpleName();\n        List<Config> configs = getConfigByCategoryAndCode(configCategory, TypeJudgmentUtil.getConfigCodes(fields));\n        Field.setAccessible(fields, true);", "        for (Field field : fields) {\n            String configCode = field.getName();\n            Optional<Config> optional = configs.stream().filter(p -> p.getConfigCode().equals(configCode)).findFirst();\n            try {\n                Object configValue = field.get(configSupport);\n                if (optional.isPresent()) {\n                    Config config = optional.get();\n                    config.setLastModifyTime(LocalDateTime.now());\n                    config.setConfigValue(TypeJudgmentUtil.toJsonString(configValue));\n                } else {\n                    Config config = new Config(configCategory, configCode, configValue);\n                    entityManager.persist(config);\n                }\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * \u6839\u636eID\u5f97\u5230Config\n     **/\n    @Override\n    public <T extends ConfigSupport> T get(T configSupport) {\n        Field[] fields = configSupport.getClass().getDeclaredFields();\n        String configCategory = configSupport.getClass().getSimpleName();\n        Field.setAccessible(fields, true);\n        List<Config> configs = getConfigByCategoryAndCode(configCategory, TypeJudgmentUtil.getConfigCodes(fields));\n", "        for (Field field : fields) {\n            String configCode = field.getName();\n            Optional<Config> optional = configs.stream().filter(p -> p.getConfigCode().equals(configCode)).findFirst();\n            if (optional.isPresent()) {\n                TypeJudgmentUtil.set(configSupport, field, optional.get().getConfigValue());\n            } else {\n                Object configValue = TypeJudgmentUtil.get(configSupport, field);\n                Config config = new Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));\n                entityManager.persist(config);\n            }\n        }\n\n        return configSupport;\n    }\n\n    @Override\n    public <T extends ConfigSupport> T get(Class<T> tClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        T t = tClass.getDeclaredConstructor().newInstance();\n        return this.get(t);\n    }\n\n    private List<Config> getConfigByCategoryAndCode(String configCategory, Object[] configCodes) {\n        CriteriaBuilder builder = entityManager.getCriteriaBuilder();\n        CriteriaQuery<Config> query = builder.createQuery(Config.class);\n        Root<Config> root = query.from(Config.class);\n        query.select(root);\n        query.where(builder.and(builder.equal(root.get(\"configCategory\"), configCategory), root.get(\"configCode\").in(configCodes)));\n        return entityManager.createQuery(query).getResultList();\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/dao/ConfigDaoPlus.java", "chunked_list": ["package com.fineelyframework.config.core.dao;\n\nimport com.fineelyframework.config.core.entity.ConfigSupport;\n\nimport java.lang.reflect.InvocationTargetException;\n\npublic interface ConfigDaoPlus {\n\n    <T extends ConfigSupport> void update(T configSupport);\n\n    <T extends ConfigSupport> T get(T configSupport);\n\n    <T extends ConfigSupport> T get(Class<T> tClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException;\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/dao/ConfigMapper.java", "chunked_list": ["package com.fineelyframework.config.core.dao;\n\nimport com.alibaba.fastjson.JSONArray;\nimport com.alibaba.fastjson.JSONObject;\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.fineelyframework.config.core.entity.ConfigPlus;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport com.fineelyframework.config.core.utils.TypeJudgmentUtil;\nimport org.apache.ibatis.annotations.Mapper;", "import com.fineelyframework.config.core.utils.TypeJudgmentUtil;\nimport org.apache.ibatis.annotations.Mapper;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.time.LocalDateTime;\nimport java.util.*;\n\n@Mapper\npublic interface ConfigMapper extends BaseMapper<ConfigPlus>, ConfigDaoPlus {\n\n    @Override\n    default <T extends ConfigSupport> void update(T configSupport) {\n        Field[] fields = configSupport.getClass().getDeclaredFields();\n        String configCategory = configSupport.getClass().getSimpleName();\n        List<ConfigPlus> configs = getConfigByCategoryAndCode(configCategory, TypeJudgmentUtil.getConfigCodes(fields));\n        Field.setAccessible(fields, true);", "@Mapper\npublic interface ConfigMapper extends BaseMapper<ConfigPlus>, ConfigDaoPlus {\n\n    @Override\n    default <T extends ConfigSupport> void update(T configSupport) {\n        Field[] fields = configSupport.getClass().getDeclaredFields();\n        String configCategory = configSupport.getClass().getSimpleName();\n        List<ConfigPlus> configs = getConfigByCategoryAndCode(configCategory, TypeJudgmentUtil.getConfigCodes(fields));\n        Field.setAccessible(fields, true);\n        for (Field field : fields) {\n            String configCode = field.getName();\n            Optional<ConfigPlus> optional = configs.stream().filter(p -> p.getConfigCode().equals(configCode)).findFirst();", "        for (Field field : fields) {\n            String configCode = field.getName();\n            Optional<ConfigPlus> optional = configs.stream().filter(p -> p.getConfigCode().equals(configCode)).findFirst();\n            try {\n                Object configValue = field.get(configSupport);\n                if (optional.isPresent()) {\n                    ConfigPlus config = optional.get();\n                    config.setLastModifyTime(LocalDateTime.now());\n                    config.setConfigValue(TypeJudgmentUtil.toJsonString(configValue));\n                    this.updateById(config);\n                } else {\n                    ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);\n                    this.insert(config);\n                }\n            } catch (IllegalAccessException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Override\n    default <T extends ConfigSupport> T get(T configSupport) {\n        Field[] fields = configSupport.getClass().getDeclaredFields();\n        String configCategory = configSupport.getClass().getSimpleName();\n        Field.setAccessible(fields, true);\n        List<ConfigPlus> configs = getConfigByCategoryAndCode(configCategory, TypeJudgmentUtil.getConfigCodes(fields));\n", "        for (Field field : fields) {\n            String configCode = field.getName();\n            Optional<ConfigPlus> optional = configs.stream().filter(p -> p.getConfigCode().equals(configCode)).findFirst();\n            if (optional.isPresent()) {\n                TypeJudgmentUtil.set(configSupport, field, optional.get().getConfigValue());\n            } else {\n                Object configValue = TypeJudgmentUtil.get(configSupport, field);\n                ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));\n                this.insert(config);\n            }\n        }\n        return configSupport;\n    }\n\n    @Override\n    default <T extends ConfigSupport> T get(Class<T> tClass) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {\n        T t = tClass.getDeclaredConstructor().newInstance();\n        return this.get(t);\n    }\n\n    private List<ConfigPlus> getConfigByCategoryAndCode(String configCategory, Object[] configCodes) {\n        return this.selectList(Wrappers.<ConfigPlus>query().lambda().eq(ConfigPlus::getConfigCategory, configCategory)\n                .in(ConfigPlus::getConfigCode, configCodes));\n    }\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/config/MybatisPlusConfig.java", "chunked_list": ["package com.fineelyframework.config.core.config;\n\nimport org.mybatis.spring.annotation.MapperScan;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\n@ConditionalOnProperty(prefix = \"fineely.config\", name = \"datasource\", havingValue = \"mybatis\")\n@MapperScan(basePackages ={\"com.fineelyframework.config.core.dao\"})\npublic class MybatisPlusConfig {\n}\n", "@MapperScan(basePackages ={\"com.fineelyframework.config.core.dao\"})\npublic class MybatisPlusConfig {\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/config/JpaConfig.java", "chunked_list": ["package com.fineelyframework.config.core.config;\n\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n\n@Configuration\n@ConditionalOnProperty(prefix = \"fineely.config\", name = \"datasource\", havingValue = \"jpa\")\n@EnableJpaRepositories(basePackages = {\"com.fineelyframework\"})", "@ConditionalOnProperty(prefix = \"fineely.config\", name = \"datasource\", havingValue = \"jpa\")\n@EnableJpaRepositories(basePackages = {\"com.fineelyframework\"})\n@EntityScan({\"com.fineelyframework\"})\npublic class JpaConfig {\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/config/DatasourceConfig.java", "chunked_list": ["package com.fineelyframework.config.core.config;\n\nimport com.fineelyframework.config.core.service.FineelyConfigServiceImpl;\nimport com.fineelyframework.config.core.service.FineelyConfigService;\nimport com.fineelyframework.config.core.service.FineelyConfigServicePlusImpl;\nimport org.springframework.beans.factory.BeanCreationException;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;", "import org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\n/**\n * fineely Datasource configuration\n */\n@Configuration\n@ConfigurationProperties(prefix = \"fineely.config\")", "@Configuration\n@ConfigurationProperties(prefix = \"fineely.config\")\n@AutoConfigureAfter({MybatisPlusConfig.class, JpaConfig.class})\n@ComponentScan({\"com.fineelyframework\"})\npublic class DatasourceConfig {\n\n    private String datasource = \"\";\n\n    @Bean\n    @ConditionalOnMissingBean\n    public FineelyConfigService fineelyConfigService() {\n        switch (datasource) {\n            case \"mybatis\":\n                return new FineelyConfigServicePlusImpl();\n            case \"jpa\":\n                return new FineelyConfigServiceImpl();\n            default:\n                throw new BeanCreationException(FineelyConfigService.class.getSimpleName(),\n                        \"missing configuration \\\"fineely.config.datasource\\\", Please fill in \\\"mybatis\\\" or \\\"jpa\\\"\");\n        }\n    }\n", "    public FineelyConfigService fineelyConfigService() {\n        switch (datasource) {\n            case \"mybatis\":\n                return new FineelyConfigServicePlusImpl();\n            case \"jpa\":\n                return new FineelyConfigServiceImpl();\n            default:\n                throw new BeanCreationException(FineelyConfigService.class.getSimpleName(),\n                        \"missing configuration \\\"fineely.config.datasource\\\", Please fill in \\\"mybatis\\\" or \\\"jpa\\\"\");\n        }\n    }\n", "    public String getDatasource() {\n        return datasource;\n    }\n\n    public void setDatasource(String datasource) {\n        this.datasource = datasource;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/service/FineelyConfigService.java", "chunked_list": ["package com.fineelyframework.config.core.service;\n\n\nimport com.fineelyframework.config.core.entity.ConfigSupport;\n\nimport java.lang.reflect.InvocationTargetException;\n\npublic interface FineelyConfigService {\n\n    <T extends ConfigSupport> void update(T configObj);\n\n    <T extends ConfigSupport> T get(T configObj);\n\n    <T extends ConfigSupport> T get(Class<T> tClass) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException;\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/service/FineelyConfigServicePlusImpl.java", "chunked_list": ["package com.fineelyframework.config.core.service;\n\nimport com.fineelyframework.config.core.dao.ConfigMapper;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.lang.reflect.InvocationTargetException;\n\n\npublic class FineelyConfigServicePlusImpl implements FineelyConfigService {\n\n    @Autowired\n    private ConfigMapper configMapper;\n\n    public <T extends ConfigSupport> void update(T configSupport) {\n        configMapper.update(configSupport);\n    }\n\n    public <T extends ConfigSupport> T get(T configSupport) {\n        return configMapper.get(configSupport);\n    }\n\n    @Override\n    public <T extends ConfigSupport> T get(Class<T> tClass) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n        return configMapper.get(tClass);\n    }\n\n}\n", "\npublic class FineelyConfigServicePlusImpl implements FineelyConfigService {\n\n    @Autowired\n    private ConfigMapper configMapper;\n\n    public <T extends ConfigSupport> void update(T configSupport) {\n        configMapper.update(configSupport);\n    }\n\n    public <T extends ConfigSupport> T get(T configSupport) {\n        return configMapper.get(configSupport);\n    }\n\n    @Override\n    public <T extends ConfigSupport> T get(Class<T> tClass) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n        return configMapper.get(tClass);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/fineelyframework/config/core/service/FineelyConfigServiceImpl.java", "chunked_list": ["package com.fineelyframework.config.core.service;\n\n\nimport com.fineelyframework.config.core.dao.ConfigDao;\nimport com.fineelyframework.config.core.entity.ConfigSupport;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.lang.reflect.InvocationTargetException;\n", "import java.lang.reflect.InvocationTargetException;\n\n@Transactional\npublic class FineelyConfigServiceImpl implements FineelyConfigService {\n\n    @Autowired\n    private ConfigDao configDao;\n\n\n    public <T extends ConfigSupport> void update(T configObj) {\n        configDao.update(configObj);\n    }\n\n    public <T extends ConfigSupport> T get(T configObj) {\n        return configDao.get(configObj);\n    }\n\n    @Override\n    public <T extends ConfigSupport> T get(Class<T> tClass) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n        return configDao.get(tClass);\n    }\n\n}\n"]}
