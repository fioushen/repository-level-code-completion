{"filename": "src/main/java/es/achousa/TelegramGPTBotApp.java", "chunked_list": ["package es.achousa;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class TelegramGPTBotApp {\n    public static void main(String[] args) {\n        SpringApplication.run(TelegramGPTBotApp.class, args);\n    }\n}"]}
{"filename": "src/main/java/es/achousa/utils/Json2Pojo.java", "chunked_list": ["package es.achousa.utils;\n\nimport com.sun.codemodel.JCodeModel;\nimport org.jsonschema2pojo.*;\nimport org.jsonschema2pojo.rules.RuleFactory;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\n\npublic class Json2Pojo {\n", "import java.net.URL;\n\npublic class Json2Pojo {\n\n    public static void main(String[] args) throws Exception {\n        convertJsonToJavaClass(new File(\"/home/tony/pojos/response.json\").toURI().toURL(),new File(\"/home/tony/pojos\"),\"es.achousa.model.response\", \"ChatResponse\");\n        convertJsonToJavaClass(new File(\"/home/tony/pojos/request.json\").toURI().toURL(),new File(\"/home/tony/pojos\"),\"es.achousa.model.request\", \"ChatRequest\");\n    }\n\n    public static void convertJsonToJavaClass(URL inputJsonUrl, File outputJavaClassDirectory, String packageName, String javaClassName)\n            throws IOException {\n        JCodeModel jcodeModel = new JCodeModel();\n\n        GenerationConfig config = new DefaultGenerationConfig() {\n            @Override", "    public static void convertJsonToJavaClass(URL inputJsonUrl, File outputJavaClassDirectory, String packageName, String javaClassName)\n            throws IOException {\n        JCodeModel jcodeModel = new JCodeModel();\n\n        GenerationConfig config = new DefaultGenerationConfig() {\n            @Override\n            public boolean isGenerateBuilders() {\n                return true;\n            }\n\n            @Override", "            public SourceType getSourceType() {\n                return SourceType.JSON;\n            }\n        };\n\n        SchemaMapper mapper = new SchemaMapper(new RuleFactory(config, new Jackson2Annotator(config), new SchemaStore()), new SchemaGenerator());\n        mapper.generate(jcodeModel, javaClassName, packageName, inputJsonUrl);\n\n        jcodeModel.build(outputJavaClassDirectory);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/es/achousa/utils/MessageLog.java", "chunked_list": ["package es.achousa.utils;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n/*\nThe MessageLog class extends the built-in ArrayList class in Java and adds the ability to limit the maximum number of elements it can hold.\nIf the maximum number of elements is exceeded, the oldest elements are removed from the beginning of the list.\n*/\npublic class MessageLog<E> extends ArrayList<E> {\n    private int maxSize;\n\n    public MessageLog(int maxSize) {\n        super();\n        this.maxSize = maxSize;\n    }\n\n    @Override", "*/\npublic class MessageLog<E> extends ArrayList<E> {\n    private int maxSize;\n\n    public MessageLog(int maxSize) {\n        super();\n        this.maxSize = maxSize;\n    }\n\n    @Override\n    public boolean add(E e) {\n        boolean added = super.add(e);", "    public boolean add(E e) {\n        boolean added = super.add(e);\n        if (size() > maxSize) {\n            removeRange(0, size() - maxSize);\n        }\n        return added;\n    }\n\n    @Override\n    public boolean addAll(int index, java.util.Collection<? extends E> c) {\n        boolean added = super.addAll(index, c);", "    public boolean addAll(int index, java.util.Collection<? extends E> c) {\n        boolean added = super.addAll(index, c);\n        if (size() > maxSize) {\n            removeRange(0, size() - maxSize);\n        }\n        return added;\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/model/response/ChatResponse.java", "chunked_list": ["\npackage es.achousa.model.response;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.annotation.processing.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;", "import com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n    \"id\",", "@JsonPropertyOrder({\n    \"id\",\n    \"object\",\n    \"created\",\n    \"model\",\n    \"usage\",\n    \"choices\"\n})\n@Generated(\"jsonschema2pojo\")\npublic class ChatResponse {\n\n    @JsonProperty(\"id\")\n    private String id;\n    @JsonProperty(\"object\")\n    private String object;\n    @JsonProperty(\"created\")\n    private Integer created;\n    @JsonProperty(\"model\")\n    private String model;\n    @JsonProperty(\"usage\")\n    private Usage usage;\n    @JsonProperty(\"choices\")\n    private List<Choice> choices = new ArrayList<Choice>();\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"id\")", "@Generated(\"jsonschema2pojo\")\npublic class ChatResponse {\n\n    @JsonProperty(\"id\")\n    private String id;\n    @JsonProperty(\"object\")\n    private String object;\n    @JsonProperty(\"created\")\n    private Integer created;\n    @JsonProperty(\"model\")\n    private String model;\n    @JsonProperty(\"usage\")\n    private Usage usage;\n    @JsonProperty(\"choices\")\n    private List<Choice> choices = new ArrayList<Choice>();\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"id\")", "    public String getId() {\n        return id;\n    }\n\n    @JsonProperty(\"id\")\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public ChatResponse withId(String id) {\n        this.id = id;\n        return this;\n    }\n\n    @JsonProperty(\"object\")", "    public ChatResponse withId(String id) {\n        this.id = id;\n        return this;\n    }\n\n    @JsonProperty(\"object\")\n    public String getObject() {\n        return object;\n    }\n\n    @JsonProperty(\"object\")", "    public void setObject(String object) {\n        this.object = object;\n    }\n\n    public ChatResponse withObject(String object) {\n        this.object = object;\n        return this;\n    }\n\n    @JsonProperty(\"created\")\n    public Integer getCreated() {\n        return created;\n    }\n\n    @JsonProperty(\"created\")", "    public Integer getCreated() {\n        return created;\n    }\n\n    @JsonProperty(\"created\")\n    public void setCreated(Integer created) {\n        this.created = created;\n    }\n\n    public ChatResponse withCreated(Integer created) {\n        this.created = created;\n        return this;\n    }\n\n    @JsonProperty(\"model\")", "    public ChatResponse withCreated(Integer created) {\n        this.created = created;\n        return this;\n    }\n\n    @JsonProperty(\"model\")\n    public String getModel() {\n        return model;\n    }\n\n    @JsonProperty(\"model\")", "    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public ChatResponse withModel(String model) {\n        this.model = model;\n        return this;\n    }\n\n    @JsonProperty(\"usage\")\n    public Usage getUsage() {\n        return usage;\n    }\n\n    @JsonProperty(\"usage\")", "    public Usage getUsage() {\n        return usage;\n    }\n\n    @JsonProperty(\"usage\")\n    public void setUsage(Usage usage) {\n        this.usage = usage;\n    }\n\n    public ChatResponse withUsage(Usage usage) {\n        this.usage = usage;\n        return this;\n    }\n\n    @JsonProperty(\"choices\")\n    public List<Choice> getChoices() {\n        return choices;\n    }\n\n    @JsonProperty(\"choices\")", "    public ChatResponse withUsage(Usage usage) {\n        this.usage = usage;\n        return this;\n    }\n\n    @JsonProperty(\"choices\")\n    public List<Choice> getChoices() {\n        return choices;\n    }\n\n    @JsonProperty(\"choices\")", "    public void setChoices(List<Choice> choices) {\n        this.choices = choices;\n    }\n\n    public ChatResponse withChoices(List<Choice> choices) {\n        this.choices = choices;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    public ChatResponse withAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(ChatResponse.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"id\");\n        sb.append('=');\n        sb.append(((this.id == null)?\"<null>\":this.id));\n        sb.append(',');\n        sb.append(\"object\");\n        sb.append('=');\n        sb.append(((this.object == null)?\"<null>\":this.object));\n        sb.append(',');\n        sb.append(\"created\");\n        sb.append('=');\n        sb.append(((this.created == null)?\"<null>\":this.created));\n        sb.append(',');\n        sb.append(\"model\");\n        sb.append('=');\n        sb.append(((this.model == null)?\"<null>\":this.model));\n        sb.append(',');\n        sb.append(\"usage\");\n        sb.append('=');\n        sb.append(((this.usage == null)?\"<null>\":this.usage));\n        sb.append(',');\n        sb.append(\"choices\");\n        sb.append('=');\n        sb.append(((this.choices == null)?\"<null>\":this.choices));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(ChatResponse.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"id\");\n        sb.append('=');\n        sb.append(((this.id == null)?\"<null>\":this.id));\n        sb.append(',');\n        sb.append(\"object\");\n        sb.append('=');\n        sb.append(((this.object == null)?\"<null>\":this.object));\n        sb.append(',');\n        sb.append(\"created\");\n        sb.append('=');\n        sb.append(((this.created == null)?\"<null>\":this.created));\n        sb.append(',');\n        sb.append(\"model\");\n        sb.append('=');\n        sb.append(((this.model == null)?\"<null>\":this.model));\n        sb.append(',');\n        sb.append(\"usage\");\n        sb.append('=');\n        sb.append(((this.usage == null)?\"<null>\":this.usage));\n        sb.append(',');\n        sb.append(\"choices\");\n        sb.append('=');\n        sb.append(((this.choices == null)?\"<null>\":this.choices));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "        if (sb.charAt((sb.length()- 1)) == ',') {\n            sb.setCharAt((sb.length()- 1), ']');\n        } else {\n            sb.append(']');\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.created == null)? 0 :this.created.hashCode()));\n        result = ((result* 31)+((this.usage == null)? 0 :this.usage.hashCode()));\n        result = ((result* 31)+((this.model == null)? 0 :this.model.hashCode()));\n        result = ((result* 31)+((this.id == null)? 0 :this.id.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.choices == null)? 0 :this.choices.hashCode()));\n        result = ((result* 31)+((this.object == null)? 0 :this.object.hashCode()));\n        return result;\n    }\n\n    @Override", "    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.created == null)? 0 :this.created.hashCode()));\n        result = ((result* 31)+((this.usage == null)? 0 :this.usage.hashCode()));\n        result = ((result* 31)+((this.model == null)? 0 :this.model.hashCode()));\n        result = ((result* 31)+((this.id == null)? 0 :this.id.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.choices == null)? 0 :this.choices.hashCode()));\n        result = ((result* 31)+((this.object == null)? 0 :this.object.hashCode()));\n        return result;\n    }\n\n    @Override", "    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof ChatResponse) == false) {\n            return false;\n        }\n        ChatResponse rhs = ((ChatResponse) other);\n        return ((((((((this.created == rhs.created)||((this.created!= null)&&this.created.equals(rhs.created)))&&((this.usage == rhs.usage)||((this.usage!= null)&&this.usage.equals(rhs.usage))))&&((this.model == rhs.model)||((this.model!= null)&&this.model.equals(rhs.model))))&&((this.id == rhs.id)||((this.id!= null)&&this.id.equals(rhs.id))))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))))&&((this.choices == rhs.choices)||((this.choices!= null)&&this.choices.equals(rhs.choices))))&&((this.object == rhs.object)||((this.object!= null)&&this.object.equals(rhs.object))));\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/model/response/Usage.java", "chunked_list": ["\npackage es.achousa.model.response;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.annotation.processing.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;", "import com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n    \"prompt_tokens\",\n    \"completion_tokens\",\n    \"total_tokens\"", "    \"completion_tokens\",\n    \"total_tokens\"\n})\n@Generated(\"jsonschema2pojo\")\npublic class Usage {\n\n    @JsonProperty(\"prompt_tokens\")\n    private Integer promptTokens;\n    @JsonProperty(\"completion_tokens\")\n    private Integer completionTokens;\n    @JsonProperty(\"total_tokens\")\n    private Integer totalTokens;\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"prompt_tokens\")", "    public Integer getPromptTokens() {\n        return promptTokens;\n    }\n\n    @JsonProperty(\"prompt_tokens\")\n    public void setPromptTokens(Integer promptTokens) {\n        this.promptTokens = promptTokens;\n    }\n\n    public Usage withPromptTokens(Integer promptTokens) {\n        this.promptTokens = promptTokens;\n        return this;\n    }\n\n    @JsonProperty(\"completion_tokens\")", "    public Usage withPromptTokens(Integer promptTokens) {\n        this.promptTokens = promptTokens;\n        return this;\n    }\n\n    @JsonProperty(\"completion_tokens\")\n    public Integer getCompletionTokens() {\n        return completionTokens;\n    }\n\n    @JsonProperty(\"completion_tokens\")", "    public void setCompletionTokens(Integer completionTokens) {\n        this.completionTokens = completionTokens;\n    }\n\n    public Usage withCompletionTokens(Integer completionTokens) {\n        this.completionTokens = completionTokens;\n        return this;\n    }\n\n    @JsonProperty(\"total_tokens\")\n    public Integer getTotalTokens() {\n        return totalTokens;\n    }\n\n    @JsonProperty(\"total_tokens\")", "    public Integer getTotalTokens() {\n        return totalTokens;\n    }\n\n    @JsonProperty(\"total_tokens\")\n    public void setTotalTokens(Integer totalTokens) {\n        this.totalTokens = totalTokens;\n    }\n\n    public Usage withTotalTokens(Integer totalTokens) {\n        this.totalTokens = totalTokens;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public Usage withTotalTokens(Integer totalTokens) {\n        this.totalTokens = totalTokens;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    public Usage withAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Usage.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"promptTokens\");\n        sb.append('=');\n        sb.append(((this.promptTokens == null)?\"<null>\":this.promptTokens));\n        sb.append(',');\n        sb.append(\"completionTokens\");\n        sb.append('=');\n        sb.append(((this.completionTokens == null)?\"<null>\":this.completionTokens));\n        sb.append(',');\n        sb.append(\"totalTokens\");\n        sb.append('=');\n        sb.append(((this.totalTokens == null)?\"<null>\":this.totalTokens));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Usage.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"promptTokens\");\n        sb.append('=');\n        sb.append(((this.promptTokens == null)?\"<null>\":this.promptTokens));\n        sb.append(',');\n        sb.append(\"completionTokens\");\n        sb.append('=');\n        sb.append(((this.completionTokens == null)?\"<null>\":this.completionTokens));\n        sb.append(',');\n        sb.append(\"totalTokens\");\n        sb.append('=');\n        sb.append(((this.totalTokens == null)?\"<null>\":this.totalTokens));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "        if (sb.charAt((sb.length()- 1)) == ',') {\n            sb.setCharAt((sb.length()- 1), ']');\n        } else {\n            sb.append(']');\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.promptTokens == null)? 0 :this.promptTokens.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.totalTokens == null)? 0 :this.totalTokens.hashCode()));\n        result = ((result* 31)+((this.completionTokens == null)? 0 :this.completionTokens.hashCode()));\n        return result;\n    }\n\n    @Override", "    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.promptTokens == null)? 0 :this.promptTokens.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.totalTokens == null)? 0 :this.totalTokens.hashCode()));\n        result = ((result* 31)+((this.completionTokens == null)? 0 :this.completionTokens.hashCode()));\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object other) {", "    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof Usage) == false) {\n            return false;\n        }\n        Usage rhs = ((Usage) other);\n        return (((((this.promptTokens == rhs.promptTokens)||((this.promptTokens!= null)&&this.promptTokens.equals(rhs.promptTokens)))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))))&&((this.totalTokens == rhs.totalTokens)||((this.totalTokens!= null)&&this.totalTokens.equals(rhs.totalTokens))))&&((this.completionTokens == rhs.completionTokens)||((this.completionTokens!= null)&&this.completionTokens.equals(rhs.completionTokens))));\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/model/response/Message.java", "chunked_list": ["\npackage es.achousa.model.response;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.annotation.processing.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;", "import com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n    \"role\",\n    \"content\"\n})", "    \"content\"\n})\n@Generated(\"jsonschema2pojo\")\npublic class Message {\n\n    @JsonProperty(\"role\")\n    private String role;\n    @JsonProperty(\"content\")\n    private String content;\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"role\")", "    public String getRole() {\n        return role;\n    }\n\n    @JsonProperty(\"role\")\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public Message withRole(String role) {\n        this.role = role;\n        return this;\n    }\n\n    @JsonProperty(\"content\")", "    public Message withRole(String role) {\n        this.role = role;\n        return this;\n    }\n\n    @JsonProperty(\"content\")\n    public String getContent() {\n        return content;\n    }\n\n    @JsonProperty(\"content\")", "    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Message withContent(String content) {\n        this.content = content;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    public Message withAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Message.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"role\");\n        sb.append('=');\n        sb.append(((this.role == null)?\"<null>\":this.role));\n        sb.append(',');\n        sb.append(\"content\");\n        sb.append('=');\n        sb.append(((this.content == null)?\"<null>\":this.content));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Message.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"role\");\n        sb.append('=');\n        sb.append(((this.role == null)?\"<null>\":this.role));\n        sb.append(',');\n        sb.append(\"content\");\n        sb.append('=');\n        sb.append(((this.content == null)?\"<null>\":this.content));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "        if (sb.charAt((sb.length()- 1)) == ',') {\n            sb.setCharAt((sb.length()- 1), ']');\n        } else {\n            sb.append(']');\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.role == null)? 0 :this.role.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.content == null)? 0 :this.content.hashCode()));\n        return result;\n    }\n\n    @Override", "    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.role == null)? 0 :this.role.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.content == null)? 0 :this.content.hashCode()));\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }", "    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof Message) == false) {\n            return false;\n        }\n        Message rhs = ((Message) other);\n        return ((((this.role == rhs.role)||((this.role!= null)&&this.role.equals(rhs.role)))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))))&&((this.content == rhs.content)||((this.content!= null)&&this.content.equals(rhs.content))));\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/model/response/Choice.java", "chunked_list": ["\npackage es.achousa.model.response;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.annotation.processing.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;", "import com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n    \"message\",\n    \"finish_reason\",\n    \"index\"", "    \"finish_reason\",\n    \"index\"\n})\n@Generated(\"jsonschema2pojo\")\npublic class Choice {\n\n    @JsonProperty(\"message\")\n    private Message message;\n    @JsonProperty(\"finish_reason\")\n    private String finishReason;\n    @JsonProperty(\"index\")\n    private Integer index;\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"message\")", "    public Message getMessage() {\n        return message;\n    }\n\n    @JsonProperty(\"message\")\n    public void setMessage(Message message) {\n        this.message = message;\n    }\n\n    public Choice withMessage(Message message) {\n        this.message = message;\n        return this;\n    }\n\n    @JsonProperty(\"finish_reason\")", "    public Choice withMessage(Message message) {\n        this.message = message;\n        return this;\n    }\n\n    @JsonProperty(\"finish_reason\")\n    public String getFinishReason() {\n        return finishReason;\n    }\n\n    @JsonProperty(\"finish_reason\")", "    public void setFinishReason(String finishReason) {\n        this.finishReason = finishReason;\n    }\n\n    public Choice withFinishReason(String finishReason) {\n        this.finishReason = finishReason;\n        return this;\n    }\n\n    @JsonProperty(\"index\")\n    public Integer getIndex() {\n        return index;\n    }\n\n    @JsonProperty(\"index\")", "    public Integer getIndex() {\n        return index;\n    }\n\n    @JsonProperty(\"index\")\n    public void setIndex(Integer index) {\n        this.index = index;\n    }\n\n    public Choice withIndex(Integer index) {\n        this.index = index;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public Choice withIndex(Integer index) {\n        this.index = index;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    public Choice withAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Choice.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"message\");\n        sb.append('=');\n        sb.append(((this.message == null)?\"<null>\":this.message));\n        sb.append(',');\n        sb.append(\"finishReason\");\n        sb.append('=');\n        sb.append(((this.finishReason == null)?\"<null>\":this.finishReason));\n        sb.append(',');\n        sb.append(\"index\");\n        sb.append('=');\n        sb.append(((this.index == null)?\"<null>\":this.index));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Choice.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"message\");\n        sb.append('=');\n        sb.append(((this.message == null)?\"<null>\":this.message));\n        sb.append(',');\n        sb.append(\"finishReason\");\n        sb.append('=');\n        sb.append(((this.finishReason == null)?\"<null>\":this.finishReason));\n        sb.append(',');\n        sb.append(\"index\");\n        sb.append('=');\n        sb.append(((this.index == null)?\"<null>\":this.index));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "        if (sb.charAt((sb.length()- 1)) == ',') {\n            sb.setCharAt((sb.length()- 1), ']');\n        } else {\n            sb.append(']');\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.finishReason == null)? 0 :this.finishReason.hashCode()));\n        result = ((result* 31)+((this.index == null)? 0 :this.index.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.message == null)? 0 :this.message.hashCode()));\n        return result;\n    }\n\n    @Override", "    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.finishReason == null)? 0 :this.finishReason.hashCode()));\n        result = ((result* 31)+((this.index == null)? 0 :this.index.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.message == null)? 0 :this.message.hashCode()));\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object other) {", "    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof Choice) == false) {\n            return false;\n        }\n        Choice rhs = ((Choice) other);\n        return (((((this.finishReason == rhs.finishReason)||((this.finishReason!= null)&&this.finishReason.equals(rhs.finishReason)))&&((this.index == rhs.index)||((this.index!= null)&&this.index.equals(rhs.index))))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))))&&((this.message == rhs.message)||((this.message!= null)&&this.message.equals(rhs.message))));\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/model/request/ChatRequest.java", "chunked_list": ["\npackage es.achousa.model.request;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.annotation.processing.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;", "import com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n    \"model\",", "@JsonPropertyOrder({\n    \"model\",\n    \"messages\",\n    \"max_tokens\",\n    \"temperature\"\n})\n@Generated(\"jsonschema2pojo\")\npublic class ChatRequest {\n\n    @JsonProperty(\"model\")\n    private String model;\n    @JsonProperty(\"messages\")\n    private List<Message> messages = new ArrayList<Message>();\n    @JsonProperty(\"max_tokens\")\n    private Integer maxTokens;\n    @JsonProperty(\"temperature\")\n    private Double temperature;\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"model\")", "    public String getModel() {\n        return model;\n    }\n\n    @JsonProperty(\"model\")\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public ChatRequest withModel(String model) {\n        this.model = model;\n        return this;\n    }\n\n    @JsonProperty(\"messages\")\n    public List<Message> getMessages() {\n        return messages;\n    }\n\n    @JsonProperty(\"messages\")", "    public ChatRequest withModel(String model) {\n        this.model = model;\n        return this;\n    }\n\n    @JsonProperty(\"messages\")\n    public List<Message> getMessages() {\n        return messages;\n    }\n\n    @JsonProperty(\"messages\")", "    public void setMessages(List<Message> messages) {\n        this.messages = messages;\n    }\n\n    public ChatRequest withMessages(List<Message> messages) {\n        this.messages = messages;\n        return this;\n    }\n\n    @JsonProperty(\"max_tokens\")\n    public Integer getMaxTokens() {\n        return maxTokens;\n    }\n\n    @JsonProperty(\"max_tokens\")", "    public Integer getMaxTokens() {\n        return maxTokens;\n    }\n\n    @JsonProperty(\"max_tokens\")\n    public void setMaxTokens(Integer maxTokens) {\n        this.maxTokens = maxTokens;\n    }\n\n    public ChatRequest withMaxTokens(Integer maxTokens) {\n        this.maxTokens = maxTokens;\n        return this;\n    }\n\n    @JsonProperty(\"temperature\")", "    public ChatRequest withMaxTokens(Integer maxTokens) {\n        this.maxTokens = maxTokens;\n        return this;\n    }\n\n    @JsonProperty(\"temperature\")\n    public Double getTemperature() {\n        return temperature;\n    }\n\n    @JsonProperty(\"temperature\")", "    public void setTemperature(Double temperature) {\n        this.temperature = temperature;\n    }\n\n    public ChatRequest withTemperature(Double temperature) {\n        this.temperature = temperature;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    public ChatRequest withAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(ChatRequest.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"model\");\n        sb.append('=');\n        sb.append(((this.model == null)?\"<null>\":this.model));\n        sb.append(',');\n        sb.append(\"messages\");\n        sb.append('=');\n        sb.append(((this.messages == null)?\"<null>\":this.messages));\n        sb.append(',');\n        sb.append(\"maxTokens\");\n        sb.append('=');\n        sb.append(((this.maxTokens == null)?\"<null>\":this.maxTokens));\n        sb.append(',');\n        sb.append(\"temperature\");\n        sb.append('=');\n        sb.append(((this.temperature == null)?\"<null>\":this.temperature));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(ChatRequest.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"model\");\n        sb.append('=');\n        sb.append(((this.model == null)?\"<null>\":this.model));\n        sb.append(',');\n        sb.append(\"messages\");\n        sb.append('=');\n        sb.append(((this.messages == null)?\"<null>\":this.messages));\n        sb.append(',');\n        sb.append(\"maxTokens\");\n        sb.append('=');\n        sb.append(((this.maxTokens == null)?\"<null>\":this.maxTokens));\n        sb.append(',');\n        sb.append(\"temperature\");\n        sb.append('=');\n        sb.append(((this.temperature == null)?\"<null>\":this.temperature));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "        if (sb.charAt((sb.length()- 1)) == ',') {\n            sb.setCharAt((sb.length()- 1), ']');\n        } else {\n            sb.append(']');\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.maxTokens == null)? 0 :this.maxTokens.hashCode()));\n        result = ((result* 31)+((this.temperature == null)? 0 :this.temperature.hashCode()));\n        result = ((result* 31)+((this.messages == null)? 0 :this.messages.hashCode()));\n        result = ((result* 31)+((this.model == null)? 0 :this.model.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        return result;\n    }\n\n    @Override", "    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.maxTokens == null)? 0 :this.maxTokens.hashCode()));\n        result = ((result* 31)+((this.temperature == null)? 0 :this.temperature.hashCode()));\n        result = ((result* 31)+((this.messages == null)? 0 :this.messages.hashCode()));\n        result = ((result* 31)+((this.model == null)? 0 :this.model.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        return result;\n    }\n\n    @Override", "    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof ChatRequest) == false) {\n            return false;\n        }\n        ChatRequest rhs = ((ChatRequest) other);\n        return ((((((this.maxTokens == rhs.maxTokens)||((this.maxTokens!= null)&&this.maxTokens.equals(rhs.maxTokens)))&&((this.temperature == rhs.temperature)||((this.temperature!= null)&&this.temperature.equals(rhs.temperature))))&&((this.messages == rhs.messages)||((this.messages!= null)&&this.messages.equals(rhs.messages))))&&((this.model == rhs.model)||((this.model!= null)&&this.model.equals(rhs.model))))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))));\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/model/request/Message.java", "chunked_list": ["\npackage es.achousa.model.request;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.annotation.processing.Generated;\nimport com.fasterxml.jackson.annotation.JsonAnyGetter;\nimport com.fasterxml.jackson.annotation.JsonAnySetter;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;", "import com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n    \"role\",\n    \"content\"\n})", "    \"content\"\n})\n@Generated(\"jsonschema2pojo\")\npublic class Message {\n\n    @JsonProperty(\"role\")\n    private String role;\n    @JsonProperty(\"content\")\n    private String content;\n    @JsonIgnore\n    private Map<String, Object> additionalProperties = new HashMap<String, Object>();\n\n    @JsonProperty(\"role\")", "    public String getRole() {\n        return role;\n    }\n\n    @JsonProperty(\"role\")\n    public void setRole(String role) {\n        this.role = role;\n    }\n\n    public Message withRole(String role) {\n        this.role = role;\n        return this;\n    }\n\n    @JsonProperty(\"content\")", "    public Message withRole(String role) {\n        this.role = role;\n        return this;\n    }\n\n    @JsonProperty(\"content\")\n    public String getContent() {\n        return content;\n    }\n\n    @JsonProperty(\"content\")", "    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public Message withContent(String content) {\n        this.content = content;\n        return this;\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getAdditionalProperties() {\n        return this.additionalProperties;\n    }\n\n    @JsonAnySetter", "    public void setAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n    }\n\n    public Message withAdditionalProperty(String name, Object value) {\n        this.additionalProperties.put(name, value);\n        return this;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Message.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"role\");\n        sb.append('=');\n        sb.append(((this.role == null)?\"<null>\":this.role));\n        sb.append(',');\n        sb.append(\"content\");\n        sb.append('=');\n        sb.append(((this.content == null)?\"<null>\":this.content));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(Message.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');\n        sb.append(\"role\");\n        sb.append('=');\n        sb.append(((this.role == null)?\"<null>\":this.role));\n        sb.append(',');\n        sb.append(\"content\");\n        sb.append('=');\n        sb.append(((this.content == null)?\"<null>\":this.content));\n        sb.append(',');\n        sb.append(\"additionalProperties\");\n        sb.append('=');\n        sb.append(((this.additionalProperties == null)?\"<null>\":this.additionalProperties));\n        sb.append(',');", "        if (sb.charAt((sb.length()- 1)) == ',') {\n            sb.setCharAt((sb.length()- 1), ']');\n        } else {\n            sb.append(']');\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.role == null)? 0 :this.role.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.content == null)? 0 :this.content.hashCode()));\n        return result;\n    }\n\n    @Override", "    public int hashCode() {\n        int result = 1;\n        result = ((result* 31)+((this.role == null)? 0 :this.role.hashCode()));\n        result = ((result* 31)+((this.additionalProperties == null)? 0 :this.additionalProperties.hashCode()));\n        result = ((result* 31)+((this.content == null)? 0 :this.content.hashCode()));\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }", "    public boolean equals(Object other) {\n        if (other == this) {\n            return true;\n        }\n        if ((other instanceof Message) == false) {\n            return false;\n        }\n        Message rhs = ((Message) other);\n        return ((((this.role == rhs.role)||((this.role!= null)&&this.role.equals(rhs.role)))&&((this.additionalProperties == rhs.additionalProperties)||((this.additionalProperties!= null)&&this.additionalProperties.equals(rhs.additionalProperties))))&&((this.content == rhs.content)||((this.content!= null)&&this.content.equals(rhs.content))));\n    }\n\n}\n"]}
{"filename": "src/main/java/es/achousa/clients/OpenAIApiClient.java", "chunked_list": ["/**\n * This class represents a client that interacts with the OpenAI API to get a chat response.\n */\npackage es.achousa.clients;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport es.achousa.model.request.ChatRequest;\nimport es.achousa.model.response.ChatResponse;\nimport okhttp3.MediaType;\nimport okhttp3.Request;\nimport okhttp3.OkHttpClient;", "import okhttp3.Request;\nimport okhttp3.OkHttpClient;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.util.concurrent.TimeUnit;\n", "import java.util.concurrent.TimeUnit;\n\n@Service\npublic class OpenAIApiClient {\n\n    public final MediaType JSON = MediaType.get(\"application/json; charset=utf-8\");\n    @Value(\"${openai.apikey}\")\n    private String apiKey;\n    @Value(\"${openai.url}\")\n    private String url;\n    private OkHttpClient client;\n\n    /**\n     * Initializes the OkHttpClient with a timeout of 50 seconds for each operation.\n     */\n    @PostConstruct\n    private void init() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(50, TimeUnit.SECONDS)\n                .writeTimeout(50, TimeUnit.SECONDS)\n                .readTimeout(50, TimeUnit.SECONDS)\n                .build();\n    }\n\n    /**\n     * Sends a chat request to the OpenAI API and returns a chat response.\n     * @param chatRequest the chat request to be sent.\n     * @return a chat response from the OpenAI API.\n     * @throws Exception if the response is not successful or if there is a problem with the request.\n     */", "    public ChatResponse getCompletion(ChatRequest chatRequest) throws Exception {\n        ObjectMapper mapper = new ObjectMapper();\n        RequestBody body = RequestBody.create(mapper.writeValueAsString(chatRequest), JSON);\n        Request request = new Request.Builder()\n                .url(url)\n                .addHeader(\"Content-Type\", \"application/json\")\n                .addHeader(\"Authorization\", \"Bearer \" + apiKey)\n                .post(body)\n                .build();\n        Response response = client.newCall(request).execute();\n        if (!response.isSuccessful()) throw new Exception(\"Unexpected code \" + response);\n        ChatResponse chatResponse = mapper.readValue(response.body().string(), ChatResponse.class);\n        return chatResponse;\n    }\n}\n", "        if (!response.isSuccessful()) throw new Exception(\"Unexpected code \" + response);\n        ChatResponse chatResponse = mapper.readValue(response.body().string(), ChatResponse.class);\n        return chatResponse;\n    }\n}\n"]}
{"filename": "src/main/java/es/achousa/services/GptService.java", "chunked_list": ["/**\n * This class provides a service to communicate with the OpenAI API\n * and generate text based on user input. It uses a HashMap to store\n * the context of each user conversation and a whitelist to restrict\n * access to the bot. It also provides a method to reset the context\n * of a user.\n */\n\npackage es.achousa.services;\n", "package es.achousa.services;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.pengrad.telegrambot.model.Chat;\nimport com.pengrad.telegrambot.model.Update;\nimport es.achousa.clients.OpenAIApiClient;\nimport es.achousa.model.request.ChatRequest;\nimport es.achousa.model.request.Message;\nimport es.achousa.model.response.ChatResponse;\nimport es.achousa.utils.MessageLog;", "import es.achousa.model.response.ChatResponse;\nimport es.achousa.utils.MessageLog;\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.core.env.Environment;\nimport org.springframework.stereotype.Service;\n", "import org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\n\n@Service\npublic class GptService {\n\n    protected final Log log = LogFactory.getLog(this.getClass());\n    @Autowired\n    private OpenAIApiClient client;\n    @Value(\"${openai.maxtokens}\")\n    private Integer maxtokens;\n    @Value(\"${openai.model}\")\n    private String model;\n    @Value(\"${openai.temperature}\")\n    private Double temperature;\n    @Value(\"${openai.systemprompt}\")\n    private String systemprompt;\n    @Value(\"${openai.max.message.pool.size}\")\n    Integer maxMessagePoolSize;\n    @Value(\"${bot.presentation}\")\n    private String presentation;\n    @Value(\"#{'${bot.whitelist:}'.empty ? null : '${bot.whitelist}'.split(',')}\")\n    private ArrayList<String> whiteList;\n    private HashSet<String> whiteSet;\n\n    // UserContext is a Map, with the userid and a list of previous messages\n    private HashMap<Long, MessageLog<Message>> userContext = new HashMap<>();\n\n    private ArrayList<String> examples;\n\n    @Autowired\n    private Environment env;\n\n    private Integer ntokens = 0;\n", "public class GptService {\n\n    protected final Log log = LogFactory.getLog(this.getClass());\n    @Autowired\n    private OpenAIApiClient client;\n    @Value(\"${openai.maxtokens}\")\n    private Integer maxtokens;\n    @Value(\"${openai.model}\")\n    private String model;\n    @Value(\"${openai.temperature}\")\n    private Double temperature;\n    @Value(\"${openai.systemprompt}\")\n    private String systemprompt;\n    @Value(\"${openai.max.message.pool.size}\")\n    Integer maxMessagePoolSize;\n    @Value(\"${bot.presentation}\")\n    private String presentation;\n    @Value(\"#{'${bot.whitelist:}'.empty ? null : '${bot.whitelist}'.split(',')}\")\n    private ArrayList<String> whiteList;\n    private HashSet<String> whiteSet;\n\n    // UserContext is a Map, with the userid and a list of previous messages\n    private HashMap<Long, MessageLog<Message>> userContext = new HashMap<>();\n\n    private ArrayList<String> examples;\n\n    @Autowired\n    private Environment env;\n\n    private Integer ntokens = 0;\n", "    public Integer getNumTokens() {\n        return this.ntokens;\n    }\n\n    /**\n     * This method is called after the bean has been instantiated and\n     * is used to initialize the examples list and the whitelist.\n     */\n    @PostConstruct\n    private void init(){\n        // Read examples from configuration\n        this.examples = getPropertyList(\"openai.example\");\n        // turn whitelist into a hashset for quicker access", "        if(this.whiteList!=null && !this.whiteList.isEmpty()) {\n            this.whiteSet = new HashSet<>();\n            for(String name : this.whiteList) {\n                this.whiteSet.add(name.toLowerCase());\n            }\n        } else {\n            this.whiteSet = null;\n        }\n\n    }\n\n    /**\n     * This method gets a list of properties from the Spring Environment\n     * and returns an ArrayList of Strings. It is used to load examples\n     * from configuration.\n     * @param name the name of the property to retrieve\n     * @return an ArrayList with the values of the property\n     */\n    private ArrayList<String> getPropertyList(String name) {\n        ArrayList<String> list = new ArrayList<>();\n        int i = 1;", "        while (env.containsProperty(name+ \".\" + i)) {\n            list.add(env.getProperty(name +\".\" + i));\n            i++;\n        }\n        return list;\n    }\n\n    /**\n     * This method sends a message to the OpenAI API to generate a text\n     * response based on user input. It checks if the user is authorized\n     * to talk to the bot and if the conversation is private or not.\n     * @param update the update object containing user input\n     * @return the text response generated by the OpenAI API\n     */", "    public synchronized String SendMessage(Update update) {\n\n        if(!checkPermission(update)){\n            return \"I'm sorry but I can't talk to you, you're not on the access list.\";\n        }\n\n        ChatResponse response = null;\n        try {\n\n            // Compose new request\n            ObjectMapper mapper = new ObjectMapper();\n            ChatRequest chatRequest = new ChatRequest();\n            chatRequest.setModel(model);\n            chatRequest.setTemperature(temperature);\n            chatRequest.setMaxTokens(maxtokens);\n\n            // Set up array of messages\n            ArrayList<Message> messages = new ArrayList<>();\n            Message systemMessage = new Message();\n\n            // System prompt\n            systemMessage.setRole(\"system\");\n            systemMessage.setContent(systemprompt);\n            messages.add(systemMessage);\n\n            // List of user messages", "            if(isPrivate(update)) {\n                // If this is a private chat, then we send along a number of previous messages for context\n                if(!userContext.containsKey(update.message().from().id())) {\n                    // If the user is not in the map push a new entry for him\n                    userContext.put(update.message().from().id(),new MessageLog<>(maxMessagePoolSize));\n                    // If there are examples, add them to the context (this is only made the first time)\n                    if(!this.examples.isEmpty()) {\n                        userContext.get(update.message().from().id()).addAll(getExamples(this.examples));\n                    }\n                }\n                // Add the new message to the message log, previous messages will be erased\n                // when context reaches it's max length\n                Message newUserMessage = new Message();\n                newUserMessage.setRole(\"user\");\n                newUserMessage.setContent(update.message().text());\n                userContext.get(update.message().from().id()).add(newUserMessage);\n                // add to userMessages\n                messages.addAll(userContext.get(update.message().from().id()));\n            } else {\n                // If this is a group, the message is processed without any context\n                // If there are examples, we add them to the list of messages prior the user message", "                if(!this.examples.isEmpty()) {\n                    messages.addAll(getExamples(this.examples));\n                }\n                Message userMessage = new Message();\n                userMessage.setRole(\"user\");\n                userMessage.setContent(update.message().text());\n                messages.add(userMessage);\n            }\n\n            // set messages to the request\n            chatRequest.setMessages(messages);\n\n            // Send synchronous request to the OpenAI Api\n            response = client.getCompletion(chatRequest);\n            // Incremet token counter\n            ntokens = ntokens + response.getUsage().getTotalTokens();\n\n            // If this is a private conversation, add the assistant response to the user context", "            if(isPrivate(update)) {\n                Message assistantMessage = new Message();\n                assistantMessage.setRole(\"assistant\");\n                assistantMessage.setContent(response.getChoices().get(0).getMessage().getContent());\n                userContext.get(update.message().from().id()).add(assistantMessage);\n            }\n\n            // Return text to be sent to the user\n            return response.getChoices().get(0).getMessage().getContent();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"I'm sorry, something went wrong\";\n        }\n    }\n\n    /**\n     * This method returns an ArrayList of Messages based on an ArrayList\n     * of Strings. Each message is created with a role and a content.\n     * @param examples the ArrayList of Strings to convert into Messages\n     * @return an ArrayList of Messages\n     */\n    private ArrayList<Message> getExamples(ArrayList<String> examples) {\n        ArrayList<Message> results = new ArrayList<>();", "        for(String example: examples) {\n            try {\n                String role = example.split(\":\",2)[0];\n                String content = example.split(\":\",2)[1];\n                if(StringUtils.isNotEmpty(role) && StringUtils.isNotEmpty(content)) {\n                    Message exampleMessage = new Message();\n                    exampleMessage.setRole(role.toLowerCase());\n                    exampleMessage.setContent(content);\n                    results.add(exampleMessage);\n                } else {\n                    log.error(\"Something went wrong with this example: \" + example);\n                }\n            } catch(Exception e) {\n                log.error(\"Something went wrong with this example: \" + example + \" \" + e.getMessage());\n            }\n        }\n        return results;\n    }\n\n    /**\n     * This method checks if the user is authorized to talk to the bot\n     * based on the whitelist. If the whitelist is empty, everyone can\n     * talk to the bot. Otherwise, the method checks if the user or the\n     * group is in the whitelist.\n     * @param update the update object containing user information\n     * @return true if the user is authorized, false otherwise\n     */\n    private boolean checkPermission(Update update) {\n        // if the whitelist is empty, everyone can talk to the bot\n        // otherwise it must be checked against\n        String userName = \"none\";\n        String groupName = \"none\";", "        if (this.whiteSet!=null && !this.whiteSet.isEmpty()) {\n            if(update.message().from().firstName()!=null) {\n                userName = update.message().from().firstName().toLowerCase();\n            }\n            if(update.message().chat().title()!=null) {\n                groupName = update.message().chat().title().toLowerCase();\n            }\n            // either name on the list, grants access\n            if(this.whiteSet.contains(userName)) {\n                // access is granted for the user\n                return true;\n            }", "            if(this.whiteSet.contains(userName)) {\n                // access is granted for the user\n                return true;\n            }\n            if(this.whiteSet.contains(groupName)) {\n                // access is granted for the group\n                return true;\n            }\n\n            log.error(\"An unauthorised user tried to talk to me: \" + userName);\n            return false;\n        }\n        // no whitelist\n        return true;\n\n    }\n\n    /**\n     * This method sends a message to the OpenAI API to generate a text\n     * response. The message is not based on user input, but on a custom\n     * presentation text.\n     * @param update the update object containing user information\n     * @param text the custom presentation text\n     * @return the text response generated by the OpenAI API\n     */", "    public String sendCustomMessage(Update update, String text) {\n        ChatResponse response = null;\n        try {\n\n            // Compose new request\n            ObjectMapper mapper = new ObjectMapper();\n            ChatRequest chatRequest = new ChatRequest();\n            chatRequest.setModel(model);\n            chatRequest.setTemperature(temperature);\n            chatRequest.setMaxTokens(maxtokens);\n            // Set up array of messages\n            ArrayList<Message> messages = new ArrayList<>();\n            Message systemMessage = new Message();\n            // System prompt\n            systemMessage.setRole(\"system\");\n            systemMessage.setContent(systemprompt);\n            messages.add(systemMessage);\n            // Custom message\n            Message userMessage = new Message();\n            userMessage.setRole(\"user\");\n            userMessage.setContent(this.presentation);\n            messages.add(userMessage);\n            // set messages to the request\n            chatRequest.setMessages(messages);\n\n            // Send synchronous request to the OpenAI Api\n            response = client.getCompletion(chatRequest);\n            // Incremet token counter\n            ntokens = ntokens + response.getUsage().getTotalTokens();\n            // Return text to be sent to the user\n            return response.getChoices().get(0).getMessage().getContent();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"Lo siento, algo ha ido mal.\";\n        }\n    }\n\n    /**\n     * Determines whether a message was sent privately to the bot or in a group chat.\n     * @param update The message received from the user.\n     * @return true if the message is private, false otherwise.\n     */\n    private boolean isPrivate(Update update) {", "        if (update.message().chat().type().equals(Chat.Type.Private)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public String resetUserContext(Update update) {\n        // If this is a private chat, reset context for current user\n        if(isPrivate(update)){\n           if (this.userContext.containsKey(update.message().from().id())) {\n               this.userContext.remove(update.message().from().id());\n               return \"Se ha reseteado el contexto del usuario \" + update.message().from().firstName();\n           } else {\n               return \"No he encontrado contexto para el usuario \" + update.message().from().firstName();\n           }\n        } else {\n            return \"No hay nada que resetear, ya es que esto es un grupo.\";\n        }\n    }\n}\n", "        if(isPrivate(update)){\n           if (this.userContext.containsKey(update.message().from().id())) {\n               this.userContext.remove(update.message().from().id());\n               return \"Se ha reseteado el contexto del usuario \" + update.message().from().firstName();\n           } else {\n               return \"No he encontrado contexto para el usuario \" + update.message().from().firstName();\n           }\n        } else {\n            return \"No hay nada que resetear, ya es que esto es un grupo.\";\n        }\n    }\n}\n"]}
{"filename": "src/main/java/es/achousa/services/TelegramBotService.java", "chunked_list": ["/**\n * This class represents a service that handles communication with a Telegram Bot. It receives messages from the bot\n * and processes them accordingly, either executing commands or generating responses using GPT technology.\n */\n\npackage es.achousa.services;\n\nimport com.pengrad.telegrambot.TelegramBot;\nimport com.pengrad.telegrambot.UpdatesListener;\nimport com.pengrad.telegrambot.model.Chat;", "import com.pengrad.telegrambot.UpdatesListener;\nimport com.pengrad.telegrambot.model.Chat;\nimport com.pengrad.telegrambot.model.Update;\nimport com.pengrad.telegrambot.model.request.*;\nimport com.pengrad.telegrambot.request.SendMessage;\nimport com.pengrad.telegrambot.response.SendResponse;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.util.List;\n\n@Service\npublic class TelegramBotService {\n\n    protected final Log log = LogFactory.getLog(this.getClass());\n    private static final String EMOJI_UFF = \"\\uD83D\\uDE13\" ;\n    @Autowired\n    GptService gptService;\n\n    @Value(\"${bot.token}\")\n    private String BOT_TOKEN;\n    @Value(\"${bot.name}\")\n    private String botName;\n    @Value(\"${bot.presentation}\")\n    private String presentationText;\n    private TelegramBot bot;\n\n    /**\n     * Initializes the Telegram Bot and sets up the updates listener to receive messages and process them.\n     */\n    @PostConstruct\n    private void init() {\n\n        this.bot = new TelegramBot(BOT_TOKEN);\n        bot.setUpdatesListener(new UpdatesListener() {\n            @Override", "@Service\npublic class TelegramBotService {\n\n    protected final Log log = LogFactory.getLog(this.getClass());\n    private static final String EMOJI_UFF = \"\\uD83D\\uDE13\" ;\n    @Autowired\n    GptService gptService;\n\n    @Value(\"${bot.token}\")\n    private String BOT_TOKEN;\n    @Value(\"${bot.name}\")\n    private String botName;\n    @Value(\"${bot.presentation}\")\n    private String presentationText;\n    private TelegramBot bot;\n\n    /**\n     * Initializes the Telegram Bot and sets up the updates listener to receive messages and process them.\n     */\n    @PostConstruct\n    private void init() {\n\n        this.bot = new TelegramBot(BOT_TOKEN);\n        bot.setUpdatesListener(new UpdatesListener() {\n            @Override", "            public int process(List<Update> updates) {\n                // process updates\n                for (Update update : updates) {\n                    if (update.message() != null && update.message().text() != null) {\n                        if (update.message().text().startsWith(\"/\")) {\n                            processCommand(update);\n                        } else {\n                            // if in a group, only process messages directly addressed to the bot\n                            if(isPrivate(update)){\n                                processText(update);\n                            } else if(update.message().text().toLowerCase().contains(\"@\"+botName.toLowerCase())) {\n                                processText(update);\n                            }\n                        }\n                    }\n                }\n                return UpdatesListener.CONFIRMED_UPDATES_ALL;\n            }\n        });\n\n    }\n\n    /**\n     * Shuts down the Telegram Bot when the application is terminated.\n     */\n    @PreDestroy\n    private void dispose(){\n        log.info(\"shutting down bot\");\n        bot.shutdown();\n    }\n\n    /**\n     * Processes a message received from a Telegram user, generating a response using GPT technology and\n     * sending it back.\n     * @param update The message received from the user.\n     */\n    private void processText(Update update) {\n\n        log.info(update.message().from().firstName()+\" said ... \" + update.message().text());\n        String response = this.gptService.SendMessage(update);\n        log.info(this.botName + \" said ... \" + response);\n        sendReply(update, response);\n    }\n\n    /**\n     * Sends a reply message back to the user.\n     * @param update The message received from the user.\n     * @param message The message to send back to the user.\n     */\n    private void sendReply(Update update, String message) {\n        SendMessage request = new SendMessage(update.message().chat().id(), message)\n                .parseMode(ParseMode.Markdown)\n                .disableWebPagePreview(true)\n                .disableNotification(true)\n                .replyMarkup(new ReplyKeyboardRemove());", "                            if(isPrivate(update)){\n                                processText(update);\n                            } else if(update.message().text().toLowerCase().contains(\"@\"+botName.toLowerCase())) {\n                                processText(update);\n                            }\n                        }\n                    }\n                }\n                return UpdatesListener.CONFIRMED_UPDATES_ALL;\n            }\n        });\n\n    }\n\n    /**\n     * Shuts down the Telegram Bot when the application is terminated.\n     */\n    @PreDestroy\n    private void dispose(){\n        log.info(\"shutting down bot\");\n        bot.shutdown();\n    }\n\n    /**\n     * Processes a message received from a Telegram user, generating a response using GPT technology and\n     * sending it back.\n     * @param update The message received from the user.\n     */\n    private void processText(Update update) {\n\n        log.info(update.message().from().firstName()+\" said ... \" + update.message().text());\n        String response = this.gptService.SendMessage(update);\n        log.info(this.botName + \" said ... \" + response);\n        sendReply(update, response);\n    }\n\n    /**\n     * Sends a reply message back to the user.\n     * @param update The message received from the user.\n     * @param message The message to send back to the user.\n     */\n    private void sendReply(Update update, String message) {\n        SendMessage request = new SendMessage(update.message().chat().id(), message)\n                .parseMode(ParseMode.Markdown)\n                .disableWebPagePreview(true)\n                .disableNotification(true)\n                .replyMarkup(new ReplyKeyboardRemove());", "        if(!isPrivate(update)){\n            // If we are in a group, do a replyTo\n            request.replyToMessageId(update.message().messageId());\n        }\n        // request.replyMarkup(new ForceReply());\n        SendResponse sendResponse = bot.execute(request);\n        if(!sendResponse.isOk()){\n            log.error(sendResponse.message());\n        }\n    }\n\n    /**\n     * Determines whether a message was sent privately to the bot or in a group chat.\n     * @param update The message received from the user.\n     * @return true if the message is private, false otherwise.\n     */\n    private boolean isPrivate(Update update) {", "        if (update.message().chat().type().equals(Chat.Type.Private)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Processes a command received from a Telegram user, executing the corresponding action.\n     * @param update The message received from the user.\n     */\n    private void processCommand(Update update) {", "        if (update.message().text().equalsIgnoreCase(\"/start\")) {\n            presentation(update);\n        } else if (update.message().text().equalsIgnoreCase(\"/usage\")) {\n            printUsage(update);\n        } else if (update.message().text().equalsIgnoreCase(\"/reset\")) {\n            resetUserContext(update);\n        } else {\n            log.warn(\"Unknown command:\" +update.message().text());\n        }\n    }\n\n    /**\n     * Sends a custom presentation message to the user.\n     * @param update The message received from the user.\n     */\n    private void presentation(Update update) {\n        String response = this.gptService.sendCustomMessage(update, presentationText);\n        sendReply(update, response);\n    }\n\n    /**\n     * Sends a message to the user with information about the number of tokens currently consumed in GPT generation.\n     * @param update The message received from the user.\n     */\n    private void printUsage(Update update) {\n        String message = String.format(\"Contador de tokens: %d\",gptService.getNumTokens());\n        sendReply(update, message);\n    }\n\n    /**\n     * Resets the context of a user, clearing message history. Examples will be loaded back when the context\n     * gets re-created.\n     * @param update The message received from the user.\n     */\n    private void resetUserContext(Update update) {\n        String message = gptService.resetUserContext(update);\n        sendReply(update, message);\n    }\n\n\n}\n"]}
