{"filename": "demo-binder_wrapper/src/test/java/com/rosan/dhizuku/demo/ExampleUnitTest.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "demo-binder_wrapper/src/main/java/com/rosan/dhizuku/demo/App.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.app.Application;\n\nimport com.rosan.dhizuku.api.Dhizuku;\n\npublic class App extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Dhizuku.init();\n    }\n}\n", "    public void onCreate() {\n        super.onCreate();\n        Dhizuku.init();\n    }\n}\n"]}
{"filename": "demo-binder_wrapper/src/main/java/com/rosan/dhizuku/demo/MainActivity.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.annotation.SuppressLint;\nimport android.app.admin.DevicePolicyManager;\nimport android.app.admin.IDevicePolicyManager;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.view.View;", "import android.os.IBinder;\nimport android.view.View;\nimport android.widget.EditText;\n\nimport androidx.annotation.Nullable;\n\nimport com.rosan.dhizuku.api.Dhizuku;\nimport com.rosan.dhizuku.api.DhizukuBinderWrapper;\nimport com.rosan.dhizuku.api.DhizukuRequestPermissionListener;\nimport com.rosan.dhizuku.shared.DhizukuVariables;", "import com.rosan.dhizuku.api.DhizukuRequestPermissionListener;\nimport com.rosan.dhizuku.shared.DhizukuVariables;\n\nimport java.lang.reflect.Field;\n\npublic class MainActivity extends BaseActivity implements View.OnClickListener {\n    private DevicePolicyManager devicePolicyManager;\n\n    private EditText editText;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main_activity);", "        if (!Dhizuku.init(this)) {\n            toast(R.string.dhizuku_init_failed);\n            finish();\n            return;\n        }\n\n        if (!Dhizuku.isPermissionGranted())\n            Dhizuku.requestPermission(new DhizukuRequestPermissionListener() {\n                @Override\n                public void onRequestPermission(int grantResult) {\n                    if (grantResult == PackageManager.PERMISSION_GRANTED)\n                        devicePolicyManager = binderWrapperDevicePolicyManager();\n                    else {\n                        toast(R.string.dhizuku_permission_denied);\n                        finish();\n                    }\n                }\n            });\n        else devicePolicyManager = binderWrapperDevicePolicyManager();\n\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.block_uninstall_button).setOnClickListener(this);\n        findViewById(R.id.unblock_uninstall_button).setOnClickListener(this);\n        findViewById(R.id.disable_button).setOnClickListener(this);\n        findViewById(R.id.enable_button).setOnClickListener(this);\n    }\n\n    @SuppressLint(\"SoonBlockedPrivateApi\")\n    private DevicePolicyManager binderWrapperDevicePolicyManager() {", "                public void onRequestPermission(int grantResult) {\n                    if (grantResult == PackageManager.PERMISSION_GRANTED)\n                        devicePolicyManager = binderWrapperDevicePolicyManager();\n                    else {\n                        toast(R.string.dhizuku_permission_denied);\n                        finish();\n                    }\n                }\n            });\n        else devicePolicyManager = binderWrapperDevicePolicyManager();\n\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.block_uninstall_button).setOnClickListener(this);\n        findViewById(R.id.unblock_uninstall_button).setOnClickListener(this);\n        findViewById(R.id.disable_button).setOnClickListener(this);\n        findViewById(R.id.enable_button).setOnClickListener(this);\n    }\n\n    @SuppressLint(\"SoonBlockedPrivateApi\")\n    private DevicePolicyManager binderWrapperDevicePolicyManager() {", "        try {\n            Context context = createPackageContext(DhizukuVariables.PACKAGE_NAME, Context.CONTEXT_IGNORE_SECURITY);\n            DevicePolicyManager manager = (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);\n            Field field = manager.getClass().getDeclaredField(\"mService\");\n            field.setAccessible(true);\n            IDevicePolicyManager oldInterface = (IDevicePolicyManager) field.get(manager);\n            if (oldInterface instanceof DhizukuBinderWrapper) return manager;\n            assert oldInterface != null;\n            IBinder oldBinder = oldInterface.asBinder();\n            IBinder newBinder = Dhizuku.binderWrapper(oldBinder);\n            IDevicePolicyManager newInterface = IDevicePolicyManager.Stub.asInterface(newBinder);\n            field.set(manager, newInterface);\n            return manager;\n        } catch (NoSuchFieldException |\n                 IllegalAccessException |\n                 PackageManager.NameNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override", "    public void onClick(View view) {\n        int id = view.getId();\n        String packageName = editText.getText().toString();\n        if (id == R.id.block_uninstall_button) {\n            devicePolicyManager.setUninstallBlocked(DhizukuVariables.COMPONENT_NAME, packageName, true);\n        } else if (id == R.id.unblock_uninstall_button) {\n            devicePolicyManager.setUninstallBlocked(DhizukuVariables.COMPONENT_NAME, packageName, false);\n        } else if (id == R.id.disable_button) {\n            devicePolicyManager.setPackagesSuspended(DhizukuVariables.COMPONENT_NAME, new String[]{packageName}, true);\n        } else if (id == R.id.enable_button) {\n            devicePolicyManager.setPackagesSuspended(DhizukuVariables.COMPONENT_NAME, new String[]{packageName}, false);\n        }\n    }\n}\n", "        } else if (id == R.id.enable_button) {\n            devicePolicyManager.setPackagesSuspended(DhizukuVariables.COMPONENT_NAME, new String[]{packageName}, false);\n        }\n    }\n}\n"]}
{"filename": "demo-binder_wrapper/src/main/java/com/rosan/dhizuku/demo/BaseActivity.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.widget.Toast;\n\nimport androidx.activity.ComponentActivity;\nimport androidx.annotation.StringRes;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class BaseActivity extends ComponentActivity {\n    protected void toast(@StringRes int resId) {\n        toast(getString(resId));\n    }\n\n    protected void toast(Object... objects) {\n        runOnUiThread(() -> {\n            Toast.makeText(this, join(objects), Toast.LENGTH_SHORT).show();\n        });\n    }\n\n    String join(List<Object> objects) {\n        String sep = \" \";\n        StringBuilder builder = new StringBuilder();\n        int count = 0;", "import java.util.List;\n\npublic class BaseActivity extends ComponentActivity {\n    protected void toast(@StringRes int resId) {\n        toast(getString(resId));\n    }\n\n    protected void toast(Object... objects) {\n        runOnUiThread(() -> {\n            Toast.makeText(this, join(objects), Toast.LENGTH_SHORT).show();\n        });\n    }\n\n    String join(List<Object> objects) {\n        String sep = \" \";\n        StringBuilder builder = new StringBuilder();\n        int count = 0;", "        for (Object element : objects) {\n            if (++count > 1) builder.append(\" \");\n            builder.append(element == null ? \"null\" : element);\n        }\n        return builder.toString();\n    }\n\n    String join(Object... objects) {\n        return join(Arrays.asList(objects));\n    }\n}\n"]}
{"filename": "demo-binder_wrapper/src/androidTest/java/com/rosan/dhizuku/demo/ExampleInstrumentedTest.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n        assertEquals(\"com.rosan.dhizuku.demo_user_service\", appContext.getPackageName());\n    }\n}"]}
{"filename": "demo-user_service/src/test/java/com/rosan/dhizuku/demo/ExampleUnitTest.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "demo-user_service/src/main/java/com/rosan/dhizuku/demo/App.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.app.Application;\n\nimport com.rosan.dhizuku.api.Dhizuku;\n\npublic class App extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Dhizuku.init();\n    }\n}\n", "    public void onCreate() {\n        super.onCreate();\n        Dhizuku.init();\n    }\n}\n"]}
{"filename": "demo-user_service/src/main/java/com/rosan/dhizuku/demo/MainActivity.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.annotation.SuppressLint;\nimport android.content.ComponentName;\nimport android.content.ServiceConnection;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.RemoteException;\nimport android.view.View;\nimport android.widget.EditText;", "import android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\n\nimport androidx.activity.ComponentActivity;\nimport androidx.annotation.Nullable;\n\nimport com.rosan.dhizuku.api.Dhizuku;\nimport com.rosan.dhizuku.api.DhizukuRequestPermissionListener;\nimport com.rosan.dhizuku.api.DhizukuUserServiceArgs;", "import com.rosan.dhizuku.api.DhizukuRequestPermissionListener;\nimport com.rosan.dhizuku.api.DhizukuUserServiceArgs;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MainActivity extends ComponentActivity implements View.OnClickListener {\n    private IUserService service;\n\n    private EditText editText;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main_activity);", "        if (!Dhizuku.init(this)) {\n            toast(\"please install or launch Dhizuku Server Application,then relaunch this.\");\n            finish();\n            return;\n        }\n        if (Dhizuku.getVersionCode() < 3) {\n            toast(\"please install >= Dhizuku v2.0\");\n            finish();\n            return;\n        }\n        if (!Dhizuku.isPermissionGranted())\n            Dhizuku.requestPermission(new DhizukuRequestPermissionListener() {\n                @Override", "        if (!Dhizuku.isPermissionGranted())\n            Dhizuku.requestPermission(new DhizukuRequestPermissionListener() {\n                @Override\n                public void onRequestPermission(int grantResult) {\n                    bindUserService();\n                }\n            });\n        else bindUserService();\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.uninstall_button).setOnClickListener(this);\n        findViewById(R.id.disable_button).setOnClickListener(this);\n        findViewById(R.id.enable_button).setOnClickListener(this);\n        findViewById(R.id.organization_name_button).setOnClickListener(this);\n        findViewById(R.id.switch_camera_disable).setOnClickListener(this);\n        findViewById(R.id.set_global_proxy).setOnClickListener(this);\n        findViewById(R.id.create_user).setOnClickListener(this);\n        findViewById(R.id.remove_user).setOnClickListener(this);\n    }\n\n    void bindUserService() {\n        DhizukuUserServiceArgs args = new DhizukuUserServiceArgs(new ComponentName(this, UserService.class));\n        boolean bind = Dhizuku.bindUserService(args, new ServiceConnection() {\n            @Override", "            public void onServiceConnected(ComponentName name, IBinder iBinder) {\n                toast(\"connected UserService\");\n                service = IUserService.Stub.asInterface(iBinder);\n            }\n\n            @Override\n            public void onServiceDisconnected(ComponentName name) {\n                toast(\"disconnected UserService\");\n            }\n        });\n        if (bind) return;\n        toast(\"start user service failed\");\n    }\n\n    void toast(Object... objects) {\n        runOnUiThread(() -> {\n            Toast.makeText(this, join(objects), Toast.LENGTH_SHORT).show();\n        });\n    }\n\n    String join(List<Object> objects) {\n        String sep = \" \";\n        StringBuilder builder = new StringBuilder();\n        int count = 0;", "        if (bind) return;\n        toast(\"start user service failed\");\n    }\n\n    void toast(Object... objects) {\n        runOnUiThread(() -> {\n            Toast.makeText(this, join(objects), Toast.LENGTH_SHORT).show();\n        });\n    }\n\n    String join(List<Object> objects) {\n        String sep = \" \";\n        StringBuilder builder = new StringBuilder();\n        int count = 0;", "        for (Object element : objects) {\n            if (++count > 1) builder.append(\" \");\n            builder.append(element == null ? \"null\" : element);\n        }\n        return builder.toString();\n    }\n\n    String join(Object... objects) {\n        return join(Arrays.asList(objects));\n    }\n\n    @Override", "    public void onClick(View view) {\n        if (service == null) toast(\"please bind service first\");\n        else {\n            try {\n                String text = onClickInner(view.getId(), editText.getText().toString());\n                if (text != null) editText.setText(text);\n            } catch (RemoteException e) {\n                toast(e.getLocalizedMessage());\n            }\n        }\n    }\n\n    @SuppressLint(\"NonConstantResourceId\")\n    private String onClickInner(int id, String text) throws RemoteException {\n        String result = null;", "        if (id == R.id.uninstall_button) {\n            service.uninstall(text);\n        } else if (id == R.id.disable_button) {\n            service.setApplicationHidden(text, true);\n        } else if (id == R.id.enable_button) {\n            service.setApplicationHidden(text, false);\n        } else if (id == R.id.organization_name_button) {\n            service.setOrganizationName(text);\n        } else if (id == R.id.switch_camera_disable) {\n            if (Dhizuku.getVersionCode() < 4) toast(\"please install >= Dhizuku v2.4\");\n            else service.switchCameraDisabled();", "        } else if (id == R.id.switch_camera_disable) {\n            if (Dhizuku.getVersionCode() < 4) toast(\"please install >= Dhizuku v2.4\");\n            else service.switchCameraDisabled();\n        } else if (id == R.id.set_global_proxy) {\n            service.setGlobalProxy(text);\n        } else if (id == R.id.create_user) {\n            result = \"\" + service.createUser(text);\n        } else if (id == R.id.remove_user) {\n            service.removeUser(Integer.parseInt(text));\n        }\n        return result;\n    }\n}\n"]}
{"filename": "demo-user_service/src/main/java/com/rosan/dhizuku/demo/UserService.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.annotation.SuppressLint;\nimport android.app.PendingIntent;\nimport android.app.admin.DevicePolicyManager;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.pm.PackageInstaller;\nimport android.net.ProxyInfo;\nimport android.net.Uri;", "import android.net.ProxyInfo;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.RemoteException;\nimport android.os.UserHandle;\n\nimport androidx.annotation.Keep;\nimport androidx.annotation.RequiresApi;\nimport androidx.core.os.UserHandleCompat;\n", "import androidx.core.os.UserHandleCompat;\n\nimport com.rosan.dhizuku.shared.DhizukuVariables;\n\npublic class UserService extends IUserService.Stub {\n    private Context context;\n\n    private DevicePolicyManager devicePolicyManager;\n\n    @Keep\n    public UserService(Context context) {\n        this.context = context;\n        devicePolicyManager = (DevicePolicyManager) context.getSystemService(Context.DEVICE_POLICY_SERVICE);\n    }\n\n    @Override", "    public void onCreate() {\n    }\n\n    @Override\n    public void onDestroy() {\n    }\n\n    @SuppressLint(\"MissingPermission\")\n    @Override\n    public void uninstall(String packageName) {\n        PackageInstaller packageInstaller = context.getPackageManager().getPackageInstaller();\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, new Intent(), Build.VERSION.SDK_INT >= Build.VERSION_CODES.S ? PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_UPDATE_CURRENT);\n        packageInstaller.uninstall(packageName, pendingIntent.getIntentSender());\n    }\n\n    @Override\n    @SuppressLint(\"DiscouragedPrivateApi\")", "    public void uninstall(String packageName) {\n        PackageInstaller packageInstaller = context.getPackageManager().getPackageInstaller();\n        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, new Intent(), Build.VERSION.SDK_INT >= Build.VERSION_CODES.S ? PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE : PendingIntent.FLAG_UPDATE_CURRENT);\n        packageInstaller.uninstall(packageName, pendingIntent.getIntentSender());\n    }\n\n    @Override\n    @SuppressLint(\"DiscouragedPrivateApi\")\n    public void setApplicationHidden(String packageName, boolean state) throws RemoteException {\n        devicePolicyManager.setApplicationHidden(DhizukuVariables.COMPONENT_NAME, packageName, state);\n    }\n\n    @Override", "    public void setApplicationHidden(String packageName, boolean state) throws RemoteException {\n        devicePolicyManager.setApplicationHidden(DhizukuVariables.COMPONENT_NAME, packageName, state);\n    }\n\n    @Override\n    public void setOrganizationName(String name) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            devicePolicyManager.setOrganizationName(DhizukuVariables.COMPONENT_NAME, name);\n        }\n    }\n\n    @Override", "    public void lockNow() {\n        devicePolicyManager.lockNow();\n    }\n\n    @Override\n    public void switchCameraDisabled() {\n        boolean currentState = devicePolicyManager.getCameraDisabled(DhizukuVariables.COMPONENT_NAME);\n        devicePolicyManager.setCameraDisabled(DhizukuVariables.COMPONENT_NAME, !currentState);\n    }\n\n    @Override", "    public void setGlobalProxy(String url) {\n        ProxyInfo proxy = null;\n        if (!url.isEmpty()) {\n            if (url.startsWith(\"http\") || url.startsWith(\"https\")) {\n                Uri uri = Uri.parse(url);\n                proxy = ProxyInfo.buildPacProxy(uri);\n            } else {\n                String[] urlElements = url.split(\":\");\n                if (urlElements.length != 2) return;\n                proxy = ProxyInfo.buildDirectProxy(urlElements[0], Integer.parseInt(urlElements[1]));\n            }\n        }\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.N)\n    @SuppressLint(\"InlinedApi\")\n    @Override", "                if (urlElements.length != 2) return;\n                proxy = ProxyInfo.buildDirectProxy(urlElements[0], Integer.parseInt(urlElements[1]));\n            }\n        }\n    }\n\n    @RequiresApi(api = Build.VERSION_CODES.N)\n    @SuppressLint(\"InlinedApi\")\n    @Override\n    public UserHandle createUser(String name) {\n        return devicePolicyManager.createAndManageUser(DhizukuVariables.COMPONENT_NAME, name, DhizukuVariables.COMPONENT_NAME, null, DevicePolicyManager.LEAVE_ALL_SYSTEM_APPS_ENABLED);\n    }\n\n    @Override", "    public UserHandle createUser(String name) {\n        return devicePolicyManager.createAndManageUser(DhizukuVariables.COMPONENT_NAME, name, DhizukuVariables.COMPONENT_NAME, null, DevicePolicyManager.LEAVE_ALL_SYSTEM_APPS_ENABLED);\n    }\n\n    @Override\n    public void removeUser(int userId) {\n        devicePolicyManager.removeUser(DhizukuVariables.COMPONENT_NAME, UserHandleCompat.getUserHandleForUid(userId * 100000));\n    }\n}\n"]}
{"filename": "demo-user_service/src/androidTest/java/com/rosan/dhizuku/demo/ExampleInstrumentedTest.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n        assertEquals(\"com.rosan.dhizuku.demo_user_service\", appContext.getPackageName());\n    }\n}"]}
{"filename": "demo-delegated_scopes/src/test/java/com/rosan/dhizuku/demo/ExampleUnitTest.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>", " *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n    @Test\n    public void addition_isCorrect() {\n        assertEquals(4, 2 + 2);\n    }\n}"]}
{"filename": "demo-delegated_scopes/src/main/java/com/rosan/dhizuku/demo/App.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.app.Application;\n\nimport com.rosan.dhizuku.api.Dhizuku;\n\npublic class App extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Dhizuku.init();\n    }\n}\n", "    public void onCreate() {\n        super.onCreate();\n        Dhizuku.init();\n    }\n}\n"]}
{"filename": "demo-delegated_scopes/src/main/java/com/rosan/dhizuku/demo/MainActivity.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.app.admin.DevicePolicyManager;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.widget.EditText;\n\nimport androidx.annotation.Nullable;", "\nimport androidx.annotation.Nullable;\n\nimport com.rosan.dhizuku.api.Dhizuku;\nimport com.rosan.dhizuku.api.DhizukuRequestPermissionListener;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class MainActivity extends BaseActivity implements View.OnClickListener {\n    private static final String[] REQUIRED_DELEGATED_SCOPES = new String[]{\n            DevicePolicyManager.DELEGATION_BLOCK_UNINSTALL,\n            DevicePolicyManager.DELEGATION_PACKAGE_ACCESS\n    };\n\n    private DevicePolicyManager devicePolicyManager;\n\n    private EditText editText;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        devicePolicyManager = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);\n        setContentView(R.layout.main_activity);", "\npublic class MainActivity extends BaseActivity implements View.OnClickListener {\n    private static final String[] REQUIRED_DELEGATED_SCOPES = new String[]{\n            DevicePolicyManager.DELEGATION_BLOCK_UNINSTALL,\n            DevicePolicyManager.DELEGATION_PACKAGE_ACCESS\n    };\n\n    private DevicePolicyManager devicePolicyManager;\n\n    private EditText editText;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        devicePolicyManager = (DevicePolicyManager) getSystemService(Context.DEVICE_POLICY_SERVICE);\n        setContentView(R.layout.main_activity);", "        if (!Dhizuku.init(this)) {\n            toast(R.string.dhizuku_init_failed);\n            finish();\n            return;\n        }\n        if (Dhizuku.getVersionCode() < 5) {\n            toast(R.string.dhizuku_version_too_older);\n            finish();\n            return;\n        }\n        if (!Dhizuku.isPermissionGranted())\n            Dhizuku.requestPermission(new DhizukuRequestPermissionListener() {\n                @Override", "        if (!Dhizuku.isPermissionGranted())\n            Dhizuku.requestPermission(new DhizukuRequestPermissionListener() {\n                @Override\n                public void onRequestPermission(int grantResult) {\n                    if (grantResult == PackageManager.PERMISSION_GRANTED)\n                        setDelegatedScopes();\n                    else {\n                        toast(R.string.dhizuku_permission_denied);\n                        finish();\n                    }\n                }\n            });\n        else setDelegatedScopes();\n        editText = findViewById(R.id.edit_text);\n        findViewById(R.id.block_uninstall_button).setOnClickListener(this);\n        findViewById(R.id.unblock_uninstall_button).setOnClickListener(this);\n        findViewById(R.id.disable_button).setOnClickListener(this);\n        findViewById(R.id.enable_button).setOnClickListener(this);\n    }\n\n    private boolean checkDelegatedScopes() {\n        return new ArrayList<>(Arrays.asList(Dhizuku.getDelegatedScopes())).containsAll(Arrays.asList(REQUIRED_DELEGATED_SCOPES));\n    }\n\n    private void setDelegatedScopes() {", "        if (checkDelegatedScopes()) return;\n        Dhizuku.setDelegatedScopes(REQUIRED_DELEGATED_SCOPES);\n    }\n\n    @Override\n    public void onClick(View view) {\n        int id = view.getId();\n        String packageName = editText.getText().toString();\n        if (id == R.id.block_uninstall_button) {\n            devicePolicyManager.setUninstallBlocked(null, packageName, true);\n        } else if (id == R.id.unblock_uninstall_button) {\n            devicePolicyManager.setUninstallBlocked(null, packageName, false);", "        if (id == R.id.block_uninstall_button) {\n            devicePolicyManager.setUninstallBlocked(null, packageName, true);\n        } else if (id == R.id.unblock_uninstall_button) {\n            devicePolicyManager.setUninstallBlocked(null, packageName, false);\n        } else if (id == R.id.disable_button) {\n            devicePolicyManager.setPackagesSuspended(null, new String[]{packageName}, true);\n        } else if (id == R.id.enable_button) {\n            devicePolicyManager.setPackagesSuspended(null, new String[]{packageName}, false);\n        }\n    }\n}\n"]}
{"filename": "demo-delegated_scopes/src/main/java/com/rosan/dhizuku/demo/BaseActivity.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.widget.Toast;\n\nimport androidx.activity.ComponentActivity;\nimport androidx.annotation.StringRes;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class BaseActivity extends ComponentActivity {\n    protected void toast(@StringRes int resId) {\n        toast(getString(resId));\n    }\n\n    protected void toast(Object... objects) {\n        runOnUiThread(() -> {\n            Toast.makeText(this, join(objects), Toast.LENGTH_SHORT).show();\n        });\n    }\n\n    String join(List<Object> objects) {\n        String sep = \" \";\n        StringBuilder builder = new StringBuilder();\n        int count = 0;", "import java.util.List;\n\npublic class BaseActivity extends ComponentActivity {\n    protected void toast(@StringRes int resId) {\n        toast(getString(resId));\n    }\n\n    protected void toast(Object... objects) {\n        runOnUiThread(() -> {\n            Toast.makeText(this, join(objects), Toast.LENGTH_SHORT).show();\n        });\n    }\n\n    String join(List<Object> objects) {\n        String sep = \" \";\n        StringBuilder builder = new StringBuilder();\n        int count = 0;", "        for (Object element : objects) {\n            if (++count > 1) builder.append(\" \");\n            builder.append(element == null ? \"null\" : element);\n        }\n        return builder.toString();\n    }\n\n    String join(Object... objects) {\n        return join(Arrays.asList(objects));\n    }\n}\n"]}
{"filename": "demo-delegated_scopes/src/androidTest/java/com/rosan/dhizuku/demo/ExampleInstrumentedTest.java", "chunked_list": ["package com.rosan.dhizuku.demo;\n\nimport android.content.Context;\n\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n", "import org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test", " */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n        assertEquals(\"com.rosan.dhizuku.demo_user_service\", appContext.getPackageName());\n    }\n}"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/Dhizuku.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.annotation.SuppressLint;\nimport android.app.ActivityThread;\nimport android.content.ContentResolver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.net.Uri;\nimport android.os.Build;", "import android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.Parcel;\nimport android.os.RemoteException;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\n", "import androidx.annotation.RequiresApi;\n\nimport com.rosan.dhizuku.aidl.IDhizuku;\nimport com.rosan.dhizuku.shared.DhizukuVariables;\n\nimport java.io.File;\n\npublic class Dhizuku {\n    @SuppressLint(\"StaticFieldLeak\")\n    private static Context mContext = null;\n\n    private static IDhizuku remote = null;\n\n    /**\n     * @see #init(Context)\n     */", "    public static boolean init() {\n        if (mContext == null) mContext = ActivityThread.currentActivityThread().getApplication();\n        return init(mContext);\n    }\n\n    /**\n     * Request binder from Dhizuku.\n     *\n     * @param context Context of this application that support ContentProvider request.\n     * @return If binder is received. (If not, maybe (Dhizuku not working / Dhizuku not active / Dhizuku not installed))\n     */", "    public static boolean init(@NonNull Context context) {\n        if (remote != null && remote.asBinder().pingBinder()) return true;\n        Uri uri = new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).authority(DhizukuVariables.PROVIDER_AUTHORITY).build();\n        Bundle extras = new Bundle();\n        extras.putBinder(DhizukuVariables.EXTRA_CLIENT, new DhizukuClient().asBinder());\n        Bundle bundle;\n        try {\n            bundle = context.getContentResolver().call(uri, DhizukuVariables.PROVIDER_METHOD_CLIENT, null, extras);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }", "        if (bundle == null) return false;\n        IBinder iBinder = bundle.getBinder(DhizukuVariables.PARAM_DHIZUKU_BINDER);\n        if (iBinder == null) return false;\n        remote = IDhizuku.Stub.asInterface(iBinder);\n        try {\n            iBinder.linkToDeath(() -> {\n                if (remote.asBinder() != iBinder) return;\n                remote = null;\n            }, 0);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n        mContext = context;\n        return true;\n    }\n\n    private static @NonNull IDhizuku requireServer() {", "        if (remote != null && remote.asBinder().pingBinder()) return remote;\n        if (mContext != null && init(mContext)) return remote;\n        throw new IllegalStateException(\"binder haven't been received\");\n    }\n\n    /**\n     * get the version code of Dhizuku Server, some function will changed in different Dhizuku Server.\n     *\n     * @return server version code\n     */\n    public static int getVersionCode() {", "    public static int getVersionCode() {\n        try {\n            return requireServer().getVersionCode();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * get the version name of Dhizuku Server.\n     *\n     * @return server version name\n     */", "    public static String getVersionName() {\n        try {\n            return requireServer().getVersionName();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * check the permission that can use privileged method.\n     *\n     * @return boolean\n     */", "    public static boolean isPermissionGranted() {\n        try {\n            return requireServer().isPermissionGranted();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * request the permission that can use privileged method.\n     */", "    public static void requestPermission(DhizukuRequestPermissionListener listener) {\n        requestPermission(mContext, listener);\n    }\n\n    private static void requestPermission(Context context, DhizukuRequestPermissionListener listener) {\n        Bundle bundle = new Bundle();\n        bundle.putInt(DhizukuVariables.PARAM_CLIENT_UID, context.getApplicationInfo().uid);\n        bundle.putBinder(DhizukuVariables.PARAM_CLIENT_REQUEST_PERMISSION_BINDER, listener.asBinder());\n        Intent intent = new Intent(DhizukuVariables.ACTION_REQUEST_PERMISSION).putExtra(\"bundle\", bundle).addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    }\n\n    /**\n     * you can transact the IBinder by Dhizuku Server.\n     * and your can also use {@link #binderWrapper(IBinder)}.\n     */", "    public static boolean remoteTransact(IBinder iBinder, int code, Parcel data, Parcel reply, int flags) {\n        boolean result = false;\n        Parcel remoteData = Parcel.obtain();\n        try {\n            remoteData.writeInterfaceToken(DhizukuVariables.BINDER_DESCRIPTOR);\n            remoteData.writeStrongBinder(iBinder);\n            remoteData.writeInt(code);\n            remoteData.writeInt(flags);\n            remoteData.appendFrom(data, 0, data.dataSize());\n            result = requireServer().asBinder().transact(DhizukuVariables.TRANSACT_CODE_REMOTE_BINDER, remoteData, reply, 0);\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        } finally {\n            remoteData.recycle();\n        }\n        return result;\n    }\n\n    /**\n     * Wrap the binder so that all transacts are requested by a remote server.\n     */", "    public static IBinder binderWrapper(IBinder iBinder) {\n        return new DhizukuBinderWrapper(iBinder);\n    }\n\n    /**\n     * create a process that work in remote server.\n     */\n    public static DhizukuRemoteProcess newProcess(String[] cmd, String[] env, File dir) {\n        try {\n            return new DhizukuRemoteProcess(requireServer().remoteProcess(cmd, env, dir != null ? dir.getPath() : null));\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * start a UserService.\n     */", "        try {\n            return new DhizukuRemoteProcess(requireServer().remoteProcess(cmd, env, dir != null ? dir.getPath() : null));\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /**\n     * start a UserService.\n     */\n    public static void startUserService(@NonNull DhizukuUserServiceArgs args) {", "    public static void startUserService(@NonNull DhizukuUserServiceArgs args) {\n        try {\n            DhizukuServiceConnections.start(requireServer(), args);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * stop a UserService.\n     */", "    public static void stopUserService(@NonNull DhizukuUserServiceArgs args) {\n        try {\n            DhizukuServiceConnections.stop(requireServer(), args);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * bind a UserService.\n     */", "    public static boolean bindUserService(@NonNull DhizukuUserServiceArgs args, @NonNull ServiceConnection connection) {\n        try {\n            DhizukuServiceConnections.bind(requireServer(), args, connection);\n            return true;\n        } catch (RemoteException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    /**\n     * unbind a UserService.\n     */", "    public static boolean unbindUserService(@NonNull ServiceConnection connection) {\n        try {\n            DhizukuServiceConnections.unbind(requireServer(), connection);\n            return true;\n        } catch (RemoteException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)", "    public static String[] getDelegatedScopes() {\n        try {\n            return requireServer().getDelegatedScopes(mContext.getPackageName());\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    public static void setDelegatedScopes(String[] scopes) {\n        try {\n            requireServer().setDelegatedScopes(mContext.getPackageName(), scopes);\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n", "    public static void setDelegatedScopes(String[] scopes) {\n        try {\n            requireServer().setDelegatedScopes(mContext.getPackageName(), scopes);\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuBinderWrapper.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.os.IBinder;\nimport android.os.IInterface;\nimport android.os.Parcel;\nimport android.os.RemoteException;\n\nimport java.io.FileDescriptor;\nimport java.util.Objects;\n\npublic class DhizukuBinderWrapper implements IBinder {\n    private IBinder target;\n\n    DhizukuBinderWrapper(IBinder target) {\n        this.target = Objects.requireNonNull(target);\n    }\n\n    @Override", "import java.util.Objects;\n\npublic class DhizukuBinderWrapper implements IBinder {\n    private IBinder target;\n\n    DhizukuBinderWrapper(IBinder target) {\n        this.target = Objects.requireNonNull(target);\n    }\n\n    @Override\n    public String getInterfaceDescriptor() throws RemoteException {\n        return target.getInterfaceDescriptor();\n    }\n\n    @Override", "    public String getInterfaceDescriptor() throws RemoteException {\n        return target.getInterfaceDescriptor();\n    }\n\n    @Override\n    public boolean pingBinder() {\n        return target.pingBinder();\n    }\n\n    @Override\n    public boolean isBinderAlive() {\n        return target.isBinderAlive();\n    }\n\n    @Override", "    public boolean isBinderAlive() {\n        return target.isBinderAlive();\n    }\n\n    @Override\n    public IInterface queryLocalInterface(String descriptor) {\n        return null;\n    }\n\n    @Override\n    public void dump(FileDescriptor fd, String[] args) throws RemoteException {\n        target.dump(fd, args);\n    }\n\n    @Override", "    public void dump(FileDescriptor fd, String[] args) throws RemoteException {\n        target.dump(fd, args);\n    }\n\n    @Override\n    public void dumpAsync(FileDescriptor fd, String[] args) throws RemoteException {\n        target.dumpAsync(fd, args);\n    }\n\n    @Override\n    public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {\n        return Dhizuku.remoteTransact(target, code, data, reply, flags);\n    }\n\n    @Override", "    public boolean transact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {\n        return Dhizuku.remoteTransact(target, code, data, reply, flags);\n    }\n\n    @Override\n    public void linkToDeath(DeathRecipient recipient, int flags) throws RemoteException {\n        target.linkToDeath(recipient, flags);\n    }\n\n    @Override\n    public boolean unlinkToDeath(DeathRecipient recipient, int flags) {\n        return target.unlinkToDeath(recipient, flags);\n    }\n}\n", "    public boolean unlinkToDeath(DeathRecipient recipient, int flags) {\n        return target.unlinkToDeath(recipient, flags);\n    }\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuClient.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.os.RemoteException;\n\nimport com.rosan.dhizuku.aidl.IDhizukuClient;\n\nclass DhizukuClient extends IDhizukuClient.Stub {\n    private static final int VERSION_CODE = 1;\n\n    @Override\n    public int getVersionCode() throws RemoteException {\n        return VERSION_CODE;\n    }\n}\n", "\n    @Override\n    public int getVersionCode() throws RemoteException {\n        return VERSION_CODE;\n    }\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuServiceConnection.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.content.ComponentName;\nimport android.content.ServiceConnection;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Looper;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\nclass DhizukuServiceConnection {\n    private final Handler handler = new Handler(Looper.getMainLooper());\n\n    private final List<ServiceConnection> connections = new ArrayList<>();\n\n    public void onServiceConnected(ComponentName name, IBinder service) {\n        handler.post(() -> {\n            for (ServiceConnection connection : connections) {\n                connection.onServiceConnected(name, service);\n            }\n        });\n    }\n", "    public void onServiceConnected(ComponentName name, IBinder service) {\n        handler.post(() -> {\n            for (ServiceConnection connection : connections) {\n                connection.onServiceConnected(name, service);\n            }\n        });\n    }\n\n    public void onServiceDisconnected(ComponentName name) {\n        handler.post(() -> {\n            for (ServiceConnection connection : connections) {\n                connection.onServiceDisconnected(name);\n            }\n        });\n    }\n\n    void add(ServiceConnection connection) {\n        connections.add(connection);\n    }\n\n    void remove(ServiceConnection connection) {\n        connections.remove(connection);\n    }\n\n    boolean isEmpty() {\n        return connections.isEmpty();\n    }\n}\n", "    public void onServiceDisconnected(ComponentName name) {\n        handler.post(() -> {\n            for (ServiceConnection connection : connections) {\n                connection.onServiceDisconnected(name);\n            }\n        });\n    }\n\n    void add(ServiceConnection connection) {\n        connections.add(connection);\n    }\n\n    void remove(ServiceConnection connection) {\n        connections.remove(connection);\n    }\n\n    boolean isEmpty() {\n        return connections.isEmpty();\n    }\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuServiceConnections.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.content.ComponentName;\nimport android.content.ServiceConnection;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.RemoteException;\n\nimport androidx.annotation.NonNull;\n", "import androidx.annotation.NonNull;\n\nimport com.rosan.dhizuku.aidl.IDhizuku;\nimport com.rosan.dhizuku.aidl.IDhizukuUserServiceConnection;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n", "import java.util.Map;\n\nclass DhizukuServiceConnections {\n    static final IDhizukuUserServiceConnection iDhizukuUserServiceConnection = new IDhizukuUserServiceConnection.Stub() {\n        @Override\n        public void connected(Bundle bundle, IBinder service) {\n            onServiceConnected(bundle, service);\n            try {\n                service.linkToDeath(() -> {\n                    died(bundle);\n                }, 0);\n            } catch (RemoteException ignored) {\n            }\n        }\n\n        void onServiceConnected(Bundle bundle, IBinder service) {\n            DhizukuUserServiceArgs args = new DhizukuUserServiceArgs(bundle);\n            ComponentName name = args.getComponentName();\n            String token = name.flattenToString();\n            services.put(token, service);\n            DhizukuServiceConnection serviceConnection = map.get(token);", "            if (serviceConnection == null) return;\n            serviceConnection.onServiceConnected(name, service);\n        }\n\n        @Override\n        public void died(Bundle bundle) {\n            DhizukuUserServiceArgs args = new DhizukuUserServiceArgs(bundle);\n            ComponentName name = args.getComponentName();\n            String token = name.flattenToString();\n            services.remove(token);\n            DhizukuServiceConnection serviceConnection = map.get(token);", "            if (serviceConnection == null) return;\n            serviceConnection.onServiceDisconnected(name);\n        }\n    };\n\n    private static final Map<String, DhizukuServiceConnection> map = new HashMap<>();\n\n    private static final Map<String, IBinder> services = new HashMap<>();\n\n    static void start(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        IBinder service = services.get(token);", "        if (service == null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());\n    }\n\n    static void stop(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        dhizuku.unbindUserService(args.build());\n    }\n\n    static void bind(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args, @NonNull ServiceConnection connection) throws RemoteException {\n        ComponentName name = args.getComponentName();\n        String token = name.flattenToString();\n        DhizukuServiceConnection serviceConnection = map.get(token);", "        if (serviceConnection == null) {\n            serviceConnection = new DhizukuServiceConnection();\n            map.put(token, serviceConnection);\n        }\n        serviceConnection.add(connection);\n        IBinder service = services.get(token);\n        if (service == null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());\n        else connection.onServiceConnected(name, service);\n    }\n\n    static void unbind(@NonNull IDhizuku dhizuku, @NonNull ServiceConnection connection) throws RemoteException {\n        List<String> tokens = new ArrayList<>();", "        for (Map.Entry<String, DhizukuServiceConnection> entry : map.entrySet()) {\n            String token = entry.getKey();\n            DhizukuServiceConnection serviceConnection = entry.getValue();\n            if (serviceConnection == null) {\n                tokens.add(token);\n                continue;\n            }\n            serviceConnection.remove(connection);\n            if (serviceConnection.isEmpty()) tokens.add(token);\n        }\n        for (String token : tokens) {\n            map.remove(token);\n            ComponentName name = ComponentName.unflattenFromString(token);\n            DhizukuUserServiceArgs args = new DhizukuUserServiceArgs(name);\n            stop(dhizuku, args);\n        }\n    }\n}\n", "            if (serviceConnection.isEmpty()) tokens.add(token);\n        }\n        for (String token : tokens) {\n            map.remove(token);\n            ComponentName name = ComponentName.unflattenFromString(token);\n            DhizukuUserServiceArgs args = new DhizukuUserServiceArgs(name);\n            stop(dhizuku, args);\n        }\n    }\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuRequestPermissionListener.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport com.rosan.dhizuku.aidl.IDhizukuRequestPermissionListener;\n\npublic abstract class DhizukuRequestPermissionListener extends IDhizukuRequestPermissionListener.Stub {\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuRemoteProcess.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.os.ParcelFileDescriptor;\nimport android.os.RemoteException;\n\nimport com.rosan.dhizuku.aidl.IDhizukuRemoteProcess;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Objects;", "import java.io.OutputStream;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\n\npublic class DhizukuRemoteProcess extends Process {\n    private static final String TAG = \"DhizukuRemoteProcess\";\n\n    private IDhizukuRemoteProcess remote;\n\n    private OutputStream outputStream;\n\n    private InputStream inputStream;\n\n    private InputStream errorStream;\n\n    DhizukuRemoteProcess(IDhizukuRemoteProcess remote) {\n        this.remote = Objects.requireNonNull(remote);", "        try {\n            remote.asBinder().linkToDeath(() -> {\n                DhizukuRemoteProcess.this.remote = null;\n            }, 0);\n        } catch (RemoteException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public OutputStream getOutputStream() {", "    public OutputStream getOutputStream() {\n        if (outputStream != null) return outputStream;\n        try {\n            outputStream = new ParcelFileDescriptor.AutoCloseOutputStream(remote.getOutputStream());\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n        return outputStream;\n    }\n\n    @Override", "    public InputStream getInputStream() {\n        if (inputStream != null) return inputStream;\n        try {\n            inputStream = new ParcelFileDescriptor.AutoCloseInputStream(remote.getInputStream());\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n        return inputStream;\n    }\n\n    @Override", "    public InputStream getErrorStream() {\n        if (errorStream != null) return errorStream;\n        try {\n            errorStream = new ParcelFileDescriptor.AutoCloseInputStream(remote.getErrorStream());\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n        return errorStream;\n    }\n\n    @Override", "    public int exitValue() {\n        try {\n            return remote.exitValue();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void destroy() {\n        try {\n            remote.destroy();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override", "    public void destroy() {\n        try {\n            remote.destroy();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public boolean isAlive() {\n        try {\n            return remote.alive();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override", "    public boolean isAlive() {\n        try {\n            return remote.alive();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public int waitFor() {\n        try {\n            return remote.waitFor();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override", "    public int waitFor() {\n        try {\n            return remote.waitFor();\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public boolean waitFor(long timeout, TimeUnit unit) {\n        try {\n            return remote.waitForTimeout(timeout, unit.toString());\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n", "    public boolean waitFor(long timeout, TimeUnit unit) {\n        try {\n            return remote.waitForTimeout(timeout, unit.toString());\n        } catch (RemoteException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n"]}
{"filename": "dhizuku-api-impl/src/main/java/com/rosan/dhizuku/api/DhizukuUserServiceArgs.java", "chunked_list": ["package com.rosan.dhizuku.api;\n\nimport android.content.ComponentName;\nimport android.os.Build;\nimport android.os.Bundle;\n\nimport com.rosan.dhizuku.shared.DhizukuVariables;\n\npublic class DhizukuUserServiceArgs {\n    private final Bundle bundle;\n\n    public DhizukuUserServiceArgs(DhizukuUserServiceArgs args) {\n        this(args.bundle);\n    }\n\n    public DhizukuUserServiceArgs(ComponentName name) {\n        bundle = new Bundle();\n        setComponentName(name);\n    }\n\n    DhizukuUserServiceArgs(Bundle bundle) {\n        this.bundle = bundle;\n    }\n", "public class DhizukuUserServiceArgs {\n    private final Bundle bundle;\n\n    public DhizukuUserServiceArgs(DhizukuUserServiceArgs args) {\n        this(args.bundle);\n    }\n\n    public DhizukuUserServiceArgs(ComponentName name) {\n        bundle = new Bundle();\n        setComponentName(name);\n    }\n\n    DhizukuUserServiceArgs(Bundle bundle) {\n        this.bundle = bundle;\n    }\n", "    public DhizukuUserServiceArgs setComponentName(ComponentName name) {\n        bundle.putParcelable(DhizukuVariables.PARAM_COMPONENT, name);\n        return this;\n    }\n\n    public ComponentName getComponentName() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU)\n            return bundle.getParcelable(DhizukuVariables.PARAM_COMPONENT, ComponentName.class);\n        else return bundle.getParcelable(DhizukuVariables.PARAM_COMPONENT);\n    }\n\n    Bundle build() {\n        Bundle bundle = new Bundle();\n        bundle.putAll(this.bundle);\n        return bundle;\n    }\n}\n"]}
{"filename": "hidden-api/src/main/java/com/android/modules/utils/BaseParceledListSlice.java", "chunked_list": ["/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.android.modules.utils;\n", "package com.android.modules.utils;\n\nimport android.os.Parcelable;\n\nimport java.util.List;\n\n/**\n * Transfer a large list of Parcelable objects across an IPC.  Splits into\n * multiple transactions if needed.\n * <p>", " * multiple transactions if needed.\n * <p>\n * Caveat: for efficiency and security, all elements must be the same concrete type.\n * In order to avoid writing the class name of each object, we must ensure that\n * each object is the same type, or else unparceling then reparceling the data may yield\n * a different result if the class name encoded in the Parcelable is a Base type.\n * See b/17671747.\n */\npublic abstract class BaseParceledListSlice<T> implements Parcelable {\n    public List<T> getList() {\n        throw new IllegalArgumentException();\n    }\n}", "public abstract class BaseParceledListSlice<T> implements Parcelable {\n    public List<T> getList() {\n        throw new IllegalArgumentException();\n    }\n}"]}
{"filename": "hidden-api/src/main/java/android/os/ServiceManager.java", "chunked_list": ["/*\n * Copyright (C) 2007 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage android.os;\n\nimport java.util.Map;", "\nimport java.util.Map;\n\n/**\n * @hide\n */\npublic final class ServiceManager {\n    public static IBinder getService(String name) {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Returns a reference to a service with the given name, or throws\n     * {@link NullPointerException} if none is found.\n     *\n     * @hide\n     */", "    public static IBinder getServiceOrThrow(String name) throws ServiceNotFoundException {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Place a new @a service called @a name into the service\n     * manager.\n     *\n     * @param name    the name of the new service\n     * @param service the service object\n     */", "    public static void addService(String name, IBinder service) {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Place a new @a service called @a name into the service\n     * manager.\n     *\n     * @param name          the name of the new service\n     * @param service       the service object\n     * @param allowIsolated set to true to allow isolated sandboxed processes\n     *                      to access this service\n     */", "    public static void addService(String name, IBinder service, boolean allowIsolated) {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Retrieve an existing service called @a name from the\n     * service manager.  Non-blocking.\n     */\n    public static IBinder checkService(String name) {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Return a list of all currently running services.\n     *\n     * @return an array of all currently running services, or <code>null</code> in\n     * case of an exception\n     */", "    public static IBinder checkService(String name) {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Return a list of all currently running services.\n     *\n     * @return an array of all currently running services, or <code>null</code> in\n     * case of an exception\n     */\n    public static String[] listServices() {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * This is only intended to be called when the process is first being brought\n     * up and bound by the activity manager. There is only one thread in the process\n     * at that time, so no locking is done.\n     *\n     * @param cache the cache of service references\n     * @hide\n     */", "    public static String[] listServices() {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * This is only intended to be called when the process is first being brought\n     * up and bound by the activity manager. There is only one thread in the process\n     * at that time, so no locking is done.\n     *\n     * @param cache the cache of service references\n     * @hide\n     */", "    public static void initServiceCache(Map<String, IBinder> cache) {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    /**\n     * Exception thrown when no service published for given name. This might be\n     * thrown early during boot before certain services have published\n     * themselves.\n     *\n     * @hide\n     */", "    public static class ServiceNotFoundException extends Exception {\n        public ServiceNotFoundException(String name) {\n            super(\"No service published for: \" + name);\n        }\n    }\n}"]}
{"filename": "hidden-api/src/main/java/android/os/IUserManager.java", "chunked_list": ["package android.os;\n\npublic interface IUserManager extends IInterface {\n    void setUserRestriction(String key, boolean value, int userHandle);\n\n    abstract class Stub extends Binder implements IUserManager {\n        public static IUserManager asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n"]}
{"filename": "hidden-api/src/main/java/android/app/ActivityThread.java", "chunked_list": ["package android.app;\n\npublic class ActivityThread {\n    public static ActivityThread currentActivityThread() {\n        throw new RuntimeException(\"STUB\");\n    }\n\n    public Application getApplication() {\n        throw new RuntimeException(\"STUB\");\n    }\n}\n"]}
{"filename": "hidden-api/src/main/java/android/app/admin/IDevicePolicyManager.java", "chunked_list": ["package android.app.admin;\n\nimport android.os.Binder;\nimport android.os.IBinder;\nimport android.os.IInterface;\n\npublic interface IDevicePolicyManager extends IInterface {\n    abstract class Stub extends Binder implements IDevicePolicyManager {\n        public static IDevicePolicyManager asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}", "        public static IDevicePolicyManager asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}"]}
{"filename": "hidden-api/src/main/java/android/content/res/ApkAssets.java", "chunked_list": ["package android.content.res;\n\nimport android.content.res.loader.AssetsProvider;\n\nimport java.io.FileDescriptor;\nimport java.io.IOException;\n\npublic class ApkAssets {\n    public static ApkAssets loadFromPath(String path) throws IOException {\n        return null;\n    }\n", "    public static ApkAssets loadFromPath(String path) throws IOException {\n        return null;\n    }\n\n    public static ApkAssets loadFromPath(String path, int flags) throws IOException {\n        return null;\n    }\n\n    public static ApkAssets loadFromPath(String path, int flags,\n                                         AssetsProvider assets) throws IOException {\n        return null;\n    }\n", "    public static ApkAssets loadFromPath(String path, int flags,\n                                         AssetsProvider assets) throws IOException {\n        return null;\n    }\n\n    public static ApkAssets loadFromFd(FileDescriptor fd,\n                                       String friendlyName,\n                                       int flags,\n                                       AssetsProvider assets) throws IOException {\n        return null;\n    }\n", "    public static ApkAssets loadFromFd(FileDescriptor fd,\n                                       String friendlyName,\n                                       long offset,\n                                       long length,\n                                       int flags,\n                                       AssetsProvider assets)\n            throws IOException {\n        return null;\n    }\n\n    public static ApkAssets loadFromFd(FileDescriptor fd,\n                                       String friendlyName, boolean system, boolean forceSharedLibrary) {\n        return null;\n    }\n", "    public static ApkAssets loadFromFd(FileDescriptor fd,\n                                       String friendlyName, boolean system, boolean forceSharedLibrary) {\n        return null;\n    }\n\n    public static ApkAssets loadOverlayFromPath(String idmapPath,\n                                                int flags) throws IOException {\n        return null;\n    }\n}\n"]}
{"filename": "hidden-api/src/main/java/android/content/pm/ParceledListSlice.java", "chunked_list": ["/*\n * Copyright (C) 2011 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage android.content.pm;\n", "package android.content.pm;\n\nimport android.os.Parcel;\nimport android.os.Parcelable;\n\nimport com.android.modules.utils.BaseParceledListSlice;\n\nimport java.util.List;\n\n/**", "\n/**\n * Transfer a large list of Parcelable objects across an IPC.  Splits into\n * multiple transactions if needed.\n *\n * @hide\n * @see BaseParceledListSlice\n */\npublic class ParceledListSlice<T extends Parcelable> extends BaseParceledListSlice<T> {\n    public ParceledListSlice(List<T> list) {\n    }\n\n    private ParceledListSlice(Parcel in, ClassLoader loader) {\n    }\n\n    @Override", "public class ParceledListSlice<T extends Parcelable> extends BaseParceledListSlice<T> {\n    public ParceledListSlice(List<T> list) {\n    }\n\n    private ParceledListSlice(Parcel in, ClassLoader loader) {\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override", "    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(Parcel dest, int flags) {\n\n    }\n}"]}
{"filename": "hidden-api/src/main/java/android/content/pm/IPackageInstallerSession.java", "chunked_list": ["package android.content.pm;\n\nimport android.os.Binder;\nimport android.os.IBinder;\nimport android.os.IInterface;\n\npublic interface IPackageInstallerSession extends IInterface {\n    abstract class Stub extends Binder implements IPackageInstallerSession {\n        public static IPackageInstallerSession asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}", "        public static IPackageInstallerSession asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}"]}
{"filename": "hidden-api/src/main/java/android/content/pm/IPackageInstaller.java", "chunked_list": ["package android.content.pm;\n\nimport android.os.Binder;\nimport android.os.IBinder;\nimport android.os.IInterface;\n\npublic interface IPackageInstaller extends IInterface {\n    void uninstall(android.content.pm.VersionedPackage versionedPackage, java.lang.String callerPackageName, int flags, android.content.IntentSender statusReceiver, int userId) throws android.os.RemoteException;\n\n    abstract class Stub extends Binder implements IPackageInstaller {\n        public static IPackageInstaller asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}", "        public static IPackageInstaller asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}"]}
{"filename": "hidden-api/src/main/java/android/content/pm/IPackageManager.java", "chunked_list": ["package android.content.pm;\n\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.IntentFilter;\nimport android.os.Binder;\nimport android.os.IBinder;\nimport android.os.IInterface;\nimport android.os.RemoteException;\n", "import android.os.RemoteException;\n\nimport java.util.List;\n\npublic interface IPackageManager extends IInterface {\n    boolean isPackageAvailable(String packageName, int userId) throws RemoteException;\n\n    boolean getApplicationHiddenSettingAsUser(String packageName, int userId) throws RemoteException;\n\n    ApplicationInfo getApplicationInfo(String packageName, int flags, int userId)\n            throws RemoteException;\n\n    PackageInfo getPackageInfo(String packageName, int flags, int userId)\n            throws RemoteException;\n\n    int getPackageUid(String packageName, int flags, int userId) throws RemoteException;\n\n    String[] getPackagesForUid(int uid)\n            throws RemoteException;\n\n    ParceledListSlice<PackageInfo> getInstalledPackages(int flags, int userId)\n            throws RemoteException;\n\n    ParceledListSlice<ApplicationInfo> getInstalledApplications(int flags, int userId)\n            throws RemoteException;\n\n    int getUidForSharedUser(String sharedUserName)\n            throws RemoteException;\n\n    void grantRuntimePermission(String packageName, String permissionName, int userId)\n            throws RemoteException;\n\n    void revokeRuntimePermission(String packageName, String permissionName, int userId)\n            throws RemoteException;\n\n    int getPermissionFlags(String permissionName, String packageName, int userId)\n            throws RemoteException;\n\n    void updatePermissionFlags(String permissionName, String packageName, int flagMask, int flagValues, int userId)\n            throws RemoteException;\n\n    int checkPermission(String permName, String pkgName, int userId)\n            throws RemoteException;\n\n    int checkUidPermission(String permName, int uid)\n            throws RemoteException;\n\n    IPackageInstaller getPackageInstaller() throws RemoteException;\n\n    int installExistingPackageAsUser(String packageName, int userId, int installFlags,\n                                     int installReason) throws RemoteException;\n\n\n    int installExistingPackageAsUser(String packageName, int userId, int installFlags,\n                                     int installReason, List<String> whiteListedPermissions) throws RemoteException;\n\n    ParceledListSlice<ResolveInfo> queryIntentActivities(Intent intent,\n                                                         String resolvedType, int flags, int userId) throws RemoteException;\n\n    void setLastChosenActivity(Intent intent, String resolvedType, int flags,\n                               IntentFilter filter, int match, ComponentName activity);\n\n    // not work when api >= Android S(12)\n    void addPreferredActivity(IntentFilter filter, int match,\n                              ComponentName[] set, ComponentName activity, int userId);\n\n    void addPreferredActivity(IntentFilter filter, int match,\n                              ComponentName[] set, ComponentName activity, int userId, boolean removeExisting);\n\n\n    void clearPackagePreferredActivities(String packageName);\n\n    void addPersistentPreferredActivity(IntentFilter filter, ComponentName activity, int userId);\n\n    void clearPackagePersistentPreferredActivities(String packageName, int userId);\n\n    void flushPackageRestrictionsAsUser(int userId);\n\n    abstract class Stub extends Binder implements IPackageManager {\n", "        public static IPackageManager asInterface(IBinder obj) {\n            throw new UnsupportedOperationException();\n        }\n    }\n}\n"]}
{"filename": "dhizuku-shared/src/main/java/com/rosan/dhizuku/shared/DhizukuVariables.java", "chunked_list": ["package com.rosan.dhizuku.shared;\n\nimport android.content.ComponentName;\nimport android.os.Binder;\n\npublic class DhizukuVariables {\n    public static final String PACKAGE_NAME = \"com.rosan.dhizuku\";\n\n    public static final ComponentName COMPONENT_NAME = new ComponentName(PACKAGE_NAME, PACKAGE_NAME + \".server.DhizukuDAReceiver\");\n\n    public static final String ACTION_REQUEST_PERMISSION = PACKAGE_NAME + \".action.request.permission\";\n", "    public static final ComponentName COMPONENT_NAME = new ComponentName(PACKAGE_NAME, PACKAGE_NAME + \".server.DhizukuDAReceiver\");\n\n    public static final String ACTION_REQUEST_PERMISSION = PACKAGE_NAME + \".action.request.permission\";\n\n    public static final String BINDER_DESCRIPTOR = PACKAGE_NAME + \".server\";\n\n    public static final String PROVIDER_AUTHORITY = PACKAGE_NAME + \".server.provider\";\n\n    public static final String PROVIDER_METHOD_CLIENT = \"client\";\n\n    public static final String EXTRA_CLIENT = \"client\";\n", "    public static final String PROVIDER_METHOD_CLIENT = \"client\";\n\n    public static final String EXTRA_CLIENT = \"client\";\n\n    public static final String PARAM_DHIZUKU_BINDER = \"dhizuku_binder\";\n\n    public static final String PARAM_CLIENT_UID = \"uid\";\n\n    public static final String PARAM_CLIENT_REQUEST_PERMISSION_BINDER = \"request_permission_binder\";\n\n    public static final String PARAM_COMPONENT = \"component\";\n", "    public static final String PARAM_CLIENT_REQUEST_PERMISSION_BINDER = \"request_permission_binder\";\n\n    public static final String PARAM_COMPONENT = \"component\";\n\n    public static final int TRANSACT_CODE_REMOTE_BINDER = Binder.FIRST_CALL_TRANSACTION + 10;\n}\n"]}
