{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/DcesReportServiceApplicationTests.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.test.context.ActiveProfiles;\n\n@SpringBootTest\n@DirtiesContext", "@SpringBootTest\n@DirtiesContext\n@EnableAutoConfiguration\n@ActiveProfiles(\"test\")\nclass DcesReportServiceApplicationTests {\n\n\t@java.lang.SuppressWarnings(\"squid:S2699\")\n\t@Test\n\tvoid contextLoads() {}\n", "\tvoid contextLoads() {}\n\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/maatapi/MaatApiResponseModelTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.model.MaatApiResponseModel;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\n@SpringBootTest", "\n@SpringBootTest\n@ActiveProfiles(\"test\")\nclass MaatApiResponseModelTest {\n    private static final int DEFAULT_ID = 1;\n    private static final int DEFAULT_TOTAL = 0;\n\n\n    @Test\n    void givenMaatApiResponse_whenGetIdIsInvoked_thenCorrectIdIsReturned() {", "    @Test\n    void givenMaatApiResponse_whenGetIdIsInvoked_thenCorrectIdIsReturned() {\n        int expectedId = 3;\n        MaatApiResponseModel expectedResponse = new MaatApiResponseModel(\n                expectedId, DEFAULT_TOTAL\n        );\n        assertThat(expectedResponse.getId()).isEqualTo(expectedId);\n    }\n\n    @Test", "\n    @Test\n    void givenMaatApiResponse_whenGetTotalFilesIsInvoked_thenCorrectTotalFilesIsReturned() {\n        int expectedTotalFiles = 30;\n        MaatApiResponseModel expectedResponse = new MaatApiResponseModel(\n                DEFAULT_ID, expectedTotalFiles\n        );\n        assertThat(expectedResponse.getTotalFiles()).isEqualTo(expectedTotalFiles);\n    }\n", "    }\n\n    @Test\n    void givenMaatApiResponse_whenSetTotalFilesIsInvoked_thenTotalFilesIsUpdated() {\n        int expectedTotalFiles = 30;\n        MaatApiResponseModel response = new MaatApiResponseModel(\n                DEFAULT_ID, DEFAULT_TOTAL\n        );\n        assertThat(response.getTotalFiles()).isEqualTo(DEFAULT_TOTAL);\n", "        assertThat(response.getTotalFiles()).isEqualTo(DEFAULT_TOTAL);\n\n        response.setTotalFiles(expectedTotalFiles);\n\n        assertThat(response.getTotalFiles()).isNotEqualTo(DEFAULT_TOTAL);\n        assertThat(response.getTotalFiles()).isEqualTo(expectedTotalFiles);\n    }\n\n    @Test\n    void givenMaatApiResponse_whenSetIdIsInvoked_thenIdIsUpdated() {", "    @Test\n    void givenMaatApiResponse_whenSetIdIsInvoked_thenIdIsUpdated() {\n        int expectedId = 3;\n        MaatApiResponseModel response = new MaatApiResponseModel(\n                DEFAULT_ID, DEFAULT_TOTAL\n        );\n        assertThat(response.getId()).isEqualTo(DEFAULT_ID);\n\n        response.setId(expectedId);\n", "        response.setId(expectedId);\n\n        assertThat(response.getId()).isNotEqualTo(DEFAULT_ID);\n        assertThat(response.getId()).isEqualTo(expectedId);\n    }\n\n    @Test\n    void givenMaatApiResponse_whenToStringInvoked_thenAStringIsReturned() {\n        String expectedEstring = String.format(\"MaatApiResponse{\" +\n                \"id=%s, totalFiles=%s}\", DEFAULT_ID, DEFAULT_TOTAL);", "        String expectedEstring = String.format(\"MaatApiResponse{\" +\n                \"id=%s, totalFiles=%s}\", DEFAULT_ID, DEFAULT_TOTAL);\n        MaatApiResponseModel response = new MaatApiResponseModel(\n                DEFAULT_ID, DEFAULT_TOTAL\n        );\n\n        assertThat(response.toString()).isInstanceOf(String.class);\n        assertThat(response).hasToString(expectedEstring);\n    }\n", "    }\n\n}"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/maatapi/MaatApiConfigurationTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.core.env.Environment;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.config.ServicesConfiguration;", "import org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.config.ServicesConfiguration;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\n@SpringBootTest\n@EnableConfigurationProperties(value = ServicesConfiguration.class)\n@ActiveProfiles(\"test\")\nclass MaatApiConfigurationTest {\n", "class MaatApiConfigurationTest {\n\n    @Autowired\n    @Qualifier(\"servicesConfiguration\")\n    private ServicesConfiguration configuration;\n\n    @Autowired\n    Environment env;\n\n    @Test", "\n    @Test\n    void givenDefinedBasedURL_whenGetBaseUrlIsInvoked_thenCorrectBaseURLIsReturned() {\n        assertThat(configuration.getMaatApi().getBaseUrl()).isEqualTo(\"http://localhost:1111\");\n    }\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/maatapi/MaatApiWebClientFactoryTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport okhttp3.mockwebserver.MockResponse;\nimport okhttp3.mockwebserver.MockWebServer;\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;", "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport org.springframework.test.context.ActiveProfiles;", "import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.config.ServicesConfiguration;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.model.MaatApiResponseModel;\n\nimport java.io.IOException;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport static org.springframework.http.HttpHeaders.CONTENT_TYPE;", "import static org.assertj.core.api.AssertionsForClassTypes.assertThat;\nimport static org.springframework.http.HttpHeaders.CONTENT_TYPE;\nimport static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n\n@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@ActiveProfiles(\"test\")\nclass MaatApiWebClientFactoryTest {\n\n    MaatApiWebClientFactory maatApiWebClientFactory;", "\n    MaatApiWebClientFactory maatApiWebClientFactory;\n    private static MockWebServer mockWebServer;\n    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n\n    @Qualifier(\"servicesConfiguration\")\n    @Autowired\n    private ServicesConfiguration configuration;\n    @MockBean\n    private ClientRegistrationRepository clientRegistrationRepo;", "    @MockBean\n    private ClientRegistrationRepository clientRegistrationRepo;\n    @MockBean\n    private OAuth2AuthorizedClientRepository authorizationRepo;\n\n\n    @BeforeAll\n    public void setup() throws IOException {\n        mockWebServer = new MockWebServer();\n        mockWebServer.start();\n        configuration.getMaatApi().setBaseUrl(String.format(\"http://localhost:%s\", mockWebServer.getPort()));\n\n        maatApiWebClientFactory = new MaatApiWebClientFactory();\n    }\n\n    @AfterAll\n    void shutDown() throws IOException {\n        mockWebServer.shutdown();\n    }\n\n    @Test\n    void givenAnyParameters_whenMaatApiWebClientIsInvoked_thenTheCorrectWebClientShouldBeReturned() throws JsonProcessingException {\n        MaatApiResponseModel expectedResponse = new MaatApiResponseModel();\n        expectedResponse.setId(1);\n        expectedResponse.setTotalFiles(1);\n        setupValidResponse(expectedResponse);\n\n        WebClient actualWebClient = maatApiWebClientFactory.maatApiWebClient(configuration,\n                clientRegistrationRepo, authorizationRepo\n        );\n\n        assertThat(actualWebClient).isNotNull();\n        assertThat(actualWebClient).isInstanceOf(WebClient.class);\n\n        MaatApiResponseModel response = mockWebClientRequest(actualWebClient);\n        assert response != null;\n        assertThat(response).isInstanceOf(MaatApiResponseModel.class);\n        assertThat(response.getId()).isEqualTo(expectedResponse.getId());\n    }\n\n    private <T> void setupValidResponse(T returnBody) throws JsonProcessingException {\n        String responseBody = OBJECT_MAPPER.writeValueAsString(returnBody);\n        mockWebServer.enqueue(new MockResponse()\n                .setResponseCode(HttpStatus.OK.value())\n                .setBody(responseBody)\n                .addHeader(CONTENT_TYPE, APPLICATION_JSON_VALUE));\n    }\n\n    private MaatApiResponseModel mockWebClientRequest(WebClient webClient) {\n        return webClient\n                .get()\n                .uri(configuration.getMaatApi().getBaseUrl())\n                .retrieve()\n                .bodyToMono(MaatApiResponseModel.class)\n                .block();\n    }\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/maatapi/MaatApiClientFactoryTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.client.MaatApiClient;\n", "import uk.gov.justice.laa.crime.dces.report.maatapi.client.MaatApiClient;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\n@SpringBootTest\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@ActiveProfiles(\"test\")\nclass MaatApiClientFactoryTest {\n\n    @MockBean", "\n    @MockBean\n    WebClient maatApiWebClient;\n\n    @Test\n    void givenAnyParameters_whenMaatApiClientIsInvoked_thenTheCorrectClientShouldBeReturned() {\n        MaatApiClient actualMaatApiClient = MaatApiClientFactory.maatApiClient(maatApiWebClient, MaatApiClient.class);\n        assertThat(actualMaatApiClient).isNotNull();\n        assertThat(actualMaatApiClient).isInstanceOf(MaatApiClient.class);\n    }", "        assertThat(actualMaatApiClient).isInstanceOf(MaatApiClient.class);\n    }\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/controller/ContributionsReportControllerTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.controller;\n\nimport com.github.tomakehurst.wiremock.junit5.WireMockTest;\nimport io.sentry.util.FileUtils;\nimport jakarta.xml.bind.JAXBException;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.service.ContributionFilesService;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.Locale;\nimport java.util.Optional;", "import java.util.Locale;\nimport java.util.Optional;\n\nimport static org.assertj.core.api.AssertionsForClassTypes.assertThat;\n\n@SpringBootTest\n@ActiveProfiles(\"test\")\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@WireMockTest(httpPort = 1111)\nclass ContributionsReportControllerTest {", "@WireMockTest(httpPort = 1111)\nclass ContributionsReportControllerTest {\n    private static final LocalDate startPeriod = LocalDate.of(2021, 1, 1);\n    private static final LocalDate finishPeriod = LocalDate.of(2021, 1, 31);\n    private static final String MAAT_ID_EXPECTED = \"5635978\";\n\n    @Autowired\n    ContributionFilesService fileService;\n\n    @Autowired", "\n    @Autowired\n    ContributionsReportController controller;\n\n\n    @BeforeAll\n    void setup() {\n        Locale.setDefault(new Locale(\"en\", \"GB\"));\n    }\n", "    }\n\n    @Test\n    void givenValidPeriod_whenGetContributionFilesIsInvoked_thenFileWithExpectedContentIsReturned() throws JAXBException, IOException {\n        File report = controller.getContributionFiles(startPeriod, finishPeriod);\n\n        assertThat(report).isNotNull().isNotEmpty().isFile();\n        assertThat(report.getName())\n            .matches(\"Contributions_.*csv\")\n            .contains(fileService.getFileName(startPeriod, finishPeriod));", "            .matches(\"Contributions_.*csv\")\n            .contains(fileService.getFileName(startPeriod, finishPeriod));\n\n        assertThat(searchInFile(report, MAAT_ID_EXPECTED)).isTrue();\n        assertThat(searchInFile(report, \"5635978,update,30/01/2021,25/01/2021,31/01/2021,25/01/2021,,\"))\n                .isTrue();\n    }\n\n    private boolean searchInFile(File file, String toSearchFor) throws IOException {\n        return Optional.ofNullable(FileUtils.readText(file))", "    private boolean searchInFile(File file, String toSearchFor) throws IOException {\n        return Optional.ofNullable(FileUtils.readText(file))\n            .orElse(\"\")\n            .contains(toSearchFor);\n    }\n}"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/controller/ControllerDateFormatTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.controller;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;", "import org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\nimport uk.gov.justice.laa.crime.dces.report.service.ContributionFilesService;\n\nimport java.util.List;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;", "import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n@SpringBootTest\nclass ControllerDateFormatTest {\n    private static final String REQUEST_PATH = \"/api/internal/v1/dces/report/contributions/%s/%s\";\n\n    @Autowired\n    private WebApplicationContext webApplicationContext;\n", "    private WebApplicationContext webApplicationContext;\n\n    private MockMvc mockMvc;\n\n    @MockBean\n    private ContributionFilesService mockService;\n\n    @BeforeEach\n    public void setup() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n        Mockito.when(mockService.getFiles(any(), any())).thenReturn(List.of(\"<xml1>\"));\n    }\n\n    @Test\n    void dateParameterStringFails() throws Exception {\n        mockMvc.perform(get(String.format(REQUEST_PATH, \"3414\", \"3243214\")))\n                .andExpect(status().is4xxClientError());\n    }\n\n    @Test\n    void dateParameterStringSucceedsWithCorrectFormat() throws Exception {\n        mockMvc.perform(get(String.format(REQUEST_PATH, \"01.01.2023\", \"31.01.2023\")))\n                .andExpect(status().isOk());\n    }\n}", "    public void setup() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n        Mockito.when(mockService.getFiles(any(), any())).thenReturn(List.of(\"<xml1>\"));\n    }\n\n    @Test\n    void dateParameterStringFails() throws Exception {\n        mockMvc.perform(get(String.format(REQUEST_PATH, \"3414\", \"3243214\")))\n                .andExpect(status().is4xxClientError());\n    }\n\n    @Test\n    void dateParameterStringSucceedsWithCorrectFormat() throws Exception {\n        mockMvc.perform(get(String.format(REQUEST_PATH, \"01.01.2023\", \"31.01.2023\")))\n                .andExpect(status().isOk());\n    }\n}"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/client/ContributionFilesClientTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.client;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.junit.jupiter.api.function.Executable;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;", "import org.mockito.Mockito;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;", "\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.*;\n\n@SpringBootTest\n@ExtendWith(MockitoExtension.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@ActiveProfiles(\"test\")\nclass ContributionFilesClientTest {\n    private static final LocalDate startPeriod = LocalDate.of(2023, 1, 1);", "class ContributionFilesClientTest {\n    private static final LocalDate startPeriod = LocalDate.of(2023, 1, 1);\n    private static final LocalDate finishPeriod = LocalDate.of(2023, 1, 31);\n\n    @Mock\n    ContributionFilesClient contributionFilesClient;\n\n\n    @Test\n    void givenValidDateLimitParams_whenContributionClientSendGetRequestIsInvoked_thenResponseDataModelIsReturned() {", "    @Test\n    void givenValidDateLimitParams_whenContributionClientSendGetRequestIsInvoked_thenResponseDataModelIsReturned() {\n        List<String> expectedResponse = getMockedMaatApiResponseModel();\n\n        when(contributionFilesClient.getContributions(any(), any()))\n                .thenReturn(expectedResponse);\n\n        Assertions.assertDoesNotThrow(mockSendRequestGetContributionFiles());\n        verify(contributionFilesClient, times(1)).getContributions(startPeriod, finishPeriod);\n    }", "        verify(contributionFilesClient, times(1)).getContributions(startPeriod, finishPeriod);\n    }\n\n    @Test\n    void givenValidDateLimitParams_whenContributionClientSendGetRequestIsInvoked_thenExceptionIsThrown() {\n        when(contributionFilesClient.getContributions(any(), any()))\n                .thenThrow(Mockito.mock(MaatApiClientException.class));\n\n        assertThrows(MaatApiClientException.class, mockSendRequestGetContributionFiles());\n    }", "        assertThrows(MaatApiClientException.class, mockSendRequestGetContributionFiles());\n    }\n\n    private List<String> getMockedMaatApiResponseModel() {\n        return List.of(\"XML1\", \"XML2\");\n    }\n    \n    private Executable mockSendRequestGetContributionFiles() {\n        return () -> contributionFilesClient.getContributions(startPeriod, finishPeriod);\n    }", "        return () -> contributionFilesClient.getContributions(startPeriod, finishPeriod);\n    }\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/service/ContributionsFileServiceConnectionTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\n\nimport org.assertj.core.api.SoftAssertions;\nimport org.assertj.core.api.junit.jupiter.InjectSoftAssertions;\nimport org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.extension.ExtendWith;", "import org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.security.oauth2.core.OAuth2AuthorizationException;\nimport org.springframework.test.context.ActiveProfiles;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Locale;", "import java.util.List;\nimport java.util.Locale;\n\n@SpringBootTest\n@ExtendWith(SoftAssertionsExtension.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@ActiveProfiles(\"connectiontest\")\nclass ContributionsFileServiceConnectionTest {\n    @InjectSoftAssertions\n    private SoftAssertions softly;", "    @InjectSoftAssertions\n    private SoftAssertions softly;\n    private static final LocalDate startPeriod = LocalDate.of(2021, 1, 2);\n\n    private static final LocalDate finishPeriod = LocalDate.of(2021, 1, 27);\n    private static final String MAAT_ID_EXPECTED = \"5635978\";\n\n    @Autowired\n    ContributionFilesService filesService;\n", "    ContributionFilesService filesService;\n\n    @BeforeAll\n    void setup() {\n        Locale.setDefault(new Locale(\"en\", \"GB\"));\n    }\n\n    @Test\n    void givenValidPeriod_whenGetContributionFilesIsInvoked_thenFileWithExpectedContentIsReturned() {\n        List<String> contributionFiles;", "    void givenValidPeriod_whenGetContributionFilesIsInvoked_thenFileWithExpectedContentIsReturned() {\n        List<String> contributionFiles;\n\n        try {\n            contributionFiles = filesService.getFiles(startPeriod, finishPeriod);\n            softly.assertThat(contributionFiles).isNotNull();\n            softly.assertThat(contributionFiles).isNotEmpty();\n        } catch (IllegalArgumentException e) { // Config variable values not yet loaded\n        } catch (OAuth2AuthorizationException e) { // Client credentials error\n        }\n\n        softly.assertAll();\n    }\n}"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/service/DcesReportServiceImplTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport jakarta.xml.bind.JAXBException;\nimport org.junit.Before;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.mock.mockito.MockBean;\n", "import org.springframework.boot.test.mock.mockito.MockBean;\n\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.BDDMockito.given;\nimport static org.mockito.Mockito.times;\n", "import static org.mockito.Mockito.times;\n\n@SpringBootTest\nclass DcesReportServiceImplTest {\n\n    @Autowired\n    DcesReportServiceImpl dcesReportService;\n\n    @MockBean\n    FdcFilesService mockFdcService;", "    @MockBean\n    FdcFilesService mockFdcService;\n\n    @MockBean\n    ContributionFilesService mockContributionsService;\n\n    @Before\n    void setup() {\n        given(mockFdcService.getFiles(any(), any())).willReturn(List.of(\"<xml1>\"));\n        given(mockContributionsService.getFiles(any(), any())).willReturn(List.of(\"<xml1>\"));", "        given(mockFdcService.getFiles(any(), any())).willReturn(List.of(\"<xml1>\"));\n        given(mockContributionsService.getFiles(any(), any())).willReturn(List.of(\"<xml1>\"));\n    }\n\n    @Test\n    void getFdcCollection() throws JAXBException, IOException {\n        // setup\n        LocalDate dateParam = LocalDate.of(2023, 7, 10);\n\n        // execute", "\n        // execute\n        dcesReportService.getFdcReport(dateParam, dateParam);\n\n        // assert\n        Mockito.verify(mockFdcService, times(1)).getFiles(dateParam, dateParam);\n        Mockito.verify(mockContributionsService, times(0)).getFiles(any(), any());\n    }\n\n    @Test", "\n    @Test\n    void getInitialContributionsCollection() throws JAXBException, IOException {\n        // setup\n        LocalDate dateParam = LocalDate.of(2023, 7, 10);\n\n        // execute\n        dcesReportService.getContributionsReport(dateParam, dateParam);\n\n        // assert", "\n        // assert\n        Mockito.verify(mockContributionsService, times(1)).getFiles(dateParam, dateParam);\n        Mockito.verify(mockFdcService, times(0)).getFiles(any(), any());\n    }\n}"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/service/CSVFileServiceTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport io.sentry.util.FileUtils;\nimport org.assertj.core.api.SoftAssertions;\nimport org.assertj.core.api.junit.jupiter.InjectSoftAssertions;\nimport org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;", "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile.FdcList;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile.FdcList.Fdc;\nimport uk.gov.justice.laa.crime.dces.report.model.CSVDataLine;\n\n\nimport javax.xml.datatype.DatatypeConfigurationException;", "\nimport javax.xml.datatype.DatatypeConfigurationException;\nimport javax.xml.datatype.DatatypeFactory;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.GregorianCalendar;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Calendar;", "import java.util.Objects;\nimport java.util.Calendar;\n\n@SpringBootTest\n@ExtendWith(SoftAssertionsExtension.class)\n@ActiveProfiles(\"test\")\nclass CSVFileServiceTest {\n\n\n    @InjectSoftAssertions", "\n    @InjectSoftAssertions\n    private SoftAssertions softly;\n    @Autowired\n    private CSVFileService CSVFileService;\n    private static final Long testMaatId=123456789L;\n\n    private List<CSVDataLine> buildTestContributionFile(){\n        var contribution = new CSVDataLine();\n        contribution.setMaatId(\"123456789\");", "        var contribution = new CSVDataLine();\n        contribution.setMaatId(\"123456789\");\n        ArrayList<CSVDataLine> contributionList = new ArrayList<>();\n        contributionList.add(contribution);\n        return contributionList;\n    }\n\n\n    @Test\n    void testWriteContributionToCsv(){", "    @Test\n    void testWriteContributionToCsv(){\n        File file = null;\n        try {\n            file = File.createTempFile( \"test\", \".csv\");\n\n            List<CSVDataLine> contFile = buildTestContributionFile();\n            CSVFileService.writeContributionToCsv(contFile, file);\n            String output = FileUtils.readText(file);\n            softly.assertThat(output).contains(contFile.get(0).getMaatId());\n            softly.assertThat(output).contains(\"MAAT ID,Data Feed Type,Assessment Date,CC OutCome Date,Correspondence Sent Date,Rep Order Status Date,Hardship Review Date,Passported Date\");\n            softly.assertAll();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {", "            if (Objects.nonNull(file)) { file.delete();}\n        }\n    }\n    @Test\n    void testWriteFdcToCsv(){\n        File file = null;\n        try {\n            file = File.createTempFile( \"test\", \".csv\");\n\n            FdcFile fdcFile = buildTestFdcFile();\n            CSVFileService.writeFdcToCsv(fdcFile, file);\n            String output = FileUtils.readText(file);\n            softly.assertThat(output).contains(String.valueOf(testMaatId));\n            softly.assertThat(output).contains(\"MAAT ID, Sentence Date, Calculation Date, Final Cost, LGFS Cost, AGFS COST\");\n            softly.assertThat(output).contains(\"30/06/2020\");\n            softly.assertAll();\n        } catch (IOException | DatatypeConfigurationException e) {\n            throw new RuntimeException(e);\n        } finally {", "            if(Objects.nonNull(file)){file.delete();}\n        }\n    }\n\n    private FdcFile buildTestFdcFile() throws DatatypeConfigurationException {\n        var fdc = new Fdc();\n        fdc.setMaatId(testMaatId);\n        fdc.setCalculationDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(2020, Calendar.JUNE,30,4,0,0)));\n        var fdcList = new FdcList();\n        fdcList.getFdc().add(fdc);\n\n        var fdcFile = new FdcFile();\n        fdcFile.setFdcList(fdcList);\n        return fdcFile;\n\n    }\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/service/ContributionFilesServiceTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport com.github.tomakehurst.wiremock.junit5.WireMockTest;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.TestInstance;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.test.context.ActiveProfiles;", "import org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.web.client.HttpServerErrorException;\nimport org.springframework.web.reactive.function.client.WebClientResponseException;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.client.MaatApiClient;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\n\nimport java.time.LocalDate;\nimport java.util.List;\nimport java.util.Locale;", "import java.util.List;\nimport java.util.Locale;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n@SpringBootTest\n@ActiveProfiles(\"test\")\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@WireMockTest(httpPort = 1111)", "@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@WireMockTest(httpPort = 1111)\nclass ContributionFilesServiceTest {\n//    @DateTimeFormat(pattern = MaatApiClient.DEFAULT_DATE_FORMAT)\n    private static final LocalDate startPeriod = LocalDate.of(2023, 1, 1);\n//    @DateTimeFormat(pattern = MaatApiClient.DEFAULT_DATE_FORMAT)\n    private static final LocalDate finishPeriod = LocalDate.of(2023, 1, 31);\n\n    @Autowired\n    ContributionFilesService contributionFilesReportService;", "    @Autowired\n    ContributionFilesService contributionFilesReportService;\n\n    @BeforeAll\n    void setup() {\n        Locale.setDefault(new Locale(\"en\", \"GB\"));\n    }\n\n    @Test\n    void givenValidDateLimitParams_whenGetFilesIsInvoked_thenResponseDataModelIsReturned()  throws WebClientResponseException {", "    @Test\n    void givenValidDateLimitParams_whenGetFilesIsInvoked_thenResponseDataModelIsReturned()  throws WebClientResponseException {\n        System.out.println(startPeriod);\n        System.out.println(finishPeriod);\n        List<String> result = contributionFilesReportService.getFiles(startPeriod, finishPeriod);\n\n        assertNotNull(result);\n        assertEquals(2, result.size());\n        assertTrue(result.get(0).contains(\"id=\\\"222772044\"));\n        assertTrue(result.get(1).contains(\"id=\\\"222772045\"));", "        assertTrue(result.get(0).contains(\"id=\\\"222772044\"));\n        assertTrue(result.get(1).contains(\"id=\\\"222772045\"));\n    }\n\n    @Test\n    void givenInternalServerError_whenGetFilesIsInvoked_thenHttpServerErrorExceptionIsThrown(){\n        // setup\n        LocalDate date = LocalDate.of(5500, 5, 5);\n\n        // execute", "\n        // execute\n        Exception exception = assertThrows(HttpServerErrorException.class,\n                () -> contributionFilesReportService.getFiles(date, date));\n\n        String expectedMessage = \"500 Received error 500\";\n        String actualMessage = exception.getMessage();\n        // assert\n        assertTrue(actualMessage.contains(expectedMessage));\n    }", "        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    void givenNotFoundServerError_whenGetFilesIsInvoked_thenWebClientResponseExceptionIsThrown(){\n        // setup\n        LocalDate date = LocalDate.of(4404, 4, 4);\n\n        // execute\n        Exception exception = assertThrows(WebClientResponseException.class,", "        // execute\n        Exception exception = assertThrows(WebClientResponseException.class,\n                () -> contributionFilesReportService.getFiles(date, date)\n        );\n\n        String expectedMessage = \"404 Not Found\";\n        String actualMessage = exception.getMessage();\n        // assert\n        assertTrue(actualMessage.contains(expectedMessage));\n    }", "        assertTrue(actualMessage.contains(expectedMessage));\n    }\n\n    @Test\n    void givenServerError_whenGetFilesIsInvoked_thenMaatApiClientExceptionIsThrown(){\n        // setup\n        LocalDate date = LocalDate.of(4400, 4, 4);\n\n        // execute\n        Exception exception = assertThrows(MaatApiClientException.class,", "        // execute\n        Exception exception = assertThrows(MaatApiClientException.class,\n                () -> contributionFilesReportService.getFiles(date, date)\n        );\n\n        String expectedMessage = \"Received error 400\";\n        String actualMessage = exception.getMessage();\n        // assert\n        assertTrue(actualMessage.contains(expectedMessage));\n    }", "        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/service/FdcFilesServiceTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport com.github.tomakehurst.wiremock.junit5.WireMockTest;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.web.reactive.function.client.WebClientResponseException;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\n", "import uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\n@ActiveProfiles(\"test\")\n@WireMockTest(httpPort = 1111)", "@ActiveProfiles(\"test\")\n@WireMockTest(httpPort = 1111)\nclass FdcFilesServiceTest {\n\n    @Autowired\n    private FdcFilesService testService;\n\n    @Test\n    void getsListOfContributionsXmlWithValidDateParams() throws WebClientResponseException {\n        // setup", "    void getsListOfContributionsXmlWithValidDateParams() throws WebClientResponseException {\n        // setup\n        LocalDate date = LocalDate.of(2023, 6, 10);\n\n        // execute\n        List<String> result = testService.getFiles(date, date);\n\n        // assert\n        assertNotNull(result);\n        assertEquals(2, result.size());", "        assertNotNull(result);\n        assertEquals(2, result.size());\n        assertTrue(result.get(0).contains(\"id=\\\"222772044\"));\n        assertTrue(result.get(1).contains(\"id=\\\"222772045\"));\n    }\n\n    @Test\n    void serviceThrowsExceptionWithInvalidDateRange() {\n        // setup\n        LocalDate startDate = LocalDate.of(2023, 6, 10);", "        // setup\n        LocalDate startDate = LocalDate.of(2023, 6, 10);\n        LocalDate endDate = LocalDate.of(2023, 6, 9);\n\n        // execute\n        Exception exception = assertThrows(MaatApiClientException.class, () -> {\n            testService.getFiles(startDate, endDate);\n        });\n\n        String expectedMessage = String.format(\"invalid time range %s is before %s\", endDate, startDate);", "\n        String expectedMessage = String.format(\"invalid time range %s is before %s\", endDate, startDate);\n        String actualMessage = exception.getMessage();\n\n        // assert\n        assertTrue(actualMessage.contains(expectedMessage));\n    }\n}\n", ""]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/mapper/ContributionsFileMapperTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.mapper;\n\nimport io.sentry.util.FileUtils;\nimport jakarta.xml.bind.JAXBException;\nimport jakarta.xml.bind.UnmarshalException;\nimport org.assertj.core.api.SoftAssertions;\nimport org.assertj.core.api.junit.jupiter.InjectSoftAssertions;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\nimport org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;", "import org.junit.jupiter.api.Test;\nimport org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile;\nimport uk.gov.justice.laa.crime.dces.report.service.CSVFileService;\n\nimport java.io.File;", "\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Objects;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.fail;\nimport static org.mockito.ArgumentMatchers.any;", "import static org.junit.jupiter.api.Assertions.fail;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@SpringBootTest\n@ExtendWith(SoftAssertionsExtension.class)\n@ActiveProfiles(\"test\")\nclass ContributionsFileMapperTest {", "@ActiveProfiles(\"test\")\nclass ContributionsFileMapperTest {\n\n    @InjectSoftAssertions\n    private SoftAssertions softly;\n    @Autowired\n    private ContributionsFileMapper contributionsFileMapper;\n\n    private static final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n    private static final String filename = \"this_is_a_test.xml\";", "    private static final DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");\n    private static final String filename = \"this_is_a_test.xml\";\n\n    @AfterEach\n    void resetCsvFileService(){\n        contributionsFileMapper.csvFileService = new CSVFileService();\n    }\n\n    @Test\n    void testXMLValid(){", "    @Test\n    void testXMLValid(){\n        File f = new File(getClass().getClassLoader().getResource(\"contributions/CONTRIBUTIONS_202102122031.xml\").getFile());\n        ContributionFile contributionsFile = null;\n        try {\n            contributionsFile = contributionsFileMapper.mapContributionsXMLFileToObject(f);\n        } catch (JAXBException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(contributionsFile).isNotNull();\n        var contributions = contributionsFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS().get(0);\n        softly.assertThat(contributions.getFlag()).isEqualTo(\"update\");\n        softly.assertThat(contributionsFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS().size()).isEqualTo(1);\n        softly.assertAll();\n    }\n\n    @Test\n    void testMultipleContributions(){\n        File f = new File(getClass().getClassLoader().getResource(\"contributions/multiple_contributions.xml\").getFile());\n        ContributionFile contributionsFile = null;", "        try {\n            contributionsFile = contributionsFileMapper.mapContributionsXMLFileToObject(f);\n        } catch (JAXBException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(contributionsFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS().size()).isEqualTo(16);\n        softly.assertAll();\n    }\n\n    @Test\n    void testFieldMappingForCSV(){\n        //MAAT ID,Data Feed Type,Assessment Date,CC OutCome Date,Correspondence Sent Date,Rep Order Status Date,Hardship Review Date,Passported Date\n        File f = new File(getClass().getClassLoader().getResource(\"contributions/report_values_filled.xml\").getFile());\n        ContributionFile contributionsFile = null;", "        try {\n            contributionsFile = contributionsFileMapper.mapContributionsXMLFileToObject(f);\n        } catch (JAXBException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(contributionsFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS().size()).isEqualTo(1);\n\n        var contributions = contributionsFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS().get(0);\n        softly.assertThat(contributions.getMaatId()).isEqualTo(5635978);\n        softly.assertThat(contributions.getFlag()).isEqualTo(\"update\");\n        softly.assertThat(contributions.getAssessment().getEffectiveDate().toString()).isEqualTo(\"2021-01-30\");\n        softly.assertThat(contributions.getCcOutcomes().getCcOutcome().get(0).getDate().toString()).isEqualTo(\"2021-01-25\");\n        softly.assertThat(contributions.getCorrespondence().getLetter().get(0).getCreated().toString()).isEqualTo(\"2021-02-12\");\n        softly.assertThat(contributions.getApplication().getRepStatusDate().toString()).isEqualTo(\"2021-01-25\");\n        softly.assertThat(contributions.getApplication().getCcHardship().getReviewDate().toString()).isEqualTo(\"2020-05-05\");\n        softly.assertThat(contributions.getPassported().getDateCompleted().toString()).isEqualTo(\"2020-02-12\");\n        softly.assertAll();\n    }\n\n    @Test\n    void testInvalidXML(){\n        File f = new File(getClass().getClassLoader().getResource(\"contributions/invalid.XML\").getFile());\n        assertThrows(UnmarshalException.class, () -> contributionsFileMapper.mapContributionsXMLFileToObject(f));\n    }\n\n    @Test\n    void testStringConversion(){\n\n        ContributionFile contributionsFile = null;", "        try {\n            contributionsFile = contributionsFileMapper.mapContributionsXmlStringToObject(getXMLString());\n        } catch (JAXBException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(contributionsFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS().size()).isEqualTo(1);\n    }\n\n    private String getXMLString(){\n        return \"<?xml version=\\\"1.0\\\"?><contribution_file>    <header id=\\\"222772044\\\">        <filename>CONTRIBUTIONS_202102122031.xml</filename>        <dateGenerated>2021-02-12</dateGenerated>        <recordCount>1</recordCount>        <formatVersion>format version 1.7 - xsd=contribution_file.xsd version 1.16</formatVersion>    </header>    <CONTRIBUTIONS_LIST>        <CONTRIBUTIONS id=\\\"222769650\\\" flag=\\\"update\\\">            <maat_id>5635978</maat_id>            <applicant id=\\\"222767510\\\">                <firstName>F Name</firstName>                <lastName>L Name</lastName>                <dob>1990-04-07</dob>                <preferredPaymentDay>1</preferredPaymentDay>                <noFixedAbode>no</noFixedAbode>                <specialInvestigation>no</specialInvestigation>                <homeAddress>                    <detail>                        <line1>102 Petty France</line1>                        <line2/>                        <line3/>                        <city/>                        <country/>                        <postcode/>                    </detail>                </homeAddress>                <postalAddress>                    <detail>                        <line1>SW1H 9EA</line1>                        <line2>SW1H 9EA</line2>                        <line3>SW1H 9EA</line3>                        <city/>                        <country/>                        <postcode>SW1H 9EA</postcode>                    </detail>                </postalAddress>                <employmentStatus>                    <code>SELF</code>                    <description>Self Employed</description>                </employmentStatus>                <disabilitySummary>                    <declaration>NOT_STATED</declaration>                </disabilitySummary>            </applicant>            <application>                <offenceType>                    <code>MURDER</code>                    <description>A-Homicide &amp; grave offences</description>                </offenceType>                <caseType>                    <code>EITHER WAY</code>                    <description>Either-Way</description>                </caseType>                <repStatus>                    <status>CURR</status>                    <description>Current</description>                </repStatus>                <magsCourt>                    <court>246</court>                    <description>Aberdare</description>                </magsCourt>                <repStatusDate>2021-01-25</repStatusDate><ccHardship><reviewDate>2020-05-05</reviewDate><reviewResult></reviewResult></ccHardship>                <arrestSummonsNumber>2011999999999999ASND</arrestSummonsNumber>                <inCourtCustody>no</inCourtCustody>                <imprisoned>no</imprisoned>                <repOrderWithdrawalDate>2021-01-29</repOrderWithdrawalDate>                <committalDate>2020-09-15</committalDate>                <solicitor>                    <accountCode>0D088G</accountCode>                    <name>MERRY &amp; CO</name>                </solicitor>            </application>            <assessment>                <effectiveDate>2021-01-30</effectiveDate>                <monthlyContribution>0</monthlyContribution>                <upfrontContribution>0</upfrontContribution>                <incomeContributionCap>185806</incomeContributionCap>                <assessmentReason>                    <code>PAI</code>                    <description>Previous Assessment was Incorrect</description>                </assessmentReason>                <assessmentDate>2021-02-12</assessmentDate>                <incomeEvidenceList>                    <incomeEvidence>                        <evidence>ACCOUNTS</evidence>                        <mandatory>no</mandatory>                    </incomeEvidence>                    <incomeEvidence>                        <evidence>BANK STATEMENT</evidence>                        <mandatory>no</mandatory>                    </incomeEvidence>                    <incomeEvidence>                        <evidence>CASH BOOK</evidence>                        <mandatory>no</mandatory>                    </incomeEvidence>                    <incomeEvidence>                        <evidence>NINO</evidence>                        <mandatory>yes</mandatory>                    </incomeEvidence>                    <incomeEvidence>                        <evidence>OTHER BUSINESS</evidence>                        <mandatory>no</mandatory>                    </incomeEvidence>                    <incomeEvidence>                        <evidence>TAX RETURN</evidence>                        <mandatory>no</mandatory>                    </incomeEvidence>                </incomeEvidenceList>                <sufficientDeclaredEquity>no</sufficientDeclaredEquity>                <sufficientVerifiedEquity>no</sufficientVerifiedEquity>                <sufficientCapitalandEquity>no</sufficientCapitalandEquity>            </assessment>            <passported><date_completed>2020-02-12</date_completed></passported>            <equity/>            <capitalSummary>                <noCapitalDeclared>no</noCapitalDeclared>            </capitalSummary>            <ccOutcomes>                <ccOutcome>                    <code>CONVICTED</code>                    <date>2021-01-25</date>                </ccOutcome>            </ccOutcomes>            <correspondence>                <letter>                    <Ref>W1</Ref>                    <id>222771991</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-02-12</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222771938</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-02-12</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222770074</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769497</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-29</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769466</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-29</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769440</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-29</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769528</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222770104</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769803</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222770161</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222770044</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769886</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769831</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769774</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769652</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769589</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769562</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed>2021-01-30</printed>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769959</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769931</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769745</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769716</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-30</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222769987</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222770015</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>W1</Ref>                    <id>222770132</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-31</created>                    <printed/>                </letter>                <letter>                    <Ref>T2</Ref>                    <id>222767525</id>                    <type>CONTRIBUTION_NOTICE</type>                    <created>2021-01-25</created>                    <printed>2021-01-25</printed>                </letter>            </correspondence>            <breathingSpaceInfo/>        </CONTRIBUTIONS>    </CONTRIBUTIONS_LIST></contribution_file>\";\n    }\n\n    @Test\n    void testProcessRequest(){\n        File f = null;", "        try {\n            LocalDate startDate = getDate(\"01-01-2020\");\n            LocalDate endDate = getDate(\"01-01-2023\");\n            CSVFileService csvServiceMock = mock(CSVFileService.class);\n            when(csvServiceMock.writeContributionToCsv(any(),anyString())).thenReturn(new File(filename));\n            contributionsFileMapper.csvFileService=csvServiceMock;\n            f = contributionsFileMapper.processRequest(new String[]{getXMLString()}, startDate, endDate, filename);\n            softly.assertThat(f).isNotNull();\n            softly.assertThat(f.getName()).isEqualTo(filename);\n            softly.assertAll();\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            closeFile(f);\n        }\n    }\n\n    @Test\n    void testProcessRequestTooNew(){\n        File f = null;", "        try {\n            LocalDate startDate = getDate(\"01-01-2010\");\n            LocalDate endDate = getDate(\"01-01-2011\");\n            CSVFileService csvServiceMock = mock(CSVFileService.class);\n            when(csvServiceMock.writeContributionToCsv(any(),anyString())).thenReturn(new File(filename));\n            contributionsFileMapper.csvFileService=csvServiceMock;\n            f = contributionsFileMapper.processRequest(new String[]{getXMLString()}, startDate, endDate, filename);\n            softly.assertThat(f).isNotNull();\n            softly.assertThat(f.getName()).isEqualTo(filename);\n            softly.assertAll();\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            closeFile(f);\n        }\n    }\n\n    private LocalDate getDate(String date){\n        return LocalDate.parse(date, dateFormat);\n    }\n\n    @Test\n    void testProcessRequestTooOld(){\n        File f = null;", "        try {\n            LocalDate startDate = getDate(\"01-01-2025\");\n            LocalDate endDate = getDate(\"01-01-2025\");\n            CSVFileService csvServiceMock = mock(CSVFileService.class);\n            when(csvServiceMock.writeContributionToCsv(any(),anyString())).thenReturn(new File(filename));\n            contributionsFileMapper.csvFileService=csvServiceMock;\n            f = contributionsFileMapper.processRequest(new String[]{getXMLString()}, startDate, endDate, filename);\n            softly.assertThat(f).isNotNull();\n            softly.assertThat(f.getName()).isEqualTo(filename);\n            softly.assertAll();\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            closeFile(f);\n        }\n    }\n\n    @Test\n    void testProcessRequestFileGeneration(){\n        File f = null;", "        try {\n            LocalDate startDate = getDate(\"01-01-2021\");\n            LocalDate endDate = getDate(\"02-02-2021\");\n            f = contributionsFileMapper.processRequest(new String[]{getXMLString()}, startDate, endDate, filename);\n\n            softly.assertThat(f).isNotNull();\n            String csvOutput = FileUtils.readText(f);\n            // check header present\n            softly.assertThat(csvOutput).contains(\"MAAT ID,Data Feed Type,Assessment Date,CC OutCome Date,Correspondence Sent Date,Rep Order Status Date,Hardship Review Date,Passported Date\");\n            // verify content has been mapped\n            softly.assertThat(csvOutput).contains(\"5635978,update,30/01/2021,25/01/2021,31/01/2021,25/01/2021,,\");\n            softly.assertAll();\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            closeFile(f);\n        }\n    }\n\n    @Test\n    void testProcessMultipleRequestFileGeneration(){\n        File f = null;", "        try {\n            LocalDate startDate = getDate(\"01-01-2021\");\n            LocalDate endDate = getDate(\"02-02-2021\");\n            f = contributionsFileMapper.processRequest(new String[]{getXMLString(),getXMLString()}, startDate, endDate, filename);\n\n            softly.assertThat(f).isNotNull();\n            String csvOutput = FileUtils.readText(f);\n            // check header present\n            softly.assertThat(csvOutput).contains(\"MAAT ID,Data Feed Type,Assessment Date,CC OutCome Date,Correspondence Sent Date,Rep Order Status Date,Hardship Review Date,Passported Date\");\n            // verify content has been mapped\n            softly.assertThat(csvOutput).contains(\"5635978,update,30/01/2021,25/01/2021,31/01/2021,25/01/2021,,\");\n            softly.assertThat(csvOutput).isEqualTo(\"MAAT ID,Data Feed Type,Assessment Date,CC OutCome Date,Correspondence Sent Date,Rep Order Status Date,Hardship Review Date,Passported Date\\n\" +\n                    \"5635978,update,30/01/2021,25/01/2021,31/01/2021,25/01/2021,,\\n\" +\n                    \"5635978,update,30/01/2021,25/01/2021,31/01/2021,25/01/2021,,\");\n            softly.assertAll();\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            closeFile(f);\n        }\n    }\n\n    private void closeFile(File f){", "        if(Objects.nonNull(f)){\n            f.delete();\n        }\n    }\n\n}\n"]}
{"filename": "dces-report-service/src/test/java/uk/gov/justice/laa/crime/dces/report/mapper/FdcFileMapperTest.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.mapper;\n\nimport io.sentry.util.FileUtils;\nimport jakarta.xml.bind.JAXBException;\nimport jakarta.xml.bind.UnmarshalException;\nimport org.assertj.core.api.SoftAssertions;\nimport org.assertj.core.api.junit.jupiter.InjectSoftAssertions;\nimport org.assertj.core.api.junit.jupiter.SoftAssertionsExtension;\nimport org.junit.Ignore;\nimport org.junit.jupiter.api.AfterEach;", "import org.junit.Ignore;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile;\nimport uk.gov.justice.laa.crime.dces.report.service.CSVFileService;\n", "import uk.gov.justice.laa.crime.dces.report.service.CSVFileService;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.math.BigDecimal;\nimport java.text.SimpleDateFormat;\nimport java.util.Objects;\n\nimport static org.junit.Assert.assertThrows;\nimport static org.junit.jupiter.api.Assertions.fail;", "import static org.junit.Assert.assertThrows;\nimport static org.junit.jupiter.api.Assertions.fail;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.ArgumentMatchers.anyString;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@Ignore\n@SpringBootTest\n@ExtendWith(SoftAssertionsExtension.class)", "@SpringBootTest\n@ExtendWith(SoftAssertionsExtension.class)\n@ActiveProfiles(\"test\")\nclass FdcFileMapperTest {\n\n    @InjectSoftAssertions\n    private SoftAssertions softly;\n    @Autowired\n    private FdcFileMapper fdcFileMapper;\n", "    private FdcFileMapper fdcFileMapper;\n\n    private static final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    private static final String filename = \"this_is_a_test.xml\";\n\n    @AfterEach\n    void resetCsvFileService(){\n        fdcFileMapper.csvFileService = new CSVFileService();\n    }\n", "    }\n\n    @Test\n    void testXMLFileMappingValid(){\n        File f = new File(getClass().getClassLoader().getResource(\"fdc/single_fdc.xml\").getFile());\n        FdcFile fdcFile = null;\n        try {\n            fdcFile = fdcFileMapper.mapFdcXMLFileToObject(f);\n        } catch (JAXBException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(fdcFile).isNotNull();\n        softly.assertThat(fdcFile.getFdcList().getFdc().size()).isEqualTo(1);\n\n        var fdcOutput = fdcFile.getFdcList().getFdc().get(0);\n        softly.assertThat(fdcOutput.getMaatId()).isEqualTo(2525925);\n        softly.assertThat(fdcOutput.getSentenceDate().toString()).isEqualTo(\"2016-09-30\");\n        softly.assertThat(fdcOutput.getCalculationDate().toString()).isEqualTo(\"2016-12-22\");\n        softly.assertThat(fdcOutput.getFinalCost()).isEqualTo(new BigDecimal(\"1774.4\"));\n        softly.assertThat(fdcOutput.getLgfsTotal()).isEqualTo(new BigDecimal(\"1180.64\"));\n        softly.assertThat(fdcOutput.getAgfsTotal()).isEqualTo(new BigDecimal(\"593.76\"));\n        softly.assertThat(fdcOutput.getId()).isEqualTo(27783002);\n\n        softly.assertAll();\n    }\n\n    @Test\n    void testXMLStringMappingValid(){\n        FdcFile fdcFile = null;", "        try {\n            fdcFile = fdcFileMapper.mapFdcXmlStringToObject(getXMLString(true));\n        } catch (JAXBException | IOException e) {\n            fail(\"Unexpected Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(fdcFile).isNotNull();\n        softly.assertThat(fdcFile.getFdcList().getFdc().size()).isEqualTo(1);\n\n        var fdcOutput = fdcFile.getFdcList().getFdc().get(0);\n        softly.assertThat(fdcOutput.getMaatId()).isEqualTo(2525925);\n        softly.assertThat(fdcOutput.getSentenceDate().toString()).isEqualTo(\"2016-09-30\");\n        softly.assertThat(fdcOutput.getCalculationDate().toString()).isEqualTo(\"2016-12-22\");\n        softly.assertThat(fdcOutput.getFinalCost()).isEqualTo(new BigDecimal(\"1774.4\"));\n        softly.assertThat(fdcOutput.getLgfsTotal()).isEqualTo(new BigDecimal(\"1180.64\"));\n        softly.assertThat(fdcOutput.getAgfsTotal()).isEqualTo(new BigDecimal(\"593.76\"));\n        softly.assertThat(fdcOutput.getId()).isEqualTo(27783002);\n\n        softly.assertAll();\n    }\n\n    @Test\n    void testMultipleFileFdcEntries(){\n        File f = new File(getClass().getClassLoader().getResource(\"fdc/multiple_fdc.xml\").getFile());\n        FdcFile fdcFile = null;", "        try {\n            fdcFile = fdcFileMapper.mapFdcXMLFileToObject(f);\n        } catch (JAXBException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(fdcFile.getFdcList().getFdc().size()).isEqualTo(6);\n        softly.assertAll();\n    }\n\n    @Test\n    void testMultipleStringFdcEntries(){\n        FdcFile fdcFile = null;", "        try {\n            fdcFile = fdcFileMapper.mapFdcXmlStringToObject(getXMLString(false));\n        } catch (JAXBException | IOException e) {\n            fail(\"Unexpected exception occurred in mapping test:\"+e.getMessage());\n        }\n        softly.assertThat(fdcFile.getFdcList().getFdc().size()).isEqualTo(6);\n        softly.assertAll();\n    }\n\n    @Test\n    void testInvalidXML(){\n        File f = new File(getClass().getClassLoader().getResource(\"fdc/invalid_fdc.xml\").getFile());\n        assertThrows(UnmarshalException.class, () -> {fdcFileMapper.mapFdcXMLFileToObject(f);});\n    }\n\n    String getXMLString(boolean wantsSingle) throws IOException {\n        File f = new File(getClass().getClassLoader().getResource(wantsSingle?\"fdc/single_fdc.xml\":\"fdc/multiple_fdc.xml\").getFile());\n        return FileUtils.readText(f);\n    }\n\n    @Test\n    void testProcessRequest(){\n        File f=null;", "        try {\n            CSVFileService csvServiceMock = mock(CSVFileService.class);\n            when(csvServiceMock.writeFdcFileListToCsv(any(),anyString())).thenReturn(new File(filename));\n            fdcFileMapper.csvFileService=csvServiceMock;\n            f = fdcFileMapper.processRequest(new String[]{getXMLString(false)}, filename);\n            softly.assertThat(f).isNotNull();\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            softly.assertAll();\n            closeFile(f);\n        }\n    }\n    @Test\n    void testProcessRequestFileGeneration(){\n        File input = new File(getClass().getClassLoader().getResource(\"fdc/multiple_fdc.xml\").getFile());\n        File f = null;", "        try {\n            f = fdcFileMapper.processRequest(new String[]{FileUtils.readText(input)}, filename);\n\n            softly.assertThat(f).isNotNull();\n            String csvOutput = FileUtils.readText(f);\n            // check header present\n            softly.assertThat(csvOutput).contains(\"MAAT ID, Sentence Date, Calculation Date, Final Cost, LGFS Cost, AGFS COST\");\n            // verify content has been mapped\n            softly.assertThat(csvOutput).isEqualTo(\"MAAT ID, Sentence Date, Calculation Date, Final Cost, LGFS Cost, AGFS COST\\n\" +\n                    \"2525925,30/09/2016,22/12/2016,1774.4,1180.64,593.76\\n\" +\n                    \"2492027,04/02/2011,04/07/2018,1479.23,569.92,909.31\\n\" +\n                    \"5275089,19/08/2016,02/09/2016,2849.95,1497.6,1352.35\\n\" +\n                    \"5427879,23/08/2016,06/09/2016,2252.6,937.86,1314.74\\n\" +\n                    \"5438043,25/08/2016,19/12/2016,1969.47,1085.5,883.97\\n\" +\n                    \"4971278,14/10/2016,11/01/2017,3226.01,1327.99,1898.02\");\n        } catch (JAXBException | IOException e) {\n            fail(\"Exception occurred in mapping test:\"+e.getMessage());\n        } finally {\n            softly.assertAll();\n            closeFile(f);\n        }\n    }\n\n    private void closeFile(File f){", "        if(Objects.nonNull(f)){\n            f.delete();\n        }\n    }\n\n\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/DcesReportServiceApplication.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.properties.ConfigurationPropertiesScan;\n\n\n@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class DcesReportServiceApplication {\n", "@ConfigurationPropertiesScan\npublic class DcesReportServiceApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DcesReportServiceApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/maatapi/MaatApiWebClientFactory.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi;\n\n//import io.jsonwebtoken.Jwts;\n//import io.jsonwebtoken.SignatureAlgorithm;\n//import io.jsonwebtoken.io.Decoders;\n//import io.jsonwebtoken.security.Keys;\nimport io.netty.resolver.DefaultAddressResolverGroup;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;", "import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.HttpStatusCode;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.client.reactive.ReactorClientHttpConnector;\nimport org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\nimport org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;", "import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\nimport org.springframework.security.oauth2.client.web.reactive.function.client.ServletOAuth2AuthorizedClientExchangeFilterFunction;\nimport org.springframework.web.client.HttpServerErrorException;\nimport org.springframework.web.reactive.function.client.*;\nimport reactor.netty.http.client.HttpClient;\nimport reactor.netty.resources.ConnectionProvider;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.config.ServicesConfiguration;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\n\nimport java.time.Duration;", "\nimport java.time.Duration;\nimport java.util.UUID;\n\n@Slf4j\n@Configuration\npublic class MaatApiWebClientFactory {\n    private static final String LAA_TRANSACTION_ID = \"LAA-TRANSACTION-ID\";\n//    private static final String AUTHORIZATION = \"Authorization\";\n//    private static final long TOKEN_LIFETIME_DURATION = Duration.ofSeconds(60).toMillis();\n\n    @Bean", "    public WebClient maatApiWebClient(\n            ServicesConfiguration servicesConfiguration,\n            ClientRegistrationRepository clientRegistrations,  OAuth2AuthorizedClientRepository authorizedClients\n    ) {\n\n        ConnectionProvider provider = ConnectionProvider.builder(\"custom\")\n                .maxConnections(500)\n                .maxIdleTime(Duration.ofSeconds(20))\n                .maxLifeTime(Duration.ofSeconds(60))\n                .pendingAcquireTimeout(Duration.ofSeconds(60))\n                .evictInBackground(Duration.ofSeconds(120))\n                .build();\n\n        WebClient.Builder clientBuilder = WebClient.builder()\n            .baseUrl(servicesConfiguration.getMaatApi().getBaseUrl())\n            .defaultHeader(LAA_TRANSACTION_ID, UUID.randomUUID().toString())\n            .filter(errorResponse())\n            .clientConnector(new ReactorClientHttpConnector(\n                HttpClient.create(provider)\n                    .resolver(DefaultAddressResolverGroup.INSTANCE)\n                    .compress(true)\n                    .responseTimeout(Duration.ofSeconds(30))\n                )\n            )\n            .defaultHeader(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON_VALUE)\n            .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);\n", "        if (servicesConfiguration.getMaatApi().isOAuthEnabled()) {\n            ServletOAuth2AuthorizedClientExchangeFilterFunction oauth =\n                    new ServletOAuth2AuthorizedClientExchangeFilterFunction(clientRegistrations, authorizedClients);\n            oauth.setDefaultClientRegistrationId(servicesConfiguration.getMaatApi().getRegistrationId());\n\n//            clientBuilder.defaultHeader(\n//                    AUTHORIZATION,\n//                    generateJWTForOAuth2MattApi(\n//                            \"lcra7ktupqeooja6irqu3b4gqcmvml5coo5pnb7l1sf0uca78cv\",\n//                            \"7p9a0fi8g9bj9d5ncapsdt5kl9\")\n//            );\n\n            clientBuilder.filter(oauth);\n        }\n\n        final ExchangeStrategies strategies = ExchangeStrategies.builder()\n            .codecs(codecs -> codecs.defaultCodecs().maxInMemorySize(\n                convertMaxBufferSize(servicesConfiguration.getMaatApi().getMaxBufferSize())\n                ))\n            .build();\n        clientBuilder.exchangeStrategies(strategies);\n\n        return clientBuilder.build();\n    }\n\n    private ExchangeFilterFunction errorResponse() {\n        return ExchangeFilterFunctions.statusError(\n                HttpStatusCode::isError, clientResponse -> {\n                    HttpStatus httpStatus =  HttpStatus.resolve(clientResponse.statusCode().value());\n                    assert httpStatus != null;\n                    String errorMessage = String.format(\"Received error %s due to %s\",\n                            clientResponse.statusCode(), httpStatus.getReasonPhrase()\n                    );\n", "                    if (httpStatus.is5xxServerError()) {\n                        return new HttpServerErrorException(httpStatus, errorMessage);\n                    }\n\n                    if (httpStatus.equals(HttpStatus.NOT_FOUND)) {\n                        return WebClientResponseException.create(\n                                httpStatus.value(), httpStatus.getReasonPhrase(),\n                                null, null, null);\n                    }\n\n                    return new MaatApiClientException(errorMessage);\n                }\n        );\n    }\n\n    private static int convertMaxBufferSize(int megaBytes) {\n        return megaBytes * 1024 * 1024;\n    }\n\n//    private static String generateJWTForOAuth2MattApi(String clientSecret, String issuer) {\n//        return \"Bearer \" + Jwts.builder()\n//                .setIssuer(issuer)\n//                .setIssuedAt(new Date(System.currentTimeMillis()))\n//                .setExpiration(new Date(System.currentTimeMillis() + TOKEN_LIFETIME_DURATION))\n//                .signWith(Keys.hmacShaKeyFor(Decoders.BASE64.decode(clientSecret))\n//                        , SignatureAlgorithm.HS256\n//                )\n//                .compact();\n//    }\n}"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/maatapi/MaatApiClientFactory.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.reactive.function.client.support.WebClientAdapter;\nimport org.springframework.web.service.invoker.HttpServiceProxyFactory;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.client.MaatApiClient;\n\npublic class MaatApiClientFactory {\n\n    private MaatApiClientFactory(){\n        throw new UnsupportedOperationException(\"Utility Class\");\n    }\n\n    @Bean\n    public static <T extends MaatApiClient> T maatApiClient(WebClient maatApiWebClient, Class<T> returnClass) {\n        HttpServiceProxyFactory httpServiceProxyFactory =\n                HttpServiceProxyFactory.builder(WebClientAdapter.forClient(maatApiWebClient))\n                        .build();\n        return httpServiceProxyFactory.createClient(returnClass);\n    }\n}\n", "public class MaatApiClientFactory {\n\n    private MaatApiClientFactory(){\n        throw new UnsupportedOperationException(\"Utility Class\");\n    }\n\n    @Bean\n    public static <T extends MaatApiClient> T maatApiClient(WebClient maatApiWebClient, Class<T> returnClass) {\n        HttpServiceProxyFactory httpServiceProxyFactory =\n                HttpServiceProxyFactory.builder(WebClientAdapter.forClient(maatApiWebClient))\n                        .build();\n        return httpServiceProxyFactory.createClient(returnClass);\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/maatapi/config/ServicesConfiguration.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi.config;\n\nimport jakarta.validation.constraints.NotNull;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n", "\n\n@Data\n@Configuration\n@ConfigurationProperties(prefix = \"services\")\npublic class ServicesConfiguration {\n\n    private static final String REGISTERED_ID = \"maatapi\";\n\n    @NotNull\n    private MaatApi maatApi;\n\n    @Data\n    @AllArgsConstructor\n    @NoArgsConstructor", "    public static class MaatApi {\n\n        @NotNull\n        private String baseUrl;\n\n        @NotNull\n        private String registrationId;\n\n        private boolean oAuthEnabled;\n\n        private int maxBufferSize = 1;\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/maatapi/model/MaatApiResponseModel.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi.model;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\n@JsonPropertyOrder({\n        \"id\",\n        \"totalFiles\"\n})\npublic class MaatApiResponseModel {\n    private Integer id;\n    private Integer totalFiles;\n\n    public MaatApiResponseModel() {\n    }\n\n    public MaatApiResponseModel(Integer id, Integer totalFiles) {\n        this.id = id;\n        this.totalFiles = totalFiles;\n    }\n", "        \"totalFiles\"\n})\npublic class MaatApiResponseModel {\n    private Integer id;\n    private Integer totalFiles;\n\n    public MaatApiResponseModel() {\n    }\n\n    public MaatApiResponseModel(Integer id, Integer totalFiles) {\n        this.id = id;\n        this.totalFiles = totalFiles;\n    }\n", "    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public Integer getTotalFiles() {\n        return totalFiles;\n    }\n", "    public Integer getTotalFiles() {\n        return totalFiles;\n    }\n\n    public void setTotalFiles(Integer totalFiles) {\n        this.totalFiles = totalFiles;\n    }\n\n    @Override\n    public String toString() {\n        return \"MaatApiResponse{\" +\n                \"id=\" + id +\n                \", totalFiles=\" + totalFiles +\n                '}';\n    }\n}", "    public String toString() {\n        return \"MaatApiResponse{\" +\n                \"id=\" + id +\n                \", totalFiles=\" + totalFiles +\n                '}';\n    }\n}"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/maatapi/exception/MaatApiClientException.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi.exception;\n\npublic class MaatApiClientException extends RuntimeException {\n\n    public MaatApiClientException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/maatapi/client/MaatApiClient.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.maatapi.client;\n\nimport org.springframework.web.service.annotation.GetExchange;\nimport uk.gov.justice.laa.crime.dces.report.model.ContributionFilesResponse;\n\n\npublic interface MaatApiClient {\n    String DEFAULT_DATE_FORMAT = \"dd.MM.yyyy\";\n\n    @GetExchange(\"/get\")\n    ContributionFilesResponse sendRequest();\n}"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/model/CSVDataLine.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Builder\n@Data\n@AllArgsConstructor", "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CSVDataLine {\n\n    String maatId;\n    String dataFeedType;\n    String assessmentDate;\n    String ccOutcomeDate;\n    String correspondenceSentDate;\n    String repOrderStatusDate;\n    String hardshipReviewDate;\n    String passportedDate;\n", "    public String toString(){\n        return maatId + \",\" +\n                dataFeedType + \",\" +\n                assessmentDate + \",\" +\n                ccOutcomeDate + \",\" +\n                correspondenceSentDate + \",\" +\n                repOrderStatusDate + \",\" +\n                hardshipReviewDate + \",\" +\n                passportedDate;\n\n\n    }\n\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/model/ContributionFilesResponse.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport java.util.List;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ContributionFilesResponse {\n    List<String> files;\n}\n", "@AllArgsConstructor\n@NoArgsConstructor\npublic class ContributionFilesResponse {\n    List<String> files;\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/model/FdcFilesResponse.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.model;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n\n@Data\n@AllArgsConstructor", "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class FdcFilesResponse {\n    List<String> files;\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/controller/ContributionsReportController.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.controller;\n\nimport io.swagger.v3.oas.annotations.Operation;\nimport io.swagger.v3.oas.annotations.media.Content;\nimport io.swagger.v3.oas.annotations.media.Schema;\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\nimport io.swagger.v3.oas.annotations.tags.Tag;\nimport jakarta.xml.bind.JAXBException;\nimport lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;", "import lombok.AllArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ProblemDetail;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport uk.gov.justice.laa.crime.dces.report.service.ContributionFilesService;\n", "import uk.gov.justice.laa.crime.dces.report.service.ContributionFilesService;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Slf4j\n@RestController\n@AllArgsConstructor", "@RestController\n@AllArgsConstructor\n@RequestMapping(\"/api/internal/v1/dces/report\")\n@Tag(name = \"DCES Contribution files report\", description = \"Rest API to retrieve and generate contribution files report\")\npublic class ContributionsReportController {\n\n    private ContributionFilesService contributionFilesService;\n\n    @GetMapping(value = \"/contributions/{start}/{finish}\")\n    @Operation(description = \"Retrieve information regarding contribution files sent during the given period and generate a report\")\n    @ApiResponse(responseCode = \"200\")\n    @ApiResponse(responseCode = \"400\",\n            description = \"Bad request.\",\n            content = @Content(mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE,\n                    schema = @Schema(implementation = ProblemDetail.class)\n            )\n    )\n    @ApiResponse(responseCode = \"500\",\n            description = \"Server Error.\",\n            content = @Content(mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE,\n                    schema = @Schema(implementation = ProblemDetail.class)\n            )\n    )", "    public File getContributionFiles(@PathVariable(\"start\") LocalDate start, @PathVariable(\"finish\") LocalDate finish) throws JAXBException, IOException {\n        List<String> contributionFiles = contributionFilesService.getFiles(start, finish);\n        String reportFileName = contributionFilesService.getFileName(start, finish);\n        return contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/client/ContributionFilesClient.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.client;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.service.annotation.GetExchange;\nimport org.springframework.web.service.annotation.HttpExchange;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.MaatApiClientFactory;", "import org.springframework.web.service.annotation.HttpExchange;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.MaatApiClientFactory;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.client.MaatApiClient;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\n\n@HttpExchange(\"/debt-collection-enforcement\")\npublic interface ContributionFilesClient extends MaatApiClient {\n\n    @GetExchange(\"/contributions?fromDate={startDate}&toDate={finishDate}\")\n    List<String> getContributions(\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate startDate,\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate finishDate);\n\n\n    @Configuration\n    class ContributionFilesClientFactory {\n\n        @Bean", "@HttpExchange(\"/debt-collection-enforcement\")\npublic interface ContributionFilesClient extends MaatApiClient {\n\n    @GetExchange(\"/contributions?fromDate={startDate}&toDate={finishDate}\")\n    List<String> getContributions(\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate startDate,\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate finishDate);\n\n\n    @Configuration\n    class ContributionFilesClientFactory {\n\n        @Bean", "        public ContributionFilesClient getContributionFilesClient(WebClient maatApiWebClient) {\n            return MaatApiClientFactory.maatApiClient(maatApiWebClient, ContributionFilesClient.class);\n        }\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/client/FdcFilesClient.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.client;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport org.springframework.web.service.annotation.GetExchange;\nimport org.springframework.web.service.annotation.HttpExchange;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.MaatApiClientFactory;", "import org.springframework.web.service.annotation.HttpExchange;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.MaatApiClientFactory;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.client.MaatApiClient;\nimport java.time.LocalDate;\nimport java.util.List;\n\n\n@HttpExchange(\"/debt-collection-enforcement\")\npublic interface FdcFilesClient extends MaatApiClient {\n\n    @GetExchange(url = \"/final-defence-cost?fromDate={startDate}&toDate={endDate}\")\n    List<String> getContributions(\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate startDate,\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate endDate);\n\n    @Configuration\n    class FdcFilesClientFactory {\n\n        @Bean", "public interface FdcFilesClient extends MaatApiClient {\n\n    @GetExchange(url = \"/final-defence-cost?fromDate={startDate}&toDate={endDate}\")\n    List<String> getContributions(\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate startDate,\n            @PathVariable @DateTimeFormat(pattern = DEFAULT_DATE_FORMAT) LocalDate endDate);\n\n    @Configuration\n    class FdcFilesClientFactory {\n\n        @Bean", "        public FdcFilesClient getFdcFilesClient(WebClient maatApiWebClient) {\n            return MaatApiClientFactory.maatApiClient(maatApiWebClient, FdcFilesClient.class);\n        }\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/service/ContributionFilesService.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport io.github.resilience4j.retry.annotation.Retry;\nimport jakarta.xml.bind.JAXBException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport uk.gov.justice.laa.crime.dces.report.client.ContributionFilesClient;\nimport uk.gov.justice.laa.crime.dces.report.mapper.ContributionsFileMapper;\n", "import uk.gov.justice.laa.crime.dces.report.mapper.ContributionsFileMapper;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.List;\n\n\n@Service\n@RequiredArgsConstructor", "@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class ContributionFilesService implements DcesReportFileService {\n    private static final String SERVICE_NAME = \"dcesReportContributions\";\n    public static final String FILE_NAME_TEMPLATE = \"Contributions_%s_%s\";\n\n    private final ContributionFilesClient contributionFilesClient;\n\n    private final ContributionsFileMapper contributionFilesMapper;\n\n\n    @Retry(name = SERVICE_NAME)\n    public List<String> getFiles(LocalDate start, LocalDate finish) {\n        log.info(\"Start - call MAAT API to collect contribution files date between {} and {}\", start.toString(), finish.toString());\n        return contributionFilesClient.getContributions(start, finish);\n\n    }\n", "    public File processFiles(List<String> files, LocalDate start, LocalDate finish, String fileName) throws JAXBException, IOException {\n        return contributionFilesMapper.processRequest(files.toArray(new String[0]), start, finish, fileName);\n    }\n\n    public String getFileName(LocalDate start, LocalDate finish) {\n        return String.format(FILE_NAME_TEMPLATE, start, finish);\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/service/DcesReportFileService.java", "chunked_list": ["/*\n    This interface defines a contract for retrieving records and or files held within MAAT\n    and accessible via its API and integrating the appropriate webclient.\n */\npackage uk.gov.justice.laa.crime.dces.report.service;\n\nimport java.time.LocalDate;\nimport java.util.List;\n\npublic interface DcesReportFileService {\n    List<String> getFiles(LocalDate start, LocalDate end);\n\n    String getFileName(LocalDate start, LocalDate finish);\n}\n", "\npublic interface DcesReportFileService {\n    List<String> getFiles(LocalDate start, LocalDate end);\n\n    String getFileName(LocalDate start, LocalDate finish);\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/service/CSVFileService.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile.FdcList.Fdc;\nimport uk.gov.justice.laa.crime.dces.report.model.CSVDataLine;\nimport uk.gov.justice.laa.crime.dces.utils.DateUtils;\n\nimport javax.xml.datatype.XMLGregorianCalendar;", "\nimport javax.xml.datatype.XMLGregorianCalendar;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.attribute.FileAttribute;\nimport java.nio.file.attribute.PosixFilePermission;\nimport java.nio.file.attribute.PosixFilePermissions;\nimport java.util.List;", "import java.nio.file.attribute.PosixFilePermissions;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\n\n@Service\n@RequiredArgsConstructor\npublic class CSVFileService {\n\n\n    public static final String FDC_FORMAT = \"%s\";", "    public static final String FDC_FORMAT = \"%s\";\n    public static final String FDC_FORMAT_COMMA = \"%s,\";\n    public static final String EMPTY_CHARACTER = \"\";\n\n    public File writeContributionToCsv(List<CSVDataLine> contributionData, File targetFile) throws IOException {\n        // if file does not exist, we need to add the headers.\n        if(targetFile.length()==0) {\n            contributionData.add(0, getContributionsHeader());\n        }\n        // filewriter initialise\n        try (FileWriter fw = new FileWriter(targetFile, true)){", "            for (CSVDataLine csvDataLine : contributionData) {\n                writeContributionLine(fw, csvDataLine);\n            }\n        } catch (IOException e) {\n            throw new IOException(e);\n        }\n        return targetFile;\n    }\n\n    public File writeContributionToCsv(List<CSVDataLine> contributionData, String fileName) throws IOException {\n        File targetFile = createCsvFile(fileName);\n        return writeContributionToCsv(contributionData, targetFile);\n    }\n", "    public File writeContributionToCsv(List<CSVDataLine> contributionData, String fileName) throws IOException {\n        File targetFile = createCsvFile(fileName);\n        return writeContributionToCsv(contributionData, targetFile);\n    }\n\n    public void writeFdcToCsv(FdcFile fdcFile, File targetFile) throws IOException {\n        List<Fdc> fdcList = fdcFile.getFdcList().getFdc();\n        // filewriter initialise\n        try (FileWriter fw = new FileWriter(targetFile, true)) {\n            if (targetFile.length() == 0) {\n                writeFdcHeader(fw);\n            }", "            if (targetFile.length() == 0) {\n                writeFdcHeader(fw);\n            }\n            for (Fdc fdcLine : fdcList) {\n                writeFdcLine(fw, fdcLine);\n            }\n        } catch (IOException e) {\n            throw new IOException(e);\n        }\n    }\n", "    public File writeFdcFileListToCsv(List<FdcFile> fdcFiles, String fileName) throws IOException {\n        File targetFile = createCsvFile(fileName);\n        for(FdcFile file: fdcFiles){\n            writeFdcToCsv(file, targetFile);\n        }\n        return targetFile;\n    }\n\n    private CSVDataLine getContributionsHeader(){\n        return CSVDataLine.builder()\n                .maatId(\"MAAT ID\")\n                .dataFeedType(\"Data Feed Type\")\n                .assessmentDate(\"Assessment Date\")\n                .ccOutcomeDate(\"CC OutCome Date\")\n                .correspondenceSentDate(\"Correspondence Sent Date\")\n                .repOrderStatusDate(\"Rep Order Status Date\")\n                .hardshipReviewDate(\"Hardship Review Date\")\n                .passportedDate(\"Passported Date\")\n                .build();\n    }\n\n    private void writeFdcHeader(FileWriter fw) throws IOException {\n        String headerLine = \"MAAT ID, Sentence Date, Calculation Date, Final Cost, LGFS Cost, AGFS COST\"+System.lineSeparator();\n        fw.append(headerLine);\n    }\n\n    private void writeContributionLine(FileWriter fw, CSVDataLine dataLine) throws IOException {\n        String lineOutput = dataLine.toString()+System.lineSeparator();\n        fw.append(lineOutput);\n    }\n\n    private void writeFdcLine(FileWriter fw, Fdc fdcLine) throws IOException {\n        fw.append(fdcLineBuilder(fdcLine));\n    }\n\n    private String fdcLineBuilder(Fdc fdcLine){\n        StringBuilder sb = new StringBuilder();\n        sb.append(getFdcValue(fdcLine.getMaatId(),true));\n        sb.append(getFdcValue(fdcLine.getSentenceDate()));\n        sb.append(getFdcValue(fdcLine.getCalculationDate()));\n        sb.append(getFdcValue(fdcLine.getFinalCost(),true));\n        sb.append(getFdcValue(fdcLine.getLgfsTotal(),true));\n        sb.append(getFdcValue(fdcLine.getAgfsTotal(),false));\n        sb.append(System.lineSeparator());\n        return sb.toString();\n    }\n\n    private String getFdcValue(Object o, boolean insertComma){\n        return String.format( (insertComma?FDC_FORMAT_COMMA:FDC_FORMAT),(Objects.nonNull(o)?o:EMPTY_CHARACTER));\n    }\n\n    private String getFdcValue(XMLGregorianCalendar o){\n        return ( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));\n    }\n\n    private File createCsvFile(String fileName) throws IOException {\n        FileAttribute<Set<PosixFilePermission>> attr = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(\"rwx------\"));\n        return Files.createTempFile(fileName, \".csv\", attr).toFile();\n    }\n\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/service/DcesReportService.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport jakarta.xml.bind.JAXBException;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;\n\npublic interface DcesReportService {\n\n    File getContributionsReport(LocalDate start, LocalDate end) throws JAXBException, IOException;\n\n    File getFdcReport(LocalDate start, LocalDate end) throws JAXBException, IOException;\n}\n", "public interface DcesReportService {\n\n    File getContributionsReport(LocalDate start, LocalDate end) throws JAXBException, IOException;\n\n    File getFdcReport(LocalDate start, LocalDate end) throws JAXBException, IOException;\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/service/DcesReportServiceImpl.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport jakarta.xml.bind.JAXBException;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;", "import java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class DcesReportServiceImpl implements DcesReportService {\n\n    @Autowired\n    private FdcFilesService fdcFilesService;\n\n    @Autowired\n    private ContributionFilesService contributionFilesService;\n", "    public File getContributionsReport(LocalDate start, LocalDate end) throws JAXBException, IOException {\n        List<String> contributionFiles = contributionFilesService.getFiles(start, end);\n        // @TODO handle empty list\n\n        return contributionFilesService.processFiles(\n                contributionFiles,\n                start,\n                end,\n                contributionFilesService.getFileName(start, end)\n        );\n    }\n", "    public File getFdcReport(LocalDate start, LocalDate end) throws JAXBException, IOException {\n        List<String> contributionFiles = fdcFilesService.getFiles(start, end);\n        // @TODO handle empty list\n        return fdcFilesService.processFiles(contributionFiles, start, end);\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/service/FdcFilesService.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.service;\n\nimport io.github.resilience4j.retry.annotation.Retry;\nimport jakarta.xml.bind.JAXBException;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Service;\nimport uk.gov.justice.laa.crime.dces.report.client.FdcFilesClient;\nimport uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\nimport uk.gov.justice.laa.crime.dces.report.mapper.FdcFileMapper;", "import uk.gov.justice.laa.crime.dces.report.maatapi.exception.MaatApiClientException;\nimport uk.gov.justice.laa.crime.dces.report.mapper.FdcFileMapper;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.util.List;\n\n\n@Service", "\n@Service\n@RequiredArgsConstructor\n@Slf4j\npublic class FdcFilesService implements DcesReportFileService {\n    private static final String SERVICE_NAME = \"dcesReportFdc\";\n    private static final String FILE_NAME_TEMPLATE = \"FDC_%s_%s\";\n\n    private final FdcFilesClient fdcFilesClient;\n\n    private final FdcFileMapper fdcFileMapper;\n\n    @Retry(name = SERVICE_NAME)\n    public List<String> getFiles(LocalDate start, LocalDate end) {", "        if (end.isBefore(start)) {\n            String message = String.format(\"invalid time range %s is before %s\", end, start);\n            throw new MaatApiClientException(message);\n        }\n        log.info(\"Start - call MAAT API to collect FDC files, between {} and {}\", start, end);\n        return fdcFilesClient.getContributions(start, end);\n    }\n\n    public File processFiles(List<String> files, LocalDate start, LocalDate finish) throws JAXBException, IOException {\n        return fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));\n    }\n", "    public File processFiles(List<String> files, LocalDate start, LocalDate finish) throws JAXBException, IOException {\n        return fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));\n    }\n\n    public String getFileName(LocalDate start, LocalDate finish) {\n        return String.format(FILE_NAME_TEMPLATE, start, finish);\n    }\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/mapper/FdcFileMapper.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.mapper;\n\n\nimport jakarta.xml.bind.JAXBContext;\nimport jakarta.xml.bind.JAXBException;\nimport jakarta.xml.bind.Unmarshaller;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile;\nimport uk.gov.justice.laa.crime.dces.report.service.CSVFileService;", "import uk.gov.justice.laa.crime.dces.report.model.generated.FdcFile;\nimport uk.gov.justice.laa.crime.dces.report.service.CSVFileService;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Service\npublic class FdcFileMapper {\n\n    private Unmarshaller unmarshaller;\n    protected CSVFileService csvFileService;\n\n    @Autowired", "\n@Service\npublic class FdcFileMapper {\n\n    private Unmarshaller unmarshaller;\n    protected CSVFileService csvFileService;\n\n    @Autowired\n    public FdcFileMapper fdcFileMapper() throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(FdcFile.class);\n        unmarshaller = jaxbContext.createUnmarshaller();\n        this.csvFileService = new CSVFileService();\n        return this;\n    }\n", "    public FdcFileMapper fdcFileMapper() throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(FdcFile.class);\n        unmarshaller = jaxbContext.createUnmarshaller();\n        this.csvFileService = new CSVFileService();\n        return this;\n    }\n\n    public File processRequest(String[] xmlData, String filename) throws JAXBException, IOException {\n        List<FdcFile> csvLineList = new ArrayList<>();\n        for (String xmlString: xmlData) {\n            csvLineList.add(mapFdcXmlStringToObject(xmlString));\n        }\n        return csvFileService.writeFdcFileListToCsv(csvLineList, filename);\n    }\n", "        for (String xmlString: xmlData) {\n            csvLineList.add(mapFdcXmlStringToObject(xmlString));\n        }\n        return csvFileService.writeFdcFileListToCsv(csvLineList, filename);\n    }\n\n    public FdcFile mapFdcXmlStringToObject(String xmlString) throws JAXBException {\n        StringReader sr = new StringReader(xmlString);\n        return (FdcFile) unmarshaller.unmarshal(sr);\n    }\n", "    public FdcFile mapFdcXMLFileToObject(File xmlFile) throws JAXBException {\n        return (FdcFile) unmarshaller.unmarshal(xmlFile);\n    }\n\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/report/mapper/ContributionsFileMapper.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.report.mapper;\n\nimport jakarta.xml.bind.JAXBContext;\nimport jakarta.xml.bind.JAXBException;\nimport jakarta.xml.bind.Unmarshaller;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile.CONTRIBUTIONSLIST.CONTRIBUTIONS;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile.CONTRIBUTIONSLIST.CONTRIBUTIONS.CcOutcomes.CcOutcome;", "import uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile.CONTRIBUTIONSLIST.CONTRIBUTIONS;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile.CONTRIBUTIONSLIST.CONTRIBUTIONS.CcOutcomes.CcOutcome;\nimport uk.gov.justice.laa.crime.dces.report.model.generated.ContributionFile.CONTRIBUTIONSLIST.CONTRIBUTIONS.Correspondence.Letter;\nimport uk.gov.justice.laa.crime.dces.report.model.CSVDataLine;\nimport uk.gov.justice.laa.crime.dces.report.service.CSVFileService;\nimport uk.gov.justice.laa.crime.dces.utils.DateUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.StringReader;", "import java.io.IOException;\nimport java.io.StringReader;\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\n@Service\npublic class ContributionsFileMapper {\n\n    private Unmarshaller unmarshaller;\n    protected CSVFileService csvFileService;\n    private static final String EMPTY_CHARACTER=\"\";\n\n\n    @Autowired", "public class ContributionsFileMapper {\n\n    private Unmarshaller unmarshaller;\n    protected CSVFileService csvFileService;\n    private static final String EMPTY_CHARACTER=\"\";\n\n\n    @Autowired\n    public ContributionsFileMapper contributionsFileMapper() throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(ContributionFile.class);\n        unmarshaller = jaxbContext.createUnmarshaller();\n        this.csvFileService = new CSVFileService();\n        return this;\n    }\n", "    public ContributionsFileMapper contributionsFileMapper() throws JAXBException {\n        JAXBContext jaxbContext = JAXBContext.newInstance(ContributionFile.class);\n        unmarshaller = jaxbContext.createUnmarshaller();\n        this.csvFileService = new CSVFileService();\n        return this;\n    }\n\n    public File processRequest(String[] xmlData, LocalDate startDate, LocalDate endDate, String filename) throws IOException, JAXBException {\n        List<CSVDataLine> csvLineList = new ArrayList<>();\n        for (String xmlString: xmlData) {\n            processXMLFile(xmlString, startDate, endDate, csvLineList);\n        }\n        return csvFileService.writeContributionToCsv(csvLineList, filename);\n    }\n\n    private void processXMLFile(String xmlData, LocalDate startDate, LocalDate endDate, List<CSVDataLine> csvLineList) throws JAXBException {\n        ContributionFile contributionFile = mapContributionsXmlStringToObject(xmlData);", "        for (String xmlString: xmlData) {\n            processXMLFile(xmlString, startDate, endDate, csvLineList);\n        }\n        return csvFileService.writeContributionToCsv(csvLineList, filename);\n    }\n\n    private void processXMLFile(String xmlData, LocalDate startDate, LocalDate endDate, List<CSVDataLine> csvLineList) throws JAXBException {\n        ContributionFile contributionFile = mapContributionsXmlStringToObject(xmlData);\n        for(CONTRIBUTIONS contribution : contributionFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS()){\n            csvLineList.add(buildCSVDataLine(contribution, startDate, endDate));\n        }\n\n    }\n", "        for(CONTRIBUTIONS contribution : contributionFile.getCONTRIBUTIONSLIST().getCONTRIBUTIONS()){\n            csvLineList.add(buildCSVDataLine(contribution, startDate, endDate));\n        }\n\n    }\n\n    public ContributionFile mapContributionsXMLFileToObject(File xmlFile) throws JAXBException {\n        return (ContributionFile) unmarshaller.unmarshal(xmlFile);\n    }\n\n    public ContributionFile mapContributionsXmlStringToObject(String xmlString) throws JAXBException {\n        StringReader sr = new StringReader(xmlString);\n        return (ContributionFile) unmarshaller.unmarshal(sr);\n    }\n", "    public ContributionFile mapContributionsXmlStringToObject(String xmlString) throws JAXBException {\n        StringReader sr = new StringReader(xmlString);\n        return (ContributionFile) unmarshaller.unmarshal(sr);\n    }\n\n    public CSVDataLine buildCSVDataLine(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){\n        // Business logic inside several of these. Go to methods for details.\n        return CSVDataLine.builder()\n                .maatId(getMaatId(contribution))\n                .dataFeedType(getDataFeed(contribution))\n                // Uses start and end date to control visibility. If a date entry is outside of the range, it is not used.\n                // E.g. hardshipReviewDate is 01/01/2023, and the start/end dates are 01/10/2022 and 01/11/2022, then it\n                // would return \"\", as it lies outside the values.\n                .assessmentDate(getAssessmentDate(contribution, startDate, endDate))\n                .repOrderStatusDate(getRepOrderStatusDate(contribution, startDate, endDate))\n                .hardshipReviewDate(getHardshipReviewDate(contribution, startDate, endDate))\n                .passportedDate(getPassportedDate(contribution, startDate, endDate))\n                // filter list of values to only ones where date is in range given.\n                // Then take the date from the very first one in the list, if exists.\n                // Otherwise returns \"\"\n                .ccOutcomeDate(getOutcomeDate(contribution, startDate, endDate))\n                .correspondenceSentDate(getCorrespondenceSentDate(contribution, startDate, endDate))\n                .build();\n    }\n\n\n    private String getMaatId(CONTRIBUTIONS contribution){\n        return String.valueOf(contribution.getMaatId());\n    }\n    private String getDataFeed(CONTRIBUTIONS contribution){\n        return contribution.getFlag();\n    }\n    private String getAssessmentDate(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){", "        if(Objects.isNull(contribution.getAssessment()) || Objects.isNull(contribution.getAssessment().getEffectiveDate())\n                || !DateUtils.validateDate(contribution.getAssessment().getEffectiveDate(), startDate, endDate)){\n            return EMPTY_CHARACTER;\n        }\n        return DateUtils.convertXmlGregorianToString(contribution.getAssessment().getEffectiveDate());\n    }\n    private String getOutcomeDate(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){\n        List<CcOutcome> filteredList = contribution.getCcOutcomes().getCcOutcome()\n                .stream()\n                .filter(Objects::nonNull)\n                .filter(x->DateUtils.validateDate(x.getDate(),startDate,endDate))\n                .toList();", "        if(!filteredList.isEmpty()){\n            return DateUtils.convertXmlGregorianToString(filteredList.get(0).getDate());\n        }\n        return \"\";\n    }\n    private String getCorrespondenceSentDate(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){\n        List<Letter> filteredList = contribution.getCorrespondence().getLetter()\n                .stream()\n                .filter(Objects::nonNull)\n                .filter(x->DateUtils.validateDate(x.getCreated(),startDate,endDate))\n                .toList();", "        if(!filteredList.isEmpty()){\n            return DateUtils.convertXmlGregorianToString(filteredList.get(0).getCreated());\n        }\n        return \"\";\n    }\n    private String getRepOrderStatusDate(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){\n        if(Objects.isNull(contribution.getApplication()) || Objects.isNull(contribution.getApplication().getRepStatusDate())\n                || !DateUtils.validateDate(contribution.getApplication().getRepStatusDate(), startDate, endDate)){\n            return EMPTY_CHARACTER;\n        }\n        return DateUtils.convertXmlGregorianToString(contribution.getApplication().getRepStatusDate());\n    }\n    private String getHardshipReviewDate(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){", "        if(Objects.isNull(contribution.getApplication())\n                || Objects.isNull(contribution.getApplication().getCcHardship()) || Objects.isNull(contribution.getApplication().getCcHardship().getReviewDate())\n                || !DateUtils.validateDate(contribution.getApplication().getCcHardship().getReviewDate(), startDate, endDate)){\n            return EMPTY_CHARACTER;\n        }\n        return DateUtils.convertXmlGregorianToString(contribution.getApplication().getCcHardship().getReviewDate());\n    }\n    private String getPassportedDate(CONTRIBUTIONS contribution, LocalDate startDate, LocalDate endDate){\n        if( Objects.isNull(contribution.getPassported()) || Objects.isNull(contribution.getPassported().getDateCompleted())\n                || !DateUtils.validateDate(contribution.getPassported().getDateCompleted(), startDate, endDate)){\n            return EMPTY_CHARACTER;\n        }\n        return DateUtils.convertXmlGregorianToString(contribution.getPassported().getDateCompleted());\n    }\n\n\n}\n", "        if( Objects.isNull(contribution.getPassported()) || Objects.isNull(contribution.getPassported().getDateCompleted())\n                || !DateUtils.validateDate(contribution.getPassported().getDateCompleted(), startDate, endDate)){\n            return EMPTY_CHARACTER;\n        }\n        return DateUtils.convertXmlGregorianToString(contribution.getPassported().getDateCompleted());\n    }\n\n\n}\n"]}
{"filename": "dces-report-service/src/main/java/uk/gov/justice/laa/crime/dces/utils/DateUtils.java", "chunked_list": ["package uk.gov.justice.laa.crime.dces.utils;\n\nimport lombok.experimental.UtilityClass;\n\nimport javax.xml.datatype.XMLGregorianCalendar;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.Objects;\n", "import java.util.Objects;\n\n@UtilityClass\npublic class DateUtils {\n\n    private final DateFormat df = new SimpleDateFormat(\"dd/MM/yyyy\");\n\n\n    public String convertXmlGregorianToString(XMLGregorianCalendar xmlGregorianCalendar){\n        if(Objects.nonNull(xmlGregorianCalendar)){\n            return df.format(xmlGregorianCalendar.toGregorianCalendar().getTime());\n        }\n        return \"\";\n    }\n", "    public String convertXmlGregorianToString(XMLGregorianCalendar xmlGregorianCalendar){\n        if(Objects.nonNull(xmlGregorianCalendar)){\n            return df.format(xmlGregorianCalendar.toGregorianCalendar().getTime());\n        }\n        return \"\";\n    }\n\n    public boolean validateDate(XMLGregorianCalendar date, LocalDate startDate, LocalDate endDate){\n        if(Objects.isNull(date)){ return false;}\n        var convertedDate = LocalDate.parse(date.toString());\n        return ( Objects.nonNull(startDate)\n                && Objects.nonNull(endDate)\n                && convertedDate.compareTo(startDate)>=0\n                && convertedDate.compareTo(endDate)<=0);\n    }\n\n}\n", "        if(Objects.isNull(date)){ return false;}\n        var convertedDate = LocalDate.parse(date.toString());\n        return ( Objects.nonNull(startDate)\n                && Objects.nonNull(endDate)\n                && convertedDate.compareTo(startDate)>=0\n                && convertedDate.compareTo(endDate)<=0);\n    }\n\n}\n"]}
