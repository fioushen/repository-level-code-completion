{"filename": "src/test/java/org/rdelfino/apigateway/client/Something.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport lombok.Data;\n\n@Data\nclass Something {\n\n    int a;\n    String b;\n};", "    String b;\n};\n"]}
{"filename": "src/test/java/org/rdelfino/apigateway/client/ApiGatewayAsyncClientTest.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport com.fasterxml.jackson.core.TreeNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.SneakyThrows;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;", "import org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport org.reactivestreams.Publisher;\nimport org.reactivestreams.Subscription;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.http.SdkHttpResponse;\nimport software.amazon.awssdk.http.async.AsyncExecuteRequest;\nimport software.amazon.awssdk.http.async.SdkAsyncHttpClient;", "import software.amazon.awssdk.http.async.AsyncExecuteRequest;\nimport software.amazon.awssdk.http.async.SdkAsyncHttpClient;\nimport software.amazon.awssdk.http.async.SdkAsyncHttpResponseHandler;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;", "import java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.verify;\n\npublic class ApiGatewayAsyncClientTest {\n\n    @Mock\n    SignedRequestFactory mockRequestFactory;\n\n    @Mock\n    SdkAsyncHttpClient mockHttpClient;\n\n    @Captor\n    ArgumentCaptor<AsyncExecuteRequest> httpExecuteRequestArgumentCaptor;\n\n    @Mock\n    SdkHttpFullRequest mocSignedRequest;\n\n    @BeforeEach\n    @SneakyThrows\n    void setup() throws Exception {\n        MockitoAnnotations.openMocks(this).close();\n    }\n\n    @Test\n    @SneakyThrows", "    public void testnvoke() {\n\n        Something value = new Something();\n        value.setA(24);\n        value.setB(\"AppleBee!\");\n\n        ObjectMapper defaultMapperConfiguration = ApiGatewayRequest.getDefaultMapperConfiguration();\n        String message = defaultMapperConfiguration.writeValueAsString(value);\n        boolean successful = true;\n        int statusCode = 200;\n        String statusText = \"OK\";\n\n        ApiGatewayAsyncClient client = scenario(message, successful, statusCode, statusText);\n\n        ApiGatewayRequest testRequest = ApiGatewayRequest.builder(\"localhost\")\n                .build();\n\n        ApiGatewayResponse response = client.invoke(\n                testRequest\n        ).join();\n\n        assertNotNull(response);\n\n        assertEquals(statusCode, response.getStatusCode());\n        assertEquals(statusText, response.getStatusText());\n        assertEquals(successful, response.isSuccessful());\n\n        final TreeNode bodyContent = response.readTreeNode();\n        assertEquals(value, defaultMapperConfiguration.treeToValue(bodyContent, Something.class));\n\n        verify(mockRequestFactory).create(testRequest);\n        verify(mockHttpClient).execute(httpExecuteRequestArgumentCaptor.capture());\n\n        AsyncExecuteRequest actualRequest = httpExecuteRequestArgumentCaptor.getValue();\n\n        assertTrue(mocSignedRequest == actualRequest.request());\n    }\n\n    @Test\n    @SneakyThrows", "    public void testInvokeNoContent() {\n        String message = null;\n        boolean successful = true;\n        int statusCode = 200;\n        String statusText = \"OK\";\n\n        ApiGatewayAsyncClient client = scenario(message, successful, statusCode, statusText);\n\n        ApiGatewayRequest testRequest = ApiGatewayRequest.builder(\"localhost\")\n                .build();\n        ApiGatewayResponse response = client.invoke(\n                testRequest\n        ).join();\n\n        final String bodyCnotent = Buffer.from(response.getBodyContent()).asString(StandardCharsets.UTF_8);\n        assertEquals(\"\", bodyCnotent);\n    }\n\n    private ApiGatewayAsyncClient scenario(String responseData, boolean successful, int statusCode, String statusText) {\n        doReturn(mocSignedRequest)\n            .when(mockRequestFactory)\n                .create(any(ApiGatewayRequest.class));\n\n        doAnswer(invocation -> {\n\n            byte[] bytes = responseData == null ?  new byte[0] : responseData.getBytes(StandardCharsets.UTF_8);\n\n            AsyncExecuteRequest request = invocation.getArgument(0);\n\n            SdkAsyncHttpResponseHandler responseHandler = request.responseHandler();\n\n            Map<String, List<String>> headers = new HashMap<>();\n            headers.put(\"Content-Length\", List.of(String.valueOf(bytes.length)));\n\n            responseHandler.onHeaders(\n                SdkHttpResponse.builder()\n                    .statusCode(statusCode)\n                    .statusText(statusText)\n                    .headers(headers)\n                .build()\n            );\n\n            Subscription mockSubscription = Mockito.mock(Subscription.class);\n\n            Publisher<ByteBuffer> publisher = subscriber -> {\n\n                subscriber.onSubscribe(mockSubscription);\n                subscriber.onNext(ByteBuffer.wrap(bytes));\n                subscriber.onComplete();\n            };\n\n            responseHandler.onStream(publisher);\n\n            return CompletableFuture.completedFuture(null);\n\n        })\n            .when(mockHttpClient)\n                .execute(any(AsyncExecuteRequest.class));\n\n        return new ApiGatewayAsyncClient(mockRequestFactory, mockHttpClient);\n    }\n}\n"]}
{"filename": "src/test/java/org/rdelfino/apigateway/client/SignedRequestFactoryTest.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport lombok.SneakyThrows;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport software.amazon.awssdk.auth.credentials.AwsCredentials;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;", "import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.regions.Region;\n\nimport java.io.ByteArrayInputStream;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.verify;", "import static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.verify;\n\nclass SignedRequestFactoryTest {\n\n    @Mock\n    AwsCredentialsProvider mockCredentialsProvider;\n\n    @BeforeEach\n    @SneakyThrows", "    @BeforeEach\n    @SneakyThrows\n    void setup() throws Exception {\n        MockitoAnnotations.openMocks(this).close();\n\n\n        doReturn(new AwsCredentials(){\n            @Override\n            public String accessKeyId() {\n                return \"123\";\n            }\n\n            @Override", "            public String accessKeyId() {\n                return \"123\";\n            }\n\n            @Override\n            public String secretAccessKey() {\n                return \"456\";\n            }\n        }).when(mockCredentialsProvider).resolveCredentials();\n    }\n\n    @Test\n    @SneakyThrows", "    public void testCreate() {\n        String content = \"payload\";\n\n        ApiGatewayRequest request = scenario(content);\n\n        SignedRequestFactory factory = SignedRequestFactory.builder()\n                .signingRegion(Region.US_WEST_2)\n                .credentialsProvider(mockCredentialsProvider)\n            .build();\n\n        SdkHttpFullRequest sdkHttpFullRequest = factory.create(request);\n\n        verify(mockCredentialsProvider).resolveCredentials();\n\n        assertNotNull(sdkHttpFullRequest);\n        assertEquals(request.getHost(), sdkHttpFullRequest.host());\n        assertEquals(request.getPort(), sdkHttpFullRequest.port());\n        assertEquals(request.getMethod(), sdkHttpFullRequest.method().name());\n        assertEquals(request.getPath(), sdkHttpFullRequest.encodedPath());\n        assertEquals(request.queryParameters, sdkHttpFullRequest.rawQueryParameters());\n        assertEquals(request.headers.get(\"h1\"), sdkHttpFullRequest.headers().get(\"h1\"));\n        assertNotNull(sdkHttpFullRequest.contentStreamProvider().orElse(null));\n    }\n\n    @Test\n    @SneakyThrows", "    public void testCreateNoContent() {\n        ApiGatewayRequest request = scenario(null);\n\n        SignedRequestFactory factory = SignedRequestFactory.builder()\n                .signingRegion(Region.US_WEST_2)\n                .credentialsProvider(mockCredentialsProvider)\n                .build();\n\n        SdkHttpFullRequest sdkHttpFullRequest = factory.create(request);\n\n        verify(mockCredentialsProvider).resolveCredentials();\n\n        assertNotNull(sdkHttpFullRequest);\n        assertEquals(request.getHost(), sdkHttpFullRequest.host());\n        assertEquals(request.getPort(), sdkHttpFullRequest.port());\n        assertEquals(request.getMethod(), sdkHttpFullRequest.method().name());\n        assertEquals(request.getPath(), sdkHttpFullRequest.encodedPath());\n        assertEquals(request.queryParameters, sdkHttpFullRequest.rawQueryParameters());\n        assertEquals(request.headers.get(\"h1\"), sdkHttpFullRequest.headers().get(\"h1\"));\n        assertNull(sdkHttpFullRequest.contentStreamProvider().orElse(null));\n    }\n\n    private ApiGatewayRequest scenario(String content) {\n        return ApiGatewayRequest\n                .builder(\"localhost\")\n                .setPort(444)\n                .setMethod(\"PUT\")\n                .setPath(\"/path\")\n                .addQueryParameter(\"q1\", \"v1\")\n                .addHeader(\"h1\", \"v1\")\n                .setPayload(\n                    Optional.ofNullable(content)\n                        .map(s->new ByteArrayInputStream(s.getBytes()))\n                        .orElse(null)\n                )\n            .build();\n    }\n\n}"]}
{"filename": "src/test/java/org/rdelfino/apigateway/client/ApiGatewayClientTest.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.SneakyThrows;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentCaptor;\nimport org.mockito.Captor;\nimport org.mockito.Mock;\nimport org.mockito.Mockito;", "import org.mockito.Mock;\nimport org.mockito.Mockito;\nimport org.mockito.MockitoAnnotations;\nimport software.amazon.awssdk.http.AbortableInputStream;\nimport software.amazon.awssdk.http.ExecutableHttpRequest;\nimport software.amazon.awssdk.http.HttpExecuteRequest;\nimport software.amazon.awssdk.http.HttpExecuteResponse;\nimport software.amazon.awssdk.http.SdkHttpClient;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.http.SdkHttpResponse;", "import software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.http.SdkHttpResponse;\n\nimport java.io.ByteArrayInputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;", "import static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.doAnswer;\nimport static org.mockito.Mockito.doReturn;\nimport static org.mockito.Mockito.verify;\n\nclass ApiGatewayClientTest {\n\n    @Mock\n    SignedRequestFactory mockRequestFactory;\n    @Mock", "    SignedRequestFactory mockRequestFactory;\n    @Mock\n    SdkHttpClient mockHttpClient;\n\n    @Captor\n    ArgumentCaptor<ApiGatewayRequest> apiGatewayRequestArgumentCaptor;\n\n    @Captor\n    ArgumentCaptor<HttpExecuteRequest> httpExecuteRequestArgumentCaptor;\n", "    ArgumentCaptor<HttpExecuteRequest> httpExecuteRequestArgumentCaptor;\n\n    @Mock\n    SdkHttpFullRequest mocSignedRequest;\n\n    @BeforeEach\n    @SneakyThrows\n    void setup() throws Exception {\n        MockitoAnnotations.openMocks(this).close();\n    }", "        MockitoAnnotations.openMocks(this).close();\n    }\n\n    @Test\n    @SneakyThrows\n    public void testnvoke() {\n\n        ObjectMapper mapper = ApiGatewayRequest.getDefaultMapperConfiguration();\n\n        Something value = new Something();\n        value.setA(15);\n        value.setB(\"test123\");\n\n        boolean successful = true;\n        int statusCode = 200;\n        String statusText = \"OK\";\n\n        ApiGatewayClient client = scenario(mapper.writeValueAsString(value), successful, statusCode, statusText);\n\n        ApiGatewayRequest testRequest = ApiGatewayRequest.builder(\"localhost\")\n                .build();\n        ApiGatewayResponse response = client.invoke(\n                testRequest\n        );\n\n        assertNotNull(response);\n\n        assertEquals(statusCode, response.getStatusCode());\n        assertEquals(statusText, response.getStatusText());\n        assertEquals(successful, response.isSuccessful());\n\n        final Something bodyContent = response.readOject(Something.class);\n        assertEquals(value, bodyContent);\n\n        verify(mockRequestFactory).create(testRequest);\n        verify(mockHttpClient).prepareRequest(httpExecuteRequestArgumentCaptor.capture());\n\n        HttpExecuteRequest actualRequest = httpExecuteRequestArgumentCaptor.getValue();\n\n        assertTrue(mocSignedRequest == actualRequest.httpRequest());\n    }\n\n    @Test\n    @SneakyThrows", "    public void testInvokeNoContent() {\n        String message = null;\n        boolean successful = true;\n        int statusCode = 200;\n        String statusText = \"OK\";\n\n        ApiGatewayClient client = scenario(message, successful, statusCode, statusText);\n\n        ApiGatewayRequest testRequest = ApiGatewayRequest.builder(\"localhost\")\n                .build();\n        ApiGatewayResponse response = client.invoke(\n                testRequest\n        );\n\n        final String bodyCnotent = Buffer.from(response.getBodyContent()).asString(StandardCharsets.UTF_8);\n        assertEquals(\"\", bodyCnotent);\n    }\n\n    private ApiGatewayClient scenario(String message, boolean successful, int statusCode, String statusText) {\n        doReturn(mocSignedRequest)\n            .when(mockRequestFactory)\n                .create(any(ApiGatewayRequest.class));\n\n        doAnswer(invocation -> {\n            HttpExecuteRequest request = (HttpExecuteRequest)invocation.getArgument(0);\n\n            ExecutableHttpRequest mockExecutableRequest = Mockito.mock(ExecutableHttpRequest.class);\n\n            HttpExecuteResponse mockExecuteResponse = Mockito.mock(HttpExecuteResponse.class);\n\n            doReturn(mockExecuteResponse)\n                .when(mockExecutableRequest)\n                    .call();\n\n            doReturn(\n                Optional.ofNullable(message)\n                    .map(s-> new ByteArrayInputStream(message.getBytes()))\n                    .map(AbortableInputStream::create)\n            )\n                .when(mockExecuteResponse)\n                    .responseBody();\n\n            SdkHttpResponse mockHhttpResponse = Mockito.mock(SdkHttpResponse.class);\n\n            doReturn(mockHhttpResponse)\n                .when(mockExecuteResponse)\n                    .httpResponse();\n\n            doReturn(successful)\n                .when(mockHhttpResponse)\n                    .isSuccessful();\n\n            doReturn(statusCode)\n                .when(mockHhttpResponse)\n                .statusCode();\n\n            doReturn(Optional.ofNullable(statusText))\n                    .when(mockHhttpResponse)\n                    .statusText();\n\n            return mockExecutableRequest;\n\n        })\n            .when(mockHttpClient)\n            .prepareRequest(any(HttpExecuteRequest.class));\n\n        return new ApiGatewayClient(mockRequestFactory,mockHttpClient);\n    }\n}"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/ApiGatewayClient.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.http.ExecutableHttpRequest;\nimport software.amazon.awssdk.http.HttpExecuteRequest;\nimport software.amazon.awssdk.http.HttpExecuteResponse;\nimport software.amazon.awssdk.http.SdkHttpClient;", "import software.amazon.awssdk.http.HttpExecuteResponse;\nimport software.amazon.awssdk.http.SdkHttpClient;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.http.SdkHttpResponse;\nimport software.amazon.awssdk.regions.Region;\n\nimport java.io.IOException;\n\n/**\n * ApiGatewayClient is a client for the AWS API Gateway that uses the synchronous request processing model", "/**\n * ApiGatewayClient is a client for the AWS API Gateway that uses the synchronous request processing model\n *\n * Example:\n * <pre>\n *\n *     ///////////////\n *     // Initialization\n *     //\n *", " *     //\n *\n *     AwsCredentialsProvider credentialsProvider = obtainCredentialsProvider();\n *\n *     SdkHttpClient httpClient = obtainHttpClient();\n *         // ex:  ApacheHttpClient.builder().socketTimeout(Duration.ofSeconds(10)).build();\n *\n *     ApiGatewayClient client = ApiGatewayClient.builder()\n *         .httpClient(httpClient)\n *         .credentialsProvider(credentialsProvider)", " *         .httpClient(httpClient)\n *         .credentialsProvider(credentialsProvider)\n *         .signingRegion(Region.US_WEST_2)\n *         .build();\n *\n *     ///////////////\n *     // usage\n *     //\n *\n *     Item item = new Item();", " *\n *     Item item = new Item();\n *\n *     ApiGatewayRequest request =\n *         ApiGatewayRequest.builder(URI.create(\"https://api.example.com/v1/items\"))\n *             .setMethod(\"PUT\")\n *             .setQueryParameter(\"id\", \"123\")\n *             .setJsonPayload(item)\n *         build();\n *", " *         build();\n *\n *     ApiGatewayResponse response = client.invoke(request);\n *\n *     Item createdItem = response.readObject(Item.class);\n *\n * </pre>\n */\npublic class ApiGatewayClient extends SignedRequestsHandler {\n\n    @Getter\n    final SdkHttpClient httpClient;\n\n    @Builder\n    ApiGatewayClient(\n        final @NonNull SdkHttpClient httpClient,\n        final AwsCredentialsProvider credentialsProvider,\n        final Region region\n    ) {\n        this(\n            SignedRequestFactory.builder()\n                .signingRegion(region)\n                .credentialsProvider(credentialsProvider)\n            .build(),\n            httpClient\n        );\n    }\n\n    ApiGatewayClient(\n            final SignedRequestFactory signedRequestFactory,\n            final @NonNull SdkHttpClient httpClient\n    ) {\n        super(signedRequestFactory);\n        this.httpClient = httpClient;\n    }\n\n    /**\n     * Invokes the API Gateway with a request\n     *\n     * @param apiGatewayRequest The request to send to the API Gateway endpoint\n     *\n     * @return The response from the API Gateway endpoint\n     * @throws IOException if the request cannot be sent\n     */", "public class ApiGatewayClient extends SignedRequestsHandler {\n\n    @Getter\n    final SdkHttpClient httpClient;\n\n    @Builder\n    ApiGatewayClient(\n        final @NonNull SdkHttpClient httpClient,\n        final AwsCredentialsProvider credentialsProvider,\n        final Region region\n    ) {\n        this(\n            SignedRequestFactory.builder()\n                .signingRegion(region)\n                .credentialsProvider(credentialsProvider)\n            .build(),\n            httpClient\n        );\n    }\n\n    ApiGatewayClient(\n            final SignedRequestFactory signedRequestFactory,\n            final @NonNull SdkHttpClient httpClient\n    ) {\n        super(signedRequestFactory);\n        this.httpClient = httpClient;\n    }\n\n    /**\n     * Invokes the API Gateway with a request\n     *\n     * @param apiGatewayRequest The request to send to the API Gateway endpoint\n     *\n     * @return The response from the API Gateway endpoint\n     * @throws IOException if the request cannot be sent\n     */", "    public ApiGatewayResponse invoke(\n        @NonNull ApiGatewayRequest apiGatewayRequest\n    ) throws IOException {\n\n        final SdkHttpFullRequest sdkRequest = signedRequestFactory.create(apiGatewayRequest);\n\n        final ExecutableHttpRequest executableHttpRequest =\n                httpClient.prepareRequest(\n                    HttpExecuteRequest.builder()\n                        .request(sdkRequest)\n                        .contentStreamProvider(\n                            sdkRequest.contentStreamProvider()\n                                .orElse(null)\n                        )\n                    .build()\n                );\n\n        final HttpExecuteResponse executeResponse = executableHttpRequest.call();\n\n        final SdkHttpResponse httpResponse = executeResponse.httpResponse();\n\n        final Buffer buffer = new Buffer(512);\n        executeResponse.responseBody()\n            .ifPresent(buffer::transferFrom);\n\n        return SimpleApiGatewayResponse.builder()\n                .objectMapper(apiGatewayRequest.getMapper())\n                .bodyContent(buffer.asInputStream())\n                .successful(httpResponse.isSuccessful())\n                .statusCode(httpResponse.statusCode())\n                .statusText(httpResponse.statusText().orElse(null))\n            .build();\n    }\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/SignedRequestsHandler.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport lombok.AccessLevel;\nimport lombok.AllArgsConstructor;\nimport lombok.NonNull;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\n\n@AllArgsConstructor(access = AccessLevel.PACKAGE)\nclass SignedRequestsHandler {", "@AllArgsConstructor(access = AccessLevel.PACKAGE)\nclass SignedRequestsHandler {\n\n    final @NonNull SignedRequestFactory signedRequestFactory;\n\n    /**\n     * Obtains the signing region\n     * @return signing region\n     */\n    public Region getSigningRegion() {\n        return signedRequestFactory.getSigningRegion();\n    }\n\n    /**\n     * Obtains the credentials provider\n     * @return AwsCredentialsProvider\n     */", "     */\n    public Region getSigningRegion() {\n        return signedRequestFactory.getSigningRegion();\n    }\n\n    /**\n     * Obtains the credentials provider\n     * @return AwsCredentialsProvider\n     */\n    public AwsCredentialsProvider getCredentialsProvider() {\n        return signedRequestFactory.getCredentialsProvider();\n    }\n}\n", "    public AwsCredentialsProvider getCredentialsProvider() {\n        return signedRequestFactory.getCredentialsProvider();\n    }\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/SimpleApiGatewayResponse.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport com.fasterxml.jackson.core.TreeNode;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;", "import lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport lombok.SneakyThrows;\nimport lombok.ToString;\n\nimport java.io.InputStream;\n\n@Getter\n@Builder", "@Getter\n@Builder\n@EqualsAndHashCode\n@ToString\n@AllArgsConstructor\nclass SimpleApiGatewayResponse implements ApiGatewayResponse {\n\n    ObjectMapper objectMapper;\n\n    final String statusText;", "\n    final String statusText;\n    final int statusCode;\n    final boolean successful;\n    final InputStream bodyContent;\n\n    @Override\n    @SneakyThrows\n    public TreeNode readTreeNode() {\n        return objectMapper.readTree(getBodyContent());\n    }\n\n    @Override\n    @SneakyThrows\n    public <Payload> Payload readOject(final @NonNull Class<Payload> payloadClass) {\n        return objectMapper.readValue(getBodyContent(), payloadClass);\n    }\n\n    @Override\n    @SneakyThrows\n    public <Payload> Payload readOject(final @NonNull TypeReference<Payload> typeReference){\n        return objectMapper.readValue(getBodyContent(), typeReference);\n    }\n\n    @Override\n    @SneakyThrows\n    public <Payload> Payload readOject(final @NonNull JavaType valueType){\n        return objectMapper.readValue(getBodyContent(), valueType);\n    }\n\n    @Override", "    public TreeNode readTreeNode() {\n        return objectMapper.readTree(getBodyContent());\n    }\n\n    @Override\n    @SneakyThrows\n    public <Payload> Payload readOject(final @NonNull Class<Payload> payloadClass) {\n        return objectMapper.readValue(getBodyContent(), payloadClass);\n    }\n\n    @Override\n    @SneakyThrows\n    public <Payload> Payload readOject(final @NonNull TypeReference<Payload> typeReference){\n        return objectMapper.readValue(getBodyContent(), typeReference);\n    }\n\n    @Override\n    @SneakyThrows\n    public <Payload> Payload readOject(final @NonNull JavaType valueType){\n        return objectMapper.readValue(getBodyContent(), valueType);\n    }\n\n    @Override", "    public ApiGatewayResponse setObjectMapper(final @NonNull ObjectMapper mapper) {\n        this.objectMapper = mapper;\n        return this;\n    }\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/Buffer.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport lombok.SneakyThrows;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\n", "import java.nio.charset.Charset;\n\n/**\n * Simple in memory buffer implementation\n */\nclass Buffer extends ByteArrayOutputStream {\n\n    public Buffer(int size) {\n        super(size);\n    }", "        super(size);\n    }\n\n    /**\n     * @return this buffer contents as an InputStream\n     */\n    public InputStream asInputStream() {\n        return new ByteArrayInputStream(this.buf, 0, this.count);\n    }\n\n    /**\n     * @return this buffer contents as a ByteBuffer\n     */", "    public ByteBuffer asByteBuffer() {\n        return ByteBuffer.wrap(this.buf, 0, this.count);\n    }\n\n    /**\n     * Transfers the contents of an InputStream into this buffer\n     *\n     * @param inputStream the InputStream to transfer from\n     */\n    @SneakyThrows\n    public void transferFrom(final InputStream inputStream){\n        inputStream.transferTo(this);\n    }\n\n    /**\n     * Creates a buffer with the contents of an InputStream\n     *\n     * @param inputStream the InputStream to create the buffer from\n     */", "    public void transferFrom(final InputStream inputStream){\n        inputStream.transferTo(this);\n    }\n\n    /**\n     * Creates a buffer with the contents of an InputStream\n     *\n     * @param inputStream the InputStream to create the buffer from\n     */\n    public static Buffer from(InputStream inputStream){\n        Buffer buffer = new Buffer(256);\n        buffer.transferFrom(inputStream);\n        return buffer;\n    }\n\n    /**\n     * Returns this buffer contents as a String\n     * @param charset the charset used to decode the buffer contents\n     * @return this buffer contents as a String\n     */", "    public static Buffer from(InputStream inputStream){\n        Buffer buffer = new Buffer(256);\n        buffer.transferFrom(inputStream);\n        return buffer;\n    }\n\n    /**\n     * Returns this buffer contents as a String\n     * @param charset the charset used to decode the buffer contents\n     * @return this buffer contents as a String\n     */", "    public String asString(Charset charset) {\n         return new String(this.buf, 0, this.count, charset);\n    }\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/ApiGatewayResponse.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport com.fasterxml.jackson.core.TreeNode;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.InputStream;\n\n/**", "\n/**\n * Interface for the response returned by the API Gateway service.\n */\npublic interface ApiGatewayResponse {\n\n    /**\n     * Returns the HTTP status text returned by the service.\n     *\n     * <p>If this was not provided by the service, empty will be returned.</p>\n     * @return HTTP status text returned by the service.\n     */\n    String getStatusText();\n\n    /**\n     * Returns the HTTP status code (eg. 200, 404, etc.) returned by the service.\n     *\n     * <p>This will always be positive.</p>\n     * @return HTTP status code returned by the service.\n     */\n    int getStatusCode();\n\n    /**\n     * If we get back any 2xx status code, then we know we should treat the service call as successful.\n     * @return true if the service call was successful, false otherwise.\n     */\n    boolean isSuccessful();\n\n    /**\n     * Obtains the HTTP response body content\n     *\n     * @return the InputStream containing the response body content\n     */\n    InputStream getBodyContent();\n\n    /**\n     * Parses a JSON TreeNode from the HTTP response body content using the ObjectMapper provided in the request\n     *\n     * @return TreeNode parsed from the HTTP response body content\n     */\n    TreeNode readTreeNode();\n\n\n    /**\n     * Parses an Object from the HTTP response body content using the ObjectMapper provided in the request\n     *\n     * @param typeReference TypeReference describing the type of the object to be parsed\n     * @param <Payload> expected type of the object to be parsed\n     * @return Payload parsed from the HTTP response body content\n     */\n    <Payload> Payload readOject(TypeReference<Payload> typeReference);\n\n    /**\n     * Parses an Object from the HTTP response body content using the ObjectMapper provided in the request\n     *\n     * @param valueType JavaType describing the type of the object to be parsed\n     * @param <Payload> expected type of the object to be parsed\n     * @return Payload parsed from the HTTP response body content\n     */\n    <Payload> Payload readOject(JavaType valueType);\n\n    /**\n     * Parses an Object from the HTTP response body content using the ObjectMapper provided in the request\n     *\n     * @param payloadClass Class of the object to be parsed\n     * @param <Payload> expected type of the object to be parsed\n     * @return Payload parsed from the HTTP response body content\n     */\n    <Payload> Payload readOject(Class<Payload> payloadClass);\n\n    /**\n     * Obtains the ObjectMapper provided in the request, used to parse responses\n     * @return the ObjectMapper instance used to parse responses\n     */\n    ObjectMapper getObjectMapper();\n\n    /**\n     * Replaces the ObjectMapper used for deserialization of responses\n     * @param objectMapper the new ObjectMapper instance to be used\n     * @return this ApiGatewayResponse\n     */\n    ApiGatewayResponse setObjectMapper(ObjectMapper objectMapper);\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/SignedRequestFactory.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.auth.signer.Aws4Signer;\nimport software.amazon.awssdk.auth.signer.internal.SignerConstant;\nimport software.amazon.awssdk.auth.signer.params.Aws4SignerParams;", "import software.amazon.awssdk.auth.signer.internal.SignerConstant;\nimport software.amazon.awssdk.auth.signer.params.Aws4SignerParams;\nimport software.amazon.awssdk.auth.signer.params.SignerChecksumParams;\nimport software.amazon.awssdk.core.checksums.Algorithm;\nimport software.amazon.awssdk.http.ContentStreamProvider;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.http.SdkHttpMethod;\nimport software.amazon.awssdk.regions.Region;\n\nimport java.util.Collections;", "\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * Factory for creating signed requests for the ApiGatewayClient\n */", " * Factory for creating signed requests for the ApiGatewayClient\n */\n@Builder\n@RequiredArgsConstructor\nclass SignedRequestFactory {\n\n    private static final Aws4Signer SIGNER = Aws4Signer.create();\n\n    private static final SignerChecksumParams SIGNER_CHECKSUM_PARAMS =\n        SignerChecksumParams.builder()", "    private static final SignerChecksumParams SIGNER_CHECKSUM_PARAMS =\n        SignerChecksumParams.builder()\n            .algorithm(Algorithm.SHA256)\n            .isStreamingRequest(false)\n            .checksumHeaderName(SignerConstant.X_AMZ_CONTENT_SHA256)\n        .build();\n\n    @Getter\n    final @NonNull Region signingRegion;\n", "    final @NonNull Region signingRegion;\n\n    @Getter\n    final @NonNull AwsCredentialsProvider credentialsProvider;\n\n    /**\n     * Create a signed request for the given ApiGatewayRequest.\n     * @param apiGatewayRequest ApiGatewayRequest\n     * @return signed SdkHttpFullRequest instance\n     */", "     * @return signed SdkHttpFullRequest instance\n     */\n    SdkHttpFullRequest create(ApiGatewayRequest apiGatewayRequest) {\n\n        final Buffer payloadBuffer = Optional.ofNullable(apiGatewayRequest.getPayload())\n                .map(Buffer::from)\n                .orElse(null);\n\n        final ContentStreamProvider contentStreamProvider = payloadBuffer == null ? null : payloadBuffer::asInputStream;\n", "        final ContentStreamProvider contentStreamProvider = payloadBuffer == null ? null : payloadBuffer::asInputStream;\n\n        final SdkHttpFullRequest.Builder builder = SdkHttpFullRequest.builder()\n                .protocol(\"https\")\n                .method(SdkHttpMethod.fromValue(apiGatewayRequest.getMethod()))\n                .host(apiGatewayRequest.getHost())\n                .port(apiGatewayRequest.getPort())\n                .encodedPath(apiGatewayRequest.getPath())\n                .contentStreamProvider(contentStreamProvider)\n                .headers(", "                .contentStreamProvider(contentStreamProvider)\n                .headers(\n                    finalHeaders(apiGatewayRequest, payloadBuffer)\n                )\n                .rawQueryParameters(\n                    nonNull(apiGatewayRequest.getQueryParameters())\n                );\n\n        return SIGNER.sign(\n            builder.build(),", "        return SIGNER.sign(\n            builder.build(),\n            Aws4SignerParams.builder()\n                .signingName(\"execute-api\")\n                .signingRegion(signingRegion)\n                .awsCredentials(credentialsProvider.resolveCredentials())\n                .checksumParams(SIGNER_CHECKSUM_PARAMS)\n            .build()\n        );\n    }", "        );\n    }\n\n    private Map<String, List<String>> finalHeaders(\n        final ApiGatewayRequest apiGatewayRequest,\n        final Buffer payloadBuffer\n    ) {\n        final Map<String, List<String>> result = new HashMap<>(nonNull(apiGatewayRequest.getHeaders()));\n\n        if (payloadBuffer != null) {\n            result.put(\"Content-Length\", List.of(String.valueOf(payloadBuffer.size())));\n        }\n\n        final String apiKey = apiGatewayRequest.getApiKey();", "\n        if (payloadBuffer != null) {\n            result.put(\"Content-Length\", List.of(String.valueOf(payloadBuffer.size())));\n        }\n\n        final String apiKey = apiGatewayRequest.getApiKey();\n        if (apiKey != null) {\n            result.put(\"x-api-key\", List.of(apiKey));\n        }\n\n        return result;\n    }\n\n    private ContentStreamProvider contentProvider(final ApiGatewayRequest parameters) {\n        return Optional.ofNullable(parameters.getPayload())\n                .map(Buffer::from)\n                .map(buffer->(ContentStreamProvider)buffer::asInputStream)\n                .orElse(null);\n    }\n\n    private Map<String, List<String>> nonNull(final Map<String, List<String>> map) {\n        return Optional.ofNullable(map)\n            .orElseGet(Collections::emptyMap);\n    }\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/ApiGatewayRequest.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.core.TreeNode;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport lombok.SneakyThrows;", "import lombok.NonNull;\nimport lombok.SneakyThrows;\nimport lombok.ToString;\nimport software.amazon.awssdk.utils.http.SdkHttpUtils;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.ArrayList;", "import java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\n\n/**\n * A pojo representing an API Gateway request.", "/**\n * A pojo representing an API Gateway request.\n */\n@Getter\n@ToString\n@EqualsAndHashCode\npublic class ApiGatewayRequest {\n\n    private static ObjectMapper DEFAULT_MAPPER = new ObjectMapper();\n    static {\n        DEFAULT_MAPPER.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n        DEFAULT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n    }\n\n    /**\n     * Configures the default ObjectMapper to use for serialization/deserialization\n     * @param mapper the new ObjectMapper configuration to use for serialization/deserialization\n     */", "    public static void configureDefaultMapper(final @NonNull ObjectMapper mapper) {\n        DEFAULT_MAPPER = mapper.copy();\n    }\n\n    /**\n     * Gets the default ObjectMapper configuration used for serialization/deserialization\n     * @return copy of default ObjectMapper configuration used for serialization/deserialization\n     */\n    public static ObjectMapper getDefaultMapperConfiguration() {\n        return DEFAULT_MAPPER.copy();\n    }\n\n    final ObjectMapper mapper;\n\n    final String host;\n\n    final int port;\n\n    final String method;\n\n    final String path;\n\n    final String apiKey;\n\n    final Map<String, List<String>> queryParameters;\n\n    final Map<String, List<String>> headers;\n\n    final InputStream payload;\n\n    /**\n     * All args constructor\n     * @param mapper ObjectMapper to use for serialization/deserialization\n     * @param host host of  API gateay endpoint\n     * @param port port of API gateay endpoint\n     * @param method HTTP method\n     * @param path path of API gateay endpoint\n     * @param queryParameters HTTP request query parameters\n     * @param headers headers HTTP request headers\n     * @param payload payload content body payload\n     */\n    public ApiGatewayRequest(\n            final @NonNull ObjectMapper mapper,\n            final @NonNull String host,\n            final int port,\n            final @NonNull String method,\n            final @NonNull String path,\n            final String apiKey,\n            final @NonNull Map<String, List<String>> queryParameters,\n            final @NonNull Map<String, List<String>> headers,\n            final InputStream payload\n    ) {\n        this.mapper = mapper;\n        this.host = host;\n        this.port = port;\n        this.method = method;\n        this.path = path;\n        this.apiKey = apiKey;\n        this.queryParameters = queryParameters;\n        this.headers = headers;\n        this.payload = payload;\n    }\n\n    /**\n     * Creates a new Builder using this requst as a template\n     * @return newly created Builder\n     */\n    Builder toBuilder() {\n        return new ApiGatewayRequest.Builder()\n            .setMapper(getMapper())\n            .setHost(getHost())\n            .setPort(getPort())\n            .setMethod(getMethod())\n            .setPath(getPath())\n            .setQueryParameters(getQueryParameters())\n            .setHeaders(getHeaders())\n            .setPayload(getPayload());\n    }\n\n    static Map<String, List<String>> deepCopy(Map<String, List<String>> map) {\n        final Map<String, List<String>> ret = new HashMap<>();\n        map.forEach((name, values)->{\n            ret.put(name, new ArrayList<>(values));\n        });\n        return ret;\n    }\n\n    /**\n     * Creates a Builder with the host of the API Gateway endpoint\n     * @param host the host of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static ObjectMapper getDefaultMapperConfiguration() {\n        return DEFAULT_MAPPER.copy();\n    }\n\n    final ObjectMapper mapper;\n\n    final String host;\n\n    final int port;\n\n    final String method;\n\n    final String path;\n\n    final String apiKey;\n\n    final Map<String, List<String>> queryParameters;\n\n    final Map<String, List<String>> headers;\n\n    final InputStream payload;\n\n    /**\n     * All args constructor\n     * @param mapper ObjectMapper to use for serialization/deserialization\n     * @param host host of  API gateay endpoint\n     * @param port port of API gateay endpoint\n     * @param method HTTP method\n     * @param path path of API gateay endpoint\n     * @param queryParameters HTTP request query parameters\n     * @param headers headers HTTP request headers\n     * @param payload payload content body payload\n     */\n    public ApiGatewayRequest(\n            final @NonNull ObjectMapper mapper,\n            final @NonNull String host,\n            final int port,\n            final @NonNull String method,\n            final @NonNull String path,\n            final String apiKey,\n            final @NonNull Map<String, List<String>> queryParameters,\n            final @NonNull Map<String, List<String>> headers,\n            final InputStream payload\n    ) {\n        this.mapper = mapper;\n        this.host = host;\n        this.port = port;\n        this.method = method;\n        this.path = path;\n        this.apiKey = apiKey;\n        this.queryParameters = queryParameters;\n        this.headers = headers;\n        this.payload = payload;\n    }\n\n    /**\n     * Creates a new Builder using this requst as a template\n     * @return newly created Builder\n     */\n    Builder toBuilder() {\n        return new ApiGatewayRequest.Builder()\n            .setMapper(getMapper())\n            .setHost(getHost())\n            .setPort(getPort())\n            .setMethod(getMethod())\n            .setPath(getPath())\n            .setQueryParameters(getQueryParameters())\n            .setHeaders(getHeaders())\n            .setPayload(getPayload());\n    }\n\n    static Map<String, List<String>> deepCopy(Map<String, List<String>> map) {\n        final Map<String, List<String>> ret = new HashMap<>();\n        map.forEach((name, values)->{\n            ret.put(name, new ArrayList<>(values));\n        });\n        return ret;\n    }\n\n    /**\n     * Creates a Builder with the host of the API Gateway endpoint\n     * @param host the host of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static Builder builder(\n           final @NonNull String host\n    ) {\n        return builder(host, 443);\n    }\n\n    /**\n     * Creates a Builder with the host and port of the API Gateway endpoint\n     * @param host the host of the API Gateway endpoint\n     * @param port the port of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static Builder builder(\n            final @NonNull String host,\n            final int port\n    ) {\n        return builder(host, port, \"/\");\n    }\n\n    /**\n     * Creates a Builder with the host and port of the API Gateway.\n     * @param host the host of the API Gateway endpoint\n     * @param path the path of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static Builder builder(\n            final @NonNull String host,\n            final @NonNull String path\n    ) {\n        return builder(host, 443, path);\n    }\n\n    /**\n     * Creates a Builder with the host, port and path of the API Gateway endpoint.\n     * @param host the host of the API Gateway endpoint\n     * @param port the port of the API Gateway endpoint\n     * @param path the path of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static Builder builder(\n        final @NonNull String host,\n        final int port,\n        final @NonNull String path\n    ) {\n        return new Builder()\n            .setHost(host)\n            .setPort(port)\n            .setPath(path);\n    }\n\n    /**\n     * Creates a Builder obtaining the host, port, path, and query parameters of the API Gateway endpoint from an URL\n     * @param url the URL of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static Builder builder(\n        final @NonNull URL url\n    ) {\n        return builder(URI.create(url.toString()));\n    }\n\n    /**\n     * Creates a Builder obtaining the host, port, path, and query parameters of the API Gateway endpoint from an URI\n     * @param uri the URI of the API Gateway endpoint\n     * @return newly created Builder\n     */", "    public static Builder builder(\n        final @NonNull URI uri\n    ) {\n        return new Builder().setUri(uri);\n    }\n\n    /**\n     * Builder to create ApiGatewayRequest instances\n     */\n    @Getter\n    @ToString", "    public static class Builder {\n\n        private ObjectMapper mapper = DEFAULT_MAPPER;\n\n        private String host;\n        private int port = 443;\n        private String method = \"GET\";\n        private String path = \"/\";\n        private String apiKey;\n        private Map<String, List<String>> queryParameters = new HashMap<>();\n        private Map<String, List<String>> headers = new HashMap<>();\n        private InputStream payload = null;\n\n        Builder() {\n        }\n\n        /**\n         * Sets the ObjectMapper to use for JSON serialization/deserialization\n         * @param mapper the ObjectMapper to use\n         * @return this Builder\n         */", "        public Builder setMapper(@NonNull ObjectMapper mapper) {\n            this.mapper = mapper;\n            return this;\n        }\n\n        /**\n         * Resets the ObjectMapper to the default\n         * @return this Builder\n         */\n        public Builder resetMapper() {\n            this.mapper = DEFAULT_MAPPER;\n            return this;\n        }\n\n        /**\n         * Sets the host to use for the request\n         * @param host host to send the request to\n         * @return this Builder\n         */", "        public Builder resetMapper() {\n            this.mapper = DEFAULT_MAPPER;\n            return this;\n        }\n\n        /**\n         * Sets the host to use for the request\n         * @param host host to send the request to\n         * @return this Builder\n         */\n        public Builder setHost(final @NonNull String host) {\n            this.host = host;\n            return this;\n        }\n\n        /**\n         * Sets the port to use for the request\n         * @param port port to send the request to\n         * @return this Builder\n         */", "        public Builder setHost(final @NonNull String host) {\n            this.host = host;\n            return this;\n        }\n\n        /**\n         * Sets the port to use for the request\n         * @param port port to send the request to\n         * @return this Builder\n         */\n        public Builder setPort(int port) {\n            this.port = port;\n            return this;\n        }\n\n        /**\n         * Sets the request method\n         * @param method GET , POST, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE\n         * @return this Builder\n         */", "        public Builder setPort(int port) {\n            this.port = port;\n            return this;\n        }\n\n        /**\n         * Sets the request method\n         * @param method GET , POST, PUT, PATCH, DELETE, HEAD, OPTIONS, TRACE\n         * @return this Builder\n         */\n        public Builder setMethod(final @NonNull String method) {\n            this.method = method;\n            return this;\n        }\n\n        /**\n         * Sets the request path\n         * @param path request path\n         * @return this Builder\n         */", "        public Builder setMethod(final @NonNull String method) {\n            this.method = method;\n            return this;\n        }\n\n        /**\n         * Sets the request path\n         * @param path request path\n         * @return this Builder\n         */\n        public Builder setPath(final @NonNull String path) {\n            this.path = path;\n            return this;\n        }\n\n        /**\n         * Sets the API Key to use for the request\n         * @param apiKey\n         * @return\n         */", "        public Builder setPath(final @NonNull String path) {\n            this.path = path;\n            return this;\n        }\n\n        /**\n         * Sets the API Key to use for the request\n         * @param apiKey\n         * @return\n         */\n        public Builder setApiKey(final String apiKey) {\n            this.apiKey = apiKey;\n            return this;\n        }\n\n        /**\n         * Sets the request query parameters\n         * @param parameters HTTP query parameters\n         * @return this Builder\n         */", "        public Builder setApiKey(final String apiKey) {\n            this.apiKey = apiKey;\n            return this;\n        }\n\n        /**\n         * Sets the request query parameters\n         * @param parameters HTTP query parameters\n         * @return this Builder\n         */\n        public Builder setQueryParameters(\n            final @NonNull Map<String, List<String>> parameters\n        ) {\n            this.queryParameters = deepCopy(parameters);\n            return this;\n        }\n\n        /**\n         * Adds a query parameter to the request\n         * @param name parameter name\n         * @param value parameter value\n         * @return this Builder\n         */", "        public Builder setQueryParameters(\n            final @NonNull Map<String, List<String>> parameters\n        ) {\n            this.queryParameters = deepCopy(parameters);\n            return this;\n        }\n\n        /**\n         * Adds a query parameter to the request\n         * @param name parameter name\n         * @param value parameter value\n         * @return this Builder\n         */", "        public Builder addQueryParameter(\n                final @NonNull String name,\n                final @NonNull String value\n        ) {\n            return addQueryParameter(name, Arrays.asList(value));\n        }\n\n        /**\n         * Adds a query parameter to the request\n         * @param name parameter name\n         * @param values parameter values\n         * @return this Builder\n         */", "        public Builder addQueryParameter(\n                final @NonNull String name,\n                final @NonNull List<String> values\n        ) {\n            this.queryParameters.computeIfAbsent(name, k -> new ArrayList<>()).addAll(values);\n            return this;\n        }\n\n        /**\n         * Sets a query parameter to the request\n         * @param name parameter name\n         * @param value parameter value\n         * @return this Builder\n         */", "        public Builder setQueryParameter(\n                final @NonNull String name,\n                final @NonNull String value\n        ) {\n            return setQueryParameter(name, Arrays.asList(value));\n        }\n\n        /**\n         * Sets a query parameter to the request\n         * @param name parameter name\n         * @param values parameter values\n         * @return this Builder\n         */", "        public Builder setQueryParameter(\n                final @NonNull String name,\n                final @NonNull List<String> values\n        ) {\n            this.queryParameters.put(name, new ArrayList<>(values));\n            return this;\n        }\n\n        /**\n         * Removes a query parameter from the request\n         * @param name parameter name\n         * @return this Builder\n         */", "        public Builder removeQueryParameter(\n                final @NonNull String name\n        ) {\n            this.queryParameters.remove(name);\n            return this;\n        }\n\n        /**\n         * Sets the headers in the request\n         * @param headers headers to set in the request\n         * @return this Builder\n         */", "        public Builder setHeaders(\n                final @NonNull Map<String, List<String>> headers\n        ) {\n            this.headers = deepCopy(headers);\n            return this;\n        }\n\n        /**\n         * Adds a header to the request\n         * @param name header name\n         * @param value header value\n         * @return this Builder\n         */", "        public Builder addHeader(\n                final @NonNull String name,\n                final @NonNull String value\n        ) {\n            return addHeader(name, Arrays.asList(value));\n        }\n\n        /**\n         * Adds a header to the request\n         * @param name header name\n         * @param values header values\n         * @return this Builder\n         */", "        public Builder addHeader(\n                final @NonNull String name,\n                final @NonNull List<String> values\n        ) {\n            this.headers.computeIfAbsent(name, k -> new ArrayList<>()).addAll(values);\n            return this;\n        }\n\n        /**\n         * Sets a header in the request\n         * @param name header name\n         * @param value header value\n         * @return this Builder\n         */", "        public Builder setHeader(\n                final @NonNull String name,\n                final @NonNull String value\n        ) {\n            return setHeader(name, Arrays.asList(value));\n        }\n\n        /**\n         * Sets a header in the request\n         * @param name header name\n         * @param values header values\n         * @return this Builder\n         */", "        public Builder setHeader(\n                final @NonNull String name,\n                final @NonNull List<String> values\n        ) {\n            this.headers.put(name, new ArrayList<>(values));\n            return this;\n        }\n\n        /**\n        `* Removes a header from the request\n         * @param name header name\n         * @return this Builder\n         */", "        public Builder removeHeader(\n                final @NonNull String name\n        ) {\n            this.headers.remove(name);\n            return this;\n        }\n\n        /**\n         * Sets the request payload\n         * @param payload InputStream containing the request payload\n         * @return this Builder\n         */", "        public Builder setPayload(InputStream payload) {\n            this.payload = payload;\n            return this;\n        }\n\n        /**\n         * Sets the request payload, serializing it to JSON\n         * @param payload object to serialize to JSON\n         * @param <Payload> type of the object to serialize to JSON\n         * @return this Builder\n         */\n        public <Payload> Builder setJsonPayload(Payload payload) {", "            if (payload != null) {\n                setHeader(\"Content-Type\", \"application/json\");\n            }\n\n            setPayload(serialize(payload));\n\n            return this;\n        }\n\n        /**\n         * Sets the request payload, serializing it to JSON\n         * @param payload JSON TreeNode to serialize\n         * @return this Builder\n         */", "        public Builder setTreeNodePayload(TreeNode payload) {\n\n            if (payload != null) {\n                setHeader(\"Content-Type\", \"application/json\");\n            }\n\n            setPayload(serialize(payload));\n\n            return this;\n        }\n\n        @SneakyThrows\n        private <Payload> ByteArrayInputStream serialize(Payload payload) {\n            return (payload == null) ? null :\n                new ByteArrayInputStream(mapper.writeValueAsBytes(payload));\n        }\n\n        /**\n         * Sets host, port, path and query parameters from a URL\n         * @param url URL to obtain host, port, path and query parameters from\n         * @return this Builder\n         */", "        public Builder setUrl(final @NonNull URL url) {\n            return setUri(URI.create(url.toString()));\n        }\n\n        /**\n         * Sets host, port, path and query parameters from a URI\n         * @param uri URI to obtain host, port, path and query parameters from\n         * @return this Builder\n         */\n        public Builder setUri(final @NonNull URI uri) {\n            return this\n                .setHost(uri.getHost())\n                .setPort(uri.getPort())\n                .setPath(uri.getPath())\n                .setQueryParameters(\n                    Optional.ofNullable(uri.getRawQuery())\n                        .map(query -> SdkHttpUtils.uriParams(uri))\n                        .orElseGet(() -> new HashMap<>())\n                );\n        }\n\n        /**\n         * Copies the values from another ApiGatewayRequest\n         * @param request ApiGatewayRequest to copy from\n         * @return this Builder\n         */", "        public Builder setUri(final @NonNull URI uri) {\n            return this\n                .setHost(uri.getHost())\n                .setPort(uri.getPort())\n                .setPath(uri.getPath())\n                .setQueryParameters(\n                    Optional.ofNullable(uri.getRawQuery())\n                        .map(query -> SdkHttpUtils.uriParams(uri))\n                        .orElseGet(() -> new HashMap<>())\n                );\n        }\n\n        /**\n         * Copies the values from another ApiGatewayRequest\n         * @param request ApiGatewayRequest to copy from\n         * @return this Builder\n         */", "        public Builder copyFrom(final @NonNull ApiGatewayRequest request) {\n            return setMapper(request.getMapper())\n                    .setHost(request.getHost())\n                    .setPort(request.getPort())\n                    .setMethod(request.getMethod())\n                    .setPath(request.getPath())\n                    .setQueryParameters(request.getQueryParameters())\n                    .setHeaders(request.getHeaders())\n                    .setPayload(request.getPayload());\n        }\n\n        /**\n         * Builds an ApiGatewayRequest\n         * @return an ApiGatewayRequest\n         */", "        public ApiGatewayRequest build() {\n            return new ApiGatewayRequest(\n                mapper,\n                getHost(),\n                getPort(),\n                getMethod(),\n                getPath(),\n                getApiKey(),\n                getQueryParameters(),\n                getHeaders(),\n                getPayload()\n            );\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/rdelfino/apigateway/client/ApiGatewayAsyncClient.java", "chunked_list": ["package org.rdelfino.apigateway.client;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.NonNull;\nimport org.reactivestreams.Publisher;\nimport org.reactivestreams.Subscriber;\nimport org.reactivestreams.Subscription;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;", "import org.reactivestreams.Subscription;\nimport software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;\nimport software.amazon.awssdk.core.async.AsyncRequestBody;\nimport software.amazon.awssdk.http.ContentStreamProvider;\nimport software.amazon.awssdk.http.SdkHttpFullRequest;\nimport software.amazon.awssdk.http.SdkHttpResponse;\nimport software.amazon.awssdk.http.async.AsyncExecuteRequest;\nimport software.amazon.awssdk.http.async.SdkAsyncHttpClient;\nimport software.amazon.awssdk.http.async.SdkAsyncHttpResponseHandler;\nimport software.amazon.awssdk.http.async.SdkHttpContentPublisher;", "import software.amazon.awssdk.http.async.SdkAsyncHttpResponseHandler;\nimport software.amazon.awssdk.http.async.SdkHttpContentPublisher;\nimport software.amazon.awssdk.regions.Region;\n\nimport java.nio.ByteBuffer;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.concurrent.CompletableFuture;\n", "import java.util.concurrent.CompletableFuture;\n\n/**\n * ApiGatewayAsyncClient is a client for the AWS API Gateway that uses the asynchronous request processing model\n *\n * Example:\n * <pre>\n *\n *     ///////////////\n *     // Initialization", " *     ///////////////\n *     // Initialization\n *     //\n *\n *     AwsCredentialsProvider credentialsProvider = obtainCredentialsProvider();\n *\n *     SdkAsyncHttpClient httpClient = obtainAsyncHttpClient();\n *         // ex:  NettyNioAsyncHttpClient.builder().connectionTimeout(Duration.ofSeconds(10)).build();\n *\n *     ApiGatewayAsyncClient client = ApiGatewayAsyncClient.builder()", " *\n *     ApiGatewayAsyncClient client = ApiGatewayAsyncClient.builder()\n *         .httpClient(httpClient)\n *         .credentialsProvider(credentialsProvider)\n *         .signingRegion(Region.US_WEST_2)\n *         .build();\n *\n *     ///////////////\n *     // usage\n *     //", " *     // usage\n *     //\n *\n *     Item item = new Item();\n *\n *     ApiGatewayRequest request =\n *         ApiGatewayRequest.builder(URI.create(\"https://api.example.com/v1/items\"))\n *             .setMethod(\"PUT\")\n *             .setQueryParameter(\"id\", \"123\")\n *             .setJsonPayload(item)", " *             .setQueryParameter(\"id\", \"123\")\n *             .setJsonPayload(item)\n *         build();\n *\n *     CompletableFuture<ApiGatewayResponse> futureResponse = client.invoke(request);\n *\n *     ApiGatewayResponse response = futureResponse.join();\n *\n *     Item createdItem = response.readObject(Item.class);\n *", " *     Item createdItem = response.readObject(Item.class);\n *\n * </pre>\n */\npublic class ApiGatewayAsyncClient extends SignedRequestsHandler {\n\n    private static final List<String> EMPTY_CONTENT_LENGTH = List.of(\"-1\");\n\n    @Getter\n    final SdkAsyncHttpClient httpClient;\n\n    @Builder\n    ApiGatewayAsyncClient(\n        final @NonNull SdkAsyncHttpClient httpClient,\n        final AwsCredentialsProvider credentialsProvider,\n        final Region region\n    ) {\n        this(\n            SignedRequestFactory.builder()\n                .signingRegion(region)\n                .credentialsProvider(credentialsProvider)\n            .build(),\n            httpClient\n        );\n    }\n\n    ApiGatewayAsyncClient(\n            final SignedRequestFactory signedRequestFactory,\n            final @NonNull SdkAsyncHttpClient httpClient\n    ) {\n        super(signedRequestFactory);\n        this.httpClient = httpClient;\n    }\n\n    /**\n     * Invoke the API Gateway asynchronously\n     * @param apiGatewayRequest ApiGatewayRequest\n     * @return CompletableFuture from which to obtain the response\n     */\n    public CompletableFuture<ApiGatewayResponse> invoke(\n        final @NonNull ApiGatewayRequest apiGatewayRequest\n    ) {\n\n        final SdkHttpFullRequest request = signedRequestFactory.create(apiGatewayRequest);\n\n        final AsyncRequestBody payloadBody =\n                AsyncRequestBody.fromByteBuffer(\n                    request.contentStreamProvider()\n                        .map(ContentStreamProvider::newStream)\n                        .map(Buffer::from)\n                        .map(Buffer::asByteBuffer)\n                        .orElseGet(() -> ByteBuffer.wrap(new byte[0]))\n                );\n\n        final AsyncResponseHandler responseHandler =\n                new AsyncResponseHandler(apiGatewayRequest.getMapper());\n\n        final AsyncExecuteRequest executeRequest =\n            AsyncExecuteRequest.builder()\n                .fullDuplex(false)\n                .request(request)\n                .responseHandler(responseHandler)\n                .requestContentPublisher(\n                    new SdkHttpContentPublisher() {\n                        @Override\n                        public Optional<Long> contentLength() {\n                            return payloadBody.contentLength();\n                        }\n\n                        @Override", "                        public void subscribe(Subscriber<? super ByteBuffer> s) {\n                            payloadBody.subscribe(s);\n                        }\n                    }\n                )\n            .build();\n\n        return httpClient.execute(executeRequest)\n                .thenCombine(\n                    responseHandler.future,\n                    (v, response) -> response\n                );\n    }\n\n    private static class AsyncResponseHandler implements SdkAsyncHttpResponseHandler, Subscriber<ByteBuffer> {\n\n        final ObjectMapper mapper;\n\n        AsyncResponseHandler(final ObjectMapper mapper) {\n            this.mapper = mapper;\n        }\n\n        private String statusText;\n        private int statusCode;\n        private Map<String, List<String>> headers;\n        private boolean isSuccessful;\n        private Subscription subscription;\n\n        int remainingBytes = -1;\n\n        private Buffer buffer = new Buffer(256);\n\n        final CompletableFuture<ApiGatewayResponse> future = new CompletableFuture<>();\n\n        @Override", "        public void onSubscribe(final Subscription subscription) {\n            this.subscription = subscription;\n            if (remainingBytes > 0) {\n                subscription.request(remainingBytes);\n            }\n        }\n\n        @Override\n        public void onHeaders(SdkHttpResponse sdkHttpResponse) {\n            this.statusText = sdkHttpResponse.statusText().orElse(null);\n            this.statusCode = sdkHttpResponse.statusCode();\n            this.isSuccessful = sdkHttpResponse.isSuccessful();\n            this.headers = sdkHttpResponse.headers();\n\n            this.remainingBytes = Integer.parseInt(\n                headers.getOrDefault(\"Content-Length\", EMPTY_CONTENT_LENGTH).get(0)\n            );\n        }\n\n        @Override", "        public void onHeaders(SdkHttpResponse sdkHttpResponse) {\n            this.statusText = sdkHttpResponse.statusText().orElse(null);\n            this.statusCode = sdkHttpResponse.statusCode();\n            this.isSuccessful = sdkHttpResponse.isSuccessful();\n            this.headers = sdkHttpResponse.headers();\n\n            this.remainingBytes = Integer.parseInt(\n                headers.getOrDefault(\"Content-Length\", EMPTY_CONTENT_LENGTH).get(0)\n            );\n        }\n\n        @Override", "        public void onStream(Publisher<ByteBuffer> contentPublisher) {\n            contentPublisher.subscribe(this);\n        }\n\n        @Override\n        public void onNext(ByteBuffer byteBuffer) {\n            remainingBytes -= byteBuffer.limit();\n            buffer.write(byteBuffer.array(), 0, byteBuffer.limit());\n            if (remainingBytes > 0) {\n                subscription.request(remainingBytes);\n            }\n        }\n\n        @Override", "            if (remainingBytes > 0) {\n                subscription.request(remainingBytes);\n            }\n        }\n\n        @Override\n        public void onError(Throwable error) {\n            future.completeExceptionally(error);\n        }\n\n        @Override", "        public void onComplete() {\n            future.complete(\n                SimpleApiGatewayResponse.builder()\n                    .objectMapper(mapper)\n                    .statusText(statusText)\n                    .statusCode(statusCode)\n                    .successful(isSuccessful)\n                    .bodyContent(buffer.asInputStream())\n                .build()\n            );\n        }\n    }\n}\n"]}
