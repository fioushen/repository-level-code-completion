{"filename": "it.tests/src/main/java/work/noice/it/tests/GetPageIT.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.it.tests;\n\nimport com.adobe.cq.testing.client.CQClient;", "\nimport com.adobe.cq.testing.client.CQClient;\nimport com.adobe.cq.testing.junit.rules.CQAuthorPublishClassRule;\nimport com.adobe.cq.testing.junit.rules.CQRule;\nimport com.adobe.cq.testing.junit.rules.Page;\nimport org.apache.sling.testing.clients.ClientException;\nimport org.apache.sling.testing.clients.SlingHttpResponse;\nimport org.junit.*;\n\n", "\n\n/**\n * Test that some paths exist out-of-the-box on the author service. This test\n * showcases some <a\n * href=\"https://github.com/adobe/aem-testing-clients/wiki/Best-practices\">best\n * practices</a> of the <a\n * href=\"https://github.com/adobe/aem-testing-clients\">AEM Testing Clients</a>.\n */\npublic class GetPageIT {\n\n    // The CQAuthorClassRule represents an author service. The rule will read\n    // the hostname and port of the author service from the system properties\n    // passed to the tests.@ClassRule\n\n    @ClassRule", " */\npublic class GetPageIT {\n\n    // The CQAuthorClassRule represents an author service. The rule will read\n    // the hostname and port of the author service from the system properties\n    // passed to the tests.@ClassRule\n\n    @ClassRule\n    public static final CQAuthorPublishClassRule cqBaseClassRule = new CQAuthorPublishClassRule();\n\n    // CQRule decorates your test and adds additional functionality on top of\n    // it, like session stickyness, test filtering and identification of the\n    // test on the remote service.\n\n    @Rule", "    public static final CQAuthorPublishClassRule cqBaseClassRule = new CQAuthorPublishClassRule();\n\n    // CQRule decorates your test and adds additional functionality on top of\n    // it, like session stickyness, test filtering and identification of the\n    // test on the remote service.\n\n    @Rule\n    public CQRule cqBaseRule = new CQRule(cqBaseClassRule.authorRule, cqBaseClassRule.publishRule);\n\n    static CQClient adminAuthor;\n\n    static CQClient adminPublish;\n\n    // Thanks to the CQAuthorClassRule, we can create two CQClient instances\n    // bound to the admin user on both the author and publish service.\n\n    @BeforeClass", "    public static void beforeClass() throws ClientException {\n        adminAuthor = cqBaseClassRule.authorRule.getAdminClient(CQClient.class);\n        adminPublish = cqBaseClassRule.publishRule.getAdminClient(CQClient.class);\n    }\n\n    /**\n     * Verifies that the homepage exists on author\n     */\n    @Test\n    public void testHomePageAuthor() throws ClientException {\n        adminAuthor.doGet(\"/\", 200);\n    }\n\n    /**\n     * Verifies that the sites console exists on author\n     */\n    @Test", "    public void testHomePageAuthor() throws ClientException {\n        adminAuthor.doGet(\"/\", 200);\n    }\n\n    /**\n     * Verifies that the sites console exists on author\n     */\n    @Test\n    public void testSitesAuthor() throws ClientException {\n        adminAuthor.doGet(\"/sites.html\", 200);\n    }\n\n    /**\n     * Verifies that the assets console exists on author\n     */\n    @Test", "    public void testSitesAuthor() throws ClientException {\n        adminAuthor.doGet(\"/sites.html\", 200);\n    }\n\n    /**\n     * Verifies that the assets console exists on author\n     */\n    @Test\n    public void testAssetsAuthor() throws ClientException {\n        adminAuthor.doGet(\"/assets.html\", 200);\n    }\n\n    /**\n     * Verifies that the projects console exists on author\n     */\n    @Test", "    public void testAssetsAuthor() throws ClientException {\n        adminAuthor.doGet(\"/assets.html\", 200);\n    }\n\n    /**\n     * Verifies that the projects console exists on author\n     */\n    @Test\n    public void testProjectsAuthor() throws ClientException {\n        adminAuthor.doGet(\"/projects.html\", 200);\n    }\n\n}\n", "    public void testProjectsAuthor() throws ClientException {\n        adminAuthor.doGet(\"/projects.html\", 200);\n    }\n\n}\n"]}
{"filename": "it.tests/src/main/java/work/noice/it/tests/CreatePageIT.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.it.tests;\n\nimport com.adobe.cq.testing.client.CQClient;", "\nimport com.adobe.cq.testing.client.CQClient;\nimport com.adobe.cq.testing.junit.assertion.CQAssert;\nimport com.adobe.cq.testing.junit.rules.CQAuthorClassRule;\nimport com.adobe.cq.testing.junit.rules.CQRule;\nimport com.adobe.cq.testing.junit.rules.Page;\nimport org.junit.BeforeClass;\nimport org.junit.ClassRule;\nimport org.junit.Rule;\nimport org.junit.Test;", "import org.junit.Rule;\nimport org.junit.Test;\n\nimport static java.util.concurrent.TimeUnit.MINUTES;\n\n/**\n * Test that a page can be successfully created on the author instance. This\n * test showcases some <a\n * href=\"https://github.com/adobe/aem-testing-clients/wiki/Best-practices\">best\n * practices</a> of the <a", " * href=\"https://github.com/adobe/aem-testing-clients/wiki/Best-practices\">best\n * practices</a> of the <a\n * href=\"https://github.com/adobe/aem-testing-clients\">AEM Testing Clients</a>.\n */\npublic class CreatePageIT {\n\n    private static final long TIMEOUT = MINUTES.toMillis(3);\n\n    // The CQAuthorClassRule represents an author service. The rule will read\n    // the hostname and port of the author service from the system properties\n    // passed to the tests.\n\n    @ClassRule", "    public static final CQAuthorClassRule cqBaseClassRule = new CQAuthorClassRule();\n\n    // CQRule decorates your test and adds additional functionality on top of\n    // it, like session stickyness, test filtering and identification of the\n    // test on the remote service.\n\n    @Rule\n    public CQRule cqBaseRule = new CQRule(cqBaseClassRule.authorRule);\n\n    // Page will create a test page with a random name and it will make sure\n    // that the page is removed at the end of every test execution. By using a\n    // random name, your test will not conflict with any other test running on\n    // the same instance. By removing the page at the end of the test execution,\n    // you are not going to leave any clutter on the instance under test.\n\n    @Rule", "    public Page root = new Page(cqBaseClassRule.authorRule);\n\n    static CQClient adminAuthor;\n\n    // Thanks to the CQAuthorClassRule, we can create a CQClient bound to the\n    // admin user on the author instance.\n\n    @BeforeClass\n    public static void beforeClass() {\n        adminAuthor = cqBaseClassRule.authorRule.getAdminClient(CQClient.class);\n    }\n\n    @Test", "    public static void beforeClass() {\n        adminAuthor = cqBaseClassRule.authorRule.getAdminClient(CQClient.class);\n    }\n\n    @Test\n    public void testCreatePage() throws InterruptedException {\n\n        // Assert that the page (created with the Page rule above) exists on the\n        // admin instance. Under the hood, this assertion implements a\n        // retry-loop with a timeout. The retry-loop prevents your test from\n        // failing due to the eventual consistency model of the persistence\n        // layer, and the timeout from hanging forever in case an error occurs\n        // and a page can't be created in time.\n\n        CQAssert.assertCQPageExistsWithTimeout(adminAuthor, root.getPath(), TIMEOUT, 500);\n    }\n\n}\n"]}
{"filename": "it.tests/src/main/java/work/noice/it/tests/HtmlUnitClient.java", "chunked_list": ["/*\n * Copyright 2020 Adobe Systems Incorporated\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software", " *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage work.noice.it.tests;\n\nimport com.adobe.cq.testing.client.CQClient;", "\nimport com.adobe.cq.testing.client.CQClient;\nimport com.gargoylesoftware.htmlunit.DefaultCssErrorHandler;\nimport com.gargoylesoftware.htmlunit.WebClient;\nimport com.gargoylesoftware.htmlunit.WebClientOptions;\nimport com.gargoylesoftware.htmlunit.html.DomNode;\nimport com.gargoylesoftware.htmlunit.html.HtmlPage;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.sling.testing.clients.ClientException;\nimport org.apache.sling.testing.clients.SlingClientConfig;", "import org.apache.sling.testing.clients.ClientException;\nimport org.apache.sling.testing.clients.SlingClientConfig;\nimport org.slf4j.LoggerFactory;\nimport org.w3c.dom.Node;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.ArrayList;", "import java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport static org.junit.Assert.fail;\n\n/**\n * AEM client that maintains a WebClient instance from HTMLUnit framework", "/**\n * AEM client that maintains a WebClient instance from HTMLUnit framework\n */\npublic class HtmlUnitClient extends CQClient {\n\n\n    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(HtmlUnitClient.class);\n\n    private final WebClient webClient = new WebClient();\n\n    /** Extracts references to external resources used by the specified page.\n     * This method extracts references from script, img, meta and link tags.\n     * @param path path to the page.\n     * @return list of URIs resolved against the pages baseURL\n     * @throws IOException when IO error occurs\n     * @throws URISyntaxException if malformed URL reference is found.\n     */\n    public List<URI> getResourceRefs(String path) throws IOException, URISyntaxException {\n        HtmlPage page = getPage(path, false);\n        List<URI> result = new ArrayList<>();\n        result.addAll(getRefs(page, \"script\", \"src\"));\n        result.addAll(getRefs(page, \"img\", \"src\"));\n        result.addAll(getRefs(page, \"meta\", \"href\"));\n        result.addAll(getRefs(page, \"link\", \"href\"));\n        result.addAll(getCoreComponentImageRenditions(page));\n        return result;\n    }\n\n    /**\n     * Loads html page specified by path.\n     * @param path path to the page\n     * @param javaScriptEnabled whether to execute javascript\n     * @return parsed page.\n     * @throws IOException if IO error occurs.\n     */", "    public HtmlPage getPage(String path, boolean javaScriptEnabled) throws IOException {\n        WebClientOptions options = webClient.getOptions();\n        boolean wasJsEnabled = options.isJavaScriptEnabled();\n        try {\n            options.setJavaScriptEnabled(javaScriptEnabled);\n            return getPage(webClient, getUrl(path).toURL());\n        } finally {\n            options.setJavaScriptEnabled(wasJsEnabled);\n        }\n    }\n\n    //*********************************************\n    // Creation\n    //*********************************************\n\n    public HtmlUnitClient(CloseableHttpClient http, SlingClientConfig config) throws ClientException {\n        super(http, config);\n        webClient.setCredentialsProvider(this.getCredentialsProvider());\n    }\n\n    public HtmlUnitClient(URI url, String user, String password) throws ClientException {\n        super(url, user, password);\n        webClient.setCredentialsProvider(this.getCredentialsProvider());\n    }\n\n    @Override", "    public void close() throws IOException {\n        try {\n            webClient.close();\n        } finally {\n            super.close();\n        }\n    }\n\n    //*********************************************\n    // Internals\n    //*********************************************\n\n    private static List<URI> getRefs(HtmlPage page, String tag, String refAttr) throws URISyntaxException {\n        URI baseUri = new URI(page.getBaseURI());\n        List<URI> result = new ArrayList<>();", "        for (DomNode child : page.getElementsByTagName(tag)) {\n            URI uriRef = getNamedItemAsUri(child, refAttr);\n            if (uriRef != null) {\n                URI uri = baseUri.resolve(uriRef);\n                result.add(uri);\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Extract all image core components and their references from the page.\n     * @param page the page to scan\n     * @return all renditions of all image core components\n     * @throws URISyntaxException\n     */\n    private static List<URI> getCoreComponentImageRenditions (HtmlPage page) throws URISyntaxException {\n        URI baseUri = new URI(page.getBaseURI());\n        List<URI> result = new ArrayList<>();\n\n        // detect images core components based on the CSS class name\n        List<DomNode> coreComponents = page.getByXPath(\"//div[contains(@class, 'cmp-image')]\");", "        for (DomNode child:  coreComponents) {\n            String src = null;\n            String width = null;\n            if (child.getAttributes().getNamedItem(\"data-cmp-src\") != null) {\n                src = child.getAttributes().getNamedItem(\"data-cmp-src\").getNodeValue();\n            }\n            if (child.getAttributes().getNamedItem(\"data-cmp-widths\") != null) {\n                width = child.getAttributes().getNamedItem(\"data-cmp-widths\").getNodeValue();\n            }\n            if (src != null && width != null) {\n                String[] widths = width.split(\",\");", "            if (src != null && width != null) {\n                String[] widths = width.split(\",\");\n                for (String w: widths) {\n                    String ref = src.replace(\"{.width}\", \".\"+w);\n                    result.add(baseUri.resolve(ref));\n                }\n            } else if (src != null && width == null) {\n                // happens with SVG and GIFs\n                String ref = src.replace(\"{.width}\", \"\");\n                result.add(baseUri.resolve(ref));\n            }\n        }\n        return result;\n    }\n\n\n    /**\n     *  Loads requested page while suppressing CSS errors (logged as warnings)\n     * @param webClient web client to use for loading\n     * @param url page URL\n     * @return loaded HtmlPage instance.\n     * @throws IOException when error occurs\n     */\n    private static HtmlPage getPage(WebClient webClient, URL url) throws IOException {\n        Logger logger = Logger.getLogger(DefaultCssErrorHandler.class.getName());\n        Level originalLevel = logger.getLevel();", "        try {\n            logger.setLevel(Level.SEVERE);\n            return webClient.getPage(url);\n        } finally {\n            logger.setLevel(originalLevel);\n        }\n    }\n\n    /**\n     * Extracts URI reference from specified element and converts it to URI\n     * This method will trigger junit assertion if refAttr value cannot be parsed as URI\n     * providing comprehensive error message.\n     * @param node - html element from which to extract reference\n     * @param refAttr - name of the attribute containing corresponding value\n     * @return refAttr value as URI or <code>null</code> if attribute does not exist\n     */\n    private static URI getNamedItemAsUri(DomNode node, String refAttr) {\n        Node src = node.getAttributes().getNamedItem(refAttr);", "        if (src == null) {\n            return null;\n        } else {\n            try {\n                String href = src.getNodeValue();\n                return new URI(href);\n            } catch (URISyntaxException e) {\n                fail(\"Invalid URI value in [\" + refAttr + \"] attribute in: [\" + node + \"].\\n\" +\n                        \"   Page URL:  [\" + node.getPage().getUrl() + \"]\\n\" +\n                        \"   XPath:     [\" + node.getCanonicalXPath() + \"]\\n\" +\n                        \"   Caused by: [\" + e.getMessage() + \"]\");\n                throw new AssertionError(); // must never happen\n            }\n        }\n    }\n}\n"]}
{"filename": "it.tests/src/main/java/work/noice/it/tests/PublishPageValidationIT.java", "chunked_list": ["/*\n *  Copyright 2020 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.it.tests;\n\nimport com.adobe.cq.testing.client.CQClient;", "\nimport com.adobe.cq.testing.client.CQClient;\nimport com.adobe.cq.testing.junit.assertion.CQAssert;\nimport com.adobe.cq.testing.junit.rules.CQAuthorClassRule;\nimport com.adobe.cq.testing.junit.rules.CQAuthorPublishClassRule;\nimport com.adobe.cq.testing.junit.rules.CQRule;\nimport com.adobe.cq.testing.junit.rules.Page;\n\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpGet;", "import org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.sling.testing.clients.ClientException;\nimport org.apache.sling.testing.clients.SlingHttpResponse;\nimport org.eclipse.jetty.client.HttpResponse;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.ClassRule;\nimport org.junit.Rule;\nimport org.junit.Test;", "import org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.Ignore;\nimport org.slf4j.LoggerFactory;\n\nimport static java.util.concurrent.TimeUnit.MINUTES;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Arrays;\nimport java.util.List;\n\n/**\n * Validates pages on publish and makes sure that the page renders completely and also\n * validates all linked resources (images, clientlibs etc).", " * Validates pages on publish and makes sure that the page renders completely and also\n * validates all linked resources (images, clientlibs etc).\n * \n */\npublic class PublishPageValidationIT {\n\n\n    // the page to test\n    private static final String HOMEPAGE = \"/\";\n\n    // list files which do return a zerobyte response body\n    private static final List<String> ZEROBYTEFILES = Arrays.asList();\n\n\n\n    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(PublishPageValidationIT.class);\n\n    @ClassRule", "    public static final CQAuthorPublishClassRule cqBaseClassRule = new CQAuthorPublishClassRule(true);\n\n    @Rule\n    public CQRule cqBaseRule = new CQRule(cqBaseClassRule.publishRule);\n\n    private static HtmlUnitClient adminPublish;\n\n    @BeforeClass\n    public static void beforeClass() throws ClientException {\n\n        adminPublish = cqBaseClassRule.publishRule.getAdminClient(CQClient.class).adaptTo(HtmlUnitClient.class);\n    }\n\n    @AfterClass", "    public static void beforeClass() throws ClientException {\n\n        adminPublish = cqBaseClassRule.publishRule.getAdminClient(CQClient.class).adaptTo(HtmlUnitClient.class);\n    }\n\n    @AfterClass\n    public static void afterClass() {\n        // As of 2022/10/13, AEM declares 'org.apache.commons.io.IOUtils.closeQuietly' as deprecated,\n        // even though the function has been un-deprecated again in version 2.9.0 of 'commons-io'\n        // (https://issues.apache.org/jira/browse/IO-504); thus a try-catch is used instead.\n        try {\n            adminPublish.close();\n        } catch (IOException ignored) {}\n    }\n\n\n\n    @Test\n    @Ignore", "        try {\n            adminPublish.close();\n        } catch (IOException ignored) {}\n    }\n\n\n\n    @Test\n    @Ignore\n    public void validateHomepage() throws ClientException, IOException, URISyntaxException {\n        String path = HOMEPAGE;\n        verifyPage(adminPublish, path);\n        verifyLinkedResources(adminPublish,path);\n\n    }\n\n\n    private static void verifyPage (HtmlUnitClient client, String path) throws ClientProtocolException, IOException {\n        URI baseURI = client.getUrl();\n        LOG.info(\"Using {} as baseURL\", baseURI.toString());\n        HttpGet get = new HttpGet(baseURI.toString() + path);\n        org.apache.http.HttpResponse validationResponse = client.execute(get);\n        assertEquals(\"Request to [\" + get.getURI().toString() + \"] does not return expected returncode 200\",\n                200, validationResponse.getStatusLine().getStatusCode());\n    }\n\n    private static void verifyLinkedResources(HtmlUnitClient client, String path) throws ClientException, IOException, URISyntaxException {\n\n        List<URI> references = client.getResourceRefs(path);\n        assertTrue(path + \" does not contain any references!\", references.size() > 0);", "    public void validateHomepage() throws ClientException, IOException, URISyntaxException {\n        String path = HOMEPAGE;\n        verifyPage(adminPublish, path);\n        verifyLinkedResources(adminPublish,path);\n\n    }\n\n\n    private static void verifyPage (HtmlUnitClient client, String path) throws ClientProtocolException, IOException {\n        URI baseURI = client.getUrl();\n        LOG.info(\"Using {} as baseURL\", baseURI.toString());\n        HttpGet get = new HttpGet(baseURI.toString() + path);\n        org.apache.http.HttpResponse validationResponse = client.execute(get);\n        assertEquals(\"Request to [\" + get.getURI().toString() + \"] does not return expected returncode 200\",\n                200, validationResponse.getStatusLine().getStatusCode());\n    }\n\n    private static void verifyLinkedResources(HtmlUnitClient client, String path) throws ClientException, IOException, URISyntaxException {\n\n        List<URI> references = client.getResourceRefs(path);\n        assertTrue(path + \" does not contain any references!\", references.size() > 0);", "        for (URI ref : references ) {\n            if (isSameOrigin(client.getUrl(), ref)) {\n                LOG.info(\"verifying linked resource {}\", ref.toString());\n                SlingHttpResponse response = client.doGet(ref.getPath());\n                int statusCode = response.getStatusLine().getStatusCode();\n                int responseSize = response.getContent().length();\n                assertEquals(\"Unexpected status returned from [\" + ref + \"]\", 200, statusCode);\n                if (! ZEROBYTEFILES.stream().anyMatch(s -> ref.getPath().startsWith(s))) {\n                    if (responseSize == 0) {\n                        LOG.warn(\"Empty response body from [\" + ref.getPath() + \"], please validate if this is correct\");\n                    }\n                }\n\n            } else {\n                LOG.info(\"skipping linked resource from another domain {}\", ref.toString());\n            }\n        }\n    }\n\n    /** Checks if two URIs have the same origin.\n     *\n     * @param uri1 first URI\n     * @param uri2 second URI\n     * @return true if two URI come from the same host, port and use the same scheme\n     */\n    private static boolean isSameOrigin(URI uri1, URI uri2) {", "                    if (responseSize == 0) {\n                        LOG.warn(\"Empty response body from [\" + ref.getPath() + \"], please validate if this is correct\");\n                    }\n                }\n\n            } else {\n                LOG.info(\"skipping linked resource from another domain {}\", ref.toString());\n            }\n        }\n    }\n\n    /** Checks if two URIs have the same origin.\n     *\n     * @param uri1 first URI\n     * @param uri2 second URI\n     * @return true if two URI come from the same host, port and use the same scheme\n     */\n    private static boolean isSameOrigin(URI uri1, URI uri2) {", "        if (!uri1.getScheme().equals(uri2.getScheme())) {\n            return false;\n        } else return uri1.getAuthority().equals(uri2.getAuthority());\n    }\n\n\n}\n"]}
{"filename": "core/src/test/java/work/noice/core/listeners/SimpleResourceListenerTest.java", "chunked_list": ["/*\n *  Copyright 2018 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.listeners;\n\nimport static org.junit.jupiter.api.Assertions.assertAll;", "\nimport static org.junit.jupiter.api.Assertions.assertAll;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.apache.sling.api.resource.observation.ResourceChange;\nimport org.apache.sling.api.resource.observation.ResourceChange.ChangeType;\nimport org.junit.jupiter.api.Test;", "import org.apache.sling.api.resource.observation.ResourceChange.ChangeType;\nimport org.junit.jupiter.api.Test;\n\nimport uk.org.lidalia.slf4jext.Level;\nimport uk.org.lidalia.slf4jtest.LoggingEvent;\nimport uk.org.lidalia.slf4jtest.TestLogger;\nimport uk.org.lidalia.slf4jtest.TestLoggerFactory;\n\nclass SimpleResourceListenerTest {\n", "class SimpleResourceListenerTest {\n\n    private SimpleResourceListener fixture = new SimpleResourceListener();\n\n    private TestLogger logger = TestLoggerFactory.getTestLogger(fixture.getClass());\n\n    @Test\n    void handleEvent() {\n        \n        ResourceChange change = new ResourceChange(ChangeType.ADDED,\"/content/test\", false);", "        \n        ResourceChange change = new ResourceChange(ChangeType.ADDED,\"/content/test\", false);\n        \n        fixture.onChange(Arrays.asList(change));\n\n        List<LoggingEvent> events = logger.getLoggingEvents();\n        assertEquals(1, events.size());\n        LoggingEvent event = events.get(0);\n\n        assertAll(", "\n        assertAll(\n                () -> assertEquals(Level.DEBUG, event.getLevel()),\n                () -> assertEquals(3, event.getArguments().size()),\n                () -> assertEquals(ChangeType.ADDED, event.getArguments().get(0)),\n                () -> assertEquals(\"/content/test\", event.getArguments().get(1)),\n                () -> assertEquals(Boolean.FALSE,event.getArguments().get(2))\n        );\n    }\n}", "    }\n}"]}
{"filename": "core/src/test/java/work/noice/core/filters/LoggingFilterTest.java", "chunked_list": ["/*\n *  Copyright 2018 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.filters;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.util.List;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\n\nimport org.apache.sling.testing.mock.sling.servlet.MockRequestPathInfo;\nimport org.apache.sling.testing.mock.sling.servlet.MockSlingHttpServletRequest;", "import org.apache.sling.testing.mock.sling.servlet.MockRequestPathInfo;\nimport org.apache.sling.testing.mock.sling.servlet.MockSlingHttpServletRequest;\nimport org.apache.sling.testing.mock.sling.servlet.MockSlingHttpServletResponse;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\nimport io.wcm.testing.mock.aem.junit5.AemContext;\nimport io.wcm.testing.mock.aem.junit5.AemContextExtension;\nimport uk.org.lidalia.slf4jext.Level;", "import io.wcm.testing.mock.aem.junit5.AemContextExtension;\nimport uk.org.lidalia.slf4jext.Level;\nimport uk.org.lidalia.slf4jtest.LoggingEvent;\nimport uk.org.lidalia.slf4jtest.TestLogger;\nimport uk.org.lidalia.slf4jtest.TestLoggerFactory;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\n\n@ExtendWith(AemContextExtension.class)", "\n@ExtendWith(AemContextExtension.class)\nclass LoggingFilterTest {\n\n    private LoggingFilter fixture = new LoggingFilter();\n\n    private TestLogger logger = TestLoggerFactory.getTestLogger(fixture.getClass());\n\n    @BeforeEach\n    void setup() {", "    @BeforeEach\n    void setup() {\n        TestLoggerFactory.clear();\n    }\n\n\n    @Test\n    void doFilter(AemContext context) throws IOException, ServletException {\n        MockSlingHttpServletRequest request = context.request();\n        MockSlingHttpServletResponse response = context.response();", "        MockSlingHttpServletRequest request = context.request();\n        MockSlingHttpServletResponse response = context.response();\n\n        MockRequestPathInfo requestPathInfo = (MockRequestPathInfo) request.getRequestPathInfo();\n        requestPathInfo.setResourcePath(\"/content/test\");\n        requestPathInfo.setSelectorString(\"selectors\");\n\n        fixture.init(mock(FilterConfig.class));\n        fixture.doFilter(request, response, mock(FilterChain.class));\n        fixture.destroy();", "        fixture.doFilter(request, response, mock(FilterChain.class));\n        fixture.destroy();\n\n        List<LoggingEvent> events = logger.getLoggingEvents();\n        assertEquals(1, events.size());\n        LoggingEvent event = events.get(0);\n        assertEquals(Level.DEBUG, event.getLevel());\n        assertEquals(2, event.getArguments().size());\n        assertEquals(\"/content/test\", event.getArguments().get(0));\n        assertEquals(\"selectors\", event.getArguments().get(1));", "        assertEquals(\"/content/test\", event.getArguments().get(0));\n        assertEquals(\"selectors\", event.getArguments().get(1));\n    }\n}\n"]}
{"filename": "core/src/test/java/work/noice/core/schedulers/SimpleScheduledTaskTest.java", "chunked_list": ["/*\n *  Copyright 2018 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.schedulers;\n\nimport java.util.List;", "\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\nimport io.wcm.testing.mock.aem.junit5.AemContextExtension;\nimport uk.org.lidalia.slf4jext.Level;\nimport uk.org.lidalia.slf4jtest.LoggingEvent;", "import uk.org.lidalia.slf4jext.Level;\nimport uk.org.lidalia.slf4jtest.LoggingEvent;\nimport uk.org.lidalia.slf4jtest.TestLogger;\nimport uk.org.lidalia.slf4jtest.TestLoggerFactory;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n@ExtendWith(AemContextExtension.class)", "\n@ExtendWith(AemContextExtension.class)\nclass SimpleScheduledTaskTest {\n\n    private SimpleScheduledTask fixture = new SimpleScheduledTask();\n\n    private TestLogger logger = TestLoggerFactory.getTestLogger(fixture.getClass());\n\n    @BeforeEach\n    void setup() {", "    @BeforeEach\n    void setup() {\n        TestLoggerFactory.clear();\n    }\n\n    @Test\n    void run() {\n        SimpleScheduledTask.Config config = mock(SimpleScheduledTask.Config.class);\n        when(config.myParameter()).thenReturn(\"parameter value\");\n", "        when(config.myParameter()).thenReturn(\"parameter value\");\n\n        fixture.activate(config);\n        fixture.run();\n\n        List<LoggingEvent> events = logger.getLoggingEvents();\n        assertEquals(1, events.size());\n        LoggingEvent event = events.get(0);\n        assertEquals(Level.DEBUG, event.getLevel());\n        assertEquals(1, event.getArguments().size());", "        assertEquals(Level.DEBUG, event.getLevel());\n        assertEquals(1, event.getArguments().size());\n        assertEquals(\"parameter value\", event.getArguments().get(0));\n    }\n}\n"]}
{"filename": "core/src/test/java/work/noice/core/models/HelloWorldModelTest.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.models;\n\nimport org.apache.commons.lang3.StringUtils;", "\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.sling.api.resource.Resource;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\nimport com.day.cq.wcm.api.Page;\nimport io.wcm.testing.mock.aem.junit5.AemContext;\nimport io.wcm.testing.mock.aem.junit5.AemContextExtension;", "import io.wcm.testing.mock.aem.junit5.AemContext;\nimport io.wcm.testing.mock.aem.junit5.AemContextExtension;\nimport work.noice.core.testcontext.AppAemContext;\n\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n/**\n * Simple JUnit test verifying the HelloWorldModel\n */", " * Simple JUnit test verifying the HelloWorldModel\n */\n@ExtendWith(AemContextExtension.class)\nclass HelloWorldModelTest {\n\n    private final AemContext context = AppAemContext.newAemContext();\n\n    private HelloWorldModel hello;\n\n    private Page page;", "\n    private Page page;\n    private Resource resource;\n\n    @BeforeEach\n    public void setup() throws Exception {\n\n        // prepare a page with a test resource\n        page = context.create().page(\"/content/mypage\");\n        resource = context.create().resource(page, \"hello\",\n            \"sling:resourceType\", \"aemgpt/components/helloworld\");\n\n        // create sling model\n        hello = resource.adaptTo(HelloWorldModel.class);\n    }\n\n    @Test\n    void testGetMessage() throws Exception {\n        // some very basic junit tests\n        String msg = hello.getMessage();\n        assertNotNull(msg);\n        assertTrue(StringUtils.contains(msg, resource.getResourceType()));\n        assertTrue(StringUtils.contains(msg, page.getPath()));\n    }\n\n}\n"]}
{"filename": "core/src/test/java/work/noice/core/testcontext/AppAemContext.java", "chunked_list": ["/*\n *  Copyright 2021 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.testcontext;\n\nimport static com.adobe.cq.wcm.core.components.testing.mock.ContextPlugins.CORE_COMPONENTS;", "\nimport static com.adobe.cq.wcm.core.components.testing.mock.ContextPlugins.CORE_COMPONENTS;\nimport static org.apache.sling.testing.mock.caconfig.ContextPlugins.CACONFIG;\n\nimport org.apache.sling.testing.mock.sling.ResourceResolverType;\n\nimport io.wcm.testing.mock.aem.junit5.AemContext;\nimport io.wcm.testing.mock.aem.junit5.AemContextBuilder;\nimport io.wcm.testing.mock.aem.junit5.AemContextCallback;\n", "import io.wcm.testing.mock.aem.junit5.AemContextCallback;\n\n/**\n * Sets up {@link AemContext} for unit tests in this application.\n */\npublic final class AppAemContext {\n\n    private AppAemContext() {\n        // static methods only\n    }\n\n    /**\n     * @return {@link AemContext}\n     */", "    public static AemContext newAemContext() {\n        return newAemContextBuilder().build();\n    }\n\n    /**\n     * @return {@link AemContextBuilder}\n     */\n    public static AemContextBuilder newAemContextBuilder() {\n        return newAemContextBuilder(ResourceResolverType.RESOURCERESOLVER_MOCK);\n    }\n\n    /**\n     * @return {@link AemContextBuilder}\n     */", "    public static AemContextBuilder newAemContextBuilder(ResourceResolverType resourceResolverType) {\n        return new AemContextBuilder()\n                .plugin(CACONFIG)\n                .plugin(CORE_COMPONENTS)\n                .afterSetUp(SETUP_CALLBACK);\n    }\n\n    /**\n     * Custom set up rules required in all unit tests.\n     */\n    private static final AemContextCallback SETUP_CALLBACK = new AemContextCallback() {\n        @Override", "        public void execute(AemContext context) {\n            // custom project initialization code for every unit test\n        }\n    };\n\n}\n"]}
{"filename": "core/src/main/java/work/noice/core/servlets/package-info.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n@Version(\"1.0\")\npackage work.noice.core.servlets;\n", "package work.noice.core.servlets;\n\nimport org.osgi.annotation.versioning.Version;"]}
{"filename": "core/src/main/java/work/noice/core/servlets/OpaxServlet.java", "chunked_list": ["package work.noice.core.servlets;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;", "import org.apache.http.HttpResponse;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.api.SlingHttpServletResponse;\nimport org.apache.sling.api.servlets.HttpConstants;\nimport org.apache.sling.api.servlets.SlingAllMethodsServlet;", "import org.apache.sling.api.servlets.HttpConstants;\nimport org.apache.sling.api.servlets.SlingAllMethodsServlet;\nimport org.osgi.framework.Constants;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport work.noice.core.beans.ChatGptRequest;\nimport work.noice.core.beans.ChatGptResponse;\nimport work.noice.core.beans.Data;", "import work.noice.core.beans.ChatGptResponse;\nimport work.noice.core.beans.Data;\nimport work.noice.core.services.OpaxService;\n\nimport javax.servlet.Servlet;\nimport java.io.IOException;\n\n@Component(immediate = true, service = Servlet.class, property = {\n        Constants.SERVICE_DESCRIPTION + \"=ChatGPT Integration\",\n        \"sling.servlet.methods=\" + HttpConstants.METHOD_POST,", "        Constants.SERVICE_DESCRIPTION + \"=ChatGPT Integration\",\n        \"sling.servlet.methods=\" + HttpConstants.METHOD_POST,\n        \"sling.servlet.paths=\" + \"/bin/chat\",\n        \"sling.servlet.extensions={\\\"json\\\"}\"\n})\npublic class OpaxServlet extends SlingAllMethodsServlet {\n\n    private static final Logger Logger = LoggerFactory.getLogger(OpaxServlet.class);\n\n    private static final String CHATGPT_API_ENDPOINT = \"https://api.openai.com/v1/chat/completions\";\n\n    private static final HttpClient client = HttpClients.createDefault();\n    private static final ObjectMapper MAPPER = new ObjectMapper();\n\n    @Reference\n    private transient OpaxService config;\n\n    @Override\n    protected void doPost(SlingHttpServletRequest request, SlingHttpServletResponse response) throws IOException {\n        String body = IOUtils.toString(request.getReader());\n        String key = config.getOpenAIAPIKey();\n\n        // return an error if key is not found", "        if (StringUtils.isBlank(key)) {\n            response.setStatus(400);\n            response.setContentType(\"application/json\");\n            response.setCharacterEncoding(\"UTF-8\");\n\n            JsonObject errorObject = new JsonObject();\n            errorObject.addProperty(\"error\", \"Open AI API Key not found\");\n\n            response.getWriter().write(errorObject.toString());\n            return;\n        }\n", "        if (StringUtils.isNotBlank(body)) {\n            String prompt = generatePrompt(body);\n            if (StringUtils.isNotBlank(prompt)) {\n                String result = generateMessage(prompt);\n                if (StringUtils.isNotBlank(result)) {\n                    JsonObject jsonObject = new JsonObject();\n                    jsonObject.addProperty(\"data\", StringEscapeUtils.escapeHtml4(result));\n                    response.setStatus(200);\n                    response.setContentType(\"application/json\");\n                    response.setCharacterEncoding(\"UTF-8\");\n\n                    response.getWriter().write(jsonObject.toString());\n                } else {\n                    response.setStatus(400);\n                    response.setContentType(\"application/json\");\n                    response.setCharacterEncoding(\"UTF-8\");\n\n                    JsonObject errorObject = new JsonObject();\n                    errorObject.addProperty(\"error\", \"Error occurred while generating message\");\n\n                    response.getWriter().write(errorObject.toString());\n                }\n            } else {\n                response.setStatus(400);\n                response.setContentType(\"application/json\");\n                response.setCharacterEncoding(\"UTF-8\");\n\n                JsonObject errorObject = new JsonObject();\n                errorObject.addProperty(\"error\", \"Invalid prompt\");\n\n                response.getWriter().write(errorObject.toString());\n            }\n        } else {\n            response.setStatus(400);\n            response.setContentType(\"application/json\");\n            response.setCharacterEncoding(\"UTF-8\");\n\n            JsonObject errorObject = new JsonObject();\n            errorObject.addProperty(\"error\", \"Empty request body\");\n\n            response.getWriter().write(errorObject.toString());\n        }\n    }\n\n    private String generateMessage(String prompt) throws IOException {\n\n        String requestBody = MAPPER.writeValueAsString(new ChatGptRequest(prompt, \"gpt-3.5-turbo\", \"user\"));\n        HttpPost request = new HttpPost(CHATGPT_API_ENDPOINT);\n        request.addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());\n\n        request.addHeader(\"Content-Type\", \"application/json\");\n        request.setEntity(new StringEntity(requestBody, \"UTF-8\"));\n        HttpResponse response = client.execute(request);\n\n        ChatGptResponse chatGptResponse = MAPPER.readValue(EntityUtils.toString(response.getEntity(), \"UTF-8\"),\n                ChatGptResponse.class);\n        String message = chatGptResponse.getChoices().get(0).getMessage().getContent();\n\n        return message;\n    }\n\n    private String generatePrompt(String data) {\n\n        Gson gson = new Gson();\n        Data jsonData = gson.fromJson(data, Data.class);\n        String content = jsonData.getDataAttributes().get(\"content\");\n        String tone = jsonData.getDataAttributes().get(\"tone\");\n        String companyName = jsonData.getDataAttributes().get(\"companyName\");\n        String product = jsonData.getDataAttributes().get(\"product\");\n        String outline = jsonData.getDataAttributes().get(\"outline\");\n        String cta = jsonData.getDataAttributes().get(\"cta\");\n        String title = jsonData.getDataAttributes().get(\"title\");\n        String audience = jsonData.getDataAttributes().get(\"audience\");\n        String name = jsonData.getDataAttributes().get(\"name\");\n        String info = jsonData.getDataAttributes().get(\"info\");\n        String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");\n        String numQuestions = jsonData.getDataAttributes().get(\"numQuestions\");\n        String description = jsonData.getDataAttributes().get(\"description\");\n        String topic = jsonData.getDataAttributes().get(\"topic\");\n        String listCount = jsonData.getDataAttributes().get(\"listCount\");\n        String productDescription = jsonData.getDataAttributes().get(\"productDescription\");\n        String companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");\n        String customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");\n        String customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");\n        String points = jsonData.getDataAttributes().get(\"points\");\n        String sentence = jsonData.getDataAttributes().get(\"sentence\");\n        String language = jsonData.getDataAttributes().get(\"language\");\n\n        String promptGuide = \"You are a copywriter AI that can write and edit existing content. You always respond in HTML format for consumption by a rich text editor. Your goal is to produce the content that is requested as instructed without ever identifying yourself or the changes you have made. It should only ever contain content that was requested:  PROMPT: \";\n\n        switch (jsonData.getTemplateId()) {\n            case \"free-prompt\":\n                return promptGuide + content;\n            case \"content-summarizer\":\n                return promptGuide + \"Summarize the following content in a \" + tone + \"tone: \" + content;\n            case \"aida-framework\":\n                return promptGuide\n                        + \"Never mention the AIDA framework. Write content using the AIDA framework, without mentioning that you are using the AIDA framework - don't mention anything about attention, etc. with the following properties: Company Name: \"\n                        + companyName + \", Product: \" + product + \", Tone: \" + tone + \".\";\n            case \"bab-framework\":\n                return promptGuide\n                        + \"Write content using the BAB (Before-After-Bridge) framework with the following properties: Company Name: \"\n                        + companyName + \", Product: \" + product + \", Tone: \" + tone + \".\";\n            case \"blog-post-conclusion-paragraph\":\n                return promptGuide\n                        + \"Write a conclusion paragraph for the following blog post using this post outline: \" + outline\n                        + \". Include a call to action: \" + cta + \". Use this tone of voice: \" + tone + \".\";\n            case \"blog-post-intro-paragraph\":\n                return promptGuide + \"Write an introduction paragraph for the following blog post title: \" + title\n                        + \". The audience is \" + audience + \". Use this tone of voice: \" + tone + \".\";\n            case \"blog-post-outline\":\n                return promptGuide + \"Write an outline for the following blog post title: \" + title\n                        + \". Use this tone of voice: \" + tone + \".\";\n            case \"company-bio\":\n                return promptGuide + \"Write a company bio for the following company name: \" + name + \". Company info: \"\n                        + info + \". Use this tone of voice: \" + tone + \".\";\n            case \"content-improver\":\n                return promptGuide + \"Improve the following content: \" + content + \". Use this tone of voice: \" + tone\n                        + \".\";\n            case \"simplify\":\n                return promptGuide + \"Explain the following content to a child at grade level \" + gradeLevel + \": \"\n                        + content + \".\";\n            case \"faq-generator\":\n                return promptGuide + \"Write \" + numQuestions + \" FAQs for the following topic: \" + topic\n                        + \". Use this tone of voice: \" + tone + \".\";\n            case \"feature-to-benefit\":\n                return promptGuide + \"Write the benefits of the features of this product description: \" + description\n                        + \". Use this tone of voice: \" + tone + \".\";\n            case \"listicle\":\n                return promptGuide + \"Write a listicle for the following topic: \" + topic + \". The list should have \"\n                        + listCount + \" items. Use this tone of voice: \" + tone + \".\";\n            case \"one-shot-blog-post\":\n                return promptGuide + \"Write a one-shot blog post for the following topic: \" + topic\n                        + \". Use this tone of voice: \" + tone + \".\";\n            case \"perfect-headline\":\n                return promptGuide + \"Write a perfect headline for the following product description: \"\n                        + productDescription + \". The company product name is \" + companyProductName\n                        + \". The customer avatar is \" + customerAvatar + \". The customer problem is \" + customerProblem\n                        + \". Use this tone of voice: \" + tone + \".\";\n            case \"persuasive-bullet-points\":\n                return promptGuide + \"Write persuasive bullet points for the following content: Company/Product Name: \"\n                        + companyProductName + \", Product Description: \" + productDescription + \", Tone: \" + tone + \".\";\n            case \"press-release\":\n                return promptGuide + \"Write a press release for the following topic: \" + topic\n                        + \". The press release should have \" + points + \" points.\";\n            case \"sentence-expander\":\n                return promptGuide + \"Expand the following sentence: \" + sentence + \". Use this tone of voice: \" + tone\n                        + \".\";\n            case \"proof-read\":\n                return promptGuide + \"Proofread the following content: \" + content + \".\";\n            case \"make-longer\":\n                return promptGuide\n                        + \"Make the following content longer by around half, maintaining the essential meaning of the original content: \"\n                        + content + \".\";\n            case \"make-shorter\":\n                return promptGuide\n                        + \"Make the following content longer by around half, maintaining the essential meaning of the original content: \"\n                        + content + \".\";\n            case \"summarize\":\n                return promptGuide + \"Summarize the following content: \" + content + \".\";\n            case \"improve-seo\":\n                return promptGuide + \"Improve the SEO of the following content: \" + content + \".\";\n            case \"improve-readability\":\n                return promptGuide + \"Improve the readability of the following content: \" + content + \".\";\n            case \"improve-clarity\":\n                return promptGuide + \"Improve the clarity of the following content: \" + content + \".\";\n            case \"improve-grammar\":\n                return promptGuide + \"Improve the grammar of the following content: \" + content + \".\";\n            case \"improve-tone\":\n                return promptGuide + \"Improve the tone of the following content: \" + content + \".\";\n            case \"improve-structure\":\n                return promptGuide + \"Improve the structure of the following content: \" + content + \".\";\n            case \"improve-flow\":\n                return promptGuide + \"Improve the flow of the following content: \" + content + \".\";\n            case \"translate\":\n                return promptGuide + \"Translate the following content into \" + language + \": \" + content + \".\";\n        }\n        return \"\";\n    }\n}\n"]}
{"filename": "core/src/main/java/work/noice/core/listeners/SimpleResourceListener.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.listeners;\n\nimport java.util.List;", "\nimport java.util.List;\n\nimport org.apache.sling.api.resource.observation.ResourceChange;\nimport org.apache.sling.api.resource.observation.ResourceChangeListener;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.propertytypes.ServiceDescription;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n", "import org.slf4j.LoggerFactory;\n\n/**\n * A service to demonstrate how changes in the resource tree\n * can be listened for. \n * Please note, that apart from EventHandler services,\n * the immediate flag should not be set on a service.\n */\n@Component(service = ResourceChangeListener.class,\n           immediate = true", "@Component(service = ResourceChangeListener.class,\n           immediate = true\n)\n@ServiceDescription(\"Demo to listen on changes in the resource tree\")\npublic class SimpleResourceListener implements ResourceChangeListener {\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Override\n    public void onChange(List<ResourceChange> changes) {\n        changes.forEach(change -> {\n            logger.debug(\"Resource event: {} at: {} isExternal\", change.getType(), change.getPath(), change.isExternal());\n        });\n        \n    }\n}\n\n", "    public void onChange(List<ResourceChange> changes) {\n        changes.forEach(change -> {\n            logger.debug(\"Resource event: {} at: {} isExternal\", change.getType(), change.getPath(), change.isExternal());\n        });\n        \n    }\n}\n\n"]}
{"filename": "core/src/main/java/work/noice/core/listeners/package-info.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n@Version(\"1.0\")\npackage work.noice.core.listeners;\n", "package work.noice.core.listeners;\n\nimport org.osgi.annotation.versioning.Version;"]}
{"filename": "core/src/main/java/work/noice/core/filters/package-info.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n@Version(\"1.0\")\npackage work.noice.core.filters;\n", "package work.noice.core.filters;\n\nimport org.osgi.annotation.versioning.Version;"]}
{"filename": "core/src/main/java/work/noice/core/filters/LoggingFilter.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.filters;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\n\nimport org.apache.sling.api.SlingHttpServletRequest;", "\nimport org.apache.sling.api.SlingHttpServletRequest;\nimport org.apache.sling.engine.EngineConstants;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.propertytypes.ServiceDescription;\nimport org.osgi.service.component.propertytypes.ServiceRanking;\nimport org.osgi.service.component.propertytypes.ServiceVendor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n", "import org.slf4j.LoggerFactory;\n\n/**\n * Simple servlet filter component that logs incoming requests.\n */\n@Component(service = Filter.class,\n           property = {\n                   EngineConstants.SLING_FILTER_SCOPE + \"=\" + EngineConstants.FILTER_SCOPE_REQUEST,\n           })\n@ServiceDescription(\"Demo to filter incoming requests\")", "           })\n@ServiceDescription(\"Demo to filter incoming requests\")\n@ServiceRanking(-700)\n@ServiceVendor(\"Adobe\")\npublic class LoggingFilter implements Filter {\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Override\n    public void doFilter(final ServletRequest request, final ServletResponse response,\n                         final FilterChain filterChain) throws IOException, ServletException {\n\n        final SlingHttpServletRequest slingRequest = (SlingHttpServletRequest) request;\n        logger.debug(\"request for {}, with selector {}\", slingRequest\n                .getRequestPathInfo().getResourcePath(), slingRequest\n                .getRequestPathInfo().getSelectorString());\n\n        filterChain.doFilter(request, response);\n    }\n\n    @Override", "    public void doFilter(final ServletRequest request, final ServletResponse response,\n                         final FilterChain filterChain) throws IOException, ServletException {\n\n        final SlingHttpServletRequest slingRequest = (SlingHttpServletRequest) request;\n        logger.debug(\"request for {}, with selector {}\", slingRequest\n                .getRequestPathInfo().getResourcePath(), slingRequest\n                .getRequestPathInfo().getSelectorString());\n\n        filterChain.doFilter(request, response);\n    }\n\n    @Override", "    public void init(FilterConfig filterConfig) {\n    }\n\n    @Override\n    public void destroy() {\n    }\n\n}"]}
{"filename": "core/src/main/java/work/noice/core/schedulers/package-info.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n@Version(\"1.0\")\npackage work.noice.core.schedulers;\n", "package work.noice.core.schedulers;\n\nimport org.osgi.annotation.versioning.Version;"]}
{"filename": "core/src/main/java/work/noice/core/schedulers/SimpleScheduledTask.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.schedulers;\n\nimport org.osgi.service.component.annotations.Activate;", "\nimport org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.metatype.annotations.AttributeDefinition;\nimport org.osgi.service.metatype.annotations.Designate;\nimport org.osgi.service.metatype.annotations.ObjectClassDefinition;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**", "\n/**\n * A simple demo for cron-job like tasks that get executed regularly.\n * It also demonstrates how property values can be set. Users can\n * set the property values in /system/console/configMgr\n */\n@Designate(ocd=SimpleScheduledTask.Config.class)\n@Component(service=Runnable.class)\npublic class SimpleScheduledTask implements Runnable {\n\n    @ObjectClassDefinition(name=\"A scheduled task\",\n                           description = \"Simple demo for cron-job like task with properties\")\n    public static @interface Config {\n\n        @AttributeDefinition(name = \"Cron-job expression\")\n        String scheduler_expression() default \"*/30 * * * * ?\";\n\n        @AttributeDefinition(name = \"Concurrent task\",\n                             description = \"Whether or not to schedule this task concurrently\")\n        boolean scheduler_concurrent() default false;\n\n        @AttributeDefinition(name = \"A parameter\",\n                             description = \"Can be configured in /system/console/configMgr\")\n        String myParameter() default \"\";\n    }\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n\n    private String myParameter;\n    \n    @Override", "public class SimpleScheduledTask implements Runnable {\n\n    @ObjectClassDefinition(name=\"A scheduled task\",\n                           description = \"Simple demo for cron-job like task with properties\")\n    public static @interface Config {\n\n        @AttributeDefinition(name = \"Cron-job expression\")\n        String scheduler_expression() default \"*/30 * * * * ?\";\n\n        @AttributeDefinition(name = \"Concurrent task\",\n                             description = \"Whether or not to schedule this task concurrently\")\n        boolean scheduler_concurrent() default false;\n\n        @AttributeDefinition(name = \"A parameter\",\n                             description = \"Can be configured in /system/console/configMgr\")\n        String myParameter() default \"\";\n    }\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n\n    private String myParameter;\n    \n    @Override", "    public void run() {\n        logger.debug(\"SimpleScheduledTask is now running, myParameter='{}'\", myParameter);\n    }\n\n    @Activate\n    protected void activate(final Config config) {\n        myParameter = config.myParameter();\n    }\n\n}\n"]}
{"filename": "core/src/main/java/work/noice/core/models/package-info.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n@Version(\"1.0\")\npackage work.noice.core.models;\n", "package work.noice.core.models;\n\nimport org.osgi.annotation.versioning.Version;"]}
{"filename": "core/src/main/java/work/noice/core/models/HelloWorldModel.java", "chunked_list": ["/*\n *  Copyright 2015 Adobe Systems Incorporated\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software", " *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\npackage work.noice.core.models;\n\nimport static org.apache.sling.api.resource.ResourceResolver.PROPERTY_RESOURCE_TYPE;", "\nimport static org.apache.sling.api.resource.ResourceResolver.PROPERTY_RESOURCE_TYPE;\n\nimport javax.annotation.PostConstruct;\n\nimport org.apache.sling.api.resource.Resource;\nimport org.apache.sling.api.resource.ResourceResolver;\nimport org.apache.sling.models.annotations.Default;\nimport org.apache.sling.models.annotations.Model;\nimport org.apache.sling.models.annotations.injectorspecific.InjectionStrategy;", "import org.apache.sling.models.annotations.Model;\nimport org.apache.sling.models.annotations.injectorspecific.InjectionStrategy;\nimport org.apache.sling.models.annotations.injectorspecific.OSGiService;\nimport org.apache.sling.models.annotations.injectorspecific.SlingObject;\nimport org.apache.sling.models.annotations.injectorspecific.ValueMapValue;\n\nimport com.day.cq.wcm.api.Page;\nimport com.day.cq.wcm.api.PageManager;\n\nimport java.util.Optional;", "\nimport java.util.Optional;\n\n@Model(adaptables = Resource.class)\npublic class HelloWorldModel {\n\n    @ValueMapValue(name=PROPERTY_RESOURCE_TYPE, injectionStrategy=InjectionStrategy.OPTIONAL)\n    @Default(values=\"No resourceType\")\n    protected String resourceType;\n\n    @SlingObject\n    private Resource currentResource;\n    @SlingObject\n    private ResourceResolver resourceResolver;\n\n    private String message;\n\n    @PostConstruct\n    protected void init() {\n        PageManager pageManager = resourceResolver.adaptTo(PageManager.class);\n        String currentPagePath = Optional.ofNullable(pageManager)\n                .map(pm -> pm.getContainingPage(currentResource))\n                .map(Page::getPath).orElse(\"\");\n\n        message = \"Hello World!\\n\"\n            + \"Resource type is: \" + resourceType + \"\\n\"\n            + \"Current page is:  \" + currentPagePath + \"\\n\";\n    }\n", "    public String getMessage() {\n        return message;\n    }\n\n}\n"]}
{"filename": "core/src/main/java/work/noice/core/services/OpaxConfiguration.java", "chunked_list": ["package work.noice.core.services;\n\nimport org.osgi.service.metatype.annotations.AttributeDefinition;\nimport org.osgi.service.metatype.annotations.AttributeType;\nimport org.osgi.service.metatype.annotations.ObjectClassDefinition;\n\n/**\n * @author Jake Tracey\n *         <p>\n *         This interface represents an OSGi configuration which can be found at", " *         <p>\n *         This interface represents an OSGi configuration which can be found at\n *         -\n *         ./system/console/configMgr\n */\n@ObjectClassDefinition(name = \"Opax - Configuration\", description = \"Configure the Opax AI integration with AEM\")\npublic @interface OpaxConfiguration {\n\n    /**\n     * This is a checkbox property which will indicate of the configuration is", "    /**\n     * This is a checkbox property which will indicate of the configuration is\n     * executed or not\n     *\n     * @return {@link Boolean}\n     */\n    @AttributeDefinition(name = \"Enable toolbar\", description = \"This property indicates whether the toolbar will display or not\", type = AttributeType.BOOLEAN)\n    boolean getToolbarEnabled();\n\n    /**", "\n    /**\n     * Returns the component path where the AI toolbar will be injected\n     *\n     * @return {@link String}\n     */\n    @AttributeDefinition(name = \"Components to inject the AI toolbar\", description = \"Enter the specific component path where you wish the AI toolbar to be injected. For example, /apps/core/wcm/components/text/v2/text\")\n    String[] getComponents();\n\n    /**", "\n    /**\n     * Returns the Open AI API key\n     *\n     * @return {@link String}\n     */\n    @AttributeDefinition(name = \"Open AI API Key\", description = \"Enter your API key. You can generate a key from https://beta.openai.com/account/api-keys\")\n    String getOpenAIAPIKey();\n}", "}"]}
{"filename": "core/src/main/java/work/noice/core/services/OpaxService.java", "chunked_list": ["package work.noice.core.services;\n\npublic interface OpaxService {\n    boolean getToolbarEnabled();\n\n    String[] getComponents();\n\n    String getOpenAIAPIKey();\n}\n"]}
{"filename": "core/src/main/java/work/noice/core/services/impl/OpaxServiceImpl.java", "chunked_list": ["package work.noice.core.services.impl;\n\nimport org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.metatype.annotations.Designate;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport work.noice.core.services.OpaxConfiguration;\nimport work.noice.core.services.OpaxService;\n", "import work.noice.core.services.OpaxService;\n\n/**\n * @author Anirudh Sharma\n *         <p>\n *         Implementation class of OpaxService interface and this class reads\n *         values from the OSGi configuration as well\n */\n@Component(service = OpaxService.class, immediate = true)\n@Designate(ocd = OpaxConfiguration.class)\npublic class OpaxServiceImpl implements OpaxService {\n\n    /**\n     * Logger\n     */\n    private static final Logger log = LoggerFactory.getLogger(OpaxServiceImpl.class);\n\n    /**\n     * Instance of the OSGi configuration class\n     */\n    private boolean toolbarEnabled;\n    private String opaxApiKey;\n    private String[] components;\n    private String openAIAPIKey;\n\n    @Activate\n    protected void activate(OpaxConfiguration configuration) {\n        toolbarEnabled = configuration.getToolbarEnabled();\n        components = configuration.getComponents();\n        openAIAPIKey = configuration.getOpenAIAPIKey();\n    }\n\n    @Override", "@Component(service = OpaxService.class, immediate = true)\n@Designate(ocd = OpaxConfiguration.class)\npublic class OpaxServiceImpl implements OpaxService {\n\n    /**\n     * Logger\n     */\n    private static final Logger log = LoggerFactory.getLogger(OpaxServiceImpl.class);\n\n    /**\n     * Instance of the OSGi configuration class\n     */\n    private boolean toolbarEnabled;\n    private String opaxApiKey;\n    private String[] components;\n    private String openAIAPIKey;\n\n    @Activate\n    protected void activate(OpaxConfiguration configuration) {\n        toolbarEnabled = configuration.getToolbarEnabled();\n        components = configuration.getComponents();\n        openAIAPIKey = configuration.getOpenAIAPIKey();\n    }\n\n    @Override", "    public String getOpenAIAPIKey() {\n        return openAIAPIKey;\n    }\n\n    @Override\n    public boolean getToolbarEnabled() {\n        return toolbarEnabled;\n    }\n\n    @Override\n    public String[] getComponents() {\n        return components;\n    }\n}"]}
{"filename": "core/src/main/java/work/noice/core/beans/ChatGptResponse.java", "chunked_list": ["package work.noice.core.beans;\n\nimport java.util.List;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport lombok.Data;\n\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true )\npublic class ChatGptResponse {\n    private List<Choice> choices;\n\n    @Data\n    @JsonIgnoreProperties(ignoreUnknown = true )", "@Data\n@JsonIgnoreProperties(ignoreUnknown = true )\npublic class ChatGptResponse {\n    private List<Choice> choices;\n\n    @Data\n    @JsonIgnoreProperties(ignoreUnknown = true )\n    public static class Choice {\n        private Message message;            \n    }\n}\n\n"]}
{"filename": "core/src/main/java/work/noice/core/beans/Data.java", "chunked_list": ["package work.noice.core.beans;\n\nimport java.util.Map;\n\npublic class Data {\n\n    private String templateId;\n    private Map<String, String> dataAttributes;\n\n    public String getTemplateId() {\n        return templateId;\n    }\n\n    public Map<String, String> getDataAttributes() {\n        return dataAttributes;\n    }\n", "    public String getTemplateId() {\n        return templateId;\n    }\n\n    public Map<String, String> getDataAttributes() {\n        return dataAttributes;\n    }\n\n    public void setDataAttributes(Map<String, String> dataAttributes) {\n        this.dataAttributes = dataAttributes;\n    }\n", "    public void setDataAttributes(Map<String, String> dataAttributes) {\n        this.dataAttributes = dataAttributes;\n    }\n\n    public void setTemplateId(String templateId) {\n        this.templateId = templateId;\n\n\n    }\n}\n"]}
{"filename": "core/src/main/java/work/noice/core/beans/ChatGptRequest.java", "chunked_list": ["package work.noice.core.beans;\n\nimport lombok.Data;\nimport java.util.List;\nimport java.util.ArrayList;\n\n@Data\npublic class ChatGptRequest {\n    private final int max_tokens;\n    private final String model;\n    private List<Message> messages;\n\n    public ChatGptRequest(String prompt, String model, String role) {\n        this.max_tokens = 1500;\n        this.model = model;\n        this.messages = new ArrayList<>();\n        Message message = new Message();\n        message.setRole(role);\n        message.setContent(prompt);\n        this.messages.add(message);\n    }\n\n}"]}
{"filename": "core/src/main/java/work/noice/core/beans/Message.java", "chunked_list": ["package work.noice.core.beans;\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n\nimport lombok.Data;\n\n@Data\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic class Message {\n    private String role;\n    private String content;\n}\n", "public class Message {\n    private String role;\n    private String content;\n}\n"]}
