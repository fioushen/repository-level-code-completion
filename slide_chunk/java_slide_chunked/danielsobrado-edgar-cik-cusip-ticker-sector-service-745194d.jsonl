{"filename": "src/test/java/com/jds/edgar/cik/download/CikConversionApplicationTests.java", "chunked_list": ["package com.jds.edgar.cik.download;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CikConversionApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {", "\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"]}
{"filename": "src/test/java/com/jds/edgar/cik/download/service/ExchangeTestData.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.util.List;\n\n@Getter\n@Setter", "@Getter\n@Setter\n@NoArgsConstructor\npublic class ExchangeTestData {\n    private List<String> fields;\n    private List<List<Object>> data;\n}\n"]}
{"filename": "src/test/java/com/jds/edgar/cik/download/service/CikDownloadServiceTest.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jds.edgar.cik.download.config.EdgarConfig;\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;", "import org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.test.context.TestPropertySource;\n\nimport java.io.IOException;\nimport java.io.InputStream;", "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)", "\n@ExtendWith(MockitoExtension.class)\n@DataJpaTest\n@TestPropertySource(locations = \"classpath:test_application.properties\")\npublic class CikDownloadServiceTest {\n    @Mock\n    private EdgarConfig edgarConfig;\n\n    @Mock\n    private StockRepository cikRepository;\n\n    @InjectMocks\n    private CikDownloadServiceImpl cikDownloadService;\n\n    private Map<String, Map<String, Object>> testData;\n\n    @BeforeEach", "    public void setUp() throws IOException {\n        testData = new HashMap<>();\n\n        // Load the test data from the manually downloaded file in the resources folder\n        InputStream testDataInputStream = getClass().getResourceAsStream(\"/company_tickers_test.json\");\n        ObjectMapper objectMapper = new ObjectMapper();\n        testData = objectMapper.readValue(testDataInputStream, new TypeReference<Map<String, Map<String, Object>>>() {});\n    }\n\n\n    @Test", "    public void testUpdateCikData() {\n        when(edgarConfig.getCompanyTickersUrl()).thenReturn(\"classpath:company_tickers_test.json\");\n        when(cikRepository.findById(any())).thenReturn(Optional.empty());\n\n        cikDownloadService.downloadCikData();\n\n        verify(cikRepository, atLeastOnce()).save(any(Stock.class));\n    }\n\n    @Test\n    public void testUpdateExistingCikData() {\n        when(edgarConfig.getCompanyTickersUrl()).thenReturn(\"classpath:company_tickers_test.json\");\n        when(cikRepository.findById(any())).thenReturn(Optional.of(mock(Stock.class)));\n\n        cikDownloadService.downloadCikData();\n\n        verify(cikRepository, atLeastOnce()).save(any(Stock.class));\n    }\n\n}", "    public void testUpdateExistingCikData() {\n        when(edgarConfig.getCompanyTickersUrl()).thenReturn(\"classpath:company_tickers_test.json\");\n        when(cikRepository.findById(any())).thenReturn(Optional.of(mock(Stock.class)));\n\n        cikDownloadService.downloadCikData();\n\n        verify(cikRepository, atLeastOnce()).save(any(Stock.class));\n    }\n\n}"]}
{"filename": "src/test/java/com/jds/edgar/cik/download/service/CikExchangeDownloadServiceTest.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jds.edgar.cik.download.config.EdgarConfig;\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;", "import org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.test.context.TestPropertySource;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.LinkedHashMap;", "import java.io.InputStream;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Optional;\n\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.*;\n\n@ExtendWith(MockitoExtension.class)\n@DataJpaTest", "@ExtendWith(MockitoExtension.class)\n@DataJpaTest\n@TestPropertySource(locations = \"classpath:test.properties\")\npublic class CikExchangeDownloadServiceTest {\n    @Mock\n    private EdgarConfig edgarConfig;\n\n    @Mock\n    private StockRepository cikRepository;\n\n    @InjectMocks\n    private CikExchangeDownloadServiceImpl cikExchangeDownloadService;\n\n    private LinkedHashMap<String, Object> testData;\n\n    @BeforeEach", "    public void setUp() throws IOException {\n        testData = new LinkedHashMap<>();\n        // Load the test data from the manually downloaded file in the resources folder\n        ObjectMapper objectMapper = new ObjectMapper();\n        InputStream testDataInputStream = getClass().getResourceAsStream(\"/company_tickers_exchange_test.json\");\n        ExchangeTestData exchangeTestData = objectMapper.readValue(testDataInputStream, ExchangeTestData.class);\n        List<List<Object>> data = exchangeTestData.getData();\n        for (List<Object> entry : data) {\n            testData.put(String.valueOf(entry.get(0)), entry);\n        }\n    }\n\n    @Test", "    public void testUpdateCikExchangeData() {\n        when(edgarConfig.getCompanyTickersExchangeUrl()).thenReturn(\"classpath:company_tickers_exchange_test.json\");\n        when(cikRepository.findById(any())).thenReturn(Optional.of(mock(Stock.class)));\n\n        cikExchangeDownloadService.downloadCikData();\n\n        verify(cikRepository, atLeastOnce()).save(any(Stock.class));\n    }\n\n}"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/CikConversionApplication.java", "chunked_list": ["package com.jds.edgar.cik.download;\n\nimport io.swagger.v3.oas.annotations.OpenAPIDefinition;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.scheduling.annotation.EnableScheduling;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\n@EnableScheduling\n@EnableWebMvc", "@EnableScheduling\n@EnableWebMvc\n@OpenAPIDefinition\n@SpringBootApplication\npublic class CikConversionApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(CikConversionApplication.class, args);\n\t}\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/repository/CikCusipMapsRepository.java", "chunked_list": ["package com.jds.edgar.cik.download.repository;\n\nimport com.jds.edgar.cik.download.model.CikCusipMaps;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface CikCusipMapsRepository extends JpaRepository<CikCusipMaps, Long> {\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/repository/ProcessExecutionRepository.java", "chunked_list": ["package com.jds.edgar.cik.download.repository;\n\nimport com.jds.edgar.cik.download.model.ProcessExecution;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.Optional;\n\n@Repository\npublic interface ProcessExecutionRepository extends JpaRepository<ProcessExecution, Long> {\n    Optional<ProcessExecution> findByName(String name);\n}\n", "@Repository\npublic interface ProcessExecutionRepository extends JpaRepository<ProcessExecution, Long> {\n    Optional<ProcessExecution> findByName(String name);\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/repository/StockRepository.java", "chunked_list": ["package com.jds.edgar.cik.download.repository;\n\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.model.StockId;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface StockRepository extends JpaRepository<Stock, StockId> {\n    Optional<Stock> findByTicker(String ticker);\n\n    Optional<Stock> findByCik(Long cik);\n\n    List<Stock> findBySector(String sector);\n\n    List<Stock> findBySic(String sic);\n\n    Optional<Stock> findFirstBySectorIsNull();\n\n    @Query(\"SELECT COUNT(s) FROM Stock s WHERE s.sector IS NULL\")\n    long countBySectorIsNull();\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/repository/FullIndexRepository.java", "chunked_list": ["package com.jds.edgar.cik.download.repository;\n\nimport com.jds.edgar.cik.download.model.FullIndex;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;", "import java.util.Optional;\nimport java.util.Set;\n\n@Repository\npublic interface FullIndexRepository extends JpaRepository<FullIndex, Long> {\n    @Query(\"SELECT MAX(fi.dateFiled) FROM FullIndex fi\")\n    Optional<String> findLatestDateFiled();\n\n    @Query(\"SELECT DISTINCT f.formType FROM FullIndex f\")\n    Set<String> findDistinctFormTypes();\n\n    List<FullIndex> findByFormType(String filingType);\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/config/AppConfig.java", "chunked_list": ["package com.jds.edgar.cik.download.config;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.client.ClientHttpRequestInterceptor;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.util.Collections;\n", "import java.util.Collections;\n\n@Configuration\n@ConfigurationProperties(prefix = \"app\")\npublic class AppConfig {\n\n    private String userAgentName;\n    private String userEmail;\n\n    @Bean\n    public RestTemplate restTemplate() {\n        RestTemplate restTemplate = new RestTemplate();\n\n        ClientHttpRequestInterceptor userAgentInterceptor = (request, body, execution) -> {\n            request.getHeaders().set(\"User-Agent\", \"Mozilla/5.0\");\n            request.getHeaders().set(\"Accept\", \"*/*\");\n            request.getHeaders().set(\"Connection\", \"keep-alive\");\n            request.getHeaders().set(\"Accept-Encoding\", \"gzip, deflate, br\");\n            return execution.execute(request, body);\n        };\n\n        restTemplate.setInterceptors(Collections.singletonList(userAgentInterceptor));\n\n        return restTemplate;\n    }\n\n}\n", "    public RestTemplate restTemplate() {\n        RestTemplate restTemplate = new RestTemplate();\n\n        ClientHttpRequestInterceptor userAgentInterceptor = (request, body, execution) -> {\n            request.getHeaders().set(\"User-Agent\", \"Mozilla/5.0\");\n            request.getHeaders().set(\"Accept\", \"*/*\");\n            request.getHeaders().set(\"Connection\", \"keep-alive\");\n            request.getHeaders().set(\"Accept-Encoding\", \"gzip, deflate, br\");\n            return execution.execute(request, body);\n        };\n\n        restTemplate.setInterceptors(Collections.singletonList(userAgentInterceptor));\n\n        return restTemplate;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/config/EdgarConfig.java", "chunked_list": ["package com.jds.edgar.cik.download.config;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Configuration;\n\n@Getter\n@Setter\n@Configuration", "@Setter\n@Configuration\n@ConfigurationProperties(prefix = \"edgar\")\npublic class EdgarConfig {\n    private String companyTickersUrl;\n\n    private String companyTickersExchangeUrl;\n\n    private String enrichSectorUrl;\n\n    private String fullIndexUrl;\n\n    private String filingsFolder;\n\n    private String baseUrl;\n\n    private Boolean useTickers;\n\n    private Boolean useTickersExchange;\n\n    private Boolean useEnrichSector;\n\n    private Long retryDelay = 5000L;\n}"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/config/DBConfig.java", "chunked_list": ["package com.jds.edgar.cik.download.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.jdbc.datasource.DriverManagerDataSource;\n\nimport javax.sql.DataSource;", "\nimport javax.sql.DataSource;\n\n@Configuration\n@EnableJpaRepositories(\"com.jds.edgar.cik.download\")\npublic class DBConfig {\n\n    @Value(\"${spring.datasource.url}\")\n    private String dbUrl;\n\n    @Value(\"${spring.datasource.username}\")\n    private String dbUsername;\n\n    @Value(\"${spring.datasource.password}\")\n    private String dbPassword;\n\n    @Bean", "    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n\n    @Bean\n    public DataSource dataSource() {\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n        dataSource.setUrl(dbUrl);\n        dataSource.setUsername(dbUsername);\n        dataSource.setPassword(dbPassword);\n        return dataSource;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/model/CikCusipMaps.java", "chunked_list": ["package com.jds.edgar.cik.download.model;\n\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Entity", "\n@Entity\n@Table(name = \"cik_cusip_maps\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class CikCusipMaps {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    private Long cik;\n    private String cusip6;\n    private String cusip8;\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/model/Stock.java", "chunked_list": ["package com.jds.edgar.cik.download.model;\n\n\nimport jakarta.annotation.Nonnull;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.hibernate.annotations.CreationTimestamp;", "import lombok.NoArgsConstructor;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"stocks\")\n@Data\n@NoArgsConstructor", "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\n@IdClass(StockId.class) // Add this line\npublic class Stock {\n\n    @Id\n    private Long cik;\n\n    @Id\n    @Nonnull\n    private String ticker;\n\n    private String name;\n\n    private String sic;\n\n    private String cusip6;\n\n    private String cusip8;\n\n    private String sector;\n\n    private String exchange;\n\n    private String lastError;\n\n    @Column(name = \"created_at\")\n    @CreationTimestamp\n    private LocalDateTime created;\n\n    @Column(name = \"updated_at\")\n    @UpdateTimestamp\n    private LocalDateTime updated;\n", "    public Stock copy() {\n        return Stock.builder()\n                .cik(this.cik)\n                .ticker(this.ticker)\n                .exchange(this.exchange)\n                .name(this.name)\n                .sic(this.sic)\n                .cusip6(this.cusip6)\n                .cusip8(this.cusip8)\n                .sector(this.sector)\n                .updated(this.updated)\n                .created(this.created)\n                .build();\n    }\n", "    public Stock updateEnrichedData(EnrichedData enrichedData) {\n        setSic(enrichedData.getSic());\n        setSector(enrichedData.getSector());\n        return this;\n    }\n\n    @Data\n    @Builder\n    public static class EnrichedData {\n        private String sic;\n        private String sector;\n    }\n\n}\n", "    public static class EnrichedData {\n        private String sic;\n        private String sector;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/model/StockId.java", "chunked_list": ["package com.jds.edgar.cik.download.model;\n\nimport lombok.*;\n\nimport java.io.Serializable;\n\n@Getter\n@Setter\n@AllArgsConstructor\n@NoArgsConstructor", "@AllArgsConstructor\n@NoArgsConstructor\n@EqualsAndHashCode\npublic class StockId implements Serializable {\n    private Long cik;\n    private String ticker;\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/model/ProcessExecution.java", "chunked_list": ["package com.jds.edgar.cik.download.model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\n", "import java.time.LocalDateTime;\n\n@Entity\n@Table(name = \"process_execution\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class ProcessExecution {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n\n    private LocalDateTime lastExecution;\n\n}\n", "public class ProcessExecution {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    private String name;\n\n    private LocalDateTime lastExecution;\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/model/FullIndex.java", "chunked_list": ["package com.jds.edgar.cik.download.model;\n\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\n@Entity", "\n@Entity\n@Table(name = \"full_index\")\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@Builder\npublic class FullIndex {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private long id;\n\n    private Long cik;\n    private String companyName;\n    private String formType;\n    private String dateFiled;\n    private String filename;\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/controller/StockController.java", "chunked_list": ["package com.jds.edgar.cik.download.controller;\n\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.repository.FullIndexRepository;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport com.jds.edgar.cik.download.service.EdgarSectorEnrichServiceImpl;\nimport com.jds.edgar.cik.download.service.FilingsDownloadServiceImpl;\nimport com.jds.edgar.cik.download.service.StockEnrichmentServiceImpl;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.NonNull;", "import jakarta.servlet.http.HttpServletResponse;\nimport lombok.NonNull;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;", "import java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;\n\n@RestController\n@RequiredArgsConstructor\n@RequestMapping(\"/api/stocks\")\npublic class StockController {\n\n    @NonNull\n    private StockRepository stockCikRepository;\n\n    @NonNull\n    private EdgarSectorEnrichServiceImpl edgarSectorEnrichService;\n\n    @NonNull\n    private FilingsDownloadServiceImpl fullIndexDownloadService;\n\n    @NonNull\n    private StockEnrichmentServiceImpl stockEnrichmentService;\n\n    @NonNull\n    private FullIndexRepository fullIndexRepository;\n\n    @NonNull\n    private FilingsDownloadServiceImpl filingsDownloadService;\n\n    @GetMapping(\"/cik/{cik}\")\n    public ResponseEntity<Stock> getByCik(@PathVariable Long cik) {\n        Optional<Stock> stockCikOptional = stockCikRepository.findByCik(cik);\n        return stockCikOptional.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @GetMapping(\"/ticker/{ticker}\")\n    public ResponseEntity<Stock> getByTicker(@PathVariable String ticker) {\n        Optional<Stock> stockCikOptional = stockCikRepository.findByTicker(ticker);\n        return stockCikOptional.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @GetMapping\n    public ResponseEntity<List<Stock>> getByFilter(\n            @RequestParam(value = \"sector\", required = false) String sector,\n            @RequestParam(value = \"sic\", required = false) String sic) {\n        List<Stock> stockCiks;", "@RequiredArgsConstructor\n@RequestMapping(\"/api/stocks\")\npublic class StockController {\n\n    @NonNull\n    private StockRepository stockCikRepository;\n\n    @NonNull\n    private EdgarSectorEnrichServiceImpl edgarSectorEnrichService;\n\n    @NonNull\n    private FilingsDownloadServiceImpl fullIndexDownloadService;\n\n    @NonNull\n    private StockEnrichmentServiceImpl stockEnrichmentService;\n\n    @NonNull\n    private FullIndexRepository fullIndexRepository;\n\n    @NonNull\n    private FilingsDownloadServiceImpl filingsDownloadService;\n\n    @GetMapping(\"/cik/{cik}\")\n    public ResponseEntity<Stock> getByCik(@PathVariable Long cik) {\n        Optional<Stock> stockCikOptional = stockCikRepository.findByCik(cik);\n        return stockCikOptional.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @GetMapping(\"/ticker/{ticker}\")\n    public ResponseEntity<Stock> getByTicker(@PathVariable String ticker) {\n        Optional<Stock> stockCikOptional = stockCikRepository.findByTicker(ticker);\n        return stockCikOptional.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @GetMapping\n    public ResponseEntity<List<Stock>> getByFilter(\n            @RequestParam(value = \"sector\", required = false) String sector,\n            @RequestParam(value = \"sic\", required = false) String sic) {\n        List<Stock> stockCiks;", "        if (sector != null) {\n            stockCiks = stockCikRepository.findBySector(sector);\n        } else if (sic != null) {\n            stockCiks = stockCikRepository.findBySic(sic);\n        } else {\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n        }\n\n        if (stockCiks.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n        return ResponseEntity.ok(stockCiks);\n    }\n\n    @PostMapping(\"/enrich/ticker/{ticker}\")\n    public ResponseEntity<Stock> enrichCikById(@PathVariable String ticker) {\n        Optional<Stock> stockCikOptional = edgarSectorEnrichService.enrichCik(ticker);\n        return stockCikOptional.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @GetMapping(\"/export/csv\")", "        if (stockCiks.isEmpty()) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n        }\n        return ResponseEntity.ok(stockCiks);\n    }\n\n    @PostMapping(\"/enrich/ticker/{ticker}\")\n    public ResponseEntity<Stock> enrichCikById(@PathVariable String ticker) {\n        Optional<Stock> stockCikOptional = edgarSectorEnrichService.enrichCik(ticker);\n        return stockCikOptional.map(ResponseEntity::ok)\n                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n    }\n\n    @GetMapping(\"/export/csv\")", "    public void exportToCSV(HttpServletResponse response) throws IOException {\n        response.setContentType(\"text/csv\");\n        response.setHeader(\"Content-Disposition\", \"attachment; filename=stocks.csv\");\n\n        try (PrintWriter writer = response.getWriter()) {\n            edgarSectorEnrichService.exportToCSV(writer);\n        }\n    }\n\n    @GetMapping(\"/enrich/cusip\")\n    public ResponseEntity<Void> enrichStocksWithCusip() {", "        try {\n            stockEnrichmentService.enrichStockWithCusips();\n            return ResponseEntity.ok().build();\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\n        }\n    }\n\n    @PostMapping(\"/enrich/cusip/from-filings\")\n    public ResponseEntity<Void> enrichFromFilings(@RequestParam(value = \"filingTypes\") String filingTypes) {\n        try {\n            List<String> filingTypesList = Arrays.asList(filingTypes.split(\",\"));\n            fullIndexDownloadService.processFillings(filingTypesList);\n            return ResponseEntity.ok().build();\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\n        }\n    }\n\n    @PostMapping(\"/download/{filingType}\")\n    public ResponseEntity<String> downloadFilingsOfType(@PathVariable String filingType) {\n        String result = filingsDownloadService.downloadFilingsOfType(filingType);\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/download/forms13\")\n    public ResponseEntity<String> downloadFilingsOfType13() {\n        String result = filingsDownloadService.downloadFilingsOfType13();\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    }\n\n\n    @GetMapping(\"/formTypes\")\n    public ResponseEntity<Set<String>> getDistinctFormTypes() {\n        Set<String> formTypes = fullIndexRepository.findDistinctFormTypes();\n        return new ResponseEntity<>(formTypes, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/downloadFullIndex\")\n    public ResponseEntity<String> downloadFullIndex() {\n        filingsDownloadService.downloadFullIndex();\n        return ResponseEntity.ok(\"Full index download initiated.\");\n    }\n\n    @PostMapping(\"/download/index/{year}/{quarter}\")\n    public ResponseEntity<String> downloadIndexForYearAndQuarter(@PathVariable int year, @PathVariable int quarter) {", "        try {\n            List<String> filingTypesList = Arrays.asList(filingTypes.split(\",\"));\n            fullIndexDownloadService.processFillings(filingTypesList);\n            return ResponseEntity.ok().build();\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();\n        }\n    }\n\n    @PostMapping(\"/download/{filingType}\")\n    public ResponseEntity<String> downloadFilingsOfType(@PathVariable String filingType) {\n        String result = filingsDownloadService.downloadFilingsOfType(filingType);\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/download/forms13\")\n    public ResponseEntity<String> downloadFilingsOfType13() {\n        String result = filingsDownloadService.downloadFilingsOfType13();\n        return new ResponseEntity<>(result, HttpStatus.OK);\n    }\n\n\n    @GetMapping(\"/formTypes\")\n    public ResponseEntity<Set<String>> getDistinctFormTypes() {\n        Set<String> formTypes = fullIndexRepository.findDistinctFormTypes();\n        return new ResponseEntity<>(formTypes, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/downloadFullIndex\")\n    public ResponseEntity<String> downloadFullIndex() {\n        filingsDownloadService.downloadFullIndex();\n        return ResponseEntity.ok(\"Full index download initiated.\");\n    }\n\n    @PostMapping(\"/download/index/{year}/{quarter}\")\n    public ResponseEntity<String> downloadIndexForYearAndQuarter(@PathVariable int year, @PathVariable int quarter) {", "        try {\n            filingsDownloadService.downloadIndexForYearAndQuarter(year, quarter);\n            return ResponseEntity.ok(\"Index download initiated for year \" + year + \" and quarter \" + quarter + \".\");\n        } catch (ResponseStatusException e) {\n            return ResponseEntity.status(e.getStatusCode()).body(e.getReason());\n        }\n    }\n}\n\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/FilingsDownloadServiceImpl.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.jds.edgar.cik.download.config.EdgarConfig;\nimport com.jds.edgar.cik.download.model.CikCusipMaps;\nimport com.jds.edgar.cik.download.model.FullIndex;\nimport com.jds.edgar.cik.download.repository.CikCusipMapsRepository;\nimport com.jds.edgar.cik.download.repository.FullIndexRepository;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport io.vavr.control.Try;\nimport jakarta.transaction.Transactional;", "import io.vavr.control.Try;\nimport jakarta.transaction.Transactional;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;", "import org.springframework.http.ResponseEntity;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.client.RestClientException;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;", "import java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.time.LocalDate;\nimport java.time.Year;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;", "import java.util.stream.Collectors;\nimport java.util.stream.IntStream;\nimport java.util.zip.GZIPInputStream;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic class FilingsDownloadServiceImpl {\n    private final EdgarConfig edgarConfig;\n    private final RestTemplate restTemplate;\n    private final StockRepository stockCikRepository;\n    private final FullIndexRepository fullIndexRepository;\n    private final CikCusipMapsRepository cikCusipMapsRepository;\n", "    public void processFillings(List<String> filingTypes) {\n        List<String> csvFiles = filingTypes.stream().map(filingType -> filingType + \".csv\").collect(Collectors.toList());\n        generateMappings(csvFiles);\n    }\n\n    public void downloadFullIndex() {\n        log.info(\"Start downloading full index files\");\n        int currentYear = Year.now().getValue();\n\n        Optional<String> latestDateString = fullIndexRepository.findLatestDateFiled();\n        LocalDate latestDate = latestDateString.map(dateStr -> LocalDate.parse(dateStr)).orElse(LocalDate.of(1994, 1, 1));\n\n        int startYear = latestDate.getYear();\n        int startQuarter = (latestDate.getMonthValue() - 1) / 3 + 1;\n\n        IntStream.range(startYear, currentYear + 1)\n                .boxed()\n                .flatMap(year -> IntStream.range(year == startYear ? startQuarter : 1, 5).mapToObj(q -> Pair.of(year, q)))\n                .map(pair -> String.format(\"%s/%d/QTR%d/master.idx\", edgarConfig.getFullIndexUrl(), pair.getLeft(), pair.getRight()))\n                .forEach(url -> downloadAndProcessMasterIdx(url));\n\n        log.info(\"Finished downloading full index files\");\n    }\n", "    public void downloadIndexForYearAndQuarter(int year, int quarter) {\n        log.info(\"Start downloading index file for year {} and quarter {}\", year, quarter);\n        if (quarter < 1 || quarter > 4) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Quarter must be between 1 and 4\");\n        }\n\n        String url = String.format(\"%s/%d/QTR%d/master.idx\", edgarConfig.getFullIndexUrl(), year, quarter);\n        downloadAndProcessMasterIdx(url);\n        log.info(\"Finished downloading index file for year {} and quarter {}\", year, quarter);\n    }\n\n    private void downloadAndProcessMasterIdx(String url) {\n        int retries = 3;\n        boolean success = false;", "        while (!success && retries > 0) {\n            log.info(\"Downloading master.idx file from URL: {}\", url);\n            try {\n                ResponseEntity<byte[]> response = restTemplate.execute(url, HttpMethod.GET, null, responseExtractor -> {\n                    if (responseExtractor.getStatusCode() == HttpStatus.OK) {\n                        String contentEncoding = responseExtractor.getHeaders().getFirst(\"Content-Encoding\");\n                        InputStream inputStream = responseExtractor.getBody();\n                        if (\"gzip\".equalsIgnoreCase(contentEncoding)) {\n                            inputStream = new GZIPInputStream(inputStream);\n                        }\n                        String masterIdxContent = IOUtils.toString(inputStream, StandardCharsets.UTF_8);\n                        return new ResponseEntity<>(masterIdxContent.getBytes(StandardCharsets.UTF_8), HttpStatus.OK);\n                    } else {\n                        return new ResponseEntity<>(null, responseExtractor.getStatusCode());\n                    }\n                });\n", "                if (response.getStatusCode() == HttpStatus.OK) {\n                    String masterIdxContent = new String(response.getBody(), StandardCharsets.UTF_8);\n                    parseMasterIdxContent(masterIdxContent);\n                    success = true;\n                } else {\n                    log.error(\"Failed to download master.idx from URL: {} Retrying... Remaining retries: {}\", url, retries - 1);\n                    retries--;\n                    if (retries > 0) {\n                        try {\n                            Thread.sleep(edgarConfig.getRetryDelay()); // 5 seconds delay\n                        } catch (InterruptedException ie) {\n                            log.error(\"Thread sleep interrupted: {}\", ie.getMessage(), ie);\n                        }\n                    }\n                }\n            } catch (RestClientException e) {\n                log.error(\"Failed to download with error: {}\", e.getMessage());\n                log.error(\"Failed to download master.idx from URL: {} Retrying... Remaining retries: {}\", url, retries - 1);\n                retries--;", "                        try {\n                            Thread.sleep(edgarConfig.getRetryDelay()); // 5 seconds delay\n                        } catch (InterruptedException ie) {\n                            log.error(\"Thread sleep interrupted: {}\", ie.getMessage(), ie);\n                        }\n                    }\n                }\n            } catch (RestClientException e) {\n                log.error(\"Failed to download with error: {}\", e.getMessage());\n                log.error(\"Failed to download master.idx from URL: {} Retrying... Remaining retries: {}\", url, retries - 1);\n                retries--;", "                if (retries > 0) {\n                    try {\n                        Thread.sleep(edgarConfig.getRetryDelay()); // 5 seconds delay\n                    } catch (InterruptedException ie) {\n                        log.error(\"Thread sleep interrupted: {}\", ie.getMessage(), ie);\n                    }\n                }\n            }\n        }\n    }\n\n    @Transactional", "    public void parseMasterIdxContent(String masterIdxContent) {\n        log.info(\"Start parsing master.idx content\");\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(\n                new ByteArrayInputStream(masterIdxContent.getBytes(StandardCharsets.UTF_8))))) {\n\n            // Skip header lines until the line that contains \"-----\"\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (line.contains(\"-----\")) {\n                    break;\n                }\n            }\n\n            List<String[]> rows = reader.lines()\n                    .filter(rowLine -> rowLine.contains(\".txt\"))\n                    .map(rowLine -> rowLine.strip().split(\"\\\\|\"))\n                    .collect(Collectors.toList());\n", "                if (line.contains(\"-----\")) {\n                    break;\n                }\n            }\n\n            List<String[]> rows = reader.lines()\n                    .filter(rowLine -> rowLine.contains(\".txt\"))\n                    .map(rowLine -> rowLine.strip().split(\"\\\\|\"))\n                    .collect(Collectors.toList());\n\n            for (String[] row : rows) {\n                FullIndex fullIndex = FullIndex.builder()\n                        .cik(Long.parseLong(row[0].trim()))\n                        .companyName(row[1].trim())\n                        .formType(row[2].trim())\n                        .dateFiled(row[3].trim())\n                        .filename(row[4].trim())\n                        .build();\n                log.debug(\"Saving full index entry: {}\", fullIndex);\n                fullIndexRepository.save(fullIndex);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error parsing master.idx content\", e);\n        }\n        log.info(\"Finished parsing master.idx content\");\n    }\n\n", "            for (String[] row : rows) {\n                FullIndex fullIndex = FullIndex.builder()\n                        .cik(Long.parseLong(row[0].trim()))\n                        .companyName(row[1].trim())\n                        .formType(row[2].trim())\n                        .dateFiled(row[3].trim())\n                        .filename(row[4].trim())\n                        .build();\n                log.debug(\"Saving full index entry: {}\", fullIndex);\n                fullIndexRepository.save(fullIndex);\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error parsing master.idx content\", e);\n        }\n        log.info(\"Finished parsing master.idx content\");\n    }\n\n", "    public String downloadFilingsOfType(String filingType) {\n        log.info(\"Start downloading {} filings\", filingType);\n\n        List<FullIndex> targetFilings = fullIndexRepository.findByFormType(filingType);\n        int newFilings = 0;\n        int existingFilings = 0;\n\n        for (int i = 0; i < targetFilings.size(); i++) {\n            FullIndex row = targetFilings.get(i);\n            log.info(\"{} out of {}\", i, targetFilings.size());\n\n            String cik = String.valueOf(row.getCik());\n            String date = row.getDateFiled().toString();\n            String year = date.split(\"-\")[0].trim();\n            String month = date.split(\"-\")[1].trim();\n            String url = row.getFilename().trim();\n            String accession = url.split(\"\\\\.\")[0].split(\"-\")[url.split(\"\\\\.\")[0].split(\"-\").length - 1];\n\n            Path folderPath = Paths.get(edgarConfig.getFilingsFolder(), filingType, year + \"_\" + month);\n            folderPath.toFile().mkdirs();\n\n            String filePath = String.format(\"%s/%s/%s_%s/%s_%s_%s.txt\", edgarConfig.getFilingsFolder(), filingType, year, month, cik, date, accession);\n            File file = new File(filePath);", "            if (file.exists()) {\n                existingFilings++;\n                continue;\n            }\n\n            ResponseEntity<byte[]> response = restTemplate.getForEntity(edgarConfig.getBaseUrl() + url, byte[].class);\n            if (response.getStatusCode() == HttpStatus.OK) {\n                try {\n                    String contentEncoding = response.getHeaders().getFirst(\"Content-Encoding\");\n                    byte[] responseBody = response.getBody();\n                    String content;\n", "                    if (contentEncoding != null && contentEncoding.equalsIgnoreCase(\"gzip\")) {\n                        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(responseBody);\n                        GZIPInputStream gzipInputStream = new GZIPInputStream(byteArrayInputStream);\n                        content = IOUtils.toString(gzipInputStream, StandardCharsets.UTF_8);\n                    } else {\n                        content = new String(responseBody, StandardCharsets.UTF_8);\n                    }\n\n                    try (FileWriter fileWriter = new FileWriter(file)) {\n                        fileWriter.write(content);\n                        newFilings++;\n                    } catch (Exception e) {\n                        log.error(\"{}: {} failed to download\", cik, date, e);\n                    }\n                } catch (IOException e) {\n                    log.error(\"Error decompressing content: {}\", e.getMessage(), e);\n                }\n            } else {\n                log.error(\"{}: {} failed to download\", cik, date);\n            }\n        }\n        log.info(\"Finished downloading {} filings\", filingType);\n        log.info(\"New filings: {}, Existing filings: {}\", newFilings, existingFilings);\n        return \"Downloaded \" + newFilings + \" new filings and found \" + existingFilings + \" existing filings for \" + filingType + \".\";\n    }\n", "    public String downloadFilingsOfType13() {\n        log.info(\"Start downloading filings containing 13 in form type\");\n\n        Set<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();\n        Set<String> targetFormTypes = allFormTypes.stream()\n                .filter(formType -> formType.contains(\"13\"))\n                .collect(Collectors.toSet());\n\n        StringBuilder result = new StringBuilder();\n        int totalNewFilings = 0;\n        int totalExistingFilings = 0;\n", "        for (String formType : targetFormTypes) {\n            String downloadResult = downloadFilingsOfType(formType);\n            result.append(downloadResult).append(System.lineSeparator());\n\n            String[] parts = downloadResult.split(\"\\\\s+\");\n            int newFilings = Integer.parseInt(parts[2]);\n            int existingFilings = Integer.parseInt(parts[8]);\n\n            totalNewFilings += newFilings;\n            totalExistingFilings += existingFilings;\n        }\n\n        log.info(\"Finished downloading filings containing 13 in form type\");\n        result.append(\"Total new filings: \").append(totalNewFilings)\n                .append(\", Total existing filings: \").append(totalExistingFilings)\n                .append(\" for forms containing 13.\");\n\n        return result.toString();\n    }\n\n", "    public void generateMappings(List<String> csvFiles) {\n        log.info(\"Start generating mappings\");\n\n        ArrayList<String[]> dataFrames = new ArrayList<>();\n\n        csvFiles.forEach(csvFile -> {\n            Try<List<String[]>> recordsTry = readCsvFile(csvFile);\n            recordsTry.onSuccess(records -> dataFrames.addAll(records));\n        });\n\n        List<String[]> filteredData = filterAndTransformData(dataFrames.stream());\n\n        // Save the filtered data to the CikCusipMaps table\n        saveFilteredDataToTable(filteredData);\n        log.info(\"Finished generating mappings\");\n    }\n\n    @Transactional\n    private void saveFilteredDataToTable(List<String[]> filteredData) {", "        for (String[] row : filteredData) {\n            Long cik = Long.parseLong(row[0].trim());\n            String cusip6 = row[1].trim();\n            String cusip8 = row[2].trim();\n\n            CikCusipMaps cikCusipMaps = CikCusipMaps.builder()\n                    .cik(cik)\n                    .cusip6(cusip6)\n                    .cusip8(cusip8)\n                    .build();\n\n            cikCusipMapsRepository.save(cikCusipMaps);\n        }\n    }\n\n    private Try<List<String[]>> readCsvFile(String csvFile) {\n        return Try.of(() -> {\n            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {\n                return reader.lines()\n                        .skip(1) // Skip header\n                        .map(line -> line.split(\",\"))\n                        .collect(Collectors.toList());\n            }\n        });\n    }\n\n    private List<String[]> filterAndTransformData(java.util.stream.Stream<String[]> dataStream) {\n        return dataStream\n                .filter(columns -> columns[2].length() == 6 || columns[2].length() == 8 || columns[2].length() == 9)\n                .filter(columns -> !columns[2].startsWith(\"000000\") && !columns[2].startsWith(\"0001pt\"))\n                .map(columns -> {\n                    String cusip6 = columns[2].substring(0, 6);\n                    String cusip8 = columns[2].substring(0, 8);\n                    return new String[]{columns[1], cusip6, cusip8};\n                })\n                .distinct()\n                .collect(Collectors.toList());\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/EdgarSectorEnrichServiceImpl.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.jds.edgar.cik.download.config.EdgarConfig;\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;", "import org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.List;\nimport java.util.Optional;", "import java.util.List;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor\n@ConditionalOnProperty(name = \"edgar.use-sector-enrich\", havingValue = \"true\")\npublic class EdgarSectorEnrichServiceImpl {\n\n    private final EdgarConfig edgarConfig;\n    private final StockRepository cikRepository;\n\n    @Scheduled(cron = \"${edgar.sector-enrich-cron}\")", "@RequiredArgsConstructor\n@ConditionalOnProperty(name = \"edgar.use-sector-enrich\", havingValue = \"true\")\npublic class EdgarSectorEnrichServiceImpl {\n\n    private final EdgarConfig edgarConfig;\n    private final StockRepository cikRepository;\n\n    @Scheduled(cron = \"${edgar.sector-enrich-cron}\")\n    public void enrichNextCik() {\n        cikRepository.findFirstBySectorIsNull()\n                .ifPresent(stockCik -> enrichCik(stockCik.getTicker()));\n    }\n\n    public Optional<Stock> enrichCik(String ticker) {\n        return cikRepository.findByTicker(ticker)\n                .flatMap(stockCik -> {\n                    int retries = stockCik.getLastError() != null ? 1 : 3;\n                    return attemptEnrichCik(stockCik, retries);\n                });\n    }\n\n    private Optional<Stock> attemptEnrichCik(Stock stockCik, int retries) {", "    public void enrichNextCik() {\n        cikRepository.findFirstBySectorIsNull()\n                .ifPresent(stockCik -> enrichCik(stockCik.getTicker()));\n    }\n\n    public Optional<Stock> enrichCik(String ticker) {\n        return cikRepository.findByTicker(ticker)\n                .flatMap(stockCik -> {\n                    int retries = stockCik.getLastError() != null ? 1 : 3;\n                    return attemptEnrichCik(stockCik, retries);\n                });\n    }\n\n    private Optional<Stock> attemptEnrichCik(Stock stockCik, int retries) {", "        for (int attempt = 1; attempt <= retries; attempt++) {\n            if (attempt > 1) {\n                log.info(\"Attempt {} of {} for CIK: {}\", attempt, retries, stockCik.getCik());\n            }\n            try {\n                Stock.EnrichedData enrichedData = extractData(stockCik.getTicker());\n                stockCik.updateEnrichedData(enrichedData);\n                stockCik.setLastError(null);\n                return Optional.of(cikRepository.save(stockCik));\n            } catch (IOException e) {\n                log.error(\"Error enriching CIK: {} (attempt {}/{})\", stockCik.getCik(), attempt, retries, e);\n                stockCik.setLastError(e.getMessage());", "                if (attempt < retries) {\n                    try {\n                        TimeUnit.SECONDS.sleep(5);\n                    } catch (InterruptedException ie) {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        }\n        cikRepository.save(stockCik);\n        return Optional.empty();\n    }\n\n    private Stock.EnrichedData extractData(String ticker) throws IOException {\n        String url = edgarConfig.getEnrichSectorUrl().replace(\"{cik}\", String.valueOf(ticker));\n        log.info(\"Enriching CIK: {} from: {}\", ticker, url);\n\n        Document doc = Jsoup.connect(url).get();\n\n        // Check if \"No matching Ticker Symbol.\" is present in the HTML content", "        if (doc.text().contains(\"No matching Ticker Symbol.\")) {\n            log.warn(\"No matching Ticker Symbol for CIK: {}\", ticker);\n            return Stock.EnrichedData.builder()\n                    .sic(\"Not Found\")\n                    .sector(\"Not Found\")\n                    .build();\n        }\n\n        // Check if \"No matching CIK.\" is present in the HTML content\n        if (doc.text().contains(\"No matching CIK.\")) {\n            log.warn(\"No matching CIK for CIK: {}\", ticker);\n            return Stock.EnrichedData.builder()\n                    .sic(\"No CIK\")\n                    .sector(\"No CIK\")\n                    .build();\n        }\n\n        Elements sicElements = doc.select(\"p.identInfo a\");\n        String sic = \"\";", "        if (doc.text().contains(\"No matching CIK.\")) {\n            log.warn(\"No matching CIK for CIK: {}\", ticker);\n            return Stock.EnrichedData.builder()\n                    .sic(\"No CIK\")\n                    .sector(\"No CIK\")\n                    .build();\n        }\n\n        Elements sicElements = doc.select(\"p.identInfo a\");\n        String sic = \"\";\n        if (sicElements != null && !sicElements.isEmpty()) {\n            sic = sicElements.first().ownText().strip();\n        }\n\n        String sectorText = doc.select(\"p.identInfo\").first().text();\n        Pattern pattern = Pattern.compile(\"SIC: \\\\d{4} - (.*?) State location:\");\n        Matcher matcher = pattern.matcher(sectorText);\n\n        String sector = \"Not Available\";", "        if (sicElements != null && !sicElements.isEmpty()) {\n            sic = sicElements.first().ownText().strip();\n        }\n\n        String sectorText = doc.select(\"p.identInfo\").first().text();\n        Pattern pattern = Pattern.compile(\"SIC: \\\\d{4} - (.*?) State location:\");\n        Matcher matcher = pattern.matcher(sectorText);\n\n        String sector = \"Not Available\";\n        if (matcher.find()) {\n            sector = matcher.group(1).strip();\n        }\n\n        // Truncate the sector string to fit the database column\n        int maxSectorLength = 100;", "        if (matcher.find()) {\n            sector = matcher.group(1).strip();\n        }\n\n        // Truncate the sector string to fit the database column\n        int maxSectorLength = 100;\n        if (sector.length() > maxSectorLength) {\n            sector = sector.substring(0, maxSectorLength);\n        }\n\n        return Stock.EnrichedData.builder()\n                .sic(sic)\n                .sector(sector)\n                .build();\n    }\n", "    public void exportToCSV(PrintWriter writer) {\n        List<Stock> stockCiks = cikRepository.findAll();\n\n        writer.println(\"CIK,Ticker,Name,Sector,SIC\");\n\n        stockCiks.stream().map(stockCik -> String.format(\"%s,%s,%s,%s,%s\",\n                        stockCik.getCik(),\n                        stockCik.getTicker(),\n                        stockCik.getName(),\n                        stockCik.getSector(),\n                        stockCik.getSic()))\n                .forEach(writer::println);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/CikDownloadService.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\npublic interface CikDownloadService {\n    //    @Scheduled(cron = \"${edgar.cik-update-cron}\")\n    void downloadCikData();\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/CikDownloadServiceImpl.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jds.edgar.cik.download.config.EdgarConfig;\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport io.vavr.control.Try;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;", "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.time.LocalDateTime;\nimport java.util.Map;", "import java.time.LocalDateTime;\nimport java.util.Map;\nimport java.util.Optional;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor\n@ConditionalOnProperty(name = \"edgar.use-tickers\", havingValue = \"true\")\npublic class CikDownloadServiceImpl extends AbstractDownloadService {\n\n    private static final String PROCESS_NAME = \"CIK_DATA_UPDATE\";\n\n    private final EdgarConfig edgarConfig;\n    private final StockRepository stockCikRepository;\n\n    @Scheduled(cron = \"${edgar.cik-update-cron}\")\n    @Override\n    @Transactional", "public class CikDownloadServiceImpl extends AbstractDownloadService {\n\n    private static final String PROCESS_NAME = \"CIK_DATA_UPDATE\";\n\n    private final EdgarConfig edgarConfig;\n    private final StockRepository stockCikRepository;\n\n    @Scheduled(cron = \"${edgar.cik-update-cron}\")\n    @Override\n    @Transactional\n    public void downloadCikData() {\n        log.info(\"Started to download CIK data from: {}\", edgarConfig.getCompanyTickersUrl());\n\n        Try.of(() -> new URL(edgarConfig.getCompanyTickersUrl()))\n                .mapTry(url -> url.openConnection())\n                .mapTry(con -> (HttpURLConnection) con)\n                .andThenTry(con -> con.setRequestMethod(\"GET\"))\n                .mapTry(con -> con.getInputStream())\n                .mapTry(inputStream -> new ObjectMapper().readValue(inputStream, Map.class))\n                .onSuccess(data -> updateDatabase(data))\n                .onFailure(throwable -> log.error(\"Error downloading company tickers JSON\", throwable));\n    }\n\n    private void updateDatabase(Map<String, Map<String, Object>> data) {\n        data.forEach((key, value) -> {\n            Long cik = Long.valueOf(String.valueOf(value.get(\"cik_str\")));\n            Optional<Stock> stockCikOptional = stockCikRepository.findByCik(cik);\n", "    public void downloadCikData() {\n        log.info(\"Started to download CIK data from: {}\", edgarConfig.getCompanyTickersUrl());\n\n        Try.of(() -> new URL(edgarConfig.getCompanyTickersUrl()))\n                .mapTry(url -> url.openConnection())\n                .mapTry(con -> (HttpURLConnection) con)\n                .andThenTry(con -> con.setRequestMethod(\"GET\"))\n                .mapTry(con -> con.getInputStream())\n                .mapTry(inputStream -> new ObjectMapper().readValue(inputStream, Map.class))\n                .onSuccess(data -> updateDatabase(data))\n                .onFailure(throwable -> log.error(\"Error downloading company tickers JSON\", throwable));\n    }\n\n    private void updateDatabase(Map<String, Map<String, Object>> data) {\n        data.forEach((key, value) -> {\n            Long cik = Long.valueOf(String.valueOf(value.get(\"cik_str\")));\n            Optional<Stock> stockCikOptional = stockCikRepository.findByCik(cik);\n", "            if (stockCikOptional.isPresent()) {\n                Stock stockCik = stockCikOptional.get();\n                Stock originalStockCik = stockCik.copy();\n                boolean updated = false;\n\n                if (!stockCik.getTicker().equals(value.get(\"ticker\"))) {\n                    stockCik.setTicker((String) value.get(\"ticker\"));\n                    updated = true;\n                }\n\n                if (!stockCik.getName().equals(value.get(\"title\"))) {\n                    stockCik.setName((String) value.get(\"title\"));\n                    updated = true;\n                }\n", "                if (!stockCik.getName().equals(value.get(\"title\"))) {\n                    stockCik.setName((String) value.get(\"title\"));\n                    updated = true;\n                }\n\n                if (updated) {\n                    stockCik.setUpdated(LocalDateTime.now());\n                    stockCikRepository.save(stockCik);\n                    log.warn(\"CIK {} has been updated\", cik);\n                    log.info(\"Stock object before update: {}\", originalStockCik);\n                    log.info(\"Stock object after update: {}\", stockCik);\n                }\n            } else {\n                Stock newStockCik = Stock.builder()\n                        .cik(cik)\n                        .ticker((String) value.get(\"ticker\"))\n                        .name((String) value.get(\"title\"))\n                        .build();\n                stockCikRepository.save(newStockCik);\n                log.info(\"New Stock object saved: {}\", newStockCik);\n            }\n        });\n        updateLastExecutionTime(PROCESS_NAME);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/AbstractDownloadService.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.jds.edgar.cik.download.model.ProcessExecution;\nimport com.jds.edgar.cik.download.repository.ProcessExecutionRepository;\nimport jakarta.annotation.PostConstruct;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n", "import org.springframework.stereotype.Service;\n\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Optional;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor\npublic abstract class AbstractDownloadService implements CikDownloadService {\n    @Autowired\n    private ProcessExecutionRepository processExecutionRepository;\n\n    @PostConstruct", "@RequiredArgsConstructor\npublic abstract class AbstractDownloadService implements CikDownloadService {\n    @Autowired\n    private ProcessExecutionRepository processExecutionRepository;\n\n    @PostConstruct\n    public void init() {\n        Optional<ProcessExecution> lastExecution = processExecutionRepository.findById(1L);\n\n        if (lastExecution.isEmpty() || ChronoUnit.MONTHS.between(lastExecution.get().getLastExecution(), LocalDateTime.now()) > 1) {\n            downloadCikData();\n        }\n    }\n\n    void updateLastExecutionTime(String processName) {\n        ProcessExecution processExecution = processExecutionRepository.findByName(processName).orElseGet(() -> {\n            ProcessExecution newProcessExecution = new ProcessExecution();\n            newProcessExecution.setName(processName);\n            return newProcessExecution;\n        });\n\n        processExecution.setLastExecution(LocalDateTime.now());\n        processExecutionRepository.save(processExecution);\n    }\n}\n", "        if (lastExecution.isEmpty() || ChronoUnit.MONTHS.between(lastExecution.get().getLastExecution(), LocalDateTime.now()) > 1) {\n            downloadCikData();\n        }\n    }\n\n    void updateLastExecutionTime(String processName) {\n        ProcessExecution processExecution = processExecutionRepository.findByName(processName).orElseGet(() -> {\n            ProcessExecution newProcessExecution = new ProcessExecution();\n            newProcessExecution.setName(processName);\n            return newProcessExecution;\n        });\n\n        processExecution.setLastExecution(LocalDateTime.now());\n        processExecutionRepository.save(processExecution);\n    }\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/CikExchangeDownloadServiceImpl.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.jds.edgar.cik.download.config.EdgarConfig;\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.model.StockId;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport io.vavr.control.Try;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;", "import lombok.RequiredArgsConstructor;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.scheduling.annotation.Scheduled;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.time.LocalDateTime;", "import java.net.URL;\nimport java.time.LocalDateTime;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Optional;\n\n@Slf4j\n@Service\n@RequiredArgsConstructor\n@ConditionalOnProperty(name = \"edgar.use-tickers-exchange\", havingValue = \"true\")\npublic class CikExchangeDownloadServiceImpl extends AbstractDownloadService {\n\n    private final EdgarConfig edgarConfig;\n    private final StockRepository stockCikRepository;\n\n    private static final String PROCESS_NAME = \"CIK_DATA_UPDATE\";\n\n    @Override\n    @Scheduled(cron = \"${edgar.cik-exchange-update-cron}\")\n    @Transactional", "@RequiredArgsConstructor\n@ConditionalOnProperty(name = \"edgar.use-tickers-exchange\", havingValue = \"true\")\npublic class CikExchangeDownloadServiceImpl extends AbstractDownloadService {\n\n    private final EdgarConfig edgarConfig;\n    private final StockRepository stockCikRepository;\n\n    private static final String PROCESS_NAME = \"CIK_DATA_UPDATE\";\n\n    @Override\n    @Scheduled(cron = \"${edgar.cik-exchange-update-cron}\")\n    @Transactional", "    public void downloadCikData() {\n        log.info(\"Started to download CIK data from: {}\", edgarConfig.getCompanyTickersExchangeUrl());\n\n        Try.of(() -> new URL(edgarConfig.getCompanyTickersExchangeUrl()))\n                .mapTry(URL::openConnection)\n                .mapTry(con -> (HttpURLConnection) con)\n                .andThenTry(con -> con.setRequestMethod(\"GET\"))\n                .mapTry(HttpURLConnection::getInputStream)\n                .mapTry(inputStream -> new ObjectMapper().readValue(inputStream, LinkedHashMap.class))\n                .onSuccess(data -> updateDatabase(data))\n                .onFailure(throwable -> log.error(\"Error downloading company tickers with exchange JSON\", throwable));\n    }\n\n    private void updateDatabase(LinkedHashMap<String, Object> data) {\n        List<List<Object>> stockData = (List<List<Object>>) data.get(\"data\");\n        stockData.forEach(stockValues -> {\n            Long cik = Long.valueOf(String.valueOf(stockValues.get(0)));\n            String ticker = (String) stockValues.get(2);\n            StockId stockId = new StockId(cik, ticker);\n            Optional<Stock> optionalStockCik = stockCikRepository.findById(stockId);\n\n            Stock stockCik = optionalStockCik.orElseGet(() -> {\n                Stock newStockCik = Stock.builder()\n                        .cik(cik)\n                        .ticker(ticker)\n                        .name((String) stockValues.get(1))\n                        .exchange((String) stockValues.get(3))\n                        .build();\n                stockCikRepository.save(newStockCik);\n                log.info(\"New Stock object saved: {}\", newStockCik);\n                return newStockCik;\n            });\n\n            Stock originalStockCik = stockCik.copy();\n            boolean updated = false;\n\n            String newExchange = (String) stockValues.get(3);", "            if (stockCik.getExchange() == null && newExchange != null || stockCik.getExchange() != null && !stockCik.getExchange().equals(newExchange)) {\n                stockCik.setExchange(newExchange);\n                updated = true;\n            }\n\n            if (!stockCik.getName().equals(stockValues.get(1))) {\n                stockCik.setName((String) stockValues.get(1));\n                updated = true;\n            }\n\n            if (updated) {\n                stockCik.setUpdated(LocalDateTime.now());\n                stockCikRepository.save(stockCik);\n                log.warn(\"Stock ID {} has been updated\", stockId);\n                log.info(\"Stock object before update: {}\", originalStockCik);\n                log.info(\"Stock object after update: {}\", stockCik);\n            }\n        });\n        updateLastExecutionTime(PROCESS_NAME);\n    }\n\n}\n", "            if (updated) {\n                stockCik.setUpdated(LocalDateTime.now());\n                stockCikRepository.save(stockCik);\n                log.warn(\"Stock ID {} has been updated\", stockId);\n                log.info(\"Stock object before update: {}\", originalStockCik);\n                log.info(\"Stock object after update: {}\", stockCik);\n            }\n        });\n        updateLastExecutionTime(PROCESS_NAME);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/jds/edgar/cik/download/service/StockEnrichmentServiceImpl.java", "chunked_list": ["package com.jds.edgar.cik.download.service;\n\nimport com.jds.edgar.cik.download.model.CikCusipMaps;\nimport com.jds.edgar.cik.download.model.Stock;\nimport com.jds.edgar.cik.download.repository.CikCusipMapsRepository;\nimport com.jds.edgar.cik.download.repository.StockRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;", "\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class StockEnrichmentServiceImpl {\n    private final StockRepository stockCikRepository;\n    private final CikCusipMapsRepository cikCusipMapsRepository;\n\n    public void enrichStockWithCusips() {\n        List<Stock> stockCiks = stockCikRepository.findAll();\n        List<CikCusipMaps> cikCusipMaps = cikCusipMapsRepository.findAll();\n", "    public void enrichStockWithCusips() {\n        List<Stock> stockCiks = stockCikRepository.findAll();\n        List<CikCusipMaps> cikCusipMaps = cikCusipMapsRepository.findAll();\n\n        for (Stock stockCik : stockCiks) {\n            CikCusipMaps matchingCikCusipMap = cikCusipMaps.stream()\n                    .filter(cikCusipMap -> cikCusipMap.getCik().equals(stockCik.getCik()))\n                    .findFirst()\n                    .orElse(null);\n\n            if (matchingCikCusipMap != null) {\n                stockCik.setCusip6(matchingCikCusipMap.getCusip6());\n                stockCik.setCusip8(matchingCikCusipMap.getCusip8());\n                stockCikRepository.save(stockCik);\n            }\n        }\n    }\n}\n", "            if (matchingCikCusipMap != null) {\n                stockCik.setCusip6(matchingCikCusipMap.getCusip6());\n                stockCik.setCusip8(matchingCikCusipMap.getCusip8());\n                stockCikRepository.save(stockCik);\n            }\n        }\n    }\n}\n"]}
