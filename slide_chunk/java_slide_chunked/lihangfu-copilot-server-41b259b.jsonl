{"filename": "copilot-system/src/test/java/com/copilot/CopilotSystemApplicationTests.java", "chunked_list": ["package com.copilot;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass CopilotSystemApplicationTests {\n\n    @Test\n    void contextLoads() {", "    @Test\n    void contextLoads() {\n    }\n\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/CopilotSystemApplication.java", "chunked_list": ["package com.copilot;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * \u7cfb\u7edf\u5165\u53e3\n */\n@SpringBootApplication\npublic class CopilotSystemApplication {\n", "@SpringBootApplication\npublic class CopilotSystemApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(CopilotSystemApplication.class, args);\n    }\n\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/handle/AuthenticationEntryPointImpl.java", "chunked_list": ["package com.copilot.modules.security.handle;\n\nimport cn.hutool.http.HttpStatus;\nimport com.copilot.common.utils.R;\nimport com.copilot.modules.security.utils.SecurityUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.security.web.AuthenticationEntryPoint;\n\nimport javax.servlet.http.HttpServletRequest;", "\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.Serializable;\n\n/**\n * @program: copilot-server\n * @description: \u8ba4\u8bc1\u5931\u8d25\n * @author: hfli8", " * @description: \u8ba4\u8bc1\u5931\u8d25\n * @author: hfli8\n * @create: 2023/4/13 19:09\n */\n@Slf4j\npublic class AuthenticationEntryPointImpl implements AuthenticationEntryPoint, Serializable {\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException e) throws IOException {\n        log.error(\"\u8bf7\u6c42\u8bbf\u95ee: \" + request.getRequestURI() + \" \u63a5\u53e3\uff0c \u7ecfjwt\u8ba4\u8bc1\u5931\u8d25\uff0c\u65e0\u6cd5\u8bbf\u95ee\u7cfb\u7edf\u8d44\u6e90.\");\n        SecurityUtil.writeJavaScript(R.error(HttpStatus.HTTP_UNAUTHORIZED, \"\u8bf7\u6c42\u8bbf\u95ee:\" + request.getRequestURI() + \"\u63a5\u53e3,\u7ecfjwt \u8ba4\u8bc1\u5931\u8d25,\u65e0\u6cd5\u8bbf\u95ee\u7cfb\u7edf\u8d44\u6e90\"), response);\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/utils/JwtUtil.java", "chunked_list": ["package com.copilot.modules.security.utils;\n\nimport com.baomidou.mybatisplus.core.toolkit.StringUtils;\nimport com.copilot.modules.security.bean.SecurityUser;\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport lombok.extern.log4j.Log4j2;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.GrantedAuthority;", "import org.springframework.beans.factory.annotation.Value;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.*;\n\n/**\n * @program: copilot-server", "/**\n * @program: copilot-server\n * @description: jwt \u5de5\u5177\u7c7b\n * @author: hfli8\n * @create: 2023/4/12 14:29\n */\n@Log4j2\n@Component\npublic class JwtUtil {\n\n    /**\n     * \u7528\u6237\u540d\u79f0\n     */\n    private static final String USERNAME = Claims.SUBJECT;\n\n    private static final String USERID = \"userid\";\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    private static final String CREATED = \"created\";\n    /**\n     * \u6743\u9650\u5217\u8868\n     */\n    private static final String AUTHORITIES = \"authorities\";\n    /**\n     * \u5bc6\u94a5\n     */\n    private static final String SECRET = \"abcdefgh\";\n    /**\n     * \u6709\u6548\u671f1\u5c0f\u65f6\n     */\n    private static final long EXPIRE_TIME = 60 * 60 * 1000;\n\n    @Value(\"${jwt.header}\")\n    private String tokenHeader;\n\n    @Value(\"${jwt.tokenHead}\")\n    private String authTokenStart;\n\n    /**\n     * \u751f\u6210\u4ee4\u724c\n     *\n     * @return \u4ee4\u724c\n     */", "public class JwtUtil {\n\n    /**\n     * \u7528\u6237\u540d\u79f0\n     */\n    private static final String USERNAME = Claims.SUBJECT;\n\n    private static final String USERID = \"userid\";\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    private static final String CREATED = \"created\";\n    /**\n     * \u6743\u9650\u5217\u8868\n     */\n    private static final String AUTHORITIES = \"authorities\";\n    /**\n     * \u5bc6\u94a5\n     */\n    private static final String SECRET = \"abcdefgh\";\n    /**\n     * \u6709\u6548\u671f1\u5c0f\u65f6\n     */\n    private static final long EXPIRE_TIME = 60 * 60 * 1000;\n\n    @Value(\"${jwt.header}\")\n    private String tokenHeader;\n\n    @Value(\"${jwt.tokenHead}\")\n    private String authTokenStart;\n\n    /**\n     * \u751f\u6210\u4ee4\u724c\n     *\n     * @return \u4ee4\u724c\n     */", "    public static String generateToken(SecurityUser userDetail) {\n        Map<String, Object> claims = new HashMap<>(3);\n        claims.put(USERID, userDetail.getId());\n        claims.put(USERNAME, userDetail.getUsername());\n        claims.put(CREATED, new Date());\n        claims.put(AUTHORITIES, userDetail.getAuthorities());\n        return generateToken(claims);\n    }\n\n    /**\n     * \u4ece\u6570\u636e\u58f0\u660e\u751f\u6210\u4ee4\u724c\n     *\n     * @param claims \u6570\u636e\u58f0\u660e\n     * @return \u4ee4\u724c\n     */\n    private static String generateToken(Map<String, Object> claims) {\n        Date expirationDate = new Date(System.currentTimeMillis() + EXPIRE_TIME);\n        return Jwts.builder().setClaims(claims).setExpiration(expirationDate).signWith(SignatureAlgorithm.HS512, SECRET).compact();\n    }\n\n    /**\n     * \u4ece\u4ee4\u724c\u4e2d\u83b7\u53d6\u7528\u6237\u540d\n     *\n     * @param token \u4ee4\u724c\n     * @return \u7528\u6237\u540d\n     */", "    public static String getUsernameFromToken(String token) {\n        Claims claims = getClaimsFromToken(token);\n        return claims.getSubject();\n    }\n\n    /**\n     * \u4ece\u4ee4\u724c\u4e2d\u83b7\u53d6\u6570\u636e\u58f0\u660e\n     *\n     * @param token \u4ee4\u724c\n     * @return \u6570\u636e\u58f0\u660e\n     */\n    private static Claims getClaimsFromToken(String token) {\n        Claims claims;", "        try {\n            claims = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody();\n        } catch (Exception e) {\n            claims = null;\n        }\n        return claims;\n    }\n\n    /**\n     * \u9a8c\u8bc1\u4ee4\u724c\n     *\n     * @param token    token\n     * @param username username\n     * @return check\n     */\n    private static Boolean validateToken(String token, String username) {\n        String userName = getUsernameFromToken(token);\n        return (userName.equals(username) && !isTokenExpired(token));\n    }\n\n    /**\n     * \u5237\u65b0\u4ee4\u724c\n     *\n     * @param token token\n     * @return token\n     */", "    public static String refreshToken(String token) {\n        String refreshedToken;\n        try {\n            Claims claims = getClaimsFromToken(token);\n            claims.put(CREATED, new Date());\n            refreshedToken = generateToken(claims);\n        } catch (Exception e) {\n            refreshedToken = null;\n        }\n        return refreshedToken;\n    }\n\n    /**\n     * \u5224\u65ad\u4ee4\u724c\u662f\u5426\u8fc7\u671f\n     *\n     * @param token \u4ee4\u724c\n     * @return \u662f\u5426\u8fc7\u671f\n     */\n    private static Boolean isTokenExpired(String token) {", "        try {\n            Claims claims = getClaimsFromToken(token);\n            Date expiration = claims.getExpiration();\n            return expiration.before(new Date());\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    /**\n     * \u6839\u636e\u8bf7\u6c42\u4ee4\u724c\u83b7\u53d6\u767b\u5f55\u8ba4\u8bc1\u4fe1\u606f\n     *\n     * @return \u7528\u6237\u540d\n     */", "    public SecurityUser getUserFromToken(HttpServletRequest request) {\n        // \u83b7\u53d6\u8bf7\u6c42\u643a\u5e26\u7684\u4ee4\u724c\n        String token = getToken(request);\n        if (StringUtils.isNotEmpty(token)) {\n            Claims claims = getClaimsFromToken(token);\n            if (claims == null) {\n                return null;\n            }\n            String username = claims.getSubject();\n            if (username == null) {\n                return null;\n            }", "            if (username == null) {\n                return null;\n            }\n            if (isTokenExpired(token)) {\n                return null;\n            }\n            // \u89e3\u6790\u5bf9\u5e94\u7684\u6743\u9650\u4ee5\u53ca\u7528\u6237id\n            Object authors = claims.get(AUTHORITIES);\n            Long userId = (Long) claims.get(USERID);\n            Set<String> perms = new HashSet<>();\n            if (authors instanceof List) {", "            if (authors instanceof List) {\n                for (Object object : (List<?>) authors) {\n                    perms.add(((Map<?, ?>) object).get(\"authority\").toString());\n                }\n            }\n            Collection<? extends GrantedAuthority> authorities = AuthorityUtils.createAuthorityList(perms.toArray(new String[0]));\n            if (validateToken(token, username)) {\n                // \u672a\u628a\u5bc6\u7801\u653e\u5230jwt\n                return new SecurityUser(userId, username, \"\", authorities, null);\n            }\n        }\n        return null;\n    }\n\n    /**\n     * \u83b7\u53d6\u8bf7\u6c42token\n     *\n     * @param request request\n     * @return token\n     */\n    private String getToken(HttpServletRequest request) {\n        String token = request.getHeader(tokenHeader);", "        if (StringUtils.isNotEmpty(token)) {\n            token = token.substring(authTokenStart.length());\n        }\n        return token;\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/utils/SecurityUtil.java", "chunked_list": ["package com.copilot.modules.security.utils;\n\nimport com.copilot.common.exception.BaseException;\nimport com.copilot.common.utils.R;\nimport com.copilot.modules.security.bean.SecurityUser;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport lombok.experimental.UtilityClass;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;", "import org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\n/**\n * @program: copilot-server\n * @description: \u5b89\u5168\u670d\u52a1\u5de5\u5177\u7c7b", " * @program: copilot-server\n * @description: \u5b89\u5168\u670d\u52a1\u5de5\u5177\u7c7b\n * @author: hfli8\n * @create: 2023/4/12 13:54\n */\n@UtilityClass\npublic class SecurityUtil {\n\n    public void writeJavaScript(R r, HttpServletResponse response) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        response.setStatus(200);\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json; charset=utf-8\");\n        PrintWriter printWriter = response.getWriter();\n        printWriter.write(mapper.writeValueAsString(r));\n        printWriter.flush();\n    }\n\n    /**\n     * \u83b7\u53d6Authentication\n     */\n    private Authentication getAuthentication() {\n        return SecurityContextHolder.getContext().getAuthentication();\n    }\n\n    /**\n     * \u83b7\u53d6\u7528\u6237\n     *\n     * @return \u7528\u6237\n     */", "    public void writeJavaScript(R r, HttpServletResponse response) throws IOException {\n        ObjectMapper mapper = new ObjectMapper();\n        response.setStatus(200);\n        response.setCharacterEncoding(\"UTF-8\");\n        response.setContentType(\"application/json; charset=utf-8\");\n        PrintWriter printWriter = response.getWriter();\n        printWriter.write(mapper.writeValueAsString(r));\n        printWriter.flush();\n    }\n\n    /**\n     * \u83b7\u53d6Authentication\n     */\n    private Authentication getAuthentication() {\n        return SecurityContextHolder.getContext().getAuthentication();\n    }\n\n    /**\n     * \u83b7\u53d6\u7528\u6237\n     *\n     * @return \u7528\u6237\n     */", "    public SecurityUser getUser() {\n        try {\n            return (SecurityUser) getAuthentication().getPrincipal();\n        } catch (Exception e) {\n            throw new BaseException(\"\u767b\u5f55\u72b6\u6001\u8fc7\u671f\", HttpStatus.UNAUTHORIZED.value());\n        }\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/config/SecurityConfig.java", "chunked_list": ["package com.copilot.modules.security.config;\n\nimport com.copilot.modules.security.handle.AuthenticationEntryPointImpl;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;", "import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\n\n/**\n * @program: copilot-server\n * @description: TODO\n * @author: hfli8\n * @create: 2023/4/10 17:09", " * @author: hfli8\n * @create: 2023/4/10 17:09\n */\n@Configuration\n// \u5f00\u542f Spring Security\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    /**\n     * \u83b7\u53d6AuthenticationManager\uff08\u8ba4\u8bc1\u7ba1\u7406\u5668\uff09\uff0c\u767b\u5f55\u65f6\u8ba4\u8bc1\u4f7f\u7528\n     *\n     * @param authenticationConfiguration authenticationConfiguration\n     * @return authenticationManager\n     * @throws Exception Exception\n     */\n    @Bean", "    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n    /**\n     * \u914d\u7f6e\u5bc6\u7801\u7ba1\u7406\u5668\n     *\n     * @return PasswordEncoder\n     */\n    @Bean\n    public static PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Bean", "    public static PasswordEncoder passwordEncoder() {\n        return NoOpPasswordEncoder.getInstance();\n    }\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .csrf().disable()\n                .authorizeRequests(registry -> registry\n                        .antMatchers(\"/test\", \"/login\").anonymous()\n                        .anyRequest()\n                        .authenticated())\n                .sessionManagement(session -> session\n                        .maximumSessions(1)\n                );\n        // \u5f02\u5e38\u5904\u7406\n        http\n                .exceptionHandling(configurer -> configurer\n                        .authenticationEntryPoint(new AuthenticationEntryPointImpl()));\n        return http.build();\n    }\n}"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/bean/SecurityUser.java", "chunked_list": ["package com.copilot.modules.security.bean;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\nimport java.util.Objects;", "import java.util.Collection;\nimport java.util.Objects;\n\n/**\n * @program: copilot-server\n * @description: TODO\n * @author: hfli8\n * @create: 2023/4/11 14:43\n */\n@Setter", " */\n@Setter\n@Getter\n@Accessors(chain = true)\npublic class SecurityUser implements UserDetails {\n\n    private static final long serialVersionUID = 1L;\n    private LoginType loginType = LoginType.normal;\n    private Long id;\n    private String username;\n    private String password;\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public SecurityUser(Long id, String username, String password, Collection<? extends GrantedAuthority> authorities, LoginType loginType) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n        this.loginType = loginType;\n\n    }\n\n    /**\n     * \u8fd4\u56de\u5206\u914d\u7ed9\u7528\u6237\u7684\u89d2\u8272\u5217\u8868\n     *\n     * @return\n     */\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    @Override", "    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return null;\n    }\n\n    /**\n     * \u8d26\u6237\u662f\u5426\u672a\u8fc7\u671f,\u8fc7\u671f\u65e0\u6cd5\u9a8c\u8bc1\n     *\n     * @return\n     */\n    @Override", "    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    /**\n     * \u6307\u5b9a\u7528\u6237\u662f\u5426\u89e3\u9501,\u9501\u5b9a\u7684\u7528\u6237\u65e0\u6cd5\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\n     *\n     * @return\n     */\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    /**\n     * \u6307\u793a\u662f\u5426\u5df2\u8fc7\u671f\u7684\u7528\u6237\u7684\u51ed\u636e(\u5bc6\u7801),\u8fc7\u671f\u7684\u51ed\u636e\u9632\u6b62\u8ba4\u8bc1\n     *\n     * @return\n     */\n    @Override", "    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    /**\n     * \u6307\u793a\u662f\u5426\u5df2\u8fc7\u671f\u7684\u7528\u6237\u7684\u51ed\u636e(\u5bc6\u7801),\u8fc7\u671f\u7684\u51ed\u636e\u9632\u6b62\u8ba4\u8bc1\n     *\n     * @return\n     */\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    /**\n     * \u662f\u5426\u53ef\u7528 ,\u7981\u7528\u7684\u7528\u6237\u4e0d\u80fd\u8eab\u4efd\u9a8c\u8bc1\n     *\n     * @return\n     */\n    @Override", "    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    /**\n     * \u662f\u5426\u53ef\u7528 ,\u7981\u7528\u7684\u7528\u6237\u4e0d\u80fd\u8eab\u4efd\u9a8c\u8bc1\n     *\n     * @return\n     */\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    @Override", "    public boolean isEnabled() {\n        return true;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        SecurityUser that = (SecurityUser) o;\n        return loginType == that.loginType && Objects.equals(id, that.id) && Objects.equals(username, that.username) && Objects.equals(password, that.password) && Objects.equals(authorities, that.authorities);\n    }\n\n    @Override", "    public int hashCode() {\n        return Objects.hash(loginType, id, username, password, authorities);\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/bean/LoginType.java", "chunked_list": ["package com.copilot.modules.security.bean;\n\nimport lombok.Getter;\n\n@Getter\npublic enum LoginType {\n    normal, sms, social;\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/security/service/UserDetailsServiceImpl.java", "chunked_list": ["package com.copilot.modules.security.service;\n\nimport cn.hutool.core.util.ObjectUtil;\nimport com.copilot.modules.security.bean.LoginType;\nimport com.copilot.modules.security.bean.SecurityUser;\nimport com.copilot.modules.sys.domain.SysUser;\nimport com.copilot.modules.sys.service.ISysUserService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;", "import org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\nimport java.util.Collection;\n", "import java.util.Collection;\n\n/**\n * @program: copilot-server\n * @description: \u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\n * @author: hfli8\n * @create: 2023/4/11 14:19\n */\n@Slf4j\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Resource\n    private ISysUserService userService;\n\n    /**\n     * \u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\n     *\n     * @param username \u7528\u6237\u540d\n     * @return UserDetails\n     * @throws UsernameNotFoundException \u7528\u6237\u4e0d\u5b58\u5728\n     */\n    @Override", "@Slf4j\n@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\n    @Resource\n    private ISysUserService userService;\n\n    /**\n     * \u7528\u6237\u540d\u5bc6\u7801\u767b\u5f55\n     *\n     * @param username \u7528\u6237\u540d\n     * @return UserDetails\n     * @throws UsernameNotFoundException \u7528\u6237\u4e0d\u5b58\u5728\n     */\n    @Override", "    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        SysUser sysUser = new SysUser();\n        sysUser.setUsername(username);\n        SysUser user = userService.findSecurityUserByUser(sysUser);\n        if (ObjectUtil.isNull(user)) {\n            log.info(\"\u767b\u5f55\u7528\u6237\uff1a\" + username + \" \u4e0d\u5b58\u5728.\");\n            throw new UsernameNotFoundException(\"\u767b\u5f55\u7528\u6237\uff1a\" + username + \" \u4e0d\u5b58\u5728\");\n        }\n        Collection<? extends GrantedAuthority> authorities = getUserAuthorities(user.getId());\n        return new SecurityUser(user.getId(), username, user.getPassword(), authorities, LoginType.normal);\n    }\n\n    /**\n     * \u5c01\u88c5 \u6839\u636e\u7528\u6237Id\u83b7\u53d6\u6743\u9650\n     *\n     * @param userId \u7528\u6237id\n     * @return \u6743\u9650\u96c6\u5408\n     */\n    private Collection<? extends GrantedAuthority> getUserAuthorities(long userId) {\n        // \u83b7\u53d6\u7528\u6237\u62e5\u6709\u7684\u89d2\u8272\n        // \u7528\u6237\u6743\u9650\u5217\u8868\uff0c\u6839\u636e\u7528\u6237\u62e5\u6709\u7684\u6743\u9650\u6807\u8bc6\u4e0e\u5982 @PreAuthorize(\"hasAuthority('sys:menu:view')\") \u6807\u6ce8\u7684\u63a5\u53e3\u5bf9\u6bd4\uff0c\u51b3\u5b9a\u662f\u5426\u53ef\u4ee5\u8c03\u7528\u63a5\u53e3\n        // \u6743\u9650\u96c6\u5408\n        // Set<String> permissions = userService.findPermsByUserId(userId);\n        // \u89d2\u8272\u96c6\u5408\n        // Set<String> roleIds = userService.findRoleIdByUserId(userId);\n        // permissions.addAll(roleIds);\n        return AuthorityUtils.createAuthorityList(\"admin\");\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/domain/SysUser.java", "chunked_list": ["package com.copilot.modules.sys.domain;\n\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\nimport lombok.experimental.Accessors;\n", "import lombok.experimental.Accessors;\n\nimport java.time.LocalDateTime;\n\n/**\n * @program: copilot-server\n * @description: \u7528\u6237\u8868\n * @author: hfli8\n * @create: 2023/4/8 16:15\n */", " * @create: 2023/4/8 16:15\n */\n@Data\n@EqualsAndHashCode(callSuper = true)\n@Accessors(chain = true)\n@TableName(\"sys_user\")\npublic class SysUser extends Model<SysUser> {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \u4e3b\u952eID\n     */\n    @TableId(type = IdType.AUTO)\n    private Long id;\n\n    /**\n     * \u7528\u6237\u540d\u79f0\n     */\n    private String name;\n\n    /**\n     * \u7528\u6237\u540d\n     */\n    private String username;\n\n    /**\n     * \u5bc6\u7801\n     */\n    private String password;\n\n    /**\n     * \u6027\u522b  0\uff1a\u7537   1\uff1a\u5973    2\uff1a\u4fdd\u5bc6\n     */\n    private Integer gender;\n\n    /**\n     * \u5934\u50cf\n     */\n    private String avatar;\n\n    /**\n     * \u90ae\u7bb1\n     */\n    private String email;\n\n    /**\n     * \u624b\u673a\u53f7\n     */\n    private String mobile;\n\n    /**\n     * \u72b6\u6001  0\uff1a\u505c\u7528   1\uff1a\u6b63\u5e38\n     */\n    private Integer status;\n\n    /**\n     * \u521b\u5efa\u8005\n     */\n    private Long creator;\n\n    /**\n     * \u66f4\u65b0\u8005\n     */\n    private Long updater;\n\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    private LocalDateTime createTime;\n\n    /**\n     * \u4fee\u6539\u65f6\u95f4\n     */\n    private LocalDateTime updateTime;\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/controller/IndexController.java", "chunked_list": ["package com.copilot.modules.sys.controller;\n\nimport cn.hutool.core.util.StrUtil;\nimport com.copilot.common.utils.R;\nimport com.copilot.modules.sys.service.IIndexService;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.annotation.Resource;", "\nimport javax.annotation.Resource;\nimport javax.servlet.http.HttpServletRequest;\n\n/**\n * @program: copilot-server\n * @description: \u57fa\u7840\u63a5\u53e3\n * @author: hfli8\n * @create: 2023/4/12 14:17\n */", " * @create: 2023/4/12 14:17\n */\n@RestController\npublic class IndexController {\n\n    @Resource\n    private IIndexService indexService;\n\n    @GetMapping(\"/test\")\n    private R<String> test() {\n        return R.ok(\"success\");\n    }\n\n    @GetMapping(\"/test/login\")\n    private R<String> testLogin() {\n        return R.ok(\"login success\");\n    }\n\n\n    @RequestMapping(\"/login\")\n    public R<String> login(String username, String password, HttpServletRequest request) {\n        String token = request.getParameter(\"token\");", "        if (StrUtil.isNotEmpty(token)) {\n            return R.ok(token);\n        }\n        return R.ok(indexService.login(username, password));\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/service/ISysUserService.java", "chunked_list": ["package com.copilot.modules.sys.service;\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport com.copilot.modules.sys.domain.SysUser;\n\npublic interface ISysUserService extends IService<SysUser> {\n    /**\n     * \u901a\u8fc7\u7528\u6237\u540d\u67e5\u627e\u7528\u6237\u4e2a\u4eba\u4fe1\u606f\n     *\n     * @param username \u7528\u6237\u540d\n     * @return \u7528\u6237\u4fe1\u606f\n     */\n    SysUser findByUserInfoName(String username);\n\n    /**\n     * \u901a\u8fc7\u7528\u6237\u53bb\u67e5\u627e\u7528\u6237(id/\u7528\u6237\u540d/\u624b\u673a\u53f7)\n     *\n     * @param sysUser\n     * @return\n     */\n    SysUser findSecurityUserByUser(SysUser sysUser);\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/service/IIndexService.java", "chunked_list": ["package com.copilot.modules.sys.service;\n\npublic interface IIndexService {\n    /**\n     * \u767b\u5f55\n     *\n     * @param username username\n     * @param password password\n     * @return token\n     */\n    String login(String username, String password);\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/service/impl/SysUserServiceImpl.java", "chunked_list": ["package com.copilot.modules.sys.service.impl;\n\nimport cn.hutool.core.util.ObjectUtil;\nimport cn.hutool.core.util.StrUtil;\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.copilot.modules.sys.domain.SysUser;\nimport com.copilot.modules.sys.mapper.SysUserMapper;\nimport com.copilot.modules.sys.service.ISysUserService;", "import com.copilot.modules.sys.mapper.SysUserMapper;\nimport com.copilot.modules.sys.service.ISysUserService;\nimport org.springframework.stereotype.Service;\n\n/**\n * @program: copilot-server\n * @description: \u7528\u6237\u670d\u52a1\n * @author: hfli8\n * @create: 2023/4/11 14:29\n */", " * @create: 2023/4/11 14:29\n */\n@Service\npublic class SysUserServiceImpl extends ServiceImpl<SysUserMapper, SysUser> implements ISysUserService {\n    @Override\n    public SysUser findByUserInfoName(String username) {\n        return baseMapper.selectOne(Wrappers.<SysUser>lambdaQuery().select(SysUser::getId, SysUser::getName, SysUser::getUsername, SysUser::getPassword, SysUser::getGender, SysUser::getAvatar, SysUser::getEmail, SysUser::getMobile, SysUser::getStatus).eq(SysUser::getUsername, username));\n    }\n\n    @Override\n    public SysUser findSecurityUserByUser(SysUser sysUser) {\n        LambdaQueryWrapper<SysUser> select = Wrappers.<SysUser>lambdaQuery().select(SysUser::getId, SysUser::getUsername, SysUser::getPassword);", "    public SysUser findSecurityUserByUser(SysUser sysUser) {\n        LambdaQueryWrapper<SysUser> select = Wrappers.<SysUser>lambdaQuery().select(SysUser::getId, SysUser::getUsername, SysUser::getPassword);\n        if (StrUtil.isNotEmpty(sysUser.getUsername())) {\n            select.eq(SysUser::getUsername, sysUser.getUsername());\n        } else if (StrUtil.isNotEmpty(sysUser.getMobile())) {\n            select.eq(SysUser::getMobile, sysUser.getMobile());\n        } else if (ObjectUtil.isNotNull(sysUser.getId()) && sysUser.getId() != 0) {\n            select.eq(SysUser::getId, sysUser.getId());\n        }\n        return baseMapper.selectOne(select);\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/service/impl/IndexServiceImpl.java", "chunked_list": ["package com.copilot.modules.sys.service.impl;\n\nimport com.copilot.modules.security.bean.SecurityUser;\nimport com.copilot.modules.security.utils.JwtUtil;\nimport com.copilot.modules.sys.service.IIndexService;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;", "import org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\n\nimport javax.annotation.Resource;\n\n/**\n * @program: copilot-server\n * @description: \u5e73\u53f0\u57fa\u7840\u670d\u52a1\n * @author: hfli8\n * @create: 2023/4/14 11:11", " * @author: hfli8\n * @create: 2023/4/14 11:11\n */\n@Service\npublic class IndexServiceImpl implements IIndexService {\n    @Resource\n    private AuthenticationManager authenticationManager;\n\n    @Override\n    public String login(String username, String password) {\n        //\u7528\u6237\u9a8c\u8bc1\n        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));\n        //\u5b58\u50a8\u8ba4\u8bc1\u4fe1\u606f\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        //\u751f\u6210token\n        SecurityUser userDetail = (SecurityUser) authentication.getPrincipal();\n        return JwtUtil.generateToken(userDetail);\n    }\n}\n", "    public String login(String username, String password) {\n        //\u7528\u6237\u9a8c\u8bc1\n        Authentication authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));\n        //\u5b58\u50a8\u8ba4\u8bc1\u4fe1\u606f\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        //\u751f\u6210token\n        SecurityUser userDetail = (SecurityUser) authentication.getPrincipal();\n        return JwtUtil.generateToken(userDetail);\n    }\n}\n"]}
{"filename": "copilot-system/src/main/java/com/copilot/modules/sys/mapper/SysUserMapper.java", "chunked_list": ["package com.copilot.modules.sys.mapper;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.copilot.modules.sys.domain.SysUser;\nimport org.apache.ibatis.annotations.Mapper;\n\n@Mapper\npublic interface SysUserMapper extends BaseMapper<SysUser> {\n}\n"]}
{"filename": "copilot-common/src/main/java/com/copilot/common/entity/BaseEntity.java", "chunked_list": ["package com.copilot.common.entity;\n\nimport com.baomidou.mybatisplus.annotation.FieldFill;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport lombok.Data;\n\nimport java.util.Date;\n\n/**", "\n/**\n * @program: copilot-server\n * @description: \u57fa\u7840\u5b9e\u4f53\u7c7b\uff0c\u6240\u6709\u5b9e\u4f53\u90fd\u9700\u8981\u7ee7\u627f\n * @author: hfli\n * @create: 2023/4/7 14:40\n */\n@Data\npublic class BaseEntity {\n    /**\n     * id\n     */\n    @TableId\n    private Long id;\n    /**\n     * \u521b\u5efa\u8005\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Long  creator;\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Date createDate;\n}\n", "public class BaseEntity {\n    /**\n     * id\n     */\n    @TableId\n    private Long id;\n    /**\n     * \u521b\u5efa\u8005\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Long  creator;\n    /**\n     * \u521b\u5efa\u65f6\u95f4\n     */\n    @TableField(fill = FieldFill.INSERT)\n    private Date createDate;\n}\n"]}
{"filename": "copilot-common/src/main/java/com/copilot/common/utils/R.java", "chunked_list": ["package com.copilot.common.utils;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport lombok.experimental.Accessors;\nimport org.springframework.http.HttpStatus;\n\nimport java.io.Serializable;\n", "import java.io.Serializable;\n\n\n/**\n * @program: copilot-server\n * @description: \u54cd\u5e94\u4fe1\u606f\u4e3b\u4f53\n * @author: hfli\n * @create: 2023/4/7 14:40\n */\n@Setter", " */\n@Setter\n@Getter\n@ToString\n@Accessors(chain = true)\npublic class R<T> implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n\n    private int code = HttpStatus.OK.value();\n    private String msg;\n    private T data;\n\n    public static <T> R<T> ok() {\n        R<T> r = new R<>();\n        r.setMsg(\"\u64cd\u4f5c\u6210\u529f\");\n        return r;\n    }\n\n    public static <T> R<T> ok(T data) {\n        R<T> r = new R<>();\n        r.setMsg(\"\u64cd\u4f5c\u6210\u529f\");\n        r.setData(data);\n        return r;\n    }\n\n    public static <T> R<T> error() {\n        return error(HttpStatus.INTERNAL_SERVER_ERROR.value(), \"\u672a\u77e5\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\n    }\n\n    public static <T> R<T> error(String msg) {\n        return error(HttpStatus.INTERNAL_SERVER_ERROR.value(), msg);\n    }\n\n    public static <T> R<T> error(int code, String msg) {\n        R<T> r = new R<>();\n        r.setCode(code);\n        r.setMsg(msg);\n        return r;\n    }\n}\n"]}
{"filename": "copilot-common/src/main/java/com/copilot/common/exception/BaseException.java", "chunked_list": ["package com.copilot.common.exception;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport java.io.Serializable;\n\n/**\n * @program: copilot-server\n * @description: \u81ea\u5b9a\u4e49\u5f02\u5e38", " * @program: copilot-server\n * @description: \u81ea\u5b9a\u4e49\u5f02\u5e38\n * @author: hfli8\n * @create: 2023/4/12 14:02\n */\npublic class BaseException extends RuntimeException implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    @Setter\n    @Getter\n    private String msg;\n\n    @Setter\n    @Getter\n    private int code = 500;\n\n    public BaseException(String msg) {\n        super(msg);\n        this.msg = msg;\n    }\n\n    public BaseException(String msg, Throwable e) {\n        super(msg, e);\n        this.msg = msg;\n    }\n\n    public BaseException(String msg, int code) {\n        super(msg);\n        this.msg = msg;\n        this.code = code;\n    }\n\n    public BaseException(String msg, int code, Throwable e) {\n        super(msg, e);\n        this.msg = msg;\n        this.code = code;\n    }\n}\n"]}
