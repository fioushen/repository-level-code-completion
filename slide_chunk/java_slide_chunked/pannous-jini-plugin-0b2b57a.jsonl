{"filename": "src/main/test/OpenAiAPITest.java", "chunked_list": ["import com.pannous.jini.openai.OpenAiAPI;\nimport com.pannous.jini.openai.Prompt;\nimport org.junit.jupiter.api.Test;\n\nimport java.io.IOException;\n\nimport static org.junit.jupiter.api.Assertions.fail;\n\npublic class OpenAiAPITest {\n\n    OpenAiAPI openAiAPI = new OpenAiAPI();\n\n    @Test\n    void testQuery() {\n        String content = \"This is a test\";", "public class OpenAiAPITest {\n\n    OpenAiAPI openAiAPI = new OpenAiAPI();\n\n    @Test\n    void testQuery() {\n        String content = \"This is a test\";\n        try {\n            String result = openAiAPI.query(content);\n            assert result != null;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } catch (InterruptedException e) {\n            fail(\"Exception thrown: \" + e.getMessage());\n        }\n    }\n\n    @Test\n    void testPrompt() throws IOException, InterruptedException {\n        String code = \"// hi\";\n        String json = \"[\";\n\n        Prompt prompt = Prompt.EXECUTE;", "        if (prompt == Prompt.EXECUTE) {\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"OS: \" + System.getProperty(\"os.name\") + \"\\\"},\";\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"ARCH: \" + System.getProperty(\"os.arch\") + \"\\\"},\";\n        } else {\n            String language = prompt.language;\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"Language: \" + language + \"\\\"},\";\n        }\n        json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"\" + prompt.getText().replaceAll(\"\\\"\", \"'\") + \"\\\"},\";\n        if (prompt == Prompt.CONVERT)\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"Target language: \" + prompt.language + \"\\\"},\";\n        json += \"{\\\"role\\\":\\\"user\\\",\\\"content\\\":\\\"\" + code.replaceAll(\"\\\"\", \"'\") + \"\\\"}\";", "        if (prompt == Prompt.CONVERT)\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"Target language: \" + prompt.language + \"\\\"},\";\n        json += \"{\\\"role\\\":\\\"user\\\",\\\"content\\\":\\\"\" + code.replaceAll(\"\\\"\", \"'\") + \"\\\"}\";\n//        if (options.has(replace) || options.has(Options.noExplanations)) {\n//            json+=\",{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"DO NOT OUTPUT ANY COMMENTS OR EXPLANATIONS\"+\"\\\"},\";\n//        }\n        json += \"]\";\n        System.out.println(json);\n        String result = openAiAPI.query(json);\n        System.out.println(result);\n        assert result != null;\n\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Optimize.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Optimize extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.OPTIMIZE, Options.replace);\n    }\n}\n", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.OPTIMIZE, Options.replace);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Action.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.history.integration.ui.actions.ShowHistoryAction;\nimport com.intellij.lang.Commenter;\nimport com.intellij.lang.Language;\nimport com.intellij.lang.LanguageCommenters;\nimport com.intellij.openapi.actionSystem.ActionManager;\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.PlatformDataKeys;", "import com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.PlatformDataKeys;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.command.WriteCommandAction;\nimport com.intellij.openapi.editor.Caret;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.fileEditor.FileDocumentManager;\nimport com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileTypes.FileType;", "import com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileTypes.FileType;\nimport com.intellij.openapi.fileTypes.LanguageFileType;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.ui.Messages;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.openapi.wm.ToolWindow;\nimport com.intellij.openapi.wm.ToolWindowManager;\nimport com.intellij.ui.content.Content;\nimport com.intellij.util.messages.MessageBus;", "import com.intellij.ui.content.Content;\nimport com.intellij.util.messages.MessageBus;\nimport com.pannous.jini.openai.OpenAI;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.AppSettingsState;\nimport com.pannous.jini.settings.Options;\nimport com.pannous.jini.window.JiniListener;\nimport org.jetbrains.annotations.NotNull;\n\nimport javax.swing.*;", "\nimport javax.swing.*;\nimport java.awt.datatransfer.StringSelection;\nimport java.awt.datatransfer.Transferable;\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\nimport static com.pannous.jini.openai.OpenAI.extractInlineCode;\nimport static com.pannous.jini.settings.Options.replace;\n", "import static com.pannous.jini.settings.Options.replace;\n\n\n// Hi\n\npublic abstract class Action extends AnAction {\n\n\n    private static String formatComment(Language language, String result) {\n        Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(language);\n        String prefix = \"//\";\n        String suffix = \"\";", "        if (commenter != null) {\n            prefix = commenter.getCommentedBlockCommentPrefix();\n            suffix = commenter.getCommentedBlockCommentSuffix();\n            if (prefix == null) prefix = commenter.getLineCommentPrefix();\n            if (prefix == null) prefix = \"//\";// \u26a0\ufe0f how?\n        }\n        result = result.replaceAll(\"\\n\", \"\\n\" + prefix);\n        if (suffix != null) result = result.replace(suffix, \"\");\n        String lamp = \" \\uD83D\\uDCA1 \"; // \ud83d\udca1\n        return prefix + lamp + result + suffix + \"\\n\";\n    }\n", "    public static void writeResult(Project project, Editor editor, Caret caret, String result, Prompt prompt, Options options, @NotNull AnActionEvent event) {\n        if (result == null || result.isEmpty()) return;\n\n        if (editor == null) return;\n        if (caret == null) return;\n        AppSettingsState settings = AppSettingsState.getInstance();\n\n        ApplicationManager.getApplication().invokeLater(() -> {\n            String text = extractInlineCode(result);\n            if (settings == null || settings.autoPopup)\n                Messages.showMessageDialog(project, text, \"AI Result\", Messages.getInformationIcon());\n            int selectionStart = caret.getSelectionStart();\n            int offset = selectionStart;\n            int selectionEnd = caret.getSelectionEnd();", "            if (settings == null || settings.autoPopup)\n                Messages.showMessageDialog(project, text, \"AI Result\", Messages.getInformationIcon());\n            int selectionStart = caret.getSelectionStart();\n            int offset = selectionStart;\n            int selectionEnd = caret.getSelectionEnd();\n            if (options.has(replace)) {\n                if (settings != null && !settings.autoReplaceCode) return;\n            } else {\n                if (options.has(Options.insert_after)) {\n                    offset = selectionEnd;\n                } else {", "                if (options.has(Options.insert_after)) {\n                    offset = selectionEnd;\n                } else {\n                    if (options.has(Options.comment) || !options.has(Options.insert_after)) {\n                        text = \"\\n\" + formatComment(getLanguage(editor), text);\n                    }\n                    if (options.has(Options.insert_before)) {\n                        caret.selectLineAtCaret();\n                        offset = selectionStart - 1;\n                        if (offset < 0) offset = 0;\n                    }\n                }\n            }\n            int finalOffset = offset;\n            String finalText = text;\n            ApplicationManager.getApplication().runWriteAction(() -> WriteCommandAction.runWriteCommandAction(project, () -> {", "                        if (offset < 0) offset = 0;\n                    }\n                }\n            }\n            int finalOffset = offset;\n            String finalText = text;\n            ApplicationManager.getApplication().runWriteAction(() -> WriteCommandAction.runWriteCommandAction(project, () -> {\n                if (options.has(replace)) {\n\n                    Merger.showMerger(project, editor, selectionStart, selectionEnd, finalText);\n//                    editor.getDocument().replaceString(selectionStart, selectionEnd, finalText);\n//                    showDiff(event);", "                } else if (options.has(Options.insert_before) || settings != null && settings.autoAddComments)\n                    editor.getDocument().insertString(finalOffset, finalText);\n            }));\n        });\n    }\n\n    private static void showDiff(@NotNull AnActionEvent event) {\n        // Open the history for the current file\n        ActionManager actionManager = ActionManager.getInstance();\n        ShowHistoryAction showHistoryAction = (ShowHistoryAction) actionManager.getAction(\"ShowHistory\");\n        showHistoryAction.actionPerformed(event);\n    }\n\n    void updateToolWindow(String result, Project project) {\n        ApplicationManager.getApplication().invokeLater(() -> {", "            try {\n                final ToolWindow toolWindow = ToolWindowManager.getInstance(project).getToolWindow(\"Jini\");\n                final Content content = toolWindow.getContentManager().getContent(0); // this will give the first tab\n                Transferable transferable = new StringSelection(result);\n                JComponent component = content.getComponent();\n                TransferHandler.TransferSupport data = new TransferHandler.TransferSupport(component, transferable);\n                component.getTransferHandler().importData(data);\n//                ((MyToolWindow) content.getComponent()).addResponse(result);\n            } catch (Exception e) {// fallback\n                MessageBus bus = project.getMessageBus();\n                bus.syncPublisher(JiniListener.TOPIC).onMessageReceived(result);\n            }\n        });\n    }\n\n\n    private static Language getLanguage(Editor editor) {", "        if (editor == null) return Language.ANY;\n        Document document = editor.getDocument();\n        VirtualFile file = FileDocumentManager.getInstance().getFile(document);\n        return getLanguage(file);\n    }\n\n    private static Language getLanguage(VirtualFile file) {\n        if (file == null) return Language.ANY;\n        FileType fileType = file.getFileType();\n        if (fileType instanceof LanguageFileType)\n            return ((LanguageFileType) fileType).getLanguage();\n        return Language.ANY;\n    }\n\n\n    private void writeFile(Project project, VirtualFile file, String result, Prompt prompt) {\n        VirtualFile currentFile = file;\n        VirtualFile currentDirectory = currentFile.getParent();\n        String newFileName;", "        if (fileType instanceof LanguageFileType)\n            return ((LanguageFileType) fileType).getLanguage();\n        return Language.ANY;\n    }\n\n\n    private void writeFile(Project project, VirtualFile file, String result, Prompt prompt) {\n        VirtualFile currentFile = file;\n        VirtualFile currentDirectory = currentFile.getParent();\n        String newFileName;\n        if (prompt.getText().contains(Prompt.CONVERT.getText())) {\n            newFileName = file.getNameWithoutExtension() + \".\" + prompt.language;\n        } else {\n            newFileName = file.getNameWithoutExtension() + \"_new.\" + file.getExtension();\n        }\n        String newPath = currentDirectory.getPath() + \"/\" + newFileName;\n        // Create a new virtual file\n        ApplicationManager.getApplication().invokeLater(() -> {\n            ApplicationManager.getApplication().runWriteAction(() -> {", "        if (prompt.getText().contains(Prompt.CONVERT.getText())) {\n            newFileName = file.getNameWithoutExtension() + \".\" + prompt.language;\n        } else {\n            newFileName = file.getNameWithoutExtension() + \"_new.\" + file.getExtension();\n        }\n        String newPath = currentDirectory.getPath() + \"/\" + newFileName;\n        // Create a new virtual file\n        ApplicationManager.getApplication().invokeLater(() -> {\n            ApplicationManager.getApplication().runWriteAction(() -> {\n                try {\n                    VirtualFile newFile = currentDirectory.createChildData(this, newFileName);\n                    FileEditorManager.getInstance(project).openFile(newFile, true);\n                    Document document = FileDocumentManager.getInstance().getDocument(newFile);\n                    document.setText(result);\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                }\n            });\n        });\n    }\n\n\n    private String getText(VirtualFile file, Editor editor, Caret caret, Options options) {\n        String selectedText = caret != null ? caret.getSelectedText() : null;", "                try {\n                    VirtualFile newFile = currentDirectory.createChildData(this, newFileName);\n                    FileEditorManager.getInstance(project).openFile(newFile, true);\n                    Document document = FileDocumentManager.getInstance().getDocument(newFile);\n                    document.setText(result);\n                } catch (IOException ex) {\n                    ex.printStackTrace();\n                }\n            });\n        });\n    }\n\n\n    private String getText(VirtualFile file, Editor editor, Caret caret, Options options) {\n        String selectedText = caret != null ? caret.getSelectedText() : null;", "        if (selectedText == null && caret != null && !options.has(Options.newFile) && !options.has(Options.fix)) {\n            // Options.extendToLine\n            caret.selectLineAtCaret();\n            selectedText = caret.getSelectedText();\n        }\n//        else{\n//            options=options.remove(Options.insert_before);\n//        }\n        if (selectedText == null || selectedText.isEmpty()) {\n            try {\n                if (editor != null)\n                    selectedText = editor.getDocument().getText();", "        if (selectedText == null || selectedText.isEmpty()) {\n            try {\n                if (editor != null)\n                    selectedText = editor.getDocument().getText();\n                else if (file != null)\n//                        selectedText = new String(file.getInputStream().readAllBytes(), file.getCharset());\n                    selectedText = new String(file.contentsToByteArray(), file.getCharset());\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return selectedText;\n    }\n", "    public void performAction(@NotNull AnActionEvent event, Prompt prompt, Options options) {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        final Project project = event.getData(PlatformDataKeys.PROJECT);\n        final Editor editor = event.getData(PlatformDataKeys.EDITOR);\n        final Caret caret = event.getData(PlatformDataKeys.CARET);\n        VirtualFile file = event.getData(PlatformDataKeys.VIRTUAL_FILE);\n        Language language = getLanguage(editor);\n        if (file != null) language = getLanguage(file);\n        String selectedText = getText(file, editor, caret, options);\n        boolean noSelection = selectedText == null || selectedText.isEmpty();\n        updateToolWindow(\"PROMPT: \" + prompt.getText() + \"\\n\" + selectedText, project);\n        Consumer<String> callback;", "        if (options.has(Options.newFile) && settings.autoSaveToNewFile && (noSelection || !options.has(replace))) {\n            callback = (result) -> {\n                updateToolWindow(result, project);\n                writeFile(project, file, result, prompt);\n            };\n        } else\n            callback = (result) -> {\n                updateToolWindow(result, project);\n                writeResult(project, editor, caret, result, prompt, options, event);\n            };\n        OpenAI.query(project, prompt, selectedText, language.getDisplayName(), callback, replace);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Patcher.java", "chunked_list": ["//package com.pannous.jini;\n//\n//import com.intellij.diff.DiffContentFactory;\n//import com.intellij.diff.contents.DiffContent;\n//import com.intellij.openapi.actionSystem.AnActionEvent;\n//import com.intellij.openapi.diff.impl.patch.FilePatch;\n//import com.intellij.openapi.project.Project;\n//import com.intellij.openapi.util.Pair;\n//import com.intellij.openapi.vcs.AbstractVcs;\n//import com.intellij.openapi.vcs.FilePath;", "//import com.intellij.openapi.vcs.AbstractVcs;\n//import com.intellij.openapi.vcs.FilePath;\n//import com.intellij.openapi.vcs.ProjectLevelVcsManager;\n//import com.intellij.openapi.vcs.changes.Change;\n//import com.intellij.openapi.vcs.changes.ChangeListManager;\n//import com.intellij.openapi.vcs.changes.ContentRevision;\n//import com.intellij.openapi.vcs.changes.patch.CreatePatchCommitExecutor;\n//import com.intellij.openapi.vfs.VirtualFile;\n//import com.intellij.vcsUtil.VcsUtil;\n//import org.jetbrains.annotations.NotNull;", "//import com.intellij.vcsUtil.VcsUtil;\n//import org.jetbrains.annotations.NotNull;\n//\n//import java.io.File;\n//import java.io.IOException;\n//import java.nio.file.Files;\n//import java.util.ArrayList;\n//import java.util.Collections;\n//import java.util.List;\n//\n//public class Patcher {\n//\n//    @Override", "//import java.util.List;\n//\n//public class Patcher {\n//\n//    @Override\n//    public void actionPerformed(AnActionEvent e) {\n//        // obtain the optimized code as a string\n////        String optimizedCode = \"public class MyClass {\\n\" +\n//        File file = new File(\"MyClass.java\");\n//        // MyClass.java is a file that contains the Multiple methods one of the of them we want to improve:\n//           String optimizedCode =  \"    public void myMethod() {\\n\" +\n//                                \"        // optimized code here\\n\" +\n//                                \"    }\\n\";\n//           // find the original method deep inside MyClass.java, replace it with the optimized code, and save the file\n//\n//\n//\n//\n//\n//        // create a temporary file to hold the optimized code", "//           String optimizedCode =  \"    public void myMethod() {\\n\" +\n//                                \"        // optimized code here\\n\" +\n//                                \"    }\\n\";\n//           // find the original method deep inside MyClass.java, replace it with the optimized code, and save the file\n//\n//\n//\n//\n//\n//        // create a temporary file to hold the optimized code\n//        try {\n//            Files.write(optimizedCode.getBytes(), tempFile);\n//        } catch (IOException ex) {\n//            ex.printStackTrace();\n//            return;\n//        }\n//\n//        // obtain the VCS root for the project\n//        Project project = e.getProject();\n//        VirtualFile vcsRoot = VcsUtil.getVcsRootFor(project, (FilePath) tempFile);", "//        try {\n//            Files.write(optimizedCode.getBytes(), tempFile);\n//        } catch (IOException ex) {\n//            ex.printStackTrace();\n//            return;\n//        }\n//\n//        // obtain the VCS root for the project\n//        Project project = e.getProject();\n//        VirtualFile vcsRoot = VcsUtil.getVcsRootFor(project, (FilePath) tempFile);\n//        if (vcsRoot == null) {\n//            System.out.println(\"Cannot find VCS root for file: \" + tempFile.getPath());\n//            return;\n//        }\n//\n//        // obtain the changelist manager and VCS provider for the project\n//        ChangeListManager changeListManager = ChangeListManager.getInstance(project);\n//        AbstractVcs vcs = ProjectLevelVcsManager.getInstance(project).getVcsFor(vcsRoot);", "//        if (vcsRoot == null) {\n//            System.out.println(\"Cannot find VCS root for file: \" + tempFile.getPath());\n//            return;\n//        }\n//\n//        // obtain the changelist manager and VCS provider for the project\n//        ChangeListManager changeListManager = ChangeListManager.getInstance(project);\n//        AbstractVcs vcs = ProjectLevelVcsManager.getInstance(project).getVcsFor(vcsRoot);\n//        if (vcs == null) {\n//            System.out.println(\"Cannot find VCS provider for file: \" + tempFile.getPath());\n//            return;\n//        }\n////        GitRepository gitRepository = GitVcs.getInstance(project).getRepositoryForFile(filePath.getVirtualFile());", "//        if (vcs == null) {\n//            System.out.println(\"Cannot find VCS provider for file: \" + tempFile.getPath());\n//            return;\n//        }\n////        GitRepository gitRepository = GitVcs.getInstance(project).getRepositoryForFile(filePath.getVirtualFile());\n////        if (gitRepository == null) {\n////            System.out.println(\"File is not under Git version control.\");\n////            return;\n////        }\n//\n//        // obtain the changes from the optimized code\n//        FilePath filePath = VcsUtil.getFilePath(tempFile);\n////        ContentRevision revision = changeListManager.\n////        ContentRevision revision = vcs.getDiffProvider().createFileContent(filePath, vcsRoot);\n////        ContentRevision revision = gitRepository.getContentRevision(filePath);\n//        Change change = new Change(null, null);\n//        ContentRevision beforeRevision = change.getBeforeRevision();\n//        ContentRevision afterRevision = change.getAfterRevision();\n//\n//        // create the patch file\n//        File patchFile = new File(\"MyClass.patch\");\n//        List<Change> changes = Collections.singletonList(change);\n//        List<Pair<String, FilePatch>> patches = createPatches(changes, vcs, vcsRoot);\n//        PatchWriter.write(patches, patchFile);\n//\n//        // display the patch in a diff viewer\n//        DiffContent oldContent = DiffContentFactory.getInstance().create(filePath, false);\n//        DiffContent newContent = DiffContentFactory.getInstance().create(patchFile);\n//        DiffRequestFactory.getInstance().createDiffRequest(project, oldContent, newContent, \"MyClass Changes\").show();\n//\n//        // delete the temporary file\n//        tempFile.delete();\n//    }\n//\n//    private List<Pair<String, FilePatch>> createPatches(@NotNull List<Change> changes, @NotNull AbstractVcs vcs, @NotNull VirtualFile root) {\n//        List<Pair<String, FilePatch>> patches = new ArrayList<>();\n//\n//        PatchBuilder builder = new CreatePatchCommitExecutor.PatchBuilder(vcs.getProject(), root);", "//        for (Change change : changes) {\n//            FilePath filePath = change.getAfterRevision().getFile();\n//            ContentRevision beforeRevision = change.getBeforeRevision();\n//            ContentRevision afterRevision = change.getAfterRevision();\n//\n//            FilePatch filePatch = builder.createFilePatch(filePath, beforeRevision, afterRevision, true);\n//            patches.add(Pair.create(filePath.getPath(), filePatch));\n//        }\n//\n//        return patches;\n//    }\n//}\n"]}
{"filename": "src/main/java/com/pannous/jini/Transpile.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.ui.Messages;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\n// This class is used to convert the code to a different language.\npublic class Transpile extends Action {\n    @Override", "// This class is used to convert the code to a different language.\npublic class Transpile extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        String userInput = Messages.showInputDialog(\"Transpile to code to the following language\", \"Convert\", Messages.getQuestionIcon());\n        if (userInput == null) return;\n        Prompt convert = Prompt.CONVERT;\n        convert.language = userInput;\n        performAction(e, convert, Options.newFile.or(Options.replace));\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Documentation.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Documentation extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.DOCUMENTATION, Options.insert_before);\n    }\n}\n", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.DOCUMENTATION, Options.insert_before);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Fix.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.diff.impl.patch.FilePatch;\nimport com.intellij.openapi.vcs.changes.Change;\nimport com.intellij.openapi.vcs.changes.ChangeListManager;\nimport com.intellij.openapi.vcs.changes.ContentRevision;\nimport com.intellij.openapi.vcs.changes.patch.CreatePatchCommitExecutor;\nimport com.intellij.vcsUtil.VcsUtil;\nimport com.pannous.jini.openai.Prompt;", "import com.intellij.vcsUtil.VcsUtil;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\n\nimport com.intellij.diff.contents.DiffContent;\nimport com.intellij.diff.DiffContentFactory;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.Pair;", "import com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.Pair;\nimport com.intellij.openapi.vcs.*;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.util.ArrayList;", "import java.nio.file.Files;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\n\n//import git4idea.GitVcs;\n//import git4idea.repo.GitRepository;\n\npublic class Fix extends Action {\n\n    @Override", "\npublic class Fix extends Action {\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.FIX, Options.fix);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Tests.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Tests extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.TESTS,  Options.newFile.or(Options.insert_before));\n    }\n}\n", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.TESTS,  Options.newFile.or(Options.insert_before));\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Improve.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Improve extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.IMPROVE, Options.replace);\n    }\n}\n", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.IMPROVE, Options.replace);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Complete.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Complete extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.COMPLETE, Options.insert_after);\n    }\n}\n", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.COMPLETE, Options.insert_after);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Merger.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.diff.DiffContentFactory;\nimport com.intellij.diff.DiffManager;\nimport com.intellij.diff.contents.DocumentContent;\nimport com.intellij.diff.contents.DiffContent;\nimport com.intellij.diff.requests.DiffRequest;\nimport com.intellij.diff.requests.SimpleDiffRequest;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;", "import com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.editor.EditorFactory;\nimport com.intellij.openapi.fileEditor.FileDocumentManager;\nimport com.intellij.openapi.fileEditor.FileEditor;\nimport com.intellij.openapi.fileEditor.FileEditorManager;\nimport com.intellij.openapi.fileEditor.TextEditor;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.vcs.merge.MergeData;\nimport com.intellij.openapi.vfs.VirtualFile;", "import com.intellij.openapi.vcs.merge.MergeData;\nimport com.intellij.openapi.vfs.VirtualFile;\n\nimport java.util.Arrays;\nimport java.util.stream.Stream;\n\npublic class Merger {\n\n    public static void showMerger(Project project, Editor editor, int selectionStart, int selectionEnd, String finalText) {\n        // Create MergeData instance\n        MergeData mergeData = new MergeData();\n        Document document = editor.getDocument();\n        VirtualFile file = FileDocumentManager.getInstance().getFile(document);\n        assert file != null;\n\n        // Replace the selected text\n        Document clonedDocument = EditorFactory.getInstance().createDocument(document.getText());\n        clonedDocument.replaceString(selectionStart, selectionEnd, finalText);\n\n        DiffContent beforeContent = DiffContentFactory.getInstance().create(project, file);\n        DiffContent afterContent = DiffContentFactory.getInstance().create(project, clonedDocument);\n        DiffRequest diffRequest = new SimpleDiffRequest(\"Before and After\", beforeContent, afterContent, \"Before\", \"After\");\n        DiffManager diffManager = DiffManager.getInstance();\n//        diffManager.showMerge(project, diffRequest, mergeData);\n//        @NotNull DiffDialogHints hints=DiffDialogHints.NON_MODAL;\n//        diffManager.showDiff(project, diffRequest,hints);\n        diffManager.showDiff(project, diffRequest);\n\n//    CheckboxDiffTool tool = new CheckboxDiffTool(request);\n//    tool.show();\n    }\n\n}\n", "    public static void showMerger(Project project, Editor editor, int selectionStart, int selectionEnd, String finalText) {\n        // Create MergeData instance\n        MergeData mergeData = new MergeData();\n        Document document = editor.getDocument();\n        VirtualFile file = FileDocumentManager.getInstance().getFile(document);\n        assert file != null;\n\n        // Replace the selected text\n        Document clonedDocument = EditorFactory.getInstance().createDocument(document.getText());\n        clonedDocument.replaceString(selectionStart, selectionEnd, finalText);\n\n        DiffContent beforeContent = DiffContentFactory.getInstance().create(project, file);\n        DiffContent afterContent = DiffContentFactory.getInstance().create(project, clonedDocument);\n        DiffRequest diffRequest = new SimpleDiffRequest(\"Before and After\", beforeContent, afterContent, \"Before\", \"After\");\n        DiffManager diffManager = DiffManager.getInstance();\n//        diffManager.showMerge(project, diffRequest, mergeData);\n//        @NotNull DiffDialogHints hints=DiffDialogHints.NON_MODAL;\n//        diffManager.showDiff(project, diffRequest,hints);\n        diffManager.showDiff(project, diffRequest);\n\n//    CheckboxDiffTool tool = new CheckboxDiffTool(request);\n//    tool.show();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Explain.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\n// Hi\n\npublic class Explain extends Action {\n\n    @Override", "\npublic class Explain extends Action {\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.EXPLAIN, Options.popup.or(Options.insert_before)  );\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Discuss.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.ui.Messages;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Discuss extends Action {\n\n    @Override", "public class Discuss extends Action {\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        String userInput = Messages.showInputDialog(\"Question about the selected code, or anything\", \"Discuss\", Messages.getQuestionIcon());\n        performAction(e,new Prompt(userInput) , Options.popup);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Execute.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.PlatformDataKeys;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.ui.Messages;\nimport com.pannous.jini.openai.OpenAI;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;", "import com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.util.function.Consumer;\n\nimport static com.pannous.jini.openai.OpenAI.extractCodes;\n", "import static com.pannous.jini.openai.OpenAI.extractCodes;\n\n\npublic class Execute extends Action {\n\n    void run(String code, Project project) throws IOException {\n        // run code in terminal\n        updateToolWindow(code, project);\n        Process process = Runtime.getRuntime().exec(code);\n        String result = new String(process.getInputStream().readAllBytes(), StandardCharsets.UTF_8); // proc output => input FOR US!\n        updateToolWindow(result, project);\n        ApplicationManager.getApplication().invokeLater(() -> {\n            Messages.showMessageDialog(project, result, \"result\", Messages.getInformationIcon());\n        });\n    }\n\n//    void run2(String code, Project project) {\n//                GeneralCommandLine commandLine = new GeneralCommandLine(\"/bin/bash\");\n//                OSProcessHandler processHandler = new OSProcessHandler(commandLine.createProcess(), code);\n//                processHandler.addProcessListener(new ProcessAdapter() {\n//                    @Override", "//                    public void onTextAvailable(@NotNull ProcessEvent processEvent, @NotNull Key key) {\n//                        ApplicationManager.getApplication().invokeLater(() -> {\n//                            Messages.showMessageDialog(project, processEvent.getText(), \"result\", Messages.getInformationIcon());\n//                        });\n//                    }\n//                });\n//                processHandler.startNotify();\n//    }\n\n\n    void execution(Project project, String codes) {", "        try {\n            if (codes.isEmpty()) return;\n            run(codes, project);\n        } catch (Exception e) {\n            ApplicationManager.getApplication().invokeLater(() -> {\n                Messages.showMessageDialog(project, e.getMessage(), \"Error\", Messages.getErrorIcon());\n            });\n        }\n\n    }\n\n    void confirm(String title, String message, String code, Consumer<String> callback) {\n        ApplicationManager.getApplication().invokeLater(() -> {\n            int result = Messages.showOkCancelDialog(message, title, \" \u26a0\ufe0f RUN \", \" \\uD83D\\uDED1 ABORT \", Messages.getQuestionIcon());", "            if (result == Messages.YES || result == Messages.OK) {\n                callback.accept(code);\n            }\n        });\n    }\n\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent event) {\n        String userInput = Messages.showInputDialog(\"English command or question to be interpreted as shell script to run in console\", \"Instructions\", Messages.getQuestionIcon());\n        if (userInput == null) return;\n        final Project project = event.getData(PlatformDataKeys.PROJECT);\n        Prompt prompt = Prompt.EXECUTE;\n        Consumer<String> doit = (result) -> {\n            execution(project, result);\n        };\n        Consumer<String> doublecheck = (result) -> {\n            updateToolWindow(result, project);\n            result = extractCodes(result);\n            confirm(\"Execute shell script\", result, result, doit);\n        };\n        new OpenAI().query(project, prompt, userInput, \"bash\", doublecheck, Options.none);\n    }\n}\n\n\n", "        if (userInput == null) return;\n        final Project project = event.getData(PlatformDataKeys.PROJECT);\n        Prompt prompt = Prompt.EXECUTE;\n        Consumer<String> doit = (result) -> {\n            execution(project, result);\n        };\n        Consumer<String> doublecheck = (result) -> {\n            updateToolWindow(result, project);\n            result = extractCodes(result);\n            confirm(\"Execute shell script\", result, result, doit);\n        };\n        new OpenAI().query(project, prompt, userInput, \"bash\", doublecheck, Options.none);\n    }\n}\n\n\n"]}
{"filename": "src/main/java/com/pannous/jini/Update.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.ide.plugins.IdeaPluginDescriptor;\nimport com.intellij.ide.plugins.IdeaPluginDescriptorImpl;\nimport com.intellij.ide.plugins.PluginInstaller;\nimport com.intellij.ide.plugins.PluginManager;\nimport com.intellij.openapi.actionSystem.ActionManager;\nimport com.intellij.openapi.actionSystem.AnAction;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.application.Application;", "import com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.application.Application;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.extensions.PluginId;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.file.Files;", "import java.net.URI;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.Comparator;\nimport java.util.Optional;\n\npublic class Update extends AnAction {\n\n    @Override\n    public void actionPerformed(AnActionEvent e) {\n//        String jini_id = \"com.pannous.jini-plugin\";\n//        Path path = Path.of(\"/Users/me/dev/apps/jini-plugin/build/libs/\");", "    public void actionPerformed(AnActionEvent e) {\n//        String jini_id = \"com.pannous.jini-plugin\";\n//        Path path = Path.of(\"/Users/me/dev/apps/jini-plugin/build/libs/\");\n//        try {\n//            Optional<Path> mostRecentJar = Files.list(path)\n//                    .filter(p -> p.toString().endsWith(\".jar\"))\n//                    .max(Comparator.comparingLong(p -> p.toFile().lastModified()));\n//            path = mostRecentJar.get();\n//        } catch (IOException ex) {\n//            throw new RuntimeException(ex);\n//        }\n//        PluginManager pluginManager = PluginManager.getInstance();\n//        IdeaPluginDescriptor jini = pluginManager.findEnabledPlugin(PluginId.getId(jini_id));\n//        IdeaPluginDescriptorImpl pluginDescriptor = (IdeaPluginDescriptorImpl) jini;\n//        pluginDescriptor.setEnabled(false);\n//        Path finalPath = path;\n//        PluginInstaller.installAndLoadDynamicPlugin(finalPath, pluginDescriptor);\n//        PluginManager.enablePlugin(pluginDescriptor.getPluginId().getIdString());\n//        Application application = ApplicationManager.getApplication();\n//        application.restart();\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Review.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\npublic class Review extends Action {\n    @Override\n    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.REVIEW, Options.popup);\n    }\n}\n", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        performAction(e, Prompt.REVIEW, Options.popup);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/Edit.java", "chunked_list": ["package com.pannous.jini;\n\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.ui.Messages;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.AppSettingsState;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;", "import com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\n\n\n// Custom Refactor Modification\npublic class Edit extends Action {\n    private String command;\n\n    public Edit() {\n    }\n\n    public Edit(String userInput) {\n        this.command = userInput;\n    }\n\n    @Override", "    public void actionPerformed(@NotNull AnActionEvent e) {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        String userInput = command;\n        if (userInput == null || userInput.isEmpty()) {\n            command = settings.customRefactor;\n            userInput = Messages.showInputDialog(\"How to modify the selected code\", \"Instructions\", Messages.getQuestionIcon(), command, null);\n            if (userInput == null) return;\n        }\n        performAction(e, new Prompt(Prompt.EDIT.getText() + userInput), Options.replace);\n        settings.customRefactor = userInput;\n        ApplicationManager.getApplication().invokeLater(() -> {\n            ((PersistentStateComponent<AppSettingsState>) settings).getState();// saves settings!\n        });\n//        Edit custom_action = new Edit(userInput);\n//        ActionManager.getInstance().registerAction(userInput, custom_action);// todo: needs a NAME!\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/listeners/CompilationFinished.java", "chunked_list": ["package com.pannous.jini.listeners;\n\nimport org.jetbrains.annotations.NotNull;\n\npublic class CompilationFinished extends jetbrains.buildServer.messages.serviceMessages.CompilationFinished {\n    public CompilationFinished(@NotNull String compilerName) {\n        super(compilerName);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/settings/AppSettingsConfigurable.java", "chunked_list": ["// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n\npackage com.pannous.jini.settings;\n\nimport com.intellij.openapi.options.Configurable;\nimport org.jetbrains.annotations.Nls;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\n", "import javax.swing.*;\n\n/**\n * Provides controller functionality for application settings.\n */\npublic class AppSettingsConfigurable implements Configurable {\n\n    private AppSettingsComponent mySettingsComponent;\n    private final String special_key = null;\n\n    // A default constructor with no arguments is required because this implementation\n    // is registered as an applicationConfigurable EP\n\n    @Nls(capitalization = Nls.Capitalization.Title)\n    @Override", "    public String getDisplayName() {\n        return \"Jini OpenAI Chat-GPT Settings\";\n    }\n\n    @Override\n    public JComponent getPreferredFocusedComponent() {\n        return mySettingsComponent.getPreferredFocusedComponent();\n    }\n\n    @Nullable\n    @Override", "    public JComponent createComponent() {\n        mySettingsComponent = new AppSettingsComponent();\n        return mySettingsComponent.getPanel();\n    }\n\n    @Override\n    public boolean isModified() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        boolean modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);\n        modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;\n        modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;\n        modified |= mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;\n        modified |= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;\n        modified |= !mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);\n        return modified;\n    }\n\n    @Override", "    public void apply() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        settings.OPENAI_API_KEY = mySettingsComponent.get_OPENAI_API_KEY();\n        if (settings.OPENAI_API_KEY == null)\n            settings.OPENAI_API_KEY = ApiKeys.OPENAI_API_KEY;\n        settings.autoPopup = mySettingsComponent.isAutoPopup();\n        settings.autoAddComments = mySettingsComponent.isAutoAddComments();\n        settings.autoReplaceCode = mySettingsComponent.isAutoReplaceCode();\n        settings.customRefactor = mySettingsComponent.getCustomRefactor();\n        settings.autoSaveToNewFile = mySettingsComponent.isAutoSaveToNewFile();\n    }\n\n    @Override", "    public void reset() {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        if (settings.OPENAI_API_KEY == null)\n            settings.OPENAI_API_KEY = special_key;\n        if (settings.OPENAI_API_KEY == null)\n            settings.OPENAI_API_KEY = System.getenv(\"OPENAI_API_KEY\");\n        mySettingsComponent.set_OPENAI_API_KEY(settings.OPENAI_API_KEY);\n        mySettingsComponent.setAutoPopup(settings.autoPopup);\n        mySettingsComponent.setAutoAddComments(settings.autoAddComments);\n        mySettingsComponent.setAutoReplaceCode(settings.autoReplaceCode);\n        mySettingsComponent.setCustomRefactor(settings.customRefactor);\n        mySettingsComponent.setAutoSaveToNewFile(settings.autoSaveToNewFile);\n    }\n\n    @Override", "    public void disposeUIResources() {\n        mySettingsComponent = null;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/settings/Options.java", "chunked_list": ["package com.pannous.jini.settings;\n\npublic class Options {\n    public static final Options none = new Options(0);\n    public static final Options replace = new Options(1);\n    public static final Options comment = new Options(2);\n    public static final Options popup = new Options(2 << 3);\n    public static final Options select_all_if_none = new Options(2 << 4);\n    public static final Options select_file_if_none = new Options(2 << 5);\n    public static final Options select_line_if_none = new Options(2 << 6);\n    public static final Options insert_before = new Options(2 << 7);", "    public static final Options select_file_if_none = new Options(2 << 5);\n    public static final Options select_line_if_none = new Options(2 << 6);\n    public static final Options insert_before = new Options(2 << 7);\n    public static final Options insert_after = new Options(2 << 8);\n    public static final Options noExplanations = new Options(2 << 9);\n    public static final Options newFile = new Options(2 << 10);\n    public static final Options fix = new Options(2 << 11);;\n    private final int value;\n\n    public Options(int i) {\n        value = i;\n    }", "    public boolean has(Options o) {\n        return (value & o.value) != 0;\n    }\n\n    public Options or(Options replace) {\n        return new Options(value | replace.value);\n    }\n\n    public Options remove(Options options) {\n        return new Options(value & ~options.value);\n    }\n}\n", "    public Options remove(Options options) {\n        return new Options(value & ~options.value);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/settings/OptionsTest.java", "chunked_list": ["package com.pannous.jini.settings;\n\nimport org.junit.Test;\nimport org.junit.platform.commons.annotation.Testable;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@Testable\npublic class OptionsTest {\n// create test for OptionsTest\n    @Test", "public class OptionsTest {\n// create test for OptionsTest\n    @Test\n    public void testOptions() {\n        Options newFile = Options.newFile;\n        Options options = Options.newFile.or(Options.replace);\n        assertNotEquals(newFile, options);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/settings/AppSettingsComponent.java", "chunked_list": ["// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n\npackage com.pannous.jini.settings;\n\nimport com.intellij.ui.components.JBCheckBox;\nimport com.intellij.ui.components.JBLabel;\nimport com.intellij.ui.components.JBPasswordField;\nimport com.intellij.ui.components.JBTextField;\nimport com.intellij.util.ui.FormBuilder;\n", "import com.intellij.util.ui.FormBuilder;\n\nimport javax.swing.*;\n\n/**\n * Supports creating and managing a {@link JPanel} for the Settings Dialog.\n */\npublic class AppSettingsComponent {\n\n    private final JPanel myMainPanel;\n    private final JBPasswordField OPENAI_API_KEY = new JBPasswordField();\n    private final JLabel getApiKey = new JLabel(\"<p><a href='https://platform.openai.com/account/api-keys'>Get API key</a></p>\");\n    private final JLabel apiStatusLink = new JLabel(\"<p><a href='https://status.openai.com/'>API status</a></p>\");\n\n    private final JBCheckBox autoPopup = new JBCheckBox(\"Show popup of OpenAI answers\");\n    private final JBCheckBox autoAddComments = new JBCheckBox(\"Allow adding comments to the code from OpenAI\");\n    private final JBCheckBox autoReplaceCode = new JBCheckBox(\"Allow auto-replace code with OpenAI suggestions\");\n    private final JBCheckBox autoSaveToNewFile = new JBCheckBox(\"Write transformed code to new file\");\n    private final JBTextField customRefactor = new JBTextField(\"Custom command to refactor selected code\");\n//    private final JBTextField targetLanguage = new JBTextField(\"Target language of transpilation code\");\n//    private final JBCheckBox autoExecuteCommands = new JBCheckBox(\"\u26a0\ufe0f Automatically execute commands from OpenAI\");\n\n    public AppSettingsComponent() {\n        myMainPanel = FormBuilder.createFormBuilder()\n                .addLabeledComponent(new JBLabel(\"OPENAI_API_KEY\"), OPENAI_API_KEY, 1, false)\n//                .addComponent(getApiKey, 1)\n//                .addComponent(apiStatusLink, 1)\n                .addSeparator()\n                .addComponent(autoPopup, 1)\n                .addComponent(autoAddComments, 1)\n                .addComponent(autoReplaceCode, 1)\n                .addComponent(autoSaveToNewFile, 1)\n                .addSeparator()\n                .addLabeledComponent(new JBLabel(\"Custom command\"), customRefactor, 1, false)\n//                .addComponent(autoExecuteCommands, 1)\n                .addComponentFillVertically(new JPanel(), 0)\n                .getPanel();\n    }\n", "    public JPanel getPanel() {\n        return myMainPanel;\n    }\n\n    public JComponent getPreferredFocusedComponent() {\n        return OPENAI_API_KEY;\n    }\n\n    public String get_OPENAI_API_KEY() {\n        return new String(OPENAI_API_KEY.getPassword());\n    }\n", "    public String get_OPENAI_API_KEY() {\n        return new String(OPENAI_API_KEY.getPassword());\n    }\n\n    public void set_OPENAI_API_KEY(String openai_api_key) {\n        OPENAI_API_KEY.setText(openai_api_key);\n    }\n\n    public boolean isAutoPopup() {\n        return autoPopup.isSelected();\n    }\n", "    public boolean isAutoPopup() {\n        return autoPopup.isSelected();\n    }\n\n    public void setAutoPopup(boolean isChecked) {\n        autoPopup.setSelected(isChecked);\n    }\n\n    public boolean isAutoAddComments() {\n        return autoAddComments.isSelected();\n    }\n", "    public boolean isAutoAddComments() {\n        return autoAddComments.isSelected();\n    }\n\n    public void setAutoAddComments(boolean isChecked) {\n        autoAddComments.setSelected(isChecked);\n    }\n\n    public boolean isAutoReplaceCode() {\n        return autoReplaceCode.isSelected();\n    }\n", "    public boolean isAutoReplaceCode() {\n        return autoReplaceCode.isSelected();\n    }\n\n    public void setAutoReplaceCode(boolean isChecked) {\n        autoReplaceCode.setSelected(isChecked);\n    }\n\n    public String getCustomRefactor() {\n        return customRefactor.getText();\n    }\n", "    public String getCustomRefactor() {\n        return customRefactor.getText();\n    }\n\n    public void setCustomRefactor(String customRefactor) {\n        this.customRefactor.setText(customRefactor);\n    }\n\n    public boolean isAutoSaveToNewFile() {\n        return autoSaveToNewFile.isSelected();\n    }\n", "    public boolean isAutoSaveToNewFile() {\n        return autoSaveToNewFile.isSelected();\n    }\n\n    public void setAutoSaveToNewFile(boolean isChecked) {\n        autoSaveToNewFile.setSelected(isChecked);\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/settings/AppSettingsState.java", "chunked_list": ["// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n\npackage com.pannous.jini.settings;\n\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.components.State;\nimport com.intellij.openapi.components.Storage;\nimport com.intellij.util.xmlb.XmlSerializerUtil;\nimport org.jetbrains.annotations.NotNull;", "import com.intellij.util.xmlb.XmlSerializerUtil;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\n/**\n * Supports storing the application settings in a persistent way.\n * The {@link State} and {@link Storage} annotations define the name of the data and the file name where\n * these persistent application settings are stored.\n */\n@State(", " */\n@State(\n        name = \"org.intellij.sdk.settings.AppSettingsState\",\n        storages = @Storage(\"SdkSettingsPlugin.xml\")\n)\npublic class AppSettingsState implements PersistentStateComponent<AppSettingsState> {\n\n    public boolean autoPopup = true;\n    public boolean autoAddComments = true;\n    public boolean autoReplaceCode = true;\n    public boolean autoSaveToNewFile = true;", "    public boolean autoAddComments = true;\n    public boolean autoReplaceCode = true;\n    public boolean autoSaveToNewFile = true;\n    public String customRefactor = \"\";\n    private final String trial_key = ApiKeys.OPENAI_API_KEY;\n    public String OPENAI_API_KEY = trial_key;\n\n    public static AppSettingsState getInstance() {\n        return ApplicationManager.getApplication().getService(AppSettingsState.class);\n    }\n\n    @Nullable\n    @Override", "    public AppSettingsState getState() {\n        return this;\n    }\n\n    @Override\n    public void loadState(@NotNull AppSettingsState state) {\n        XmlSerializerUtil.copyBean(state, this);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/window/MyToolWindowFactory.java", "chunked_list": ["// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n\npackage com.pannous.jini.window;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.wm.ToolWindow;\nimport com.intellij.openapi.wm.ToolWindowFactory;\nimport com.intellij.ui.content.Content;\nimport com.intellij.ui.content.ContentFactory;\nimport org.jetbrains.annotations.NotNull;", "import com.intellij.ui.content.ContentFactory;\nimport org.jetbrains.annotations.NotNull;\n\npublic class MyToolWindowFactory implements ToolWindowFactory {\n\n    /**\n     * Create the tool window content.\n     *\n     * @param project    current project\n     * @param toolWindow current tool window\n     */", "    public void createToolWindowContent(@NotNull Project project, @NotNull ToolWindow toolWindow) {\n        MyToolWindow myToolWindow = new MyToolWindow(toolWindow);\n        ContentFactory contentFactory = ContentFactory.getInstance();\n        String tabName = \"\";// #1 Jini Dialog : Chat 1\n        Content content = contentFactory.createContent(myToolWindow.getContent(), tabName, false);\n        toolWindow.getContentManager().addContent(content);\n    }\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/window/JiniListener.java", "chunked_list": ["package com.pannous.jini.window;\nimport com.intellij.util.messages.Topic;\n\npublic interface JiniListener {\n\n    Topic<JiniListener> TOPIC = Topic.create(\"Jini\", JiniListener.class);\n\n    void onMessageReceived(String message);\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/window/MyToolWindow.java", "chunked_list": ["// Copyright 2000-2022 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.\n\npackage com.pannous.jini.window;\n\nimport com.intellij.openapi.Disposable;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.project.ProjectManager;\nimport com.intellij.openapi.ui.SimpleToolWindowPanel;\nimport com.intellij.openapi.wm.ToolWindow;", "import com.intellij.openapi.ui.SimpleToolWindowPanel;\nimport com.intellij.openapi.wm.ToolWindow;\nimport com.intellij.ui.components.JBScrollPane;\nimport com.intellij.uiDesigner.core.GridConstraints;\nimport com.intellij.uiDesigner.core.GridLayoutManager;\nimport com.intellij.util.messages.MessageBus;\nimport com.pannous.jini.openai.OpenAI;\nimport com.pannous.jini.openai.Prompt;\nimport com.pannous.jini.settings.Options;\n", "import com.pannous.jini.settings.Options;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.function.Consumer;\n\n//extends , TransferHandler\npublic class MyToolWindow extends SimpleToolWindowPanel implements JiniListener, Disposable {\n\n    private JButton sendButton;\n    private JButton hideButton;\n    private JPanel panel;\n    private JScrollPane scrollPane;\n//    private JBScrollPane scrollPane;\nprivate JTextField input;\n    private JTextPane result;\n\n\n    @Override", "    public void onMessageReceived(String message) {\n        addResponse(message);\n    }\n\n    void registerListener() {\n        Project project = ProjectManager.getInstance().getDefaultProject();\n        MessageBus bus = project.getMessageBus();\n        bus.connect().subscribe(JiniListener.TOPIC, this);\n    }\n\n    public MyToolWindow(ToolWindow toolWindow) {\n        super(true, true);\n//        setContent(panel);", "        if (panel == null)\n            $$$setupUI$$$();\n\n        panel.setTransferHandler(new JiniTransferHandler(this));\n        hideButton.addActionListener(e -> toolWindow.hide(null));\n        sendButton.addActionListener(e -> submit());\n        input.addActionListener(e -> submit());\n        registerListener();\n    }\n\n    // this should be auto generated!?!\n    private void $$$setupUI$$$() {\n        panel = new JPanel();\n        panel.setLayout(new GridLayoutManager(2, 5, new Insets(0, 2, 0, 0), -1, -1));\n        final JLabel label1 = new JLabel();\n        label1.setText(\"Input\");\n        panel.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        input = new JTextField();\n        panel.add(input, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(150, -1), null, null, 0, false));\n        sendButton = new JButton();\n        sendButton.setText(\"Submit\");\n        int shrink_or_grow = GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK;\n        panel.add(sendButton, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, shrink_or_grow, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n        hideButton = new JButton();\n        hideButton.setText(\"Hide\");\n        panel.add(hideButton, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, shrink_or_grow, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));\n\n        result = new JTextPane();\n        result.setEditable(true);\n//\n//        JPanel clutch = new JPanel();\n//        clutch.add(result, BorderLayout.CENTER);\n\n        scrollPane = new JBScrollPane(result, JBScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JBScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n        scrollPane.setVisible(true);\n//        scrollPane.setViewportView(result);\n\n        Dimension dim = new Dimension(400, 400);\n//        panel.add(scrollPane, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, dim, null,null, 0, true));\n        panel.add(scrollPane, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, shrink_or_grow, shrink_or_grow, dim, null, null, 0, true));\n\n    }\n", "    public void submit() {\n        String text = input.getText();\n        result.setText(result.getText() + \"\\nUSER: \" + text);\n        input.setText(\"\u2026 thinking \u2026\");\n        Consumer<String> callback = this::addResponse;\n        Project project = ProjectManager.getInstance().getDefaultProject();\n        Prompt prompt = Prompt.CHAT;\n        OpenAI.query(project, prompt, text, null, callback, Options.none);\n    }\n\n    public JPanel getContent() {\n        return panel;\n    }\n", "    public JPanel getContent() {\n        return panel;\n    }\n\n    public void addResponse(String text) {\n        ApplicationManager.getApplication().invokeLater(() -> {\n            result.setText(result.getText() + \"\\nAI: \" + text);\n            input.setText(\"\");\n        });\n    }\n\n    @Override", "    public void dispose() {\n    }\n\n    private void createUIComponents() {\n        // TODO: place custom component creation code here\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/window/JiniTransferHandler.java", "chunked_list": ["package com.pannous.jini.window;\n\nimport java.awt.datatransfer.DataFlavor;\n\npublic class JiniTransferHandler extends javax.swing.TransferHandler {\n    private final MyToolWindow window;\n\n    public JiniTransferHandler(MyToolWindow myToolWindow) {\n        super();\n        window = myToolWindow;\n    }\n\n    @Override", "    public boolean importData(TransferSupport support) {\n        try {\n            Object data = support.getTransferable().getTransferData(DataFlavor.stringFlavor);\n            window.addResponse(data.toString());\n        } catch (Exception e) {\n        }\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/openai/Prompt.java", "chunked_list": ["package com.pannous.jini.openai;\n\n\npublic class Prompt {\n    public static Prompt CHAT = new Prompt(\"You are a professional assistant. You are chatting with the programmer about the following topic: \");\n    public static Prompt FIX = new Prompt(\"analyze and fix the following error\");\n    public static Prompt DOCUMENTATION = new Prompt(\"write documentation for the following code\");\n    public static Prompt EXPLAIN = new Prompt(\"explain and summarize the following\");\n    public static Prompt COMPLETE = new Prompt(\"complete the following code\");\n    public static Prompt CONVERT = new Prompt(\"convert the following code by transpiling it to \");\n    public static Prompt REVIEW = new Prompt(\"analyze, code review and make suggestions to improve the following code\");", "    public static Prompt COMPLETE = new Prompt(\"complete the following code\");\n    public static Prompt CONVERT = new Prompt(\"convert the following code by transpiling it to \");\n    public static Prompt REVIEW = new Prompt(\"analyze, code review and make suggestions to improve the following code\");\n    public static Prompt TESTS = new Prompt(\"emit tests for the following code\");\n    public static Prompt OPTIMIZE = new Prompt(\"analyze the code for optimization potential, then optimize the code accordingly\");\n    public static Prompt IMPROVE = new Prompt(\"analyze, code review the following code, then improve and optimize the code accordingly\");\n    public static Prompt EDIT = new Prompt(\"edit the following code using the following instructions: \");\n    public static Prompt EXECUTE = new Prompt(\"Given english instructions, find the right terminal command in a zsh shell. The command should be in the following format: ```bash <command>```\");\n    private final String text;\n    public String language;\n\n    public Prompt(String text) {\n        this.text = text;\n    }\n", "    public String language;\n\n    public Prompt(String text) {\n        this.text = text;\n    }\n\n    public String getText() {\n        return text;\n    }\n\n    public String name() {", "    public String name() {\n        if (this == FIX) return \"FIX\";\n        if (this == DOCUMENTATION) return \"DOCUMENTATION\";\n        if (this == EXPLAIN) return \"EXPLAIN\";\n        if (this == COMPLETE) return \"COMPLETE\";\n        if (this == CONVERT) return \"CONVERT\";\n        if (this == REVIEW) return \"REVIEW\";\n        if (this == TESTS) return \"TESTS\";\n        if (this == OPTIMIZE) return \"OPTIMIZE\";\n        if (this == IMPROVE) return \"IMPROVE\";\n        if (this == EDIT) return \"EDIT\";\n        return \"OpenAI thinking \u2026\";\n    }\n}\n\n//\n//    enum Prompt {\n//        FIX(\"analyze and fix the following error\"),\n//        DOCUMENTATION(\"write documentation for the following code\"),\n//        EXPLAIN(\"explain and summarize the following\"),\n//        COMPLETE(\"complete the following code\"),\n//        CONVERT(\"convert the following code by transpiling it to \"), // ...\n//        REVIEW(\"analyze, code review and improve the following code\"),\n//        TESTS(\"emit tests for the following code\"),\n//        OPTIMIZE(\"analyze, code review the following code, then improve and optimize the code accordingly\"),\n//        //    IMPROVE(\"improve the following code using the following instructions\");\n//        IMPROVE(\"improve the following code using the instructions after the IMPROVE keyword\"),\n//        EDIT(\"edit the following code using the following instructions\");// todo: split\n//\n//        final String text;\n//\n//        Prompt(String text) {\n//            this.text = text;\n//        }\n//\n//        String getText() {\n//            return text;\n//        }\n//    }\n", "        if (this == OPTIMIZE) return \"OPTIMIZE\";\n        if (this == IMPROVE) return \"IMPROVE\";\n        if (this == EDIT) return \"EDIT\";\n        return \"OpenAI thinking \u2026\";\n    }\n}\n\n//\n//    enum Prompt {\n//        FIX(\"analyze and fix the following error\"),\n//        DOCUMENTATION(\"write documentation for the following code\"),\n//        EXPLAIN(\"explain and summarize the following\"),\n//        COMPLETE(\"complete the following code\"),\n//        CONVERT(\"convert the following code by transpiling it to \"), // ...\n//        REVIEW(\"analyze, code review and improve the following code\"),\n//        TESTS(\"emit tests for the following code\"),\n//        OPTIMIZE(\"analyze, code review the following code, then improve and optimize the code accordingly\"),\n//        //    IMPROVE(\"improve the following code using the following instructions\");\n//        IMPROVE(\"improve the following code using the instructions after the IMPROVE keyword\"),\n//        EDIT(\"edit the following code using the following instructions\");// todo: split\n//\n//        final String text;\n//\n//        Prompt(String text) {\n//            this.text = text;\n//        }\n//\n//        String getText() {\n//            return text;\n//        }\n//    }\n"]}
{"filename": "src/main/java/com/pannous/jini/openai/OpenAI2.java", "chunked_list": ["//package com.pannous.jini.openai;\n//\n//import com.intellij.openapi.components.PersistentStateComponent;\n//import com.intellij.openapi.options.Configurable;\n//import com.intellij.openapi.options.ConfigurableProvider;\n//import com.intellij.openapi.options.ShowSettingsUtil;\n//import com.intellij.openapi.progress.ProgressIndicator;\n//import com.intellij.openapi.progress.ProgressManager;\n//import com.intellij.openapi.progress.Task;\n//import com.intellij.openapi.project.Project;", "//import com.intellij.openapi.progress.Task;\n//import com.intellij.openapi.project.Project;\n//import com.pannous.jini.settings.AppSettingsConfigurable;\n//import com.pannous.jini.settings.AppSettingsState;\n//import com.pannous.jini.settings.Options;\n//import com.theokanning.openai.completion.chat.ChatCompletionRequest;\n//import com.theokanning.openai.completion.chat.ChatMessage;\n//import com.theokanning.openai.completion.chat.ChatMessageRole;\n//import com.theokanning.openai.service.OpenAiService;\n//import org.jetbrains.annotations.NotNull;", "//import com.theokanning.openai.service.OpenAiService;\n//import org.jetbrains.annotations.NotNull;\n//import org.jetbrains.annotations.Nullable;\n//\n//import java.time.Duration;\n//import java.util.ArrayList;\n//import java.util.List;\n//import java.util.function.Consumer;\n//\n//import static com.pannous.jini.settings.Options.replace;", "//\n//import static com.pannous.jini.settings.Options.replace;\n//\n//public class OpenAI2 {\n//\n//    private static String getKey(@NotNull Project project) {\n//        AppSettingsState settings = AppSettingsState.getInstance();\n//        if (settings.OPENAI_API_KEY != null && !settings.OPENAI_API_KEY.isEmpty())\n//            return settings.OPENAI_API_KEY;\n//        String key = null;// enter via settings\n//        // Messages.showInputDialog(\"Please set your OpenAI API key in the Jini settings\", \"OpenAI API key\", Messages.getQuestionIcon());\n//        ConfigurableProvider provider = new ConfigurableProvider() {\n//            @Nullable\n//            @Override", "//            public Configurable createConfigurable() {\n//                return new AppSettingsConfigurable();\n//            }\n//        };\n//        if (key != null && !key.isEmpty()) {\n//            settings.OPENAI_API_KEY = key;\n//            PersistentStateComponent<AppSettingsState> component = settings;\n//            component.getState();// SAVEs it\n//        } else {\n//            ShowSettingsUtil.getInstance().showSettingsDialog(project, \"Jini Settings\");\n//        }\n//        return key;\n//    }\n//\n//", "//    public static void query(Project project, Prompt prompt, String code, String language, Consumer<String> callback, Options options) {\n//        if (code.length() > 3000) code = code.substring(0, 3000); // todo split / notify\n//        AppSettingsState settings = AppSettingsState.getInstance();\n//        if (settings != null && (settings.OPENAI_API_KEY == null || settings.OPENAI_API_KEY.isEmpty())) {\n//            getKey(project);\n//            return;\n//        }\n//\n//        List<ChatMessage> chatMessages = new ArrayList<>();\n//        if (prompt == Prompt.EXECUTE) {\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"OS: \" + System.getProperty(\"os.name\")));\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"ARCH: \" + System.getProperty(\"os.arch\")));\n//        } else {\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"Language: \" + language));\n//        }\n//        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), prompt.getText()));", "//        if (prompt == Prompt.EXECUTE) {\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"OS: \" + System.getProperty(\"os.name\")));\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"ARCH: \" + System.getProperty(\"os.arch\")));\n//        } else {\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"Language: \" + language));\n//        }\n//        chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), prompt.getText()));\n//        if (prompt == Prompt.CONVERT)\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"Target language: \" + prompt.language));\n//        chatMessages.add(new ChatMessage(ChatMessageRole.USER.value(), code));\n//        if (options.has(replace) || options.has(Options.noExplanations)) {\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"DO NOT OUTPUT ANY COMMENTS OR EXPLANATIONS\"));\n//        }\n//\n//        fetchInBackground(callback, prompt.name(), chatMessages, project,code);\n//    }\n//", "//        if (options.has(replace) || options.has(Options.noExplanations)) {\n//            chatMessages.add(new ChatMessage(ChatMessageRole.SYSTEM.value(), \"DO NOT OUTPUT ANY COMMENTS OR EXPLANATIONS\"));\n//        }\n//\n//        fetchInBackground(callback, prompt.name(), chatMessages, project,code);\n//    }\n//\n//    public static String extractCode(String result) {\n//        if(result.startsWith(\"```\"))\n//            result = result.substring( result.indexOf(\"\\n\") + 1 );\n//        if(result.endsWith(\"```\"))\n//            result = result.substring( 0, result.length()-3);\n//        return result;\n//    }\n//", "//        if(result.startsWith(\"```\"))\n//            result = result.substring( result.indexOf(\"\\n\") + 1 );\n//        if(result.endsWith(\"```\"))\n//            result = result.substring( 0, result.length()-3);\n//        return result;\n//    }\n//\n//    public static void fetchInBackground(Consumer<String> callback, String text, List<ChatMessage> chatMessages, Project project, String code) {\n//        String openAiKey = getKey(project);\n//        Task.Backgroundable task = new Task.Backgroundable(project, \"Get GPT answer\", true) {\n//            @Override", "//            public void run(@NotNull ProgressIndicator progressIndicator) {\n//                progressIndicator.setIndeterminate(true);\n//                progressIndicator.setText(text);\n//                if (!progressIndicator.isRunning())\n//                    progressIndicator.start();\n//                try {// Perform long-running operation\n//                    OpenAiService service = new OpenAiService(openAiKey, Duration.ofSeconds(60));\n//                    ChatCompletionRequest completionRequest = ChatCompletionRequest.builder()\n//                            .model(\"gpt-3.5-turbo\")\n//                            .messages(chatMessages)\n////                            .frequencyPenalty(.5)\n//                            .temperature(.2)\n//                            .maxTokens(3500)\n//                            .build();\n//                    String result = service.createChatCompletion(completionRequest).getChoices().get(0).getMessage().getContent();\n//                    progressIndicator.stop();\n////                    result.replace(code, \"\");// remove prompt (if any", "////                    if(result.startsWith(\"```\"+code))\n////                        result = result.substring(0,code.length()+3);\n////                    if(result.startsWith(code))\n////                        result = result.substring(0,code.length()+3);\n////                    result = extractCode(result); // ```<code>``` -> <code>\n//                    callback.accept(result);\n//                } catch (Exception e) {\n//                    System.err.println(\"OPENAI API ERROR\");\n//                    System.err.println(e.getMessage());\n//                    e.printStackTrace();\n//                }\n//            }\n//        };\n//        ProgressManager.getInstance().run(task);\n//    }\n//\n//\n//}\n"]}
{"filename": "src/main/java/com/pannous/jini/openai/OpenAI.java", "chunked_list": ["package com.pannous.jini.openai;\n\nimport com.intellij.openapi.components.PersistentStateComponent;\nimport com.intellij.openapi.options.Configurable;\nimport com.intellij.openapi.options.ConfigurableProvider;\nimport com.intellij.openapi.options.ShowSettingsUtil;\nimport com.intellij.openapi.progress.ProgressIndicator;\nimport com.intellij.openapi.progress.ProgressManager;\nimport com.intellij.openapi.progress.Task;\nimport com.intellij.openapi.project.Project;", "import com.intellij.openapi.progress.Task;\nimport com.intellij.openapi.project.Project;\nimport com.pannous.jini.settings.AppSettingsConfigurable;\nimport com.pannous.jini.settings.AppSettingsState;\nimport com.pannous.jini.settings.Options;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.function.Consumer;\nimport java.util.regex.Matcher;", "import java.util.function.Consumer;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static com.pannous.jini.settings.Options.replace;\n\npublic class OpenAI {\n\n    private static String getKey(@NotNull Project project) {\n        AppSettingsState settings = AppSettingsState.getInstance();\n        if (settings.OPENAI_API_KEY != null && !settings.OPENAI_API_KEY.isEmpty())\n            return settings.OPENAI_API_KEY;\n        String key = null;// enter via settings\n        // Messages.showInputDialog(\"Please set your OpenAI API key in the Jini settings\", \"OpenAI API key\", Messages.getQuestionIcon());\n        ConfigurableProvider provider = new ConfigurableProvider() {\n            @Nullable\n            @Override", "        if (settings.OPENAI_API_KEY != null && !settings.OPENAI_API_KEY.isEmpty())\n            return settings.OPENAI_API_KEY;\n        String key = null;// enter via settings\n        // Messages.showInputDialog(\"Please set your OpenAI API key in the Jini settings\", \"OpenAI API key\", Messages.getQuestionIcon());\n        ConfigurableProvider provider = new ConfigurableProvider() {\n            @Nullable\n            @Override\n            public Configurable createConfigurable() {\n                return new AppSettingsConfigurable();\n            }\n        };", "        if (key != null && !key.isEmpty()) {\n            settings.OPENAI_API_KEY = key;\n            PersistentStateComponent<AppSettingsState> component = settings;\n            component.getState();// SAVEs it\n        } else {\n            ShowSettingsUtil.getInstance().showSettingsDialog(project, \"Jini Settings\");\n        }\n        return key;\n    }\n\n", "    public static void query(Project project, Prompt prompt, String code, String language, Consumer<String> callback, Options options) {\n        if (code.length() > 3000) code = code.substring(0, 3000); // todo split / notify\n        AppSettingsState settings = AppSettingsState.getInstance();\n        if (settings != null && (settings.OPENAI_API_KEY == null || settings.OPENAI_API_KEY.isEmpty())) {\n            getKey(project);\n            return;\n        }\n\n        String safe_code = code.replaceAll(\"\\\"\", \"'\").replace(\"\\n\", \"\\\\n\");\n        String safe_prompt = prompt.getText().replaceAll(\"\\\"\", \"'\");\n\n        String json = \"[\";", "        if (prompt == Prompt.EXECUTE) {\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"OS: \" + System.getProperty(\"os.name\") + \"\\\"},\";\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"ARCH: \" + System.getProperty(\"os.arch\") + \"\\\"},\";\n        } else {\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"Language: \" + language + \"\\\"},\";\n        }\n        json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"\" + safe_prompt + \"\\\"},\";\n        if (prompt == Prompt.CONVERT)\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"Target language: \" + prompt.language + \"\\\"},\";\n        json += \"{\\\"role\\\":\\\"user\\\",\\\"content\\\":\\\"\" + safe_code + \"\\\"},\";\n        if (options.has(replace) || options.has(Options.noExplanations)) {\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"DO NOT OUTPUT ANY COMMENTS OR EXPLANATIONS\\\"},\";\n        }", "        if (options.has(replace) || options.has(Options.noExplanations)) {\n            json += \"{\\\"role\\\":\\\"system\\\",\\\"content\\\":\\\"DO NOT OUTPUT ANY COMMENTS OR EXPLANATIONS\\\"},\";\n        }\n        if (json.endsWith(\",\"))\n            json = json.substring(0, json.length() - 1);// fuck json trailing comma!!!\n        json += \"]\";\n        fetchInBackground(callback, prompt.name(), json, project, code);\n    }\n\n    public static String extractCode(String result) {\n        if (result.startsWith(\"```\"))\n            result = result.substring(result.indexOf(\"\\n\") + 1);", "    public static String extractCode(String result) {\n        if (result.startsWith(\"```\"))\n            result = result.substring(result.indexOf(\"\\n\") + 1);\n        if (result.endsWith(\"```\"))\n            result = result.substring(0, result.length() - 3);\n        return result;\n    }\n\n\n    public static String extractCodes(String codes) {\n        if (!codes.contains(\"```bash\"))\n            return extractInlineCode(codes);\n        String pattern = \"```bash\\\\s+(.*?)```\";\n        Pattern p = Pattern.compile(pattern, Pattern.DOTALL);\n        Matcher m = p.matcher(codes);", "    public static String extractCodes(String codes) {\n        if (!codes.contains(\"```bash\"))\n            return extractInlineCode(codes);\n        String pattern = \"```bash\\\\s+(.*?)```\";\n        Pattern p = Pattern.compile(pattern, Pattern.DOTALL);\n        Matcher m = p.matcher(codes);\n        while (m.find()) {\n            String code = m.group(1);\n            if (code.isEmpty()) return pattern;\n            return code;\n        }\n        return extractCode(codes);\n    }\n\n    // todo extract multiple code blocks from ```<code>```", "            if (code.isEmpty()) return pattern;\n            return code;\n        }\n        return extractCode(codes);\n    }\n\n    // todo extract multiple code blocks from ```<code>```\n    public static String extractInlineCode(String result) {\n        int i = result.indexOf(\"```\");\n        if (i < 0) return result;\n        int k = result.indexOf(\"\\n\", i + 3);\n        result = result.substring(k);\n        int j = result.indexOf(\"```\");", "        if (i < 0) return result;\n        int k = result.indexOf(\"\\n\", i + 3);\n        result = result.substring(k);\n        int j = result.indexOf(\"```\");\n        if (j > 0)\n            result = result.substring(0, j);\n        return result;\n    }\n\n    public static void fetchInBackground(Consumer<String> callback, String info, String json, Project project, String code) {\n        String openAiKey = getKey(project);\n        Task.Backgroundable task = new Task.Backgroundable(project, \"Get GPT answer\", true) {\n            @Override", "    public static void fetchInBackground(Consumer<String> callback, String info, String json, Project project, String code) {\n        String openAiKey = getKey(project);\n        Task.Backgroundable task = new Task.Backgroundable(project, \"Get GPT answer\", true) {\n            @Override\n            public void run(@NotNull ProgressIndicator progressIndicator) {\n                progressIndicator.setIndeterminate(true);\n                progressIndicator.setText(info);\n                if (!progressIndicator.isRunning())\n                    progressIndicator.start();\n                try {// Perform long-running operation\n                    OpenAiAPI api = new OpenAiAPI();\n                    String result = api.query(json);\n                    progressIndicator.stop();\n                    result = extractCode(result); // ```<code>``` -> <code>\n                    callback.accept(result);\n                } catch (Exception e) {\n                    System.err.println(\"OPENAI API ERROR\");\n                    System.err.println(e.getMessage());\n                    e.printStackTrace();\n                }\n            }\n        };\n        ProgressManager.getInstance().run(task);\n    }\n\n\n}\n", "                try {// Perform long-running operation\n                    OpenAiAPI api = new OpenAiAPI();\n                    String result = api.query(json);\n                    progressIndicator.stop();\n                    result = extractCode(result); // ```<code>``` -> <code>\n                    callback.accept(result);\n                } catch (Exception e) {\n                    System.err.println(\"OPENAI API ERROR\");\n                    System.err.println(e.getMessage());\n                    e.printStackTrace();\n                }\n            }\n        };\n        ProgressManager.getInstance().run(task);\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/pannous/jini/openai/OpenAiAPI.java", "chunked_list": ["package com.pannous.jini.openai;\n\nimport com.pannous.jini.settings.ApiKeys;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;", "import java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\n\npublic class OpenAiAPI {\n\n    private static final URI gpt_service = URI.create(\"https://api.openai.com/v1/chat/completions\");\n    private static final URI completion_service = URI.create(\"https://api.openai.com/v1/engines/davinci/completions\");\n\n\n    public String postToOpenAiApi(String requestBodyAsJson, URI service)\n            throws IOException, InterruptedException {\n        var request = HttpRequest.newBuilder().uri(service)\n                .header(\"Content-Type\", \"application/json\")\n                .header(\"Authorization\", \"Bearer \" + ApiKeys.OPENAI_API_KEY)\n                .POST(BodyPublishers.ofString(requestBodyAsJson)).build();\n        final HttpClient client = HttpClient.newHttpClient();\n        return client.send(request, HttpResponse.BodyHandlers.ofString()).body();\n    }\n", "    public String postToOpenAiApi(String requestBodyAsJson, URI service)\n            throws IOException, InterruptedException {\n        var request = HttpRequest.newBuilder().uri(service)\n                .header(\"Content-Type\", \"application/json\")\n                .header(\"Authorization\", \"Bearer \" + ApiKeys.OPENAI_API_KEY)\n                .POST(BodyPublishers.ofString(requestBodyAsJson)).build();\n        final HttpClient client = HttpClient.newHttpClient();\n        return client.send(request, HttpResponse.BodyHandlers.ofString()).body();\n    }\n\n    public String complete(String start) throws IOException, InterruptedException {\n        String requestBodyAsJson = \"{\\n\" +\n                \"  \\\"prompt\\\": \\\"This is a test\\\",\\n\" +\n                \"  \\\"max_tokens\\\": 5,\\n\" +\n                \"  \\\"temperature\\\": 0.9,\\n\" +\n                \"  \\\"top_p\\\": 1,\\n\" +\n                \"  \\\"n\\\": 1,\\n\" +\n                \"  \\\"stream\\\": false,\\n\" +\n                \"  \\\"logprobs\\\": null,\\n\" +\n                \"  \\\"stop\\\": \\\"\\\\n\\\"\\n\" +\n                \"}\";\n        String s = postToOpenAiApi(requestBodyAsJson, completion_service);\n        return s;\n    }\n", "    public String complete(String start) throws IOException, InterruptedException {\n        String requestBodyAsJson = \"{\\n\" +\n                \"  \\\"prompt\\\": \\\"This is a test\\\",\\n\" +\n                \"  \\\"max_tokens\\\": 5,\\n\" +\n                \"  \\\"temperature\\\": 0.9,\\n\" +\n                \"  \\\"top_p\\\": 1,\\n\" +\n                \"  \\\"n\\\": 1,\\n\" +\n                \"  \\\"stream\\\": false,\\n\" +\n                \"  \\\"logprobs\\\": null,\\n\" +\n                \"  \\\"stop\\\": \\\"\\\\n\\\"\\n\" +\n                \"}\";\n        String s = postToOpenAiApi(requestBodyAsJson, completion_service);\n        return s;\n    }\n", "    public String query(String content) throws IOException, InterruptedException {\n        String messages;\n        if (content.startsWith(\"[\"))\n            messages = content;\n        else {\n            String safe_message = content.replace(\"\\\"\", \"'\").replace(\"\\n\", \"\\\\n\");\n//            we could use \"content\":``` + safe_message + \"``` but then we need to escape the backticks in the content\n            messages = \"[{\\\"role\\\": \\\"user\\\", \\\"content\\\": \\\"\" + safe_message + \"\\\"}]\";\n        }\n\n        String json = \"{\\n\" +\n                \"     \\\"model\\\": \\\"gpt-3.5-turbo\\\",\\n\" +\n                \"     \\\"messages\\\":\" + messages + \",\\n\" +\n                \"     \\\"temperature\\\": 0.3\\n\" +\n                \"   }\";\n        String response = postToOpenAiApi(json, gpt_service);\n        int start = response.indexOf(\"content\");", "        if (start == -1) return \"ERROR\\n\" + json + \"\\n\" + response;\n        response = response.substring(start + 10, response.indexOf(\"\\\"}\", start));\n        response = response.replace(\"As an AI language model, \", \"\");\n//        JsonReader reader = Json.createReader(new StringReader(response));\n//JsonObject jsonObject = reader.readObject();\n        // parse response json\n\n        return response.replace(\"\\\\n\", \"\\n\").trim();\n\n    }\n\n}\n"]}
