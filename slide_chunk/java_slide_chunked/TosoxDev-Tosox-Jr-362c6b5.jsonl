{"filename": "src/main/java/de/tosoxdev/tosoxjr/Main.java", "chunked_list": ["package de.tosoxdev.tosoxjr;\n\nimport de.tosoxdev.tosoxjr.commands.CommandManager;\nimport de.tosoxdev.tosoxjr.listener.StatusListener;\nimport de.tosoxdev.tosoxjr.listener.UserInputListener;\nimport de.tosoxdev.tosoxjr.utils.Constants;\nimport net.dv8tion.jda.api.JDABuilder;\nimport net.dv8tion.jda.api.OnlineStatus;\nimport net.dv8tion.jda.api.entities.Activity;\nimport net.dv8tion.jda.api.requests.GatewayIntent;", "import net.dv8tion.jda.api.entities.Activity;\nimport net.dv8tion.jda.api.requests.GatewayIntent;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class Main {\n\n    ///////////////////////////////////////////////////////////////\n    // Minimal Permissions:\n    //   Scopes:\n    //     - bot\n    //     - applications.commands\n    //   Permissions:\n    //     - Send Messages\n    //     - Manage Messages\n    //\n    // Prod: https://discord.com/api/oauth2/authorize?client_id=853752473365250089&permissions=10240&scope=bot%20applications.commands\n    // Dev : https://discord.com/api/oauth2/authorize?client_id=1125333842186752091&permissions=10240&scope=bot%20applications.commands\n    ///////////////////////////////////////////////////////////////\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(Main.class);\n    private static final CommandManager COMMAND_MANAGER = new CommandManager();\n", "    public static void main(String[] args) throws InterruptedException {\n        JDABuilder.createDefault(Constants.BOT_TOKEN)\n                .addEventListeners(new StatusListener())\n                .addEventListeners(new UserInputListener())\n                .enableIntents(GatewayIntent.MESSAGE_CONTENT)\n                .setActivity(Activity.watching(\"for your commands\"))\n                .setStatus(OnlineStatus.ONLINE)\n                .build()\n                .awaitReady();\n    }\n", "    public static Logger getLogger() {\n        return LOGGER;\n    }\n\n    public static CommandManager getCommandManager() {\n        return COMMAND_MANAGER;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/CommandManager.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands;\n\nimport de.tosoxdev.tosoxjr.commands.cat.CatCmd;\nimport de.tosoxdev.tosoxjr.commands.csstats.CSStatsCmd;\nimport de.tosoxdev.tosoxjr.commands.hangman.HangmanCmd;\nimport de.tosoxdev.tosoxjr.commands.joke.JokeCmd;\nimport de.tosoxdev.tosoxjr.commands.quote.QuoteCmd;\nimport de.tosoxdev.tosoxjr.commands.say.SayCmd;\nimport de.tosoxdev.tosoxjr.commands.scramble.ScrambleCmd;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;", "import de.tosoxdev.tosoxjr.commands.scramble.ScrambleCmd;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CommandManager {\n    private final List<CommandBase> commands = new ArrayList<>();\n\n    public CommandManager() {\n        addCommand(new SayCmd());\n        addCommand(new CatCmd());\n        addCommand(new QuoteCmd());\n        addCommand(new JokeCmd());\n        addCommand(new CSStatsCmd());\n\n        addCommand(new HangmanCmd());\n        addCommand(new ScrambleCmd());\n    }\n\n    public List<CommandBase> getCommands() {\n        return commands;\n    }\n", "    public void addCommand(CommandBase cmd) throws IllegalArgumentException {\n        boolean cmdExists = commands.stream().anyMatch(i -> i.getName().equalsIgnoreCase(cmd.getName()));\n        if (cmdExists) {\n            throw new IllegalArgumentException(\"Found a duplicate item in the list\");\n        }\n        commands.add(cmd);\n    }\n\n    public CommandBase getCommand(String name) {\n        return commands.stream()\n                .filter(cmd -> cmd.getName().equalsIgnoreCase(name))\n                .findFirst()\n                .orElseThrow();\n    }\n", "    public CommandBase getCommand(String name) {\n        return commands.stream()\n                .filter(cmd -> cmd.getName().equalsIgnoreCase(name))\n                .findFirst()\n                .orElseThrow();\n    }\n\n    public void handle(SlashCommandInteractionEvent event) {\n        String command = event.getName();\n        CommandBase cmd = getCommand(command);\n        cmd.handle(event);\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/CommandBase.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands;\n\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.List;\n\npublic abstract class CommandBase {\n    private final String name;\n    private final String description;\n    private final List<OptionData> options;\n\n    public CommandBase(String name, String description, List<OptionData> options) {\n        this.name = name;\n        this.description = description;\n        this.options = options;\n    }\n", "    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public List<OptionData> getOptions() {\n        return options;\n    }\n", "    public abstract void handle(SlashCommandInteractionEvent event);\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/GameBase.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands;\n\nimport net.dv8tion.jda.api.events.Event;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.List;\n\npublic abstract class GameBase extends CommandBase {\n    public GameBase(String name, String description, List<OptionData> options) {\n        super(name, description, options);\n    }\n", "    public abstract void handleEvent(Event event);\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/scramble/GameState.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.scramble;\n\nenum GameState {\n    ONGOING(\"Scramble\"),\n    WIN(\"You won!\"),\n    DEFEAT(\"You lose!\"),\n    TIMEOUT(\"Timeout\");\n\n    private final String title;\n", "    private final String title;\n\n    GameState(String title) {\n        this.title = title;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/scramble/ScrambleCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.scramble;\n\nimport de.tosoxdev.tosoxjr.commands.GameBase;\nimport de.tosoxdev.tosoxjr.commands.hangman.Hangman;\nimport de.tosoxdev.tosoxjr.utils.ArgumentParser;\nimport net.dv8tion.jda.api.events.Event;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.OptionType;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n", "import net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class ScrambleCmd extends GameBase {\n    private static final int MAX_GAMES = 10;\n    private static ScrambleCmd instance;\n    private final HashMap<String, Scramble> games = new HashMap<>();\n    private final String languages;\n\n    public ScrambleCmd() {\n        super(\"scramble\", \"Play a game of Scramble\", List.of(\n                new OptionData(OptionType.STRING, \"lang\", \"Decide the langauge of the word. Use 'list' to list all available ones\", false),\n                new OptionData(OptionType.BOOLEAN, \"coop\", \"Play Scramble with all your friends on the server\", false)\n        ));\n        instance = this;\n\n        StringBuilder sb = new StringBuilder(\"Available languages\");\n        Hangman.RANDOM_WORD_APIS.forEach((key, value) -> sb.append(String.format(\"\\n- %s\", key)));\n        languages = sb.toString();\n    }\n\n    @Override", "    public void handle(SlashCommandInteractionEvent event) {\n        String lang = ArgumentParser.getString(event.getOption(\"lang\"), \"\");\n        if (lang.equalsIgnoreCase(\"list\")) {\n            event.reply(languages).queue();\n            return;\n        }\n\n        String user = event.getUser().getAsTag();\n        if (games.containsKey(user)) {\n            event.reply(\"You already started a game of Scramble\").queue();\n            return;\n        }\n", "        if (games.containsKey(user)) {\n            event.reply(\"You already started a game of Scramble\").queue();\n            return;\n        }\n\n        if (games.size() > MAX_GAMES) {\n            event.reply(\"Sorry, there are to many games of Scramble already\").queue();\n            return;\n        }\n\n        event.deferReply().queue(m -> m.deleteOriginal().queue());\n\n        boolean coop = ArgumentParser.getBoolean(event.getOption(\"coop\"), false);\n        Scramble scramble = new Scramble(user, event.getChannel(), coop, lang);", "        if (scramble.initialize()) {\n            games.put(user, scramble);\n        }\n    }\n\n    @Override\n    public void handleEvent(Event event) {\n        for (Scramble scramble : games.values()) {\n            new Thread(() -> scramble.handleEvent(event)).start();\n        }\n    }\n", "    public void removePlayer(String user) {\n        games.remove(user);\n    }\n\n    public static ScrambleCmd getInstance() {\n        return instance;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/scramble/Scramble.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.scramble;\n\nimport de.tosoxdev.tosoxjr.utils.APIRequest;\nimport net.dv8tion.jda.api.EmbedBuilder;\nimport net.dv8tion.jda.api.entities.User;\nimport net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;\nimport net.dv8tion.jda.api.entities.emoji.Emoji;\nimport net.dv8tion.jda.api.entities.emoji.EmojiUnion;\nimport net.dv8tion.jda.api.events.Event;\nimport net.dv8tion.jda.api.events.message.MessageReceivedEvent;", "import net.dv8tion.jda.api.events.Event;\nimport net.dv8tion.jda.api.events.message.MessageReceivedEvent;\nimport net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;\n\nimport java.awt.*;\nimport java.util.*;\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Scramble {\n    public static final HashMap<String, String> RANDOM_WORD_APIS = new HashMap<>(Map.of(\n            \"en\", \"https://capitalizemytitle.com/wp-content/tools/random-word/en/nouns.txt\",\n            \"de\", \"https://capitalizemytitle.com/wp-content/tools/random-word/de/nouns.txt\"\n    ));\n    private static final HashMap<String, List<String>> RANDOM_WORD_LIST = new HashMap<>();\n\n    static {", "\npublic class Scramble {\n    public static final HashMap<String, String> RANDOM_WORD_APIS = new HashMap<>(Map.of(\n            \"en\", \"https://capitalizemytitle.com/wp-content/tools/random-word/en/nouns.txt\",\n            \"de\", \"https://capitalizemytitle.com/wp-content/tools/random-word/de/nouns.txt\"\n    ));\n    private static final HashMap<String, List<String>> RANDOM_WORD_LIST = new HashMap<>();\n\n    static {\n        for (Map.Entry<String, String> entry : RANDOM_WORD_APIS.entrySet()) {\n            String response = APIRequest.getString(entry.getValue());\n            RANDOM_WORD_LIST.put(entry.getKey(), response != null ? List.of(response.split(\",\")) : null);\n        }\n    }\n\n    private static final int TIMEOUT_MS = 10 * 60 * 1000;\n    private static final int STOP_SIGN_CP = 0x1F6D1;\n\n    private final MessageChannel channel;\n    private final String player;\n    private final boolean coop;\n    private final String language;\n\n    private Timer tmTimeout = new Timer();\n    private String embedMessageId;\n    private long timer;\n    private String word;\n    private String scrambledWord;\n\n    public Scramble(String player, MessageChannel channel, boolean coop, String language) {\n        this.channel = channel;\n        this.player = player;\n        this.coop = coop;\n        this.language = language;\n    }\n", "        for (Map.Entry<String, String> entry : RANDOM_WORD_APIS.entrySet()) {\n            String response = APIRequest.getString(entry.getValue());\n            RANDOM_WORD_LIST.put(entry.getKey(), response != null ? List.of(response.split(\",\")) : null);\n        }\n    }\n\n    private static final int TIMEOUT_MS = 10 * 60 * 1000;\n    private static final int STOP_SIGN_CP = 0x1F6D1;\n\n    private final MessageChannel channel;\n    private final String player;\n    private final boolean coop;\n    private final String language;\n\n    private Timer tmTimeout = new Timer();\n    private String embedMessageId;\n    private long timer;\n    private String word;\n    private String scrambledWord;\n\n    public Scramble(String player, MessageChannel channel, boolean coop, String language) {\n        this.channel = channel;\n        this.player = player;\n        this.coop = coop;\n        this.language = language;\n    }\n", "    public boolean initialize() {\n        word = generateWord();\n        if (word == null) {\n            channel.sendMessage(\"I'm unable to generate a random word\").queue();\n            return false;\n        }\n\n        // Bugfix for the words with spaces (\"Ansicht\")\n        word = word.replaceAll(\"\\\\s+\",\"\");\n\n        // Shuffle word\n        List<String> chars = new ArrayList<>(word\n                .toLowerCase()\n                .chars()\n                .mapToObj(c -> String.valueOf((char) c))\n                .toList());\n        Collections.shuffle(chars);\n        scrambledWord = String.join(\"\", chars);\n\n        // Start timers\n        tmTimeout.schedule(new TimerTask() {\n            @Override", "            public void run() {\n                endGame(GameState.TIMEOUT, null);\n            }\n        }, TIMEOUT_MS);\n        timer = System.currentTimeMillis();\n\n        channel.sendMessageEmbeds(createGameEmbed(GameState.ONGOING, null).build()).queue(m -> embedMessageId = m.getId());\n        return true;\n    }\n\n    public void handleEvent(Event event) {", "    public void handleEvent(Event event) {\n        if (event instanceof MessageReceivedEvent e) {\n            handleMessageReceivedEvent(e);\n        } else if (event instanceof MessageReactionAddEvent e) {\n            handleMessageReactionAddEvent(e);\n        }\n    }\n\n    private void handleMessageReactionAddEvent(MessageReactionAddEvent event) {\n        EmojiUnion emoji = event.getEmoji();\n        if (!event.getMessageId().equals(embedMessageId)) return;", "        if (!event.getMessageId().equals(embedMessageId)) return;\n        if (emoji.getType() == Emoji.Type.CUSTOM) return;\n\n        // Check sender\n        User sender = event.getUser();\n        if (sender == null) return;\n        if (sender.isBot()) return;\n        if (!sender.getAsTag().equals(player)) return;\n\n        // Get code point from emoji\n        int codePoint = emoji.getName().codePointAt(0);", "        if (codePoint != STOP_SIGN_CP) return;\n\n        endGame(GameState.DEFEAT, null);\n    }\n\n    private void handleMessageReceivedEvent(MessageReceivedEvent event) {\n        if (event.isWebhookMessage()) return;\n        if (!event.getChannel().getId().equals(channel.getId())) return;\n\n        User sender = event.getAuthor();\n        if (sender.isBot()) return;", "        if (sender.isBot()) return;\n        if ((!coop) && (!sender.getAsTag().equals(player))) return;\n\n        // Reset timeout timer\n        resetTimer();\n\n        if (event.getMessage().getContentDisplay().equalsIgnoreCase(word)) {\n            endGame(GameState.WIN, sender.getName());\n        }\n    }\n\n    private void resetTimer() {\n        tmTimeout.cancel();\n        tmTimeout = new Timer();\n        tmTimeout.schedule(new TimerTask() {\n            @Override", "            public void run() {\n                endGame(GameState.TIMEOUT, null);\n            }\n        }, TIMEOUT_MS);\n    }\n\n    private void endGame(GameState state, String sender) {\n        tmTimeout.cancel();\n        channel.retrieveMessageById(embedMessageId).queue(m -> m.clearReactions().queue());\n        channel.sendMessageEmbeds(createGameEmbed(state, sender).build()).queue();\n        ScrambleCmd.getInstance().removePlayer(player);\n    }\n\n    private String generateWord() {\n        List<String> words = RANDOM_WORD_LIST.getOrDefault(language.toLowerCase(), RANDOM_WORD_LIST.get(\"en\"));\n        int randomIdx = ThreadLocalRandom.current().nextInt(words.size());\n        return words.get(randomIdx);\n    }\n\n    private EmbedBuilder createGameEmbed(GameState state, String sender) {\n        EmbedBuilder gameEmbed = new EmbedBuilder();\n        gameEmbed.setTitle(String.format(\"%s[%s] %s\", coop ? \"[CO-OP]\" : \"\", language.isBlank() ? \"EN\" : language.toUpperCase(), state.getTitle()));\n        gameEmbed.setColor(Color.CYAN);\n        gameEmbed.addField(state == GameState.ONGOING ? \"Word\" : \"The word was\", state == GameState.ONGOING ? scrambledWord : word, false);", "        if (state == GameState.WIN) {\n            double time = (double)(System.currentTimeMillis() - timer) / 1000;\n            String results = coop\n                    ? String.format(\"%s guessed the word first after %.2fs\", sender, time)\n                    : String.format(\"You guessed the word after %.2fs\", time);\n            gameEmbed.addField(\"Results\", results, false);\n        }\n        if (state == GameState.ONGOING) {\n            gameEmbed.addField(\n                    \"How To Play\",\n                    \"\"\"\n                    - Try to unscramble the word\n                    - Write your guess in this channel\n                    - React with the stop sign (\ud83d\uded1) to end the game\n                    \"\"\", false);\n        }\n        gameEmbed.setFooter(\"Request made by @\" + player, null);\n        return gameEmbed;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/cat/CatCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.cat;\n\nimport de.tosoxdev.tosoxjr.commands.CommandBase;\nimport de.tosoxdev.tosoxjr.utils.APIRequest;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport org.json.JSONArray;\n\npublic class CatCmd extends CommandBase {\n    private static final String CAT_API = \"https://api.thecatapi.com/v1/images/search\";\n\n    public CatCmd() {\n        super(\"cat\", \"Get a random picture of a cat\", null);\n    }\n\n    @Override", "    public void handle(SlashCommandInteractionEvent event) {\n        JSONArray response = (JSONArray) APIRequest.getJson(CAT_API);\n        if ((response == null) || (response.isEmpty())) {\n            event.reply(\"Unable to get a cat image :(\").queue();\n            return;\n        }\n\n        String url = response.getJSONObject(0).getString(\"url\");\n        event.reply(url).queue();\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/say/SayCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.say;\n\nimport de.tosoxdev.tosoxjr.commands.CommandBase;\nimport de.tosoxdev.tosoxjr.utils.ArgumentParser;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.OptionType;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.List;\n\npublic class SayCmd extends CommandBase {\n    public SayCmd() {\n        super(\"say\", \"Repeats the given message\", List.of(\n                new OptionData(OptionType.STRING, \"message\", \"The contents of the message\", true)\n        ));\n    }\n\n    @Override", "import java.util.List;\n\npublic class SayCmd extends CommandBase {\n    public SayCmd() {\n        super(\"say\", \"Repeats the given message\", List.of(\n                new OptionData(OptionType.STRING, \"message\", \"The contents of the message\", true)\n        ));\n    }\n\n    @Override\n    public void handle(SlashCommandInteractionEvent event) {\n        String sayMsg = ArgumentParser.getString(event.getOption(\"message\"), \"\");\n        event.deferReply().queue(m -> m.deleteOriginal().queue());\n        event.getChannel().sendMessage(sayMsg).queue();\n    }\n}\n", "    public void handle(SlashCommandInteractionEvent event) {\n        String sayMsg = ArgumentParser.getString(event.getOption(\"message\"), \"\");\n        event.deferReply().queue(m -> m.deleteOriginal().queue());\n        event.getChannel().sendMessage(sayMsg).queue();\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/joke/JokeCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.joke;\n\nimport de.tosoxdev.tosoxjr.Main;\nimport de.tosoxdev.tosoxjr.commands.CommandBase;\nimport de.tosoxdev.tosoxjr.utils.ArgumentParser;\nimport de.tosoxdev.tosoxjr.utils.Utils;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.OptionType;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n", "import net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class JokeCmd extends CommandBase {\n    private final HashMap<String, Callable<String>> categories = new HashMap<>(Map.of(\n            \"pun\", Joke::getPun,\n            \"programming\", Joke::getProgramming,\n            \"chuck-norris\", Joke::getChuckNorris\n    ));\n    private final String categoriesList;\n\n    public JokeCmd() {\n        super(\"joke\", \"Show a random joke\", List.of(\n                new OptionData(OptionType.STRING, \"category\", \"List all available categories with 'list'\", false)\n        ));\n\n        StringBuilder sb = new StringBuilder(\"Available categories\");\n        categories.forEach((key, value) -> sb.append(String.format(\"\\n- %s\", key)));\n        categoriesList = sb.toString();\n    }\n\n    @Override", "public class JokeCmd extends CommandBase {\n    private final HashMap<String, Callable<String>> categories = new HashMap<>(Map.of(\n            \"pun\", Joke::getPun,\n            \"programming\", Joke::getProgramming,\n            \"chuck-norris\", Joke::getChuckNorris\n    ));\n    private final String categoriesList;\n\n    public JokeCmd() {\n        super(\"joke\", \"Show a random joke\", List.of(\n                new OptionData(OptionType.STRING, \"category\", \"List all available categories with 'list'\", false)\n        ));\n\n        StringBuilder sb = new StringBuilder(\"Available categories\");\n        categories.forEach((key, value) -> sb.append(String.format(\"\\n- %s\", key)));\n        categoriesList = sb.toString();\n    }\n\n    @Override", "    public void handle(SlashCommandInteractionEvent event) {\n        String category = ArgumentParser.getString(event.getOption(\"category\"), null);\n        if (category == null) {\n            // Get random joke\n            int randomIdx = ThreadLocalRandom.current().nextInt(categories.size());\n            String randomCategory = (String) categories.keySet().toArray()[randomIdx];\n            Callable<String> callable = categories.get(randomCategory);\n\n            String joke = Utils.getFromCallable(callable);\n            if (joke == null) {\n                Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");\n                return;\n            }\n\n            event.reply(joke).queue();\n            return;\n        }\n", "            if (joke == null) {\n                Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");\n                return;\n            }\n\n            event.reply(joke).queue();\n            return;\n        }\n\n        if (category.equalsIgnoreCase(\"list\")) {\n            event.reply(categoriesList).queue();\n            return;\n        }\n\n        Callable<String> callable = categories.get(category);", "        if (category.equalsIgnoreCase(\"list\")) {\n            event.reply(categoriesList).queue();\n            return;\n        }\n\n        Callable<String> callable = categories.get(category);\n        if (callable == null) {\n            String msg = String.format(\"There are no jokes for '%s'\", category);\n            event.reply(msg).queue();\n            return;\n        }\n\n        String joke = Utils.getFromCallable(callable);", "        if (joke == null) {\n            Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");\n            return;\n        }\n\n        event.reply(joke).queue();\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/joke/Joke.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.joke;\n\nimport de.tosoxdev.tosoxjr.utils.APIRequest;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class Joke {\n    private final static String PUN_TEMPLATE = \"%s\\n... %s\";\n\n    public static String getPun() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://official-joke-api.appspot.com/jokes/general/random\");", "    public static String getPun() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://official-joke-api.appspot.com/jokes/general/random\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String setup = response.getJSONObject(0).getString(\"setup\");\n        String punchline = response.getJSONObject(0).getString(\"punchline\");\n        return String.format(PUN_TEMPLATE, setup, punchline);\n    }\n", "    public static String getProgramming() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://official-joke-api.appspot.com/jokes/programming/random\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String setup = response.getJSONObject(0).getString(\"setup\");\n        String punchline = response.getJSONObject(0).getString(\"punchline\");\n        return String.format(PUN_TEMPLATE, setup, punchline);\n    }\n", "    public static String getChuckNorris() {\n        JSONObject response = (JSONObject) APIRequest.getJson(\"https://api.chucknorris.io/jokes/random\");\n        if (response == null) {\n            return null;\n        }\n\n        return response.getString(\"value\");\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/csstats/CSStats.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.csstats;\n\nimport de.tosoxdev.tosoxjr.Main;\nimport de.tosoxdev.tosoxjr.utils.APIRequest;\nimport de.tosoxdev.tosoxjr.utils.Constants;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class CSStats {\n    private static final String API_VANITY_URL = \"http://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key=%s&vanityurl=%s\";\n    private static final String API_GAME_STATS = \"http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?appid=%s&key=%s&steamid=%s\";\n    private static final String API_USER_PROFILE = \"http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=%s&steamids=%s\";\n    private static final String CSGO_APP_ID = \"730\";\n\n    private boolean isID64(String userid) {", "public class CSStats {\n    private static final String API_VANITY_URL = \"http://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key=%s&vanityurl=%s\";\n    private static final String API_GAME_STATS = \"http://api.steampowered.com/ISteamUserStats/GetUserStatsForGame/v2/?appid=%s&key=%s&steamid=%s\";\n    private static final String API_USER_PROFILE = \"http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key=%s&steamids=%s\";\n    private static final String CSGO_APP_ID = \"730\";\n\n    private boolean isID64(String userid) {\n        try {\n            Long.parseLong(userid);\n            return true;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n", "    public String getID64(String userid) {\n        if (isID64(userid)) {\n            return userid;\n        }\n\n        String query = String.format(API_VANITY_URL, Constants.STEAM_API_KEY, userid);\n        JSONObject response = (JSONObject) APIRequest.getJson(query);\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        JSONObject objResponse = response.getJSONObject(\"response\");\n        int success = objResponse.getInt(\"success\");", "        if (success != 1) {\n            Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {}\", userid);\n            return null;\n        }\n\n        return objResponse.getString(\"steamid\");\n    }\n\n    public JSONObject getStatistics(String userid64) {\n        String query = String.format(API_GAME_STATS, CSGO_APP_ID, Constants.STEAM_API_KEY, userid64);\n        return (JSONObject) APIRequest.getJson(query);\n    }\n", "    public JSONObject getStatistics(String userid64) {\n        String query = String.format(API_GAME_STATS, CSGO_APP_ID, Constants.STEAM_API_KEY, userid64);\n        return (JSONObject) APIRequest.getJson(query);\n    }\n\n    public String getStatistic(JSONObject statistics, String statistic) {\n        JSONObject playerStats = statistics.getJSONObject(\"playerstats\");\n        JSONArray stats = playerStats.getJSONArray(\"stats\");\n\n        for (Object objStat : stats) {\n            JSONObject stat = (JSONObject) objStat;", "        for (Object objStat : stats) {\n            JSONObject stat = (JSONObject) objStat;\n            if (stat.getString(\"name\").equalsIgnoreCase(statistic)) {\n                return String.valueOf(stat.getInt(\"value\"));\n            }\n        }\n\n        return null;\n    }\n\n    public JSONObject getProfileInfos(String userid64) {\n        String query = String.format(API_USER_PROFILE, Constants.STEAM_API_KEY, userid64);\n        JSONObject response = (JSONObject) APIRequest.getJson(query);", "    public JSONObject getProfileInfos(String userid64) {\n        String query = String.format(API_USER_PROFILE, Constants.STEAM_API_KEY, userid64);\n        JSONObject response = (JSONObject) APIRequest.getJson(query);\n        if (response == null) {\n            return null;\n        }\n\n        JSONObject objResponse = response.getJSONObject(\"response\");\n        JSONArray players = objResponse.optJSONArray(\"players\");\n        if ((players == null) || players.isEmpty()) {\n            return null;\n        }\n\n        return (JSONObject) players.get(0);\n    }\n", "        if ((players == null) || players.isEmpty()) {\n            return null;\n        }\n\n        return (JSONObject) players.get(0);\n    }\n\n    public String getProfileInfo(JSONObject infos, String info) {\n        boolean hasInfo = infos.has(info);\n        return hasInfo ? String.valueOf(infos.get(info)) : null;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/csstats/CSStatsCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.csstats;\n\nimport de.tosoxdev.tosoxjr.commands.CommandBase;\nimport de.tosoxdev.tosoxjr.utils.ArgumentParser;\nimport net.dv8tion.jda.api.EmbedBuilder;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.OptionType;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\nimport org.json.JSONObject;\n", "import org.json.JSONObject;\n\nimport java.awt.*;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.List;\n\npublic class CSStatsCmd extends CommandBase {\n    private static final String API_FLAGS = \"https://flagsapi.com/%s/flat/32.png\";\n    private final SimpleDateFormat formatter = new SimpleDateFormat(\"dd.MM.yyyy HH:mm:ss\");\n    private final CSStats csStats = new CSStats();\n\n    public CSStatsCmd() {\n        super(\"cs-stats\", \"Get some CS:GO statistics about the given player\", List.of(\n                new OptionData(OptionType.STRING, \"user\", \"The user id64 or the url of the steam profile\", true),\n                new OptionData(OptionType.STRING, \"stat\", \"A statistic to retrieve from the user statistics\", false)\n        ));\n    }\n\n    @Override", "    public void handle(SlashCommandInteractionEvent event) {\n        String user = ArgumentParser.getString(event.getOption(\"user\"), \"\");\n\n        // Check and get steamid64\n        String userid = csStats.getID64(user);\n        if (userid == null) {\n            String msg = String.format(\"Couldn't find user id from user url: %s\", user);\n            event.reply(msg).queue();\n            return;\n        }\n\n        // Get user statistics\n        JSONObject userStats = csStats.getStatistics(userid);", "        if (userStats == null) {\n            String msg = String.format(\"Couldn't find user: %s\", user);\n            event.reply(msg).queue();\n            return;\n        } else if (userStats.isEmpty()) {\n            String msg = String.format(\"User '%s' set 'Game Details' to private or friends only\", user);\n            event.reply(msg).queue();\n            return;\n        }\n\n        // Check if a statistic parameter is provided\n        String stat = ArgumentParser.getString(event.getOption(\"stat\"), null);", "        if (stat != null) {\n            // Check if statistic exists\n            String statistic = csStats.getStatistic(userStats, stat);\n            if (statistic == null) {\n                String msg = String.format(\"Couldn't find statistic: %s\", stat);\n                event.reply(msg).queue();\n                return;\n            }\n\n            event.reply(statistic).queue();\n            return;\n        }\n\n        // Get CS:GO statistics\n        String kills = csStats.getStatistic(userStats, \"total_kills\");\n        String deaths = csStats.getStatistic(userStats, \"total_deaths\");\n        String headshots = csStats.getStatistic(userStats, \"total_kills_headshot\");\n        String playtimeSeconds = csStats.getStatistic(userStats, \"total_time_played\");\n        String mvps = csStats.getStatistic(userStats, \"total_mvps\");\n        String wins = csStats.getStatistic(userStats, \"total_matches_won\");\n        String matches = csStats.getStatistic(userStats, \"total_matches_played\");\n        String fired = csStats.getStatistic(userStats, \"total_shots_fired\");\n        String hits = csStats.getStatistic(userStats, \"total_shots_hit\");\n\n        // Calculate custom statistics\n        String kd = String.format(\"%.2f\", (double) Integer.parseInt(kills) / Integer.parseInt(deaths));\n        String hsPercentage = String.format(\"%.2f\", ((double) Integer.parseInt(headshots) / Integer.parseInt(kills)) * 100);\n        String playtime = String.format(\"%.2f\", Double.parseDouble(playtimeSeconds) / 3600);\n        String wr = String.format(\"%.2f\", ((double) Integer.parseInt(wins) / Integer.parseInt(matches)) * 100);\n        String accuracy = String.format(\"%.2f\", ((double) Integer.parseInt(hits) / Integer.parseInt(fired)) * 100);\n\n        // Get user profile information\n        JSONObject profileData = csStats.getProfileInfos(userid); // Shouldn't return null because profile visibility is linked with game details visibility\n        String profileUrl = csStats.getProfileInfo(profileData, \"profileurl\");\n        String username = csStats.getProfileInfo(profileData, \"personaname\");\n        String avatarUrl = csStats.getProfileInfo(profileData, \"avatarfull\");\n        String countryCode = csStats.getProfileInfo(profileData, \"loccountrycode\");\n        String flagUrl = String.format(API_FLAGS, countryCode);\n\n        // Build embed\n        EmbedBuilder statsEmbed = new EmbedBuilder();\n        statsEmbed.setTitle(String.format(\"**CS:GO Stats for %s**\", user), null);\n        statsEmbed.setColor(Color.ORANGE);\n        statsEmbed.setThumbnail(countryCode != null ? flagUrl : null);\n        statsEmbed.setAuthor(username, profileUrl, avatarUrl);\n        statsEmbed.setDescription(\"Playtime: \" + playtime + \"h\");\n        statsEmbed.addField(\"**K/D**\", kd, true);\n        statsEmbed.addField(\"**Headshot %**\", hsPercentage + \"%\", true);\n        statsEmbed.addField(\"**Accuracy**\", accuracy + \"%\", true);\n        statsEmbed.addField(\"**MVPs**\", mvps, true);\n        statsEmbed.addField(\"**Wins**\", wins, true);\n        statsEmbed.addField(\"**Winrate**\", wr + \"%\", true);\n        statsEmbed.setFooter(\"Request made @ \" + formatter.format(new Date()), null);\n\n        event.replyEmbeds(statsEmbed.build()).queue();\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/quote/Quote.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.quote;\n\nimport de.tosoxdev.tosoxjr.utils.APIRequest;\nimport org.json.JSONArray;\n\npublic class Quote {\n    private final static String QUOTE_TEMPLATE = \"_%s_\\n~ %s\";\n\n    public static String getBreakingBad() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://api.breakingbadquotes.xyz/v1/quotes\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String quote = response.getJSONObject(0).getString(\"quote\");\n        String author = response.getJSONObject(0).getString(\"author\");\n        return String.format(QUOTE_TEMPLATE, quote, author);\n    }\n", "    public static String getBreakingBad() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://api.breakingbadquotes.xyz/v1/quotes\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String quote = response.getJSONObject(0).getString(\"quote\");\n        String author = response.getJSONObject(0).getString(\"author\");\n        return String.format(QUOTE_TEMPLATE, quote, author);\n    }\n", "    public static String getFamous() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://api.quotable.io/quotes/random?tags=famous-quotes\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String content = response.getJSONObject(0).getString(\"content\");\n        String author = response.getJSONObject(0).getString(\"author\");\n        return String.format(QUOTE_TEMPLATE, content, author);\n    }\n", "    public static String getWisdom() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://api.quotable.io/quotes/random?tags=wisdom\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String content = response.getJSONObject(0).getString(\"content\");\n        String author = response.getJSONObject(0).getString(\"author\");\n        return String.format(QUOTE_TEMPLATE, content, author);\n    }\n", "    public static String getInspirational() {\n        JSONArray response = (JSONArray) APIRequest.getJson(\"https://zenquotes.io/api/random\");\n        if ((response == null) || (response.isEmpty())) {\n            return null;\n        }\n\n        String q = response.getJSONObject(0).getString(\"q\");\n        String a = response.getJSONObject(0).getString(\"a\");\n        return String.format(QUOTE_TEMPLATE, q, a);\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/quote/QuoteCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.quote;\n\nimport de.tosoxdev.tosoxjr.Main;\nimport de.tosoxdev.tosoxjr.commands.CommandBase;\nimport de.tosoxdev.tosoxjr.utils.ArgumentParser;\nimport de.tosoxdev.tosoxjr.utils.Utils;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.OptionType;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n", "import net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class QuoteCmd extends CommandBase {\n    private final HashMap<String, Callable<String>> categories = new HashMap<>(Map.of(\n            \"breaking-bad\", Quote::getBreakingBad,\n            \"famous\", Quote::getFamous,\n            \"wisdom\", Quote::getWisdom,\n            \"inspirational\", Quote::getInspirational\n    ));\n    private final String categoriesList;\n\n    public QuoteCmd() {\n        super(\"quote\", \"Show a random quote\", List.of(\n                new OptionData(OptionType.STRING, \"category\", \"List all available categories with 'list'\", false)\n        ));\n\n        StringBuilder sb = new StringBuilder(\"Available categories\");\n        categories.forEach((key, value) -> sb.append(String.format(\"\\n- %s\", key)));\n        categoriesList = sb.toString();\n    }\n\n    @Override", "public class QuoteCmd extends CommandBase {\n    private final HashMap<String, Callable<String>> categories = new HashMap<>(Map.of(\n            \"breaking-bad\", Quote::getBreakingBad,\n            \"famous\", Quote::getFamous,\n            \"wisdom\", Quote::getWisdom,\n            \"inspirational\", Quote::getInspirational\n    ));\n    private final String categoriesList;\n\n    public QuoteCmd() {\n        super(\"quote\", \"Show a random quote\", List.of(\n                new OptionData(OptionType.STRING, \"category\", \"List all available categories with 'list'\", false)\n        ));\n\n        StringBuilder sb = new StringBuilder(\"Available categories\");\n        categories.forEach((key, value) -> sb.append(String.format(\"\\n- %s\", key)));\n        categoriesList = sb.toString();\n    }\n\n    @Override", "    public void handle(SlashCommandInteractionEvent event) {\n        String category = ArgumentParser.getString(event.getOption(\"category\"), null);\n        if (category == null) {\n            // Get random quote\n            int randomIdx = ThreadLocalRandom.current().nextInt(categories.size());\n            String randomCategory = (String) categories.keySet().toArray()[randomIdx];\n            Callable<String> callable = categories.get(randomCategory);\n\n            String quote = Utils.getFromCallable(callable);\n            if (quote == null) {\n                Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");\n                return;\n            }\n\n            event.reply(quote).queue();\n            return;\n        }\n", "            if (quote == null) {\n                Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");\n                return;\n            }\n\n            event.reply(quote).queue();\n            return;\n        }\n\n        if (category.equalsIgnoreCase(\"list\")) {\n            event.reply(categoriesList).queue();\n            return;\n        }\n\n        Callable<String> callable = categories.get(category);", "        if (category.equalsIgnoreCase(\"list\")) {\n            event.reply(categoriesList).queue();\n            return;\n        }\n\n        Callable<String> callable = categories.get(category);\n        if (callable == null) {\n            String msg = String.format(\"There are no quotes for '%s'\", category);\n            event.reply(msg).queue();\n            return;\n        }\n\n        String quote = Utils.getFromCallable(callable);", "        if (quote == null) {\n            Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");\n            return;\n        }\n\n        event.reply(quote).queue();\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/hangman/GameState.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.hangman;\n\nenum GameState {\n    ONGOING(\"Hangman\"),\n    WIN(\"You won!\"),\n    DEFEAT(\"You lost!\"),\n    TIMEOUT(\"Timeout\");\n\n    private final String title;\n", "    private final String title;\n\n    GameState(String title) {\n        this.title = title;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/hangman/HangmanCmd.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.hangman;\n\nimport de.tosoxdev.tosoxjr.commands.GameBase;\nimport de.tosoxdev.tosoxjr.utils.ArgumentParser;\nimport net.dv8tion.jda.api.events.Event;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.interactions.commands.OptionType;\nimport net.dv8tion.jda.api.interactions.commands.build.OptionData;\n\nimport java.util.HashMap;", "\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class HangmanCmd extends GameBase {\n    private static final int MAX_GAMES = 10;\n    private static HangmanCmd instance;\n    private final HashMap<String, Hangman> games = new HashMap<>();\n    private final String languages;\n\n    public HangmanCmd() {\n        super(\"hangman\", \"Play a game of Hangman\", List.of(\n                new OptionData(OptionType.STRING, \"lang\", \"Decide the langauge of the word. Use 'list' to list all available ones\", false),\n                new OptionData(OptionType.BOOLEAN, \"coop\", \"Play Hangman with all your friends on the server\", false)\n        ));\n        instance = this;\n\n        StringBuilder sb = new StringBuilder(\"Available languages\");\n        Hangman.RANDOM_WORD_APIS.forEach((key, value) -> sb.append(String.format(\"\\n- %s\", key)));\n        languages = sb.toString();\n    }\n\n    @Override", "    public void handle(SlashCommandInteractionEvent event) {\n        String lang = ArgumentParser.getString(event.getOption(\"lang\"), \"\");\n        if (lang.equalsIgnoreCase(\"list\")) {\n            event.reply(languages).queue();\n            return;\n        }\n\n        String user = event.getUser().getAsTag();\n        if (games.containsKey(user)) {\n            event.reply(\"You already started a game of Hangman\").queue();\n            return;\n        }\n", "        if (games.containsKey(user)) {\n            event.reply(\"You already started a game of Hangman\").queue();\n            return;\n        }\n\n        if (games.size() > MAX_GAMES) {\n            event.reply(\"Sorry, there are to many games of Hangman already\").queue();\n            return;\n        }\n\n        event.deferReply().queue(m -> m.deleteOriginal().queue());\n\n        boolean coop = ArgumentParser.getBoolean(event.getOption(\"coop\"), false);\n        Hangman hangman = new Hangman(user, event.getChannel(), coop, lang);", "        if (hangman.initialize()) {\n            games.put(user, hangman);\n        }\n    }\n\n    @Override\n    public void handleEvent(Event event) {\n        for (Hangman hangman : games.values()) {\n            new Thread(() -> hangman.handleEvent(event)).start();\n        }\n    }\n", "    public void removePlayer(String user) {\n        games.remove(user);\n    }\n\n    public static HangmanCmd getInstance() {\n        return instance;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/commands/hangman/Hangman.java", "chunked_list": ["package de.tosoxdev.tosoxjr.commands.hangman;\n\nimport de.tosoxdev.tosoxjr.utils.APIRequest;\nimport de.tosoxdev.tosoxjr.utils.Constants;\nimport net.dv8tion.jda.api.EmbedBuilder;\nimport net.dv8tion.jda.api.entities.User;\nimport net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;\nimport net.dv8tion.jda.api.entities.emoji.Emoji;\nimport net.dv8tion.jda.api.entities.emoji.EmojiUnion;\nimport net.dv8tion.jda.api.events.Event;", "import net.dv8tion.jda.api.entities.emoji.EmojiUnion;\nimport net.dv8tion.jda.api.events.Event;\nimport net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.awt.*;\nimport java.util.*;\nimport java.util.List;", "import java.util.*;\nimport java.util.List;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.stream.Collectors;\n\npublic class Hangman {\n    public static final HashMap<String, String> RANDOM_WORD_APIS = new HashMap<>(Map.of(\n            \"en\", \"https://capitalizemytitle.com/wp-content/tools/random-word/en/nouns.txt\",\n            \"de\", \"https://capitalizemytitle.com/wp-content/tools/random-word/de/nouns.txt\"\n    ));\n    private static final HashMap<String, List<String>> RANDOM_WORD_LIST = new HashMap<>();\n\n    static {", "        for (Map.Entry<String, String> entry : RANDOM_WORD_APIS.entrySet()) {\n            String response = APIRequest.getString(entry.getValue());\n            RANDOM_WORD_LIST.put(entry.getKey(), response != null ? List.of(response.split(\",\")) : null);\n        }\n    }\n\n    private static final String API_DICTIONARY = \"https://www.dictionaryapi.com/api/v3/references/collegiate/json/%s?key=%s\";\n    private static final int REGIONAL_INDICATOR_A_CP = 0x1F1E6;\n    private static final int REGIONAL_INDICATOR_Z_CP = 0x1F1FF;\n    private static final int JOKER_CP = 0x1F0CF;\n    private static final int STOP_SIGN_CP = 0x1F6D1;\n    private static final int TIMEOUT_MS = 2 * 60 * 1000;\n\n    private final Set<Character> guessedLetters = new HashSet<>();\n    private final MessageChannel channel;\n    private final String player;\n    private final boolean coop;\n    private final String language;\n\n    private Timer timer = new Timer();\n    private String embedMessageId;\n    private String word;\n    private String wordDefinition;\n    private int attempts;\n\n    public Hangman(String player, MessageChannel channel, boolean coop, String language) {\n        this.channel = channel;\n        this.player = player;\n        this.coop = coop;\n        this.language = language;\n    }\n", "    public boolean initialize() {\n        word = generateWord();\n        if (word == null) {\n            channel.sendMessage(\"I'm unable to generate a random word\").queue();\n            return false;\n        }\n\n        // Set timeout timer\n        timer.schedule(new TimerTask() {\n            @Override\n            public void run() {\n                endGame(GameState.TIMEOUT);\n            }\n        }, TIMEOUT_MS);\n\n        channel.sendMessageEmbeds(createGameEmbed(GameState.ONGOING).build()).queue(m -> embedMessageId = m.getId());\n        return true;\n    }\n", "            public void run() {\n                endGame(GameState.TIMEOUT);\n            }\n        }, TIMEOUT_MS);\n\n        channel.sendMessageEmbeds(createGameEmbed(GameState.ONGOING).build()).queue(m -> embedMessageId = m.getId());\n        return true;\n    }\n\n    public void handleEvent(Event event) {\n        if (event instanceof MessageReactionAddEvent e) {\n            handleMessageReactionAddEvent(e);\n        }\n    }\n\n    private void handleMessageReactionAddEvent(MessageReactionAddEvent event) {\n        // Check message\n        EmojiUnion emoji = event.getEmoji();", "    public void handleEvent(Event event) {\n        if (event instanceof MessageReactionAddEvent e) {\n            handleMessageReactionAddEvent(e);\n        }\n    }\n\n    private void handleMessageReactionAddEvent(MessageReactionAddEvent event) {\n        // Check message\n        EmojiUnion emoji = event.getEmoji();\n        if (!event.getMessageId().equals(embedMessageId)) return;\n        if (emoji.getType() == Emoji.Type.CUSTOM) return;\n\n        // Check sender\n        User sender = event.getUser();", "        if (!event.getMessageId().equals(embedMessageId)) return;\n        if (emoji.getType() == Emoji.Type.CUSTOM) return;\n\n        // Check sender\n        User sender = event.getUser();\n        if (sender == null) return;\n        if (sender.isBot()) return;\n        if ((!coop) && (!sender.getAsTag().equals(player))) return;\n\n        // Reset timeout timer\n        resetTimer();\n\n        // Get code point from emoji\n        int codePoint = emoji.getName().codePointAt(0);\n\n        // Check if stop", "        if (codePoint == STOP_SIGN_CP) {\n            if (!sender.getAsTag().equals(player)) return;\n\n            endGame(GameState.DEFEAT);\n            return;\n        }\n\n        // Check if joker\n        if (codePoint == JOKER_CP) {\n            if (!sender.getAsTag().equals(player)) return;\n            if (wordDefinition != null) return;\n\n            // Get joker\n            wordDefinition = getWordDefinition();\n\n            // Send embed\n            channel.retrieveMessageById(embedMessageId).queue(m -> {\n                m.clearReactions().queue();\n                m.editMessageEmbeds(createGameEmbed(GameState.ONGOING).build()).queue();\n            });\n\n            return;\n        }\n\n        // Check if emoji is a regional indicator emoji and get the correlating character\n        Character character = regionalIndicatorCPToChar(codePoint);", "        if (codePoint == JOKER_CP) {\n            if (!sender.getAsTag().equals(player)) return;\n            if (wordDefinition != null) return;\n\n            // Get joker\n            wordDefinition = getWordDefinition();\n\n            // Send embed\n            channel.retrieveMessageById(embedMessageId).queue(m -> {\n                m.clearReactions().queue();\n                m.editMessageEmbeds(createGameEmbed(GameState.ONGOING).build()).queue();\n            });\n\n            return;\n        }\n\n        // Check if emoji is a regional indicator emoji and get the correlating character\n        Character character = regionalIndicatorCPToChar(codePoint);", "        if (character == null) {\n            return;\n        }\n\n        // Add letter\n        guessedLetters.add(character);\n\n        if (word.indexOf(character) == -1) {\n            // Character doesn't exist in the word\n            attempts++;\n            if (attempts == 7) {\n                // Player didn't manage to guess the word\n                endGame(GameState.DEFEAT);\n                return;\n            }", "            if (attempts == 7) {\n                // Player didn't manage to guess the word\n                endGame(GameState.DEFEAT);\n                return;\n            }\n        } else if (!showWord().contains(\"_\")) {\n            // Player managed to guess the word\n            endGame(GameState.WIN);\n            return;\n        }\n\n        // Send embed\n        channel.retrieveMessageById(embedMessageId).queue(m -> {\n            m.clearReactions().queue();\n            m.editMessageEmbeds(createGameEmbed(GameState.ONGOING).build()).queue();\n        });\n    }\n\n    private void resetTimer() {\n        timer.cancel();\n        timer = new Timer();\n        timer.schedule(new TimerTask() {\n            @Override", "            public void run() {\n                endGame(GameState.TIMEOUT);\n            }\n        }, TIMEOUT_MS);\n    }\n\n    private String getWordDefinition() {\n        JSONArray response = (JSONArray) APIRequest.getJson(String.format(API_DICTIONARY, word, Constants.DICTIONARY_API_KEY));\n        if ((response == null) || (response.isEmpty())) {\n            return \"_Unknown_\";\n        }\n\n        // Check if word exists in dictionary\n        JSONObject objDefinition;", "        if ((response == null) || (response.isEmpty())) {\n            return \"_Unknown_\";\n        }\n\n        // Check if word exists in dictionary\n        JSONObject objDefinition;\n        try {\n            objDefinition = response.getJSONObject(0);\n        } catch (JSONException e) {\n            return \"_Unknown_\";\n        }\n\n        // If multiple definitions\n        JSONArray shortDefinitions = objDefinition.getJSONArray(\"shortdef\");", "        if ((shortDefinitions == null) || (shortDefinitions.isEmpty())) {\n            return \"_Unknown_\";\n        }\n\n        int nShortDefinitions = shortDefinitions.length();\n        int randomN = ThreadLocalRandom.current().nextInt(nShortDefinitions);\n        return shortDefinitions.getString(randomN);\n    }\n\n    private Character regionalIndicatorCPToChar(int codepoint) {\n        if (codepoint < REGIONAL_INDICATOR_A_CP) return null;", "        if (codepoint < REGIONAL_INDICATOR_A_CP) return null;\n        if (codepoint > REGIONAL_INDICATOR_Z_CP) return null;\n        int relativeChar = codepoint - REGIONAL_INDICATOR_A_CP;\n        return (char)((char) relativeChar + 'A');\n    }\n\n    private void endGame(GameState state) {\n        timer.cancel();\n        channel.retrieveMessageById(embedMessageId).queue(m -> {\n            m.clearReactions().queue();\n            m.editMessageEmbeds(createGameEmbed(state).build()).queue();\n        });\n        HangmanCmd.getInstance().removePlayer(player);\n    }\n\n    private String generateWord() {\n        List<String> words = RANDOM_WORD_LIST.getOrDefault(language.toLowerCase(), RANDOM_WORD_LIST.get(\"en\"));\n        int randomIdx = ThreadLocalRandom.current().nextInt(words.size());\n        String randomWord = words.get(randomIdx);\n        return randomWord != null ? randomWord.toUpperCase().replace(\"\u00c4\", \"AE\").replace(\"\u00d6\", \"OE\").replace(\"\u00dc\", \"UE\") : null;\n    }\n\n    private String showWord() {\n        return word.chars()\n                .mapToObj(c -> (guessedLetters.contains((char) c) ? (char) c + \" \" : \"_ \"))\n                .collect(Collectors.joining());\n    }\n\n    private String revealWord() {\n        return word.chars()\n                .mapToObj(c -> ((char) c + \" \"))\n                .collect(Collectors.joining());\n    }\n\n    private String createGuessedWords() {\n        return guessedLetters.stream().sorted().map(c -> c + \" \").collect(Collectors.joining());\n    }\n\n    private String createDescription() {\n        return \"```\"\n                + \"|\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e\u203e|   \\n|           \"\n                + (attempts >= 1 ? \"\ud83d\udc51\" : \" \")\n                + \"   \\n|           \"\n                + (attempts >= 2 ? (attempts >= 7 ? \"\ud83d\ude35\" : \"\ud83d\ude28\") : \" \")\n                + \"   \\n|           \"\n                + (attempts >= 3 ? \"\ud83d\udc58\" : \" \")\n                + \"   \\n|           \"\n                + (attempts >= 4 ? \"\ud83d\udc56\" : \" \")\n                + \"   \\n|          \"\n                + (attempts >= 5 ? (attempts >= 6 ? \"\ud83d\udc5f\ud83d\udc5f\" : \"\ud83d\udc5f\") : \" \")\n                + \"   \\n|     \\n|______________\"\n                + \"```\";\n    }\n\n    private EmbedBuilder createGameEmbed(GameState state) {\n        EmbedBuilder gameEmbed = new EmbedBuilder();\n        gameEmbed.setTitle(String.format(\"%s[%s] %s\", coop ? \"[CO-OP]\" : \"\", language.isBlank() ? \"EN\" : language.toUpperCase(), state.getTitle()));\n        gameEmbed.setColor(Color.BLUE);\n        gameEmbed.setDescription(createDescription());\n        gameEmbed.addField(\"Word\", \"```\" + (state == GameState.ONGOING ? showWord() : revealWord()) + \"```\", false);\n        gameEmbed.addField(\"Used Letters\", createGuessedWords(), false);", "        if (state == GameState.ONGOING) {\n            if (wordDefinition != null) {\n                gameEmbed.addField(\"Hint\", wordDefinition, false);\n            }\n            gameEmbed.addField(\n                    \"How To Play\",\n                    \"\"\"\n                    - React with emojis (e.g. \\uD83C\\uDDE6, \\uD83C\\uDDE7) to make a guess\n                    - React with the joker (\ud83c\udccf) to get a hint\n                    - React with the stop sign (\ud83d\uded1) to end the game\n                    \"\"\", false);\n        }\n        gameEmbed.setFooter(\"Request made by @\" + player, null);\n        return gameEmbed;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/utils/Constants.java", "chunked_list": ["package de.tosoxdev.tosoxjr.utils;\n\npublic final class Constants {\n    public static final String BOT_NAME = \"Tosox Jr\";\n    public static final String BOT_TOKEN = System.getenv(\"TOSOXJR_TOKEN\");\n    public static final String STEAM_API_KEY = System.getenv(\"STEAM_API_KEY\");\n    public static final String DICTIONARY_API_KEY = System.getenv(\"DICTIONARY_API_KEY\");\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/utils/APIRequest.java", "chunked_list": ["package de.tosoxdev.tosoxjr.utils;\n\nimport de.tosoxdev.tosoxjr.Main;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;", "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class APIRequest {\n    private static HttpResponse<String> get(String query) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(query))\n                .method(\"GET\", HttpRequest.BodyPublishers.noBody())\n                .build();\n\n        HttpResponse<String> response;", "        try {\n            response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n        } catch (IOException | InterruptedException e) {\n            Main.getLogger().error(\"The response for request '{}' was invalid\", query);\n            return null;\n        }\n\n        return response;\n    }\n\n    public static String getString(String query) {\n        HttpResponse<String> response = get(query);", "    public static String getString(String query) {\n        HttpResponse<String> response = get(query);\n        if (response == null) {\n            return null;\n        }\n\n        return response.body();\n    }\n\n    public static Object getJson(String query) {\n        HttpResponse<String> response = get(query);", "    public static Object getJson(String query) {\n        HttpResponse<String> response = get(query);\n        if (response == null) {\n            return null;\n        }\n\n        String body = response.body();\n        if (body == null) {\n            return null;\n        }\n\n        char fistChar = body.charAt(0);", "        if (fistChar == '{') {\n            return new JSONObject(body);\n        } else if (fistChar == '[')\n            return new JSONArray(body);\n        else {\n            Main.getLogger().error(\"The json body for request '{}' is malformed\", query);\n            return null;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/utils/ArgumentParser.java", "chunked_list": ["package de.tosoxdev.tosoxjr.utils;\n\nimport net.dv8tion.jda.api.interactions.commands.OptionMapping;\n\npublic class ArgumentParser {\n    public static String getString(OptionMapping arg, String fallback) {\n        return arg != null ? arg.getAsString() : fallback;\n    }\n\n    public static boolean getBoolean(OptionMapping arg, boolean fallback) {\n        return arg != null ? arg.getAsBoolean() : fallback;\n    }\n}\n", "    public static boolean getBoolean(OptionMapping arg, boolean fallback) {\n        return arg != null ? arg.getAsBoolean() : fallback;\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/utils/Utils.java", "chunked_list": ["package de.tosoxdev.tosoxjr.utils;\n\nimport java.util.concurrent.Callable;\n\npublic class Utils {\n    public static <T> T getFromCallable(Callable<T> callable) {\n        try {\n            return callable.call();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/listener/StatusListener.java", "chunked_list": ["package de.tosoxdev.tosoxjr.listener;\n\nimport de.tosoxdev.tosoxjr.Main;\nimport de.tosoxdev.tosoxjr.utils.Constants;\nimport net.dv8tion.jda.api.events.session.ReadyEvent;\nimport net.dv8tion.jda.api.hooks.ListenerAdapter;\nimport net.dv8tion.jda.api.interactions.commands.build.CommandData;\nimport net.dv8tion.jda.api.interactions.commands.build.Commands;\nimport net.dv8tion.jda.api.interactions.commands.build.SlashCommandData;\nimport org.jetbrains.annotations.NotNull;", "import net.dv8tion.jda.api.interactions.commands.build.SlashCommandData;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StatusListener extends ListenerAdapter {\n    @Override\n    public void onReady(@NotNull ReadyEvent event) {\n        Main.getLogger().info(\"{} is ready\", Constants.BOT_NAME);\n\n        // Global application commands\n        List<CommandData> commandData = Main.getCommandManager().getCommands()\n                .stream()\n                .map(c -> {\n                    SlashCommandData cmd = Commands.slash(c.getName(), c.getDescription());", "    public void onReady(@NotNull ReadyEvent event) {\n        Main.getLogger().info(\"{} is ready\", Constants.BOT_NAME);\n\n        // Global application commands\n        List<CommandData> commandData = Main.getCommandManager().getCommands()\n                .stream()\n                .map(c -> {\n                    SlashCommandData cmd = Commands.slash(c.getName(), c.getDescription());\n                    if ((c.getOptions() != null) && (!c.getOptions().isEmpty())) {\n                        cmd.addOptions(c.getOptions());\n                    }\n                    return cmd;\n                })\n                .collect(Collectors.toList());\n        event.getJDA().updateCommands().addCommands(commandData).queue();\n    }\n}\n", "                    if ((c.getOptions() != null) && (!c.getOptions().isEmpty())) {\n                        cmd.addOptions(c.getOptions());\n                    }\n                    return cmd;\n                })\n                .collect(Collectors.toList());\n        event.getJDA().updateCommands().addCommands(commandData).queue();\n    }\n}\n"]}
{"filename": "src/main/java/de/tosoxdev/tosoxjr/listener/UserInputListener.java", "chunked_list": ["package de.tosoxdev.tosoxjr.listener;\n\nimport de.tosoxdev.tosoxjr.Main;\nimport de.tosoxdev.tosoxjr.commands.hangman.HangmanCmd;\nimport de.tosoxdev.tosoxjr.commands.scramble.ScrambleCmd;\nimport net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;\nimport net.dv8tion.jda.api.events.message.MessageReceivedEvent;\nimport net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;\nimport net.dv8tion.jda.api.hooks.ListenerAdapter;\nimport org.jetbrains.annotations.NotNull;", "import net.dv8tion.jda.api.hooks.ListenerAdapter;\nimport org.jetbrains.annotations.NotNull;\n\npublic class UserInputListener extends ListenerAdapter {\n    @Override\n    public void onSlashCommandInteraction(@NotNull SlashCommandInteractionEvent event) {\n        Main.getCommandManager().handle(event);\n    }\n\n    @Override\n    public void onMessageReactionAdd(@NotNull MessageReactionAddEvent event) {\n        HangmanCmd.getInstance().handleEvent(event);\n        ScrambleCmd.getInstance().handleEvent(event);\n    }\n\n    @Override", "    public void onMessageReactionAdd(@NotNull MessageReactionAddEvent event) {\n        HangmanCmd.getInstance().handleEvent(event);\n        ScrambleCmd.getInstance().handleEvent(event);\n    }\n\n    @Override\n    public void onMessageReceived(@NotNull MessageReceivedEvent event) {\n        ScrambleCmd.getInstance().handleEvent(event);\n    }\n}\n"]}
