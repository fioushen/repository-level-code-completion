{"filename": "src/main/java/module-info.java", "chunked_list": ["module com.paulgutv.currencyconverter {\n    requires javafx.controls;\n    requires javafx.fxml;\n    requires okhttp3;\n    requires org.json;\n\n    exports com.paulgutv.currencyconverter.controller;\n    opens com.paulgutv.currencyconverter.controller to javafx.fxml;\n    exports com.paulgutv.currencyconverter.model;\n    opens com.paulgutv.currencyconverter.model to javafx.fxml;", "    exports com.paulgutv.currencyconverter.model;\n    opens com.paulgutv.currencyconverter.model to javafx.fxml;\n\n\n    opens com.paulgutv.currencyconverter to javafx.fxml;\n    exports com.paulgutv.currencyconverter;\n}"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/UpdaterInitializer.java", "chunked_list": ["package com.paulgutv.currencyconverter;\n\npublic class UpdaterInitializer {\n    public static void main(String[] args) {\n        Updater.main(args);\n    }\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/Updater.java", "chunked_list": ["package com.paulgutv.currencyconverter;\n\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.concurrent.Task;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.ProgressBar;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Font;", "import javafx.scene.layout.VBox;\nimport javafx.scene.text.Font;\nimport javafx.stage.Stage;\n\nimport java.io.*;\nimport java.net.*;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.Channels;\nimport java.nio.channels.ReadableByteChannel;\nimport java.util.zip.ZipEntry;", "import java.nio.channels.ReadableByteChannel;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\npublic class Updater extends Application {\n\n    private static final String DOWNLOAD_URL;\n    private static final String fileName;\n\n    static {\n        try {\n            URL url = new URI(\"https://github.com/paulgutv/currency-converter/releases/latest\").toURL();\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setInstanceFollowRedirects(false);\n            String redirectUrl = connection.getHeaderField(\"Location\");\n            String afterTag = redirectUrl.substring(redirectUrl.lastIndexOf(\"/\") + 1);\n            DOWNLOAD_URL = \"https://github.com/paulgutv/currency-converter/releases/download/\" + afterTag + \"/app.zip\";\n            fileName = DOWNLOAD_URL.substring(DOWNLOAD_URL.lastIndexOf('/') + 1);\n        } catch (IOException | URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "        try {\n            URL url = new URI(\"https://github.com/paulgutv/currency-converter/releases/latest\").toURL();\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setInstanceFollowRedirects(false);\n            String redirectUrl = connection.getHeaderField(\"Location\");\n            String afterTag = redirectUrl.substring(redirectUrl.lastIndexOf(\"/\") + 1);\n            DOWNLOAD_URL = \"https://github.com/paulgutv/currency-converter/releases/download/\" + afterTag + \"/app.zip\";\n            fileName = DOWNLOAD_URL.substring(DOWNLOAD_URL.lastIndexOf('/') + 1);\n        } catch (IOException | URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "    public static void main(String[] args) {\n        launch(args);\n    }\n\n    @Override\n    public void start(Stage primaryStage) {\n        primaryStage.setTitle(\"Launcher\");\n\n        Label label = new Label();\n        label.setText(\"Actualizando a la \u00faltima versi\u00f3n...\");\n        label.setFont(Font.font(18));\n\n        ProgressBar progressBar = new ProgressBar();\n        progressBar.setPrefWidth(300);\n        progressBar.setStyle(\"-fx-accent: purple;\");\n\n        VBox root = new VBox(label, progressBar);\n        root.setSpacing(20);\n        root.setStyle(\"-fx-padding: 40px\");\n\n        primaryStage.setScene(new Scene(root, 400, 200));\n        primaryStage.show();\n\n        Task<Void> downloadTask = createDownloadTask(progressBar);\n        Thread downloadThread = new Thread(downloadTask);\n        downloadThread.start();\n    }\n\n    private Task<Void> createDownloadTask(ProgressBar progressBar) {\n        progressBar.setProgress(0);\n\n        return new Task<>() {\n            @Override\n            protected Void call() throws Exception {\n                URL url = new URI(DOWNLOAD_URL).toURL();\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                long fileSize = connection.getContentLength();\n\n                try (BufferedInputStream inputStream = new BufferedInputStream(connection.getInputStream());\n                     ReadableByteChannel channel = Channels.newChannel(inputStream);\n                     FileOutputStream outputStream = new FileOutputStream(fileName)) {\n\n                    byte[] buffer = new byte[1024];\n                    int bytesRead;\n                    long totalBytesRead = 0;\n", "                    while ((bytesRead = channel.read(ByteBuffer.wrap(buffer))) != -1) {\n                        outputStream.write(buffer, 0, bytesRead);\n                        totalBytesRead += bytesRead;\n\n                        double progress = (double) totalBytesRead / fileSize;\n                        Platform.runLater(()-> progressBar.setProgress(progress));\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                return null;\n            }\n\n            @Override\n            protected void succeeded() {\n                super.succeeded();\n", "                try {\n                    // Verificar si el archivo zip existe\n                    File zipFile = new File(fileName);\n                    if (!zipFile.exists()) {\n                        throw new RuntimeException(\"El archivo zip no se encontr\u00f3: \" + zipFile.getAbsolutePath());\n                    }\n\n                    // Descomprimir el archivo zip en la carpeta actual\n                    ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(zipFile));\n                    ZipEntry entry = zipInputStream.getNextEntry();\n                    byte[] buffer = new byte[1024];", "                    while (entry != null) {\n                        String fileName = entry.getName();\n                        File outputFile = new File(fileName);\n\n                        // Escribir el archivo descomprimido\n                        FileOutputStream fos = new FileOutputStream(outputFile);\n                        int len;\n                        while ((len = zipInputStream.read(buffer)) > 0) {\n                            fos.write(buffer, 0, len);\n                        }\n                        fos.close();\n\n                        // Leer la siguiente entrada del zip\n                        entry = zipInputStream.getNextEntry();\n                    }\n                    zipInputStream.close();\n\n                    // Eliminar el archivo zip\n                    boolean deleteResult = zipFile.delete();", "                    if (!deleteResult) {\n                        System.out.println(\"No se pudo eliminar el archivo zip: \" + zipFile.getAbsolutePath());\n                    }\n\n                    // Ejecutar el archivo descomprimido\n                    String rutaSegundoJar = System.getProperty(\"user.dir\") + File.separator + \"CConverter.jar\";\n                    String directorioActual = System.getProperty(\"user.dir\");\n                    String comando = \"java -jar \" + rutaSegundoJar;\n\n                    ProcessBuilder pb = new ProcessBuilder(comando.split(\" \"));\n                    pb.directory(new File(directorioActual));\n                    pb.start();\n                    System.exit(0);\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n    }\n\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/App.java", "chunked_list": ["package com.paulgutv.currencyconverter;\n\nimport com.paulgutv.currencyconverter.model.Update;\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.scene.image.Image;\nimport javafx.stage.Stage;\n\nimport java.io.IOException;", "\nimport java.io.IOException;\nimport java.util.Objects;\n\npublic class App extends Application {\n\n    public static final String version = \"v1.2\";\n\n    @Override\n    public void start(Stage stage) throws IOException {\n        stage.setResizable(false);\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"hello-view.fxml\"));\n        Scene scene = new Scene(fxmlLoader.load());\n        stage.setTitle(\"CConverter \" + version);\n        Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/img/main/main.png\")));\n        stage.getIcons().add(icon);\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    @Override", "    public void start(Stage stage) throws IOException {\n        stage.setResizable(false);\n        FXMLLoader fxmlLoader = new FXMLLoader(App.class.getResource(\"hello-view.fxml\"));\n        Scene scene = new Scene(fxmlLoader.load());\n        stage.setTitle(\"CConverter \" + version);\n        Image icon = new Image(Objects.requireNonNull(getClass().getResourceAsStream(\"/img/main/main.png\")));\n        stage.getIcons().add(icon);\n        stage.setScene(scene);\n        stage.show();\n    }\n\n    @Override", "    public void stop() {\n        System.exit(0);\n    }\n\n    public static void main(String[] args) {\n\n        Update.checkLastVersion();\n        launch();\n    }\n}"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/AppInitializer.java", "chunked_list": ["package com.paulgutv.currencyconverter;\n\npublic class AppInitializer {\n    public static void main(String[] args) {\n        App.main(args);\n    }\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/model/Errors.java", "chunked_list": ["package com.paulgutv.currencyconverter.model;\n\nimport com.paulgutv.currencyconverter.controller.MainController;\nimport javafx.application.Platform;\nimport javafx.scene.paint.Color;\n\npublic class Errors {\n    public static void noConexion() {\n        Platform.runLater(() -> {\n        int num = InputBox.getInputId();\n        for (InputBox inputbox: MainController.getInputBoxes()) {", "        for (InputBox inputbox: MainController.getInputBoxes()) {\n            if(num == inputbox.getId()) {\n                inputbox.getLabel2().setTextFill(Color.RED);\n                inputbox.setLabel2(\" | Modo sin conexi\u00f3n \u26a0\");\n            }\n        }\n    });\n    }\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/model/Utils.java", "chunked_list": ["package com.paulgutv.currencyconverter.model;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Utils {\n\n    public static String addSymbol(String currency) {\n        return switch (currency) {\n            case \"USD\" -> \"$\";\n            case \"EUR\" -> \"\u20ac\";\n            case \"JPY\" -> \"\u00a5\";\n            case \"GBP\" -> \"\u00a3\";\n            case \"AUD\" -> \"A$\";\n            case \"CAD\" -> \"C$\";\n            case \"CHF\" -> \"Fr\";\n            case \"CNY\" -> \"\u00a5\";\n            case \"NZD\" -> \"NZ$\";\n            case \"MXN\" -> \"$\";\n            case \"BRL\" -> \"R$\";\n            case \"RUB\" -> \"\u20bd\";\n            case \"INR\" -> \"\u20b9\";\n            case \"KRW\" -> \"\u20a9\";\n            case \"TRY\" -> \"\u20ba\";\n            case \"ZAR\" -> \"R\";\n            case \"SGD\" -> \"S$\";\n            case \"HKD\" -> \"HK$\";\n            case \"ILS\" -> \"\u20aa\";\n            case \"PHP\" -> \"\u20b1\";\n            case \"SEK\" -> \"kr\";\n            case \"NOK\" -> \"kr\";\n            case \"TWD\" -> \"NT$\";\n            case \"SAR\" -> \"\ufdfc\";\n            case \"AED\" -> \"\u062f.\u0625\";\n            case \"JMD\" -> \"J$\";\n            case \"BSD\" -> \"B$\";\n            case \"HUF\" -> \"Ft\";\n            case \"ARS\" -> \"$\";\n            case \"KWD\" -> \"KD\";\n            case \"GTQ\" -> \"Q\";\n            case \"HNL\" -> \"L\";\n            case \"NIO\" -> \"C$\";\n            case \"PAB\" -> \"B/.\";\n            case \"GYD\" -> \"G$\";\n            case \"PEN\" -> \"S/.\";\n            case \"PYG\" -> \"\u20b2\";\n            case \"UYU\" -> \"$U\";\n            case \"VES\" -> \"Bs.\";\n            default -> \"Desconocido\";\n        };\n    }\n\n    static String obtenerCodigoPais(String currency) {\n        Map<String, String> currencyCountryMap = new HashMap<>();\n        currencyCountryMap.put(\"ARS\", \"argentina\");\n        currencyCountryMap.put(\"AUD\", \"australia\");\n        currencyCountryMap.put(\"BSD\", \"bahamas\");\n        currencyCountryMap.put(\"BRL\", \"brazil\");\n        currencyCountryMap.put(\"CAD\", \"canada\");\n        currencyCountryMap.put(\"CNY\", \"china\");\n        currencyCountryMap.put(\"EUR\", \"europe\");\n        currencyCountryMap.put(\"GTQ\", \"guatemala\");\n        currencyCountryMap.put(\"GYD\", \"guyana\");\n        currencyCountryMap.put(\"HNL\", \"honduras\");\n        currencyCountryMap.put(\"HKD\", \"hong\");\n        currencyCountryMap.put(\"HUF\", \"hungary\");\n        currencyCountryMap.put(\"INR\", \"india\");\n        currencyCountryMap.put(\"ILS\", \"israel\");\n        currencyCountryMap.put(\"JMD\", \"jamaica\");\n        currencyCountryMap.put(\"JPY\", \"japan\");\n        currencyCountryMap.put(\"KWD\", \"kuwait\");\n        currencyCountryMap.put(\"MXN\", \"mexico\");\n        currencyCountryMap.put(\"NZD\", \"newzealand\");\n        currencyCountryMap.put(\"NIO\", \"nicaragua\");\n        currencyCountryMap.put(\"NOK\", \"norway\");\n        currencyCountryMap.put(\"PAB\", \"panama\");\n        currencyCountryMap.put(\"PYG\", \"paraguay\");\n        currencyCountryMap.put(\"PEN\", \"peru\");\n        currencyCountryMap.put(\"PHP\", \"philippines\");\n        currencyCountryMap.put(\"RUB\", \"russia\");\n        currencyCountryMap.put(\"SAR\", \"saudiarabia\");\n        currencyCountryMap.put(\"SGD\", \"singapore\");\n        currencyCountryMap.put(\"ZAR\", \"southafrica\");\n        currencyCountryMap.put(\"KRW\", \"southkorea\");\n        currencyCountryMap.put(\"SEK\", \"sweden\");\n        currencyCountryMap.put(\"CHF\", \"switzerland\");\n        currencyCountryMap.put(\"TWD\", \"taiwan\");\n        currencyCountryMap.put(\"TRY\", \"turkey\");\n        currencyCountryMap.put(\"AED\", \"unitedarabemirates\");\n        currencyCountryMap.put(\"GBP\", \"unitedkingdom\");\n        currencyCountryMap.put(\"USD\", \"unitedstates\");\n        currencyCountryMap.put(\"UYU\", \"uruguay\");\n        currencyCountryMap.put(\"VES\", \"venezuela\");\n        return currencyCountryMap.get(currency);\n    }\n", "    public static String addSymbol(String currency) {\n        return switch (currency) {\n            case \"USD\" -> \"$\";\n            case \"EUR\" -> \"\u20ac\";\n            case \"JPY\" -> \"\u00a5\";\n            case \"GBP\" -> \"\u00a3\";\n            case \"AUD\" -> \"A$\";\n            case \"CAD\" -> \"C$\";\n            case \"CHF\" -> \"Fr\";\n            case \"CNY\" -> \"\u00a5\";\n            case \"NZD\" -> \"NZ$\";\n            case \"MXN\" -> \"$\";\n            case \"BRL\" -> \"R$\";\n            case \"RUB\" -> \"\u20bd\";\n            case \"INR\" -> \"\u20b9\";\n            case \"KRW\" -> \"\u20a9\";\n            case \"TRY\" -> \"\u20ba\";\n            case \"ZAR\" -> \"R\";\n            case \"SGD\" -> \"S$\";\n            case \"HKD\" -> \"HK$\";\n            case \"ILS\" -> \"\u20aa\";\n            case \"PHP\" -> \"\u20b1\";\n            case \"SEK\" -> \"kr\";\n            case \"NOK\" -> \"kr\";\n            case \"TWD\" -> \"NT$\";\n            case \"SAR\" -> \"\ufdfc\";\n            case \"AED\" -> \"\u062f.\u0625\";\n            case \"JMD\" -> \"J$\";\n            case \"BSD\" -> \"B$\";\n            case \"HUF\" -> \"Ft\";\n            case \"ARS\" -> \"$\";\n            case \"KWD\" -> \"KD\";\n            case \"GTQ\" -> \"Q\";\n            case \"HNL\" -> \"L\";\n            case \"NIO\" -> \"C$\";\n            case \"PAB\" -> \"B/.\";\n            case \"GYD\" -> \"G$\";\n            case \"PEN\" -> \"S/.\";\n            case \"PYG\" -> \"\u20b2\";\n            case \"UYU\" -> \"$U\";\n            case \"VES\" -> \"Bs.\";\n            default -> \"Desconocido\";\n        };\n    }\n\n    static String obtenerCodigoPais(String currency) {\n        Map<String, String> currencyCountryMap = new HashMap<>();\n        currencyCountryMap.put(\"ARS\", \"argentina\");\n        currencyCountryMap.put(\"AUD\", \"australia\");\n        currencyCountryMap.put(\"BSD\", \"bahamas\");\n        currencyCountryMap.put(\"BRL\", \"brazil\");\n        currencyCountryMap.put(\"CAD\", \"canada\");\n        currencyCountryMap.put(\"CNY\", \"china\");\n        currencyCountryMap.put(\"EUR\", \"europe\");\n        currencyCountryMap.put(\"GTQ\", \"guatemala\");\n        currencyCountryMap.put(\"GYD\", \"guyana\");\n        currencyCountryMap.put(\"HNL\", \"honduras\");\n        currencyCountryMap.put(\"HKD\", \"hong\");\n        currencyCountryMap.put(\"HUF\", \"hungary\");\n        currencyCountryMap.put(\"INR\", \"india\");\n        currencyCountryMap.put(\"ILS\", \"israel\");\n        currencyCountryMap.put(\"JMD\", \"jamaica\");\n        currencyCountryMap.put(\"JPY\", \"japan\");\n        currencyCountryMap.put(\"KWD\", \"kuwait\");\n        currencyCountryMap.put(\"MXN\", \"mexico\");\n        currencyCountryMap.put(\"NZD\", \"newzealand\");\n        currencyCountryMap.put(\"NIO\", \"nicaragua\");\n        currencyCountryMap.put(\"NOK\", \"norway\");\n        currencyCountryMap.put(\"PAB\", \"panama\");\n        currencyCountryMap.put(\"PYG\", \"paraguay\");\n        currencyCountryMap.put(\"PEN\", \"peru\");\n        currencyCountryMap.put(\"PHP\", \"philippines\");\n        currencyCountryMap.put(\"RUB\", \"russia\");\n        currencyCountryMap.put(\"SAR\", \"saudiarabia\");\n        currencyCountryMap.put(\"SGD\", \"singapore\");\n        currencyCountryMap.put(\"ZAR\", \"southafrica\");\n        currencyCountryMap.put(\"KRW\", \"southkorea\");\n        currencyCountryMap.put(\"SEK\", \"sweden\");\n        currencyCountryMap.put(\"CHF\", \"switzerland\");\n        currencyCountryMap.put(\"TWD\", \"taiwan\");\n        currencyCountryMap.put(\"TRY\", \"turkey\");\n        currencyCountryMap.put(\"AED\", \"unitedarabemirates\");\n        currencyCountryMap.put(\"GBP\", \"unitedkingdom\");\n        currencyCountryMap.put(\"USD\", \"unitedstates\");\n        currencyCountryMap.put(\"UYU\", \"uruguay\");\n        currencyCountryMap.put(\"VES\", \"venezuela\");\n        return currencyCountryMap.get(currency);\n    }\n", "    public static List<String> addCurrencies() {\n        return Arrays.asList(\"AED\", \"ARS\", \"AUD\", \"BRL\", \"BSD\", \"CAD\", \"CHF\", \"CNY\", \"EUR\", \"GBP\",\n                \"GTQ\", \"GYD\", \"HKD\", \"HNL\", \"HUF\", \"ILS\", \"INR\", \"JPY\", \"JMD\", \"KRW\",\n                \"KWD\", \"MXN\", \"NIO\", \"NOK\", \"NZD\", \"PAB\", \"PEN\", \"PHP\", \"PYG\", \"RUB\",\n                \"SAR\", \"SEK\", \"SGD\", \"TRY\", \"TWD\", \"USD\", \"UYU\", \"VES\", \"ZAR\");\n    }\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/model/InputBox.java", "chunked_list": ["package com.paulgutv.currencyconverter.model;\n\nimport com.paulgutv.currencyconverter.controller.MainController;\nimport javafx.application.Platform;\nimport javafx.geometry.Insets;\nimport javafx.geometry.Pos;\nimport javafx.scene.Cursor;\nimport javafx.scene.Node;\nimport javafx.scene.control.*;\nimport javafx.scene.image.Image;", "import javafx.scene.control.*;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.paint.Color;\nimport javafx.scene.text.Font;\n\nimport java.text.DecimalFormat;\nimport java.util.List;", "import java.text.DecimalFormat;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Timer;\nimport java.util.TimerTask;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class InputBox {\n    private final TextField textField;\n    private final ComboBox<String> comboBox;\n    private final VBox vBox;\n    private final Label label1;\n    private final Label label2;\n    private final List<InputBox> inputBoxes = MainController.getInputBoxes();\n    static int inputId;\n    static boolean inputIdInit = false;\n\n    private Timer timer;\n    private TimerTask timerTask;\n    private int id;\n    private static int counter = 0;\n    private boolean initialConversion = false;\n    private static int baseIndex;", "public class InputBox {\n    private final TextField textField;\n    private final ComboBox<String> comboBox;\n    private final VBox vBox;\n    private final Label label1;\n    private final Label label2;\n    private final List<InputBox> inputBoxes = MainController.getInputBoxes();\n    static int inputId;\n    static boolean inputIdInit = false;\n\n    private Timer timer;\n    private TimerTask timerTask;\n    private int id;\n    private static int counter = 0;\n    private boolean initialConversion = false;\n    private static int baseIndex;", "    public String baseComboBox = \"USD\";\n    public String baseTextField = \"0\";\n\n    public InputBox() {\n        textField = new TextField();\n        comboBox = new ComboBox<>();\n        vBox = new VBox();\n        HBox hBox = new HBox();\n        HBox hBoxLabels = new HBox();\n        label1 = new Label();\n        label2 = new Label();\n\n        counter++;\n        setId(counter);\n", "        if (counter > 2) {\n            Button deleteButton = new Button();\n            hBox.getChildren().add(deleteButton);\n\n            deleteButton.setPrefHeight(25.0);\n            deleteButton.setPrefWidth(25.0);\n            deleteButton.setStyle(\"-fx-background-color: purple; -fx-background-radius: 25;\");\n            deleteButton.setTextFill(Color.WHITE);\n            deleteButton.setText(\"-\");\n            deleteButton.setCursor(Cursor.HAND);\n            deleteButton.setOnAction(e -> handleDeleteButton());\n            HBox.setMargin(deleteButton, new Insets(0.0, 10.0, 0.0, 0.0));\n            HBox.setMargin(comboBox, new Insets(0.0, 35.0, 0.0, 0.0));\n        }\n\n\n        // Agregar los elementos al HBox\n        hBox.getChildren().add(textField);\n        hBox.getChildren().add(comboBox);\n\n        // Agregar el HBox al VBox\n        vBox.getChildren().add(hBox);\n        vBox.getChildren().add(hBoxLabels);\n\n        // Actualizar el texto del Label\n        label1.setFont(Font.font(15));\n        label1.setTextFill(Color.PURPLE);\n        label1.setWrapText(true);\n        label1.setPadding(new Insets(0.0, 0.0, 0.0, 55.0));\n        label1.setText(Utils.addSymbol(baseComboBox) + \"0\");\n        label2.setFont(Font.font(15));\n        label2.setTextFill(Color.DIMGRAY);\n        label2.setWrapText(true);\n\n        // Agregar el Label al VBox\n        hBoxLabels.getChildren().add(label1);\n        hBoxLabels.getChildren().add(label2);\n\n        hBox.setAlignment(Pos.CENTER);\n        hBox.setPadding(new Insets(20.0, 0.0, 0.0, 0.0));\n\n        textField.setFocusTraversable(false);\n        textField.setMinHeight(50.0);\n        textField.setOnKeyTyped(e -> startConversion());\n        textField.setPrefHeight(54.0);\n        textField.setPrefWidth(272.0);\n        textField.setStyle(\"-fx-focus-traversable: false;\");\n        textField.setText(\"\");\n        textField.setFont(Font.font(27));\n\n        comboBox.setId(\"currencyButton1\");\n        comboBox.setOnAction(e -> startConversion());\n        comboBox.setPrefHeight(50.0);\n        comboBox.setPrefWidth(156.0);\n        comboBox.setStyle(\"-fx-font-size: 18; -fx-background-color: #ffffff; -fx-border-color: gray;\");\n        comboBox.setVisibleRowCount(5);\n        comboBox.setValue(\"USD\");\n\n        List<String> currencies = Utils.addCurrencies();\n\n        comboBox.setCellFactory(param -> new ListCell<>() {\n            private final ImageView imageView = new ImageView();\n\n            @Override\n            protected void updateItem(String item, boolean empty) {\n                super.updateItem(item, empty);\n", "                if (empty || item == null) {\n                    setText(null);\n                    setGraphic(null);\n                } else {\n                    setText(item);\n                    String countryCode = Utils.obtenerCodigoPais(item);\n                    String imagePath = \"/img/flags/\" + countryCode + \".png\";\n                    Image flagImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(imagePath)));\n                    imageView.setImage(flagImage);\n                    setGraphic(imageView);\n                }\n            }\n        });\n\n        comboBox.setButtonCell(new ListCell<>() {\n            private final ImageView imageView = new ImageView();\n\n            @Override\n            protected void updateItem(String item, boolean empty) {\n                super.updateItem(item, empty);\n", "                if (empty || item == null) {\n                    setText(null);\n                    setGraphic(null);\n                } else {\n                    setText(item);\n                    String countryCode = Utils.obtenerCodigoPais(item);\n                    String imagePath = \"/img/flags/\" + countryCode + \".png\";\n                    Image flagImage = new Image(Objects.requireNonNull(getClass().getResourceAsStream(imagePath)));\n                    imageView.setImage(flagImage);\n                    setGraphic(imageView);\n                }\n            }\n        });\n        comboBox.getItems().addAll(currencies);\n\n        TextFormatter<String> amountFormatter = new TextFormatter<>(change -> {\n            String text = change.getControlNewText();", "            if (text.matches(\"^\\\\d*|^\\\\d+\\\\.\\\\d*\")) {\n                return change;\n            }\n            return null;\n        });\n        textField.setTextFormatter(amountFormatter);\n\n\n        //listeners\n        textField.textProperty().addListener((observable, oldValue, newValue) -> {\n            baseIndex = getId();\n            baseTextField = textField.getText();\n            addThousandSeparator();\n            inputIdInit = false;\n        });\n\n        comboBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -> {\n            baseComboBox = comboBox.getValue();\n            baseIndex = getId();\n            addThousandSeparator();\n        });\n    }\n\n    private void addThousandSeparator() {", "        if (!textField.getText().equals(\"\")) {\n            String numberString = textField.getText().replace(\",\", \"\"); // Eliminar las comas\n            double number2 = Double.parseDouble(numberString); // Convertir la cadena en un n\u00famero\n            DecimalFormat decimalFormat = new DecimalFormat(\"#,###.###\");\n            String formattedNumber = decimalFormat.format(number2);\n            label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);\n        }\n    }\n\n\n    private void handleDeleteButton() {\n        String activeInput = String.valueOf(this.getId());", "        for (Node node : MainController.getVBox().getChildren()) {\n            if (activeInput.equals(node.getId())) {\n                MainController.getVBox().getChildren().remove(node);\n                break;\n            }\n        }\n    }\n\n    public void startConversion() {\n        Platform.runLater(() -> {\n            textField.requestFocus();\n            textField.deselect();\n            textField.positionCaret(textField.getText().length());\n        });\n", "    public void startConversion() {\n        Platform.runLater(() -> {\n            textField.requestFocus();\n            textField.deselect();\n            textField.positionCaret(textField.getText().length());\n        });\n\n        if (timerTask != null) {\n            timerTask.cancel();\n        }\n        if (timer != null) {\n            timer.cancel();\n            timer.purge();\n        }\n\n        timer = new Timer();\n        timerTask = new TimerTask() {\n", "        if (timer != null) {\n            timer.cancel();\n            timer.purge();\n        }\n\n        timer = new Timer();\n        timerTask = new TimerTask() {\n\n            public void run() {\n                if (!baseTextField.equals(\"0\") && !baseTextField.equals(\"\") && !baseTextField.endsWith(\".\")) {\n                    addCorrectConversion();\n                } else {\n                    addWrongConversion();\n                }\n            }\n        };", "            public void run() {\n                if (!baseTextField.equals(\"0\") && !baseTextField.equals(\"\") && !baseTextField.endsWith(\".\")) {\n                    addCorrectConversion();\n                } else {\n                    addWrongConversion();\n                }\n            }\n        };\n        if (initialConversion) {\n            timer.schedule(timerTask, 0);\n        } else {\n            timer.schedule(timerTask, 400);\n        }\n    }\n\n    private void addCorrectConversion() {\n        inputId = baseIndex;\n        ExecutorService executorService = Executors.newFixedThreadPool(inputBoxes.size());", "        if (initialConversion) {\n            timer.schedule(timerTask, 0);\n        } else {\n            timer.schedule(timerTask, 400);\n        }\n    }\n\n    private void addCorrectConversion() {\n        inputId = baseIndex;\n        ExecutorService executorService = Executors.newFixedThreadPool(inputBoxes.size());\n        for (InputBox inputBox : inputBoxes) {", "        for (InputBox inputBox : inputBoxes) {\n            if (inputId != inputBox.getId()) {\n                ConversionTask conversionTask = new ConversionTask(inputBox, baseTextField, baseComboBox);\n                executorService.submit(conversionTask);\n            } else {\n                Platform.runLater(() -> inputBox.setLabel2(\"\"));\n            }\n        }\n        executorService.shutdown();\n    }\n\n    private void addWrongConversion() {\n        inputId = baseIndex;", "        for (InputBox inputBox : inputBoxes) {\n            if (inputId != inputBox.getId()) {\n                Platform.runLater(() -> {\n                    inputBox.setTextField(\"\");\n                    inputBox.setLabel2(\"\");\n                    inputBox.setLabel1(Utils.addSymbol(inputBox.comboBox.getValue()) + \"0\");\n                });\n            } else {\n                Platform.runLater(() -> {\n                    inputBox.setLabel1(Utils.addSymbol(inputBox.comboBox.getValue()) + \"0\");\n                    inputBox.setLabel2(\"\");\n                });\n            }\n        }\n    }\n", "    public TextField getTextField() {\n        return textField;\n    }\n\n    public void setTextField(String textField) {\n        this.textField.setText(textField);\n    }\n\n    public ComboBox<String> getComboBox() {\n        return comboBox;\n    }\n", "    public VBox getVBox() {\n        return vBox;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n    public int getId() {\n        return this.id;\n    }\n", "    public static void setBaseIndex(int baseIndex) {\n        InputBox.baseIndex = baseIndex;\n    }\n\n    public void setLabel1(String text) {\n        this.label1.setText(text);\n    }\n\n    public void setLabel2(String text) {\n        this.label2.setText(text);\n    }\n", "    public void setLabel2(String text) {\n        this.label2.setText(text);\n    }\n\n    public Label getLabel2() {\n        return label2;\n    }\n\n\n    public static int getInputId() {\n        return inputId;\n    }\n\n", "    public static int getInputId() {\n        return inputId;\n    }\n\n\n    public void setInitialConversion(boolean initialConversion) {\n        this.initialConversion = initialConversion;\n    }\n\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/model/Conversion.java", "chunked_list": ["package com.paulgutv.currencyconverter.model;\n\nimport okhttp3.*;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\n\npublic class Conversion {\n    static String currencyInput;\n    static String currencyOutput;\n    private String exchangeRate;\n", "    public String convert(String amount, String currencyInput, String currencyOutput) {\n        Conversion.currencyInput = currencyInput;\n        Conversion.currencyOutput = currencyOutput;\n\n        OkHttpClient client = new OkHttpClient().newBuilder().build();\n        String responseStr;\n        try {\n            Request request = new Request.Builder()\n                    .url(String.format(\"https://api.exchangerate.host/convert?from=%s&to=%s&amount=%s\", currencyInput, currencyOutput, amount))\n                    .build();\n            Response response = client.newCall(request).execute();\n            assert response.body() != null;\n            responseStr = response.body().string();\n\n            JSONObject json = new JSONObject(responseStr);\n            exchangeRate = String.valueOf(json.getJSONObject(\"info\").getDouble(\"rate\"));\n            return String.format(\"%.2f\",json.getDouble(\"result\"));\n        } catch (IOException e) {\n            System.out.println(\"no hay internet\");\n            Errors.noConexion();\n            return \"offline\";\n        }\n    }\n", "    public String convertOffline(String exchangeRates, String amounts) {\n        return String.format(\"%.2f\",Double.parseDouble(exchangeRates) * Double.parseDouble(amounts));\n    }\n\n    public String getExchangeRate() {\n        return exchangeRate;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/model/Update.java", "chunked_list": ["package com.paulgutv.currencyconverter.model;\n\nimport com.paulgutv.currencyconverter.App;\nimport javafx.application.Platform;\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class Update {\n    public static void checkLastVersion() {\n", "public class Update {\n    public static void checkLastVersion() {\n\n        try {\n            URL url = new URL(\"https://github.com/paulgutv/currency-converter/releases/latest\");\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setInstanceFollowRedirects(false);\n            int responseCode = connection.getResponseCode();\n\n            if (responseCode >= 300 && responseCode <= 399) {\n                String redirectUrl = connection.getHeaderField(\"Location\");\n                System.out.println(redirectUrl);\n                String afterTag = redirectUrl.substring(redirectUrl.lastIndexOf(\"/\") + 1);\n                System.out.println(afterTag);", "            if (responseCode >= 300 && responseCode <= 399) {\n                String redirectUrl = connection.getHeaderField(\"Location\");\n                System.out.println(redirectUrl);\n                String afterTag = redirectUrl.substring(redirectUrl.lastIndexOf(\"/\") + 1);\n                System.out.println(afterTag);\n                if (!afterTag.equals(App.version)){\n                    callingLauncher();\n                }\n\n            } else {\n                System.out.println(\"No se produjo ninguna redirecci\u00f3n\");\n            }\n\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private static void callingLauncher() {", "        try {\n            String rutaSegundoJar = System.getProperty(\"user.dir\") + File.separator + \"Updater.jar\";\n            String directorioActual = System.getProperty(\"user.dir\");\n            String comando = \"java -jar \" + rutaSegundoJar;\n\n            ProcessBuilder pb = new ProcessBuilder(comando.split(\" \"));\n            pb.directory(new File(directorioActual));\n            pb.start();\n            Platform.exit();\n            System.exit(0);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/model/ConversionTask.java", "chunked_list": ["package com.paulgutv.currencyconverter.model;\n\nimport javafx.application.Platform;\nimport javafx.scene.paint.Color;\n\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.time.LocalDateTime;", "import java.io.OutputStream;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Properties;\n\npublic class ConversionTask implements Runnable {\n    private final InputBox inputBox;\n    private final String baseTextField;\n    private final String baseComboBox;\n    private boolean isFound;\n", "    public static Properties properties = new Properties();\n\n    public ConversionTask(InputBox inputBox, String baseTextField, String baseComboBox) {\n        this.inputBox = inputBox;\n        this.baseTextField = baseTextField;\n        this.baseComboBox = baseComboBox;\n\n\n        //Importar propiedades guardadas\n        try {\n            FileInputStream fis = new FileInputStream(\"app.properties\");\n            properties.load(fis);\n            fis.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override", "        try {\n            FileInputStream fis = new FileInputStream(\"app.properties\");\n            properties.load(fis);\n            fis.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        Conversion conversion = new Conversion();\n        String result = conversion.convert(baseTextField, baseComboBox, inputBox.getComboBox().getValue());\n        String exchangeRate = conversion.getExchangeRate();\n\n        //Agregar etiqueta con tipo de cambio", "    public void run() {\n        Conversion conversion = new Conversion();\n        String result = conversion.convert(baseTextField, baseComboBox, inputBox.getComboBox().getValue());\n        String exchangeRate = conversion.getExchangeRate();\n\n        //Agregar etiqueta con tipo de cambio\n        if (!result.equals(\"offline\")) {\n            //Guardar propiedades\n            properties.setProperty(baseComboBox + \"->\" +inputBox.getComboBox().getValue(), exchangeRate + \",\" + LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\")));\n            try (OutputStream outputStream = new FileOutputStream(\"app.properties\")) {\n                properties.store(outputStream, \"Application Properties\");\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n\n            Platform.runLater(() -> {\n                    inputBox.setTextField(result);\n                    inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRate);\n                }\n            );\n        } else {\n            Platform.runLater(() -> {\n                properties.forEach((key, value) -> {", "                    if (key.toString().startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {\n                        int commaIndex = value.toString().indexOf(\",\");\n                        String exchangeRateOffline = value.toString().substring(0, commaIndex);\n                        String date = value.toString().substring(commaIndex + 1);\n                        String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);\n\n                        inputBox.setTextField(resultOffline);\n                        inputBox.getLabel2().setTextFill(Color.RED);\n                        inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");\n                        isFound = true;\n                    }});", "                if (!isFound) {\n                        inputBox.setTextField(\"\");\n                        inputBox.getLabel2().setTextFill(Color.RED);\n                        inputBox.setLabel2(\" | No hay datos guardados \u26a0\");\n                }\n            });\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/paulgutv/currencyconverter/controller/MainController.java", "chunked_list": ["package com.paulgutv.currencyconverter.controller;\n\nimport com.paulgutv.currencyconverter.model.InputBox;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.layout.VBox;\n\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.ResourceBundle;\n\n\npublic class MainController implements Initializable {\n\n    @FXML\n    public VBox container;\n    @FXML\n    public static VBox mainContainer;\n    private static final VBox subContainer = new VBox();\n    private static List<InputBox> inputBoxes;\n    private int counter = 0;\n\n\n    @Override", "    public VBox container;\n    @FXML\n    public static VBox mainContainer;\n    private static final VBox subContainer = new VBox();\n    private static List<InputBox> inputBoxes;\n    private int counter = 0;\n\n\n    @Override\n    public void initialize(URL url, ResourceBundle resourceBundle) {\n\n\n        container.getChildren().add(subContainer);\n        inputBoxes = new ArrayList<>();\n\n        //Crear la primera instancia de InputBox con el valor de ComboBox \"USD\"\n        counter++;\n        InputBox inputBox1 = new InputBox();\n        inputBox1.setId(counter);\n        inputBox1.getComboBox().setValue(\"USD\");\n        inputBox1.getTextField().setText(\"1\");\n        inputBoxes.add(inputBox1);\n        subContainer.getChildren().add(inputBox1.getVBox());\n\n        // Crear la segunda instancia de InputBox con el valor de ComboBox \"PEN\"\n        counter++;\n        InputBox inputBox2 = new InputBox();\n        inputBox2.setId(counter);\n        inputBox2.getComboBox().setValue(\"PEN\");\n        inputBoxes.add(inputBox2);\n        subContainer.getChildren().add(inputBox2.getVBox());\n\n        // Realizar la conversi\u00f3n inicial\n        inputBox1.setInitialConversion(true);\n        inputBox1.startConversion();\n        inputBox1.setInitialConversion(false);\n        InputBox.setBaseIndex(1);\n    }\n\n    @FXML\n    protected void addButton1() {\n        InputBox newComponent = new InputBox();\n        counter++;\n        newComponent.setId(counter);\n        newComponent.getVBox().setId(String.valueOf(counter));\n        inputBoxes.add(newComponent);\n        subContainer.getChildren().add(newComponent.getVBox());\n    }\n", "    public void initialize(URL url, ResourceBundle resourceBundle) {\n\n\n        container.getChildren().add(subContainer);\n        inputBoxes = new ArrayList<>();\n\n        //Crear la primera instancia de InputBox con el valor de ComboBox \"USD\"\n        counter++;\n        InputBox inputBox1 = new InputBox();\n        inputBox1.setId(counter);\n        inputBox1.getComboBox().setValue(\"USD\");\n        inputBox1.getTextField().setText(\"1\");\n        inputBoxes.add(inputBox1);\n        subContainer.getChildren().add(inputBox1.getVBox());\n\n        // Crear la segunda instancia de InputBox con el valor de ComboBox \"PEN\"\n        counter++;\n        InputBox inputBox2 = new InputBox();\n        inputBox2.setId(counter);\n        inputBox2.getComboBox().setValue(\"PEN\");\n        inputBoxes.add(inputBox2);\n        subContainer.getChildren().add(inputBox2.getVBox());\n\n        // Realizar la conversi\u00f3n inicial\n        inputBox1.setInitialConversion(true);\n        inputBox1.startConversion();\n        inputBox1.setInitialConversion(false);\n        InputBox.setBaseIndex(1);\n    }\n\n    @FXML\n    protected void addButton1() {\n        InputBox newComponent = new InputBox();\n        counter++;\n        newComponent.setId(counter);\n        newComponent.getVBox().setId(String.valueOf(counter));\n        inputBoxes.add(newComponent);\n        subContainer.getChildren().add(newComponent.getVBox());\n    }\n", "    public static List<InputBox> getInputBoxes() {\n        return inputBoxes;\n    }\n\n    public static VBox getVBox() {\n        return subContainer;\n    }\n}\n"]}
