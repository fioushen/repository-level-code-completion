{"filename": "src/main/java/dev/george/performance/JavaNativePerformanceTest.java", "chunked_list": ["package dev.george.performance;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.JsonObject;\nimport dev.george.performance.report.ParsedReport;\nimport dev.george.performance.report.PerformanceReport;\nimport dev.george.performance.result.PerformanceResults;\nimport dev.george.performance.tests.PerformanceTest;\nimport dev.george.performance.tests.impl.*;", "import dev.george.performance.tests.PerformanceTest;\nimport dev.george.performance.tests.impl.*;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.text.NumberFormat;\nimport java.util.*;", "import java.text.NumberFormat;\nimport java.util.*;\nimport java.util.function.Function;\n\npublic class JavaNativePerformanceTest {\n\n    private final List<PerformanceTest> performanceTests = Arrays.asList(\n            new AdditionTest(),\n            new ArrayTest(),\n            new DirectoryTest(),\n            new DivisionTest(),\n            new ExceptionTest(),\n            new FileReadTest(),\n            new FileWriteTest(),\n            new GetStaticTest(),\n            new InvokeDynamicTest(),\n            new InvokeSpecialTest(),\n            new InvokeStaticTest(),\n            new IOTest(),\n            new MultiplicationTest(),\n            new PutStaticTest(),\n            new RandomTest(),\n            new ReflectionTest(),\n            new SubtractionTest()\n    );\n", "    public void start() {\n        Path outputDirectory = Paths.get(\"reports\" + File.separator);\n        Gson gson = new GsonBuilder()\n                .setPrettyPrinting()\n                .create();\n\n        if (!outputDirectory.toFile().isDirectory()) {\n            outputDirectory.toFile().mkdir();\n        }\n\n        File[] files = Objects.requireNonNull(outputDirectory.toFile().listFiles());\n", "        if (files.length >= 2) {\n            if (Arrays.stream(files).anyMatch(file -> file.getName().startsWith(\"report-native\"))) {\n                List<ParsedReport> reports = Arrays.asList(\n                        new ParsedReport(gson, Paths.get(files[0].getAbsolutePath())),\n                        new ParsedReport(gson, Paths.get(files[1].getAbsolutePath()))\n                );\n\n                performanceTests.forEach(test -> {\n                    Comparator<ParsedReport> averageComparator = Comparator.comparingDouble(\n                            parsedReport -> parsedReport.getAverages().get(test.getTestName()));\n\n                    Optional<ParsedReport> slowerOptional = reports.stream().max(averageComparator);\n                    Optional<ParsedReport> fasterOptional = reports.stream().min(averageComparator);\n\n                    Function<ParsedReport, Double> reportToAverage = (report) -> report.getAverages().get(test.getTestName());\n", "                    if (!slowerOptional.isPresent() || !fasterOptional.isPresent()) {\n                        throw new RuntimeException(\"An unexpected error occurred while attempting to compare test\" +\n                                \"results for \" + test.getTestName() + \"!\");\n                    }\n\n                    double slower = reportToAverage.apply(slowerOptional.get());\n                    double faster = reportToAverage.apply(fasterOptional.get());\n\n                    double ratio = slower / faster;\n\n                    System.out.printf(\"%s is faster by %s%% for %s!%n\",\n                            fasterOptional.get().isNative() ? \"Native\" : \"Non native\",\n                            NumberFormat.getInstance().format((ratio * 100)),\n                            test.getTestName()\n                    );\n                });\n            }\n\n            return;\n\n        }\n        System.out.println(\"Beginning performance tests...\");\n\n        PerformanceReport report = new PerformanceReport();\n\n        performanceTests.forEach(test -> {\n            long startTime = System.currentTimeMillis();\n\n            PerformanceResults results = new PerformanceResults(test);\n            long timeElapsed = System.currentTimeMillis() - startTime;\n\n            System.out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");\n\n            report.add(test, results);\n        });\n\n        Path outputFile = Paths.get(outputDirectory.toFile() + File.separator + \"report-\" + System.currentTimeMillis() + \".json\");\n", "        try {\n            Files.write(outputFile, gson.toJson(report.getResults()).getBytes());\n        } catch (IOException exc) {\n            exc.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        new JavaNativePerformanceTest().start();\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/report/PerformanceReport.java", "chunked_list": ["package dev.george.performance.report;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\nimport dev.george.performance.result.PerformanceResults;\nimport dev.george.performance.tests.PerformanceTest;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class PerformanceReport {\n\n    private final Map<String, PerformanceResults> results = new HashMap<>();\n", "import java.util.Map;\n\npublic class PerformanceReport {\n\n    private final Map<String, PerformanceResults> results = new HashMap<>();\n\n    public void add(PerformanceTest test, PerformanceResults result) {\n        results.put(test.getTestName(), result);\n    }\n\n    public JsonObject getResults() {\n        JsonObject object = new JsonObject();\n\n        object.addProperty(\"memory_allocated\", Runtime.getRuntime().maxMemory());\n        object.addProperty(\"memory_in_use\", Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());\n\n        JsonArray resultsArray = new JsonArray();\n\n        results.forEach((name, performanceResults) -> {\n            JsonObject resultsObject = new JsonObject();\n\n            resultsObject.addProperty(\"name\", name);\n\n            resultsObject.addProperty(\"min\", performanceResults.getMin());\n            resultsObject.addProperty(\"max\", performanceResults.getMax());\n            resultsObject.addProperty(\"average\", performanceResults.getAverage());\n\n            resultsArray.add(resultsObject);\n        });\n\n        object.add(\"results\", resultsArray);\n\n        return object;\n    }\n}\n", "    public JsonObject getResults() {\n        JsonObject object = new JsonObject();\n\n        object.addProperty(\"memory_allocated\", Runtime.getRuntime().maxMemory());\n        object.addProperty(\"memory_in_use\", Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory());\n\n        JsonArray resultsArray = new JsonArray();\n\n        results.forEach((name, performanceResults) -> {\n            JsonObject resultsObject = new JsonObject();\n\n            resultsObject.addProperty(\"name\", name);\n\n            resultsObject.addProperty(\"min\", performanceResults.getMin());\n            resultsObject.addProperty(\"max\", performanceResults.getMax());\n            resultsObject.addProperty(\"average\", performanceResults.getAverage());\n\n            resultsArray.add(resultsObject);\n        });\n\n        object.add(\"results\", resultsArray);\n\n        return object;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/report/ParsedReport.java", "chunked_list": ["package dev.george.performance.report;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\nimport lombok.Getter;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.HashMap;", "import java.nio.file.Path;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Getter\npublic class ParsedReport {\n\n    private final Map<String, Double> averages = new HashMap<>();\n\n    private final boolean isNative;\n\n    private final double memoryRatio;\n\n    public ParsedReport(Gson gson, Path path) {\n        JsonObject object = null;\n", "        try {\n            object = gson.fromJson(new String(Files.readAllBytes(path)), JsonObject.class);\n        } catch (IOException exc) {\n            exc.printStackTrace();\n\n            throw new RuntimeException(\"An unexpected error occurred while parsing report \" + path.toFile().getAbsolutePath() + \"!\");\n        }\n\n        object.get(\"results\").getAsJsonArray().forEach(result -> {\n            JsonObject resultObject = result.getAsJsonObject();\n\n            averages.put(resultObject.get(\"name\").getAsString(), resultObject.get(\"average\").getAsDouble());\n        });\n        \n        this.memoryRatio = object.get(\"memory_allocated\").getAsDouble() /\n                object.get(\"memory_in_use\").getAsDouble();\n\n        this.isNative = path.toFile().getName().startsWith(\"report-native\");\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/result/PerformanceResults.java", "chunked_list": ["package dev.george.performance.result;\n\nimport dev.george.performance.tests.PerformanceTest;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PerformanceResults {\n\n    private final List<Long> durations = new ArrayList<>();\n\n    public PerformanceResults(PerformanceTest test) {\n        test.preTest();\n", "        for (int i = 0; i < test.getIterations(); i++) {\n            durations.add(test.start(i));\n        }\n\n        test.cleanup();\n    }\n\n    public long getMin() {\n        return durations.stream()\n                .mapToLong(value -> value)\n                .min()\n                .getAsLong();\n    }\n", "    public long getMax() {\n        return durations.stream()\n                .mapToLong(value -> value)\n                .max()\n                .getAsLong();\n    }\n\n    public double getAverage() {\n        return durations.stream()\n                .mapToLong(value -> value)\n                .average()\n                .getAsDouble();\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/PerformanceTest.java", "chunked_list": ["package dev.george.performance.tests;\n\npublic abstract class PerformanceTest {\n\n    protected static final int RANDOM_NUMBER = 5;\n\n    public abstract void handle(int iteration);\n\n    public abstract int getIterations();\n\n    public abstract String getTestName();\n", "    public abstract int getIterations();\n\n    public abstract String getTestName();\n\n    public void preTest() {}\n\n    public void cleanup() {}\n\n    public long start(int iteration) {\n        long nanoTime = System.nanoTime();\n\n        handle(iteration);\n\n        return System.nanoTime() - nanoTime;\n    }\n}\n", "    public long start(int iteration) {\n        long nanoTime = System.nanoTime();\n\n        handle(iteration);\n\n        return System.nanoTime() - nanoTime;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/ArrayTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class ArrayTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        int[] array = new int[iteration + 1];\n\n        for (int i = 0; i <  iteration; i++) {\n            array[i] = RANDOM_NUMBER;\n        }\n    }\n\n    @Override", "        for (int i = 0; i <  iteration; i++) {\n            array[i] = RANDOM_NUMBER;\n        }\n    }\n\n    @Override\n    public String getTestName() {\n        return \"array\";\n    }\n\n    @Override", "    public int getIterations() {\n        return 2000;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/InvokeSpecialTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class InvokeSpecialTest extends PerformanceTest {\n\n    private static class InvokeSpecialTestExample {\n\n    }\n\n    @Override", "    public String getTestName() {\n        return \"invoke_special\";\n    }\n\n    @Override\n    public void handle(int iteration) {\n        new InvokeSpecialTestExample();\n    }\n\n    @Override\n    public int getIterations() {\n        return 2500;\n    }\n}\n", "    public int getIterations() {\n        return 2500;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/SubtractionTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class SubtractionTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        int result = iteration - RANDOM_NUMBER;\n    }\n\n    @Override", "    public String getTestName() {\n        return \"subtraction\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 1000;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/ExceptionTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\nimport java.io.IOException;\n\npublic class ExceptionTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        try {\n            throw new IOException();\n        } catch (IOException exc) {\n\n        }\n    }\n\n    @Override", "    public void handle(int iteration) {\n        try {\n            throw new IOException();\n        } catch (IOException exc) {\n\n        }\n    }\n\n    @Override\n    public String getTestName() {\n        return \"exception\";\n    }\n\n    @Override", "    public String getTestName() {\n        return \"exception\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 1500;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/InvokeDynamicTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class InvokeDynamicTest extends PerformanceTest {\n\n    /*\n     * Since Lambda functions are implemented with\n     * invokedynamics, we're able to create a simple\n     * Runnable and execute it in order to measure its\n     * performance impact.\n     */\n    @Override", "    public void handle(int iteration) {\n        Runnable runnable = () -> {\n            int a = 5 + 10;\n        };\n\n        runnable.run();\n    }\n\n    @Override\n    public String getTestName() {\n        return \"invoke_dynamic\";\n    }\n\n    @Override", "    public String getTestName() {\n        return \"invoke_dynamic\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 3000;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/IOTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class IOTest extends PerformanceTest {\n\n    @Override", "public class IOTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        Path path = Paths.get(\"performance-test.tmp\");\n\n        if (path.toFile().exists()) {\n            throw new IllegalStateException(\"File already exists!\");\n        }\n\n        try {\n            path.toFile().createNewFile();\n        } catch (IOException exc) {\n            exc.printStackTrace();\n        }\n\n        path.toFile().delete();\n    }\n\n    @Override", "        try {\n            path.toFile().createNewFile();\n        } catch (IOException exc) {\n            exc.printStackTrace();\n        }\n\n        path.toFile().delete();\n    }\n\n    @Override\n    public String getTestName() {\n        return \"io_test\";\n    }\n\n    @Override", "    public String getTestName() {\n        return \"io_test\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 50;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/FileWriteTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\nimport lombok.SneakyThrows;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;", "import java.nio.file.Paths;\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class FileWriteTest extends PerformanceTest {\n\n    private final byte[] randomBytes = new byte[512];\n    private File directory;\n\n    @Override", "    public void preTest() {\n        for (int i = 0; i < randomBytes.length; i++) {\n            randomBytes[i] = (byte) ThreadLocalRandom.current().nextInt(Byte.MIN_VALUE, Byte.MAX_VALUE);\n        }\n\n        directory = new File(\"temp\" + File.separator);\n        directory.mkdir();\n    }\n\n    @SneakyThrows\n    @Override", "    public void handle(int iteration) {\n        Path path = Paths.get(directory.getPath() + File.separator + iteration);\n        Files.write(path, randomBytes);\n    }\n\n    public void cleanup() {\n        Arrays.stream(Objects.requireNonNull(directory.listFiles())).forEach(File::delete);\n        directory.delete();\n    }\n\n    @Override", "    public int getIterations() {\n        return 128;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"file_write\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/DirectoryTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\nimport java.io.File;\n\npublic class DirectoryTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        File directory = new File(iteration + File.separator);\n\n        directory.mkdir();\n\n        directory.delete();\n    }\n\n    @Override", "    public void handle(int iteration) {\n        File directory = new File(iteration + File.separator);\n\n        directory.mkdir();\n\n        directory.delete();\n    }\n\n    @Override\n    public int getIterations() {\n        return 60;\n    }\n\n    @Override", "    public int getIterations() {\n        return 60;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"directory\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/DivisionTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class DivisionTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        int result = (iteration + 1000) / RANDOM_NUMBER;\n    }\n\n    @Override", "    public String getTestName() {\n        return \"division\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 1000;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/GetStaticTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class GetStaticTest extends PerformanceTest {\n\n    private static final int TEST = 5;\n\n    @Override\n    public void handle(int iteration) {\n        int a = TEST;\n    }\n\n    @Override", "    public void handle(int iteration) {\n        int a = TEST;\n    }\n\n    @Override\n    public int getIterations() {\n        return 1000;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"get_static\";\n    }\n}\n", "    public String getTestName() {\n        return \"get_static\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/RandomTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class RandomTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        double number = Math.random();\n    }\n\n    @Override", "    public int getIterations() {\n        return 1800;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"random\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/MultiplicationTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class MultiplicationTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        int result = (iteration + 1000) + RANDOM_NUMBER;\n    }\n\n    @Override", "    public String getTestName() {\n        return \"multiplication\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 1000;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/InvokeStaticTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class InvokeStaticTest extends PerformanceTest {\n\n    private static int testInvokeStatic(int iteration) {\n        return iteration + 1;\n    }\n\n    @Override", "    public void handle(int iteration) {\n        int result = testInvokeStatic(iteration);\n    }\n\n    @Override\n    public String getTestName() {\n        return \"invoke_static\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 800;\n    }\n}\n", "    public int getIterations() {\n        return 800;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/ReflectionTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\n\npublic class ReflectionTest extends PerformanceTest {\n\n    @Override", "public class ReflectionTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        try {\n            Class<?> clazz = Class.forName(\"dev.george.performance.reflection.ReflectionExample\");\n            Constructor<?> constructor = clazz.getDeclaredConstructor();\n\n            Field publicStaticField = clazz.getField(\"EXAMPLE_PUBLIC_STATIC_FIELD\");\n            Field privateStaticField = clazz.getDeclaredField(\"EXAMPLE_PRIVATE_STATIC_FIELD\");\n\n            Field publicField = clazz.getField(\"examplePublicField\");\n            Field privateField = clazz.getDeclaredField(\"examplePrivateField\");\n\n            Method publicStaticMethod = clazz.getMethod(\"examplePublicStaticMethod\");\n            Method privateStaticMethod = clazz.getDeclaredMethod(\"examplePrivateStaticMethod\");\n\n            Method publicMethod = clazz.getMethod(\"examplePublicMethod\");\n            Method privateMethod = clazz.getDeclaredMethod(\"examplePrivateMethod\");\n\n            constructor.setAccessible(true);\n\n            privateStaticField.setAccessible(true);\n            privateStaticMethod.setAccessible(true);\n\n            privateField.setAccessible(true);\n            privateMethod.setAccessible(true);\n\n            Object instance = constructor.newInstance();\n\n            int publicStaticFieldResult = publicStaticField.getInt(null);\n            int privateStaticFieldResult = privateStaticField.getInt(null);\n\n            int publicStaticMethodResult = (int) publicStaticMethod.invoke(null);\n            int privateStaticMethodResult = (int) privateStaticMethod.invoke(null);\n\n            int publicFieldResult = publicField.getInt(instance);\n            int privateFieldResult = privateField.getInt(instance);\n\n            int publicMethodResult = (int) publicMethod.invoke(instance);\n            int privateMethodResult = (int) privateMethod.invoke(instance);\n        } catch (Exception exc) {\n            exc.printStackTrace();\n        }\n    }\n\n    @Override", "    public int getIterations() {\n        return 750;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"reflection\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/FileReadTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\nimport lombok.SneakyThrows;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class FileReadTest extends PerformanceTest {\n\n    private final Path tempPath = Paths.get(\"read\");\n\n    @SneakyThrows\n    @Override", "import java.util.concurrent.ThreadLocalRandom;\n\npublic class FileReadTest extends PerformanceTest {\n\n    private final Path tempPath = Paths.get(\"read\");\n\n    @SneakyThrows\n    @Override\n    public void preTest() {\n        byte[] randomBytes = new byte[512];\n", "    public void preTest() {\n        byte[] randomBytes = new byte[512];\n\n        for (int i =0 ; i < randomBytes.length; i++) {\n            randomBytes[i] = (byte) ThreadLocalRandom.current().nextInt(Byte.MIN_VALUE, Byte.MAX_VALUE);\n        }\n\n        tempPath.toFile().createNewFile();\n        Files.write(tempPath, randomBytes);\n    }\n\n    @SneakyThrows\n    @Override", "    public void handle(int iteration) {\n        Files.readAllBytes(tempPath);\n    }\n\n    @Override\n    public void cleanup() {\n        tempPath.toFile().delete();\n    }\n\n    @Override\n    public int getIterations() {\n        return 128;\n    }\n\n    @Override", "    public int getIterations() {\n        return 128;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"file_read\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/PutStaticTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class PutStaticTest extends PerformanceTest {\n\n    private static int TEST = -1;\n\n    @Override\n    public void handle(int iteration) {\n        TEST = iteration;\n    }\n\n    @Override", "    public void handle(int iteration) {\n        TEST = iteration;\n    }\n\n    @Override\n    public int getIterations() {\n        return 1000;\n    }\n\n    @Override\n    public String getTestName() {\n        return \"put_static\";\n    }\n}\n", "    public String getTestName() {\n        return \"put_static\";\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/tests/impl/AdditionTest.java", "chunked_list": ["package dev.george.performance.tests.impl;\n\nimport dev.george.performance.tests.PerformanceTest;\n\npublic class AdditionTest extends PerformanceTest {\n\n    @Override\n    public void handle(int iteration) {\n        int result = iteration + RANDOM_NUMBER;\n    }\n\n    @Override", "    public String getTestName() {\n        return \"addition\";\n    }\n\n    @Override\n    public int getIterations() {\n        return 1000;\n    }\n}\n"]}
{"filename": "src/main/java/dev/george/performance/reflection/ReflectionExample.java", "chunked_list": ["package dev.george.performance.reflection;\n\npublic class ReflectionExample {\n\n    public static final int EXAMPLE_PUBLIC_STATIC_FIELD = 0;\n    private static final int EXAMPLE_PRIVATE_STATIC_FIELD = 1;\n\n    public int examplePublicField = 0;\n    private int examplePrivateField = 1;\n\n    private ReflectionExample() {}\n", "    public int examplePublicMethod() {\n        return 0;\n    }\n\n    private int examplePrivateMethod() {\n        return 1;\n    }\n\n    public static int examplePublicStaticMethod() {\n        return 0;\n    }\n\n    private static int examplePrivateStaticMethod() {\n        return 1;\n    }\n}\n", "    public static int examplePublicStaticMethod() {\n        return 0;\n    }\n\n    private static int examplePrivateStaticMethod() {\n        return 1;\n    }\n}\n"]}
