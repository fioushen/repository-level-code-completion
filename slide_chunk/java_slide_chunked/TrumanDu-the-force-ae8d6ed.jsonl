{"filename": "simple-httpd/src/main/java/top/trumandu/v3/SimpleHttpV3.java", "chunked_list": ["package top.trumandu.v3;\n\nimport top.trumandu.common.ContextType;\nimport top.trumandu.common.Headers;\nimport top.trumandu.common.HttpRequest;\nimport top.trumandu.common.HttpResponse;\nimport top.trumandu.util.ResourcesFileUtil;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;", "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;", "import java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/24\n * @description", " * @date 2023/03/24\n * @description\n */\npublic class SimpleHttpV3 {\n\n    public void start(int port) throws IOException {\n        ServerSocketChannel ssc = ServerSocketChannel.open();\n        ssc.bind(new InetSocketAddress(port));\n        ssc.configureBlocking(false);\n        System.out.println(\"Simple http server started on port \" + port);\n\n        Selector selector = Selector.open();\n        ssc.register(selector, SelectionKey.OP_ACCEPT);", "        while (true) {\n            int readNum = selector.select();\n            if (readNum == 0) {\n                continue;\n            }\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = selectionKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey selectionKey = iterator.next();\n                iterator.remove();\n                //\u5904\u7406\u8fde\u63a5\u5c31\u7eea\u4e8b\u4ef6", "                if (selectionKey.isAcceptable()) {\n                    ServerSocketChannel channel = (ServerSocketChannel) selectionKey.channel();\n                    SocketChannel socketChannel = channel.accept();\n                    socketChannel.configureBlocking(false);\n                    socketChannel.register(selector, SelectionKey.OP_READ);\n                } else if (selectionKey.isReadable()) {\n                    handleRequest(selectionKey);\n                    // \u6ce8\u518c\u4e00\u4e2a\u5199\u4e8b\u4ef6\uff0c\u7528\u6765\u7ed9\u5ba2\u6237\u7aef\u8fd4\u56de\u4fe1\u606f\n                    selectionKey.interestOps(SelectionKey.OP_WRITE);\n                } else if (selectionKey.isWritable()) {\n                    handleResponse(selectionKey);\n                }\n            }\n        }\n    }\n\n    private void handleRequest(SelectionKey selectionKey) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        socketChannel.read(buffer);\n        byte[] requestBytes = buffer.array();\n        int readBytes;", "                } else if (selectionKey.isWritable()) {\n                    handleResponse(selectionKey);\n                }\n            }\n        }\n    }\n\n    private void handleRequest(SelectionKey selectionKey) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) selectionKey.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        socketChannel.read(buffer);\n        byte[] requestBytes = buffer.array();\n        int readBytes;", "        while ((readBytes = socketChannel.read(buffer)) != 0) {\n            if (readBytes == -1) {\n                // \u5982\u679c\u8bfb\u5230\u4e86\u6d41\u7684\u672b\u5c3e\uff0c\u5219\u8868\u793a\u8fde\u63a5\u5df2\u7ecf\u65ad\u5f00\n                break;\n            }\n            // \u5982\u679c\u8bfb\u53d6\u5230\u6570\u636e\uff0c\u5219\u5207\u6362\u5230\u5199\u6a21\u5f0f\u5e76\u5904\u7406\u6570\u636e\n            buffer.flip();\n            int size = buffer.array().length;\n            byte[] temp = new byte[requestBytes.length + size];\n            System.arraycopy(requestBytes, 0, temp, 0, requestBytes.length);\n            System.arraycopy(buffer.array(), 0, temp, requestBytes.length, size);\n            requestBytes = temp;\n            buffer.clear();\n        }\n        String context = new String(requestBytes);\n\n        String[] lines = context.split(\"\\r\\n\");\n        String firstLine = null;\n        List<String> rawHeaders = new ArrayList<>(64);", "        for (int i = 0; i < lines.length; i++) {\n            String line = lines[i];\n            if (i == 0) {\n                firstLine = line;\n            } else {\n                rawHeaders.add(line);\n            }\n        }\n        if (firstLine == null) {\n            return;\n        }\n\n        String[] array = firstLine.split(\" \", 3);\n        HttpRequest httpRequest = new HttpRequest(array[0], array[1], array[2]);\n        httpRequest.setHeaders(rawHeaders);\n        selectionKey.attach(httpRequest);\n    }\n\n    private void handleResponse(SelectionKey selectionKey) throws IOException {\n        SocketChannel channel = (SocketChannel) selectionKey.channel();\n        HttpRequest request = (HttpRequest) selectionKey.attachment();\n        String path = request.getPath();\n        HttpResponse response;", "        if (firstLine == null) {\n            return;\n        }\n\n        String[] array = firstLine.split(\" \", 3);\n        HttpRequest httpRequest = new HttpRequest(array[0], array[1], array[2]);\n        httpRequest.setHeaders(rawHeaders);\n        selectionKey.attach(httpRequest);\n    }\n\n    private void handleResponse(SelectionKey selectionKey) throws IOException {\n        SocketChannel channel = (SocketChannel) selectionKey.channel();\n        HttpRequest request = (HttpRequest) selectionKey.attachment();\n        String path = request.getPath();\n        HttpResponse response;", "        try {\n            if (\"/\".equalsIgnoreCase(path) || path.length() == 0) {\n                path = \"/index.html\";\n            } else if (path.indexOf(\".\") < 0) {\n                path = path + \".html\";\n            }\n            boolean flag = ResourcesFileUtil.isExistFile(path);\n            if (!flag) {\n                path = request.getPath() + \"/index.html\";\n                flag = ResourcesFileUtil.isExistFile(path);\n            }", "            if (!flag) {\n                response = handle404();\n            } else {\n                response = handleOk(path);\n            }\n        } catch (Exception e) {\n            response = handle5xx();\n        }\n        channel.write(ByteBuffer.wrap(response.getFirstLine()));\n        channel.write(ByteBuffer.wrap(response.getHeaders().toString().getBytes()));\n        channel.write(ByteBuffer.wrap(\"\\r\\n\".getBytes()));\n        channel.write(ByteBuffer.wrap(response.getBody()));\n        channel.close();\n    }\n\n    private HttpResponse handleOk(String path) throws IOException {\n\n        String suffix = \"html\";", "        if (path.lastIndexOf(\".\") > 0) {\n            suffix = path.substring(path.lastIndexOf(\".\") + 1, path.length());\n        }\n        byte[] body = ResourcesFileUtil.getResource(path);\n        HttpResponse response = new HttpResponse(200, body);\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(suffix));\n        headers.addHeader(\"Content-Length\", \"\" + body.length);\n        response.setHeaders(headers);\n        return response;\n    }\n\n    private HttpResponse handle404() throws IOException {\n        String body = \"Page not fond!\";\n        HttpResponse response = new HttpResponse(404, body.getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(\"html\"));\n        headers.addHeader(\"Content-Length\", body.getBytes().length + \"\");\n        headers.addHeader(\"Connection\", \"Close\");\n        response.setHeaders(headers);\n        return response;\n    }\n\n    private HttpResponse handle5xx() throws IOException {\n        String body = \"Internal Server Error!\";\n        HttpResponse response = new HttpResponse(500, body.getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(\"html\"));\n        headers.addHeader(\"Content-Length\", body.getBytes().length + \"\");\n        headers.addHeader(\"Connection\", \"Close\");\n        response.setHeaders(headers);\n        return response;\n    }\n\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n\n    private void log(HttpRequest request) {\n        String log = String.format(\"%s INFO %s %s %s\", formatter.format(LocalDateTime.now()),\n                request.getMethod(), request.getPath(), request.getHeaders().getHeader(\"User-Agent\"));\n        System.out.println(log);\n    }\n", "    public static void main(String[] args) throws IOException {\n        int port = 8080;\n        new SimpleHttpV3().start(port);\n    }\n\n\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/v1/SimpleHttp.java", "chunked_list": ["package top.trumandu.v1;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**", "\n/**\n * @author Truman.P.Du\n * @date 2023/03/24\n * @description\n */\npublic class SimpleHttp {\n    private static int port;\n    public static void main(String[] args) throws IOException {\n        int port = 8080;\n        ServerSocket ss = new ServerSocket(port);\n        System.out.println(\"Simple http server started on port \" + port);\n", "    public static void main(String[] args) throws IOException {\n        int port = 8080;\n        ServerSocket ss = new ServerSocket(port);\n        System.out.println(\"Simple http server started on port \" + port);\n\n        while (true) {\n            Socket socket = ss.accept();\n            System.out.println(\"New client connected\");\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String line;", "            while ((line = in.readLine()) != null) {\n                if (line.isEmpty()) {\n                    break;\n                }\n                System.out.println(line);\n            }\n            String response = \"\"\"\n                    HTTP/1.1 200 OK\n\n                    Hello, World!\n                    \"\"\";\n            OutputStream outputStream = socket.getOutputStream();\n            outputStream.write(response.getBytes());\n            outputStream.flush();\n            outputStream.close();\n        }\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/common/HttpRequest.java", "chunked_list": ["package top.trumandu.common;\n\nimport java.util.List;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/24\n * @description\n */\npublic class HttpRequest {\n    private String path;\n    private String version;\n    private HttpMethod method;\n    private Headers headers;\n\n    public HttpRequest(String method, String path, String version) {\n        this.method = HttpMethod.getEnum(method);\n        this.path = path;\n        this.version = version;\n    }\n", " */\npublic class HttpRequest {\n    private String path;\n    private String version;\n    private HttpMethod method;\n    private Headers headers;\n\n    public HttpRequest(String method, String path, String version) {\n        this.method = HttpMethod.getEnum(method);\n        this.path = path;\n        this.version = version;\n    }\n", "    public Headers getHeaders() {\n        return headers;\n    }\n\n    public void setHeaders(List<String> rawHeaders) {\n        this.headers = new Headers(rawHeaders);\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n", "    public String getPath() {\n        return path;\n    }\n\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n", "    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public HttpMethod getMethod() {\n        return method;\n    }\n\n    @Override\n    public String toString() {\n        return method + \" \" + path + \" \" + version +\"\\n\\r\"+headers;\n    }\n}\n", "    public String toString() {\n        return method + \" \" + path + \" \" + version +\"\\n\\r\"+headers;\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/common/HttpStatus.java", "chunked_list": ["package top.trumandu.common;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/25\n * @description\n */\npublic enum HttpStatus {\n    /**\n     *\n     */\n    OK(200, \"OK\"), NOT_FOUND(404, \"Not Found.\"), INTERNAL_SERVER_ERROR(500, \"Internal Server Error\");\n    /**\n     *\n     */\n    private int code;\n    private String context;\n", "    public int getCode() {\n        return code;\n    }\n\n    public String getContext() {\n        return context;\n    }\n\n    HttpStatus(int code, String context) {\n        this.code = code;\n        this.context = context;\n    }\n", "    public static HttpStatus getEnum(int code) {\n        HttpStatus[] values = HttpStatus.values();\n        for (HttpStatus value : values) {\n            if (value.code == code) {\n                return value;\n            }\n        }\n\n        return null;\n    }\n\n    @Override", "    public String toString() {\n        return code + \" \" + context;\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/common/ContextType.java", "chunked_list": ["package top.trumandu.common;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/25\n * @description\n */\npublic class ContextType {\n    public static String getContextType(String suffix) {\n        assert suffix != null;\n        switch (suffix.toLowerCase()) {\n            case \"html\":\n                return \"text/html; charset=utf-8\";\n            case \"css\":\n                return \"text/css; charset=utf-8\";\n            case \"js\":\n                return \"text/javascript; charset=utf-8\";\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"ico\":\n                return \"image/x-icon\";\n            case \"json\":\n                return \"application/json; charset=utf-8\";\n            default:\n                return \"text/plain; charset=utf-8\";\n        }\n\n    }\n}\n", "    public static String getContextType(String suffix) {\n        assert suffix != null;\n        switch (suffix.toLowerCase()) {\n            case \"html\":\n                return \"text/html; charset=utf-8\";\n            case \"css\":\n                return \"text/css; charset=utf-8\";\n            case \"js\":\n                return \"text/javascript; charset=utf-8\";\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"ico\":\n                return \"image/x-icon\";\n            case \"json\":\n                return \"application/json; charset=utf-8\";\n            default:\n                return \"text/plain; charset=utf-8\";\n        }\n\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/common/HttpMethod.java", "chunked_list": ["package top.trumandu.common;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/24\n * @description\n */\npublic enum HttpMethod {\n    /**\n     *\n     */\n    GET, POST, PUT, OPTION;\n", "    public static HttpMethod getEnum(String method) {\n        HttpMethod[] values = HttpMethod.values();\n        for (HttpMethod value : values) {\n            String name = value.name();\n            if (name.equalsIgnoreCase(method)) {\n                return value;\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/common/Headers.java", "chunked_list": ["package top.trumandu.common;\n\nimport java.util.HashMap;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/24", " * @author Truman.P.Du\n * @date 2023/03/24\n * @description\n */\npublic class Headers {\n\n    private Map<String, String> data = new LinkedHashMap<>(64);\n\n    public Headers() {\n    }\n\n    public Headers(List<String> rawHeaders) {\n        assert rawHeaders == null;\n        rawHeaders.forEach(str -> {", "            if (str != null && str.indexOf(\":\") > 0) {\n                String name = str.split(\":\", 2)[0];\n                String value = str.split(\":\", 2)[1];\n                data.put(name, value);\n            }\n        });\n    }\n\n    public Headers(Map<String, String> headsMap) {\n        data.putAll(headsMap);\n    }\n\n    public Map<String, String> getHeads() {\n        return new HashMap<>(data);\n    }\n", "    public Object getHeader(String headName) {\n        return data.get(headName);\n    }\n\n    public void addHeader(String headName, String headValue) {\n        data.put(headName, headValue);\n    }\n\n    public boolean removeHeader(String headName) {\n        data.remove(headName);\n        return true;\n    }\n\n    @Override", "    public boolean removeHeader(String headName) {\n        data.remove(headName);\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder builder = new StringBuilder();\n        if (data.size() == 0) {\n            builder.append(\"\\n\\r\");\n        } else {\n            data.forEach((key, value) -> builder.append(key).append(\":\").append(value).append(\"\\r\\n\"));\n        }\n\n        return builder.toString();\n    }\n}\n", "        if (data.size() == 0) {\n            builder.append(\"\\n\\r\");\n        } else {\n            data.forEach((key, value) -> builder.append(key).append(\":\").append(value).append(\"\\r\\n\"));\n        }\n\n        return builder.toString();\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/common/HttpResponse.java", "chunked_list": ["package top.trumandu.common;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/25\n * @description\n */\npublic class HttpResponse {\n    private String version;\n    private HttpStatus status;\n    private Headers headers;\n    private byte[] body;\n\n    public HttpResponse(int code) {\n        this.init(\"HTTP/1.1\", code, null, null);\n\n    }\n\n    public HttpResponse(int code, List<String> rawHeaders) {\n        this.init(\"HTTP/1.1\", code, rawHeaders, null);\n    }\n\n    public HttpResponse(int code, byte[] body) {\n        this.init(\"HTTP/1.1\", code, new ArrayList<>(), body);\n    }\n\n    public HttpResponse(int code, List<String> rawHeaders, byte[] body) {\n        this.init(\"HTTP/1.1\", code, rawHeaders, body);\n    }\n\n    public HttpResponse(String version, int code, List<String> rawHeaders) {\n        this.init(version, code, rawHeaders, body);\n    }\n\n    private void init(String version, int code, List<String> rawHeaders, byte[] body) {\n        this.version = version;\n        this.status = HttpStatus.getEnum(code);\n        rawHeaders.add(\"Connection:Close\");\n        this.headers = new Headers(rawHeaders);\n        this.body = body;\n    }\n\n", " * @description\n */\npublic class HttpResponse {\n    private String version;\n    private HttpStatus status;\n    private Headers headers;\n    private byte[] body;\n\n    public HttpResponse(int code) {\n        this.init(\"HTTP/1.1\", code, null, null);\n\n    }\n\n    public HttpResponse(int code, List<String> rawHeaders) {\n        this.init(\"HTTP/1.1\", code, rawHeaders, null);\n    }\n\n    public HttpResponse(int code, byte[] body) {\n        this.init(\"HTTP/1.1\", code, new ArrayList<>(), body);\n    }\n\n    public HttpResponse(int code, List<String> rawHeaders, byte[] body) {\n        this.init(\"HTTP/1.1\", code, rawHeaders, body);\n    }\n\n    public HttpResponse(String version, int code, List<String> rawHeaders) {\n        this.init(version, code, rawHeaders, body);\n    }\n\n    private void init(String version, int code, List<String> rawHeaders, byte[] body) {\n        this.version = version;\n        this.status = HttpStatus.getEnum(code);\n        rawHeaders.add(\"Connection:Close\");\n        this.headers = new Headers(rawHeaders);\n        this.body = body;\n    }\n\n", "    public String getVersion() {\n        return version;\n    }\n\n    public HttpStatus getStatus() {\n        return status;\n    }\n\n    public Headers getHeaders() {\n        return headers;\n    }\n", "    public Headers getHeaders() {\n        return headers;\n    }\n\n    public void setHeaders(Headers headers) {\n        this.headers = headers;\n    }\n\n    public byte[] getBody() {\n        return body;\n    }\n\n    public byte[] getFirstLine() {\n        byte[] line = (version + \" \" + status.toString() + \"\\n\\r\").getBytes();\n        return line;\n    }\n\n    /**\n     * \u6d89\u53ca\u6570\u7ec4\u62f7\u8d1d\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\n     *\n     * @return\n     */\n    public byte[] getResponse() {\n        byte[] line = (version + \" \" + status.toString() + \"\\n\\r\" + headers + \"\\n\\r\").getBytes();\n        byte[] result = new byte[line.length + body.length];\n        System.arraycopy(line, 0, result, 0, line.length);\n        System.arraycopy(body, 0, result, line.length, body.length);\n        return result;\n    }\n\n\n    @Override", "    public String toString() {\n        return version + \" \" + status.toString() + \"\\n\\r\" + headers + \"\\n\\r\";\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/util/ResourcesFileUtil.java", "chunked_list": ["package top.trumandu.util;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.net.URL;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;", "import java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.Arrays;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/25\n * @description\n */\npublic class ResourcesFileUtil {\n\n    private static final String FILE_SPLIT = \"/\";\n", " */\npublic class ResourcesFileUtil {\n\n    private static final String FILE_SPLIT = \"/\";\n\n    public static boolean isExistFile(String path) {\n        Path truePath = Paths.get(\"src/main/resources\" + path);\n        File file = truePath.toFile();\n        return file.exists();\n    }\n\n", "    public static byte[] getResource(String path) throws IOException {\n        if (path.startsWith(FILE_SPLIT)) {\n            path = path.substring(1, path.length());\n        }\n        URL resourceUrl = ResourcesFileUtil.class.getClassLoader().getResource(path);\n        RandomAccessFile accessFile = new RandomAccessFile(resourceUrl.getFile(), \"r\");\n        FileChannel channel = accessFile.getChannel();\n        ByteBuffer buffer = ByteBuffer.allocate((int) channel.size());\n        channel.read(buffer);\n        buffer.flip();\n        byte[] result = buffer.array();\n        channel.close();\n        accessFile.close();\n        return result;\n    }\n", "    public static void main(String[] args) throws IOException {\n        System.out.println(Arrays.toString(ResourcesFileUtil.getResource(\"/index.html\")));\n        System.out.println(ResourcesFileUtil.isExistFile(\"/index.html\"));\n    }\n}\n"]}
{"filename": "simple-httpd/src/main/java/top/trumandu/v2/SimpleHttpV2.java", "chunked_list": ["package top.trumandu.v2;\n\nimport top.trumandu.common.ContextType;\nimport top.trumandu.common.Headers;\nimport top.trumandu.common.HttpRequest;\nimport top.trumandu.common.HttpResponse;\nimport top.trumandu.util.ResourcesFileUtil;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;", "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author Truman.P.Du\n * @date 2023/03/24\n * @description\n */\npublic class SimpleHttpV2 {\n    private static int port;\n", "public class SimpleHttpV2 {\n    private static int port;\n\n    public void start(int port) throws IOException {\n        ServerSocket ss = new ServerSocket(port);\n        System.out.println(\"Simple http server started on port \" + port);\n        HttpResponse response;\n        while (true) {\n            Socket socket = ss.accept();\n            try {\n                HttpRequest request = handleRequest(socket);", "            try {\n                HttpRequest request = handleRequest(socket);\n                if (request == null) {\n                    continue;\n                }\n                log(request);\n                response = handleResponse(request, socket);\n            } catch (Exception e) {\n                response = handle5xx();\n            }\n            response(response, socket);\n        }\n    }\n\n    private HttpRequest handleRequest(Socket socket) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        String line;\n        List<String> rawHeaders = new ArrayList<>(64);\n        String firstLine = null;", "        while ((line = in.readLine()) != null) {\n            if (line.isEmpty()) {\n                break;\n            }\n            if (firstLine == null) {\n                firstLine = line;\n            } else {\n                rawHeaders.add(line);\n            }\n        }\n", "        if (firstLine == null) {\n            return null;\n        }\n\n        String[] array = firstLine.split(\" \", 3);\n        HttpRequest httpRequest = new HttpRequest(array[0], array[1], array[2]);\n        httpRequest.setHeaders(rawHeaders);\n        return httpRequest;\n    }\n\n    private HttpResponse handleResponse(HttpRequest request, Socket socket) throws IOException {\n        String path = request.getPath();\n        HttpResponse response;", "        try {\n            if (\"/\".equalsIgnoreCase(path) || path.length() == 0) {\n                path = \"/index.html\";\n            } else if (path.indexOf(\".\") < 0) {\n                path = path + \".html\";\n            }\n            boolean flag = ResourcesFileUtil.isExistFile(path);\n            if (!flag) {\n                path = request.getPath() + \"/index.html\";\n                flag = ResourcesFileUtil.isExistFile(path);\n            }", "            if (!flag) {\n                response = handle404();\n            } else {\n                response = handleOk(path);\n            }\n        } catch (Exception e) {\n            response = handle5xx();\n        }\n        return response;\n    }\n\n    private void response(HttpResponse response, Socket socket) throws IOException {\n        OutputStream outputStream = socket.getOutputStream();\n        outputStream.write(response.getFirstLine());\n        outputStream.write(response.getHeaders().toString().getBytes());\n        outputStream.write(\"\\r\\n\".getBytes());\n        outputStream.write(response.getBody());\n        outputStream.flush();\n        outputStream.close();\n    }\n\n    private HttpResponse handleOk(String path) throws IOException {\n\n        String suffix = \"html\";", "        if (path.lastIndexOf(\".\") > 0) {\n            suffix = path.substring(path.lastIndexOf(\".\") + 1, path.length());\n        }\n        byte[] body = ResourcesFileUtil.getResource(path);\n        HttpResponse response = new HttpResponse(200, body);\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(suffix));\n        headers.addHeader(\"Content-Length\", \"\" + body.length);\n        response.setHeaders(headers);\n        return response;\n    }\n\n    private HttpResponse handle404() throws IOException {\n        String body = \"Page not fond!\";\n        HttpResponse response = new HttpResponse(404, body.getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(\"html\"));\n        headers.addHeader(\"Content-Length\", body.getBytes().length + \"\");\n        headers.addHeader(\"Connection\", \"Close\");\n        response.setHeaders(headers);\n        return response;\n    }\n\n    private HttpResponse handle5xx() throws IOException {\n        String body = \"Internal Server Error!\";\n        HttpResponse response = new HttpResponse(500, body.getBytes());\n        Headers headers = new Headers();\n        headers.addHeader(\"Content-Type\", ContextType.getContextType(\"html\"));\n        headers.addHeader(\"Content-Length\", body.getBytes().length + \"\");\n        headers.addHeader(\"Connection\", \"Close\");\n        response.setHeaders(headers);\n        return response;\n    }\n\n    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n\n    private void log(HttpRequest request) {\n        String log = String.format(\"%s INFO %s %s %s\", formatter.format(LocalDateTime.now()),\n                request.getMethod(), request.getPath(), request.getHeaders().getHeader(\"User-Agent\"));\n        System.out.println(log);\n    }\n", "    public static void main(String[] args) throws IOException {\n        int port = 8080;\n        new SimpleHttpV2().start(port);\n    }\n\n\n}\n"]}
