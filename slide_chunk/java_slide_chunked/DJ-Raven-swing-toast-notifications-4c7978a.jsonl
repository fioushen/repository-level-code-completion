{"filename": "src/test/java/raven/demo/CustomNotification.java", "chunked_list": ["package raven.demo;\n\nimport com.formdev.flatlaf.FlatClientProperties;\nimport raven.toast.Notifications;\nimport raven.toast.ToastClientProperties;\nimport raven.toast.ui.ToastNotificationPanel;\n\nimport javax.swing.*;\n\npublic class CustomNotification extends Notifications {\n    @Override\n    protected ToastNotificationPanel createNotification(Type type, String message) {\n        ToastNotificationPanel toastNotificationPanel = super.createNotification(type, message);\n        JLabel label = new JLabel(toastNotificationPanel.getKey(), toastNotificationPanel.getDefaultIcon(), JLabel.CENTER);\n        label.setVerticalTextPosition(JLabel.BOTTOM);\n        label.setForeground(toastNotificationPanel.getDefaultColor());\n        label.setHorizontalTextPosition(JLabel.CENTER);\n        label.putClientProperty(FlatClientProperties.STYLE, \"\" +\n                \"font:$Notifications.font;\" +\n                \"iconTextGap:0\");\n        toastNotificationPanel.putClientProperty(ToastClientProperties.TOAST_ICON, label);\n        return toastNotificationPanel;\n    }\n}\n", "\npublic class CustomNotification extends Notifications {\n    @Override\n    protected ToastNotificationPanel createNotification(Type type, String message) {\n        ToastNotificationPanel toastNotificationPanel = super.createNotification(type, message);\n        JLabel label = new JLabel(toastNotificationPanel.getKey(), toastNotificationPanel.getDefaultIcon(), JLabel.CENTER);\n        label.setVerticalTextPosition(JLabel.BOTTOM);\n        label.setForeground(toastNotificationPanel.getDefaultColor());\n        label.setHorizontalTextPosition(JLabel.CENTER);\n        label.putClientProperty(FlatClientProperties.STYLE, \"\" +\n                \"font:$Notifications.font;\" +\n                \"iconTextGap:0\");\n        toastNotificationPanel.putClientProperty(ToastClientProperties.TOAST_ICON, label);\n        return toastNotificationPanel;\n    }\n}\n"]}
{"filename": "src/test/java/raven/demo/Test.java", "chunked_list": ["package raven.demo;\n\nimport com.formdev.flatlaf.FlatDarculaLaf;\nimport com.formdev.flatlaf.FlatIntelliJLaf;\nimport com.formdev.flatlaf.FlatLaf;\nimport com.formdev.flatlaf.extras.FlatAnimatedLafChange;\nimport raven.toast.Notifications;\nimport raven.toast.ui.ToastNotificationPanel;\n\nimport javax.swing.*;", "\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Random;\n\npublic class Test extends JFrame {\n    public Test() {\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setSize(1000, 768);\n        setLocationRelativeTo(null);\n        getContentPane().setLayout(new FlowLayout(FlowLayout.LEADING));\n        JButton button = new JButton(\"Show\");\n        Notifications.getInstance().setJFrame(this);\n        CustomNotification customNotification = new CustomNotification();\n        customNotification.setJFrame(this);\n        button.addActionListener(new ActionListener() {\n            @Override", "            public void actionPerformed(ActionEvent e) {\n                Notifications.getInstance().show(getRandomType(), Notifications.Location.TOP_RIGHT, getRandomText());\n            }\n        });\n        JButton cmdMode = new JButton(\"Mode Light\");\n        cmdMode.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                if (cmdMode.getText().equals(\"Mode Light\")) {\n                    changeMode(true);\n                    cmdMode.setText(\"Mode Dark\");\n                } else {\n                    changeMode(false);\n                    cmdMode.setText(\"Mode Light\");\n                }\n            }\n        });\n        getContentPane().add(button);\n        getContentPane().add(cmdMode);\n\n        JButton buttonClear = new JButton(\"Clear\");\n        buttonClear.addActionListener(new ActionListener() {\n            @Override", "                if (cmdMode.getText().equals(\"Mode Light\")) {\n                    changeMode(true);\n                    cmdMode.setText(\"Mode Dark\");\n                } else {\n                    changeMode(false);\n                    cmdMode.setText(\"Mode Light\");\n                }\n            }\n        });\n        getContentPane().add(button);\n        getContentPane().add(cmdMode);\n\n        JButton buttonClear = new JButton(\"Clear\");\n        buttonClear.addActionListener(new ActionListener() {\n            @Override", "            public void actionPerformed(ActionEvent e) {\n                Notifications.getInstance().clearHold();\n            }\n        });\n        getContentPane().add(buttonClear);\n\n        ToastNotificationPanel panel = new ToastNotificationPanel();\n        panel.set(Notifications.Type.INFO, \"Hello my name is raven\\nThis new Toast Panel Notification\");\n        getContentPane().add(panel);\n    }\n\n\n    private Notifications.Location getRandomLocation() {\n        Random ran = new Random();\n        int a = ran.nextInt(6);", "        if (a == 0) {\n            return Notifications.Location.TOP_LEFT;\n        } else if (a == 1) {\n            return Notifications.Location.TOP_CENTER;\n        } else if (a == 2) {\n            return Notifications.Location.TOP_RIGHT;\n        } else if (a == 3) {\n            return Notifications.Location.BOTTOM_LEFT;\n        } else if (a == 4) {\n            return Notifications.Location.BOTTOM_CENTER;\n        } else if (a == 5) {\n            return Notifications.Location.BOTTOM_RIGHT;\n        } else {\n            return Notifications.Location.BOTTOM_RIGHT;\n        }\n    }\n\n    private String getRandomText() {\n        Random ran = new Random();\n        int a = ran.nextInt(5);", "        } else if (a == 4) {\n            return Notifications.Location.BOTTOM_CENTER;\n        } else if (a == 5) {\n            return Notifications.Location.BOTTOM_RIGHT;\n        } else {\n            return Notifications.Location.BOTTOM_RIGHT;\n        }\n    }\n\n    private String getRandomText() {\n        Random ran = new Random();\n        int a = ran.nextInt(5);", "        if (a == 0) {\n            return \"Toast Notifications notify the user of a system occurrence\";\n        } else if (a == 1) {\n            return \"The notifications should have a consistent location in each application.\\nWe recommend the top-right of the application\";\n        } else if (a == 2) {\n            return \"Toast Notifications notify the user of a system occurrence.\" +\n                    \"\\nThe notifications should have a consistent location in each application.\" +\n                    \"\\nWe recommend the top-right\";\n        } else if (a == 3) {\n            return \"Success\";\n        } else {\n            return \"Hello\";\n        }\n    }\n\n    private Notifications.Type getRandomType() {\n        Random ran = new Random();\n        int a = ran.nextInt(4);", "        } else if (a == 3) {\n            return \"Success\";\n        } else {\n            return \"Hello\";\n        }\n    }\n\n    private Notifications.Type getRandomType() {\n        Random ran = new Random();\n        int a = ran.nextInt(4);\n        if (a == 0) {\n            return Notifications.Type.SUCCESS;", "        if (a == 0) {\n            return Notifications.Type.SUCCESS;\n        } else if (a == 1) {\n            return Notifications.Type.INFO;\n        } else if (a == 2) {\n            return Notifications.Type.WARNING;\n        } else {\n            return Notifications.Type.ERROR;\n        }\n    }\n\n\n    private void changeMode(boolean dark) {", "        if (FlatLaf.isLafDark() != dark) {\n            if (dark) {\n                EventQueue.invokeLater(() -> {\n                    FlatAnimatedLafChange.showSnapshot();\n                    FlatDarculaLaf.setup();\n                    FlatLaf.updateUI();\n                    FlatAnimatedLafChange.hideSnapshotWithAnimation();\n                });\n            } else {\n                EventQueue.invokeLater(() -> {\n                    FlatAnimatedLafChange.showSnapshot();\n                    FlatIntelliJLaf.setup();\n                    FlatLaf.updateUI();\n                    FlatAnimatedLafChange.hideSnapshotWithAnimation();\n                    ;\n                });\n            }\n        }\n    }\n", "    public static void main(String[] args) {\n        FlatLaf.registerCustomDefaultsSource(\"raven.toast\");\n        FlatIntelliJLaf.setup();\n        EventQueue.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                new Test().setVisible(true);\n            }\n        });\n    }\n}\n"]}
{"filename": "src/main/java/raven/toast/ToastClientProperties.java", "chunked_list": ["package raven.toast;\n\npublic interface ToastClientProperties {\n    String TOAST_ICON = \"Toast.icon\";\n    String TOAST_COMPONENT = \"Toast.component\";\n    String TOAST_SHOW_CLOSE_BUTTON = \"Toast.showCloseButton\";\n    String TOAST_CLOSE_CALLBACK = \"Toast.closeCallback\";\n    String TOAST_CLOSE_ICON = \"Toast.closeIcon\";\n    String TOAST_SUCCESS_ICON = \"Toast.success.icon\";\n    String TOAST_INFO_ICON = \"Toast.info.icon\";\n    String TOAST_WARNING_ICON = \"Toast.warning.icon\";\n    String TOAST_ERROR_ICON = \"Toast.error.icon\";\n}\n"]}
{"filename": "src/main/java/raven/toast/Notifications.java", "chunked_list": ["package raven.toast;\n\nimport com.formdev.flatlaf.ui.FlatUIUtils;\nimport com.formdev.flatlaf.util.Animator;\nimport com.formdev.flatlaf.util.UIScale;\nimport raven.toast.ui.ToastNotificationPanel;\nimport raven.toast.util.NotificationHolder;\nimport raven.toast.util.UIUtils;\n\nimport javax.swing.*;", "\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ComponentAdapter;\nimport java.awt.event.ComponentEvent;\nimport java.awt.event.ComponentListener;\nimport java.util.*;\nimport java.util.List;\nimport java.util.function.Consumer;\n", "import java.util.function.Consumer;\n\n/**\n * <!-- FlatLaf Property -->\n * <p>\n * Toast.outlineWidth                   int         0       (default)\n * Toast.iconTextGap                    int         5       (default)\n * Toast.closeButtonGap                 int         5       (default)\n * Toast.arc                            int         20      (default)\n * Toast.horizontalGap                  int         10      (default)", " * Toast.arc                            int         20      (default)\n * Toast.horizontalGap                  int         10      (default)\n * <p>\n * Toast.limit                          int         -1      (default)   -1 as unlimited\n * Toast.duration                       long        2500    (default)\n * Toast.animation                      int         200     (default)\n * Toast.animationResolution            int         5       (default)\n * Toast.animationMove                  int         10      (default)\n * Toast.minimumWidth                   int         50      (default)\n * Toast.maximumWidth                   int         -1      (default)   -1 as not set", " * Toast.minimumWidth                   int         50      (default)\n * Toast.maximumWidth                   int         -1      (default)   -1 as not set\n * <p>\n * Toast.shadowColor                    Color\n * Toast.shadowOpacity                  float       0.1f    (default)\n * Toast.shadowInsets                   Insets      0,0,6,6 (default)\n * <p>\n * Toast.useEffect                      boolean     true    (default)\n * Toast.effectWidth                    float       0.5f    (default)   0.5f as 50%\n * Toast.effectOpacity                  float       0.2f    (default)   0 to 1", " * Toast.effectWidth                    float       0.5f    (default)   0.5f as 50%\n * Toast.effectOpacity                  float       0.2f    (default)   0 to 1\n * Toast.effectAlignment                String      left    (default)   left, right\n * Toast.effectColor                    Color\n * Toast.success.effectColor            Color\n * Toast.info.effectColor               Color\n * Toast.warning.effectColor            Color\n * Toast.error.effectColor              Color\n * <p>\n * Toast.outlineColor                   Color", " * <p>\n * Toast.outlineColor                   Color\n * Toast.foreground                     Color\n * Toast.background                     Color\n * <p>\n * Toast.success.outlineColor           Color\n * Toast.success.foreground             Color\n * Toast.success.background             Color\n * Toast.info.outlineColor              Color\n * Toast.info.foreground                Color", " * Toast.info.outlineColor              Color\n * Toast.info.foreground                Color\n * Toast.info.background                Color\n * Toast.warning.outlineColor           Color\n * Toast.warning.foreground             Color\n * Toast.warning.background             Color\n * Toast.error.outlineColor             Color\n * Toast.error.foreground               Color\n * Toast.error.background               Color\n * <p>", " * Toast.error.background               Color\n * <p>\n * Toast.frameInsets                    Insets      10,10,10,10     (default)\n * Toast.margin                         Insets      8,8,8,8         (default)\n * <p>\n * Toast.showCloseButton                boolean     true            (default)\n * Toast.closeIconColor                 Color\n *\n * <p>\n * <!-- UIManager -->", " * <p>\n * <!-- UIManager -->\n * <p>\n * Toast.success.icon                   Icon\n * Toast.info.icon                      Icon\n * Toast.warning.icon                   Icon\n * Toast.error.icon                     Icon\n * Toast.closeIcon                      Icon\n */\n", " */\n\n/**\n * @author Raven\n */\npublic class Notifications {\n\n    private static Notifications instance;\n    private JFrame frame;\n    private final Map<Location, List<NotificationAnimation>> lists = new HashMap<>();\n    private final NotificationHolder notificationHolder = new NotificationHolder();\n\n    private ComponentListener windowEvent;\n\n    private void installEvent(JFrame frame) {", "        if (windowEvent == null && frame != null) {\n            windowEvent = new ComponentAdapter() {\n                @Override\n                public void componentMoved(ComponentEvent e) {\n                    move(frame.getBounds());\n                }\n\n                @Override\n                public void componentResized(ComponentEvent e) {\n                    move(frame.getBounds());\n                }\n            };\n        }", "                public void componentResized(ComponentEvent e) {\n                    move(frame.getBounds());\n                }\n            };\n        }\n        if (this.frame != null) {\n            this.frame.removeComponentListener(windowEvent);\n        }\n        if (frame != null) {\n            frame.addComponentListener(windowEvent);\n        }\n        this.frame = frame;\n    }\n", "        if (frame != null) {\n            frame.addComponentListener(windowEvent);\n        }\n        this.frame = frame;\n    }\n\n    public static Notifications getInstance() {\n        if (instance == null) {\n            instance = new Notifications();\n        }\n        return instance;\n    }\n\n    private int getCurrentShowCount(Location location) {\n        List list = lists.get(location);\n        return list == null ? 0 : list.size();\n    }\n\n    private synchronized void move(Rectangle rectangle) {", "        for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.getValue().get(i);\n                if (an != null) {\n                    an.move(rectangle);\n                }\n            }\n        }\n    }\n\n    public void setJFrame(JFrame frame) {\n        installEvent(frame);\n    }\n", "    public void setJFrame(JFrame frame) {\n        installEvent(frame);\n    }\n\n    public void show(Type type, String message) {\n        show(type, Location.TOP_CENTER, message);\n    }\n\n    public void show(Type type, long duration, String message) {\n        show(type, Location.TOP_CENTER, duration, message);\n    }\n", "    public void show(Type type, long duration, String message) {\n        show(type, Location.TOP_CENTER, duration, message);\n    }\n\n    public void show(Type type, Location location, String message) {\n        long duration = FlatUIUtils.getUIInt(\"Toast.duration\", 2500);\n        show(type, location, duration, message);\n    }\n\n    public void show(Type type, Location location, long duration, String message) {\n        initStart(new NotificationAnimation(type, location, duration, message), duration);\n    }\n", "    public void show(Type type, Location location, long duration, String message) {\n        initStart(new NotificationAnimation(type, location, duration, message), duration);\n    }\n\n    public void show(JComponent component) {\n        show(Location.TOP_CENTER, component);\n    }\n\n    public void show(Location location, JComponent component) {\n        long duration = FlatUIUtils.getUIInt(\"Toast.duration\", 2500);\n        show(location, duration, component);\n    }\n", "    public void show(Location location, JComponent component) {\n        long duration = FlatUIUtils.getUIInt(\"Toast.duration\", 2500);\n        show(location, duration, component);\n    }\n\n    public void show(Location location, long duration, JComponent component) {\n        initStart(new NotificationAnimation(location, duration, component), duration);\n    }\n\n    private synchronized boolean initStart(NotificationAnimation notificationAnimation, long duration) {\n        int limit = FlatUIUtils.getUIInt(\"Toast.limit\", -1);", "        if (limit == -1 || getCurrentShowCount(notificationAnimation.getLocation()) < limit) {\n            notificationAnimation.start();\n            return true;\n        } else {\n            notificationHolder.hold(notificationAnimation);\n            return false;\n        }\n    }\n\n    private synchronized void notificationClose(NotificationAnimation notificationAnimation) {\n        NotificationAnimation hold = notificationHolder.getHold(notificationAnimation.getLocation());", "        if (hold != null) {\n            if (initStart(hold, hold.getDuration())) {\n                notificationHolder.removeHold(hold);\n            }\n        }\n    }\n\n    public void clearAll() {\n        notificationHolder.clearHold();\n        for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.getValue().get(i);", "        for (Map.Entry<Location, List<NotificationAnimation>> set : lists.entrySet()) {\n            for (int i = 0; i < set.getValue().size(); i++) {\n                NotificationAnimation an = set.getValue().get(i);\n                if (an != null) {\n                    an.close();\n                }\n            }\n        }\n    }\n\n    public void clear(Location location) {\n        notificationHolder.clearHold(location);\n        List<NotificationAnimation> list = lists.get(location);", "    public void clear(Location location) {\n        notificationHolder.clearHold(location);\n        List<NotificationAnimation> list = lists.get(location);\n        if (list != null) {\n            for (int i = 0; i < list.size(); i++) {\n                NotificationAnimation an = list.get(i);\n                if (an != null) {\n                    an.close();\n                }\n            }\n        }\n    }\n", "    public void clearHold() {\n        notificationHolder.clearHold();\n    }\n\n    public void clearHold(Location location) {\n        notificationHolder.clearHold(location);\n    }\n\n    protected ToastNotificationPanel createNotification(Type type, String message) {\n        ToastNotificationPanel toastNotificationPanel = new ToastNotificationPanel();\n        toastNotificationPanel.set(type, message);\n        return toastNotificationPanel;\n    }\n\n    private synchronized void updateList(Location key, NotificationAnimation values, boolean add) {", "        if (add) {\n            if (lists.containsKey(key)) {\n                lists.get(key).add(values);\n            } else {\n                List<NotificationAnimation> list = new ArrayList<>();\n                list.add(values);\n                lists.put(key, list);\n            }\n        } else {\n            if (lists.containsKey(key)) {\n                lists.get(key).remove(values);", "            if (lists.containsKey(key)) {\n                lists.get(key).remove(values);\n                if (lists.get(key).isEmpty()) {\n                    lists.remove(key);\n                }\n            }\n        }\n    }\n\n    public enum Type {\n        SUCCESS, INFO, WARNING, ERROR\n    }\n", "    public enum Type {\n        SUCCESS, INFO, WARNING, ERROR\n    }\n\n    public enum Location {\n        TOP_LEFT, TOP_CENTER, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT\n    }\n\n    public class NotificationAnimation {\n\n        private JWindow window;\n        private Animator animator;\n        private boolean show = true;\n        private float animate;\n        private int x;\n        private int y;\n        private Location location;\n        private long duration;\n        private Insets frameInsets;\n        private int horizontalSpace;\n        private int animationMove;\n        private boolean top;\n        private boolean close = false;\n\n        public NotificationAnimation(Type type, Location location, long duration, String message) {\n            installDefault();\n            this.location = location;\n            this.duration = duration;\n            window = new JWindow(frame);\n            ToastNotificationPanel toastNotificationPanel = createNotification(type, message);\n            toastNotificationPanel.putClientProperty(ToastClientProperties.TOAST_CLOSE_CALLBACK, (Consumer) o -> close());\n            window.setContentPane(toastNotificationPanel);\n            window.setFocusableWindowState(false);\n            window.pack();\n            toastNotificationPanel.setDialog(window);\n        }\n\n        public NotificationAnimation(Location location, long duration, JComponent component) {\n            installDefault();\n            this.location = location;\n            this.duration = duration;\n            window = new JWindow(frame);\n            window.setBackground(new Color(0, 0, 0, 0));\n            window.setContentPane(component);\n            window.setFocusableWindowState(false);\n            window.setSize(component.getPreferredSize());\n        }\n\n        private void installDefault() {\n            frameInsets = UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));\n            horizontalSpace = FlatUIUtils.getUIInt(\"Toast.horizontalGap\", 10);\n            animationMove = FlatUIUtils.getUIInt(\"Toast.animationMove\", 10);\n        }\n", "    public class NotificationAnimation {\n\n        private JWindow window;\n        private Animator animator;\n        private boolean show = true;\n        private float animate;\n        private int x;\n        private int y;\n        private Location location;\n        private long duration;\n        private Insets frameInsets;\n        private int horizontalSpace;\n        private int animationMove;\n        private boolean top;\n        private boolean close = false;\n\n        public NotificationAnimation(Type type, Location location, long duration, String message) {\n            installDefault();\n            this.location = location;\n            this.duration = duration;\n            window = new JWindow(frame);\n            ToastNotificationPanel toastNotificationPanel = createNotification(type, message);\n            toastNotificationPanel.putClientProperty(ToastClientProperties.TOAST_CLOSE_CALLBACK, (Consumer) o -> close());\n            window.setContentPane(toastNotificationPanel);\n            window.setFocusableWindowState(false);\n            window.pack();\n            toastNotificationPanel.setDialog(window);\n        }\n\n        public NotificationAnimation(Location location, long duration, JComponent component) {\n            installDefault();\n            this.location = location;\n            this.duration = duration;\n            window = new JWindow(frame);\n            window.setBackground(new Color(0, 0, 0, 0));\n            window.setContentPane(component);\n            window.setFocusableWindowState(false);\n            window.setSize(component.getPreferredSize());\n        }\n\n        private void installDefault() {\n            frameInsets = UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));\n            horizontalSpace = FlatUIUtils.getUIInt(\"Toast.horizontalGap\", 10);\n            animationMove = FlatUIUtils.getUIInt(\"Toast.animationMove\", 10);\n        }\n", "        public void start() {\n            int animation = FlatUIUtils.getUIInt(\"Toast.animation\", 200);\n            int resolution = FlatUIUtils.getUIInt(\"Toast.animationResolution\", 5);\n            animator = new Animator(animation, new Animator.TimingTarget() {\n                @Override\n                public void begin() {\n                    if (show) {\n                        updateList(location, NotificationAnimation.this, true);\n                        installLocation();\n                    }\n                }\n\n                @Override", "                public void timingEvent(float f) {\n                    animate = show ? f : 1f - f;\n                    updateLocation(true);\n                }\n\n                @Override\n                public void end() {\n                    if (show && close == false) {\n                        SwingUtilities.invokeLater(() -> {\n                            new Thread(() -> {\n                                sleep(duration);", "                                if (close == false) {\n                                    show = false;\n                                    animator.start();\n                                }\n                            }).start();\n                        });\n                    } else {\n                        updateList(location, NotificationAnimation.this, false);\n                        window.dispose();\n                        notificationClose(NotificationAnimation.this);\n                    }\n                }\n            });\n            animator.setResolution(resolution);\n            animator.start();\n        }\n\n        private void installLocation() {\n            Insets insets;\n            Rectangle rec;", "            if (frame == null) {\n                insets = UIScale.scale(frameInsets);\n                rec = new Rectangle(new Point(0, 0), Toolkit.getDefaultToolkit().getScreenSize());\n            } else {\n                insets = UIScale.scale(FlatUIUtils.addInsets(frameInsets, frame.getInsets()));\n                rec = frame.getBounds();\n            }\n            setupLocation(rec, insets);\n            window.setOpacity(0f);\n            window.setVisible(true);\n        }\n\n        private void move(Rectangle rec) {\n            Insets insets = UIScale.scale(FlatUIUtils.addInsets(frameInsets, frame.getInsets()));\n            setupLocation(rec, insets);\n        }\n\n        private void setupLocation(Rectangle rec, Insets insets) {", "            if (location == Location.TOP_LEFT) {\n                x = rec.x + insets.left;\n                y = rec.y + insets.top;\n                top = true;\n            } else if (location == Location.TOP_CENTER) {\n                x = rec.x + (rec.width - window.getWidth()) / 2;\n                y = rec.y + insets.top;\n                top = true;\n            } else if (location == Location.TOP_RIGHT) {\n                x = rec.x + rec.width - (window.getWidth() + insets.right);\n                y = rec.y + insets.top;\n                top = true;", "            } else if (location == Location.TOP_RIGHT) {\n                x = rec.x + rec.width - (window.getWidth() + insets.right);\n                y = rec.y + insets.top;\n                top = true;\n            } else if (location == Location.BOTTOM_LEFT) {\n                x = rec.x + insets.left;\n                y = rec.y + rec.height - (window.getHeight() + insets.bottom);\n                top = false;\n            } else if (location == Location.BOTTOM_CENTER) {\n                x = rec.x + (rec.width - window.getWidth()) / 2;\n                y = rec.y + rec.height - (window.getHeight() + insets.bottom);\n                top = false;", "            } else if (location == Location.BOTTOM_CENTER) {\n                x = rec.x + (rec.width - window.getWidth()) / 2;\n                y = rec.y + rec.height - (window.getHeight() + insets.bottom);\n                top = false;\n            } else if (location == Location.BOTTOM_RIGHT) {\n                x = rec.x + rec.width - (window.getWidth() + insets.right);\n                y = rec.y + rec.height - (window.getHeight() + insets.bottom);\n                top = false;\n            }\n            int am = UIScale.scale(top ? animationMove : -animationMove);\n            int ly = (int) (getLocation(NotificationAnimation.this) + y + animate * am);\n            window.setLocation(x, ly);\n        }\n\n        private void updateLocation(boolean loop) {\n            int am = UIScale.scale(top ? animationMove : -animationMove);\n            int ly = (int) (getLocation(NotificationAnimation.this) + y + animate * am);\n            window.setLocation(x, ly);\n            window.setOpacity(animate);", "            if (loop) {\n                update(this);\n            }\n        }\n\n        private int getLocation(NotificationAnimation notification) {\n            int height = 0;\n            List<NotificationAnimation> list = lists.get(location);\n            for (int i = 0; i < list.size(); i++) {\n                NotificationAnimation n = list.get(i);\n                if (notification == n) {\n                    return height;\n                }\n                double v = n.animate * (list.get(i).window.getHeight() + UIScale.scale(horizontalSpace));\n                height += top ? v : -v;\n            }\n            return height;\n        }\n\n        private void update(NotificationAnimation except) {\n            List<NotificationAnimation> list = lists.get(location);", "            for (int i = 0; i < list.size(); i++) {\n                NotificationAnimation n = list.get(i);\n                if (notification == n) {\n                    return height;\n                }\n                double v = n.animate * (list.get(i).window.getHeight() + UIScale.scale(horizontalSpace));\n                height += top ? v : -v;\n            }\n            return height;\n        }\n\n        private void update(NotificationAnimation except) {\n            List<NotificationAnimation> list = lists.get(location);", "            for (int i = 0; i < list.size(); i++) {\n                NotificationAnimation n = list.get(i);\n                if (n != except) {\n                    n.updateLocation(false);\n                }\n            }\n        }\n\n        public void close() {\n            close = true;\n            show = false;", "        public void close() {\n            close = true;\n            show = false;\n            if (animator.isRunning()) {\n                animator.stop();\n            }\n            animator.start();\n        }\n\n        private void sleep(long l) {\n            try {\n                Thread.sleep(l);\n            } catch (InterruptedException e) {\n                System.err.println(e);\n            }\n        }\n", "            try {\n                Thread.sleep(l);\n            } catch (InterruptedException e) {\n                System.err.println(e);\n            }\n        }\n\n        public Location getLocation() {\n            return location;\n        }\n", "        public long getDuration() {\n            return duration;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/raven/toast/util/ShadowRenderer.java", "chunked_list": ["package raven.toast.util;\n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.Raster;\nimport java.awt.image.WritableRaster;\n\npublic class ShadowRenderer {\n\n    private int size = 5;\n    private float opacity = 0.5f;\n    private Color color = Color.BLACK;\n\n    public ShadowRenderer() {\n        this(5, 0.5f, Color.BLACK);\n    }\n\n    public ShadowRenderer(final int size, final float opacity, final Color color) {\n        this.size = size;\n        this.opacity = opacity;\n        this.color = color;\n    }\n", "    public Color getColor() {\n        return color;\n    }\n\n    public float getOpacity() {\n        return opacity;\n    }\n\n    public int getSize() {\n        return size;\n    }\n", "    public int getSize() {\n        return size;\n    }\n\n    public BufferedImage createShadow(Shape shape) {\n        Rectangle rec = shape.getBounds();\n        BufferedImage img = new BufferedImage(rec.width, rec.height, BufferedImage.TYPE_INT_ARGB);\n        Graphics2D g2 = img.createGraphics();\n        g2.setColor(Color.BLACK);\n        g2.translate(-rec.x, -rec.y);\n        g2.fill(shape);\n        g2.dispose();\n        return createShadow(img);\n    }\n", "    public BufferedImage createShadow(final BufferedImage image) {\n        int shadowSize = size * 2;\n        int srcWidth = image.getWidth();\n        int srcHeight = image.getHeight();\n        int dstWidth = srcWidth + shadowSize;\n        int dstHeight = srcHeight + shadowSize;\n        int left = size;\n        int right = shadowSize - left;\n        int yStop = dstHeight - right;\n        int shadowRgb = color.getRGB() & 0x00FFFFFF;\n        int[] aHistory = new int[shadowSize];\n        int historyIdx;\n        int aSum;\n        BufferedImage dst = new BufferedImage(dstWidth, dstHeight,\n                BufferedImage.TYPE_INT_ARGB);\n        int[] dstBuffer = new int[dstWidth * dstHeight];\n        int[] srcBuffer = new int[srcWidth * srcHeight];\n        getPixels(image, 0, 0, srcWidth, srcHeight, srcBuffer);\n        int lastPixelOffset = right * dstWidth;\n        float hSumDivider = 1.0f / shadowSize;\n        float vSumDivider = opacity / shadowSize;\n        int[] hSumLookup = new int[256 * shadowSize];", "        for (int i = 0; i < hSumLookup.length; i++) {\n            hSumLookup[i] = (int) (i * hSumDivider);\n        }\n        int[] vSumLookup = new int[256 * shadowSize];\n        for (int i = 0; i < vSumLookup.length; i++) {\n            vSumLookup[i] = (int) (i * vSumDivider);\n        }\n        int srcOffset;\n        for (int srcY = 0, dstOffset = left * dstWidth; srcY < srcHeight; srcY++) {\n            for (historyIdx = 0; historyIdx < shadowSize; ) {\n                aHistory[historyIdx++] = 0;\n            }\n            aSum = 0;\n            historyIdx = 0;\n            srcOffset = srcY * srcWidth;", "        for (int srcY = 0, dstOffset = left * dstWidth; srcY < srcHeight; srcY++) {\n            for (historyIdx = 0; historyIdx < shadowSize; ) {\n                aHistory[historyIdx++] = 0;\n            }\n            aSum = 0;\n            historyIdx = 0;\n            srcOffset = srcY * srcWidth;\n            for (int srcX = 0; srcX < srcWidth; srcX++) {\n                int a = hSumLookup[aSum];\n                dstBuffer[dstOffset++] = a << 24;\n                aSum -= aHistory[historyIdx];\n                a = srcBuffer[srcOffset + srcX] >>> 24;\n                aHistory[historyIdx] = a;\n                aSum += a;", "                if (++historyIdx >= shadowSize) {\n                    historyIdx -= shadowSize;\n                }\n            }\n            for (int i = 0; i < shadowSize; i++) {\n                int a = hSumLookup[aSum];\n                dstBuffer[dstOffset++] = a << 24;\n                aSum -= aHistory[historyIdx];\n                if (++historyIdx >= shadowSize) {\n                    historyIdx -= shadowSize;\n                }\n            }\n        }\n", "                if (++historyIdx >= shadowSize) {\n                    historyIdx -= shadowSize;\n                }\n            }\n        }\n\n        for (int x = 0, bufferOffset = 0; x < dstWidth; x++, bufferOffset = x) {\n            aSum = 0;\n            for (historyIdx = 0; historyIdx < left; ) {\n                aHistory[historyIdx++] = 0;\n            }", "            for (historyIdx = 0; historyIdx < left; ) {\n                aHistory[historyIdx++] = 0;\n            }\n            for (int y = 0; y < right; y++, bufferOffset += dstWidth) {\n                int a = dstBuffer[bufferOffset] >>> 24;\n                aHistory[historyIdx++] = a;\n                aSum += a;\n            }\n            bufferOffset = x;\n            historyIdx = 0;\n            for (int y = 0; y < yStop; y++, bufferOffset += dstWidth) {\n                int a = vSumLookup[aSum];\n                dstBuffer[bufferOffset] = a << 24 | shadowRgb;\n                aSum -= aHistory[historyIdx];\n                a = dstBuffer[bufferOffset + lastPixelOffset] >>> 24;\n                aHistory[historyIdx] = a;\n                aSum += a;", "            for (int y = 0; y < yStop; y++, bufferOffset += dstWidth) {\n                int a = vSumLookup[aSum];\n                dstBuffer[bufferOffset] = a << 24 | shadowRgb;\n                aSum -= aHistory[historyIdx];\n                a = dstBuffer[bufferOffset + lastPixelOffset] >>> 24;\n                aHistory[historyIdx] = a;\n                aSum += a;\n                if (++historyIdx >= shadowSize) {\n                    historyIdx -= shadowSize;\n                }\n            }", "            for (int y = yStop; y < dstHeight; y++, bufferOffset += dstWidth) {\n                int a = vSumLookup[aSum];\n                dstBuffer[bufferOffset] = a << 24 | shadowRgb;\n                aSum -= aHistory[historyIdx];\n                if (++historyIdx >= shadowSize) {\n                    historyIdx -= shadowSize;\n                }\n            }\n        }\n        setPixels(dst, 0, 0, dstWidth, dstHeight, dstBuffer);\n        return dst;\n    }\n\n    private int[] getPixels(BufferedImage img, int x, int y, int w, int h, int[] pixels) {", "        if (w == 0 || h == 0) {\n            return new int[0];\n        }\n        if (pixels == null) {\n            pixels = new int[w * h];\n        } else if (pixels.length < w * h) {\n            throw new IllegalArgumentException(\"pixels array must have a length\" + \" >= w*h\");\n        }\n        int imageType = img.getType();\n        if (imageType == BufferedImage.TYPE_INT_ARGB || imageType == BufferedImage.TYPE_INT_RGB) {\n            Raster raster = img.getRaster();\n            return (int[]) raster.getDataElements(x, y, w, h, pixels);\n        }\n        return img.getRGB(x, y, w, h, pixels, 0, w);\n    }\n\n    private void setPixels(BufferedImage img, int x, int y, int w, int h, int[] pixels) {", "        if (imageType == BufferedImage.TYPE_INT_ARGB || imageType == BufferedImage.TYPE_INT_RGB) {\n            Raster raster = img.getRaster();\n            return (int[]) raster.getDataElements(x, y, w, h, pixels);\n        }\n        return img.getRGB(x, y, w, h, pixels, 0, w);\n    }\n\n    private void setPixels(BufferedImage img, int x, int y, int w, int h, int[] pixels) {\n        if (pixels == null || w == 0 || h == 0) {\n            return;\n        } else if (pixels.length < w * h) {\n            throw new IllegalArgumentException(\"pixels array must have a length\" + \" >= w*h\");\n        }\n        int imageType = img.getType();", "        if (pixels == null || w == 0 || h == 0) {\n            return;\n        } else if (pixels.length < w * h) {\n            throw new IllegalArgumentException(\"pixels array must have a length\" + \" >= w*h\");\n        }\n        int imageType = img.getType();\n        if (imageType == BufferedImage.TYPE_INT_ARGB || imageType == BufferedImage.TYPE_INT_RGB) {\n            WritableRaster raster = img.getRaster();\n            raster.setDataElements(x, y, w, h, pixels);\n        } else {\n            img.setRGB(x, y, w, h, pixels, 0, w);\n        }\n    }\n}"]}
{"filename": "src/main/java/raven/toast/util/NotificationHolder.java", "chunked_list": ["package raven.toast.util;\n\nimport raven.toast.Notifications;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class NotificationHolder {\n    private final List<Notifications.NotificationAnimation> lists = new ArrayList<>();\n    private final Object lock = new Object();\n", "    public int getHoldCount() {\n        return lists.size();\n    }\n\n    public Notifications.NotificationAnimation getHold(Notifications.Location location) {\n        synchronized (lock) {\n            for (int i = 0; i < lists.size(); i++) {\n                Notifications.NotificationAnimation n = lists.get(i);\n                if (n.getLocation() == location) {\n                    return n;\n                }\n            }\n            return null;\n        }\n    }\n", "                if (n.getLocation() == location) {\n                    return n;\n                }\n            }\n            return null;\n        }\n    }\n\n    public void removeHold(Notifications.NotificationAnimation notificationAnimation) {\n        synchronized (lock) {\n            lists.remove(notificationAnimation);\n        }\n    }\n", "    public void removeHold(Notifications.NotificationAnimation notificationAnimation) {\n        synchronized (lock) {\n            lists.remove(notificationAnimation);\n        }\n    }\n\n    public void hold(Notifications.NotificationAnimation notificationAnimation) {\n        synchronized (lock) {\n            lists.add(notificationAnimation);\n        }\n    }\n", "    public void clearHold() {\n        synchronized (lock) {\n            lists.clear();\n        }\n    }\n\n    public void clearHold(Notifications.Location location) {\n        synchronized (lock) {\n            for (int i = 0; i < lists.size(); i++) {\n                Notifications.NotificationAnimation n = lists.get(i);\n                if (n.getLocation() == location) {\n                    lists.remove(n);\n                    i--;\n                }\n            }\n        }\n    }\n}\n", "            for (int i = 0; i < lists.size(); i++) {\n                Notifications.NotificationAnimation n = lists.get(i);\n                if (n.getLocation() == location) {\n                    lists.remove(n);\n                    i--;\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/raven/toast/util/UIUtils.java", "chunked_list": ["package raven.toast.util;\n\nimport com.formdev.flatlaf.extras.FlatSVGIcon;\n\nimport javax.swing.*;\nimport java.awt.*;\n\n/**\n * @author Raven\n */\npublic class UIUtils {\n", " * @author Raven\n */\npublic class UIUtils {\n\n    public static Icon getIcon(String key, Icon defaultValue) {\n        Icon icon = UIManager.getIcon(key);\n        if (icon == null) {\n            return defaultValue;\n        }\n        return icon;\n    }\n", "    public static Insets getInsets(String key, Insets defaultValue) {\n        Insets insets = UIManager.getInsets(key);\n        if (insets == null) {\n            return defaultValue;\n        }\n        return insets;\n    }\n\n    public static String getString(String key, String defaultValue) {\n        String string = UIManager.getString(key);\n        if (string == null) {\n            return defaultValue;\n        }\n        return string;\n    }\n", "    public static String getString(String key, String defaultValue) {\n        String string = UIManager.getString(key);\n        if (string == null) {\n            return defaultValue;\n        }\n        return string;\n    }\n\n    public static Icon createIcon(String path, Color color, float scale) {\n        FlatSVGIcon icon = new FlatSVGIcon(path, scale);\n        if (color != null) {\n            FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();\n            colorFilter.add(new Color(150, 150, 150), color);\n            icon.setColorFilter(colorFilter);\n        }\n        return icon;\n    }\n}\n", "    public static Icon createIcon(String path, Color color, float scale) {\n        FlatSVGIcon icon = new FlatSVGIcon(path, scale);\n        if (color != null) {\n            FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();\n            colorFilter.add(new Color(150, 150, 150), color);\n            icon.setColorFilter(colorFilter);\n        }\n        return icon;\n    }\n}\n"]}
{"filename": "src/main/java/raven/toast/ui/ToastNotificationPanel.java", "chunked_list": ["package raven.toast.ui;\n\nimport com.formdev.flatlaf.FlatClientProperties;\nimport com.formdev.flatlaf.extras.FlatSVGIcon;\nimport raven.toast.Notifications;\nimport raven.toast.ToastClientProperties;\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class ToastNotificationPanel extends JPanel {\n\n    protected JWindow window;\n    protected JLabel labelIcon;\n    protected JTextPane textPane;\n\n    private Notifications.Type type;\n\n    public ToastNotificationPanel() {\n        installDefault();\n    }\n\n    private void installPropertyStyle() {\n        String key = getKey();\n        String outlineColor = toTextColor(getDefaultColor());\n        String outline = convertsKey(key, \"outlineColor\", outlineColor);\n        putClientProperty(FlatClientProperties.STYLE, \"\" +\n                \"background:\" + convertsKey(key, \"background\", \"$Panel.background\") + \";\" +\n                \"outlineColor:\" + outline + \";\" +\n                \"effectColor:\" + convertsKey(key, \"effectColor\", outline));\n    }\n\n    private String convertsKey(String key, String value, String defaultValue) {", "import java.awt.*;\n\npublic class ToastNotificationPanel extends JPanel {\n\n    protected JWindow window;\n    protected JLabel labelIcon;\n    protected JTextPane textPane;\n\n    private Notifications.Type type;\n\n    public ToastNotificationPanel() {\n        installDefault();\n    }\n\n    private void installPropertyStyle() {\n        String key = getKey();\n        String outlineColor = toTextColor(getDefaultColor());\n        String outline = convertsKey(key, \"outlineColor\", outlineColor);\n        putClientProperty(FlatClientProperties.STYLE, \"\" +\n                \"background:\" + convertsKey(key, \"background\", \"$Panel.background\") + \";\" +\n                \"outlineColor:\" + outline + \";\" +\n                \"effectColor:\" + convertsKey(key, \"effectColor\", outline));\n    }\n\n    private String convertsKey(String key, String value, String defaultValue) {", "        return \"if($Toast.\" + key + \".\" + value + \", $Toast.\" + key + \".\" + value + \", if($Toast.\" + value + \", $Toast.\" + value + \", \" + defaultValue + \"))\";\n    }\n\n    @Override\n    public void updateUI() {\n        setUI(new ToastPanelUI());\n        removeDialogBackground();\n    }\n\n    private void removeDialogBackground() {\n        if (window != null) {\n            Color bg = getBackground();\n            window.setBackground(new Color(bg.getRed(), bg.getGreen(), bg.getBlue(), 0));\n            window.setSize(getPreferredSize());\n        }\n    }\n\n    private void installDefault() {\n        labelIcon = new JLabel();\n        textPane = new JTextPane();\n        textPane.setText(\"Hello!\\nToast Notification\");\n        textPane.setOpaque(false);\n        textPane.setFocusable(false);\n        textPane.setCursor(Cursor.getDefaultCursor());\n        putClientProperty(ToastClientProperties.TOAST_ICON, labelIcon);\n        putClientProperty(ToastClientProperties.TOAST_COMPONENT, textPane);\n    }\n", "        if (window != null) {\n            Color bg = getBackground();\n            window.setBackground(new Color(bg.getRed(), bg.getGreen(), bg.getBlue(), 0));\n            window.setSize(getPreferredSize());\n        }\n    }\n\n    private void installDefault() {\n        labelIcon = new JLabel();\n        textPane = new JTextPane();\n        textPane.setText(\"Hello!\\nToast Notification\");\n        textPane.setOpaque(false);\n        textPane.setFocusable(false);\n        textPane.setCursor(Cursor.getDefaultCursor());\n        putClientProperty(ToastClientProperties.TOAST_ICON, labelIcon);\n        putClientProperty(ToastClientProperties.TOAST_COMPONENT, textPane);\n    }\n", "    public void set(Notifications.Type type, String message) {\n        this.type = type;\n        labelIcon.setIcon(getDefaultIcon());\n        textPane.setText(message);\n        installPropertyStyle();\n    }\n\n    public void setDialog(JWindow window) {\n        this.window = window;\n        removeDialogBackground();\n    }\n", "    public Color getDefaultColor() {\n        if (type == Notifications.Type.SUCCESS) {\n            return Color.decode(\"#2e7d32\");\n        } else if (type == Notifications.Type.INFO) {\n            return Color.decode(\"#0288d1\");\n        } else if (type == Notifications.Type.WARNING) {\n            return Color.decode(\"#ed6c02\");\n        } else {\n            return Color.decode(\"#d32f2f\");\n        }\n    }\n\n    private String toTextColor(Color color) {\n        return \"rgb(\" + color.getRed() + \",\" + color.getGreen() + \",\" + color.getBlue() + \")\";\n    }\n", "    public Icon getDefaultIcon() {\n        String key = getKey();\n        Icon icon = UIManager.getIcon(\"Toast.\" + key + \".icon\");\n        if (icon != null) {\n            return icon;\n        }\n        FlatSVGIcon svgIcon = new FlatSVGIcon(\"raven/toast/svg/\" + key + \".svg\");\n        FlatSVGIcon.ColorFilter colorFilter = new FlatSVGIcon.ColorFilter();\n        colorFilter.add(new Color(150, 150, 150), getDefaultColor());\n        svgIcon.setColorFilter(colorFilter);\n        return svgIcon;\n    }\n", "    public String getKey() {\n        if (type == Notifications.Type.SUCCESS) {\n            return \"success\";\n        } else if (type == Notifications.Type.INFO) {\n            return \"info\";\n        } else if (type == Notifications.Type.WARNING) {\n            return \"warning\";\n        } else {\n            return \"error\";\n        }\n    }\n}\n"]}
{"filename": "src/main/java/raven/toast/ui/ToastPanelUI.java", "chunked_list": ["package raven.toast.ui;\n\nimport static com.formdev.flatlaf.FlatClientProperties.*;\n\nimport com.formdev.flatlaf.FlatClientProperties;\nimport com.formdev.flatlaf.ui.FlatStylingSupport;\nimport com.formdev.flatlaf.ui.FlatStylingSupport.StyleableUI;\nimport com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;\nimport com.formdev.flatlaf.ui.FlatUIUtils;\nimport com.formdev.flatlaf.util.LoggingFacade;", "import com.formdev.flatlaf.ui.FlatUIUtils;\nimport com.formdev.flatlaf.util.LoggingFacade;\nimport com.formdev.flatlaf.util.UIScale;\n\nimport static raven.toast.ToastClientProperties.*;\n\nimport raven.toast.util.UIUtils;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;", "import javax.swing.*;\nimport javax.swing.border.Border;\nimport javax.swing.plaf.basic.BasicPanelUI;\nimport java.awt.*;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\nimport java.util.Map;\nimport java.util.function.Consumer;\n\npublic class ToastPanelUI extends BasicPanelUI implements StyleableUI, PropertyChangeListener {\n\n    protected JComponent iconComponent;\n    protected JComponent component;\n    protected JComponent closeButton;\n\n    @Styleable\n    protected int iconTextGap;\n    @Styleable\n    protected int closeButtonGap;\n    @Styleable\n    protected int minimumWidth;\n    @Styleable\n    protected int maximumWidth;\n    @Styleable\n    protected int arc;\n    @Styleable\n    protected int outlineWidth;\n    @Styleable\n    protected Color outlineColor;\n    @Styleable\n    protected boolean showCloseButton;\n    @Styleable\n    protected Color closeIconColor;\n    @Styleable\n    protected Insets margin;\n    @Styleable\n    protected Icon closeButtonIcon;\n\n    @Styleable\n    protected boolean useEffect;\n    @Styleable\n    protected Color effectColor;\n    @Styleable\n    protected float effectWidth;\n    @Styleable\n    protected float effectOpacity;\n    @Styleable\n    protected String effectAlignment;\n\n    private PanelNotificationLayout layout;\n    private Map<String, Object> oldStyleValues;\n\n    @Override", "\npublic class ToastPanelUI extends BasicPanelUI implements StyleableUI, PropertyChangeListener {\n\n    protected JComponent iconComponent;\n    protected JComponent component;\n    protected JComponent closeButton;\n\n    @Styleable\n    protected int iconTextGap;\n    @Styleable\n    protected int closeButtonGap;\n    @Styleable\n    protected int minimumWidth;\n    @Styleable\n    protected int maximumWidth;\n    @Styleable\n    protected int arc;\n    @Styleable\n    protected int outlineWidth;\n    @Styleable\n    protected Color outlineColor;\n    @Styleable\n    protected boolean showCloseButton;\n    @Styleable\n    protected Color closeIconColor;\n    @Styleable\n    protected Insets margin;\n    @Styleable\n    protected Icon closeButtonIcon;\n\n    @Styleable\n    protected boolean useEffect;\n    @Styleable\n    protected Color effectColor;\n    @Styleable\n    protected float effectWidth;\n    @Styleable\n    protected float effectOpacity;\n    @Styleable\n    protected String effectAlignment;\n\n    private PanelNotificationLayout layout;\n    private Map<String, Object> oldStyleValues;\n\n    @Override", "    public void installUI(JComponent c) {\n        super.installUI(c);\n        c.addPropertyChangeListener(this);\n        installIconComponent(c);\n        installComponent(c);\n        installCloseButton(c);\n        installStyle((JPanel) c);\n    }\n\n    @Override\n    public void uninstallUI(JComponent c) {\n        super.uninstallUI(c);\n        c.removePropertyChangeListener(this);\n        uninstallIconComponent(c);\n        uninstallComponent(c);\n        uninstallCloseButton(c);\n    }\n\n    @Override\n    protected void installDefaults(JPanel p) {\n        super.installDefaults(p);\n        String prefix = getPropertyPrefix();\n        iconTextGap = FlatUIUtils.getUIInt(prefix + \".iconTextGap\", 5);\n        closeButtonGap = FlatUIUtils.getUIInt(prefix + \".closeButtonGap\", 5);\n        minimumWidth = FlatUIUtils.getUIInt(prefix + \".minimumWidth\", 50);\n        maximumWidth = FlatUIUtils.getUIInt(prefix + \".maximumWidth\", -1);\n        arc = FlatUIUtils.getUIInt(prefix + \".arc\", 20);\n        outlineWidth = FlatUIUtils.getUIInt(prefix + \".outlineWidth\", 0);\n        outlineColor = FlatUIUtils.getUIColor(prefix + \".outlineColor\", \"Component.focusColor\");\n        margin = UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));\n        showCloseButton = FlatUIUtils.getUIBoolean(prefix + \".showCloseButton\", true);\n        closeIconColor = FlatUIUtils.getUIColor(prefix + \".closeIconColor\", new Color(150, 150, 150));\n        closeButtonIcon = UIUtils.getIcon(prefix + \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));\n        useEffect = FlatUIUtils.getUIBoolean(prefix + \".useEffect\", true);\n        effectColor = FlatUIUtils.getUIColor(prefix + \".effectColor\", \"Component.focusColor\");\n        effectWidth = FlatUIUtils.getUIFloat(prefix + \".effectWidth\", 0.5f);\n        effectOpacity = FlatUIUtils.getUIFloat(prefix + \".effectOpacity\", 0.2f);\n        effectAlignment = UIUtils.getString(prefix + \".effectAlignment\", \"left\");\n        p.setBackground(FlatUIUtils.getUIColor(prefix + \".background\", \"Panel.background\"));\n        p.setBorder(createDefaultBorder());\n        LookAndFeel.installProperty(p, \"opaque\", false);\n    }\n\n    @Override\n    protected void uninstallDefaults(JPanel p) {\n        super.uninstallDefaults(p);\n        oldStyleValues = null;\n    }\n\n    protected Border createDefaultBorder() {\n        Color color = FlatUIUtils.getUIColor(\"Toast.shadowColor\", new Color(0, 0, 0));\n        Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));\n        float shadowOpacity = FlatUIUtils.getUIFloat(\"Toast.shadowOpacity\", 0.1f);\n        return new DropShadowBorder(color, insets, shadowOpacity);\n    }\n\n    protected String getPropertyPrefix() {\n        return \"Toast\";\n    }\n\n    @Override", "    public void uninstallUI(JComponent c) {\n        super.uninstallUI(c);\n        c.removePropertyChangeListener(this);\n        uninstallIconComponent(c);\n        uninstallComponent(c);\n        uninstallCloseButton(c);\n    }\n\n    @Override\n    protected void installDefaults(JPanel p) {\n        super.installDefaults(p);\n        String prefix = getPropertyPrefix();\n        iconTextGap = FlatUIUtils.getUIInt(prefix + \".iconTextGap\", 5);\n        closeButtonGap = FlatUIUtils.getUIInt(prefix + \".closeButtonGap\", 5);\n        minimumWidth = FlatUIUtils.getUIInt(prefix + \".minimumWidth\", 50);\n        maximumWidth = FlatUIUtils.getUIInt(prefix + \".maximumWidth\", -1);\n        arc = FlatUIUtils.getUIInt(prefix + \".arc\", 20);\n        outlineWidth = FlatUIUtils.getUIInt(prefix + \".outlineWidth\", 0);\n        outlineColor = FlatUIUtils.getUIColor(prefix + \".outlineColor\", \"Component.focusColor\");\n        margin = UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));\n        showCloseButton = FlatUIUtils.getUIBoolean(prefix + \".showCloseButton\", true);\n        closeIconColor = FlatUIUtils.getUIColor(prefix + \".closeIconColor\", new Color(150, 150, 150));\n        closeButtonIcon = UIUtils.getIcon(prefix + \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));\n        useEffect = FlatUIUtils.getUIBoolean(prefix + \".useEffect\", true);\n        effectColor = FlatUIUtils.getUIColor(prefix + \".effectColor\", \"Component.focusColor\");\n        effectWidth = FlatUIUtils.getUIFloat(prefix + \".effectWidth\", 0.5f);\n        effectOpacity = FlatUIUtils.getUIFloat(prefix + \".effectOpacity\", 0.2f);\n        effectAlignment = UIUtils.getString(prefix + \".effectAlignment\", \"left\");\n        p.setBackground(FlatUIUtils.getUIColor(prefix + \".background\", \"Panel.background\"));\n        p.setBorder(createDefaultBorder());\n        LookAndFeel.installProperty(p, \"opaque\", false);\n    }\n\n    @Override\n    protected void uninstallDefaults(JPanel p) {\n        super.uninstallDefaults(p);\n        oldStyleValues = null;\n    }\n\n    protected Border createDefaultBorder() {\n        Color color = FlatUIUtils.getUIColor(\"Toast.shadowColor\", new Color(0, 0, 0));\n        Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));\n        float shadowOpacity = FlatUIUtils.getUIFloat(\"Toast.shadowOpacity\", 0.1f);\n        return new DropShadowBorder(color, insets, shadowOpacity);\n    }\n\n    protected String getPropertyPrefix() {\n        return \"Toast\";\n    }\n\n    @Override", "    public void propertyChange(PropertyChangeEvent e) {\n        switch (e.getPropertyName()) {\n            case TOAST_ICON: {\n                JPanel c = (JPanel) e.getSource();\n                uninstallIconComponent(c);\n                installIconComponent(c);\n                c.revalidate();\n                c.repaint();\n                break;\n            }\n            case TOAST_COMPONENT: {\n                JPanel c = (JPanel) e.getSource();\n                uninstallComponent(c);\n                installComponent(c);\n                c.revalidate();\n                c.repaint();\n                break;\n            }\n            case TOAST_SHOW_CLOSE_BUTTON: {\n                JPanel c = (JPanel) e.getSource();\n                uninstallCloseButton(c);\n                installCloseButton(c);\n                c.revalidate();\n                c.repaint();\n                break;\n            }\n            case STYLE:\n            case STYLE_CLASS: {\n                JPanel c = (JPanel) e.getSource();\n                installStyle(c);\n                c.revalidate();\n                c.repaint();\n                break;\n            }\n        }\n    }\n\n\n    private void installIconComponent(JComponent c) {\n        iconComponent = clientProperty(c, TOAST_ICON, null, JComponent.class);", "        if (iconComponent != null) {\n            installLayout(c);\n            c.add(iconComponent);\n        }\n    }\n\n\n    private void uninstallIconComponent(JComponent c) {\n        if (iconComponent != null) {\n            c.remove(iconComponent);\n            iconComponent = null;\n        }\n    }\n\n    private void installComponent(JComponent c) {\n        component = FlatClientProperties.clientProperty(c, TOAST_COMPONENT, null, JComponent.class);", "        if (iconComponent != null) {\n            c.remove(iconComponent);\n            iconComponent = null;\n        }\n    }\n\n    private void installComponent(JComponent c) {\n        component = FlatClientProperties.clientProperty(c, TOAST_COMPONENT, null, JComponent.class);\n        if (component != null) {\n            installLayout(c);\n            c.add(component);\n        }\n    }\n\n    private void uninstallComponent(JComponent c) {", "        if (component != null) {\n            installLayout(c);\n            c.add(component);\n        }\n    }\n\n    private void uninstallComponent(JComponent c) {\n        if (component != null) {\n            c.remove(component);\n            component = null;\n        }\n    }\n\n    private void installCloseButton(JComponent c) {", "        if (clientPropertyBoolean(c, TOAST_SHOW_CLOSE_BUTTON, showCloseButton)) {\n            closeButton = createCloseButton(c);\n            installLayout(c);\n            c.add(closeButton);\n        }\n    }\n\n    private void uninstallCloseButton(JComponent c) {\n        if (closeButton != null) {\n            c.remove(closeButton);\n            closeButton = null;\n        }\n    }\n\n    protected JComponent createCloseButton(JComponent c) {\n        JButton button = new JButton();\n        button.setFocusable(false);\n        button.setName(\"Toast.closeButton\");\n        button.putClientProperty(BUTTON_TYPE, BUTTON_TYPE_TOOLBAR_BUTTON);\n        button.putClientProperty(STYLE, \"\" +\n                \"arc:999\");\n        button.setIcon(closeButtonIcon);\n        button.addActionListener(e -> closeButtonClicked(c));\n        return button;\n    }\n\n    protected void closeButtonClicked(JComponent c) {\n        Object callback = c.getClientProperty(TOAST_CLOSE_CALLBACK);", "        if (closeButton != null) {\n            c.remove(closeButton);\n            closeButton = null;\n        }\n    }\n\n    protected JComponent createCloseButton(JComponent c) {\n        JButton button = new JButton();\n        button.setFocusable(false);\n        button.setName(\"Toast.closeButton\");\n        button.putClientProperty(BUTTON_TYPE, BUTTON_TYPE_TOOLBAR_BUTTON);\n        button.putClientProperty(STYLE, \"\" +\n                \"arc:999\");\n        button.setIcon(closeButtonIcon);\n        button.addActionListener(e -> closeButtonClicked(c));\n        return button;\n    }\n\n    protected void closeButtonClicked(JComponent c) {\n        Object callback = c.getClientProperty(TOAST_CLOSE_CALLBACK);", "        if (callback instanceof Runnable) {\n            ((Runnable) callback).run();\n        } else if (callback instanceof Consumer) {\n            ((Consumer) callback).accept(c);\n        }\n    }\n\n    public void installLayout(JComponent c) {\n        if (layout == null) {\n            layout = new PanelNotificationLayout();\n        }\n        c.setLayout(layout);\n    }\n\n\n    protected void installStyle(JPanel c) {", "        if (layout == null) {\n            layout = new PanelNotificationLayout();\n        }\n        c.setLayout(layout);\n    }\n\n\n    protected void installStyle(JPanel c) {\n        try {\n            applyStyle(c, FlatStylingSupport.getResolvedStyle(c, \"ToastPanel\"));\n        } catch (RuntimeException ex) {\n            LoggingFacade.INSTANCE.logSevere(null, ex);\n        }\n    }\n\n    protected void applyStyle(JPanel c, Object style) {\n        boolean oldShowCloseButton = showCloseButton;\n        oldStyleValues = FlatStylingSupport.parseAndApply(oldStyleValues, style, (key, value) -> applyStyleProperty(c, key, value));", "        try {\n            applyStyle(c, FlatStylingSupport.getResolvedStyle(c, \"ToastPanel\"));\n        } catch (RuntimeException ex) {\n            LoggingFacade.INSTANCE.logSevere(null, ex);\n        }\n    }\n\n    protected void applyStyle(JPanel c, Object style) {\n        boolean oldShowCloseButton = showCloseButton;\n        oldStyleValues = FlatStylingSupport.parseAndApply(oldStyleValues, style, (key, value) -> applyStyleProperty(c, key, value));\n        if (oldShowCloseButton != showCloseButton) {\n            uninstallCloseButton(c);\n            installCloseButton(c);\n        }\n    }\n\n    protected Object applyStyleProperty(JPanel c, String key, Object value) {\n        return FlatStylingSupport.applyToAnnotatedObjectOrComponent(this, c, key, value);\n    }\n\n    @Override\n    public Map<String, Class<?>> getStyleableInfos(JComponent c) {\n        return FlatStylingSupport.getAnnotatedStyleableInfos(this);\n    }\n\n    @Override", "        if (oldShowCloseButton != showCloseButton) {\n            uninstallCloseButton(c);\n            installCloseButton(c);\n        }\n    }\n\n    protected Object applyStyleProperty(JPanel c, String key, Object value) {\n        return FlatStylingSupport.applyToAnnotatedObjectOrComponent(this, c, key, value);\n    }\n\n    @Override\n    public Map<String, Class<?>> getStyleableInfos(JComponent c) {\n        return FlatStylingSupport.getAnnotatedStyleableInfos(this);\n    }\n\n    @Override", "    public Object getStyleableValue(JComponent c, String key) {\n        return FlatStylingSupport.getAnnotatedStyleableValue(this, key);\n    }\n\n    protected class PanelNotificationLayout implements LayoutManager {\n\n        @Override\n        public void addLayoutComponent(String name, Component comp) {\n\n        }\n\n        @Override", "        public void removeLayoutComponent(Component comp) {\n\n        }\n\n        @Override\n        public Dimension preferredLayoutSize(Container parent) {\n            synchronized (parent.getTreeLock()) {\n                Insets insets = FlatUIUtils.addInsets(parent.getInsets(), UIScale.scale(margin));\n                int width = insets.left + insets.right;\n                int height = 0;\n                int gap = 0;\n                int closeGap = 0;", "                if (iconComponent != null) {\n                    width += iconComponent.getPreferredSize().width;\n                    height = Math.max(height, iconComponent.getPreferredSize().height);\n                    gap = UIScale.scale(iconTextGap);\n                }\n                if (component != null) {\n                    width += gap;\n                    width += component.getPreferredSize().width;\n                    height = Math.max(height, component.getPreferredSize().height);\n                    closeGap = UIScale.scale(closeButtonGap);\n                }", "                if (closeButton != null) {\n                    width += closeGap;\n                    width += closeButton.getPreferredSize().width;\n                    height = Math.max(height, closeButton.getPreferredSize().height);\n                }\n                height += (insets.top + insets.bottom);\n                width = Math.max(minimumWidth, maximumWidth == -1 ? width : Math.min(maximumWidth, width));\n                return new Dimension(width, height);\n            }\n        }\n\n        @Override", "        public Dimension minimumLayoutSize(Container parent) {\n            synchronized (parent.getTreeLock()) {\n                return new Dimension(0, 0);\n            }\n        }\n\n        private int getMaxWidth(int insets) {\n            int width = Math.max(maximumWidth, minimumWidth) - insets;\n            if (iconComponent != null) {\n                width -= (iconComponent.getPreferredSize().width + UIScale.scale(iconTextGap));\n            }", "            if (iconComponent != null) {\n                width -= (iconComponent.getPreferredSize().width + UIScale.scale(iconTextGap));\n            }\n            if (closeButton != null) {\n                width -= (UIScale.scale(closeButtonGap) + closeButton.getPreferredSize().width);\n            }\n            return width;\n        }\n\n        @Override\n        public void layoutContainer(Container parent) {\n            synchronized (parent.getTreeLock()) {\n                Insets insets = FlatUIUtils.addInsets(parent.getInsets(), UIScale.scale(margin));\n                int x = insets.left;\n                int y = insets.top;\n                int height = 0;", "        public void layoutContainer(Container parent) {\n            synchronized (parent.getTreeLock()) {\n                Insets insets = FlatUIUtils.addInsets(parent.getInsets(), UIScale.scale(margin));\n                int x = insets.left;\n                int y = insets.top;\n                int height = 0;\n                if (iconComponent != null) {\n                    int iconW = iconComponent.getPreferredSize().width;\n                    int iconH = iconComponent.getPreferredSize().height;\n                    iconComponent.setBounds(x, y, iconW, iconH);\n                    x += iconW;\n                    height = iconH;\n                }", "                if (component != null) {\n                    int cW = maximumWidth == -1 ? component.getPreferredSize().width : Math.min(component.getPreferredSize().width, getMaxWidth(insets.left + insets.right));\n                    int cH = component.getPreferredSize().height;\n                    x += UIScale.scale(iconTextGap);\n                    component.setBounds(x, y, cW, cH);\n                    height = Math.max(height, cH);\n                }\n                if (closeButton != null) {\n                    int cW = closeButton.getPreferredSize().width;\n                    int cH = closeButton.getPreferredSize().height;\n                    int cX = parent.getWidth() - insets.right - cW;\n                    int cy = y + ((height - cH) / 2);\n                    closeButton.setBounds(cX, cy, cW, cH);\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/raven/toast/ui/DropShadowBorder.java", "chunked_list": ["package raven.toast.ui;\n\nimport com.formdev.flatlaf.FlatPropertiesLaf;\nimport com.formdev.flatlaf.ui.FlatStylingSupport.Styleable;\nimport com.formdev.flatlaf.ui.FlatUIUtils;\nimport com.formdev.flatlaf.util.UIScale;\nimport raven.toast.util.ShadowRenderer;\n\nimport javax.swing.*;\nimport javax.swing.border.EmptyBorder;", "import javax.swing.*;\nimport javax.swing.border.EmptyBorder;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\n\n/**\n * @author Raven\n */\npublic class DropShadowBorder extends EmptyBorder {\n\n    @Styleable\n    protected Color shadowColor;\n    @Styleable\n    protected Insets shadowInsets;\n    @Styleable\n    protected float shadowOpacity;\n\n    private Image shadowImage;\n    private int shadowSize;\n    private Color lastShadowColor;\n    private float lastShadowOpacity;\n    private int lastShadowSize;\n    private int lastArc;\n    private int lastWidth;\n    private int lastHeight;\n\n    public DropShadowBorder() {\n        this(new Color(0, 0, 0), new Insets(0, 0, 6, 6), 0.1f);\n    }\n\n    public DropShadowBorder(Color shadowColor, Insets shadowInsets, float shadowOpacity) {\n        super(nonNegativeInsets(shadowInsets));\n\n        this.shadowColor = shadowColor;\n        this.shadowInsets = shadowInsets;\n        this.shadowOpacity = shadowOpacity;\n\n        this.shadowSize = maxInset(shadowInsets);\n    }\n\n    private static Insets nonNegativeInsets(Insets shadowInsets) {\n        return new Insets(Math.max(shadowInsets.top, 0), Math.max(shadowInsets.left, 0), Math.max(shadowInsets.bottom, 0), Math.max(shadowInsets.right, 0));\n    }\n\n    private int maxInset(Insets shadowInsets) {\n        return Math.max(Math.max(shadowInsets.left, shadowInsets.right), Math.max(shadowInsets.top, shadowInsets.bottom));\n    }\n\n    @Override", "public class DropShadowBorder extends EmptyBorder {\n\n    @Styleable\n    protected Color shadowColor;\n    @Styleable\n    protected Insets shadowInsets;\n    @Styleable\n    protected float shadowOpacity;\n\n    private Image shadowImage;\n    private int shadowSize;\n    private Color lastShadowColor;\n    private float lastShadowOpacity;\n    private int lastShadowSize;\n    private int lastArc;\n    private int lastWidth;\n    private int lastHeight;\n\n    public DropShadowBorder() {\n        this(new Color(0, 0, 0), new Insets(0, 0, 6, 6), 0.1f);\n    }\n\n    public DropShadowBorder(Color shadowColor, Insets shadowInsets, float shadowOpacity) {\n        super(nonNegativeInsets(shadowInsets));\n\n        this.shadowColor = shadowColor;\n        this.shadowInsets = shadowInsets;\n        this.shadowOpacity = shadowOpacity;\n\n        this.shadowSize = maxInset(shadowInsets);\n    }\n\n    private static Insets nonNegativeInsets(Insets shadowInsets) {\n        return new Insets(Math.max(shadowInsets.top, 0), Math.max(shadowInsets.left, 0), Math.max(shadowInsets.bottom, 0), Math.max(shadowInsets.right, 0));\n    }\n\n    private int maxInset(Insets shadowInsets) {\n        return Math.max(Math.max(shadowInsets.left, shadowInsets.right), Math.max(shadowInsets.top, shadowInsets.bottom));\n    }\n\n    @Override", "    public Insets getBorderInsets() {\n        return UIScale.scale(super.getBorderInsets());\n    }\n\n    @Override\n    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n        JComponent com = (JComponent) c;\n        int arc = FlatPropertiesLaf.getStyleableValue(com, \"arc\");\n        boolean useEffect = FlatPropertiesLaf.getStyleableValue(com, \"useEffect\");\n        if (shadowImage == null || !shadowColor.equals(lastShadowColor) || width != lastWidth || height != lastHeight || shadowSize != lastShadowSize || shadowOpacity != lastShadowOpacity || arc != lastArc) {\n            shadowImage = createShadowImage(width, height, arc);\n\n            lastShadowColor = shadowColor;\n            lastWidth = width;\n            lastHeight = height;\n            lastShadowSize = shadowSize;\n            lastShadowOpacity = shadowOpacity;\n            lastArc = arc;\n        }\n        g.drawImage(shadowImage, 0, 0, null);\n        Insets insets = getBorderInsets();\n        int lx = insets.left;\n        int ly = insets.top;\n        int lw = width - (insets.left + insets.right);\n        int lh = height - (insets.top + insets.bottom);\n        Graphics2D g2 = (Graphics2D) g.create();", "        if (shadowImage == null || !shadowColor.equals(lastShadowColor) || width != lastWidth || height != lastHeight || shadowSize != lastShadowSize || shadowOpacity != lastShadowOpacity || arc != lastArc) {\n            shadowImage = createShadowImage(width, height, arc);\n\n            lastShadowColor = shadowColor;\n            lastWidth = width;\n            lastHeight = height;\n            lastShadowSize = shadowSize;\n            lastShadowOpacity = shadowOpacity;\n            lastArc = arc;\n        }\n        g.drawImage(shadowImage, 0, 0, null);\n        Insets insets = getBorderInsets();\n        int lx = insets.left;\n        int ly = insets.top;\n        int lw = width - (insets.left + insets.right);\n        int lh = height - (insets.top + insets.bottom);\n        Graphics2D g2 = (Graphics2D) g.create();", "        if (arc > 0) {\n            FlatUIUtils.setRenderingHints(g2);\n            g2.setColor(c.getBackground());\n            FlatUIUtils.paintComponentBackground(g2, lx, ly, lw, lh, 0, UIScale.scale(arc));\n        } else {\n            g2.setColor(c.getBackground());\n            g2.fillRect(lx, ly, lw, lh);\n        }\n        if (useEffect) {\n            createEffect(com, g2, lx, ly, lw, lh, arc);\n        }\n        int outlineWidth = FlatPropertiesLaf.getStyleableValue(com, \"outlineWidth\");", "        if (useEffect) {\n            createEffect(com, g2, lx, ly, lw, lh, arc);\n        }\n        int outlineWidth = FlatPropertiesLaf.getStyleableValue(com, \"outlineWidth\");\n        if (outlineWidth > 0) {\n            Color outlineColor = FlatPropertiesLaf.getStyleableValue(com, \"outlineColor\");\n            g2.setColor(outlineColor);\n            FlatUIUtils.paintOutline(g2, lx, ly, lw, lh, UIScale.scale(outlineWidth), UIScale.scale(arc));\n        }\n        g2.dispose();\n    }\n\n    private void createEffect(JComponent c, Graphics2D g2, int x, int y, int width, int height, int arc) {\n        Color effectColor = FlatPropertiesLaf.getStyleableValue(c, \"effectColor\");\n        float effectWidth = FlatPropertiesLaf.getStyleableValue(c, \"effectWidth\");\n        float effectOpacity = FlatPropertiesLaf.getStyleableValue(c, \"effectOpacity\");\n        boolean effectRight = FlatPropertiesLaf.getStyleableValue(c, \"effectAlignment\").equals(\"right\");", "        if (!effectRight) {\n            g2.setPaint(new GradientPaint(x, 0, effectColor, x + (width * effectWidth), 0, c.getBackground()));\n        } else {\n            g2.setPaint(new GradientPaint(x + width, 0, effectColor, x + width - (width * effectWidth), 0, c.getBackground()));\n        }\n        g2.setComposite(AlphaComposite.SrcOver.derive(effectOpacity));\n        if (arc > 0) {\n            FlatUIUtils.paintComponentBackground(g2, x, y, width, height, 0, UIScale.scale(arc));\n        } else {\n            g2.fillRect(x, y, width, height);\n        }\n        g2.setComposite(AlphaComposite.SrcOver);\n    }\n\n    private BufferedImage createShadowImage(int width, int height, int arc) {\n        int size = UIScale.scale(shadowSize);\n        float round = UIScale.scale(arc * 0.7f);\n        int shadowWidth = width - size * 2;\n        int shadowHeight = height - size * 2;\n        Shape shape = FlatUIUtils.createRoundRectanglePath(0, 0, shadowWidth, shadowHeight, round, round, round, round);\n        return new ShadowRenderer(size, shadowOpacity, shadowColor).createShadow(shape);\n    }\n}\n\n"]}
