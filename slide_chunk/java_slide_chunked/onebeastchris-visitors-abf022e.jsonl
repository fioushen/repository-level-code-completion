{"filename": "src/main/java/onebeastchris/visitors.java", "chunked_list": ["package onebeastchris;\n\nimport net.fabricmc.api.ModInitializer;\nimport onebeastchris.util.ConfigUtil;\nimport onebeastchris.util.Register;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class visitors implements ModInitializer {\n\t// This logger is used to write text to the console and the log file.\n\t// It is considered best practice to use your mod id as the logger's name.\n\t// That way, it's clear which mod wrote info, warnings, and errors.", "public class visitors implements ModInitializer {\n\t// This logger is used to write text to the console and the log file.\n\t// It is considered best practice to use your mod id as the logger's name.\n\t// That way, it's clear which mod wrote info, warnings, and errors.\n\tpublic static final Logger LOGGER = LoggerFactory.getLogger(\"visitors\");\n\n\tpublic static ConfigUtil config = new ConfigUtil();\n\n\n\n\t@Override", "\tpublic void onInitialize() {\n\t\t// This code runs as soon as Minecraft is in a mod-load-ready state.\n\t\t// However, some things (like resources) may still be uninitialized.\n\t\t// Proceed with mild caution.\n\n\n\t\tLOGGER.info(\"Loading visitors\");\n\t\tRegister.registerAll();\n\t}\n}"]}
{"filename": "src/main/java/onebeastchris/command/discordCommand.java", "chunked_list": ["package onebeastchris.command;\n\nimport com.mojang.brigadier.CommandDispatcher;\nimport com.mojang.brigadier.tree.LiteralCommandNode;\nimport net.minecraft.server.command.ServerCommandSource;\nimport net.minecraft.text.ClickEvent;\nimport net.minecraft.text.MutableText;\nimport net.minecraft.text.Text;\nimport net.minecraft.util.Formatting;\nimport onebeastchris.visitors;", "import net.minecraft.util.Formatting;\nimport onebeastchris.visitors;\n\nimport static net.minecraft.server.command.CommandManager.literal;\n\npublic class discordCommand {\n    public static LiteralCommandNode register(CommandDispatcher<ServerCommandSource> dispatcher) {\n        return dispatcher.register(\n                literal(\"discord\").executes(context -> {\n                    return discordCommand(context.getSource());\n                }));\n    }\n", "    public static int discordCommand(ServerCommandSource source) {\n        Text initialMessage = Text.of(visitors.config.getDiscordInviteMessage());\n        Text link = Text.of(\"[\" + visitors.config.getInviteLink() + \"]\");\n        MutableText mutableText = link.copy().styled((style) -> {\n            return style.withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL, visitors.config.getInviteLink()));\n        });\n        mutableText.setStyle(mutableText.getStyle().withColor(Formatting.GOLD));\n\n        source.sendFeedback(initialMessage, false);\n        source.sendFeedback(mutableText, false);\n\n        return 1;\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/util/PlayerInfoStorage.java", "chunked_list": ["package onebeastchris.util;\n\nimport net.minecraft.server.world.ServerWorld;\nimport net.minecraft.text.Text;\n\npublic class PlayerInfoStorage {\n    private final Text name;\n    private final ServerWorld world;\n    private final int[] position;\n\n    public PlayerInfoStorage(Text name, ServerWorld world, int[] position) {\n        this.name = name;\n        this.world = world;\n        this.position = position;\n    }\n", "    public Text getName() {\n        return name;\n    }\n\n    public ServerWorld getWorld() {\n        return world;\n    }\n\n    public int[] getPosition() {\n        return position;\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/util/Register.java", "chunked_list": ["package onebeastchris.util;\n\nimport net.fabricmc.fabric.api.command.v2.CommandRegistrationCallback;\nimport onebeastchris.command.discordCommand;\nimport onebeastchris.event.ServerJoinEvent;\nimport onebeastchris.event.ServerLeaveEvent;\nimport onebeastchris.event.Timer;\nimport onebeastchris.visitors;\n\npublic class Register {\n", "\npublic class Register {\n\n    public static void registerCommand() {\n        CommandRegistrationCallback.EVENT.register((dispatcher, registryAccess, environment) -> discordCommand.register(dispatcher));\n    }\n\n    public static void registerAll() {\n        ServerJoinEvent.register();\n        ServerLeaveEvent.register();\n        Timer.register();", "        if (!visitors.config.getInviteLink().equals(\"https://discord.gg/INVITE_LINK\") && visitors.config.getDiscordCommand()) {\n            registerCommand();\n        }\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/util/visitorsConfig.java", "chunked_list": ["package onebeastchris.util;\n\nimport org.spongepowered.configurate.objectmapping.ConfigSerializable;\nimport org.spongepowered.configurate.objectmapping.meta.Comment;\n\n@ConfigSerializable\n@SuppressWarnings(\"FieldMayBeFinal\")\npublic final class visitorsConfig {\n    @Comment(\"\"\"\n            Which Message to send to visitors upon joining the server; part 1 (gets looped).\n            \"\"\")\n    private String visitorWelcomeMessage1 = \"Welcome! Please apply in the discord to play.\";\n\n    @Comment(\"\"\"\n            Which Message to send to visitors upon joining the server; part 2 (gets looped)\n            \"\"\")\n    private String visitorWelcomeMessage2 = \"To get the discord invite link, type /discord.\";\n\n    @Comment(\"\"\"\n            Which Message to send to freshly whitelisted players. (only seen once by the player, and only seen when being whitelisted while the player is online)\"\"\")\n    private String memberWelcomeMessage = \"Welcome to the server!\";\n\n    @Comment(\"\"\"\n            Whether to enable the /discord command.\n            \"\"\")\n    private boolean discordCommand = true;\n\n    @Comment(\"\"\"\n            Which link to send to players when they use the /discord command.\n            \"\"\")\n    private String discordInviteLink = \"https://discord.gg/INVITE_LINK\";\n\n    @Comment(\"\"\"\n            Which message to send before the discord invite link when players use the /discord command.\n            \"\"\")\n    private String discordInviteMessage = \"Join this discord to apply in order to be able to play here:\";\n\n    @Comment(\"\"\"\n            If set to true, players are in adventure mode. If set to false, players are in spectator mode.\n            \"\"\")\n    private boolean useAdventureMode = false;\n", "    public String getWelcomeMemberMessage(){\n        return memberWelcomeMessage;\n    }\n\n    public String getWelcomeVisitorMessage1(){\n        return visitorWelcomeMessage1;\n    }\n\n    public String getWelcomeVisitorMessage2(){\n        return visitorWelcomeMessage2;\n    }\n", "    public String getWelcomeVisitorMessage2(){\n        return visitorWelcomeMessage2;\n    }\n\n    public boolean getDiscordCommand(){\n        return discordCommand;\n    }\n\n    public String getInviteLink(){\n        return discordInviteLink;\n    }\n", "    public String getInviteLink(){\n        return discordInviteLink;\n    }\n\n    public boolean getUseAdventureMode(){\n        return useAdventureMode;\n    }\n\n    public String getDiscordInviteMessage() {\n        return discordInviteMessage;\n    }\n}", "    public String getDiscordInviteMessage() {\n        return discordInviteMessage;\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/util/ConfigUtil.java", "chunked_list": ["package onebeastchris.util;\n\nimport net.fabricmc.loader.api.FabricLoader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.spongepowered.configurate.CommentedConfigurationNode;\nimport org.spongepowered.configurate.ConfigurateException;\nimport org.spongepowered.configurate.hocon.HoconConfigurationLoader;\n\n\npublic class ConfigUtil {\n    private static final Logger LOGGER = LoggerFactory.getLogger(\"visitors\");\n\n    private boolean discordCommand;\n    private String inviteLink;\n    //private boolean useCustomAdventure;\n    private String welcomeVisitorMessage1;\n    private String welcomeVisitorMessage2;\n\n    private String welcomeMemberMessage;\n\n    private String discordInviteMessage;\n\n    private boolean useAdventureMode;\n", "\n\npublic class ConfigUtil {\n    private static final Logger LOGGER = LoggerFactory.getLogger(\"visitors\");\n\n    private boolean discordCommand;\n    private String inviteLink;\n    //private boolean useCustomAdventure;\n    private String welcomeVisitorMessage1;\n    private String welcomeVisitorMessage2;\n\n    private String welcomeMemberMessage;\n\n    private String discordInviteMessage;\n\n    private boolean useAdventureMode;\n", "    public static visitorsConfig config;\n\n    public ConfigUtil() {\n        final HoconConfigurationLoader loader = HoconConfigurationLoader.builder()\n                .path(FabricLoader.getInstance().getConfigDir().resolve(\"visitors.conf\"))\n                .defaultOptions(opts -> opts.header(\"visitors config\"))\n                .prettyPrinting(true)\n                .build();\n\n        try {\n            final CommentedConfigurationNode node = loader.load();\n            config = node.get(visitorsConfig.class);\n            loader.save(node);\n        } catch (ConfigurateException e) {\n            LOGGER.warn(\"Could not load config!\");\n            e.printStackTrace();\n            return;\n        }\n\n        this.discordCommand = config.getDiscordCommand();\n        this.inviteLink = config.getInviteLink();\n        //this.useCustomAdventure = config.getUseCustomAdventure();\n        this.welcomeVisitorMessage1 = config.getWelcomeVisitorMessage1();\n        this.welcomeVisitorMessage2 = config.getWelcomeVisitorMessage2();\n        this.welcomeMemberMessage = config.getWelcomeMemberMessage();\n        this.discordInviteMessage = config.getDiscordInviteMessage();\n        this.useAdventureMode = config.getUseAdventureMode();\n    }\n", "        try {\n            final CommentedConfigurationNode node = loader.load();\n            config = node.get(visitorsConfig.class);\n            loader.save(node);\n        } catch (ConfigurateException e) {\n            LOGGER.warn(\"Could not load config!\");\n            e.printStackTrace();\n            return;\n        }\n\n        this.discordCommand = config.getDiscordCommand();\n        this.inviteLink = config.getInviteLink();\n        //this.useCustomAdventure = config.getUseCustomAdventure();\n        this.welcomeVisitorMessage1 = config.getWelcomeVisitorMessage1();\n        this.welcomeVisitorMessage2 = config.getWelcomeVisitorMessage2();\n        this.welcomeMemberMessage = config.getWelcomeMemberMessage();\n        this.discordInviteMessage = config.getDiscordInviteMessage();\n        this.useAdventureMode = config.getUseAdventureMode();\n    }\n", "    public boolean getDiscordCommand(){\n        return discordCommand;\n    }\n\n    public String getInviteLink(){\n        return inviteLink;\n    }\n\n    public boolean getUseAdventure(){\n        return useAdventureMode;\n    }\n", "    public boolean getUseAdventure(){\n        return useAdventureMode;\n    }\n\n    public String getWelcomeVisitorMessage1(){\n        return welcomeVisitorMessage1;\n    }\n\n    public String getWelcomeVisitorMessage2(){\n        return welcomeVisitorMessage2;\n    }\n", "    public String getWelcomeVisitorMessage2(){\n        return welcomeVisitorMessage2;\n    }\n\n    public String getWelcomeMemberMessage(){\n        return welcomeMemberMessage;\n    }\n\n    public String getDiscordInviteMessage(){\n        return discordInviteMessage;\n    }\n}", "    public String getDiscordInviteMessage(){\n        return discordInviteMessage;\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/util/PlayerDataUtil.java", "chunked_list": ["package onebeastchris.util;\n\nimport com.mojang.authlib.GameProfile;\nimport net.minecraft.server.network.ServerPlayerEntity;\nimport onebeastchris.event.ServerLeaveEvent;\n\nimport java.util.HashMap;\n\npublic class PlayerDataUtil {\n\n    public static HashMap<GameProfile, ServerPlayerEntity> visitorMap = new HashMap<>();\n", "public class PlayerDataUtil {\n\n    public static HashMap<GameProfile, ServerPlayerEntity> visitorMap = new HashMap<>();\n\n    public static void addVisitor(GameProfile gameProfile, ServerPlayerEntity player){\n        visitorMap.put(gameProfile, player);\n    }\n\n    public static void addPlayer(GameProfile gameProfile, ServerPlayerEntity player){\n        visitorMap.remove(gameProfile, null);\n        visitorMap.put(gameProfile, player);\n    }\n", "    public static void addPlayer(GameProfile gameProfile, ServerPlayerEntity player){\n        visitorMap.remove(gameProfile, null);\n        visitorMap.put(gameProfile, player);\n    }\n\n    public static void changeStatus(GameProfile gameProfile){\n        if (visitorMap.containsKey(gameProfile)) {\n            ServerLeaveEvent.onLeave(visitorMap.get(gameProfile), gameProfile);\n            visitorMap.remove(gameProfile);\n        }\n    }", "    public static boolean isVisitor(GameProfile gameProfile){\n        return visitorMap.containsKey(gameProfile);\n    }\n    public static void removeVisitor(GameProfile gameProfile){\n        visitorMap.remove(gameProfile);\n    }\n\n}"]}
{"filename": "src/main/java/onebeastchris/mixin/ServerConfigEntryMixin.java", "chunked_list": ["package onebeastchris.mixin;\n\nimport net.minecraft.server.ServerConfigEntry;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.gen.Invoker;\n\npublic class ServerConfigEntryMixin {\n    @Mixin(ServerConfigEntry.class)\n    public interface ServerConfigEntryInvoker<T> {\n        @Invoker\n        T callGetKey();\n    }\n}", "    public interface ServerConfigEntryInvoker<T> {\n        @Invoker\n        T callGetKey();\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/mixin/PlayerManagerMixin.java", "chunked_list": ["package onebeastchris.mixin;\n\nimport com.mojang.authlib.GameProfile;\nimport net.minecraft.server.PlayerManager;\nimport onebeastchris.util.PlayerDataUtil;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.*;\n@Mixin(PlayerManager.class)\npublic class PlayerManagerMixin {\n\n\t@Redirect(method = \"checkCanJoin\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/server/PlayerManager;isWhitelisted(Lcom/mojang/authlib/GameProfile;)Z\"))\n\tprivate boolean visitors$isWhitelisted(PlayerManager instance, GameProfile profile) {", "public class PlayerManagerMixin {\n\n\t@Redirect(method = \"checkCanJoin\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/server/PlayerManager;isWhitelisted(Lcom/mojang/authlib/GameProfile;)Z\"))\n\tprivate boolean visitors$isWhitelisted(PlayerManager instance, GameProfile profile) {\n\t\tif (!instance.isWhitelisted(profile)) {\n\t\t\tPlayerDataUtil.addVisitor(profile, null);\n\t\t}\n\t\treturn true;\n\t}\n}"]}
{"filename": "src/main/java/onebeastchris/mixin/ServerConfigListMixin.java", "chunked_list": ["package onebeastchris.mixin;\n\n\nimport com.mojang.authlib.GameProfile;\nimport net.minecraft.server.ServerConfigEntry;\nimport net.minecraft.server.ServerConfigList;\nimport net.minecraft.server.WhitelistEntry;\nimport onebeastchris.util.PlayerDataUtil;\nimport onebeastchris.visitors;\nimport org.spongepowered.asm.mixin.Mixin;", "import onebeastchris.visitors;\nimport org.spongepowered.asm.mixin.Mixin;\nimport org.spongepowered.asm.mixin.injection.At;\nimport org.spongepowered.asm.mixin.injection.Inject;\nimport org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n\n@Mixin(ServerConfigList.class)\npublic abstract class ServerConfigListMixin {\n\n    @Inject(method = \"add\", at = @At(\"TAIL\"))\n    private void add(ServerConfigEntry<?> entry, CallbackInfo ci) {", "            if (entry instanceof WhitelistEntry whitelistEntry) {\n                try {\n                GameProfile profile = ((ServerConfigEntryMixin.ServerConfigEntryInvoker<GameProfile>) whitelistEntry).callGetKey();\n                visitors.LOGGER.debug(\"WhitelistEntry: \" + profile.getName());\n                    PlayerDataUtil.changeStatus(profile);\n                } catch (Exception e) {\n                    visitors.LOGGER.error(\"Error getting GameProfile from WhitelistEntry\", e);\n                }\n            }\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/event/Timer.java", "chunked_list": ["package onebeastchris.event;\n\nimport net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;\nimport net.minecraft.server.network.ServerPlayerEntity;\nimport net.minecraft.text.Text;\nimport onebeastchris.util.PlayerDataUtil;\nimport onebeastchris.visitors;\n\npublic class Timer {\n    private static int ticks = 0;\n    public static void register() {\n        ServerTickEvents.END_SERVER_TICK.register(server -> {\n            ticks++;", "public class Timer {\n    private static int ticks = 0;\n    public static void register() {\n        ServerTickEvents.END_SERVER_TICK.register(server -> {\n            ticks++;\n            if (ticks == (20*5)){\n                sendMessageToVisitors(visitors.config.getWelcomeVisitorMessage1());\n            } else if (ticks == (20*10)){\n                sendMessageToVisitors(visitors.config.getWelcomeVisitorMessage2());\n                ticks = 0;\n            }\n        });\n    }", "    public static void sendMessageToVisitors(String message){\n        for (ServerPlayerEntity player : PlayerDataUtil.visitorMap.values()){\n            player.sendMessage(Text.of(message), true);\n        }\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/event/ServerJoinEvent.java", "chunked_list": ["package onebeastchris.event;\n\nimport com.mojang.authlib.GameProfile;\nimport net.fabricmc.fabric.api.networking.v1.ServerPlayConnectionEvents;\nimport net.minecraft.server.network.ServerPlayerEntity;\nimport net.minecraft.text.Text;\nimport net.minecraft.world.GameMode;\nimport onebeastchris.util.PlayerDataUtil;\nimport onebeastchris.util.PlayerInfoStorage;\nimport onebeastchris.visitors;", "import onebeastchris.util.PlayerInfoStorage;\nimport onebeastchris.visitors;\n\nimport java.util.HashMap;\n\npublic class ServerJoinEvent {\n\n    public static final HashMap<ServerPlayerEntity, PlayerInfoStorage> tempStorage = new HashMap<>();\n    public static void register() {\n        ServerPlayConnectionEvents.JOIN.register((handler, sender, server) -> {\n            ServerPlayerEntity player = handler.getPlayer().networkHandler.player;\n            GameProfile profile = player.getGameProfile();\n", "    public static void register() {\n        ServerPlayConnectionEvents.JOIN.register((handler, sender, server) -> {\n            ServerPlayerEntity player = handler.getPlayer().networkHandler.player;\n            GameProfile profile = player.getGameProfile();\n\n            if (PlayerDataUtil.isVisitor(profile)) {\n                if (PlayerDataUtil.isVisitor(profile)) {\n                    PlayerDataUtil.addPlayer(profile, player);\n\n                    tempStorage.put(player, new PlayerInfoStorage(\n                                    player.getCustomName(),\n                                    player.getWorld(),\n                                    new int[]{player.getBlockPos().getX(), player.getBlockPos().getY(), player.getBlockPos().getZ()})\n                    );\n", "                    if (visitors.config.getUseAdventure()) {\n                        player.changeGameMode(GameMode.ADVENTURE);\n                    } else {\n                        player.changeGameMode(GameMode.SPECTATOR);\n                    }\n                    player.setCustomName(Text.of(\"Visitor: \" + player.getGameProfile().getName()));\n                    player.setCustomNameVisible(true);\n\n                    //calling this once to ensure players see... something.\n                    player.sendMessage(Text.of(visitors.config.getWelcomeVisitorMessage1()), true);\n                }\n            }\n    });\n    }\n}"]}
{"filename": "src/main/java/onebeastchris/event/ServerLeaveEvent.java", "chunked_list": ["package onebeastchris.event;\n\nimport com.mojang.authlib.GameProfile;\nimport net.fabricmc.fabric.api.networking.v1.ServerPlayConnectionEvents;\nimport net.minecraft.server.network.ServerPlayerEntity;\nimport net.minecraft.text.Text;\nimport net.minecraft.world.GameMode;\nimport onebeastchris.util.PlayerDataUtil;\nimport onebeastchris.util.PlayerInfoStorage;\nimport onebeastchris.visitors;", "import onebeastchris.util.PlayerInfoStorage;\nimport onebeastchris.visitors;\n\n\npublic class ServerLeaveEvent {\n    public static void register() {\n        ServerPlayConnectionEvents.DISCONNECT.register((handler, server) -> {\n            ServerPlayerEntity player = handler.getPlayer().networkHandler.player;\n            GameProfile profile = player.getGameProfile();\n\n            if (PlayerDataUtil.isVisitor(profile)) {\n                    onLeave(player, profile);\n            }\n        });\n    }\n", "            if (PlayerDataUtil.isVisitor(profile)) {\n                    onLeave(player, profile);\n            }\n        });\n    }\n\n    public static void onLeave(ServerPlayerEntity player, GameProfile profile){\n        PlayerDataUtil.removeVisitor(profile);\n        PlayerInfoStorage storage = ServerJoinEvent.tempStorage.get(player);\n\n        int x = storage.getPosition()[0];\n        int y = storage.getPosition()[1];\n        int z = storage.getPosition()[2];\n\n        player.teleport(storage.getWorld(), x, y, z, 0, 0);\n        player.changeGameMode(GameMode.DEFAULT);\n        player.sendMessage(Text.of(visitors.config.getWelcomeMemberMessage()), true);\n        player.setCustomName(storage.getName());\n\n        PlayerDataUtil.removeVisitor(profile);\n        ServerJoinEvent.tempStorage.remove(player);\n    }\n}"]}
