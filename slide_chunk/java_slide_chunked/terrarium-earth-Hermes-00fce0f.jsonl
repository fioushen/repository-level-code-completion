{"filename": "forge/src/main/java/earth/terrarium/hermes/forge/HermesForge.java", "chunked_list": ["package earth.terrarium.hermes.forge;\n\nimport earth.terrarium.hermes.Hermes;\nimport net.minecraftforge.fml.common.Mod;\n\n@Mod(Hermes.MOD_ID)\npublic class HermesForge {\n    public HermesForge() {}\n}"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/Hermes.java", "chunked_list": ["package earth.terrarium.hermes;\n\npublic class Hermes {\n    public static final String MOD_ID = \"hermes\";\n}"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/utils/ElementParsingUtils.java", "chunked_list": ["package earth.terrarium.hermes.utils;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport net.minecraft.core.registries.BuiltInRegistries;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.world.entity.EntityType;\nimport net.minecraft.world.item.Item;\n\nimport java.util.Map;\n\npublic final class ElementParsingUtils {\n", "import java.util.Map;\n\npublic final class ElementParsingUtils {\n\n    public static ResourceLocation parseResourceLocation(Map<String, String> parameters, String key, ResourceLocation defaultValue) {\n        if (parameters.containsKey(key)) {\n            try {\n                return new ResourceLocation(parameters.get(key));\n            } catch (Exception e) {\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n", "    public static Color parseColor(Map<String, String> parameters, String key, Color defaultValue) {\n        if (parameters.containsKey(key)) {\n            try {\n                return Color.parse(parameters.get(key));\n            } catch (Exception e) {\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n", "    public static Item parseItem(Map<String, String> parameters, String key, Item defaultValue) {\n        if (parameters.containsKey(key)) {\n            try {\n                return BuiltInRegistries.ITEM.get(new ResourceLocation(parameters.get(key)));\n            } catch (Exception e) {\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n", "    public static EntityType<?> parseEntityType(Map<String, String> parameters, String key, EntityType<?> defaultValue) {\n        if (parameters.containsKey(key)) {\n            try {\n                return BuiltInRegistries.ENTITY_TYPE.get(new ResourceLocation(parameters.get(key)));\n            } catch (Exception e) {\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n", "    public static int parseInt(Map<String, String> parameters, String key, int defaultValue) {\n        if (parameters.containsKey(key)) {\n            try {\n                return Integer.parseInt(parameters.get(key));\n            } catch (Exception e) {\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n", "    public static boolean parseBoolean(Map<String, String> parameters, String key, boolean defaultValue) {\n        if (parameters.containsKey(key)) {\n            try {\n                return Boolean.parseBoolean(parameters.get(key));\n            } catch (Exception e) {\n                return defaultValue;\n            }\n        }\n        return defaultValue;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/client/DocumentWidget.java", "chunked_list": ["package earth.terrarium.hermes.client;\n\nimport com.teamresourceful.resourcefullib.client.utils.RenderUtils;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.client.gui.components.Renderable;\nimport net.minecraft.client.gui.components.events.AbstractContainerEventHandler;\nimport net.minecraft.client.gui.components.events.GuiEventListener;", "import net.minecraft.client.gui.components.events.AbstractContainerEventHandler;\nimport net.minecraft.client.gui.components.events.GuiEventListener;\nimport net.minecraft.util.Mth;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DocumentWidget extends AbstractContainerEventHandler implements Renderable {\n\n    private final List<TagElement> elements = new ArrayList<>();\n    private final Theme theme;\n\n    private final int x;\n    private final int y;\n    private final int width;\n    private final int height;\n\n    private double scrollAmount;\n    private int lastFullHeight;\n\n    //We have to defer the mouse click until during render because we don't know the height of the document until then.\n    private DocumentMouse mouse = null;\n\n    public DocumentWidget(int x, int y, int width, int height, Theme theme, List<TagElement> elements) {\n        this.x = x;\n        this.y = y;\n        this.width = width - 6;\n        this.height = height - 6;\n        this.lastFullHeight = this.height;\n        this.theme = theme;\n        this.elements.addAll(elements);\n    }\n\n    @Override", "public class DocumentWidget extends AbstractContainerEventHandler implements Renderable {\n\n    private final List<TagElement> elements = new ArrayList<>();\n    private final Theme theme;\n\n    private final int x;\n    private final int y;\n    private final int width;\n    private final int height;\n\n    private double scrollAmount;\n    private int lastFullHeight;\n\n    //We have to defer the mouse click until during render because we don't know the height of the document until then.\n    private DocumentMouse mouse = null;\n\n    public DocumentWidget(int x, int y, int width, int height, Theme theme, List<TagElement> elements) {\n        this.x = x;\n        this.y = y;\n        this.width = width - 6;\n        this.height = height - 6;\n        this.lastFullHeight = this.height;\n        this.theme = theme;\n        this.elements.addAll(elements);\n    }\n\n    @Override", "    public void render(@NotNull GuiGraphics graphics, int mouseX, int mouseY, float partialTicks) {\n        int x = this.x;\n        int y = this.y;\n\n        int fullHeight = 0;\n        try (var ignored = RenderUtils.createScissor(Minecraft.getInstance(), graphics, x, y, width, height)) {\n            for (TagElement element : this.elements) {\n                if (this.mouse != null && element.mouseClicked(this.mouse.x() - x, this.mouse.y() - (y - this.scrollAmount), this.mouse.button(), this.width)) {\n                    this.mouse = null;\n                }\n                element.render(this.theme, graphics, x, y - (int) this.scrollAmount, this.width, mouseX, mouseY, this.isMouseOver(mouseX, mouseY), partialTicks);\n                var itemheight = element.getHeight(this.width);\n                y += itemheight;\n                fullHeight += itemheight;\n            }\n            this.mouse = null;\n            this.lastFullHeight = fullHeight;\n        }\n        this.scrollAmount = Mth.clamp(this.scrollAmount, 0.0D, Math.max(0, this.lastFullHeight - this.height));\n    }\n\n    @Override", "    public boolean mouseScrolled(double mouseX, double mouseY, double scrollAmount) {\n        this.scrollAmount = Mth.clamp(this.scrollAmount - scrollAmount * 10, 0.0D, Math.max(0, this.lastFullHeight - this.height));\n        return true;\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button) {\n        if (isMouseOver(mouseX, mouseY)) {\n            this.mouse = new DocumentMouse(mouseX, mouseY, button);\n        }\n        return false;\n    }\n\n    @Override", "    public boolean isMouseOver(double mouseX, double mouseY) {\n        return mouseX >= this.x && mouseX <= this.x + this.width && mouseY >= this.y && mouseY <= this.y + this.height;\n    }\n\n    @Override\n    public @NotNull List<? extends GuiEventListener> children() {\n        return List.of();\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/client/DocumentMouse.java", "chunked_list": ["package earth.terrarium.hermes.client;\n\npublic record DocumentMouse(double x, double y, int button) {\n\n\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/TagElementSerializer.java", "chunked_list": ["package earth.terrarium.hermes.api;\n\nimport java.util.Map;\n\n@FunctionalInterface\npublic interface TagElementSerializer {\n\n    TagElement deserialize(Map<String, String> parameters);\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/TagProvider.java", "chunked_list": ["package earth.terrarium.hermes.api;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport org.xml.sax.SAXException;\n\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;", "import javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class TagProvider {\n\n    private final Map<String, TagElementSerializer> serializers = new HashMap<>();\n", "import java.util.Map;\n\npublic class TagProvider {\n\n    private final Map<String, TagElementSerializer> serializers = new HashMap<>();\n\n    public void addSerializer(String tag, TagElementSerializer serializer) {\n        this.serializers.put(tag, serializer);\n    }\n\n    public List<TagElement> parse(String text) {", "        try {\n            InputStream stream = new ByteArrayInputStream((\"<root>\" + text + \"</root>\").getBytes());\n            Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(stream);\n            Node root = document.getChildNodes().item(0);\n            root.normalize();\n            return nodeToElements(root);\n        } catch (ParserConfigurationException | SAXException | IOException e) {\n            throw new TagParseException(\"Failed to parse tag text\", e);\n        }\n    }\n\n    private List<TagElement> nodeToElements(Node node) {\n        List<TagElement> elements = new ArrayList<>();", "        for (int i = 0; i < node.getChildNodes().getLength(); i++) {\n            Node child = node.getChildNodes().item(i);\n            if (child.getNodeType() == Node.ELEMENT_NODE) {\n                TagElementSerializer serializer = serializers.get(child.getNodeName());\n                if (serializer != null) {\n                    TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));\n                    if (element != null) {\n                        elements.add(element);\n                        int elementNodes = getLengthOfType(child, Node.ELEMENT_NODE);\n                        if (elementNodes > 0) {\n                            nodeToElements(child).forEach(element::addChild);\n                        } else {\n                            String text = child.getTextContent();", "                        if (elementNodes > 0) {\n                            nodeToElements(child).forEach(element::addChild);\n                        } else {\n                            String text = child.getTextContent();\n                            if (StringUtils.isNotBlank(text)) {\n                                element.setContent(text);\n                            }\n                        }\n                    }\n                } else {\n                    throw new TagParseException(\"Unknown tag: \" + child.getNodeName());\n                }\n            }\n        }\n        return elements;\n    }\n\n    private int getLengthOfType(Node node, short type) {\n        int length = 0;", "        for (int i = 0; i < node.getChildNodes().getLength(); i++) {\n            Node child = node.getChildNodes().item(i);\n            if (child.getNodeType() == type) {\n                length += child.getTextContent().length();\n            }\n        }\n        return length;\n    }\n\n    private Map<String, String> mapAttributes(NamedNodeMap map) {\n        Map<String, String> attributes = new HashMap<>();", "        for (int i = 0; i < map.getLength(); i++) {\n            Node attribute = map.item(i);\n            attributes.put(attribute.getNodeName(), attribute.getNodeValue());\n        }\n        return attributes;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/DefaultTagProvider.java", "chunked_list": ["package earth.terrarium.hermes.api;\n\nimport earth.terrarium.hermes.api.defaults.*;\nimport earth.terrarium.hermes.api.defaults.carousel.CarouselItemTagElement;\nimport earth.terrarium.hermes.api.defaults.carousel.CarouselTagElement;\nimport earth.terrarium.hermes.api.defaults.columns.ColumnTagElement;\nimport earth.terrarium.hermes.api.defaults.columns.ColumnsTagElement;\nimport earth.terrarium.hermes.api.defaults.lists.ListItemTagElement;\nimport earth.terrarium.hermes.api.defaults.lists.OrderedListTagElement;\nimport earth.terrarium.hermes.api.defaults.lists.UnorderedListTagElement;", "import earth.terrarium.hermes.api.defaults.lists.OrderedListTagElement;\nimport earth.terrarium.hermes.api.defaults.lists.UnorderedListTagElement;\n\npublic class DefaultTagProvider extends TagProvider {\n\n    public DefaultTagProvider() {\n        addSerializer(\"p\", ParagraphTagElement::new);\n        addSerializer(\"h1\", HeadingOneTagElement::new);\n        addSerializer(\"h2\", HeadingTwoTagElement::new);\n        addSerializer(\"img\", ImageTagElement::new);\n        addSerializer(\"carousel\", CarouselTagElement::new);\n        addSerializer(\"carousel-item\", CarouselItemTagElement::new);\n        addSerializer(\"br\", BreakLineTagElement::new);\n        addSerializer(\"blockquote\", BlockquoteTagElement::new);\n        addSerializer(\"component\", ComponentTagElement::new);\n        addSerializer(\"hint\", HintTagElement::new);\n        addSerializer(\"crafting-recipe\", CraftingRecipeTagElement::new);\n        addSerializer(\"details\", DetailsTagElement::new);\n        addSerializer(\"entity\", EntityTagElement::new);\n        addSerializer(\"hr\", HorizontalRuleTagElement::new);\n        addSerializer(\"ul\", UnorderedListTagElement::new);\n        addSerializer(\"ol\", OrderedListTagElement::new);\n        addSerializer(\"li\", ListItemTagElement::new);\n        addSerializer(\"columns\", ColumnsTagElement::new);\n        addSerializer(\"column\", ColumnTagElement::new);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/TagElement.java", "chunked_list": ["package earth.terrarium.hermes.api;\n\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.List;\n\npublic interface TagElement {\n\n    /**\n     * Renders the element.\n     *\n     * @param theme        The theme.\n     * @param graphics     The graphics.\n     * @param x            The x position.\n     * @param y            The y position.\n     * @param width        The width.\n     * @param mouseX       The mouse x position.\n     * @param mouseY       The mouse y position.\n     * @param hovered      Whether the element is hovered, use this along with mouse position to determine if the mouse is hovering over the element,\n     *                     as the mouse can be outside the screen space but have the correct position.\n     * @param partialTicks The partial ticks.\n     */\n    default void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n\n    }\n\n    default int getHeight(int width) {\n        return 0;\n    }\n\n    default boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        return false;\n    }\n\n    default void setContent(String content) {\n        throw new UnsupportedOperationException();\n    }\n\n    default void addChild(TagElement element) {\n        throw new UnsupportedOperationException();\n    }\n\n    @NotNull\n    default List<TagElement> getChildren() {\n        return List.of();\n    }\n}\n", "public interface TagElement {\n\n    /**\n     * Renders the element.\n     *\n     * @param theme        The theme.\n     * @param graphics     The graphics.\n     * @param x            The x position.\n     * @param y            The y position.\n     * @param width        The width.\n     * @param mouseX       The mouse x position.\n     * @param mouseY       The mouse y position.\n     * @param hovered      Whether the element is hovered, use this along with mouse position to determine if the mouse is hovering over the element,\n     *                     as the mouse can be outside the screen space but have the correct position.\n     * @param partialTicks The partial ticks.\n     */\n    default void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n\n    }\n\n    default int getHeight(int width) {\n        return 0;\n    }\n\n    default boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        return false;\n    }\n\n    default void setContent(String content) {\n        throw new UnsupportedOperationException();\n    }\n\n    default void addChild(TagElement element) {\n        throw new UnsupportedOperationException();\n    }\n\n    @NotNull\n    default List<TagElement> getChildren() {\n        return List.of();\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/TagParseException.java", "chunked_list": ["package earth.terrarium.hermes.api;\n\npublic class TagParseException extends RuntimeException {\n\n    public TagParseException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public TagParseException(String message) {\n        super(message);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/BlockquoteTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport com.teamresourceful.resourcefullib.common.color.ConstantColors;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class BlockquoteTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    private final Color color;\n\n    public BlockquoteTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.white);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        graphics.fill(x + 3, y, x + width, y + getHeight(width) - 2, 0x80000000);\n        graphics.fill(x, y, x + 3, y + getHeight(width) - 2, this.color.getValue() | 0xFF000000);\n        int height = 2;\n        for (TagElement element : this.children) {\n            element.render(theme, graphics, x + 7, y + height, width - 7, mouseX, mouseY, hovered, partialTicks);\n            height += element.getHeight(width);\n        }\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int height = 2;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height + 4;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        if (!(element instanceof TextTagElement)) {\n            throw new IllegalArgumentException(\"Blockquote elements can only contain text elements.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n", "    public void addChild(TagElement element) {\n        if (!(element instanceof TextTagElement)) {\n            throw new IllegalArgumentException(\"Blockquote elements can only contain text elements.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/HeadingTwoTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.client.CloseablePoseStack;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.util.FormattedCharSequence;\n\nimport java.util.Map;", "\nimport java.util.Map;\n\npublic class HeadingTwoTagElement extends TextTagElement {\n\n    public HeadingTwoTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        try (var ignored = new CloseablePoseStack(graphics)) {\n            graphics.pose().scale(2, 2, 2);\n            graphics.pose().translate(-x / 2f, -y / 2f, 0);\n            Component text = Component.nullToEmpty(this.content);\n            int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        try (var ignored = new CloseablePoseStack(graphics)) {\n            graphics.pose().scale(2, 2, 2);\n            graphics.pose().translate(-x / 2f, -y / 2f, 0);\n            Component text = Component.nullToEmpty(this.content);\n            int height = 0;\n            for (FormattedCharSequence sequence : Minecraft.getInstance().font.split(text, width - 10)) {\n                graphics.drawString(\n                    Minecraft.getInstance().font,\n                    sequence, x + 2, y + height, this.color.getValue(),\n                    false\n                );\n                height += Minecraft.getInstance().font.lineHeight + 1;\n            }\n        }\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int lines = Minecraft.getInstance().font.split(Component.nullToEmpty(this.content), width - 10).size();\n        return lines * (Minecraft.getInstance().font.lineHeight + 1) * 2;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/HintTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport com.teamresourceful.resourcefullib.common.color.ConstantColors;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.world.item.Item;", "import net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.world.item.Item;\nimport net.minecraft.world.item.Items;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class HintTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    private final Color color;\n    private final Item icon;\n    private final String title;\n\n    public HintTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.white);\n        this.icon = ElementParsingUtils.parseItem(parameters, \"icon\", Items.AIR);\n        this.title = parameters.getOrDefault(\"title\", \"\");\n    }\n\n    @Override", "\npublic class HintTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    private final Color color;\n    private final Item icon;\n    private final String title;\n\n    public HintTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.white);\n        this.icon = ElementParsingUtils.parseItem(parameters, \"icon\", Items.AIR);\n        this.title = parameters.getOrDefault(\"title\", \"\");\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        graphics.fill(x, y, x + width, y + 20, this.color.getValue() | 0x80000000);\n        graphics.fill(x, y + 20, x + width, y + getHeight(width), 0x80000000);\n        graphics.renderOutline(x, y, width, getHeight(width), this.color.getValue() | 0xFF000000);\n        graphics.drawString(\n            Minecraft.getInstance().font,\n            this.title, x + 22, y + 6, 0xFFFFFF,\n            false\n        );\n        int height = 23;\n        for (TagElement element : this.children) {\n            element.render(theme, graphics, x + 7, y + height, width - 7, mouseX, mouseY, hovered, partialTicks);\n            height += element.getHeight(width);\n        }\n        graphics.renderItem(this.icon.getDefaultInstance(), x + 2, y + 2);\n    }\n\n    @Override", "        for (TagElement element : this.children) {\n            element.render(theme, graphics, x + 7, y + height, width - 7, mouseX, mouseY, hovered, partialTicks);\n            height += element.getHeight(width);\n        }\n        graphics.renderItem(this.icon.getDefaultInstance(), x + 2, y + 2);\n    }\n\n    @Override\n    public int getHeight(int width) {\n        int height = 20;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height + 4;\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int height = 20;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height + 4;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        if (!(element instanceof TextTagElement)) {\n            throw new IllegalArgumentException(\"Hint elements can only contain text elements.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n", "    public void addChild(TagElement element) {\n        if (!(element instanceof TextTagElement)) {\n            throw new IllegalArgumentException(\"Hint elements can only contain text elements.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/DetailsTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DetailsTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    private final String summary;\n\n    private boolean open;\n\n    public DetailsTagElement(Map<String, String> parameters) {\n        this.summary = parameters.getOrDefault(\"summary\", \"\");\n        this.open = ElementParsingUtils.parseBoolean(parameters, \"open\", false);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        String text = (this.summary.isEmpty() ? \"Details\" : this.summary);\n        boolean dropdownHovered = hovered && mouseX >= x && mouseX <= x + width && mouseY >= y && mouseY <= y + 22;\n        theme.drawDropdown(graphics, x, y + 2, width, dropdownHovered, open, text);\n        if (open) {\n            int height = 24;\n            for (TagElement element : this.children) {\n                element.render(theme, graphics, x + 7, y + height, width - 7, mouseX, mouseY, hovered, partialTicks);\n                height += element.getHeight(width);\n            }\n        }\n    }\n\n    @Override", "    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        if (mouseX < 0 || mouseX > width || mouseY < 0 || mouseY > 22) {\n            mouseY -= 22;\n            for (TagElement child : this.children) {\n                if (child.mouseClicked(mouseX, mouseY, button, width)) {\n                    return true;\n                }\n                mouseY -= child.getHeight(width);\n            }\n            return false;\n        }\n        this.open = !this.open;\n        return true;\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int height = 24;\n        if (!open) return height;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height + 2;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n", "    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/TextTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport earth.terrarium.hermes.api.TagElement;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.util.FormattedCharSequence;\n\nimport java.util.Map;\n\npublic abstract class TextTagElement implements TagElement {\n\n    protected String content = \"\";\n    protected boolean bold;\n    protected boolean italic;\n    protected boolean underline;\n    protected boolean strikethrough;\n    protected boolean obfuscated;\n    protected boolean centered;\n    protected boolean shadowed;\n    protected Color color;\n\n    protected TextTagElement(Map<String, String> parameters) {\n        this.bold = parameters.containsKey(\"bold\") && Boolean.parseBoolean(parameters.get(\"bold\"));\n        this.italic = parameters.containsKey(\"italic\") && Boolean.parseBoolean(parameters.get(\"italic\"));\n        this.underline = parameters.containsKey(\"underline\") && Boolean.parseBoolean(parameters.get(\"underline\"));\n        this.strikethrough = parameters.containsKey(\"strikethrough\") && Boolean.parseBoolean(parameters.get(\"strikethrough\"));\n        this.obfuscated = parameters.containsKey(\"obfuscated\") && Boolean.parseBoolean(parameters.get(\"obfuscated\"));\n        this.centered = parameters.containsKey(\"centered\") && Boolean.parseBoolean(parameters.get(\"centered\"));\n        this.shadowed = parameters.containsKey(\"shadowed\") && Boolean.parseBoolean(parameters.get(\"shadowed\"));", "\npublic abstract class TextTagElement implements TagElement {\n\n    protected String content = \"\";\n    protected boolean bold;\n    protected boolean italic;\n    protected boolean underline;\n    protected boolean strikethrough;\n    protected boolean obfuscated;\n    protected boolean centered;\n    protected boolean shadowed;\n    protected Color color;\n\n    protected TextTagElement(Map<String, String> parameters) {\n        this.bold = parameters.containsKey(\"bold\") && Boolean.parseBoolean(parameters.get(\"bold\"));\n        this.italic = parameters.containsKey(\"italic\") && Boolean.parseBoolean(parameters.get(\"italic\"));\n        this.underline = parameters.containsKey(\"underline\") && Boolean.parseBoolean(parameters.get(\"underline\"));\n        this.strikethrough = parameters.containsKey(\"strikethrough\") && Boolean.parseBoolean(parameters.get(\"strikethrough\"));\n        this.obfuscated = parameters.containsKey(\"obfuscated\") && Boolean.parseBoolean(parameters.get(\"obfuscated\"));\n        this.centered = parameters.containsKey(\"centered\") && Boolean.parseBoolean(parameters.get(\"centered\"));\n        this.shadowed = parameters.containsKey(\"shadowed\") && Boolean.parseBoolean(parameters.get(\"shadowed\"));", "        if (parameters.containsKey(\"color\")) {\n            try {\n                this.color = Color.parse(parameters.get(\"color\"));\n            } catch (Exception e) {\n                this.color = Color.DEFAULT;\n            }\n        } else {\n            this.color = Color.DEFAULT;\n        }\n    }\n\n    @Override", "    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public int getXOffset(int x, int width, FormattedCharSequence text) {\n        return this.centered ? x + (width - Minecraft.getInstance().font.width(text)) / 2 : x;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/HorizontalRuleTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport com.teamresourceful.resourcefullib.common.color.ConstantColors;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.gui.GuiGraphics;\n\nimport java.util.Map;", "\nimport java.util.Map;\n\npublic class HorizontalRuleTagElement implements TagElement {\n\n    protected final Color color;\n\n    public HorizontalRuleTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.gray);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        graphics.fill(x, y + 4, x + width, y + 5, this.color.getValue() | 0xFF000000);\n    }\n\n    @Override\n    public int getHeight(int width) {\n        return 10;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/CraftingRecipeTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.client.utils.ScreenUtils;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.util.Mth;", "import net.minecraft.resources.ResourceLocation;\nimport net.minecraft.util.Mth;\nimport net.minecraft.world.item.ItemStack;\nimport net.minecraft.world.item.crafting.Ingredient;\nimport net.minecraft.world.item.crafting.Recipe;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.Map;\n\npublic class CraftingRecipeTagElement implements TagElement {\n\n    protected ResourceLocation id;\n    private final int gridWidth;\n\n    public CraftingRecipeTagElement(Map<String, String> parameters) {\n        this.id = ElementParsingUtils.parseResourceLocation(parameters, \"id\", null);\n        this.gridWidth = ElementParsingUtils.parseInt(parameters, \"grid-width\", 3);\n    }\n\n    @Override", "\npublic class CraftingRecipeTagElement implements TagElement {\n\n    protected ResourceLocation id;\n    private final int gridWidth;\n\n    public CraftingRecipeTagElement(Map<String, String> parameters) {\n        this.id = ElementParsingUtils.parseResourceLocation(parameters, \"id\", null);\n        this.gridWidth = ElementParsingUtils.parseInt(parameters, \"grid-width\", 3);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        y += 1;\n\n        int gridSize = this.gridWidth * 18;\n        int actualWidth = 5 + gridSize + 5 + 22 + 5 + 18 + 5;\n        int actualHeight = gridSize + 10;\n\n        x = x + (width - actualWidth) / 2;\n\n        theme.drawCraftingBackground(graphics, x, y, actualWidth, actualHeight);\n\n        Recipe<?> recipe = getRecipe();", "        if (recipe == null) return;\n\n        int xIndex = 0;\n        int yIndex = 0;\n\n        for (int i = 0; i < this.gridWidth * this.gridWidth; i++) {\n            if (xIndex >= this.gridWidth) {\n                xIndex = 0;\n                yIndex++;\n            }\n\n            boolean slotHovered = hovered && mouseX >= x + 5 + xIndex * 18 && mouseX <= x + 21 + xIndex * 18 && mouseY >= y + 5 + yIndex * 18 && mouseY <= y + 21 + yIndex * 18;\n\n            theme.drawSlot(graphics, x + 5 + xIndex * 18, y + 5 + yIndex * 18, slotHovered);\n", "            if (i < recipe.getIngredients().size()) {\n                Ingredient ingredient = recipe.getIngredients().get(i);\n                if (!ingredient.isEmpty()) {\n                    ItemStack[] stacks = ingredient.getItems();\n                    int index = Mth.floor(System.currentTimeMillis() / 1000f) % 100000;\n                    ItemStack stack = stacks[index % stacks.length];\n\n                    int slotX = x + 6 + xIndex * 18;\n                    int slotY = y + 6 + yIndex * 18;\n                    if (slotHovered) {\n                        ScreenUtils.setTooltip(stack);\n                    }\n                    graphics.renderItem(stack, slotX, slotY);\n                    graphics.renderItemDecorations(Minecraft.getInstance().font, stack, slotX, slotY);\n                }\n            }\n            xIndex++;\n        }\n\n        theme.drawArrow(graphics, x + 5 + gridSize + 5, y + 5 + (gridSize / 2) - 9);\n\n        //noinspection DataFlowIssue\n        ItemStack output = recipe.getResultItem(Minecraft.getInstance().getConnection().registryAccess());\n\n        int slotX = x + 5 + gridSize + 5 + 22 + 5;\n        int slotY = y + 5 + (gridSize / 2) - 9;\n\n        boolean slotHovered = hovered && mouseX >= slotX + 1 && mouseX <= slotX + 1 + 16 && mouseY >= slotY + 1 && mouseY <= slotY + 1 + 16;\n\n        theme.drawSlot(graphics, slotX, slotY, slotHovered);\n\n        slotY++;\n        slotX++;\n", "                    if (slotHovered) {\n                        ScreenUtils.setTooltip(stack);\n                    }\n                    graphics.renderItem(stack, slotX, slotY);\n                    graphics.renderItemDecorations(Minecraft.getInstance().font, stack, slotX, slotY);\n                }\n            }\n            xIndex++;\n        }\n\n        theme.drawArrow(graphics, x + 5 + gridSize + 5, y + 5 + (gridSize / 2) - 9);\n\n        //noinspection DataFlowIssue\n        ItemStack output = recipe.getResultItem(Minecraft.getInstance().getConnection().registryAccess());\n\n        int slotX = x + 5 + gridSize + 5 + 22 + 5;\n        int slotY = y + 5 + (gridSize / 2) - 9;\n\n        boolean slotHovered = hovered && mouseX >= slotX + 1 && mouseX <= slotX + 1 + 16 && mouseY >= slotY + 1 && mouseY <= slotY + 1 + 16;\n\n        theme.drawSlot(graphics, slotX, slotY, slotHovered);\n\n        slotY++;\n        slotX++;\n", "        if (slotHovered) {\n            ScreenUtils.setTooltip(output);\n        }\n\n        graphics.renderItem(output, slotX, slotY);\n        graphics.renderItemDecorations(Minecraft.getInstance().font, output, slotX, slotY);\n    }\n\n    @Nullable\n    private Recipe<?> getRecipe() {\n        if (id != null && Minecraft.getInstance().level != null && Minecraft.getInstance().getConnection() != null) {\n            return Minecraft.getInstance().level.getRecipeManager().byKey(id).orElse(null);\n        }\n        return null;\n    }\n\n    @Override", "        if (id != null && Minecraft.getInstance().level != null && Minecraft.getInstance().getConnection() != null) {\n            return Minecraft.getInstance().level.getRecipeManager().byKey(id).orElse(null);\n        }\n        return null;\n    }\n\n    @Override\n    public int getHeight(int width) {\n        return (18 * this.gridWidth) + 12;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/EntityTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.client.gui.screens.inventory.InventoryScreen;\nimport net.minecraft.world.entity.Entity;\nimport net.minecraft.world.entity.EntityType;", "import net.minecraft.world.entity.Entity;\nimport net.minecraft.world.entity.EntityType;\nimport net.minecraft.world.entity.LivingEntity;\n\nimport java.util.Map;\n\npublic class EntityTagElement implements TagElement {\n\n    private final EntityType<?> type;\n    private Entity entity;\n\n    public EntityTagElement(Map<String, String> parameters) {\n        this.type = ElementParsingUtils.parseEntityType(parameters, \"type\", null);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        if (this.type != null) {\n            if (entity == null && Minecraft.getInstance().level != null) {\n                entity = this.type.create(Minecraft.getInstance().level);\n            }\n            if (entity instanceof LivingEntity living) {\n                InventoryScreen.renderEntityInInventoryFollowsMouse(graphics, x + (int) (width / 2f), y + 47, 25, x + (int) (width / 2f) - mouseX, y + 47 - mouseY, living);\n            }\n        }\n    }\n\n    @Override", "    public int getHeight(int width) {\n        return 50;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/ComponentTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.client.gui.screens.Screen;\nimport net.minecraft.network.chat.CommonComponents;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.network.chat.HoverEvent;\nimport net.minecraft.network.chat.Style;", "import net.minecraft.network.chat.HoverEvent;\nimport net.minecraft.network.chat.Style;\nimport net.minecraft.util.FormattedCharSequence;\nimport net.minecraft.util.Mth;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ComponentTagElement extends TextTagElement {\n\n    protected Component text = CommonComponents.EMPTY;\n\n    public ComponentTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override", "import java.util.Map;\n\npublic class ComponentTagElement extends TextTagElement {\n\n    protected Component text = CommonComponents.EMPTY;\n\n    public ComponentTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int height = 0;\n        for (FormattedCharSequence sequence : Minecraft.getInstance().font.split(text, width - 10)) {\n            graphics.drawString(\n                Minecraft.getInstance().font,\n                sequence, x, y + height, this.color.getValue(),\n                this.shadowed\n            );\n            height += Minecraft.getInstance().font.lineHeight + 1;\n            if (mouseY >= y + height || mouseY < y || !hovered) {\n                continue;\n            }\n            renderComponentHoverEffect(Minecraft.getInstance().font.getSplitter().componentStyleAtWidth(sequence, Mth.floor(x - mouseX)));\n        }\n    }\n\n    @Override", "            if (mouseY >= y + height || mouseY < y || !hovered) {\n                continue;\n            }\n            renderComponentHoverEffect(Minecraft.getInstance().font.getSplitter().componentStyleAtWidth(sequence, Mth.floor(x - mouseX)));\n        }\n    }\n\n    @Override\n    public void setContent(String content) {\n        try {\n            this.text = Component.Serializer.fromJson(content);\n        } catch (Exception e) {\n            this.text = CommonComponents.EMPTY;\n        }\n    }\n\n    @Override", "    public void setContent(String content) {\n        try {\n            this.text = Component.Serializer.fromJson(content);\n        } catch (Exception e) {\n            this.text = CommonComponents.EMPTY;\n        }\n    }\n\n    @Override\n    public int getHeight(int width) {\n        int lines = Minecraft.getInstance().font.split(this.text, width - 10).size();\n        return lines * (Minecraft.getInstance().font.lineHeight + 1);\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int lines = Minecraft.getInstance().font.split(this.text, width - 10).size();\n        return lines * (Minecraft.getInstance().font.lineHeight + 1);\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        if (mouseY >= this.getHeight(width) || mouseY < 0) {\n            return false;\n        }\n        Style style = Minecraft.getInstance().font.getSplitter().componentStyleAtWidth(this.text, Mth.floor(mouseX));\n        return Minecraft.getInstance().screen != null && Minecraft.getInstance().screen.handleComponentClicked(style);\n    }\n\n    protected void renderComponentHoverEffect(@Nullable Style style) {\n        Screen screen = Minecraft.getInstance().screen;", "        if (screen == null) return;\n        if (style != null && style.getHoverEvent() != null) {\n            List<FormattedCharSequence> tooltip = new ArrayList<>();\n            HoverEvent event = style.getHoverEvent();\n            var itemInfo = event.getValue(HoverEvent.Action.SHOW_ITEM);\n            if (itemInfo != null) {\n                for (Component component : Screen.getTooltipFromItem(Minecraft.getInstance(), itemInfo.getItemStack())) {\n                    tooltip.add(component.getVisualOrderText());\n                }\n            } else {\n                var entityInfo = event.getValue(HoverEvent.Action.SHOW_ENTITY);", "                if (entityInfo != null) {\n                    if (Minecraft.getInstance().options.advancedItemTooltips) {\n                        entityInfo.getTooltipLines().forEach((component) -> tooltip.add(component.getVisualOrderText()));\n                    }\n                } else {\n                    Component component = event.getValue(HoverEvent.Action.SHOW_TEXT);\n                    if (component != null) {\n                        tooltip.addAll(Minecraft.getInstance().font.split(component, Math.max(screen.width / 2, 200)));\n                    }\n                }\n            }\n", "            if (!tooltip.isEmpty()) {\n                screen.setTooltipForNextRenderPass(tooltip);\n            }\n        }\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/ParagraphTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.util.FormattedCharSequence;\n\nimport java.util.Map;\n\npublic class ParagraphTagElement extends TextTagElement {\n\n    public ParagraphTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override", "import java.util.Map;\n\npublic class ParagraphTagElement extends TextTagElement {\n\n    public ParagraphTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        Component text = Component.nullToEmpty(this.content);\n        int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        Component text = Component.nullToEmpty(this.content);\n        int height = 0;\n        for (FormattedCharSequence sequence : Minecraft.getInstance().font.split(text, width - 5)) {\n            graphics.drawString(\n                Minecraft.getInstance().font,\n                sequence, getXOffset(x, width, sequence), y + height, this.color.getValue(),\n                this.shadowed\n            );\n            height += Minecraft.getInstance().font.lineHeight + 1;\n        }\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int lines = Minecraft.getInstance().font.split(Component.nullToEmpty(this.content), width - 5).size();\n        return lines * (Minecraft.getInstance().font.lineHeight + 1);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/HeadingOneTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport com.teamresourceful.resourcefullib.client.CloseablePoseStack;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.util.FormattedCharSequence;\n\nimport java.util.Map;", "\nimport java.util.Map;\n\npublic class HeadingOneTagElement extends TextTagElement {\n\n    public HeadingOneTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        try (var ignored = new CloseablePoseStack(graphics)) {\n            graphics.pose().scale(3, 3, 3);\n            graphics.pose().translate(-x / 1.5f, -y / 1.5f, 0);\n            Component text = Component.nullToEmpty(this.content);\n            int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        try (var ignored = new CloseablePoseStack(graphics)) {\n            graphics.pose().scale(3, 3, 3);\n            graphics.pose().translate(-x / 1.5f, -y / 1.5f, 0);\n            Component text = Component.nullToEmpty(this.content);\n            int height = 0;\n            for (FormattedCharSequence sequence : Minecraft.getInstance().font.split(text, width - 10)) {\n                graphics.drawString(\n                    Minecraft.getInstance().font,\n                    sequence, x + 2, y + height, this.color.getValue(),\n                    false\n                );\n                height += Minecraft.getInstance().font.lineHeight + 1;\n            }\n        }\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int lines = Minecraft.getInstance().font.split(Component.nullToEmpty(this.content), width - 10).size();\n        return lines * (Minecraft.getInstance().font.lineHeight + 1) * 3;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/ImageTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.resources.ResourceLocation;\n\nimport java.util.Map;\n\npublic class ImageTagElement implements TagElement {\n\n    private final ResourceLocation image;\n    private final int imageWidth;\n    private final int imageHeight;\n    private final int imageU;\n    private final int imageV;\n    private final int imageTextureWidth;\n    private final int imageTextureHeight;\n\n    public ImageTagElement(Map<String, String> parameters) {\n        this.image = ElementParsingUtils.parseResourceLocation(parameters, \"src\", new ResourceLocation(\"textures/missing_no.png\"));\n        this.imageWidth = ElementParsingUtils.parseInt(parameters, \"width\", 0);\n        this.imageHeight = ElementParsingUtils.parseInt(parameters, \"height\", 0);\n        this.imageU = ElementParsingUtils.parseInt(parameters, \"u\", 0);\n        this.imageV = ElementParsingUtils.parseInt(parameters, \"v\", 0);\n        this.imageTextureWidth = ElementParsingUtils.parseInt(parameters, \"textureWidth\", this.imageWidth);\n        this.imageTextureHeight = ElementParsingUtils.parseInt(parameters, \"textureHeight\", this.imageHeight);\n    }\n\n    @Override", "import java.util.Map;\n\npublic class ImageTagElement implements TagElement {\n\n    private final ResourceLocation image;\n    private final int imageWidth;\n    private final int imageHeight;\n    private final int imageU;\n    private final int imageV;\n    private final int imageTextureWidth;\n    private final int imageTextureHeight;\n\n    public ImageTagElement(Map<String, String> parameters) {\n        this.image = ElementParsingUtils.parseResourceLocation(parameters, \"src\", new ResourceLocation(\"textures/missing_no.png\"));\n        this.imageWidth = ElementParsingUtils.parseInt(parameters, \"width\", 0);\n        this.imageHeight = ElementParsingUtils.parseInt(parameters, \"height\", 0);\n        this.imageU = ElementParsingUtils.parseInt(parameters, \"u\", 0);\n        this.imageV = ElementParsingUtils.parseInt(parameters, \"v\", 0);\n        this.imageTextureWidth = ElementParsingUtils.parseInt(parameters, \"textureWidth\", this.imageWidth);\n        this.imageTextureHeight = ElementParsingUtils.parseInt(parameters, \"textureHeight\", this.imageHeight);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int xOffset = (width - this.imageWidth) / 2;\n        graphics.blit(this.image, x + xOffset, y + 2, this.imageU, this.imageV, this.imageWidth, this.imageHeight, this.imageTextureWidth, this.imageTextureHeight);\n    }\n\n    @Override\n    public int getHeight(int width) {\n        return this.imageHeight + 4;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/BreakLineTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport net.minecraft.client.Minecraft;\n\nimport java.util.Map;\n\npublic class BreakLineTagElement implements TagElement {\n\n    public BreakLineTagElement(Map<String, String> parameters) {}\n\n    @Override", "    public int getHeight(int width) {\n        return Minecraft.getInstance().font.lineHeight;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/columns/ColumnTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.columns;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\npublic class ColumnTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    public ColumnTagElement(Map<String, String> ignored) {}\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int height = 0;\n        for (TagElement element : this.children) {\n            element.render(theme, graphics, x, y + height, width, mouseX, mouseY, hovered, partialTicks);\n            height += element.getHeight(width);\n        }\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        int height = 0;", "    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        int height = 0;\n        for (TagElement element : this.children) {\n            if (element.mouseClicked(mouseX, mouseY - height, button, width)) {\n                return true;\n            }\n            height += element.getHeight(width);\n        }\n        return false;\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int height = 0;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n", "    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/columns/ColumnsTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.columns;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\npublic class ColumnsTagElement implements TagElement {\n\n    protected final List<TagElement> elements = new ArrayList<>();\n\n    private final Function widthFunction;\n\n    public ColumnsTagElement(Map<String, String> parameters) {\n        if (parameters.containsKey(\"template\")) {\n            String template = parameters.get(\"template\");\n            String[] columns = template.split(\" \");\n            int[] widths = new int[columns.length];", "        if (parameters.containsKey(\"template\")) {\n            String template = parameters.get(\"template\");\n            String[] columns = template.split(\" \");\n            int[] widths = new int[columns.length];\n            for (int i = 0; i < columns.length; i++) {\n                widths[i] = columns[i].endsWith(\"%\") ? Integer.parseInt(columns[i].substring(0, columns[i].length() - 1)) : Integer.parseInt(columns[i]);\n            }\n            this.widthFunction = (index, width) -> index < 0 || index >= widths.length ? 0 : (int) (width * widths[index] / 100f);\n        } else {\n            this.widthFunction = (index, width) -> (int) (width / (float) this.elements.size());\n        }\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int index = 0;\n        for (TagElement element : elements) {\n            int columnWidth = this.widthFunction.apply(index, width);\n            element.render(theme, graphics, x, y, columnWidth, mouseX, mouseY, hovered, partialTicks);\n            index++;\n            x += columnWidth;\n        }\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int height = 0;\n        int index = 0;\n        for (TagElement element : elements) {\n            int columnWidth = this.widthFunction.apply(index, width);\n            height = Math.max(height, element.getHeight(columnWidth));\n            index++;\n        }\n        return height;\n    }\n\n    @Override", "    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        int columnWidth = width / this.elements.size();\n        int index = 0;\n        for (TagElement element : elements) {\n            if (element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {\n                return true;\n            }\n            index++;\n        }\n        return false;\n    }\n\n    @Override", "    public void addChild(TagElement element) {\n        if (!(element instanceof ColumnTagElement)) {\n            throw new IllegalArgumentException(\"Columns can only contain columns.\");\n        }\n        if (this.elements.size() > 2) {\n            throw new IllegalArgumentException(\"Columns can only contain up to three columns.\");\n        }\n        this.elements.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.elements;\n    }\n\n    interface Function {\n        int apply(int index, int width);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/carousel/CarouselTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.carousel;\n\nimport com.teamresourceful.resourcefullib.client.utils.RenderUtils;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n", "import org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class CarouselTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    private final int height;\n\n    private int index;\n\n    public CarouselTagElement(Map<String, String> parameters) {\n        this.index = ElementParsingUtils.parseInt(parameters, \"index\", 0);\n        this.height = ElementParsingUtils.parseInt(parameters, \"height\", -1);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        TagElement element = getCurrentChild();\n        if (element != null) {\n            if (this.height != -1) {\n                try (var ignored = RenderUtils.createScissor(Minecraft.getInstance(), graphics, x + 20, y, width - 40, this.height)) {\n                    element.render(theme, graphics, x + 20, y, width - 40, mouseX, mouseY, hovered, partialTicks);\n                }\n            } else {\n                element.render(theme, graphics, x + 20, y, width - 40, mouseX, mouseY, hovered, partialTicks);\n            }\n        }\n        int middle = (getHeight(width - 40) / 2);\n        int relativeX = mouseX - x;\n        int relativeY = mouseY - y;\n        theme.drawCarouselButton(graphics, x + 2, y + middle - 10, true, relativeX >= 2 && relativeX <= 16 && relativeY >= middle - 10 && relativeY <= middle + 10);\n        theme.drawCarouselButton(graphics, x + width - 16, y + middle - 10, false, relativeX >= width - 16 && relativeX <= width - 2 && relativeY >= middle - 10 && relativeY <= middle + 10);\n    }\n\n    @Override", "    public int getHeight(int width) {\n        if (this.height != -1) {\n            return this.height;\n        }\n        TagElement element = getCurrentChild();\n        if (element != null) {\n            return Math.max(element.getHeight(width), 20);\n        }\n        return 20;\n    }\n\n    private TagElement getCurrentChild() {", "        if (this.children.isEmpty() || this.index < 0 || this.index >= this.children.size()) {\n            return null;\n        }\n        return this.children.get(this.index);\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        if (mouseY >= getHeight(width) || mouseY < 0) {\n            return false;\n        }\n        int middle = (getHeight(width - 40) / 2);", "        if (mouseY >= getHeight(width) || mouseY < 0) {\n            return false;\n        }\n        int middle = (getHeight(width - 40) / 2);\n        if (!this.children.isEmpty() && mouseY >= middle - 10 && mouseY <= middle + 10) {\n            if (mouseX > 2 && mouseX <= 16) {\n                this.index--;\n                if (this.index < 0) {\n                    this.index = this.children.size() - 1;\n                }\n                return true;\n            }", "            if (mouseX >= width - 16 && mouseX < width - 2) {\n                this.index++;\n                if (this.index >= this.children.size()) {\n                    this.index = 0;\n                }\n                return true;\n            }\n        }\n        mouseX -= 20;\n        TagElement element = getCurrentChild();\n        if (element != null) {\n            return element.mouseClicked(mouseX, mouseY, button, width - 40);\n        }\n        return false;\n    }\n\n    @Override", "        if (element != null) {\n            return element.mouseClicked(mouseX, mouseY, button, width - 40);\n        }\n        return false;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        if (!(element instanceof CarouselItemTagElement)) {\n            throw new IllegalArgumentException(\"CarouselTagElement can only contain CarouselItemTagElements\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n", "        if (!(element instanceof CarouselItemTagElement)) {\n            throw new IllegalArgumentException(\"CarouselTagElement can only contain CarouselItemTagElements\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/carousel/CarouselItemTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.carousel;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.gui.GuiGraphics;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\n\npublic class CarouselItemTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    public CarouselItemTagElement(Map<String, String> ignored) {}\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        int height = 0;\n        for (TagElement element : this.children) {\n            element.render(theme, graphics, x, y + height, width, mouseX, mouseY, hovered, partialTicks);\n            height += element.getHeight(width);\n        }\n    }\n\n    @Override\n    public int getHeight(int width) {\n        int height = 0;", "    public int getHeight(int width) {\n        int height = 0;\n        for (TagElement element : this.children) {\n            height += element.getHeight(width);\n        }\n        return height;\n    }\n\n    @Override\n    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        for (TagElement element : this.children) {", "    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        for (TagElement element : this.children) {\n            if (element.mouseClicked(mouseX, mouseY, button, width)) {\n                return true;\n            }\n            mouseY -= element.getHeight(width);\n        }\n        return false;\n    }\n\n    @Override", "    public void addChild(TagElement element) {\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/lists/ListTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.lists;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport com.teamresourceful.resourcefullib.common.color.ConstantColors;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic abstract class ListTagElement implements TagElement {\n\n    protected List<TagElement> children = new ArrayList<>();\n\n    protected final Color color;\n\n    public ListTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.white);\n    }\n\n    abstract int getItemHeight(int index, TagElement element, int width);\n\n    @Override", "    public boolean mouseClicked(double mouseX, double mouseY, int button, int width) {\n        int index = 0;\n        for (TagElement element : this.children) {\n            if (element.mouseClicked(mouseX, mouseY, button, width)) {\n                return true;\n            }\n            mouseY -= this.getItemHeight(index, element, width);\n        }\n        return false;\n    }\n\n    @Override", "    public int getHeight(int width) {\n        int i = 0;\n        int height = 0;\n        for (TagElement element : this.children) {\n            height += this.getItemHeight(i, element, width);\n            i++;\n        }\n        return height;\n    }\n\n    @Override", "    public void addChild(TagElement element) {\n        if (!(element instanceof ListItemTagElement)) {\n            throw new IllegalArgumentException(\"Lists can only contain list items.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/lists/ListItemTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.lists;\n\nimport com.teamresourceful.resourcefullib.common.color.Color;\nimport com.teamresourceful.resourcefullib.common.color.ConstantColors;\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport earth.terrarium.hermes.utils.ElementParsingUtils;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.network.chat.Component;", "import net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.network.chat.Component;\nimport net.minecraft.util.FormattedCharSequence;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ListItemTagElement implements TagElement {\n\n    protected final List<TagElement> children = new ArrayList<>();\n    protected final Color color;\n    protected String content;\n\n    public ListItemTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.white);\n    }\n\n    @Override", "\npublic class ListItemTagElement implements TagElement {\n\n    protected final List<TagElement> children = new ArrayList<>();\n    protected final Color color;\n    protected String content;\n\n    public ListItemTagElement(Map<String, String> parameters) {\n        this.color = ElementParsingUtils.parseColor(parameters, \"color\", ConstantColors.white);\n    }\n\n    @Override", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        if (this.content != null) {\n            Component text = Component.nullToEmpty(this.content);\n            int height = 0;\n            for (FormattedCharSequence sequence : Minecraft.getInstance().font.split(text, width)) {\n                graphics.drawString(\n                    Minecraft.getInstance().font,\n                    sequence, x, y + height, this.color.getValue(),\n                    false\n                );\n                height += Minecraft.getInstance().font.lineHeight + 1;\n            }\n        } else {", "            for (TagElement element : this.children) {\n                element.render(theme, graphics, x, y, width, mouseX, mouseY, hovered, partialTicks);\n            }\n        }\n    }\n\n    @Override\n    public int getHeight(int width) {\n        if (this.content != null) {\n            Component text = Component.nullToEmpty(this.content);\n            return Minecraft.getInstance().font.split(text, width).size() * (Minecraft.getInstance().font.lineHeight + 1);\n        } else {\n            int height = 0;", "        if (this.content != null) {\n            Component text = Component.nullToEmpty(this.content);\n            return Minecraft.getInstance().font.split(text, width).size() * (Minecraft.getInstance().font.lineHeight + 1);\n        } else {\n            int height = 0;\n            for (TagElement element : this.children) {\n                height += element.getHeight(width);\n            }\n            return height;\n        }\n    }\n\n    @Override", "    public void setContent(String content) {\n        if (!this.children.isEmpty()) {\n            throw new IllegalStateException(\"Cannot set content of a list item that already has children.\");\n        }\n        this.content = content;\n    }\n\n    @Override\n    public void addChild(TagElement element) {\n        if (this.content != null) {\n            throw new IllegalStateException(\"Cannot add a child to a list item that already has content.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n", "    public void addChild(TagElement element) {\n        if (this.content != null) {\n            throw new IllegalStateException(\"Cannot add a child to a list item that already has content.\");\n        }\n        this.children.add(element);\n    }\n\n    @Override\n    public @NotNull List<TagElement> getChildren() {\n        return this.children;\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/lists/UnorderedListTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.lists;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.Font;\nimport net.minecraft.client.gui.GuiGraphics;\n\nimport java.util.Map;\n\npublic class UnorderedListTagElement extends ListTagElement {\n\n    public UnorderedListTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override", "import java.util.Map;\n\npublic class UnorderedListTagElement extends ListTagElement {\n\n    public UnorderedListTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        Font font = Minecraft.getInstance().font;\n        int dotWidth = font.width(\"\u2022\");\n        int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        Font font = Minecraft.getInstance().font;\n        int dotWidth = font.width(\"\u2022\");\n        int height = 0;\n        for (TagElement element : this.children) {\n            graphics.drawString(\n                font,\n                \"\u2022\", x, y + height, this.color.getValue(),\n                false\n            );\n            element.render(theme, graphics, x + dotWidth + 2, y + height, width - dotWidth - 2, mouseX, mouseY, hovered, partialTicks);\n            height += Math.max(element.getHeight(width - dotWidth - 2), Minecraft.getInstance().font.lineHeight + 1);\n        }\n    }\n\n    @Override\n    int getItemHeight(int index, TagElement element, int width) {\n        int dotWidth = Minecraft.getInstance().font.width(\"\u2022\");\n        return Math.max(element.getHeight(width - dotWidth - 2), Minecraft.getInstance().font.lineHeight + 1);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/defaults/lists/OrderedListTagElement.java", "chunked_list": ["package earth.terrarium.hermes.api.defaults.lists;\n\nimport earth.terrarium.hermes.api.TagElement;\nimport earth.terrarium.hermes.api.themes.Theme;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.Font;\nimport net.minecraft.client.gui.GuiGraphics;\n\nimport java.util.Map;\n\npublic class OrderedListTagElement extends ListTagElement {\n\n    public OrderedListTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override", "import java.util.Map;\n\npublic class OrderedListTagElement extends ListTagElement {\n\n    public OrderedListTagElement(Map<String, String> parameters) {\n        super(parameters);\n    }\n\n    @Override\n    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        Font font = Minecraft.getInstance().font;\n        int i = 1;\n        int height = 0;", "    public void render(Theme theme, GuiGraphics graphics, int x, int y, int width, int mouseX, int mouseY, boolean hovered, float partialTicks) {\n        Font font = Minecraft.getInstance().font;\n        int i = 1;\n        int height = 0;\n        for (TagElement element : this.children) {\n            int indexWidth = font.width(i + \".\");\n            graphics.drawString(\n                font,\n                i + \".\", x, y + height, this.color.getValue(),\n                false\n            );\n            element.render(theme, graphics, x + indexWidth + 2, y + height, width - indexWidth - 2, mouseX, mouseY, hovered, partialTicks);\n            height += Math.max(element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);\n            i++;\n        }\n    }\n\n    @Override\n    int getItemHeight(int index, TagElement element, int width) {\n        int indexWidth = Minecraft.getInstance().font.width((index + 1) + \".\");\n        return Math.max(element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/themes/DefaultTheme.java", "chunked_list": ["package earth.terrarium.hermes.api.themes;\n\nimport com.teamresourceful.resourcefullib.common.color.ConstantColors;\nimport earth.terrarium.hermes.Hermes;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.client.gui.GuiGraphics;\nimport net.minecraft.resources.ResourceLocation;\n\npublic class DefaultTheme implements Theme {\n\n    private static final ResourceLocation DETAILS = new ResourceLocation(Hermes.MOD_ID, \"textures/gui/details.png\");\n    private static final ResourceLocation CRAFTING = new ResourceLocation(Hermes.MOD_ID, \"textures/gui/crafting.png\");\n    private static final ResourceLocation CAROUSEL = new ResourceLocation(Hermes.MOD_ID, \"textures/gui/carousel.png\");\n\n    @Override", "public class DefaultTheme implements Theme {\n\n    private static final ResourceLocation DETAILS = new ResourceLocation(Hermes.MOD_ID, \"textures/gui/details.png\");\n    private static final ResourceLocation CRAFTING = new ResourceLocation(Hermes.MOD_ID, \"textures/gui/crafting.png\");\n    private static final ResourceLocation CAROUSEL = new ResourceLocation(Hermes.MOD_ID, \"textures/gui/carousel.png\");\n\n    @Override\n    public void drawDropdown(GuiGraphics graphics, int x, int y, int width, boolean hovered, boolean open, String text) {\n        int vOffset = hovered ? 20 : 0;\n        graphics.blit(DETAILS, x, y, 0, vOffset, 2, 20);\n        graphics.blitRepeating(DETAILS, x + 2, y, width - 4, 20, 2, vOffset, 196, 20);\n        graphics.blit(DETAILS, x + width - 2, y, 198, vOffset, 2, 20);", "        if (open) {\n            graphics.blit(DETAILS, x + 4, y + 6, 0, 40, 11, 7);\n        } else {\n            graphics.blit(DETAILS, x + 7, y + 4, 11, 40, 7, 11);\n        }\n        graphics.drawString(Minecraft.getInstance().font, text, x + 20, y + 6, ConstantColors.white.getValue(), false);\n    }\n\n    @Override\n    public void drawSlot(GuiGraphics graphics, int x, int y, boolean hovered) {\n        graphics.blit(CRAFTING, x, y, 24, 0, 18, 18);", "    public void drawSlot(GuiGraphics graphics, int x, int y, boolean hovered) {\n        graphics.blit(CRAFTING, x, y, 24, 0, 18, 18);\n        if (hovered) {\n            graphics.fill(x + 1, y + 1, x + 17, y + 17, 0x80FFFFFF);\n        }\n    }\n\n    @Override\n    public void drawArrow(GuiGraphics graphics, int x, int y) {\n        graphics.blit(CRAFTING, x, y, 42, 0, 22, 16);\n    }\n\n    @Override", "    public void drawArrow(GuiGraphics graphics, int x, int y) {\n        graphics.blit(CRAFTING, x, y, 42, 0, 22, 16);\n    }\n\n    @Override\n    public void drawCraftingBackground(GuiGraphics graphics, int x, int y, int width, int height) {\n        graphics.blitNineSliced(CRAFTING, x, y, width, height, 4, 4, 4, 4, 24, 24, 0, 0);\n    }\n\n    @Override\n    public void drawCarouselButton(GuiGraphics graphics, int x, int y, boolean left, boolean hovered) {\n        graphics.blit(CAROUSEL, x, y, left ? 0 : 14, hovered ? 20 : 0, 14, 20);\n    }\n}\n", "    public void drawCarouselButton(GuiGraphics graphics, int x, int y, boolean left, boolean hovered) {\n        graphics.blit(CAROUSEL, x, y, left ? 0 : 14, hovered ? 20 : 0, 14, 20);\n    }\n}\n"]}
{"filename": "common/src/main/java/earth/terrarium/hermes/api/themes/Theme.java", "chunked_list": ["package earth.terrarium.hermes.api.themes;\n\nimport net.minecraft.client.gui.GuiGraphics;\n\npublic interface Theme {\n\n    void drawDropdown(GuiGraphics graphics, int x, int y, int width, boolean hovered, boolean open, String text);\n\n    void drawSlot(GuiGraphics graphics, int x, int y, boolean hovered);\n\n    void drawArrow(GuiGraphics graphics, int x, int y);\n\n    void drawCraftingBackground(GuiGraphics graphics, int x, int y, int width, int height);\n\n    void drawCarouselButton(GuiGraphics graphics, int x, int y, boolean left, boolean hovered);\n\n}\n"]}
