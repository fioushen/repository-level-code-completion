{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/HuaweiIapListener.java", "chunked_list": ["package com.huawei.iapplugin;\n\nimport com.huawei.hms.iap.entity.ProductInfo;\nimport com.huawei.hms.iap.entity.InAppPurchaseData;\nimport java.util.List;\n\npublic interface HuaweiIapListener {\n    void onCheckEnvironmentSuccess();\n    void onException(int action, String message);\n    void onObtainProductList(List<ProductInfo> products, int type);\n    void onPurchaseSuccess(String productId, int type);\n    void onObtainPurchases(List<InAppPurchaseData> purchasedProducts, List<InAppPurchaseData> nonPurchasedProducts, int type);\n    void onObtainPurchasedRecords(List<InAppPurchaseData> purchasedProducts, int type);\n}\n"]}
{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/HuaweiIapPlugin.java", "chunked_list": ["package com.huawei.iapplugin;\n\nimport com.huawei.iapplugin.utils.IapApiCallback;\nimport com.huawei.iapplugin.utils.Constants;\nimport com.huawei.iapplugin.utils.ExceptionHandle;\nimport com.huawei.iapplugin.utils.IapRequestHelper;\nimport com.huawei.iapplugin.utils.CipherUtil;\n\nimport com.huawei.hms.iap.Iap;\nimport com.huawei.hms.iap.IapClient;", "import com.huawei.hms.iap.Iap;\nimport com.huawei.hms.iap.IapClient;\nimport com.huawei.hms.iap.entity.IsEnvReadyResult;\nimport com.huawei.hms.iap.entity.OrderStatusCode;\nimport com.huawei.hms.iap.util.IapClientHelper;\nimport com.huawei.hms.iap.entity.InAppPurchaseData;\nimport com.huawei.hms.iap.entity.OwnedPurchasesResult;\nimport com.huawei.hms.iap.entity.ProductInfo;\nimport com.huawei.hms.iap.entity.ProductInfoResult;\nimport com.huawei.hms.iap.entity.PurchaseIntentResult;", "import com.huawei.hms.iap.entity.ProductInfoResult;\nimport com.huawei.hms.iap.entity.PurchaseIntentResult;\nimport com.huawei.hms.iap.entity.PurchaseResultInfo;\nimport com.huawei.hms.support.api.client.Status;\n\nimport android.app.NativeActivity;\nimport android.text.TextUtils;\nimport android.util.Base64;\nimport android.util.Log;\nimport android.util.Pair;", "import android.util.Log;\nimport android.util.Pair;\nimport android.content.Intent;\n\nimport org.json.JSONException;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class HuaweiIapPlugin {\n    private static boolean isInit = false;\n    private static NativeActivity mActivity = null;\n    private static HuaweiIapListener mListener = null;\n    private static String mPublicKey = null;\n    private static IapClient client = null;\n    private static final String TAG = \"HuaweiIapPlugin\";\n    private static int currentType = -1;\n    private static String currentProductId;\n", "import java.util.List;\n\npublic class HuaweiIapPlugin {\n    private static boolean isInit = false;\n    private static NativeActivity mActivity = null;\n    private static HuaweiIapListener mListener = null;\n    private static String mPublicKey = null;\n    private static IapClient client = null;\n    private static final String TAG = \"HuaweiIapPlugin\";\n    private static int currentType = -1;\n    private static String currentProductId;\n", "    public static int CHECK_ENVIRONMENT = 0;\n    public static int QUERY_PRODUCTS = 1;\n    public static int BUY_PRODUCT = 2;\n    public static int QUERY_PURCHASES = 3;\n    public static int GET_PURCHASES_RECORDS = 4;\n\n    public static void initialize(NativeActivity activity, HuaweiIapListener listener) {\n        if (!isInit) {\n            mActivity = activity;\n            client = Iap.getIapClient(mActivity);\n            mListener = listener;\n            isInit = true;\n        }\n    }\n", "    public static void setPublicKey(String publicKey) {\n        mPublicKey = publicKey;\n    }\n\n    public static void registerOnActivityResult(int requestCode, int resultCode, Intent data) {\n        switch (requestCode) {\n            case Constants.REQ_CODE_LOGIN:\n                int returnCode = IapClientHelper.parseRespCodeFromIntent(data);\n                switch (returnCode) {\n                    case OrderStatusCode.ORDER_STATE_SUCCESS:\n                        mListener.onCheckEnvironmentSuccess();\n                        break;\n                    case OrderStatusCode.ORDER_ACCOUNT_AREA_NOT_SUPPORTED:\n                        mListener.onException(CHECK_ENVIRONMENT, \"This is unavailable in your country/region\");  \n                        break;\n                    default:\n                        mListener.onException(CHECK_ENVIRONMENT, \"User cancel login.\");\n                        break;      \n                }\n                break;\n            case Constants.REQ_CODE_BUY:\n                PurchaseResultInfo purchaseResultInfo = client.parsePurchaseResultInfoFromIntent(data);\n                switch(purchaseResultInfo.getReturnCode()) {\n                    case OrderStatusCode.ORDER_STATE_CANCEL:\n                        mListener.onException(BUY_PRODUCT, \"Order with \" + currentProductId + \" has been canceled!\");\n                        break;\n                    case OrderStatusCode.ORDER_STATE_FAILED:\n                    case OrderStatusCode.ORDER_STATE_DEFAULT_CODE:\n                        // Default value returned by parsePurchaseResultInfoFromIntent when no return code is received from the IAP.\n                    case OrderStatusCode.ORDER_PRODUCT_OWNED:", "                        if (currentType != -1) {\n                            queryPurchases(currentType);\n                        }\n                        break;\n                    case OrderStatusCode.ORDER_STATE_SUCCESS:\n                        Pair<Boolean, InAppPurchaseData> verifyResult = verifyPurchaseStatus(currentType, purchaseResultInfo.getInAppPurchaseData(), purchaseResultInfo.getInAppDataSignature());\n                        boolean isSuccess = verifyResult.first;\n                        String productId = verifyResult.second.getProductId();\n                        if (isSuccess&& currentType != -1) {\n                            mListener.onPurchaseSuccess(productId, currentType);\n                        } else {\n                            mListener.onException(BUY_PRODUCT, \"Failed to verify order with \" + productId + \" !\");     \n                        }\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                break;\n        }   \n    }\n", "                        if (isSuccess&& currentType != -1) {\n                            mListener.onPurchaseSuccess(productId, currentType);\n                        } else {\n                            mListener.onException(BUY_PRODUCT, \"Failed to verify order with \" + productId + \" !\");     \n                        }\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            default:\n                break;\n        }   \n    }\n", "    public static void checkEnvironment() {\n        IapRequestHelper.isEnvReady(client, new IapApiCallback<IsEnvReadyResult>() {\n            @Override\n            public void onSuccess(IsEnvReadyResult result) {\n                mListener.onCheckEnvironmentSuccess();\n            }\n\n            @Override\n            public void onFail(Exception e) {\n                Log.e(TAG, \"isEnvReady fail, \" + e.getMessage());\n                ExceptionHandle.handle(mActivity, CHECK_ENVIRONMENT, e, mListener);\n            }\n        });\n    }\n", "            public void onFail(Exception e) {\n                Log.e(TAG, \"isEnvReady fail, \" + e.getMessage());\n                ExceptionHandle.handle(mActivity, CHECK_ENVIRONMENT, e, mListener);\n            }\n        });\n    }\n\n    public static void queryProducts(String[] productIds, final int type) {\n        IapRequestHelper.obtainProductInfo(client, new ArrayList<>(Arrays.asList(productIds)), type, new IapApiCallback<ProductInfoResult>() {\n            @Override\n            public void onSuccess(ProductInfoResult result) {\n                Log.i(TAG, \"obtainProductInfo, success\");", "            public void onSuccess(ProductInfoResult result) {\n                Log.i(TAG, \"obtainProductInfo, success\");\n                if (result == null) {\n                    return;\n                }\n                List<ProductInfo> productInfos = result.getProductInfoList();\n                if (productInfos != null) {\n                    mListener.onObtainProductList(productInfos, type);\n                }\n            }\n\n            @Override", "            public void onFail(Exception e) {\n                Log.e(TAG, \"obtainProductInfo: \" + e.getMessage());\n                ExceptionHandle.handle(mActivity, QUERY_PRODUCTS, e, mListener);\n            }\n        });   \n    }\n\n    public static void queryPurchases(int type) {\n        queryPurchases(type, null);\n    }\n", "    public static void buyProduct(final String productId, final int type) {\n        currentProductId = productId;\n        currentType = type;\n        IapRequestHelper.createPurchaseIntent(client, productId, type, new IapApiCallback<PurchaseIntentResult>() {\n            @Override\n            public void onSuccess(PurchaseIntentResult result) {\n                if (result == null) {\n                    Log.e(TAG, \"result is null\");\n                    return;\n                }\n                Status status = result.getStatus();", "                if (status == null) {\n                    Log.e(TAG, \"status is null\");\n                    return;\n                }\n                // You should pull up the page to complete the payment process.\n                IapRequestHelper.startResolutionForResult(mActivity, status, Constants.REQ_CODE_BUY);\n            }\n\n            @Override\n            public void onFail(Exception e) {\n                int errorCode = ExceptionHandle.handle(mActivity, BUY_PRODUCT, e, mListener);", "            public void onFail(Exception e) {\n                int errorCode = ExceptionHandle.handle(mActivity, BUY_PRODUCT, e, mListener);\n                if (errorCode != ExceptionHandle.SOLVED) {\n                    Log.e(TAG, \"createPurchaseIntent, returnCode: \" + errorCode);\n                    switch (errorCode) {\n                        case OrderStatusCode.ORDER_PRODUCT_OWNED:\n                            if (type != IapClient.PriceType.IN_APP_SUBSCRIPTION) {\n                                queryPurchases(type);\n                            } else {\n                                IapRequestHelper.showSubscription(mActivity, productId, BUY_PRODUCT, mListener);\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        });\n    }\n", "    public static void getPurchasedRecords(int type) {\n        getPurchasedRecords(type, null);\n    }\n\n    private static void queryPurchases(final int type, String continuationToken) {\n        IapRequestHelper.obtainOwnedPurchases(client, type, continuationToken, new IapApiCallback<OwnedPurchasesResult>() {\n            @Override\n            public void onSuccess(OwnedPurchasesResult result) {\n                if (result == null) {\n                    mListener.onException(QUERY_PURCHASES, \"result is null\");\n                    return;\n                }\n                String token = result.getContinuationToken();", "                if (result == null) {\n                    mListener.onException(QUERY_PURCHASES, \"result is null\");\n                    return;\n                }\n                String token = result.getContinuationToken();\n                if (!TextUtils.isEmpty(token)) {\n                    queryPurchases(type, token);\n                    return;\n                }\n                Log.i(TAG, \"obtainOwnedPurchases, success\");\n\n                List<String> inAppPurchaseDataList = result.getInAppPurchaseDataList();", "                if (inAppPurchaseDataList != null) {\n                    List<String> inAppSignature= result.getInAppSignature();\n                    List<InAppPurchaseData> purchasedProductDatas = new ArrayList<>();\n                    List<InAppPurchaseData> nonPurchasedProductDatas = new ArrayList<>();\n                    for (int i = 0; i < inAppPurchaseDataList.size(); i++) {\n                        final String inAppPurchaseData = inAppPurchaseDataList.get(i);\n                        final String inAppPurchaseDataSignature = inAppSignature.get(i);\n                        Pair<Boolean, InAppPurchaseData> verifyResult = verifyPurchaseStatus(type, inAppPurchaseData, inAppPurchaseDataSignature);\n                        boolean isPurchased = verifyResult.first;\n                        InAppPurchaseData productData = verifyResult.second;\n                        if (productData != null) {", "                        if (productData != null) {\n                            if (isPurchased) {\n                                purchasedProductDatas.add(productData);\n                            } else {\n                                nonPurchasedProductDatas.add(productData);\n                            }\n                        }\n                    }\n                    mListener.onObtainPurchases(purchasedProductDatas, nonPurchasedProductDatas, type);\n                }\n            }\n\n            @Override", "            public void onFail(Exception e) {\n                Log.e(TAG, \"obtainOwnedPurchases, type=\" + IapClient.PriceType.IN_APP_CONSUMABLE + \", \" + e.getMessage());\n                ExceptionHandle.handle(mActivity, QUERY_PURCHASES, e, mListener);\n            }\n        });\n    }\n\n    private static Pair<Boolean, InAppPurchaseData> verifyPurchaseStatus(int type, final String inAppPurchaseDataStr, final String inAppPurchaseDataSignature) {\n        // Check whether the signature of the purchase data is valid.\n        if (CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {\n            try {\n                InAppPurchaseData inAppPurchaseDataBean = new InAppPurchaseData(inAppPurchaseDataStr);\n                String purchaseToken = inAppPurchaseDataBean.getPurchaseToken();\n                String productId = inAppPurchaseDataBean.getProductId();\n                boolean isValid = type == IapClient.PriceType.IN_APP_SUBSCRIPTION ? inAppPurchaseDataBean.isSubValid() : inAppPurchaseDataBean.getPurchaseState() == InAppPurchaseData.PurchaseState.PURCHASED;", "        if (CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {\n            try {\n                InAppPurchaseData inAppPurchaseDataBean = new InAppPurchaseData(inAppPurchaseDataStr);\n                String purchaseToken = inAppPurchaseDataBean.getPurchaseToken();\n                String productId = inAppPurchaseDataBean.getProductId();\n                boolean isValid = type == IapClient.PriceType.IN_APP_SUBSCRIPTION ? inAppPurchaseDataBean.isSubValid() : inAppPurchaseDataBean.getPurchaseState() == InAppPurchaseData.PurchaseState.PURCHASED;\n                if (type == IapClient.PriceType.IN_APP_CONSUMABLE && isValid) {\n                    IapRequestHelper.consumeOwnedPurchase(client, purchaseToken);\n                }\n                return Pair.create(isValid, inAppPurchaseDataBean);\n            } catch (JSONException e) {\n                Log.e(TAG, \"delivery:\" + e.getMessage());\n                return Pair.create(false, null);\n            }\n        } else {\n            return Pair.create(false, null);\n        }\n    }\n\n    private static void getPurchasedRecords(final int type, String continuationToken) {", "        if (type == IapClient.PriceType.IN_APP_NONCONSUMABLE) {\n            mListener.onException(GET_PURCHASES_RECORDS, \"For non-consumables, please use queryPurchases API\");\n        }\n        IapRequestHelper.obtainOwnedPurchaseRecord(client, type, continuationToken, new IapApiCallback<OwnedPurchasesResult>() {\n            @Override\n            public void onSuccess(OwnedPurchasesResult result) {\n                List<String> inAppPurchaseDataList = result.getInAppPurchaseDataList();\n                List<String> signatureList = result.getInAppSignature();\n                List<InAppPurchaseData> purchasedProductDatas = new ArrayList<>();\n                if (inAppPurchaseDataList == null) {\n                    return;\n                }\n\n                // If the continuationToken is not empty, you need to continue the query to get all purchase data.\n                String token = result.getContinuationToken();", "                if (inAppPurchaseDataList == null) {\n                    return;\n                }\n\n                // If the continuationToken is not empty, you need to continue the query to get all purchase data.\n                String token = result.getContinuationToken();\n                if (!TextUtils.isEmpty(token)) {\n                    getPurchasedRecords(type, token);\n                    return;\n                }\n\n                Log.i(TAG, \"obtainOwnedPurchaseRecord, success\");", "                try {\n                    for (int i = 0; i < signatureList.size(); i++) {\n                        String inAppPurchaseDataStr = inAppPurchaseDataList.get(i);\n                        // Check whether the signature of the purchase data is valid.\n                        boolean success = CipherUtil.doCheck(inAppPurchaseDataStr, signatureList.get(i), mPublicKey);\n                        if (success) {\n                            purchasedProductDatas.add(new InAppPurchaseData(inAppPurchaseDataStr));\n                        }\n                    }\n                } catch (JSONException ex) {\n                    mListener.onException(GET_PURCHASES_RECORDS, \"Error when parsing data\");\n                }\n                mListener.onObtainPurchasedRecords(purchasedProductDatas, type); \n            }\n\n            @Override", "            public void onFail(Exception e) {\n                Log.e(TAG, \"obtainOwnedPurchaseRecord, \" + e.getMessage());\n                ExceptionHandle.handle(mActivity, GET_PURCHASES_RECORDS, e, mListener);          \n            }\n        });\n    }\n  \n    public static void showSubscription(String productId)\n    {\n       IapRequestHelper.showSubscription(mActivity,productId);\n    }  \n", "    public static void manageSubscriptions()\n    {\n       IapRequestHelper.manageSubscriptions(mActivity);\n    }\n\n}\n\n"]}
{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/utils/CipherUtil.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software", " *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.huawei.iapplugin.utils;\n", "package com.huawei.iapplugin.utils;\n\nimport android.text.TextUtils;\nimport android.util.Base64;\nimport android.util.Log;\nimport java.io.UnsupportedEncodingException;\nimport java.security.InvalidKeyException;\nimport java.security.KeyFactory;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PublicKey;", "import java.security.NoSuchAlgorithmException;\nimport java.security.PublicKey;\nimport java.security.SignatureException;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.X509EncodedKeySpec;\n\n/**\n * Signature related tools.\n *\n * @since 2019/12/9", " *\n * @since 2019/12/9\n */\npublic class CipherUtil {\n    private static final String TAG = \"CipherUtil\";\n\n    // The SHA256WithRSA algorithm.\n    private static final String SIGN_ALGORITHMS = \"SHA256WithRSA\";\n\n    /**\n     * The method to check the signature for the data returned from the interface.\n     *\n     * @param content Unsigned data.\n     * @param sign The signature for content.", "     * @param publicKey The public of the application.\n     * @return boolean\n     */\n    public static boolean doCheck(String content, String sign, String publicKey) {\n        if (TextUtils.isEmpty(publicKey)) {\n            Log.e(TAG, \"publicKey is null\");\n            return false;\n        }\n\n        if (TextUtils.isEmpty(content) || TextUtils.isEmpty(sign)) {\n            Log.e(TAG, \"data is error\");\n            return false;\n        }\n", "        if (TextUtils.isEmpty(content) || TextUtils.isEmpty(sign)) {\n            Log.e(TAG, \"data is error\");\n            return false;\n        }\n\n        try {\n            KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n            byte[] encodedKey = Base64.decode(publicKey, Base64.DEFAULT);\n            PublicKey pubKey = keyFactory.generatePublic(new X509EncodedKeySpec(encodedKey));\n\n            java.security.Signature signature = java.security.Signature.getInstance(SIGN_ALGORITHMS);\n\n            signature.initVerify(pubKey);\n            signature.update(content.getBytes(\"utf-8\"));\n\n            boolean bverify = signature.verify(Base64.decode(sign, Base64.DEFAULT));\n            return bverify;\n\n        } catch (NoSuchAlgorithmException e) {\n            Log.e(TAG, \"doCheck NoSuchAlgorithmException\" + e);\n        } catch (InvalidKeySpecException e) {\n            Log.e(TAG, \"doCheck InvalidKeySpecException\" + e);\n        } catch (InvalidKeyException e) {\n            Log.e(TAG, \"doCheck InvalidKeyException\" + e);\n        } catch (SignatureException e) {\n            Log.e(TAG, \"doCheck SignatureException\" + e);\n        } catch (UnsupportedEncodingException e) {\n            Log.e(TAG, \"doCheck UnsupportedEncodingException\" + e);\n        }\n        return false;\n    }\n}"]}
{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/utils/ExceptionHandle.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software", " *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.huawei.iapplugin.utils;\n", "package com.huawei.iapplugin.utils;\n\nimport android.app.Activity;\nimport android.util.Log;\nimport com.huawei.hms.iap.IapApiException;\nimport com.huawei.hms.iap.entity.OrderStatusCode;\nimport com.huawei.iapplugin.HuaweiIapListener;\n\nimport static android.content.ContentValues.TAG;\n", "import static android.content.ContentValues.TAG;\n\n/**\n *  Handles the exception returned from the iap api.\n *\n * @since 2019/12/9\n */\npublic class ExceptionHandle {\n    /**\n     * The exception is solved.\n     */", "    public static final int SOLVED = 0;\n\n    /**\n     * Handles the exception returned from the IAP API.\n     *\n     * @param activity The Activity to call the IAP API.\n     * @param e The exception returned from the IAP API.\n     * @return int\n     */\n    public static int handle(Activity activity, int action, Exception e, HuaweiIapListener listener) {\n", "    public static int handle(Activity activity, int action, Exception e, HuaweiIapListener listener) {\n\n        if (e instanceof IapApiException) {\n            IapApiException iapApiException = (IapApiException) e;\n            Log.i(TAG, \"returnCode: \" + iapApiException.getStatusCode());\n            switch (iapApiException.getStatusCode()) {\n                case OrderStatusCode.ORDER_STATE_CANCEL:\n                    listener.onException(action, \"Order has been canceled!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_STATE_PARAM_ERROR:\n                    listener.onException(action, \"Order state param error!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_STATE_NET_ERROR:\n                    listener.onException(action, \"Order state net error!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_VR_UNINSTALL_ERROR:\n                    listener.onException(action, \"Order vr uninstall error!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_HWID_NOT_LOGIN:\n                    IapRequestHelper.startResolutionForResult(activity, iapApiException.getStatus(), Constants.REQ_CODE_LOGIN);\n                    return SOLVED;\n                case OrderStatusCode.ORDER_PRODUCT_OWNED:\n                    listener.onException(action, \"Product already owned error!\");\n                    return OrderStatusCode.ORDER_PRODUCT_OWNED;\n                case OrderStatusCode.ORDER_PRODUCT_NOT_OWNED:\n                    listener.onException(action, \"Product not owned error!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_PRODUCT_CONSUMED:\n                    listener.onException(action, \"Product consumed error!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_ACCOUNT_AREA_NOT_SUPPORTED:\n                    listener.onException(action, \"Order account area not supported error!\");\n                    return SOLVED;\n                case OrderStatusCode.ORDER_NOT_ACCEPT_AGREEMENT:\n                    listener.onException(action, \"User does not agree the agreement\");\n                    return SOLVED;\n                default:\n                    // Handle other error scenarios.\n                    listener.onException(action, \"Order unknown error!\");\n                    return SOLVED;\n            }\n        } else {\n            listener.onException(action, e.getMessage());\n            return SOLVED;\n        }\n    }\n}"]}
{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/utils/Constants.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software", " *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.huawei.iapplugin.utils;\n", "package com.huawei.iapplugin.utils;\n\n/**\n * Constants Class.\n *\n * @since 2019/12/9\n */\npublic class Constants {\n\n    /** RequestCode for pull up the pmsPay page */\n    public static final int REQ_CODE_BUY = 4002;\n\n    /** RequestCode for pull up the login page for isEnvReady interface */", "    public static final int REQ_CODE_BUY = 4002;\n\n    /** RequestCode for pull up the login page for isEnvReady interface */\n    public static final int REQ_CODE_LOGIN = 2001;\n\n}"]}
{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/utils/IapRequestHelper.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software", " *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.huawei.iapplugin.utils;\n", "package com.huawei.iapplugin.utils;\n\nimport android.app.Activity;\nimport android.content.IntentSender;\nimport android.text.TextUtils;\nimport android.util.Log;\n\nimport com.huawei.hmf.tasks.OnFailureListener;\nimport com.huawei.hmf.tasks.OnSuccessListener;\nimport com.huawei.hmf.tasks.Task;", "import com.huawei.hmf.tasks.OnSuccessListener;\nimport com.huawei.hmf.tasks.Task;\nimport com.huawei.hms.iap.Iap;\nimport com.huawei.hms.iap.IapApiException;\nimport com.huawei.hms.iap.IapClient;\nimport com.huawei.hms.iap.entity.ConsumeOwnedPurchaseReq;\nimport com.huawei.hms.iap.entity.ConsumeOwnedPurchaseResult;\nimport com.huawei.hms.iap.entity.IsEnvReadyResult;\nimport com.huawei.hms.iap.entity.OwnedPurchasesReq;\nimport com.huawei.hms.iap.entity.OwnedPurchasesResult;", "import com.huawei.hms.iap.entity.OwnedPurchasesReq;\nimport com.huawei.hms.iap.entity.OwnedPurchasesResult;\nimport com.huawei.hms.iap.entity.ProductInfoReq;\nimport com.huawei.hms.iap.entity.ProductInfoResult;\nimport com.huawei.hms.iap.entity.PurchaseIntentReq;\nimport com.huawei.hms.iap.entity.PurchaseIntentResult;\nimport com.huawei.hms.iap.entity.StartIapActivityReq;\nimport com.huawei.hms.iap.entity.StartIapActivityResult;\nimport com.huawei.hms.support.api.client.Status;\nimport com.huawei.iapplugin.HuaweiIapListener;", "import com.huawei.hms.support.api.client.Status;\nimport com.huawei.iapplugin.HuaweiIapListener;\n\nimport java.util.List;\n\n/**\n * The tool class of Iap interface.\n *\n * @since 2019/12/9\n */\npublic class IapRequestHelper {\n    private final static String TAG = \"IapRequestHelper\";\n\n    /**\n     * Create a PurchaseIntentReq object.\n     *\n     * @param type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param productId ID of the in-app product to be paid.\n     *              The in-app product ID is the product ID you set during in-app product configuration in AppGallery Connect.\n     * @return PurchaseIntentReq\n     */\n    private static PurchaseIntentReq createPurchaseIntentReq(int type, String productId) {\n        PurchaseIntentReq req = new PurchaseIntentReq();\n        req.setPriceType(type);\n        req.setProductId(productId);\n        req.setDeveloperPayload(\"SdkPurchase\");\n        return req;\n    }\n\n    /**\n     * Create a ConsumeOwnedPurchaseReq object.\n     *\n     * @param purchaseToken which is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.\n     *                      The app transfers this parameter for the Huawei payment server to update the order status and then deliver the in-app product.\n     * @return ConsumeOwnedPurchaseReq\n     */\n    private static ConsumeOwnedPurchaseReq createConsumeOwnedPurchaseReq(String purchaseToken) {\n        ConsumeOwnedPurchaseReq req = new ConsumeOwnedPurchaseReq();\n        req.setPurchaseToken(purchaseToken);\n        req.setDeveloperChallenge(\"SdkConsume\");\n        return req;\n    }\n\n    /**\n     * Create a OwnedPurchasesReq object.\n     *\n     * @param type type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param continuationToken A data location flag which returns from obtainOwnedPurchases api or obtainOwnedPurchaseRecord api.\n     * @return OwnedPurchasesReq\n     */\n    private static OwnedPurchasesReq createOwnedPurchasesReq(int type, String continuationToken) {\n        OwnedPurchasesReq req = new OwnedPurchasesReq();\n        req.setPriceType(type);\n        req.setContinuationToken(continuationToken);\n        return req;\n    }\n\n    /**\n     * Create a ProductInfoReq object.\n     *\n     * @param type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param productIds ID list of products to be queried. Each product ID must exist and be unique in the current app.\n     * @return ProductInfoReq\n     */\n    private static ProductInfoReq createProductInfoReq(int type, List<String> productIds) {\n        ProductInfoReq req = new ProductInfoReq();\n        req.setPriceType(type);\n        req.setProductIds(productIds);\n        return req;\n    }\n\n    /**\n     * To check whether the country or region of the logged in HUAWEI ID is included in the countries or regions supported by HUAWEI IAP.\n     *\n     * @param mClient IapClient instance to call the isEnvReady API.\n     * @param iapApiCallback IapApiCallback.\n     */", " * @since 2019/12/9\n */\npublic class IapRequestHelper {\n    private final static String TAG = \"IapRequestHelper\";\n\n    /**\n     * Create a PurchaseIntentReq object.\n     *\n     * @param type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param productId ID of the in-app product to be paid.\n     *              The in-app product ID is the product ID you set during in-app product configuration in AppGallery Connect.\n     * @return PurchaseIntentReq\n     */\n    private static PurchaseIntentReq createPurchaseIntentReq(int type, String productId) {\n        PurchaseIntentReq req = new PurchaseIntentReq();\n        req.setPriceType(type);\n        req.setProductId(productId);\n        req.setDeveloperPayload(\"SdkPurchase\");\n        return req;\n    }\n\n    /**\n     * Create a ConsumeOwnedPurchaseReq object.\n     *\n     * @param purchaseToken which is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.\n     *                      The app transfers this parameter for the Huawei payment server to update the order status and then deliver the in-app product.\n     * @return ConsumeOwnedPurchaseReq\n     */\n    private static ConsumeOwnedPurchaseReq createConsumeOwnedPurchaseReq(String purchaseToken) {\n        ConsumeOwnedPurchaseReq req = new ConsumeOwnedPurchaseReq();\n        req.setPurchaseToken(purchaseToken);\n        req.setDeveloperChallenge(\"SdkConsume\");\n        return req;\n    }\n\n    /**\n     * Create a OwnedPurchasesReq object.\n     *\n     * @param type type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param continuationToken A data location flag which returns from obtainOwnedPurchases api or obtainOwnedPurchaseRecord api.\n     * @return OwnedPurchasesReq\n     */\n    private static OwnedPurchasesReq createOwnedPurchasesReq(int type, String continuationToken) {\n        OwnedPurchasesReq req = new OwnedPurchasesReq();\n        req.setPriceType(type);\n        req.setContinuationToken(continuationToken);\n        return req;\n    }\n\n    /**\n     * Create a ProductInfoReq object.\n     *\n     * @param type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param productIds ID list of products to be queried. Each product ID must exist and be unique in the current app.\n     * @return ProductInfoReq\n     */\n    private static ProductInfoReq createProductInfoReq(int type, List<String> productIds) {\n        ProductInfoReq req = new ProductInfoReq();\n        req.setPriceType(type);\n        req.setProductIds(productIds);\n        return req;\n    }\n\n    /**\n     * To check whether the country or region of the logged in HUAWEI ID is included in the countries or regions supported by HUAWEI IAP.\n     *\n     * @param mClient IapClient instance to call the isEnvReady API.\n     * @param iapApiCallback IapApiCallback.\n     */", "    public static void isEnvReady(IapClient mClient, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call isEnvReady\");\n        Task<IsEnvReadyResult> task = mClient.isEnvReady();\n        task.addOnSuccessListener(new OnSuccessListener<IsEnvReadyResult>() {\n            @Override\n            public void onSuccess(IsEnvReadyResult result) {\n                Log.i(TAG, \"isEnvReady, success\");\n                iapApiCallback.onSuccess(result);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "            public void onFailure(Exception e) {\n                Log.e(TAG, \"isEnvReady, fail\");\n                iapApiCallback.onFail(e);\n            }\n        });\n    }\n\n    /**\n     * Obtain in-app product details configured in AppGallery Connect.\n     *\n     * @param iapClient IapClient instance to call the obtainProductInfo API.\n     * @param productIds ID list of products to be queried. Each product ID must exist and be unique in the current app.\n     * @param type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param iapApiCallback IapApiCallback\n     */", "    public static void obtainProductInfo(IapClient iapClient, final List<String> productIds, int type, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call obtainProductInfo\");\n\n        Task<ProductInfoResult> task = iapClient.obtainProductInfo(createProductInfoReq(type, productIds));\n        task.addOnSuccessListener(new OnSuccessListener<ProductInfoResult>() {\n            @Override\n            public void onSuccess(ProductInfoResult result) {\n                Log.i(TAG, \"obtainProductInfo, success\");\n                iapApiCallback.onSuccess(result);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "            public void onFailure(Exception e) {\n                Log.e(TAG, \"obtainProductInfo, fail\");\n                iapApiCallback.onFail(e);\n            }\n        });\n    }\n\n    /**\n     * Create orders for in-app products in the PMS.\n     *\n     * @param iapClient IapClient instance to call the createPurchaseIntent API.\n     * @param productId ID of the in-app product to be paid.\n     *                  The in-app product ID is the product ID you set during in-app product configuration in AppGallery Connect.\n     * @param type  In-app product type.\n     *              The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param iapApiCallback IapApiCallback\n     */", "    public static void createPurchaseIntent(final IapClient iapClient, String productId, int type, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call createPurchaseIntent\");\n        Task<PurchaseIntentResult> task = iapClient.createPurchaseIntent(createPurchaseIntentReq(type, productId));\n        task.addOnSuccessListener(new OnSuccessListener<PurchaseIntentResult>() {\n            @Override\n            public void onSuccess(PurchaseIntentResult result) {\n                Log.i(TAG, \"createPurchaseIntent, success\");\n                iapApiCallback.onSuccess(result);\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "            public void onFailure(Exception e) {\n                Log.e(TAG, \"createPurchaseIntent, fail\");\n                iapApiCallback.onFail(e);\n\n            }\n        });\n    }\n\n    /**\n     * To start an activity.\n     *\n     * @param activity The activity to launch a new page.\n     * @param status This parameter contains the pendingIntent object of the payment page.\n     * @param reqCode Result code.\n     */", "    public static void startResolutionForResult(Activity activity, Status status, int reqCode) {\n        if (status == null) {\n            Log.e(TAG, \"status is null\");\n            return;\n        }\n        if (status.hasResolution()) {\n            try {\n                status.startResolutionForResult(activity, reqCode);\n            } catch (IntentSender.SendIntentException exp) {\n                Log.e(TAG, exp.getMessage());\n            }\n        } else {\n            Log.e(TAG, \"intent is null\");\n        }\n    }\n\n    /**\n     * Query information about all subscribed in-app products, including consumables, non-consumables, and auto-renewable subscriptions.</br>\n     * If consumables are returned, the system needs to deliver them and calls the consumeOwnedPurchase API to consume the products.\n     * If non-consumables are returned, the in-app products do not need to be consumed.\n     * If subscriptions are returned, all existing subscription relationships of the user under the app are returned.\n     *\n     * @param mClient IapClient instance to call the obtainOwnedPurchases API.\n     * @param type In-app product type.\n     *             The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription\n     * @param continuationToken A data location flag for a query in pagination mode.\n     * @param iapApiCallback IapApiCallback\n     */", "    public static void obtainOwnedPurchases(IapClient mClient, final int type, String continuationToken, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call obtainOwnedPurchases\");\n        Task<OwnedPurchasesResult> task = mClient.obtainOwnedPurchases(IapRequestHelper.createOwnedPurchasesReq(type, continuationToken));\n        task.addOnSuccessListener(new OnSuccessListener<OwnedPurchasesResult>() {\n            @Override\n            public void onSuccess(OwnedPurchasesResult result) {\n                Log.i(TAG, \"obtainOwnedPurchases, success\");\n                iapApiCallback.onSuccess(result);\n\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "            public void onFailure(Exception e) {\n                Log.e(TAG, \"obtainOwnedPurchases, fail\");\n                iapApiCallback.onFail(e);\n            }\n        });\n\n    }\n\n    /**\n     * Obtain the historical consumption information about a consumable in-app product or all subscription receipts of a subscription.\n     *\n     * @param iapClient IapClient instance to call the obtainOwnedPurchaseRecord API.\n     * @param priceType In-app product type.\n     *                  The value contains: 0: consumable 1: non-consumable 2 auto-renewable subscription.\n     * @param continuationToken Data locating flag for supporting query in pagination mode.\n     * @param iapApiCallback IapApiCallback\n     */", "    public static void obtainOwnedPurchaseRecord(IapClient iapClient, int priceType, String continuationToken, final IapApiCallback iapApiCallback) {\n        Log.i(TAG, \"call obtainOwnedPurchaseRecord\");\n        Task<OwnedPurchasesResult> task = iapClient.obtainOwnedPurchaseRecord(createOwnedPurchasesReq(priceType, continuationToken));\n        task.addOnSuccessListener(new OnSuccessListener<OwnedPurchasesResult>() {\n            @Override\n            public void onSuccess(OwnedPurchasesResult result) {\n                Log.i(TAG, \"obtainOwnedPurchaseRecord, success\");\n                iapApiCallback.onSuccess(result);\n\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "            public void onFailure(Exception e) {\n                Log.e(TAG, \"obtainOwnedPurchaseRecord, fail\");\n                iapApiCallback.onFail(e);\n            }\n        });\n    }\n\n    /**\n     * Consume all the unconsumed purchases with priceType 0.\n     *\n     * @param iapClient IapClient instance to call the consumeOwnedPurchase API.\n     * @param purchaseToken which is generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.\n     */", "    public static void consumeOwnedPurchase(IapClient iapClient, String purchaseToken) {\n        Log.i(TAG, \"call consumeOwnedPurchase\");\n        Task<ConsumeOwnedPurchaseResult> task = iapClient.consumeOwnedPurchase(createConsumeOwnedPurchaseReq(purchaseToken));\n        task.addOnSuccessListener(new OnSuccessListener<ConsumeOwnedPurchaseResult>() {\n            @Override\n            public void onSuccess(ConsumeOwnedPurchaseResult result) {\n                // Consume success.\n                Log.i(TAG, \"consumeOwnedPurchase success\");\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "            public void onFailure(Exception e) {\n                if (e instanceof IapApiException) {\n                    IapApiException apiException = (IapApiException)e;\n                    int returnCode = apiException.getStatusCode();\n                    Log.e(TAG, \"consumeOwnedPurchase fail, IapApiException returnCode: \" + returnCode);\n                } else {\n                    // Other external errors\n                    Log.e(TAG, e.getMessage());\n                }\n\n            }\n        });\n    }\n\n    /**\n     * Displays the subscription editing page or subscription management page of HUAWEI IAP.\n     *\n     * @param activity The activity to launch a new page.\n     * @param productId The productId of the subscription product.\n     */", "    public static void showSubscription(final Activity activity, String productId, final int action, final HuaweiIapListener listener) {\n        StartIapActivityReq req = new StartIapActivityReq();\n        if (TextUtils.isEmpty(productId)) {\n            req.setType(StartIapActivityReq.TYPE_SUBSCRIBE_MANAGER_ACTIVITY);\n        } else {\n            req.setType(StartIapActivityReq.TYPE_SUBSCRIBE_EDIT_ACTIVITY);\n            req.setSubscribeProductId(productId);\n        }\n\n        IapClient iapClient = Iap.getIapClient(activity);\n        Task<StartIapActivityResult> task = iapClient.startIapActivity(req);\n\n        task.addOnSuccessListener(new OnSuccessListener<StartIapActivityResult>() {\n            @Override", "            public void onSuccess(StartIapActivityResult result) {\n                if(result != null) {\n                    result.startActivity(activity);\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                ExceptionHandle.handle(activity, action, e, listener);\n            }\n        });\n    }\n", "    public static void showSubscription(final Activity activity,String productId)\n    {\n        StartIapActivityReq req = new StartIapActivityReq();\n        req.setType(StartIapActivityReq.TYPE_SUBSCRIBE_EDIT_ACTIVITY);\n        req.setSubscribeProductId(productId);\n        IapClient iapClient = Iap.getIapClient(activity);\n        Task<StartIapActivityResult> task = iapClient.startIapActivity(req);\n\n        task.addOnSuccessListener(new OnSuccessListener<StartIapActivityResult>() {\n            @Override\n            public void onSuccess(StartIapActivityResult result) {", "            public void onSuccess(StartIapActivityResult result) {\n                if(result != null) {\n                    result.startActivity(activity);\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n\n                IapApiException apiException = (IapApiException)e;\n                int returnCode = apiException.getStatusCode();\n                Log.e(TAG, \"showSubscription fail, showSubscription returnCode: \" + returnCode);\n            }\n        });\n    }\n    ", "    public static void manageSubscriptions(final Activity activity)\n    {\n        Log.i(TAG, \"manageSubscriptions\");\n\n        StartIapActivityReq req = new StartIapActivityReq();\n        req.setType(StartIapActivityReq.TYPE_SUBSCRIBE_MANAGER_ACTIVITY);\n        IapClient iapClient = Iap.getIapClient(activity);\n        Task<StartIapActivityResult> task = iapClient.startIapActivity(req);\n\n        task.addOnSuccessListener(new OnSuccessListener<StartIapActivityResult>() {\n            @Override", "            public void onSuccess(StartIapActivityResult result) {\n                if(result != null) {\n                    result.startActivity(activity);\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n\n                IapApiException apiException = (IapApiException)e;\n                int returnCode = apiException.getStatusCode();\n                Log.e(TAG, \"manageSubscriptions fail, manageSubscriptions returnCode: \" + returnCode);\n            }\n        });\n\n    }\n\n}"]}
{"filename": "Source/HuaweiIAP/External/com/huawei/iapplugin/utils/IapApiCallback.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software", " *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.huawei.iapplugin.utils;\n", "package com.huawei.iapplugin.utils;\n\n/**\n * Used to callback the result from iap api.\n *\n * @since 2019/12/9\n */\npublic interface IapApiCallback<T> {\n\n    /**\n     * The request is successful.\n     *\n     * @param result The result of a successful response.\n     */\n    void onSuccess(T result);\n\n    /**\n     * Callback fail.\n     *\n     * @param e An Exception from IAPSDK.\n     */\n    void onFail(Exception e);\n}"]}
{"filename": "Source/HuaweiPush/External/com/huawei/plugin/push/HuaweiPushListener.java", "chunked_list": ["package com.huawei.plugin.push;\n\npublic interface HuaweiPushListener {\n    void onGetTokenSuccess(String token);\n    void onDeleteTokenSuccess();\n    void onNewToken(String token);\n    void onMessageReceived(String messageJson);\n    void onSubscribeSuccess();\n    void onUnSubscribeSuccess();\n    void onException(int errorCode, int action, String message);\n}\n"]}
{"filename": "Source/HuaweiPush/External/com/huawei/plugin/push/PushPluginService.java", "chunked_list": ["package com.huawei.plugin.push;\n\nimport android.util.Log;\n\nimport com.huawei.hms.push.HmsMessageService;\nimport com.huawei.hms.push.RemoteMessage;\nimport com.huawei.plugin.push.utils.Constants;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;", "import org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class PushPluginService extends HmsMessageService {\n    private String TAG = \"PushPluginService\";\n\n    @Override\n    public void onNewToken(String s) {\n        super.onNewToken(s);\n        HuaweiPushPlugin.handleGetNewToken(s);\n        Log.i(TAG, s);\n    }\n\n    @Override", "    public void onMessageReceived(RemoteMessage message) {\n        super.onMessageReceived(message);\n        Log.i(TAG, \"onMessageReceived is called\");\n\n        // Check whether the message is empty.\n        if (message == null) {\n            Log.e(TAG, \"Received message entity is null!\");\n            HuaweiPushPlugin.handleException(Constants.UNKNOWN_ERROR, Constants.ON_MESSAGE_RECEIVED, \"Received null message\");\n            return;\n        }\n        String messageData = message.getData();\n        HuaweiPushPlugin.handleReceiveMessage(messageData);\n    }\n}\n"]}
{"filename": "Source/HuaweiPush/External/com/huawei/plugin/push/HuaweiPushPlugin.java", "chunked_list": ["package com.huawei.plugin.push;\n\nimport android.app.Activity;\nimport android.app.NativeActivity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\n\nimport com.huawei.agconnect.AGConnectOptionsBuilder;", "\nimport com.huawei.agconnect.AGConnectOptionsBuilder;\nimport com.huawei.hmf.tasks.OnCompleteListener;\nimport com.huawei.hmf.tasks.Task;\nimport com.huawei.hms.aaid.HmsInstanceId;\nimport com.huawei.hms.common.ApiException;\nimport com.huawei.hms.push.HmsMessaging;\nimport com.huawei.plugin.push.utils.ExceptionHandle;\n\nimport java.util.Objects;", "\nimport java.util.Objects;\n\nimport static com.huawei.plugin.push.utils.Constants.INIT_FAILED;\nimport static com.huawei.plugin.push.utils.Constants.DELETE_TOKEN_FAILED;\nimport static com.huawei.plugin.push.utils.Constants.GET_TOKEN_FAILED;\nimport static com.huawei.plugin.push.utils.Constants.SUBSCRIBE_FAILED;\nimport static com.huawei.plugin.push.utils.Constants.UNKNOWN_ERROR;\nimport static com.huawei.plugin.push.utils.Constants.UN_SUBSCRIBE_FAILED;\n\npublic class HuaweiPushPlugin implements HuaweiPushListener {\n\n    private static final String TAG = \"HuaweiPushPlugin\";\n    private static NativeActivity mActivity = null;\n    private static String APP_ID = \"\";\n    private static HuaweiPushPlugin mInstance;\n    private static String mToken;\n    private static String mMessageJson;\n    private static int mErrorCode = -1;\n    private static int mAction = -1;\n    private static String mMessage;\n\n    // native C++ methods\n    private static native void nativeOnGetTokenSuccess(String token);\n    private static native void nativeOnDeleteTokenSuccess();\n    private static native void nativeOnNewToken(String token);\n    private static native void nativeOnMessageReceived(String messageJson);\n    private static native void nativeOnSubscribeSuccess();\n    private static native void nativeOnUnSubscribeSuccess();\n    private static native void nativeOnException(int errorCode, int action, String message);\n", "import static com.huawei.plugin.push.utils.Constants.UN_SUBSCRIBE_FAILED;\n\npublic class HuaweiPushPlugin implements HuaweiPushListener {\n\n    private static final String TAG = \"HuaweiPushPlugin\";\n    private static NativeActivity mActivity = null;\n    private static String APP_ID = \"\";\n    private static HuaweiPushPlugin mInstance;\n    private static String mToken;\n    private static String mMessageJson;\n    private static int mErrorCode = -1;\n    private static int mAction = -1;\n    private static String mMessage;\n\n    // native C++ methods\n    private static native void nativeOnGetTokenSuccess(String token);\n    private static native void nativeOnDeleteTokenSuccess();\n    private static native void nativeOnNewToken(String token);\n    private static native void nativeOnMessageReceived(String messageJson);\n    private static native void nativeOnSubscribeSuccess();\n    private static native void nativeOnUnSubscribeSuccess();\n    private static native void nativeOnException(int errorCode, int action, String message);\n", "    public static HuaweiPushPlugin getInstance() {\n        return mInstance;\n    }\n\n    public HuaweiPushPlugin(NativeActivity activity) {\n        mInstance = this;\n        mActivity = activity;\n    }\n\n    public static void handleGetNewToken(String token) {\n        if (mInstance == null) {\n            synchronized(TAG) {\n                mToken = token;\n            }\n        } else {\n            nativeOnNewToken(token);\n        }\n    }\n", "    public static void handleGetNewToken(String token) {\n        if (mInstance == null) {\n            synchronized(TAG) {\n                mToken = token;\n            }\n        } else {\n            nativeOnNewToken(token);\n        }\n    }\n\n    public static void handleReceiveMessage(String messageJson) {", "    public static void handleReceiveMessage(String messageJson) {\n        if (mInstance == null) {\n            synchronized(TAG) {\n                mMessageJson = messageJson;\n            }\n        } else {\n            nativeOnMessageReceived(messageJson);\n        }\n    }\n\n    public static void handleException(int errorCode, int action, String message) {", "    public static void handleException(int errorCode, int action, String message) {\n        if (mInstance == null) {\n            synchronized(TAG) {\n                mErrorCode = errorCode;\n                mAction = action;\n                mMessage = message;\n            }\n        } else {\n            nativeOnException(errorCode, action, message);\n        }\n    }\n", "    public void init() {\n        APP_ID = new AGConnectOptionsBuilder().build(mActivity).getString(\"client/app_id\");\n        if (APP_ID == null) {\n            onException(UNKNOWN_ERROR, INIT_FAILED, \"Cannot get application ID. Please check your agconnect-services.json file\");\n            return;\n        }\n        synchronized(TAG) {\n            if (mToken != null) {\n                onNewToken(mToken);\n                mToken = null;\n            }", "            if (mMessageJson != null) {\n                onMessageReceived(mMessageJson);\n                mMessageJson = null;\n            }\n            if (mErrorCode != -1 || mAction != -1 || mMessage != null) {\n                nativeOnException(mErrorCode, mAction, mMessage);\n                mErrorCode = -1;\n                mAction = -1;\n                mMessage = null;\n            }\n        }\n    }\n", "    public void getToken() {\n        // Create a thread.\n        new Thread() {\n            @Override\n            public void run() {\n                try {\n                    // Set tokenScope to HCM.\n                    String tokenScope = \"HCM\";\n                    String token = HmsInstanceId.getInstance(mActivity).getToken(APP_ID, tokenScope);\n                    Log.i(TAG, \"get token: \" + token);\n\n                    // Check whether the token is null.", "                    if (!TextUtils.isEmpty(token)) {\n                        onGetTokenSuccess(token);\n                    } else {\n                        onException(UNKNOWN_ERROR, GET_TOKEN_FAILED, \"token is null\");\n                    }\n                } catch (ApiException e) {\n                    Log.e(TAG, \"get token failed, \" + e);\n                    ExceptionHandle.handle(mActivity, GET_TOKEN_FAILED, e, HuaweiPushPlugin.this);\n                }\n            }\n        }.start();\n    }\n", "    public void deleteToken() {\n        // Create a thread.\n        new Thread() {\n            @Override\n            public void run() {\n                try {\n                    // Set tokenScope to HCM.\n                    String tokenScope = \"HCM\";\n\n                    // Delete the token.\n                    HmsInstanceId.getInstance(mActivity).deleteToken(APP_ID, tokenScope);\n                    onDeleteTokenSuccess();\n                    Log.i(TAG, \"token deleted successfully\");\n                } catch (ApiException e) {\n                    Log.e(TAG, \"deleteToken failed.\" + e);\n                    ExceptionHandle.handle(mActivity, DELETE_TOKEN_FAILED, e, HuaweiPushPlugin.this);\n                }\n            }\n        }.start();\n    }\n", "    public void setAutoInitEnabled(final boolean isEnable) {\n        HmsMessaging.getInstance(mActivity).setAutoInitEnabled(isEnable);\n    }\n\n    public void subscribe(String topic) {\n        try {\n            // Subscribe to a topic.\n            HmsMessaging.getInstance(mActivity).subscribe(topic)\n                    .addOnCompleteListener(new OnCompleteListener<Void>() {\n                        @Override\n                        public void onComplete(Task<Void> task) {\n                            // Obtain the topic subscription result.", "                        public void onComplete(Task<Void> task) {\n                            // Obtain the topic subscription result.\n                            if (task.isSuccessful()) {\n                                Log.i(TAG, \"subscribe topic successfully\");\n                                onSubscribeSuccess();\n                            } else {\n                                Log.e(TAG,\n                                        \"subscribe topic failed, return value is \" + task.getException().getMessage());\n                                ExceptionHandle.handle(mActivity, SUBSCRIBE_FAILED, task.getException(), HuaweiPushPlugin.this);\n                            }\n                        }\n                    });\n        } catch (Exception e) {\n            Log.e(TAG, \"subscribe failed, catch exception : \" + e.getMessage());\n            onException(UNKNOWN_ERROR, SUBSCRIBE_FAILED, e.getMessage());\n        }\n    }\n", "    public void unsubscribe(String topic) {\n        try {\n            // Unsubscribe from a topic.\n            HmsMessaging.getInstance(mActivity).unsubscribe(topic)\n                    .addOnCompleteListener(new OnCompleteListener<Void>() {\n                        @Override\n                        public void onComplete(Task<Void> task) {\n                            // Obtain the topic unsubscription result.\n                            if (task.isSuccessful()) {\n                                Log.i(TAG, \"unsubscribe topic successfully\");\n                                onUnSubscribeSuccess();\n                            } else {\n                                Log.e(TAG, \"unsubscribe topic failed, return value is \"\n                                        + task.getException().getMessage());\n                                ExceptionHandle.handle(mActivity, UN_SUBSCRIBE_FAILED, task.getException(), HuaweiPushPlugin.this);\n                            }\n                        }\n                    });\n        } catch (Exception e) {\n            Log.e(TAG, \"unsubscribe failed, catch exception : \" + e.getMessage());\n            onException(UNKNOWN_ERROR, UN_SUBSCRIBE_FAILED, e.getMessage());\n        }\n    }\n\n    @Override", "                            if (task.isSuccessful()) {\n                                Log.i(TAG, \"unsubscribe topic successfully\");\n                                onUnSubscribeSuccess();\n                            } else {\n                                Log.e(TAG, \"unsubscribe topic failed, return value is \"\n                                        + task.getException().getMessage());\n                                ExceptionHandle.handle(mActivity, UN_SUBSCRIBE_FAILED, task.getException(), HuaweiPushPlugin.this);\n                            }\n                        }\n                    });\n        } catch (Exception e) {\n            Log.e(TAG, \"unsubscribe failed, catch exception : \" + e.getMessage());\n            onException(UNKNOWN_ERROR, UN_SUBSCRIBE_FAILED, e.getMessage());\n        }\n    }\n\n    @Override", "    public void onGetTokenSuccess(String token) {\n        nativeOnGetTokenSuccess(token);\n    }\n\n    @Override\n    public void onDeleteTokenSuccess() {\n        nativeOnDeleteTokenSuccess();\n    }\n\n    @Override\n    public void onNewToken(String token) {\n        nativeOnNewToken(token);\n    }\n\n    @Override", "    public void onNewToken(String token) {\n        nativeOnNewToken(token);\n    }\n\n    @Override\n    public void onMessageReceived(String messageJson) {\n        nativeOnMessageReceived(messageJson);\n    }\n\n    @Override\n    public void onSubscribeSuccess() {\n        nativeOnSubscribeSuccess();\n    }\n\n    @Override", "    public void onSubscribeSuccess() {\n        nativeOnSubscribeSuccess();\n    }\n\n    @Override\n    public void onUnSubscribeSuccess() {\n        nativeOnUnSubscribeSuccess();\n    }\n\n    @Override\n    public void onException(int errorCode, int action, String message) {\n        nativeOnException(errorCode, action, message);\n    }\n}\n", "    public void onException(int errorCode, int action, String message) {\n        nativeOnException(errorCode, action, message);\n    }\n}\n"]}
{"filename": "Source/HuaweiPush/External/com/huawei/plugin/push/utils/ExceptionHandle.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n * <p>\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n * <p>\n * http://www.apache.org/licenses/LICENSE-2.0\n * <p>\n * Unless required by applicable law or agreed to in writing, software", " * <p>\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.huawei.plugin.push.utils;\n", "package com.huawei.plugin.push.utils;\n\nimport android.app.Activity;\nimport android.util.Log;\n\nimport com.huawei.hms.adapter.internal.AvailableCode;\nimport com.huawei.hms.adapter.internal.BaseCode;\nimport com.huawei.hms.common.ApiException;\nimport com.huawei.hms.support.api.entity.auth.AuthCode;\nimport com.huawei.hms.support.api.entity.core.CommonCode;", "import com.huawei.hms.support.api.entity.auth.AuthCode;\nimport com.huawei.hms.support.api.entity.core.CommonCode;\nimport com.huawei.plugin.push.HuaweiPushListener;\n\nimport static com.huawei.plugin.push.utils.Constants.UNKNOWN_ERROR;\n\n/**\n *  Handles the exception returned from the iap api.\n *\n * @since 2019/12/9", " *\n * @since 2019/12/9\n */\npublic class ExceptionHandle {\n    private static String TAG = \"ExceptionHandle\";\n    /**\n     * The exception is solved.\n     */\n    public static final int SOLVED = 0;\n\n    /**\n     * Handles the exception returned from the IAP API.\n     *\n     * @param activity The Activity to call the IAP API.\n     * @param e The exception returned from the IAP API.\n     * @return int\n     */", "    public static final int SOLVED = 0;\n\n    /**\n     * Handles the exception returned from the IAP API.\n     *\n     * @param activity The Activity to call the IAP API.\n     * @param e The exception returned from the IAP API.\n     * @return int\n     */\n    public static int handle(Activity activity, int action, Exception e, HuaweiPushListener listener) {\n        if (e instanceof ApiException) {\n            ApiException apiException = (ApiException) e;\n            Log.i(TAG, \"returnCode: \" + apiException.getStatusCode());\n            switch (apiException.getStatusCode()) {\n                case CommonCode.ErrorCode.ARGUMENTS_INVALID:\n                    listener.onException(CommonCode.ErrorCode.ARGUMENTS_INVALID, action, \"Incorrect input parameters.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.INTERNAL_ERROR:\n                    listener.onException(CommonCode.ErrorCode.INTERNAL_ERROR, action, \"An internal error occurred and cannot be rectified.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.NAMING_INVALID:\n                    listener.onException(CommonCode.ErrorCode.NAMING_INVALID, action, \"Failed to query the specified service API, because the API does not exist or the API instance failed to be created.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.CLIENT_API_INVALID:\n                    listener.onException(CommonCode.ErrorCode.CLIENT_API_INVALID, action, \"Invalid ApiClient object.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.EXECUTE_TIMEOUT:\n                    listener.onException(CommonCode.ErrorCode.EXECUTE_TIMEOUT, action, \"AIDL call timed out.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.NOT_IN_SERVICE:\n                    listener.onException(CommonCode.ErrorCode.NOT_IN_SERVICE, action, \"This service is unavailable in this region.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.SESSION_INVALID:\n                    listener.onException(CommonCode.ErrorCode.SESSION_INVALID, action, \"HMS Core SDK internal error. The AIDL connection session is invalid.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.GET_SCOPE_ERROR:\n                    listener.onException(AuthCode.ErrorCode.GET_SCOPE_ERROR, action, \"Failed to call the gateway to query Scope of the app.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.SCOPE_LIST_EMPTY:\n                    listener.onException(AuthCode.ErrorCode.SCOPE_LIST_EMPTY, action, \"Scope of OpenGW is not configured.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.CERT_FINGERPRINT_EMPTY:\n                    listener.onException(AuthCode.ErrorCode.CERT_FINGERPRINT_EMPTY, action, \"No certificate fingerprint is configured for OpenGW.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.PERMISSION_LIST_EMPTY:\n                    listener.onException(AuthCode.ErrorCode.PERMISSION_LIST_EMPTY, action, \"The permission of OpenGW is not configured\");\n                    return SOLVED;\n                case AuthCode.StatusCode.AUTH_INFO_NOT_EXIST:\n                    listener.onException(AuthCode.StatusCode.AUTH_INFO_NOT_EXIST, action, \"The app's authentication information does not exist\");\n                    return SOLVED;\n                case AuthCode.StatusCode.CERT_FINGERPRINT_ERROR:\n                    listener.onException(AuthCode.StatusCode.CERT_FINGERPRINT_ERROR, action, \"Certificate fingerprint verification: Incorrect signing certificate fingerprint.\");\n                    return SOLVED;\n                case AuthCode.StatusCode.PERMISSION_NOT_EXIST:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_NOT_EXIST, action, \"API authentication: Permission not granted from HUAWEI Developers.\");\n                    return SOLVED;\n                case AuthCode.StatusCode.PERMISSION_NOT_AUTHORIZED:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_NOT_AUTHORIZED, action, \"API authentication: Permission not granted.\");\n                    return SOLVED;\n                case AuthCode.StatusCode.PERMISSION_EXPIRED:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_EXPIRED, action, \"API authentication: Permission expired.\");\n                    return SOLVED;\n                case BaseCode.PARAM_ERROR:\n                    listener.onException(BaseCode.PARAM_ERROR, action, \"The input parameter is set to null.\");\n                    return SOLVED;\n                case BaseCode.ACTIVITY_NULL:\n                    listener.onException(BaseCode.ACTIVITY_NULL, action, \"The reference of the passed Activity object is null.\");\n                    return SOLVED;\n                case BaseCode.NO_SOLUTION:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_NOT_EXIST, action, \"The service side does not return Intent or PendingIntent.\");\n                    return SOLVED;\n\n                case BaseCode.DATA_NULL_IN_INTENT:\n                    listener.onException(BaseCode.DATA_NULL_IN_INTENT, action, \"The data field in the intent returned by onActivityResult is set to null, or the intent does not record the update result.\");\n                    return SOLVED;\n                case BaseCode.NO_AVAILABLE_LIB_ERROR:\n                    listener.onException(BaseCode.NO_AVAILABLE_LIB_ERROR, action, \"The update failed because you have not integrated the availableupdate SDK.\");\n                    return SOLVED;\n                case BaseCode.KPMS_UPDATE_FAILED:\n                    listener.onException(BaseCode.KPMS_UPDATE_FAILED, action, \"The kit failed to be updated using the KPMS.\");\n                    return SOLVED;\n                case AvailableCode.CANCELED:\n                    listener.onException(AvailableCode.CANCELED, action, \"The operation is canceled by the user.\");\n                    return SOLVED;\n                case AvailableCode.ERROR_NO_ACTIVITY:\n                    listener.onException(AvailableCode.ERROR_NO_ACTIVITY, action, \"The page cannot be displayed because no Activity object is passed.\");\n                    return SOLVED;\n                case AvailableCode.APP_IS_BACKGROUND_OR_LOCKED:\n                    listener.onException(AvailableCode.APP_IS_BACKGROUND_OR_LOCKED, action, \"The update page failed to be displayed because the app is running in the background or the screen of the device is locked.\");\n                    return SOLVED;\n                case AvailableCode.HMS_IS_SPOOF:\n                    listener.onException(AvailableCode.ERROR_NO_ACTIVITY, action, \"HMS Core (APK) is spoofed.\");\n                    return SOLVED;\n                case -5:\n                    listener.onException(-5, action, \"Failed to obtain the token.\");\n                    return SOLVED;\n                case 907122030:\n                    listener.onException(907122030, action, \"No token.\");\n                    return SOLVED;\n                case 907122031:\n                    listener.onException(907122031, action, \"The network is unavailable.\");\n                    return SOLVED;\n                case 907122032:\n                    listener.onException(907122032, action, \"The token has expired.\");\n                    return SOLVED;\n                case 907122034:\n                    listener.onException(907122034, action, \"The number of topics to be subscribed to exceeds the threshold (2000).\");\n                    return SOLVED;\n                case 907122035:\n                    listener.onException(907122035, action, \"Failed to subscribe to the topic.\");\n                    return SOLVED;\n                case 907122036:\n                    listener.onException(907122036, action, \"Push Kit is not enabled.\");\n                    return SOLVED;\n                case 907122037:\n                    listener.onException(907122037, action, \"Failed to obtain the token.\");\n                    return SOLVED;\n                case 907122038:\n                    listener.onException(907122038, action, \"No storage location is selected for the app, or the storage location is invalid.\");\n                    return SOLVED;\n                case 907122041:\n                    listener.onException(907122041, action, \"The message body size exceeds the maximum (1 KB).\");\n                    return SOLVED;\n                case 907122042:\n                    listener.onException(907122042, action, \"The message contains invalid parameters.\");\n                    return SOLVED;\n                case 907122043:\n                    listener.onException(907122043, action, \"This message is discarded because the number of sent messages reaches the upper limit.\");\n                    return SOLVED;\n                case 907122044:\n                    listener.onException(907122044, action, \"Before being sent to your server, the message is discarded due to expiration.\");\n                    return SOLVED;\n                case 907122045:\n                    listener.onException(907122045, action, \"Unknown error.\");\n                    return SOLVED;\n                case 907122047:\n                    listener.onException(907122047, action, \"Common Push Kit error.\");\n                    return SOLVED;\n                case 907122048:\n                    listener.onException(907122048, action, \"HMS Core (APK) cannot connect to Push Kit.\");\n                    return SOLVED;\n                case 907122049:\n                    listener.onException(907122049, action, \"EMUI is not in the required version, or Push Kit is not in the required version.\");\n                    return SOLVED;\n                case 907122050:\n                    listener.onException(907122050, action, \"The operation cannot be performed in the main thread.\");\n                    return SOLVED;\n                case 907122051:\n                    listener.onException(907122051, action, \"Failed to authenticate the device certificate.\");\n                    return SOLVED;\n                case 907122052:\n                    listener.onException(907122052, action, \"Failed to bind the service.\");\n                    return SOLVED;\n                case 907122053:\n                    listener.onException(907122053, action, \"Failed to obtain the token. Cross-location application is not allowed.\");\n                    return SOLVED;\n                case 907122054:\n                    listener.onException(907122054, action, \"The HMS Core Push SDK is being automatically initialized.\");\n                    return SOLVED;\n                case 907122055:\n                    listener.onException(907122055, action, \"The system is busy.\");\n                    return SOLVED;\n                case 907122056:\n                    listener.onException(907122056, action, \"Failed to send an uplink message.\");\n                    return SOLVED;\n                case 907122057:\n                    listener.onException(907122057, action, \"Incorrect input parameter for constructing an object for sending uplink messages.\");\n                    return SOLVED;\n                case 907122058:\n                    listener.onException(907122058, action, \"The message is discarded because the number of cached uplink messages to be sent by the app exceeds the threshold (20).\");\n                    return SOLVED;\n                case 907122059:\n                    listener.onException(907122059, action, \"The uplink message sent by the app is cached due to a cause such as network unavailability.\");\n                    return SOLVED;\n                case 907122060:\n                    listener.onException(907122060, action, \"Your server is offline.\");\n                    return SOLVED;\n                case 907122061:\n                    listener.onException(907122061, action, \"Flow control is performed because the frequency for the app to send uplink messages is too high.\");\n                    return SOLVED;\n                case 907122064:\n                    listener.onException(907122064, action, \"The agconnect-services.json file does not contain the projectId field.\");\n                    return SOLVED;\n                case 907122065:\n                    listener.onException(907122065, action, \"Failed to obtain a token for the apps on smart watches, VR devices, or routers.\");\n                    return SOLVED;\n                case 907122066:\n                    listener.onException(907122066, action, \"Failed to obtain HUAWEI ID information.\");\n                    return SOLVED;\n                case 907122067:\n                    listener.onException(907122067, action, \"The number of added user-app relationships exceeds the maximum (10).\");\n                    return SOLVED;\n                case 907122101:\n                    listener.onException(907122101, action, \"Failed to obtain the token of the third-party push service.\");\n                    return SOLVED;\n                case 907122102:\n                    listener.onException(907122102, action, \"Failed to delete the token of the third-party push service.\");\n                    return SOLVED;\n                case 907122103:\n                    listener.onException(907122103, action, \"An internal error occurs in the third-party push SDK.\");\n                    return SOLVED;\n                case 907122104:\n                    listener.onException(907122104, action, \"Failed to obtain the domain name.\");\n                    return SOLVED;\n                case 907122105:\n                    listener.onException(907122105, action, \"Failed to construct the JSON message body for obtaining a token.\");\n                    return SOLVED;\n                default:\n                    // Handle other error scenarios.\n                    listener.onException(apiException.getStatusCode(), action, \"unknown error!\");\n                    return SOLVED;\n            }\n        } else {\n            listener.onException(UNKNOWN_ERROR, action, e.getMessage());\n            return SOLVED;\n        }\n    }\n}", "    public static int handle(Activity activity, int action, Exception e, HuaweiPushListener listener) {\n        if (e instanceof ApiException) {\n            ApiException apiException = (ApiException) e;\n            Log.i(TAG, \"returnCode: \" + apiException.getStatusCode());\n            switch (apiException.getStatusCode()) {\n                case CommonCode.ErrorCode.ARGUMENTS_INVALID:\n                    listener.onException(CommonCode.ErrorCode.ARGUMENTS_INVALID, action, \"Incorrect input parameters.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.INTERNAL_ERROR:\n                    listener.onException(CommonCode.ErrorCode.INTERNAL_ERROR, action, \"An internal error occurred and cannot be rectified.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.NAMING_INVALID:\n                    listener.onException(CommonCode.ErrorCode.NAMING_INVALID, action, \"Failed to query the specified service API, because the API does not exist or the API instance failed to be created.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.CLIENT_API_INVALID:\n                    listener.onException(CommonCode.ErrorCode.CLIENT_API_INVALID, action, \"Invalid ApiClient object.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.EXECUTE_TIMEOUT:\n                    listener.onException(CommonCode.ErrorCode.EXECUTE_TIMEOUT, action, \"AIDL call timed out.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.NOT_IN_SERVICE:\n                    listener.onException(CommonCode.ErrorCode.NOT_IN_SERVICE, action, \"This service is unavailable in this region.\");\n                    return SOLVED;\n                case CommonCode.ErrorCode.SESSION_INVALID:\n                    listener.onException(CommonCode.ErrorCode.SESSION_INVALID, action, \"HMS Core SDK internal error. The AIDL connection session is invalid.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.GET_SCOPE_ERROR:\n                    listener.onException(AuthCode.ErrorCode.GET_SCOPE_ERROR, action, \"Failed to call the gateway to query Scope of the app.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.SCOPE_LIST_EMPTY:\n                    listener.onException(AuthCode.ErrorCode.SCOPE_LIST_EMPTY, action, \"Scope of OpenGW is not configured.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.CERT_FINGERPRINT_EMPTY:\n                    listener.onException(AuthCode.ErrorCode.CERT_FINGERPRINT_EMPTY, action, \"No certificate fingerprint is configured for OpenGW.\");\n                    return SOLVED;\n                case AuthCode.ErrorCode.PERMISSION_LIST_EMPTY:\n                    listener.onException(AuthCode.ErrorCode.PERMISSION_LIST_EMPTY, action, \"The permission of OpenGW is not configured\");\n                    return SOLVED;\n                case AuthCode.StatusCode.AUTH_INFO_NOT_EXIST:\n                    listener.onException(AuthCode.StatusCode.AUTH_INFO_NOT_EXIST, action, \"The app's authentication information does not exist\");\n                    return SOLVED;\n                case AuthCode.StatusCode.CERT_FINGERPRINT_ERROR:\n                    listener.onException(AuthCode.StatusCode.CERT_FINGERPRINT_ERROR, action, \"Certificate fingerprint verification: Incorrect signing certificate fingerprint.\");\n                    return SOLVED;\n                case AuthCode.StatusCode.PERMISSION_NOT_EXIST:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_NOT_EXIST, action, \"API authentication: Permission not granted from HUAWEI Developers.\");\n                    return SOLVED;\n                case AuthCode.StatusCode.PERMISSION_NOT_AUTHORIZED:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_NOT_AUTHORIZED, action, \"API authentication: Permission not granted.\");\n                    return SOLVED;\n                case AuthCode.StatusCode.PERMISSION_EXPIRED:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_EXPIRED, action, \"API authentication: Permission expired.\");\n                    return SOLVED;\n                case BaseCode.PARAM_ERROR:\n                    listener.onException(BaseCode.PARAM_ERROR, action, \"The input parameter is set to null.\");\n                    return SOLVED;\n                case BaseCode.ACTIVITY_NULL:\n                    listener.onException(BaseCode.ACTIVITY_NULL, action, \"The reference of the passed Activity object is null.\");\n                    return SOLVED;\n                case BaseCode.NO_SOLUTION:\n                    listener.onException(AuthCode.StatusCode.PERMISSION_NOT_EXIST, action, \"The service side does not return Intent or PendingIntent.\");\n                    return SOLVED;\n\n                case BaseCode.DATA_NULL_IN_INTENT:\n                    listener.onException(BaseCode.DATA_NULL_IN_INTENT, action, \"The data field in the intent returned by onActivityResult is set to null, or the intent does not record the update result.\");\n                    return SOLVED;\n                case BaseCode.NO_AVAILABLE_LIB_ERROR:\n                    listener.onException(BaseCode.NO_AVAILABLE_LIB_ERROR, action, \"The update failed because you have not integrated the availableupdate SDK.\");\n                    return SOLVED;\n                case BaseCode.KPMS_UPDATE_FAILED:\n                    listener.onException(BaseCode.KPMS_UPDATE_FAILED, action, \"The kit failed to be updated using the KPMS.\");\n                    return SOLVED;\n                case AvailableCode.CANCELED:\n                    listener.onException(AvailableCode.CANCELED, action, \"The operation is canceled by the user.\");\n                    return SOLVED;\n                case AvailableCode.ERROR_NO_ACTIVITY:\n                    listener.onException(AvailableCode.ERROR_NO_ACTIVITY, action, \"The page cannot be displayed because no Activity object is passed.\");\n                    return SOLVED;\n                case AvailableCode.APP_IS_BACKGROUND_OR_LOCKED:\n                    listener.onException(AvailableCode.APP_IS_BACKGROUND_OR_LOCKED, action, \"The update page failed to be displayed because the app is running in the background or the screen of the device is locked.\");\n                    return SOLVED;\n                case AvailableCode.HMS_IS_SPOOF:\n                    listener.onException(AvailableCode.ERROR_NO_ACTIVITY, action, \"HMS Core (APK) is spoofed.\");\n                    return SOLVED;\n                case -5:\n                    listener.onException(-5, action, \"Failed to obtain the token.\");\n                    return SOLVED;\n                case 907122030:\n                    listener.onException(907122030, action, \"No token.\");\n                    return SOLVED;\n                case 907122031:\n                    listener.onException(907122031, action, \"The network is unavailable.\");\n                    return SOLVED;\n                case 907122032:\n                    listener.onException(907122032, action, \"The token has expired.\");\n                    return SOLVED;\n                case 907122034:\n                    listener.onException(907122034, action, \"The number of topics to be subscribed to exceeds the threshold (2000).\");\n                    return SOLVED;\n                case 907122035:\n                    listener.onException(907122035, action, \"Failed to subscribe to the topic.\");\n                    return SOLVED;\n                case 907122036:\n                    listener.onException(907122036, action, \"Push Kit is not enabled.\");\n                    return SOLVED;\n                case 907122037:\n                    listener.onException(907122037, action, \"Failed to obtain the token.\");\n                    return SOLVED;\n                case 907122038:\n                    listener.onException(907122038, action, \"No storage location is selected for the app, or the storage location is invalid.\");\n                    return SOLVED;\n                case 907122041:\n                    listener.onException(907122041, action, \"The message body size exceeds the maximum (1 KB).\");\n                    return SOLVED;\n                case 907122042:\n                    listener.onException(907122042, action, \"The message contains invalid parameters.\");\n                    return SOLVED;\n                case 907122043:\n                    listener.onException(907122043, action, \"This message is discarded because the number of sent messages reaches the upper limit.\");\n                    return SOLVED;\n                case 907122044:\n                    listener.onException(907122044, action, \"Before being sent to your server, the message is discarded due to expiration.\");\n                    return SOLVED;\n                case 907122045:\n                    listener.onException(907122045, action, \"Unknown error.\");\n                    return SOLVED;\n                case 907122047:\n                    listener.onException(907122047, action, \"Common Push Kit error.\");\n                    return SOLVED;\n                case 907122048:\n                    listener.onException(907122048, action, \"HMS Core (APK) cannot connect to Push Kit.\");\n                    return SOLVED;\n                case 907122049:\n                    listener.onException(907122049, action, \"EMUI is not in the required version, or Push Kit is not in the required version.\");\n                    return SOLVED;\n                case 907122050:\n                    listener.onException(907122050, action, \"The operation cannot be performed in the main thread.\");\n                    return SOLVED;\n                case 907122051:\n                    listener.onException(907122051, action, \"Failed to authenticate the device certificate.\");\n                    return SOLVED;\n                case 907122052:\n                    listener.onException(907122052, action, \"Failed to bind the service.\");\n                    return SOLVED;\n                case 907122053:\n                    listener.onException(907122053, action, \"Failed to obtain the token. Cross-location application is not allowed.\");\n                    return SOLVED;\n                case 907122054:\n                    listener.onException(907122054, action, \"The HMS Core Push SDK is being automatically initialized.\");\n                    return SOLVED;\n                case 907122055:\n                    listener.onException(907122055, action, \"The system is busy.\");\n                    return SOLVED;\n                case 907122056:\n                    listener.onException(907122056, action, \"Failed to send an uplink message.\");\n                    return SOLVED;\n                case 907122057:\n                    listener.onException(907122057, action, \"Incorrect input parameter for constructing an object for sending uplink messages.\");\n                    return SOLVED;\n                case 907122058:\n                    listener.onException(907122058, action, \"The message is discarded because the number of cached uplink messages to be sent by the app exceeds the threshold (20).\");\n                    return SOLVED;\n                case 907122059:\n                    listener.onException(907122059, action, \"The uplink message sent by the app is cached due to a cause such as network unavailability.\");\n                    return SOLVED;\n                case 907122060:\n                    listener.onException(907122060, action, \"Your server is offline.\");\n                    return SOLVED;\n                case 907122061:\n                    listener.onException(907122061, action, \"Flow control is performed because the frequency for the app to send uplink messages is too high.\");\n                    return SOLVED;\n                case 907122064:\n                    listener.onException(907122064, action, \"The agconnect-services.json file does not contain the projectId field.\");\n                    return SOLVED;\n                case 907122065:\n                    listener.onException(907122065, action, \"Failed to obtain a token for the apps on smart watches, VR devices, or routers.\");\n                    return SOLVED;\n                case 907122066:\n                    listener.onException(907122066, action, \"Failed to obtain HUAWEI ID information.\");\n                    return SOLVED;\n                case 907122067:\n                    listener.onException(907122067, action, \"The number of added user-app relationships exceeds the maximum (10).\");\n                    return SOLVED;\n                case 907122101:\n                    listener.onException(907122101, action, \"Failed to obtain the token of the third-party push service.\");\n                    return SOLVED;\n                case 907122102:\n                    listener.onException(907122102, action, \"Failed to delete the token of the third-party push service.\");\n                    return SOLVED;\n                case 907122103:\n                    listener.onException(907122103, action, \"An internal error occurs in the third-party push SDK.\");\n                    return SOLVED;\n                case 907122104:\n                    listener.onException(907122104, action, \"Failed to obtain the domain name.\");\n                    return SOLVED;\n                case 907122105:\n                    listener.onException(907122105, action, \"Failed to construct the JSON message body for obtaining a token.\");\n                    return SOLVED;\n                default:\n                    // Handle other error scenarios.\n                    listener.onException(apiException.getStatusCode(), action, \"unknown error!\");\n                    return SOLVED;\n            }\n        } else {\n            listener.onException(UNKNOWN_ERROR, action, e.getMessage());\n            return SOLVED;\n        }\n    }\n}"]}
{"filename": "Source/HuaweiPush/External/com/huawei/plugin/push/utils/Constants.java", "chunked_list": ["/**\n * Copyright 2020. Huawei Technologies Co., Ltd. All rights reserved.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software", " *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\n\npackage com.huawei.plugin.push.utils;\n", "package com.huawei.plugin.push.utils;\n\n\npublic class Constants {\n    public static final int UNKNOWN_ERROR = 100000;\n    public static final int INIT_FAILED = 99;\n    public static final int UN_SUBSCRIBE_FAILED = 100;\n    public static final int SUBSCRIBE_FAILED = 101;\n    public static final int DELETE_TOKEN_FAILED = 102;\n    public static final int GET_TOKEN_FAILED = 103;\n    public static final int ON_MESSAGE_RECEIVED = 104;\n}", "    public static final int DELETE_TOKEN_FAILED = 102;\n    public static final int GET_TOKEN_FAILED = 103;\n    public static final int ON_MESSAGE_RECEIVED = 104;\n}"]}
{"filename": "Source/HuaweiAccount/External/com/huawei/accountplugin/Constants.java", "chunked_list": ["package com.huawei.accountplugin;\n\npublic class Constants {\n    // login\n    public static final int REQUEST_LOGIN = 1002;\n\n    // login by ID token\n    public static final int REQUEST_LOGIN_BY_ID_TOKEN = 1003;\n\n    // login by authorization code\n    public static final int REQUEST_LOGIN_BY_AUTH_CODE = 1004;\n\n    // login action", "    public static final int REQUEST_LOGIN_BY_AUTH_CODE = 1004;\n\n    // login action\n    public static final int LOGIN_ACTION = 0;\n\n    // login by ID token action\n    public static final int LOGIN_BY_ID_TOKEN_ACTION = 1;\n\n    // login by authorization code action\n    public static final int LOGIN_BY_AUTH_CODE_ACTION = 2;\n\n    // logout action", "    public static final int LOGIN_BY_AUTH_CODE_ACTION = 2;\n\n    // logout action\n    public static final int LOGOUT_ACTION = 3;\n\n    // cancel authorization action\n    public static final int CANCEL_AUTH_ACTION = 4;\n}\n"]}
{"filename": "Source/HuaweiAccount/External/com/huawei/accountplugin/HuaweiAccountPlugin.java", "chunked_list": ["package com.huawei.accountplugin;\n\nimport android.app.NativeActivity;\nimport android.content.Intent;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.view.View;\nimport android.content.Context;\nimport android.content.SharedPreferences;", "import android.content.Context;\nimport android.content.SharedPreferences;\nimport android.util.Log;\n\nimport com.huawei.hmf.tasks.OnFailureListener;\nimport com.huawei.hmf.tasks.OnSuccessListener;\nimport com.huawei.hmf.tasks.Task;\nimport com.huawei.hms.common.ApiException;\nimport com.huawei.hms.support.account.AccountAuthManager;\nimport com.huawei.hms.support.account.request.AccountAuthParams;", "import com.huawei.hms.support.account.AccountAuthManager;\nimport com.huawei.hms.support.account.request.AccountAuthParams;\nimport com.huawei.hms.support.account.request.AccountAuthParamsHelper;\nimport com.huawei.hms.support.account.result.AuthAccount;\nimport com.huawei.hms.support.account.service.AccountAuthService;\n\npublic class HuaweiAccountPlugin {\n    private static boolean isInit = false;\n    private static NativeActivity mActivity = null;\n    private static HuaweiAccountListener mListener = null;\n    private static final String TAG = \"HuaweiAccountPlugin\";\n    private static final String MODE = \"HUAWEI_LOGIN_MODE\";\n    private static final String PREFS_NAME = \"com.huawei.accountplugin\";\n    private static SharedPreferences mSharedPreferences;\n    ", "    public static void initialize(NativeActivity activity, HuaweiAccountListener listener) {\n        if (!isInit) {\n            mActivity = activity;\n            mListener = listener;\n            mSharedPreferences = mActivity.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);\n            isInit = true;\n        }\n    }\n\n    public static void loginWithoutVerification() {\n        login(Constants.LOGIN_ACTION);\n    }\n", "    public static void loginWithoutVerification() {\n        login(Constants.LOGIN_ACTION);\n    }\n\n    public static void loginWithIdToken() {\n        login(Constants.LOGIN_BY_ID_TOKEN_ACTION);\n    }\n\n    public static void loginWithAuthorizationCode() {\n        login(Constants.LOGIN_BY_AUTH_CODE_ACTION);\n    }\n", "    public static void loginWithAuthorizationCode() {\n        login(Constants.LOGIN_BY_AUTH_CODE_ACTION);\n    }\n\n    public static void registerOnActivityResult(int requestCode, int resultCode, Intent data) {\n        switch (requestCode) {\n            case Constants.REQUEST_LOGIN:\n            case Constants.REQUEST_LOGIN_BY_AUTH_CODE:\n            case Constants.REQUEST_LOGIN_BY_ID_TOKEN:\n                parseAuthResult(requestCode, data);    \n                break;\n            default:\n                break;    \n        }\n    } \n", "    public static void logOut() {\n        int action = mSharedPreferences.getInt(MODE, Constants.LOGIN_ACTION);\n        AccountAuthService authService = createAuthService(action);\n        Task<Void> signOutTask = authService.signOut();\n        signOutTask.addOnSuccessListener(new OnSuccessListener<Void>() {\n            @Override\n            public void onSuccess(Void aVoid) {\n                Log.i(TAG, \"signOut Success\");\n                if (mListener != null) {\n                    mListener.onLoggedOut();\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override", "                if (mListener != null) {\n                    mListener.onLoggedOut();\n                }\n            }\n        }).addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                Log.i(TAG, \"signOut fail\");\n                if (mListener != null) {\n                    mListener.onException(Constants.LOGOUT_ACTION, e.getMessage());\n                }\n            }\n        });\n    }\n", "                if (mListener != null) {\n                    mListener.onException(Constants.LOGOUT_ACTION, e.getMessage());\n                }\n            }\n        });\n    }\n\n    public static void cancelAuthorization() {\n        int action = mSharedPreferences.getInt(MODE, Constants.LOGIN_ACTION);\n        AccountAuthService authService = createAuthService(action);\n        Task<Void> task = authService.cancelAuthorization();\n        task.addOnSuccessListener(new OnSuccessListener<Void>() {\n            @Override", "            public void onSuccess(Void aVoid) {\n                Log.i(TAG, \"cancelAuthorization success\");\n                if (mListener != null) {\n                    mListener.onCancelledAuth();\n                }\n            }\n        });\n        task.addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                Log.i(TAG, \"cancelAuthorization failure:\" + e.getMessage());", "            public void onFailure(Exception e) {\n                Log.i(TAG, \"cancelAuthorization failure:\" + e.getMessage());\n                if (mListener != null) {\n                    mListener.onException(Constants.CANCEL_AUTH_ACTION, e.getMessage());\n                }\n            }\n        });\n    }\n\n    private static void login(final int action) {\n        final AccountAuthService authService = createAuthService(action);\n        Task<AuthAccount> task = authService.silentSignIn();\n        task.addOnSuccessListener(new OnSuccessListener<AuthAccount>() {\n            @Override", "            public void onSuccess(AuthAccount authAccount) {\n                // The silent sign-in is successful. Process the returned account object\n                // AuthAccount to obtain the HUAWEI ID information.\n                onLoginResult(action, authAccount);\n            }\n        });\n        task.addOnFailureListener(new OnFailureListener() {\n            @Override\n            public void onFailure(Exception e) {\n                // The silent sign-in fails. Your app will call getSignInIntent() to show the\n                // authorization or sign-in screen.\n                Log.e(TAG, \"On log in fail: \" +e.getMessage());\n                int requestCode;\n                switch (action) {\n                    case Constants.LOGIN_BY_ID_TOKEN_ACTION:\n                        requestCode = Constants.REQUEST_LOGIN_BY_ID_TOKEN;\n                        break;\n                    case Constants.LOGIN_BY_AUTH_CODE_ACTION:\n                        requestCode = Constants.REQUEST_LOGIN_BY_AUTH_CODE;\n                        break;\n                    default:\n                        requestCode = Constants.REQUEST_LOGIN;\n                        break;    \n                }", "            public void onFailure(Exception e) {\n                // The silent sign-in fails. Your app will call getSignInIntent() to show the\n                // authorization or sign-in screen.\n                Log.e(TAG, \"On log in fail: \" +e.getMessage());\n                int requestCode;\n                switch (action) {\n                    case Constants.LOGIN_BY_ID_TOKEN_ACTION:\n                        requestCode = Constants.REQUEST_LOGIN_BY_ID_TOKEN;\n                        break;\n                    case Constants.LOGIN_BY_AUTH_CODE_ACTION:\n                        requestCode = Constants.REQUEST_LOGIN_BY_AUTH_CODE;\n                        break;\n                    default:\n                        requestCode = Constants.REQUEST_LOGIN;\n                        break;    \n                }", "                if (e instanceof ApiException) {\n                    ApiException apiException = (ApiException) e;\n                    mActivity.startActivityForResult(authService.getSignInIntent(), requestCode);\n                } else {\n                    if (mListener != null) {\n                        mListener.onException(action, e.getMessage());\n                    }\n                }\n            }\n        });\n    }\n\n    private static AccountAuthService createAuthService(int action) {\n        AccountAuthParamsHelper authParamHelper = new AccountAuthParamsHelper(AccountAuthParams.DEFAULT_AUTH_REQUEST_PARAM).setEmail().setId();\n        switch (action) {\n            case Constants.LOGIN_BY_ID_TOKEN_ACTION:\n                authParamHelper = authParamHelper.setIdToken();\n                break;\n            case Constants.LOGIN_BY_AUTH_CODE_ACTION:\n                authParamHelper = authParamHelper.setAuthorizationCode();\n                break;\n            default:\n                break;    \n        }\n        AccountAuthParams authParam = authParamHelper.createParams();\n        return AccountAuthManager.getService(mActivity, authParam);\n    }\n\n    private static void parseAuthResult(int requestCode, Intent data) {\n        int action;\n        switch (requestCode) {\n            case Constants.REQUEST_LOGIN_BY_AUTH_CODE:\n                action = Constants.LOGIN_BY_AUTH_CODE_ACTION;\n                break;\n            case Constants.REQUEST_LOGIN_BY_ID_TOKEN:\n                action = Constants.LOGIN_BY_ID_TOKEN_ACTION;\n                break;       \n            default:\n                action = Constants.LOGIN_ACTION;\n                break; \n        }\n        Task<AuthAccount> authAccountTask = AccountAuthManager.parseAuthResultFromIntent(data);", "        if (authAccountTask.isSuccessful()) {\n            // The sign-in is successful, and the authAccount object that contains the HUAWEI ID information is obtained.\n            AuthAccount authAccount = authAccountTask.getResult();\n            Log.i(TAG, \"onActivityResult of sigInInIntent, request code: \" + requestCode);\n            onLoginResult(action, authAccount);\n        } else {\n            // The sign-in failed. Find the failure cause from the status code. For more information, please refer to Error Codes.\n            String message = \"sign in failed : \" +((ApiException)authAccountTask.getException()).getStatusCode();\n            Log.e(TAG, message);\n            if (mListener != null) {\n                mListener.onException(action, message);\n            }\n        }\n    }\n\n    private static void onLoginResult(int action, AuthAccount authAccount) {\n        Log.d(TAG, \"On logged in result\");\n        mSharedPreferences.edit().putInt(MODE, action).apply();", "            if (mListener != null) {\n                mListener.onException(action, message);\n            }\n        }\n    }\n\n    private static void onLoginResult(int action, AuthAccount authAccount) {\n        Log.d(TAG, \"On logged in result\");\n        mSharedPreferences.edit().putInt(MODE, action).apply();\n        if (mListener != null) {\n            switch (action) {\n                case Constants.LOGIN_BY_ID_TOKEN_ACTION:\n                    mListener.onGetIdToken(authAccount);\n                    break;\n                case Constants.LOGIN_BY_AUTH_CODE_ACTION:\n                    mListener.onGetAuthCode(authAccount);\n                    break;\n                default:\n                    mListener.onLoggedIn(authAccount);\n                    break;    \n            }\n        }\n    }\n}\n", "        if (mListener != null) {\n            switch (action) {\n                case Constants.LOGIN_BY_ID_TOKEN_ACTION:\n                    mListener.onGetIdToken(authAccount);\n                    break;\n                case Constants.LOGIN_BY_AUTH_CODE_ACTION:\n                    mListener.onGetAuthCode(authAccount);\n                    break;\n                default:\n                    mListener.onLoggedIn(authAccount);\n                    break;    \n            }\n        }\n    }\n}\n"]}
{"filename": "Source/HuaweiAccount/External/com/huawei/accountplugin/HuaweiAccountListener.java", "chunked_list": ["package com.huawei.accountplugin;\n\nimport com.huawei.hms.support.account.result.AuthAccount;\n\npublic interface HuaweiAccountListener {\n    void onLoggedIn(AuthAccount account);\n    void onGetIdToken(AuthAccount account);\n    void onGetAuthCode(AuthAccount account);\n    void onLoggedOut();\n    void onCancelledAuth();\n    void onException(int action, String message);\n}"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/Const.java", "chunked_list": ["package com.huawei.adplugin;\n\nimport android.view.Gravity;\n\npublic class Const {\n    public static final class BannerAdSize {\n        public static final String USER_DEFINED = \"USER_DEFINED\";\n\n        public static final String BANNER_SIZE_320_50 = \"BANNER_SIZE_320_50\";\n\n        public static final String BANNER_SIZE_320_100 = \"BANNER_SIZE_320_100\";\n", "        public static final String BANNER_SIZE_320_50 = \"BANNER_SIZE_320_50\";\n\n        public static final String BANNER_SIZE_320_100 = \"BANNER_SIZE_320_100\";\n\n        public static final String BANNER_SIZE_468_60 = \"BANNER_SIZE_468_60\";\n\n        public static final String BANNER_SIZE_DYNAMIC = \"BANNER_SIZE_DYNAMIC\";\n\n        public static final String BANNER_SIZE_728_90 = \"BANNER_SIZE_728_90\";\n\n        public static final String BANNER_SIZE_300_250 = \"BANNER_SIZE_300_250\";\n", "        public static final String BANNER_SIZE_728_90 = \"BANNER_SIZE_728_90\";\n\n        public static final String BANNER_SIZE_300_250 = \"BANNER_SIZE_300_250\";\n\n        public static final String BANNER_SIZE_SMART = \"BANNER_SIZE_SMART\";\n\n        public static final String BANNER_SIZE_160_600 = \"BANNER_SIZE_160_600\";\n\n        public static final String BANNER_SIZE_360_57 = \"BANNER_SIZE_360_57\";\n\n        public static final String BANNER_SIZE_360_144 = \"BANNER_SIZE_360_144\";\n    }\n", "        public static final String BANNER_SIZE_360_57 = \"BANNER_SIZE_360_57\";\n\n        public static final String BANNER_SIZE_360_144 = \"BANNER_SIZE_360_144\";\n    }\n\n    public static final class BannerAdPositionCode {\n        /**\n         * Position constant for a position with a custom offset.\n         */\n        public static final int POSITION_CUSTOM = -1;\n\n        /**\n         * Position constant for top of the screen.\n         */", "        public static final int POSITION_CUSTOM = -1;\n\n        /**\n         * Position constant for top of the screen.\n         */\n        public static final int POSITION_TOP = 0;\n\n        /**\n         * Position constant for bottom of the screen.\n         */\n        public static final int POSITION_BOTTOM = 1;\n\n        /**\n         * Position constant for top-left of the screen.\n         */", "        public static final int POSITION_BOTTOM = 1;\n\n        /**\n         * Position constant for top-left of the screen.\n         */\n        public static final int POSITION_TOP_LEFT = 2;\n\n        /**\n         * Position constant for top-right of the screen.\n         */\n        public static final int POSITION_TOP_RIGHT = 3;\n\n        /**\n         * Position constant for bottom-left of the screen.\n         */", "        public static final int POSITION_TOP_RIGHT = 3;\n\n        /**\n         * Position constant for bottom-left of the screen.\n         */\n        public static final int POSITION_BOTTOM_LEFT = 4;\n\n        /**\n         * Position constant bottom-right of the screen.\n         */\n        public static final int POSITION_BOTTOM_RIGHT = 5;\n\n        /**\n         * Position constant center of the screen.\n         */", "        public static final int POSITION_BOTTOM_RIGHT = 5;\n\n        /**\n         * Position constant center of the screen.\n         */\n        public static final int POSITION_CENTER = 6;\n\n        public static int getLayoutGravityForPositionCode(int positionCode) {\n            int gravity;\n            switch (positionCode) {\n                case POSITION_TOP:\n                    gravity = Gravity.TOP | Gravity.CENTER_HORIZONTAL;\n                    break;\n                case POSITION_BOTTOM:\n                    gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;\n                    break;\n                case POSITION_TOP_LEFT:\n                    gravity = Gravity.TOP | Gravity.LEFT;\n                    break;\n                case POSITION_TOP_RIGHT:\n                    gravity = Gravity.TOP | Gravity.RIGHT;\n                    break;\n                case POSITION_BOTTOM_LEFT:\n                    gravity = Gravity.BOTTOM | Gravity.LEFT;\n                    break;\n                case POSITION_BOTTOM_RIGHT:\n                    gravity = Gravity.BOTTOM | Gravity.RIGHT;\n                    break;\n                case POSITION_CENTER:\n                    gravity = Gravity.CENTER_HORIZONTAL | Gravity.CENTER_VERTICAL;\n                    break;\n                case POSITION_CUSTOM:\n                    gravity = Gravity.TOP | Gravity.LEFT;\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Attempted to position ad with invalid ad \" + \"position.\");\n            }\n            return gravity;\n        }\n    }\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/HuaweiAdsPlugin.java", "chunked_list": ["package com.huawei.adplugin;\n\nimport com.huawei.adplugin.adproxy.*;\nimport com.huawei.adplugin.adlistener.*;\nimport com.huawei.hms.ads.*;\n\nimport android.app.Activity;\nimport android.util.Log;\n\npublic class HuaweiAdsPlugin {\n    private static boolean isInit = false;\n    private static Activity mActivity = null;\n    private static BannerAdProxy bannerAdProxy = null;\n    private static InterstitialAdProxy interstitialAdProxy = null;\n    private static RewardAdProxy rewardAdProxy = null;\n    private static final String TAG = \"HuaweiAdsPlugin\";\n", "\npublic class HuaweiAdsPlugin {\n    private static boolean isInit = false;\n    private static Activity mActivity = null;\n    private static BannerAdProxy bannerAdProxy = null;\n    private static InterstitialAdProxy interstitialAdProxy = null;\n    private static RewardAdProxy rewardAdProxy = null;\n    private static final String TAG = \"HuaweiAdsPlugin\";\n\n    public static void initialize(Activity activity) {\n        if (!isInit) {\n            isInit = true;\n            mActivity = activity;\n        }\n    }\n", "    public static void initialize(Activity activity) {\n        if (!isInit) {\n            isInit = true;\n            mActivity = activity;\n        }\n    }\n\n    public static void loadBannerAd(String adId, int position, String size, final IAdStatusListener adStatusListener) {\n        if (mActivity == null) {\n            return;\n        }", "        if (mActivity == null) {\n            return;\n        }\n        if (bannerAdProxy == null) {\n            bannerAdProxy = new BannerAdProxy(mActivity, new IAdStatusListener() {\n                @Override\n                public void onAdClosed() {\n                    Log.i(TAG, \"on banner ad closed\");\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdClosed();\n                    }\n                }\n\n                @Override", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdClosed();\n                    }\n                }\n\n                @Override\n                public void onAdFailed(int errorCode) {\n                    Log.i(TAG, \"on banner ad failed with error code \" + errorCode);\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdFailed(errorCode);\n                    }\n                }\n\n                @Override", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdFailed(errorCode);\n                    }\n                }\n\n                @Override\n                public void onAdLeftApp() {\n                    Log.i(TAG, \"on banner ad left app\");\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdLeftApp();\n                    }\n                }\n\n                @Override", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdLeftApp();\n                    }\n                }\n\n                @Override\n                public void onAdOpened() {\n                    Log.i(TAG, \"on banner ad opened\");\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdOpened();\n                    }\n                }\n\n                @Override", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdOpened();\n                    }\n                }\n\n                @Override\n                public void onAdLoaded() {\n                    Log.i(TAG, \"on banner ad loaded\");\n                    //showBannerAd();\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdLoaded();\n                    }\n                }\n\n                @Override", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdLoaded();\n                    }\n                }\n\n                @Override\n                public void onAdClicked() {\n                    Log.i(TAG, \"on banner ad clicked\");\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdClicked();\n                    }\n                }\n\n                @Override", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdClicked();\n                    }\n                }\n\n                @Override\n                public void onAdImpression() {\n                    Log.i(TAG, \"on banner ad impression\");\n                    if (adStatusListener != null) {\n                        adStatusListener.onAdImpression();\n                    }\n                }\n            });\n        } else {\n            bannerAdProxy.destroy();\n        }\n        Log.i(TAG, \"Load banner ad with id \" + adId + \"; position:\" + position + \"; size type:\" + size);\n        bannerAdProxy.setAdId(adId);\n        bannerAdProxy.setBannerAdPosition(position);\n        bannerAdProxy.setAdSizeType(size);\n        AdParam adParam = new AdParam.Builder().build();\n        bannerAdProxy.loadAd(adParam);\n    }\n", "                    if (adStatusListener != null) {\n                        adStatusListener.onAdImpression();\n                    }\n                }\n            });\n        } else {\n            bannerAdProxy.destroy();\n        }\n        Log.i(TAG, \"Load banner ad with id \" + adId + \"; position:\" + position + \"; size type:\" + size);\n        bannerAdProxy.setAdId(adId);\n        bannerAdProxy.setBannerAdPosition(position);\n        bannerAdProxy.setAdSizeType(size);\n        AdParam adParam = new AdParam.Builder().build();\n        bannerAdProxy.loadAd(adParam);\n    }\n", "    public static void showBannerAd() {\n        Log.i(TAG, \"Show banner ad\");\n        if (bannerAdProxy != null) {\n            bannerAdProxy.show();\n        }\n    }\n\n    public static void hideBannerAd() {\n        Log.i(TAG, \"Hide banner ad\");\n        if (bannerAdProxy != null) {\n            bannerAdProxy.hide();\n        }\n    }\n", "        if (bannerAdProxy != null) {\n            bannerAdProxy.hide();\n        }\n    }\n\n    public static void destroyBannerAd() {\n        Log.i(TAG, \"Destroy banner ad\");\n        if (bannerAdProxy != null) {\n            bannerAdProxy.destroy();\n        }\n    }\n", "    public static void loadInterstitialAd(String adId, final IAdStatusListener adStatusListener) {\n        if (mActivity == null) {\n            return;\n        }\n        if (interstitialAdProxy == null) {\n            interstitialAdProxy = new InterstitialAdProxy(mActivity);\n        }\n        Log.i(TAG, \"Load interstitial ad with id \" + adId);\n        interstitialAdProxy.setAdId(adId);\n        interstitialAdProxy.setAdListener(new IAdStatusListener() {\n            @Override", "            public void onAdClosed() {\n                Log.i(TAG, \"on interstitial ad closed\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdClosed();\n                }\n            }\n\n            @Override\n            public void onAdFailed(int errorCode) {\n                Log.i(TAG, \"on interstitial ad failed with error code \" + errorCode);\n                if (adStatusListener != null) {\n                    adStatusListener.onAdFailed(errorCode);\n                }\n            }\n\n            @Override", "            public void onAdFailed(int errorCode) {\n                Log.i(TAG, \"on interstitial ad failed with error code \" + errorCode);\n                if (adStatusListener != null) {\n                    adStatusListener.onAdFailed(errorCode);\n                }\n            }\n\n            @Override\n            public void onAdLeftApp() {\n                Log.i(TAG, \"on interstitial ad left app\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdLeftApp();\n                }\n            }\n\n            @Override", "            public void onAdLeftApp() {\n                Log.i(TAG, \"on interstitial ad left app\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdLeftApp();\n                }\n            }\n\n            @Override\n            public void onAdOpened() {\n                Log.i(TAG, \"on interstitial ad opened\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdOpened();\n                }\n            }\n\n            @Override", "            public void onAdOpened() {\n                Log.i(TAG, \"on interstitial ad opened\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdOpened();\n                }\n            }\n\n            @Override\n            public void onAdLoaded() {\n                Log.i(TAG, \"on interstitial ad loaded\");\n                //showInterstitialAd();", "            public void onAdLoaded() {\n                Log.i(TAG, \"on interstitial ad loaded\");\n                //showInterstitialAd();\n                if (adStatusListener != null) {\n                    adStatusListener.onAdLoaded();\n                }\n            }\n\n            @Override\n            public void onAdClicked() {\n                Log.i(TAG, \"on interstitial ad clicked\");", "            public void onAdClicked() {\n                Log.i(TAG, \"on interstitial ad clicked\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdClicked();\n                }\n            }\n\n            @Override\n            public void onAdImpression() {\n                Log.i(TAG, \"on interstitial ad impression\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdImpression();\n                }\n            }\n        });\n        AdParam adParam = new AdParam.Builder().build();\n        interstitialAdProxy.loadAd(adParam);\n    }\n", "            public void onAdImpression() {\n                Log.i(TAG, \"on interstitial ad impression\");\n                if (adStatusListener != null) {\n                    adStatusListener.onAdImpression();\n                }\n            }\n        });\n        AdParam adParam = new AdParam.Builder().build();\n        interstitialAdProxy.loadAd(adParam);\n    }\n", "    public static void showInterstitialAd() {\n        Log.i(TAG, \"Show interstitial ad\");\n        if (interstitialAdProxy != null && interstitialAdProxy.isLoaded()) {\n            interstitialAdProxy.show();\n        }\n    }\n\n    public static void loadRewardAd(String adId, final IRewardAdLoadListener rewardLoadListener,\n            final IRewardAdStatusListener rewardStatusListener) {\n        if (mActivity == null) {\n            return;\n        }", "        if (mActivity == null) {\n            return;\n        }\n        if (rewardAdProxy == null) {\n            rewardAdProxy = new RewardAdProxy(mActivity, adId);\n        }\n\n        Log.i(TAG, \"Load reward ad with id \" + adId);\n        AdParam adParam = new AdParam.Builder().build();\n        rewardAdProxy.loadAd(adParam, new IRewardAdLoadListener() {\n            @Override", "            public void onRewardAdFailedToLoad(final int errorCode) {\n                Log.i(TAG, \"on reward ad failed to load with error code \" + errorCode);\n                if (rewardLoadListener != null) {\n                    rewardLoadListener.onRewardAdFailedToLoad(errorCode);\n                }\n            }\n\n            @Override\n            public void onRewardedLoaded() {\n                Log.i(TAG, \"on reward ad loaded\");\n                //showRewardAd(rewardStatusListener);", "            public void onRewardedLoaded() {\n                Log.i(TAG, \"on reward ad loaded\");\n                //showRewardAd(rewardStatusListener);\n                if (rewardLoadListener != null) {\n                    rewardLoadListener.onRewardedLoaded();\n                }\n            }\n        });\n    }\n\n    public static void showRewardAd(IRewardAdStatusListener adStatusListener) {\n        Log.i(TAG, \"Show reward ad\");", "    public static void showRewardAd(IRewardAdStatusListener adStatusListener) {\n        Log.i(TAG, \"Show reward ad\");\n        if (rewardAdProxy != null && rewardAdProxy.isLoaded() && mActivity != null) {\n            rewardAdProxy.show(mActivity, adStatusListener);\n        }\n        else{  \n            AdParam adParam = new AdParam.Builder().build();\n            rewardAdProxy.loadandshow(adParam);\n        }\n\n    }\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/adproxy/InterstitialAdProxy.java", "chunked_list": ["\npackage com.huawei.adplugin.adproxy;\n\nimport android.content.Context;\nimport android.os.Handler;\nimport android.os.Looper;\n\nimport com.huawei.hms.ads.AdListener;\nimport com.huawei.hms.ads.AdParam;\nimport com.huawei.hms.ads.InterstitialAd;", "import com.huawei.hms.ads.AdParam;\nimport com.huawei.hms.ads.InterstitialAd;\nimport com.huawei.adplugin.adlistener.IAdStatusListener;\n\npublic class InterstitialAdProxy {\n    private Context mContext;\n\n    private InterstitialAd mInterstitialAd;\n\n    private IAdStatusListener mAdListener;\n\n    private Handler mMainThreadHandler = new Handler(Looper.getMainLooper());\n\n    public InterstitialAdProxy(Context context) {\n        mContext = context;\n        mInterstitialAd = new InterstitialAd(mContext);\n    }\n", "    public void setAdListener(IAdStatusListener adStatusListener) {\n        mAdListener = adStatusListener;\n        mInterstitialAd.setAdListener(new AdListener() {\n            @Override\n            public void onAdClosed() {\n                super.onAdClosed();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdClosed();\n                        }\n                    }\n                });\n            }\n\n            @Override", "                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdClosed();\n                        }\n                    }\n                });\n            }\n\n            @Override\n            public void onAdFailed(final int errorCode) {\n                super.onAdFailed(errorCode);\n                mMainThreadHandler.post(new Runnable() {\n                    @Override", "            public void onAdFailed(final int errorCode) {\n                super.onAdFailed(errorCode);\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdFailed(errorCode);\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onAdLeave() {\n                super.onAdLeave();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdLeftApp();\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onAdOpened() {\n                super.onAdOpened();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdOpened();\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onAdLoaded() {\n                super.onAdLoaded();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdLoaded();\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onAdClicked() {\n                super.onAdClicked();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdClicked();\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onAdImpression() {\n                super.onAdImpression();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdListener != null) {\n                            mAdListener.onAdImpression();\n                        }\n                    }\n                });\n            }\n        });\n    }\n", "    public void setAdId(String adId) {\n        mInterstitialAd.setAdId(adId);\n    }\n\n    public boolean isLoaded() {\n        return mInterstitialAd.isLoaded();\n    }\n\n    public boolean isLoading() {\n        return mInterstitialAd.isLoading();\n    }\n", "    public boolean isLoading() {\n        return mInterstitialAd.isLoading();\n    }\n\n    public void loadAd(AdParam adRequest) {\n        mInterstitialAd.loadAd(adRequest);\n    }\n\n    public void show() {\n        mInterstitialAd.show();\n    }\n}\n", "    public void show() {\n        mInterstitialAd.show();\n    }\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/adproxy/BannerAdProxy.java", "chunked_list": ["\npackage com.huawei.adplugin.adproxy;\n\nimport android.app.Activity;\nimport android.graphics.Color;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.text.TextUtils;\nimport android.util.DisplayMetrics;\nimport android.view.View;", "import android.util.DisplayMetrics;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.ViewParent;\nimport android.widget.FrameLayout;\nimport android.util.Log;\n\nimport com.huawei.hms.ads.AdListener;\nimport com.huawei.hms.ads.AdParam;\nimport com.huawei.hms.ads.BannerAdSize;", "import com.huawei.hms.ads.AdParam;\nimport com.huawei.hms.ads.BannerAdSize;\nimport com.huawei.hms.ads.banner.BannerView;\nimport com.huawei.adplugin.Const;\nimport com.huawei.adplugin.adlistener.IAdStatusListener;\n\npublic class BannerAdProxy extends AdListener {\n    private static final int DEFAULT_WIDTH = 320;\n\n    private Activity mActivity;\n\n    private BannerView mBannerView;\n\n    private IAdStatusListener mAdListener;\n\n    private Handler mMainThreadHandler = new Handler(Looper.getMainLooper());\n\n    private String mAdId;\n\n    private String mAdSizeType = Const.BannerAdSize.USER_DEFINED;\n\n    private int mPositionCode = Const.BannerAdPositionCode.POSITION_TOP;\n\n    private int mHorizontalOffset = 0;\n\n    private int mVerticalOffset = 0;\n\n    private boolean mIsHide = false;\n\n    private int mCustomWidth = DEFAULT_WIDTH;\n\n    private long bannerRefresh = 60;\n\n    private int bannerViewWidth,bannerViewHeight;\n\n    private static final String TAG = \"BannerAdProxy\";\n\n    public BannerAdProxy(Activity activity, IAdStatusListener listener) {\n        mActivity = activity;\n        mAdListener = listener;\n\n        int width = activity.getWindow().getDecorView().getWidth();\n        int height = activity.getWindow().getDecorView().getHeight();\n", "        if(width>height)\n        {\n            bannerViewWidth = (int) (width*0.605);\n            bannerViewHeight= (int) (height*0.18);\n        }\n        else\n        {\n            bannerViewWidth = (int) (width*0.8);\n            bannerViewHeight= FrameLayout.LayoutParams.WRAP_CONTENT;//(int) (height*0.10);\n        }\n    }\n", "    public void setAdId(String adId) {\n        mAdId = adId;\n    }\n\n    public void setAdSizeType(String adSizeType) {\n        mAdSizeType = adSizeType;\n    }\n\n    public void loadAd(final AdParam adRequest) {\n        mMainThreadHandler.post(new Runnable() {\n            @Override", "    public void loadAd(final AdParam adRequest) {\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mBannerView == null) {\n                    mBannerView = new BannerView(mActivity);\n                    mBannerView.setBackgroundColor(Color.TRANSPARENT);\n                    mBannerView.setVisibility(View.GONE);\n                    mBannerView.setAdListener(BannerAdProxy.this);\n                    mBannerView.setBannerRefresh(bannerRefresh);\n                    mActivity.addContentView(mBannerView, getBannerViewLayoutParams(bannerViewWidth,bannerViewHeight));\n                }\n                mBannerView.setAdId(mAdId);\n                mBannerView.setBannerAdSize(getTargetBannerAdSize(mAdSizeType));\n                Log.i(TAG, \"Load ad with id \" + mAdId + \"; size: \" + mBannerView.getBannerAdSize());    \n", "                if (BannerAdSize.BANNER_SIZE_INVALID.equals(mBannerView.getBannerAdSize())) {\n                    return;\n                }\n\n                if (TextUtils.isEmpty(mBannerView.getAdId())) {\n                    return;\n                }\n                mBannerView.loadAd(adRequest);\n            }\n        });\n    }\n", "    public void setCustomSize(int size) {\n        mCustomWidth = size;\n    }\n\n    public void show() {\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                mIsHide = false;\n                if (mBannerView != null) {\n                    mBannerView.resume();\n                    mBannerView.setVisibility(View.VISIBLE);\n                }\n            }\n        });\n    }\n", "                if (mBannerView != null) {\n                    mBannerView.resume();\n                    mBannerView.setVisibility(View.VISIBLE);\n                }\n            }\n        });\n    }\n\n    public void hide() {\n        mMainThreadHandler.post(new Runnable() {\n            @Override", "    public void hide() {\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                mIsHide = true;\n                if (mBannerView != null) {\n                    mBannerView.pause();\n                    mBannerView.setVisibility(View.GONE);\n                }\n            }\n        });\n    }\n", "    public void destroy() {\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mBannerView != null) {\n                    mBannerView.destroy();\n                    mBannerView.setVisibility(View.GONE);\n                    ViewParent parentView = mBannerView.getParent();\n                    if (parentView instanceof ViewGroup) {\n                        ((ViewGroup) parentView).removeView(mBannerView);\n                    }\n                }\n                mBannerView = null;\n            }\n        });\n    }\n", "                    if (parentView instanceof ViewGroup) {\n                        ((ViewGroup) parentView).removeView(mBannerView);\n                    }\n                }\n                mBannerView = null;\n            }\n        });\n    }\n\n    public void setBannerAdPosition(final int positionX, final int positionY) {\n        mPositionCode = Const.BannerAdPositionCode.POSITION_CUSTOM;\n        mHorizontalOffset = positionX;\n        mVerticalOffset = positionY;\n        updatePosition();\n    }\n", "    public void setBannerAdPosition(final int positionX, final int positionY) {\n        mPositionCode = Const.BannerAdPositionCode.POSITION_CUSTOM;\n        mHorizontalOffset = positionX;\n        mVerticalOffset = positionY;\n        updatePosition();\n    }\n\n    public void setBannerAdPosition(final int positionCode) {\n        mPositionCode = positionCode;\n        mHorizontalOffset = 0;\n        mVerticalOffset = 0;\n        updatePosition();\n    }\n\n    @Override", "    public void onAdClosed() {\n        super.onAdClosed();\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mAdListener != null) {\n                    mAdListener.onAdClosed();\n                }\n            }\n        });\n    }\n\n    @Override", "    public void onAdFailed(final int errorCode) {\n        super.onAdFailed(errorCode);\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mAdListener != null) {\n                    mAdListener.onAdFailed(errorCode);\n                }\n            }\n        });\n    }\n\n    @Override", "    public void onAdLeave() {\n        super.onAdLeave();\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mAdListener != null) {\n                    mAdListener.onAdLeftApp();\n                }\n            }\n        });\n    }\n\n    @Override", "    public void onAdOpened() {\n        super.onAdOpened();\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mAdListener != null) {\n                    mAdListener.onAdOpened();\n                }\n            }\n        });\n    }\n\n    @Override", "    public void onAdLoaded() {\n        super.onAdLoaded();\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (!mIsHide && mBannerView != null) {\n                }\n                if (mAdListener != null) {\n                    mAdListener.onAdLoaded();\n                }\n            }\n        });\n    }\n\n    @Override", "    public void onAdClicked() {\n        super.onAdClicked();\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mAdListener != null) {\n                    mAdListener.onAdClicked();\n                }\n            }\n        });\n    }\n\n    @Override", "    public void onAdImpression() {\n        super.onAdImpression();\n        mMainThreadHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                if (mAdListener != null) {\n                    mAdListener.onAdImpression();\n                }\n            }\n        });\n    }\n\n    private float convertDpToPx(float dp) {\n        DisplayMetrics metrics = mActivity.getResources().getDisplayMetrics();\n        return dp * metrics.density;\n    }\n\n    private BannerAdSize getTargetBannerAdSize(String adSize) {\n        BannerAdSize bannerAdSize = BannerAdSize.BANNER_SIZE_INVALID;\n        switch (adSize) {\n            case Const.BannerAdSize.USER_DEFINED:\n                bannerAdSize = getUserDefinedBannerSize();\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_320_50:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_320_50;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_320_100:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_320_100;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_468_60:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_468_60;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_DYNAMIC:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_DYNAMIC;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_728_90:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_728_90;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_300_250:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_300_250;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_SMART:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_SMART;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_160_600:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_160_600;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_360_57:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_360_57;\n                break;\n            case Const.BannerAdSize.BANNER_SIZE_360_144:\n                bannerAdSize = BannerAdSize.BANNER_SIZE_360_144;\n                break;\n            default:\n                break;\n        }\n        return bannerAdSize;\n    }\n\n    private BannerAdSize getUserDefinedBannerSize() {\n        return BannerAdSize.getCurrentDirectionBannerSize(mActivity, mCustomWidth);\n    }\n\n    private FrameLayout.LayoutParams getBannerViewLayoutParams(int width,int height) {\n\n        final FrameLayout.LayoutParams adParams = new FrameLayout.LayoutParams(width, height);\n\n        adParams.gravity = Const.BannerAdPositionCode.getLayoutGravityForPositionCode(mPositionCode);\n        int safeInsetLeft = 0;\n        int safeInsetTop = 0;", "        if (mPositionCode == Const.BannerAdPositionCode.POSITION_CUSTOM) {\n            int leftOffset = (int) convertDpToPx(mHorizontalOffset);\n            if (leftOffset < safeInsetLeft) {\n                leftOffset = safeInsetLeft;\n            }\n            int topOffset = (int) convertDpToPx(mVerticalOffset);\n            if (topOffset < safeInsetTop) {\n                topOffset = safeInsetTop;\n            }\n\n            adParams.leftMargin = 0;\n            adParams.topMargin = (int)(mActivity.getWindow().getDecorView().getHeight()*0.06);//topOffset;\n        } else {\n            adParams.leftMargin = safeInsetLeft;", "            if (mPositionCode == Const.BannerAdPositionCode.POSITION_TOP\n                    || mPositionCode == Const.BannerAdPositionCode.POSITION_TOP_LEFT\n                    || mPositionCode == Const.BannerAdPositionCode.POSITION_TOP_RIGHT) {\n                adParams.topMargin = safeInsetTop;\n            }\n            else\n            {\n                adParams.bottomMargin = 0;\n            }\n        }\n        return adParams;\n    }\n    \n    private void updatePosition() {\n        mMainThreadHandler.post(new Runnable() {\n            @Override", "            public void run() {\n                if (mBannerView == null) {\n                    return;\n                }\n                FrameLayout.LayoutParams layoutParams = getBannerViewLayoutParams(bannerViewWidth,bannerViewHeight);\n                mBannerView.setLayoutParams(layoutParams);\n            }\n        });\n    }\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/adproxy/RewardAdProxy.java", "chunked_list": ["\npackage com.huawei.adplugin.adproxy;\n\nimport android.app.Activity;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.util.Log;\n\nimport com.huawei.hms.ads.AdParam;\nimport com.huawei.hms.ads.reward.Reward;", "import com.huawei.hms.ads.AdParam;\nimport com.huawei.hms.ads.reward.Reward;\nimport com.huawei.hms.ads.reward.RewardAd;\nimport com.huawei.hms.ads.reward.RewardAdLoadListener;\nimport com.huawei.hms.ads.reward.RewardAdStatusListener;\nimport com.huawei.hms.ads.reward.RewardVerifyConfig;\nimport com.huawei.adplugin.adlistener.IRewardAdLoadListener;\nimport com.huawei.adplugin.adlistener.IRewardAdStatusListener;\n\npublic class RewardAdProxy {\n    private Activity mActivity;\n\n    private RewardAd mRewardAd;\n\n    private String mAdId;\n\n    private IRewardAdStatusListener mAdStatusListener;\n\n    private IRewardAdLoadListener mAdLoadListener;\n\n    private Handler mMainThreadHandler = new Handler(Looper.getMainLooper());\n\n    private static final String TAG = \"RewardAdProxy\";\n\n    public RewardAdProxy(Activity activity, String adId) {\n        mActivity = activity;\n        mAdId = adId;\n        mRewardAd = new RewardAd(mActivity, adId);\n    }\n", "\npublic class RewardAdProxy {\n    private Activity mActivity;\n\n    private RewardAd mRewardAd;\n\n    private String mAdId;\n\n    private IRewardAdStatusListener mAdStatusListener;\n\n    private IRewardAdLoadListener mAdLoadListener;\n\n    private Handler mMainThreadHandler = new Handler(Looper.getMainLooper());\n\n    private static final String TAG = \"RewardAdProxy\";\n\n    public RewardAdProxy(Activity activity, String adId) {\n        mActivity = activity;\n        mAdId = adId;\n        mRewardAd = new RewardAd(mActivity, adId);\n    }\n", "    public void loadAd(AdParam adRequest, IRewardAdLoadListener rewardAdLoadListener) {\n        mAdLoadListener = rewardAdLoadListener;\n        if (adRequest != null) {\n            mRewardAd.loadAd(adRequest, new RewardAdLoadListener() {\n                @Override\n                public void onRewardAdFailedToLoad(final int errorCode) {\n                    Log.i(TAG, \"Failed to load reward ad with error code \" + errorCode);\n                    super.onRewardAdFailedToLoad(errorCode);\n                    mMainThreadHandler.post(new Runnable() {\n                        @Override\n                        public void run() {", "                        public void run() {\n                            if (mAdLoadListener != null) {\n                                mAdLoadListener.onRewardAdFailedToLoad(errorCode);\n                            }\n                        }\n                    });\n                }\n\n                @Override\n                public void onRewardedLoaded() {\n                    Log.i(TAG, \"Loaded reward ad\");\n                    super.onRewardedLoaded();\n                    mMainThreadHandler.post(new Runnable() {\n                        @Override", "                public void onRewardedLoaded() {\n                    Log.i(TAG, \"Loaded reward ad\");\n                    super.onRewardedLoaded();\n                    mMainThreadHandler.post(new Runnable() {\n                        @Override\n                        public void run() {\n                            if (mAdLoadListener != null) {\n                                mAdLoadListener.onRewardedLoaded();\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n", "    public void loadandshow(AdParam adRequest) {\n        if (adRequest != null) {\n            mRewardAd.loadAd(adRequest, new RewardAdLoadListener() {\n                @Override\n                public void onRewardAdFailedToLoad(final int errorCode) {\n                    Log.i(TAG, \"Failed to load reward ad with error code \" + errorCode);\n                    super.onRewardAdFailedToLoad(errorCode);\n                    mMainThreadHandler.post(new Runnable() {\n                        @Override\n                        public void run() {\n\n                        }\n                    });\n                }\n\n                @Override", "                        public void run() {\n\n                        }\n                    });\n                }\n\n                @Override\n                public void onRewardedLoaded() {\n                    Log.i(TAG, \"Loaded reward ad\");\n                    super.onRewardedLoaded();\n                    mMainThreadHandler.post(new Runnable() {\n                        @Override", "                        public void run() {\n\n                            if (mAdLoadListener != null) {\n                                mAdLoadListener.onRewardedLoaded();\n                            }\n                        }\n                    });\n                }\n            });\n        }\n    }\n", "    public void show() {\n        mRewardAd.show();\n    }\n\n    public void show(Activity activity, IRewardAdStatusListener adStatusListener) {\n        mAdStatusListener = adStatusListener;\n        mRewardAd.show(activity, new RewardAdStatusListener() {\n            @Override\n            public void onRewardAdClosed() {\n                Log.i(TAG, \"Closed reward ad\");\n                super.onRewardAdClosed();\n\n                mMainThreadHandler.post(new Runnable() {\n                    @Override", "            public void onRewardAdClosed() {\n                Log.i(TAG, \"Closed reward ad\");\n                super.onRewardAdClosed();\n\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdStatusListener != null) {\n                            mAdStatusListener.onRewardAdClosed();\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onRewardAdFailedToShow(final int errorCode) {\n                Log.i(TAG, \"Failed to show reward ad with error code \" + errorCode);\n                super.onRewardAdFailedToShow(errorCode);\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdStatusListener != null) {\n                            mAdStatusListener.onRewardAdFailedToShow(errorCode);\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onRewardAdOpened() {\n                Log.i(TAG, \"Opened reward ad\");\n                super.onRewardAdOpened();\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdStatusListener != null) {\n                            mAdStatusListener.onRewardAdOpened();\n                        }\n                    }\n                });\n            }\n\n            @Override", "            public void onRewarded(final Reward reward) {\n                Log.i(TAG, \"Rewarded with \" + reward.getName() + \"; \" + reward.getAmount());\n                super.onRewarded(reward);\n                mMainThreadHandler.post(new Runnable() {\n                    @Override\n                    public void run() {\n                        if (mAdStatusListener != null) {\n                            int rewardAmount = reward.getAmount();\n                            String rewardName = reward.getName() != null ? reward.getName() : \"\";\n                            mAdStatusListener.onRewarded(rewardName, rewardAmount);\n                        }\n                    }\n                });\n            }\n        });\n    }\n", "    public void setRewardVerifyConfig(RewardVerifyConfig config) {\n        mRewardAd.setRewardVerifyConfig(config);\n    }\n\n    public boolean isLoaded() {\n        return mRewardAd.isLoaded();\n    }\n\n    public void setData(String customData) {\n        mRewardAd.setData(customData);\n    }\n", "    public void setData(String customData) {\n        mRewardAd.setData(customData);\n    }\n\n    public void setUserId(String userId) {\n        mRewardAd.setUserId(userId);\n    }\n\n    public String getRewardName() {\n        Reward reward = mRewardAd.getReward();\n        if (reward != null) {\n            return mRewardAd.getReward().getName();\n        } else {\n            return \"\";\n        }\n    }\n", "    public String getRewardName() {\n        Reward reward = mRewardAd.getReward();\n        if (reward != null) {\n            return mRewardAd.getReward().getName();\n        } else {\n            return \"\";\n        }\n    }\n\n    public int getRewardAmount() {\n        Reward reward = mRewardAd.getReward();", "    public int getRewardAmount() {\n        Reward reward = mRewardAd.getReward();\n        if (reward != null) {\n            return mRewardAd.getReward().getAmount();\n        } else {\n            return 0;\n        }\n    }\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/adlistener/IRewardAdLoadListener.java", "chunked_list": ["package com.huawei.adplugin.adlistener;\n\npublic interface IRewardAdLoadListener {\n    void onRewardAdFailedToLoad(int errorCode);\n\n    void onRewardedLoaded();\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/adlistener/IAdStatusListener.java", "chunked_list": ["package com.huawei.adplugin.adlistener;\n\npublic interface IAdStatusListener {\n    void onAdClosed();\n\n    void onAdFailed(int errorCode);\n\n    void onAdLeftApp();\n\n    void onAdOpened();\n\n    void onAdLoaded();\n\n    void onAdClicked();\n\n    void onAdImpression();\n}\n"]}
{"filename": "Source/HuaweiAds/External/com/huawei/adplugin/adlistener/IRewardAdStatusListener.java", "chunked_list": ["package com.huawei.adplugin.adlistener;\n\npublic interface IRewardAdStatusListener {\n    void onRewardAdFailedToLoad(int errorCode);\n\n    void onRewardedLoaded();\n\n    void onRewardAdClosed();\n\n    void onRewardAdFailedToShow(int errorCode);\n\n    void onRewardAdOpened();\n\n    void onRewarded(String type, int amount);\n}\n"]}
