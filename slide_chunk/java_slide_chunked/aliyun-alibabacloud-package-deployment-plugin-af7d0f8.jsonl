{"filename": "src/test/java/io/jenkins/plugins/alibabacloud/pkg/deployment/OosExecuteNotifyStepTest.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class OosExecuteNotifyStepTest {\n    @Test\n    public void gettersWorkAsExpected(){\n        OosExecuteNotifyStep step = new OosExecuteNotifyStep(\"cn-hangzhou\",\"exec-xxxxxx\",\"Approve\");\n        Assert.assertEquals(\"cn-hangzhou\", step.getRegion());\n        Assert.assertEquals(\"exec-xxxxxx\", step.getExecuteId());\n        Assert.assertEquals(\"Approve\", step.getNotifyType());\n    }\n}\n"]}
{"filename": "src/test/java/io/jenkins/plugins/alibabacloud/pkg/deployment/AliyunEcsOpsByOssFilePublisherTest.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport hudson.model.FreeStyleProject;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.jvnet.hudson.test.JenkinsRule;\nimport org.jvnet.hudson.test.recipes.LocalData;\n\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.not;", "import static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.not;\nimport static org.junit.Assert.assertThat;\n\npublic class AliyunEcsOpsByOssFilePublisherTest {\n    @Rule\n    public JenkinsRule j = new JenkinsRule();\n\n    @Test\n    public void testRoundTripConfiguration() throws Exception {\n        final AliyunEcsOpsByOssFilePublisher publisher = new AliyunEcsOpsByOssFilePublisher(\n                \"cn-hangzhou\",\n                \"ESS\",\n                \"asg-XXXXXXXX\",\n                \"testBucket\",\n                \"/testLocation\",\n                \"/\",\n                \"/root\",\n                1,\n                \"\");\n       final  AliyunEcsOpsByOssFilePublisher afterPublisher = j.configRoundtrip(publisher);\n        j.assertEqualDataBoundBeans(publisher, afterPublisher);\n    }\n}\n", "    public void testRoundTripConfiguration() throws Exception {\n        final AliyunEcsOpsByOssFilePublisher publisher = new AliyunEcsOpsByOssFilePublisher(\n                \"cn-hangzhou\",\n                \"ESS\",\n                \"asg-XXXXXXXX\",\n                \"testBucket\",\n                \"/testLocation\",\n                \"/\",\n                \"/root\",\n                1,\n                \"\");\n       final  AliyunEcsOpsByOssFilePublisher afterPublisher = j.configRoundtrip(publisher);\n        j.assertEqualDataBoundBeans(publisher, afterPublisher);\n    }\n}\n"]}
{"filename": "src/test/java/io/jenkins/plugins/alibabacloud/pkg/deployment/OssUploadAndOosExecStepTest.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class OssUploadAndOosExecStepTest {\n    @Test\n    public void gettersWorkAsExpected() {\n        OssUploadAndOosExecStep step = new OssUploadAndOosExecStep(\"cn-hangzhou\",\"ESS\",\n                \"asg-XXXX\",\"bucketTest\",\"workspace/Test.zip\",\"/\",\"Automatic\",\"EveryBatchPause\",1,\"/root/ceshi.zip\",\n                \"\");\n        Assert.assertEquals(\"cn-hangzhou\", step.getRegion());\n        Assert.assertEquals(\"ESS\", step.getResourceType());\n        Assert.assertEquals(\"asg-XXXX\", step.getResourceId());\n        Assert.assertEquals(\"bucketTest\", step.getBucket());\n        Assert.assertEquals(\"workspace/Test.zip\", step.getObjectName());\n        Assert.assertEquals(\"/\", step.getLocalPath());\n        Assert.assertEquals(\"Automatic\", step.getMode());\n        Assert.assertEquals(\"EveryBatchPause\", step.getPausePolicy());\n        Assert.assertEquals(1, step.getBatchNumber());\n        Assert.assertEquals(\"/root/ceshi.zip\", step.getDestinationDir());\n        Assert.assertEquals(\"\", step.getInvokeScript());\n    }\n}\n"]}
{"filename": "src/test/java/io/jenkins/plugins/alibabacloud/pkg/deployment/OosStatusQueryStepTest.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport org.junit.Assert;\nimport org.junit.Test;\n\npublic class OosStatusQueryStepTest {\n    @Test\n    public void gettersWorkAsExpected() {\n        OosStatusQueryStep step = new OosStatusQueryStep(\"cn-hangzhou\",\"exec-xxxxxx\");\n        Assert.assertEquals(\"cn-hangzhou\", step.getRegion());\n        Assert.assertEquals(\"exec-xxxxxx\", step.getExecuteId());\n    }\n}\n"]}
{"filename": "src/test/java/io/jenkins/plugins/alibabacloud/pkg/deployment/AliyunEcsOpsTest.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport com.gargoylesoftware.htmlunit.WebAssert;\nimport com.gargoylesoftware.htmlunit.html.HtmlPage;\nimport org.junit.Rule;\nimport org.jvnet.hudson.test.JenkinsRule;\n\npublic class AliyunEcsOpsTest {\n    @Rule\n    public JenkinsRule j = new JenkinsRule();\n    public void testConfig() throws Exception {\n        HtmlPage page = j.new WebClient().goTo(\"configure\");\n        WebAssert.assertTextPresent(page, \"Alibaba Cloud\");\n    }\n}\n", "    public JenkinsRule j = new JenkinsRule();\n    public void testConfig() throws Exception {\n        HtmlPage page = j.new WebClient().goTo(\"configure\");\n        WebAssert.assertTextPresent(page, \"Alibaba Cloud\");\n    }\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/OosStatusQueryStep.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport com.aliyuncs.IAcsClient;\nimport com.aliyuncs.oos.model.v20190601.ListExecutionsRequest;\nimport com.aliyuncs.oos.model.v20190601.ListExecutionsResponse;\nimport edu.umd.cs.findbugs.annotations.NonNull;\nimport hudson.Extension;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.AliyunClientFactory;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.StepUtils;\nimport org.jenkinsci.plugins.workflow.steps.*;", "import io.jenkins.plugins.alibabacloud.pkg.deployment.utils.StepUtils;\nimport org.jenkinsci.plugins.workflow.steps.*;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * This class is a  pipeline step:\n * query oos template execution status by oos template execute id.\n */\npublic class OosStatusQueryStep extends Step {\n    //oos template execute region.\n    private final String region;\n    //oos template execute id.\n    private final String executeId;\n\n    // getXXX functions are obtain data.", " * query oos template execution status by oos template execute id.\n */\npublic class OosStatusQueryStep extends Step {\n    //oos template execute region.\n    private final String region;\n    //oos template execute id.\n    private final String executeId;\n\n    // getXXX functions are obtain data.\n    public String getExecuteId() {\n        return executeId;\n    }\n", "    public String getExecuteId() {\n        return executeId;\n    }\n\n    public String getRegion() {\n        return region;\n    }\n\n    // bind data\n    @DataBoundConstructor\n    public OosStatusQueryStep(String region, String executeId) {\n        this.executeId = executeId;\n        this.region = region;\n    }\n\n    // step execution point.\n    @Override", "    public StepExecution start(StepContext stepContext) throws Exception {\n        return new Execution(stepContext, this);\n    }\n\n    //plugin extension\n    @Extension\n    public static class DescriptorImpl extends StepDescriptor {\n\n        @Override\n        public Set<? extends Class<?>> getRequiredContext() {\n            return StepUtils.requiresDefault();\n        }\n\n        @Override", "        public String getFunctionName() {\n            return \"oosStatusQuery\";\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return \"query oos execute status\";\n        }\n    }\n\n    // specific behavior of execution and return oos template execute status.", "    public static class Execution extends SynchronousNonBlockingStepExecution<String> {\n        private static final long serialVersionUID = 175374543031461563L;\n        private final transient OosStatusQueryStep step;\n\n        protected Execution(@NonNull StepContext context, OosStatusQueryStep step) {\n            super(context);\n            this.step = step;\n        }\n\n        /**\n         * run include:\n         * query oos template execute status by oos template execute id.\n         */\n        @Override\n        protected String run() throws Exception {\n            AliyunClientFactory instance = new AliyunClientFactory();\n            instance.build(this.step.region);\n            IAcsClient oosClient = instance.getOosClient();\n            ListExecutionsRequest request = new ListExecutionsRequest();\n            request.setExecutionId(this.step.executeId);\n            String status = null;\n            // avoid frequent queries.\n            Thread.sleep(500);\n            List<ListExecutionsResponse.Execution> executions = oosClient.getAcsResponse(request).getExecutions();", "            if (executions.size() > 0) {\n                status = executions.get(0).getStatus();\n            } else {\n                throw new Exception(\"oos executeId:\" + this.step.executeId + \" is not exist\");\n            }\n            return status;\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/OssUploadAndOosExecStep.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport com.alibaba.fastjson.JSON;\nimport com.aliyun.oss.OSS;\nimport com.aliyun.oss.model.*;\nimport com.aliyuncs.IAcsClient;\nimport com.aliyuncs.exceptions.ClientException;\nimport com.aliyuncs.oos.model.v20190601.ListExecutionsRequest;\nimport com.aliyuncs.oos.model.v20190601.StartExecutionRequest;\nimport com.aliyuncs.oos.model.v20190601.StartExecutionResponse;", "import com.aliyuncs.oos.model.v20190601.StartExecutionRequest;\nimport com.aliyuncs.oos.model.v20190601.StartExecutionResponse;\nimport edu.umd.cs.findbugs.annotations.NonNull;\nimport hudson.Extension;\nimport hudson.FilePath;\nimport hudson.Util;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.util.FormValidation;\nimport hudson.util.ListBoxModel;", "import hudson.util.FormValidation;\nimport hudson.util.ListBoxModel;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.AliyunClientFactory;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.StepUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.jenkinsci.plugins.workflow.steps.*;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.QueryParameter;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n", "import org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.*;\nimport java.util.*;\n/**\n * This class is a  pipeline step:\n * 1.compress specific directory\n * 2.upload to oss\n * 3.execute oos template (download oss file to ecs specific path)\n */\npublic class OssUploadAndOosExecStep extends Step {\n    /**\n     * ESS_TEMPLATE_NAME and  ECS_TEMPLATE_NAME  are OOS template name.\n     */\n    private final static String ESS_TEMPLATE_NAME = \"ACS-ESS-RollingUpdateByDownloadOSSFileAndRunCommand\";\n    private final static String ECS_TEMPLATE_NAME = \"ACS-ECS-BulkyDownloadOSSFileAndRunCommand\";\n\n    //ess or ecs resource location\n    private final String region;\n\n    //resource type: ESS or ECS\n    private final String resourceType;\n\n    /**\n     * resource id\uff1a\n     * ESS\uff1ascalingGroupId\n     * ECS: instanceIds by comma separated\n     */\n    private final String resourceId;\n    // oss bucket name.\n    private final String bucket;\n    // bulit project upload OSS bucket specific path.\n    private final String objectName;\n    //package project path\uff1amust be directory.\n    private final String localPath;\n    //the OOS template execution mode. Valid values\uff1aAutomatic\u3001FailurePause\u3001Debug.\n    private final String mode;\n    //the OOS template loop mode. Valid values: Automatic\u3001FirstBatchPause\u3001EveryBatchPause.\n    private final String pausePolicy;\n    //OOS template number of execution batches.\n    private final int batchNumber;\n    //OOS template download OSS bucket File to ECS specific file path\n    private final String destinationDir;\n    //OOS template execute script on ECS after download OSS bucket File to ECS specific file path.\n    private final String invokeScript;\n\n    // getXXX functions are obtain data.", " * 3.execute oos template (download oss file to ecs specific path)\n */\npublic class OssUploadAndOosExecStep extends Step {\n    /**\n     * ESS_TEMPLATE_NAME and  ECS_TEMPLATE_NAME  are OOS template name.\n     */\n    private final static String ESS_TEMPLATE_NAME = \"ACS-ESS-RollingUpdateByDownloadOSSFileAndRunCommand\";\n    private final static String ECS_TEMPLATE_NAME = \"ACS-ECS-BulkyDownloadOSSFileAndRunCommand\";\n\n    //ess or ecs resource location\n    private final String region;\n\n    //resource type: ESS or ECS\n    private final String resourceType;\n\n    /**\n     * resource id\uff1a\n     * ESS\uff1ascalingGroupId\n     * ECS: instanceIds by comma separated\n     */\n    private final String resourceId;\n    // oss bucket name.\n    private final String bucket;\n    // bulit project upload OSS bucket specific path.\n    private final String objectName;\n    //package project path\uff1amust be directory.\n    private final String localPath;\n    //the OOS template execution mode. Valid values\uff1aAutomatic\u3001FailurePause\u3001Debug.\n    private final String mode;\n    //the OOS template loop mode. Valid values: Automatic\u3001FirstBatchPause\u3001EveryBatchPause.\n    private final String pausePolicy;\n    //OOS template number of execution batches.\n    private final int batchNumber;\n    //OOS template download OSS bucket File to ECS specific file path\n    private final String destinationDir;\n    //OOS template execute script on ECS after download OSS bucket File to ECS specific file path.\n    private final String invokeScript;\n\n    // getXXX functions are obtain data.", "    public String getRegion() {\n        return region;\n    }\n\n    public String getResourceType() {\n        return resourceType;\n    }\n\n    public String getResourceId() {\n        return resourceId;\n    }\n", "    public String getResourceId() {\n        return resourceId;\n    }\n\n    public String getBucket() {\n        return bucket;\n    }\n\n    public String getObjectName() {\n        return objectName;\n    }\n", "    public String getObjectName() {\n        return objectName;\n    }\n\n    public String getLocalPath() {\n        return localPath;\n    }\n\n    public String getMode() {\n        return mode;\n    }\n", "    public String getMode() {\n        return mode;\n    }\n\n    public String getPausePolicy() {\n        return pausePolicy;\n    }\n\n    public int getBatchNumber() {\n        return batchNumber;\n    }\n", "    public int getBatchNumber() {\n        return batchNumber;\n    }\n\n    public String getDestinationDir() {\n        return destinationDir;\n    }\n\n    public String getInvokeScript() {\n        return invokeScript;\n    }\n\n    // bind data\n    @DataBoundConstructor\n    public OssUploadAndOosExecStep(String region, String resourceType, String resourceId, String bucket, String objectName, String localPath, String mode, String pausePolicy, int batchNumber, String destinationDir, String invokeScript) {\n        this.region = region;\n        this.resourceType = resourceType;\n        this.resourceId = resourceId;\n        this.bucket = bucket;\n        this.objectName = objectName;\n        this.localPath = localPath;\n        this.mode = mode;\n        this.pausePolicy = pausePolicy;\n        this.batchNumber = batchNumber;\n        this.destinationDir = destinationDir;\n        this.invokeScript = invokeScript;\n    }\n\n    // step execution point.\n    @Override", "    public String getInvokeScript() {\n        return invokeScript;\n    }\n\n    // bind data\n    @DataBoundConstructor\n    public OssUploadAndOosExecStep(String region, String resourceType, String resourceId, String bucket, String objectName, String localPath, String mode, String pausePolicy, int batchNumber, String destinationDir, String invokeScript) {\n        this.region = region;\n        this.resourceType = resourceType;\n        this.resourceId = resourceId;\n        this.bucket = bucket;\n        this.objectName = objectName;\n        this.localPath = localPath;\n        this.mode = mode;\n        this.pausePolicy = pausePolicy;\n        this.batchNumber = batchNumber;\n        this.destinationDir = destinationDir;\n        this.invokeScript = invokeScript;\n    }\n\n    // step execution point.\n    @Override", "    public StepExecution start(StepContext stepContext) throws Exception {\n        return new Execution(stepContext, this);\n    }\n\n    //plugin extension\n    @Extension\n    public static class DescriptorImpl extends StepDescriptor {\n\n        @Override\n        public Set<? extends Class<?>> getRequiredContext() {\n            return StepUtils.requires(TaskListener.class, Run.class, FilePath.class);\n        }\n\n        @Override", "        public String getFunctionName() {\n            return \"ossUploadAndOosExec\";\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return \"OSS upload built project and OOS execute\";\n        }\n\n        public ListBoxModel doFillRegionItems() {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"\u534e\u4e1c1\uff08\u676d\u5dde\uff09\", \"cn-hangzhou\");\n            model.add(\"\u534e\u53171\uff08\u9752\u5c9b\uff09\", \"cn-qingdao\");\n            model.add(\"\u534e\u53172\uff08\u5317\u4eac\uff09\", \"cn-beijing\");\n            model.add(\"\u534e\u53173\uff08\u5f20\u5bb6\u53e3\uff09\", \"cn-zhangjiakou\");\n            model.add(\"\u534e\u53175\uff08\u547c\u548c\u6d69\u7279\uff09\", \"cn-huhehaote\");\n            model.add(\"\u534e\u53176\uff08\u4e4c\u5170\u5bdf\u5e03\uff09\", \"cn-wulanchabu\");\n            model.add(\"\u534e\u4e1c2\uff08\u4e0a\u6d77\uff09\", \"cn-shanghai\");\n            model.add(\"\u534e\u53571\uff08\u6df1\u5733\uff09\", \"cn-shenzhen\");\n            model.add(\"\u534e\u53572\uff08\u6cb3\u6e90\uff09\", \"cn-heyuan\");\n            model.add(\"\u534e\u53573\uff08\u5e7f\u5dde\uff09\", \"cn-guangzhou\");\n            model.add(\"\u897f\u53571\uff08\u6210\u90fd\uff09\", \"cn-chengdu\");\n            model.add(\"\u4e2d\u56fd\uff08\u9999\u6e2f\uff09\", \"cn-hongkong\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5317 1 (\u4e1c\u4eac)\", \"ap-northeast-1\");\n            model.add(\"\u97e9\u56fd\uff08\u9996\u5c14\uff09\", \"ap-northeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 1 (\u65b0\u52a0\u5761)\", \"ap-southeast-1\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 2 (\u6089\u5c3c)\", \"ap-southeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 3 (\u5409\u9686\u5761)\", \"ap-southeast-3\");\n            model.add(\"\u83f2\u5f8b\u5bbe\uff08\u9a6c\u5c3c\u62c9\uff09\", \"ap-southeast-6\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 5 (\u96c5\u52a0\u8fbe)\", \"ap-southeast-5\");\n            model.add(\"\u4e9a\u592a\u5357\u90e8 1 (\u5b5f\u4e70)\", \"ap-south-1\");\n            model.add(\"\u6cf0\u56fd\uff08\u66fc\u8c37\uff09\", \"ap-southeast-7\");\n            model.add(\"\u7f8e\u56fd\u4e1c\u90e8 1 (\u5f17\u5409\u5c3c\u4e9a)\", \"us-east-1\");\n            model.add(\"\u7f8e\u56fd\u897f\u90e8 1 (\u7845\u8c37)\", \"us-west-1\");\n            model.add(\"\u82f1\u56fd (\u4f26\u6566)\", \"eu-west-1\");\n            model.add(\"\u4e2d\u4e1c\u4e1c\u90e8 1 (\u8fea\u62dc)\", \"me-east-1\");\n            model.add(\"\u6c99\u7279\uff08\u5229\u96c5\u5f97)\", \"me-central-1\");\n            model.add(\"\u6b27\u6d32\u4e2d\u90e8 1 (\u6cd5\u5170\u514b\u798f)\", \"eu-central-1\");\n            return model;\n        }\n", "        public ListBoxModel doFillRegionItems() {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"\u534e\u4e1c1\uff08\u676d\u5dde\uff09\", \"cn-hangzhou\");\n            model.add(\"\u534e\u53171\uff08\u9752\u5c9b\uff09\", \"cn-qingdao\");\n            model.add(\"\u534e\u53172\uff08\u5317\u4eac\uff09\", \"cn-beijing\");\n            model.add(\"\u534e\u53173\uff08\u5f20\u5bb6\u53e3\uff09\", \"cn-zhangjiakou\");\n            model.add(\"\u534e\u53175\uff08\u547c\u548c\u6d69\u7279\uff09\", \"cn-huhehaote\");\n            model.add(\"\u534e\u53176\uff08\u4e4c\u5170\u5bdf\u5e03\uff09\", \"cn-wulanchabu\");\n            model.add(\"\u534e\u4e1c2\uff08\u4e0a\u6d77\uff09\", \"cn-shanghai\");\n            model.add(\"\u534e\u53571\uff08\u6df1\u5733\uff09\", \"cn-shenzhen\");\n            model.add(\"\u534e\u53572\uff08\u6cb3\u6e90\uff09\", \"cn-heyuan\");\n            model.add(\"\u534e\u53573\uff08\u5e7f\u5dde\uff09\", \"cn-guangzhou\");\n            model.add(\"\u897f\u53571\uff08\u6210\u90fd\uff09\", \"cn-chengdu\");\n            model.add(\"\u4e2d\u56fd\uff08\u9999\u6e2f\uff09\", \"cn-hongkong\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5317 1 (\u4e1c\u4eac)\", \"ap-northeast-1\");\n            model.add(\"\u97e9\u56fd\uff08\u9996\u5c14\uff09\", \"ap-northeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 1 (\u65b0\u52a0\u5761)\", \"ap-southeast-1\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 2 (\u6089\u5c3c)\", \"ap-southeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 3 (\u5409\u9686\u5761)\", \"ap-southeast-3\");\n            model.add(\"\u83f2\u5f8b\u5bbe\uff08\u9a6c\u5c3c\u62c9\uff09\", \"ap-southeast-6\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 5 (\u96c5\u52a0\u8fbe)\", \"ap-southeast-5\");\n            model.add(\"\u4e9a\u592a\u5357\u90e8 1 (\u5b5f\u4e70)\", \"ap-south-1\");\n            model.add(\"\u6cf0\u56fd\uff08\u66fc\u8c37\uff09\", \"ap-southeast-7\");\n            model.add(\"\u7f8e\u56fd\u4e1c\u90e8 1 (\u5f17\u5409\u5c3c\u4e9a)\", \"us-east-1\");\n            model.add(\"\u7f8e\u56fd\u897f\u90e8 1 (\u7845\u8c37)\", \"us-west-1\");\n            model.add(\"\u82f1\u56fd (\u4f26\u6566)\", \"eu-west-1\");\n            model.add(\"\u4e2d\u4e1c\u4e1c\u90e8 1 (\u8fea\u62dc)\", \"me-east-1\");\n            model.add(\"\u6c99\u7279\uff08\u5229\u96c5\u5f97)\", \"me-central-1\");\n            model.add(\"\u6b27\u6d32\u4e2d\u90e8 1 (\u6cd5\u5170\u514b\u798f)\", \"eu-central-1\");\n            return model;\n        }\n", "        public ListBoxModel doFillResourceTypeItems() {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"ESS ScalingGroup\", \"ESS\");\n            model.add(\"ECS Instance\", \"ECS\");\n            return model;\n        }\n\n        public ListBoxModel doFillModeItems() {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"\u81ea\u52a8\u6267\u884c\", \"Automatic\");\n            model.add(\"\u5931\u8d25\u6682\u505c\", \"FailurePause\");\n            model.add(\"\u5355\u6b65\u6267\u884c\", \"Debug\");\n            return model;\n        }\n\n        @RequirePOST\n        @SuppressWarnings(\"lgtm[jenkins/no-permission-check]\")", "        public FormValidation doCheckObjectName(@QueryParameter String objectName) {\n            if (objectName.startsWith(\"/\"))\n                return FormValidation.error(\"objectName can not start with '/'\");\n            return FormValidation.ok();\n        }\n\n        public ListBoxModel doFillPausePolicyItems() {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"\u4e0d\u6682\u505c\", \"Automatic\");\n            model.add(\"\u7b2c\u4e00\u6279\u6682\u505c\", \"FirstBatchPause\");\n            model.add(\"\u6bcf\u6279\u6682\u505c\", \"EveryBatchPause\");\n            return model;\n        }\n\n    }\n\n    // specific behavior of execution and return oos template execute id.", "    public static class Execution extends SynchronousNonBlockingStepExecution<String> {\n        private static final long serialVersionUID = 1L;\n        private final transient OssUploadAndOosExecStep step;\n\n        protected Execution(@NonNull StepContext context, OssUploadAndOosExecStep step) {\n            super(context);\n            this.step = step;\n        }\n\n        /**\n         * run include:\n         * 1.compress specific directory\n         * 2.upload compressed file to oss\n         * 3.OOS template execute script on ECS after OOS template download OSS bucket File to ECS specific file path.\n         */\n        @Override\n        protected String run() throws Exception {\n            AliyunClientFactory instance = new AliyunClientFactory();\n            instance.build(this.step.region);\n            IAcsClient oosClient = instance.getOosClient();\n            OSS ossClient = instance.getOssClient();\n            TaskListener listener = getContext().get(TaskListener.class);\n            Run build = getContext().get(Run.class);\n            FilePath workspace = getContext().get(FilePath.class);\n            final Map<String, String> envVars = build.getEnvironment(listener);\n            String localPathFromEnv = getLocalPathFromEnv(envVars);\n            String localPath = StringUtils.trimToEmpty(localPathFromEnv);", "            if (!this.step.localPath.isEmpty() && !this.step.localPath.startsWith(\"/\")) {\n                localPath = \"/\" + this.step.localPath;\n            }\n            FilePath sourcePath = workspace.withSuffix(localPath).absolutize();\n            if (!sourcePath.isDirectory() || !isSubDirectory(workspace, sourcePath)) {\n                throw new IllegalArgumentException(\"Provided path (resolved as '\" + sourcePath\n                        + \"') is not a subdirectory of the workspace (resolved as '\" + workspace + \"')\");\n            }\n            final FilePath sourceDirectory = sourcePath;\n            final String projectName = build.getDisplayName();\n            final PrintStream logger = listener.getLogger();\n            zipAndUpload(ossClient, projectName, sourceDirectory, logger);\n            String executionId = null;\n            StartExecutionRequest request = new StartExecutionRequest();\n            request.setMode(this.step.mode);\n            ListExecutionsRequest executionsRequest = new ListExecutionsRequest();", "            if (\"ESS\".equals(this.step.resourceType)) {\n                executionId = essResourceExec(request, oosClient, listener);\n                executionsRequest.setExecutionId(executionId);\n                executionsRequest.setTemplateName(ESS_TEMPLATE_NAME);\n            } else {\n                executionId = ecsResourceExec(request, oosClient, listener);\n                executionsRequest.setExecutionId(executionId);\n                executionsRequest.setTemplateName(ECS_TEMPLATE_NAME);\n            }\n            String status = null;\n            while (!\"Success\".equalsIgnoreCase(status) && !\"Failed\".equalsIgnoreCase(status) && !\"Cancelled\".equalsIgnoreCase(status) && !\"Waiting\".equalsIgnoreCase(status)) {", "            while (!\"Success\".equalsIgnoreCase(status) && !\"Failed\".equalsIgnoreCase(status) && !\"Cancelled\".equalsIgnoreCase(status) && !\"Waiting\".equalsIgnoreCase(status)) {\n                try {\n                    Thread.sleep(5000);\n                    status = oosClient.getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();\n                    listener.getLogger().println(\"ExecutionId Status:\" + status);\n                } catch (ClientException e) {\n                    e.printStackTrace();\n                }\n            }\n            return executionId;\n        }\n\n        // ecs resource  execute oos Template : ECS_TEMPLATE_NAME\n        private String ecsResourceExec(StartExecutionRequest request, IAcsClient oosClient, TaskListener listener) {\n            request.setTemplateName(ECS_TEMPLATE_NAME);\n            String[] instanceIdString = this.step.resourceId.split(\",\");\n            HashSet<String> hashSet = new HashSet<>(Arrays.asList(instanceIdString));\n            int ids = hashSet.size();\n            int batchNumber = this.step.batchNumber;", "            if(ids < batchNumber){\n                batchNumber = ids;\n            }\n            int base = ids / batchNumber;\n            int[] batchArray = new int[batchNumber];\n            Arrays.fill(batchArray, base);\n            for (int i = ids % batchNumber; i > 0; i--) {\n                batchArray[i - 1]++;\n            }\n            String batchSpeed = JSON.toJSON(batchArray).toString();\n            List<String> list = new ArrayList<>(hashSet);\n            String instanceIds = JSON.toJSON(list).toString();\n            String parameter =\n                    \"{\\\"bucketName\\\":\\\"\" +\n                            this.step.bucket +\n                            \"\\\",\" +\n                            \"\\\"objectName\\\":\\\"\" +\n                            this.step.objectName +\n                            \"\\\",\" +\n                            \" \\\"rateControl\\\": \" +\n                            \"{\\\"Mode\\\": \\\"Batch\\\",\" +\n                            \" \\\"MaxErrors\\\": 0, \" +\n                            \"\\\"BatchPauseOption\\\": \\\"\" +\n                            this.step.pausePolicy +\n                            \"\\\", \" +\n                            \"\\\"Batch\\\": \" +\n                            batchSpeed +\n                            \"}, \" +\n                            \"\" +\n                            \"\\\"destinationDir\\\":\\\"\" +\n                            this.step.destinationDir +\n                            \"\\\",\" +\n                            \"\\\"commandContent\\\":\\\"\" +\n                            this.step.invokeScript +\n                            \"\\\",\" +\n                            \"\\\"targets\\\":\" +\n                            \"{\\\"ResourceIds\\\":\" +\n                            instanceIds +\n                            \",\" +\n                            \"\\\"RegionId\\\":\\\"\" +\n                            this.step.region +\n                            \"\\\",\" +\n                            \"\\\"Type\\\":\\\"ResourceIds\\\"},\" +\n                            \"\\\"OSSRegion\\\":\\\"\" +\n                            this.step.region +\n                            \"\\\"}\";\n            request.setParameters(parameter);\n            StartExecutionResponse response = null;\n            String executionId = null;", "            try {\n                response = oosClient.getAcsResponse(request);\n                executionId = response.getExecution().getExecutionId();\n                listener.getLogger().println(\"you can login aliyun oos console to query oos template implementation progress:\" + \"https://oos.console.aliyun.com/\" + this.step.region + \"/execution/detail/\" + executionId);\n            } catch (ClientException e) {\n                listener.getLogger().println(\"execute oos template error info:\");\n                listener.getLogger().println(e);\n            }\n            return executionId;\n        }\n\n        // ess resource  execute oos Template : ESS_TEMPLATE_NAME\n        private String essResourceExec(StartExecutionRequest request, IAcsClient oosClient, TaskListener listener) {\n            request.setTemplateName(ESS_TEMPLATE_NAME);\n            String parameter =\n                    \"{\\\"invokeDestinationDir\\\":\\\"\" +\n                            \"\" + this.step.destinationDir + \"\" +\n                            \"\\\",\" +\n                            \"\\\"scalingGroupId\\\":\\\"\" +\n                            \"\" + this.step.resourceId + \"\" +\n                            \"\\\",\" +\n                            \"\\\"invokeScript\\\":\\\"\" +\n                            this.step.invokeScript +\n                            \"\\\",\" +\n                            \"\\\"OSSRegion\\\":\\\"\" +\n                            \"\" + this.step.region + \"\" +\n                            \"\\\",\" +\n                            \"\\\"batchPauseOption\\\":\\\"\" +\n                            \"\" + this.step.pausePolicy + \"\" +\n                            \"\\\",\" +\n                            \"\\\"whetherSaveToFile\\\":true,\" +\n                            \"\\\"URLExpirationTime\\\":\" +\n                            \"6000\" +\n                            \",\" +\n                            \"\\\"batchNumber\\\":\" +\n                            \"\" +\n                            this.step.batchNumber +\n                            \"\" +\n                            \",\" +\n                            \"\\\"rollbackBucketName\\\":\\\"\" +\n                            \"\" + this.step.bucket + \"\" +\n                            \"\\\",\" +\n                            \"\\\"rollbackObjectName\\\":\\\"\" +\n                            \"\" + this.step.objectName + \"\" +\n                            \"\\\",\" +\n                            \"\\\"rollbackDestinationDir\\\":\\\"\" +\n                            \"\" + this.step.destinationDir + \"\" +\n                            \"\\\",\" +\n                            \"\\\"invokeBucketName\\\":\\\"\" +\n                            \"\" + this.step.bucket + \"\" +\n                            \"\\\",\" +\n                            \"\\\"invokeObjectName\\\":\\\"\" +\n                            \"\" + this.step.objectName + \"\" +\n                            \"\\\",\" +\n                            \"\\\"invokeType\\\":\\\"\" +\n                            \"\" + \"invoke\" + \"\" +\n                            \"\\\"}\";\n            request.setParameters(parameter);\n            StartExecutionResponse response = null;\n            String executionId = null;", "            try {\n                response = oosClient.getAcsResponse(request);\n                executionId = response.getExecution().getExecutionId();\n                listener.getLogger().println(\"you can login aliyun oos console to query oos template implementation progress:\" + \"https://oos.console.aliyun.com/\" + this.step.region + \"/execution/detail/\" + executionId);\n            } catch (ClientException e) {\n                listener.getLogger().println(\"execute oos template error info:\");\n                listener.getLogger().println(e);\n            }\n            return executionId;\n        }\n\n        //compress directory of localPath and upload to OSS.\n        private void zipAndUpload(OSS ossClient, String projectName, FilePath sourceDirectory, PrintStream logger) throws InterruptedException, IOException {\n            File zipFile = null;\n            File versionFile;\n            versionFile = new File(sourceDirectory + \"/\");\n            InputStreamReader reader = null;\n            String version = null;", "            try {\n                reader = new InputStreamReader(new FileInputStream(versionFile), \"UTF-8\");\n                char[] chars = new char[(int) versionFile.length() - 1];\n                reader.read(chars);\n                version = new String(chars);\n                reader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (reader != null) {\n                    reader.close();\n                }\n            }", "                if (reader != null) {\n                    reader.close();\n                }\n            }\n            if (version != null) {\n                zipFile = new File(\"/tmp/\" + projectName + \"-\" + version + \".zip\");\n                final boolean fileCreated = zipFile.createNewFile();\n                if (!fileCreated) {\n                    logger.println(\"File already exists, overwriting: \" + zipFile.getPath());\n                }\n            } else {\n                zipFile = File.createTempFile(projectName + \"-\", \".zip\");\n            }\n\n            FileOutputStream outputStream = new FileOutputStream(zipFile);", "            try {\n                sourceDirectory.zip(\n                        outputStream,\n                        new FileFilter() {\n                            @Override\n                            public boolean accept(File pathname) {\n                                return true;\n                            }\n                        }\n                );\n            } finally {\n                outputStream.close();\n            }\n            String bucketName = this.step.bucket;\n", "            try {\n                InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, this.step.objectName);\n                InitiateMultipartUploadResult upresult = ossClient.initiateMultipartUpload(request);\n                String uploadId = upresult.getUploadId();\n                List<PartETag> partETags = new ArrayList<PartETag>();\n                final long partSize = 1 * 1024 * 1024L;\n                long fileLength = zipFile.length();\n                int partCount = (int) (fileLength / partSize);\n                if (fileLength % partSize != 0) {\n                    partCount++;\n                }", "                if (fileLength % partSize != 0) {\n                    partCount++;\n                }\n                for (int i = 0; i < partCount; i++) {\n                    long startPos = i * partSize;\n                    long curPartSize = (i + 1 == partCount) ? (fileLength - startPos) : partSize;\n                    InputStream instream = new FileInputStream(zipFile);\n                    instream.skip(startPos);\n                    UploadPartRequest uploadPartRequest = new UploadPartRequest();\n                    uploadPartRequest.setBucketName(bucketName);\n                    uploadPartRequest.setKey(this.step.objectName);\n                    uploadPartRequest.setUploadId(uploadId);\n                    uploadPartRequest.setInputStream(instream);\n                    uploadPartRequest.setPartSize(curPartSize);\n                    uploadPartRequest.setPartNumber(i + 1);\n                    UploadPartResult uploadPartResult = ossClient.uploadPart(uploadPartRequest);\n                    partETags.add(uploadPartResult.getPartETag());\n                }\n                CompleteMultipartUploadRequest completeMultipartUploadRequest =\n                        new CompleteMultipartUploadRequest(bucketName, this.step.objectName, uploadId, partETags);\n                CompleteMultipartUploadResult completeMultipartUploadResult = ossClient.completeMultipartUpload(completeMultipartUploadRequest);\n                logger.println(completeMultipartUploadResult.getETag());\n            } catch (Exception e) {\n                logger.println(e);\n            } finally {\n                final boolean deleted = zipFile.delete();", "                if (!deleted) {\n                    logger.println(\"Failed to clean up file \" + zipFile.getPath());\n                }\n                if (ossClient != null) {\n                    ossClient.shutdown();\n                }\n            }\n        }\n\n        private boolean isSubDirectory(FilePath parent, FilePath child) {\n            FilePath parentFolder = child;", "            while (parentFolder != null) {\n                if (parent.equals(parentFolder)) {\n                    return true;\n                }\n                parentFolder = parentFolder.getParent();\n            }\n            return false;\n        }\n\n        public String getLocalPathFromEnv(Map<String, String> envVars) {\n            return Util.replaceMacro(this.step.localPath, envVars);\n        }\n    }\n\n}\n", "        public String getLocalPathFromEnv(Map<String, String> envVars) {\n            return Util.replaceMacro(this.step.localPath, envVars);\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/PluginImpl.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport hudson.Extension;\nimport hudson.ExtensionList;\nimport hudson.util.Secret;\nimport jenkins.model.GlobalConfiguration;\nimport net.sf.json.JSONObject;\nimport org.jenkinsci.Symbol;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;", "import org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.DataBoundSetter;\nimport org.kohsuke.stapler.StaplerRequest;\n\n/**\n * plugin extension\uff1a\n * global setting\n */\n@Extension\n@Symbol(\"pipelineStepsAliyun\")\npublic class PluginImpl extends GlobalConfiguration {\n    @SuppressWarnings(\"lgtm[jenkins/plaintext-storage]\")\n    private String accessKeyId;\n    private Secret accessKeySecret;\n\n    @DataBoundConstructor\n    public PluginImpl() {\n        load();\n    }\n\n    @DataBoundSetter", "@Extension\n@Symbol(\"pipelineStepsAliyun\")\npublic class PluginImpl extends GlobalConfiguration {\n    @SuppressWarnings(\"lgtm[jenkins/plaintext-storage]\")\n    private String accessKeyId;\n    private Secret accessKeySecret;\n\n    @DataBoundConstructor\n    public PluginImpl() {\n        load();\n    }\n\n    @DataBoundSetter", "    public void setAccessKeyId(String accessKeyId) {\n        this.accessKeyId = accessKeyId;\n    }\n\n    @DataBoundSetter\n    public void setAccessKeySecret(Secret accessKeySecret) {\n        this.accessKeySecret = accessKeySecret;\n    }\n\n    @Override\n    public boolean configure(StaplerRequest req, JSONObject json) throws FormException {\n        accessKeyId = json.getString(\"accessKeyId\");\n        accessKeySecret = Secret.fromString(json.getString(\"accessKeySecret\"));\n        save();\n        return true;\n    }\n", "    public boolean configure(StaplerRequest req, JSONObject json) throws FormException {\n        accessKeyId = json.getString(\"accessKeyId\");\n        accessKeySecret = Secret.fromString(json.getString(\"accessKeySecret\"));\n        save();\n        return true;\n    }\n\n    public static PluginImpl getInstance() {\n        return ExtensionList.lookup(PluginImpl.class).get(0);\n    }\n", "    public String getAccessKeyId() {\n        return this.accessKeyId;\n    }\n\n    public String getAccessKeySecret() {\n        return Secret.toString(this.accessKeySecret);\n    }\n\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/AliyunEcsOpsByOssFilePublisher.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport com.alibaba.fastjson.JSON;\nimport com.aliyun.oss.model.*;\nimport com.aliyuncs.exceptions.ClientException;\nimport com.aliyuncs.oos.model.v20190601.ListExecutionsRequest;\nimport com.aliyuncs.oos.model.v20190601.StartExecutionRequest;\nimport com.aliyuncs.oos.model.v20190601.StartExecutionResponse;\nimport edu.umd.cs.findbugs.annotations.NonNull;\nimport hudson.*;", "import edu.umd.cs.findbugs.annotations.NonNull;\nimport hudson.*;\nimport hudson.model.AbstractProject;\nimport hudson.model.Run;\nimport hudson.model.TaskListener;\nimport hudson.tasks.BuildStepDescriptor;\nimport hudson.tasks.BuildStepMonitor;\nimport hudson.tasks.Publisher;\nimport hudson.util.FormValidation;\nimport hudson.util.ListBoxModel;", "import hudson.util.FormValidation;\nimport hudson.util.ListBoxModel;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.AliyunClientFactory;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.ResourceType;\nimport jenkins.tasks.SimpleBuildStep;\nimport org.apache.commons.lang.StringUtils;\nimport org.jenkinsci.Symbol;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.QueryParameter;\nimport org.kohsuke.stapler.interceptor.RequirePOST;", "import org.kohsuke.stapler.QueryParameter;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.*;\nimport java.util.*;\n\n/**\n * This class is a jenkins execute step:\n * apply to freestyle job post bulid or pipeline step\n */\npublic class AliyunEcsOpsByOssFilePublisher extends Publisher implements SimpleBuildStep {\n    /**\n     * ESS_TEMPLATE_NAME and  ECS_TEMPLATE_NAME  are OOS template name.\n     */\n    private final static String ESS_TEMPLATE_NAME = \"ACS-ESS-RollingUpdateByDownloadOSSFileAndRunCommand\";\n    private final static String ECS_TEMPLATE_NAME = \"ACS-ECS-BulkyDownloadOSSFileAndRunCommand\";\n\n    //ess or ecs resource location\n    private final String region;\n\n    //resource type: ESS or ECS\n    private final String resourceType;\n\n    /**\n     * resource id\uff1a\n     * ESS\uff1ascalingGroupId\n     * ECS: instanceIds by comma separated\n     */\n    private final String resourceId;\n\n    // oss bucket name.\n    private final String bucket;\n\n    // bulit project upload OSS bucket specific path.\n    private final String objectName;\n\n    //package project path\uff1amust be directory.\n    private final String localPath;\n\n    //OOS template download OSS bucket File to ECS specific file path\n    private final String destinationDir;\n\n    //OOS template number of execution batches.\n    private final int batchNumber;\n\n    //OOS template execute script on ECS after download OSS bucket File to ECS specific file path.\n    private final String invokeScript;\n\n    // bind data\n    @DataBoundConstructor\n    public AliyunEcsOpsByOssFilePublisher(String region, String resourceType, String resourceId, String bucket, String objectName, String localPath, String destinationDir, int batchNumber, String invokeScript) {\n        this.region = region;\n        this.resourceType = resourceType;\n        this.resourceId = resourceId;\n        this.bucket = bucket;\n        this.objectName = objectName;\n        this.localPath = localPath;\n        this.destinationDir = destinationDir;\n        this.batchNumber = batchNumber;\n        this.invokeScript = invokeScript;\n    }\n\n    // getXXX functions are obtain data.", " * apply to freestyle job post bulid or pipeline step\n */\npublic class AliyunEcsOpsByOssFilePublisher extends Publisher implements SimpleBuildStep {\n    /**\n     * ESS_TEMPLATE_NAME and  ECS_TEMPLATE_NAME  are OOS template name.\n     */\n    private final static String ESS_TEMPLATE_NAME = \"ACS-ESS-RollingUpdateByDownloadOSSFileAndRunCommand\";\n    private final static String ECS_TEMPLATE_NAME = \"ACS-ECS-BulkyDownloadOSSFileAndRunCommand\";\n\n    //ess or ecs resource location\n    private final String region;\n\n    //resource type: ESS or ECS\n    private final String resourceType;\n\n    /**\n     * resource id\uff1a\n     * ESS\uff1ascalingGroupId\n     * ECS: instanceIds by comma separated\n     */\n    private final String resourceId;\n\n    // oss bucket name.\n    private final String bucket;\n\n    // bulit project upload OSS bucket specific path.\n    private final String objectName;\n\n    //package project path\uff1amust be directory.\n    private final String localPath;\n\n    //OOS template download OSS bucket File to ECS specific file path\n    private final String destinationDir;\n\n    //OOS template number of execution batches.\n    private final int batchNumber;\n\n    //OOS template execute script on ECS after download OSS bucket File to ECS specific file path.\n    private final String invokeScript;\n\n    // bind data\n    @DataBoundConstructor\n    public AliyunEcsOpsByOssFilePublisher(String region, String resourceType, String resourceId, String bucket, String objectName, String localPath, String destinationDir, int batchNumber, String invokeScript) {\n        this.region = region;\n        this.resourceType = resourceType;\n        this.resourceId = resourceId;\n        this.bucket = bucket;\n        this.objectName = objectName;\n        this.localPath = localPath;\n        this.destinationDir = destinationDir;\n        this.batchNumber = batchNumber;\n        this.invokeScript = invokeScript;\n    }\n\n    // getXXX functions are obtain data.", "    public int getBatchNumber() {\n        return batchNumber;\n    }\n\n    public String getRegion() {\n        return region;\n    }\n\n    public String getResourceType() {\n        return resourceType;\n    }\n", "    public String getResourceType() {\n        return resourceType;\n    }\n\n    public String getResourceId() {\n        return resourceId;\n    }\n\n    public String getBucket() {\n        return bucket;\n    }\n", "    public String getBucket() {\n        return bucket;\n    }\n\n    public String getObjectName() {\n        return objectName;\n    }\n\n    public String getLocalPath() {\n        return localPath;\n    }\n", "    public String getLocalPath() {\n        return localPath;\n    }\n\n    public String getDestinationDir() {\n        return destinationDir;\n    }\n\n    public String getInvokeScript() {\n        return invokeScript;\n    }\n\n    /**\n     * perform is core function: it can be automatically executed based on the project built.\n     */\n    @Override", "    public String getInvokeScript() {\n        return invokeScript;\n    }\n\n    /**\n     * perform is core function: it can be automatically executed based on the project built.\n     */\n    @Override\n    public void perform(@NonNull Run<?, ?> build, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher, @NonNull TaskListener listener) throws InterruptedException, IOException {\n        /**\n         * get and check localPath\n         * */\n        final Map<String, String> envVars = build.getEnvironment(listener);\n        String localPathFromEnv = getLocalPathFromEnv(envVars);\n        String localPath = StringUtils.trimToEmpty(localPathFromEnv);", "    public void perform(@NonNull Run<?, ?> build, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher, @NonNull TaskListener listener) throws InterruptedException, IOException {\n        /**\n         * get and check localPath\n         * */\n        final Map<String, String> envVars = build.getEnvironment(listener);\n        String localPathFromEnv = getLocalPathFromEnv(envVars);\n        String localPath = StringUtils.trimToEmpty(localPathFromEnv);\n        if (!localPath.isEmpty() && !localPath.startsWith(\"/\")) {\n            localPath = \"/\" + localPath;\n        }\n        FilePath sourcePath = workspace.withSuffix(localPath).absolutize();", "        if (!sourcePath.isDirectory() || !isSubDirectory(workspace, sourcePath)) {\n            throw new IllegalArgumentException(\"Provided path (resolved as '\" + sourcePath\n                    + \"') is not a subdirectory of the workspace (resolved as '\" + workspace + \"')\");\n        }\n        final FilePath sourceDirectory = sourcePath;\n        //acquired build name\n        final String projectName = build.getDisplayName();\n        //log util\n        final PrintStream logger = listener.getLogger();\n        listener.getLogger().println(\"resourceType:\" + resourceType);\n        AliyunClientFactory instance = new AliyunClientFactory();\n        instance.build(this.region);\n        // Compress and upload the specific path of the built project.\n        zipAndUpload(instance, projectName, sourceDirectory, logger);\n        //batch automatic execution oos template according to resource type.\n        String executionId = null;\n        StartExecutionRequest request = new StartExecutionRequest();\n        //query execute status until execution end.\n        ListExecutionsRequest executionsRequest = new ListExecutionsRequest();", "        if (\"ESS\".equals(resourceType)) {\n            // ess resource execute template.\n            executionId = essResourceExec(request, instance, listener);\n            executionsRequest.setExecutionId(executionId);\n            executionsRequest.setTemplateName(ESS_TEMPLATE_NAME);\n        } else {\n            // ecs resource execute template.\n            executionId = ecsResourceExec(request, instance, listener);\n            executionsRequest.setExecutionId(executionId);\n            executionsRequest.setTemplateName(ECS_TEMPLATE_NAME);\n        }\n\n        String status = null;", "        while (!\"Success\".equalsIgnoreCase(status) && !\"Failed\".equalsIgnoreCase(status) && !\"Cancelled\".equalsIgnoreCase(status)) {\n            try {\n                Thread.sleep(500);\n                status = instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();\n                listener.getLogger().println(\"ExecutionId Status:\" + status);\n            } catch (ClientException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    // ess resource  execute oos Template : ESS_TEMPLATE_NAME\n    private String essResourceExec(StartExecutionRequest request,  AliyunClientFactory instance, TaskListener listener) {\n        request.setTemplateName(ESS_TEMPLATE_NAME);\n        String parameter =\n                \"{\\\"invokeDestinationDir\\\":\\\"\" +\n                        \"\" + destinationDir + \"\" +\n                        \"\\\",\" +\n                        \"\\\"scalingGroupId\\\":\\\"\" +\n                        \"\" + resourceId + \"\" +\n                        \"\\\",\" +\n                        \"\\\"invokeScript\\\":\\\"\" +\n                        invokeScript +\n                        \"\\\",\" +\n                        \"\\\"OSSRegion\\\":\\\"\" +\n                        \"\" + region + \"\" +\n                        \"\\\",\" +\n                        \"\\\"whetherSaveToFile\\\":true,\" +\n                        \"\\\"URLExpirationTime\\\":6000,\" +\n                        \"\\\"batchNumber\\\":\" +\n                        \"\" +\n                        this.batchNumber +\n                        \"\" +\n                        \",\" +\n                        \"\\\"rollbackBucketName\\\":\\\"\" +\n                        \"\" + bucket + \"\" +\n                        \"\\\",\" +\n                        \"\\\"rollbackObjectName\\\":\\\"\" +\n                        \"\" + objectName + \"\" +\n                        \"\\\",\" +\n                        \"\\\"rollbackDestinationDir\\\":\\\"\" +\n                        \"\" + destinationDir + \"\" +\n                        \"\\\",\" +\n                        \"\\\"invokeBucketName\\\":\\\"\" +\n                        \"\" + bucket + \"\" +\n                        \"\\\",\" +\n                        \"\\\"invokeObjectName\\\":\\\"\" +\n                        \"\" + objectName + \"\" +\n                        \"\\\",\" +\n                        \"\\\"invokeType\\\":\\\"\" +\n                        \"\" + \"invoke\" + \"\" +\n                        \"\\\"}\";\n        request.setParameters(parameter);\n        StartExecutionResponse response = null;\n        String executionId = null;", "        try {\n            response = instance.getOosClient().getAcsResponse(request);\n            executionId = response.getExecution().getExecutionId();\n            listener.getLogger().println(\"you can login aliyun oos console to query oos template implementation progress:\" + \"https://oos.console.aliyun.com/\" + region + \"/execution/detail/\" + executionId);\n        } catch (ClientException e) {\n            listener.getLogger().println(\"execute oos template error info:\");\n            listener.getLogger().println(e);\n        }\n        return executionId;\n    }\n\n    // ecs resource  execute oos Template : ECS_TEMPLATE_NAME\n    private String ecsResourceExec(StartExecutionRequest request, AliyunClientFactory instance, TaskListener listener) {\n        request.setTemplateName(ECS_TEMPLATE_NAME);\n        String[] instanceIdString = this.resourceId.split(\",\");\n        HashSet<String> hashSet = new HashSet<>(Arrays.asList(instanceIdString));\n        int ids = hashSet.size();\n        int batchNumber = this.batchNumber;", "        if(ids < batchNumber){\n            batchNumber = ids;\n        }\n        int base = ids / batchNumber;\n        int[] batchArray = new int[batchNumber];\n        Arrays.fill(batchArray, base);\n        for (int i = ids % batchNumber; i > 0; i--) {\n            batchArray[i - 1]++;\n        }\n        String batchSpeed = JSON.toJSON(batchArray).toString();\n        List<String> list = new ArrayList<>(hashSet);\n        String instanceIds = JSON.toJSON(list).toString();\n        String parameter =\n                \"{\\\"bucketName\\\":\\\"\" +\n                        this.bucket +\n                        \"\\\",\" +\n                        \"\\\"objectName\\\":\\\"\" +\n                        this.objectName +\n                        \"\\\",\" +\n                        \" \\\"rateControl\\\": \" +\n                        \"{\\\"Mode\\\": \\\"Batch\\\",\" +\n                        \" \\\"MaxErrors\\\": 0, \" +\n                        \"\\\"BatchPauseOption\\\": \\\"\" +\n                        \"Automatic\" +\n                        \"\\\", \" +\n                        \"\\\"Batch\\\": \" +\n                        batchSpeed +\n                        \"}, \" +\n                        \"\" +\n                        \"\\\"destinationDir\\\":\\\"\" +\n                        this.destinationDir +\n                        \"\\\",\" +\n                        \"\\\"commandContent\\\":\\\"\" +\n                        this.invokeScript +\n                        \"\\\",\" +\n                        \"\\\"targets\\\":\" +\n                        \"{\\\"ResourceIds\\\":\" +\n                        instanceIds +\n                        \",\" +\n                        \"\\\"RegionId\\\":\\\"\" +\n                        this.region +\n                        \"\\\",\" +\n                        \"\\\"Type\\\":\\\"ResourceIds\\\"},\" +\n                        \"\\\"OSSRegion\\\":\\\"\" +\n                        this.region +\n                        \"\\\"}\";\n        request.setParameters(parameter);\n        StartExecutionResponse response = null;\n        String executionId = null;", "        try {\n            response = instance.getOosClient().getAcsResponse(request);\n            executionId = response.getExecution().getExecutionId();\n            listener.getLogger().println(\"you can login aliyun oos console to query oos template implementation progress:\" + \"https://oos.console.aliyun.com/\" + region + \"/execution/detail/\" + executionId);\n        } catch (ClientException e) {\n            listener.getLogger().println(\"execute oos template error info:\");\n            listener.getLogger().println(e);\n        }\n        return executionId;\n    }\n\n    //compress directory of localPath and upload to OSS.\n    private void zipAndUpload(AliyunClientFactory instance, String projectName, FilePath sourceDirectory, PrintStream logger) throws InterruptedException, IOException {\n        File zipFile = zipProject(projectName, sourceDirectory, logger);\n        uploadOssFile(instance, zipFile, logger);\n    }\n\n    private File zipProject(String projectName, FilePath sourceDirectory, PrintStream logger) throws IOException, InterruptedException {\n        File zipFile = null;\n        File versionFile;\n        versionFile = new File(sourceDirectory + \"/\");\n        InputStreamReader reader = null;\n        String version = null;", "        try {\n            reader = new InputStreamReader(new FileInputStream(versionFile), \"UTF-8\");\n            char[] chars = new char[(int) versionFile.length() - 1];\n            reader.read(chars);\n            version = new String(chars);\n            reader.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (reader != null) {\n                reader.close();\n            }\n        }", "            if (reader != null) {\n                reader.close();\n            }\n        }\n        if (version != null) {\n            zipFile = new File(\"/tmp/\" + projectName + \"-\" + version + \".zip\");\n            final boolean fileCreated = zipFile.createNewFile();\n            if (!fileCreated) {\n                logger.println(\"File already exists, overwriting: \" + zipFile.getPath());\n            }\n        } else {\n            zipFile = File.createTempFile(projectName + \"-\", \".zip\");\n        }\n        logger.println(\"Zipping files into \" + zipFile.getAbsolutePath());\n\n        FileOutputStream outputStream = new FileOutputStream(zipFile);", "        try {\n            sourceDirectory.zip(\n                    outputStream,\n                    new FileFilter() {\n                        @Override\n                        public boolean accept(File pathname) {\n                            return true;\n                        }\n                    }\n            );\n        } finally {\n            outputStream.close();\n        }\n        return zipFile;\n    }\n\n    private void uploadOssFile(AliyunClientFactory instance, File zipFile, PrintStream logger) {\n        String bucketName = this.bucket;", "        try {\n            InitiateMultipartUploadRequest request = new InitiateMultipartUploadRequest(bucketName, objectName);\n            InitiateMultipartUploadResult upresult = instance.getOssClient().initiateMultipartUpload(request);\n            String uploadId = upresult.getUploadId();\n            List<PartETag> partETags = new ArrayList<PartETag>();\n            final long partSize = 1 * 1024 * 1024L;\n            long fileLength = zipFile.length();\n            int partCount = (int) (fileLength / partSize);\n            if (fileLength % partSize != 0) {\n                partCount++;\n            }", "            if (fileLength % partSize != 0) {\n                partCount++;\n            }\n            for (int i = 0; i < partCount; i++) {\n                long startPos = i * partSize;\n                long curPartSize = (i + 1 == partCount) ? (fileLength - startPos) : partSize;\n                InputStream instream = new FileInputStream(zipFile);\n                instream.skip(startPos);\n                UploadPartRequest uploadPartRequest = new UploadPartRequest();\n                uploadPartRequest.setBucketName(bucketName);\n                uploadPartRequest.setKey(objectName);\n                uploadPartRequest.setUploadId(uploadId);\n                uploadPartRequest.setInputStream(instream);\n                uploadPartRequest.setPartSize(curPartSize);\n                uploadPartRequest.setPartNumber(i + 1);\n                UploadPartResult uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);\n                partETags.add(uploadPartResult.getPartETag());\n            }\n            CompleteMultipartUploadRequest completeMultipartUploadRequest =\n                    new CompleteMultipartUploadRequest(bucketName, objectName, uploadId, partETags);\n            CompleteMultipartUploadResult completeMultipartUploadResult = instance.getOssClient().completeMultipartUpload(completeMultipartUploadRequest);\n            logger.println(completeMultipartUploadResult.getETag());\n        } catch (Exception e) {\n            logger.println(e);\n        } finally {\n            final boolean deleted = zipFile.delete();", "            if (!deleted) {\n                logger.println(\"Failed to clean up file \" + zipFile.getPath());\n            }\n            if (instance.getOssClient() != null) {\n                instance.getOssClient().shutdown();\n            }\n        }\n    }\n\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    private boolean isSubDirectory(FilePath parent, FilePath child) {\n        FilePath parentFolder = child;", "    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    private boolean isSubDirectory(FilePath parent, FilePath child) {\n        FilePath parentFolder = child;\n        while (parentFolder != null) {\n            if (parent.equals(parentFolder)) {\n                return true;\n            }\n            parentFolder = parentFolder.getParent();\n        }\n        return false;\n    }\n", "    public String getLocalPathFromEnv(Map<String, String> envVars) {\n        return Util.replaceMacro(this.localPath, envVars);\n    }\n\n    @Override\n    public BuildStepMonitor getRequiredMonitorService() {\n        return BuildStepMonitor.NONE;\n    }\n\n    /**\n     * extension build step descriptor:\n     * accessKeyId and accessKeySecret set global configuration in system management.\n     * can set select component.\n     */\n    @Extension\n    @Symbol(\"Alibabacloud Automatic Package Deployment\")", "    public static final class DescriptorImpl extends BuildStepDescriptor<Publisher> {\n        @RequirePOST\n        @SuppressWarnings(\"lgtm[jenkins/no-permission-check]\")\n        public FormValidation doCheckObjectName(@QueryParameter String objectName) {\n            if (objectName.startsWith(\"/\"))\n                return FormValidation.error(\"objectName can not start with '/'\");\n            return FormValidation.ok();\n        }\n\n        // select component about region.\n        public ListBoxModel doFillRegionItems() throws ClientException {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"\u534e\u4e1c1\uff08\u676d\u5dde\uff09\", \"cn-hangzhou\");\n            model.add(\"\u534e\u53171\uff08\u9752\u5c9b\uff09\", \"cn-qingdao\");\n            model.add(\"\u534e\u53172\uff08\u5317\u4eac\uff09\", \"cn-beijing\");\n            model.add(\"\u534e\u53173\uff08\u5f20\u5bb6\u53e3\uff09\", \"cn-zhangjiakou\");\n            model.add(\"\u534e\u53175\uff08\u547c\u548c\u6d69\u7279\uff09\", \"cn-huhehaote\");\n            model.add(\"\u534e\u53176\uff08\u4e4c\u5170\u5bdf\u5e03\uff09\", \"cn-wulanchabu\");\n            model.add(\"\u534e\u4e1c2\uff08\u4e0a\u6d77\uff09\", \"cn-shanghai\");\n            model.add(\"\u534e\u53571\uff08\u6df1\u5733\uff09\", \"cn-shenzhen\");\n            model.add(\"\u534e\u53572\uff08\u6cb3\u6e90\uff09\", \"cn-heyuan\");\n            model.add(\"\u534e\u53573\uff08\u5e7f\u5dde\uff09\", \"cn-guangzhou\");\n            model.add(\"\u897f\u53571\uff08\u6210\u90fd\uff09\", \"cn-chengdu\");\n            model.add(\"\u4e2d\u56fd\uff08\u9999\u6e2f\uff09\", \"cn-hongkong\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5317 1 (\u4e1c\u4eac)\", \"ap-northeast-1\");\n            model.add(\"\u97e9\u56fd\uff08\u9996\u5c14\uff09\", \"ap-northeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 1 (\u65b0\u52a0\u5761)\", \"ap-southeast-1\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 2 (\u6089\u5c3c)\", \"ap-southeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 3 (\u5409\u9686\u5761)\", \"ap-southeast-3\");\n            model.add(\"\u83f2\u5f8b\u5bbe\uff08\u9a6c\u5c3c\u62c9\uff09\", \"ap-southeast-6\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 5 (\u96c5\u52a0\u8fbe)\", \"ap-southeast-5\");\n            model.add(\"\u4e9a\u592a\u5357\u90e8 1 (\u5b5f\u4e70)\", \"ap-south-1\");\n            model.add(\"\u6cf0\u56fd\uff08\u66fc\u8c37\uff09\", \"ap-southeast-7\");\n            model.add(\"\u7f8e\u56fd\u4e1c\u90e8 1 (\u5f17\u5409\u5c3c\u4e9a)\", \"us-east-1\");\n            model.add(\"\u7f8e\u56fd\u897f\u90e8 1 (\u7845\u8c37)\", \"us-west-1\");\n            model.add(\"\u82f1\u56fd (\u4f26\u6566)\", \"eu-west-1\");\n            model.add(\"\u4e2d\u4e1c\u4e1c\u90e8 1 (\u8fea\u62dc)\", \"me-east-1\");\n            model.add(\"\u6c99\u7279\uff08\u5229\u96c5\u5f97)\", \"me-central-1\");\n            model.add(\"\u6b27\u6d32\u4e2d\u90e8 1 (\u6cd5\u5170\u514b\u798f)\", \"eu-central-1\");\n            return model;\n        }\n\n        // select component about resource type.\n        @RequirePOST\n        @SuppressWarnings(\"lgtm[jenkins/no-permission-check]\")", "        public ListBoxModel doFillRegionItems() throws ClientException {\n            ListBoxModel model = new ListBoxModel();\n            model.add(\"\u534e\u4e1c1\uff08\u676d\u5dde\uff09\", \"cn-hangzhou\");\n            model.add(\"\u534e\u53171\uff08\u9752\u5c9b\uff09\", \"cn-qingdao\");\n            model.add(\"\u534e\u53172\uff08\u5317\u4eac\uff09\", \"cn-beijing\");\n            model.add(\"\u534e\u53173\uff08\u5f20\u5bb6\u53e3\uff09\", \"cn-zhangjiakou\");\n            model.add(\"\u534e\u53175\uff08\u547c\u548c\u6d69\u7279\uff09\", \"cn-huhehaote\");\n            model.add(\"\u534e\u53176\uff08\u4e4c\u5170\u5bdf\u5e03\uff09\", \"cn-wulanchabu\");\n            model.add(\"\u534e\u4e1c2\uff08\u4e0a\u6d77\uff09\", \"cn-shanghai\");\n            model.add(\"\u534e\u53571\uff08\u6df1\u5733\uff09\", \"cn-shenzhen\");\n            model.add(\"\u534e\u53572\uff08\u6cb3\u6e90\uff09\", \"cn-heyuan\");\n            model.add(\"\u534e\u53573\uff08\u5e7f\u5dde\uff09\", \"cn-guangzhou\");\n            model.add(\"\u897f\u53571\uff08\u6210\u90fd\uff09\", \"cn-chengdu\");\n            model.add(\"\u4e2d\u56fd\uff08\u9999\u6e2f\uff09\", \"cn-hongkong\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5317 1 (\u4e1c\u4eac)\", \"ap-northeast-1\");\n            model.add(\"\u97e9\u56fd\uff08\u9996\u5c14\uff09\", \"ap-northeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 1 (\u65b0\u52a0\u5761)\", \"ap-southeast-1\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 2 (\u6089\u5c3c)\", \"ap-southeast-2\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 3 (\u5409\u9686\u5761)\", \"ap-southeast-3\");\n            model.add(\"\u83f2\u5f8b\u5bbe\uff08\u9a6c\u5c3c\u62c9\uff09\", \"ap-southeast-6\");\n            model.add(\"\u4e9a\u592a\u4e1c\u5357 5 (\u96c5\u52a0\u8fbe)\", \"ap-southeast-5\");\n            model.add(\"\u4e9a\u592a\u5357\u90e8 1 (\u5b5f\u4e70)\", \"ap-south-1\");\n            model.add(\"\u6cf0\u56fd\uff08\u66fc\u8c37\uff09\", \"ap-southeast-7\");\n            model.add(\"\u7f8e\u56fd\u4e1c\u90e8 1 (\u5f17\u5409\u5c3c\u4e9a)\", \"us-east-1\");\n            model.add(\"\u7f8e\u56fd\u897f\u90e8 1 (\u7845\u8c37)\", \"us-west-1\");\n            model.add(\"\u82f1\u56fd (\u4f26\u6566)\", \"eu-west-1\");\n            model.add(\"\u4e2d\u4e1c\u4e1c\u90e8 1 (\u8fea\u62dc)\", \"me-east-1\");\n            model.add(\"\u6c99\u7279\uff08\u5229\u96c5\u5f97)\", \"me-central-1\");\n            model.add(\"\u6b27\u6d32\u4e2d\u90e8 1 (\u6cd5\u5170\u514b\u798f)\", \"eu-central-1\");\n            return model;\n        }\n\n        // select component about resource type.\n        @RequirePOST\n        @SuppressWarnings(\"lgtm[jenkins/no-permission-check]\")", "        public ListBoxModel doFillResourceTypeItems() throws ClientException {\n            ListBoxModel items = new ListBoxModel();\n            for (ResourceType resourceType : ResourceType.values()) {\n                items.add(resourceType.getName(), resourceType.getType());\n            }\n            return items;\n        }\n\n\n        @Override\n        public boolean isApplicable(Class<? extends AbstractProject> jobType) {\n            return true;\n        }\n\n        //extension plugin name.\n        @NonNull\n        @Override", "        public boolean isApplicable(Class<? extends AbstractProject> jobType) {\n            return true;\n        }\n\n        //extension plugin name.\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return \"Alibabacloud Automatic Package Deployment\";\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/OosExecuteNotifyStep.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment;\n\nimport com.aliyuncs.IAcsClient;\nimport com.aliyuncs.oos.model.v20190601.CancelExecutionRequest;\nimport com.aliyuncs.oos.model.v20190601.ListExecutionsRequest;\nimport com.aliyuncs.oos.model.v20190601.ListExecutionsResponse;\nimport com.aliyuncs.oos.model.v20190601.NotifyExecutionRequest;\nimport edu.umd.cs.findbugs.annotations.NonNull;\nimport hudson.Extension;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.AliyunClientFactory;", "import hudson.Extension;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.AliyunClientFactory;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.Status;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.utils.StepUtils;\nimport org.jenkinsci.plugins.workflow.steps.*;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport java.util.List;\nimport java.util.Set;\n", "import java.util.Set;\n\n/**\n * This class is a  pipeline step:\n * oos template execution direction,like approve or cancle.\n */\npublic class OosExecuteNotifyStep extends Step {\n    private final String region;\n    //oos template execute id.\n    private final String executeId;\n    //oos template execution direction,like approve or cancle.\n    private final String notifyType;\n", "    public String getRegion() {\n        return region;\n    }\n\n    public String getExecuteId() {\n        return executeId;\n    }\n\n    public String getNotifyType() {\n        return notifyType;\n    }\n\n    // bind data\n    @DataBoundConstructor\n    public OosExecuteNotifyStep(String region, String executeId, String notifyType) {\n        this.region = region;\n        this.executeId = executeId;\n        this.notifyType = notifyType;\n    }\n\n    // step execution point.\n    @Override", "    public String getNotifyType() {\n        return notifyType;\n    }\n\n    // bind data\n    @DataBoundConstructor\n    public OosExecuteNotifyStep(String region, String executeId, String notifyType) {\n        this.region = region;\n        this.executeId = executeId;\n        this.notifyType = notifyType;\n    }\n\n    // step execution point.\n    @Override", "    public StepExecution start(StepContext stepContext) throws Exception {\n        return new Execution(stepContext, this);\n    }\n\n    //plugin extension\n    @Extension\n    public static class DescriptorImpl extends StepDescriptor {\n        @Override\n        public Set<? extends Class<?>> getRequiredContext() {\n            return StepUtils.requiresDefault();\n        }\n\n        @Override", "        public String getFunctionName() {\n            return \"oosExecuteNotify\";\n        }\n\n        @NonNull\n        @Override\n        public String getDisplayName() {\n            return \"notify oos Execute\";\n        }\n    }\n\n    //oos template execution direction,like approve or cancle.", "    public static class Execution extends SynchronousNonBlockingStepExecution<Void> {\n        private static final long serialVersionUID = -6033716865337394259L;\n        private final transient OosExecuteNotifyStep step;\n\n        protected Execution(@NonNull StepContext context, OosExecuteNotifyStep step) {\n            super(context);\n            this.step = step;\n        }\n\n        /**\n         * run include\uff1a\n         * oos template execution direction.\n         */\n        @Override\n        protected Void run() throws Exception {\n            AliyunClientFactory instance = new AliyunClientFactory();\n            instance.build(this.step.region);\n            IAcsClient oosClient = instance.getOosClient();\n            ListExecutionsRequest request = new ListExecutionsRequest();\n            request.setExecutionId(this.step.executeId);\n            String status = null;\n            List<ListExecutionsResponse.Execution> executions = oosClient.getAcsResponse(request).getExecutions();", "            if (executions.size() > 0) {\n                status = executions.get(0).getStatus();\n            } else {\n                throw new Exception(\"oos executeId:\" + this.step.executeId + \"is not exist\");\n            }\n            if (\"Approve\".equalsIgnoreCase(this.step.notifyType)) {\n                if (Status.Waiting.name().equalsIgnoreCase(status)) {\n                    NotifyExecutionRequest notifyExecutionRequest = new NotifyExecutionRequest();\n                    notifyExecutionRequest.setExecutionId(this.step.executeId);\n                    notifyExecutionRequest.setNotifyType(this.step.notifyType);\n                    oosClient.getAcsResponse(notifyExecutionRequest);\n                }\n            }", "            if (\"Cancelled\".equalsIgnoreCase(this.step.notifyType)) {\n                if (!Status.Success.name().equalsIgnoreCase(status) && !Status.Failed.name().equalsIgnoreCase(status) && !Status.Cancelled.name().equalsIgnoreCase(status)) {\n                    CancelExecutionRequest cancelExecutionRequest = new CancelExecutionRequest();\n                    cancelExecutionRequest.setExecutionId(this.step.executeId);\n                    oosClient.getAcsResponse(cancelExecutionRequest);\n                }\n            }\n            return null;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/utils/ResourceType.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment.utils;\n\npublic enum ResourceType {\n\n    ESS(\"ESS\", \"ESS ScalingGroup\"),\n    ECS(\"ECS\", \"ECS Instance\");\n\n    String type;\n    String name;\n\n    ResourceType(String type, String name) {\n        this.type = type;\n        this.name = name;\n    }\n", "    public String getType() {\n        return type;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/utils/StepUtils.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment.utils;\n\nimport hudson.EnvVars;\nimport hudson.model.TaskListener;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class StepUtils {\n    public static <T extends Class<?>> Set<T> requires(T... classes) {\n        return new HashSet<>(Arrays.asList(classes));\n    }\n", "\npublic class StepUtils {\n    public static <T extends Class<?>> Set<T> requires(T... classes) {\n        return new HashSet<>(Arrays.asList(classes));\n    }\n\n    public static Set<? extends Class<?>> requiresDefault() {\n        return requires(EnvVars.class, TaskListener.class);\n    }\n\n}\n\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/utils/Status.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment.utils;\n\n/**\n * oss template execution status.\n */\npublic enum Status {\n    Success,\n    Failed,\n    Waiting,\n    Cancelled,\n}\n"]}
{"filename": "src/main/java/io/jenkins/plugins/alibabacloud/pkg/deployment/utils/AliyunClientFactory.java", "chunked_list": ["package io.jenkins.plugins.alibabacloud.pkg.deployment.utils;\n\nimport com.aliyun.oss.OSS;\nimport com.aliyun.oss.OSSClientBuilder;\nimport com.aliyuncs.DefaultAcsClient;\nimport com.aliyuncs.IAcsClient;\nimport com.aliyuncs.profile.DefaultProfile;\nimport io.jenkins.plugins.alibabacloud.pkg.deployment.PluginImpl;\n\n/**", "\n/**\n * product oos client and oss client.\n */\npublic class AliyunClientFactory {\n    private static final String endpointFormat = \"https://oss-%s.aliyuncs.com\";\n\n    private OSS ossClient;\n    private IAcsClient oosClient;\n\n    public OSS getOssClient() {\n        return ossClient;\n    }\n", "    public OSS getOssClient() {\n        return ossClient;\n    }\n\n    public void setOssClient(OSS ossClient) {\n        this.ossClient = ossClient;\n    }\n\n    public IAcsClient getOosClient() {\n        return oosClient;\n    }\n", "    public IAcsClient getOosClient() {\n        return oosClient;\n    }\n\n    public void setOosClient(IAcsClient oosClient) {\n        this.oosClient = oosClient;\n    }\n\n    public void build(String region) {\n        String accessKeyId = PluginImpl.getInstance().getAccessKeyId();\n        String accessKeySecret = PluginImpl.getInstance().getAccessKeySecret();\n        this.ossClient = new OSSClientBuilder().build(String.format(endpointFormat, region), accessKeyId, accessKeySecret);\n        DefaultProfile profile = DefaultProfile.getProfile(\n                region, accessKeyId, accessKeySecret\n        );\n        this.oosClient = new DefaultAcsClient(profile);\n    }\n}\n", "    public void build(String region) {\n        String accessKeyId = PluginImpl.getInstance().getAccessKeyId();\n        String accessKeySecret = PluginImpl.getInstance().getAccessKeySecret();\n        this.ossClient = new OSSClientBuilder().build(String.format(endpointFormat, region), accessKeyId, accessKeySecret);\n        DefaultProfile profile = DefaultProfile.getProfile(\n                region, accessKeyId, accessKeySecret\n        );\n        this.oosClient = new DefaultAcsClient(profile);\n    }\n}\n"]}
