{"filename": "signaling/src/main/java/net/edulive/janus/signaling_server/MessageHandler.java", "chunked_list": ["package net.edulive.janus.signaling_server;\n\n\nimport io.javalin.websocket.WsConnectContext;\nimport io.javalin.websocket.WsMessageContext;\nimport net.edulive.janus.java_client.JanusClient;\nimport net.edulive.janus.java_client.videoroom.VideoRoomAdaptor;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;", "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\n", "import java.util.concurrent.ConcurrentHashMap;\n\n\npublic class MessageHandler {\n\n    public MessageHandler(String address) {\n        janusClient = new JanusClient((janusSessionId, message) -> {\n            String userId = janusToUserMap.get(janusSessionId);\n            if (userId != null) {\n                userContexts.get(userId).send(message);\n            }\n            return true;\n        }, address);\n        janusClient.connect();\n        videoRoomAdaptor = new VideoRoomAdaptor(janusClient);\n        Thread t = new Thread(new WatchDog(this.userContexts));\n        t.start();\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(MessageHandler.class);\n    private final JanusClient janusClient;\n    private final VideoRoomAdaptor videoRoomAdaptor;\n    private final Map<Long, String> janusToUserMap = new ConcurrentHashMap<>();\n    private final Map<String, Long> userToJanus = new ConcurrentHashMap<>();\n    private final Map<Long, Long> sessionToHandle = new ConcurrentHashMap<>();\n    private final Map<String, WsConnectContext> userContexts = new ConcurrentHashMap<>();\n", "            if (userId != null) {\n                userContexts.get(userId).send(message);\n            }\n            return true;\n        }, address);\n        janusClient.connect();\n        videoRoomAdaptor = new VideoRoomAdaptor(janusClient);\n        Thread t = new Thread(new WatchDog(this.userContexts));\n        t.start();\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(MessageHandler.class);\n    private final JanusClient janusClient;\n    private final VideoRoomAdaptor videoRoomAdaptor;\n    private final Map<Long, String> janusToUserMap = new ConcurrentHashMap<>();\n    private final Map<String, Long> userToJanus = new ConcurrentHashMap<>();\n    private final Map<Long, Long> sessionToHandle = new ConcurrentHashMap<>();\n    private final Map<String, WsConnectContext> userContexts = new ConcurrentHashMap<>();\n", "    public void handleMessage(String user, WsMessageContext context) {\n        logger.debug(context.message());\n        JSONObject json = new JSONObject(context.message());\n        if (!json.has(\"type\")) {\n            return;\n        }\n        Long janusSessionId = userToJanus.get(user);\n        switch (json.getString(\"type\")) {\n            case \"join_room\":\n                handleJoinRoom(user, context, json, janusSessionId);\n                break;\n            case \"create_room\":\n                long roomName = videoRoomAdaptor.createRoom(janusSessionId, sessionToHandle.get(janusSessionId));\n                context.send(new JSONObject().put(\"type\", \"create_room_result\").put(\"room_name\", roomName).toString());\n                break;\n            case \"publish_stream\":\n                handlePublishStream(context, json, janusSessionId);\n                break;\n            case \"subscribe_stream\":\n                List<Object> objectList = json.getJSONArray(\"streams\").toList();\n                long[] streams = new long[objectList.size()];", "                for (int i = 0; i < objectList.size(); i++) {\n                    streams[i] = ((Long) objectList.get(i)).longValue();\n                }\n                JSONObject result = videoRoomAdaptor.subscriptStream(janusSessionId,\n                        sessionToHandle.get(janusSessionId),\n                        streams);\n                context.send(result.toString());\n                break;\n            case \"connection_info_subscriber\": {\n                if (!json.has(\"ice_candidate\")) {\n                    break;\n                }\n\n                Long subscriberSession = publisherSessionToSubscriberSession.get(janusSessionId);\n                videoRoomAdaptor.sendConnectionInfo(subscriberSession,\n                        sessionToHandle.get(subscriberSession),\n                        json.getJSONObject(\"ice_candidate\"));\n            }\n            break;\n            case \"connection_info\":", "                if (!json.has(\"ice_candidate\")) {\n                    break;\n                }\n\n                Long subscriberSession = publisherSessionToSubscriberSession.get(janusSessionId);\n                videoRoomAdaptor.sendConnectionInfo(subscriberSession,\n                        sessionToHandle.get(subscriberSession),\n                        json.getJSONObject(\"ice_candidate\"));\n            }\n            break;\n            case \"connection_info\":", "                if (!json.has(\"ice_candidate\")) {\n                    break;\n                }\n                videoRoomAdaptor.sendConnectionInfo(janusSessionId,\n                        sessionToHandle.get(janusSessionId),\n                        json.getJSONObject(\"ice_candidate\"));\n                break;\n            case \"ice_complete_subscriber\": {\n                Long subscriberSession = publisherSessionToSubscriberSession.get(janusSessionId);\n                videoRoomAdaptor.sendCompleteIceGathering(subscriberSession, sessionToHandle.get(subscriberSession));\n            }\n            break;\n            case \"sdp_answer_subscriber\": {\n                Long subscriberSession = publisherSessionToSubscriberSession.get(janusSessionId);\n                String answerResult = videoRoomAdaptor.sendViewerSDPAnswer(\n                        subscriberSession,\n                        sessionToHandle.get(subscriberSession),\n                        json.getString(\"sdp\"),\n                        json.getLong(\"room_name\")\n                ).toString();\n                context.send(answerResult);\n            }\n            break;\n            case \"ice_complete\":\n                videoRoomAdaptor.sendCompleteIceGathering(janusSessionId, sessionToHandle.get(janusSessionId));\n                break;\n            case \"unpublish\":\n                videoRoomAdaptor.stopPublishStream(janusSessionId, sessionToHandle.get(janusSessionId));\n                break;\n            case \"leave_room\":\n                Long handleId = sessionToHandle.remove(janusSessionId);", "                if (handleId != null) {\n                    videoRoomAdaptor.leaveRoom(janusSessionId, handleId);\n                }\n                context.closeSession();\n                break;\n            case \"room_info\":\n                context.send(\n                        videoRoomAdaptor.getAllRooms(janusSessionId, sessionToHandle.get(janusSessionId)\n                        ).put(\"type\", \"room_info_result\").toString());\n                break;\n            case \"leave_room_subscriber\":\n                Long subscriberSession = publisherSessionToSubscriberSession.remove(janusSessionId);", "                if (subscriberSession != null)\n                    videoRoomAdaptor.leaveRoom(subscriberSession, sessionToHandle.remove(subscriberSession));\n                break;\n            case \"ping\":\n                context.send(new JSONObject().put(\"type\", \"pong\").toString());\n                break;\n            default:\n                context.send(new JSONObject().put(\"type\", \"error\").put(\"error\", \"Unsupported message\").toString());\n        }\n    }\n\n    private void handlePublishStream(WsMessageContext context, JSONObject json, Long janusSessionId) {", "        if (!json.has(\"sdp\")) {\n            return;\n        }\n        String answerSdp = videoRoomAdaptor.startLive(janusSessionId,\n                sessionToHandle.get(janusSessionId),\n                json.getString(\"sdp\"));\n        JSONObject result = new JSONObject().put(\"sdp\", answerSdp).put(\"type\", \"publish_stream_result\");\n        logger.info(\"Sending publish stream result\");\n        logger.debug(result.toString());\n        context.send(result.toString());\n    }\n\n    private Map<Long, Long> publisherSessionToSubscriberSession = new HashMap<>();\n    private Map<Long, Long> publisherSessionToPrivateId = new HashMap<>();\n\n    private void handleJoinRoom(String user, WsMessageContext context, JSONObject json, Long janusSessionId) {", "        if (!json.has(\"room_name\") || !json.has(\"role\"))\n            return;\n        if (json.get(\"role\").equals(\"publisher\")) {\n            JSONObject jsonOutput = videoRoomAdaptor.publisherJoinRoom(janusSessionId,\n                            sessionToHandle.get(janusSessionId),\n                            json.getLong(\"room_name\"),\n                            json.has(\"display_name\") ? json.getString(\"display_name\") : user)\n                    .put(\"type\", \"join_room_result\")\n                    .put(\"role\", \"publisher\");\n            publisherSessionToPrivateId.put(janusSessionId, jsonOutput.getLong(\"private_id\"));\n            context.send(jsonOutput\n                    .toString());\n        } else {", "            if (!json.has(\"feeds\")) {\n                context.send(new JSONObject().put(\"type\", \"error\").put(\"message\", \"Need feedIds\").toString());\n                return;\n            }\n            Long subscriberSession = publisherSessionToSubscriberSession.get(janusSessionId);\n            if (subscriberSession == null) {\n                subscriberSession = janusClient.createSession();\n                publisherSessionToSubscriberSession.put(janusSessionId, subscriberSession);\n                Long handleId = videoRoomAdaptor.attachToVideoRoom(subscriberSession);\n                sessionToHandle.put(subscriberSession, handleId);\n            }\n            int size = json.getJSONArray(\"feeds\").length();\n            long[] feeds = new long[size];", "            for (int i = 0; i < size; i++) {\n                feeds[i] = ((Long) json.getJSONArray(\"feeds\").get(i)).longValue();\n            }\n            JSONObject messageResult = videoRoomAdaptor.subscriberJoinRoom(subscriberSession,\n                    sessionToHandle.get(subscriberSession),\n                    json.getLong(\"room_name\"),\n                    json.has(\"display_name\") ? json.getString(\"display_name\") : user,\n                    feeds,\n                    publisherSessionToPrivateId.get(janusSessionId));\n            messageResult.put(\"type\", \"join_room_result\").put(\"role\", \"subscriber\");\n            context.send(messageResult.toString());\n        }\n    }\n", "    public void createSession(String userId, WsConnectContext ctx) {\n        CompletableFuture.supplyAsync(janusClient::createSession)\n                .thenApply(sessionId -> {\n                    janusToUserMap.put(sessionId, userId);\n                    userToJanus.put(userId, sessionId);\n                    userContexts.put(userId, ctx);\n                    return sessionId;\n                })\n                .thenAccept(sessionId -> {\n                    Long handleId = videoRoomAdaptor.attachToVideoRoom(sessionId);\n                    sessionToHandle.put(sessionId, handleId);\n                });\n    }\n", "    public void destroySession(String userId) {\n        Long janusSessionId = userToJanus.remove(userId);\n        userContexts.remove(userId);\n        if (janusSessionId != null) {\n            janusToUserMap.remove(janusSessionId);\n            janusClient.destroySession(janusSessionId);\n            sessionToHandle.remove(janusSessionId);\n        }\n    }\n\n    private static class WatchDog implements Runnable {\n        public WatchDog(Map<String, WsConnectContext> userContexts) {\n            this.userContexts = userContexts;\n        }\n\n        private final Map<String, WsConnectContext> userContexts;", "        public boolean shouldStop = false;\n\n        @Override\n        public void run() {\n            while (!shouldStop) {\n                try {\n                    Thread.sleep(10000);\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n                userContexts.values().stream().forEach(context -> {\n                    context.send(\"{\\\"type\\\":\\\"keep_alive\\\"}\");\n                });\n            }\n        }\n    }\n}\n"]}
{"filename": "signaling/src/main/java/net/edulive/janus/signaling_server/VideoRoomHandler.java", "chunked_list": ["package net.edulive.janus.signaling_server;\n\nimport net.edulive.janus.java_client.JanusClient;\n\npublic class VideoRoomHandler {\n    JanusClient janusClient = new JanusClient((sessionId, message) -> {\n        return true;\n    },\"localhost:8188\");\n}\n"]}
{"filename": "signaling/src/main/java/net/edulive/janus/signaling_server/WebRTCSignalingApp.java", "chunked_list": ["package net.edulive.janus.signaling_server;\n\nimport io.javalin.Javalin;\nimport io.javalin.http.staticfiles.Location;\nimport io.javalin.websocket.WsContext;\nimport org.eclipse.jetty.server.ServerConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Map;", "\nimport java.util.Map;\nimport java.util.Random;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class WebRTCSignalingApp {\n    private static final Map<WsContext, String> userUsernameMap = new ConcurrentHashMap<>();\n\n    private static final Logger logger = LoggerFactory.getLogger(WebRTCSignalingApp.class);\n\n    public static void main(String[] args) {\n        Javalin app = Javalin.create(config ->\n                config.staticFiles.add(\"/public\", Location.CLASSPATH)\n        );\n        app.jettyServer().setServerHost(\"0.0.0.0\");\n        app.start(7070);\n        MessageHandler messageHandler = new MessageHandler(System.getProperty(\"janus_address\", \"localhost:8188\"));\n\n        app.ws(\"/signaling\", ws -> {\n            ws.onConnect(ctx -> {\n                String username = randomString();\n                userUsernameMap.put(ctx, username);\n                messageHandler.createSession(username, ctx);\n                ctx.send(\"{\\\"type\\\":\\\"status\\\",\\\"status\\\":\\\"connected\\\"}\");\n                logger.info(\"{} joined\", username);\n            });\n            ws.onClose(ctx -> {\n                String username = userUsernameMap.get(ctx);\n                userUsernameMap.remove(ctx);\n                messageHandler.destroySession(username);\n                logger.info(\"{} left \", username);\n            });\n            ws.onMessage(ctx -> {\n                String username = userUsernameMap.get(ctx);\n                logger.info(\"{} send {}\", username, ctx.message());\n                messageHandler.handleMessage(userUsernameMap.get(ctx), ctx);\n            });\n        });\n    }\n\n    private static final String CHARACTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    private static final Random random = new Random();\n", "    public static void main(String[] args) {\n        Javalin app = Javalin.create(config ->\n                config.staticFiles.add(\"/public\", Location.CLASSPATH)\n        );\n        app.jettyServer().setServerHost(\"0.0.0.0\");\n        app.start(7070);\n        MessageHandler messageHandler = new MessageHandler(System.getProperty(\"janus_address\", \"localhost:8188\"));\n\n        app.ws(\"/signaling\", ws -> {\n            ws.onConnect(ctx -> {\n                String username = randomString();\n                userUsernameMap.put(ctx, username);\n                messageHandler.createSession(username, ctx);\n                ctx.send(\"{\\\"type\\\":\\\"status\\\",\\\"status\\\":\\\"connected\\\"}\");\n                logger.info(\"{} joined\", username);\n            });\n            ws.onClose(ctx -> {\n                String username = userUsernameMap.get(ctx);\n                userUsernameMap.remove(ctx);\n                messageHandler.destroySession(username);\n                logger.info(\"{} left \", username);\n            });\n            ws.onMessage(ctx -> {\n                String username = userUsernameMap.get(ctx);\n                logger.info(\"{} send {}\", username, ctx.message());\n                messageHandler.handleMessage(userUsernameMap.get(ctx), ctx);\n            });\n        });\n    }\n\n    private static final String CHARACTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    private static final Random random = new Random();\n", "    public static String randomString() {\n        int length = 20; // the desired length of the random string\n        StringBuilder sb = new StringBuilder(length);\n        for (int i = 0; i < length; i++) {\n            int index = random.nextInt(CHARACTERS.length());\n            sb.append(CHARACTERS.charAt(index));\n        }\n        return sb.toString();\n    }\n}\n"]}
{"filename": "src/test/java/net/edulive/janus/java_client/TestMainFlow.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport net.edulive.janus.java_client.videoroom.VideoRoomAdaptor;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class TestMainFlow extends AbstractTestCase{\n\n    @BeforeClass\n    public static void setup() {\n        client.connect();", "    public static void setup() {\n        client.connect();\n        try {\n            Thread.sleep(5000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    private static JanusClient client = new JanusClient((sessionId,message) ->  true,\"wss://janus.conf.meetecho.com/ws\");\n    @AfterClass\n    public static void shutdown() {\n        client.close();\n    }\n    @Test", "    public static void shutdown() {\n        client.close();\n    }\n    @Test\n    public void testVideoRoom(){\n        VideoRoomAdaptor videoRoomAdaptor = new VideoRoomAdaptor(client);\n        Long sessionId = client.createSession();\n        Long handleId = videoRoomAdaptor.attachToVideoRoom(sessionId);\n        System.out.printf(videoRoomAdaptor.getAllRooms(sessionId,handleId).toString());\n        videoRoomAdaptor.publisherJoinRoom(sessionId,handleId,1234, \"janus-java-client\");\n        videoRoomAdaptor.leaveRoom(sessionId,handleId);\n    }\n}\n"]}
{"filename": "src/test/java/net/edulive/janus/java_client/AbstractTestCase.java", "chunked_list": ["package net.edulive.janus.java_client;\n\npublic class AbstractTestCase {\n\n\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/WSConnector.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport java.net.URI;\nimport java.util.Collections;\nimport java.util.Iterator;\n\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.java_websocket.protocols.Protocol;", "import org.java_websocket.handshake.ServerHandshake;\nimport org.java_websocket.protocols.Protocol;\nimport org.json.JSONObject;\n\nclass WSConnector extends WebSocketClient{\n\tpublic WSConnector(URI serverUri, JanusClient callback, NetworkEventHandler networkHandler) {\n\t\tsuper(serverUri,new Draft_6455(Collections.emptyList(), Collections.singletonList(new Protocol(\"janus-protocol\"))), Collections.EMPTY_MAP);\n\t\tthis.callback = callback;\n\t\tthis.networkHandler = networkHandler;\n\t}", "\t\tthis.networkHandler = networkHandler;\n\t}\n\n\tprivate NetworkEventHandler networkHandler;\n\tprivate JanusClient callback;\n\n\t@Override\n\tpublic void onOpen(ServerHandshake handshakedata) {\n\t\tnetworkHandler.onOpen(convert(handshakedata));\n\t}\n\n\t@Override", "\tpublic void onMessage(String message) {\n\t\tcallback.onMessage(message);\n\t}\n\n\t@Override\n\tpublic void onClose(int code, String reason, boolean remote) {\n\t\tnetworkHandler.onClose(new JSONObject().put(\"code\", code).put(\"reason\", reason).put(\"remote\", remote));\n\t}\n\n\t@Override\n\tpublic void onError(Exception ex) {\n\t\tnetworkHandler.onError(ex);\n\t}\n\n\tprivate JSONObject convert(ServerHandshake handshakedata) {\n\t\tJSONObject result = new JSONObject();\n\t\tresult.put(\"httpStatus\", handshakedata.getHttpStatus())\n\t\t.put(\"httpMessage\", handshakedata.getHttpStatusMessage());\n\t\tIterator<String> fields = handshakedata.iterateHttpFields();", "\tpublic void onError(Exception ex) {\n\t\tnetworkHandler.onError(ex);\n\t}\n\n\tprivate JSONObject convert(ServerHandshake handshakedata) {\n\t\tJSONObject result = new JSONObject();\n\t\tresult.put(\"httpStatus\", handshakedata.getHttpStatus())\n\t\t.put(\"httpMessage\", handshakedata.getHttpStatusMessage());\n\t\tIterator<String> fields = handshakedata.iterateHttpFields();\n\t\twhile(fields.hasNext()) {\n\t\t\tString field = fields.next();\n\t\t\tresult.put(field, handshakedata.getFieldValue(field));\n\t\t}\n\n\t\treturn result;\n\t}\n}", "\t\twhile(fields.hasNext()) {\n\t\t\tString field = fields.next();\n\t\t\tresult.put(field, handshakedata.getFieldValue(field));\n\t\t}\n\n\t\treturn result;\n\t}\n}"]}
{"filename": "src/main/java/net/edulive/janus/java_client/DestroySessionHandler.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport java.util.concurrent.CompletableFuture;\nimport org.json.JSONObject;\n\nclass DestroySessionHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic DestroySessionHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}", "\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"success\":\n\t\t\tthis.getResult().complete(janusMessage);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/NetworkEventHandler.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport org.json.JSONObject;\n\ninterface NetworkEventHandler {\n\n\tvoid onOpen(JSONObject convert);\n\n\tvoid onClose(JSONObject put);\n", "\tvoid onClose(JSONObject put);\n\n\tvoid onError(Exception ex);\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/DoNothingHandler.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport org.json.JSONObject;\n\npublic class DoNothingHandler extends JanusTransactionAbstractHandler<Boolean>{\n\n    public DoNothingHandler(String transactionId, long sessionId) {\n        super(null, transactionId, sessionId);\n    }\n\n    @Override", "    public boolean process(JSONObject janusMessage) {\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/CreateSessionHandler.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport org.json.JSONObject;\n\nclass CreateSessionHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic CreateSessionHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob,transactionId,sessionId);", "\tpublic CreateSessionHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob,transactionId,sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"success\":\n\t\t\tthis.getResult().complete(janusMessage.getJSONObject(\"data\"));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/JanusTransactionAbstractHandler.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic abstract class JanusTransactionAbstractHandler<T> implements JanusTransactionHandler {\n\n\tpublic JanusTransactionAbstractHandler(CompletableFuture<T> futureJob, String transactionId, long sessionId) {\n\t\tthis.futureJob = futureJob;\n\t\tthis.transactionId = transactionId;\n\t\tthis.sessionId = sessionId;\n\t}\n\tprotected CompletableFuture<T> futureJob;\n\tprotected boolean ack = false;\n\tprotected long createTime = System.currentTimeMillis();\n\tprotected long lastAccess = System.currentTimeMillis();\n\tprotected String transactionId;\n\tprotected long sessionId;\n\n\t/**\n\t *\n\t * @return\n\t */\n\t@Override", "\tpublic long getCreateTime() {\n\t\treturn createTime;\n\t}\n\n\t@Override\n\tpublic long getLastAccess() {\n\t\treturn lastAccess;\n\t}\n\n\t@Override\n\tpublic long getSessionId() {\n\t\treturn sessionId;\n\t}\n\n\t/**\n\t *\n\t * @return\n\t */\n\t@Override", "\tpublic long getSessionId() {\n\t\treturn sessionId;\n\t}\n\n\t/**\n\t *\n\t * @return\n\t */\n\t@Override\n\tpublic String getTransactionId() {\n\t\treturn transactionId;\n\t}\n\n\t/**\n\t *\n\t * @return\n\t */\n\t@Override", "\tpublic String getTransactionId() {\n\t\treturn transactionId;\n\t}\n\n\t/**\n\t *\n\t * @return\n\t */\n\t@Override\n\tpublic boolean getACK() {\n\t\treturn ack;\n\t}\n\n\t/**\n\t * \n\t * @return\n\t */\n\t@Override\n\tpublic CompletableFuture<T> getResult() {\n\t\treturn futureJob;\n\t}\n\t\n}\n", "\tpublic boolean getACK() {\n\t\treturn ack;\n\t}\n\n\t/**\n\t * \n\t * @return\n\t */\n\t@Override\n\tpublic CompletableFuture<T> getResult() {\n\t\treturn futureJob;\n\t}\n\t\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/MessageCallback.java", "chunked_list": ["package net.edulive.janus.java_client;\n\npublic interface MessageCallback {\n    boolean handle(long sessionId, String message);\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/JanusClient.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport java.net.URI;\nimport java.util.*;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;", "import org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport static net.edulive.janus.java_client.JanusKeywords.JANUS_JANUS;\nimport static net.edulive.janus.java_client.JanusKeywords.JANUS_TRANSACTION;\n\n\npublic class JanusClient {\n    /**\n     * Init a Janus client, but don't connect to the Janus server yet\n     *\n     * @param messageCallback There are some Janus's messages don't have transactionId then Janus client cannot find\n     *                        a handler to process. Those messages will forward to user's context\n     * @param address         Address of Janus's websocket\n     */\n    public JanusClient(MessageCallback messageCallback, String address) {\n        this.messageCallback = messageCallback;\n        this.address = address;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(JanusClient.class);\n    private WSConnector transporter;\n\n    private final MessageCallback messageCallback;\n\n    private WatchDog watchDog;\n    private final String address;\n\n    private final Set<Long> sessionIdMap = new HashSet<>();\n    Map<String, JanusTransactionHandler> transactionHandlers = new HashMap<>();\n\n    private void sendToRoot(String transactionId, JSONObject data) {", "public class JanusClient {\n    /**\n     * Init a Janus client, but don't connect to the Janus server yet\n     *\n     * @param messageCallback There are some Janus's messages don't have transactionId then Janus client cannot find\n     *                        a handler to process. Those messages will forward to user's context\n     * @param address         Address of Janus's websocket\n     */\n    public JanusClient(MessageCallback messageCallback, String address) {\n        this.messageCallback = messageCallback;\n        this.address = address;\n    }\n\n    private static final Logger logger = LoggerFactory.getLogger(JanusClient.class);\n    private WSConnector transporter;\n\n    private final MessageCallback messageCallback;\n\n    private WatchDog watchDog;\n    private final String address;\n\n    private final Set<Long> sessionIdMap = new HashSet<>();\n    Map<String, JanusTransactionHandler> transactionHandlers = new HashMap<>();\n\n    private void sendToRoot(String transactionId, JSONObject data) {", "        if (!this.transporter.isOpen()) {\n            this.connect();\n        }\n        this.transporter.send(data.put(JANUS_TRANSACTION, transactionId).toString());\n    }\n\n    /**\n     * Send command to session\n     *\n     * @param transactionId a random string that the client can use to match response messages from the Janus server\n     * @param sessionId     Janus session ID of user\n     * @param data          information about the command\n     * @param handler       object will process returned messages\n     */", "    public void sendToSession(String transactionId, Long sessionId, JSONObject data, JanusTransactionAbstractHandler handler) {\n        if (handler != null) {\n            this.transactionHandlers.put(transactionId, handler);\n        }\n        data.put(JANUS_TRANSACTION, transactionId)\n                .put(\"session_id\", sessionId);\n        logger.info(\"Sending: {}\", data);\n        this.transporter.send(data.toString());\n    }\n\n    /**\n     * attach a Janus session to a plugin\n     *\n     * @param sessionId  Janus session of user\n     * @param pluginName plugin will handle the command\n     * @param data       data of command\n     * @return handleId of user in context of the plugin\n     * @throws ExecutionException\n     * @throws InterruptedException\n     */", "    public long attachToPlugin(Long sessionId, String pluginName, JSONObject data) throws ExecutionException, InterruptedException {\n        data.put(JANUS_JANUS, \"attach\").put(\"plugin\", pluginName);\n        CompletableFuture<Long> result = new CompletableFuture<>();\n        String transactionId = UUID.randomUUID().toString();\n        this.sendToSession(transactionId, sessionId, data, new JanusTransactionAbstractHandler<>(result, transactionId, sessionId) {\n            @Override\n            public boolean process(JSONObject janusMessage) {\n                if (janusMessage.getString(JANUS_JANUS).equals(\"success\")) {\n                    this.getResult().complete(janusMessage.getJSONObject(\"data\").getLong(\"id\"));\n                } else {\n                    this.getResult().cancel(true);\n                }\n                return false;\n            }\n        });\n        return result.get();\n    }\n\n    protected void onMessage(String message) {\n        logger.info(\"Receive: {}\", message);\n        JSONObject incomeMessage = new JSONObject(message);", "        if (handleSpecialEvent(incomeMessage)) {\n            return;\n        }\n        if (!incomeMessage.has(JANUS_TRANSACTION)) {\n            return;\n        }\n        String transactionId = incomeMessage.getString(JANUS_TRANSACTION);\n        JanusTransactionHandler handler = this.transactionHandlers.get(transactionId);\n        if (handler != null) {\n            if (!handler.process(incomeMessage)) {\n                this.transactionHandlers.remove(transactionId);\n            }\n        } else {\n            logger.info(\"cannot found handler for transaction: {}\", transactionId);\n        }\n    }\n\n    private boolean handleSpecialEvent(JSONObject message) {\n        String eventName = message.getString(JANUS_JANUS);\n        switch (eventName) {\n            case \"event\":", "        if (handler != null) {\n            if (!handler.process(incomeMessage)) {\n                this.transactionHandlers.remove(transactionId);\n            }\n        } else {\n            logger.info(\"cannot found handler for transaction: {}\", transactionId);\n        }\n    }\n\n    private boolean handleSpecialEvent(JSONObject message) {\n        String eventName = message.getString(JANUS_JANUS);\n        switch (eventName) {\n            case \"event\":", "                if (message.has(JANUS_TRANSACTION)) {\n                    break;\n                }\n            case \"media\": // Janus receive audio bytes event\n            case \"slowlink\": // Janus cannot send NACKs to Peer\n            case \"hangup\": // PeerConnection close\n            case \"webrtcup\": // Janus connect successful\n                this.messageCallback.handle(message.getLong(\"session_id\"), message.toString());\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Connect Janus client to Janus server\n     *\n     * @return <code>true</code> if connect success\n     */", "    public boolean connect() {\n        transporter = new WSConnector(URI.create(address.startsWith(\"ws\") ? address : \"ws://\" + address), this, new NetworkEventHandler() {\n\n            @Override\n            public void onOpen(JSONObject message) {\n                logger.debug(\"OnOpen connection: {}\", message);\n            }\n\n            @Override\n            public void onError(Exception ex) {\n                ex.printStackTrace();\n            }\n\n            @Override", "            public void onError(Exception ex) {\n                ex.printStackTrace();\n            }\n\n            @Override\n            public void onClose(JSONObject message) {\n                logger.debug(\"OnClose connection: {}\", message);\n            }\n        });\n        transporter.connect();\n        watchDog = new WatchDog(this, this.sessionIdMap);\n        Thread t = new Thread(watchDog);\n        t.start();\n        return true;\n    }\n\n    /**\n     * Create a Janus session\n     *\n     * @return sessionId of new Janus session\n     */", "    public Long createSession() {\n        if (transporter == null) {\n            return 0L;\n        }\n        JSONObject data = new JSONObject().put(JANUS_JANUS, \"create\");\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        CreateSessionHandler handler = new CreateSessionHandler(result, UUID.randomUUID().toString(), 0);\n        this.transactionHandlers.put(handler.getTransactionId(), handler);\n        this.sendToRoot(handler.getTransactionId(), data);\n        try {\n            JSONObject jsonObject = result.get();\n            long sessionId = jsonObject.getLong(\"id\");\n            this.sessionIdMap.add(sessionId);\n            return sessionId;\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in createSession\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n    /**\n     * Kill an exists Janus session\n     *\n     * @param sessionId\n     * @return\n     */", "        try {\n            JSONObject jsonObject = result.get();\n            long sessionId = jsonObject.getLong(\"id\");\n            this.sessionIdMap.add(sessionId);\n            return sessionId;\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in createSession\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n    /**\n     * Kill an exists Janus session\n     *\n     * @param sessionId\n     * @return\n     */", "    public long destroySession(Long sessionId) {\n        JSONObject data = new JSONObject().put(JANUS_JANUS, \"destroy\");\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        this.sendToSession(transactionId, sessionId, data, new DestroySessionHandler(result, transactionId, sessionId));\n        try {\n            long sessionToDestroy = result.get().getLong(\"session_id\");\n            this.sessionIdMap.remove(sessionToDestroy);\n            return sessionToDestroy;\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in destroySession\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n", "    public String getAddress() {\n        return this.address;\n    }\n\n    /**\n     *\n     */\n    public void close() {\n        this.watchDog.setShouldStop(true);\n        this.transporter.close();\n    }\n\n    private static class WatchDog implements Runnable {\n        public WatchDog(JanusClient transporter, Set<Long> sessionIdMap) {\n            this.transporter = transporter;\n            this.sessionIdMap = sessionIdMap;\n        }\n\n        private final Set<Long> sessionIdMap;\n        private final JanusClient transporter;\n        private boolean shouldStop = false;\n", "        public void setShouldStop(boolean value) {\n            this.shouldStop = value;\n        }\n\n        @Override\n        public void run() {\n            while (!this.shouldStop) {\n                for (Long session : this.sessionIdMap) {\n                    String transactionId = UUID.randomUUID().toString();\n                    this.transporter.sendToSession(transactionId,\n                            session,\n                            new JSONObject().put(JANUS_JANUS, \"keepalive\"),\n                            new DoNothingHandler(transactionId, session));\n                }", "                try {\n                    Thread.sleep(20000);\n                } catch (InterruptedException e) {\n                    logger.error(\"Error while sleeping\", e);\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/JanusKeywords.java", "chunked_list": ["package net.edulive.janus.java_client;\n\npublic interface JanusKeywords {\n    String JANUS_JANUS = \"janus\";\n    String JANUS_TRANSACTION = \"transaction\";\n    String JANUS_REQUEST = \"request\";\n    String JANUS_HANDLE_ID = \"handle_id\";\n    String JANUS_MESSAGE = \"message\";\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/JanusTransactionHandler.java", "chunked_list": ["package net.edulive.janus.java_client;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport org.json.JSONObject;\n\ninterface JanusTransactionHandler {\n\tlong getCreateTime();\n\tlong getLastAccess();\n\tlong getSessionId();", "\tlong getLastAccess();\n\tlong getSessionId();\n\tString getTransactionId();\n\tboolean getACK();\n\tCompletableFuture<?> getResult();\n\n\t/**\n\t * Handle message from Janus server\n\t * @param janusMessage the message from Janus\n\t * @return <code>false</code> if no further message to handle", "\t * @param janusMessage the message from Janus\n\t * @return <code>false</code> if no further message to handle\n\t */\n\tboolean process(JSONObject janusMessage);\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/VideoRoomAdaptor.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport net.edulive.janus.java_client.JanusClient;\nimport net.edulive.janus.java_client.DoNothingHandler;\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;", "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\nimport static net.edulive.janus.java_client.JanusKeywords.*;\n\npublic class VideoRoomAdaptor {\n\n    private static final Logger logger = LoggerFactory.getLogger(VideoRoomAdaptor.class);\n\n    public VideoRoomAdaptor(JanusClient janusClient) {\n        this.janusClient = janusClient;\n    }\n\n    private final JanusClient janusClient;\n\n    /**\n     * Create a handleId for interacting with Videoroom plugin\n     *\n     * @param sessionId Janus session ID of user\n     * @return handleId of user in the context of Videoroom plugin\n     */", "\npublic class VideoRoomAdaptor {\n\n    private static final Logger logger = LoggerFactory.getLogger(VideoRoomAdaptor.class);\n\n    public VideoRoomAdaptor(JanusClient janusClient) {\n        this.janusClient = janusClient;\n    }\n\n    private final JanusClient janusClient;\n\n    /**\n     * Create a handleId for interacting with Videoroom plugin\n     *\n     * @param sessionId Janus session ID of user\n     * @return handleId of user in the context of Videoroom plugin\n     */", "    public Long attachToVideoRoom(Long sessionId) {\n        logger.debug(\"Attach to video room plugin with sessionId: {}\", sessionId);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, \"attach\")\n                .put(\"plugin\", \"janus.plugin.videoroom\")\n                .put(\"opaque_id\", UUID.randomUUID().toString());\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new AttachToVideoRoomHandler(result, transactionId, sessionId));\n        try {\n            return result.get().getLong(\"id\");\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in attachToVideoRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n    /**\n     * Join room as a publisher\n     *\n     * @param sessionId   Janus sessionId of user\n     * @param handleId    Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param roomName    Unique room name to join\n     * @param displayName A name to show to other participants in the room\n     * @return Information about the room\n     */", "        try {\n            return result.get().getLong(\"id\");\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in attachToVideoRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n    /**\n     * Join room as a publisher\n     *\n     * @param sessionId   Janus sessionId of user\n     * @param handleId    Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param roomName    Unique room name to join\n     * @param displayName A name to show to other participants in the room\n     * @return Information about the room\n     */", "    public JSONObject publisherJoinRoom(Long sessionId, Long handleId, long roomName, String displayName) {\n        JSONObject message = new JSONObject()\n                .put(JANUS_REQUEST, \"join\")\n                .put(\"ptype\", \"publisher\")\n                .put(\"room\", roomName)\n                .put(\"display\", displayName);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", message).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new PublisherJoinRoomHandler(result, transactionId, sessionId));\n        try {\n            return result.get();\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in publisherJoinRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId   Janus sessionId of user\n     * @param handleId    Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param roomName    Unique room name to join\n     * @param displayName A name to show to other participants in the room\n     * @param feederIds   List of streams to subscribe\n     * @return An SDP message from Janus\n     */", "        try {\n            return result.get();\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in publisherJoinRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId   Janus sessionId of user\n     * @param handleId    Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param roomName    Unique room name to join\n     * @param displayName A name to show to other participants in the room\n     * @param feederIds   List of streams to subscribe\n     * @return An SDP message from Janus\n     */", "    public JSONObject subscriberJoinRoom(Long sessionId, Long handleId, long roomName, String displayName, long[] feederIds, Long privateId) {\n        JSONArray streams = new JSONArray();\n        for (long feederId : feederIds) {\n            streams.put(new JSONObject().put(\"feed\", feederId));\n        }\n        JSONObject message = new JSONObject()\n                .put(JANUS_REQUEST, \"join\")\n                .put(\"ptype\", \"subscriber\")\n                .put(\"private_id\", privateId)\n                .put(\"room\", roomName)\n                .put(\"display\", displayName);\n        message.put(\"streams\", streams);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", message).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new JanusTransactionAbstractHandler<>(result, transactionId, sessionId) {\n            @Override", "            public boolean process(JSONObject janusMessage) {\n                if (janusMessage.get(\"janus\").equals(\"ack\")) {\n                    this.ack = true;\n                    return true;\n                }\n                if (janusMessage.has(\"jsep\")) {\n                    this.getResult().complete(janusMessage.getJSONObject(\"jsep\"));\n                } else {\n                    this.getResult().complete(janusMessage);\n                }\n                return false;\n            }\n        });", "        try {\n            return result.get();\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in subscriberJoinRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @return Unique room name\n     */", "    public long createRoom(Long sessionId, Long handleId) {\n        JSONObject message = new JSONObject().put(JANUS_REQUEST, \"create\").put(\"notify_joining\", true);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE)\n                .put(\"body\", message)\n                .put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<Long> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new CreateRoomHandler(result, transactionId, sessionId));\n        try {\n            return result.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in createRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param roomId    Unique room name\n     */", "        try {\n            return result.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in createRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n        return 0L;\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param roomId    Unique room name\n     */", "    public void destroyRoom(Long sessionId, Long roomId, Long handleId) {\n        JSONObject message = new JSONObject().put(JANUS_REQUEST, \"destroy\").put(\"room\", roomId);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", message).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        janusClient.sendToSession(transactionId, sessionId, data, null);\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @return A JSON represent all rooms with detail infor\n     */", "    public JSONObject getAllRooms(Long sessionId, Long handleId) {\n        JSONObject message = new JSONObject().put(JANUS_REQUEST, \"list\");\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", message).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new JanusTransactionAbstractHandler<>(result, transactionId, sessionId) {\n            @Override\n            public boolean process(JSONObject janusMessage) {\n                if (janusMessage.getString(\"janus\").equals(\"ack\")) {\n                    this.ack = true;\n                    return true;\n                }\n                this.getResult().complete(janusMessage.getJSONObject(\"plugindata\").getJSONObject(\"data\"));\n                return false;\n            }\n        });", "                if (janusMessage.getString(\"janus\").equals(\"ack\")) {\n                    this.ack = true;\n                    return true;\n                }\n                this.getResult().complete(janusMessage.getJSONObject(\"plugindata\").getJSONObject(\"data\"));\n                return false;\n            }\n        });\n        try {\n            return result.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in getAllRooms\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param sdp       SDP offer describe connection info\n     * @return A SDP message from Janus\n     */", "        try {\n            return result.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in getAllRooms\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param sdp       SDP offer describe connection info\n     * @return A SDP message from Janus\n     */", "    public String startLive(Long sessionId, Long handleId, String sdp) {\n        String transactionId = UUID.randomUUID().toString();\n        JSONObject body = new JSONObject(\"{\\\"request\\\": \\\"configure\\\", \\\"audio\\\": true, \\\"video\\\": true}\");\n        JSONObject jsep = new JSONObject().put(\"type\", \"offer\").put(\"sdp\", sdp);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", body).put(JANUS_HANDLE_ID, handleId).put(\"jsep\", jsep);\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new StartLiveHandler(result, transactionId, sessionId));\n        try {\n            return result.get().getJSONObject(\"jsep\").getString(\"sdp\");\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in startLive\", e);\n            Thread.currentThread().interrupt();\n        }\n        return \"\";\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param candidate ICE candidate ready for connect\n     */", "    public void sendConnectionInfo(Long sessionId, Long handleId, JSONObject candidate) {\n        String transactionId = UUID.randomUUID().toString();\n        JSONObject origin = new JSONObject().put(JANUS_JANUS, \"trickle\").put(JANUS_HANDLE_ID, handleId);\n        DoNothingHandler handler = new DoNothingHandler(transactionId, sessionId);\n        JSONObject connectionInfo = origin.put(\"candidate\", candidate);\n        janusClient.sendToSession(transactionId, sessionId, connectionInfo, handler);\n    }\n\n    /**\n     * Send event to notice client is finish ICE gathering\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     */", "    public void sendCompleteIceGathering(Long sessionId, Long handleId) {\n        String transactionId = UUID.randomUUID().toString();\n        JSONObject origin = new JSONObject().put(JANUS_JANUS, \"trickle\").put(JANUS_HANDLE_ID, handleId);\n        DoNothingHandler handler = new DoNothingHandler(transactionId, sessionId);\n        janusClient.sendToSession(transactionId, sessionId, origin.put(\"candidate\", new JSONObject().put(\"completed\", true)), handler);\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param sdp       A message describe connection info\n     * @param roomId    Unique room name\n     * @return A SDP message\n     */", "    public JSONObject sendViewerSDPAnswer(Long sessionId, Long handleId, String sdp, Long roomId) {\n        JSONObject body = new JSONObject().put(JANUS_REQUEST, \"start\").put(\"room\", roomId);\n        JSONObject jsep = new JSONObject().put(\"type\", \"answer\").put(\"sdp\", sdp);\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(JANUS_HANDLE_ID, handleId).put(\"body\", body).put(\"jsep\", jsep);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n\n        janusClient.sendToSession(transactionId, sessionId, data, new JanusTransactionAbstractHandler<>(result, transactionId, sessionId) {\n            @Override\n            public boolean process(JSONObject janusMessage) {\n                if(janusMessage.getString(\"janus\").equals(\"ack\")){\n                    this.ack = true;\n                    return false;\n                }\n                this.futureJob.complete(janusMessage.getJSONObject(\"plugindata\"));\n                return false;\n            }\n        });", "            public boolean process(JSONObject janusMessage) {\n                if(janusMessage.getString(\"janus\").equals(\"ack\")){\n                    this.ack = true;\n                    return false;\n                }\n                this.futureJob.complete(janusMessage.getJSONObject(\"plugindata\"));\n                return false;\n            }\n        });\n        try {\n            return result.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in sendViewerSDPAnswer\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     */", "        try {\n            return result.get();\n        } catch (InterruptedException | ExecutionException e) {\n            logger.error(\"Error in sendViewerSDPAnswer\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     */", "    public void leaveRoom(Long sessionId, Long handleId) {\n        JSONObject message = new JSONObject().put(JANUS_REQUEST, \"leave\");\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", message).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new ViewerLeaveRoomHandler(result, transactionId, sessionId));\n        try {\n            result.get().getLong(\"session_id\");\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in leaveRoom\", e);\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     */", "    public JSONObject stopPublishStream(Long sessionId, Long handleId) {\n        JSONObject message = new JSONObject().put(JANUS_REQUEST, \"unpublish\");\n        JSONObject data = new JSONObject().put(JANUS_JANUS, JANUS_MESSAGE).put(\"body\", message).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, data, new ViewerLeaveRoomHandler(result, transactionId, sessionId));\n        try {\n            return result.get();\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in stopPublishStream\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n\n    /**\n     * @param sessionId Janus sessionId of user\n     * @param handleId  Unique Id of user in the context of plugin, created when user attach to plugin\n     * @param feeds     Ids of stream to subscribe\n     */", "    public JSONObject subscriptStream(Long sessionId, Long handleId, long[] feeds) {\n        JSONObject message = new JSONObject().put(JANUS_REQUEST, \"subscribe\");\n        JSONArray streams = new JSONArray();\n        for (long feed : feeds) {\n            streams.put(new JSONObject().put(\"feed\", feed));\n        }\n        message.put(\"streams\", streams).put(JANUS_HANDLE_ID, handleId);\n        String transactionId = UUID.randomUUID().toString();\n        CompletableFuture<JSONObject> result = new CompletableFuture<>();\n        janusClient.sendToSession(transactionId, sessionId, message, new JanusTransactionAbstractHandler<>(result, transactionId, sessionId) {\n            @Override", "            public boolean process(JSONObject janusMessage) {\n                this.getResult().complete(janusMessage);\n                return false;\n            }\n        });\n        try {\n            return result.get();\n        } catch (JSONException | InterruptedException | ExecutionException e) {\n            logger.error(\"Error in subscriptStream\", e);\n            Thread.currentThread().interrupt();\n        }\n        return new JSONObject();\n    }\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/PublisherJoinRoomHandler.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONObject;\n\nclass PublisherJoinRoomHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic PublisherJoinRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {", "\n\tpublic PublisherJoinRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"event\":\n\t\t\tthis.getResult().complete(janusMessage.getJSONObject(\"plugindata\").getJSONObject(\"data\"));\n\t\t\treturn false;\n\t\tcase \"ack\":\n\t\t\tthis.ack = true;\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/StartLiveHandler.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONObject;\n\nclass StartLiveHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic StartLiveHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {", "\n\tpublic StartLiveHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"event\":\n\t\t\tthis.getResult().complete(janusMessage);\n\t\t\treturn false;\n\t\tcase \"ack\":\n\t\t\tthis.ack = true;\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/CreateRoomHandler.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONObject;\n\nclass CreateRoomHandler extends JanusTransactionAbstractHandler<Long> {\n\n\tpublic CreateRoomHandler(CompletableFuture<Long> futureJob, String transactionId, long sessionId) {", "\n\tpublic CreateRoomHandler(CompletableFuture<Long> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"success\":\n\t\t\tthis.getResult().complete(janusMessage.getJSONObject(\"plugindata\").getJSONObject(\"data\").getLong(\"room\"));\n\t\t\treturn false;\n\t\tcase \"ack\":\n\t\t\tthis.ack = true;\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\treturn false;\n\t\t}\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/AttachToVideoRoomHandler.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONObject;\n\nclass AttachToVideoRoomHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic AttachToVideoRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {", "\n\tpublic AttachToVideoRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tif(janusMessage.getString(\"janus\").equals(\"success\")) {\n\t\t\tthis.getResult().complete(janusMessage.getJSONObject(\"data\"));\n\t\t} else {\n\t\t\tthis.getResult().cancel(true);\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/SubscriberJoinRoomHandler.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONObject;\n\nclass SubscriberJoinRoomHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic SubscriberJoinRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {", "\n\tpublic SubscriberJoinRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"event\":\n\t\t\tthis.getResult().complete(janusMessage);\n\t\t\tbreak;\n\t\tcase \"ack\":\n\t\t\tthis.ack = true;\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"]}
{"filename": "src/main/java/net/edulive/janus/java_client/videoroom/ViewerLeaveRoomHandler.java", "chunked_list": ["package net.edulive.janus.java_client.videoroom;\n\nimport java.util.concurrent.CompletableFuture;\n\nimport net.edulive.janus.java_client.JanusTransactionAbstractHandler;\nimport org.json.JSONObject;\n\nclass ViewerLeaveRoomHandler extends JanusTransactionAbstractHandler<JSONObject> {\n\n\tpublic ViewerLeaveRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {", "\n\tpublic ViewerLeaveRoomHandler(CompletableFuture<JSONObject> futureJob, String transactionId, long sessionId) {\n\t\tsuper(futureJob, transactionId, sessionId);\n\t}\n\n\t@Override\n\tpublic boolean process(JSONObject janusMessage) {\n\t\tswitch (janusMessage.getString(\"janus\")) {\n\t\tcase \"hangup\":\n\t\tcase \"event\":\n\t\t\tthis.getResult().complete(janusMessage);\n\t\t\tbreak;\n\t\tcase \"ack\":\n\t\t\tthis.ack = true;\n\t\t\treturn true;\n\t\tdefault:\n\t\t\tthis.getResult().cancel(true);\n\t\t\tbreak;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n"]}
