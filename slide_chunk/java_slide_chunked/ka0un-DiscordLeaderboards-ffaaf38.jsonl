{"filename": "src/main/java/org/kasun/discordleaderboards/MainManager.java", "chunked_list": ["package org.kasun.discordleaderboards;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.event.HandlerList;\nimport org.kasun.discordleaderboards.Commands.CommandsManager;\nimport org.kasun.discordleaderboards.Configs.ConfigManager;\nimport org.kasun.discordleaderboards.Database.DatabaseManager;\nimport org.kasun.discordleaderboards.DiscordSRV.DiscordSrvManager;\nimport org.kasun.discordleaderboards.Listeners.ListenerManager;", "import org.kasun.discordleaderboards.DiscordSRV.DiscordSrvManager;\nimport org.kasun.discordleaderboards.Listeners.ListenerManager;\nimport org.kasun.discordleaderboards.Schedules.ScheduleManager;\n\npublic class MainManager {\n\n    private final DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n    private ConfigManager configManager;\n    private DatabaseManager databaseManager;\n    private CommandsManager commandsManager;\n    private ListenerManager listenerManager;\n    private DiscordSrvManager discordSrvManager;\n    private ScheduleManager scheduleManager;\n    private UpdateManager updateManager;\n\n    public MainManager() {\n        scheduleManager = new ScheduleManager();\n        configManager = new ConfigManager();\n        databaseManager = new DatabaseManager();\n        commandsManager = new CommandsManager(this);\n        listenerManager = new ListenerManager();\n        updateManager = new UpdateManager();\n\n", "        if (Bukkit.getPluginManager().getPlugin(\"DiscordSRV\") != null){\n            discordSrvManager = new DiscordSrvManager();\n        }\n\n\n    }\n\n    public void reload() {\n        HandlerList.unregisterAll(plugin);\n        Bukkit.getScheduler().cancelTasks(plugin);\n        setScheduleManager(new ScheduleManager());\n        setConfigManager(new ConfigManager());\n        setDatabaseManager(new DatabaseManager());\n        setCommandsManager(new CommandsManager(this));\n        setListenerManager(new ListenerManager());", "        if (Bukkit.getPluginManager().getPlugin(\"DiscordSRV\") != null){\n            setDiscordSrvManager(new DiscordSrvManager());\n        }\n    }\n\n    public ConfigManager getConfigManager() {\n        return configManager;\n    }\n\n    public void setConfigManager(ConfigManager configManager) {\n        this.configManager = configManager;\n    }\n", "    public void setConfigManager(ConfigManager configManager) {\n        this.configManager = configManager;\n    }\n\n    public DatabaseManager getDatabaseManager() {\n        return databaseManager;\n    }\n\n    public void setDatabaseManager(DatabaseManager databaseManager) {\n        this.databaseManager = databaseManager;\n    }\n", "    public void setDatabaseManager(DatabaseManager databaseManager) {\n        this.databaseManager = databaseManager;\n    }\n\n    public CommandsManager getCommandsManager() {\n        return commandsManager;\n    }\n\n    public void setCommandsManager(CommandsManager commandsManager) {\n        this.commandsManager = commandsManager;\n    }\n", "    public void setCommandsManager(CommandsManager commandsManager) {\n        this.commandsManager = commandsManager;\n    }\n\n    public ListenerManager getListenerManager() {\n        return listenerManager;\n    }\n\n    public void setListenerManager(ListenerManager listenerManager) {\n        this.listenerManager = listenerManager;\n    }\n", "    public void setListenerManager(ListenerManager listenerManager) {\n        this.listenerManager = listenerManager;\n    }\n\n    public DiscordSrvManager getDiscordSrvManager() {\n        return discordSrvManager;\n    }\n\n    public void setDiscordSrvManager(DiscordSrvManager discordSrvManager) {\n        this.discordSrvManager = discordSrvManager;\n    }\n", "    public void setDiscordSrvManager(DiscordSrvManager discordSrvManager) {\n        this.discordSrvManager = discordSrvManager;\n    }\n\n    public ScheduleManager getScheduleManager() {\n        return scheduleManager;\n    }\n\n    public void setScheduleManager(ScheduleManager scheduleManager) {\n        this.scheduleManager = scheduleManager;\n    }\n}\n", "    public void setScheduleManager(ScheduleManager scheduleManager) {\n        this.scheduleManager = scheduleManager;\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/UpdateManager.java", "chunked_list": ["package org.kasun.discordleaderboards;\n\nimport org.kasun.discordleaderboards.Configs.ConfigUpdater;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.Configs.MainConfigUpdator;\n\npublic class UpdateManager {\n    public String currentVersion = \"0.1.3\";\n    private String version;\n    final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n\n    public UpdateManager() {\n        MainConfig mainConfig = new MainConfig();\n        version = mainConfig.getPluginVersion();\n        MainConfigUpdator mainConfigUpdator = new MainConfigUpdator(); //updating main config", "        if (version.equals(\"0.0.1\") || version.equals(\"0.1.0\") || version.equals(\"0.1.1\") ) {\n            plugin.getLogger().info(\"Updating Leaderboards...\");\n            ConfigUpdater configUpdater = new ConfigUpdater();\n            mainConfig.setPluginVersion(currentVersion);\n            mainConfig.saveConfig();\n            plugin.getLogger().info(\"Leaderboards updated successfully! do /dl reload to reload the plugin\");\n        }\n    }\n\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordLeaderboards.java", "chunked_list": ["package org.kasun.discordleaderboards;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.kasun.discordleaderboards.Utils.*;\n\n\n\npublic final class DiscordLeaderboards extends JavaPlugin {\n\n    private static DiscordLeaderboards instance;\n\n    @Override", "\npublic final class DiscordLeaderboards extends JavaPlugin {\n\n    private static DiscordLeaderboards instance;\n\n    @Override\n    public void onEnable() {\n        instance = this;\n        int pluginId = 18497;\n        Metrics metrics = new Metrics(this, pluginId);\n        StartMessage.sendStartMessage();\n        MainManager mainManager = new MainManager();\n    }\n\n    @Override", "    public void onDisable() {\n        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"Plugin ShutDown\");\n    }\n\n    public static DiscordLeaderboards getInstance() {\n        return instance;\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Database/UserData.java", "chunked_list": ["package org.kasun.discordleaderboards.Database;\n\nimport me.clip.placeholderapi.PlaceholderAPI;\nimport org.bukkit.OfflinePlayer;\nimport org.bukkit.entity.Player;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\nimport org.kasun.discordleaderboards.Utils.PlayerUtils;\nimport org.kasun.discordleaderboards.Utils.SqlUtils;\n", "import org.kasun.discordleaderboards.Utils.SqlUtils;\n\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\npublic class UserData {\n    private final MainConfig mainConfig = new MainConfig();\n    private final Database database = new Database();\n    private Player player;\n    private OfflinePlayer offlinePlayer;\n    private String placeholder;\n    private String username;\n    private String uuid;\n    private double value;\n    String placeholderColumnName;\n\n\n    //constructers\n    public UserData() {}\n    public UserData(Player player, String placeholder) {\n        this.player = player;\n        this.placeholder = placeholder;\n        placeholderColumnName = placeholder.substring(1, placeholder.length() - 1);\n        uuid = player.getUniqueId().toString();", "        try{\n            value = Double.parseDouble(PlaceholderAPI.setPlaceholders(player, placeholder));\n        }catch (NumberFormatException e){\n            value  = 0.0;\n        }\n        username = player.getName();\n    }\n    public UserData(OfflinePlayer offlinePlayer, String placeholder) {\n        this.offlinePlayer = offlinePlayer;\n        this.placeholder = placeholder;\n        placeholderColumnName = placeholder.substring(1, placeholder.length() - 1);\n        uuid = offlinePlayer.getUniqueId().toString();", "        try{\n            value = Double.parseDouble(PlaceholderAPI.setPlaceholders(offlinePlayer, placeholder));\n        }catch (NumberFormatException e){\n            value  = 0.0;\n        }\n        username = offlinePlayer.getName();\n    }\n\n    //One Player One Placeholder\n    public void addToDatabase(){\n        CompletableFuture.runAsync(() -> {\n            SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);\n        });\n    }\n\n    //getters and setters", "    public void addToDatabase(){\n        CompletableFuture.runAsync(() -> {\n            SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);\n        });\n    }\n\n    //getters and setters\n    public String getUserName(){\n        if (player != null){\n            username = player.getName();\n        } else if (offlinePlayer != null) {\n            username = offlinePlayer.getName();\n        }\n        return username;\n    }\n", "        if (player != null){\n            username = player.getName();\n        } else if (offlinePlayer != null) {\n            username = offlinePlayer.getName();\n        }\n        return username;\n    }\n\n    public String getUuid(){\n        if (player != null){\n            uuid = player.getUniqueId().toString();", "    public String getUuid(){\n        if (player != null){\n            uuid = player.getUniqueId().toString();\n        } else if (offlinePlayer != null) {\n            uuid = offlinePlayer.getUniqueId().toString();\n        }\n        return uuid;\n    }\n\n    public double getValue(){\n        if (player != null){\n            value = Double.parseDouble(PlaceholderAPI.setPlaceholders(player, placeholder));", "    public double getValue(){\n        if (player != null){\n            value = Double.parseDouble(PlaceholderAPI.setPlaceholders(player, placeholder));\n        } else if (offlinePlayer != null) {\n            value = Double.parseDouble(PlaceholderAPI.setPlaceholders(offlinePlayer, placeholder));\n        }\n        return value;\n    }\n\n    //One Player All Placeholders\n    public void addUserDataToDBAllPlaceholders(Player player){\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboardnamelist = mainConfig.getLeaderboardsList();", "    public void addUserDataToDBAllPlaceholders(Player player){\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboardnamelist = mainConfig.getLeaderboardsList();\n        for (String lbname : leaderboardnamelist){\n            Leaderboard leaderboard = new Leaderboard(lbname);\n            UserData userData = new UserData(player, leaderboard.getConfig().getPlaceholder());\n            userData.addToDatabase();\n        }\n    }\n    //One Player All Placeholders\n    public void addUserDataToDBAllPlaceholders(OfflinePlayer offlinePlayer){\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboardnamelist = mainConfig.getLeaderboardsList();", "    public void addUserDataToDBAllPlaceholders(OfflinePlayer offlinePlayer){\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboardnamelist = mainConfig.getLeaderboardsList();\n        for (String lbname : leaderboardnamelist){\n            Leaderboard leaderboard = new Leaderboard(lbname);\n            String valuestring = PlaceholderAPI.setPlaceholders(offlinePlayer, leaderboard.getConfig().getPlaceholder());\n            if (valuestring != null && valuestring != \"\"){\n                UserData userData = new UserData(offlinePlayer, leaderboard.getConfig().getPlaceholder());\n                userData.addToDatabase();\n            }\n        }\n    }\n\n    //All Players All Placeholders", "    public void addUserDataToDBAllPlayersAllPlaceholders(){\n        List<OfflinePlayer> players = PlayerUtils.getAllPlayers();\n        for (OfflinePlayer player : players) {\n            if (player != null){\n                addUserDataToDBAllPlaceholders(player);\n            }\n        }\n\n    }\n\n    //All Players One Placeholder (Dont use Void Constructer for this METHODE)", "    public void addUserDataToDBAllPlayersThisPlaceholder(){\n        List<OfflinePlayer> players = PlayerUtils.getAllPlayers();\n        for (OfflinePlayer player : players) {\n            if (player != null){\n                addToDatabase();\n            }\n        }\n\n    }\n\n    public String getPlaceholder() {\n        return placeholder;\n    }\n\n}\n", "    public String getPlaceholder() {\n        return placeholder;\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Database/DatabaseManager.java", "chunked_list": ["package org.kasun.discordleaderboards.Database;\n\npublic class DatabaseManager {\n\n    public DatabaseManager() {\n        Database database = new Database();\n        database.initializeDatabase();\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Database/Database.java", "chunked_list": ["package org.kasun.discordleaderboards.Database;\n\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\n\n\nimport java.sql.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;", "import java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\npublic class Database {\n    MainConfig mainConfig = new MainConfig();\n    String h2url;\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n\n    public Connection getConnection() {\n        Connection connection = null;\n        h2url = \"jdbc:h2:file:\" + plugin.getDataFolder().getAbsolutePath() + \"/database/database\";\n", "    public Connection getConnection() {\n        Connection connection = null;\n        h2url = \"jdbc:h2:file:\" + plugin.getDataFolder().getAbsolutePath() + \"/database/database\";\n\n        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")) {\n            try {\n                org.h2.Driver driver = new org.h2.Driver();\n                Properties properties = new Properties();\n                connection = driver.connect(h2url, properties);\n            } catch (SQLException e) {\n                plugin.getLogger().severe(\"Failed to Connect H2 Database! [code: 07]\");\n                e.printStackTrace();\n            }", "        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n            String address = mainConfig.getMysqlAddress();\n            String database = mainConfig.getMysqlDatabase();\n            String username = mainConfig.getMysqlUsername();\n            String password = mainConfig.getMysqlPassword();\n\n            try {\n                com.mysql.cj.jdbc.Driver driver = new com.mysql.cj.jdbc.Driver();\n                Properties properties = new Properties();\n                properties.setProperty(\"user\", username);\n                properties.setProperty(\"password\", password);\n                connection = driver.connect(\"jdbc:mysql://\" + address + \"/\" + database, properties);\n            } catch (SQLException e) {\n                plugin.getLogger().severe(\"Failed to Connect MySQL Database! [code: 31]\");\n                e.printStackTrace();\n            }\n        }\n\n        return connection;\n    }\n\n\n", "    /*public Connection getConnection() {\n        Connection connection = null;\n        h2url = \"jdbc:h2:file:\" + plugin.getDataFolder().getAbsolutePath() + \"/database/database\";\n\n        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")) {\n            try {\n                Class.forName(\"org.h2.Driver\");\n                connection = DriverManager.getConnection(h2url);\n            } catch (ClassNotFoundException e) {\n                plugin.getLogger().severe(\"H2 Driver Not Found! [code: 06]\");\n                e.printStackTrace();\n            } catch (SQLException e) {\n                plugin.getLogger().severe(\"Failed to Connect H2 Database! [code: 07]\");\n                e.printStackTrace();\n            }", "        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n            String address = mainConfig.getMysqlAddress();\n            String database = mainConfig.getMysqlDatabase();\n            String username = mainConfig.getMysqlUsername();\n            String password = mainConfig.getMysqlPassword();\n\n            try {\n                Class.forName(\"com.mysql.cj.jdbc.Driver\");\n                connection = DriverManager.getConnection(\"jdbc:mysql://\" + address + \"/\" + database, username, password);\n            } catch (ClassNotFoundException e) {\n                plugin.getLogger().severe(\"MySQL Driver Not Found! [code: 30]\");\n                e.printStackTrace();\n            } catch (SQLException e) {\n                plugin.getLogger().severe(\"Failed to Connect MySQL Database! [code: 31]\");\n                e.printStackTrace();\n            }\n        }\n\n        return connection;\n    }*/\n", "    /*public Connection getConnection() {\n        Connection connection = null;\n        h2url = \"jdbc:h2:file:\" + plugin.getDataFolder().getAbsolutePath() + \"/database/database\";\n\n        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n\n            try {\n                Class.forName(\"org.h2.Driver\");\n                connection = DriverManager.getConnection(h2url);\n            } catch (ClassNotFoundException e) {\n                plugin.getLogger().severe(\"Database Driver Not Found ! [code : 06]\");\n            } catch (SQLException e) {\n                plugin.getLogger().severe(\"Failed to Connect H2 Database ! [code : 07]\");\n            }\n\n", "        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n\n            String adderss = mainConfig.getMysqlAddress();\n            String database = mainConfig.getMysqlDatabase();\n            String username = mainConfig.getMysqlUsername();\n            String password = mainConfig.getMysqlPassword();\n\n            try {\n                Class.forName(\"com.mysql.cj.jdbc.Driver\");\n                connection = DriverManager.getConnection(\"jdbc:mysql://\" + adderss + \"/\" + database, username, password);\n            } catch (ClassNotFoundException e) {\n                plugin.getLogger().severe(\"MySql Driver Not Found ! [code : 30]\");\n                e.printStackTrace();\n            } catch (SQLException e) {\n                plugin.getLogger().severe(\"Failed to Connect Mysql Database ! [code : 31]\");\n                e.printStackTrace();\n            }\n\n        }\n\n        return connection;\n    }\n\n     */\n", "    public void initializeDatabase() {\n\n        String largetextsqltype = \"CLOB\";\n        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n            largetextsqltype = \"CLOB\";\n        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n            largetextsqltype = \"LONGTEXT\";\n        }\n\n        PreparedStatement preparedStatement;\n        try {\n            preparedStatement = getConnection().prepareStatement(\"CREATE TABLE IF NOT EXISTS UserData (\" +\n                    \"  PlayerUUID varchar(255) PRIMARY KEY,\" +\n                    \"  PlayerName varchar(255)\" +\n                    \");\");\n            preparedStatement.execute();\n            preparedStatement.close();\n            preparedStatement = getConnection().prepareStatement(\"CREATE TABLE IF NOT EXISTS Schedule (\" +\n                    \"  Leaderboard varchar(255) PRIMARY KEY,\" +\n                    \"  LastSent TIMESTAMP\" +\n                    \");\");\n            preparedStatement.execute();\n            preparedStatement.close();\n            preparedStatement = getConnection().prepareStatement(\"CREATE TABLE IF NOT EXISTS LiveCache (\" +\n                    \"  Leaderboard varchar(255) PRIMARY KEY,\" +\n                    \"  Cache \" + largetextsqltype +\n                    \");\");\n            preparedStatement.execute();\n            preparedStatement.close();\n\n        } catch (SQLException ex) {\n            plugin.getLogger().severe(\"Database Preparation Error Detected! [code : 08]\");\n            ex.printStackTrace();\n        }\n    }\n\n}\n", "        try {\n            preparedStatement = getConnection().prepareStatement(\"CREATE TABLE IF NOT EXISTS UserData (\" +\n                    \"  PlayerUUID varchar(255) PRIMARY KEY,\" +\n                    \"  PlayerName varchar(255)\" +\n                    \");\");\n            preparedStatement.execute();\n            preparedStatement.close();\n            preparedStatement = getConnection().prepareStatement(\"CREATE TABLE IF NOT EXISTS Schedule (\" +\n                    \"  Leaderboard varchar(255) PRIMARY KEY,\" +\n                    \"  LastSent TIMESTAMP\" +\n                    \");\");\n            preparedStatement.execute();\n            preparedStatement.close();\n            preparedStatement = getConnection().prepareStatement(\"CREATE TABLE IF NOT EXISTS LiveCache (\" +\n                    \"  Leaderboard varchar(255) PRIMARY KEY,\" +\n                    \"  Cache \" + largetextsqltype +\n                    \");\");\n            preparedStatement.execute();\n            preparedStatement.close();\n\n        } catch (SQLException ex) {\n            plugin.getLogger().severe(\"Database Preparation Error Detected! [code : 08]\");\n            ex.printStackTrace();\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Database/Cache.java", "chunked_list": ["package org.kasun.discordleaderboards.Database;\n\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\nimport org.kasun.discordleaderboards.Utils.SqlUtils;\n\npublic class Cache {\n    private final Leaderboard leaderboard;\n    private final String cache;\n\n    public Cache(Leaderboard leaderboard) {\n        this.leaderboard = leaderboard;\n        cache = leaderboard.toString();\n    }\n", "    public void setCache(){\n        String leaderboardname = leaderboard.getName();\n        SqlUtils.setCache(leaderboardname, cache);\n    }\n\n    public String getCache(){\n        String leaderboardname = leaderboard.getName();\n        return SqlUtils.getCache(leaderboardname);\n    }\n\n    public boolean isDiffernt(){\n        String cache = getCache();", "    public boolean isDiffernt(){\n        String cache = getCache();\n        if (cache == null) {\n            return true; // If cache is null, then it's different\n        }\n        return !this.cache.equals(cache);\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Schedules/Schedule.java", "chunked_list": ["package org.kasun.discordleaderboards.Schedules;\n\nimport org.kasun.discordleaderboards.Database.Cache;\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\nimport org.kasun.discordleaderboards.Utils.SqlUtils;\nimport org.kasun.discordleaderboards.Utils.TimeUtils;\n\nimport java.sql.Timestamp;\n\npublic class Schedule {\n    private final String delay;\n    private final Leaderboard leaderboard;\n    private boolean isalredysent;\n\n    private final long SECSFORHOUR = 3600;\n    private final long SECSFORDAY = 86400;\n    private final long SECSFORWEEK = 604800;\n    private final long SECSSFORMONTH = 2629746;\n\n    public Schedule(Leaderboard leaderboard) {\n        this.leaderboard = leaderboard;\n        delay = leaderboard.getConfig().getDelay();\n    }\n", "\npublic class Schedule {\n    private final String delay;\n    private final Leaderboard leaderboard;\n    private boolean isalredysent;\n\n    private final long SECSFORHOUR = 3600;\n    private final long SECSFORDAY = 86400;\n    private final long SECSFORWEEK = 604800;\n    private final long SECSSFORMONTH = 2629746;\n\n    public Schedule(Leaderboard leaderboard) {\n        this.leaderboard = leaderboard;\n        delay = leaderboard.getConfig().getDelay();\n    }\n", "    public void run() {\n\n        if (isAlredySent()){\n\n            Timestamp currentTime = TimeUtils.getCurrentTimeStamp();\n            Timestamp lastsent = getLastSent();\n\n            switch (delay.toLowerCase()){\n                case \"live\":\n                    Cache cache = new Cache(leaderboard);\n                    if (cache.isDiffernt()){\n                        leaderboard.send();\n                        cache.setCache();\n                    }\n                    break;\n                case \"hourly\":", "                    if (cache.isDiffernt()){\n                        leaderboard.send();\n                        cache.setCache();\n                    }\n                    break;\n                case \"hourly\":\n                    if (TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){\n                        leaderboard.send();\n                        setLastSent();\n                        deleteDataIfNeeded();\n                    }\n                    break;\n                case \"daily\":", "                    if (TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORDAY){\n                        leaderboard.send();\n                        setLastSent();\n                        deleteDataIfNeeded();\n                    }\n                    break;\n                case \"weekly\":\n                    if (TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORWEEK){\n                        leaderboard.send();\n                        setLastSent();\n                        deleteDataIfNeeded();\n                    }\n                    break;\n                case \"monthly\":", "                    if (TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSSFORMONTH){\n                        leaderboard.send();\n                        setLastSent();\n                        deleteDataIfNeeded();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }else {\n            leaderboard.send();\n            setLastSent();\n        }\n    }\n", "    public void setLastSent(){\n        String leaderboardname = leaderboard.getName();\n        Timestamp currenttimestamp = TimeUtils.getCurrentTimeStamp();\n        SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);\n    }\n\n    public Timestamp getLastSent(){\n        String leaderboardname = leaderboard.getName();\n        Timestamp lastsent = SqlUtils.getScheduleLastSent(leaderboardname);\n        return lastsent;\n    }\n", "    public boolean isAlredySent(){\n        String leaderboardname = leaderboard.getName();\n        isalredysent = SqlUtils.isScheduleAlredySent(leaderboardname);\n        return isalredysent;\n    }\n\n    public void deleteDataIfNeeded(){\n        boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();\n        String ColumnName = leaderboard.getConfig().getPlaceholder().substring(1, leaderboard.getConfig().getPlaceholder().length() - 1);\n        String tablename = \"UserData\";\n        if (isrefreshonsent){\n            SqlUtils.deleteAllValues(tablename, ColumnName);\n        }\n    }\n}\n", "        if (isrefreshonsent){\n            SqlUtils.deleteAllValues(tablename, ColumnName);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Schedules/ScheduleManager.java", "chunked_list": ["package org.kasun.discordleaderboards.Schedules;\n\n\n\nimport org.bukkit.scheduler.BukkitRunnable;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\n\nimport java.util.List;", "\nimport java.util.List;\n\npublic class ScheduleManager {\n    public ScheduleManager() {\n        MainConfig mainConfig = new MainConfig();\n        if (!mainConfig.isFirstTime()){\n            int scheduleDelay = mainConfig.getScheduleDelayMins();\n            DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n            new BukkitRunnable() {\n                @Override", "                public void run() {\n                    // This code will run every x minutes\n                    List<String> itemList = mainConfig.getLeaderboardsList();\n\n                    for (String leaderboardname : itemList) {\n                        Leaderboard leaderboard = new Leaderboard(leaderboardname);\n                        Schedule schedule = new Schedule(leaderboard);\n                        schedule.run();\n                    }\n                }\n            }.runTaskTimerAsynchronously(plugin, 0L, 20L * 60 * scheduleDelay);\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Commands/DLCommand.java", "chunked_list": ["package org.kasun.discordleaderboards.Commands;\n\nimport me.clip.placeholderapi.PlaceholderAPI;\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.bukkit.OfflinePlayer;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.command.TabExecutor;\nimport org.bukkit.entity.Player;", "import org.bukkit.command.TabExecutor;\nimport org.bukkit.entity.Player;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.Database.UserData;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\nimport org.kasun.discordleaderboards.Leaderboard.LeaderboardConfig;\nimport org.kasun.discordleaderboards.Utils.DiscordWebhook;\nimport org.kasun.discordleaderboards.Utils.PlayerUtils;\n", "import org.kasun.discordleaderboards.Utils.PlayerUtils;\n\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.CompletableFuture;\n\npublic class DLCommand implements TabExecutor {\n\n    private final CommandsManager commandsManager;\n\n    public DLCommand(CommandsManager commandsManager) {\n        this.commandsManager = commandsManager;\n    }\n\n    private final DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n\n    @Override", "\npublic class DLCommand implements TabExecutor {\n\n    private final CommandsManager commandsManager;\n\n    public DLCommand(CommandsManager commandsManager) {\n        this.commandsManager = commandsManager;\n    }\n\n    private final DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n\n    @Override", "    public boolean onCommand(CommandSender sender, Command cmd, String label, String[] args) {\n        if (args.length == 0) {\n            return true;\n        }\n        //Webhook Test Command\n        if (args[0].equalsIgnoreCase(\"testwebhook\")) {\n            if (!sender.hasPermission(\"dl.testwebhook\") && !sender.hasPermission(\"dl.admin\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.testwebhook], [dl.admin]\");\n                return true;\n            }\n            String url = (String) plugin.getConfig().get(\"webhook-url\");\n            DiscordWebhook w = new DiscordWebhook(url);\n            DiscordWebhook.EmbedObject embed = new DiscordWebhook.EmbedObject();", "            if (url == null || url.equalsIgnoreCase(\"-\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Webhook Url not Configured\");\n                return true;\n            }\n            embed.setTitle(\"Dleaderboards\");\n            embed.setDescription(\"Your Webhook is Working\");\n            w.addEmbed(embed);\n            sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"Sending Webhook Message....\");\n            try {\n                w.execute();\n            } catch (FileNotFoundException e) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Invalid Webhook Url [code : 04]\");\n            } catch (IOException ee) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"embed not ready yet, internal plugin issue pleace contact plugin developer [code : 05]\");\n            }\n        }\n        //Force Leaderboard Send", "            try {\n                w.execute();\n            } catch (FileNotFoundException e) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Invalid Webhook Url [code : 04]\");\n            } catch (IOException ee) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"embed not ready yet, internal plugin issue pleace contact plugin developer [code : 05]\");\n            }\n        }\n        //Force Leaderboard Send\n        if (args[0].equalsIgnoreCase(\"forcesend\")) {\n            if (!sender.hasPermission(\"dl.forcesend\") && !sender.hasPermission(\"dl.admin\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.forcesend], [dl.admin]\");\n                return true;\n            }", "        if (args[0].equalsIgnoreCase(\"forcesend\")) {\n            if (!sender.hasPermission(\"dl.forcesend\") && !sender.hasPermission(\"dl.admin\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.forcesend], [dl.admin]\");\n                return true;\n            }\n            if (args.length != 2) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Wrong Command Usage !\");\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"/dl forcesend leaderboard\");\n                return true;\n            }\n            CompletableFuture.runAsync(() -> {\n                Leaderboard leaderboard = new Leaderboard(args[1]);\n                leaderboard.send();\n            });\n            sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GREEN + \"Leaderboard Sent!\");\n        }\n        //Create Command", "        if (args[0].equalsIgnoreCase(\"create\")) {\n            if (!(sender instanceof Player)) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"You cant use this command here\");\n                return true;\n            }\n            Player p = (Player) sender;\n            if (args.length != 5) {\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Wrong Command Usage !\");\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"/dl create name 5 %placeholder% Daily\");\n            }\n            //name top placeholder delay", "            if (!p.hasPermission(\"dl.create\") && !p.hasPermission(\"dl.admin\")) {\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.create], [dl.admin]\");\n                return true;\n            }\n            try {\n                Double.parseDouble(PlaceholderAPI.setPlaceholders(p, args[3]));\n                new Leaderboard(args[1], Integer.parseInt(args[2]), args[3], Leaderboard.WebhookDelay.valueOf(args[4]));\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GREEN + \"Starting Leaderboard Setup!\");\n                plugin.reloadConfig();\n                UserData userData = new UserData(p, args[3]);\n                userData.addToDatabase();\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.YELLOW + \"Starting to Sync Offline Player Data... Please Wait!\");\n\n                Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {\n                    userData.addUserDataToDBAllPlayersThisPlaceholder();\n                    Bukkit.getScheduler().runTask(plugin, () -> {\n                        p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.YELLOW + \"Synchronization Complete !\");\n                        p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GREEN + \"Leaderboard Created!\");\n                        p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"you can change the settings from plugins\\\\DiscordLeaderboards\\\\leaderboard\\\\\" + args[1] + \".yml\");\n                    });\n                });\n\n\n                //getting random offline player\n                List<OfflinePlayer> players = PlayerUtils.getAllPlayers();\n                players.remove(p);\n                Random random = new Random();\n                int randomIndex = random.nextInt(players.size());\n                OfflinePlayer randomPlayer = players.get(randomIndex);\n\n                //checking placeholder if they supports offline players", "                try {\n                    Double.parseDouble(PlaceholderAPI.setPlaceholders(randomPlayer, args[3]));\n                } catch (NumberFormatException ex) {\n                    p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GOLD + \"[Warning!] \" + args[3] + \" may not support offline players. [code : 17]\");\n                }\n\n            } catch (NumberFormatException e) {\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Placeholder \" + args[3] + \" Unsupported, Expansion Not Installed or Doesn't output Number value\");\n            }\n        }\n        //View Command", "        if (args[0].equalsIgnoreCase(\"view\")) {\n            if (!sender.hasPermission(\"dl.view\") && !sender.hasPermission(\"dl.admin\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.view], [dl.admin]\");\n                return true;\n            }\n            if (args.length != 2) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Wrong Command Usage !\");\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GRAY + \"/dl view leaderboard\");\n                return true;\n            }\n            CompletableFuture.runAsync(() -> {\n                Leaderboard leaderboard = new Leaderboard(args[1]);\n                String leaderboardstring = leaderboard.toString();\n\n                sender.sendMessage(ChatColor.GRAY + leaderboardstring);\n            });\n        }\n        //Sync All Players", "        if (args[0].equalsIgnoreCase(\"syncall\")) {\n            if (!(sender instanceof Player)) {\n                plugin.getLogger().info(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"you cant use that command here.\");\n                return true;\n            }\n            Player p = (Player) sender;\n\n            if (!p.hasPermission(\"dl.syncall\") && !p.hasPermission(\"dl.admin\")) {\n                p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.syncall], [dl.admin]\");\n                return true;\n            }\n\n            p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.YELLOW + \"Synchronization Starting...\");\n            UserData userData = new UserData();\n            Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {\n                userData.addUserDataToDBAllPlayersAllPlaceholders();\n                Bukkit.getScheduler().runTask(plugin, () -> {\n                    p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.YELLOW + \"Synchronization Complete !\");\n                });\n            });\n\n            //getting random offline player\n            List<OfflinePlayer> players = PlayerUtils.getAllPlayers();\n            players.remove(p);\n            Random random = new Random();\n            int randomIndex = random.nextInt(players.size());\n            OfflinePlayer randomPlayer = players.get(randomIndex);\n\n            //checking placeholders if they supports offline players\n            MainConfig mainConfig = new MainConfig();\n            List<String> lblist = mainConfig.getLeaderboardsList();", "            for (String lbname : lblist) {\n                LeaderboardConfig leaderboardConfig = new LeaderboardConfig(lbname);\n                String ph = leaderboardConfig.getPlaceholder();\n                try {\n                    Double.parseDouble(PlaceholderAPI.setPlaceholders(randomPlayer, ph));\n                } catch (NumberFormatException ex) {\n                    p.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GOLD + \"[WARNING!] \" + ph + \" may not support offline players. [code : 17]\");\n                }\n            }\n        }\n        if (args[0].equalsIgnoreCase(\"reload\")) {", "        if (args[0].equalsIgnoreCase(\"reload\")) {\n            if (!sender.hasPermission(\"dl.reload\") && !sender.hasPermission(\"dl.admin\")) {\n                sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"No Permission ! [dl.reload], [dl.admin]\");\n                return true;\n            }\n            commandsManager.getMainManager().reload();\n            sender.sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.GREEN + \"Reloaded!\");\n        }\n        return true;\n    }\n\n    @Override\n    public List<String> onTabComplete(CommandSender sender, Command cmd, String label, String[] args) {", "        if (args.length == 1) {\n            List<String> arguments = new ArrayList<>();\n            arguments.add(\"testwebhook\");\n            arguments.add(\"forcesend\");\n            arguments.add(\"create\");\n            arguments.add(\"view\");\n            arguments.add(\"syncall\");\n            arguments.add(\"reload\");\n            return arguments;\n        }\n        if (args[0].equalsIgnoreCase(\"forcesend\")) {", "        if (args[0].equalsIgnoreCase(\"forcesend\")) {\n            if (args.length == 2) {\n                MainConfig mainConfig = new MainConfig();\n                return mainConfig.getLeaderboardsList();\n            }\n        }\n        if (args[0].equalsIgnoreCase(\"create\")) {\n            if (args.length == 2) {\n                List<String> arguments = new ArrayList<>();\n                arguments.add(\"name\");\n                return arguments;\n            }", "            if (args.length == 3) {\n                List<String> arguments = new ArrayList<>();\n                arguments.add(\"3\");\n                arguments.add(\"5\");\n                arguments.add(\"10\");\n                arguments.add(\"15\");\n                arguments.add(\"20\");\n                return arguments;\n            }\n            if (args.length == 4) {\n                List<String> arguments = new ArrayList<>();\n                arguments.add(\"%placeholder%\");\n                return arguments;\n            }", "            if (args.length == 4) {\n                List<String> arguments = new ArrayList<>();\n                arguments.add(\"%placeholder%\");\n                return arguments;\n            }\n            if (args.length == 5) {\n                List<String> arguments = new ArrayList<>();\n                arguments.add(\"None\");\n                arguments.add(\"Live\");\n                arguments.add(\"Hourly\");\n                arguments.add(\"Daily\");\n                arguments.add(\"Weekly\");\n                arguments.add(\"Monthly\");\n                return arguments;\n            }\n        }", "        if (args[0].equalsIgnoreCase(\"view\")) {\n            if (args.length == 2) {\n                MainConfig mainConfig = new MainConfig();\n                return mainConfig.getLeaderboardsList();\n            }\n        }\n        if (args[0].equalsIgnoreCase(\"reload\")) {\n            if (args.length == 2) {\n                return null;\n            }\n        }\n        return null;\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Commands/CommandsManager.java", "chunked_list": ["package org.kasun.discordleaderboards.Commands;\n\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.MainManager;\n\npublic class CommandsManager {\n\n    private final MainManager mainManager;\n\n    public CommandsManager(MainManager mainManager) {\n        this.mainManager = mainManager;\n        DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n        plugin.getCommand(\"dl\").setExecutor(new DLCommand(this));\n    }\n", "    public MainManager getMainManager() {\n        return mainManager;\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Leaderboard/LeaderboardConfig.java", "chunked_list": ["package org.kasun.discordleaderboards.Leaderboard;\n\nimport org.bukkit.configuration.file.FileConfiguration;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Configs.CustomConfig;\n\n\nimport java.util.ArrayList;\nimport java.util.List;", "import java.util.ArrayList;\nimport java.util.List;\n\npublic class LeaderboardConfig {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    private String name;\n    private FileConfiguration config;\n    private String placeholder;\n    private int top;\n    private String delay;\n    private boolean refreshOnSent;\n\n    private String metric;\n    private boolean higherisbetter;\n    private int floatingpoints;\n    private String webhookurl;\n    private String webhookAvatarUrl;\n    private String webhookUserName;\n    private String embedTitle;\n    private List<String> embedDescription;\n    private String embedUrl;\n    private String embedColour;\n    private String embedFooter;\n    private String embedImage;\n    private String embedThumbnail;\n    private String leaderboardversion;\n    private final CustomConfig customConfig;\n\n    //Constructer for load exciting leaderboardConfig\n    public LeaderboardConfig(String name) {\n        this.name = name;\n        customConfig = new CustomConfig(name);\n        config = customConfig.get();\n        load();\n    }\n\n    //Constructer for create new LeaderboardConfig\n    public LeaderboardConfig(String name, String placeholder, int top, String delay) {\n        MainConfig mainConfig = new MainConfig();\n        this.name = name;\n        this.placeholder = placeholder;\n        this.top = top;\n        this.delay = delay;\n        this.refreshOnSent = false;\n        this.metric = \"-\";\n        this.higherisbetter = true;\n        this.floatingpoints = 0;\n        this.webhookurl = \"-\";\n        this.webhookAvatarUrl = \"-\";\n        this.webhookUserName = \"-\";\n        this.embedTitle = \"-\";\n        List<String> description = new ArrayList<>();\n        description.add(\"{toplist}\");\n        this.embedDescription = description;\n        this.embedUrl = \"-\";\n        this.embedColour = \"-\";\n        this.embedFooter = \"-\";\n        this.embedImage = \"-\";\n        this.embedThumbnail = \"-\";\n        this.leaderboardversion = mainConfig.getPluginVersion();\n\n        customConfig = new CustomConfig(name);\n        customConfig.setup();\n        config = customConfig.get();\n        save();\n\n    }\n\n    //save methode", "    public void save() {\n        config.set(\"placeholder\", placeholder);\n        config.set(\"top\", top);\n        config.set(\"delay\", delay);\n        config.set(\"refresh-database-onsent\", refreshOnSent);\n        config.set(\"metric\", metric);\n        config.set(\"higherisbetter\", higherisbetter);\n        config.set(\"floatingpoints\", floatingpoints);\n        config.set(\"webhook-url\", webhookurl);\n        config.set(\"webhook-avatar-url\", webhookAvatarUrl);\n        config.set(\"webhook-user-name\", webhookUserName);\n        config.set(\"embed-title\", embedTitle);\n        config.set(\"embed-description\", embedDescription);\n        config.set(\"embed-url\", embedUrl);\n        config.set(\"embed-colour\", embedColour);\n        config.set(\"embed-footer\", embedFooter);\n        config.set(\"embed-image\", embedImage);\n        config.set(\"embed-thumbnail\", embedThumbnail);\n        config.set(\"leaderboard-version\", leaderboardversion);\n\n        customConfig.save();\n        customConfig.reload();\n    }\n\n\n    //load methode", "    public void load(){\n\n        this.placeholder = config.getString(\"placeholder\");\n        this.top = config.getInt(\"top\");\n        this.delay = config.getString(\"delay\");\n        this.refreshOnSent = config.getBoolean(\"refresh-database-onsent\");\n        this.metric = config.getString(\"metric\");\n        this.higherisbetter = config.getBoolean(\"higherisbetter\");\n        this.floatingpoints = config.getInt(\"floatingpoints\");\n        this.webhookurl = config.getString(\"webhook-url\");\n        this.webhookAvatarUrl = config.getString(\"webhook-avatar-url\");\n        this.webhookUserName = config.getString(\"webhook-user-name\");\n        this.embedTitle = config.getString(\"embed-title\");\n        this.embedDescription = config.getStringList(\"embed-description\");\n        this.embedUrl = config.getString(\"embed-url\");\n        this.embedColour = config.getString(\"embed-colour\");\n        this.embedFooter = config.getString(\"embed-footer\");\n        this.embedImage = config.getString(\"embed-image\");\n        this.embedThumbnail = config.getString(\"embed-thumbnail\");\n        this.leaderboardversion = config.getString(\"leaderboard-version\");\n    }\n\n    //getters and setters\n\n", "    public String getLeaderboardversion() {\n        return leaderboardversion;\n    }\n\n    public void setLeaderboardversion(String leaderboardversion) {\n        this.leaderboardversion = leaderboardversion;\n    }\n\n    public String getMetric() {\n        String output = \"\";\n        if (!metric.equals(null) && !metric.equals(\"-\")){\n            output = metric;\n        }\n        return output;\n    }\n", "    public String getMetric() {\n        String output = \"\";\n        if (!metric.equals(null) && !metric.equals(\"-\")){\n            output = metric;\n        }\n        return output;\n    }\n\n    public void setMetric(String metric) {\n        this.metric = metric;\n    }\n", "    public void setMetric(String metric) {\n        this.metric = metric;\n    }\n\n    public boolean isHigherisbetter() {\n        return higherisbetter;\n    }\n\n    public void setHigherisbetter(boolean higherisbetter) {\n        this.higherisbetter = higherisbetter;\n    }\n", "    public void setHigherisbetter(boolean higherisbetter) {\n        this.higherisbetter = higherisbetter;\n    }\n\n    public int getFloatingpoints() {\n        return floatingpoints;\n    }\n\n    public void setFloatingpoints(int floatingpoints) {\n        this.floatingpoints = floatingpoints;\n    }\n", "    public void setFloatingpoints(int floatingpoints) {\n        this.floatingpoints = floatingpoints;\n    }\n\n    public boolean isRefreshOnSent() {\n        return refreshOnSent;\n    }\n\n    public void setRefreshOnSent(boolean refreshOnSent) {\n        this.refreshOnSent = refreshOnSent;\n    }\n\n    public List<String> getEmbedDescription() {\n        return embedDescription;\n    }\n", "    public void setRefreshOnSent(boolean refreshOnSent) {\n        this.refreshOnSent = refreshOnSent;\n    }\n\n    public List<String> getEmbedDescription() {\n        return embedDescription;\n    }\n\n    public void setEmbedDescription(List<String> embedDescription) {\n        this.embedDescription = embedDescription;\n    }\n", "    public void setEmbedDescription(List<String> embedDescription) {\n        this.embedDescription = embedDescription;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n", "    public void setName(String name) {\n        this.name = name;\n    }\n\n    public FileConfiguration getConfig() {\n        return config;\n    }\n\n    public void setConfig(FileConfiguration config) {\n        this.config = config;\n    }\n", "    public void setConfig(FileConfiguration config) {\n        this.config = config;\n    }\n\n    public String getPlaceholder() {\n        return placeholder;\n    }\n\n    public void setPlaceholder(String placeholder) {\n        this.placeholder = placeholder;\n    }\n", "    public void setPlaceholder(String placeholder) {\n        this.placeholder = placeholder;\n    }\n\n    public int getTop() {\n        return top;\n    }\n\n    public void setTop(int top) {\n        this.top = top;\n    }\n", "    public void setTop(int top) {\n        this.top = top;\n    }\n\n    public String getDelay() {\n        return delay;\n    }\n\n    public void setDelay(String delay) {\n        this.delay = delay;\n    }\n", "    public void setDelay(String delay) {\n        this.delay = delay;\n    }\n\n    public String getWebhookurl() {\n        return webhookurl;\n    }\n\n    public void setWebhookurl(String webhookurl) {\n        this.webhookurl = webhookurl;\n    }\n", "    public void setWebhookurl(String webhookurl) {\n        this.webhookurl = webhookurl;\n    }\n\n    public String getWebhookAvatarUrl() {\n        return webhookAvatarUrl;\n    }\n\n    public void setWebhookAvatarUrl(String webhookAvatarUrl) {\n        this.webhookAvatarUrl = webhookAvatarUrl;\n    }\n", "    public void setWebhookAvatarUrl(String webhookAvatarUrl) {\n        this.webhookAvatarUrl = webhookAvatarUrl;\n    }\n\n    public String getWebhookUserName() {\n        return webhookUserName;\n    }\n\n    public void setWebhookUserName(String webhookUserName) {\n        this.webhookUserName = webhookUserName;\n    }\n", "    public void setWebhookUserName(String webhookUserName) {\n        this.webhookUserName = webhookUserName;\n    }\n\n    public String getEmbedTitle() {\n        return embedTitle;\n    }\n\n    public void setEmbedTitle(String embedTitle) {\n        this.embedTitle = embedTitle;\n    }\n", "    public void setEmbedTitle(String embedTitle) {\n        this.embedTitle = embedTitle;\n    }\n\n    public String getEmbedUrl() {\n        return embedUrl;\n    }\n\n    public void setEmbedUrl(String embedUrl) {\n        this.embedUrl = embedUrl;\n    }\n", "    public void setEmbedUrl(String embedUrl) {\n        this.embedUrl = embedUrl;\n    }\n\n    public String getEmbedColour() {\n        return embedColour;\n    }\n\n    public void setEmbedColour(String embedColour) {\n        this.embedColour = embedColour;\n    }\n", "    public void setEmbedColour(String embedColour) {\n        this.embedColour = embedColour;\n    }\n\n    public String getEmbedFooter() {\n        return embedFooter;\n    }\n\n    public void setEmbedFooter(String embedFooter) {\n        this.embedFooter = embedFooter;\n    }\n", "    public void setEmbedFooter(String embedFooter) {\n        this.embedFooter = embedFooter;\n    }\n\n    public String getEmbedImage() {\n        return embedImage;\n    }\n\n    public void setEmbedImage(String embedImage) {\n        this.embedImage = embedImage;\n    }\n", "    public void setEmbedImage(String embedImage) {\n        this.embedImage = embedImage;\n    }\n\n    public String getEmbedThumbnail() {\n        return embedThumbnail;\n    }\n\n    public void setEmbedThumbnail(String embedThumbnail) {\n        this.embedThumbnail = embedThumbnail;\n    }\n}\n", "    public void setEmbedThumbnail(String embedThumbnail) {\n        this.embedThumbnail = embedThumbnail;\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Leaderboard/TopList.java", "chunked_list": ["package org.kasun.discordleaderboards.Leaderboard;\n\n\nimport org.kasun.discordleaderboards.Utils.SqlUtils;\n\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.text.DecimalFormat;\nimport java.util.Map;", "import java.text.DecimalFormat;\nimport java.util.Map;\n\n\npublic class TopList {\n    private final int top;\n    private final LeaderboardConfig leaderboardConfig;\n    private final String placeholder;\n    private final String leaderboardname;\n    String placeholderColumnName;\n    private int numberOfFloatingPoints;\n\n    public TopList(LeaderboardConfig leaderboardConfig) {\n        this.leaderboardConfig = leaderboardConfig;\n        top = leaderboardConfig.getTop();\n        placeholder = leaderboardConfig.getPlaceholder();\n        leaderboardname = leaderboardConfig.getName();\n        placeholderColumnName = leaderboardConfig.getPlaceholder().substring(1, leaderboardConfig.getPlaceholder().length() - 1);\n        numberOfFloatingPoints = leaderboardConfig.getFloatingpoints();\n    }\n\n    public Map<String, Double> getTopListAsMap() {\n        int top = leaderboardConfig.getTop();\n        return SqlUtils.getTopPlayerMap(placeholderColumnName, top, leaderboardConfig.isHigherisbetter());\n\n    }\n", "    public String getTopListAsString(boolean isWebhookFormat) {\n        Map<String, Double> toplistmap = getTopListAsMap();\n        int maxNameLength = getmaxnamelenght(toplistmap);\n        StringBuilder sb = new StringBuilder();\n        int i = 1;\n        for (Map.Entry<String, Double> entry : toplistmap.entrySet()) {\n            String name = entry.getKey();\n            double score = entry.getValue();\n            int intValue = (int) score;\n\n            String formattedEntry = \"\";", "            if (numberOfFloatingPoints <= 0) {\n                if (isWebhookFormat) {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());\n                }\n            } else {\n                double roundedScore = roundScore(score);\n                if (isWebhookFormat) {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %.\" + numberOfFloatingPoints + \"f%s\\\\u000A\", i++, name, roundedScore, leaderboardConfig.getMetric());\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %.\" + numberOfFloatingPoints + \"f%s\\n\", i++, name, roundedScore, leaderboardConfig.getMetric());\n                }\n            }\n            sb.append(formattedEntry);\n        }\n        String leaderboardString = sb.toString();\n        return leaderboardString;\n    }\n\n", "                if (isWebhookFormat) {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %.\" + numberOfFloatingPoints + \"f%s\\\\u000A\", i++, name, roundedScore, leaderboardConfig.getMetric());\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %.\" + numberOfFloatingPoints + \"f%s\\n\", i++, name, roundedScore, leaderboardConfig.getMetric());\n                }\n            }\n            sb.append(formattedEntry);\n        }\n        String leaderboardString = sb.toString();\n        return leaderboardString;\n    }\n\n", "    public String getTopListAsStringForWebhook() {\n        Map<String, Double> toplistmap = getTopListAsMap();\n        int maxNameLength = getmaxnamelenght(toplistmap);\n        StringBuilder sb = new StringBuilder();\n        int i = 1;\n        for (Map.Entry<String, Double> entry : toplistmap.entrySet()) {\n            String name = entry.getKey();\n            double score = entry.getValue();\n            int intValue = (int) score;\n\n            String formattedEntry = \"\";", "            if (numberOfFloatingPoints <= 0) {\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());\n            } else {\n                double roundedScore = roundScore(score);\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %.\" + numberOfFloatingPoints + \"f%s\\\\u000A\", i++, name, roundedScore, leaderboardConfig.getMetric());\n            }\n            sb.append(formattedEntry);\n        }\n        String leaderboardString = sb.toString();\n        return leaderboardString;\n    }\n", "    public String getTopListAsString() {\n        Map<String, Double> toplistmap = getTopListAsMap();\n        int maxNameLength = getmaxnamelenght(toplistmap);\n        StringBuilder sb = new StringBuilder();\n        int i = 1;\n        for (Map.Entry<String, Double> entry : toplistmap.entrySet()) {\n            System.out.println(\"debug : 1\");\n            String name = entry.getKey();\n            double score = entry.getValue();\n            int intValue = (int) score;\n\n\n            System.out.println(\"debug : 2\");\n\n            String formattedEntry = \"\";", "            if (numberOfFloatingPoints <= 0){\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());\n            }else{\n                double roundedScore = roundScore(score);\n                formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %.\" + numberOfFloatingPoints + \"f%s\\n\", i++, name, roundedScore, leaderboardConfig.getMetric());\n            }\n            System.out.println(\"debug : 3\");\n            sb.append(formattedEntry);\n            System.out.println(\"Debug : \" + numberOfFloatingPoints);\n\n        }\n        String leaderboardString = sb.toString();\n        return leaderboardString;\n    }\n\n    private int getmaxnamelenght(Map<String, Double> toplistmap) {\n        // find the maximum length of the names\n        int maxNameLength = 0;", "        for (String name : toplistmap.keySet()) {\n            if (name.length() > maxNameLength) {\n                maxNameLength = name.length();\n            }\n        }\n        return maxNameLength;\n    }\n\n    private double roundScore(double score) {\n        BigDecimal bd = new BigDecimal(score);\n        bd = bd.setScale(numberOfFloatingPoints, RoundingMode.HALF_UP);\n        return bd.doubleValue();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Leaderboard/Leaderboard.java", "chunked_list": ["package org.kasun.discordleaderboards.Leaderboard;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Utils.DiscordWebhook;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\n\nimport java.awt.*;\nimport java.io.IOException;", "import java.awt.*;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class Leaderboard {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    public enum WebhookDelay {Live, Hourly, Daily, Weekly, Monthly, None}\n    private final LeaderboardConfig leaderboardConfig;\n    private final String name;\n    private final TopList topList;\n\n    //constructer for load leaderboard\n    public Leaderboard(String name) {\n        this.name = name;\n        leaderboardConfig = new LeaderboardConfig(name);\n        topList = new TopList(leaderboardConfig);\n    }\n\n    //constructer for create leaderboard\n    public Leaderboard(String name, int top, String placeholder, WebhookDelay delay){\n        this.name = name;\n\n        MainConfig mainConfig = new MainConfig();\n        List<String> leaderboards = mainConfig.getLeaderboardsList();\n        leaderboards.add(name);\n        mainConfig.setLeaderboardsList(leaderboards);\n        mainConfig.saveConfig();\n\n        leaderboardConfig = new LeaderboardConfig(name, placeholder, top, delay.toString()); //creating LeaderboardConfig\n        topList = new TopList(leaderboardConfig);\n    }\n", "    public String toString(){\n        String placeholder = leaderboardConfig.getPlaceholder();\n        int top = leaderboardConfig.getTop();\n        return topList.getTopListAsString(false);\n    }\n\n    public void send() {\n\n        //getting default values from main config\n        MainConfig mainConfig = new MainConfig();\n\n        String dembedTitle = mainConfig.getDembedTitle();\n        String dwebhookurl = mainConfig.getDwebhookurl();\n        String dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();\n        String dwebhookUserName = mainConfig.getDwebhookUserName();\n        String dembedUrl = mainConfig.getDembedUrl();\n        String dembedColour = mainConfig.getDembedColour();\n        String dembedFooter = mainConfig.getDembedFooter();\n        String dembedImage = mainConfig.getDembedImage();\n        String dembedThumbnail = mainConfig.getDembedThumbnail();\n\n        String dembedDescription = \"Description is Empty !\";\n\n        //getting leaderboard's values from leaderboard config\n        String placeholder = leaderboardConfig.getPlaceholder();\n        int top = leaderboardConfig.getTop();\n        String delay = leaderboardConfig.getDelay();\n        String webhookurl = leaderboardConfig.getWebhookurl();\n        String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();\n        String webhookUserName = leaderboardConfig.getWebhookUserName();\n        String embedTitle = leaderboardConfig.getEmbedTitle();\n        String embedUrl = leaderboardConfig.getEmbedUrl();\n        String embedColour = leaderboardConfig.getEmbedColour();\n        String embedFooter = leaderboardConfig.getEmbedFooter();\n        String embedImage = leaderboardConfig.getEmbedImage();\n        String embedThumbnail = leaderboardConfig.getEmbedThumbnail();\n\n        //checking if leaderboard config values are null, if it is getting default values from main config\n        webhookurl = getOrDefault(webhookurl, dwebhookurl);\n        webhookAvatarUrl = getOrDefault(webhookAvatarUrl, dwebhookAvatarUrl);\n        webhookUserName = getOrDefault(webhookUserName, dwebhookUserName);\n        embedTitle = getOrDefault(embedTitle, dembedTitle);\n        embedUrl = getOrDefault(embedUrl, dembedUrl);\n        embedColour = getOrDefault(embedColour, dembedColour);\n        embedFooter = getOrDefault(embedFooter, dembedFooter);\n        embedImage = getOrDefault(embedImage, dembedImage);\n        embedThumbnail = getOrDefault(embedThumbnail, dembedThumbnail);\n\n        DiscordWebhook webhook = new DiscordWebhook(webhookurl);\n\n        //checking if final values are not null and them to discord webhook", "        if (webhookAvatarUrl != null && !webhookAvatarUrl.equals(\"\") && !webhookAvatarUrl.equals(\"-\")){\n            webhook.setAvatarUrl(webhookAvatarUrl);\n        }\n\n        if (webhookUserName != null && !webhookUserName.equals(\"\") && !webhookUserName.equals(\"-\")){\n            webhook.setUsername(webhookUserName);\n        }\n\n        DiscordWebhook.EmbedObject embed = new DiscordWebhook.EmbedObject();\n\n        if (embedTitle != null && !embedTitle.equals(\"\") && !embedTitle.equals(\"-\")){\n            embed.setTitle(embedTitle);\n        }\n", "        if (embedTitle != null && !embedTitle.equals(\"\") && !embedTitle.equals(\"-\")){\n            embed.setTitle(embedTitle);\n        }\n\n        if (embedUrl != null && !embedUrl.equals(\"\") && !embedUrl.equals(\"-\")){\n            embed.setUrl(embedUrl);\n        }\n\n        if (embedColour != null && !embedColour.equals(\"\") && !embedColour.equals(\"-\")){\n            embed.setColor(Color.decode(embedColour));\n        }\n", "        if (embedColour != null && !embedColour.equals(\"\") && !embedColour.equals(\"-\")){\n            embed.setColor(Color.decode(embedColour));\n        }\n\n        if (embedFooter != null && !embedFooter.equals(\"\") && !embedFooter.equals(\"-\")){\n            embed.setFooter(embedFooter);\n        }\n\n\n        if (embedThumbnail != null && !embedThumbnail.equals(\"\") && !embedThumbnail.equals(\"-\")){\n            embed.setThumbnail(embedThumbnail);\n\n        }\n", "        if (embedThumbnail != null && !embedThumbnail.equals(\"\") && !embedThumbnail.equals(\"-\")){\n            embed.setThumbnail(embedThumbnail);\n\n        }\n\n        if (embedImage != null && !embedImage.equals(\"\") && !embedImage.equals(\"-\")){\n            embed.setImage(embedImage);\n\n        }\n\n        DescriptionGenerator descriptionGenerator = new DescriptionGenerator(this);\n        String description = descriptionGenerator.getDescription(true);\n", "        if (description == null || description.equals(\"\") || dembedDescription.equals(\"-\")) {\n            description = dembedDescription;\n        }\n\n        embed.setDescription(description);\n\n        webhook.addEmbed(embed);\n        try{\n            webhook.execute();\n        }catch (IOException e){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Webhook issue detected, Check You Config Files  [code : 24]\");\n            e.printStackTrace();\n        }\n\n    }\n\n    //methode for select default value or leaderboard value\n    private String getOrDefault(String value, String defaultValue) {\n        return (value == null || value.isEmpty() || value.equals(\"-\")) ? defaultValue : value;\n    }\n\n\n    //all Getters", "    public LeaderboardConfig getConfig() {\n        return leaderboardConfig;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public TopList getTopList() {\n        return topList;\n    }\n}\n\n", "    public TopList getTopList() {\n        return topList;\n    }\n}\n\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Leaderboard/DescriptionGenerator.java", "chunked_list": ["package org.kasun.discordleaderboards.Leaderboard;\n\nimport me.clip.placeholderapi.PlaceholderAPI;\nimport org.kasun.discordleaderboards.Utils.TimeUtils;\n\nimport java.math.BigDecimal;\nimport java.math.RoundingMode;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;", "import java.util.List;\nimport java.util.Map;\nimport java.util.regex.Pattern;\nimport java.util.regex.*;\n\npublic class DescriptionGenerator {\n    private final Leaderboard leaderboard;\n    private final List<String> embedDescriptionlist;\n    private final TopList topList;\n    private final long SECSFORHOUR = 3600;\n    private final long SECSFORDAY = 86400;\n    private final long SECSFORWEEK = 604800;\n    private final long SECSSFORMONTH = 2629746;\n    private int numberOfFloatingPoints;\n    private boolean isHigherBetter;\n\n    public DescriptionGenerator(Leaderboard leaderboard) {\n        this.leaderboard = leaderboard;\n        embedDescriptionlist = leaderboard.getConfig().getEmbedDescription();\n        topList = leaderboard.getTopList();\n        numberOfFloatingPoints = leaderboard.getConfig().getFloatingpoints();\n        isHigherBetter = leaderboard.getConfig().isHigherisbetter();\n    }\n\n    public DescriptionGenerator(String leaderboardname) {\n        this.leaderboard = new Leaderboard(leaderboardname);\n        embedDescriptionlist = leaderboard.getConfig().getEmbedDescription();\n        topList = leaderboard.getTopList();\n    }\n", "    public String getDescription(boolean isForWebhook) {\n        String description = String.join(isForWebhook ? \"\\\\u000A\" : \"\\n\", embedDescriptionlist);\n\n        //{toplist} placeholder\n        String replacement1 = \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";\n        if (replacement1.equals(\"``````\") || replacement1 == null) {\n            description = description.replace(\"{toplist}\", \"```Leaderboard is empty!```\");\n        } else {\n            description = description.replace(\"{toplist}\", replacement1);\n        }\n\n        //{top-1-name} {top-1-score} placeholders\n        Map<String, Double> playerScores = topList.getTopListAsMap();\n        Pattern pattern = Pattern.compile(\"\\\\{top-(\\\\d+)-(name|score)\\\\}\");\n        Matcher matcher = pattern.matcher(description);", "        while (matcher.find()) {\n            int position = Integer.parseInt(matcher.group(1));\n            String placeholderType = matcher.group(2);\n\n            Comparator<Map.Entry<String, Double>> scoreComparator;\n            if (isHigherBetter) {\n                scoreComparator = Map.Entry.comparingByValue(Comparator.reverseOrder());\n            } else {\n                scoreComparator = Map.Entry.comparingByValue();\n            }\n\n            Map.Entry<String, Double> entry = playerScores.entrySet().stream()\n                    .sorted(scoreComparator)\n                    .skip(position - 1)\n                    .findFirst()\n                    .orElse(null);\n", "            if (entry != null) {\n                String placeholder = \"{top-\" + position + \"-\" + placeholderType + \"}\";\n                int intValue = entry.getValue().intValue();\n                String replacement = \"\";\n                if (leaderboard.getConfig().getFloatingpoints() > 0){\n                    replacement = placeholderType.equals(\"name\") ? entry.getKey() : String.valueOf(entry.getValue());\n                }else{\n                    replacement = placeholderType.equals(\"name\") ? entry.getKey() : String.valueOf(intValue);\n                }\n                description = description.replace(placeholder, replacement);\n            }\n        }\n\n        //{timestamp-now} placeholder\n        description = description.replace(\"{timestamp-now}\", \"<t:\" + TimeUtils.getCurrentUnixTimestamp() + \":R>\");\n\n        //{timestamp-next} placeholder\n        String delay = leaderboard.getConfig().getDelay();\n        switch (delay.toLowerCase()) {\n            case \"hourly\":\n                description = description.replace(\"{timestamp-next}\", \"<t:\" + (TimeUtils.getCurrentUnixTimestamp() + SECSFORHOUR) + \":R>\");\n                break;\n            case \"daily\":\n                description = description.replace(\"{timestamp-next}\", \"<t:\" + (TimeUtils.getCurrentUnixTimestamp() + SECSFORDAY) + \":R>\");\n                break;\n            case \"weekly\":\n                description = description.replace(\"{timestamp-next}\", \"<t:\" + (TimeUtils.getCurrentUnixTimestamp() + SECSFORWEEK) + \":R>\");\n                break;\n            case \"monthly\":\n                description = description.replace(\"{timestamp-next}\", \"<t:\" + (TimeUtils.getCurrentUnixTimestamp() + SECSSFORMONTH) + \":R>\");\n                break;\n            default:\n                break;\n        }\n\n        //{%papi%} placeholders\n        String patternString = \"\\\\{%(.*?)%\\\\}\";\n        Pattern pattern1 = Pattern.compile(patternString);\n        Matcher matcher1 = pattern1.matcher(description);\n\n        StringBuilder result = new StringBuilder();", "        while (matcher1.find()) {\n            String placeholder = matcher1.group(0);\n            String innerValue = matcher1.group(1);\n            String replacement = PlaceholderAPI.setPlaceholders(null, \"%\" + innerValue + \"%\");\n\n            description = description.replace(placeholder, replacement);\n            result.append(innerValue).append(\", \");\n        }\n\n        return description;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/TimeUtils.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\n\nimport java.sql.Timestamp;\nimport java.time.Instant;\nimport java.util.Date;\n\npublic class TimeUtils {\n    public static Timestamp getCurrentTimeStamp(){\n        Date currentDate = new Date();\n        return new Timestamp(currentDate.getTime());\n    }", "    public static long getTimestampDifference(Timestamp timestamp1, Timestamp timestamp2) {\n        return Math.abs((timestamp2.getTime() - timestamp1.getTime()) / 1000);\n    }\n\n    public static long getCurrentUnixTimestamp() {\n        return Instant.now().getEpochSecond();\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/SqlUtils.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.Database.Database;\nimport org.kasun.discordleaderboards.Leaderboard.LeaderboardConfig;\n\nimport java.io.IOException;\nimport java.io.Reader;", "import java.io.IOException;\nimport java.io.Reader;\nimport java.sql.*;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class SqlUtils {\n    public static void addUserDataToDatabase(String placeholderColumnName, String UUID, String name , double value){\n\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        PreparedStatement preparedStatement;\n", "        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n\n            try {\n                preparedStatement = database.getConnection().prepareStatement(\"ALTER TABLE UserData ADD COLUMN IF NOT EXISTS \" + placeholderColumnName + \" DOUBLE;\");\n                preparedStatement.execute();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while adding UserData to database [code : 09]\");\n                ex.printStackTrace();\n\n            }\n", "            try {\n                preparedStatement = database.getConnection().prepareStatement(\"MERGE INTO UserData u USING (SELECT '\" + UUID + \"' AS PlayerUUID, '\" + name + \"' AS PlayerName, \" + value + \" AS \" + placeholderColumnName + \" FROM DUAL) data ON u.PlayerUUID = data.PlayerUUID WHEN MATCHED THEN UPDATE SET u.\" + placeholderColumnName + \" = data.\" + placeholderColumnName + \" WHEN NOT MATCHED THEN INSERT (PlayerUUID, PlayerName, \" + placeholderColumnName + \") VALUES (data.PlayerUUID, data.PlayerName, data.\" + placeholderColumnName + \");\");\n                preparedStatement.execute();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while adding UserData to database [code : 09.1]\");\n                ex.printStackTrace();\n\n            }\n\n        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n", "        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n\n            try {\n                Connection connection = database.getConnection();\n                Statement statement = connection.createStatement();\n\n                // Check if the column exists in the table\n                ResultSet resultSet = statement.executeQuery(\"SELECT * FROM information_schema.COLUMNS WHERE TABLE_NAME = 'UserData' AND COLUMN_NAME = '\" + placeholderColumnName + \"'\");\n                if (!resultSet.next()) {\n                    // Column does not exist, so add it\n                    statement.executeUpdate(\"ALTER TABLE UserData ADD COLUMN \" + placeholderColumnName + \" DOUBLE\");\n                }\n\n                resultSet.close();\n                statement.close();\n                connection.close();\n\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while adding UserData to database [code : 09.2]\");\n                ex.printStackTrace();\n\n            }\n", "                if (!resultSet.next()) {\n                    // Column does not exist, so add it\n                    statement.executeUpdate(\"ALTER TABLE UserData ADD COLUMN \" + placeholderColumnName + \" DOUBLE\");\n                }\n\n                resultSet.close();\n                statement.close();\n                connection.close();\n\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while adding UserData to database [code : 09.2]\");\n                ex.printStackTrace();\n\n            }\n", "            try {\n                preparedStatement = database.getConnection().prepareStatement(\n                        \"INSERT INTO UserData (PlayerUUID, PlayerName, \" + placeholderColumnName + \") VALUES (?, ?, ?) \" +\n                                \"ON DUPLICATE KEY UPDATE \" + placeholderColumnName + \" = VALUES(\" + placeholderColumnName + \")\"\n                );\n                preparedStatement.setString(1, UUID);\n                preparedStatement.setString(2, name);\n                preparedStatement.setDouble(3, value);\n\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while adding UserData to database [code : 09.3]\");\n                ex.printStackTrace();\n\n            }\n        }\n    }\n\n", "    public static Map<String, Double> getTopPlayerMap(String placeholderColumnName, int top, boolean ishigherbetter) {\n        Map<String, Double> topPlayerScores = new LinkedHashMap<>();\n        MainConfig mainConfig = new MainConfig();\n\n        try {\n            Database database = new Database();\n            PreparedStatement preparedStatement;\n\n            String databaseName = mainConfig.getStorageType(); // Get the name of the current database\n\n            String query;", "            if (ishigherbetter){\n                if (databaseName.equalsIgnoreCase(\"h2\")) {\n                    query = \"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" DESC LIMIT \" + top;\n                } else if (databaseName.equalsIgnoreCase(\"mysql\")) {\n                    query = \"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" DESC LIMIT \" + top;\n                } else {\n                    // Unsupported database type\n                    throw new UnsupportedOperationException(\"Unsupported database type: \" + databaseName);\n                }\n            }else{\n                if (databaseName.equalsIgnoreCase(\"h2\")) {\n                    query = \"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" ASC LIMIT \" + top;", "                if (databaseName.equalsIgnoreCase(\"h2\")) {\n                    query = \"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" ASC LIMIT \" + top;\n                } else if (databaseName.equalsIgnoreCase(\"mysql\")) {\n                    query = \"SELECT PlayerName, \" + placeholderColumnName + \" FROM UserData ORDER BY \" + placeholderColumnName + \" ASC LIMIT \" + top;\n                } else {\n                    // Unsupported database type\n                    throw new UnsupportedOperationException(\"Unsupported database type: \" + databaseName);\n                }\n            }\n\n\n            preparedStatement = database.getConnection().prepareStatement(query);\n            ResultSet rs = preparedStatement.executeQuery();", "            while (rs.next()) {\n                String playerName = rs.getString(\"PlayerName\");\n                double score = rs.getDouble(placeholderColumnName);\n                if (ishigherbetter){\n                    if (score > 0){\n                        topPlayerScores.put(playerName, score);\n                    }\n                }else{\n                    topPlayerScores.put(playerName, score);\n                }\n            }\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading Userdata, please check your placeholders in leaderboard configs [code : 10]\");\n        }\n\n        return topPlayerScores;\n    }\n", "    public static void setScheduleLastSent(String leaderboard, Timestamp timestamp){\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n            try {\n                preparedStatement = database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);\");\n                preparedStatement.setString(1, leaderboard);\n                preparedStatement.setTimestamp(2, timestamp);\n                int rowsUpdated = preparedStatement.executeUpdate();\n                preparedStatement.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 13]\");\n            }", "        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n            try {\n                preparedStatement = database.getConnection().prepareStatement(\n                        \"REPLACE INTO Schedule (Leaderboard, LastSent) VALUES (?, ?)\"\n                );\n                preparedStatement.setString(1, leaderboard);\n                preparedStatement.setTimestamp(2, timestamp);\n                int rowsUpdated = preparedStatement.executeUpdate();\n\n                preparedStatement.close();\n\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 13.1]\");\n            }\n        }\n    }\n", "    public  static  boolean isScheduleAlredySent(String leaderboard){\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        try{\n            preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");\n            preparedStatement.setString(1, leaderboard);\n            ResultSet rs = preparedStatement.executeQuery();\n            if (rs.next()) {\n                int count = rs.getInt(\"count\");\n                return count > 0;\n            }\n            preparedStatement.close();\n        }catch (SQLException ex){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 14]\");\n        }\n        return false;\n    }\n", "            if (rs.next()) {\n                int count = rs.getInt(\"count\");\n                return count > 0;\n            }\n            preparedStatement.close();\n        }catch (SQLException ex){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 14]\");\n        }\n        return false;\n    }\n", "    public static Timestamp getScheduleLastSent(String leaderboard){\n        Timestamp lastsent = Timestamp.valueOf(\"2000-01-01 00:00:00\"); //Default Value - for check if lastsent\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        try{\n            preparedStatement = database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");\n            preparedStatement.setString(1, leaderboard);\n            ResultSet rs = preparedStatement.executeQuery();\n            if (rs.next()) {\n                lastsent = rs.getTimestamp(\"LastSent\");\n            }\n            preparedStatement.close();\n        }catch (SQLException ex){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 15]\");\n        }\n        return lastsent;\n    }\n", "            if (rs.next()) {\n                lastsent = rs.getTimestamp(\"LastSent\");\n            }\n            preparedStatement.close();\n        }catch (SQLException ex){\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading data in database  [code : 15]\");\n        }\n        return lastsent;\n    }\n\n    public static void setCache(String leaderboard, String cache) {\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();", "    public static void setCache(String leaderboard, String cache) {\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")){\n            try {\n                Connection conn = database.getConnection();\n                preparedStatement = conn.prepareStatement(\"MERGE INTO LiveCache s USING (VALUES (?, ?)) data (Leaderboard, Cache) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.Cache = data.Cache WHEN NOT MATCHED THEN INSERT (Leaderboard, Cache) VALUES (data.Leaderboard, data.Cache);\");\n                preparedStatement.setString(1, leaderboard);\n\n                // Convert the 'cache' string to a Clob object\n                Clob clob = conn.createClob();\n                clob.setString(1, cache);\n                preparedStatement.setClob(2, clob);\n\n                int rowsUpdated = preparedStatement.executeUpdate();\n                conn.close();\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while saving Live Cache [code : 02]\");\n\n            }\n", "        } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n\n            try {\n                Connection conn = database.getConnection();\n                preparedStatement = conn.prepareStatement(\n                        \"INSERT INTO LiveCache (Leaderboard, Cache) VALUES (?, ?) \" +\n                                \"ON DUPLICATE KEY UPDATE Cache = VALUES(Cache)\"\n                );\n                preparedStatement.setString(1, leaderboard);\n                preparedStatement.setString(2, cache);\n\n                int rowsUpdated = preparedStatement.executeUpdate();\n                preparedStatement.close();\n                conn.close();\n\n            } catch (SQLException ex) {\n                Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while saving Live Cache [code : 02.1]\");\n\n            }\n        }\n\n    }\n", "    public static String getCache(String leaderboard) {\n        String cache = null;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        PreparedStatement preparedStatement;\n        ResultSet resultSet;\n        try {\n            Connection conn = database.getConnection();\n            preparedStatement = conn.prepareStatement(\"SELECT Cache FROM LiveCache WHERE Leaderboard = ?\");\n            preparedStatement.setString(1, leaderboard);\n            resultSet = preparedStatement.executeQuery();", "            if (resultSet.next()) {\n                Clob clob = resultSet.getClob(\"Cache\");\n                Reader reader = clob.getCharacterStream();\n                StringBuilder sb = new StringBuilder();\n                char[] buffer = new char[1024];\n                int bytesRead;\n\n                while ((bytesRead = reader.read(buffer)) != -1) {\n                    sb.append(buffer, 0, bytesRead);\n                }\n                cache = sb.toString();\n\n            }\n            resultSet.close();\n            preparedStatement.close();\n            conn.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while reading Live Cache [code : 03]\");\n        } catch (IOException ex) {\n            return null;\n        }\n        return cache;\n    }\n", "    public static void deleteAllValues(String tableName, String columnName) {\n        PreparedStatement preparedStatement;\n        MainConfig mainConfig = new MainConfig();\n        Database database = new Database();\n        try {\n            if (mainConfig.getStorageType().equalsIgnoreCase(\"h2\")) {\n                preparedStatement = database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );\n            } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n                preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );\n            } else {\n                throw new UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());\n            }\n\n            int rowsUpdated = preparedStatement.executeUpdate();\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while deleting data in the database [code: 13]\");\n        }\n    }\n\n\n\n\n}\n", "            } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n                preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );\n            } else {\n                throw new UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());\n            }\n\n            int rowsUpdated = preparedStatement.executeUpdate();\n            preparedStatement.close();\n        } catch (SQLException ex) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"[Dleaderboards] \" + ChatColor.RED + \"Issue while deleting data in the database [code: 13]\");\n        }\n    }\n\n\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/StartMessage.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\nimport org.bukkit.Bukkit;\nimport org.bukkit.ChatColor;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\n\n\npublic class StartMessage {\n    private static final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    public static void sendStartMessage() {\n\n        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"=========================================\");\n        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"Discord Leaderboards Plugin Started !\");\n", "    public static void sendStartMessage() {\n\n        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"=========================================\");\n        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"Discord Leaderboards Plugin Started !\");\n\n        if (Bukkit.getPluginManager().getPlugin(\"PlaceholderAPI\") != null) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.GREEN + \"PlaceholderApi Hooked!\");\n        }else{\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.RED + \"Could not find PlaceholderAPI! This plugin is required.\");\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.RED + \"download the plugin from here\");\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.UNDERLINE + \"https://www.spigotmc.org/resources/placeholderapi.6245/\");\n            Bukkit.getPluginManager().disablePlugin(plugin);\n        }", "        if (Bukkit.getPluginManager().getPlugin(\"DiscordSRV\") != null) {\n            Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.GREEN + \"DiscordSRV Hooked!\");\n        }\n\n        Bukkit.getServer().getConsoleSender().sendMessage(ChatColor.AQUA + \"=========================================\");\n\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/Metrics.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\n/*\n * This Metrics class was auto-generated and can be copied into your project if you are\n * not using a build tool like Gradle or Maven for dependency management.\n *\n * IMPORTANT: You are not allowed to modify this class, except changing the package.\n *\n * Disallowed modifications include but are not limited to:\n *  - Remove the option for users to opt-out\n *  - Change the frequency for data submission", " *  - Remove the option for users to opt-out\n *  - Change the frequency for data submission\n *  - Obfuscate the code (every obfuscator should allow you to make an exception for specific files)\n *  - Reformat the code (if you use a linter, add an exception)\n *\n * Violations will result in a ban of your plugin and account from bStats.\n */\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;", "import java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.lang.reflect.Method;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;", "import java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.UUID;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ScheduledExecutorService;", "import java.util.concurrent.Callable;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.BiConsumer;\nimport java.util.function.Consumer;\nimport java.util.function.Supplier;\nimport java.util.logging.Level;\nimport java.util.stream.Collectors;\nimport java.util.zip.GZIPOutputStream;", "import java.util.stream.Collectors;\nimport java.util.zip.GZIPOutputStream;\nimport javax.net.ssl.HttpsURLConnection;\nimport org.bukkit.Bukkit;\nimport org.bukkit.configuration.file.YamlConfiguration;\nimport org.bukkit.entity.Player;\nimport org.bukkit.plugin.Plugin;\nimport org.bukkit.plugin.java.JavaPlugin;\n\npublic class Metrics {\n\n    private final Plugin plugin;\n\n    private final MetricsBase metricsBase;\n\n    /**\n     * Creates a new Metrics instance.\n     *\n     * @param plugin Your plugin instance.\n     * @param serviceId The id of the service. It can be found at <a\n     *     href=\"https://bstats.org/what-is-my-plugin-id\">What is my plugin id?</a>\n     */\n    public Metrics(JavaPlugin plugin, int serviceId) {\n        this.plugin = plugin;\n        // Get the config file\n        File bStatsFolder = new File(plugin.getDataFolder().getParentFile(), \"bStats\");\n        File configFile = new File(bStatsFolder, \"config.yml\");\n        YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);", "\npublic class Metrics {\n\n    private final Plugin plugin;\n\n    private final MetricsBase metricsBase;\n\n    /**\n     * Creates a new Metrics instance.\n     *\n     * @param plugin Your plugin instance.\n     * @param serviceId The id of the service. It can be found at <a\n     *     href=\"https://bstats.org/what-is-my-plugin-id\">What is my plugin id?</a>\n     */\n    public Metrics(JavaPlugin plugin, int serviceId) {\n        this.plugin = plugin;\n        // Get the config file\n        File bStatsFolder = new File(plugin.getDataFolder().getParentFile(), \"bStats\");\n        File configFile = new File(bStatsFolder, \"config.yml\");\n        YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile);", "        if (!config.isSet(\"serverUuid\")) {\n            config.addDefault(\"enabled\", true);\n            config.addDefault(\"serverUuid\", UUID.randomUUID().toString());\n            config.addDefault(\"logFailedRequests\", false);\n            config.addDefault(\"logSentData\", false);\n            config.addDefault(\"logResponseStatusText\", false);\n            // Inform the server owners about bStats\n            config\n                    .options()\n                    .header(\n                            \"bStats (https://bStats.org) collects some basic information for plugin authors, like how\\n\"\n                                    + \"many people use their plugin and their total player count. It's recommended to keep bStats\\n\"\n                                    + \"enabled, but if you're not comfortable with this, you can turn this setting off. There is no\\n\"\n                                    + \"performance penalty associated with having metrics enabled, and data sent to bStats is fully\\n\"\n                                    + \"anonymous.\")\n                    .copyDefaults(true);", "            try {\n                config.save(configFile);\n            } catch (IOException ignored) {\n            }\n        }\n        // Load the data\n        boolean enabled = config.getBoolean(\"enabled\", true);\n        String serverUUID = config.getString(\"serverUuid\");\n        boolean logErrors = config.getBoolean(\"logFailedRequests\", false);\n        boolean logSentData = config.getBoolean(\"logSentData\", false);\n        boolean logResponseStatusText = config.getBoolean(\"logResponseStatusText\", false);\n        metricsBase =\n                new MetricsBase(\n                        \"bukkit\",\n                        serverUUID,\n                        serviceId,\n                        enabled,\n                        this::appendPlatformData,\n                        this::appendServiceData,\n                        submitDataTask -> Bukkit.getScheduler().runTask(plugin, submitDataTask),\n                        plugin::isEnabled,\n                        (message, error) -> this.plugin.getLogger().log(Level.WARNING, message, error),\n                        (message) -> this.plugin.getLogger().log(Level.INFO, message),\n                        logErrors,\n                        logSentData,\n                        logResponseStatusText);\n    }\n\n    /** Shuts down the underlying scheduler service. */", "    public void shutdown() {\n        metricsBase.shutdown();\n    }\n\n    /**\n     * Adds a custom chart.\n     *\n     * @param chart The chart to add.\n     */\n    public void addCustomChart(CustomChart chart) {\n        metricsBase.addCustomChart(chart);\n    }\n\n    private void appendPlatformData(JsonObjectBuilder builder) {\n        builder.appendField(\"playerAmount\", getPlayerAmount());\n        builder.appendField(\"onlineMode\", Bukkit.getOnlineMode() ? 1 : 0);\n        builder.appendField(\"bukkitVersion\", Bukkit.getVersion());\n        builder.appendField(\"bukkitName\", Bukkit.getName());\n        builder.appendField(\"javaVersion\", System.getProperty(\"java.version\"));\n        builder.appendField(\"osName\", System.getProperty(\"os.name\"));\n        builder.appendField(\"osArch\", System.getProperty(\"os.arch\"));\n        builder.appendField(\"osVersion\", System.getProperty(\"os.version\"));\n        builder.appendField(\"coreCount\", Runtime.getRuntime().availableProcessors());\n    }\n\n    private void appendServiceData(JsonObjectBuilder builder) {\n        builder.appendField(\"pluginVersion\", plugin.getDescription().getVersion());\n    }\n\n    private int getPlayerAmount() {", "    public void addCustomChart(CustomChart chart) {\n        metricsBase.addCustomChart(chart);\n    }\n\n    private void appendPlatformData(JsonObjectBuilder builder) {\n        builder.appendField(\"playerAmount\", getPlayerAmount());\n        builder.appendField(\"onlineMode\", Bukkit.getOnlineMode() ? 1 : 0);\n        builder.appendField(\"bukkitVersion\", Bukkit.getVersion());\n        builder.appendField(\"bukkitName\", Bukkit.getName());\n        builder.appendField(\"javaVersion\", System.getProperty(\"java.version\"));\n        builder.appendField(\"osName\", System.getProperty(\"os.name\"));\n        builder.appendField(\"osArch\", System.getProperty(\"os.arch\"));\n        builder.appendField(\"osVersion\", System.getProperty(\"os.version\"));\n        builder.appendField(\"coreCount\", Runtime.getRuntime().availableProcessors());\n    }\n\n    private void appendServiceData(JsonObjectBuilder builder) {\n        builder.appendField(\"pluginVersion\", plugin.getDescription().getVersion());\n    }\n\n    private int getPlayerAmount() {", "        try {\n            // Around MC 1.8 the return type was changed from an array to a collection,\n            // This fixes java.lang.NoSuchMethodError:\n            // org.bukkit.Bukkit.getOnlinePlayers()Ljava/util/Collection;\n            Method onlinePlayersMethod = Class.forName(\"org.bukkit.Server\").getMethod(\"getOnlinePlayers\");\n            return onlinePlayersMethod.getReturnType().equals(Collection.class)\n                    ? ((Collection<?>) onlinePlayersMethod.invoke(Bukkit.getServer())).size()\n                    : ((Player[]) onlinePlayersMethod.invoke(Bukkit.getServer())).length;\n        } catch (Exception e) {\n            // Just use the new method if the reflection failed\n            return Bukkit.getOnlinePlayers().size();\n        }\n    }\n", "    public static class MetricsBase {\n\n        /** The version of the Metrics class. */\n        public static final String METRICS_VERSION = \"3.0.2\";\n\n        private static final String REPORT_URL = \"https://bStats.org/api/v2/data/%s\";\n\n        private final ScheduledExecutorService scheduler;\n\n        private final String platform;\n\n        private final String serverUuid;\n\n        private final int serviceId;\n\n        private final Consumer<JsonObjectBuilder> appendPlatformDataConsumer;\n\n        private final Consumer<JsonObjectBuilder> appendServiceDataConsumer;\n\n        private final Consumer<Runnable> submitTaskConsumer;\n\n        private final Supplier<Boolean> checkServiceEnabledSupplier;\n\n        private final BiConsumer<String, Throwable> errorLogger;\n\n        private final Consumer<String> infoLogger;\n\n        private final boolean logErrors;\n\n        private final boolean logSentData;\n\n        private final boolean logResponseStatusText;\n\n        private final Set<CustomChart> customCharts = new HashSet<>();\n\n        private final boolean enabled;\n\n        /**\n         * Creates a new MetricsBase class instance.\n         *\n         * @param platform The platform of the service.\n         * @param serviceId The id of the service.\n         * @param serverUuid The server uuid.\n         * @param enabled Whether or not data sending is enabled.\n         * @param appendPlatformDataConsumer A consumer that receives a {@code JsonObjectBuilder} and\n         *     appends all platform-specific data.\n         * @param appendServiceDataConsumer A consumer that receives a {@code JsonObjectBuilder} and\n         *     appends all service-specific data.\n         * @param submitTaskConsumer A consumer that takes a runnable with the submit task. This can be\n         *     used to delegate the data collection to a another thread to prevent errors caused by\n         *     concurrency. Can be {@code null}.\n         * @param checkServiceEnabledSupplier A supplier to check if the service is still enabled.\n         * @param errorLogger A consumer that accepts log message and an error.\n         * @param infoLogger A consumer that accepts info log messages.\n         * @param logErrors Whether or not errors should be logged.\n         * @param logSentData Whether or not the sent data should be logged.\n         * @param logResponseStatusText Whether or not the response status text should be logged.\n         */\n        public MetricsBase(\n                String platform,\n                String serverUuid,\n                int serviceId,\n                boolean enabled,\n                Consumer<JsonObjectBuilder> appendPlatformDataConsumer,\n                Consumer<JsonObjectBuilder> appendServiceDataConsumer,\n                Consumer<Runnable> submitTaskConsumer,\n                Supplier<Boolean> checkServiceEnabledSupplier,\n                BiConsumer<String, Throwable> errorLogger,\n                Consumer<String> infoLogger,\n                boolean logErrors,\n                boolean logSentData,\n                boolean logResponseStatusText) {\n            ScheduledThreadPoolExecutor scheduler =\n                    new ScheduledThreadPoolExecutor(1, task -> new Thread(task, \"bStats-Metrics\"));\n            // We want delayed tasks (non-periodic) that will execute in the future to be\n            // cancelled when the scheduler is shutdown.\n            // Otherwise, we risk preventing the server from shutting down even when\n            // MetricsBase#shutdown() is called\n            scheduler.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n            this.scheduler = scheduler;\n            this.platform = platform;\n            this.serverUuid = serverUuid;\n            this.serviceId = serviceId;\n            this.enabled = enabled;\n            this.appendPlatformDataConsumer = appendPlatformDataConsumer;\n            this.appendServiceDataConsumer = appendServiceDataConsumer;\n            this.submitTaskConsumer = submitTaskConsumer;\n            this.checkServiceEnabledSupplier = checkServiceEnabledSupplier;\n            this.errorLogger = errorLogger;\n            this.infoLogger = infoLogger;\n            this.logErrors = logErrors;\n            this.logSentData = logSentData;\n            this.logResponseStatusText = logResponseStatusText;\n            checkRelocation();", "            if (enabled) {\n                // WARNING: Removing the option to opt-out will get your plugin banned from\n                // bStats\n                startSubmitting();\n            }\n        }\n\n        public void addCustomChart(CustomChart chart) {\n            this.customCharts.add(chart);\n        }\n", "        public void shutdown() {\n            scheduler.shutdown();\n        }\n\n        private void startSubmitting() {\n            final Runnable submitTask =\n                    () -> {\n                        if (!enabled || !checkServiceEnabledSupplier.get()) {\n                            // Submitting data or service is disabled\n                            scheduler.shutdown();\n                            return;\n                        }", "                        if (submitTaskConsumer != null) {\n                            submitTaskConsumer.accept(this::submitData);\n                        } else {\n                            this.submitData();\n                        }\n                    };\n            // Many servers tend to restart at a fixed time at xx:00 which causes an uneven\n            // distribution of requests on the\n            // bStats backend. To circumvent this problem, we introduce some randomness into\n            // the initial and second delay.\n            // WARNING: You must not modify and part of this Metrics class, including the\n            // submit delay or frequency!\n            // WARNING: Modifying this code will get your plugin banned on bStats. Just\n            // don't do it!\n            long initialDelay = (long) (1000 * 60 * (3 + Math.random() * 3));\n            long secondDelay = (long) (1000 * 60 * (Math.random() * 30));\n            scheduler.schedule(submitTask, initialDelay, TimeUnit.MILLISECONDS);\n            scheduler.scheduleAtFixedRate(\n                    submitTask, initialDelay + secondDelay, 1000 * 60 * 30, TimeUnit.MILLISECONDS);\n        }\n\n        private void submitData() {\n            final JsonObjectBuilder baseJsonBuilder = new JsonObjectBuilder();\n            appendPlatformDataConsumer.accept(baseJsonBuilder);\n            final JsonObjectBuilder serviceJsonBuilder = new JsonObjectBuilder();\n            appendServiceDataConsumer.accept(serviceJsonBuilder);\n            JsonObjectBuilder.JsonObject[] chartData =\n                    customCharts.stream()\n                            .map(customChart -> customChart.getRequestJsonObject(errorLogger, logErrors))\n                            .filter(Objects::nonNull)\n                            .toArray(JsonObjectBuilder.JsonObject[]::new);\n            serviceJsonBuilder.appendField(\"id\", serviceId);\n            serviceJsonBuilder.appendField(\"customCharts\", chartData);\n            baseJsonBuilder.appendField(\"service\", serviceJsonBuilder.build());\n            baseJsonBuilder.appendField(\"serverUUID\", serverUuid);\n            baseJsonBuilder.appendField(\"metricsVersion\", METRICS_VERSION);\n            JsonObjectBuilder.JsonObject data = baseJsonBuilder.build();\n            scheduler.execute(\n                    () -> {", "                        try {\n                            // Send the data\n                            sendData(data);\n                        } catch (Exception e) {\n                            // Something went wrong! :(\n                            if (logErrors) {\n                                errorLogger.accept(\"Could not submit bStats metrics data\", e);\n                            }\n                        }\n                    });\n        }\n\n        private void sendData(JsonObjectBuilder.JsonObject data) throws Exception {", "            if (logSentData) {\n                infoLogger.accept(\"Sent bStats metrics data: \" + data.toString());\n            }\n            String url = String.format(REPORT_URL, platform);\n            HttpsURLConnection connection = (HttpsURLConnection) new URL(url).openConnection();\n            // Compress the data to save bandwidth\n            byte[] compressedData = compress(data.toString());\n            connection.setRequestMethod(\"POST\");\n            connection.addRequestProperty(\"Accept\", \"application/json\");\n            connection.addRequestProperty(\"Connection\", \"close\");\n            connection.addRequestProperty(\"Content-Encoding\", \"gzip\");\n            connection.addRequestProperty(\"Content-Length\", String.valueOf(compressedData.length));\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"User-Agent\", \"Metrics-Service/1\");\n            connection.setDoOutput(true);\n            try (DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream())) {\n                outputStream.write(compressedData);\n            }\n            StringBuilder builder = new StringBuilder();\n            try (BufferedReader bufferedReader =\n                         new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n                String line;", "                while ((line = bufferedReader.readLine()) != null) {\n                    builder.append(line);\n                }\n            }\n            if (logResponseStatusText) {\n                infoLogger.accept(\"Sent data to bStats and received response: \" + builder);\n            }\n        }\n\n        /** Checks that the class was properly relocated. */\n        private void checkRelocation() {\n            // You can use the property to disable the check in your test environment", "            if (System.getProperty(\"bstats.relocatecheck\") == null\n                    || !System.getProperty(\"bstats.relocatecheck\").equals(\"false\")) {\n                // Maven's Relocate is clever and changes strings, too. So we have to use this\n                // little \"trick\" ... :D\n                final String defaultPackage =\n                        new String(new byte[] {'o', 'r', 'g', '.', 'b', 's', 't', 'a', 't', 's'});\n                final String examplePackage =\n                        new String(new byte[] {'y', 'o', 'u', 'r', '.', 'p', 'a', 'c', 'k', 'a', 'g', 'e'});\n                // We want to make sure no one just copy & pastes the example and uses the wrong\n                // package names\n                if (MetricsBase.class.getPackage().getName().startsWith(defaultPackage)\n                        || MetricsBase.class.getPackage().getName().startsWith(examplePackage)) {\n                    throw new IllegalStateException(\"bStats Metrics class has not been relocated correctly!\");\n                }\n            }\n        }\n\n        /**\n         * Gzips the given string.\n         *\n         * @param str The string to gzip.\n         * @return The gzipped string.\n         */\n        private static byte[] compress(final String str) throws IOException {", "                if (MetricsBase.class.getPackage().getName().startsWith(defaultPackage)\n                        || MetricsBase.class.getPackage().getName().startsWith(examplePackage)) {\n                    throw new IllegalStateException(\"bStats Metrics class has not been relocated correctly!\");\n                }\n            }\n        }\n\n        /**\n         * Gzips the given string.\n         *\n         * @param str The string to gzip.\n         * @return The gzipped string.\n         */\n        private static byte[] compress(final String str) throws IOException {", "            if (str == null) {\n                return null;\n            }\n            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n            try (GZIPOutputStream gzip = new GZIPOutputStream(outputStream)) {\n                gzip.write(str.getBytes(StandardCharsets.UTF_8));\n            }\n            return outputStream.toByteArray();\n        }\n    }\n", "    public static class SimplePie extends CustomChart {\n\n        private final Callable<String> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public SimplePie(String chartId, Callable<String> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            String value = callable.call();", "            if (value == null || value.isEmpty()) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"value\", value).build();\n        }\n    }\n\n    public static class MultiLineChart extends CustomChart {\n\n        private final Callable<Map<String, Integer>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public MultiLineChart(String chartId, Callable<Map<String, Integer>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Integer> map = callable.call();", "    public static class MultiLineChart extends CustomChart {\n\n        private final Callable<Map<String, Integer>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public MultiLineChart(String chartId, Callable<Map<String, Integer>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Integer> map = callable.call();", "            if (map == null || map.isEmpty()) {\n                // Null = skip the chart\n                return null;\n            }\n            boolean allSkipped = true;\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == 0) {\n                    // Skip this invalid\n                    continue;\n                }\n                allSkipped = false;\n                valuesBuilder.appendField(entry.getKey(), entry.getValue());\n            }", "            if (allSkipped) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n        }\n    }\n\n    public static class AdvancedPie extends CustomChart {\n\n        private final Callable<Map<String, Integer>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public AdvancedPie(String chartId, Callable<Map<String, Integer>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Integer> map = callable.call();", "    public static class AdvancedPie extends CustomChart {\n\n        private final Callable<Map<String, Integer>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public AdvancedPie(String chartId, Callable<Map<String, Integer>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Integer> map = callable.call();", "            if (map == null || map.isEmpty()) {\n                // Null = skip the chart\n                return null;\n            }\n            boolean allSkipped = true;\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                if (entry.getValue() == 0) {\n                    // Skip this invalid\n                    continue;\n                }\n                allSkipped = false;\n                valuesBuilder.appendField(entry.getKey(), entry.getValue());\n            }", "            if (allSkipped) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n        }\n    }\n\n    public static class SimpleBarChart extends CustomChart {\n\n        private final Callable<Map<String, Integer>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public SimpleBarChart(String chartId, Callable<Map<String, Integer>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Integer> map = callable.call();", "    public static class SimpleBarChart extends CustomChart {\n\n        private final Callable<Map<String, Integer>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public SimpleBarChart(String chartId, Callable<Map<String, Integer>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Integer> map = callable.call();", "            if (map == null || map.isEmpty()) {\n                // Null = skip the chart\n                return null;\n            }\n            for (Map.Entry<String, Integer> entry : map.entrySet()) {\n                valuesBuilder.appendField(entry.getKey(), new int[] {entry.getValue()});\n            }\n            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n        }\n    }\n", "    public static class AdvancedBarChart extends CustomChart {\n\n        private final Callable<Map<String, int[]>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public AdvancedBarChart(String chartId, Callable<Map<String, int[]>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, int[]> map = callable.call();", "            if (map == null || map.isEmpty()) {\n                // Null = skip the chart\n                return null;\n            }\n            boolean allSkipped = true;\n            for (Map.Entry<String, int[]> entry : map.entrySet()) {\n                if (entry.getValue().length == 0) {\n                    // Skip this invalid\n                    continue;\n                }\n                allSkipped = false;\n                valuesBuilder.appendField(entry.getKey(), entry.getValue());\n            }", "            if (allSkipped) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n        }\n    }\n\n    public static class DrilldownPie extends CustomChart {\n\n        private final Callable<Map<String, Map<String, Integer>>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public DrilldownPie(String chartId, Callable<Map<String, Map<String, Integer>>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        public JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Map<String, Integer>> map = callable.call();", "    public static class DrilldownPie extends CustomChart {\n\n        private final Callable<Map<String, Map<String, Integer>>> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public DrilldownPie(String chartId, Callable<Map<String, Map<String, Integer>>> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        public JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            JsonObjectBuilder valuesBuilder = new JsonObjectBuilder();\n            Map<String, Map<String, Integer>> map = callable.call();", "            if (map == null || map.isEmpty()) {\n                // Null = skip the chart\n                return null;\n            }\n            boolean reallyAllSkipped = true;\n            for (Map.Entry<String, Map<String, Integer>> entryValues : map.entrySet()) {\n                JsonObjectBuilder valueBuilder = new JsonObjectBuilder();\n                boolean allSkipped = true;\n                for (Map.Entry<String, Integer> valueEntry : map.get(entryValues.getKey()).entrySet()) {\n                    valueBuilder.appendField(valueEntry.getKey(), valueEntry.getValue());\n                    allSkipped = false;\n                }", "                for (Map.Entry<String, Integer> valueEntry : map.get(entryValues.getKey()).entrySet()) {\n                    valueBuilder.appendField(valueEntry.getKey(), valueEntry.getValue());\n                    allSkipped = false;\n                }\n                if (!allSkipped) {\n                    reallyAllSkipped = false;\n                    valuesBuilder.appendField(entryValues.getKey(), valueBuilder.build());\n                }\n            }\n            if (reallyAllSkipped) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n        }\n    }\n", "            if (reallyAllSkipped) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"values\", valuesBuilder.build()).build();\n        }\n    }\n\n    public abstract static class CustomChart {\n\n        private final String chartId;\n\n        protected CustomChart(String chartId) {", "    public abstract static class CustomChart {\n\n        private final String chartId;\n\n        protected CustomChart(String chartId) {\n            if (chartId == null) {\n                throw new IllegalArgumentException(\"chartId must not be null\");\n            }\n            this.chartId = chartId;\n        }\n\n        public JsonObjectBuilder.JsonObject getRequestJsonObject(\n                BiConsumer<String, Throwable> errorLogger, boolean logErrors) {\n            JsonObjectBuilder builder = new JsonObjectBuilder();\n            builder.appendField(\"chartId\", chartId);", "            try {\n                JsonObjectBuilder.JsonObject data = getChartData();\n                if (data == null) {\n                    // If the data is null we don't send the chart.\n                    return null;\n                }\n                builder.appendField(\"data\", data);\n            } catch (Throwable t) {\n                if (logErrors) {\n                    errorLogger.accept(\"Failed to get data for custom chart with id \" + chartId, t);\n                }\n                return null;\n            }\n            return builder.build();\n        }\n\n        protected abstract JsonObjectBuilder.JsonObject getChartData() throws Exception;\n    }\n", "                if (logErrors) {\n                    errorLogger.accept(\"Failed to get data for custom chart with id \" + chartId, t);\n                }\n                return null;\n            }\n            return builder.build();\n        }\n\n        protected abstract JsonObjectBuilder.JsonObject getChartData() throws Exception;\n    }\n", "    public static class SingleLineChart extends CustomChart {\n\n        private final Callable<Integer> callable;\n\n        /**\n         * Class constructor.\n         *\n         * @param chartId The id of the chart.\n         * @param callable The callable which is used to request the chart data.\n         */\n        public SingleLineChart(String chartId, Callable<Integer> callable) {\n            super(chartId);\n            this.callable = callable;\n        }\n\n        @Override\n        protected JsonObjectBuilder.JsonObject getChartData() throws Exception {\n            int value = callable.call();", "            if (value == 0) {\n                // Null = skip the chart\n                return null;\n            }\n            return new JsonObjectBuilder().appendField(\"value\", value).build();\n        }\n    }\n\n    /**\n     * An extremely simple JSON builder.\n     *\n     * <p>While this class is neither feature-rich nor the most performant one, it's sufficient enough\n     * for its use-case.\n     */", "    public static class JsonObjectBuilder {\n\n        private StringBuilder builder = new StringBuilder();\n\n        private boolean hasAtLeastOneField = false;\n\n        public JsonObjectBuilder() {\n            builder.append(\"{\");\n        }\n\n        /**\n         * Appends a null field to the JSON.\n         *\n         * @param key The key of the field.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendNull(String key) {\n            appendFieldUnescaped(key, \"null\");\n            return this;\n        }\n\n        /**\n         * Appends a string field to the JSON.\n         *\n         * @param key The key of the field.\n         * @param value The value of the field.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendField(String key, String value) {\n            if (value == null) {\n                throw new IllegalArgumentException(\"JSON value must not be null\");\n            }\n            appendFieldUnescaped(key, \"\\\"\" + escape(value) + \"\\\"\");\n            return this;\n        }\n\n        /**\n         * Appends an integer field to the JSON.\n         *\n         * @param key The key of the field.\n         * @param value The value of the field.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendField(String key, int value) {\n            appendFieldUnescaped(key, String.valueOf(value));\n            return this;\n        }\n\n        /**\n         * Appends an object to the JSON.\n         *\n         * @param key The key of the field.\n         * @param object The object.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendField(String key, JsonObject object) {\n            if (object == null) {\n                throw new IllegalArgumentException(\"JSON object must not be null\");\n            }\n            appendFieldUnescaped(key, object.toString());\n            return this;\n        }\n\n        /**\n         * Appends a string array to the JSON.\n         *\n         * @param key The key of the field.\n         * @param values The string array.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendField(String key, String[] values) {\n            if (values == null) {\n                throw new IllegalArgumentException(\"JSON values must not be null\");\n            }\n            String escapedValues =\n                    Arrays.stream(values)\n                            .map(value -> \"\\\"\" + escape(value) + \"\\\"\")\n                            .collect(Collectors.joining(\",\"));\n            appendFieldUnescaped(key, \"[\" + escapedValues + \"]\");\n            return this;\n        }\n\n        /**\n         * Appends an integer array to the JSON.\n         *\n         * @param key The key of the field.\n         * @param values The integer array.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendField(String key, int[] values) {\n            if (values == null) {\n                throw new IllegalArgumentException(\"JSON values must not be null\");\n            }\n            String escapedValues =\n                    Arrays.stream(values).mapToObj(String::valueOf).collect(Collectors.joining(\",\"));\n            appendFieldUnescaped(key, \"[\" + escapedValues + \"]\");\n            return this;\n        }\n\n        /**\n         * Appends an object array to the JSON.\n         *\n         * @param key The key of the field.\n         * @param values The integer array.\n         * @return A reference to this object.\n         */", "        public JsonObjectBuilder appendField(String key, JsonObject[] values) {\n            if (values == null) {\n                throw new IllegalArgumentException(\"JSON values must not be null\");\n            }\n            String escapedValues =\n                    Arrays.stream(values).map(JsonObject::toString).collect(Collectors.joining(\",\"));\n            appendFieldUnescaped(key, \"[\" + escapedValues + \"]\");\n            return this;\n        }\n\n        /**\n         * Appends a field to the object.\n         *\n         * @param key The key of the field.\n         * @param escapedValue The escaped value of the field.\n         */\n        private void appendFieldUnescaped(String key, String escapedValue) {", "            if (builder == null) {\n                throw new IllegalStateException(\"JSON has already been built\");\n            }\n            if (key == null) {\n                throw new IllegalArgumentException(\"JSON key must not be null\");\n            }\n            if (hasAtLeastOneField) {\n                builder.append(\",\");\n            }\n            builder.append(\"\\\"\").append(escape(key)).append(\"\\\":\").append(escapedValue);\n            hasAtLeastOneField = true;\n        }\n\n        /**\n         * Builds the JSON string and invalidates this builder.\n         *\n         * @return The built JSON string.\n         */", "        public JsonObject build() {\n            if (builder == null) {\n                throw new IllegalStateException(\"JSON has already been built\");\n            }\n            JsonObject object = new JsonObject(builder.append(\"}\").toString());\n            builder = null;\n            return object;\n        }\n\n        /**\n         * Escapes the given string like stated in https://www.ietf.org/rfc/rfc4627.txt.\n         *\n         * <p>This method escapes only the necessary characters '\"', '\\'. and '\\u0000' - '\\u001F'.\n         * Compact escapes are not used (e.g., '\\n' is escaped as \"\\u000a\" and not as \"\\n\").\n         *\n         * @param value The value to escape.\n         * @return The escaped value.\n         */\n        private static String escape(String value) {\n            final StringBuilder builder = new StringBuilder();", "            for (int i = 0; i < value.length(); i++) {\n                char c = value.charAt(i);\n                if (c == '\"') {\n                    builder.append(\"\\\\\\\"\");\n                } else if (c == '\\\\') {\n                    builder.append(\"\\\\\\\\\");\n                } else if (c <= '\\u000F') {\n                    builder.append(\"\\\\u000\").append(Integer.toHexString(c));\n                } else if (c <= '\\u001F') {\n                    builder.append(\"\\\\u00\").append(Integer.toHexString(c));\n                } else {\n                    builder.append(c);\n                }\n            }\n            return builder.toString();\n        }\n\n        /**\n         * A super simple representation of a JSON object.\n         *\n         * <p>This class only exists to make methods of the {@link JsonObjectBuilder} type-safe and not\n         * allow a raw string inputs for methods like {@link JsonObjectBuilder#appendField(String,\n         * JsonObject)}.\n         */", "                } else if (c <= '\\u001F') {\n                    builder.append(\"\\\\u00\").append(Integer.toHexString(c));\n                } else {\n                    builder.append(c);\n                }\n            }\n            return builder.toString();\n        }\n\n        /**\n         * A super simple representation of a JSON object.\n         *\n         * <p>This class only exists to make methods of the {@link JsonObjectBuilder} type-safe and not\n         * allow a raw string inputs for methods like {@link JsonObjectBuilder#appendField(String,\n         * JsonObject)}.\n         */", "        public static class JsonObject {\n\n            private final String value;\n\n            private JsonObject(String value) {\n                this.value = value;\n            }\n\n            @Override\n            public String toString() {\n                return value;\n            }\n        }\n    }\n}\n", "            public String toString() {\n                return value;\n            }\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/PlayerUtils.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.OfflinePlayer;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\n\npublic class PlayerUtils {", "import java.util.UUID;\n\npublic class PlayerUtils {\n    public static List<UUID> getAllPlayerUUIDs() {\n        List<UUID> playerUUIDs = new ArrayList<>();\n\n        for (OfflinePlayer offlinePlayer : Bukkit.getOfflinePlayers()) {\n            playerUUIDs.add(offlinePlayer.getUniqueId());\n        }\n\n        return playerUUIDs;\n    }\n", "    public static List<OfflinePlayer> getAllPlayers() {\n        List<OfflinePlayer> players = new ArrayList<>();\n\n        Collections.addAll(players, Bukkit.getOfflinePlayers());\n\n        return players;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/MainConfigNewKeysList.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MainConfigNewKeysList {\n    public List<String> newKeys;\n\n    public MainConfigNewKeysList() {\n        newKeys = new ArrayList<>(Arrays.asList(\n                \"storage-method\",\n                \"address\",\n                \"database\",\n                \"username\",\n                \"password\",\n                \"scheduledelaymins\",\n                \"leaderboards\",\n                \"webhook-url\",\n                \"webhook-avatar-url\",\n                \"webhook-user-name\",\n                \"embed-title\",\n                \"embed-url\",\n                \"embed-colour\",\n                \"embed-footer\",\n                \"embed-image\",\n                \"embed-thumbnail\",\n                \"pluginversion\",\n                \"firsttime\",\n                \"discordsrvslashcommand\"\n        ));\n    }\n\n    public List<String> getNewKeys() {\n        return newKeys;\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Utils/DiscordWebhook.java", "chunked_list": ["package org.kasun.discordleaderboards.Utils;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport java.awt.Color;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.lang.reflect.Array;\nimport java.net.URL;\nimport java.util.*;\n", "import java.util.*;\n\n/**\n * Class used to execute Discord Webhooks with low effort\n */\npublic class DiscordWebhook {\n\n    private final String url;\n    private String content;\n    private String username;\n    private String avatarUrl;\n    private boolean tts;\n    private UUID uuid;\n    private final List<EmbedObject> embeds = new ArrayList<>();\n\n    /**\n     * Constructs a new DiscordWebhook instance\n     *\n     * @param url The webhook URL obtained in Discord\n     */\n    public DiscordWebhook(String url) {\n        this.url = url;\n    }\n", "    public void setContent(String content) {\n        this.content = content;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public void setAvatarUrl(String avatarUrl) {\n        this.avatarUrl = avatarUrl;\n    }\n", "    public void setAvatarUrl(String avatarUrl) {\n        this.avatarUrl = avatarUrl;\n    }\n\n    public void setTts(boolean tts) {\n        this.tts = tts;\n    }\n\n    public void addEmbed(EmbedObject embed) {\n        this.embeds.add(embed);\n    }\n", "    public void addEmbed(EmbedObject embed) {\n        this.embeds.add(embed);\n    }\n\n    public void execute() throws IOException{\n        if (this.content == null && this.embeds.isEmpty() ) {\n            throw new IllegalArgumentException(\"Set content or add at least one EmbedObject\");\n        }\n\n\n\n        JSONObject json = new JSONObject();\n\n        json.put(\"content\", this.content);\n        json.put(\"username\", this.username);\n        json.put(\"avatar_url\", this.avatarUrl);\n        json.put(\"tts\", this.tts);\n", "        if (!this.embeds.isEmpty()) {\n            List<JSONObject> embedObjects = new ArrayList<>();\n\n            for (EmbedObject embed : this.embeds) {\n                JSONObject jsonEmbed = new JSONObject();\n\n                jsonEmbed.put(\"title\", embed.getTitle());\n                jsonEmbed.put(\"description\", embed.getDescription());\n                jsonEmbed.put(\"url\", embed.getUrl());\n\n                if (embed.getColor() != null) {\n                    Color color = embed.getColor();\n                    int rgb = color.getRed();\n                    rgb = (rgb << 8) + color.getGreen();\n                    rgb = (rgb << 8) + color.getBlue();\n\n                    jsonEmbed.put(\"color\", rgb);\n                }\n\n                EmbedObject.Footer footer = embed.getFooter();\n                EmbedObject.Image image = embed.getImage();\n                EmbedObject.Thumbnail thumbnail = embed.getThumbnail();\n                EmbedObject.Author author = embed.getAuthor();\n                List<EmbedObject.Field> fields = embed.getFields();\n", "                if (embed.getColor() != null) {\n                    Color color = embed.getColor();\n                    int rgb = color.getRed();\n                    rgb = (rgb << 8) + color.getGreen();\n                    rgb = (rgb << 8) + color.getBlue();\n\n                    jsonEmbed.put(\"color\", rgb);\n                }\n\n                EmbedObject.Footer footer = embed.getFooter();\n                EmbedObject.Image image = embed.getImage();\n                EmbedObject.Thumbnail thumbnail = embed.getThumbnail();\n                EmbedObject.Author author = embed.getAuthor();\n                List<EmbedObject.Field> fields = embed.getFields();\n", "                if (footer != null) {\n                    JSONObject jsonFooter = new JSONObject();\n\n                    jsonFooter.put(\"text\", footer.getText());\n                    jsonEmbed.put(\"footer\", jsonFooter);\n                }\n\n                if (image != null) {\n                    JSONObject jsonImage = new JSONObject();\n\n                    jsonImage.put(\"url\", image.getUrl());\n                    jsonEmbed.put(\"image\", jsonImage);\n                }\n", "                if (thumbnail != null) {\n                    JSONObject jsonThumbnail = new JSONObject();\n\n                    jsonThumbnail.put(\"url\", thumbnail.getUrl());\n                    jsonEmbed.put(\"thumbnail\", jsonThumbnail);\n                }\n\n                if (author != null) {\n                    JSONObject jsonAuthor = new JSONObject();\n\n                    jsonAuthor.put(\"name\", author.getName());\n                    jsonAuthor.put(\"url\", author.getUrl());\n                    jsonAuthor.put(\"icon_url\", author.getIconUrl());\n                    jsonEmbed.put(\"author\", jsonAuthor);\n                }\n\n                List<JSONObject> jsonFields = new ArrayList<>();", "                for (EmbedObject.Field field : fields) {\n                    JSONObject jsonField = new JSONObject();\n\n                    jsonField.put(\"name\", field.getName());\n                    jsonField.put(\"value\", field.getValue());\n                    jsonField.put(\"inline\", field.isInline());\n\n                    jsonFields.add(jsonField);\n                }\n\n                jsonEmbed.put(\"fields\", jsonFields.toArray());\n                embedObjects.add(jsonEmbed);\n            }\n\n            json.put(\"embeds\", embedObjects.toArray());\n        }\n\n        URL url = new URL(this.url);\n        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n        connection.addRequestProperty(\"Content-Type\", \"application/json\");\n        connection.addRequestProperty(\"User-Agent\", \"Java-DiscordWebhook-BY-Gelox_\");\n        connection.setDoOutput(true);\n        connection.setRequestMethod(\"POST\");\n\n        OutputStream stream = connection.getOutputStream();\n        stream.write(json.toString().getBytes());\n        stream.flush();\n        stream.close();\n\n        connection.getInputStream().close(); //I'm not sure why but it doesn't work without getting the InputStream\n        connection.disconnect();\n    }\n", "    public static class EmbedObject {\n        private String title;\n        private String description;\n        private String url;\n        private Color color;\n\n        private Footer footer;\n        private Thumbnail thumbnail;\n        private Image image;\n        private Author author;\n        private List<Field> fields = new ArrayList<>();\n", "        public String getTitle() {\n            return title;\n        }\n\n        public String getDescription() {\n            return description;\n        }\n\n        public String getUrl() {\n            return url;\n        }\n", "        public String getUrl() {\n            return url;\n        }\n\n        public Color getColor() {\n            return color;\n        }\n\n        public Footer getFooter() {\n            return footer;\n        }\n", "        public Footer getFooter() {\n            return footer;\n        }\n\n        public Thumbnail getThumbnail() {\n            return thumbnail;\n        }\n\n        public Image getImage() {\n            return image;\n        }\n", "        public Image getImage() {\n            return image;\n        }\n\n        public Author getAuthor() {\n            return author;\n        }\n\n        public List<Field> getFields() {\n            return fields;\n        }\n", "        public EmbedObject setTitle(String title) {\n            this.title = title;\n            return this;\n        }\n\n        public EmbedObject setDescription(String description) {\n            this.description = description;\n            return this;\n        }\n\n        public EmbedObject setUrl(String url) {\n            this.url = url;\n            return this;\n        }\n", "        public EmbedObject setUrl(String url) {\n            this.url = url;\n            return this;\n        }\n\n        public EmbedObject setColor(Color color) {\n            this.color = color;\n            return this;\n        }\n\n        public EmbedObject setFooter(String text) {\n            this.footer = new Footer(text);\n            return this;\n        }\n", "        public EmbedObject setFooter(String text) {\n            this.footer = new Footer(text);\n            return this;\n        }\n\n        public EmbedObject setThumbnail(String url) {\n            this.thumbnail = new Thumbnail(url);\n            return this;\n        }\n\n        public EmbedObject setImage(String url) {\n            this.image = new Image(url);\n            return this;\n        }\n", "        public EmbedObject setImage(String url) {\n            this.image = new Image(url);\n            return this;\n        }\n\n        public EmbedObject setAuthor(String name, String url, String icon) {\n            this.author = new Author(name, url, icon);\n            return this;\n        }\n\n        public EmbedObject addField(String name, String value, boolean inline) {\n            this.fields.add(new Field(name, value, inline));\n            return this;\n        }\n\n        private class Footer {\n            private String text;\n\n            private Footer(String text) {\n                this.text = text;\n            }\n\n            private String getText() {\n                return text;\n            }\n\n        }\n\n        private class Thumbnail {\n            private String url;\n\n            private Thumbnail(String url) {\n                this.url = url;\n            }\n\n            private String getUrl() {\n                return url;\n            }\n        }\n\n        private class Image {\n            private String url;\n\n            private Image(String url) {\n                this.url = url;\n            }\n\n            private String getUrl() {\n                return url;\n            }\n        }\n\n        private class Author {\n            private String name;\n            private String url;\n            private String iconUrl;\n\n            private Author(String name, String url, String iconUrl) {\n                this.name = name;\n                this.url = url;\n                this.iconUrl = iconUrl;\n            }\n\n            private String getName() {\n                return name;\n            }\n\n            private String getUrl() {\n                return url;\n            }\n\n            private String getIconUrl() {\n                return iconUrl;\n            }\n        }\n\n        private class Field {\n            private String name;\n            private String value;\n            private boolean inline;\n\n            private Field(String name, String value, boolean inline) {\n                this.name = name;\n                this.value = value;\n                this.inline = inline;\n            }\n\n            private String getName() {\n                return name;\n            }\n\n            private String getValue() {\n                return value;\n            }\n\n            private boolean isInline() {\n                return inline;\n            }\n        }\n    }\n\n    private class JSONObject {\n\n        private final HashMap<String, Object> map = new HashMap<>();\n\n        void put(String key, Object value) {", "        public EmbedObject addField(String name, String value, boolean inline) {\n            this.fields.add(new Field(name, value, inline));\n            return this;\n        }\n\n        private class Footer {\n            private String text;\n\n            private Footer(String text) {\n                this.text = text;\n            }\n\n            private String getText() {\n                return text;\n            }\n\n        }\n\n        private class Thumbnail {\n            private String url;\n\n            private Thumbnail(String url) {\n                this.url = url;\n            }\n\n            private String getUrl() {\n                return url;\n            }\n        }\n\n        private class Image {\n            private String url;\n\n            private Image(String url) {\n                this.url = url;\n            }\n\n            private String getUrl() {\n                return url;\n            }\n        }\n\n        private class Author {\n            private String name;\n            private String url;\n            private String iconUrl;\n\n            private Author(String name, String url, String iconUrl) {\n                this.name = name;\n                this.url = url;\n                this.iconUrl = iconUrl;\n            }\n\n            private String getName() {\n                return name;\n            }\n\n            private String getUrl() {\n                return url;\n            }\n\n            private String getIconUrl() {\n                return iconUrl;\n            }\n        }\n\n        private class Field {\n            private String name;\n            private String value;\n            private boolean inline;\n\n            private Field(String name, String value, boolean inline) {\n                this.name = name;\n                this.value = value;\n                this.inline = inline;\n            }\n\n            private String getName() {\n                return name;\n            }\n\n            private String getValue() {\n                return value;\n            }\n\n            private boolean isInline() {\n                return inline;\n            }\n        }\n    }\n\n    private class JSONObject {\n\n        private final HashMap<String, Object> map = new HashMap<>();\n\n        void put(String key, Object value) {", "            if (value != null) {\n                map.put(key, value);\n            }\n        }\n\n        @Override\n        public String toString() {\n            StringBuilder builder = new StringBuilder();\n            Set<Map.Entry<String, Object>> entrySet = map.entrySet();\n            builder.append(\"{\");\n\n            int i = 0;", "            for (Map.Entry<String, Object> entry : entrySet) {\n                Object val = entry.getValue();\n                builder.append(quote(entry.getKey())).append(\":\");\n\n                if (val instanceof String) {\n                    builder.append(quote(String.valueOf(val)));\n                } else if (val instanceof Integer) {\n                    builder.append(Integer.valueOf(String.valueOf(val)));\n                } else if (val instanceof Boolean) {\n                    builder.append(val);\n                } else if (val instanceof JSONObject) {\n                    builder.append(val.toString());", "                } else if (val instanceof Boolean) {\n                    builder.append(val);\n                } else if (val instanceof JSONObject) {\n                    builder.append(val.toString());\n                } else if (val.getClass().isArray()) {\n                    builder.append(\"[\");\n                    int len = Array.getLength(val);\n                    for (int j = 0; j < len; j++) {\n                        builder.append(Array.get(val, j).toString()).append(j != len - 1 ? \",\" : \"\");\n                    }\n                    builder.append(\"]\");\n                }\n\n                builder.append(++i == entrySet.size() ? \"}\" : \",\");\n            }\n\n            return builder.toString();\n        }\n\n        private String quote(String string) {\n            return \"\\\"\" + string + \"\\\"\";\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordSRV/SrvSlashCommands.java", "chunked_list": ["package org.kasun.discordleaderboards.DiscordSRV;\n\nimport github.scarsz.discordsrv.api.commands.PluginSlashCommand;\nimport github.scarsz.discordsrv.api.commands.SlashCommand;\nimport github.scarsz.discordsrv.api.commands.SlashCommandProvider;\nimport github.scarsz.discordsrv.dependencies.jda.api.entities.MessageEmbed;\nimport github.scarsz.discordsrv.dependencies.jda.api.events.interaction.SlashCommandEvent;\nimport github.scarsz.discordsrv.dependencies.jda.api.interactions.commands.OptionType;\nimport github.scarsz.discordsrv.dependencies.jda.api.interactions.commands.build.CommandData;\nimport github.scarsz.discordsrv.dependencies.jda.api.interactions.commands.build.OptionData;", "import github.scarsz.discordsrv.dependencies.jda.api.interactions.commands.build.CommandData;\nimport github.scarsz.discordsrv.dependencies.jda.api.interactions.commands.build.OptionData;\nimport org.bukkit.event.Listener;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\n\nimport java.util.*;\nimport java.util.concurrent.CompletableFuture;\n\npublic class SrvSlashCommands implements Listener, SlashCommandProvider {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    MainConfig mainConfig = new MainConfig();\n    List<String> leaderboardList = mainConfig.getLeaderboardsList();\n    private final String slashCommand = mainConfig.getSlashcommand();\n\n    @Override\n    public Set<PluginSlashCommand> getSlashCommands() {\n        CommandData commandData = new CommandData(slashCommand, \"view leaderboards\");\n        List<OptionData> options = new ArrayList<>();\n        OptionData dropdownOption = new OptionData(OptionType.INTEGER, \"leaderboard\", \"Dropdown Option Description\", true);\n", "import java.util.concurrent.CompletableFuture;\n\npublic class SrvSlashCommands implements Listener, SlashCommandProvider {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    MainConfig mainConfig = new MainConfig();\n    List<String> leaderboardList = mainConfig.getLeaderboardsList();\n    private final String slashCommand = mainConfig.getSlashcommand();\n\n    @Override\n    public Set<PluginSlashCommand> getSlashCommands() {\n        CommandData commandData = new CommandData(slashCommand, \"view leaderboards\");\n        List<OptionData> options = new ArrayList<>();\n        OptionData dropdownOption = new OptionData(OptionType.INTEGER, \"leaderboard\", \"Dropdown Option Description\", true);\n", "        if (leaderboardList.size() != 0) {\n            for (String subcommandName : leaderboardList) {\n                dropdownOption.addChoice(subcommandName, leaderboardList.indexOf(subcommandName));\n            }\n        }\n        options.add(dropdownOption);\n        commandData.addOptions(options);\n\n\n\n\n        return new HashSet<>(Arrays.asList(\n\n                // ping pong\n                new PluginSlashCommand(plugin, new CommandData(\"ping\", \"A classic match of ping pong\")),\n\n                // bests\n                new PluginSlashCommand(plugin, commandData)\n\n        ));\n\n\n    }\n\n\n    @SlashCommand(path = \"*\", deferReply = true)", "    public void bestPlugin(SlashCommandEvent event) {\n        if (!event.getCommandPath().equals(slashCommand)){\n            //ignored\n        } else{\n            CompletableFuture.runAsync(() -> {\n                int option = (int) event.getOption(\"leaderboard\").getAsDouble();\n                Leaderboard leaderboard = new Leaderboard(leaderboardList.get(option));\n                LeaderboardDiscordSrvEmbed leaderboardDiscordSrvEmbed = new LeaderboardDiscordSrvEmbed(leaderboard);\n                MessageEmbed messageEmbed = leaderboardDiscordSrvEmbed.getDiscordsrvEmbed().getMessageEmbed();\n\n                event.getHook().sendMessageEmbeds(messageEmbed).queue();\n            });\n        }\n    }\n\n    @SlashCommand(path = \"ping\")", "    public void pingCommand(SlashCommandEvent event) {\n        event.reply(\"Pong!\").queue();\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordSRV/DiscordsrvEmbed.java", "chunked_list": ["package org.kasun.discordleaderboards.DiscordSRV;\n\nimport github.scarsz.discordsrv.dependencies.jda.api.EmbedBuilder;\nimport github.scarsz.discordsrv.dependencies.jda.api.entities.MessageEmbed;\n\nimport java.awt.*;\n\n\npublic class DiscordsrvEmbed {\n    private String embedTitle;\n    private String embedColour;\n    private String embedFooter;\n    private String embedImage;\n    private String embedThumbnail;\n    private String embedDescription;\n    private MessageEmbed messageEmbed;\n\n", "public class DiscordsrvEmbed {\n    private String embedTitle;\n    private String embedColour;\n    private String embedFooter;\n    private String embedImage;\n    private String embedThumbnail;\n    private String embedDescription;\n    private MessageEmbed messageEmbed;\n\n\n    public MessageEmbed getMessageEmbed() {\n\n        EmbedBuilder embedBuilder = new EmbedBuilder();\n", "    public MessageEmbed getMessageEmbed() {\n\n        EmbedBuilder embedBuilder = new EmbedBuilder();\n\n        if (embedTitle != null && !embedTitle.equals(\"\") && !embedTitle.equals(\"-\")){\n            embedBuilder.setTitle(embedTitle);\n        }\n\n        if (embedColour != null && !embedColour.equals(\"\") && !embedColour.equals(\"-\")){\n            embedBuilder.setColor(Color.decode(embedColour));\n        }\n", "        if (embedColour != null && !embedColour.equals(\"\") && !embedColour.equals(\"-\")){\n            embedBuilder.setColor(Color.decode(embedColour));\n        }\n\n        if (embedFooter != null && !embedFooter.equals(\"\") && !embedFooter.equals(\"-\")){\n            embedBuilder.setFooter(embedFooter);\n        }\n\n        if (embedThumbnail != null && !embedThumbnail.equals(\"\") && !embedThumbnail.equals(\"-\")){\n            embedBuilder.setThumbnail(embedThumbnail);\n        }\n", "        if (embedThumbnail != null && !embedThumbnail.equals(\"\") && !embedThumbnail.equals(\"-\")){\n            embedBuilder.setThumbnail(embedThumbnail);\n        }\n\n        if (embedImage != null && !embedImage.equals(\"\") && !embedImage.equals(\"-\")){\n            embedBuilder.setImage(embedImage);\n        }\n\n        if (embedDescription != null && !embedDescription.equals(\"\") && !embedDescription.equals(\"-\")){\n            embedBuilder.setDescription(embedDescription);\n        }\n\n        return embedBuilder.build();\n    }\n\n\n    //getters and setters\n", "        if (embedDescription != null && !embedDescription.equals(\"\") && !embedDescription.equals(\"-\")){\n            embedBuilder.setDescription(embedDescription);\n        }\n\n        return embedBuilder.build();\n    }\n\n\n    //getters and setters\n\n    public String getEmbedTitle() {\n        return embedTitle;\n    }\n", "    public String getEmbedTitle() {\n        return embedTitle;\n    }\n\n    public void setEmbedTitle(String embedTitle) {\n        this.embedTitle = embedTitle;\n    }\n\n    public String getEmbedColour() {\n        return embedColour;\n    }\n", "    public String getEmbedColour() {\n        return embedColour;\n    }\n\n    public void setEmbedColour(String embedColour) {\n        this.embedColour = embedColour;\n    }\n\n    public String getEmbedFooter() {\n        return embedFooter;\n    }\n", "    public String getEmbedFooter() {\n        return embedFooter;\n    }\n\n    public void setEmbedFooter(String embedFooter) {\n        this.embedFooter = embedFooter;\n    }\n\n    public String getEmbedImage() {\n        return embedImage;\n    }\n", "    public String getEmbedImage() {\n        return embedImage;\n    }\n\n    public void setEmbedImage(String embedImage) {\n        this.embedImage = embedImage;\n    }\n\n    public String getEmbedThumbnail() {\n        return embedThumbnail;\n    }\n", "    public String getEmbedThumbnail() {\n        return embedThumbnail;\n    }\n\n    public void setEmbedThumbnail(String embedThumbnail) {\n        this.embedThumbnail = embedThumbnail;\n    }\n\n    public String getEmbedDescription() {\n        return embedDescription;\n    }\n", "    public String getEmbedDescription() {\n        return embedDescription;\n    }\n\n    public void setEmbedDescription(String embedDescription) {\n        this.embedDescription = embedDescription;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordSRV/JDAListener.java", "chunked_list": ["package org.kasun.discordleaderboards.DiscordSRV;\n\nimport github.scarsz.discordsrv.dependencies.jda.api.events.guild.GuildUnavailableEvent;\nimport github.scarsz.discordsrv.dependencies.jda.api.hooks.ListenerAdapter;\nimport org.bukkit.plugin.Plugin;\nimport org.jetbrains.annotations.NotNull;\n\npublic class JDAListener extends ListenerAdapter {\n\n    private final Plugin plugin;\n\n    public JDAListener(Plugin plugin) {\n        this.plugin = plugin;\n    }\n\n    @Override // we can use any of JDA's events through ListenerAdapter, just by overriding the methods", "    public void onGuildUnavailable(@NotNull GuildUnavailableEvent event) {\n        plugin.getLogger().severe(\"Oh no \" + event.getGuild().getName() + \" went unavailable :(\");\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordSRV/DiscordSrvManager.java", "chunked_list": ["package org.kasun.discordleaderboards.DiscordSRV;\n\nimport github.scarsz.discordsrv.DiscordSRV;\nimport org.bukkit.Bukkit;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\n\npublic class DiscordSrvManager {\n\n    public DiscordSrvManager() {\n        if (Bukkit.getPluginManager().getPlugin(\"DiscordSRV\") != null) {\n            DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n            DiscordSRVListener discordsrvListener = new DiscordSRVListener(plugin);\n            SrvSlashCommands srvSlashCommands = new SrvSlashCommands();\n            DiscordSRV.api.subscribe(discordsrvListener);\n            DiscordSRV.api.addSlashCommandProvider(srvSlashCommands);\n        }\n    }\n\n}\n", "        if (Bukkit.getPluginManager().getPlugin(\"DiscordSRV\") != null) {\n            DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n            DiscordSRVListener discordsrvListener = new DiscordSRVListener(plugin);\n            SrvSlashCommands srvSlashCommands = new SrvSlashCommands();\n            DiscordSRV.api.subscribe(discordsrvListener);\n            DiscordSRV.api.addSlashCommandProvider(srvSlashCommands);\n        }\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordSRV/LeaderboardDiscordSrvEmbed.java", "chunked_list": ["package org.kasun.discordleaderboards.DiscordSRV;\nimport org.kasun.discordleaderboards.Configs.MainConfig;\nimport org.kasun.discordleaderboards.Leaderboard.DescriptionGenerator;\nimport org.kasun.discordleaderboards.Leaderboard.Leaderboard;\nimport org.kasun.discordleaderboards.Leaderboard.TopList;\n\npublic class LeaderboardDiscordSrvEmbed {\n    private Leaderboard leaderboard;\n    private DiscordsrvEmbed discordsrvEmbed;\n    private TopList topList;\n\n    public LeaderboardDiscordSrvEmbed(Leaderboard leaderboard) {\n        this.leaderboard = leaderboard;\n    }\n\n    private String getDefaultIfNullOrEmpty(String value, String defaultValue) {\n        return (value == null || value.isEmpty() || value.equals(\"-\")) ? defaultValue : value;\n    }\n", "    public DiscordsrvEmbed getDiscordsrvEmbed() {\n\n\n        MainConfig mainConfig = new MainConfig();\n        String title = getDefaultIfNullOrEmpty(leaderboard.getConfig().getEmbedTitle(), mainConfig.getDembedTitle());\n        String colour = getDefaultIfNullOrEmpty(leaderboard.getConfig().getEmbedColour(), mainConfig.getDembedColour());\n        String footer = getDefaultIfNullOrEmpty(leaderboard.getConfig().getEmbedFooter(), mainConfig.getDembedFooter());\n        String image = getDefaultIfNullOrEmpty(leaderboard.getConfig().getEmbedImage(), mainConfig.getDembedImage());\n        String thumb = getDefaultIfNullOrEmpty(leaderboard.getConfig().getEmbedThumbnail(), mainConfig.getDembedThumbnail());\n\n\n\n        discordsrvEmbed = new DiscordsrvEmbed();\n        discordsrvEmbed.setEmbedTitle(title);\n        discordsrvEmbed.setEmbedColour(colour);\n        discordsrvEmbed.setEmbedFooter(footer);\n        discordsrvEmbed.setEmbedImage(image);\n        discordsrvEmbed.setEmbedThumbnail(thumb);\n        DescriptionGenerator descriptionGenerator = new DescriptionGenerator(leaderboard);\n        discordsrvEmbed.setEmbedDescription(descriptionGenerator.getDescription(false));\n\n        return discordsrvEmbed;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/DiscordSRV/DiscordSRVListener.java", "chunked_list": ["package org.kasun.discordleaderboards.DiscordSRV;\n\nimport github.scarsz.discordsrv.api.Subscribe;\nimport github.scarsz.discordsrv.api.events.DiscordGuildMessageSentEvent;\nimport github.scarsz.discordsrv.api.events.DiscordReadyEvent;\nimport github.scarsz.discordsrv.util.DiscordUtil;\nimport org.bukkit.plugin.Plugin;\n\n\npublic class DiscordSRVListener {\n    private final Plugin plugin;\n\n    public DiscordSRVListener(Plugin plugin) {\n        this.plugin = plugin;\n    }\n\n    @Subscribe", "\npublic class DiscordSRVListener {\n    private final Plugin plugin;\n\n    public DiscordSRVListener(Plugin plugin) {\n        this.plugin = plugin;\n    }\n\n    @Subscribe\n    public void discordReadyEvent(DiscordReadyEvent event) {\n        // Example of using JDA's events\n        // We need to wait until DiscordSRV has initialized JDA, thus we're doing this inside DiscordReadyEvent\n        DiscordUtil.getJda().addEventListener(new JDAListener(plugin));\n\n        // ... we can also do anything other than listen for events with JDA now,\n        plugin.getLogger().info(\"Chatting on Discord with \" + DiscordUtil.getJda().getUsers().size() + \" users!\");\n        // see https://ci.dv8tion.net/job/JDA/javadoc/ for JDA's javadoc\n        // see https://github.com/DV8FromTheWorld/JDA/wiki for JDA's wiki\n    }\n\n    @Subscribe", "    public void discordReadyEvent(DiscordReadyEvent event) {\n        // Example of using JDA's events\n        // We need to wait until DiscordSRV has initialized JDA, thus we're doing this inside DiscordReadyEvent\n        DiscordUtil.getJda().addEventListener(new JDAListener(plugin));\n\n        // ... we can also do anything other than listen for events with JDA now,\n        plugin.getLogger().info(\"Chatting on Discord with \" + DiscordUtil.getJda().getUsers().size() + \" users!\");\n        // see https://ci.dv8tion.net/job/JDA/javadoc/ for JDA's javadoc\n        // see https://github.com/DV8FromTheWorld/JDA/wiki for JDA's wiki\n    }\n\n    @Subscribe", "    public void onCommand(DiscordGuildMessageSentEvent e) {\n        e.getMessage().reply(e.getMessage());\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Configs/MainConfigUpdator.java", "chunked_list": ["package org.kasun.discordleaderboards.Configs;\n\nimport org.bukkit.configuration.file.FileConfiguration;\nimport org.bukkit.configuration.file.YamlConfiguration;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.kasun.discordleaderboards.Utils.MainConfigNewKeysList;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;", "import java.io.IOException;\nimport java.util.List;\n\npublic class MainConfigUpdator {\n    final DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n    private FileConfiguration config;\n    private File configFile;\n    MainConfigNewKeysList mainConfigNewKeysList = new MainConfigNewKeysList();\n    public MainConfigUpdator() {\n        //getting new kyes list\n        List<String> newkeys = mainConfigNewKeysList.getNewKeys();\n\n        // Initialize the configuration file\n        File configFile = new File(plugin.getDataFolder(), \"config.yml\");\n        config = YamlConfiguration.loadConfiguration(configFile);\n\n        // Check if keys exist in the config file, add missing keys", "        for (String key : newkeys) {\n            if (!config.contains(key)) {\n                switch (key){\n                    case \"discordsrvslashcommand\":\n                        config.set(key, \"leaderboards\");\n                        break;\n                    default:\n                        config.set(key, \"-\");\n                        break;\n                    // Set a default value for the missing key\n\n                }\n            }\n        }\n\n        // Save the config file", "        try {\n            config.save(configFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Configs/MainConfig.java", "chunked_list": ["package org.kasun.discordleaderboards.Configs;\n\n\nimport org.bukkit.configuration.file.FileConfiguration;\nimport org.bukkit.configuration.file.YamlConfiguration;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;", "import java.io.IOException;\nimport java.util.List;\n\npublic class MainConfig {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    private File configFile;\n    private FileConfiguration config;\n    private List<String> leaderboardsList;\n    private String dwebhookurl;\n    private String dwebhookAvatarUrl;\n    private String dwebhookUserName;\n    private String dembedTitle;\n    private String dembedUrl;\n    private String dembedColour;\n    private String dembedFooter;\n    private String dembedImage;\n    private String dembedThumbnail;\n    private String storageType;\n    private String mysqlAddress;\n    private String mysqlDatabase;\n    private String mysqlUsername;\n    private String mysqlPassword;\n    private int scheduleDelayMins;\n    private String pluginVersion;\n    private boolean firstTime;\n    private String slashcommand;\n\n    //constructer\n    public MainConfig() {\n        loadConfig();\n    }\n\n    //load config", "    public void loadConfig() {\n        configFile = new File(plugin.getDataFolder(), \"config.yml\");\n        config = YamlConfiguration.loadConfiguration(configFile);\n        leaderboardsList = config.getStringList(\"leaderboards\");\n        dwebhookurl = config.getString(\"webhook-url\");\n        dwebhookAvatarUrl = config.getString(\"webhook-avatar-url\");\n        dwebhookUserName = config.getString(\"webhook-user-name\");\n        dembedTitle = config.getString(\"embed-title\");\n        dembedUrl = config.getString(\"embed-url\");\n        dembedColour = config.getString(\"embed-colour\");\n        dembedFooter = config.getString(\"embed-footer\");\n        dembedImage = config.getString(\"embed-image\");\n        dembedThumbnail = config.getString(\"embed-thumbnail\");\n        storageType = config.getString(\"storage-method\");\n        mysqlAddress = config.getString(\"address\");\n        mysqlDatabase = config.getString(\"database\");\n        mysqlUsername = config.getString(\"username\");\n        mysqlPassword = config.getString(\"password\");\n        scheduleDelayMins = config.getInt(\"scheduledelaymins\");\n        pluginVersion = config.getString(\"pluginversion\");\n        firstTime = config.getBoolean(\"firsttime\");\n        slashcommand = config.getString(\"discordsrvslashcommand\");\n    }\n\n    //save config", "    public void saveConfig() {\n        config.set(\"leaderboards\", leaderboardsList);\n        config.set(\"webhook-url\", dwebhookurl);\n        config.set(\"webhook-avatar-url\", dwebhookAvatarUrl);\n        config.set(\"webhook-user-name\", dwebhookUserName);\n        config.set(\"embed-title\", dembedTitle);\n        config.set(\"embed-url\", dembedUrl);\n        config.set(\"embed-colour\", dembedColour);\n        config.set(\"embed-footer\", dembedFooter);\n        config.set(\"embed-image\", dembedImage);\n        config.set(\"embed-thumbnail\", dembedThumbnail);\n        config.set(\"storage-method\", storageType);\n        config.set(\"address\", mysqlAddress);\n        config.set(\"database\", mysqlDatabase);\n        config.set(\"username\", mysqlUsername);\n        config.set(\"password\", mysqlPassword);\n        config.set(\"scheduledelaymins\", scheduleDelayMins);\n        config.set(\"pluginversion\", pluginVersion);\n        config.set(\"firsttime\", firstTime);\n        config.set(\"discordsrvslashcommand\", slashcommand);\n", "        try {\n            config.save(configFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n\n    //setters\n    public void setConfig(FileConfiguration config) {\n        this.config = config;", "    public void setConfig(FileConfiguration config) {\n        this.config = config;\n        try{\n            this.config.save(configFile);\n        }catch (IOException ignored){\n\n        }\n    }\n\n    public String getSlashcommand() {\n        return slashcommand;\n    }\n", "    public String getSlashcommand() {\n        return slashcommand;\n    }\n\n    public void setSlashcommand(String slashcommand) {\n        this.slashcommand = slashcommand;\n    }\n\n    public void setLeaderboardsList(List<String> leaderboardsList) {\n        this.leaderboardsList = leaderboardsList;\n    }\n", "    public void setLeaderboardsList(List<String> leaderboardsList) {\n        this.leaderboardsList = leaderboardsList;\n    }\n\n    public void setDwebhookurl(String dwebhookurl) {\n        this.dwebhookurl = dwebhookurl;\n    }\n\n    public void setDwebhookAvatarUrl(String dwebhookAvatarUrl) {\n        this.dwebhookAvatarUrl = dwebhookAvatarUrl;\n    }\n", "    public void setDwebhookAvatarUrl(String dwebhookAvatarUrl) {\n        this.dwebhookAvatarUrl = dwebhookAvatarUrl;\n    }\n\n    public void setDwebhookUserName(String dwebhookUserName) {\n        this.dwebhookUserName = dwebhookUserName;\n    }\n\n    public void setDembedTitle(String dembedTitle) {\n        this.dembedTitle = dembedTitle;\n    }\n", "    public void setDembedTitle(String dembedTitle) {\n        this.dembedTitle = dembedTitle;\n    }\n\n    public void setDembedUrl(String dembedUrl) {\n        this.dembedUrl = dembedUrl;\n    }\n\n    public void setDembedColour(String dembedColour) {\n        this.dembedColour = dembedColour;\n    }\n", "    public void setDembedColour(String dembedColour) {\n        this.dembedColour = dembedColour;\n    }\n\n    public void setDembedFooter(String dembedFooter) {\n        this.dembedFooter = dembedFooter;\n    }\n\n    public void setDembedImage(String dembedImage) {\n        this.dembedImage = dembedImage;\n    }\n", "    public void setDembedImage(String dembedImage) {\n        this.dembedImage = dembedImage;\n    }\n\n    public void setDembedThumbnail(String dembedThumbnail) {\n        this.dembedThumbnail = dembedThumbnail;\n    }\n\n    public void setStorageType(String storageType) {\n        this.storageType = storageType;\n    }\n", "    public void setStorageType(String storageType) {\n        this.storageType = storageType;\n    }\n\n    public void setMysqlAddress(String mysqlAddress) {\n        this.mysqlAddress = mysqlAddress;\n    }\n\n    public void setMysqlDatabase(String mysqlDatabase) {\n        this.mysqlDatabase = mysqlDatabase;\n    }\n", "    public void setMysqlDatabase(String mysqlDatabase) {\n        this.mysqlDatabase = mysqlDatabase;\n    }\n\n    public void setMysqlUsername(String mysqlUsername) {\n        this.mysqlUsername = mysqlUsername;\n    }\n\n    public void setMysqlPassword(String mysqlPassword) {\n        this.mysqlPassword = mysqlPassword;\n    }\n", "    public void setMysqlPassword(String mysqlPassword) {\n        this.mysqlPassword = mysqlPassword;\n    }\n\n    public void setScheduleDelayMins(int scheduleDelayMins) {\n        this.scheduleDelayMins = scheduleDelayMins;\n    }\n\n    public void setPluginVersion(String pluginVersion) {\n        this.pluginVersion = pluginVersion;\n    }\n", "    public void setPluginVersion(String pluginVersion) {\n        this.pluginVersion = pluginVersion;\n    }\n\n    public void setFirstTime(boolean firstTime) {\n        this.firstTime = firstTime;\n    }\n\n    //getters\n    public File getConfigFile() {\n        return configFile;\n    }\n", "    public File getConfigFile() {\n        return configFile;\n    }\n\n    public FileConfiguration getConfig() {\n        return config;\n    }\n\n    public List<String> getLeaderboardsList() {\n        return leaderboardsList;\n    }\n", "    public String getDwebhookurl() {\n        return dwebhookurl;\n    }\n\n    public String getDwebhookAvatarUrl() {\n        return dwebhookAvatarUrl;\n    }\n\n    public String getDwebhookUserName() {\n        return dwebhookUserName;\n    }\n", "    public String getDwebhookUserName() {\n        return dwebhookUserName;\n    }\n\n    public String getDembedTitle() {\n        return dembedTitle;\n    }\n\n    public String getDembedUrl() {\n        return dembedUrl;\n    }\n", "    public String getDembedUrl() {\n        return dembedUrl;\n    }\n\n    public String getDembedColour() {\n        return dembedColour;\n    }\n\n    public String getDembedFooter() {\n        return dembedFooter;\n    }\n", "    public String getDembedFooter() {\n        return dembedFooter;\n    }\n\n    public String getDembedImage() {\n        return dembedImage;\n    }\n\n    public String getDembedThumbnail() {\n        return dembedThumbnail;\n    }\n", "    public String getDembedThumbnail() {\n        return dembedThumbnail;\n    }\n\n    public String getStorageType() {\n        return storageType;\n    }\n\n    public String getMysqlAddress() {\n        return mysqlAddress;\n    }\n", "    public String getMysqlAddress() {\n        return mysqlAddress;\n    }\n\n    public String getMysqlDatabase() {\n        return mysqlDatabase;\n    }\n\n    public String getMysqlUsername() {\n        return mysqlUsername;\n    }\n", "    public String getMysqlUsername() {\n        return mysqlUsername;\n    }\n\n    public String getMysqlPassword() {\n        return mysqlPassword;\n    }\n\n    public int getScheduleDelayMins() {\n        return scheduleDelayMins;\n    }\n", "    public int getScheduleDelayMins() {\n        return scheduleDelayMins;\n    }\n\n    public String getPluginVersion() {\n        return pluginVersion;\n    }\n\n    public boolean isFirstTime() {\n        return firstTime;\n    }\n\n\n}\n", "    public boolean isFirstTime() {\n        return firstTime;\n    }\n\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Configs/ConfigUpdater.java", "chunked_list": ["package org.kasun.discordleaderboards.Configs;\n\nimport org.bukkit.configuration.file.YamlConfiguration;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.Yaml;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;", "import java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\npublic class ConfigUpdater {\n    public ConfigUpdater() {\n        final DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n\n        int i = 0;\n\n        for (String lb : plugin.getConfig().getStringList(\"leaderboards\")) {\n            // Load the old YAML file\n            File oldConfigFile = new File(plugin.getDataFolder(), \"leaderboard/\" + lb + \".yml\");\n            YamlConfiguration oldConfig = YamlConfiguration.loadConfiguration(oldConfigFile);\n\n            // Load the new YAML file from plugin resources\n            InputStream exampleStream = plugin.getResource(\"example.yml\");\n            Map<String, Object> newConfig = loadYaml(exampleStream);\n\n            // Merge the new configuration into the old configuration\n            mergeConfigurations(oldConfig, newConfig);\n\n            // Save the updated configuration to the file\n            saveYaml(oldConfig, oldConfigFile);\n\n            i++;\n        }\n", "        for (String lb : plugin.getConfig().getStringList(\"leaderboards\")) {\n            // Load the old YAML file\n            File oldConfigFile = new File(plugin.getDataFolder(), \"leaderboard/\" + lb + \".yml\");\n            YamlConfiguration oldConfig = YamlConfiguration.loadConfiguration(oldConfigFile);\n\n            // Load the new YAML file from plugin resources\n            InputStream exampleStream = plugin.getResource(\"example.yml\");\n            Map<String, Object> newConfig = loadYaml(exampleStream);\n\n            // Merge the new configuration into the old configuration\n            mergeConfigurations(oldConfig, newConfig);\n\n            // Save the updated configuration to the file\n            saveYaml(oldConfig, oldConfigFile);\n\n            i++;\n        }\n", "        if (i > 0) {\n            plugin.getLogger().info(\"Updated \" + i + \" leaderboards.\");\n        }\n    }\n\n    private static Map<String, Object> loadYaml(InputStream inputStream) {\n        try (InputStreamReader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n            Yaml yaml = new Yaml();\n            return (Map<String, Object>) yaml.load(reader);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private static void mergeConfigurations(YamlConfiguration oldConfig, Map<String, Object> newConfig) {", "        if (oldConfig != null && newConfig != null) {\n            for (Map.Entry<String, Object> entry : newConfig.entrySet()) {\n                oldConfig.set(entry.getKey(), entry.getValue());\n            }\n        }\n    }\n\n    private static void saveYaml(YamlConfiguration config, File configFile) {\n        try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(configFile), StandardCharsets.UTF_8))) {\n            DumperOptions options = new DumperOptions();\n            options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);\n\n            Yaml yaml = new Yaml(options);\n            yaml.dump(config.getValues(true), writer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Configs/ConfigManager.java", "chunked_list": ["package org.kasun.discordleaderboards.Configs;\n\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\n\nimport java.io.*;\nimport java.nio.file.Files;\nimport java.util.List;\n\npublic class ConfigManager {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    public ConfigManager() {\n        plugin.getConfig().options().copyDefaults();\n        plugin.saveDefaultConfig();\n        MainConfig mainConfig = new MainConfig();\n        List<String> itemList = mainConfig.getLeaderboardsList();\n        int scheduleDelay = mainConfig.getScheduleDelayMins();", "\npublic class ConfigManager {\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    public ConfigManager() {\n        plugin.getConfig().options().copyDefaults();\n        plugin.saveDefaultConfig();\n        MainConfig mainConfig = new MainConfig();\n        List<String> itemList = mainConfig.getLeaderboardsList();\n        int scheduleDelay = mainConfig.getScheduleDelayMins();\n        for (String lb : itemList) {\n            CustomConfig c1 = new CustomConfig(lb);\n            c1.setup();\n            c1.get().options().copyDefaults(true);\n            c1.save();\n        }", "        for (String lb : itemList) {\n            CustomConfig c1 = new CustomConfig(lb);\n            c1.setup();\n            c1.get().options().copyDefaults(true);\n            c1.save();\n        }\n        if (mainConfig.isFirstTime()) {\n            copyResourceFile(\"example.yml\", new File(JavaPlugin.getPlugin(DiscordLeaderboards.class).getDataFolder() + \"/leaderboard/\", \"example.yml\"));\n            mainConfig.setFirstTime(false);\n            mainConfig.saveConfig();\n        }\n    }\n", "    public void copyResourceFile(String resourceName, File destination) {\n        try (InputStream inputStream = plugin.getResource(resourceName);\n             OutputStream outputStream = Files.newOutputStream(destination.toPath())) {\n\n            byte[] buffer = new byte[1024];\n            int length;\n            while ((length = inputStream.read(buffer)) > 0) {\n                outputStream.write(buffer, 0, length);\n            }\n        } catch (IOException e) {\n            plugin.getLogger().severe(\"cannot copy file , internal plugin issue please contact the developer  [code : 20]\");\n        }\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Configs/CustomConfig.java", "chunked_list": ["package org.kasun.discordleaderboards.Configs;\n\nimport org.bukkit.configuration.file.FileConfiguration;\nimport org.bukkit.configuration.file.YamlConfiguration;\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class CustomConfig {\n    private final File file;\n    private FileConfiguration customFile;\n    private String name;\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    public CustomConfig(String name) {\n        this.name = name;\n        file = new File(plugin.getDataFolder() + \"/leaderboard/\", name + \".yml\");\n    }\n", "\npublic class CustomConfig {\n    private final File file;\n    private FileConfiguration customFile;\n    private String name;\n    private final DiscordLeaderboards plugin  = DiscordLeaderboards.getInstance();\n    public CustomConfig(String name) {\n        this.name = name;\n        file = new File(plugin.getDataFolder() + \"/leaderboard/\", name + \".yml\");\n    }\n", "    public void setup(){\n        if (!file.exists()){\n            try {\n                file.createNewFile();\n            }catch (IOException ignored){\n            }\n        }\n        customFile = YamlConfiguration.loadConfiguration(file);\n    }\n\n    public FileConfiguration get(){\n        customFile = YamlConfiguration.loadConfiguration(file);\n        return customFile;\n    }\n", "    public FileConfiguration get(){\n        customFile = YamlConfiguration.loadConfiguration(file);\n        return customFile;\n    }\n\n    public void save(){\n        try {\n            customFile.save(file);\n        }catch (IOException e){\n            plugin.getLogger().severe(\"file saving issue , internal plugin issue please contact plugin developer [code : 22]\");\n        }\n    }\n", "    public void reload(){\n        customFile = YamlConfiguration.loadConfiguration(file);\n    }\n\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Listeners/ListenerManager.java", "chunked_list": ["package org.kasun.discordleaderboards.Listeners;\n\nimport org.kasun.discordleaderboards.DiscordLeaderboards;\n\npublic class ListenerManager {\n\n    public ListenerManager() {\n        DiscordLeaderboards plugin = DiscordLeaderboards.getInstance();\n        plugin.getServer().getPluginManager().registerEvents(new PlayerJoin(), plugin);\n        plugin.getServer().getPluginManager().registerEvents(new PlayerQuit(), plugin);\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Listeners/PlayerJoin.java", "chunked_list": ["package org.kasun.discordleaderboards.Listeners;\n\n\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.player.PlayerJoinEvent;\nimport org.kasun.discordleaderboards.Database.UserData;\n\npublic class PlayerJoin implements Listener {\n\n    @EventHandler", "\npublic class PlayerJoin implements Listener {\n\n    @EventHandler\n    public void onPlayerJoin(PlayerJoinEvent e) {\n        Player player = e.getPlayer();\n        UserData userData = new UserData();\n        userData.addUserDataToDBAllPlaceholders(player);\n    }\n}\n"]}
{"filename": "src/main/java/org/kasun/discordleaderboards/Listeners/PlayerQuit.java", "chunked_list": ["package org.kasun.discordleaderboards.Listeners;\n\nimport org.bukkit.entity.Player;\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.player.PlayerQuitEvent;\nimport org.kasun.discordleaderboards.Database.UserData;\n\npublic class PlayerQuit implements Listener {\n\n    @EventHandler", "public class PlayerQuit implements Listener {\n\n    @EventHandler\n    public void onPlayerQuit(PlayerQuitEvent e) {\n        Player player = e.getPlayer();\n        UserData userData = new UserData();\n        userData.addUserDataToDBAllPlaceholders(player);\n    }\n}\n"]}
