{"filename": "src/main/java/com/rosymaple/hitindication/HitIndication.java", "chunked_list": ["package com.rosymaple.hitindication;\n\nimport com.mojang.logging.LogUtils;\nimport com.rosymaple.hitindication.config.HitIndicatorClientConfigs;\nimport com.rosymaple.hitindication.networking.ModPackets;\nimport net.minecraftforge.common.MinecraftForge;\nimport net.minecraftforge.eventbus.api.IEventBus;\nimport net.minecraftforge.fml.ModLoadingContext;\nimport net.minecraftforge.fml.common.Mod;\nimport net.minecraftforge.fml.config.ModConfig;", "import net.minecraftforge.fml.common.Mod;\nimport net.minecraftforge.fml.config.ModConfig;\nimport net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;\nimport net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;\nimport org.slf4j.Logger;\n\n// Trans Rights!!\n\n@Mod(HitIndication.MODID)\npublic class HitIndication\n{\n\n    private static final Logger LOGGER = LogUtils.getLogger();", "@Mod(HitIndication.MODID)\npublic class HitIndication\n{\n\n    private static final Logger LOGGER = LogUtils.getLogger();\n    public static final String MODID = \"hitindication\";\n\n    public HitIndication()\n    {\n        IEventBus eventBus = FMLJavaModLoadingContext.get().getModEventBus();\n\n        eventBus.addListener(this::setup);\n\n        ModLoadingContext.get().registerConfig(ModConfig.Type.CLIENT, HitIndicatorClientConfigs.SPEC, \"hitindication-client.toml\");\n\n        MinecraftForge.EVENT_BUS.register(this);\n    }\n\n    private void setup(final FMLCommonSetupEvent event) {\n        ModPackets.register();\n    }\n\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/config/HitIndicatorClientConfigs.java", "chunked_list": ["package com.rosymaple.hitindication.config;\n\nimport net.minecraftforge.common.ForgeConfigSpec;\n\npublic class HitIndicatorClientConfigs {\n    public static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();\n    public static final ForgeConfigSpec SPEC;\n\n    public static final ForgeConfigSpec.ConfigValue<Integer> MaxIndicatorCount;\n    public static final ForgeConfigSpec.ConfigValue<Boolean> DisplayHitsFromNegativePotions;\n    public static final ForgeConfigSpec.ConfigValue<Integer> FadeRate;", "    public static final ForgeConfigSpec.ConfigValue<Integer> MaxIndicatorCount;\n    public static final ForgeConfigSpec.ConfigValue<Boolean> DisplayHitsFromNegativePotions;\n    public static final ForgeConfigSpec.ConfigValue<Integer> FadeRate;\n    public static final ForgeConfigSpec.ConfigValue<Integer> IndicatorOpacity;\n    public static final ForgeConfigSpec.ConfigValue<Boolean> ShowBlueIndicators;\n    public static final ForgeConfigSpec.ConfigValue<Boolean> SizeDependsOnDamage;\n    public static final ForgeConfigSpec.ConfigValue<Integer> IndicatorDefaultScale;\n    public static final ForgeConfigSpec.ConfigValue<Boolean> EnableHitMarkers;\n    public static final ForgeConfigSpec.ConfigValue<Boolean> EnableHitIndication;\n\n    static {\n        BUILDER.push(\"Hit Indication Config\");\n\n        EnableHitIndication = BUILDER.comment(\"Enables hit indication.\")\n                .translation(\"hitindication.configgui.enable_hit_indication\")\n                .define(\"Enable Hit Indication\", true);\n\n        MaxIndicatorCount = BUILDER.comment(\"Determines maximum indicator count shown on screen (0 = unlimited).\")\n                .translation(\"hitindication.configgui.max_indicator_count\")\n                .defineInRange(\"Max Indicator Count\", 0, 0, Integer.MAX_VALUE);\n\n        DisplayHitsFromNegativePotions = BUILDER.comment(\"Shows red indicator when an entity hits the player with a non-damaging negative potion.\")\n                .translation(\"hitindication.configgui.display_hits_from_negative_potions\")\n                .define(\"Display Hits From Non-Damaging Negative Potions\", false);\n\n        FadeRate = BUILDER.comment(\"Amount of ticks after which indicator disappears.\")\n                .translation(\"hitindication.configgui.fade_rate\")\n                .defineInRange(\"Indicator Fade Rate (Ticks)\", 50, 0, Integer.MAX_VALUE);\n\n        IndicatorOpacity = BUILDER.comment(\"Determines opacity of the indicators.\")\n                .translation(\"hitindication.configgui.indicator_opacity\")\n                .defineInRange(\"Indicator Opacity (0-100)\", 25, 0, 100);\n\n        ShowBlueIndicators = BUILDER.comment(\"Shows blue indicator when the player blocks incoming damage with a shield.\")\n                .translation(\"hitindication.configgui.display_blue_indicators\")\n                .define(\"Show Block Indicator\", true);\n\n        SizeDependsOnDamage = BUILDER.comment(\"Any instance of damage that deals 30 percent or more of max health will result in larger indicators.\")\n                .translation(\"hitindication.configgui.size_depends_on_damage\")\n                .define(\"Heavy damage makes indicator larger\", false);\n\n        IndicatorDefaultScale = BUILDER.comment(\"Determines scale of indicators.\")\n                .translation(\"hitindication.configgui.indicator_default_scale\")\n                .defineInRange(\"Indicator Default Scale (0-100)\", 25, 0, 100);\n\n        EnableHitMarkers = BUILDER.comment(\"Enables hit markers on crit/kill.\")\n                .translation(\"hitindication.configgui.enable_hit_markers\")\n                .define(\"Enable Crit/Kill Markers\", false);\n\n\n        BUILDER.pop();\n        SPEC = BUILDER.build();\n    }\n}\n\n", "    public static final ForgeConfigSpec.ConfigValue<Boolean> EnableHitIndication;\n\n    static {\n        BUILDER.push(\"Hit Indication Config\");\n\n        EnableHitIndication = BUILDER.comment(\"Enables hit indication.\")\n                .translation(\"hitindication.configgui.enable_hit_indication\")\n                .define(\"Enable Hit Indication\", true);\n\n        MaxIndicatorCount = BUILDER.comment(\"Determines maximum indicator count shown on screen (0 = unlimited).\")\n                .translation(\"hitindication.configgui.max_indicator_count\")\n                .defineInRange(\"Max Indicator Count\", 0, 0, Integer.MAX_VALUE);\n\n        DisplayHitsFromNegativePotions = BUILDER.comment(\"Shows red indicator when an entity hits the player with a non-damaging negative potion.\")\n                .translation(\"hitindication.configgui.display_hits_from_negative_potions\")\n                .define(\"Display Hits From Non-Damaging Negative Potions\", false);\n\n        FadeRate = BUILDER.comment(\"Amount of ticks after which indicator disappears.\")\n                .translation(\"hitindication.configgui.fade_rate\")\n                .defineInRange(\"Indicator Fade Rate (Ticks)\", 50, 0, Integer.MAX_VALUE);\n\n        IndicatorOpacity = BUILDER.comment(\"Determines opacity of the indicators.\")\n                .translation(\"hitindication.configgui.indicator_opacity\")\n                .defineInRange(\"Indicator Opacity (0-100)\", 25, 0, 100);\n\n        ShowBlueIndicators = BUILDER.comment(\"Shows blue indicator when the player blocks incoming damage with a shield.\")\n                .translation(\"hitindication.configgui.display_blue_indicators\")\n                .define(\"Show Block Indicator\", true);\n\n        SizeDependsOnDamage = BUILDER.comment(\"Any instance of damage that deals 30 percent or more of max health will result in larger indicators.\")\n                .translation(\"hitindication.configgui.size_depends_on_damage\")\n                .define(\"Heavy damage makes indicator larger\", false);\n\n        IndicatorDefaultScale = BUILDER.comment(\"Determines scale of indicators.\")\n                .translation(\"hitindication.configgui.indicator_default_scale\")\n                .defineInRange(\"Indicator Default Scale (0-100)\", 25, 0, 100);\n\n        EnableHitMarkers = BUILDER.comment(\"Enables hit markers on crit/kill.\")\n                .translation(\"hitindication.configgui.enable_hit_markers\")\n                .define(\"Enable Crit/Kill Markers\", false);\n\n\n        BUILDER.pop();\n        SPEC = BUILDER.build();\n    }\n}\n\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/networking/SetHitMarkerS2CPacket.java", "chunked_list": ["package com.rosymaple.hitindication.networking;\n\nimport com.rosymaple.hitindication.latesthits.ClientLatestHits;\nimport io.netty.buffer.ByteBuf;\nimport net.minecraftforge.network.NetworkEvent;\n\nimport java.util.function.Supplier;\n\npublic class SetHitMarkerS2CPacket {\n    int markerType;\n\n    public SetHitMarkerS2CPacket(int markerType) {\n        this.markerType = markerType;\n    }\n\n    public SetHitMarkerS2CPacket(ByteBuf buf) {\n        markerType = buf.readInt();\n    }\n", "public class SetHitMarkerS2CPacket {\n    int markerType;\n\n    public SetHitMarkerS2CPacket(int markerType) {\n        this.markerType = markerType;\n    }\n\n    public SetHitMarkerS2CPacket(ByteBuf buf) {\n        markerType = buf.readInt();\n    }\n", "    public void toBytes(ByteBuf buf) {\n        buf.writeInt(markerType);\n    }\n\n    public boolean handle(Supplier<NetworkEvent.Context> supplier) {\n        NetworkEvent.Context context = supplier.get();\n        context.enqueueWork(() -> {\n            ClientLatestHits.setHitMarker(markerType);\n        });\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/networking/AddHitIndicatorS2CPacket.java", "chunked_list": ["package com.rosymaple.hitindication.networking;\n\nimport com.rosymaple.hitindication.latesthits.ClientLatestHits;\nimport io.netty.buffer.ByteBuf;\nimport net.minecraftforge.network.NetworkEvent;\n\nimport java.util.function.Supplier;\n\npublic class AddHitIndicatorS2CPacket {\n    double x;\n    double y;\n    double z;\n    int indicatorType;\n    int damagePercent;\n    boolean negativeEffectPotion;\n\n    public AddHitIndicatorS2CPacket(double x, double y, double z, int indicatorType, int damagePercent, boolean negativeEffectPotion) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.indicatorType = indicatorType;\n        this.damagePercent = damagePercent;\n        this.negativeEffectPotion = negativeEffectPotion;\n    }\n\n    public AddHitIndicatorS2CPacket(ByteBuf buf) {\n        x = buf.readDouble();\n        y = buf.readDouble();\n        z = buf.readDouble();\n        indicatorType = buf.readInt();\n        damagePercent = buf.readInt();\n        negativeEffectPotion = buf.readBoolean();\n    }\n", "public class AddHitIndicatorS2CPacket {\n    double x;\n    double y;\n    double z;\n    int indicatorType;\n    int damagePercent;\n    boolean negativeEffectPotion;\n\n    public AddHitIndicatorS2CPacket(double x, double y, double z, int indicatorType, int damagePercent, boolean negativeEffectPotion) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.indicatorType = indicatorType;\n        this.damagePercent = damagePercent;\n        this.negativeEffectPotion = negativeEffectPotion;\n    }\n\n    public AddHitIndicatorS2CPacket(ByteBuf buf) {\n        x = buf.readDouble();\n        y = buf.readDouble();\n        z = buf.readDouble();\n        indicatorType = buf.readInt();\n        damagePercent = buf.readInt();\n        negativeEffectPotion = buf.readBoolean();\n    }\n", "    public void toBytes(ByteBuf buf) {\n        buf.writeDouble(x);\n        buf.writeDouble(y);\n        buf.writeDouble(z);\n        buf.writeInt(indicatorType);\n        buf.writeInt(damagePercent);\n        buf.writeBoolean(negativeEffectPotion);\n    }\n\n    public boolean handle(Supplier<NetworkEvent.Context> supplier) {\n        NetworkEvent.Context context = supplier.get();\n        context.enqueueWork(() -> {\n            ClientLatestHits.addHitIndicator(x, y, z, indicatorType, damagePercent, negativeEffectPotion);\n        });\n        return true;\n    }\n}\n", "    public boolean handle(Supplier<NetworkEvent.Context> supplier) {\n        NetworkEvent.Context context = supplier.get();\n        context.enqueueWork(() -> {\n            ClientLatestHits.addHitIndicator(x, y, z, indicatorType, damagePercent, negativeEffectPotion);\n        });\n        return true;\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/networking/ModPackets.java", "chunked_list": ["package com.rosymaple.hitindication.networking;\n\nimport com.rosymaple.hitindication.HitIndication;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.server.level.ServerPlayer;\nimport net.minecraftforge.network.NetworkDirection;\nimport net.minecraftforge.network.NetworkRegistry;\nimport net.minecraftforge.network.PacketDistributor;\nimport net.minecraftforge.network.simple.SimpleChannel;\n\npublic class ModPackets {\n    private static SimpleChannel INSTANCE;\n", "import net.minecraftforge.network.simple.SimpleChannel;\n\npublic class ModPackets {\n    private static SimpleChannel INSTANCE;\n\n    public static int packetId = 0;\n    public static int id() {\n        return packetId++;\n    }\n\n    public static void register() {\n        SimpleChannel net = NetworkRegistry.ChannelBuilder\n                .named(new ResourceLocation(HitIndication.MODID, \"messages\"))\n                .networkProtocolVersion(() -> \"1.0\")\n                .clientAcceptedVersions(s -> true)\n                .serverAcceptedVersions(s -> true)\n                .simpleChannel();\n\n        INSTANCE = net;\n\n        net.messageBuilder(AddHitIndicatorS2CPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)\n                .decoder(AddHitIndicatorS2CPacket::new)\n                .encoder(AddHitIndicatorS2CPacket::toBytes)\n                .consumer(AddHitIndicatorS2CPacket::handle)\n                .add();\n\n        net.messageBuilder(SetHitMarkerS2CPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)\n                .decoder(SetHitMarkerS2CPacket::new)\n                .encoder(SetHitMarkerS2CPacket::toBytes)\n                .consumer(SetHitMarkerS2CPacket::handle)\n                .add();\n\n    }\n\n    public static <MSG> void sendToPlayer(MSG message, ServerPlayer player) {", "    public static void register() {\n        SimpleChannel net = NetworkRegistry.ChannelBuilder\n                .named(new ResourceLocation(HitIndication.MODID, \"messages\"))\n                .networkProtocolVersion(() -> \"1.0\")\n                .clientAcceptedVersions(s -> true)\n                .serverAcceptedVersions(s -> true)\n                .simpleChannel();\n\n        INSTANCE = net;\n\n        net.messageBuilder(AddHitIndicatorS2CPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)\n                .decoder(AddHitIndicatorS2CPacket::new)\n                .encoder(AddHitIndicatorS2CPacket::toBytes)\n                .consumer(AddHitIndicatorS2CPacket::handle)\n                .add();\n\n        net.messageBuilder(SetHitMarkerS2CPacket.class, id(), NetworkDirection.PLAY_TO_CLIENT)\n                .decoder(SetHitMarkerS2CPacket::new)\n                .encoder(SetHitMarkerS2CPacket::toBytes)\n                .consumer(SetHitMarkerS2CPacket::handle)\n                .add();\n\n    }\n\n    public static <MSG> void sendToPlayer(MSG message, ServerPlayer player) {", "        INSTANCE.send(PacketDistributor.PLAYER.with(() -> player), message);\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/event/HitEvents.java", "chunked_list": ["package com.rosymaple.hitindication.event;\n\nimport com.rosymaple.hitindication.HitIndication;\nimport com.rosymaple.hitindication.latesthits.HitIndicatorType;\nimport com.rosymaple.hitindication.latesthits.HitMarkerType;\nimport com.rosymaple.hitindication.latesthits.PacketsHelper;\nimport net.minecraft.server.level.ServerLevel;\nimport net.minecraft.server.level.ServerPlayer;\nimport net.minecraft.stats.Stats;\nimport net.minecraft.world.damagesource.CombatRules;", "import net.minecraft.stats.Stats;\nimport net.minecraft.world.damagesource.CombatRules;\nimport net.minecraft.world.damagesource.DamageSource;\nimport net.minecraft.world.effect.MobEffectInstance;\nimport net.minecraft.world.effect.MobEffects;\nimport net.minecraft.world.entity.Entity;\nimport net.minecraft.world.entity.LivingEntity;\nimport net.minecraft.world.entity.projectile.AbstractArrow;\nimport net.minecraft.world.entity.projectile.ThrownPotion;\nimport net.minecraft.world.item.alchemy.PotionUtils;", "import net.minecraft.world.entity.projectile.ThrownPotion;\nimport net.minecraft.world.item.alchemy.PotionUtils;\nimport net.minecraft.world.item.enchantment.EnchantmentHelper;\nimport net.minecraft.world.phys.AABB;\nimport net.minecraft.world.phys.Vec3;\nimport net.minecraftforge.event.entity.ProjectileImpactEvent;\nimport net.minecraftforge.event.entity.living.LivingAttackEvent;\nimport net.minecraftforge.event.entity.living.LivingDamageEvent;\nimport net.minecraftforge.event.entity.living.LivingDeathEvent;\nimport net.minecraftforge.event.entity.player.CriticalHitEvent;", "import net.minecraftforge.event.entity.living.LivingDeathEvent;\nimport net.minecraftforge.event.entity.player.CriticalHitEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.common.Mod;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Mod.EventBusSubscriber(modid = HitIndication.MODID)\npublic class HitEvents {\n    @SubscribeEvent", "@Mod.EventBusSubscriber(modid = HitIndication.MODID)\npublic class HitEvents {\n    @SubscribeEvent\n    public static void onAttack(LivingDamageEvent event) {\n        if(event.getSource().getDirectEntity() instanceof ThrownPotion)\n            return;\n\n        if(!(event.getSource().getEntity() instanceof LivingEntity))\n            return;\n\n        if(event.getSource().getEntity().getUUID().equals(event.getEntityLiving().getUUID()))\n            return;\n", "        if(event.getSource().getEntity().getUUID().equals(event.getEntityLiving().getUUID()))\n            return;\n\n        if(event.getSource().getEntity() instanceof ServerPlayer) {\n            if(event.getSource().getDirectEntity() instanceof AbstractArrow)\n                PacketsHelper.addHitMarker((ServerPlayer) event.getSource().getEntity(), HitMarkerType.CRIT);\n        }\n\n        if(!(event.getEntityLiving() instanceof ServerPlayer))\n            return;\n\n        ServerPlayer player = (ServerPlayer)event.getEntityLiving();\n        LivingEntity source = (LivingEntity)event.getSource().getEntity();\n\n        int damagePercent = (int)Math.floor((event.getAmount() / player.getMaxHealth() * 100));\n\n        PacketsHelper.addHitIndicator(player, source, HitIndicatorType.RED, damagePercent, false);\n    }\n\n    @SubscribeEvent", "        if(!(event.getEntityLiving() instanceof ServerPlayer))\n            return;\n\n        ServerPlayer player = (ServerPlayer)event.getEntityLiving();\n        LivingEntity source = (LivingEntity)event.getSource().getEntity();\n\n        int damagePercent = (int)Math.floor((event.getAmount() / player.getMaxHealth() * 100));\n\n        PacketsHelper.addHitIndicator(player, source, HitIndicatorType.RED, damagePercent, false);\n    }\n\n    @SubscribeEvent", "    public static void onCriticalHit(CriticalHitEvent event) {\n        if(!(event.getPlayer() instanceof ServerPlayer) || !event.isVanillaCritical())\n            return;\n\n        ServerPlayer player = (ServerPlayer)event.getPlayer();\n\n        PacketsHelper.addHitMarker(player, HitMarkerType.CRIT);\n    }\n\n    @SubscribeEvent\n    public static void onKill(LivingDeathEvent event) {", "    public static void onKill(LivingDeathEvent event) {\n        if(!(event.getSource().getEntity() instanceof ServerPlayer))\n            return;\n\n        if(event.getSource().getEntity().getUUID().equals(event.getEntityLiving().getUUID()))\n            return;\n\n        ServerPlayer player = (ServerPlayer)event.getSource().getEntity();\n\n        PacketsHelper.addHitMarker(player, HitMarkerType.KILL);\n    }\n\n    @SubscribeEvent", "    public static void onBlock(LivingAttackEvent event) {\n        if(event.getSource().getDirectEntity() instanceof ThrownPotion)\n            return;\n        if(!(event.getSource().getEntity() instanceof LivingEntity))\n            return;\n\n        if(event.getSource().getEntity() instanceof ServerPlayer) {\n            LivingEntity target = event.getEntityLiving();\n            ServerPlayer source = (ServerPlayer)event.getSource().getEntity();\n\n            boolean targetIsBlocking = canBlockDamageSource(target, event.getSource());\n            boolean shieldAboutToBreak = source.getMainHandItem().getItem().canDisableShield(source.getMainHandItem(), target.getMainHandItem(), target, source);\n", "            if(targetIsBlocking && shieldAboutToBreak)\n                PacketsHelper.addHitMarker(source, HitMarkerType.CRIT);\n        }\n\n        if(!(event.getEntityLiving() instanceof ServerPlayer))\n            return;\n\n        ServerPlayer player = (ServerPlayer)event.getEntityLiving();\n        LivingEntity source = (LivingEntity)event.getSource().getEntity();\n\n        boolean playerIsBlocking = canBlockDamageSource(player, event.getSource());\n        boolean shieldAboutToBreak = source.getMainHandItem().getItem().canDisableShield(source.getMainHandItem(), player.getMainHandItem(), player, source);\n", "        if(playerIsBlocking)\n            PacketsHelper.addHitIndicator(player, source, HitIndicatorType.BLUE, shieldAboutToBreak ? 125 : 0, false);\n    }\n\n    @SubscribeEvent\n    public static void onPotion(ProjectileImpactEvent event) {\n        if(!(event.getProjectile().getOwner() instanceof LivingEntity)\n                ||!(event.getProjectile().getOwner().getLevel() instanceof ServerLevel)\n                || !(event.getProjectile() instanceof ThrownPotion))\n            return;\n\n        AABB axisalignedbb = event.getProjectile().getBoundingBox().inflate(4.0D, 2.0D, 4.0D);\n        List<ServerPlayer> list = event.getProjectile().getLevel().getEntitiesOfClass(ServerPlayer.class, axisalignedbb);\n\n        LivingEntity source = (LivingEntity)event.getProjectile().getOwner();\n        ThrownPotion potion = (ThrownPotion)event.getProjectile();\n\n        boolean hasNegativeEffects = PotionUtils.getMobEffects(potion.getItem())\n                .stream().anyMatch((x) -> !x.getEffect().isBeneficial());\n        boolean damagingPotion = PotionUtils.getMobEffects(potion.getItem())\n                .stream().anyMatch((x) -> x.getEffect() == MobEffects.POISON\n                        || x.getEffect() == MobEffects.HARM\n                        || x.getEffect() == MobEffects.WITHER);\n\n        int damagePercent = 0;\n        Optional<MobEffectInstance> instantDamage = PotionUtils.getMobEffects(potion.getItem())\n                .stream().filter((x) -> x.getEffect() == MobEffects.HARM).findFirst();", "        for(ServerPlayer player : list) {\n            if(!player.isAffectedByPotions() || player.getUUID().equals(source.getUUID()))\n                continue;\n\n            if(damagingPotion || hasNegativeEffects) {\n                if(instantDamage.isPresent()) {\n                    damagePercent = (int)Math.floor(applyPotionDamageCalculations(player, DamageSource.MAGIC, 3*(2<<instantDamage.get().getAmplifier())) / player.getMaxHealth() * 100);\n                }\n\n                PacketsHelper.addHitIndicator(player, source, HitIndicatorType.RED, damagePercent, hasNegativeEffects && !damagingPotion);\n            }\n        }\n    }\n\n    private static boolean canBlockDamageSource(LivingEntity player, DamageSource pDamageSource)\n    {\n        Entity entity = pDamageSource.getDirectEntity();\n        boolean flag = false;", "        if (entity instanceof AbstractArrow) {\n            AbstractArrow abstractarrow = (AbstractArrow)entity;\n            if (abstractarrow.getPierceLevel() > 0) {\n                flag = true;\n            }\n        }\n\n        if (!pDamageSource.isBypassArmor() && player.isBlocking() && !flag) {\n            Vec3 vec32 = pDamageSource.getSourcePosition();\n            if (vec32 != null) {\n                Vec3 vec3 = player.getViewVector(1.0F);\n                Vec3 vec31 = vec32.vectorTo(player.position()).normalize();\n                vec31 = new Vec3(vec31.x, 0.0D, vec31.z);", "            if (vec32 != null) {\n                Vec3 vec3 = player.getViewVector(1.0F);\n                Vec3 vec31 = vec32.vectorTo(player.position()).normalize();\n                vec31 = new Vec3(vec31.x, 0.0D, vec31.z);\n                if (vec31.dot(vec3) < 0.0D) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private static float applyPotionDamageCalculations(ServerPlayer player, DamageSource pSource, float pDamage)\n    {", "        if (pSource.isBypassMagic()) {\n            return pDamage;\n        } else {\n            if (player.hasEffect(MobEffects.DAMAGE_RESISTANCE) && pSource != DamageSource.OUT_OF_WORLD) {\n                int i = (player.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;\n                int j = 25 - i;\n                float f = pDamage * (float)j;\n                float f1 = pDamage;\n                pDamage = Math.max(f / 25.0F, 0.0F);\n                float f2 = f1 - pDamage;\n                if (f2 > 0.0F && f2 < 3.4028235E37F) {", "                if (f2 > 0.0F && f2 < 3.4028235E37F) {\n                    if (player instanceof ServerPlayer) {\n                        ((ServerPlayer)player).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_RESISTED), Math.round(f2 * 10.0F));\n                    } else if (pSource.getEntity() instanceof ServerPlayer) {\n                        ((ServerPlayer)pSource.getEntity()).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_DEALT_RESISTED), Math.round(f2 * 10.0F));\n                    }\n                }\n            }\n\n            if (pDamage <= 0.0F) {\n                return 0.0F;\n            } else {\n                int k = EnchantmentHelper.getDamageProtection(player.getArmorSlots(), pSource);", "            if (pDamage <= 0.0F) {\n                return 0.0F;\n            } else {\n                int k = EnchantmentHelper.getDamageProtection(player.getArmorSlots(), pSource);\n                if (k > 0) {\n                    pDamage = CombatRules.getDamageAfterMagicAbsorb(pDamage, (float)k);\n                }\n\n                return pDamage;\n            }\n        }\n    }\n\n\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/event/ClientEvents.java", "chunked_list": ["package com.rosymaple.hitindication.event;\n\nimport com.rosymaple.hitindication.HitIndication;\nimport com.rosymaple.hitindication.latesthits.ClientLatestHits;\nimport net.minecraftforge.client.event.ClientPlayerNetworkEvent;\nimport net.minecraftforge.event.TickEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.common.Mod;\n\n@Mod.EventBusSubscriber(modid = HitIndication.MODID)\npublic class ClientEvents {\n    @SubscribeEvent", "\n@Mod.EventBusSubscriber(modid = HitIndication.MODID)\npublic class ClientEvents {\n    @SubscribeEvent\n    public static void onTick(TickEvent.ClientTickEvent event) {\n        if(event.phase == TickEvent.Phase.END)\n            return;\n\n        ClientLatestHits.tick();\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/event/WorldLeaveEvents.java", "chunked_list": ["package com.rosymaple.hitindication.event;\n\nimport com.rosymaple.hitindication.HitIndication;\nimport com.rosymaple.hitindication.latesthits.ClientLatestHits;\nimport net.minecraft.client.multiplayer.ClientLevel;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.event.world.WorldEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.common.Mod;\n", "import net.minecraftforge.fml.common.Mod;\n\n@Mod.EventBusSubscriber(modid = HitIndication.MODID, value = Dist.CLIENT)\npublic class WorldLeaveEvents {\n    @SubscribeEvent\n    public static void onWorldLeave(WorldEvent.Unload event) {\n        if(!(event.getWorld() instanceof ClientLevel))\n            return;\n\n        ClientLatestHits.clear();\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/event/RenderEvents.java", "chunked_list": ["package com.rosymaple.hitindication.event;\n\nimport com.mojang.blaze3d.systems.RenderSystem;\nimport com.mojang.blaze3d.vertex.PoseStack;\nimport com.mojang.math.Vector3d;\nimport com.mojang.math.Vector3f;\nimport com.rosymaple.hitindication.HitIndication;\nimport com.rosymaple.hitindication.config.HitIndicatorClientConfigs;\nimport com.rosymaple.hitindication.latesthits.*;\nimport net.minecraft.client.Minecraft;", "import com.rosymaple.hitindication.latesthits.*;\nimport net.minecraft.client.Minecraft;\n\nimport net.minecraft.client.gui.Gui;\nimport net.minecraft.client.player.LocalPlayer;\nimport net.minecraft.client.renderer.GameRenderer;\nimport net.minecraft.resources.ResourceLocation;\nimport net.minecraft.util.Mth;\nimport net.minecraft.world.phys.Vec2;\nimport net.minecraft.world.phys.Vec3;", "import net.minecraft.world.phys.Vec2;\nimport net.minecraft.world.phys.Vec3;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.client.event.RenderGameOverlayEvent;\nimport net.minecraftforge.eventbus.api.SubscribeEvent;\nimport net.minecraftforge.fml.common.Mod;\nimport org.lwjgl.opengl.GL11;\n\n@Mod.EventBusSubscriber(modid = HitIndication.MODID, value = Dist.CLIENT)\npublic class RenderEvents {\n    private static final ResourceLocation INDICATOR_RED = new ResourceLocation(HitIndication.MODID, \"textures/hit/indicator_red.png\");\n    private static final ResourceLocation INDICATOR_BLUE = new ResourceLocation(HitIndication.MODID, \"textures/hit/indicator_blue.png\");\n    private static final ResourceLocation[] MARKER_CRIT = {\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit1.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit2.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit3.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit4.png\")\n    };\n    private static final ResourceLocation[] MARKER_KILL = {\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill1.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill2.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill3.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill4.png\")\n    };\n    private static final int textureWidth = 42;\n    private static final int textureHeight = 13;\n    private static final int markerWidth = 20;\n    private static final int markerHeight = 20;\n\n    @SubscribeEvent", "@Mod.EventBusSubscriber(modid = HitIndication.MODID, value = Dist.CLIENT)\npublic class RenderEvents {\n    private static final ResourceLocation INDICATOR_RED = new ResourceLocation(HitIndication.MODID, \"textures/hit/indicator_red.png\");\n    private static final ResourceLocation INDICATOR_BLUE = new ResourceLocation(HitIndication.MODID, \"textures/hit/indicator_blue.png\");\n    private static final ResourceLocation[] MARKER_CRIT = {\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit1.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit2.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit3.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_crit4.png\")\n    };\n    private static final ResourceLocation[] MARKER_KILL = {\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill1.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill2.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill3.png\"),\n            new ResourceLocation(HitIndication.MODID, \"textures/hit/marker_kill4.png\")\n    };\n    private static final int textureWidth = 42;\n    private static final int textureHeight = 13;\n    private static final int markerWidth = 20;\n    private static final int markerHeight = 20;\n\n    @SubscribeEvent", "    public static void onRender(RenderGameOverlayEvent.Post event) {\n        if(event.getType() != RenderGameOverlayEvent.ElementType.ALL)\n            return;\n\n        Minecraft mc = Minecraft.getInstance();\n\n        int screenMiddleX = event.getWindow().getGuiScaledWidth() / 2;\n        int screenMiddleY = event.getWindow().getGuiScaledHeight() / 2;\n\n        Vec2 lookVec = new Vec2((float)mc.player.getLookAngle().x, (float)mc.player.getLookAngle().z);\n        Vec2 playerPos = new Vec2((float)mc.player.getX(), (float)mc.player.getZ());", "        for(HitIndicator hit : ClientLatestHits.latestHitIndicators) {\n            drawIndicator(event.getMatrixStack(), hit, screenMiddleX, screenMiddleY, playerPos, lookVec);\n        }\n\n        if(ClientLatestHits.currentHitMarker != null)\n            drawHitMarker(event.getMatrixStack(), ClientLatestHits.currentHitMarker, screenMiddleX, screenMiddleY);\n    }\n    private static void drawHitMarker(PoseStack stack, HitMarker hitMarker, int screenMiddleX, int screenMiddleY) {\n        float opacity = hitMarker.getType() == HitMarkerType.CRIT ? 30 : 60;\n        opacity /= 100.0f;\n\n        bindMarkerTexture(hitMarker.getType(), hitMarker.getLifeTime());\n\n        float defaultScale = 1;\n        int scaledTextureWidth = (int)Math.floor(markerWidth * defaultScale);\n        int scaledTextureHeight = (int)Math.floor(markerHeight * defaultScale);\n        RenderSystem.setShaderColor(1, 1, 1, opacity);\n        Gui.blit(stack, screenMiddleX - scaledTextureWidth / 2, screenMiddleY - scaledTextureHeight / 2 , 0, 0, scaledTextureWidth, scaledTextureHeight, scaledTextureWidth, scaledTextureHeight);\n        RenderSystem.setShaderColor(1, 1, 1, 1);\n    }\n\n    private static void drawIndicator(PoseStack stack, HitIndicator hit, int screenMiddleX, int screenMiddleY, Vec2 playerPos, Vec2 lookVec) {\n        Vector3d sourceVec3d = hit.getLocation();\n        Vec2 diff = new Vec2((float)(sourceVec3d.x - playerPos.x), (float)(sourceVec3d.z - playerPos.y));\n        double angleBetween = angleBetween(lookVec, diff);\n        float opacity = hit.getLifeTime() >= 25\n                ? HitIndicatorClientConfigs.IndicatorOpacity.get()\n                : HitIndicatorClientConfigs.IndicatorOpacity.get() * hit.getLifeTime() / 25.0f;\n        opacity /= 100.0f;\n\n        float defaultScale = 1 + HitIndicatorClientConfigs.IndicatorDefaultScale.get() / 100.0f;\n        int scaledTextureWidth = (int)Math.floor(textureWidth * defaultScale);\n        int scaledTextureHeight = (int)Math.floor(textureHeight * defaultScale);", "        if(HitIndicatorClientConfigs.SizeDependsOnDamage.get()) {\n            float scale = Mth.clamp(hit.getDamagePercent() > 30 ? 1 + hit.getDamagePercent() / 125.0f : 1, 0, 3);\n            scaledTextureWidth = (int)Math.floor(scaledTextureWidth * scale);\n            scaledTextureHeight = (int)Math.floor(scaledTextureHeight * scale);\n        }\n\n        float distanceFromPlayer = calculateDistanceFromPlayer(hit.getLocation());\n        float distanceScaling = 1.0f - (distanceFromPlayer <= 10f ? 0f : (distanceFromPlayer - 10.0f) / 10.0f);\n        if(distanceScaling > 1) distanceScaling = 1;\n        if(distanceScaling < 0) distanceScaling = 0;\n        scaledTextureWidth = (int)Math.floor(scaledTextureWidth * distanceScaling);\n        scaledTextureHeight = (int)Math.floor(scaledTextureHeight * distanceScaling);\n\n        RenderSystem.enableBlend();\n        RenderSystem.setShader(GameRenderer::getPositionTexShader);\n        bindIndicatorTexture(hit.getType());\n\n        stack.pushPose();\n        RenderSystem.setShaderColor(1, 1, 1, opacity);\n        stack.translate(screenMiddleX, screenMiddleY, 0);\n        stack.mulPose(Vector3f.ZP.rotationDegrees((float)angleBetween));\n        stack.translate(-screenMiddleX, -screenMiddleY, 0);\n        Gui.blit(stack, screenMiddleX - scaledTextureWidth / 2, screenMiddleY - scaledTextureHeight / 2 - 30 , 0, 0, scaledTextureWidth, scaledTextureHeight, scaledTextureWidth, scaledTextureHeight);\n        RenderSystem.setShaderColor(1, 1, 1, 1);\n        stack.popPose();\n\n        RenderSystem.disableBlend();\n    }\n\n    private static void bindIndicatorTexture(HitIndicatorType type) {\n        switch(type) {\n            case BLUE: RenderSystem.setShaderTexture(0, INDICATOR_BLUE);  break;\n            default: RenderSystem.setShaderTexture(0, INDICATOR_RED);   break;\n        }\n    }\n\n    private static void bindMarkerTexture(HitMarkerType type, int lifetime) {\n        switch(type) {\n            case KILL:", "        if(distanceScaling > 1) distanceScaling = 1;\n        if(distanceScaling < 0) distanceScaling = 0;\n        scaledTextureWidth = (int)Math.floor(scaledTextureWidth * distanceScaling);\n        scaledTextureHeight = (int)Math.floor(scaledTextureHeight * distanceScaling);\n\n        RenderSystem.enableBlend();\n        RenderSystem.setShader(GameRenderer::getPositionTexShader);\n        bindIndicatorTexture(hit.getType());\n\n        stack.pushPose();\n        RenderSystem.setShaderColor(1, 1, 1, opacity);\n        stack.translate(screenMiddleX, screenMiddleY, 0);\n        stack.mulPose(Vector3f.ZP.rotationDegrees((float)angleBetween));\n        stack.translate(-screenMiddleX, -screenMiddleY, 0);\n        Gui.blit(stack, screenMiddleX - scaledTextureWidth / 2, screenMiddleY - scaledTextureHeight / 2 - 30 , 0, 0, scaledTextureWidth, scaledTextureHeight, scaledTextureWidth, scaledTextureHeight);\n        RenderSystem.setShaderColor(1, 1, 1, 1);\n        stack.popPose();\n\n        RenderSystem.disableBlend();\n    }\n\n    private static void bindIndicatorTexture(HitIndicatorType type) {\n        switch(type) {\n            case BLUE: RenderSystem.setShaderTexture(0, INDICATOR_BLUE);  break;\n            default: RenderSystem.setShaderTexture(0, INDICATOR_RED);   break;\n        }\n    }\n\n    private static void bindMarkerTexture(HitMarkerType type, int lifetime) {\n        switch(type) {\n            case KILL:", "                if(lifetime > 6) {\n                    RenderSystem.setShaderTexture(0, MARKER_KILL[9 - lifetime]);\n                    return;\n                }\n                RenderSystem.setShaderTexture(0, MARKER_KILL[3]);\n                break;\n            default:\n                if(lifetime > 6) {\n                    RenderSystem.setShaderTexture(0, MARKER_CRIT[9 - lifetime]);\n                    return;\n                }\n                RenderSystem.setShaderTexture(0, MARKER_CRIT[3]);\n                break;\n        }\n    }\n\n    private static double angleBetween(Vec2 first, Vec2 second) {\n        double dot = first.x * second.x + first.y * second.y;\n        double cross = first.x * second.y - second.x * first.y;\n        double res = Math.atan2(cross, dot) * 180 / Math.PI;\n\n        return res;\n    }\n\n    private static Vec2 getLookVec(LocalPlayer player) {\n        Vec2 vec = new Vec2((float)(-Math.sin(-player.getYRot() * Math.PI / 180.0 - Math.PI)), (float)(-Math.cos(-player.getYRot() * Math.PI / 180.0 - Math.PI)));\n        return vec;\n    }\n\n    private static float calculateDistanceFromPlayer(Vector3d damageLocation) {", "        if(Minecraft.getInstance().player == null)\n            return 0;\n\n        Vec3 playerPos = Minecraft.getInstance().player.getPosition(0);\n        double d0 = damageLocation.x - playerPos.x;\n        double d1 = damageLocation.y - playerPos.y;\n        double d2 = damageLocation.z - playerPos.z;\n        return (float)Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/latesthits/HitIndicator.java", "chunked_list": ["package com.rosymaple.hitindication.latesthits;\n\nimport com.mojang.math.Vector3d;\nimport com.rosymaple.hitindication.config.HitIndicatorClientConfigs;\n\npublic class HitIndicator {\n    private Vector3d damageSourceLocation;\n    private HitIndicatorType hitIndicatorType;\n    private int lifetime;\n    int damagePercent;\n\n    public HitIndicator(double x, double y, double z, HitIndicatorType hitIndicatorType, int damagePercent) {\n        this.damageSourceLocation = new Vector3d(x, y, z);\n        this.hitIndicatorType = hitIndicatorType;\n        this.damagePercent = damagePercent;\n        lifetime = HitIndicatorClientConfigs.FadeRate.get();\n    }\n", "    public void tick() {\n        lifetime--;\n    }\n    public boolean expired() {\n        return lifetime <= 0;\n    }\n    public Vector3d getLocation() {\n        return damageSourceLocation;\n    }\n    public int getLifeTime() { return lifetime; }\n    public HitIndicatorType getType() { return hitIndicatorType; }", "    public int getLifeTime() { return lifetime; }\n    public HitIndicatorType getType() { return hitIndicatorType; }\n    public int getDamagePercent() { return damagePercent; }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/latesthits/HitMarkerType.java", "chunked_list": ["package com.rosymaple.hitindication.latesthits;\n\npublic enum HitMarkerType {\n\n    CRIT(0), KILL(1);\n\n    int type;\n\n    HitMarkerType(int type) {\n        this.type = type;\n    }\n\n    static HitMarkerType fromInt(int integerType) {\n        switch(integerType) {\n            case 1: return HitMarkerType.KILL;\n            default: return HitMarkerType.CRIT;\n        }\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/latesthits/PacketsHelper.java", "chunked_list": ["package com.rosymaple.hitindication.latesthits;\n\nimport com.rosymaple.hitindication.networking.AddHitIndicatorS2CPacket;\nimport com.rosymaple.hitindication.networking.ModPackets;\nimport com.rosymaple.hitindication.networking.SetHitMarkerS2CPacket;\nimport net.minecraft.server.level.ServerPlayer;\nimport net.minecraft.world.entity.LivingEntity;\n\npublic class PacketsHelper {\n    public static void addHitIndicator(ServerPlayer player, LivingEntity damageSource, HitIndicatorType hitIndicatorType, int damagePercent, boolean hasNegativeEffects) {\n        ModPackets.sendToPlayer(new AddHitIndicatorS2CPacket(damageSource.getX(),\n                        damageSource.getY(),\n                        damageSource.getZ(),\n                        hitIndicatorType.type,\n                        damagePercent,\n                        hasNegativeEffects),\n                player);\n    }\n", "public class PacketsHelper {\n    public static void addHitIndicator(ServerPlayer player, LivingEntity damageSource, HitIndicatorType hitIndicatorType, int damagePercent, boolean hasNegativeEffects) {\n        ModPackets.sendToPlayer(new AddHitIndicatorS2CPacket(damageSource.getX(),\n                        damageSource.getY(),\n                        damageSource.getZ(),\n                        hitIndicatorType.type,\n                        damagePercent,\n                        hasNegativeEffects),\n                player);\n    }\n", "    public static void addHitMarker(ServerPlayer player, HitMarkerType hitMarkerType) {\n        ModPackets.sendToPlayer(new SetHitMarkerS2CPacket(hitMarkerType.type), player);\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/latesthits/ClientLatestHits.java", "chunked_list": ["package com.rosymaple.hitindication.latesthits;\n\nimport com.rosymaple.hitindication.config.HitIndicatorClientConfigs;\nimport net.minecraft.client.Minecraft;\nimport net.minecraft.world.entity.Entity;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.api.distmarker.OnlyIn;\n\nimport java.util.ArrayList;\nimport java.util.UUID;", "import java.util.ArrayList;\nimport java.util.UUID;\n\n@OnlyIn(Dist.CLIENT)\npublic class ClientLatestHits {\n    public static ArrayList<HitIndicator> latestHitIndicators = new ArrayList<>();\n    public static HitMarker currentHitMarker = null;\n\n    public static void addHitIndicator(double x, double y, double z, int type, int damagePercent, boolean hasNegativeEffects) {\n        HitIndicatorType hitIndicatorType = HitIndicatorType.fromInt(type);\n", "    public static void addHitIndicator(double x, double y, double z, int type, int damagePercent, boolean hasNegativeEffects) {\n        HitIndicatorType hitIndicatorType = HitIndicatorType.fromInt(type);\n\n        if(!HitIndicatorClientConfigs.EnableHitIndication.get())\n            return;\n\n        if(hitIndicatorType == HitIndicatorType.BLUE && !HitIndicatorClientConfigs.ShowBlueIndicators.get())\n            return;\n\n        if(hasNegativeEffects && !HitIndicatorClientConfigs.DisplayHitsFromNegativePotions.get())\n            return;\n\n        latestHitIndicators.add(new HitIndicator(x, y, z, hitIndicatorType, damagePercent));", "        if(hasNegativeEffects && !HitIndicatorClientConfigs.DisplayHitsFromNegativePotions.get())\n            return;\n\n        latestHitIndicators.add(new HitIndicator(x, y, z, hitIndicatorType, damagePercent));\n        if(HitIndicatorClientConfigs.MaxIndicatorCount.get() > 0 && latestHitIndicators.size() > HitIndicatorClientConfigs.MaxIndicatorCount.get())\n            latestHitIndicators.remove(0);\n    }\n\n    public static void setHitMarker(int type) {\n        HitMarkerType hitMarkerType = HitMarkerType.fromInt(type);\n", "    public static void setHitMarker(int type) {\n        HitMarkerType hitMarkerType = HitMarkerType.fromInt(type);\n\n        if(!HitIndicatorClientConfigs.EnableHitMarkers.get())\n            return;\n\n        currentHitMarker = new HitMarker(hitMarkerType);\n    }\n\n    public static void tick() {\n        for(int i = latestHitIndicators.size()-1; i >= 0; i--) {\n            HitIndicator hitIndicator = latestHitIndicators.get(i);\n            hitIndicator.tick();", "    public static void tick() {\n        for(int i = latestHitIndicators.size()-1; i >= 0; i--) {\n            HitIndicator hitIndicator = latestHitIndicators.get(i);\n            hitIndicator.tick();\n            if(hitIndicator.expired())\n                latestHitIndicators.remove(i);\n        }\n\n        if(currentHitMarker != null) {\n            currentHitMarker.tick();\n            if(currentHitMarker.expired())\n                currentHitMarker = null;\n        }\n\n    }\n", "        if(currentHitMarker != null) {\n            currentHitMarker.tick();\n            if(currentHitMarker.expired())\n                currentHitMarker = null;\n        }\n\n    }\n\n    public static void clear() {\n        latestHitIndicators.clear();\n        currentHitMarker = null;\n    }\n}\n", "    public static void clear() {\n        latestHitIndicators.clear();\n        currentHitMarker = null;\n    }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/latesthits/HitMarker.java", "chunked_list": ["package com.rosymaple.hitindication.latesthits;\n\npublic class HitMarker {\n    private HitMarkerType hitMarkerType;\n    private int lifetime;\n\n    public HitMarker(HitMarkerType hitIndicatorType) {\n        this.hitMarkerType = hitIndicatorType;\n        lifetime = 9;\n    }\n", "    public void tick() {\n        lifetime--;\n    }\n    public boolean expired() {\n        return lifetime <= 0;\n    }\n    public int getLifeTime() { return lifetime; }\n\n    public HitMarkerType getType() { return hitMarkerType; }\n}\n", "    public HitMarkerType getType() { return hitMarkerType; }\n}\n"]}
{"filename": "src/main/java/com/rosymaple/hitindication/latesthits/HitIndicatorType.java", "chunked_list": ["package com.rosymaple.hitindication.latesthits;\n\npublic enum HitIndicatorType {\n    RED(0), BLUE(1);\n\n    int type;\n\n    HitIndicatorType(int type) {\n        this.type = type;\n    }\n\n    static HitIndicatorType fromInt(int integerType) {\n        switch(integerType) {\n            case 1: return HitIndicatorType.BLUE;\n            default: return HitIndicatorType.RED;\n        }\n    }\n}\n"]}
